- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">15</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ENERGY
    EFFICIENCY FOR PORTABLE PROJECTS</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: Arduino-based projects are generally powered by AC mains adapters or USB power
    sources without much thought about power consumption. For portable projects, however,
    it’s important to reduce energy consumption to increase the battery life for a
    longer runtime. This includes projects such as portable games or sensor and data-logging
    projects that don’t have access to external power.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers various methods of improving your Arduino project’s power
    efficiency. You’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Measure the power consumption of your Arduino projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimate project battery life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce Arduino power consumption with software- and hardware-based methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build low-power data-logging devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll also learn some useful tools and methods to work with your Arduino such
    as the Arduino library for the DS3231-type clock IC module, sound sensor modules,
    and a USBasp device to upload sketches to Arduino boards and compatible circuits.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Basic Principles of Electricity</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Portable projects are always, in some form, battery powered. The less power
    you use, the longer your project will last between battery charges or replacements.
    This chapter aims to teach you various ways to enable your projects to last longer
    when away from wired power. Before moving forward, let’s review some basic principles
    of electricity to be sure you have the conceptual foundation to measure power
    consumption and determine battery life later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple terms, *electricity* is a form of energy that we can harness and
    convert into heat, light, movement, and power. Electricity has three main properties:
    current, voltage, and power.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Current**'
  prefs: []
  type: TYPE_NORMAL
- en: The flow of electrical energy through a circuit is called the *current*. Electrical
    current flows through a *circuit* from the positive side of a power source, such
    as a battery, to the negative side of the power source. This is known as *direct
    current (DC)*. For the purposes of this book, we will not deal with *alternating
    current (AC)*.
  prefs: []
  type: TYPE_NORMAL
- en: In some circuits, the negative side is called *ground (GND)*. Current is measured
    in *amperes (A)*, also known as *amps*. Smaller amounts of current are measured
    in *milliamps (mA)*, where 1,000 milliamps is equal to 1 amp.
  prefs: []
  type: TYPE_NORMAL
- en: '**Voltage**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Voltage* is a measure of the difference in potential energy between a circuit’s
    positive and negative ends. It is measured in *volts (V)*. The greater the voltage,
    the faster the current moves through a circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Power**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Power* is a measurement of the rate at which an electrical device converts
    energy from one form to another. Power is measured in *watts (W)*. For example,
    a 100 W incandescent light bulb is much brighter than a 60 W bulb because the
    higher-wattage bulb converts more electrical energy into light.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple mathematical relationship exists among voltage, current, and power:'
  prefs: []
  type: TYPE_NORMAL
- en: Power (*W*) = Voltage (*V*) × Current (*A*)
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use this formula in calculations completed later in this chapter. Next,
    I’ll introduce you to types of power consumption and how that power is measured.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Measuring Power Consumption</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The appropriate method of determining how much power your Arduino project is
    using at a given moment depends on how the power is connected to your Arduino.
    To calculate power consumption in the examples and projects later in this chapter,
    you’ll need to be able to pick an appropriate method of measuring power consumption
    for the project at hand. In this section, I’ll show you various methods of measuring
    your Arduino project’s power consumption.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">USB-Sourced Power</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your project is powered via a USB-based power supply, the easiest way to
    measure power consumption is to use an inline device such as a USB Doctor, shown
    in [Figure 15-1](chapter15.xhtml#fig15-1). The USB Doctor is a small device that
    measures voltage and current passing through a USB cable.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE USB VOLTAGE AND CURRENT MEASUREMENT DEVICE](../images/fig15-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-1: A USB Doctor,
    an inline power measurement device</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: USB Doctors are connected inline between the Arduino and the power source (such
    as a PC, wall wart, or battery bank) and will alternate between showing you the
    current and voltage being used on the digital display. The main value of interest
    is the current, as you use this in the calculation to determine battery life.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Wired Power</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a project has *wired power consumption*, that means it connects to a power
    source via the Arduino’s DC socket or directly into the 5V and GND pins on the
    board or in your circuit. To measure power consumption for such projects, use
    a multimeter with a current setting.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike measuring voltage, where you can just probe across two points, measuring
    current requires the power to enter the multimeter via the current socket and
    exit via the COM socket. To quickly determine if your multimeter has this capacity
    (most do), check whether it has a socket labeled mA or A.
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider the multimeters in [Figure 15-2](chapter15.xhtml#fig15-2).
    Starting with the leftmost multimeter and moving right, you’d use the A mA and
    COM sockets; the 10A and COM sockets; the 20A and COM sockets; and the 10A mA
    and COM sockets.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PICTURE OF DIFFERENT MULTIMETERS WITH THE CURRENT-MEASURING ABILITY](../images/fig15-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-2: Multimeters with
    current-measuring capability</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re presented with both an A-style and an mA-style socket, use the amps
    socket (A) first. If the value displayed falls within the range of the mA setting,
    you can then use that socket and range to get a more precise measurement.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to set your multimeter to the current mode that matches the socket
    being used. If in doubt, review the instruction manual with your multimeter. Once
    you set your multimeter to the current range, the probes need to be connected
    into the power circuit.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the DC socket power supply, an easy way to measure is to use
    a pair of DC terminal connectors such as PMD Way parts 116101M and 116101F, examples
    of which are shown in [Figure 15-3](chapter15.xhtml#fig15-3). You can then run
    wires between the two units and tap in with your meter probes. If your multimeter
    returns a negative value, swap the probes across to change the polarity.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PICTURE OF THE DC PLUG AND SOCKET TERMINAL BLOCKS](../images/fig15-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-3: DC terminal connectors</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: However, if you’re using direct connection to the Arduino’s 5V and GND pins,
    you can easily probe between the power supply positive end and the Arduino’s 5V
    pin.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Arduino Power Consumption</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have an understanding of the types of measurement tools available,
    I’ll give you a baseline idea of consumption. Let’s examine the current consumption
    values I measured with a multimeter from a standard Arduino Uno R3 board with
    the onboard D13 LED turned on. You can then follow along and determine consumption
    for your own project.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 15-1](chapter15.xhtml#tab15-1) lists the current in milliamps along
    with the power source used to power the Arduino. When you measure the current
    draw for your own projects using the methods described in the previous section,
    your measurements may differ from mine a little depending on the brand of Arduino
    or compatible board you’re using.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 15-1:</samp> <samp class="SANS_Futura_Std_Book_11">Arduino
    Current Draw at Various Supply Voltages</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Power source</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Current
    draw (mA)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">12 V via the DC socket</samp> | <samp
    class="SANS_Futura_Std_Book_11">47.9</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">9 V via the DC socket</samp> | <samp
    class="SANS_Futura_Std_Book_11">47.9</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5 V via the 5V pin or USB socket</samp>
    | <samp class="SANS_Futura_Std_Book_11">44.5</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">4.8 V via the 5V pin</samp> | <samp
    class="SANS_Futura_Std_Book_11">42.5</samp> |'
  prefs: []
  type: TYPE_TB
- en: Bear in mind these values are for the Arduino alone. Whatever you add to the
    project will increase the current draw. I’ve measured the current at 4.8 V for
    this example because this is a common voltage when using four AA rechargeable
    cells (as they are 1.2 V, not 1.5 V) or four AA disposable cells that are almost
    at the end of their life span.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino can happily operate on these lower voltages. However, if you’re
    using the microcontroller’s internal ADC to measure analog signals, you’ll need
    to take the reduced operating voltage into account, as the ADC’s reference voltage
    is assumed to be 5 V and not the actual operating voltage. Instead, use the external
    reference voltage pin and the <samp class="SANS_TheSansMonoCd_W5Regular_11">analogReference()</samp>
    function. If you’re not familiar with this process, you can learn more about this
    in Chapter 4 of *Arduino Workshop*, 2nd edition.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea of an Arduino’s usual power consumption when running
    without any external parts, I’ll show you how to calculate approximate battery
    life based on your battery capacity and project current draw.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Estimating Battery Life</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To determine the battery life for your project, you need to determine how much
    current over time (measured in milliamp hours) is used by the project. To do this,
    first measure the current your project draws for a moment from the connected power
    supply. Once you have a current figure for consumption, such as 65 mA, your project
    should draw that amount of current for one hour. This becomes the consumption
    in milliamp hours, or mAh. You can then consider the consumption to be 65 mAh.
  prefs: []
  type: TYPE_NORMAL
- en: If the Arduino activates external devices such as a motor or servo, don’t forget
    to take that extra current into account. If your project runs a motor for, say,
    1 minute every hour, measure the current when the motor is both on and off and
    then determine the total current used for one hour. For example, if the project
    ran a motor at a constant speed for 10 minutes, if the current was measured at
    100 mA, and if the project ran for 50 minutes at 60 mAh, then the consumption
    would be 100 mA × (10 / 60 minutes) + 60 mA × (50 / 60 minutes) = 66.6 mAh.
  prefs: []
  type: TYPE_NORMAL
- en: Next, consider the battery type your project uses. For example, if you have
    a 20 Ah (Amp hours, more often advertised as 20,000 mAh) USB battery bank, as
    shown in [Figure 15-4](chapter15.xhtml#fig15-4), your project should last for
    about 300 hours, since 20,000 / 66.6 = 300.3003\. If your battery is rated in
    Ah, multiply that value by 1,000 to convert to mAh.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PICTURE OF A TYPICAL USB POWER BANK RECHARGEABLE BATTERY](../images/fig15-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-4: A typical USB
    battery bank</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Some battery banks will turn off if there isn’t enough current draw, as part
    of a power-saving measure. Shop for units that have an always-on mode so they
    don’t turn off if your Arduino’s power consumption drops to a very low level.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from battery banks, another popular and simple method of powering portable
    projects is to use nickel–metal hydride (NiMH) AA rechargeable cells in groups
    of four. This gives a supply voltage of 4.8 V DC, which, again, works fine to
    power an Arduino. You would use a four-AA cell holder to hold the cells, as shown
    in [Figure 15-5](chapter15.xhtml#fig15-5), and then directly wire this to the
    Arduino’s 5V and GND pins.
  prefs: []
  type: TYPE_NORMAL
- en: The individual NiMH cells should be marked with their capacity, such as 2,000
    mAh. With a fully charged set of 4 cells in new condition, your 66.6 mA project
    would run for about 30 hours.
  prefs: []
  type: TYPE_NORMAL
- en: If you only have disposable AA cells available, place a diode such as a common
    1N4001 in series between the positive on the battery pack and the 5V pin on the
    Arduino. The anode connects to the battery pack positive output, and the cathode
    connects to the 5V pin on the Arduino. This should drop the voltage of a new pack
    of cells from around 6 V DC down to around 5.3 V DC, which your Arduino can comfortably
    use.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PICTURE OF A FOUR-AA-CELL HOLDER](../images/fig15-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-5: A holder for four
    AA-cell batteries</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Batteries such as NiMH rechargeable units and disposable cells don’t offer a
    constant voltage throughout their life—rather, the voltage will drop toward the
    end of their discharging cycle. Just to make things more complex, disposable battery
    life can vary depending on the amount of current being drawn at any one time.
    For example, the graph shown in [Figure 15-6](chapter15.xhtml#fig15-6) shows that
    the more current is discharged from an Energizer-brand alkaline-type AA cell,
    the less capacity there is for use.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig15-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-6: Capacity versus
    discharge rate for a disposable Energizer-brand alkaline AA-cell battery</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most accurate battery life estimate possible for your project, locate
    and review the data sheets of the battery type you’re interested in. They will
    offer discharge-rate graphs, performance at various temperatures, and more interesting
    information that helps you make an informed decision.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to measure your project’s power consumption and can choose
    between various portable power options, I’ll explain various methods of reducing
    power consumption. You’ll put these methods into use in the following projects.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Software-Based Methods to Reduce Power
    Consumption</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use low-power functions with your Arduino, you’ll need to install a library.
    Open the IDE’s library manager and search for **low-power rocket**; then install
    the Low-Power library by Rocket Scream Electronics, as shown in [Figure 15-7](chapter15.xhtml#fig15-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE LOW-POWER LIBRARY FOR ARDUINO SEARCH RESULT](../images/fig15-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-7: Low-Power library
    installation</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, I’ll show you two ways to use this library to reduce
    power consumption. You’ll first practice programming Power Down/Wake mode in the
    following homework and then move on to testing Wake on Interrupt mode. The examples
    and projects in this chapter use the Arduino Uno or compatible board with an ATmega328
    microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Power Down/Wake Periodic
    Mode</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Power Down/Wake Periodic mode is useful when you need your Arduino to perform
    a certain task on a regular basis and then stop drawing current once the task
    is complete—for example, to wake up and check the status of something or to log
    data and then go back to sleep. To use this mode, include the library in your
    sketch using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use this function to turn off the ADC and the microcontroller’s brown-out
    detector with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ADC_OFF</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">BOD_OFF</samp> parameters as
    shown next. When you want the Arduino to go to sleep with all power-saving features
    turned on, use the following function in your sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several parameters in that function, the first being the duration
    of idle. In this example, I’ve set the duration to eight seconds with <samp class="SANS_TheSansMonoCd_W5Regular_11">SLEEP_8S</samp>.
    However, you can also use one of the alternative delays:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_15MS</samp>    15 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_30MS</samp>    30 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_60MS</samp>    60 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_120MS</samp>    120 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_250MS</samp>    250 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_500MS</samp>    500 milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_1S</samp>    1 second
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_2S</samp>    2 seconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_4S</samp>    4 seconds
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_8S</samp>    8 seconds
  prefs: []
  type: TYPE_NORMAL
- en: The following simple sketch uses this function to shut down the Arduino for
    8 seconds, then repeats the shutdown again, and then runs at full power for 16
    seconds. This allows you to quickly check power consumption at both full power
    and while operating in power-saving mode with a multimeter.
  prefs: []
  type: TYPE_NORMAL
- en: Connect your Arduino Uno to your PC and upload [Listing 15-1](#LiT-15-1). Once
    it’s uploaded, connect your USB power monitor or multimeter as described earlier
    in the chapter to watch the power consumption change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-1: Testing the Power
    Down/Wake Periodic mode</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch includes the library ❶ and then runs the idle function twice with
    all parameters set to <samp class="SANS_TheSansMonoCd_W5Regular_11">OFF</samp>,
    with an eight-second delay ❷. Next, the sketch introduces another delay, in which
    the Arduino runs at full power ❸.
  prefs: []
  type: TYPE_NORMAL
- en: If you measure the current of this circuit, the consumption should drop from
    around 42 mA on full power to around 30 mA when in power-down mode, a consumption
    drop of around 12 mA. That’s a 28 percent reduction in power use when your project
    is in power-down mode.
  prefs: []
  type: TYPE_NORMAL
- en: I quote the figures for this example as “around 42 mA” and so on because consumption
    will vary within a range of 1 or 2 mA lower or higher than the figures quoted,
    depending on the brand of Arduino or compatible board you are using. It may also
    vary depending on your own test equipment. To keep things simple, I’ve stuck to
    whole numbers and average consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Before putting power saving to use in a practical example, I’ll introduce a
    convenient library for the DS3231 real-time clock IC as you’ll use it in a following
    project.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The DS3231 Real-Time
    Clock Library</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DS3231 real-time clock modules provide a convenient and accurate way to
    track time and date information, though using them does require a lot of code.
    In this section, I’ll show you how to write and read time and date data to and
    from the DS3231 in an easier way using a DS3231 library.
  prefs: []
  type: TYPE_NORMAL
- en: First, open the Arduino IDE, enter the Library Manager, and search for **DS3231
    by Andrew Wickert**.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the real-time clock module to your Arduino Uno, as shown in [Figure
    15-8](chapter15.xhtml#fig15-8), and then connect your Uno to your PC with the
    USB cable.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE CONNECTION BETWEEN THE ARDUINO UNO AND DS3231 RTC.](../images/fig15-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-8: Connections between
    the DS3231 and Arduino Uno</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Next, enter but don’t upload [Listing 15-2](#LiT-15-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-2: Testing the DS3231
    library</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch includes and initializes the required libraries ❶ and then declares
    the required global variables ❷. These variables are used for storing RTC data
    and settings. The <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>function
    is used to set the time and date to the RTC. The sketch uses <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    ❸ for 24-hour time, but you can also enter <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    for 12-hour time. Otherwise, enter all the time and date data in one- or two-digit
    format. The value for <samp class="SANS_TheSansMonoCd_W5Regular_11">setDoW</samp>
    is for the numerical day of the week, with 1 being Sunday and 7 being Saturday.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the data from the RTC and display it on the Serial Monitor, the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">showTime()</samp>function stores
    the data in turn from the RTC into variables ❹ and then starts displaying it on
    the Serial Monitor ❺, starting with a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    function to show the day of the week.
  prefs: []
  type: TYPE_NORMAL
- en: Set the time by uncommenting the function at ❻ and updating the data in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp> function to match
    the current time and date when you upload the sketch. After uploading the sketch,
    comment this line out again so the time isn’t reset on every reset of the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, … normal clock display. The Serial Monitor will output your current
    time and date.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the DS3231 library in the upcoming project.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #44: Creating a Low-Power
    Periodic Data Logger</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll create a data logger that records temperature, humidity,
    and the time and date to an SD card around once per minute. Between these times
    the Arduino will go into idle mode to conserve power. This type of project is
    useful for long-term data logging—for example, charting the weather data over
    a season or several months.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BMP180 temperature and air pressure sensor board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DS3231 real-time clock module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SD or microSD card module and matching memory card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 15-9](chapter15.xhtml#fig15-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE CIRCUIT SCHEMATIC FOR PROJECT #44](../images/fig15-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-9: The circuit schematic
    for Project #44</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once again, the sketch includes and initializes the required libraries ❶ and
    declares the required global variables that are used to store RTC data and settings
    ❷. It initializes and tests the SD memory card reader ❸ and then uses the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>function to set the time
    and date to the RTC. As in [Listing 15-2](#LiT-15-2), the sketch uses <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    for 24-hour time, but you can change this to <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    for 12-hour time. Be sure to replace the values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">RTCmodule</samp>
    functions to match the current time in your location.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">logData()</samp>function writes
    the date, time, temperature, and pressure to the SD memory card when called. Set
    the time and date in the DS3231 by uncommenting the function at ❹ so that the
    changes you’ve made to the <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>
    function take effect. After uploading the sketch, comment this line again so the
    time isn’t reset every time the Arduino resets.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop runs
    the 8-second power-down 8 times for a total of 64 seconds; then the Arduino wakes
    up and logs the data ❺. At this point, the sketch loops again, putting the Arduino
    back into a powered-down state.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 15-10](chapter15.xhtml#fig15-10) shows an example of the output text
    file. Your date and time will of course be different.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #44](../images/fig15-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-10: Example output
    from Project #44</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If you measure the current of this circuit, the consumption should drop from
    around 51 mA on full power to around 38 mA when the project is powered down. There
    is a brief jump in consumption when the Arduino is writing data to the SD card.
    Setting this aside, the power used by the entire project drops by about 10 mA.
    (The Arduino’s own power consumption drops without affecting the devices to which
    it is connected.)
  prefs: []
  type: TYPE_NORMAL
- en: This may not seem like significant savings, but consider that this amounts to
    a 20 percent reduction in power consumption when in power-down mode, which takes
    between 97 to 98 percent of operation time. Moreover, when you’re running from
    a battery, any saving is a good saving.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wake on Interrupt Mode</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s a second software-based way to save power on your Arduino: Wake on
    Interrupt mode. Using this mode puts your Arduino to sleep until an interrupt
    is triggered, causing the Arduino to wake up and continue to run the sketch. After
    it completes the required tasks, it goes back to sleep, awaiting another interrupt.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For more information about interrupts, review Chapter 7 of* Arduino Workshop*,
    2nd edition.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this mode, include the library in your sketch with the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As each Arduino interrupt calls a function, you need to define a function to
    allow the sketch to compile. However, as you don’t need to call any specific code
    when an interrupt is triggered, leave the function empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You must also declare the hardware interrupt pin as an input in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, using pins D2 or D3.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the main section of the sketch, attach the interrupt using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Replace <samp class="SANS_TheSansMonoCd_W5Regular_11">pinNumber</samp> with
    0 to attach to digital pin D2 or with 1 to attach to digital pin D3.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the <samp class="SANS_TheSansMonoCd_W5Regular_11">attachInterrupt()</samp>
    function, substitute <samp class="SANS_TheSansMonoCd_W5Regular_11">mode</samp>
    with one of the following four interrupt types:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">LOW</samp>    No current is applied
    to the interrupt pin.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">CHANGE</samp>    The current changes,
    either between on and off or between off and on.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">RISING</samp>    The current changes
    from off to on at 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FALLING</samp>    The current changes
    from on at 5 V to off.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Arduino interrupt functions need a function to call once the interrupt
    has been triggered, but running code directly from a function attached to an interrupt
    will cause a recursive loop. To avoid this, we use a blank (also known as a *stub*)
    custom function—that is, a function without any code. For example, you could use
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, when you want to put the Arduino to sleep, use the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After the interrupt triggers the Arduino to wake up, detach the interrupt from
    the digital pin with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, run the code or call the required function to operate. After this operation
    is complete, the Arduino will go back to sleep.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll demonstrate this in the following simple example in which the signal at
    D2 changes from HIGH to LOW, the Arduino’s onboard LED blinks once, and then the
    Arduino goes back to sleep. Connect your Arduino Uno to your PC, run a jumper
    wire from the 5V pin to the D2 pin, and upload [Listing 15-3](#LiT-15-3). Connect
    your USB power monitor or multimeter to watch the power consumption change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-3: Waking up on
    interrupt mode</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch includes the low-power library ❶, followed by a blank function, as
    required by the interrupt functions ❷. It then sets the digital pin used for interrupts
    as an input ❸ and configures the Arduino’s built-in LED ❹.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch also configures the interrupt type ❺ on to pin D2 with the name of
    the blank interrupt function and the type of event to call the interrupt. In this
    case, the event type is <samp class="SANS_TheSansMonoCd_W5Regular_11">FALLING</samp>,
    which means a change of signal from 5 V to 0 V at D2.
  prefs: []
  type: TYPE_NORMAL
- en: Once the interrupt is configured, the sketch puts the Arduino to sleep ❻. Nothing
    else happens until the interrupt is triggered and the Arduino goes into full-power
    mode. At this point, the sketch disables the interrupt so that it won’t be called
    again while the rest of the sketch is operating ❼.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the sketch turns the onboard LED on and off to demonstrate that
    the Arduino is operating normally ❽, but you could substitute another function
    here, if you like. Once the code has been executed, <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp> returns to the start, reactivating interrupts ❺ and putting the
    Arduino back to sleep ❻.
  prefs: []
  type: TYPE_NORMAL
- en: You can test this project by removing the jumper wire from the 5V pin to D2,
    which triggers the interrupt and brings the Arduino back to full-power mode. Then
    restore the jumper wire, and after the LED is activated and turned off, the Arduino
    should go back to sleep. In this example, power consumption drops from around
    42 mA when the Arduino is awake to 28 mA when in sleep mode, a reduction of around
    59 percent.
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, you’ll use this technique for a more serious application
    by logging noisy events detected by a sound sensor.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Inexpensive Sound Sensors</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building a project that must detect when a loud noise occurs, you can use
    adjustable sound level sensor, such as PMD Way part 596692, as shown in [Figure
    15-11](chapter15.xhtml#fig15-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF AN ADJUSTABLE SOUND SENSOR MODULE](../images/fig15-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-11: An adjustable
    sound level sensor</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'These sensors, which can be found at most retailers, have two types of output:
    analog and digital. In the following project, you’ll use this sensor in digital
    mode. After you connect 5V and GND to the sensor’s + and − (or G) pins, respectively,
    a 5 V signal will be sent to the digital output (DO) pin when the ambient sound
    reaches a certain level. An LED turns on when the sound reaches the threshold
    level, which you can adjust using the trimpot on the sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #45: Logging Interrupt Triggers</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this project is to log the date and time of a sound event, such
    as a noisy neighbor or strong vibration in the surrounding environment. It uses
    a sound sensor module to trigger an interrupt, bringing the Arduino out of low-power
    mode, logging the date and time to an SD memory card, and then putting the Arduino
    to sleep until the next event. If you’re not interested in logging sound events,
    you can use any type of sensor or switch that has a digital output.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sound sensor module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DS3231 real-time clock module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SD or microSD card module and matching memory card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 15-12](chapter15.xhtml#fig15-12).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #45](../images/fig15-12.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-12: The circuit schematic
    for Project #45</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By now you should understand the initial code in this sketch that sets up the
    low-power library, real-time clock, and SD memory card. The final lines of code
    configure the interrupt to <samp class="SANS_TheSansMonoCd_W5Regular_11">RISING</samp>
    ❶, so when the voltage at the Arduino’s D2 pin rises from 0 V to 5 V (the digital
    output from the sound sensor), the sketch tells the Arduino to power down ❷. Once
    the sensor has been triggered, the sketch cancels low-power mode and disables
    the interrupt ❸ to prevent recursive interrupts. Finally, the sketch logs the
    time and date of the sound event to the SD card ❹, and the sketch repeats by activating
    interrupts ❶ and powering down the Arduino again in preparation for the next round
    ❷.
  prefs: []
  type: TYPE_NORMAL
- en: The power consumption for this project is around 28 mA when the Arduino is asleep
    and around 60 mA during the brief period in which the project is logging data
    to the SD card. That means this project is saving around 50 percent of power consumption
    when in sleep mode.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hardware-Based Methods to Reduce Power</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also reduce power consumption by making hardware modifications to your
    Arduino. The Arduino development platform was originally designed to be easy to
    use. While the standard Arduino Uno–type circuit serves that purpose well, more
    advanced users can improve power efficiency by removing several components that
    are unnecessary for many projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove the following pieces of an Arduino or compatible circuit if
    they won’t be used:'
  prefs: []
  type: TYPE_NORMAL
- en: Four LEDs (power, D13, TX, and RX)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear voltage regulator circuits for the onboard 5 V and 3.3 V power supplies
    (if you are powering your Arduino with 5 V DC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A comparator circuit that decides whether to use USB or DC socket power (if
    you are powering your Arduino with 5 V DC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB-to-serial interface microcontroller and circuit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reset button, if unnecessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re prepared to make your own Arduino-compatible circuit and provide a
    suitable power supply, then it’s easy to have your project use a lot less energy
    than a standard Arduino Uno. To demonstrate this, I’ll show you how to make two
    versions of a bare minimalist Arduino-compatible circuit, one that operates on
    5 V and the other on 3.3 V. You can build these circuits on a solderless or prototyping
    board and then build projects around them.
  prefs: []
  type: TYPE_NORMAL
- en: To build these projects, you’ll first need to know how to upload sketches to
    your Arduino and minimalist circuits with the ICSP pins, rather than the USB interface.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Uploading Sketches with the ICSP Pins</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, you’ve most likely been uploading your sketches using the USB connection
    on your Arduino or compatible board. However, you can reduce the amount of circuitry
    you’re using—and thereby make your projects more power efficient—by using the
    in-circuit serial programmer (ICSP) connection to the microcontroller instead.
  prefs: []
  type: TYPE_NORMAL
- en: The ICSP is the six-pin connector on the right side of your Arduino board, shown
    in [Figure 15-13](chapter15.xhtml#fig15-13). When you’re not uploading sketches,
    you can also use it as another connection to the SPI data bus.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ARDUINO UNO ICSP HEADER PINS](../images/fig15-13.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-13: ICSP header pins
    on the Arduino Uno</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: These six pins are arranged in a set configuration, as shown in [Figure 15-14](chapter15.xhtml#fig15-14).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC CONNECTION FOR ICSP HEADER PINS](../images/fig15-14.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-14: ICSP header pins
    layout</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Pin 1 is usually marked on the PCB with a number 1 or a small dot close to the
    top-left pin, as you can see in [Figure 15-13](chapter15.xhtml#fig15-13). To upload
    sketches to your circuit, you’ll need an external programmer that connects to
    these pins, called a USBasp device. These open source devices were created by
    Thomas Fischl and require USB drivers only when used with a Windows-based PC.
    In addition to allowing you to reduce power usage, USBasps also allow you to upload
    sketches to your Arduino Uno or compatible board if its USB interface has been
    damaged or destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*USBasps also come in handy if you’re interested in programming AVR microcontrollers
    without the Arduino environment, as described in my book* AVR Workshop *(No Starch
    Press, 2022).*'
  prefs: []
  type: TYPE_NORMAL
- en: USBasps vary cosmetically, but all have the same function. [Figure 15-15](chapter15.xhtml#fig15-15)
    shows two examples. The programmer at the top of the figure is a generic unit
    from the supplier PMD Way listed in the book parts list, and the lower programmer
    is from Freetronics in Australia.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF EXAMPLE USBASP PROGRAMMERS](../images/fig15-15.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-15: Example USBasp
    programmers</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: When shopping for your USBasp programmer, be sure you buy one that comes with
    a 6-pin (rather than 10-pin) ribbon cable. Windows users should consult the supplier
    for information on how to install the programmer. Linux and Mac users can simply
    insert into a USB socket and the USBasp should be ready for use in a few moments.
  prefs: []
  type: TYPE_NORMAL
- en: Quickly test your USBasp to ensure it works before moving on to the minimalist
    circuits that you’ll build in the next section. Start by connecting it to your
    Arduino Uno or compatible board, as shown in [Figure 15-16](chapter15.xhtml#fig15-16).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE USBASP PROGRAMMER CONNECTED TO THE ARDUINO UNO](../images/fig15-16.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-16: A USBasp programmer
    connected to an Arduino Uno</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The USBasp provides power to the Arduino, so you don’t need to connect any other
    power source. Next, connect the USBasp to your PCB via the included USB cable.
    Open the Blink sketch in the Arduino IDE and then select **Tools** ![](../images/arr.png)
    **Programmer** ![](../images/arr.png) **USBasp**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to upload the sketch, select **Sketch** ![](../images/arr.png) **Upload
    Using Programmer**.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch should finish uploading to the Arduino, and the onboard LED should
    blink on and off, confirming that your USBasp is working correctly. If so, you’re
    ready to build a minimalist low-power 5 V Arduino circuit.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #46: Building a Minimalist
    5 V Arduino Circuit</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll build the most minimalist Arduino-compatible circuit
    possible that can operate from around 5 V DC. You can expand on this template
    to build your own future low-power Arduino-compatible projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: A USBasp programmer and matching USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 0.1 µF polyester capacitor (C1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 22 pF ceramic capacitors (C2, C3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 16 MHz HC49S crystal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ICSP breadboard adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 560 Ω, 0.25 W, 1 percent resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 15-17](chapter15.xhtml#fig15-17). Try
    to keep the crystal, C2, and C3 as close as possible to the microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #46](../images/fig15-17.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-17: The schematic
    for Project #46</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The LED connected to the microcontroller’s pin 13 should blink as expected,
    on and off every second. You now have a working example of a minimalist Arduino
    circuit, which you can use for experimenting; if you want to permanently include
    it in your projects, you can solder it to the stripboard or on your own customized
    PCB. The resistor and LED are just for demonstration purposes, so of course you
    can remove them if not required for future projects.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this circuit is to reduce power consumption. After removing the
    LED and resistor, I measured a current draw of around 22 mA—much better than the
    standard Uno board, which usually draws around 44 mA.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great start, but it’s possible to lower power consumption even further
    using the software-based methods you learned earlier in the chapter. You’ll need
    a multimeter capable of measuring current down to microamps to measure the consumption
    levels when the project is running. When I pair this circuit with the Power Down/Wake
    Periodic mode sketch in [Listing 15-1](#LiT-15-1), the current measures around
    3 μA (microamps, each equal to 1,000 milliamps) when the Arduino is powered down.
    Trying out [Listing 15-3](#LiT-15-3) with this circuit also returned around 3
    μA. Battery-powered projects that combine hardware- and software-based methods
    of saving power can last for an incredibly long time.
  prefs: []
  type: TYPE_NORMAL
- en: For future projects that use this type of minimalist circuit, you’ll need to
    know which pin on the microcontroller relates to which pin in the Arduino sketches,
    since the pin numbers on an Arduino board don’t match the pins on the microcontroller.
    All the analog, digital, and other pins available on the normal Arduino board
    are also available in the breadboard version; you simply need to connect directly
    to the microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: The R2 and LED2 are on digital pin 13 in your breadboard Arduino. [Table 15-2](chapter15.xhtml#tab15-2)
    lists the Arduino pins on the left and the matching ATmega328P-PU pins on the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 15-2:</samp> <samp class="SANS_Futura_Std_Book_11">Pins
    for ATmega328P-PU</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Arduino pin name</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU pin</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">RST</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">RX/D0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">TX/D1</samp> | <samp class="SANS_Futura_Std_Book_11">3</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D2</samp> | <samp class="SANS_Futura_Std_Book_11">4</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D3</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D4</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">(5 V only)</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">8</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D5</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D6</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D7</samp> | <samp class="SANS_Futura_Std_Book_11">13</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D8</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D9</samp> | <samp class="SANS_Futura_Std_Book_11">15</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D10</samp> | <samp class="SANS_Futura_Std_Book_11">16</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D11</samp> | <samp class="SANS_Futura_Std_Book_11">17</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D12</samp> | <samp class="SANS_Futura_Std_Book_11">18</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">D13</samp> | <samp class="SANS_Futura_Std_Book_11">19</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">(5 V only)</samp> | <samp class="SANS_Futura_Std_Book_11">20</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">AREF</samp> | <samp class="SANS_Futura_Std_Book_11">21</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">22</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A0</samp> | <samp class="SANS_Futura_Std_Book_11">23</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A1</samp> | <samp class="SANS_Futura_Std_Book_11">24</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A2</samp> | <samp class="SANS_Futura_Std_Book_11">25</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A3</samp> | <samp class="SANS_Futura_Std_Book_11">26</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A4</samp> | <samp class="SANS_Futura_Std_Book_11">27</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">A5</samp> | <samp class="SANS_Futura_Std_Book_11">28</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: To avoid confusion, retailers such as Freetronics sell adhesive labels to place
    over the microcontroller, like those shown in [Figure 15-18](chapter15.xhtml#fig15-18)
    (visit the Freetronics home page and search for *labels*).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF A MICROCONTROLLER WITH PINOUT LABEL AFFIXED](../images/fig15-18.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-18: Arduino pin labels,
    recommended for fast prototyping</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Using the labels is a great way to ensure you don’t mix up the pinouts when
    you’re in a rush.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned to measure how much power your Arduino uses and
    how you can minimize power consumption using a variety of hardware- and software-based
    methods, allowing you to make battery-powered projects that will last much longer
    than they otherwise would. You’ve also learned to use some new sensor and timing
    modules and the USBasp programmer. You can now create projects that can operate
    from batteries for an extended period of time, such as monitoring weather data
    over a season in a remote location or detecting nearby movements in an area without
    mains AC power.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I’ll show you how to interface your car with the Arduino
    using the automotive CAN data bus to monitor and record vehicle engine data and
    more.
  prefs: []
  type: TYPE_NORMAL
