["```\n> ; Output some stuff\n(define out-port (open-output-file \"data/SomeStuff.txt\"))\n(display \"some stuff\" out-port)\n(close-output-port out-port)\n\n> ; Read it back in\n(define in-port (open-input-file \"data/SomeStuff.txt\"))\n(read-line in-port)\n(close-input-port in-port)\n\"some stuff\"\n```", "```\n> (define more-out (open-output-file \"data/SomeStuff.txt\"))\nopen-output-file: file exists\n  path: ...\\data\\SomeStuff.txt\n```", "```\n> (define out-port (open-output-file \"data/SomeStuff.txt\" #:exists 'append))\n  (display \"some more stuff\\n\" out-port)\n  (close-output-port out-port)\n\n> (define in-port (open-input-file \"data/SomeStuff.txt\"))\n> (read-line in-port)\n\"some stuff\"\n\n> (read-line in-port)\n\"some more stuff\"\n> (close-input-port in-port)\n\n> (define out-port (open-output-file \"data/SomeStuff.txt\" #:exists 'truncate))\n  (display \"some new stuff\\n\" out-port)\n  (close-output-port out-port)\n\n> (define in-port (open-input-file \"data/SomeStuff.txt\"))\n> (read-line in-port)\n\"some new stuff\"\n> (read-line in-port)\n#<eof>\n> (close-input-port in-port)\n```", "```\n> eof\n#<eof>\n\n> (eof-object? eof)\n#t\n```", "```\n> (call-with-output-file \"data/SomeData.txt\"\n    #:exists 'truncate\n    (λ (out-port)\n      (display \"Data line1\\n\" out-port)\n      (display \"Data line2\\n\" out-port)\n      (display \"Data line3\\n\" out-port)\n      (display \"Data line4\\n\" out-port)))\n\n> (call-with-input-file \"data/SomeData.txt\"\n    (λ (in-port)\n      (let loop()\n        (let ([data (read-line in-port)])\n          (unless (eof-object? data)\n            (displayln data)\n            (loop))))))\nData line1\nData line2\nData line3\nData line4\n```", "```\n> (define str-port (open-output-string))\n> (display \"Hello \"   str-port)\n  (display \"there, \" str-port)\n  (display \"amigo!\"   str-port)\n> (get-output-string str-port)\n\"Hello there, amigo!\"\n```", "```\n> (define comp1 (tcp-listen 999))\n  (define-values (comp1-in comp1-out) (tcp-accept comp1))\n  (read-line comp1-in)\n  (displayln \"Got it, bro!\\n\" comp1-out)\n  (close-input-port comp1-in) \n  (close-output-port comp1-out)\n \"Hello there!\"\n```", "```\n> (define-values (comp2-in comp2-out) (tcp-connect \"Comp1Name\" 999))\n  (displayln \"Hello there!\\n\" comp2-out)\n  (flush-output comp2-out)\n  (read-line comp2-in)\n  (close-input-port comp2-in) \n  (close-output-port comp2-out)\n\"Got it, bro!\"\n```", "```\nDate,Open,High,Low,Close,Adj Close,Volume\n2007-01-03,12459.540,12580.349,12404.820,12474.519,12474.519,327200000\n2007-01-04,12473.160,12510.410,12403.860,12480.690,12480.690,259060000\n2007-01-05,12480.049,12480.129,12365.410,12398.009,12398.009,235220000\n```", "```\n(struct hist (date open high low close adj-close vol)\n  #:transparent)\n```", "```\n(define (import-record port)\n  (let ([rec (read-line port)])\n    (if (eof-object? rec)\n        eof\n     ➊ (match (string-split rec \",\")\n      ➋ [(list date open high low close adj-close vol)\n       ➌ (hist date\n                (string->number open)\n                (string->number high)\n                (string->number low)\n                (string->number close)\n                (string->number adj-close)\n                (string->number vol))]\n       ➍ [_ (error \"Failed to load record.\")]))))\n```", "```\n> (define in-port \n    (open-input-file \"StockHistory/Daily/XOM.csv\"))\n> (import-record in-port)\n(hist \"Date\" #f #f #f #f #f #f)\n\n> (import-record in-port)\n(hist \"1980-01-02\" 3.445313 3.453125 3.351563 3.367188 0.692578 6622400)\n\n> (import-record in-port)\n(hist \"1980-01-03\" 3.320313 3.320313 3.25 3.28125 0.674902 7222400)\n\n> (close-input-port in-port)\n```", "```\n(define (format-rec rec width prec)\n  (match rec\n    [(hist date open high low close adj-close vol)\n     (hist date\n           (~r open #:min-width width  #:precision (list '= prec))\n           (~r high #:min-width width  #:precision (list '= prec))\n           (~r low #:min-width width  #:precision (list '= prec))\n           (~r close #:min-width width  #:precision (list '= prec))\n           (~r adj-close #:min-width width  #:precision (list '= prec))\n           (~r vol #:min-width 9 ))]))\n```", "```\n> (define in-port \n    (open-input-file \"StockHistory/Daily/XOM.csv\"))\n> (import-record in-port)\n(hist \"Date\" #f #f #f #f #f #f)\n\n> (format-rec (import-record in-port) 6 2)\n(hist \"1980-01-02\" \"  3.45\" \"  3.45\" \"  3.35\" \"  3.37\" \"  0.69\" \"  6622400\")\n\n> (format-rec (import-record in-port) 6 2)\n(hist \"1980-01-03\" \"  3.32\" \"  3.32\" \"  3.25\" \"  3.28\" \"  0.67\" \"  7222400\")\n\n> (close-input-port in-port)\n```", "```\n(require text-table)\n```", "```\n> (define data '((a b c) (1 2 3) (4 5 6)))\n> (display (table->string data))\n+-+-+-+\n|a|b|c|\n+-+-+-+\n|1|2|3|\n+-+-+-+\n|4|5|6|\n+-+-+-+\n```", "```\n(define (show sym period filter)\n  (let ([in-port (open-input-file\n      (build-path \"StockHistory\" period (string-append sym \".csv\")))])\n    (read-line in-port) ; skip past header row\n ➊ (let* ([recs\n         (reverse\n         ➋ (let loop([rec-list '()])\n           ➌ (let ([rec (import-record in-port)])\n                (if (eof-object? rec)\n                    rec-list\n                 ➍ (if (filter rec)\n                     ➎ (let* ([rec (format-rec rec 8 2)]\n                               [rec (list (hist-date rec)\n                                          (hist-high rec)\n                                          (hist-low rec)\n                                          (hist-close rec))])                          \n                       ➏ (loop (cons rec rec-list)))\n                     ➐ (loop rec-list))))))]\n       ➑ [tbl-list (cons (list \"   Date\" \"  High\" \"  Low\" \"  Close\") recs)])\n      (close-input-port in-port)\n   ➒ (display (table->string tbl-list)))))\n```", "```\n> (show \"^DJI\" \"Monthly\"\n        (λ (rec) (equal? (substring (hist-date rec) 0 4) \"2008\")))\n\n+----------+--------+--------+--------+\n|   Date   |  High  |  Low   |  Close |\n+----------+--------+--------+--------+\n|2008-01-01|13279.54|11634.82|12650.36|\n+----------+--------+--------+--------+\n|2008-02-01|12767.74|12069.47|12266.39|\n+----------+--------+--------+--------+\n|2008-03-01|12622.07|11731.60|12262.89|\n+----------+--------+--------+--------+\n|2008-04-01|13010.00|12266.47|12820.13|\n+----------+--------+--------+--------+\n|2008-05-01|13136.69|12442.59|12638.32|\n+----------+--------+--------+--------+\n|2008-06-01|12638.08|11287.56|11350.01|\n+----------+--------+--------+--------+\n|2008-07-01|11698.17|10827.71|11378.02|\n+----------+--------+--------+--------+\n|2008-08-01|11867.11|11221.53|11543.96|\n+----------+--------+--------+--------+\n|2008-09-01|11790.17|10365.45|10850.66|\n+----------+--------+--------+--------+\n|2008-10-01|10882.52| 7882.51| 9325.01|\n+----------+--------+--------+--------+\n|2008-11-01| 9653.95| 7449.38| 8829.04|\n+----------+--------+--------+--------+\n|2008-12-01| 9026.41| 8118.50| 8776.39|\n+----------+--------+--------+--------+\n```", "```\n> (show \"MSFT\" \"Daily\"\n     (λ (rec) (and\n                     (< (hist-close rec) 19)\n                     (equal? (substring (hist-date rec) 0 4) \"2008\"))))\n\n+----------+--------+--------+--------+\n|   Date   |  High  |  Low   |  Close |\n+----------+--------+--------+--------+\n|2008-11-19|   19.95|   18.25|   18.29|\n+----------+--------+--------+--------+\n|2008-11-20|   18.84|   17.50|   17.53|\n+----------+--------+--------+--------+\n|2008-12-01|   19.95|   18.60|   18.61|\n+----------+--------+--------+--------+\n|2008-12-29|   19.21|   18.64|   18.96|\n+----------+--------+--------+--------+\n```", "```\n(define (file-info sym period)\n  (let ([port (open-input-file\n          (build-path \"StockHistory\" period (string-append sym \".csv\")))]\n        [recs 0]\n        [max-size 0])\n    (let loop ()\n      (let ([rec (read-line port)])\n        (unless (eof-object? rec)\n          (let ([len (string-length rec)])\n            (set! recs (add1 recs))\n            (unless (<= len max-size)\n              (set! max-size len)))\n          (loop))))\n    (close-input-port port)\n    (values recs max-size)))\n```", "```\n(define (csv->db sym period)\n  (let*-values ([(recs max-size) (file-info sym period)]\n      [(in-port) (open-input-file\n        (build-path \"StockHistory\" period (string-append sym \".csv\")))]\n   ➊ [(out-port) (open-output-file\n       (build-path \"StockHistory\" period (string-append sym \".db\"))\n         #:exists 'truncate)]\n      [(slot-size) (+ 10 max-size)])\n ➋ (file-position out-port (* recs slot-size))\n ➌ (display (make-string slot-size #\\space) out-port)\n    (file-position out-port 0)\n ➍ (display recs out-port)\n    (display \",\" out-port)\n ➎ (displayln slot-size out-port)\n    (read-line in-port) ; read past header\n    (for ([ i (in-range 1 recs)])\n      (let ([rec (read-line in-port)]\n            [pos (* i slot-size)])\n     ➏ (file-position out-port pos)\n     ➐ (displayln rec out-port)))\n    (close-input-port in-port)\n    (close-output-port out-port)\n    ))\n```", "```\n (define (bin-search sym period date)\n➊ (let* ([port (open-input-file\n          (build-path \"StockHistory\" period (string-append sym \".db\")))]\n      [info (string-split (read-line port) \",\")]\n      [recs (string->number (first info))]\n      [slot-size (string->number (second info))]\n      [min 1]\n   ➋ [max recs])\n\n ➌ (define (get-date rec)\n      (substring rec 0 10))\n\n ➍ (define (get-rec i)\n      (file-position port (* slot-size i))\n      (read-line port))\n\n    (let loop ()\n   ➎ (if (> min max)\n          (begin\n            (close-input-port port)\n            #f)\n       ➎ (let* ([i (floor (/ (+ min max) 2))]\n                 [rec (get-rec i)]\n                 [d (get-date rec)])\n            (cond [(string<? d date)\n                ➏ (set! min (add1 i))\n                   (loop)]\n                  [(string>? d date)\n                ➐ (set! max (sub1 i))\n                   (loop)]\n                  [else\n                   (close-input-port port)\n                ➑ rec]))))))\n```", "```\n> (csv->db \"MSFT\" \"Daily\")\n```", "```\n> (bin-search \"MSFT\" \"Daily\" \"1992-03-13\")\n\"1992-03-13,2.552083,2.562500,2.510417,2.520833,1.674268,36761600\"\n```", "```\n#lang racket\n(require plot)\n(require text-table)\n\n(define (data-path symbol period)\n  (build-path \"StockHistory\" period (string-append symbol \".csv\")))\n\n(struct hist (date open high low close adj-close vol)\n  #:transparent)\n\n(define symbols '(\"^DJI\" \"^GSPC\" \"AAPL\" \"AMZN\"\n                         \"BAC\" \"F\" \"MSFT\" \"VBMFX\" \"XOM\"))\n\n(define symbol-color\n  (make-hash\n   (list\n    (cons \"^DJI\" \"black\")\n    (cons \"^GSPC\" \"gray\")\n    (cons \"AAPL\" \"black\")\n    (cons \"AMZN\" \"gray\")\n    (cons \"BAC\" \"purple\")\n    (cons \"F\" \"orange\")\n    (cons \"MSFT\" \"blue\")\n    (cons \"VBMFX\" \"black\")\n    (cons \"XOM\" \"gray\")\n    )))\n\n(define symbol-style\n  (make-hash\n   (list\n    (cons \"^DJI\" 'solid)\n    (cons \"^GSPC\" 'solid)\n    (cons \"AAPL\" 'dot)\n    (cons \"AMZN\" 'dot)\n    (cons \"BAC\" 'dot-dash)\n    (cons \"F\" 'solid)\n    (cons \"MSFT\" 'long-dash)\n    (cons \"VBMFX\" 'short-dash)\n    (cons \"XOM\" 'short-dash)\n    )))\n```", "```\n(define (import-record port)\n  (let ([rec (read-line port)])\n    (if (eof-object? rec)\n        eof\n        (match (string-split rec \",\")\n          [(list date open high low close adj-close vol)\n           (hist date\n                 (string->number open)\n                 (string->number high)\n                 (string->number low)\n                 (string->number close)\n                 (string->number adj-close)\n                 (string->number vol))]\n          [_ (error \"Failed to load record.\")]))))\n```", "```\n(define month-days\n  #(0 0 31 59.25 90.25 120.25 151.25 181.25\n      212.25 243.25 273.25 304.25 334.25))\n\n(define (date->number d)\n  (match (string-split d \"-\")\n    [(list year month day)\n     (let ([year (string->number year)]\n           [month (string->number month)]\n           [day (string->number day)])\n       (exact->inexact (+ year\n                          (/ (vector-ref month-days month) 365.25)\n                          (/ (sub1 day) 365.25))))]))\n```", "```\n(define (get-coords symbol period filter normalize)\n  (let ([in-port (open-input-file (data-path symbol period))]\n        [start-price #f])\n    (read-line in-port)\n    (let* ([recs\n      (reverse\n        (let loop([rec-list '()])\n          (let ([rec (import-record in-port)])\n            (if (eof-object? rec)\n               rec-list\n               (if (filter rec)\n                 (let ([date-val (date->number (hist-date rec))]\n                     [close (hist-close rec)])\n                   (unless start-price (set! start-price close))\n                   (let ([val \n                  ➊ (if normalize (/ close start-price) close)])\n                     (loop \n                       (cons (vector date-val val) rec-list))))\n                 (loop rec-list))))))])\n      (close-input-port in-port)\n      recs)))\n```", "```\n(define (plot-symbols symbols period filter\n                      [normalize #f]\n                      [anchor 'top-left]\n                      [y-min #f]\n                      [y-max #f])\n  (let* ([plot-data\n          (for/list ([symbol symbols])\n            (let ([color (hash-ref symbol-color symbol)]\n                  [style (hash-ref symbol-style symbol)])\n              (lines (get-coords symbol period filter normalize)\n                     #:label symbol\n                     #:width 1.5\n                     #:color color\n                     #:style style)))]\n         [ymin (if (and normalize (not y-min)) 0.0 y-min)]\n         [ymax (if (and normalize (not y-max)) 2.0 y-max)])\n    (parameterize\n        ([plot-width 400]\n         [plot-height 250]\n         [plot-x-label \"Year\"]\n         [plot-y-label #f]\n         [plot-legend-anchor anchor])\n      (plot plot-data\n            #:y-min ymin\n            #:y-max ymax))))\n```", "```\n(define (year-range y1 y2)\n  (λ (rec) \n    (string<=? y1 (substring (hist-date rec) 0 4)\n               y2)))\n\n(define (date-range d1 d2)\n  (λ (rec) \n    (string<=? d1 (substring (hist-date rec) 0 10)\n               d2)))\n```", "```\n> (plot-symbols '(\"^DJI\") \"Daily\"\n                (year-range \"2007\" \"2008\")\n                #f 'bottom-left)\n```", "```\n> (plot-symbols '(\"^DJI\" \"^GSPC\" \"AAPL\" \"VBMFX\") \"Daily\"\n                (year-range \"2007\" \"2008\")\n                #f 'bottom-left)\n```", "```\n> (plot-symbols '(\"^DJI\" \"^GSPC\" \"AAPL\" \"VBMFX\") \"Daily\"\n                (year-range \"2007\" \"2008\")\n                #t 'bottom-left)\n```", "```\n> (plot-symbols '(\"^GSPC\" \"AAPL\" \"XOM\") \"Monthly\"\n                (year-range \"1981\" \"2016\")\n                #t 'top-left 0 20)\n```", "```\n(define (int-rate v p t)\n  (let ([n 12.0])\n    (* n (- (expt (/ v p) (/ 1 (* n t))) 1))))\n```", "```\n> (int-rate 18 1 35)\n0.08286686131778254\n```", "```\n> (plot-symbols '(\"^GSPC\" \"AAPL\" \"XOM\") \"Monthly\"\n                (year-range \"1981\" \"2016\")\n                #t 'top-left 0 300)\n```", "```\n> (int-rate 225 1 35)\n0.15574778848870174\n```", "```\n> (plot-symbols '(\"AAPL\" \"XOM\") \"Daily\"\n                (date-range \"2007-01-01\" \"2008-09-30\")\n                #t 'top-left 0.5 2.5)\n```", "```\n(define (get-data symbol period filter field)\n  (let ([in-port (open-input-file (data-path symbol period))])\n    (read-line in-port)\n    (let* ([recs\n            (reverse\n             (let loop([rec-list '()])\n               (let ([rec (import-record in-port)])\n                 (if (eof-object? rec)\n                     rec-list\n                     (if (filter rec)\n                         (loop (cons (field rec) rec-list))\n                         (loop rec-list))))))])\n      (close-input-port in-port)\n      recs)))\n```", "```\n> (get-data \"MSFT\" \"Monthly\"\n                (year-range \"1999\" \"1999\")\n                hist-close)\n'(43.75 37.53125 44.8125 40.65625 40.34375 45.09375 42.90625 46.28125 45.28125\n      46.28125 45.523399 58.375)\n```", "```\n(define (categorize data avg num-bins)\n  (let* ([bin (make-vector num-bins 0)]\n         [bin-min (* 0.4 avg)]\n         [bin-max (* 1.6 avg)]\n         [bin-delta (/ (- bin-max bin-min) num-bins)])\n    (define (update-bin val)\n      (when (<= bin-min val bin-max)\n        (let ([i (inexact->exact (floor (/ (- val bin-min) bin-delta)))])\n          (vector-set! bin i (add1 (vector-ref bin i))))))\n    (let loop ([val-list data])\n      (unless (null? val-list)\n        (update-bin (car val-list))\n        (loop (cdr val-list))))\n    (values bin-min bin-max\n            (for/list ([i (in-range num-bins)])\n              (vector i (vector-ref bin i))))))\n```", "```\n(define (bin-table bins bin-min bin-max)\n  (let* ([num-bins (length bins)]\n         [bin-delta (/ (- bin-max bin-min) num-bins)]\n         [rows\n          (for/list ([i (in-range num-bins)]\n                     [bin bins])\n            (let ([bmin (+ bin-min (* bin-delta i))]\n                  [bmax (+ bin-min (* bin-delta (add1 i)))]\n                  [count (vector-ref bin 1)])\n              (list\n               (~r i #:min-width 3)\n               (~r bmin #:min-width 8  #:precision (list '= 2))\n               (~r bmax #:min-width 8  #:precision (list '= 2))\n               (~r count #:min-width 4))))])\n    (table->string (cons '(\"Bin\" \"   Min\" \"   Max\" \"Vals\") rows))))\n```", "```\n(define (histogram-symbol symbol period filter [bins 11])\n  (let*-values ([(data) (get-data symbol period filter hist-close)]\n                [(avg) (/ (apply + data) (length data))]\n                [(bin-min bin-max hist-data) (categorize data avg bins)])\n    (displayln (bin-table hist-data bin-min bin-max))\n    (parameterize\n        ([plot-width 400]\n         [plot-height 250]\n         [plot-x-label #f]\n         [plot-y-label \"Frequency\"])\n      (plot (discrete-histogram hist-data)))))\n```", "```\n> (histogram-symbol \"AAPL\" \"Daily\" (date-range \"2007-01-01\" \"2008-09-30\"))\n+---+--------+--------+----+\n|Bin|   Min  |   Max  |Vals|\n+---+--------+--------+----+\n|  0|    8.06|   10.25|   0|\n+---+--------+--------+----+\n|  1|   10.25|   12.45|  30|\n+---+--------+--------+----+\n|  2|   12.45|   14.65|  55|\n+---+--------+--------+----+\n|  3|   14.65|   16.85|  20|\n+---+--------+--------+----+\n|  4|   16.85|   19.04|  87|\n+---+--------+--------+----+\n|  5|   19.04|   21.24|  54|\n+---+--------+--------+----+\n|  6|   21.24|   23.44|  46|\n+---+--------+--------+----+\n|  7|   23.44|   25.64|  81|\n+---+--------+--------+----+\n|  8|   25.64|   27.83|  61|\n+---+--------+--------+----+\n|  9|   27.83|   30.03|   6|\n+---+--------+--------+----+\n| 10|   30.03|   32.23|   0|\n+---+--------+--------+----+\n```", "```\n> (histogram-symbol \"XOM\" \"Daily\" (date-range \"2007-01-01\" \"2008-09-30\"))\n\n+---+--------+--------+----+\n|Bin|   Min  |   Max  |Vals|\n+---+--------+--------+----+\n|  0|   33.65|   42.83|   0|\n+---+--------+--------+----+\n|  1|   42.83|   52.00|   0|\n+---+--------+--------+----+\n|  2|   52.00|   61.18|   0|\n+---+--------+--------+----+\n|  3|   61.18|   70.36|   4|\n+---+--------+--------+----+\n|  4|   70.36|   79.54| 106|\n+---+--------+--------+----+\n|  5|   79.54|   88.71| 210|\n+---+--------+--------+----+\n|  6|   88.71|   97.89| 120|\n+---+--------+--------+----+\n|  7|   97.89|  107.07|   0|\n+---+--------+--------+----+\n|  8|  107.07|  116.25|   0|\n+---+--------+--------+----+\n|  9|  116.25|  125.42|   0|\n+---+--------+--------+----+\n| 10|  125.42|  134.60|   0|\n+---+--------+--------+----+\n```", "```\n(define (std-deviation nums)\n  (let* ([n (length nums)]\n         [mu (/ (apply + nums) n)]\n         [sqr-diff (map (λ (x) (sqr (- x mu))) nums)])\n    (sqrt (/ (apply + sqr-diff) n))))\n```", "```\n> (define apple (get-data \"AAPL\" \"Daily\" (date-range \"2007-01-01\" \"2008-09-30\"\n    ) hist-close))\n> (define xom (get-data \"XOM\" \"Daily\" (date-range \"2007-01-01\" \"2008-09-30\")\n    hist-close))\n\n> (std-deviation apple)\n4.811932439819516\n\n> (std-deviation xom)\n6.399636764602135\n```", "```\n> (define apple-avg (/ (apply + apple) (length apple)))\n> apple-avg\n20.143350647727257\n\n> (define xom-avg (/ (apply + xom) (length xom)))\n> xom-avg\n84.12513634318191\n\n> (/ (std-deviation apple) apple-avg)\n0.23888441024395504\n\n> (/ (std-deviation xom) xom-avg)\n0.07607282487478317\n```", "```\n(define (regression-params data)\n  (define (x v) (vector-ref v 0))\n  (define (y v) (vector-ref v 1))\n  (let* ([num (length data)] \n         [totx (apply + (map x data))]\n         [toty (apply + (map y data))]\n         [avgx (/ totx num)]\n         [avgy (/ toty num)]\n         [ss-xy (apply + (map (λ (v) (* (- (x v) avgx) (- (y v) avgy))) data))]\n         [ss-xx (apply + (map (λ (v) (sqr (- (x v) avgx))) data))]\n         [b (/ ss-xy ss-xx)]\n         [a (- avgy (* b avgx))])\n    (values a b)))\n```", "```\n> (define bac (get-coords \"BAC\" \"Monthly\"\n                          (date-range \"2007-07-01\" \"2009-02-01\")\n                          #f))\n\n> (regression-params bac)\n54422.310899480566\n-27.082265190974677\n```", "```\n(define (plot-regression symbol period filter\n                         [anchor 'top-left])\n  (let* ([coords (get-coords symbol period filter #f)]\n         [plot-data \n          (let ([color (hash-ref symbol-color symbol)])\n            (points coords #:label symbol #:color color))])\n    (let-values ([(a b) (regression-params coords)])\n      (parameterize \n          ([plot-width 400]\n           [plot-height 250]\n           [plot-x-label \"Year\"]\n           [plot-y-label #f]\n           [plot-legend-anchor anchor])\n        (plot (list\n               plot-data\n               (function (λ (x) (+ (* b x) a))\n                         #:color \"black\" #:label \"Regr\")))))))\n```", "```\n> (plot-regression \"BAC\" \"Monthly\"\n                (date-range \"2007-07-01\" \"2009-02-01\")\n                'bottom-left)\n```", "```\n(define (correlation data)\n  (define (x v) (vector-ref v 0))\n  (define (y v) (vector-ref v 1))\n  (let* ([num (length data)] \n         [totx (apply + (map x data))]\n         [toty (apply + (map y data))]\n         [avgx (/ totx num)]\n         [avgy (/ toty num)]\n         [ss-xx (apply + (map (λ (v) (sqr (- (x v) avgx))) data))]         \n         [ss-yy (apply + (map (λ (v) (sqr (- (y v) avgy))) data))]\n         [ss-xy (apply + (map (λ (v) (* (- (x v) avgx) (- (y v) avgy))) data))]\n         [b (/ ss-xy ss-xx)]\n         [a (- avgy (* b avgx))]\n         [ssr (apply + (map (λ (v) (sqr (- (+ (* b (x v)) a) avgy))) data))])\n    (/ ssr ss-yy)))\n```", "```\n> (define bac (get-coords \"BAC\" \"Monthly\"\n                          (date-range \"2007-07-01\" \"2009-02-01\")\n                          #f))\n> (correlation bac)\n0.8799353920116734\n```", "```\n> (plot-regression \"BAC\" \"Monthly\"\n                   (year-range \"2008\" \"2009\")\n                   'bottom-left)\n```", "```\n> (define bac (get-coords \"BAC\" \"Monthly\"\n                          (year-range \"2008\" \"2009\")\n                          #f))\n\n> (correlation bac)\n0.6064135484684874\n```"]