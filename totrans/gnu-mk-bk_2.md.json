["```\nX=$(YS) hate $(ZS)\nY=dog\nYS=$(Y)$(S)\nZ=cat\nZS=$(Z)$(S)\nS=s\n\nall:\n```", "```\nprint-%: ; @echo $* = $($*)\n```", "```\n$ **make print-X**\n```", "```\n$ **make print-X**\nX = dogs hate cats\n$ **make print-YS**\nYS = dogs\n$ **make print-S**\nS = s\n```", "```\nprint-%: ; @echo $* = '$($*)' from $(origin $*)\n```", "```\n$ **make print-YS**\nYS = 'dogs' from file\n```", "```\n$ **make print-YS YS=fleas**\nYS = 'fleas' from command line\n```", "```\n.PHONY: printvars\nprintvars:\n→ @$(foreach V,$(sort $(.VARIABLES)),            \\\n→ $(if $(filter-out environ% default automatic,  \\\n→ $(origin $V)),$(info $V=$($V) ($(value $V)))))\n```", "```\n$ **make printvars**\nMAKEFILE_LIST= Makefile helper.mak ( Makefile helper.mak)\nMAKEFLAGS= ()\nS=s (s)\nSHELL=/bin/sh (/bin/sh)\nX=dogs hate cats ($(YS) hate $(ZS))\nY=dog (dog)\nYS=dogs ($(Y)$(S))\nZ=cat (cat)\nZS=cats ($(Z)$(S))\n```", "```\n   $(foreach V,$(sort $(.VARIABLES)),\n     $(if\n➊    $(filter-out environment% default automatic,$(origin $V)),\n       $(info $V=$($V) ($(value $V)))\n     )\n   )\n```", "```\n 1 X=$(YS) hate $(ZS)\n 2 Y=dog\n 3 YS=$(Y)$(S)\n 4 Z=cat\n 5 ZS=$(Z)$(S)\n 6 S=s\n 7\n 8 all: $(YS) $(ZS)\n 9 all: ; @echo $(X)\n10\n11 $(YS): ; @echo $(Y) $(Y)\n12 $(ZS): ; @echo $(Z) $(Z)\n```", "```\ndog dog\ncat cat\ndogs hate cats\n```", "```\nifdef TRACE\n.PHONY: _trace _value\n_trace: ; @$(MAKE) --no-print-directory TRACE= \\\n      $(TRACE)='$$(warning TRACE $(TRACE))$(shell $(MAKE) TRACE=$(TRACE) _value)'\n_value: ; @echo '$(value $(TRACE))'\nendif\n```", "```\n$ **make TRACE=Y**\nMakefile:8: TRACE Y\nMakefile:11: TRACE Y\nMakefile:12: TRACE Y\nMakefile:12: TRACE Y\ndog dog\ncat cat\nMakefile:9: TRACE Y\ndogs hate cats\n```", "```\n$ **make TRACE=S**\nMakefile:8: TRACE S\nMakefile:8: TRACE S\nMakefile:11: TRACE S\nMakefile:12: TRACE S\ndog dog\ncat cat\nMakefile:9: TRACE S\nMakefile:9: TRACE S\ndogs hate cats\n```", "```\nY=dog\n```", "```\nY=$(warning TRACE Y)dog\n```", "```\n@$(MAKE) --no-print-directory TRACE= \\\n       $(TRACE)='$$(warning TRACE $(TRACE))$(shell $(MAKE) TRACE=$(TRACE) _value)'\n```", "```\nmake TRACE=YS _value\n```", "```\n_value: ; @echo '$(value $(TRACE))'\n```", "```\n$(TRACE)='$$(warning TRACE $(TRACE))$(shell $(MAKE)TRACE=$(TRACE) _value)'\n```", "```\nYS='$(warning TRACE YS)$(Y)$(S)'\n```", "```\nmake TRACE= YS='$(warning TRACE YS)$(Y)$(S)'\n```", "```\nall: FOO=foo\nall: a\nall: ; @echo $(FOO)\n\na: ; @echo $(FOO)\n```", "```\n$ **make TRACE=FOO**\nMakefile:10: TRACE FOO\nMakefile:8: TRACE FOO\n```", "```\n$ **make TRACE=S 2> trace.log**\ndog dog\ncat cat\ndogs hate cats\n```", "```\n.PHONY: all\nall: foo.o bar\n\nbar: ; @touch $@\n```", "```\n$ **make**\ncc -c -o foo.o foo.c\n```", "```\n$ **make -n**\ncc -c -o foo.o foo.c\ntouch bar\n```", "```\nSHELL += -x\n\n.PHONY: all\nall: foo.o bar\n\nbar: ; @touch $@\n```", "```\n$ **make**\ncc -c -o foo.o foo.c\n+ cc -c -o foo.o foo.c\n+ touch bar\n```", "```\nOLD_SHELL := $(SHELL)\nSHELL = $(warning Building $@)$(OLD_SHELL)\n\n.PHONY: all\nall: foo.o bar\n\nbar: ; @touch $@\n```", "```\n$ **make**\nmake: Building foo.o\ncc -c -o foo.o foo.c\nMakefile:7: Building bar\n```", "```\nOLD_SHELL := $(SHELL)\nSHELL = $(warning Building $@$(if $<, (from $<))$(if $?, ($? newer)))$(OLD_SHELL)\n\n.PHONY: all\nall: foo.o bar\n\nbar: ; touch $@\n```", "```\n$ **make**\nmake: Building foo.o (from foo.c) (foo.c newer)\ncc -c -o foo.o foo.c\nMakefile:7: Building bar\n```", "```\nOLD_SHELL := $(SHELL)\nSHELL = $(warning Building $@$(if $<, (from $<))$(if $?, ($? newer)))$(OLD_SHELL) -x\n\n.PHONY: all\nall: foo.o bar\n\nbar: ; @touch $@\n```", "```\n$ **make**\nmake: Building foo.o (from foo.c) (foo.c newer)\ncc -c -o foo.o foo.c\n+ cc -c -o foo.o foo.c\nMakefile:7: Building bar\n+ touch bar\n```", "```\n$ **make --trace**\n<builtin>: update target 'foo.o' due to: foo.c\ncc    -c -o foo.o foo.c\nMakefile:4: target 'bar' does not exist\ntouch bar\n```", "```\ninclude gmsl\n\nFOO := foo\nBAR := foo\n\n$(call assert,$(call sne,$(FOO),$(BAR)),FOO and BAR should not be equal)\n```", "```\nMakefile:5: *** GNU Make Standard Library: Assertion failure: FOO and BAR should\nnot be equal. Stop.\n```", "```\ninclude gmsl\n\n$(call assert,$(FOO),FOO is not defined)\n```", "```\ninclude gmsl\n\n$(foreach o,$(MAKEFLAGS),$(call assert,$(call sne,-i,$o),You can't use the -i option))\n\nifneq ($(patsubst -%,-,$(firstword $(MAKEFLAGS))),-)\n$(call assert,$(call sne,$(patsubst i%,i,$(patsubst %i,i,$(firstword \\\n$(MAKEFLAGS)))),i),You can't use the -i option)\nendif\n```", "```\ninclude gmsl\n\n$(call assert_exists,foo.txt)\n```", "```\nMakefile:3: *** GNU Make Standard Library: Assertion failure: file 'foo.txt'\nmissing. Stop.\n```", "```\ninclude gmsl\n\nassert_target_directory = $(call assert,$(wildcard $(dir $@)),Target directory $(dir $@) missing)\n\nfoo/all: ; @$(call assert_target_directory)echo $@\n```", "```\nMakefile:6: *** GNU Make Standard Library: Assertion failure: Target directory\nfoo/ missing. Stop.\n```", "```\ninclude gmsl\n\nassert_target_directory = $(call assert,$(wildcard $(dir $@)),Target directory $(dir $@) missing)\n\nOLD_SHELL := $(SHELL)\nSHELL = $(call assert_target_directory)$(OLD_SHELL)\n\nfoo/all: ; @echo $@\n```", "```\nMYVAR1 = hello\nMYVAR2 = $(MYVAR1) everyone\nall: MYVAR3 = $(MYVAR2)\nall: foo bar\n→ $(__BREAKPOINT)\n→ @echo Finally making $@\nfoo bar:\n→ @echo Building $@\n```", "```\n$ **make**\nBuilding foo\nBuilding bar\nMakefile:51: GNU Make Debugger Break\nMakefile:51: - Building 'all' from 'foo bar'\nMakefile:51: - First prerequisite is 'foo'\nMakefile:51: - Prerequisites 'foo bar' are newer than 'all'\n1>\n```", "```\n1< **h**\nMakefile:51: c       continue\nMakefile:51: q       quit\nMakefile:51: v VAR   print value of $(VAR)\nMakefile:51: o VAR   print origin of $(VAR)\nMakefile:51: d VAR   print definition of $(VAR)\n2>\n```", "```\n2> **v MYVAR1**\nMakefile:55: MYVAR1 has value 'hello'\n3> **v MYVAR2**\nMakefile:55: MYVAR2 has value 'hello everyone'\n4> **v MYVAR3**\nMakefile:55: MYVAR3 has value 'hello everyone'\n5>\n```", "```\n5> **d MYVAR3**\nMakefile:55: MYVAR3 is defined as '$(MYVAR2)'\n6>\n```", "```\n6> **d MYVAR2**\nMakefile:55: MYVAR2 is defined as '$(MYVAR1) everyone' 7\n> **d MYVAR1**\nMakefile:55: MYVAR1 is defined as 'hello'\n8>\n```", "```\n8> **o MYVAR1**\nMakefile:55: MYVAR1 came from file\n9>\n```", "```\n$ **make MYVAR1=Hello**\n1> **v MYVAR1**\nMakefile:55: MYVAR1 has value 'Hello'\n2> **o MYVAR1**\nMakefile:55: MYVAR1 came from command line\n3>\n```", "```\nall: foo.x bar.x\n\n%.x: FOO = foo\n%.x: %.y\n→ $(__BREAKPOINT)\n→ @echo Building $@ from $<...\n\nfoo.y:\nbar.y:\n```", "```\n$ **make**\nMakefile:66: GNU Make Debugger Break\nMakefile:66: - Building 'foo.x' from 'foo.y'\nMakefile:66: - First prerequisite is 'foo.y'\nMakefile:66: - Prerequisites 'foo.y' are newer than 'foo.x'\n1> **c**\nBuilding foo.x from foo.y...\nMakefile:66: GNU Make Debugger Break\nMakefile:66: - Building 'bar.x' from 'bar.y'\nMakefile:66: - First prerequisite is 'bar.y'\nMakefile:66: - Prerequisites 'bar.y' are newer than 'bar.x'\n1> **c**\nBuilding bar.x from bar.y...\n```", "```\n$ **make**\nMakefile:67: GNU Make Debugger Break\nMakefile:67: - Building 'foo.x' from 'foo.y'\nMakefile:67: - First prerequisite is 'foo.y'\nMakefile:67: - Prerequisites 'foo.y' are newer than 'foo.x'\n1> **v FOO**\nMakefile:67: FOO has value 'foo'\n2>\n```", "```\nFOO = foo\n$(__BREAKPOINT)\nFOO = bar\n$(__BREAKPOINT)\n```", "```\n$ **make**\nMakefile:76: GNU Make Debugger Break\n1> **v FOO**\nMakefile:76: FOO has value 'foo'\n2> **c**\nMakefile:78: GNU Make Debugger Break\n1> **v FOO**\nMakefile:78: FOO has value 'bar'\n2>\n```", "```\ninclude gmsl\n\n__LOOP := 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n```", "```\n__PROMPT = $(shell read -p \"$(__HISTORY)> \" CMD ARG ; echo $$CMD $$ARG)\n```", "```\n__BREAK = $(eval __INPUT := $(__PROMPT))       \\\n          $(call __DEBUG,                      \\\n              $(word 1,$(__INPUT)),            \\\n              $(word 2,$(__INPUT)))\n```", "```\n$(if $(call seq,$(__c),v),$(warning $(__a) has value '$($(__a))'), ... next if ... )\n```", "```\n__DEBUG = $(eval __c = $(strip $1))                      \\\n          $(eval __a = $(strip $2))                      \\\n          $(if $(call seq,$(__c),c),                     \\\n           $(true),                                      \\\n           $(if $(call seq,$(__c),q),                    \\\n            $(error Debugger terminated build),          \\\n            $(if $(call seq,$(__c),v),                   \\\n             $(warning $(__a) has value '$($(__a))'),    \\\n             $(if $(call seq,$(__c),d),                  \\\n     $(warning $(__a) is defined as '$(value $(__a))'),  \\\n               $(if $(call seq,$(__c),o),                \\\n     $(warning $(__a) came from $(origin $(__a))),       \\\n                $(if $(call seq,$(__c),h),               \\\n                 $(warning c       continue)             \\\n                 $(warning q       quit)                 \\\n             $(warning v VAR print value of $$(VAR))     \\\n             $(warning o VAR print origin of $$(VAR))    \\\n        $(warning d VAR print definition of $$(VAR)),    \\\n        $(warning Unknown command '$(__c)')))))))\n```", "```\n__BREAKPOINT = $(__BANNER)                              \\\n               $(eval __TERMINATE := $(false))          \\\n               $(foreach __HISTORY,                     \\\n                   $(__LOOP),                           \\\n                   $(if $(__TERMINATE),,                \\\n                      $(eval __TERMINATE := $(__BREAK))))\n```", "```\n__BANNER = $(warning GNU Make Debugger Break)           \\\n           $(if $^,                                     \\\n              $(warning - Building '$@' from '$^'),     \\\n              $(warning - Building '$@'))               \\\n       $(if $<,$(warning - First prerequisite is '$<')) \\\n           $(if $%,$(warning - Archive target is '$%')) \\\n           $(if $?,$(warning - Prerequisites '$?' are newer than '$@'))\n```", "```\n__LOOP := 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n\n__PROMPT = $(shell read -p \"$(__HISTORY)> \" CMD ARG ; echo $$CMD $$ARG)\n\n__DEBUG = $(eval __c = $(strip $1))                     \\\n          $(eval __a = $(strip $2))                     \\\n          $(if $(call seq,$(__c),c),                    \\\n           $(true),                                     \\\n           $(if $(call seq,$(__c),q),                   \\\n            $(error Debugger terminated build),         \\\n            $(if $(call seq,$(__c),v),                  \\\n             $(warning $(__a) has value '$($(__a))'),   \\\n             $(if $(call seq,$(__c),d),                 \\\n     $(warning $(__a) is defined as '$(value $(__a))'), \\\n               $(if $(call seq,$(__c),o),               \\\n     $(warning $(__a) came from $(origin $(__a))),      \\\n               $(if $(call seq,$(__c),h),               \\\n                $(warning c       continue)             \\\n                $(warning q       quit)                 \\\n             $(warning v VAR print value of $$(VAR))    \\\n             $(warning o VAR print origin of $$(VAR))   \\\n        $(warning d VAR print definition of $$(VAR)),   \\\n        $(warning Unknown command '$(__c)')))))))\n\n__BREAK = $(eval __INPUT := $(__PROMPT))                \\\n          $(call __DEBUG,                               \\\n              $(word 1,$(__INPUT)),                     \\\n              $(word 2,$(__INPUT)))\n\n__BANNER = $(warning GNU Make Debugger Break)           \\\n           $(if $^,                                     \\\n              $(warning - Building '$@' from '$^'),     \\\n              $(warning - Building '$@'))               \\\n       $(if $<,$(warning - First prerequisite is '$<')) \\\n           $(if $%,$(warning - Archive target is '$%')) \\\n           $(if $?,$(warning - Prerequisites '$?' are newer than '$@'))\n__BREAKPOINT = $(__BANNER)                              \\\n               $(eval __TERMINATE := $(false))          \\\n               $(foreach __HISTORY,                     \\\n               $(__LOOP),                               \\\n               $(if $(__TERMINATE),,                    \\\n                  $(eval __TERMINATE := $(__BREAK))))\n```", "```\ninclude gmd\n\nMYVAR1 = hello\nMYVAR2 = $(MYVAR1) everyone\n\nall: MYVAR3 = $(MYVAR2)\nall: foo bar\nall: ; @echo Finally making $@\nfoo bar: ; @echo Building $@\n\n$(__BREAKPOINT)\n```", "```\n$ **make**\nMakefile:11: GNU Make Debugger Break\n1> **h**\nMakefile:11: c:     continue\nMakefile:11: q:     quit\nMakefile:11: v VAR: print value of $(VAR)\nMakefile:11: o VAR: print origin of $(VAR)\nMakefile:11: d VAR: print definition of $(VAR)\nMakefile:11: b TAR: set a breakpoint on target TAR\nMakefile:11: r TAR: unset breakpoint on target TAR\nMakefile:11: l: list all target breakpoints\n2>\n```", "```\n2> **b foo**\nMakefile:11: Breakpoint set on `foo'\n3> **b all**\nMakefile:11: Breakpoint set on `all'\n4> **l**\nMakefile:11: Current target breakpoints: `all' `foo'\n5>\n```", "```\n5> **c**\nMakefile:9: GNU Make Debugger Break\nMakefile:9: - Building 'foo'\n1>\n```", "```\n1> **c**\nBuilding foo\nBuilding bar\nMakefile:7: GNU Make Debugger Break\nMakefile:7: - Building 'all' from 'foo bar'\nMakefile:7: - First prerequisite is 'foo'\nMakefile:7: - Prerequisites 'foo bar' are newer than 'all'\n1>\n```", "```\n__BREAKPOINTS := $(empty_set)\n```", "```\n__BP_SET = $(eval __BREAKPOINTS := $(call set_insert,$1,$(__BREAKPOINTS))) \\\n          $(warning Breakpoint set on `$1')\n\n__BP_UNSET = $(if $(call set_is_member,$1,$(__BREAKPOINTS)),               \\\n        $(eval __BREAKPOINTS := $(call set_remove,$1,$(__BREAKPOINTS)))    \\\n        $(warning Breakpoint on `$1' removed),                             \\\n        $(warning Breakpoint on `$1' not found))\n```", "```\n__BP_LIST = $(if $(__BREAKPOINTS),                      \\\n             $(warning Current target breakpoints:      \\\n       $(addsuffix ',$(addprefix `,$(__BREAKPOINTS)))), \\\n             $(warning No target breakpoints set))\n```", "```\n__BP_OLD_SHELL := $(SHELL)\n__BP_NEW_SHELL = $(if $(call seq,$(__BP_FLAG),$@), \\\n                 $(call $1,),                      \\\n                 $(__BP_CHECK))$(__BP_OLD_SHELL)\nSHELL = $(call __BP_NEW_SHELL,$1)\n```", "```\n__BP_CHECK = $(if $(call set_is_member,$@,        \\\n              $(__BREAKPOINTS)),                  \\\n              $(eval __BP_FLAG := $@)             \\\n              $(eval __IGNORE := $(call SHELL,    \\\n                                 __BREAKPOINT)))\n__BP_FLAG :=\n```", "```\n.PHONY: all\nall: foo bar baz\n\nfoo: bar\n→ @touch $@\nbar:\n→ @touch $@\n\nbaz: bam\n→ @touch $@\n\nbam:\n→ @touch $@\n```", "```\n$ **make -n**\ntouch bar\ntouch foo\ntouch bam\ntouch baz\n```", "```\n$ remake -n\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:8: bar\ntouch bar\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:5: foo\ntouch foo\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:14: bam\ntouch bam\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:11: baz\ntouch baz\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n```", "```\n$ **remake -x**\nReading makefiles...\nUpdating goal targets....\nMakefile:2  File `all' does not exist.\n  Makefile:4 File `foo' does not exist.\n    Makefile:7 File `bar' does not exist.\n    Makefile:7 Must remake target `bar'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:8: bar\ntouch bar\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n+ touch bar\n   Makefile:7 Successfully remade target file `bar'.\n Makefile:4 Must remake target `foo'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:5: foo\ntouch foo\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n+ touch foo\n Makefile:4 Successfully remade target file `foo'.\n  Makefile:10 File `baz' does not exist.\n    Makefile:13 File `bam' does not exist.\n   Makefile:13 Must remake target `bam'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:14: bam\ntouch bam\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n+ touch bam\n   Makefile:13 Successfully remade target file `bam'.\n Makefile:10 Must remake target `baz'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:11: baz\ntouch baz\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n+ touch baz\n\nMakefile:10 Successfully remade target file `baz'.\nMakefile:2 Must remake target `all'. Is a phony target.\nMakefile:2 Successfully remade target file `all'.\n```", "```\n$ **remake -x**\nReading makefiles...\nUpdating goal targets....\nMakefile:2 File `all' does not exist.\n  Makefile:4 File `foo' does not exist.\n    Makefile:7 File `bar' does not exist.\n   Makefile:7 Must remake target `bar'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nMakefile:8: bar\ntouch -z bar\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n+ touch -z bar\ntouch: invalid option -- 'z'\nTry `touch --help' for more information.\nMakefile:8: *** [bar] Error 1\n\n#0 bar at Makefile:8\n#1 foo at Makefile:4\n#2 all at Makefile:2\nCommand-line arguments:\n       \"-x\"\n```", "```\n$ **remake -X**\nGNU Make 3.82+dbg0.9\nBuilt for x86_64-unknown-linux-gnu\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nReading makefiles...\nUpdating makefiles....\nUpdating goal targets....\n  Makefile:2 File `all' does not exist.\n-> (Makefile:4)\nfoo: bar\nremake<0>\n```", "```\nremake<0> **h**\n  Command                Short Name  Aliases\n  ---------------------- ----------  ---------\n  break [TARGET|LINENUM] [all|run|prereq|end]* (b) L\n  cd DIR                          (C)\n  comment TEXT                    (#)\n  continue [TARGET [all|run|prereq|end]*] (c)\n  delete breakpoint numbers..     (d)\n  down [AMOUNT]                   (D)\n  edit                            (e)\n  eval STRING                     (E)\n  expand STRING                   (x)\n  finish [AMOUNT]                 (F)\n  frame N                         (f)\n  help [COMMAND]                  (h) ?, ??\n  info [SUBCOMMAND]               (i)\n  list [TARGET|LINE-NUMBER]       (l)\n  next [AMOUNT]                   (n)\n  print {VARIABLE [attrs...]}     (p)\n  pwd                             (P)\n  quit [exit-status]              (q) exit, return\n  run [ARGS]                      (R) restart\n  set OPTION {on|off|toggle}\n  set variable VARIABLE VALUE     (=)\n  setq VARIABLE VALUE             (\")\n  shell STRING                    (!) !!\n  show [SUBCOMMAND]               (S)\n  source FILENAME                 (<)\n  skip                            (k)\n  step [AMOUNT]                   (s)\n  target [TARGET-NAME] [info1 [info2...]] (t)\n  up [AMOUNT]                     (u)\n  where                           (T) backtrace, bt\n  write [TARGET [FILENAME]]       (w)\n```", "```\nremake<1> **s**\n    Makefile:4 File `foo' does not exist.\n-> (Makefile:7)\nbar:\nremake<2> **s**\n      Makefile:7 File `bar' does not exist.\n      Makefile:7 Must remake target `bar'.\nInvoking recipe from Makefile:8 to update target `bar'.\n##>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\ntouch -z bar\n##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n++ (Makefile:7)\nbar\nremake<3> **s**\ntouch: invalid option -- 'z'\nTry 'touch --help' for more information.\nMakefile:7: *** [bar] Error 1\n\n#0 bar at Makefile:7\n#1 foo at Makefile:4\n#2 all at Makefile:2\n\n***Entering debugger because we encountered a fatal error.\n** Exiting the debugger will exit make with exit code 1.\n!! (Makefile:7)\nbar\nremake<4>\n```", "```\nremake<4> **R**\nChanging directory to /home/jgc and restarting...\nGNU Make 3.82+dbg0.9\nBuilt for x86_64-unknown-linux-gnu\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nReading makefiles...\nUpdating makefiles....\nUpdating goal targets....\n  Makefile:2 File `all' does not exist.\n-> (Makefile:4)\nfoo: bar\nremake<0> **c**\n```", "```\n$ **remake -X**\nGNU Make 3.82+dbg0.9\nBuilt for x86_64-unknown-linux-gnu\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nReading makefiles...\nUpdating makefiles....\nUpdating goal targets....\n  /home/jgc/src/thirdparty/remake-3.82+dbg0.9/Makefile:2 File `all' does not exist.\n-> (/home/jgc/src/thirdparty/remake-3.82+dbg0.9/Makefile:4)\nfoo: bar\nremake<0> **target all**\nall: foo bar baz\n# Phony target (prerequisite of .PHONY).\n# Implicit rule search has not been done.\n# Implicit/static pattern stem: `'\n# File does not exist.\n# File has not been updated.\n# Commands not yet started.\n# automatic\n# @ := all\n# automatic\n# % :=\n# automatic\n# * :=\n# automatic\n# + := foo bar baz\n# automatic\n# | :=\n# automatic\n# < := all\n# automatic\n# ^ := foo bar baz\n# automatic\n# ? :=\nremake<1>\n```", "```\nremake<1> **target foo**\nfoo: bar\n#  Implicit rule search has not been done.\n#  Implicit/static pattern stem: `'\n#  File does not exist.\n#  File has not been updated.\n#  Commands not yet started.\n#  automatic\n# @ := foo\n# automatic\n# % :=\n# automatic\n# * :=\n# automatic\n# + := bar\n# automatic\n# | :=\n# automatic\n# < := bar\n# automatic\n# ^ := bar\n# automatic\n# ? :=\n#  commands to execute (from `Makefile', line 5):\n    @touch $@\n\nremake<2>\n```", "```\nremake<2> **target foo expand**\nfoo:\n#  commands to execute (from `Makefile', line 5):\n   @touch foo\n\nremake<3>\n```", "```\nremake<4> **print COMPILE.c**\n(origin default) COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c\n```", "```\nremake<7> **expand COMPILE.c**\n(origin default) COMPILE.c := cc -c\n```", "```\nremake<7> **expand COMPILE.c**\n(origin default) COMPILE.c := cc    -c\nremake<8> **print CC**\n(origin default) CC = cc\nremake<9> **setq CC gcc**\nVariable CC now has value 'gcc'\nremake<10> **print CC**\n(origin debugger) CC = gcc\nremake<11> **expand COMPILE.c**\n(origin default) COMPILE.c := gcc   -c\nremake<12>\n```"]