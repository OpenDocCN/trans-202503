["```\n#include <stdio.h>\n#include <stdlib.h>\n\n❶ void swap(int, int); // defined in Listing 2-2\n\nint main() {\n  int a = 21;\n  int b = 17;\n❷ swap(a, b);\n  printf(\"main: a = %d, b = %d\\n\", a, b);\n  return EXIT_SUCCESS;\n}\n```", "```\nvoid swap(int a, int b) {\n  int t = a;\n  a = b;\n b = t;\n  printf(\"swap: a = %d, b = %d\\n\", a, b);\n}\n```", "```\n% **./a.out**\nswap: a = 17, b = 21\nmain: a = 21, b = 17\n```", "```\nvoid swap(int *pa, int *pb) {\n  int t = *pa;\n  *pa = *pb;\n  *pb = t;\n}\n```", "```\npa = pb;\n```", "```\n*pa = *pb;\n```", "```\nswap(&a, &b);\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid swap(int *pa, int *pb) {   // pa → a: 21    pb → b: 17\n  int t = *pa;                  // t: 21\n  *pa = *pb;                    // pa → a: 17    pb → b: 17\n  *pb = t;                      // pa → a: 17    pb → b: 21\n}\n\nint main() {\n  int a = 21;                   // a: 21\n  int b = 17;                   // b: 17\n  swap(&a, &b);\n  printf(\"a = %d, b = %d\\n\", a, b);    // a: 17    b: 21\n  return EXIT_SUCCESS;\n}\n```", "```\nbool arm_detonator(int);\n\nvoid arm_missile(void) {\n  bool armed = arm_detonator(3);\n  if (armed) puts(\"missile armed\");\n  else puts(\"missile disarmed\");\n}\n```", "```\nenum day {sun, mon, tue, wed, thu, fri, sat};\nenum cardinal_points {north = 0, east = 90, south = 180, west = 270};\nenum months {jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec};\n```", "```\nenum a : unsigned long long {\n  a0 = 0xFFFFFFFFFFFFFFFFULL\n};\n```", "```\nint f(void);\nint fprime();\nint *fip();\nvoid g(int i, int j);\nvoid h(int, int);\n```", "```\nint max(int a, int b)\n{return a > b ? a : b;}\n```", "```\nint *ip = 0; // compliant\nchar *cp = NULL; // good\nvoid *vp = nullptr; // better\n```", "```\nint i = 17;\nint *ip = &i;\n```", "```\nip = &*ip;\n```", "```\nint ia[11];\nfloat *afp[17];\n```", "```\nchar str[11];\nfor (unsigned int i = 0; i < 10; ++i) {\n  str[i] = '0' + i;\n}\nstr[10] = '\\0';\n```", "```\n&str[10] → &*(str + 10) → str + 10\n```", "```\n#include <stdlib.h>\nvoid func(int arr[5]);\nint main() {\n  unsigned int i = 0;\n  unsigned int j = 0;\n  int arr[3][5];\n❶ func(arr[i]);\n❷ int x = arr[i][j];\n  return EXIT_SUCCESS;\n}\n```", "```\nstruct sigrecord {\n  int signum;\n  char signame[20];\n  char sigdesc[100];\n} sigline, *sigline_p;\n```", "```\nsigline.signum = 5;\nstrcpy(sigline.signame, \"SIGINT\");\nstrcpy(sigline.sigdesc, \"Interrupt from keyboard\");\n\n❶ sigline_p = &sigline;\n\nsigline_p->signum = 5;\nstrcpy(sigline_p->signame, \"SIGINT\");\nstrcpy(sigline_p->sigdesc, \"Interrupt from keyboard\");\n```", "```\nstatic_assert(\n  (__STDC_IEC_60559_BFP__ >= 202311L || __STDC_IEC_559__ == 1)\n  && __STDC_ENDIAN_LITTLE__\n);\n\nunion {\n  float f;\n  struct {\n    uint32_t significand : 23;\n    uint32_t exponent : 8;\n    uint32_t sign : 1;\n  };\n} float_encoding;\n```", "```\nenum node_type {\n  integer_type,\n  float_type,\n  double_float_type,\n long_double_type\n};\n\nstruct node {\n  enum node_type type;\n  union {\n    int inode;\n    float fnode;\n    double dnode;\n    long double ldnode;\n  } u;\n} n;\n\nn.type = double_type;\nn.u.dnode = 3.14;\n```", "```\nstruct s {\n  // `--snip--`\n};\n```", "```\nstruct s v;   // instance of struct s\nstruct s *p;  // pointer to struct s\n```", "```\nenum day {sun, mon, tue, wed, thu, fri, sat};\nday today;  // error\nenum day tomorrow;  // OK\n```", "```\nenum status {ok, fail};    // enumeration\nenum status status(void);  // function\n```", "```\nstruct s s;\n```", "```\ntypedef struct s {int x;} t;\n```", "```\ntypedef struct {int x;} t;\n```", "```\nstruct tnode {\n  int count;\n  struct tnode *left;\n  struct tnode *right;\n};\n```", "```\ntypedef struct tnode {\n  int count;\n  struct tnode *left;\n  struct tnode *right;\n} tnode;\n```", "```\ntypedef struct tnode_ {\n  int count;\n  struct tnode_ *left;\n  struct tnode_ *right;\n} tnode;\n```", "```\ntypedef struct tnode tnode;\nstruct tnode {\n  int count;\n  tnode *left;\n  tnode *right;\n};\n```", "```\ntypedef void fv(int), (*pfv)(int);\n```", "```\nvoid (*signal(int, void (*)(int)))(int);\nfv *signal(int, fv *);\npfv signal(int, pfv);\n```", "```\nconst int i = 1; // const-qualified int\ni = 2; // error: i is const-qualified\n```", "```\nconst int i = 1;  // object of const-qualified type\nint *ip = (int *)&i;\n*ip = 2;  // undefined behavior\n```", "```\nint i = 12;\nconst int j = 12;\nconst int *ip = &i;\nconst int *jp = &j;\n*(int *)ip = 42; // OK\n*(int *)jp = 42; // undefined behavior\n```", "```\nport = port;\n```", "```\nvoid f(unsigned int n, int * restrict p, int * restrict q) {\n  while (n-- > 0) {\n    *p++ = *q++;\n  }\n}\n```", "```\nint **j**;  // file scope of **j** begins\n\nvoid f(int **i**) {         // block scope of **i** begins\n  int **j** = 1;            // block scope of **j** begins; hides file-scope **j**\n  i++;                  // **i** refers to the function parameter\n  for (int **i** = 0; **i** < 2; i++) {  // block scope of loop-local **i** begins\n    int **j** = 2;          // block scope of the inner **j** begins; hides outer **j**\n    printf(\"%d\\n\", **j**);  // inner **j** is in scope, prints 2\n  }                     // block scope of the inner **i** and **j** ends\n  printf(\"%d\\n\", j);    // the outer **j** is in scope, prints 1\n}  // the block scope of **i** and **j** ends\n\nvoid g(int **j**);          // **j** has function prototype scope; hides file-scope **j**\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid increment(void) {\n  static unsigned int counter = 0;\n  counter++;\n  printf(\"%d \", counter);\n}\n\nint main() {\n  for (int i = 0; i < 5; i++) {\n    increment();\n  }\n  return EXIT_SUCCESS;\n}\n```", "```\nstatic size_t const BFO = 0x100000000;\n```", "```\nconstexpr size_t BFO = 0x100000000;\n```", "```\nint *func(int i) {\n  const int j = i; // ok\n  static int k = j; // error\n  return &k;\n}\n```", "```\nstatic auto a = 3;\nauto p = &a;\n```", "```\nstatic int a = 3;\nint * p = &a;\n```", "```\n_Atomic(typeof(x)*) apx = &x;\n```", "```\n#include <stdlib.h>\nconst _Atomic int asi = 0;\nconst int si = 1;\nconst char* const beatles[] = {\n    \"John\",\n    \"Paul\",\n    \"George\",\n    \"Ringo\"\n};\n\n❶ typeof_unqual(si) main() {\n  ❷ typeof_unqual(asi) plain_si;\n  ❸ typeof(_Atomic ❹ typeof(si)) atomic_si;\n  ❺ typeof(beatles) beatles_array;\n  ❻ typeof_unqual(beatles) beatles2_array;\n    return EXIT_SUCCESS;\n}\n```", "```\nint main() {\n  int plain_si;\n  const _Atomic int atomic_si;\n  const char* const beatles_array[4];\n  const char* beatles2_array[4];\n  return EXIT_SUCCESS;\n}\n```", "```\nstruct S {\n  double d; int i; char c;\n};\n\nint main() {\n  unsigned char bad_buff[sizeof(struct S)];\n  alignas(struct S) unsigned char good_buff[sizeof(struct S)];\n  struct S *bad_s_ptr = (struct S *)bad_buff;\n  struct S *good_s_ptr = (struct S *)good_buff; // correct alignment\n  good_s_ptr->i = 12;\n  return good_s_ptr->i;\n}\n```", "```\nvoid *memset(void *s, int c, size_t n);\n```", "```\nvoid *memset_vmt(size_t n, char s[n], int c);\n```", "```\nint matrix_sum(size_t rows, int m[][4]);\n```", "```\nint main(void) {\n  int m1[5][4];\n  int m2[100][4];\n  int m3[2][4];\n  printf(\"%d.\\n\", matrix_sum(5, m1));\n  printf(\"%d.\\n\", matrix_sum(100, m2));\n  printf(\"%d.\\n\", matrix_sum(2, m3));\n}\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">warning: incompatible pointer types passing 'int [2][5]' to parameter of type 'int (*)[4]'</samp>\n```", "```\nint matrix_sum(size_t rows, size_t cols, int m[rows][cols]) {\n  int total = 0;\n\n  for (size_t r = 0; r < rows; r++)\n    for (size_t c = 0; c < cols; c++)\n      total += ❶ m[r][c];\n  return total;\n}\n```", "```\n[[foo]] int x, y, *z;\n```", "```\nint a, b [[foo, bar]], *c;\n```"]