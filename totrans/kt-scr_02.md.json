["```\n// This is a single-line comment.\n\n/*\n   This code block will be ignored by the compiler\n   as it is inside a multiline comment block.\n*/\n```", "```\n/* This is a multiline comment\n   used for providing useful tips or reminders. */\n\n/**\n* This is a documentation comment.\n*\n* @param name The name of the person\n* @return The greeting string\n*/\nfun greet(name: String): String {\n    return \"Hello, $name!\"\n}\n```", "```\nfun main() {\n    val name = \"John Sinclair\"\n    val age = 30\n    println(\"$name is $age years old\")\n}\n```", "```\nJohn Sinclair is 30 years old\n```", "```\nfun main() {\n    var name = \"John Sinclair\"\n    var age = 30\n    println(\"$name is $age years old\")\n  ❶ name = \"John Sinclair Jr.\"\n    age = 12\n    println(\"$name is $age years old\")\n}\n```", "```\nJohn Sinclair is 30 years old\nJohn Sinclair Jr. is 12 years old\n```", "```\nconst val PI = 3.14159265359\n```", "```\nval name = \"John Sinclair\"\n```", "```\nval name: String = \"John Sinclair\"\n```", "```\nval regularInt = 42\nval floatNumber = 3.14f\nval longNumber = 123456789L\n```", "```\nval intNumber = 22  // type inferred as Int\nval longNumber: Long = intNumber  // implicit type casting\n```", "```\nval intNumber = 44  // type inferred as Int\nval doubleNumber: Double = intNumber.toDouble()\n```", "```\nval message: String = \"Hello, world!\"\nval intValue: Int = message.toInt()\n```", "```\nval a = 20\nval b = 7\nval sum = a + b            // addition, yields 27\nval difference = a – b     // subtraction, yields 13\nval product = a * b        // multiplication, yields 140\nval quotient = a / b       // division, yields 2\n```", "```\nval a = 20\nval b = 7\nval quotientInt = a / b               // integer division\nval quotientFloat = a.toFloat() / b   // real division\n```", "```\nval a = 20\nval b = 7\nval result = a % b // The result is 6.\n```", "```\nfun main() {\n    // example without parentheses\n    val resultWithoutParentheses = 5 + 3 * 2\n    println(\"Result without parentheses: $resultWithoutParentheses\")\n\n    // example with parentheses\n    val resultWithParentheses = (5 + 3) * 2\n    println(\"Result with parentheses: $resultWithParentheses\")\n}\n```", "```\nvar a = 10\na += 5         // equivalent to a = a + 5 (a becomes 15)\na -= 5         // equivalent to a = a – 5 (a becomes 5)\na *= 5         // equivalent to a = a * 5 (a becomes 50)\na /= 5         // equivalent to a = a / 5 (a becomes 2)\n```", "```\nvar s = \"John Smith\"\ns += \" Jr.\"           // The s becomes \"John Smith Jr.\"\n```", "```\nvar a = 10\na++         // equivalent to a = a + 1 (a becomes 11)\na--         // equivalent to a = a – 1 (a becomes 10 again)\n```", "```\nval a = 10\nval b = 5\nval isEqual = (a == b)      // equality check\nval isNotEqual = (a != b)   // inequality check\nval isGreater = (a > b)     // greater than check\nval isLesser = (a < b)      // less than check\n```", "```\nval text1 = \"Hello\"\nval text2 = \"World\"\nval isNotEqual = (text1 != text2) // true\nval isGreater = (text1 > text2)   // false\n```", "```\nval x = true\nval y = false\n\nval andResult = (x && y)   // logical AND operation (returns false)\nval orResult = (x || y)    // logical OR operation (returns true)\nval notResult = !x         // logical NOT operation (returns false)\n```", "```\nval a = \"Hello,\"\nval b = \"world!\"\n\n// Use the plus (+) operator.\nvar c = a + \" \" + b\nprintln(c) // output: Hello, world!\n\n// Use the plus() method of the String class.\nc = a.plus(\" \").plus(b)\nprintln(c) // output: Hello, world!\n```", "```\nHello, world!\n```", "```\nval c = buildString {\n           append(\"Hello,\")\n           append(\" \")\n           append(\"world!\")\n       }\nprintln(c) // output: Hello, world!\n```", "```\nval name = \"John\"\nval age = 30\nval message = \"My name is $name and I'm $age years old.\"\nprintln(message)\n```", "```\nMy name is John and I'm 30 years old.\n```", "```\nval message = \"My name is \" + name + \" and I'm \" + age + \" years old.\"\n```", "```\nval x = 20\nval y = 15\nval result = \"$x + $y = ${x + y}\"\nprintln(result) // output: 20 + 15 = 35\n```", "```\nfun main() {\n    val name = \"John\"\n    val age = 30\n\n    // using escape characters in string template\n    val message = \"Name: $name\\nAge: $age\"\n\n    println(message)\n}\n```", "```\nName: John\nAge: 30\n```", "```\nvar str: String = \"Hello, world!\"  // valid initialization\nstr = null  // invalid, will result in compilation error\n```", "```\nvar str: String? = \"hello world\" // valid initialization\nstr = null // reassigned to null, no compilation error\n```", "```\nval str: String? = \"Hello, world!\"\nval len = if (str != null) str.length else -1\n```", "```\nval len = str?.length\n```", "```\nval len = str?.length ?: -1\n```", "```\nval name: String? = \"John\"\nval length = name!!.length\n```", "```\nval x = 10\nif (x > 0) println(\"x is positive\")\n```", "```\nval x = -10\nif (x > 0) {\n    println(\"x is positive\")\n} else {\n    println(\"x is not positive\")\n}\n```", "```\nfun main() {\n    val a = 100\n    val b = -30\n  ❶ val max: Int\n\n    if (a > b) {\n        max = a\n        println(\"a is greater than b.\")\n        println(\"max of $a and $b is: $max\")\n    } else if (a < b) {\n        max = b\n        println(\"b is greater than a.\")\n println(\"max of $a and $b is: $max\")\n    } else\n        println(\"a and b have the same value: $a\")\n}\n```", "```\nif (`condition 1`) {\n    // code to execute when condition 1 is true\n} else if (`condition 2`) {\n    // code to execute when condition 2 is true\n} else {\n    // code to execute when conditions 1 and 2 are not true\n}\n```", "```\nfun main() {\n    val x = 5\n\n    when {\n        x > 0 -> println(\"x is positive\")\n        x == 0 -> println(\"x is zero\")\n        x < 0 -> println(\"x is negative\")\n        else -> println(\"x is not a real number\")\n    }\n}\n```", "```\nfun main() {\n    val hour = 13\n\n    when (hour) {\n        in 0..11 -> println(\"Good morning\")\n        in 12..16 -> println(\"Good afternoon\")\n        in 17..23 -> println(\"Good evening\")\n        else -> println(\"Invalid hour\")\n    }\n}\n```", "```\n// inclusive range (1 to 4)\nfor (i in 1..4) {\n    println(\"Current value of i is: $i\")\n}\n```", "```\nCurrent value of i is: 1\nCurrent value of i is: 2\nCurrent value of i is: 3\nCurrent value of i is: 4\n```", "```\n// exclusive range with step\nfor (i in 1 until 10 step 3) {\n    println(\"Current value of i is: $i\")\n}\n```", "```\nCurrent value of i is: 1\nCurrent value of i is: 4\nCurrent value of i is: 7\n```", "```\nfor (i in 4 downTo 1) {\n    println(\"Current value of i is: $i\")\n}\n```", "```\nCurrent value of i is: 4\nCurrent value of i is: 3\nCurrent value of i is: 2\nCurrent value of i is: 1\n```", "```\nfor (i in 1..4) {\n    if (i == 3) {\n        // Skip the current iteration when i is 3.\n        continue\n    }\n    println(\"Current value of i is: $i\")\n}\n```", "```\nCurrent value of i is: 1\nCurrent value of i is: 2\nCurrent value of i is: 4\n```", "```\nfor (i in 1..4) {\n    if (i == 3) {\n        // Exit the loop when i is 3.\n        break\n    }\n    println(\"Current value of i is: $i\")\n}\n```", "```\nCurrent value of i is: 1\nCurrent value of i is: 2\n```", "```\nfun main() {\n    val size = 4 // Change this value to adjust the size of the square.\n\n    // nested for loops to print a square pattern of asterisks\n    for (i in 1..size) {\n        for (j in 1..size) {\n          ❶ print(\"* \")\n        }\n      ❷ println() // Move to the next line after each row.\n    }\n}\n```", "```\n* * * *\n* * * *\n* * * *\n* * * *\n```", "```\nloop1@ for (i in 1..5) {\n    loop2@ for (j in 1..5) {\n        print(\"$i,$j \")\n      ❶ if (i == j) break@loop2\n    }\n    println()\n}\n```", "```\n1,1 1,2 1,3 1,4 1,5\n2,1 2,2 2,3 2,4 2,5\n3,1 3,2 3,3 3,4 3,5\n4,1 4,2 4,3 4,4 4,5\n5,1 5,2 5,3 5,4 5,5\n```", "```\n1,1\n2,1 2,2\n3,1 3,2 3,3\n4,1 4,2 4,3 4,4\n5,1 5,2 5,3 5,4 5,5\n```", "```\nvar count = 0\nwhile (count < 4) {\n    println(\"Current value of count: $count\")\n    count++\n}\n```", "```\nCurrent value of count: 0\nCurrent value of count: 1\nCurrent value of count: 2\nCurrent value of count: 3\n```", "```\nvar count = 0\nwhile (true) {\n    println(\"Current value of count: $count\")\n    count++\n    if (count >= 4) break\n}\n```", "```\ndo {\n    // code to be executed\n} while (`condition`)\n```", "```\nimport kotlin.math.sqrt\nimport kotlin.math.pow\n\nfun main() {\n    val x = 100.0\n    val y = 10.0\n\n    val squareRoot = \"The square root of $x is: ${sqrt(x)}\"\n    val toThePower2 = \"$y raised to the 2nd power is: ${y.pow(2.0)}\"\n\n    println(squareRoot)\n    println(toThePower2)\n}\n```", "```\nThe square root of 100.0 is: 10.0\n10.0 raised to the 2nd power is: 100.0\n```", "```\nfun `functionName`(`parameter1`: `Type`,\n                 `parameter2`: `Type`, ...): `ReturnType` {\n    // function body\n}\n```", "```\nfun add(x: Int, y: Int): Int {\n    return x + y\n}\n```", "```\nfun main() {\n    // Declare the variables.\n    val a = 3\n    val b = 6\n\n    // Call the function to add two integers.\n    val sum = add(a, b)\n    println(\"The sum of $a and $b is $sum.\")\n}\n```", "```\nThe sum of 3 and 6 is 9.\n```", "```\nfun greet(name: String, greeting: String = \"Hello\") {\n    println(\"$greeting $name!\")\n}\n```", "```\nHello Nathan!\n```", "```\nfun printPersonInfo(firstName: String, lastName: String,\n                    age: Int, gender: String) {\n    println(\"Person info: $firstName $lastName, \" +\n            \"Age: $age, Gender: $gender\")\n}\n```", "```\nprintPersonInfo(lastName = \"Keller\", firstName = \"Jeffrey\",\n                age = 40, gender = \"Male\")\n```", "```\n// function to add two integers\nfun add(a: Int, b: Int): Int {\n    return a + b\n}\n\n// function to add two doubles\nfun add(a: Double, b: Double): Double {\n    return a + b\n}\n```", "```\nval result1 = add(2, 3)\nval result2 = add(40.5, 23.9)\n```", "```\nfun add(x: Double, y: Double): Double {\n    return x + y\n}\n\nfun multiply(x: Double, y: Double): Double {\n    return x * y\n}\n\n// Change this condition to use add() or multiply().\nval useAdd = true\n\nfun main() {\n    // Declare a function variable using member reference.\n  ❶ val selectedFunction = if (useAdd) ::add else ::multiply\n\n    val x = 3.0\n    val y = 4.0\n\n    // Calculate the value of the selected function.\n  ❷ val result = selectedFunction(x, y)\n\n    // Print the result.\n    println(\"Result: $result\")\n}\n```", "```\nfun printMessage(message: String) {\n    println(message)\n}\n\nfun applyFunction(function: (String) -> Unit, input: String) {\n    function(input)\n}\n\nfun main() {\n    // using :: to reference the printMessage function\n    applyFunction(::printMessage, \"Hello, Kotlin!\")\n}\n```", "```\nHello, Kotlin!\n```", "```\nval result = run {\n    val x = 10\n    val y = 20\n    x + y // The value of this final expression is returned.\n}\nprintln(\"Result: $result\") // prints \"Result: 30\"\n```", "```\nval greet (String) -> String = {name -> \"Hello, $name!\"}\n```", "```\nval greet = {name: String -> \"Hello, $name!\"}\n```", "```\nprintln(greet(\"Alice\")) // output: Hello, Alice!\nprintln(greet(\"Bob\"))   // output: Hello, Bob!\n```", "```\nval sum: (Int, Int) -> Int = {a, b -> a + b}\nprintln(sum(3, 4)) // output: 7\n\nval square: (Int) -> Int = {it * it}\nprintln(square(5)) // output: 25\n```", "```\nprintln(\"Enter some text:\")\nval userInput = readln()\nprintln(\"You entered: $userInput\")\n```", "```\nYou entered:\n```", "```\nfun main() {\n    while (true) {\n        print(\"Enter an integer: \")\n        val num = readln()\n\n        // Validate using a try...catch block.\n        try {\n            val intValue = num.toInt()\n            println(\"You entered: $intValue\")\n break // Stop the loop on success.\n        } catch (e: NumberFormatException) {\n            println(\"Invalid input. Try again.\")\n        }\n    }\n}\n```", "```\nimport java.io.File\nimport java.util.Scanner\n\nfun main() {\n    // Replace the path below with the path to your file.\n    val inputFile = \"inputfile.txt\"\n\n    try {\n      ❶ val file = File(inputFile)\n      ❷ val sc = Scanner(file)\n        while (sc.hasNextLine()) {\n            val line = sc.nextLine()\n            println(line)\n        }\n    } catch (e: Exception) {\n        println(\"An error occurred: ${e.message}\")\n    }\n}\n```", "```\nThere once was a man named Bob\nWho loved to eat corn on the cob\nHe ate so much corn\nThat he grew a horn\nAnd now he is known as Corn-Bob\n```", "```\nimport java.io.File\n\nfun main() {\n    // Replace the file locations as needed.\n  ❶ val inputFile = File(\"inputfile.txt\")\n  ❷ val outputFile = File(\"outputfile.txt\")\n\n    // Read all lines from the input file.\n  ❸ val lines = inputFile.readLines()\n\n    // Write all lines to the output file.\n  ❹ for (line in lines) {\n        outputFile.appendText(\"$line\\n\")\n    }\n    println(\"Copied input_file.txt to output_file.txt\")\n}\n```", "```\nimport kotlin.system.exitProcess\n\nfun main() {\n    println(\"***  Console Calculator  ***\")\n\n    // step 1: input collection\n    println(\"\\nEnter two numbers:\\n\")\n    val number1 = readDoubleInput(\"Number 1: \")\n    val number2 = readDoubleInput(\"Number 2: \")\n\n    // step 2: operation selection\n    showChoices()\n    val operation = getArithmeticOperation()\n\n // step 3: calculation\n    val result = performCalculation(number1, number2, operation)\n\n    // step 4: result display\n    println(\"\\nResult:\\n\" +\n            \"$number1 $operation $number2 = $result\")\n}\n```", "```\nfun readDoubleInput(prompt: String): Double {\n    print(prompt)\n    val num = readln()\n\n    // Check input validity.\n    try {\n        return num.toDouble()\n    } catch (e: Exception) {\n        println(\"Error reading input: ${e.message}\")\n        exitProcess(1) // Exit with error code 1.\n    }\n}\n```", "```\nfun showChoices() {\n    println(\"\\nOperation Options:\")\n    println(\"1\\. Addition (+)\")\n    println(\"2\\. Subtraction (-)\")\n    println(\"3\\. Multiplication (*)\")\n    println(\"4\\. Division (/)\")\n}\n```", "```\nfun getArithmeticOperation(): String {\n    print(\"\\nEnter an arithmetic operation (+, -, *, /): \")\n    val operation = readln()\n\n    if(!\"+-*/\".contains(operation, true)){\n        println(\"\\nInvalid operation. Exiting.\")\n        exitProcess(2) // Exit with error code 2.\n    }\n    return operation\n}\n```", "```\nfun performCalculation(number1: Double, number2: Double,\n                       operation: String): Double {\n    return when (operation) {\n        \"+\" -> number1 + number2\n        \"-\" -> number1 - number2\n        \"*\" -> number1 * number2\n        \"/\" -> if (number2 != 0.0) number1 / number2\n               else {\n                   println(\"\\nDivision by zero is not allowed. Exiting.\")\n                   exitProcess(3)\n               }\n      ❶ else -> {\n            println(\"\\nUnexpected error encountered. Exiting.\")\n            exitProcess(4)\n        }\n    }\n}\n```", "```\n***  Console Calculator  ***\n\nEnter two numbers:\n\nNumber 1: **37**\nNumber 2: **9**\n\nOperation Options:\n1\\. Addition (+)\n2\\. Subtraction (-)\n3\\. Multiplication (*)\n4\\. Division (/)\n\nEnter an arithmetic operation (+, -, *, /): *****\n\nResult:\n37.0 * 9.0 = 333.0\n```"]