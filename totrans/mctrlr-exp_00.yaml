- en: '**Introduction**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: Howdy y’all,
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，
- en: Microcontrollers are single-chip computers. There’s one in your credit card
    and dozens in your laptop and car. Medical devices, video games, electric power
    meters, and two-way radios use them. Inside each there is some non-volatile memory
    for a computer program, the barest minimum of a CPU to run that program, and enough
    RAM to store global variables, and maybe also a heap and a call stack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 微控制器是单片计算机。你信用卡里有一个，你的笔记本电脑和汽车里有几十个。医疗设备、电子游戏、电力表和对讲机都在使用它们。每个微控制器内部都有一些非易失性存储器用于存储计算机程序，一个最基本的CPU来运行程序，还有足够的RAM来存储全局变量，也许还有堆栈和调用栈。
- en: I’ve long been fascinated with the readout protection features of microcontrollers,
    which protect a chip’s firmware from being extracted and reverse engineered. In
    that time, many clever neighbors have come up with many clever ways to extract
    this firmware, but when I wanted to share them, I’d often find myself sketching
    the broad details on a beer-stained napkin, for lack of any centralized collection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直对微控制器的读取保护特性充满兴趣，这些特性可以保护芯片的固件不被提取和逆向工程。在这段时间里，许多聪明的同行想出了许多巧妙的方法来提取这些固件，但当我想要分享它们时，我经常发现自己在啤酒渍的餐巾纸上勾画大致的细节，因为缺乏一个集中的收集。
- en: So I began this book as a way to document as many of those tricks as I might
    find, organized by technique and by explicit model numbers, with citations back
    to the original publications. These are real exploits, extracting code from real
    chips.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我开始写这本书，作为记录我可能发现的这些技巧的一种方式，按技巧和明确的型号编号组织，并附上原始出版物的引用。这些是真实的漏洞，从真实的芯片中提取代码。
- en: You will learn how the nRF51’s protection mode allows debugging that can disable
    its protection over JTAG, and how the protection of the nRF52 series is a little
    better but vulnerable to voltage glitching attacks. You’ll explore how the STM32F0
    allows for one word to be dumped after every reset, how the STM32F1’s exception
    handling can slowly leak the firmware out over an hour, and how the USB bootloaders
    of the STM32F2 and STM32F4 are vulnerable to arbitrary code execution. You’ll
    also learn how the Texas Instruments MSP430 firmware can be extracted by a camera
    flash, and how grounding one pin on the Freescale MC13224 will disable all protections
    to allow an external debugger.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何通过nRF51的保护模式使调试能够禁用其通过JTAG的保护，以及nRF52系列的保护稍好但易受电压故障攻击的方式。你将探索STM32F0如何在每次复位后允许导出一个字节，STM32F1的异常处理如何在一小时内逐渐泄漏固件，以及STM32F2和STM32F4的USB引导加载程序如何容易受到任意代码执行的攻击。你还将了解如何通过相机闪光灯提取德州仪器MSP430的固件，以及如何通过接地Freescale
    MC13224的一个引脚来禁用所有保护，从而允许外部调试器。
- en: For each of these exploits, you’ll learn how to reproduce the results, dumping
    a chip in your own lab. Side commentary will refer you to related chips, and how
    one attack might’ve predicted another, which will be handy when you try to dump
    the firmware from something new. And wherever possible, you will be referred to
    both source code and the first publication of the technique.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些漏洞，你将学习如何在自己的实验室中重现这些结果，导出芯片的固件。旁白会引导你参考相关芯片，并说明一种攻击如何预测另一种攻击，这在你尝试从新的设备中提取固件时非常有用。并且在可能的情况下，你将被引导到源代码和该技术首次发布的资料。
- en: Numbered chapters provide in-depth explanations of either techniques or how
    to hack a specific chip. These are roughly grouped together with chapters that
    introduce a type of technique. Lettered chapters attempt to quickly group targets,
    describing prior research succinctly. Memory maps are provided to help you think
    of memory addresses as specific places, and wherever possible I’ve included X-ray
    and die photographs from my own lab.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编号章节详细解释了某些技巧或如何破解特定的芯片。这些章节大致按引入某种技巧的类型进行分组。字母章节尝试快速分组目标，简明扼要地描述先前的研究。提供了内存映射，以帮助你将内存地址视为特定的位置，在可能的情况下，我还包括了自己实验室中的X射线和芯片照片。
- en: To use this book, I’d suggest first reading through quickly to get an overview
    of how to extract chip firmware, then using the index in the back to find techniques
    for specific part numbers when you need them. You won’t get anywhere without practice,
    so be sure to implement some of these attacks yourself even if your intent is
    to defend against them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这本书，我建议你首先快速浏览一遍，以获得如何提取芯片固件的概览，然后使用书后的索引，在需要时找到针对特定型号的技巧。当你没有实践时，你是无法真正掌握的，所以即使你的目标是防御这些攻击，也一定要亲自实现一些这些攻击。
- en: Your school librarian would be right to remind you to chase down some of the
    citations from the bibliography, and that same librarian would be wrong to tell
    you not to write in the margins. I made them wide to hold notes where you find
    them handy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '你的学校图书馆员提醒你去查找一些参考书目中的引用是对的，但如果她告诉你不要在页边写字，那就是错的。我把页边留得很宽，就是为了方便你在需要的时候写下笔记。  '
- en: 73 from EM85AX,
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '来自 EM85AX，  '
- en: Travis Goodspeed
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 特拉维斯·古德斯皮德
