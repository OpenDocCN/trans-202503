- en: Chapter 5. Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 视图
- en: A *view* is the user interface to your application. Typically, views include
    web pages for displaying database records and forms for creating and updating
    those records. Views also sometimes take the form of responses to API requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*视图*是用户与应用程序交互的界面。通常，视图包括用于显示数据库记录的网页，以及用于创建和更新这些记录的表单。视图有时也可以是对API请求的响应。'
- en: This chapter covers the most common Rails view template type, called *Embedded
    Ruby*, as well as view-specific helpers and layouts. You’ll also learn how to
    avoid duplication in your HTML code with partials and how to generate forms to
    accept user input.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了最常用的Rails视图模板类型——*嵌入式Ruby*，以及视图特定的助手和布局。你还将学习如何通过部分模板避免HTML代码重复，并且如何生成表单以接受用户输入。
- en: Enter **`bin/rails server`** to start the Rails server now. And keep it running
    in a terminal window as you work through the examples in this chapter, so you
    can see the changes you make to the application in your web browser and watch
    the server output.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入**`bin/rails server`**来启动Rails服务器。并保持服务器在终端窗口中运行，当你在本章示例中进行操作时，这样你可以在浏览器中看到你对应用程序所做的更改，并查看服务器的输出。
- en: Embedded Ruby
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式Ruby
- en: Embedded Ruby (ERB), the default template type in Rails, is used to build view
    templates. An Embedded Ruby template contains a mixture of Ruby code and HTML
    that is similar to ASP, JSP, or PHP.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式Ruby（ERB），是Rails中的默认模板类型，用于构建视图模板。嵌入式Ruby模板包含Ruby代码和HTML的混合，类似于ASP、JSP或PHP。
- en: Templates are stored in a subdirectory of *app/views* named after the controller.
    For example, you’ll find the templates for the posts controller in *app/views/posts*.
    The Rails convention is to name templates after the action they represent, with
    the file extension *.html.erb*. The default template for the `index` action is
    *index.html.erb*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模板存储在*app/views*的子目录中，该子目录以控制器的名称命名。例如，你会在*app/views/posts*目录中找到帖子控制器的模板。Rails的约定是根据操作命名模板，并且文件扩展名为*.html.erb*。`index`操作的默认模板是*index.html.erb*。
- en: Embedded Ruby contains three special tags for executing Ruby code. These tags
    are used for output, control flow, and comments. Let’s take a look at each of
    these.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式Ruby包含三种特殊的标签用于执行Ruby代码。这些标签用于输出、控制流和注释。让我们来看看每一种标签。
- en: Output
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: The `<%= %>` tag (also called the *output tag*) executes the code it contains
    and prints the return value on the page. Open the file *app/views/posts/show.html.erb*
    in your editor to see several examples of this tag.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`<%= %>`标签（也称为*输出标签*）执行其包含的代码并将返回值打印在页面上。打开文件*app/views/posts/show.html.erb*，查看这个标签的几个示例。'
- en: 'For instance, this tag prints the title of the current post:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个标签打印当前帖子的标题：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that any HTML in the title is escaped by default. That is, any reserved
    characters are converted to character references and displayed on the page instead
    of being interpreted as HTML. This safeguard prevents malicious users from entering
    HTML code on your page that could cause a page to break or even a cross-site scripting
    attack. Cross-site scripting attacks and other security concerns are covered in
    [Chapter 11](ch11.html "Chapter 11. Security").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标题中的任何HTML默认都会被转义。也就是说，任何保留字符都会被转换为字符引用，并显示在页面上，而不是被解释为HTML。这个保护措施可以防止恶意用户在页面上输入HTML代码，从而导致页面崩溃，甚至是跨站脚本攻击。跨站脚本攻击和其他安全问题会在[第11章](ch11.html
    "第11章 安全")中详细讨论。
- en: Control Flow
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制流
- en: The `<% %>` tag executes the code it contains without printing anything on the
    page. This tag is useful for control flow statements such as loops or conditionals.
    Open the file *app/views/posts/index.html.erb* to see this tag in action.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<% %>`标签执行其包含的代码，但不会在页面上打印任何内容。这个标签对于控制流语句（如循环或条件语句）非常有用。打开文件*app/views/posts/index.html.erb*，查看此标签的实际应用。'
- en: 'This example uses the `each` method to loop over an array of posts:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用`each`方法遍历一个帖子数组：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Output tags are used inside the loop to print the values of `post.title` and
    `post.body`. This example also shows three instances of the `link_to` helper.
    These helpers create links to the `show`, `edit`, and `destroy` actions for each
    post. We’ll discuss helpers in the next section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 输出标签在循环内用于打印`post.title`和`post.body`的值。这个示例还展示了三个`link_to`助手的使用。这些助手为每个帖子创建指向`show`、`edit`和`destroy`操作的链接。我们将在下一节讨论助手。
- en: Comments
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: Finally, the `<%# %>` tag is used to enter comments. *Comments* are usually
    notes to yourself or other programmers describing what your code does. Unlike
    HTML comments (which start with `<!--` and end with `-->`), ERB comments will
    not appear in the HTML source. Use ERB comments for notes that you don’t want
    to be visible in the HTML generated by the view template.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`<%# %>` 标签用于输入注释。*注释* 通常是给自己或其他程序员的说明，描述你的代码在做什么。与 HTML 注释（以 `<!--` 开始，以
    `-->` 结束）不同，ERB 注释不会出现在 HTML 源代码中。使用 ERB 注释来添加你不希望在由视图模板生成的 HTML 中看到的注释。
- en: 'The ERB templates you’ve looked at so far were generated by the Rails scaffold
    when we first created our blog. They’re uncommented, but you can easily add your
    own comments. Here’s one:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你到目前为止看到的 ERB 模板是我们在最初创建博客时通过 Rails 脚手架生成的。它们没有注释，但你可以轻松地添加自己的注释。这里是一个例子：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In addition to notes to the programmer, you can also use ERB comments to remove
    code temporarily from the page. Add a hash sign (`#`) after the first percent
    sign (`%`) in any other ERB tag, and the code inside that tag will not be executed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了给程序员的注释外，你还可以使用 ERB 注释临时从页面中移除代码。在任何其他 ERB 标签中的第一个百分号符号（`%`）后面加上井号符号（`#`），该标签内的代码将不会被执行。
- en: Helpers
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 助手方法
- en: '*Helpers* are Ruby methods that simplify the code inside your views, making
    it easier to read. Rails includes helpers for creating links to resources, formatting
    numbers, and other common tasks. You can also easily write your own helper methods.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*Helpers* 是 Ruby 方法，用于简化视图中的代码，使其更易于阅读。Rails 提供了用于创建资源链接、格式化数字和其他常见任务的助手方法。你也可以轻松编写自己的助手方法。'
- en: By using helpers, you can avoid placing too much logic in your view. If it takes
    more than a single line of code to display a value, then that code should probably
    be in a helper method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用助手方法，你可以避免在视图中放置过多的逻辑。如果显示一个值需要超过一行代码，那么这段代码可能应该放在一个助手方法中。
- en: URL Helpers
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL 助手方法
- en: 'Create links with the `link_to` helper method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `link_to` 助手方法创建链接：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This example generates an HTML link like this: `<a href="/posts/1"> Show</a>`,
    assuming `post` has an `id` of 1.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例生成一个 HTML 链接，像这样：`<a href="/posts/1"> Show</a>`，假设 `post` 的 `id` 为 1。
- en: 'You can also use the URL and path helpers you saw in the last chapter to create
    links:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用在上一章中看到的 URL 和路径助手方法来创建链接：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This example generates a link like this: `<a href="/posts/1/edit">Edit</a>`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例生成一个链接，像这样：`<a href="/posts/1/edit">Edit</a>`。
- en: You can also include the HTTP verb to use for the link as well as additional
    data attributes. Use this for links that change state on the server, such as a
    link to destroy a resource. Remember that GET requests should not be used to change
    state.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为链接指定使用的 HTTP 动词以及其他数据属性。对于那些会在服务器上更改状态的链接，例如删除资源的链接，可以使用这种方式。记住，GET 请求不应该用于更改状态。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example generates a link with `data-method="delete"` and `data-confirm="Are
    you sure?"`. Rails includes the jQuery unobtrusive Java-Script library (jquery_ujs.js)
    by default. This library uses the method and confirm attributes to build a hidden
    form at run-time that creates a confirmation window and then submits the destroy
    link using a proper DELETE request. Aren’t you glad you don’t have to do that
    yourself?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例生成一个链接，使用`data-method="delete"`和`data-confirm="Are you sure?"`。Rails 默认包含了
    jQuery 非侵入式 JavaScript 库（jquery_ujs.js）。这个库使用 `method` 和 `confirm` 属性，在运行时构建一个隐藏表单，创建一个确认窗口，然后使用适当的
    DELETE 请求提交删除链接。你不需要自己做这些，难道不高兴吗？
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Web browsers are only able to issue GET and POST requests. Rails fakes the
    DELETE request by passing a parameter named `_method` with the value `delete`.
    When you update a record, the PATCH request is handled the same way.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*Web 浏览器只能发出 GET 和 POST 请求。Rails 通过传递名为 `_method` 且值为 `delete` 的参数来模拟 DELETE
    请求。当你更新记录时，PATCH 请求也是以相同的方式处理的。*'
- en: Number Helpers
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字助手方法
- en: 'Rails includes several handy methods for displaying numbers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 提供了几个方便的用于显示数字的方法：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each method accepts a number and returns a string representing that number with
    some formatting applied. That formatting is related to the word at the end of
    the method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法接受一个数字，并返回一个字符串，该字符串表示该数字并应用了一些格式。这个格式与方法名称末尾的单词有关。
- en: 'The `number_to_currency` method, shown next, rounds the given number to two
    decimal places and prepends a dollar sign:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`number_to_currency` 方法，如下所示，将给定的数字四舍五入到小数点后两位，并在前面加上美元符号：'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So this example returns `"$100.00"`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个示例返回`"$100.00"`。
- en: The methods `number_to_human` and `number_to_human_size` convert numbers into
    easy-to-read string representations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`number_to_human` 和 `number_to_human_size` 方法将数字转换为易于阅读的字符串表示。'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So these examples return `"1 million"` and `"1 KB"`, respectively.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些示例分别返回 `"100万"` 和 `"1 KB"`。
- en: Format percentages with `number_to_percentage`. This method rounds the number
    to three decimal places, by default, and appends a percent sign. You can specify
    a precision as an option.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`number_to_percentage`格式化百分比。默认情况下，这个方法将数字四舍五入到小数点后三位，并添加一个百分号。你可以通过选项指定精度。
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These examples return `"12.345%"` and `"12.3%"`, respectively.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例分别返回 `"12.345%"` 和 `"12.3%"`。
- en: In addition to URL and number helpers, Rails also has built-in helpers for working
    with dates and assets such as images, CSS files, and JavaScript files. Later in
    this chapter, I cover helpers for creating forms and form fields.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了URL和数字助手外，Rails 还内置了用于处理日期和资源（如图片、CSS文件和JavaScript文件）的助手方法。在本章后面，我将介绍用于创建表单和表单字段的助手方法。
- en: I can’t cover all of the helpers in Rails here, so for now, let’s see how to
    add your own helper methods.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法在这里介绍Rails中的所有助手方法，所以目前我们先来看一下如何添加你自己的助手方法。
- en: Your Own Helpers
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义助手方法
- en: You can easily create your own helpers by adding methods to the appropriate
    file in the *app/helpers* directory. The Rails scaffold generator has created
    a couple of mostly empty files in that directory for you automatically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 *app/helpers* 目录中的适当文件中添加方法，轻松创建自己的助手方法。Rails的脚手架生成器会自动为你在该目录中创建一些几乎为空的文件。
- en: Add helpers that are only needed in a single controller to the helper file for
    that controller. For example, helpers that are only used in posts views should
    be added to the `PostsHelper` module in *app/helpers/posts_helper.rb.*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将只在单个控制器中需要的助手方法添加到该控制器的助手文件中。例如，只有在帖子视图中使用的助手方法应添加到 *app/helpers/posts_helper.rb*
    中的 `PostsHelper` 模块。
- en: 'Add helpers used throughout the application to the `ApplicationHelper` module
    in *app/helpers/application_helper.rb*. Open this file and let’s see how it works:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序中使用的助手方法添加到`ApplicationHelper`模块中，文件路径是 *app/helpers/application_helper.rb*。打开这个文件，看看它是如何工作的：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code defines a new helper method called `friendly_date`. You can use this
    method in any view in your application to format a date for display.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了一个新的助手方法`friendly_date`。你可以在应用程序中的任何视图中使用这个方法来格式化日期以供显示。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example returns `"December 25, 2014"`. If you later decide to display dates
    in a different format throughout your application, you only have to change this
    method instead of changing all of your views.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例返回 `"2014年12月25日"`。如果你之后决定在整个应用程序中以不同格式显示日期，只需更改这个方法，而不需要更改所有的视图。
- en: The Posts Index Page
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子索引页面
- en: Now that you know more about how views work in Rails, let’s update the index
    view to look more like a blog. Go to *http://localhost:3000/posts* in your browser
    to see the index page, shown in [Figure 5-1](ch05.html#posts_index_page-id00009
    "Figure 5-1. The posts index page").
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对Rails中的视图工作原理有了更多了解，让我们更新索引视图，使其更像一个博客。打开浏览器并访问 *http://localhost:3000/posts*
    查看索引页面，参见[图5-1](ch05.html#posts_index_page-id00009 "图5-1. 帖子索引页面")。
- en: '![The posts index page](httpatomoreillycomsourcenostarchimages2169068.png.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![帖子索引页面](httpatomoreillycomsourcenostarchimages2169068.png.jpg)'
- en: Figure 5-1. The posts index page
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-1. 帖子索引页面
- en: 'Your blog posts are currently displayed in a table. Open the file *app/views/posts/index.html.erb*
    in your editor:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的博客帖子当前是以表格的形式展示的。打开文件 *app/views/posts/index.html.erb* 以编辑：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This template first creates an HTML table ➊ and adds a table header to the page.
    It then loops over each post ➋ and displays that post’s attributes in a table
    row.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板首先创建一个HTML表格 ➊ 并向页面添加一个表头。然后它遍历每个帖子 ➋ 并在表格行中显示该帖子的属性。
- en: 'A proper blog would display each post title as a heading followed by the post
    body in a paragraph. Update the index view to look like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个合适的博客应将每个帖子标题作为标题显示，接着是帖子的正文，以段落的形式展示。更新索引视图，使其看起来像这样：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The template still loops over each post ➊ as before. Instead of displaying the
    post attributes in table cells, however, it now shows the `title` ➋ in a second-level
    heading and uses the `friendly_date` helper ➌ you added in the previous section
    to format the `created_at` date. The links ➍ to `edit` and `destroy` the post
    are now at the bottom, and the link to `show` the post is now around the post
    `title`. Refresh the page in your browser to see the changes, shown in [Figure 5-2](ch05.html#updated_posts_index_page
    "Figure 5-2. The updated posts index page").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模板仍然像以前一样循环遍历每个帖子 ➊。然而，它现在不再在表格单元格中显示帖子属性，而是将 `title` ➋ 显示为二级标题，并使用你在前一节中添加的
    `friendly_date` 帮助器 ➌ 来格式化 `created_at` 日期。用于 `edit` 和 `destroy` 帖子的链接 ➍ 现在位于底部，而
    `show` 帖子的链接现在围绕帖子 `title`。刷新浏览器中的页面查看更改，具体内容见[图 5-2](ch05.html#updated_posts_index_page
    "图 5-2. 更新后的帖子索引页面")。
- en: '![The updated posts index page](httpatomoreillycomsourcenostarchimages2169070.png.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![更新后的帖子索引页面](httpatomoreillycomsourcenostarchimages2169070.png.jpg)'
- en: Figure 5-2. The updated posts index page
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2. 更新后的帖子索引页面
- en: Our blog still won’t win any design awards, but it’s looking better!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的博客虽然还不能获得任何设计奖项，但它已经看起来更好了！
- en: Layouts
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: You may have noticed that the views you’ve seen so far only include the contents
    of the web page without the other required elements such as `html`, `head`, and
    `body`. These elements are the basic structure of all web pages.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，至今为止你看到的视图只包含了网页的内容，而没有其他必需的元素，如 `html`、`head` 和 `body`。这些元素是所有网页的基本结构。
- en: 'Check the server output in your terminal to see what’s happening when you load
    the index page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 检查终端中的服务器输出，看看在加载索引页面时发生了什么：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we have a GET request ➊ for the path */posts*. It is processed by the
    index method ➋ in PostsController. Finally, the server renders posts/index.html.erb
    within layouts/application ➌.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个 GET 请求 ➊，路径为 */posts*。它由 PostsController 中的 index 方法 ➋ 处理。最后，服务器在 layouts/application
    中渲染 posts/index.html.erb ➌。
- en: In Rails, a *layout* is a file containing the basic HTML required for every
    page on your site. Rather than repeat the same HTML in every view, you only write
    it once inside the layout file. This is another way that Rails removes needless
    duplication.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 中，*布局* 是包含每个页面所需基本 HTML 的文件。你无需在每个视图中重复相同的 HTML，而是只需在布局文件中写一次。这是 Rails
    去除不必要重复的另一种方式。
- en: 'Let’s jump right in and dissect the layout for your blog. The server output
    calls it `layouts/application`, so open *app/views/layouts/application.html.erb*
    to see the layout for your application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入并解析你的博客的布局。服务器输出将其称为 `layouts/application`，因此打开 *app/views/layouts/application.html.erb*
    以查看你应用的布局：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This file contains the basic HTML for every page on your site: the HTML5 `doctype`
    ➊ followed by the `head` section and `body` section.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件包含了你网站上每个页面的基本 HTML：HTML5 `doctype` ➊，然后是 `head` 部分和 `body` 部分。
- en: The `head` section sets the title of the page. It then includes Rails helpers
    for linking to your site’s CSS ➋ and JavaScript ➌ files. It also includes a helper
    ➍ that protects your application from *cross-site request forgery (CSRF)* attacks,
    which I’ll cover in [Chapter 11](ch11.html "Chapter 11. Security"). The `body`
    section includes the `yield` statement ➎.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 部分设置页面的标题。接着，它包括 Rails 帮助器，用于链接你网站的 CSS ➋ 和 JavaScript ➌ 文件。它还包含一个帮助器
    ➍，用于保护你的应用免受 *跨站请求伪造（CSRF）* 攻击，具体内容我将在[第 11 章](ch11.html "第 11 章. 安全")中讲解。`body`
    部分包括 `yield` 语句 ➎。'
- en: The rest of this section covers these helper methods and the `yield` statement.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分涵盖了这些助手方法和 `yield` 语句。
- en: Asset Tag Helpers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源标签助手
- en: In a Rails application, files such as CSS, JavaScript, and images are called
    *assets*. Assets are external files needed by the web browser accessing your application.
    These files are stored in subdirectories of the *app/assets* directory.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 应用中，CSS、JavaScript 和图像等文件被称为 *资产*。资产是访问你应用的 Web 浏览器所需的外部文件。这些文件存储在 *app/assets*
    目录的子目录中。
- en: 'As your application grows, you may need several CSS and JavaScript files to
    control your site’s appearance and client-side functionality. The Rails server
    output also lists the CSS and JavaScript files your application is already using:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用的增长，你可能需要多个 CSS 和 JavaScript 文件来控制网站的外观和客户端功能。Rails 服务器输出还列出了你的应用当前正在使用的
    CSS 和 JavaScript 文件：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, our simple blog is already using three different CSS files ➊
    and five JavaScript files ➋. Rather than list each of these files separately in
    the layout, Rails uses CSS and JavaScript files called *manifests* to require
    individual CSS and JavaScript files. A manifest file is simply a list of other
    files needed by your application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们简单的博客已经使用了三个不同的 CSS 文件 ➊ 和五个 JavaScript 文件 ➋。Rails 并没有在布局中单独列出这些文件，而是使用名为
    *manifests* 的 CSS 和 JavaScript 文件来引入各个独立的 CSS 和 JavaScript 文件。一个 manifest 文件实际上只是列出了你的应用程序所需的其他文件。
- en: A Rails feature known as the *asset pipeline* combines these CSS and JavaScript
    files together into two files and compresses them when your application is running
    in the production environment. These files are named *application.css* and *application.js*.
    By combining these files, your application receives fewer requests from users,
    which should improve its performance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 的一项功能，称为 *资产管道*，将这些 CSS 和 JavaScript 文件合并为两个文件，并在生产环境中运行时进行压缩。这些文件分别命名为
    *application.css* 和 *application.js*。通过合并这些文件，你的应用程序可以减少来自用户的请求，从而提高性能。
- en: The `head` section of the layout contains ERB tags for adding the CSS and JavaScript
    manifest files that your application needs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 布局的 `head` 部分包含了用于添加应用程序所需的 CSS 和 JavaScript manifest 文件的 ERB 标签。
- en: stylesheet_link_tag
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: stylesheet_link_tag
- en: The `stylesheet_link_tag` method adds an HTML link tag for the default CSS manifest,
    *application.css*, and each of the CSS files referenced in the manifest. Open
    the file *app/assets/stylesheets/application.css* to see how it works.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylesheet_link_tag` 方法为默认的 CSS manifest 文件 *application.css* 和 manifest 中引用的每个
    CSS 文件添加了一个 HTML 链接标签。打开文件 *app/assets/stylesheets/application.css* 来查看它是如何工作的。'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This file starts with a block of comments explaining its purpose as well as
    the lines starting with `require_tree` ➊ and `require_self` ➋. The `require_tree`.
    statement includes all other CSS files in the *app/assets/stylesheets* directory
    and subdirectories. The require_self statement means the contents of this CSS
    file are included at the bottom.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件以一段注释开始，解释其目的，以及以 `require_tree` ➊ 和 `require_self` ➋ 开头的行。`require_tree`
    语句包含了 *app/assets/stylesheets* 目录和子目录下的所有其他 CSS 文件。`require_self` 语句则意味着该 CSS
    文件的内容会被包含在文件的底部。
- en: javascript_include_tag
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javascript_include_tag
- en: The `javascript_include_tag` method adds a script tag for the default JavaScript
    manifest, *application.js*, and each of the JavaScript files listed in the manifest.
    Now open the JavaScript manifest *app/assets/javascript/application.js*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`javascript_include_tag` 方法为默认的 JavaScript manifest 文件 *application.js* 和 manifest
    中列出的每个 JavaScript 文件添加了一个 script 标签。现在，打开 JavaScript manifest 文件 *app/assets/javascript/application.js*。'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This file is similar to the CSS manifest. It starts with a block of comments
    explaining its purpose and then includes the JavaScript libraries, `jquery`, `jquery_ujs`,
    and `turbolinks` by default, as well as any other JavaScript files in the *app/assets/javascript*
    directory and subdirectories.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件类似于 CSS manifest 文件。它以一段注释开始，解释其目的，然后默认包含了 `jquery`、`jquery_ujs` 和 `turbolinks`
    三个 JavaScript 库，以及 *app/assets/javascript* 目录和子目录下的其他 JavaScript 文件。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Note
- en: '*The asset pipeline, turbolinks, and other performance issues are discussed
    in more detail in [Chapter 12](ch12.html "Chapter 12. Performance").*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*资产管道、turbolinks 和其他性能问题将在 [第 12 章](ch12.html "第 12 章. 性能") 中更详细地讨论。*'
- en: CSRF Meta Tags Helper
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSRF Meta Tags Helper
- en: The `csrf_meta_tags` method adds two meta tags to the head of each web page.
    These tags are designed to protect your application from CSRF attacks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`csrf_meta_tags` 方法将两个 meta 标签添加到每个网页的 head 部分。这些标签旨在保护你的应用免受 CSRF 攻击。'
- en: If you view the source on any page of your application, you should see a meta
    tag named `csrf-token` that contains a long string of random hexadecimal digits.
    This token is unique to your current session and is passed to your application
    any time a form is submitted.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看应用程序任何页面的源代码，你应该会看到一个名为 `csrf-token` 的 meta 标签，其中包含一长串随机的十六进制数字。这个令牌是唯一的，且与当前会话相关，每次提交表单时都会传递给你的应用程序。
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In a CSRF attack, a trusted user of your application visits a malicious site.
    The malicious site then attempts to submit requests to your application as that
    trusted user. Because the malicious site has no way of knowing this secret token,
    these requests fail. CSRF and other security concerns are covered in [Chapter 11](ch11.html
    "Chapter 11. Security").
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSRF 攻击中，应用程序的一个可信用户访问了一个恶意网站。该恶意网站随后尝试以该可信用户的身份向你的应用程序提交请求。由于恶意网站无法知道这个秘密令牌，因此这些请求会失败。CSRF
    和其他安全问题将在 [第 11 章](ch11.html "第 11 章. 安全") 中详细讨论。
- en: Yield
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yield
- en: In a layout, the `yield` statement identifies where content from the view should
    be inserted. In this case, the HTML generated by *app/views/posts/index.html*
    is inserted between the `body` tags to form the complete web page that is sent
    to the user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局中，`yield` 语句标识了视图中内容应该插入的位置。在这种情况下，*app/views/posts/index.html* 生成的 HTML
    会插入到 `body` 标签之间，形成发送给用户的完整网页。
- en: The `yield` statement is not required to be the only statement in the `body`
    element. You can add other elements to the body as needed. For example, you might
    add a common header or footer here that appears on each page of your application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield` 语句不一定是 `body` 元素中的唯一语句。你可以根据需要向 body 中添加其他元素。例如，你可以在这里添加一个常见的页眉或页脚，出现在你应用程序的每个页面上。'
- en: Partials
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分模板
- en: Like helpers, *partials* are used to extract code into meaningful units and
    to avoid duplicating code that is common to multiple views. The difference is
    that whereas helpers contain shared Ruby code, partials contain shared HTML code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与帮助器一样，*部分模板* 用于将代码提取到有意义的单元中，避免在多个视图中重复相同的代码。不同之处在于，帮助器包含共享的 Ruby 代码，而部分模板包含共享的
    HTML 代码。
- en: Partials are stored in view templates with filenames that begin with an underscore.
    For example, *app/views/posts/_form.html.erb* is a partial that renders a post
    form.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 部分模板存储在视图模板中，文件名以下划线开头。例如，*app/views/posts/_form.html.erb* 是一个渲染帖子表单的部分模板。
- en: 'Code that is repeated across multiple pages is commonly separated out into
    partials to make the template code easier to follow. If you look at the new post
    and edit post templates, *app/views/posts/new.html.erb* and *app/views/posts/edit.html.erb,*
    respectively, you’ll see they both render the same form partial with this line
    of code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个页面中重复的代码通常会被分离到部分模板中，以使模板代码更易于理解。如果你查看新的帖子和编辑帖子模板，*app/views/posts/new.html.erb*
    和 *app/views/posts/edit.html.erb*，你会看到它们都用这行代码渲染相同的表单部分：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the partial is named *_form.html.erb* but is referred to simply as `form`
    when rendered.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，部分模板的名称是 *_form.html.erb*，但在渲染时只是简单地称为 `form`。
- en: If you find yourself repeating the same HTML code on more than one page, or
    in more than one place on a single page, you should copy that code into a partial
    and replace it with a `render` statement.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己在多个页面中，或者在单个页面的多个位置重复相同的 HTML 代码，你应该将这段代码复制到一个部分模板中，并用 `render` 语句替换它。
- en: Collections
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: Partials can also be used to eliminate loops in view templates. When you use
    the `:collection` option, a corresponding partial is inserted into the template
    for each member of the collection. Using `:collection` doesn’t necessarily remove
    code duplication entirely, but it can simplify the template.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 部分模板也可以用来消除视图模板中的循环。当你使用 `:collection` 选项时，模板中会为集合中的每个成员插入一个相应的部分。使用 `:collection`
    不一定能完全消除代码重复，但它可以简化模板。
- en: 'For example, you could move the code inside the `<% @posts.each ... %>` block
    in *index.html.erb* into a new file named *app/views/posts/_post.html.erb*. You
    could then replace the block with a single line of code like this one:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以将 *index.html.erb* 中 `<% @posts.each ... %>` 块内的代码移动到一个名为 *app/views/posts/_post.html.erb*
    的新文件中。然后你可以用一行类似这样的代码替换该块：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this example, Rails understands that `@posts` is an array of post objects,
    so it looks for a partial named *app/views/posts/_post.html.erb* and renders it
    on the page once for each object in the array. Because this action is so common,
    you can simplify even further to this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Rails 知道 `@posts` 是一个包含帖子对象的数组，因此它会查找一个名为 *app/views/posts/_post.html.erb*
    的部分，并在页面上为数组中的每个对象渲染一次。因为这个操作非常常见，你可以进一步简化为：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let’s get some hands-on experience with partials by adding comments to the post
    show page.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向帖子展示页面添加评论来实践部分模板的使用。
- en: Showing Comments
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示评论
- en: You added a model for comments in [Chapter 3](ch03.html "Chapter 3. Models")
    and a controller in [Chapter 4](ch04.html "Chapter 4. Controllers"), but you still
    can’t see them on the page. Nearly every post should have comments, and you don’t
    want to repeat that code in every single page, so this is a perfect opportunity
    to put partials to work.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第 3 章](ch03.html "第 3 章：模型")添加了评论模型，在[第 4 章](ch04.html "第 4 章：控制器")添加了控制器，但你仍然无法在页面上看到它们。几乎每个帖子都应该有评论，而你不希望在每个页面中都重复这段代码，因此这是一个将部分模板应用于此的绝佳机会。
- en: 'To get started, open *app/views/posts/show.html.erb* in your editor:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用部分模板，打开 *app/views/posts/show.html.erb* 文件：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s first clean up this page a bit like we did the posts index page by wrapping
    the `title` in a heading tag and the `body` in a paragraph, as shown here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先像处理帖子索引页面一样清理一下这个页面，将`title`包裹在标题标签中，将`body`包裹在段落标签中，如下所示：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now add a heading and a render statement for the comments at the bottom of
    the page:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在页面底部添加一个标题和用于渲染评论的语句：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This code shows the comments under the heading by rendering the `@post.comments`
    collection with a partial. For this to work, you’ll also need to create a partial
    for rendering a single comment. Create a new file named *app/views/comments/_comment.html.erb*
    containing this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码通过使用部分模板渲染`@post.comments`集合，显示了标题下的评论。为了使其生效，你还需要为渲染单个评论创建一个部分模板。创建一个名为*app/views/comments/_comment.html.erb*的新文件，内容如下：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you added any comments earlier using the Rails console, you should now see
    them at the bottom of the page. Of course, you can’t ask your users to add comments
    using the console; they expect a comment form. Let’s see how forms are created
    in a Rails application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前通过 Rails 控制台添加了评论，现在应该可以在页面底部看到它们。当然，你不能要求用户通过控制台添加评论；他们期望看到一个评论表单。让我们来看看在
    Rails 应用程序中是如何创建表单的。
- en: Forms
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: Accepting input from users can be one of the more difficult parts of building
    a web application. Rails includes an elegant system for generating forms.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接受用户输入可能是构建 web 应用程序中最困难的部分之一。Rails 包含了一个优雅的系统，用于生成表单。
- en: Rails provides helper methods for the various form controls. When bound to a
    model, these helper methods generate the correct HTML markup for passing values
    back to the controller automatically.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 提供了各种表单控件的辅助方法。当绑定到模型时，这些辅助方法会自动生成正确的 HTML 标记，以将值传递回控制器。
- en: Go to *http://localhost:3000/posts/new* in your browser to see the New Post
    form created by the Rails scaffold generator, as shown in [Figure 5-3](ch05.html#new_post_form
    "Figure 5-3. The New Post form").
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中访问*http://localhost:3000/posts/new*，查看由 Rails scaffold 生成的“新建帖子”表单，如[图
    5-3](ch05.html#new_post_form "图 5-3. 新建帖子表单")所示。
- en: '![The New Post form](httpatomoreillycomsourcenostarchimages2169072.png.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![新建帖子表单](httpatomoreillycomsourcenostarchimages2169072.png.jpg)'
- en: Figure 5-3. The New Post form
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3. 新建帖子表单
- en: This simple form consists of a text box for the post `title`, a text area for
    the post `body`, and a button labeled Create Post to submit the form.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的表单包含一个用于输入帖子`title`的文本框，一个用于输入帖子`body`的文本区域，以及一个标有“创建帖子”的按钮，用于提交表单。
- en: Form Helpers
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单辅助方法
- en: 'You can use helpers to generate a form and all of the necessary fields and
    labels. Open the file *app/views/posts/_form.html.erb* to see an example of a
    Rails form:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用辅助方法生成表单以及所有必要的字段和标签。打开文件*app/views/posts/_form.html.erb*，查看 Rails 表单的示例：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This partial is used when creating a new post and editing an existing post.
    The form begins with a call to the `form_for` method ➊ with a block that contains
    the rest of the form. Next an `if` statement ➋ checks to see if the post contains
    any errors. If the form has errors, the `error_explanation div` ➌ appears before
    the rest of the form. Otherwise, nothing is shown here. Finally, you’ll see the
    form controls ➍.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分模板用于创建新帖子和编辑现有帖子。表单以调用`form_for`方法 ➊开始，后续表单内容放在一个块中。接下来，`if`语句 ➋ 检查帖子是否包含任何错误。如果表单存在错误，`error_explanation
    div` ➌ 会在表单的其余部分之前显示。否则，这里什么也不会显示。最后，你会看到表单控件 ➍。
- en: Form Errors
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单错误
- en: Let’s first look at the code for displaying errors like the one shown in [Figure 5-4](ch05.html#post_creation_error
    "Figure 5-4. Post creation error"). Remember from our discussion of controllers
    that if a `create` or `update` action fails, the form will be rendered again.
    Try creating a new post with a blank title to see the error.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看一下用于显示错误的代码，类似于[图 5-4](ch05.html#post_creation_error "图 5-4. 帖子创建错误")中所示的错误。记得我们在讨论控制器时提到过，如果`create`或`update`操作失败，表单会重新渲染。尝试创建一个没有标题的新帖子，看看错误信息。
- en: '![Post creation error](httpatomoreillycomsourcenostarchimages2169074.png.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![帖子创建错误](httpatomoreillycomsourcenostarchimages2169074.png.jpg)'
- en: Figure 5-4. Post creation error
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4. 帖子创建错误
- en: '[Figure 5-4](ch05.html#post_creation_error "Figure 5-4. Post creation error")
    shows the `error_explanation div` with the number of errors in a heading followed
    by a bulleted list of the actual errors. Also, the label for the `title` field
    now has a red background and the text box for the `title` is outlined in red.
    Rails does this by wrapping these elements in a `div` with class `field_with_errors`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-4](ch05.html#post_creation_error "图 5-4. 帖子创建错误")显示了`error_explanation
    div`，其中包含错误数量的标题，并后跟实际错误的项目符号列表。此外，`title`字段的标签现在具有红色背景，`title`的文本框也被红色边框围绕。Rails通过将这些元素包装在一个类为`field_with_errors`的`div`中来实现这一点。'
- en: Now that you know how to display errors, let’s look at the `form_for` method
    and other helper methods for creating form controls.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何显示错误，让我们看看`form_for`方法以及其他用于创建表单控件的助手方法。
- en: Form Controls
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单控件
- en: 'Use the `form_for` block to create a form bound to a model. For example, this
    particular form is bound to the model stored in `@post`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`form_for`块来创建绑定到模型的表单。例如，这个表单绑定到存储在`@post`中的模型：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Within this block, you have access to helper methods to add controls such as
    labels, text fields, and buttons to the form. Use the *form builder object* (in
    this case `f`) to call these methods.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个块中，你可以使用辅助方法来添加控件，例如标签、文本框和按钮。使用*表单构建器对象*（在这个例子中是`f`）来调用这些方法。
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `label` helper is used to create a label tag for the specified field. The
    previous statement will generate this HTML: `<label for="post_title"> Title</label>`.
    Rails converts the field name to a string and capitalizes the first letter. Your
    users can click this label to focus the cursor in the text field for the title.
    Of course, you still have to create that text field, and Rails has a helper for
    that, too.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`助手用于为指定字段创建标签。上面的语句会生成如下HTML：`<label for="post_title"> Title</label>`。Rails会将字段名转换为字符串并将第一个字母大写。用户可以点击该标签，将光标聚焦到标题的文本框中。当然，你还需要创建那个文本框，Rails也提供了相应的助手。'
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `text_field` helper generates the following HTML: `<input id= "post_title"
    name="post[title]" type="text" />`. Note that the `id` of this input (`post_title`)
    matches the `for` value of the label tag in the previous paragraph. Also notice
    the name of this field. Rails sets names on form fields to indicate both the model
    (`post`) and the attribute to modify (`title`).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`text_field`助手生成以下HTML：`<input id="post_title" name="post[title]" type="text"
    />`。请注意，这个输入框的`id`（`post_title`）与前面段落中的标签的`for`值匹配。同时注意这个字段的名称。Rails会为表单字段设置名称，以表示模型（`post`）和要修改的属性（`title`）。'
- en: 'The next few lines of code add a `label` for the post `body` followed by a
    `text_area` for entering the `body` text. These controls work the same as the
    `title` fields. The `text_area` helper generates this HTML: `<textarea id= "post_body"
    name="post[body]"></textarea>`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几行代码添加了一个用于帖子`body`的`label`，并在其后添加了一个用于输入`body`文本的`text_area`。这些控件与`title`字段的工作方式相同。`text_area`助手会生成如下HTML：`<textarea
    id="post_body" name="post[body]"></textarea>`。
- en: 'Besides controls for entering the `title` and `body` text, you need a button
    to submit the form:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了输入`title`和`body`文本的控件外，你还需要一个按钮来提交表单：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `submit` helper generates a submit button. The button’s label is based
    on the class name of the current model and whether the model has been saved to
    the database. In the case of a new post, the value will be `"Create Post"` and
    the HTML looks like this: `<input name="commit" type="submit" value="Create Post"
    />`. If the post has already been saved to the database, the value is `"Update
    Post"`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`submit`助手生成一个提交按钮。按钮的标签基于当前模型的类名以及该模型是否已保存到数据库。如果是新帖子，则值为`"Create Post"`，对应的HTML如下：`<input
    name="commit" type="submit" value="Create Post" />`。如果帖子已经保存到数据库中，则值为`"Update
    Post"`。'
- en: Rails includes form helpers for every field you need, and you can always add
    your own helpers to create custom fields. Built-in examples include `check_box`,
    `hidden_field`, `password_field`, `radio_button`, and `text_area`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Rails为你需要的每个字段都包括了表单助手，你也可以随时添加自己的助手来创建自定义字段。内置的示例包括`check_box`、`hidden_field`、`password_field`、`radio_button`和`text_area`。
- en: Helper methods for HTML5 field types, such as `email_field`, `phone_field`,
    and `url_field`, are also included. These fields look like regular text fields,
    but on mobile devices, you’ll see an alternate keyboard. Use these field types
    to ensure that your application is mobile-friendly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还包括HTML5字段类型的助手方法，例如`email_field`、`phone_field`和`url_field`。这些字段看起来像普通的文本框，但在移动设备上会显示不同的键盘。使用这些字段类型可以确保你的应用程序是移动友好的。
- en: Comment Form
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论表单
- en: 'Now let’s put your new form knowledge to work and add the comment form. First,
    add another heading to the end of the post show page at *app/views/posts/show.html.erb*:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们利用你新学的表单知识，添加评论表单。首先，在*app/views/posts/show.html.erb*文件的帖子显示页面末尾添加另一个标题：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Add the form for creating a comment underneath that new heading, as shown next.
    The array being passed to the `form_for` method contains both `@post` and `@post.comments.build`.
    Because every comment belongs to a post, you must pass the post and comment to
    the method. In this case, you’re using the current post and a new comment created
    by `@post.comments.build`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在新标题下方添加用于创建评论的表单，如下所示。传递给`form_for`方法的数组包含`@post`和`@post.comments.build`。因为每个评论都属于一个帖子，所以你必须将帖子和评论一起传递给该方法。在这种情况下，你正在使用当前帖子和由`@post.comments.build`创建的新评论。
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The rest of the comment form should look similar to the post form; even the
    field names are the same. Refresh the page in your browser and make sure the form
    renders like the one shown in [Figure 5-5](ch05.html#new_comment_form "Figure 5-5. The
    New Comment form").
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的评论表单应该看起来与发布表单相似；即使是字段名称也一样。在浏览器中刷新页面，确保表单像[图 5-5](ch05.html#new_comment_form
    "图 5-5. 新评论表单")中所示那样呈现。
- en: '![The New Comment form](httpatomoreillycomsourcenostarchimages2169076.png.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![新评论表单](httpatomoreillycomsourcenostarchimages2169076.png.jpg)'
- en: Figure 5-5. The New Comment form
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5. 新评论表单
- en: Now enter an author name and comment body and click the **Create Comment** button.
    Submitting the form should display your new comment and add a flash message to
    the top of the page that says “Comment was successfully created.”
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入作者名和评论正文，然后点击**创建评论**按钮。提交表单后，应该显示你的新评论，并在页面顶部添加一条闪烁消息，显示“评论已成功创建”。
- en: Check the output of the `rails server` command in your terminal to see exactly
    what happened. Assuming your post has an `id` of 1, you should first see a POST
    to the path `/posts/1/comments`. This calls the `CommentsController#create` method.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 检查终端中`rails server`命令的输出，查看到底发生了什么。假设你的帖子`id`为 1，你应该首先看到对路径`/posts/1/comments`的
    POST 请求。这会调用`CommentsController#create`方法。
- en: You added this controller and method in the last chapter; recall that the `create`
    method builds and saves a new comment and then redirects the user back to the
    post. You should see this redirect as a GET request for `/posts/1` in the output.
    This happens when the user is redirected back to the post show page.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你在上一章中添加了这个控制器和方法；回想一下，`create`方法创建并保存一个新评论，然后将用户重定向回帖子页面。你应该能在输出中看到这次重定向，它是对`/posts/1`的
    GET 请求。这发生在用户被重定向回帖子显示页面时。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Spend some time working on your application’s views. We cleaned up the index
    page a little, but I recommend you improve it further. The other pages could also
    use some work. The following exercises should give you some ideas.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间处理应用程序的视图。我们稍微清理了一下索引页面，但我建议你进一步改善它。其他页面也可以做一些改进。以下练习应能给你一些灵感。
- en: In the next chapter, you’ll set up Git for version control and deploy your application
    to the web for everyone to see.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将设置 Git 进行版本控制，并将应用部署到网络上，让所有人都能看到。
- en: Exercises
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Our blog’s heading only appears on the `index` page. Move the `h1`
    element from the posts index page to the application layout. While you’re at it,
    come up with something a little more interesting to call it than “Listing posts.”
    Also, change the `h1` headings on the New Post and Edit Post pages to `h2` headings.
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 1\. 我们博客的标题只出现在`index`页面。将`h1`元素从帖子索引页面移动到应用程序布局中。在此过程中，想出比“列出帖子”更有趣的标题。另外，将“新建帖子”和“编辑帖子”页面上的`h1`标题更改为`h2`标题。
    |'
- en: '| Q: | 2\. In [Chapter 3](ch03.html "Chapter 3. Models"), you added an `author`
    field to the posts table. Add a text field for `author` to the post form and update
    the `post_params` method in `PostsController` to permit `author` as a parameter.
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 2\. 在[第 3 章](ch03.html "第 3 章。模型")中，你向帖子表添加了一个`author`字段。请在帖子表单中添加一个文本字段用于`author`，并在`PostsController`中更新`post_params`方法，允许`author`作为参数。
    |'
- en: '| Q: | 3\. Users can create comments now, but you have no way to remove them.
    You need to be able to remove the inevitable spam posts! First, update the comment
    resource in *config/routes.rb* to add a route for the `destroy` action. The `:only`
    option should be `:only => [:create, :destroy]`. Next, add the `destroy` action
    in the CommentsController, similar to the `destroy` action for posts. Finally,
    add a link to this action at the bottom of *app/views/comments/_comment.html.erb*:
    |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| Q: | 3\. 用户现在可以创建评论，但无法删除它们。你需要能够删除不可避免的垃圾帖子！首先，在*config/routes.rb*中更新评论资源，添加`destroy`操作的路由。`:only`选项应该是`:only
    => [:create, :destroy]`。接着，在CommentsController中添加`destroy`操作，类似于帖子中的`destroy`操作。最后，在*app/views/comments/_comment.html.erb*的底部添加指向该操作的链接：|'
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
