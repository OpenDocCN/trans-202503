- en: '**0'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SETTING UP AND USEFUL SKILLS**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This book assumes you have some previous hardware experience, so the projects
    in it won’t hold your hand. That said, if you need a refresher on some basic skills,
    such as wiring and programming Arduino boards, keep on reading.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also covers some skills that you will find helpful but that you
    don’t necessarily need to build the projects. For example, in most projects, I
    provide PCB files that you can use to manufacture a shield PCB, but if you want
    to make a PCB rather than solder the circuits to prototyping board, read the “[Making
    Your Own PCBs](ch00.xhtml#ch00lev1sec5)” on [page 13](ch00.xhtml#page_13). And
    if you’ve never assembled a connector yourself or need guidance on working with
    small-outline integrated circuits, you will find information on that in “[Using
    SOICs](ch00.xhtml#ch00lev1sec7)” on [page 20](ch00.xhtml#page_20).
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing the Arduino Board**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whether you use an Arduino Nano, a Pro Mini, or one of their clones, there is
    a good chance your board will arrive with the header pins separate and unsoldered.
    All of the boards I’ve purchased came that way (see [Figure 0-1](ch00.xhtml#ch00fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-1: An Arduino Nano clone board with headers and a breadboard, which
    I use as an aid to soldering*.'
  prefs: []
  type: TYPE_NORMAL
- en: Before you can use an Arduino or clone, you need to solder the header pins.
    The strips of headers that come with a processor board usually have more pins
    than required, and the first step is to trim them to the number you need. The
    black plastic retainers are grooved to make cutting easy. I use a simple set of
    diagonal cutters to cut the plastic (see [Figure 0-2](ch00.xhtml#ch00fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-2: The Arduino Pro Mini clone, with the header pins trimmed to length.
    The 5-pin strip fits on the end of the board*.'
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to insert the header pins into a breadboard, spaced so the
    holes in the processor board will fit over the pins. Insert the long end of the
    header pins into the breadboard, as shown in [Figure 0-3](ch00.xhtml#ch00fig3).
    There are four rows of holes left empty between the two rows of header pins—that
    is, three rows plus the space in the center divide—so the processor board will
    fit.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to place the processor board over the short end of the header
    pins, as shown in [Figure 0-4](ch00.xhtml#ch00fig4), and solder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-3: The header pins have been inserted into the breadboard in preparation
    for soldering the Nano clone*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-4: The Nano clone in place on the breadboard and ready for soldering*'
  prefs: []
  type: TYPE_NORMAL
- en: Now your board has all its pins and is ready to be wired up.
  prefs: []
  type: TYPE_NORMAL
- en: '**Affixing the I²C Board to the LCD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many projects in this book also use a liquid crystal display (LCD) with an inter-integrated
    circuit (I²C) interface (see [Figure 0-5](ch00.xhtml#ch00fig5)). The LCDs used
    in this book can be purchased with or without the I²C adapter board, though I
    have often had to buy the LCD and the adapter board separately.
  prefs: []
  type: TYPE_NORMAL
- en: If the adapter board isn’t already attached to the LCD, connecting the two is
    about the same as preparing the Arduino board. The adapter board usually comes
    with header pins installed, so all you have to do is insert them into the display
    and solder them.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the display and the adapter usually works without any problems, but
    in some cases the adapters may have circuitry that almost touches the display
    board. To avoid connections shorting out, I suggest putting electrical tape on
    the back of the LCD to insulate it from the connections on the I²C adapter board.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-5: A 16×2 LCD and an FTDI module*'
  prefs: []
  type: TYPE_NORMAL
- en: You may also find that the pins of the header on the I²C board protrude through
    the LCD board enough that it causes a problem when mounting the display in a case.
    Try to solder the I²C board as far from the LCD board as possible to minimize
    the amount that the pins protrude through the board. [Figure 0-6](ch00.xhtml#ch00fig6)
    shows an adapter board ready to have the pins inserted into the LCD base board.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-6: The I²C board in place, ready for soldering*'
  prefs: []
  type: TYPE_NORMAL
- en: If soldering the adapter board in such a position proves too awkward, you can
    insert pins to their limit, solder them, and then trim them with a wire cutter
    to make them as flush as possible with the LCD board.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your LCD and adapter board, the I²C address you need to enter into
    the sketch may be different. There is a very simple scanner available at *[http://playground.arduino.cc/Main/I2cScanner/](http://playground.arduino.cc/Main/I2cScanner/)*.
    Just follow the instructions to figure out your LCD’s I²C address. 0x27 and 0x30
    are common addresses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uploading Sketches to Your Arduino**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you’ve assembled a project’s circuit on a breadboard, it’s time to load
    your sketch onto the microcontroller and give it a whirl. I suggest an Arduino
    Nano, Pro Mini, or clones of those for most projects in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing the Arduino IDE***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You may already have the free Arduino integrated development environment (IDE)
    installed on your computer; if not, download the program and install it now. Just
    visit *[https://www.arduino.cc/](https://www.arduino.cc/)*, click **Download**,
    and download the appropriate version of the Arduino IDE for your operating system.
    The latest version is 1.6.*x*. Then, go to the Getting Started with Arduino page
    at *[https://www.arduino.cc/en/Guide/HomePage/](https://www.arduino.cc/en/Guide/HomePage/)*,
    and follow the corresponding official installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re not familiar with the IDE, there are a number of tutorials and sample
    code files on the Arduino website. I strongly recommend that you read them to
    familiarize yourself with the software*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Arduino IDE***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After installation, open the Arduino IDE. A blank sketch will appear with a
    name in this format: *sketch_<date**>***. To save your sketch, select **File ▸
    Save As**. In the dialog that opens, choose where you want to save your sketch
    and what you want to name it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have a choice when creating a new sketch for a project in this book: you
    can type the sketch into the sketch window, or you can download the sketch file
    from the resource files at *[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*
    and then copy and paste the code into the sketch window.'
  prefs: []
  type: TYPE_NORMAL
- en: I usually like to *verify* the sketch—that is, compile it—before attempting
    to upload it to the board to make sure no errors crept in as the sketch was typed
    into the IDE. Verification is easily accomplished by clicking the checkmark in
    the upper-left corner (see [Figure 0-7](ch00.xhtml#ch00fig7)). The word *Verify*
    will appear to the right of the five icons on that line when you hover the mouse
    over the checkmark button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-7: The sketch window with the Verify icon clicked at the beginning
    of the list of icons*'
  prefs: []
  type: TYPE_NORMAL
- en: If your code compiles correctly, it’s ready to upload to your board.
  prefs: []
  type: TYPE_NORMAL
- en: '***Connecting and Programming an Arduino Nano***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After verifying your sketch, you have to connect the Arduino board to your computer.
    Of the Arduino boards used in this book, the Nano is the easiest to hook up and
    program, as it includes a built-in USB interface.
  prefs: []
  type: TYPE_NORMAL
- en: For a Nano, find a cable with a USB plug (type A) on one end and a mini-B USB
    plug on the other; your board probably came with one. Connect the USB end to the
    computer, and connect the mini-B USB end to the Nano. Select **Tools ▸ Board**,
    and then select the correct board and microcontroller (see [Figure 0-8](ch00.xhtml#ch00fig8)).
  prefs: []
  type: TYPE_NORMAL
- en: You may also need to select the correct serial COM port for your Arduino, though
    some versions of the IDE will automatically find a free port and connect to it.
    Go to **Tools ▸ Port** and select a serial port from the menu that appears. If
    you have any issues, consult the individual operating system guides at *[https://www.arduino.cc/en/Guide/HomePage/](https://www.arduino.cc/en/Guide/HomePage/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-8: The sketch window, with the Tools menu open. I selected Arduino
    Nano with the ATmega328*.'
  prefs: []
  type: TYPE_NORMAL
- en: The last step in programming the Nano is to upload the code. First, make sure
    the board is still plugged into the computer via the USB cable. Then, click the
    **Upload** button, which looks like an arrow pointing to the right (see [Figure
    0-9](ch00.xhtml#ch00fig9)). When you hover the mouse over the Upload button, the
    word *Upload* should appear to the right of the five main icons.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading code to the Arduino shouldn’t take too long, but it depends on the
    length of the sketch. Afterward, you should be set to power and test your circuit.
    (Don’t forget to unplug the USB before powering it with an external power source.)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-9: The sketch window with the Upload button clicked*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Connecting and Programming an Arduino Pro Mini***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Arduino Pro Mini (or clone) works much the same as the Arduino Nano, but
    it doesn’t have a built-in USB interface, opting instead for a transistor-transistor
    logic (TTL) connection. The easiest way I found to upload code to the Pro Mini
    was to remove the processor chip from an Arduino Uno, as shown in [Figure 0-10](ch00.xhtml#ch00fig10),
    and use the Uno board as a programmer.
  prefs: []
  type: TYPE_NORMAL
- en: The processor-free Uno can be connected to the computer directly via USB, so
    it can provide power as well as programming signals to a Pro Mini board connected
    to it. The USB cable for an Arduino Uno is a standard USB cable with a regular
    (type A) USB connector on one end and a square (type B) USB on the other (see
    [Figure 0-10](ch00.xhtml#ch00fig10)). More information about USB cables can be
    found at *[https://www.sparkfun.com/pages/USB_Guide/](https://www.sparkfun.com/pages/USB_Guide/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-10: An Arduino Uno clone with the processor removed (to the right
    of the board), a USB cable, the programming cable assembly, and a loose reset
    wire*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the Uno to the Pro Mini as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • Rx on the Pro Mini to Rx on the Uno
  prefs: []
  type: TYPE_NORMAL
- en: • Tx on the Pro Mini to Tx on the Uno
  prefs: []
  type: TYPE_NORMAL
- en: • VCC on the Pro Mini to 5.0V on the Uno
  prefs: []
  type: TYPE_NORMAL
- en: • GND on the Pro Mini to GND on the Uno
  prefs: []
  type: TYPE_NORMAL
- en: • RST on the Pro Mini to RST on the Uno
  prefs: []
  type: TYPE_NORMAL
- en: I made a simple cable to connect the positive and negative voltage supplies
    as well as the receive (Rx) and transmit (Tx) signals (see [Figure 0-11](ch00.xhtml#ch00fig11)).
    The individual wires on one end plug directly into headers on the Uno, and a 4-pin
    plug attaches to the edge headers on the Pro Mini. You could also use separate
    jumper wires, like those you would use for a breadboard. I have found it easiest
    to plug the Pro Mini into a breadboard so I can connect the RST signal with a
    jumper wire, as shown in [Figure 0-11](ch00.xhtml#ch00fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-11: The Arduino Pro Mini clone ready for programming with the Arduino
    Uno clone serving as programmer. The Arduino Uno’s USB connection supplies the
    power*.'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that *all* connections line up correctly before plugging the UNO’s
    USB cable into your computer. When you program the Pro Mini, select the proper
    board from the Board section of the Tools menu; even though you are plugging an
    Arduino Uno into the computer, you are still programming a Pro Mini. Once this
    setup is done, you can upload sketches to the Pro Mini just as you would the Nano.
  prefs: []
  type: TYPE_NORMAL
- en: While using an Arduino Uno intermediary is the easiest way to program the Pro
    Mini, you can also purchase USB-to-TTL devices like the one in [Figure 0-12](ch00.xhtml#ch00fig12).
    I purchased several on eBay in the $5 to $12 range, and with a little tinkering
    (the terminals are sometimes marked differently), they all worked well.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the Arduino is only part of the battle, though. To build a truly
    permanent project, you need to solder your working Arduino circuit to a board.
    A custom *printed circuit board (PCB)*, also sometimes called a *printed wiring
    board*, is the best way to keep your project clean and neat—if you are willing
    to put in the extra work to make one.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-12: A USB adapter for programming the Pro Mini and other controller
    boards without their own USB interface. This adapter uses a male USB (type A)
    plug and has a Data Terminal Ready (DTR) pin instead of a reset pin (RST). Most
    USB-to-TTL devices can be powered with 3.3V as well as 5V, but check before you
    power them, as some devices operate at 3.3V only*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using PCB Software**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many PCB design programs out there, and they vary in complexity and
    cost. Many are free in order to attract customers to use the company’s facilities
    to make boards. Therefore, there are some hang-ups when trying to use those free
    tools for DIY boards—for example, the software might have some features locked
    in the free version. I use ExpressPCB (*[https://www.expresspcb.com/](https://www.expresspcb.com/)*)
    for both single- and double-sided boards.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For double-sided DIY boards, I’ve had to reverse the image manually. The trick
    to making double-sided boards is properly aligning the two sides. To greatly simplify
    the alignment process for many projects, you can make alignment marks and drill
    alignment holes on the blank copper board before transferring the image. I have
    also, from time to time, used a drawing program called TurboCAD (similar to AutoCAD)
    to produce double-sided boards*.'
  prefs: []
  type: TYPE_NORMAL
- en: ExpressPCB offers the least expensive solution for making boards that I’ve been
    able to find. The company has a MiniBoard service that offers a standard-size
    board with no frills for a relatively low cost. Further, as the industry creates
    newer packages, using a software package that includes the newer IC footprints
    is essential. I have used ExpressPCB to make adapter boards—from SOIC to DIP—and
    to integrate SOICs into a finished board, as the software works well with the
    smaller geometries. Even if I want to make a “purpose-built” microcontroller board,
    which will likely require multiple layers, a ground, and VCC plane, ExpressPCB
    will probably fill the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: To use the program, simply go to the ExpressPCB website, download the free software,
    and install it. The ExpressPCB website has several tutorials on using the software,
    which I recommend you take advantage of. There is a companion free software program,
    ExpressSCH, which is a schematic capture program for writing your own schematic
    diagrams. While the features are not as well integrated as they could be, using
    the programs together has helped with circuit design.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*All the PCB designs in this book have been prepared using ExpressPCB design
    software, and they are all available at* [https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/).
    *To view or change the PCB drawings, you will have to download the software*.'
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of using ExpressPCB is that you can take the same file you
    develop for making the circuit board yourself and send it out to the company’s
    factory for finishing. I did that for a few of the projects in this book—in most
    cases, after making my own and wanting to clean up the board. I found the results
    more than satisfactory. The factory-prepared boards offer plated-through holes—if
    you build your own double-sided boards, soldering on both sides of the board is
    necessary. They also include a solder-plate finish and can be made with a solder-resistant
    coating and silkscreen image printed on the board. [Figure 0-13](ch00.xhtml#ch00fig13)
    shows a board I made using ExpressPCB.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-13: A professionally finished PCB, with solder-resistant coating
    and silkscreening. I used this board to make the Ballistic Chronograph in [Chapter
    8](ch08.xhtml#ch08)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A TIP FOR MANUFACTURING MULTIPLE DIFFERENT BOARDS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use ExpressPCB’s MiniBoard service to make more than one board for very
    little cost. The mandatory size for a board to qualify as a MiniBoard—and thus,
    to get the discount—is 3.8×2.5 inches, and when you bring up the program, a yellow
    guide box automatically displays an area of that size. In preparing PCBs such
    as the one in [Figure 0-14](ch00.xhtml#ch00fig14), I combined several smaller
    boards into one large “board” by copying and pasting the small boards into the
    maximum size for the MiniBoard price.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-14: Three different boards for one MiniBoard order. The board for
    the Ballistic Chronograph is on the top left, and the pH Meter’s is on the bottom.
    The top right is for an optical tachometer, which didn’t make it into the book.
    For one price, you get three copies of each board. All you have to do is cut them
    apart*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Making Your Own PCBs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of techniques for making PCBs after you design one. As I’ll
    discuss in [Chapter 2](ch02.xhtml#ch02), the most common method is a subtractive
    approach, in which copper is selectively removed from a foil-clad phenolic or
    epoxy/glass board to leave a pattern on the board. The copper can be mechanically
    milled off, but if you want to make a PCB at home, the most common—and least expensive—approach
    is to chemically etch the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: When chemically etching a PCB, a circuit pattern is printed on the blank board
    with a *resist*, a chemical that prevents the copper from being removed by the
    *etchant* in treated areas. The etchant is an acid that attacks the untreated
    copper on the clad board. [Figure 0-15](ch00.xhtml#ch00fig15) shows a copper board’s
    transition into a PCB.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-15: From left to right: an untreated, scrubbed copper-clad board;
    the board with resist printed on it; and the etched board without its holes drilled*'
  prefs: []
  type: TYPE_NORMAL
- en: In the old days, making a PCB was a tedious and messy job—particularly for a
    hobbyist. First, you would have to lay out the PCB pattern, which until not long
    ago, was done with tape on an acetate sheet with a light table. Then, you’d clean
    the copper-clad board and whirl on the photo resist. This needed to be exposed
    to UV light and developed with carbon tetrachloride (CCl[4]), which is not so
    good for you, or trichloroethylene (C[2]HCl[3]), which is not much better. After
    that, you’d begin the messy etching process with ferric chloride (FeCl[3]) or
    ammonium persulfate [(NH[4])[2]S[2]O[8]]. With all those steps, you could usually
    count on spending a good part of a day producing one board.
  prefs: []
  type: TYPE_NORMAL
- en: Today, that’s all changed. With today’s contemporary PCB software, you can frequently
    lay out a pattern for a relatively simple single-sided or even double-sided board
    in less than an hour, depending on its complexity. From there, the process gets
    even easier.
  prefs: []
  type: TYPE_NORMAL
- en: '***Applying the Pattern***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you want to learn to etch your own PCBs, go to the PulsarProFX website (*[http://www.pcbfx.com/](http://www.pcbfx.com/)*),
    which has the tools you need to put an image on a copper-clad board easily. Pulsar’s
    PCB Fab-in-a-Box product is a complete kit that contains all you need to get going
    and make several boards. One key ingredient is a special paper that you print
    on with a laser printer and that uses heat to transfer the image to the copper-clad
    board. The whole fabrication process—before drilling the holes—almost never takes
    more than an hour, unless you’re running low on etchant, which slows the etching
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the items in the Pulsar kit, the only tools needed are:'
  prefs: []
  type: TYPE_NORMAL
- en: • A laser printer
  prefs: []
  type: TYPE_NORMAL
- en: • A plastic laminator (Pulsar suggests using a GBC laminator, but I’ve used
    an Office Depot brand unit for years, and it works fine.)
  prefs: []
  type: TYPE_NORMAL
- en: • A water bath
  prefs: []
  type: TYPE_NORMAL
- en: 'The procedure for applying a PCB pattern to a copper-clad board is relatively
    simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Design the pattern on a computer using a PCB layout program, such as ExpressPCB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Print the image on the special paper provided by Pulsar with a laser printer,
    not an inkjet. The laser ink is a polymer compound that melts when heated and
    partially bonds to the paper, leaving your image on the paper. The paper, when
    reheated on the blank PC board, allows for easy transfer of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfer the image from the paper directly to a clean copper-clad board, using
    an inexpensive office laminating machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thermal ink on the paper becomes the resist on the copper-clad board. Pulsar
    provides an additional, thin film layer thermally bonded to the laser-jet ink,
    but the ink alone will resist the etchant.
  prefs: []
  type: TYPE_NORMAL
- en: '***Etching the Board***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While copper is not a highly active metal, there are several replacement reactions
    that etch it effectively. However, many of the resulting byproducts are somewhat
    toxic, and almost all of them result in materials that have to be discarded or
    recycled in a special way because they are extremely harmful to the environment.
    Most copper salts are strong poisons for a variety of plants and animals, including
    humans.
  prefs: []
  type: TYPE_NORMAL
- en: For a better etching method, I recommend an Instructables page called “Stop
    Using Ferric Chloride Etchant (A Better Solution),” which you can find at *[https://www.instructables.com/id/Stop-using-Ferric-Chloride-etchant!--A-better-etc/](https://www.instructables.com/id/Stop-using-Ferric-Chloride-etchant!--A-better-etc/)*.
    Read the environmental and personal safety warnings in this tutorial carefully
    before mixing your etchant.
  prefs: []
  type: TYPE_NORMAL
- en: 'The system described in this tutorial uses standard household chemicals: hydrogen
    peroxide (H[2]O[2]) and muriatic acid (essentially hydrochloric acid, HCl). The
    process is far more environmentally friendly than the old ferric chloride or ammonium
    persulfate techniques. You can also regenerate the described solution without
    having to discard the old solution because it actually uses copper—that is, copper
    chloride in aqueous hydrochloric acid solution—to dissolve the copper.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the etchant, you will need a vessel or container to etch the
    board in. For very small- and medium-sized boards, it’s possible to use a cylindrical
    container, such as the beaker in [Figure 0-16](ch00.xhtml#ch00fig16).
  prefs: []
  type: TYPE_NORMAL
- en: With your etchant in a safe container, all that’s left is to put the PCB in
    the etchant and take the PCB out when the unwanted copper is gone. In the scenario
    in [Figure 0-16](ch00.xhtml#ch00fig16), the circuit board is dipped in and out
    of the etching solution. Note that the beaker is sitting on a hot plate. Heating
    the solution accelerates the etching process, but be sure to keep the temperature
    between 100 and 120°F.
  prefs: []
  type: TYPE_NORMAL
- en: For larger boards, some kind of pan can be used. If you tip the pan, the etchant
    flows over the board, as illustrated in [Figure 0-17](ch00.xhtml#ch00fig17).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-16: Etching a small board in a beaker agitated with the Automated
    Agitator for PCB Etching from [Chapter 2](ch02.xhtml#ch02). The board is held
    using a plastic wire tie*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-17: Etching larger boards in a container that is tipped by the Automated
    Agitator for PCB Etching*'
  prefs: []
  type: TYPE_NORMAL
- en: The pan can be glass or plastic. In the past, I’ve use a glass baking pan, but
    the container in [Figure 0-17](ch00.xhtml#ch00fig17) is plastic. Just be careful
    with the heat if you use a plastic container. Temperatures in the recommended
    area should be safe.
  prefs: []
  type: TYPE_NORMAL
- en: In both the etching situations shown, an Arduino-based agitator (see [Chapter
    2](ch02.xhtml#ch02) to build the project) makes etching go even faster. The agitator
    provides a simple, mechanical way to agitate the etchant and speed up the process.
  prefs: []
  type: TYPE_NORMAL
- en: '***Drilling the Board***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Etching only removes copper, so unless you are making a single-sided, all surface-mount
    board, you will have to manually drill holes for your components. Drilling the
    PCB can be tedious depending on your equipment and the number of holes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my early days making boards, I used a Dremel tool freehand with a #66 drill.
    For small projects, hand-drilling is fine, but it’s easier to use a drill press
    for larger ones.'
  prefs: []
  type: TYPE_NORMAL
- en: If you already own a Dremel tool, then you’re in luck. For under $40, depending
    on where you buy it, a Dremel drill press accessory works well for circuit boards,
    as well as hundreds of other tasks. If you don’t already have a Dremel tool, you
    can get one of those for around $30 or less if you shop around. There are a variety
    of other high-speed drill and drill press combinations available at relatively
    low prices, too. Check with Harbor Freight and other suppliers of imported products
    on the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan to produce a number of PCBs, I suggest a dedicated drill press
    rather than a drill press attachment. There are inexpensive units that run on
    low-voltage supplies as well as high-priced units, such as the Electro-Mechano
    pictured in [Figure 0-18](ch00.xhtml#ch00fig18), which is designed exclusively
    for drilling small holes in jewelry and PCBs. Just pick one that suits your needs.
    You’ll need small drill bits to drill the PCB. I recommend an assortment of 10
    tungsten-carbide drills with 1/8-inch shanks, which are available from Electronic
    Goldmine (part #G15421). A similar assortment is available from Amazon, and I
    have purchased several sets of these at very modest prices.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-18: The small Electro-Mechano drill press I use for drilling PCBs*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connectors Used in This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout this book, I’ve tried to simplify the use of connectors and minimize
    the number of different connectors used. But whether you make your own PCBs or
    not, you will always need some way to interconnect modules like LCDs, I²C adaptors,
    sensors, and so on; and sometimes you will have to assemble your own connectors.
  prefs: []
  type: TYPE_NORMAL
- en: The connectors I use quite frequently are a family of connectors on 0.100-inch
    centers, a standard that works both for male and female headers on PCBs and for
    stand-alone connectors for some cable assemblies. While the units I use in this
    book were purchased from Pololu Robotics and Electronics (*[https://www.pololu.com/](https://www.pololu.com/)*),
    the same or similar units are available from many other suppliers, including Jameco,
    Newark, Mouser, Digi-Key, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 0-19](ch00.xhtml#ch00fig19) shows a few basic connector configurations
    I’ve used.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-19: A few basic connectors*'
  prefs: []
  type: TYPE_NORMAL
- en: The male and female crimp connectors are the workhorses in most cables I make.
    However, these connectors must be crimped onto the wire they connect. To crimp
    a pin, you can use a professional crimping tool (see [Figure 0-20](ch00.xhtml#ch00fig20)),
    which results in a nicely finished crimp (see [Figure 0-21](ch00.xhtml#ch00fig21)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-20: Crimping tool used to crimp 0.100 crimp connectors to 26-, 28-,
    and 30-gauge wire*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-21: A male crimp connector properly crimped using the crimping tool*'
  prefs: []
  type: TYPE_NORMAL
- en: The crimper that Pololu sells for its crimp connectors is relatively easy to
    use and makes a nice solid crimp, but it is a bit pricey at around $30\. If you
    don’t want to buy a crimping tool, you can crimp the connectors with a small pair
    of pliers. The resulting connection may not be as pretty, but it should work just
    as well. [Figure 0-22](ch00.xhtml#ch00fig22) shows a cable I crimped using pliers.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-22: A male connector identical to the one in [Figure 0-21](ch00.xhtml#ch00fig21)
    that was crimped by hand with a pair of pliers. Both fit snugly in the connector
    housing and work well*.'
  prefs: []
  type: TYPE_NORMAL
- en: You can create cables that plug into male headers with female crimp pins. These
    are useful for connecting parts of a PCB with a cable and for connecting an Arduino
    board to a shield.
  prefs: []
  type: TYPE_NORMAL
- en: Headers and housings are available in sizes from a single-pin wide up to 10
    pins, 15 pins, and beyond. Most projects in this book that involve handmade connectors
    use 2- and 4-pin connectors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using SOICs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making connectors for through-hole headers is fine, but through-hole integrated
    circuits with pins on 0.100-inch centers are becoming harder to get. While manufacturers
    continue to make many ICs in the older format, new designs are often available
    only as surface-mount components. These new packages are known as *small-outline
    integrated circuits (SOICs)*. [Figure 0-23](ch00.xhtml#ch00fig23) shows two SOIC
    components next to an 8-pin DIP IC, for a size comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-23: A standard DIP package (top) compared to two tiny SMD ICs, a
    5-pin Linear Technology LTC1799 in a TSOT-23 package (middle) and a 3-pin Maxim
    MAX7375AUR in a SOT-23 package (bottom), next to a dime for scale*'
  prefs: []
  type: TYPE_NORMAL
- en: '***What Are SMT Devices?***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The two non-DIP ICs shown in [Figure 0-23](ch00.xhtml#ch00fig23) are *surface-mount
    technology (SMT)* devices. SMT devices are soldered directly to the surface of
    a PCB instead of with their pins protruding through holes in the bottom. The advantage
    of SMT is that the devices can be made a lot smaller and placed in close proximity
    to each other, resulting in a more compact device. Many SMT components have 0.95
    mm (0.0374-inch) centers or smaller, which doesn’t match up to the 0.100-inch
    centered parts discussed so far.
  prefs: []
  type: TYPE_NORMAL
- en: Using SMT components also reduces wiring lengths, which can be critical at high
    frequencies. Many circuit boards have multiple layers (projects in this book have
    a maximum of two layers), and connections between layers were formerly made with
    holes for the pins on the ICs. These connections are now more commonly made with
    *vias*, which are small, plated-through holes in the board. Automated pick-and-place
    equipment is now concentrating on SMT devices, too. One day, resistors, capacitors,
    inductors, LEDs, fuses, and so on will likely be available only in surface-mount
    configurations, but it will probably take a while.
  prefs: []
  type: TYPE_NORMAL
- en: The SMT packages that I talk about in this book are *leaded*—that is, the package
    itself has leads protruding from it, even though the leads are not designed to
    go through holes in the PCB. Leaded ICs come in a variety of configurations with
    pins at different spacing, from relatively sparse leads—like the two SMT components
    in [Figure 0-23](ch00.xhtml#ch00fig23)—to ICs with hundreds of leads.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This book avoids certain SMT packages, such as the ultra-small packages with
    direct-connect patches, where the chip connects directly to the PCB (called chip-on-board),
    and ball-grid arrays, where the connection is a controlled-collapse solder bump
    on the bottom of the package*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Solder Paste Method***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using leaded SMT chips leaves you a couple of options. One is to design a PCB
    with the correct pads for the SOIC footprint and solder the IC directly to the
    PCB. Soldering an SOIC component involves applying solder paste and heating the
    board itself. While this is a viable approach (and a fair amount of tutorials
    on the web cover it), populating the board can be difficult—particularly if the
    board has both through-hole and SMT devices. Unless you have a stencil for depositing
    the solder paste, the paste has to be applied manually, usually with a syringe
    and sometimes with a sharp toothpick or dental pick. [Figure 0-24](ch00.xhtml#ch00fig24)
    shows a set of tools I have used for this process.
  prefs: []
  type: TYPE_NORMAL
- en: Several online suppliers offer solder paste in syringes at reasonable prices.
    Most of the solder paste compounds have a melting point between 300 and 470°F
    (some less), so boards can be soldered in a toaster oven or in a container on
    a hot plate.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-24: Chip Quik solder, a head-mounted magnifier, a dental pick, tweezers,
    an adapter board, and an SOIC (the speck next to the tweezers), ready for mounting*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The solder paste that I use is Chip Quik. It’s relatively inexpensive, comes
    in its own syringe with a tip, and has a melting point of only 138°C, or 281°F.
    While the tip could be a little smaller, it has worked for most applications.
    Chip Quik’s low melting point makes soldering the board in a toaster oven or on
    a hot plate easy but could conceivably be a problem otherwise: in a high-current
    application, a solder joint could heat up enough to melt the solder. But with
    the voltage, current, and signal levels in this book, I don’t expect this to be
    a problem.'
  prefs: []
  type: TYPE_NORMAL
- en: After the solder paste is applied, the components can be carefully placed on
    the paste with a pair of tweezers and a steady hand. I also use a head-mounted
    magnifier so I can see the connections. When the chip is set in place, all that
    remains is heating the assembly to the melting point of the solder, and voilà—the
    chore is done.
  prefs: []
  type: TYPE_NORMAL
- en: If you opt to heat the board in a standard toaster oven rather than buying a
    specialized SMT oven, just don’t use the same toaster oven you use to cook food.
    Many solders still contain lead, which has been deemed not-so-good for you. Flux
    materials (present in the solder paste to make the solder flow more easily) and
    binders also contain certain volatile compounds that may be unhealthy if ingested.
  prefs: []
  type: TYPE_NORMAL
- en: You can also put smaller boards in a small, clean metal can. Then, place the
    can on a hot plate, and set a small scrap piece of steel (aluminum will also work)
    on top of the can to hold the heat in. When the solder paste has melted, remove
    the heat. The process usually takes only a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: For someone like me with fat fingers, 0.95 mm is pretty small, whether applying
    solder paste, placing a component, or soldering a leaded SMT component directly.
    The process has, on occasion, taken me several tries. If you’re not quite ready
    to try the solder paste solution directly on your main PCB, consider buying an
    adapter board to convert SMTs to conventional 0.100-inch center through-hole mounting.
  prefs: []
  type: TYPE_NORMAL
- en: Several vendors offer small adapter boards that convert from an SOIC package
    to DIPs with 0.100-inch centers. The adapter board in [Figure 0-25](ch00.xhtml#ch00fig25)
    is from Futurlec (*[http://www.futurlec.com/](http://www.futurlec.com/)*). Futurlec
    adapter boards go for all of $0.28 each, so I ordered a variety, including those
    for 8-, 14-, 16-, and 18-pin SOICs.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-25: Futurlec 6PINSO23 adapter board*'
  prefs: []
  type: TYPE_NORMAL
- en: The best soldering solution, even with the adapter, is to use solder paste and
    an oven (or a can, as I just described). But if you don’t have access to the materials
    for that technique, you can always solder the SOIC component directly.
  prefs: []
  type: TYPE_NORMAL
- en: '***Soldering Directly***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Soldering an SOIC component directly is a little tricky. Doing so requires
    a soldering iron with a fine tip, though I used the tip I use for everything else.
    (I believe mine is 0.7 mm.) Here’s how this approach works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, place male headers in a breadboard with the adapter on top, and solder
    them to make a stable platform (see [Figure 0-26](ch00.xhtml#ch00fig26)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/fig0-26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 0-26: Adapter board with stakes installed and plugged into a breadboard
    for soldering the IC. The particles shown are residue from the solder and flux,
    which I later removed using alcohol and a Q-tip swab*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Even though the adapter has solder plate on the copper, it’s not thick enough
    to secure the leads of the IC. More solder is needed, so carefully melt a thin
    layer of solder on only one pad. (Often, I place too big a blob of solder and
    have to remove it with solder wick, but that too works out fine, as it still leaves
    a thin coating of solder on the pad itself.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the component on the adapter board, hold it down securely (I apply pressure
    with a dental pick), and put the hot iron on the lead that has the solder under
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the first leg is secure, it holds the device in place, and you can carefully
    solder the other terminals with the iron.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 0-27](ch00.xhtml#ch00fig27) shows a board I soldered this way. It may
    not look real pretty, but it works.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig0-27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 0-27: A completed adapter board with the male headers installed, the
    chip soldered, and a decoupling capacitor soldered across two of the pins. This
    is the cleaned-up version of [Figure 0-26](ch00.xhtml#ch00fig26)*.'
  prefs: []
  type: TYPE_NORMAL
- en: A completed adapter board like the one in [Figure 0-27](ch00.xhtml#ch00fig27)
    can then be mounted on a conventional through-hole board with holes on 0.100-inch
    centers. I used this technique on the Ballistic Chronograph ([Chapter 8](ch08.xhtml#ch08))
    and Square-Wave Generator ([Chapter 9](ch09.xhtml#ch09)) projects in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Closing Thoughts**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the knowledge in this chapter and some previous electronics experience,
    you are ready to tackle any project in this book. I will cover other important
    techniques and information on an as-needed basis throughout.
  prefs: []
  type: TYPE_NORMAL
