- en: '**20'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VULNERABILITY REPORTS**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, you’ve found your first vulnerability. Congratulations! Finding vulnerabilities
    can be hard. My first piece of advice is to relax and not get ahead of yourself.
    When you rush, you’ll often make mistakes. Believe me—I know how it feels to get
    excited and submit a bug only to have your report rejected. To rub salt in the
    wound, when a company closes the report as invalid, the bug bounty platform reduces
    your reputation points. This chapter should help you avoid that situation by giving
    you tips for writing a good bug report.
  prefs: []
  type: TYPE_NORMAL
- en: '**Read the Policy**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you submit a vulnerability, make sure to review the program policy. Each
    company that participates in a bug bounty platform provides a policy document,
    which usually lists excluded vulnerability types and whether properties are in
    or out of the scope of the program. Always read a company’s policies before hacking
    to avoid wasting your time. If you haven’t read a program’s policy yet, do it
    now to make sure you aren’t looking for known issues or bugs the company asks
    you not to report.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a painful mistake I once made that I could have avoided by reading the
    policies. The first vulnerability I found was on Shopify. I realized that if you
    submitted malformed HTML in its text editor, Shopify’s parser would correct it
    and store the XSS. I was excited. I thought my bug hunting was paying off, and
    I couldn’t submit my report fast enough.
  prefs: []
  type: TYPE_NORMAL
- en: After submitting my report, I waited for the minimum bounty of $500\. Within
    five minutes of submission, the program politely told me the vulnerability was
    already known and that researchers had been asked not to submit it. The ticket
    was closed as an invalid report, and I lost five reputation points. I wanted to
    crawl into a hole. It was a tough lesson.
  prefs: []
  type: TYPE_NORMAL
- en: Learn from my mistakes; read the policies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Include Details; Then Include More**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you’ve confirmed you can report your vulnerability, you’ll need to write
    the report. If you want the company to take your report seriously, provide details
    that include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL and any affected parameters needed to replicate the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your browser, your operating system (if applicable), and the version of the
    tested app (if applicable)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps to reproduce the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An explanation of impact, including how the bug could be exploited
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A recommended fix to remediate the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend you include proof of the vulnerability in the form of screenshots
    or a *short* video, no longer than two minutes. Proof-of-concept materials not
    only provide a record of your findings but also are helpful when demonstrating
    how to replicate a bug.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re preparing your report, you also need to consider the implications
    of the bug. For example, a stored XSS on Twitter is a serious issue given that
    the company is public, the number of users, the trust people have in the platform,
    and so on. Comparatively, a site without user accounts might deem a stored XSS
    to be less severe. In contrast, a privacy leak on a sensitive website that hosts
    personal health records might be of greater importance than on Twitter, where
    most user information is already public.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reconfirm the Vulnerability**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you’ve read the company policies, drafted your report, and included proof-of-concept
    materials, take a minute to question whether what you’re reporting is actually
    a vulnerability. For example, if you’re reporting a CSRF vulnerability because
    you didn’t see a token in the HTTP request body, check whether the parameter might
    have been passed as a header instead.
  prefs: []
  type: TYPE_NORMAL
- en: In March 2016, Mathias Karlsson wrote a great blog post about finding a Same
    Origin Policy (SOP) bypass (*[https://labs.detectify.com/2016/03/17/bypassing-sop-and-shouting-hello-before-you-cross-the-pond/](https://labs.detectify.com/2016/03/17/bypassing-sop-and-shouting-hello-before-you-cross-the-pond/)*).
    But he didn’t receive a payout, Karlsson explained in his blog post, using the
    Swedish saying *Don’t shout hello before you cross the pond*, which means don’t
    celebrate until you’re absolutely certain of success.
  prefs: []
  type: TYPE_NORMAL
- en: According to Karlsson, he was testing Firefox and noticed the browser would
    accept malformed hostnames on macOS. Specifically, the URL *http://example.com..*
    would load *example.com* but send *example.com..* in the host header. He then
    tried accessing *http://example.com...evil.com* and got the same result. He knew
    this meant he could bypass the SOP because Flash would treat *http://example.com..[evil.com](http://evil.com)*
    as being under the *\*.evil.com* domain. He checked the Alexa top 10,000 websites
    and found that 7 percent of sites would be exploitable, including *[yahoo.com](http://yahoo.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: He wrote up the vulnerability but then decided to double-check the issue with
    a coworker. They used another computer and reproduced the vulnerability. He updated
    Firefox and still confirmed the vulnerability. He tweeted a teaser about the bug.
    Then he realized his mistake. He hadn’t updated his operating system. After doing
    so, the bug was gone. Apparently, the issue he noticed had been reported and fixed
    six months earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Karlsson is among the best bug bounty hackers, but even he almost made an embarrassing
    mistake. Make sure you confirm your bugs before reporting them. It is a big letdown
    to think you’ve found a significant bug only to realize you’ve misunderstood the
    application and submitted an invalid report.
  prefs: []
  type: TYPE_NORMAL
- en: '**Your Reputation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you think of submitting a bug, step back and ask yourself whether you
    would be proud to publicly disclose the report.
  prefs: []
  type: TYPE_NORMAL
- en: When I began hacking, I submitted lots of reports because I wanted to be helpful
    and make it on to the leaderboard. But I was actually just wasting everyone’s
    time by writing invalid reports. Don’t make the same mistake.
  prefs: []
  type: TYPE_NORMAL
- en: You might not care about your reputation, or you might believe companies can
    sort through incoming reports to find the meaningful bugs. But on all bug bounty
    platforms, your statistics matter. They’re tracked, and companies use them to
    determine whether to invite you to private programs. Such programs are typically
    more lucrative for hackers because fewer hackers are involved, meaning less competition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example from my experience: I was invited to a private program and
    found eight vulnerabilities in a single day. But that night I submitted a report
    to another program and was given an N/A. The report reduced my stats on HackerOne.
    So when I went to report another bug to a private program the next day, I was
    informed that my stats were too low and I’d have to wait 30 days to report the
    bug I found. Waiting those 30 days wasn’t fun. I got lucky—no one else found the
    bug. But the consequences of my mistake taught me to value my reputation across
    all platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Show Respect for the Company**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it’s easy to forget, not all companies have the resources to immediately
    respond to reports or integrate bug fixes. Keep the company’s viewpoint in mind
    as you write your reports or follow up.
  prefs: []
  type: TYPE_NORMAL
- en: When a company launches a new public bug bounty program, it will be inundated
    with reports it needs to triage. Give the company some time to get back to you
    before you start asking for updates. Some company policies include a service-level
    agreement and commitment to respond to reports within a given timeline. Curb your
    excitement and consider the company’s workload. For new reports, expect a response
    within five business days. After that, you can usually post a polite comment to
    confirm the status of the report. Most times, companies will respond and let you
    know the situation. If they don’t, you should still give them a few more days
    before trying again or escalating the issue to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if the company has confirmed the vulnerability triaged in
    the report, you can ask what the expected timeline is for the fix and whether
    you’ll be kept updated. You can also ask if you can check back in a month or two.
    Open communication is an indicator of programs you want to continue working with;
    if a company is unresponsive, it’s best to move on to another program.
  prefs: []
  type: TYPE_NORMAL
- en: While writing this book, I was lucky enough to chat with Adam Bacchus while
    he held the title of Chief Bounty Officer at HackerOne (he has since moved back
    to Google as part of their Google Play rewards program, as of April 2019). Bacchus’s
    previous experience includes time at Snapchat, where he worked to bridge the relationship
    between security and software engineering. He also worked on Google’s Vulnerability
    Management Team to help run the Google Vulnerability Reward Program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bacchus helped me understand the problems triagers experience while operating
    a bounty program:'
  prefs: []
  type: TYPE_NORMAL
- en: Although bug bounty programs are continually improving, they receive many invalid
    reports, particularly when they’re public programs. This is referred to as *noise*.
    Report noise adds unnecessary work to program triagers, which might delay their
    responses to valid reports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bounty programs have to find some way of balancing bug remediation with preexisting
    development obligations. It’s tough when programs receive a large volume of reports
    or reports from multiple people about the same bugs. Prioritizing fixes is a particular
    challenge for low- or medium-severity bugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating reports in complicated systems takes time. For this reason, writing
    clear descriptions and reproduction steps is important. When a triager has to
    request additional information from you to validate and reproduce a bug, that
    delays the bug fix and your payout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all companies have the dedicated security personnel to run a full-time bounty
    program. Small companies might have employees split their time between administering
    the program and other development responsibilities. As a result, it might take
    some companies longer to respond to reports and track bug fixes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing bugs takes time, especially if the company goes through a full development
    life cycle. To integrate a fix, the company might need to go through certain steps,
    such as debugging, writing tests, and staging deployments. These processes slow
    down fixes even more when low-impact bugs are found in systems that customers
    rely on. Programs might take longer than you expect to determine the right fix.
    But this is where clear lines of communication and respect for one another are
    important. If you’re worried about getting paid quickly, focus on programs that
    pay on triage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug bounty programs want hackers to return. That’s because, as HackerOne has
    described, the severity of the bugs that a hacker reports typically increases
    as that hacker submits more bugs to a single program. This is referred to as *going
    deep* on a program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bad press is real. Programs always run the risk of mistakenly dismissing a vulnerability,
    taking too long on a fix, or awarding a bounty a hacker believes is too low. In
    addition, some hackers will call out programs in social and traditional media
    when they feel any of these situations has occurred. These risks affect how triagers
    do their jobs and the relationships they develop with hackers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bacchus shared these insights to humanize the bug bounty process. I’ve had all
    kinds of experiences with programs, just as he’s described. As you’re writing
    reports, keep in mind that hackers and programs need to work together with a common
    understanding of these challenges to improve the situation on both sides.
  prefs: []
  type: TYPE_NORMAL
- en: '**Appealing Bounty Rewards**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you submit a vulnerability to a company that pays a bounty, respect its
    decision about the payout amount, but don’t be afraid to talk to the company.
    On Quora, Jobert Abma, co-founder of HackerOne, shared the following regarding
    bounty disagreements (*[https://www.quora.com/How-do-I-become-a-successful-Bug-bounty-hunter/](https://www.quora.com/How-do-I-become-a-successful-Bug-bounty-hunter/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: If you disagree on a received amount, have a discussion why you believe it deserves
    a higher reward. Avoid situations where you ask for another reward without elaborating
    why you believe that. In return, a company should respect your time and value.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s okay to politely ask why a report was awarded a specific amount. When
    I’ve done this in the past, I usually use the following comments:'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks very much for the bounty. I really appreciate it. I was curious how the
    amount was determined. I was expecting $*X*, but you awarded $*Y*. I thought this
    bug could be used to *[exploit Z]*, which could have a significant impact on your
    *[system/users]*. I was hoping you could help me understand so I can better focus
    my time on what matters most to you in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'In response, companies have done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Explained that the impact of a report was lower than I thought, without changing
    the amount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agreed that they misinterpreted my report and increased the amount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agreed that they had misclassified my report and increased the amount after
    the correction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a company has disclosed a report involving the same type of vulnerability
    or a similar impact consistent with your bounty expectation, you can also include
    a reference to that report in your follow-up to explain your expectation. But
    I recommend you only reference reports from the same company. Don’t reference
    larger payouts from different companies because a bounty from company A doesn’t
    necessarily justify the same bounty from company B.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Knowing how to write a great report and communicate your findings is an important
    skill for successful bug bounty hackers. Reading program policies is essential,
    as is determining what details to include in your reports. Once you’ve found a
    bug, it’s vital to reconfirm your findings to avoid submitting invalid reports.
    Even great hackers like Mathias Karlsson consciously work to avoid making mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve submitted your report, empathize with the people triaging potential
    vulnerabilities. Keep Adam Bacchus’s insights in mind as you work with companies.
    If you’ve been paid a bounty and don’t feel like it was appropriate, it’s best
    to have a polite conversation instead of venting on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: All of the reports you write affect your reputation on bug bounty platforms.
    It’s important to be protective of that reputation because platforms use your
    statistics to determine whether to invite you to private programs, where you may
    be able to earn greater return on your hacking investment.
  prefs: []
  type: TYPE_NORMAL
