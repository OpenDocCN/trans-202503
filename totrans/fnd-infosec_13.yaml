- en: '13'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: APPLICATION SECURITY
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapters 10](ch10.xhtml) and [11](ch11.xhtml), I discussed the importance
    of keeping your networks and operating systems secure. Part of keeping attackers
    from interacting with your networks and subverting your operating system security
    is ensuring the security of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In December 2013, the Target Corporation, a retailer operating more than 1,800
    stores throughout the United States, reported a breach of customer data that included
    40 million customer names, card numbers, card expiration dates, and card security
    codes.[¹](notes.xhtml#ch13fn1) A month later, Target announced that an additional
    70 million customers had had their personal data breached.[²](notes.xhtml#ch13fn2)
  prefs: []
  type: TYPE_NORMAL
- en: This breach didn’t originate in Target’s systems at all, but rather those of
    a vendor, Fazio Mechanical, that was connected to Target’s network. Experts believe
    the attack to have occurred as follows:[³](notes.xhtml#ch13fn3)
  prefs: []
  type: TYPE_NORMAL
- en: Attackers compromised the systems of Fazio Mechanical with a trojan (a type
    of malware), using a phishing attack to get it in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because of poor network segmentation practices, the attackers were able to use
    Fazio’s access to Target’s network to gain access to other portions of the Target
    network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attackers installed the credit card harvesting BlackPOS malware on the Target
    point-of-sale (POS) systems (cash registers, basically) and used the malware to
    collect information from payment cards scanned by the POS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attackers moved the collected credit card numbers to compromised File Transfer
    Protocol (FTP) servers on the Target network and then sent them outside of the
    company, where they eventually ended up on a server in Russia.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attackers then sold the stolen credit card and personal data on the black market.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A variety of issues at several levels allowed this attack to take place. Any
    one of these missing or lapsed controls—the lack of network segmentation, the
    lack of anti-malware tools, and the lack of data loss prevention tools—could have
    prevented the attack from succeeding. In this chapter, you’ll look at application
    vulnerabilities introduced during software development, vulnerabilities commonly
    found in web applications, and vulnerabilities that affect the databases that
    applications use. I’ll also discuss tools you can use to protect your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Software Development Vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many common software development vulnerabilities can lead to security issues
    in your applications. These include buffer overflows, race conditions, input validation
    attacks, authentication attacks, authorization attacks, and cryptographic attacks,
    as shown in [Figure 13-1](#ch13fig1). I’ll go over each kind of vulnerability
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: You can avoid all these vulnerabilities with relative ease when developing new
    software by simply not using the programming techniques that enable them to exist.
    The Computer Emergency Response Team at Carnegie Mellon University publishes a
    set of documentation that defines secure software development standards for several
    programming languages, and it’s a good overall resource for further investigation
    into secure coding in general.[⁴](notes.xhtml#ch13fn4)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-1: Software development vulnerabilities*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Buffer Overflows*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Buffer overflows*, or buffer overruns, occur when you don’t properly account
    for the size of the data input into your applications. If an application accepts
    data, most programming languages will require you to specify the amount of data
    you expect to receive and then set aside storage for that data. If you don’t set
    a limit on the amount of data you take in (a process called *bounds checking*),
    you may receive 1,000 characters of input when you had allocated storage for only
    50 characters.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the excess 950 characters of data may overwrite other areas in
    memory that are used by other applications or the operating system. Attackers
    might exploit this technique to tamper with other applications or cause the operating
    system to execute their own commands.
  prefs: []
  type: TYPE_NORMAL
- en: Proper bounds checking can nullify this type of attack entirely. Some languages,
    such as Java and C#, implement bounds checking automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '*Race Conditions*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Race conditions occur when multiple processes (or multiple threads within a
    process) control or share access to a resource and the correct handling of that
    resource depends on the proper ordering or timing of transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you’re making a $20 withdrawal from your bank account via an
    automatic teller machine (ATM), the process might go as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the account balance ($100).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Withdraw funds ($20).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the account balance ($80).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If someone else starts the same process at roughly the same time and tries to
    make a $30 withdrawal, you might end up with a bit of a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '| **User 1** | **User 2** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Check the account balance ($100). | Check the account balance ($100). |'
  prefs: []
  type: TYPE_TB
- en: '| Withdraw funds ($20). | Withdraw funds ($30). |'
  prefs: []
  type: TYPE_TB
- en: '| Update the account balance ($80). | Update the account balance ($70). |'
  prefs: []
  type: TYPE_TB
- en: Because two users share access to the resource, the account ends up recording
    a balance of $70 where you should see only $50\. The two users “race” to access
    the resource, and undesirable conditions occur. (Note that most actual banks implement
    measures to keep this from happening.)
  prefs: []
  type: TYPE_NORMAL
- en: Race conditions can be difficult to detect in existing software, as they’re
    hard to reproduce. When you’re developing new applications, you can generally
    avoid these issues if you carefully handle the way users access resources to avoid
    dependencies on timing.
  prefs: []
  type: TYPE_NORMAL
- en: '*Input Validation Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’re not careful to *validate* the input to your applications—in other
    words, make sure any input that users submit, such as the answers to forms, arrives
    in an acceptable format—you might fall victim to problems such as a format string
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: In *format string attacks*, attackers use certain print functions within a programming
    language that are meant to format the output but instead allow the attacker to
    manipulate or view an application’s internal memory. In some languages, such as
    C and C++, you can insert certain characters into the input, such as `%f`, `%n`,
    and `%p`, to apply formatting to the data you’re printing to the screen. Attackers
    could, for example, include the `%n` (write an integer into memory) parameter
    in a specially crafted input to write a value into a location in memory that they
    might not normally be able to access. They could use this technique to crash an
    application or cause the operating system to run a command, potentially compromising
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this attack, you should validate your input by filtering it for unexpected
    or undesirable content. In the case of the format string attack, you may be able
    to remove the offending characters from the input, or you could put error handling
    in place to ensure that you anticipate and compensate for such issues so that
    they don’t cause a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '*Authentication Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Authentication attacks are those that attempt to gain access to resources without
    the proper credentials to do so. Putting strong authentication mechanisms in place
    in your applications will help resist these kinds of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: If you require users of applications to create strong passwords, you’ll help
    keep attackers out. If you use an eight-character, all-lowercase password, such
    as *hellobob*, a reasonably powerful machine may be able to break the password
    almost instantaneously. If you use a ten-character, mixed-case password that also
    includes numbers and a symbol, such as *H3lloBob!1*, the time needed to crack
    it increases to more than 20 years.[⁵](notes.xhtml#ch13fn5) Furthermore, your
    applications should not use passwords that are built-in and impossible to change
    (often called *hard-coded* passwords).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you should avoid performing authentication on the client side
    (the end user’s machine), because you’d then place such measures where they may
    easily be attacked. As with most security measures, when you give attackers direct
    access to your controls to manipulate them as they please, you largely remove
    the effectiveness of the control.
  prefs: []
  type: TYPE_NORMAL
- en: If you depend on a local application or script to perform authentication steps
    and then simply send the “all clear” message to the server end, nothing prevents
    an attacker from repeating this message to your back end directly, without completing
    the authentication. Authentication efforts should always be placed as far out
    of reach of attackers as you can make them, and entirely on the server side, if
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: '*Authorization Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Authorization attacks* are attacks that attempt to gain access to resources
    without the appropriate authorization to do so. Like authentication mechanisms,
    placing authorization mechanisms on the client side is a bad idea. Any process
    performed in a space where it might be subject to direct attack or manipulation
    by users is almost guaranteed to be a security issue at some point. You should
    instead authenticate against a remote server or on the hardware of the device
    if the device is portable, which gives you considerably more control.'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re authorizing a user for some activity, you should do so using the
    principle of least privilege, as discussed in [Chapter 3](ch03.xhtml). If you’re
    not careful to allow the minimum permissions required, both for your users and
    for your software, you may leave yourself open for attack and compromise.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, whenever a user or process attempts an activity that requires
    privileges, you should always check again to ensure that the user is indeed authorized
    for the activity in question, each time it’s attempted. If you have a user who,
    whether by accident or by design, gains access to restricted portions of your
    application, you should have measures in place that stop the user from proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: '*Cryptographic Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Cryptography is easy to implement badly, and doing so can give you a false sense
    of security. One of the big mistakes when implementing cryptography in your applications
    is to develop your own cryptographic scheme. The major cryptographic algorithms
    in use today, such as Advanced Encryption Standard (AES) and Rivest-Shamir-Adleman
    (RSA), have been developed and tested by thousands of people who are very skilled
    and make their living developing such tools. Additionally, these algorithms are
    in general use because they have been able to stand the test of time without serious
    compromise. Although it’s possible that your homegrown algorithm may have some
    security benefit, you probably shouldn’t test it on software that stores or processes
    sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using known algorithms, you should plan for the possibility that
    the mechanisms you select will become obsolete or compromised in the future. This
    means you should design the software in such a way to support the use of different
    algorithms or at least design your applications in such a way that changing them
    is not a Herculean task. You should also make it possible to change the encryption
    keys the software uses, in case your keys break or become exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Web Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Attackers can use an enormous variety of techniques to target web applications
    and compromise your machines, steal sensitive information, and trick you into
    carrying out activities without your knowledge. You can separate these attacks
    into two main categories: client-side attacks and server-side attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Client-Side Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Client-side attacks either take advantage of weaknesses in the software loaded
    on the user’s clients or rely on social engineering to fool the user. There are
    many such attacks, but I’ll focus specifically on some that use the web as an
    attack vehicle.
  prefs: []
  type: TYPE_NORMAL
- en: '*Cross-site scripting (XSS)* is an attack carried out by placing code written
    in a scripting language into a web page, or other media like Adobe Flash animation
    and some types of video files, that is displayed by a client browser. When other
    people view the web page or media, they execute the code automatically, and the
    attack is carried out.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the attacker might leave a comment containing the attack script
    in the comments section of an entry on a blog. People visiting the web page with
    their browsers would execute the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site request forgery and clickjacking, two attacks mentioned in [Chapter
    3](ch03.xhtml), are also client-side attacks. In a cross-site request forgery
    attack, the attacker places a link, or links, on a web page in such a way that
    they’ll execute automatically. The link initiates an activity on another web page
    or application where the user is currently authenticated, such as adding items
    to their shopping cart on Amazon or transferring money from one bank account to
    another.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re browsing several pages and are still authenticated to the page the
    attack is intended for, you might execute the attack in the background and never
    know it. For example, if you have several pages open in your browser, including
    one for *MySpiffyBank.com*, a common banking institution, and you’re still logged
    in to that page when you visit *BadGuyAttackSite.com*, the links on the attack
    page may automatically execute to get you to transfer money to another account.
    Although attackers most likely won’t know which websites a user is authenticated
    to, they can make educated guesses, such as banks or shopping sites, and include
    components to target those specifically.
  prefs: []
  type: TYPE_NORMAL
- en: Clickjacking is an attack that takes advantage of your browser’s graphical display
    capabilities to trick you into clicking something you might not click otherwise.
    Clickjacking attacks work by placing another layer of graphics or text over the
    page, or portions of the page, to obscure what you’re clicking. For example, the
    attacker might hide a Buy Now button under another layer with a More Information
    button.
  prefs: []
  type: TYPE_NORMAL
- en: These types of attacks are, for the most part, thwarted by the newer versions
    of common browsers, such as Internet Explorer, Firefox, Safari, and Chrome. The
    most common attacks discussed in this section will be blocked by these automatically,
    but in many cases, new attack vectors simply allow for new variations of old attacks.
    Additionally, many clients are running on outdated or unpatched software that
    remain vulnerable to attacks that are years old. Understanding how the common
    attacks work and protecting against them not only gives you an additional measure
    of security but also helps you understand how attackers develop newer attacks.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to keep up with the most recent browser versions and updates,
    as the vendors that produce them regularly update their protections. Furthermore,
    some browsers let you apply additional tools to protect you from client-side attacks.
    One of the better known of these tools is NoScript (*[http://noscript.net/](http://noscript.net/)*)
    for Firefox. NoScript blocks most web page scripts by default and requires you
    to specifically enable those you’d like to run. When used carefully, script-blocking
    tools such as these can disable many of the web-based threats you’re likely to
    encounter.
  prefs: []
  type: TYPE_NORMAL
- en: '*Server-Side Attacks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Several vulnerabilities on the server side of web transactions may cause problems,
    as well. These threats and vulnerabilities can vary widely depending on your operating
    system, web server software and its versions, scripting languages, and many other
    factors. However, these vulnerabilities are typically caused by a few common factors.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of Input Validation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As discussed earlier in the chapter, software developers often neglect to properly
    validate user input, and some of the most common server-side web attacks use this
    weakness to carry out their attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '*Directory traversal attacks* present a strong example of what might happen
    if you don’t validate input to your web applications. Attackers can use these
    attacks to gain access to the file system outside of the web server’s structure
    where content is stored by using the *../* character sequence, which moves up
    one level of a directory to change directories. For example, browsing to *https://www.vulnerablewebserver.com/../../../etc/passwd*
    on a vulnerable server would display the contents of the */etc/password* file.
    To break this down further, this URL asks the web server to move in the file system
    in this fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: From */var/www/html* (where web content is normally stored)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To */var/www*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then to */var*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then to / (the root directory)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then back down to */etc*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then to display the contents of */etc/passwd*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re careful to validate the input you accept into your web applications
    and filter out characters that might be used to compromise your security, you
    can often fend off such an attack before it even begins. In many cases, filtering
    out special characters, such as the ones described and *, %, ‘, ;, and / will
    defeat such attacks entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Improper or Inadequate Permissions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Assigning improper user permissions can often cause problems with web applications
    and internet-facing applications of most any kind. Web applications and pages
    often use sensitive files and directories that will cause security issues if they’re
    exposed to general users.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one area that might cause trouble is the exposure of configuration
    files. Many web applications that make use of databases (which is a clear majority
    of applications) have *configuration files* that hold the credentials the application
    uses to access the database. If these files and the directories that hold them
    aren’t properly secured, attackers may simply read your credentials from the file
    and access the database as they please. For applications that hold sensitive data,
    this could be disastrous.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, if you don’t take care to secure the directories on your web servers,
    you may find files changed in your applications, new files added, or the contents
    of some files deleted entirely. Insecure applications that are internet-facing
    don’t tend to last long before being compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Extraneous Files
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When a web server moves from development into production, developers often forget
    to clean up any files not directly related to running the site or application,
    or files that might be artifacts of the development or build process.
  prefs: []
  type: TYPE_NORMAL
- en: If you leave archives of the source code from which your applications are built,
    backup copies of your files, text files containing your notes or credentials,
    or any such related files, you may be handing attackers exactly the materials
    they need to compromise your system. One of the final steps when rolling out a
    web server should be to make sure all such files are cleaned up or moved elsewhere
    if they’re still needed. This is also a good periodic check to ensure that, during
    troubleshooting or upgrading, these items haven’t been left behind where they’re
    visible to the public.
  prefs: []
  type: TYPE_NORMAL
- en: Database Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many websites and applications in use today rely on databases to store the information
    they display and process. In some cases, the database applications may hold very
    sensitive data, such as tax returns, medical information, or legal records, or
    they may contain only the contents of a knitting discussion forum. In either case,
    the data is important to the owners of the application, and they’d be inconvenienced
    if it were damaged or manipulated in an unauthorized manner.
  prefs: []
  type: TYPE_NORMAL
- en: Several issues can harm the security of your databases. The canonical list includes
    the following:[⁶](notes.xhtml#ch13fn6)
  prefs: []
  type: TYPE_NORMAL
- en: Unauthenticated flaws in network protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticated flaws in network protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flaws in authentication protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unauthenticated access to functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arbitrary code execution in intrinsic SQL elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arbitrary code execution in securable SQL elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation via SQL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local privilege escalation issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this may seem like a horribly complex set of issues to worry about,
    you can break them down into four major categories, as shown in [Figure 13-2](#ch13fig2).
    I’ll cover each of these categories in detail in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-2: Categories of database vulnerabilities*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Protocol Issues*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Vulnerabilities might exist in the protocols used by any given database. This
    includes the network protocols used to communicate with the database. The vulnerabilities
    in these protocols often involve common software development issues, such as the
    buffer overflows discussed earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate *known* protocol issues, you should use the most current software
    version and patches for the database software in question, as discussed in [Chapter
    11](ch11.xhtml). To protect your databases from *unknown* issues (issues that
    haven’t been discovered yet), you should limit access to your databases, either
    by limiting who is able to connect to the database over the network, by using
    some of the methods discussed in [Chapter 10](ch10.xhtml), or by limiting the
    privileges and accounts you make available for the database itself, following
    the principle of least privilege.
  prefs: []
  type: TYPE_NORMAL
- en: You may also discover issues in the protocols used to authenticate to your database,
    depending on the specific software and version in use. In general, the older and
    more out-of-date your software becomes, the more likely it is that you’re using
    an authentication protocol that isn’t robust. Many older applications will use
    authentication protocols known to have been broken at some point or to have obvious
    architectural flaws, such as sending login credentials over the network in plaintext,
    which Telnet (a tool remotely accessing to a device) does. Again, the best defense
    here is to ensure that you’re using the most current versions of all software.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unauthenticated Access*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you give a user or process the opportunity to interact with your database
    without supplying a set of credentials, you create the possibility for security
    issues. For example, some simple queries to the database through a web interface
    might accidentally expose information contained in the database; or you might
    expose information about the database itself, such as a version number, giving
    an attacker additional material with which to compromise your application. You
    might also experience a wide variety of issues related to the secure software
    development practices discussed at the beginning of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If, instead, the user or process is forced to send a set of credentials to begin
    a transaction, the transaction can be monitored and appropriately restricted,
    based on those credentials. If you allow access to part of your application or
    toolset without requiring credentials, you may lose visibility and control over
    the actions taking place.
  prefs: []
  type: TYPE_NORMAL
- en: '*Arbitrary Code Execution*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Arbitrary code execution* (also known as *remote code execution* when conducted
    over the network) is the ability for attackers to execute any commands on a system
    that they choose, without restriction. When it comes to database security, attackers
    are able to do this because of security flaws related to the languages you use
    to talk to databases. Structured Query Language (SQL) is the language used to
    communicate with many of the common databases currently on the market. It contains
    several built-in elements that can create these security risks, some of which
    you can limit the use of and some of which you can’t.'
  prefs: []
  type: TYPE_NORMAL
- en: These language elements can help facilitate bugs in the software you’re using,
    or they can create issues if you use insecure coding practices, such as allowing
    attackers to execute arbitrary code within the application. For example, if the
    server was not appropriately and securely configured, anyone could read from and
    write to the file system of the server (with the `load_file` and `outfile` functions),
    a common ability in many database systems. Once you’re able to interface with
    the operating system itself, you have a foothold to conduct further attacks, steal
    data, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Your best defenses against such attacks are twofold. From the consumer side,
    you should use the current versions and patch levels of all software. From the
    vendor side, you should mandate secure coding practices, in all cases, to eliminate
    the vulnerabilities in the first place, as well as conduct internal reviews to
    ensure that such practices are being followed.
  prefs: []
  type: TYPE_NORMAL
- en: '*Privilege Escalation*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The last kind of major database security issue is privilege escalation. *Privilege
    escalation attacks* are those that increase your level of access above what you’re
    authorized to have on the system or application. Privilege escalation is aimed
    at gaining administrative access to the software to carry out other attacks that
    need a high level of access.
  prefs: []
  type: TYPE_NORMAL
- en: You can often conduct privilege escalation through *SQL injection*, an attack
    in which input containing SQL commands is submitted to the application. For example,
    one of the more common SQL injection examples is to send the string `' or '1'='1`
    as the input in a username field for an application. If the application has not
    filtered the input properly, this string may cause it to automatically record
    that you’ve entered a legitimate username, because you have set up a condition
    that always evaluates to true, 1 = 1\. This allows you to potentially escalate
    your level of privilege.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation in your databases can also occur if you fail to properly
    secure your operating system. Database applications run on the operating system,
    using the credentials and privileges of an operating system user, just like a
    web browser or any other. If you’re not careful to protect your operating systems
    and the user accounts that run on them, as discussed in [Chapters 10](ch10.xhtml)
    and [11](ch11.xhtml), any database security measures you put in place might have
    no effect. If attackers gain access to the account under which the database software
    is running, they’ll likely have privileges to do anything they care to do, including
    deleting the database itself, changing passwords for any of the database users,
    changing the settings for the way the database functions, manipulating data, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Your best defenses against operating system issues such as these are the set
    of hardening and mitigation steps discussed in [Chapter 11](ch11.xhtml). If you
    can keep attackers from compromising your system in the first place, you can largely
    avoid this concern.
  prefs: []
  type: TYPE_NORMAL
- en: Application Security Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use tools to assess and improve the security of your applications. I
    discussed some of them, such as sniffers, in [Chapters 10](ch10.xhtml) and [11](ch11.xhtml).
    Others are less familiar and more complex, such as fuzzers and reverse engineering
    tools. Some also require a certain amount of software development experience and
    familiarity with the technologies concerned to use effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '*Sniffers*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use sniffers to watch the specific network traffic that is being exchanged
    with an application or protocol. In [Figure 13-3](#ch13fig3), I’m using Wireshark
    to examine Hypertext Transfer Protocol (HTTP) traffic specifically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-3: HTTP traffic in Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, you can also use tools specific to certain operating systems
    to get additional information from sniffing tools. A good example of this is Linux’s
    network monitoring tool EtherApe, which enables you to not only sniff the network
    traffic but also easily associate the traffic you see with network destinations
    or specific protocols, as shown in [Figure 13-4](#ch13fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-4: EtherApe*'
  prefs: []
  type: TYPE_NORMAL
- en: Often, graphical representations such as these allow you to parse data more
    intuitively and easily discern patterns of traffic that might otherwise go unnoticed.
  prefs: []
  type: TYPE_NORMAL
- en: '*Web Application Analysis Tools*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A great number of tools exist for analyzing web pages or web-based applications,
    some of them commercial and some of them free. Most of these tools search for
    common flaws, such as XSS or SQL injection vulnerabilities, as well as improperly
    set permissions, extraneous files, outdated software versions, and many other
    security issues.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Zed Attack Proxy
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: OWASP Zed Attack Proxy (ZAP), shown in [Figure 13-5](#ch13fig5), is a free and
    open source web server analysis tool that performs checks for many of the common
    vulnerabilities mentioned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-5: ZAP*'
  prefs: []
  type: TYPE_NORMAL
- en: ZAP indexes all the files and directories it can see on the target web server,
    a process commonly referred to as *spidering*, and then locates and reports on
    any potential issues it finds.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRUST BUT VERIFY**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note, when using web analysis tools, that not everything the
    tool reports as a potential issue will be an actual security problem. These tools
    almost universally return a certain number of false positives, indicating a problem
    that doesn’t actually exist. It is important to manually verify that the issue
    really exists before acting to mitigate it.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can also choose from quite a few commercial web analysis tools, which vary
    in price from several hundred dollars to many thousands of dollars. One such tool,
    Burp Suite (*[https://portswigger.net/burp/](https://portswigger.net/burp/)*),
    tends toward the lower end of the cost scale for the professional version ($399
    per year at the time of this writing) but still presents a solid set of features.
    Burp Suite runs in a GUI interface, as shown in [Figure 13-6](#ch13fig6), and,
    in addition to the standard set of features found in any web assessment product,
    it includes several more advanced tools for conducting more in-depth attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-6: Burp Suite*'
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite is also available in a free community version that allows you to
    use the standard scanning and assessment tools but doesn’t include access to the
    more advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: '*Fuzzers*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to all the tools you can use to look over your software for various
    known vulnerabilities, there are tools that can help you find completely unexpected
    problems through a process referred to as *fuzz testing*. The tools used for this
    technique, called *fuzzers*, work by bombarding your applications with all manner
    of data and inputs from a wide variety of sources, in the hope that you can cause
    the application to fail or to perform some unexpected behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of fuzzing was first developed by Barton Miller for a graduate-level
    university operating system class in the late 1980s,[⁷](notes.xhtml#ch13fn7) and
    it’s become popular among security researchers and those conducting security assessments
    on applications. Miller’s fuzzing web page at the University of Wisconsin is a
    great resource for further reading on fuzzing, and it includes the document that
    spawned this field of analysis. You can find it at *[http://pages.cs.wisc.edu/~bart/fuzz/](http://pages.cs.wisc.edu/~bart/fuzz/)*.
  prefs: []
  type: TYPE_NORMAL
- en: A wide variety of fuzzing tools are available; some have a specific focus, such
    as web applications or hardware devices, and some are more general. OWASP’s fuzzing
    page (*[https://www.owasp.org/index.php/Fuzzing](https://www.owasp.org/index.php/Fuzzing)*)
    lists many current fuzzing tools and materials.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several common vulnerabilities, introduced during the software development process,
    can affect the security of your applications. You might encounter buffer overflows,
    race conditions, input validation attacks, authentication attacks, authorization
    attacks, and cryptographic attacks, just to name a few. Although such issues are
    common, you can resolve most of them with relative ease by following secure coding
    guidelines, either those internal to your organization or from external sources
    such as the National Institute of Standards and Technologies (NIST) or the United
    States Computer Emergency Readiness Team (US-CERT).
  prefs: []
  type: TYPE_NORMAL
- en: In terms of web security, you should look for client-side issues and server-side
    issues. Client-side issues involve attacks against the client software you’re
    running or the people using the software. You can help mitigate these by ensuring
    that you’re using the most current version of the software and any associated
    patches and sometimes by adding extra security tools or plug-ins. Server-side
    attacks are attacks directed against the web server itself. These attacks often
    take advantage of a lack of strict permissions, a lack of input validation, and
    the presence of leftover files from development or troubleshooting efforts. Fixing
    such issues requires scrutiny by both developers and security personnel.
  prefs: []
  type: TYPE_NORMAL
- en: Database security is a large concern for almost any internet-facing application.
    You should look out for protocol issues, unauthenticated access, arbitrary code
    execution, and privilege escalation. You can mitigate many of these problems by
    following secure coding practices, keeping up-to-date on your software versions
    and patches, and following the principle of least privilege.
  prefs: []
  type: TYPE_NORMAL
- en: Application security tools can help your applications resist attack. As with
    network and host security, you can put sniffers to use to examine the network
    data that enters and exits your applications. You can also use tools to examine
    how existing applications operate and determine what weaknesses they might have
    that a skilled attacker could exploit. In addition, fuzzing tools and web application
    analysis tools can locate vulnerabilities, whether known or unknown.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does a fuzzing tool do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give an example of a race condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it important to remove extraneous files from a web server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the tool Burp Suite do and in what situation might you use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the two main categories of web security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is a SQL injection attack an attack on the database or an attack on the web
    application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is input validation important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain a cross-site request forgery attack and what you might do to prevent
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How might you use a sniffer to increase the security of your applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you prevent buffer overflows in your applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
