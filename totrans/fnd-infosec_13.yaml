- en: '13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '13'
- en: APPLICATION SECURITY
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安全
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: In [Chapters 10](ch10.xhtml) and [11](ch11.xhtml), I discussed the importance
    of keeping your networks and operating systems secure. Part of keeping attackers
    from interacting with your networks and subverting your operating system security
    is ensuring the security of your applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.xhtml)和[第11章](ch11.xhtml)中，我讨论了确保网络和操作系统安全的重要性。防止攻击者与网络交互并颠覆操作系统安全的一部分工作就是确保应用程序的安全。
- en: In December 2013, the Target Corporation, a retailer operating more than 1,800
    stores throughout the United States, reported a breach of customer data that included
    40 million customer names, card numbers, card expiration dates, and card security
    codes.[¹](notes.xhtml#ch13fn1) A month later, Target announced that an additional
    70 million customers had had their personal data breached.[²](notes.xhtml#ch13fn2)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年12月，运营超过1800家门店的零售商Target公司报告称发生了客户数据泄露事件，涉及4000万个客户姓名、卡号、卡片到期日和卡片安全码。[¹](notes.xhtml#ch13fn1)
    一个月后，Target宣布额外有7000万个客户的个人数据遭到泄露。[²](notes.xhtml#ch13fn2)
- en: This breach didn’t originate in Target’s systems at all, but rather those of
    a vendor, Fazio Mechanical, that was connected to Target’s network. Experts believe
    the attack to have occurred as follows:[³](notes.xhtml#ch13fn3)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这次泄露事件并非源于Target系统，而是来自与Target网络相连接的一个供应商Fazio机械公司的系统。专家们认为攻击是这样发生的：[³](notes.xhtml#ch13fn3)
- en: Attackers compromised the systems of Fazio Mechanical with a trojan (a type
    of malware), using a phishing attack to get it in place.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者通过特洛伊木马（一种恶意软件）攻破了Fazio机械公司的系统，并利用网络钓鱼攻击将其植入。
- en: Because of poor network segmentation practices, the attackers were able to use
    Fazio’s access to Target’s network to gain access to other portions of the Target
    network.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于网络分段不当，攻击者能够利用Fazio公司对Target网络的访问权限，进一步访问Target网络的其他部分。
- en: Attackers installed the credit card harvesting BlackPOS malware on the Target
    point-of-sale (POS) systems (cash registers, basically) and used the malware to
    collect information from payment cards scanned by the POS.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者在Target的销售点（POS）系统（基本上是收银机）上安装了名为BlackPOS的信用卡收集恶意软件，并利用该恶意软件收集POS扫描到的支付卡信息。
- en: Attackers moved the collected credit card numbers to compromised File Transfer
    Protocol (FTP) servers on the Target network and then sent them outside of the
    company, where they eventually ended up on a server in Russia.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者将收集到的信用卡号码转移到Target网络上受损的文件传输协议（FTP）服务器，然后将其发送到公司外部，最终它们出现在俄罗斯的一个服务器上。
- en: Attackers then sold the stolen credit card and personal data on the black market.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者随后将窃取的信用卡和个人数据在黑市上出售。
- en: A variety of issues at several levels allowed this attack to take place. Any
    one of these missing or lapsed controls—the lack of network segmentation, the
    lack of anti-malware tools, and the lack of data loss prevention tools—could have
    prevented the attack from succeeding. In this chapter, you’ll look at application
    vulnerabilities introduced during software development, vulnerabilities commonly
    found in web applications, and vulnerabilities that affect the databases that
    applications use. I’ll also discuss tools you can use to protect your applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多个层面的问题促成了此次攻击的发生。任何一个缺失或失效的控制措施——如缺乏网络分段、缺乏反恶意软件工具、以及缺乏数据丢失防护工具——都可能阻止攻击的成功。在本章中，你将了解在软件开发过程中引入的应用程序漏洞、常见的Web应用程序漏洞以及影响应用程序使用的数据库漏洞。我还将讨论可以用来保护应用程序的工具。
- en: Software Development Vulnerabilities
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件开发漏洞
- en: Many common software development vulnerabilities can lead to security issues
    in your applications. These include buffer overflows, race conditions, input validation
    attacks, authentication attacks, authorization attacks, and cryptographic attacks,
    as shown in [Figure 13-1](#ch13fig1). I’ll go over each kind of vulnerability
    in this section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的软件开发漏洞可能导致应用程序中的安全问题。这些漏洞包括缓冲区溢出、竞态条件、输入验证攻击、身份验证攻击、授权攻击和加密攻击，如[图13-1](#ch13fig1)所示。我将在本节中逐一介绍每种漏洞。
- en: You can avoid all these vulnerabilities with relative ease when developing new
    software by simply not using the programming techniques that enable them to exist.
    The Computer Emergency Response Team at Carnegie Mellon University publishes a
    set of documentation that defines secure software development standards for several
    programming languages, and it’s a good overall resource for further investigation
    into secure coding in general.[⁴](notes.xhtml#ch13fn4)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地避免使用允许这些漏洞存在的编程技术，你可以在开发新软件时相对轻松地避免所有这些漏洞。卡内基梅隆大学的计算机应急响应小组发布了一套定义安全软件开发标准的文档，适用于几种编程语言，这是进一步研究安全编码的一个很好的资源。[⁴](notes.xhtml#ch13fn4)
- en: '![Image](../images/13fig01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig01.jpg)'
- en: '*Figure 13-1: Software development vulnerabilities*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-1：软件开发漏洞*'
- en: '*Buffer Overflows*'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*缓冲区溢出*'
- en: '*Buffer overflows*, or buffer overruns, occur when you don’t properly account
    for the size of the data input into your applications. If an application accepts
    data, most programming languages will require you to specify the amount of data
    you expect to receive and then set aside storage for that data. If you don’t set
    a limit on the amount of data you take in (a process called *bounds checking*),
    you may receive 1,000 characters of input when you had allocated storage for only
    50 characters.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*缓冲区溢出*，或称缓冲区超限，发生在你没有正确考虑输入到应用程序中的数据大小时。如果一个应用程序接收数据，大多数编程语言会要求你指定预期接收的数据量，并为这些数据预留存储空间。如果你没有限制接收的数据量（这个过程称为*边界检查*），那么你可能会接收到1,000个字符的输入，而你只为50个字符分配了存储空间。'
- en: In this case, the excess 950 characters of data may overwrite other areas in
    memory that are used by other applications or the operating system. Attackers
    might exploit this technique to tamper with other applications or cause the operating
    system to execute their own commands.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，多出的950个字符的数据可能会覆盖内存中其他区域，这些区域被其他应用程序或操作系统使用。攻击者可能会利用这种技术篡改其他应用程序或使操作系统执行他们自己的命令。
- en: Proper bounds checking can nullify this type of attack entirely. Some languages,
    such as Java and C#, implement bounds checking automatically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的边界检查可以完全消除这种类型的攻击。有些语言，如Java和C#，会自动执行边界检查。
- en: '*Race Conditions*'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*竞态条件*'
- en: Race conditions occur when multiple processes (or multiple threads within a
    process) control or share access to a resource and the correct handling of that
    resource depends on the proper ordering or timing of transactions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 竞态条件发生在多个进程（或同一进程中的多个线程）控制或共享资源访问时，而资源的正确处理依赖于事务的正确排序或时机。
- en: 'For example, if you’re making a $20 withdrawal from your bank account via an
    automatic teller machine (ATM), the process might go as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你通过自动柜员机（ATM）从银行账户取款20美元，过程可能如下：
- en: Check the account balance ($100).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查账户余额（$100）。
- en: Withdraw funds ($20).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取资金（$20）。
- en: Update the account balance ($80).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新账户余额（$80）。
- en: If someone else starts the same process at roughly the same time and tries to
    make a $30 withdrawal, you might end up with a bit of a problem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他人在大约相同的时间启动相同的过程，并试图进行30美元的取款，你可能会遇到一些问题。
- en: '| **User 1** | **User 2** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **用户 1** | **用户 2** |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Check the account balance ($100). | Check the account balance ($100). |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 检查账户余额（$100）。 | 检查账户余额（$100）。 |'
- en: '| Withdraw funds ($20). | Withdraw funds ($30). |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 提取资金（$20）。 | 提取资金（$30）。 |'
- en: '| Update the account balance ($80). | Update the account balance ($70). |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 更新账户余额（$80）。 | 更新账户余额（$70）。 |'
- en: Because two users share access to the resource, the account ends up recording
    a balance of $70 where you should see only $50\. The two users “race” to access
    the resource, and undesirable conditions occur. (Note that most actual banks implement
    measures to keep this from happening.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两个用户共享对资源的访问权限，账户最终记录了$70的余额，而你应该只看到$50。两个用户“竞速”访问资源，导致不良情况发生。（请注意，大多数实际银行会采取措施防止这种情况发生。）
- en: Race conditions can be difficult to detect in existing software, as they’re
    hard to reproduce. When you’re developing new applications, you can generally
    avoid these issues if you carefully handle the way users access resources to avoid
    dependencies on timing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 竞态条件在现有软件中可能很难检测到，因为它们很难重现。当你开发新应用程序时，只要小心处理用户访问资源的方式，避免依赖时序，你通常可以避免这些问题。
- en: '*Input Validation Attacks*'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*输入验证攻击*'
- en: If you’re not careful to *validate* the input to your applications—in other
    words, make sure any input that users submit, such as the answers to forms, arrives
    in an acceptable format—you might fall victim to problems such as a format string
    attack.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不小心*验证*应用程序的输入——换句话说，确保用户提交的任何输入（例如表单的答案）以可接受的格式到达——你可能会成为格式字符串攻击等问题的受害者。
- en: In *format string attacks*, attackers use certain print functions within a programming
    language that are meant to format the output but instead allow the attacker to
    manipulate or view an application’s internal memory. In some languages, such as
    C and C++, you can insert certain characters into the input, such as `%f`, `%n`,
    and `%p`, to apply formatting to the data you’re printing to the screen. Attackers
    could, for example, include the `%n` (write an integer into memory) parameter
    in a specially crafted input to write a value into a location in memory that they
    might not normally be able to access. They could use this technique to crash an
    application or cause the operating system to run a command, potentially compromising
    the system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*格式字符串攻击*中，攻击者利用编程语言中的某些打印函数，这些函数本意是格式化输出，但实际上允许攻击者操控或查看应用程序的内部内存。在某些语言中，如C和C++，你可以将特定字符插入到输入中，如`%f`、`%n`和`%p`，以对打印到屏幕的数据进行格式化。例如，攻击者可能会在精心构造的输入中包含`%n`（将整数写入内存）参数，以将一个值写入他们通常无法访问的内存位置。攻击者可以利用这种技术使应用程序崩溃，或者导致操作系统执行某个命令，从而可能危及系统安全。
- en: To solve this attack, you should validate your input by filtering it for unexpected
    or undesirable content. In the case of the format string attack, you may be able
    to remove the offending characters from the input, or you could put error handling
    in place to ensure that you anticipate and compensate for such issues so that
    they don’t cause a problem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这种攻击，你应该通过过滤输入内容中意外或不希望出现的内容来验证输入。在格式字符串攻击的情况下，你可以尝试从输入中移除有问题的字符，或者你也可以设置错误处理机制，确保预见并补偿此类问题，从而避免它们造成麻烦。
- en: '*Authentication Attacks*'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*身份验证攻击*'
- en: Authentication attacks are those that attempt to gain access to resources without
    the proper credentials to do so. Putting strong authentication mechanisms in place
    in your applications will help resist these kinds of attacks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证攻击是指试图在没有适当凭证的情况下访问资源的攻击行为。在你的应用程序中实施强大的身份验证机制将有助于抵御这种攻击。
- en: If you require users of applications to create strong passwords, you’ll help
    keep attackers out. If you use an eight-character, all-lowercase password, such
    as *hellobob*, a reasonably powerful machine may be able to break the password
    almost instantaneously. If you use a ten-character, mixed-case password that also
    includes numbers and a symbol, such as *H3lloBob!1*, the time needed to crack
    it increases to more than 20 years.[⁵](notes.xhtml#ch13fn5) Furthermore, your
    applications should not use passwords that are built-in and impossible to change
    (often called *hard-coded* passwords).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要求应用程序用户创建强密码，将有助于防止攻击者入侵。如果你使用一个包含八个字符、全部为小写的密码，比如*hellobob*，那么一个相对强大的机器几乎可以瞬间破解这个密码。如果你使用一个包含十个字符、大小写字母、数字和符号的密码，比如*H3lloBob!1*，那么破解它所需的时间将增加到超过20年。[⁵](notes.xhtml#ch13fn5)
    此外，你的应用程序不应使用那些内置且无法更改的密码（通常称为*硬编码*密码）。
- en: Additionally, you should avoid performing authentication on the client side
    (the end user’s machine), because you’d then place such measures where they may
    easily be attacked. As with most security measures, when you give attackers direct
    access to your controls to manipulate them as they please, you largely remove
    the effectiveness of the control.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应避免在客户端（即最终用户的机器）进行身份验证，因为这样会将身份验证措施置于容易受到攻击的位置。与大多数安全措施一样，当你让攻击者直接访问并随意操作你的控制机制时，你基本上就削弱了这些控制措施的有效性。
- en: If you depend on a local application or script to perform authentication steps
    and then simply send the “all clear” message to the server end, nothing prevents
    an attacker from repeating this message to your back end directly, without completing
    the authentication. Authentication efforts should always be placed as far out
    of reach of attackers as you can make them, and entirely on the server side, if
    possible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你依赖本地应用程序或脚本来执行身份验证步骤，然后仅仅将“通过”消息发送到服务器端，那么攻击者可以直接将此消息重复发送到你的后台，而无需完成身份验证。身份验证工作应尽可能远离攻击者的可接触范围，并且最好完全放在服务器端。
- en: '*Authorization Attacks*'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*授权攻击*'
- en: '*Authorization attacks* are attacks that attempt to gain access to resources
    without the appropriate authorization to do so. Like authentication mechanisms,
    placing authorization mechanisms on the client side is a bad idea. Any process
    performed in a space where it might be subject to direct attack or manipulation
    by users is almost guaranteed to be a security issue at some point. You should
    instead authenticate against a remote server or on the hardware of the device
    if the device is portable, which gives you considerably more control.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*授权攻击*是指试图在没有适当授权的情况下访问资源的攻击。与身份验证机制一样，将授权机制放置在客户端是一种不好的做法。任何在可能受到用户直接攻击或操控的环境中执行的过程，几乎可以确保在某些时候会成为安全问题。您应该改为在远程服务器上进行身份验证，或者如果设备是便携式的，则在设备硬件上进行身份验证，这样能给您更多的控制权。'
- en: When you’re authorizing a user for some activity, you should do so using the
    principle of least privilege, as discussed in [Chapter 3](ch03.xhtml). If you’re
    not careful to allow the minimum permissions required, both for your users and
    for your software, you may leave yourself open for attack and compromise.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为某项操作授权用户时，应遵循最小权限原则，如[第3章](ch03.xhtml)所讨论的那样。如果您没有小心地仅授予最低限度的权限，无论是对用户还是对软件，都可能使自己面临攻击和被攻破的风险。
- en: Additionally, whenever a user or process attempts an activity that requires
    privileges, you should always check again to ensure that the user is indeed authorized
    for the activity in question, each time it’s attempted. If you have a user who,
    whether by accident or by design, gains access to restricted portions of your
    application, you should have measures in place that stop the user from proceeding.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每当用户或进程尝试进行需要权限的操作时，您应该始终重新检查，以确保该用户确实有权进行该操作，每次尝试时都应如此。如果您的用户因意外或故意而访问了应用程序的受限部分，您应该采取措施防止用户继续操作。
- en: '*Cryptographic Attacks*'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*加密攻击*'
- en: Cryptography is easy to implement badly, and doing so can give you a false sense
    of security. One of the big mistakes when implementing cryptography in your applications
    is to develop your own cryptographic scheme. The major cryptographic algorithms
    in use today, such as Advanced Encryption Standard (AES) and Rivest-Shamir-Adleman
    (RSA), have been developed and tested by thousands of people who are very skilled
    and make their living developing such tools. Additionally, these algorithms are
    in general use because they have been able to stand the test of time without serious
    compromise. Although it’s possible that your homegrown algorithm may have some
    security benefit, you probably shouldn’t test it on software that stores or processes
    sensitive data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学很容易实现得不当，且如此会给您带来虚假的安全感。实现密码学时的一个大错误是开发自己独特的加密方案。目前使用的主要密码算法，如高级加密标准（AES）和里维斯-沙密尔-阿德尔曼（RSA），已经由成千上万的技术人员开发和测试，他们的生计就是开发这类工具。此外，这些算法之所以被广泛使用，是因为它们经得起时间的考验，并没有遭受严重的破解。虽然您自创的算法可能有一定的安全优势，但您可能不应将其用于存储或处理敏感数据的软件中。
- en: In addition to using known algorithms, you should plan for the possibility that
    the mechanisms you select will become obsolete or compromised in the future. This
    means you should design the software in such a way to support the use of different
    algorithms or at least design your applications in such a way that changing them
    is not a Herculean task. You should also make it possible to change the encryption
    keys the software uses, in case your keys break or become exposed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用已知的算法外，您还应考虑到所选机制可能在未来变得过时或遭到破坏。这意味着您应该以支持使用不同算法的方式来设计软件，或者至少设计应用程序时要确保更换算法不是一项艰巨的任务。您还应当使得更换软件所使用的加密密钥变得可能，以防您的密钥被破坏或暴露。
- en: Web Security
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络安全
- en: 'Attackers can use an enormous variety of techniques to target web applications
    and compromise your machines, steal sensitive information, and trick you into
    carrying out activities without your knowledge. You can separate these attacks
    into two main categories: client-side attacks and server-side attacks.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以使用多种技术来攻击网络应用程序，破坏您的机器、窃取敏感信息，并诱使您在不知情的情况下执行操作。您可以将这些攻击分为两大类：客户端攻击和服务器端攻击。
- en: '*Client-Side Attacks*'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*客户端攻击*'
- en: Client-side attacks either take advantage of weaknesses in the software loaded
    on the user’s clients or rely on social engineering to fool the user. There are
    many such attacks, but I’ll focus specifically on some that use the web as an
    attack vehicle.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端攻击要么利用加载到用户客户端上的软件中的弱点，要么依靠社会工程来欺骗用户。有很多这样的攻击，但我将特别关注一些使用网络作为攻击媒介的攻击。
- en: '*Cross-site scripting (XSS)* is an attack carried out by placing code written
    in a scripting language into a web page, or other media like Adobe Flash animation
    and some types of video files, that is displayed by a client browser. When other
    people view the web page or media, they execute the code automatically, and the
    attack is carried out.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨站脚本攻击 (XSS)* 是一种通过将用脚本语言编写的代码放入网页或其他媒体（如 Adobe Flash 动画和某些类型的视频文件）中进行的攻击，这些网页或其他媒体由客户端浏览器显示。当其他人查看网页或媒体时，他们会自动执行代码，从而执行攻击。'
- en: For example, the attacker might leave a comment containing the attack script
    in the comments section of an entry on a blog. People visiting the web page with
    their browsers would execute the attack.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，攻击者可能会在博客文章的评论区中留下包含攻击脚本的评论。访问该网页的人的浏览器会执行该攻击。
- en: Cross-site request forgery and clickjacking, two attacks mentioned in [Chapter
    3](ch03.xhtml), are also client-side attacks. In a cross-site request forgery
    attack, the attacker places a link, or links, on a web page in such a way that
    they’ll execute automatically. The link initiates an activity on another web page
    or application where the user is currently authenticated, such as adding items
    to their shopping cart on Amazon or transferring money from one bank account to
    another.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章](ch03.xhtml)中提到的跨站请求伪造和点击劫持也是客户端攻击。在跨站请求伪造攻击中，攻击者以某种方式在网页上放置一个或多个链接，使其自动执行。该链接在用户当前已通过身份验证的另一个网页或应用程序上启动一项活动，例如在亚马逊上将商品添加到他们的购物车或将钱从一个银行帐户转移到另一个银行帐户。'
- en: If you’re browsing several pages and are still authenticated to the page the
    attack is intended for, you might execute the attack in the background and never
    know it. For example, if you have several pages open in your browser, including
    one for *MySpiffyBank.com*, a common banking institution, and you’re still logged
    in to that page when you visit *BadGuyAttackSite.com*, the links on the attack
    page may automatically execute to get you to transfer money to another account.
    Although attackers most likely won’t know which websites a user is authenticated
    to, they can make educated guesses, such as banks or shopping sites, and include
    components to target those specifically.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在浏览多个页面并且仍然通过了攻击目标页面的身份验证，您可能会在后台执行攻击而永远不会知道。例如，如果您在浏览器中打开了多个页面，包括一个用于 *MySpiffyBank.com*（一家常见的银行机构）的页面，并且当您访问
    *BadGuyAttackSite.com* 时仍然登录到该页面，则攻击页面上的链接可能会自动执行以让您将钱转移到另一个帐户。虽然攻击者很可能不知道用户通过了哪些网站的身份验证，但他们可以做出有根据的猜测，例如银行或购物网站，并包含专门针对这些网站的组件。
- en: Clickjacking is an attack that takes advantage of your browser’s graphical display
    capabilities to trick you into clicking something you might not click otherwise.
    Clickjacking attacks work by placing another layer of graphics or text over the
    page, or portions of the page, to obscure what you’re clicking. For example, the
    attacker might hide a Buy Now button under another layer with a More Information
    button.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持是一种利用浏览器图形显示功能来诱骗您点击您可能不会点击的内容的攻击。点击劫持攻击通过在页面或页面的某些部分上放置另一层图形或文本来模糊您点击的内容。例如，攻击者可能会在带有“更多信息”按钮的另一层下隐藏“立即购买”按钮。
- en: These types of attacks are, for the most part, thwarted by the newer versions
    of common browsers, such as Internet Explorer, Firefox, Safari, and Chrome. The
    most common attacks discussed in this section will be blocked by these automatically,
    but in many cases, new attack vectors simply allow for new variations of old attacks.
    Additionally, many clients are running on outdated or unpatched software that
    remain vulnerable to attacks that are years old. Understanding how the common
    attacks work and protecting against them not only gives you an additional measure
    of security but also helps you understand how attackers develop newer attacks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的攻击大多数情况下已经被常见浏览器的新版所阻挡，比如Internet Explorer、Firefox、Safari和Chrome。本节讨论的最常见攻击将被这些浏览器自动阻挡，但在许多情况下，新攻击方式只会导致旧攻击的新变种。此外，许多客户端仍在运行过时或未打补丁的软件，容易受到多年前的攻击。了解常见攻击的工作原理并防范它们，不仅可以为你提供额外的安全保障，还能帮助你理解攻击者是如何开发出更新的攻击手段。
- en: It’s important to keep up with the most recent browser versions and updates,
    as the vendors that produce them regularly update their protections. Furthermore,
    some browsers let you apply additional tools to protect you from client-side attacks.
    One of the better known of these tools is NoScript (*[http://noscript.net/](http://noscript.net/)*)
    for Firefox. NoScript blocks most web page scripts by default and requires you
    to specifically enable those you’d like to run. When used carefully, script-blocking
    tools such as these can disable many of the web-based threats you’re likely to
    encounter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上最新的浏览器版本和更新非常重要，因为这些浏览器的供应商会定期更新其保护机制。此外，一些浏览器允许你应用额外的工具来保护自己免受客户端攻击。其中一个较为知名的工具是NoScript（*[http://noscript.net/](http://noscript.net/)）*，它是Firefox的一个插件。NoScript默认阻止大多数网页脚本，并要求你明确启用你希望运行的脚本。使用得当时，像这样的脚本阻止工具可以有效地防止许多你可能遇到的基于网页的威胁。
- en: '*Server-Side Attacks*'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*服务器端攻击*'
- en: Several vulnerabilities on the server side of web transactions may cause problems,
    as well. These threats and vulnerabilities can vary widely depending on your operating
    system, web server software and its versions, scripting languages, and many other
    factors. However, these vulnerabilities are typically caused by a few common factors.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端网页交易中的一些漏洞也可能导致问题。这些威胁和漏洞根据你的操作系统、web服务器软件及其版本、脚本语言以及其他多个因素有所不同。然而，这些漏洞通常由几个共同的原因引起。
- en: Lack of Input Validation
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 缺乏输入验证
- en: As discussed earlier in the chapter, software developers often neglect to properly
    validate user input, and some of the most common server-side web attacks use this
    weakness to carry out their attacks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所讨论的，软件开发人员常常忽视对用户输入的正确验证，而一些最常见的服务器端网页攻击正是利用这一弱点进行攻击。
- en: '*Directory traversal attacks* present a strong example of what might happen
    if you don’t validate input to your web applications. Attackers can use these
    attacks to gain access to the file system outside of the web server’s structure
    where content is stored by using the *../* character sequence, which moves up
    one level of a directory to change directories. For example, browsing to *https://www.vulnerablewebserver.com/../../../etc/passwd*
    on a vulnerable server would display the contents of the */etc/password* file.
    To break this down further, this URL asks the web server to move in the file system
    in this fashion:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*目录遍历攻击*强烈说明了如果你不验证输入到你的web应用程序中的内容，可能会发生什么。攻击者可以利用这些攻击访问web服务器结构外的文件系统，从而访问存储内容的地方，这通过使用*../*字符序列实现，该序列将目录提升一级，从而改变目录。例如，在一个易受攻击的服务器上，访问*https://www.vulnerablewebserver.com/../../../etc/passwd*将显示*/etc/password*文件的内容。进一步解释，这个URL请求web服务器按以下方式在文件系统中移动：'
- en: From */var/www/html* (where web content is normally stored)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*/var/www/html*（通常存储网页内容的地方）
- en: To */var/www*
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到*/var/www*
- en: Then to */var*
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后到*/var*
- en: Then to / (the root directory)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后到 /（根目录）
- en: Then back down to */etc*
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后回到*/etc*
- en: Then to display the contents of */etc/passwd*
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后显示*/etc/passwd*的内容
- en: If you’re careful to validate the input you accept into your web applications
    and filter out characters that might be used to compromise your security, you
    can often fend off such an attack before it even begins. In many cases, filtering
    out special characters, such as the ones described and *, %, ‘, ;, and / will
    defeat such attacks entirely.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你小心地验证输入并过滤掉可能被用于危害安全的字符，你通常可以在攻击开始之前就阻止这种攻击。在许多情况下，过滤掉特殊字符（例如上述提到的字符以及*、%、‘、；和/）将完全消除此类攻击。
- en: Improper or Inadequate Permissions
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 不当或不足的权限
- en: Assigning improper user permissions can often cause problems with web applications
    and internet-facing applications of most any kind. Web applications and pages
    often use sensitive files and directories that will cause security issues if they’re
    exposed to general users.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 指定不当的用户权限通常会导致 Web 应用程序和各种互联网面向的应用程序出现问题。Web 应用程序和页面通常使用敏感文件和目录，如果这些文件暴露给普通用户，将会导致安全问题。
- en: For example, one area that might cause trouble is the exposure of configuration
    files. Many web applications that make use of databases (which is a clear majority
    of applications) have *configuration files* that hold the credentials the application
    uses to access the database. If these files and the directories that hold them
    aren’t properly secured, attackers may simply read your credentials from the file
    and access the database as they please. For applications that hold sensitive data,
    this could be disastrous.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个可能导致问题的领域是配置文件的暴露。许多使用数据库的 Web 应用程序（这是绝大多数应用程序的情况）都有*配置文件*，这些文件保存了应用程序用于访问数据库的凭据。如果这些文件及其所在目录没有得到妥善保护，攻击者可能仅仅通过读取文件中的凭据就能访问数据库，任意操作数据。对于存储敏感数据的应用程序来说，这可能是灾难性的。
- en: Likewise, if you don’t take care to secure the directories on your web servers,
    you may find files changed in your applications, new files added, or the contents
    of some files deleted entirely. Insecure applications that are internet-facing
    don’t tend to last long before being compromised.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你没有注意保护 Web 服务器上的目录，可能会发现你的应用程序中的文件被更改、新文件被添加，或者某些文件的内容完全被删除。互联网面向的不安全应用程序通常不会持续太久，就会被攻破。
- en: Extraneous Files
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 多余的文件
- en: When a web server moves from development into production, developers often forget
    to clean up any files not directly related to running the site or application,
    or files that might be artifacts of the development or build process.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Web 服务器从开发阶段过渡到生产阶段时，开发人员常常忘记清理那些与运行网站或应用程序无直接关系的文件，或者是开发或构建过程中遗留下来的文件。
- en: If you leave archives of the source code from which your applications are built,
    backup copies of your files, text files containing your notes or credentials,
    or any such related files, you may be handing attackers exactly the materials
    they need to compromise your system. One of the final steps when rolling out a
    web server should be to make sure all such files are cleaned up or moved elsewhere
    if they’re still needed. This is also a good periodic check to ensure that, during
    troubleshooting or upgrading, these items haven’t been left behind where they’re
    visible to the public.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你留下了应用程序构建源代码的归档文件、文件的备份副本、包含你的笔记或凭据的文本文件，或者其他类似的相关文件，你可能正将攻击者需要的材料交给他们，从而使你的系统受到威胁。在部署
    Web 服务器时，最后一个步骤应该是确保所有此类文件都已清理或在不再需要时移走。这也是一个良好的定期检查，确保在故障排除或升级期间，这些文件没有被遗留在公共可见的地方。
- en: Database Security
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库安全
- en: Many websites and applications in use today rely on databases to store the information
    they display and process. In some cases, the database applications may hold very
    sensitive data, such as tax returns, medical information, or legal records, or
    they may contain only the contents of a knitting discussion forum. In either case,
    the data is important to the owners of the application, and they’d be inconvenienced
    if it were damaged or manipulated in an unauthorized manner.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许多今天正在使用的网站和应用程序依赖数据库来存储它们显示和处理的信息。在某些情况下，数据库应用程序可能保存非常敏感的数据，如税务报告、医疗信息或法律记录，或者它们可能仅仅包含一个编织讨论论坛的内容。无论是哪种情况，这些数据对应用程序的拥有者来说都非常重要，如果数据被损坏或以未经授权的方式篡改，拥有者会感到不便。
- en: Several issues can harm the security of your databases. The canonical list includes
    the following:[⁶](notes.xhtml#ch13fn6)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个问题可能会危害你的数据库安全。经典的列表包括以下内容：[⁶](notes.xhtml#ch13fn6)
- en: Unauthenticated flaws in network protocols
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络协议中的未认证漏洞
- en: Authenticated flaws in network protocols
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络协议中的认证漏洞
- en: Flaws in authentication protocols
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证协议中的漏洞
- en: Unauthenticated access to functionality
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未认证的功能访问
- en: Arbitrary code execution in intrinsic SQL elements
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内在 SQL 元素中的任意代码执行
- en: Arbitrary code execution in securable SQL elements
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可安全执行 SQL 元素中的任意代码
- en: Privilege escalation via SQL injection
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 SQL 注入进行的权限提升
- en: Local privilege escalation issues
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地权限提升问题
- en: Although this may seem like a horribly complex set of issues to worry about,
    you can break them down into four major categories, as shown in [Figure 13-2](#ch13fig2).
    I’ll cover each of these categories in detail in this section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些问题看起来可能非常复杂，但您可以将其分解为四个主要类别，如[图13-2](#ch13fig2)所示。在本节中，我将详细介绍每个类别。
- en: '![Image](../images/13fig02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/13fig02.jpg)'
- en: '*Figure 13-2: Categories of database vulnerabilities*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-2：数据库漏洞类别*'
- en: '*Protocol Issues*'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*协议问题*'
- en: Vulnerabilities might exist in the protocols used by any given database. This
    includes the network protocols used to communicate with the database. The vulnerabilities
    in these protocols often involve common software development issues, such as the
    buffer overflows discussed earlier in this chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 任何给定数据库所使用的协议可能存在漏洞。这包括用于与数据库通信的网络协议。这些协议中的漏洞通常涉及常见的软件开发问题，例如本章前面讨论的缓冲区溢出问题。
- en: To mitigate *known* protocol issues, you should use the most current software
    version and patches for the database software in question, as discussed in [Chapter
    11](ch11.xhtml). To protect your databases from *unknown* issues (issues that
    haven’t been discovered yet), you should limit access to your databases, either
    by limiting who is able to connect to the database over the network, by using
    some of the methods discussed in [Chapter 10](ch10.xhtml), or by limiting the
    privileges and accounts you make available for the database itself, following
    the principle of least privilege.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解*已知*的协议问题，您应使用数据库软件的最新版本和补丁，如[第11章](ch11.xhtml)所讨论的。为了保护您的数据库免受*未知*问题（尚未发现的问题）的影响，您应该限制对数据库的访问，无论是通过限制谁能够通过网络连接到数据库，使用[第10章](ch10.xhtml)中讨论的一些方法，还是通过限制为数据库本身提供的权限和帐户，遵循最小权限原则。
- en: You may also discover issues in the protocols used to authenticate to your database,
    depending on the specific software and version in use. In general, the older and
    more out-of-date your software becomes, the more likely it is that you’re using
    an authentication protocol that isn’t robust. Many older applications will use
    authentication protocols known to have been broken at some point or to have obvious
    architectural flaws, such as sending login credentials over the network in plaintext,
    which Telnet (a tool remotely accessing to a device) does. Again, the best defense
    here is to ensure that you’re using the most current versions of all software.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的特定软件和版本，您还可能发现用于认证数据库的协议存在问题。一般来说，您的软件变得越旧，使用的认证协议就越可能不可靠。许多旧版应用程序会使用已知在某些时候被破解或存在明显架构缺陷的认证协议，例如通过网络以明文形式发送登录凭据，Telnet（一个远程访问设备的工具）就是这样做的。再次强调，最好的防御方法是确保您使用的是所有软件的最新版本。
- en: '*Unauthenticated Access*'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*未认证访问*'
- en: When you give a user or process the opportunity to interact with your database
    without supplying a set of credentials, you create the possibility for security
    issues. For example, some simple queries to the database through a web interface
    might accidentally expose information contained in the database; or you might
    expose information about the database itself, such as a version number, giving
    an attacker additional material with which to compromise your application. You
    might also experience a wide variety of issues related to the secure software
    development practices discussed at the beginning of the chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您允许用户或进程与数据库进行交互而不提供一组凭据时，就可能会产生安全问题。例如，通过 Web 界面对数据库的一些简单查询可能会意外暴露数据库中的信息；或者您可能会暴露关于数据库本身的信息，例如版本号，这样攻击者就能获得额外的材料来破坏您的应用程序。您还可能会遇到与本章开始时讨论的安全软件开发实践相关的各种问题。
- en: If, instead, the user or process is forced to send a set of credentials to begin
    a transaction, the transaction can be monitored and appropriately restricted,
    based on those credentials. If you allow access to part of your application or
    toolset without requiring credentials, you may lose visibility and control over
    the actions taking place.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户或进程必须发送一组凭据来启动事务，那么该事务可以根据这些凭据进行监控和适当限制。如果您允许访问应用程序或工具集的某些部分而不要求凭据，您可能会失去对发生的操作的可视性和控制。
- en: '*Arbitrary Code Execution*'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*任意代码执行*'
- en: '*Arbitrary code execution* (also known as *remote code execution* when conducted
    over the network) is the ability for attackers to execute any commands on a system
    that they choose, without restriction. When it comes to database security, attackers
    are able to do this because of security flaws related to the languages you use
    to talk to databases. Structured Query Language (SQL) is the language used to
    communicate with many of the common databases currently on the market. It contains
    several built-in elements that can create these security risks, some of which
    you can limit the use of and some of which you can’t.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*任意代码执行*（当通过网络进行时也称为*远程代码执行*）是指攻击者可以在系统上执行任何他们选择的命令，且没有任何限制。在数据库安全性方面，攻击者能够做到这一点，是因为与数据库通信的语言存在安全漏洞。结构化查询语言（SQL）是目前市场上许多常见数据库所使用的语言。它包含了多个内置元素，这些元素可能会带来安全风险，其中一些可以限制使用，而一些则无法限制。'
- en: These language elements can help facilitate bugs in the software you’re using,
    or they can create issues if you use insecure coding practices, such as allowing
    attackers to execute arbitrary code within the application. For example, if the
    server was not appropriately and securely configured, anyone could read from and
    write to the file system of the server (with the `load_file` and `outfile` functions),
    a common ability in many database systems. Once you’re able to interface with
    the operating system itself, you have a foothold to conduct further attacks, steal
    data, and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语言元素可能会帮助软件中的漏洞暴露，或者如果你使用不安全的编码实践，也可能带来问题，比如允许攻击者在应用程序内执行任意代码。例如，如果服务器没有适当且安全地配置，任何人都可能从服务器的文件系统中读取或写入数据（使用`load_file`和`outfile`功能），这是许多数据库系统中常见的能力。一旦你能够与操作系统本身进行交互，就可以获得进一步攻击、窃取数据等的立足点。
- en: Your best defenses against such attacks are twofold. From the consumer side,
    you should use the current versions and patch levels of all software. From the
    vendor side, you should mandate secure coding practices, in all cases, to eliminate
    the vulnerabilities in the first place, as well as conduct internal reviews to
    ensure that such practices are being followed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这些攻击，你的最佳防御措施是双重的。从消费者方面来看，你应该使用所有软件的最新版本和补丁。从供应商方面来看，你应当要求在所有情况下都使用安全编码实践，以消除漏洞，并进行内部审查，确保这些实践得以遵守。
- en: '*Privilege Escalation*'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*权限提升*'
- en: The last kind of major database security issue is privilege escalation. *Privilege
    escalation attacks* are those that increase your level of access above what you’re
    authorized to have on the system or application. Privilege escalation is aimed
    at gaining administrative access to the software to carry out other attacks that
    need a high level of access.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一类主要的数据库安全问题是权限提升。*权限提升攻击*是指将你的访问权限提升到超出你在系统或应用程序中被授权的权限级别。权限提升的目的是获取软件的管理员权限，以进行需要高权限的其他攻击。
- en: You can often conduct privilege escalation through *SQL injection*, an attack
    in which input containing SQL commands is submitted to the application. For example,
    one of the more common SQL injection examples is to send the string `' or '1'='1`
    as the input in a username field for an application. If the application has not
    filtered the input properly, this string may cause it to automatically record
    that you’ve entered a legitimate username, because you have set up a condition
    that always evaluates to true, 1 = 1\. This allows you to potentially escalate
    your level of privilege.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常可以通过*SQL注入*进行权限提升，SQL注入是一种攻击方式，攻击者通过提交包含SQL命令的输入来攻击应用程序。例如，一个较为常见的SQL注入例子是，在应用程序的用户名字段中输入字符串`'
    or '1'='1`。如果应用程序没有正确过滤输入，这个字符串可能会导致它自动记录你输入了一个合法的用户名，因为你设置了一个始终为真的条件，1 = 1。这使得你可能提升自己的权限等级。
- en: Privilege escalation in your databases can also occur if you fail to properly
    secure your operating system. Database applications run on the operating system,
    using the credentials and privileges of an operating system user, just like a
    web browser or any other. If you’re not careful to protect your operating systems
    and the user accounts that run on them, as discussed in [Chapters 10](ch10.xhtml)
    and [11](ch11.xhtml), any database security measures you put in place might have
    no effect. If attackers gain access to the account under which the database software
    is running, they’ll likely have privileges to do anything they care to do, including
    deleting the database itself, changing passwords for any of the database users,
    changing the settings for the way the database functions, manipulating data, and
    so on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有正确保护操作系统，数据库中也可能会发生权限提升。数据库应用程序运行在操作系统上，使用操作系统用户的凭证和权限，就像 Web 浏览器或任何其他应用程序一样。如果你不小心保护操作系统及其运行的用户帐户，正如在[第
    10 章](ch10.xhtml)和[第 11 章](ch11.xhtml)中讨论的那样，你所设置的任何数据库安全措施可能都没有效果。如果攻击者获取了运行数据库软件的帐户，他们可能会拥有做任何他们想做的事情的权限，包括删除数据库本身、修改任何数据库用户的密码、更改数据库功能设置、操控数据等等。
- en: Your best defenses against operating system issues such as these are the set
    of hardening and mitigation steps discussed in [Chapter 11](ch11.xhtml). If you
    can keep attackers from compromising your system in the first place, you can largely
    avoid this concern.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于操作系统问题，最好的防御措施是[第 11 章](ch11.xhtml)中讨论的硬化和缓解步骤。如果你能防止攻击者首先侵入你的系统，你就能在很大程度上避免这些问题。
- en: Application Security Tools
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序安全工具
- en: You can use tools to assess and improve the security of your applications. I
    discussed some of them, such as sniffers, in [Chapters 10](ch10.xhtml) and [11](ch11.xhtml).
    Others are less familiar and more complex, such as fuzzers and reverse engineering
    tools. Some also require a certain amount of software development experience and
    familiarity with the technologies concerned to use effectively.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用工具评估和提高应用程序的安全性。我在[第 10 章](ch10.xhtml)和[第 11 章](ch11.xhtml)中讨论了其中一些工具，如嗅探器。其他一些工具则较为复杂，如模糊测试工具和逆向工程工具。某些工具还需要一定的软件开发经验和对相关技术的熟悉，才能有效使用。
- en: '*Sniffers*'
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*嗅探器*'
- en: You can use sniffers to watch the specific network traffic that is being exchanged
    with an application or protocol. In [Figure 13-3](#ch13fig3), I’m using Wireshark
    to examine Hypertext Transfer Protocol (HTTP) traffic specifically.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用嗅探器来观察与应用程序或协议交换的特定网络流量。在[图 13-3](#ch13fig3)中，我正在使用 Wireshark 来专门检查超文本传输协议（HTTP）流量。
- en: '![Image](../images/13fig03.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig03.jpg)'
- en: '*Figure 13-3: HTTP traffic in Wireshark*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-3：Wireshark 中的 HTTP 流量*'
- en: In some cases, you can also use tools specific to certain operating systems
    to get additional information from sniffing tools. A good example of this is Linux’s
    network monitoring tool EtherApe, which enables you to not only sniff the network
    traffic but also easily associate the traffic you see with network destinations
    or specific protocols, as shown in [Figure 13-4](#ch13fig4).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你还可以使用特定操作系统的工具，从嗅探工具中获取额外的信息。一个很好的例子是 Linux 的网络监控工具 EtherApe，它不仅能嗅探网络流量，还能轻松地将你看到的流量与网络目标或特定协议关联起来，如[图
    13-4](#ch13fig4)所示。
- en: '![Image](../images/13fig04.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig04.jpg)'
- en: '*Figure 13-4: EtherApe*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-4：EtherApe*'
- en: Often, graphical representations such as these allow you to parse data more
    intuitively and easily discern patterns of traffic that might otherwise go unnoticed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，像这样的图形化表示可以让你更直观地解析数据，轻松地辨别出可能被忽视的流量模式。
- en: '*Web Application Analysis Tools*'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*Web 应用分析工具*'
- en: A great number of tools exist for analyzing web pages or web-based applications,
    some of them commercial and some of them free. Most of these tools search for
    common flaws, such as XSS or SQL injection vulnerabilities, as well as improperly
    set permissions, extraneous files, outdated software versions, and many other
    security issues.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有大量的工具可以用来分析网页或基于 Web 的应用程序，其中一些是商业工具，另一些是免费的。大多数这些工具用于寻找常见的漏洞，如 XSS 或 SQL
    注入漏洞，错误设置的权限，冗余文件，过时的软件版本，以及其他许多安全问题。
- en: OWASP Zed Attack Proxy
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: OWASP Zed 攻击代理
- en: OWASP Zed Attack Proxy (ZAP), shown in [Figure 13-5](#ch13fig5), is a free and
    open source web server analysis tool that performs checks for many of the common
    vulnerabilities mentioned in this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP Zed Attack Proxy (ZAP)，如[图 13-5](#ch13fig5)所示，是一个免费且开源的 web 服务器分析工具，它会检查本章中提到的许多常见漏洞。
- en: '![Image](../images/13fig05.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig05.jpg)'
- en: '*Figure 13-5: ZAP*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-5：ZAP*'
- en: ZAP indexes all the files and directories it can see on the target web server,
    a process commonly referred to as *spidering*, and then locates and reports on
    any potential issues it finds.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP 会索引它能在目标 web 服务器上看到的所有文件和目录，这个过程通常被称为*蜘蛛爬行*，然后定位并报告它找到的任何潜在问题。
- en: '**TRUST BUT VERIFY**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**信任但验证**'
- en: It’s important to note, when using web analysis tools, that not everything the
    tool reports as a potential issue will be an actual security problem. These tools
    almost universally return a certain number of false positives, indicating a problem
    that doesn’t actually exist. It is important to manually verify that the issue
    really exists before acting to mitigate it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 web 分析工具时，重要的一点是并非工具报告的所有潜在问题都是实际的安全问题。这些工具几乎都会返回一定数量的假阳性，表示问题并不存在。手动验证问题是否真实存在是非常重要的，在采取措施进行缓解之前一定要确认问题的真实性。
- en: Burp Suite
  id: totrans-130
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Burp Suite
- en: You can also choose from quite a few commercial web analysis tools, which vary
    in price from several hundred dollars to many thousands of dollars. One such tool,
    Burp Suite (*[https://portswigger.net/burp/](https://portswigger.net/burp/)*),
    tends toward the lower end of the cost scale for the professional version ($399
    per year at the time of this writing) but still presents a solid set of features.
    Burp Suite runs in a GUI interface, as shown in [Figure 13-6](#ch13fig6), and,
    in addition to the standard set of features found in any web assessment product,
    it includes several more advanced tools for conducting more in-depth attacks.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以选择一些商业化的 web 分析工具，它们的价格从几百美元到几千美元不等。一个这样的工具是 Burp Suite (*[https://portswigger.net/burp/](https://portswigger.net/burp/)*)，它的专业版（本书撰写时为每年
    399 美元）倾向于价格较低，但仍然提供一整套功能。Burp Suite 运行在图形界面下，如[图 13-6](#ch13fig6)所示，除了任何 web
    评估产品中常见的标准功能外，它还包括一些更先进的工具，用于进行更深入的攻击。
- en: '![Image](../images/13fig06.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig06.jpg)'
- en: '*Figure 13-6: Burp Suite*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-6：Burp Suite*'
- en: Burp Suite is also available in a free community version that allows you to
    use the standard scanning and assessment tools but doesn’t include access to the
    more advanced features.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 也有一个免费的社区版本，允许你使用标准的扫描和评估工具，但不包括访问更高级功能的权限。
- en: '*Fuzzers*'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*模糊测试工具*'
- en: In addition to all the tools you can use to look over your software for various
    known vulnerabilities, there are tools that can help you find completely unexpected
    problems through a process referred to as *fuzz testing*. The tools used for this
    technique, called *fuzzers*, work by bombarding your applications with all manner
    of data and inputs from a wide variety of sources, in the hope that you can cause
    the application to fail or to perform some unexpected behavior.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有可以用来检查软件中已知漏洞的工具外，还有一些工具可以通过一个叫做*模糊测试*的过程帮助你发现完全意想不到的问题。用于这种技术的工具被称为*模糊测试工具*，它们通过用各种数据和输入从不同来源攻击你的应用程序，希望能够导致应用程序崩溃或出现一些意外的行为。
- en: The concept of fuzzing was first developed by Barton Miller for a graduate-level
    university operating system class in the late 1980s,[⁷](notes.xhtml#ch13fn7) and
    it’s become popular among security researchers and those conducting security assessments
    on applications. Miller’s fuzzing web page at the University of Wisconsin is a
    great resource for further reading on fuzzing, and it includes the document that
    spawned this field of analysis. You can find it at *[http://pages.cs.wisc.edu/~bart/fuzz/](http://pages.cs.wisc.edu/~bart/fuzz/)*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试的概念最初由 Barton Miller 在 1980 年代末为一门研究生级别的操作系统课程开发，[⁷](notes.xhtml#ch13fn7)，并且它已经在安全研究人员和进行应用程序安全评估的人群中变得非常流行。Miller
    在威斯康星大学的模糊测试网页是进一步阅读模糊测试的一个很好的资源，并且其中包括了激发这一分析领域的文献。你可以在 *[http://pages.cs.wisc.edu/~bart/fuzz/](http://pages.cs.wisc.edu/~bart/fuzz/)*
    找到它。
- en: A wide variety of fuzzing tools are available; some have a specific focus, such
    as web applications or hardware devices, and some are more general. OWASP’s fuzzing
    page (*[https://www.owasp.org/index.php/Fuzzing](https://www.owasp.org/index.php/Fuzzing)*)
    lists many current fuzzing tools and materials.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的模糊测试工具可用；一些具有特定焦点，例如 Web 应用程序或硬件设备，而其他一些则更为通用。OWASP 的模糊测试页面（*[https://www.owasp.org/index.php/Fuzzing](https://www.owasp.org/index.php/Fuzzing)*）列出了许多当前的模糊测试工具和资料。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Several common vulnerabilities, introduced during the software development process,
    can affect the security of your applications. You might encounter buffer overflows,
    race conditions, input validation attacks, authentication attacks, authorization
    attacks, and cryptographic attacks, just to name a few. Although such issues are
    common, you can resolve most of them with relative ease by following secure coding
    guidelines, either those internal to your organization or from external sources
    such as the National Institute of Standards and Technologies (NIST) or the United
    States Computer Emergency Readiness Team (US-CERT).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发过程中引入的几种常见漏洞可能会影响您的应用程序的安全性。您可能会遇到缓冲区溢出、竞争条件、输入验证攻击、身份验证攻击、授权攻击和密码学攻击等问题，仅举几例。尽管这些问题很常见，但通过遵循安全编码准则（无论是组织内部的还是来自国家标准与技术研究所（NIST）或美国计算机应急响应团队（US-CERT）等外部来源的），您可以相对轻松地解决大部分问题。
- en: In terms of web security, you should look for client-side issues and server-side
    issues. Client-side issues involve attacks against the client software you’re
    running or the people using the software. You can help mitigate these by ensuring
    that you’re using the most current version of the software and any associated
    patches and sometimes by adding extra security tools or plug-ins. Server-side
    attacks are attacks directed against the web server itself. These attacks often
    take advantage of a lack of strict permissions, a lack of input validation, and
    the presence of leftover files from development or troubleshooting efforts. Fixing
    such issues requires scrutiny by both developers and security personnel.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络安全方面，您应该关注客户端问题和服务器端问题。客户端问题涉及针对您运行的客户端软件或使用软件的人的攻击。您可以通过确保使用最新版本的软件及其相关补丁，有时添加额外的安全工具或插件来帮助减轻这些问题。服务器端攻击则是针对
    Web 服务器本身的攻击。这些攻击通常利用权限不严格、输入验证不足以及开发或故障排除过程中遗留文件的存在。修复这些问题需要开发人员和安全人员的审慎处理。
- en: Database security is a large concern for almost any internet-facing application.
    You should look out for protocol issues, unauthenticated access, arbitrary code
    execution, and privilege escalation. You can mitigate many of these problems by
    following secure coding practices, keeping up-to-date on your software versions
    and patches, and following the principle of least privilege.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几乎任何面向互联网的应用程序，数据库安全都是一个大问题。您应该注意协议问题、未经身份验证的访问、任意代码执行和权限提升等问题。通过遵循安全编码实践、保持软件版本和补丁的最新状态，并遵循最小权限原则，您可以减轻许多这些问题。
- en: Application security tools can help your applications resist attack. As with
    network and host security, you can put sniffers to use to examine the network
    data that enters and exits your applications. You can also use tools to examine
    how existing applications operate and determine what weaknesses they might have
    that a skilled attacker could exploit. In addition, fuzzing tools and web application
    analysis tools can locate vulnerabilities, whether known or unknown.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安全工具可以帮助您的应用程序抵御攻击。与网络和主机安全一样，您可以使用嗅探器来检查进出应用程序的网络数据。您还可以使用工具来检查现有应用程序的操作方式，并确定攻击者可能利用的弱点。此外，模糊测试工具和
    Web 应用程序分析工具可以发现已知或未知的漏洞。
- en: Exercises
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: What does a fuzzing tool do?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模糊测试工具的作用是什么？
- en: Give an example of a race condition.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 举一个竞争条件的例子。
- en: Why is it important to remove extraneous files from a web server?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么从 Web 服务器中删除多余的文件很重要？
- en: What does the tool Burp Suite do and in what situation might you use it?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp Suite 工具的作用是什么？在什么情况下可能会使用它？
- en: Name the two main categories of web security.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络安全的两大主要类别是什么？
- en: Is a SQL injection attack an attack on the database or an attack on the web
    application?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL 注入攻击是针对数据库还是针对 Web 应用程序的攻击？
- en: Why is input validation important?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入验证为什么重要？
- en: Explain a cross-site request forgery attack and what you might do to prevent
    it.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释一次跨站请求伪造（CSRF）攻击及可能采取的预防措施。
- en: How might you use a sniffer to increase the security of your applications?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用嗅探器来提高你的应用程序安全性？
- en: How can you prevent buffer overflows in your applications?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在你的应用程序中防止缓冲区溢出？
