- en: '![](Images/chapterart.png)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
- en: '3'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sorting Animal Pictures
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-W](Images/Alphabet-W.png)e all love pictures. We take over a trillion
    digital photos every year, and that doesn’t even include other types of pictures
    that we make, like drawings and paintings.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Using computers to sort pictures and help us find the ones we need is called
    *image recognition**. To create an image recognition system, we collect lots of
    pictures of the same subject. Then we use those pictures to train an ML *model*,
    which identifies what those pictures have in common and uses that to recognize
    new pictures.*
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '*For example, if we want to train a computer to recognize photos of kittens,
    we collect lots of photos of kittens. ML systems use these photos to learn the
    shapes, patterns, and colors that often show up in kitten photos. The model can
    then recognize whether a photo has a kitten in it.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: People use image recognition every day. Online photo-sharing tools use it to
    help sort the photos that we upload. Websites use it to describe the contents
    of photos to help people with visual disabilities know what’s in photos even if
    they can’t see them. Social media websites use it to recognize the faces of our
    friends and family in the photos we post. Companies use it to track when their
    logos or products are included in photos posted online so they know when they’re
    being talked about on social media. More importantly, doctors use it to help them
    recognize medical conditions in patients’ scans and photos. Doctors need to remember
    many different symptoms and signs of illness, so image recognition systems can
    help them by identifying things like skin tumors in photographs or cancer in a
    microscopic picture of a cell.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll make your own image recognition system by training an
    ML model to recognize and automatically sort photos of animals. Let’s get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, choose two types of animals that you want the computer to recognize.
    For this chapter, I chose cows and sheep to make a farm-themed Scratch project
    (see [Figure 3-1](#figure3-1)). You can choose any two animals you’d like, as
    long as you can easily find lots of photos of them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![f03001](Images/f03001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: '[Figure 3-1:](#figureanchor3-1) Sorting photos of animals into groups'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train the computer to recognize different pictures of your two animals, you’ll
    need to collect lots of images of those animals and use them to train an ML model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Create a new ML project, enter `Animal sorter` as its name, and set it to learn
    to recognize images.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 3-2](#figure3-2).![f03002](Images/f03002.png)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-2:](#figureanchor3-2) Train is the first phase of an ML project.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label** (see [Figure 3-3](#figure3-3)). Then enter the name
    of your first type of animal.![f03003](Images/f03003.png)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-3:](#figureanchor3-3) Click **Add new label** to create a new bucket
    of training examples.'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a second window in your web browser (usually by selecting **File**▶**New
    Window**) and arrange your two windows side by side, as shown in [Figure 3-4](#figure3-4).
    In the second window, search for photos of the first type of animal. In my case,
    I’ve searched for photos of cows.![f03004](Images/f03004.png)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-4:](#figureanchor3-4) Arrange your two web browser windows side by
    side.'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag a photo from the search window and drop it into the training bucket for
    your first type of animal. You should see a thumbnail version of the photo in
    your training bucket, as shown in [Figure 3-5](#figure3-5). If you don’t see it,
    try dragging and dropping the photo again.![f03005](Images/f03005.png)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-5:](#figureanchor3-5) Dropping photos of cows into my training bucket'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat step 5 until you have at least 10 different photos of that animal, as
    shown in [Figure 3-6](#figure3-6).![f03006](Images/f03006.png)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-6:](#figureanchor3-6) My training data for recognizing photos of
    cows'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat steps 3 through 6 until you have at least 10 different photos for each
    type of animal, as shown in [Figure 3-7](#figure3-7).![f03007](Images/f03007.png)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-7:](#figureanchor3-7) Training data for my farm-themed project'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Learn & Test** (see [Figure 3-8](#figure3-8)).![f03008](Images/f03008.png)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-8:](#figureanchor3-8) Learn & Test is the second phase of an ML project.'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train new machine learning model** (see [Figure 3-9](#figure3-9)).![f03009](Images/f03009.png)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-9:](#figureanchor3-9) Click **Train new machine learning model**
    to start the training.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The computer will use the examples you’ve collected to learn what the photos
    of each animal have in common. This can take a few minutes, but you can continue
    to the next step in your second web browser window while you wait.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Prepare Your Project
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test your ML model, you’ll need some new photos that you haven’t used for
    training. The computer will use what it learns from your training examples to
    try to recognize your two animals in these new photos. Then you’ll build a project
    in Scratch that tests how well your model performs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Search for more photos of the animals you’ve chosen, and save them to your computer.
    To save a photo, right-click it and select **Save Picture** or **Save Image As**,
    as shown in [Figure 3-10](#figure3-10).![f03010](Images/f03010.png)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-10:](#figureanchor3-10) Saving test photos to the computer'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Aim for at least five test photos of each type of animal that you chose, as
    shown in [Figure 3-11](#figure3-11).![f03011](Images/f03011.png)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-11:](#figureanchor3-11) My folder for cow and sheep test photos'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make** (see [Figure 3-12](#figure3-12)).![f03012](Images/f03012.png)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-12:](#figureanchor3-12) Make is the third phase of an ML project.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Scratch 3**, and then click **Open in Scratch 3** to open a new window
    with Scratch.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see new blocks representing your ML model in the Toolbox, as shown
    in [Figure 3-13](#figure3-13).
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f03013](Images/f03013.png)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 3-13:](#figureanchor3-13) New blocks for your ML project will automatically
    be added to the Scratch Toolbox.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a backdrop for your project.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom-right corner of the Scratch window, move your mouse pointer over
    the Choose a Backdrop icon, shown in [Figure 3-14](#figure3-14).
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f03014](Images/f03014.png)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 3-14:](#figureanchor3-14) My farm background for sorting cows and sheep
    into two groups'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have a few options here. If you don’t like drawing, you can click **Choose
    a Backdrop** to pick a default background, or click **Upload Backdrop** to use
    a picture from the internet. To design your own background for your animals, click
    **Paint** and use the drawing and coloring tools in the *paint editor* to the
    left of the Code canvas.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: No matter which option you choose, be sure to add clearly labeled sections to
    your backdrop for each type of animal.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: I chose farm animals, so I drew a farm scene with signs labeled Cows and Sheep.
    You can draw something that fits with the animals you chose. For example, if you
    chose dogs and cats, you could draw a pet shop. If you chose lions and elephants,
    you could draw a zoo.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Click the cat sprite, and then in the bottom-left corner of the screen, move
    your mouse pointer over the Choose a Costume icon. Click **Upload Costume**, as
    shown in [Figure 3-15](#figure3-15).*'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**   Select all of the test photos you saved in step 2 to upload all of them
    at once.![f03015](Images/f03015.png)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-15:](#figureanchor3-15) Click **Upload Costume** to add your test
    photos. You can delete the cat costumes from the costume pane on the left.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you missed any of your test photos, click **Upload Costume** again and repeat
    until you’ve uploaded all of the test photos from step 2\.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We won’t need the Scratch cat costumes, so you can delete them. In the *costume
    pane* on the far left (see [Figure 3-15](#figure3-15)), click the costume and
    then click the trash can in its top-right corner to delete it.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that you upload costumes for the same single sprite, as shown in [Figure
    3-16](#figure3-16). Don’t upload each photo as a new sprite.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f03016](Images/f03016.png)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 3-16:](#figureanchor3-16) Upload additional costumes to the *same*
    sprite.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Code** tab and copy the scripts shown in [Figure 3-17](#figure3-17).![f03017](Images/f03017.png)
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 3-17:](#figureanchor3-17) Example code for sorting photos of animals*'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*This code will go through each of your test photo costumes and use your ML
    model to recognize the animal and move it to the correct section.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The `go to x: 10 y: -145` block 1 sets the starting position for each photo.
    This script will start each photo at the bottom middle of the screen. Adjust these
    coordinates to a starting position that fits with your backdrop.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `recognise image` block 2 uses your ML model to recognize the photo.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `glide to x: pick random -200 to -50 y: pick random 50 to 150` block 3
    moves the photo to a random position in the top left of the screen. Adjust these
    coordinates to the location on your backdrop where you want the photos of your
    first type of animal to go.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`The glide to x: pick random 70 to 210 y: pick random 50 to 150` block 4 moves
    the photo to a random position in the top right of the screen. Adjust these coordinates
    to the location on your backdrop where you want the photos of your second type
    of animal to go.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The number in `if my variable is < 14`5 refers to how many test photos you have.
    Set this value to the number of test costumes you saved in step 2 and uploaded
    in step 8\. I have 14 costumes in my test sprite, so my script goes through 14
    test photos.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Your Model
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test the model you’ve created, click the Green Flag in the top-left corner,
    as shown in [Figure 3-18](#figure3-18). Your model will sort your test photos
    into two groups of animals.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Count how many photos your model moves to the correct side. That’s a simple
    way to measure how good your project is at sorting photos of your two animals.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![f03018](Images/f03018.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: '[Figure 3-18:](#figureanchor3-18) Recognizing photos and sorting them into
    groups'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: If your model is getting a lot wrong, you can try to improve it using more training
    examples. Go back to the Train phase and drag in more photos of each of your animals.
    Then go back to the Learn & Test phase and train the new, improved ML model. Run
    your Scratch script again to see if the new model sorts more of your test photos
    correctly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve successfully trained an ML model to recognize photos of animals! This
    project isn’t based on rules. You haven’t described how different animals look
    or given the computer specific instructions on how to recognize them. Instead,
    you’ve used ML to train the computer to do it. This approach is known as *supervised
    learning* *because you supervised the process by preparing sets of training examples
    for the computer to use.*
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '*As long as your test photos are similar to your training photos, your model
    should work. However, if you test your model with pictures that differ somehow
    from your training photos, you’ll probably get different results.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: For example, I tried replacing the costumes in my Scratch project with cartoon
    illustrations of cows and sheep instead of photographs. Then I ran my code again
    by clicking the Green Flag. As you can see in [Figure 3-19](#figure3-19), my new
    model got a lot wrong.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![f03019](Images/f03019.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: '[Figure 3-19:](#figureanchor3-19) ML models get a lot wrong if the test inputs
    aren’t similar to the training inputs.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: I got these results because the patterns my model learned to recognize from
    the training photos weren’t useful to help it recognize cartoon drawings. If you
    want a computer to be able to recognize photographs *and* cartoons, you need to
    train it with both.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到这些结果是因为我的模型从训练照片中学到的模式对帮助它识别卡通画没有用。如果你希望计算机能够识别照片*和*卡通画，你需要同时用这两者来训练它。
- en: Go back to the Train phase and create a new set of training examples that includes
    both photographs and cartoons, as shown in [Figure 3-20](#figure3-20). I collected
    10 example photos and 10 example cartoons in each bucket.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到训练阶段，并创建一个新的训练示例集，其中包括照片和卡通画，如[图3-20](#figure3-20)所示。我在每个桶中收集了10张照片和10张卡通画示例。
- en: '![f03020](Images/f03020.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![f03020](Images/f03020.png)'
- en: '[Figure 3-20:](#figureanchor3-20) Training a computer to recognize both photos
    and cartoons'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-20:](#figureanchor3-20) 训练计算机识别照片和卡通画'
- en: Then go back to the Learn & Test phase and train a new ML model using your new
    set of training examples. This new set should teach the computer to identify patterns
    in photographs and cartoons so it can recognize both. [Figure 3-21](#figure3-21)
    shows how much better my updated ML model performed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后返回到学习与测试阶段，使用你的新训练示例集训练一个新的机器学习模型。这个新示例集应该教会计算机识别照片和卡通画中的模式，这样它就能同时识别两者。[图3-21](#figure3-21)展示了我的更新版机器学习模型的表现有多么出色。
- en: '![f03021](Images/f03021.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![f03021](Images/f03021.png)'
- en: '[Figure 3-21:](#figureanchor3-21) Testing with a mixture of photographs and
    drawings'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-21:](#figureanchor3-21) 用混合照片和画作进行测试'
- en: As you can see, the more similar the test images are to the training images
    that the computer learns from, the better ML models perform.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，测试图像越接近计算机从中学习的训练图像，机器学习模型的表现就越好。
- en: What other changes could you make to improve your model?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你还能做什么其他改进来提升你的模型？
- en: What You Learned
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, you used ML to create an image recognition system capable of
    recognizing and sorting pictures of animals. You learned some of the key principles
    in ML projects, such as improving your results by increasing the number of training
    images and making sure they’re similar to the images you want the computer to
    recognize.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你使用机器学习（ML）创建了一个图像识别系统，能够识别并分类动物图片。你学到了一些机器学习项目中的关键原则，比如通过增加训练图像数量来改进结果，并确保这些图像与计算机需要识别的图像相似。
- en: You also learned that we can measure how well an image recognition system performs
    by trying it out with test pictures and counting how many it identifies correctly.
    You tried this yourself by creating a project in Scratch to test how well your
    ML model sorted a group of animal photos.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学到了如何通过用测试图片测试图像识别系统来衡量它的表现，看看它能正确识别多少张。你亲自尝试过，通过在Scratch中创建一个项目来测试你的机器学习模型如何分类一组动物照片。
- en: In the next chapter, you’ll train another image recognition system and use it
    to make a game. You’ll also learn about some of the ways that ML projects can
    go wrong.***
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将训练另一个图像识别系统，并用它制作一个游戏。你还将了解机器学习项目可能出错的一些方式。***
