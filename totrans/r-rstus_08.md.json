["```\n---\ntitle: Penguins Report\nauthor: David Keyes\ndate: 2024-01-12\noutput: word_document\n--- \n```", "```\n# Import our data\ndata <- read_csv(\"data.csv\") \n```", "```), followed by the lowercase letter r surrounded by curly brackets ({}). Another three backticks indicate the end of the code chunk:\n\n```", "```{r}\nlibrary(tidyverse)\n```", "```\n\nIf you’re working in RStudio, code chunks should have a light gray background.\n\nR Markdown treats anything in the code chunk as R code when you knit. For example, this code chunk will produce a histogram in the final Word document:\n\n```", "```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```", "```\n\n[Figure 6-3](chapter6.xhtml#fig6-3) shows the resulting histogram.\n\n![](../images/fig6-3.jpg)\n\nFigure 6-3: A simple histogram generated by an R Markdown code chunk\n\nA code chunk at the top of each R Markdown document, known as the *setup code chunk*, gives instructions for what should happen when knitting a document. It contains the following options:\n\necho Do you want to show the code itself in the knitted document?\n\ninclude Do you want to show the output of the code chunk?\n\nmessage Do you want to include any messages that code might generate? For example, this message shows up when you run library(tidyverse):\n\n```", "```\n\nwarning Do you want to include any messages that the code might generate? For example, here’s the message you get when creating a histogram using geom_histogram():\n\n```", "```\n\n> NOTE\n\n*To see the full list of code chunk options, visit* [https://yihui.org/knitr/options/](https://yihui.org/knitr/options/)*.*\n\nIn cases where you’re using R Markdown to generate a report for a non-R user, you likely would want to hide the code, messages, and warnings but show the output (which would include any visualizations you generate). The following setup code chunk does this:\n\n```", "```{r setup, include = FALSE}\nknitr::opts_chunk$set(include = TRUE,\n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n```", "```\n\nThe include = FALSE option on the first line applies to the setup code chunk itself. It tells R Markdown not to include the output of the setup code chunk when knitting. The options within knitr::opts_chunk$set() apply to all future code chunks. However, you can also override these global code chunk options on individual chunks. If you wanted your Word document to show both the plot itself and the code used to make it, for example, you could set echo = TRUE for that code chunk only:\n\n```", "```{r echo = TRUE}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```", "```\n\nBecause include is already set to TRUE within knitr::opts_chunk$set() in the setup code chunk, you don’t need to specify it again.\n\n#### Markdown Text\n\nMarkdown is a way to style text. If you were writing directly in Word, you could just press the B button to make text bold, for example, but R doesn’t have such a button. If you want your knitted Word document to include bold text, you need to use Markdown to indicate this style in the document.\n\nMarkdown text sections (which have a white background in RStudio) will be converted into formatted text in the Word document after knitting. [Figure 6-4](chapter6.xhtml#fig6-4) highlights the equivalent sections in the R Markdown and Word documents.\n\n![](../images/fig6-4.jpg)\n\nFigure 6-4: Markdown text in R Markdown and its equivalent in a knitted Word document\n\nThe text # Introduction in R Markdown gets converted to a first-level heading, while ## Bill Length becomes a second-level heading. By adding hashes, you can create up to six levels of headings. In RStudio, headings are easy to find because they show up in blue.\n\nText without anything before it becomes body text in Word. To create italic text, add single asterisks around it (*like this*). To make text bold, use double asterisks (**as shown here**).\n\nYou can make bulleted lists by placing a dash at the beginning of a line and adding your text after it:\n\n```", "```\n\nTo make ordered lists, replace the dashes with numbers. You can either number each line consecutively or, as done below, repeat 1. In the knitted document, the proper numbers will automatically generate.\n\n```", "```\n\nFormatting text in Markdown might seem more complicated than doing so in Word. But if you want to switch from a multi-tool workflow to a reproducible R Markdown–based workflow, you need to remove all manual actions from the process so that you can easily repeat it in the future.\n\n#### Inline R Code\n\nR Markdown documents can also include little bits of code within Markdown text. To see how this inline code works, take a look at the following sentence in the R Markdown document:\n\n```", "```\n\nInline R code begins with a backtick and the lowercase letter r and ends with another backtick. In this example, the code tells R to print the value of the variable average_bill_length, which is defined as follows in the code chunk before the inline code:\n\n```", "```{r}\naverage_bill_length <- penguins %>%\n  summarize(avg_bill_length = mean(\n    bill_length_mm,\n    na.rm = TRUE\n  )) %>%\n  pull(avg_bill_length)\n```", "```\n\nThis code calculates the average bill length and saves it as average_bill_length. Having created this variable, you can now use it in the inline code. As a result, the Word document includes the sentence “The average bill length is 43.9219298.”\n\nOne benefit of using inline R code is that you avoid having to copy and paste values, which is error-prone. Inline R code also makes it possible to automatically calculate values on the fly whenever you reknit the R Markdown document with new data. To see how this works, you’ll make a new report using data from 2008\\. To do this, you need to change only one line, the one that reads the data:\n\n```", "```\n\nNow that you’ve switched *penguins-2007.csv* to *penguins-2008.csv*, you can reknit the report and produce a new Word document, complete with updated results. [Figure 6-5](chapter6.xhtml#fig6-5) shows the new document.\n\n![](../images/fig6-5.jpg)\n\nFigure 6-5: The knitted Word document with 2008 data\n\nThe new histogram is based on the 2008 data, as is the average bill length of 43.5412281\\. These values update automatically because every time you press Knit, the code is rerun, regenerating plots and recalculating values. As long as the data you use has a consistent structure, updating a report requires just a click of the Knit button.\n\n### Running Code Chunks Interactively\n\nYou can run the code in an R Markdown document in two ways. The first is by knitting the entire document. The second is to run code chunks manually (also known as *interactively*) by pressing the green play button at the top right of a code chunk. The down arrow next to the green play button will run all code until that point. You can see these buttons in [Figure 6-6](chapter6.xhtml#fig6-6).\n\n![](../images/fig6-6.jpg)\n\nFigure 6-6: The buttons on code chunks in RStudio\n\nYou can also use COMMAND-ENTER on macOS or CTRL-ENTER on Windows to run sections of code, as in an R script file. Running code interactively is a good way to test that portions of it work before you knit the entire document.\n\nThe one downside to running code interactively is that you can sometimes make mistakes that cause your R Markdown document to fail to knit. That is because, in order to knit, an R Markdown document must contain all the code it uses. If you’re working interactively and, say, load data from a separate file, you won’t be able to knit your document. When working in R Markdown, always keep all your code within a single document.\n\nThe code must also appear in the right order. An R Markdown document that looks like this, for example, will give you an error if you try to knit it:\n\n```", "```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  include = TRUE,\n  echo = FALSE,\n  message = FALSE,\n  warning = FALSE\n)\n```", "```{r}\npenguins <- read_csv(\"https://data.rfortherestofus.com/penguins-2008.csv\")\n```", "```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```", "```{r}\nlibrary(tidyverse)\n```"]