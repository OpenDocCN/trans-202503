- en: <samp class="SANS_Dogma_OT_Bold_B_11">INTRODUCTION</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">简介</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: According to the C# Language Specification, “C# is intended to be a simple,
    modern, general-purpose, object-oriented programming language.” C# may look simple
    on the surface, but it has hidden depths even in its most fundamental features.
    The type system is a central element of C# and is the foundation upon which all
    C# programs are built. This has been true from the earliest versions of C#, and
    will continue to be relevant as the language evolves. *The C# Type System* isn’t
    a gallery of the latest language features, and we won’t delve into every detail
    of the latest edition, because C# is constantly advancing; instead we’ll focus
    on the language’s rich support for creating your own types and examine how best
    to employ the type system to improve your designs and write clearer, simpler,
    more efficient programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据《C#语言规范》，“C#旨在成为一种简单、现代、通用、面向对象的编程语言。” C#表面上看起来简单，但即使在其最基本的特性中也隐藏着深度。类型系统是C#的核心元素，是所有C#程序构建的基础。从C#的早期版本开始，这一点就一直成立，并且随着语言的发展，这一特性仍然适用。*C#类型系统*
    不是一个展示最新语言特性的画廊，我们也不会深入探讨最新版本的每个细节，因为C#在不断进步；相反，我们将重点关注语言丰富的自定义类型创建支持，并探讨如何最佳利用类型系统来改进设计，编写更清晰、更简单、更高效的程序。
- en: Many languages allow users to define their own types, but C# is different in
    that it makes a clear distinction between classes, which are reference types,
    and value types. *Classes* are the default choice for implementing a design in
    C# and the general-purpose mechanism for custom types, as they support all the
    object-oriented features that C# has to offer. In contrast, *value types* are
    much more specialized, which is why they’re often misunderstood and dismissed
    as an advanced feature that’s irrelevant for most applications. It’s true that
    value types aren’t suitable for many custom types in an application, and they
    may not be necessary in every design, but they have several advantages that are
    frequently underappreciated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多语言允许用户定义自己的类型，但C#不同，它在类（引用类型）和值类型之间做出了明确的区分。*类* 是在C#中实现设计的默认选择，是自定义类型的通用机制，因为它支持C#所提供的所有面向对象功能。相比之下，*值类型*
    更为专门化，这也是它们常常被误解和忽视的原因，认为它们是一个只对少数应用程序有用的高级特性。确实，值类型并不适用于应用程序中的许多自定义类型，也不一定在每个设计中都是必须的，但它们有几个常被低估的优点。
- en: 'Using typical real-world examples, this book will walk you through defining
    and implementing value types effectively and efficiently so that they work successfully
    with all the other types in your applications. Specifically, we’ll explore the
    following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过典型的实际案例，本书将引导你有效且高效地定义和实现值类型，使其能够与应用程序中的其他类型成功协作。具体来说，我们将探讨以下内容：
- en: Why C# distinguishes between value types and reference types, and what that
    means in practice
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么C#区分值类型和引用类型，以及这在实践中的含义
- en: What makes value types different, both syntactically and semantically, from
    other types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值类型与其他类型在语法和语义上的不同之处
- en: How incorporating value types can improve your code and help you express designs
    more clearly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将值类型融入代码中，提升代码质量，并帮助你更清晰地表达设计
- en: Which characteristics of value types, beyond those defined by the language,
    are most important to their role in an application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了语言定义的那些之外，值类型的哪些特征对它们在应用程序中的角色最为重要
- en: Where you can use value types to enhance an application’s performance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在哪里可以使用值类型来提升应用程序的性能
- en: <samp class="SANS_Futura_Std_Bold_B_11">Who Should Read This Book</samp>
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">谁应该阅读本书</samp>
- en: If you’ve learned the basics of C# and wish to expand your understanding of
    the language to become a better programmer, this book is for you. Nothing in the
    chapters that follow is particularly advanced, but the content is intended to
    help you understand some of the underlying features, principles, and concepts
    of C# programming. My hope is that this book will allow you to move beyond simply
    writing runnable programs using correct C# syntax to writing idiomatic and efficient
    C# programs that your colleagues can easily understand.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经学习了C#的基础知识，并希望扩展对语言的理解，成为更好的程序员，那么本书适合你。接下来的章节没有特别高级的内容，但它们旨在帮助你理解一些C#编程中的基本特性、原则和概念。我希望本书能帮助你超越仅仅使用正确的C#语法编写可运行的程序，能够编写出同事们能够轻松理解的地道而高效的C#程序。
- en: To follow the examples, you’ll need experience with creating your own classes;
    familiarity with constructors, methods, and properties; and a basic understanding
    of how virtual methods can be overridden by derived classes. Some practice with
    exceptions, both in employing them and handling them to manage errors, will also
    be useful. An appreciation of the mechanics of defining generic types and methods,
    although not essential, will also be helpful; in particular, some experience using
    the generic collection classes provided by the Standard Library will give you
    insight into how generics work in C#. *The C# Type System* isn’t a beginner’s
    guide and doesn’t discuss how to compile and run your code, but you aren’t expected
    to know the dark corners of the language. That said, I hope that some parts of
    this book will amuse and perhaps even surprise more advanced users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本书中的示例，你需要有创建自己类的经验；熟悉构造函数、方法和属性；并且对虚方法如何被派生类重写有基本的理解。对于异常的处理和使用，也需要一些实践经验，这将对管理错误有所帮助。虽然并非必需，但理解如何定义泛型类型和方法的机制也会有所帮助；特别是，如果你有使用标准库中提供的泛型集合类的经验，会帮助你深入理解
    C# 中泛型的工作原理。《C# 类型系统》不是一本面向初学者的指南，它不会讨论如何编译和运行代码，但你不必了解语言的每个细节。尽管如此，我希望本书的某些部分能够娱乐并可能令更高级的用户感到惊讶。
- en: When features are fundamental, we sometimes become complacent about them. With
    that in mind, many chapters in this book cover details that experienced C# programmers
    might consider introductory. Those topics are intended to set the scene for some
    less widely understood concepts that depend on them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当某些特性变得基础时，我们有时会对它们产生自满情绪。考虑到这一点，本书的许多章节涵盖了经验丰富的 C# 程序员可能认为是入门内容的细节。这些内容的目的是为一些依赖于这些基础知识的较少被理解的概念奠定基础。
- en: If you have more than just a passing familiarity with C# code or experience
    with another object-based language such as Java or C++, I hope that the examples
    and commentary here will help you better understand C# syntax and semantics and
    better appreciate why C# is the language it has become.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 C# 代码有较深的了解，或者有 Java 或 C++ 等其他面向对象语言的经验，我希望这里的示例和评论能帮助你更好地理解 C# 的语法和语义，并更好地理解为什么
    C# 会发展成今天的样子。
- en: The book doesn’t cover all aspects of C# programming; the focus is intentionally
    on the interactions between value types and reference types. In that discussion,
    we’ll venture into C# generics, collections, Language Integrated Query (LINQ),
    and threading, but only superficially. We *won’t* be discussing <samp class="SANS_TheSansMonoCd_W5Regular_11">unsafe</samp>
    code or C# pointers. (Actually, there’s one mention of *managed* pointers. Otherwise,
    we’re solid.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并没有覆盖 C# 编程的所有方面，重点是值类型与引用类型之间的交互。在这个讨论中，我们将简单介绍 C# 泛型、集合、语言集成查询（LINQ）和线程，但只是皮毛。我们*不会*讨论
    <samp class="SANS_TheSansMonoCd_W5Regular_11">不安全</samp> 代码或 C# 指针。（实际上，这里提到过一次*托管*指针。除此之外，内容非常稳定。）
- en: We won’t cover how to create web services, interact with databases, or write
    distributed programs intended for deployment as cloud or microservice applications,
    but the techniques and underlying principles of C# presented will help improve
    the applications you create for those domains and others.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会讨论如何创建 Web 服务、与数据库交互或编写用于云或微服务应用程序的分布式程序，但本书中介绍的 C# 技巧和基本原理将有助于提升你在这些领域以及其他领域所创建的应用程序。
- en: If you’ve asked or been asked when a value type would be a better choice than
    a reference type in a C# program and found yourself unable to give a satisfactory
    response, you should find this book useful.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经问过自己或别人，为什么在 C# 程序中值类型比引用类型更合适，并且发现自己无法给出令人满意的回答，那么你应该会觉得这本书非常有用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Organization and Requirements</samp>
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">组织结构与要求</samp>
- en: 'The book is organized into eight chapters, each presenting a different aspect
    of value types in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为八章，每一章展示了值类型在实际中的不同应用：
- en: '**[Chapter 1](chapter1.xhtml): Making the Most of the Type System**   Examines
    the importance of user-defined value types and how introducing even simple types
    in an application can make the code easier to read and understand. It covers the
    importance of accurate names, the benefits of encapsulating application-specific
    behavior, and ways to make your own types intuitive and simple to use.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](chapter1.xhtml): 最大化类型系统的利用**   考察了用户定义值类型的重要性，并且分析了在应用程序中引入即使是简单类型如何使代码更容易阅读和理解。它涵盖了精确命名的重要性、封装特定应用行为的好处，以及如何让自己的类型直观且易于使用。'
- en: '**[Chapter 2](chapter2.xhtml): Value and Reference Types**   Looks at why C#
    has both reference types and value types and compares them in detail. We consider
    how different kinds of objects use memory, what that means for their lifetimes,
    and how the differences between types affect construction, equality, and copying.
    We review nullable value types and compare them with the newer nullable reference
    type feature.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml): 值类型与引用类型**   分析了为什么 C# 同时存在引用类型和值类型，并详细比较了它们。我们考虑了不同类型的对象如何使用内存，这对它们的生命周期意味着什么，以及类型之间的差异如何影响构造、相等性和复制。我们回顾了可空值类型，并将其与更新的可空引用类型特性进行了比较。'
- en: '**[Chapter 3](chapter3.xhtml): Reference and Value Parameters**   Examines
    the four types of method parameters and how to pass arguments to them, as well
    as how passing behavior differs between value types and reference types. We distinguish
    between passing a reference type variable and passing an argument *by reference*
    and explore how that relates to mutability and side effects. We also consider
    how to pass value type instances by immutable reference to optimize performance.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml): 引用与值参数**   考察了四种方法参数类型以及如何将参数传递给它们，并且分析了值类型和引用类型在传递行为上的差异。我们区分了传递引用类型变量与按引用传递参数，探讨了这一点与可变性和副作用之间的关系。我们还考虑了如何通过不可变引用传递值类型实例以优化性能。'
- en: '**[Chapter 4](chapter4.xhtml): Implicit and Explicit Copying**   Discusses
    how values are copied in a program and how the differences in copy behavior between
    value types and reference types can have unintended consequences in our code.
    In particular, we distinguish between variables and values and explore how making
    value types immutable can help prevent some common copying-related errors. We
    also look at ways to mitigate the potential inefficiencies that copying can introduce.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml): 隐式与显式复制**   讨论了程序中如何复制值，以及值类型和引用类型之间复制行为的差异如何在代码中产生意想不到的后果。特别地，我们区分了变量和数值，探讨了使值类型不可变如何帮助防止一些常见的复制相关错误。我们还研究了如何减轻复制可能引入的低效问题。'
- en: '**[Chapter 5](chapter5.xhtml): Types of Equality**   Covers the various ways
    that values can be compared for equality and what happens under the hood during
    these comparisons. Implementing value-based equality comparisons is a common source
    of error, so we’ll walk through how to do so safely and correctly, as well as
    how to take advantage of facilities provided by the compiler for this purpose.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml): 相等性的类型**   介绍了值如何进行相等性比较的不同方式，以及在这些比较过程中幕后发生了什么。实现基于值的相等性比较是常见的错误源，因此我们将演示如何安全且正确地实现这一点，以及如何利用编译器为此目的提供的设施。'
- en: '**[Chapter 6](chapter6.xhtml): The Nature of Values**   Outlines the characteristics
    and roles of different types in an application and how a value type’s role is
    more than just being a convenient way to store data. We examine what *value semantics*
    means and what makes an object a good candidate to be a value type. We also consider
    the importance of ordering objects and distinguish between equality and equivalence.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml): 值的本质**   概述了应用程序中不同类型的特点和角色，以及值类型的角色不仅仅是作为存储数据的方便方式。我们研究了*值语义*的含义，以及使一个对象成为值类型的条件。我们还讨论了对象排序的重要性，并区分了相等性和等价性。'
- en: '**[Chapter 7](chapter7.xhtml): Value Types and Polymorphism**   Explores why
    inheritance isn’t an appropriate form of polymorphism for value types, working
    through an example to demonstrate the problems that can arise. We look in detail
    at the difference between subclassing and subtyping, and we discuss how other
    kinds of polymorphism are more suitable for working with values.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml): 值类型与多态**   探讨了为什么继承并不是值类型的合适多态形式，通过一个示例展示了可能出现的问题。我们详细了解了子类化与子类型化之间的差异，并讨论了其他类型的多态性如何更适合处理值。'
- en: '**[Chapter 8](chapter8.xhtml): Performance and Efficiency**   Considers how
    different types affect an application’s performance and how to precisely measure
    performance to make evidence-based decisions. The chapter covers how accepting
    default behavior can adversely affect our code’s performance, while also addressing
    common myths regarding compiler-generated code and efficiency.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml)：性能与效率**   探讨不同类型如何影响应用程序的性能，以及如何精确测量性能，从而做出基于证据的决策。本章还讨论了接受默认行为如何对代码性能产生不利影响，并澄清了一些关于编译器生成代码和效率的常见误区。'
- en: Many of the code snippets use a simple test to demonstrate a behavior or language
    characteristic. The examples use NUnit fluent-style assertions, which provide
    a commonly understood and compact way to represent the concepts being discussed.
    Several other unit-testing frameworks are available for C#, and you should be
    able to easily translate the NUnit test snippets to other styles.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 许多代码片段使用简单的测试来演示某种行为或语言特性。示例中使用了 NUnit 流式风格断言，它提供了一种常见且简洁的方式来表达正在讨论的概念。C# 也有多种其他单元测试框架，你应该能轻松地将
    NUnit 测试片段转换为其他风格。
- en: It won’t take long for you to discover that the code examples, on their own,
    usually don’t compile in the form in which they’re presented. For the sake of
    brevity, some details, such as importing namespaces or defining <samp class="SANS_TheSansMonoCd_W5Regular_11">Main</samp>,
    are omitted. The code examples are intended to focus your attention on a concept
    rather than to show a legal program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你很快就会发现，单独的代码示例通常无法以其展示的形式编译。为了简洁起见，某些细节（如导入命名空间或定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">Main</samp>）被省略。代码示例旨在引导你关注某个概念，而非展示一个合法的程序。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Modern Features</samp>
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">现代特性</samp>
- en: In recent years the language designers have put a great deal of effort into
    enhancing C#’s support for creating efficient, high-performance applications.
    While the central ideas of the language have remained unchanged, new facilities
    have been added, particularly with respect to simple value types, and new features
    incorporated to enable C# programmers to take advantage of value types to maximize
    application performance. This book explores some of those features but in the
    context of *classic* C# programming, not just high-performance computing. Some
    of those features can make your programs clearer for human readers, as well as
    more efficient at run time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，语言设计者在提升 C# 支持高效、高性能应用程序开发方面付出了大量努力。虽然语言的核心思想保持不变，但已经增加了许多新功能，尤其是在简单值类型方面，并引入了新特性，使得
    C# 程序员能够利用值类型来最大化应用程序性能。本书探讨了其中的一些特性，但主要是在*经典* C# 编程的背景下，而不仅仅是高性能计算。这些特性不仅能使程序对人类读者更清晰，还能提高运行时效率。
- en: Most of the code examples throughout the book demonstrate concepts that have
    been widely used in C# over several versions, some using features that have been
    part of C# since version 1.0\. For more recently introduced features, the minimum
    compiler version is indicated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数代码示例展示了多个 C# 版本中广泛使用的概念，有些使用了自 C# 1.0 起就已存在的特性。对于最近引入的特性，书中会指明所需的最低编译器版本。
- en: Using value types effectively in your applications requires some additional
    thought on your part, not just about how those types are designed, but also about
    how they’re used. *The C# Type System* describes in detail how value types behave
    in a wide variety of scenarios, allowing you to write C# in a modern, idiomatic,
    and effective manner. Having a deeper understanding of how value types fit into
    the C# type system will help you enrich your designs and write better programs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中有效地使用值类型需要你额外思考，不仅仅是关于这些类型的设计，还需要考虑它们的使用方式。*C# 类型系统*详细描述了值类型在各种场景中的行为，帮助你以现代、惯用且高效的方式编写
    C# 代码。深入理解值类型如何融入 C# 类型系统，将帮助你丰富设计并编写更好的程序。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Why Value Types?</samp>
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">为什么选择值类型？</samp>
- en: Whereas the *class* is the poster child of object-oriented programming and design,
    the humble *value type* is often overlooked. However, judicious use of value types
    can bring many benefits, including better performance. Value type instances aren’t
    individually allocated on the heap or subject to garbage collection. Allocating
    objects on the heap carries a small performance penalty since the garbage collector
    must inspect every object in memory, whether or not it’s in use, to ascertain
    whether it’s eligible for collection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然*类*是面向对象编程和设计的代表，但谦逊的*值类型*常常被忽视。然而，合理使用值类型可以带来许多好处，包括更好的性能。值类型实例不会单独分配到堆上，也不需要进行垃圾回收。将对象分配到堆上会带来轻微的性能损失，因为垃圾回收器必须检查内存中的每个对象，无论它是否正在使用，以确定它是否符合回收条件。
- en: Reducing the heap-based memory of a program is likely to mean the garbage collector
    runs less often and has to do less work when it does run. Reducing heap memory
    pressure is likely to improve the speed of the code you write. Although the garbage-collection
    algorithm has been carefully tuned to minimize its impact on a running program,
    avoiding garbage collection altogether is even more efficient.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 减少程序基于堆的内存使用可能意味着垃圾回收器运行的次数减少，并且每次运行时需要做的工作也更少。减少堆内存压力有可能提高你编写的代码的执行速度。尽管垃圾回收算法已被精心调整，以最小化对运行中程序的影响，但完全避免垃圾回收会更加高效。
- en: Making all your objects into value types almost certainly won’t magically improve
    your programs’ performance, but there’s much more to the value type story than
    simply performance, just as there’s more to source code than a program, and more
    to programming than typing. Understanding value semantics can help you determine
    where you might employ value types in a design and how to implement them to best
    achieve your goal. Equally importantly, understanding value semantics will help
    you determine where a value type would *not* be appropriate.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有对象都转换成值类型几乎肯定不会神奇地提高程序的性能，但值类型的故事远不止性能，就像源代码不仅仅是一个程序，编程也不仅仅是敲代码。理解值语义可以帮助你决定在设计中哪些地方可以使用值类型，以及如何实施它们以最有效地实现目标。同样重要的是，理解值语义能帮助你判断在哪些地方值类型*不*合适。
- en: Over the course of this book, you’ll learn what value semantics means for C#
    programs, and how to use value types successfully and efficiently. Along the way,
    we’ll look in detail at both how and why value types behave as they do. First,
    though, we’ll explore using simple value types to make our code easier for humans
    to understand. Let’s get started.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，你将学习值语义对C#程序的意义，以及如何成功高效地使用值类型。在这个过程中，我们将详细了解值类型的行为以及为什么它们会这样表现。不过，首先我们将探讨如何使用简单的值类型来使代码更容易为人类理解。让我们开始吧。
