["```\n%11_1011_0010_1101\n```", "```\ncin >> i;                      // C++\n\nreadln( i );                   // Pascal\n\nlet j = Int(readLine() ?? \"\")! // Swift\n\ninput i                        // BASIC\n\nstdin.get( i );                // HLA\n```", "```\nprintf( \"%d\", i );    // C\n\ncout << i;            // C++\n\nprint i               // BASIC\n\nwrite( i );           // Pascal\n\nprint( i )            // Swift\n\nstdout.put( i );      // HLA\n```", "```\nsigned char sbyte;   // Chars in C are byte values.\n\nshort int sword;     // Short integers in C are *usually* 16-bit values.\n\nlong int sdword;     // Long integers in C are *usually* 32-bit values.\n\n . . .\n\nsword = sbyte;       // Automatically sign-extends the 8-bit value to 16 bits.\n\nsdword = sbyte;      // Automatically sign-extends the 8-bit value to 32 bits.\n\nsdword = sword;      // Automatically sign-extends the 16-bit value to 32 bits.\n```", "```\nsigned char sbyte;    // Chars in C are byte values.\n\nshort int sword;      // Short integers in C are *usually* 16-bit values.\n\nlong int sdword;      // Long integers in C are *usually* 32-bit values.\n\n . . .\n\nsbyte = (signed char) sword;\n\nsbyte = (signed char) sdword;\n\nsword = (short int) sdword;\n```", "```\nif( sword >= -128 && sword <= 127 )\n\n{\n\n    sbyte = (signed char) sword;\n\n}\n\nelse\n\n{\n\n    // Report appropriate error.\n\n}\n\n// Another way, using assertions:\n\nassert( sword >= -128 && sword <= 127 )\n\nsbyte = (signed char) sword;\n\nassert( sdword >= -32768 && sdword <= 32767 )\n\nsword = (short int) sdword;\n```", "```\nvar\n\n    li  :longint;\n\n    si  :smallint;\n\n        . . .\n\n    if( li > 32767 ) then\n\n        si := 32767;\n\n    else if( li < -32768 ) then\n\n        si := -32768;\n\n    else \n\n        si := li;\n```"]