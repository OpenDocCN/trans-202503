["```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n    **<link** rel=\"stylesheet\" type=\"text/css\" href=\"css/continental.css\"**>**\n  **</head>**\n  **<body>**\n    **<div** id=\"map\"**></div>**\n  **</body>**\n**</html>**\n```", "```\n**<div** id=\"map\"**>**\n    **<span** class=\"map-fr\"**></span>**\n**</div>**\n```", "```\n**var** fr = document.createElement(\"span\");\nfr.className = \"map-fr\";\ndocument.getElementById(\"map\").appendChild(fr);\n```", "```\n#map **{**\n    **font-size:** 200px**;**\n**}**\n```", "```\n  #map **{**\n➊    **position:** relative**;**\n  **}**\n  #map > [class*=\"map-\"] **{**\n➋    **position:** absolute**;**\n➌    **top:** 0**;**\n      **left:** 0**;**\n  **}**\n```", "```\n**var** countries = [\n  \"ad\", \"al\", \"at\", \"ba\", \"be\", \"bg\", \"by\", \"ch\", \"cy\", \"cz\",\n  \"de\", \"dk\", \"ee\", \"es\", \"fi\", \"fo\", \"fr\", \"ge\", \"gg\", \"gr\",\n  \"hr\", \"hu\", \"ie\", \"im\", \"is\", \"it\", \"je\", \"li\", \"lt\", \"lu\",\n  \"lv\", \"mc\", \"md\", \"me\", \"mk\", \"mt\", \"nl\", \"no\", \"pl\", \"pt\",\n  \"ro\", \"rs\", \"ru\", \"se\", \"si\", \"sk\", \"sm\", \"tr\", \"ua\", \"uk\",\n  \"va\"\n];\n**var** map = document.getElementById(\"map\");\ncountries.forEach(**function**(cc) {\n    **var** span = document.createElement(\"span\");\n    span.className = \"map-\" + cc;\n    map.appendChild(span);\n});\n```", "```\n**var** ages = [\n    { \"country\": \"al\", \"age\": 29.968 },\n    { \"country\": \"at\", \"age\": 41.768 },\n    { \"country\": \"ba\", \"age\": 39.291 },\n    { \"country\": \"be\", \"age\": 41.301 },\n    { \"country\": \"bg\", \"age\": 41.731 },\n    *// Data set continues...*\n```", "```\n➊ **var** findCountryIndex = **function**(cc) {\n       **for** (**var** idx=0; idx<ages.length; idx++) {\n           **if** (ages[idx].country === cc) {\n               **return** idx;\n           }\n       }\n       **return** -1;\n   }\n   **var** map = document.getElementById(\"map\");\n   countries.forEach(**function**(cc) {\n       **var** idx = findCountryIndex(cc);\n       **if** (idx !== -1) {\n           **var** span = document.createElement(\"span\");\n           span.className = \"map-\" + cc;\n➋         span.setAttribute(\"data-age\", Math.round(ages[idx].age));\n           map.appendChild(span);\n       }\n   });\n```", "```\n#map > [data-age=\"44\"] **{** **color:** #2d9999**;** **}**\n#map > [data-age=\"43\"] **{** **color:** #2a9493**;** **}**\n#map > [data-age=\"42\"] **{** **color:** #278f8e**;** **}**\n*/* CSS rules continue... */*\n```", "```\n#map-legend .key **{**\n    **background:** linear-gradient(to bottom, #004a4a 0%,#2d9999 100%)**;**\n**}**\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>***<!-- -->***</head>**\n  **<body>**\n    **<nav>***<!-- -->***</nav>**\n    **<main>**\n      **<section>***<!-- -->***</section>**\n    **</main>**\n    **<nav>***<!-- -->***</nav>**\n  **</body>**\n**</html>**\n```", "```\n**<?xml** version=\"1.0\" encoding=\"UTF-8\"**?>**\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n    \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n**<svg** id=\"firstaid\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n     width=\"100\" height=\"100\"**>**\n    **<rect** id=\"background\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" rx=\"20\" **/>**\n    **<rect** id=\"vertical\"   x=\"39\" y=\"19\" width=\"22\" height=\"62\" **/>**\n    **<rect** id=\"horizontal\" x=\"19\" y=\"39\" width=\"62\" height=\"22\" **/>**\n**</svg>**\n```", "```\nsvg#firstaid **{**\n    **stroke:** none**;**\n**}**\nsvg#firstaid #background **{**\n    **fill:** #000**;**\n**}**\nsvg#firstaid #vertical,\nsvg#firstaid #horizontal **{**\n    **fill:** #FFF**;**\n**}**\n```", "```\n**<svg** version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"497\" height=\"558\"**>**\n    **<path** id=\"ck\" d=\"M 216.65,131.53 L 216.41,131.53 216.17,131.53...\" **/>**\n    **<path** id=\"me\" d=\"M 74.32,234.01 L 74.32,232.09 74.32,231.61...\" **/>**\n    **<path** id=\"ms\" d=\"M 64.96,319.22 L 64.72,319.22 64.48,318.98...\" **/>**\n    *<!-- Markup continues... -->*\n```", "```\n   <!DOCTYPE html>\n   **<html** lang=\"en\"**>**\n     **<head>**\n       **<meta** charset=\"utf-8\"**>**\n       **<title></title>**\n     **</head>**\n     **<body>**\n       **<div>**\n➊       **<svg** id=\"firstaid\" version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n           width=\"100\" height=\"100\"**>**\n           **<rect** id=\"background\" x=\"0\" y=\"0\"\n                 width=\"100\" height=\"100\" rx=\"20\" **/>**\n           **<rect** id=\"vertical\" x=\"39\" y=\"19\"\n                 width=\"22\" height=\"62\" **/>**\n           **<rect** id=\"horizontal\" x=\"19\" y=\"39\"\n                 width=\"62\" height=\"22\" **/>**\n➋       **</svg>**\n      **</div>**\n     **</body>**\n   **</html>**\n```", "```\n$(\"#map\").load(\"img/ga.svg\", **function**() {\n    *// Only manipulate the map inside this block*\n})\n```", "```\n**var** counties = [\n    {\n      \"name\":\"Appling\",\n      \"code\":\"ap\",\n      \"outcomes_z\":0.93,\n      \"outcomes_rank\":148,\n      *// Data continues...*\n    },\n    {\n      \"name\":\"Atkinson\",\n      \"code\":\"at\",\n      \"outcomes_z\":0.40,\n      \"outcomes_rank\":118,\n    *// Data set continues...*\n];\n```", "```\n**var** outcomes = counties.map(**function**(county) {**return** county.outcomes_z;});\n**var** maxZ = Math.max.apply(**null**, outcomes);\n**var** minZ = Math.min.apply(**null**, outcomes);\n```", "```\n**if** (Math.abs(minZ) > Math.abs(maxZ)) {\n    maxZ = -minZ;\n} **else** {\n    minZ = -maxZ;\n}\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    **<div** id=\"map\"**></div>**\n    **<script**\n     src=\"///cdnjs.cloudflare.com/ajax/libs/chroma-js/0.5.2/chroma.min.js\"**>**\n    **</script>**\n  **</body>**\n**</html>**\n```", "```\n**var** scale = chroma.scale(\"BrBG\").domain([maxZ, minZ]).out(\"hex\");\n```", "```\ncounties.forEach(**function**(county) {\n    document.getElementById(county.code)\n      .setAttribute(\"fill\", scale(county.outcomes_z));\n})\n```", "```\n**<table** id=\"legend\"**>**\n    **<tr** class=\"scale\"**>**\n        **<td></td><td></td><td></td><td></td><td></td>**\n        **<td></td><td></td><td></td><td></td>**\n    **</tr>**\n    **<tr** class=\"text\"**>**\n        **<td** colspan=\"4\"**>**Worse than Average**</td>**\n        **<td>**Average**</td>**\n        **<td** colspan=\"4\"**>**Better than Average**</td>**\n    **</tr>**\n**</table>**\n```", "```\ntable#legend tr.scale td **{**\n    **height:** 1em**;**\n    **width:** 11.1111%**;**\n**}**\ntable#legend tr.text td:first-child **{**\n    **text-align:** left**;**\n**}**\ntable#legend tr.text td:nth-child(2) **{**\n    **text-align:** center**;**\n**}**\ntable#legend tr.text td:last-child **{**\n    **text-align:** right**;**\n**}**\n```", "```\n   **var** legend = document.getElementById(\"legend\");\n   **var** cells = legend.rows[0].cells;\n   **for** (**var** idx=0; idx<cells.length; idx++) {\n       **var** td = cells[idx];\n➊     td.style.backgroundColor = scale(maxZ -\n           ((idx + 0.5) / cells.length) * (maxZ - minZ));\n   };\n```", "```\n**<table** id=\"details\"**>**\n    **<tr><td>**County:**</td><td></td></tr>**\n    **<tr><td>**Rank:**</td><td></td></tr>**\n    **<tr><td>**Health Behaviors:**</td><td></td></tr>**\n    **<tr><td>**Clinical Care:**</td><td></td></tr>**\n    **<tr><td>**Social & Economic Factors:**</td><td></td></tr>**\n    **<tr><td>**Physical Environment:**</td><td></td></tr>**\n**</table>**\n```", "```\ntable#details **{**\n    **display:** none**;**\n**}**\n```", "```\n[].slice.call(document.querySelectorAll(\"#map path\"))\n    .forEach(**function**(path) {\n        path.addEventListener(\"mouseenter\", **function**(){\n            document.getElementById(\"details\").style.display = \"table\";\n        });\n        path.addEventListener(\"mouseleave\", **function**(){\n            document.getElementById(\"details\").style.display = \"none\";\n        });\n    }\n);\n```", "```\n**var** zToText = **function**(z) {\n    z = +z;\n    **if** (z > 0.25)  { **return** \"Far Below Average\"; }\n    **if** (z >  0.1)  { **return** \"Below Average\"; }\n    **if** (z > -0.1)  { **return** \"Average\"; }\n    **if** (z > -0.25) { **return** \"Above Average\"; }\n    **return** \"Far Above Average\";\n}\n```", "```\n**var** county = **null**;\ncounties.some(**function**(c) {\n    **if** (c.code === **this**.id) {\n        county = c;\n        **return** **true**;\n    }\n    **return** **false**;\n});\n```", "```\n**var** table = document.getElementById(\"details\");\ntable.rows[0].cells[1].textContent =\n    county.name;\ntable.rows[1].cells[1].textContent =\n    county.outcomes_rank + \" out of \" + counties.length;\ntable.rows[2].cells[1].textContent =\n    zToText(county.health_behaviors_z);\ntable.rows[3].cells[1].textContent =\n    zToText(county.clinical_care_z);\ntable.rows[4].cells[1].textContent =\n    zToText(county.social_and_economic_factors_z);\ntable.rows[5].cells[1].textContent =\n    zToText(county.physical_environment_z);\n```", "```\n   path.addEventListener(\"mouseleave\", **function**(){\n       *// Previous code*\n➊     **this**.setAttribute(\"stroke\", \"#444444\");\n   });\n   path.addEventListener(\"mouseleave\", **function**(){\n       *// Previous code*\n➋     **this**.setAttribute(\"stroke\", \"none\");\n   });\n```", "```\n   <!DOCTYPE html>\n   **<html** lang=\"en\"**>**\n     **<head>**\n       **<meta** charset=\"utf-8\"**>**\n       **<title></title>**\n     **</head>**\n     **<body>**\n➊     **<div** id=\"map\"**></div>**\n       **<script** src=\"js/modestmaps.js\"**></script>**\n       **<script** src=\"js/spotlight.js\"**></script>**\n     **</body>**\n   **</html>**\n```", "```\n**var** ufos = [\n{\n    \"date\": \"April, 1941\",\n    \"city\": \"Cape Girardeau\",\n    \"state\": \"Missouri\",\n    \"location\": [37.309167, -89.546389],\n    \"url\": \"http://en.wikipedia.org/wiki/Cape_Girardeau_UFO_crash\"\n},{\n    \"date\": \"February 24, 1942\",\n    \"city\": \"Los Angeles\",\n    \"state\": \"California\",\n    \"location\": [34.05, -118.25],\n    \"url\": \"http://en.wikipedia.org/wiki/Battle_of_Los_Angeles\"\n},{\n*// Data set continues...*\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    **<div** id=\"map\"**></div>**\n    **<script** src=\"js/modestmaps.js\"**></script>**\n    **<script** src=\"js/spotlight.js\"**></script>**\n    **<script** src=\"http://maps.stamen.com/js/tile.stamen.js\"**></script>**\n  **</body>**\n**</html>**\n```", "```\n**var** tiles = **new** MM.StamenTileLayer(\"toner\");\n```", "```\n**var** map = **new** MM.Map(\"map\", tiles);\nmap.setCenterZoom(**new** MM.Location(38.840278, -96.611389), 4);\n```", "```\n**var** layer = **new** SpotlightLayer();\nlayer.spotlight.radius = 15;\nmap.addLayer(layer);\n```", "```\nufos.forEach(**function**(ufo) {\n    layer.addLocation(**new** MM.Location(ufo.location[0], ufo.location[1]));\n});\n```", "```\n**var** seaboard = [\n    { \"stop\": \"Washington\",\n      \"latitude\": 38.895111, \"longitude\": -77.036667,\n      \"duration\": 77 },\n    { \"stop\": \"Fredericksburg\",\n      \"latitude\": 38.301806, \"longitude\": -77.470833,\n      \"duration\": 89 },\n    { \"stop\": \"Richmond\",\n      \"latitude\": 37.533333, \"longitude\": -77.466667,\n      \"duration\": 29 },\n    *// Data set continues...*\n];\n**var** southern = [\n    { \"stop\": \"Washington\",\n      \"latitude\": 38.895111, \"longitude\": -77.036667,\n      \"duration\": 14 },\n    { \"stop\": \"Alexandria\",\n      \"latitude\": 38.804722, \"longitude\": -77.047222,\n      \"duration\": 116 },\n    { \"stop\": \"Charlottesville\",\n      \"latitude\": 38.0299, \"longitude\": -78.479,\n      \"duration\": 77 },\n    *// Data set continues...*\n];\n```", "```\n   <!DOCTYPE html>\n   **<html** lang=\"en\"**>**\n     **<head>**\n       **<meta** charset=\"utf-8\"**>**\n       **<title></title>**\n       **<link** rel=\"stylesheet\"\n        href=\"http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css\" **/>**\n       **</head>**\n       **<body>**\n➊       **<div** id=\"map\"**></div>**\n       **<script**\n         src=\"http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js\"**>**\n       **</script>**\n     **</body>**\n   **</html>**\n```", "```\n**var** map = L.map(\"map\",{\n    center: [36.3, -80.2],\n    zoom: 6\n});\n```", "```\n   **var** map = L.map(\"map\",{\n       center: [36.3, -80.2],\n➊     maxBounds: [ [33.32134852669881, -85.20996093749999],\n➋                [39.16414104768742, -75.9814453125] ],\n       zoom: 6,\n➌     minZoom: 6,\n➍     maxZoom: 6,\n➎     dragging: **false**,\n➏     zoomControl: **false**,\n➐     touchZoom: **false**,\n       scrollWheelZoom: **false**,\n       doubleClickZoom: **false**,\n➑     boxZoom: **false**,\n➒     keyboard: **false**\n   });\n```", "```\n.leaflet-container **{**\n    **cursor:** default**;**\n**}**\n```", "```\n   L.tileLayer(\"http://server.arcgisonline.com/ArcGIS/rest/services/\"+\n               \"Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\", {\n        attribution: \"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ\",\n➊      maxZoom: 16\n   }).addTo(map);\n```", "```\nseaboard.map(**function**(stop) {\n    **return** [stop.latitude, stop.longitude]\n})\n```", "```\n[\n  [38.895111,-77.036667],\n  [38.301806,-77.470833],\n  [37.533333,-77.466667],\n  [37.21295,-77.400417],\n  */* Data set continues... */*\n]\n```", "```\nL.polyline(\n    seaboard.map(**function**(stop) {**return** [stop.latitude, stop.longitude]}),\n    {color: \"#88020B\", weight: 1, clickable: **false**}\n).addTo(map);\n\nL.polyline(\n    southern.map(**function**(stop) {**return** [stop.latitude, stop.longitude]}),\n    {color: \"#106634\", weight: 1, clickable: **false**}\n).addTo(map);\n```", "```\nL.Control.Animate = L.Control.extend({\n    *// Custom code goes here*\n});\n```", "```\nL.Control.Animate = L.Control.extend({\n    options: {\n        position: \"topleft\",\n        animateStartText: \"![](figs/web/common-01.png.jpg)\",\n        animateStartTitle: \"Start Animation\",\n        animatePauseText: \"![](figs/web/common-02.png.jpg)\",\n        animatePauseTitle: \"Pause Animation\",\n        animateResumeText: \"![](figs/web/common-01.png.jpg)\",\n        animateResumeTitle: \"Resume Animation\",\n        animateStartFn: **null**,\n        animateStopFn: **null**\n    },\n```", "```\n   onAdd: **function** () {\n       **var** animateName = \"leaflet-control-animate\",\n➊         container = L.DomUtil.create(\n               \"div\", animateName + \" leaflet-bar\"),\n           options = **this**.options;\n\n➋         **this**._button = **this**._createButton(\n               **this**.options.animateStartText,\n               **this**.options.animateStartTitle,\n               animateName,\n               container,\n           **this**._clicked);\n\n       **return** container;\n   },\n```", "```\n   _createButton: **function** (html, title, className, container, callback) {\n➊     **var** link = L.DomUtil.create(\"a\", className, container);\n       link.innerHTML = html;\n       link.href = \"#\";\n➋     link.title = title;\n\n       L.DomEvent\n➌         .on(link, \"mousedown dblclick\", L.DomEvent.stopPropagation)\n➍         .on(link, \"click\", L.DomEvent.stop)\n➎         .on(link, \"click\", callback, **this**);\n\n       **return** link;\n   },\n```", "```\n➊  _running: **false**,\n\n   _clicked: **function**() {\n➋     **if** (**this**._running) {\n           **if** (**this**.options.animateStopFn) {\n               **this**.options.animateStopFn();\n           }\n           **this**._button.innerHTML = **this**.options.animateResumeText;\n           **this**._button.title = **this**.options.animateResumeTitle;\n       } **else** {\n           **if** (**this**.options.animateStartFn) {\n               **this**.options.animateStartFn();\n           }\n           **this**._button.innerHTML = **this**.options.animatePauseText;\n           **this**._button.title = **this**.options.animatePauseTitle;\n       }\n       **this**._running = !**this**._running;\n   },\n```", "```\n    reset: **function**() {\n        **this**._running = **false**;\n        **this**._button.innerHTML = **this**.options.animateStartText;\n        **this**._button.title = **this**.options.animateStartTitle;\n    }\n});\n```", "```\nL.control.animate = **function** (options) {\n    **return** **new** L.Control.Animate(options);\n};\n```", "```\nL.control.animate().addTo(map);\n```", "```\n**var** buildAnimation = **function**(route, options) {\n    **var** animation = [];\n\n    *// Code to build the polylines*\n\n    **return** animation;\n}\n```", "```\n➊ **for** (**var** stopIdx=0, prevStops=[];\n            stopIdx < route.length-1; stopIdx++) {\n       *// Code to calculate steps between current stop and next stop*\n   }\n```", "```\n**var** stop = route[stopIdx];\n**var** nextStop = route[stopIdx+1]\nprevStops.push([stop.latitude, stop.longitude]);\n```", "```\n**for** (**var** minutes = 1; minutes <= stop.duration; minutes++) {\n    **var** position = [\n        stop.latitude +\n          (nextStop.latitude - stop.latitude) *\n          (minutes/stop.duration),\n        stop.longitude +\n          (nextStop.longitude - stop.longitude) *\n          (minutes/stop.duration)\n    ];\n    animation.push(\n        L.polyline(prevStops.concat([position]), options)\n    );\n}\n```", "```\n[[1,2], [3,4]].concat([5,6]);   *// => [[1,2], [3,4], 5, 6]*\n[[1,2], [3,4]].concat([[5,6]]); *// => [[1,2], [3,4], [5,6]]*\n```", "```\n**var** routeAnimations = [\n    buildAnimation(seaboard,\n      {clickable: **false**, color: \"#88020B\", weight: 8, opacity: 1.0}\n    ),\n    buildAnimation(southern,\n      {clickable: **false**, color: \"#106634\", weight: 8, opacity: 1.0}\n    )\n];\n```", "```\n**var** maxSteps = Math.min.apply(**null**,\n    routeAnimations.map(**function**(animation) {\n        **return** animation.length\n    })\n);\n```", "```\nrouteAnimations.map(**function**(animation) {**return** animation.length})\n```", "```\n**var** step = 0;\n```", "```\n**var** animateStep = **function**() {\n    *// Draw the next step in the animation*\n}\n```", "```\n   **if** (step > 0) {\n       routeAnimations.forEach(**function**(animation) {\n➊         map.removeLayer(animation[step-1]);\n       });\n   }\n```", "```\n**if** (step === maxSteps) {\n    step = 0;\n}\n```", "```\nrouteAnimations.forEach(**function**(animation) {\n    map.addLayer(animation[step]);\n});\n```", "```\n**return** ++step === maxSteps;\n```", "```\n   **var** interval = **null**;\n   **var** animate = **function**() {\n       interval = window.setInterval(**function**() {\n➊         **if** (animateStep()) {\n               window.clearInterval(interval);\n               control.reset();\n           }\n       }, 30);\n   }\n➋ **var** pause = **function**() {\n       window.clearInterval(interval);\n   }\n```", "```\n**var** control = L.control.animate({\n    animateStartFn: animate,\n    animateStopFn:  pause\n});\ncontrol.addTo(map);\n```", "```\nL.Label = L.Class.extend({\n    *// Implement the Label object*\n});\n```", "```\n   initialize: **function**(latLng, label, options) {\n       **this**._latlng = latLng;\n       **this**._label = label;\n➊     L.Util.setOptions(**this**, options);\n➋     **this**._status = \"hidden\";\n   },\n```", "```\n    options: {\n        offset: **new** L.Point(0, 0)\n    },\n});\n```", "```\n   onAdd: **function**(map) {\n➊     **this**._container = L.DomUtil.create(\"div\", \"leaflet-label\");\n➋     **this**._container.style.lineHeight = \"0\";\n➌     **this**._container.style.opacity = \"0\";\n➍     map.getPanes().markerPane.appendChild(**this**._container);\n➎     **this**._container.innerHTML = **this**._label;\n➏     **var** position = map.latLngToLayerPoint(**this**._latlng);\n➐     position = **new** L.Point(\n           position.x + **this**.options.offset.x,\n           position.y + **this**.options.offset.y\n➑     );\n➒     L.DomUtil.setPosition(**this**._container, position);\n   },\n```", "```\ngetStatus: **function**() {\n    **return** **this**._status;\n},\nsetStatus: **function**(status) {\n    **switch** (status) {\n        **case** \"hidden\":\n            **this**._status = \"hidden\";\n            **this**._container.style.opacity = \"0\";\n            **break**;\n        **case** \"shown\":\n            **this**._status = \"shown\";\n            **this**._container.style.opacity = \"1\";\n            **break**;\n        **case** \"dimmed\":\n            **this**._status = \"dimmed\";\n            **this**._container.style.opacity = \"0.5\";\n            **break**;\n    }\n}\n```", "```\n**var** seaboard = [\n{ \"stop\": \"Washington\",     \"offset\": [-30,-10], */* Data continues... */* },\n{ \"stop\": \"Fredericksburg\", \"offset\": [  6,  4], */* Data continues... */* },\n{ \"stop\": \"Richmond\",       \"offset\": [  6,  4], */* Data continues... */* },\n*// Data set continues...*\n```", "```\n   **var** buildLabelAnimation = **function**() {\n➊     **var** args = Array.prototype.slice.call(arguments),\n           labels = [];\n\n       *// Calculate label animation values*\n\n       **return** labels;\n   }\n```", "```\nargs.forEach(**function**(route) {\n    **var** minutes = 0;\n    route.forEach(**function**(stop,idx) {\n        *// Process each stop on the route*\n    });\n});\n```", "```\n   route.forEach(**function**(stop,idx) {\n       **if** (idx !== 0 && idx < route.length-1) {\n➊         **var** label = **new** L.Label(\n               [stop.latitude, stop.longitude],\n               stop.stop,\n               {offset: **new** L.Point(stop.offset[0], stop.offset[1])}\n           );\n           map.addLayer(label);\n➋         labels.push(\n               {minutes: minutes, label: label, status: \"shown\"}\n           );\n➌         labels.push(\n               {minutes: minutes+50, label: label, status: \"dimmed\"}\n           );\n       }\n       minutes += stop.duration;\n   });\n```", "```\nlabels.sort(**function**(a,b) {**return** a.minutes - b.minutes;})\n```", "```\n**var** labels = buildLabelAnimation(seaboard, southern);\n```", "```\n**var** start = seaboard[0];\n**var** label = **new** L.Label(\n    [start.latitude, start.longitude],\n    start.stop,\n    {offset: **new** L.Point(start.offset[0], start.offset[1])}\n);\nmap.addLayer(label);\nlabel.setStatus(\"shown\");\n\n**var** finish = seaboard[seaboard.length-1];\nlabel = **new** L.Label(\n    [finish.latitude, finish.longitude],\n    finish.stop,\n    {offset: **new** L.Point(finish.offset[0], finish.offset[1])}\n);\nmap.addLayer(label);\nlabel.setStatus(\"shown\");\n```", "```\n**var** maxPathSteps = Math.min.apply(**null**,\n    routeAnimations.map(**function**(animation) {\n        **return** animation.length\n    })\n);\n**var** maxLabelSteps = labels[labels.length-1].minutes;\n**var** maxSteps = Math.max(maxPathSteps, maxLabelSteps);\n```", "```\n**var** labelAnimation = labels.slice(0);\n```", "```\n**if** (step > 0 && step < maxPathSteps) {\n    routeAnimations.forEach(**function**(animation) {\n        map.removeLayer(animation[step-1]);\n    });\n}\n```", "```\n   **if** (step === maxSteps) {\n➊     routeAnimations.forEach(**function**(animation) {\n           map.removeLayer(animation[maxPathSteps-1]);\n➋     });\n➌     labelAnimation = labels.slice(0);\n➍     labelAnimation.forEach(**function**(label) {\n           label.label.setStatus(\"hidden\");\n➎     });\n➏     step = 0;\n   }\n```", "```\n**while** (labelAnimation.length && step === labelAnimation[0].minutes) {\n    **var** label = labelAnimation[0].label;\n    **if** (step < maxPathSteps || label.getStatus() === \"shown\") {\n        label.setStatus(labelAnimation[0].status);\n    }\n    labelAnimation.shift();\n}\n```", "```\n**if** (step < maxPathSteps) {\n    routeAnimations.forEach(**function**(animation) {\n        map.addLayer(animation[step]);\n    });\n}\n```", "```\n**return** ++step === maxSteps;\n```", "```\n.leaflet-label **{**\n   **-webkit-transition:** opacity .5s ease-in-out**;**\n      **-moz-transition:** opacity .5s ease-in-out**;**\n       **-ms-transition:** opacity .5s ease-in-out**;**\n        **-o-transition:** opacity .5s ease-in-out**;**\n           **transition:** opacity .5s ease-in-out**;**\n**}**\n```", "```\nL.Control.Title = L.Control.extend({\n     options: {\n➊       position: \"topleft\"\n     },\n\n➋    initialize: **function** (title, options) {\n           L.setOptions(**this**, options);\n           **this**._title = title;\n     },\n\n     onAdd: **function** (map) {\n         **var** container = L.DomUtil.create(\"div\", \"leaflet-control-title\");\n➌       container.innerHTML = **this**._title;\n         **return** container;\n     }\n });\n\n L.control.title = **function**(title, options) {\n     **return** **new** L.Control.Title(title, options);\n };\n```", "```\nL.control.title(\"Geography as a Competitive Advantage\").addTo(map);\n```"]