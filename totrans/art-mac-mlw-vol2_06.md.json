["```\nint main(int argc, const char* argv[])\n    r12 = [NSURL fileURLWithPath:NSBundle.mainBundle.bundlePath];\n\n    rbx = LSSharedFileListCreate(0x0, _kLSSharedFileListSessionLoginItems, 0x0);\n    LSSharedFileListInsertItemURL(rbx, _kLSSharedFileListItemLast, 0x0, 0x0, r12, 0x0, 0x0);\n    ...\n\n} \n```", "```\n% **strings - DazzleSpy/softwareupdate**\n...\n%@/Library/LaunchAgents\n/com.apple.softwareupdate.plist \n```", "```\n+(void)installDaemon {\n    rax = NSHomeDirectory();\n    ...\n    var_78 = [NSString stringWithFormat:@\"%@/**Library/LaunchAgents**\", rax];\n    var_80 = [var_78 stringByAppendingFormat:@\"/**com.apple.softwareupdate.plist**\"];\n    ...\n    var_90 = [[NSMutableDictionary alloc] init];\n    var_98 = [[NSMutableArray alloc] init];\n    ...\n    rax = @(YES);\n    [var_90 setObject:rax forKey:@\"RunAtLoad\"];\n [var_90 setObject:@\"com.apple.softwareupdate\" forKey:@\"Label\"];\n    [var_90 setObject:var_98 forKey:@\"ProgramArguments\"];\n    ...\n    [var_90 writeToFile:var_80 atomically:0x0];\n...\n} \n```", "```\n# **FileMonitor.app/Contents/MacOS/FileMonitor -pretty**\n...\n{\n  \"event\" : \"ES_EVENT_TYPE_NOTIFY_CREATE\",\n  \"file\" : {\n    \"destination\" : \"/Users/User/Library/LaunchAgents/com.apple.softwareupdate.plist\",\n    \"process\" : {\n      \"pid\" : 1469,\n      \"name\" : \"softwareupdate\",\n      \"path\" : \"/Users/User/Desktop/softwareupdate\"\n    }\n  }\n} \n```", "```\n<?xml version=”1.0” encoding=”UTF-8”?>\n...\n<plist version=\"1.0\">\n<dict>\n    <key>KeepAlive</key>\n    <true/>\n    <key>Label</key>\n    <string>com.apple.softwareupdate</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>**/Users/User/.local/softwareupdate**</string>\n        <string>1</string>\n    </array>\n    <key>**RunAtLoad**</key>\n<true/>\n <key>SuccessfulExit</key>\n    **<true/>**\n</dict>\n</plist> \n```", "```\n# **FileMonitor.app/Contents/MacOS/FileMonitor -pretty**\n{\n  \"event\" : \"ES_EVENT_TYPE_NOTIFY_CREATE\",\n  \"file\" : {\n \"destination\" :\n    \"/private/var/folders/zz/.../TemporaryItems/.../BackgroundItems-vx.btm\",\n    \"process\" : {\n       \"pid\" : 612,\n       \"name\" : \"backgroundtaskmanagementd\",\n       ...\n     }\n  }\n  ...\n}\n\n{\n  \"event\" : \"ES_EVENT_TYPE_NOTIFY_WRITE\",\n  \"file\" : {\n    \"destination\" :\n    \"/private/var/folders/zz/.../TemporaryItems/.../BackgroundItems-vx.btm\",\n    \"process\" : {\n      \"pid\" : 612,\n      \"name\" : \"backgroundtaskmanagementd\",\n      ...\n    }\n  }\n  ...\n}\n\n{\n  \"event\" : \"ES_EVENT_TYPE_NOTIFY_RENAME\",\n  \"file\" : {\n    \"source\" :\n    \"/private/var/folders/zz/.../TemporaryItems/.../BackgroundItems-vx.btm\",\n    \"destination\" :\n    \"/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-vx.btm\",\n    \"process\" : {\n      \"pid\" : 612,\n      \"name\" : \"backgroundtaskmanagementd\",\n      ...\n    }\n  }\n  ...\n} \n```", "```\n+[BTMStore storeNameForDatabaseVersion:]\n    pacibsp\n    sub    sp, sp, #0x20\n    stp    fp, lr, [sp, #0x10]\n    add    fp, sp, #0x10\n    nop\n    ldr    x0, =_OBJC_CLASS_$_NSString\n str    x2, [sp, #0x10 + var_10]\n    adr    x2, #0x100031f10            ; **@\"BackgroundItems-v%ld.btm\"**\n    ... \n```", "```\n% **file /private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v****`x`****.btm**\n/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v`x`.btm:\nApple binary property list \n```", "```\n% **plutil -p /private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v****`x`****.btm**\n{\n  \"$archiver\" => \"NSKeyedArchiver\"\n  \"$objects\" => [\n    0 => \"$null\"\n    1 => {\n      \"$class\" =>\n      <CFKeyedArchiverUID 0x600002854240 [0x1e3bcf9a0]>{value = 265}\n\n      \"itemsByUserIdentifier\" =>\n      <CFKeyedArchiverUID 0x600002854260 [0x1e3bcf9a0]>{value = 2}\n\n      \"mdmPaloadsByIdentifier\" =>\n      <CFKeyedArchiverUID 0x600002854280 [0x1e3bcf9a0]>{value = 263}\n\n      \"userSettingsByUserIdentifier\" =>\n      <CFKeyedArchiverUID 0x6000028542a0 [0x1e3bcf9a0]>{value = 257}\n    }\n    ...\n\n    265 => {\n      \"$classes\" => [\n         0 => \"Storage\"\n         1 => \"NSObject\"\n      ]\n      \"$classname\" => \"Storage\"\n    }\n    ... \n```", "```\n# **sfltool dumpbtm**\n\n#1:\n                 UUID: 8C271A5F-928F-456C-B177-8D9162293BA7\n                 Name: softwareupdate\n       Developer Name: (null)\n                 Type: legacy daemon (0x10010)\n          Disposition: [enabled, allowed, visible, notified] (11)\n           Identifier: com.apple.softwareupdate\n                  URL: file:///Library/LaunchDaemons/com.apple.softwareupdate.plist\n      Executable Path: /Users/User/.local/softwareupdate\n           Generation: 1\n    Parent Identifier: Unknown Developer\n\n#2:\n        UUID: 9B6C3670-2946-4F0F-B58C-5D163BE627C0\n                 Name: ChmodBPF\n       Developer Name: Wireshark\n      Team Identifier: 7Z6EMTD2C6\n                 Type: curated legacy daemon (0x90010)\n          Disposition: [enabled, allowed, visible, notified] (11)\n           Identifier: org.wireshark.ChmodBPF\n                  URL: file:///Library/LaunchDaemons/org.wireshark.ChmodBPF.plist\n      Executable Path: /Library/Application Support/Wireshark/ChmodBPF/ChmodBPF\n           Generation: 1\n    Assoc. Bundle IDs: [org.wireshark.Wireshark]\n    Parent Identifier: Wireshark \n```", "```\n% **log stream**\n...\nbackgroundtaskmanagementd: -[BTMService listener:shouldAcceptNewConnection:]:\nconnection=<NSXPCConnection: 0x152307aa0> connection from pid 52886 on mach service named\ncom.apple.backgroundtaskmanagement\n\nbackgroundtaskmanagementd dumpDatabaseWithAuthorization: error=Error\nDomain=NSOSStatusErrorDomain Code=0 \"noErr: Call succeeded with no error\" \n```", "```\n#import <dlfcn.h>\n#import <Foundation/Foundation.h>\n#import <SecurityFoundation/SFAuthorization.h>\n\n#define BTM_DAEMON \"/System/Library/PrivateFrameworks/\\\nBackgroundTaskManagement.framework/Resources/backgroundtaskmanagementd\"\n\n@interface BTMManager : NSObject\n    +(id)shared;\n    -(id)dumpDatabaseWithAuthorization:(SFAuthorization*)arg1 error:(id*)arg2;\n@end\n\nint main(int argc, const char* argv[]) {\n    void* btmd = dlopen(BTM_DAEMON, RTLD_LAZY);\n\n    Class BTMManager = NSClassFromString(@\"BTMManager\");\n    id sharedInstance = [BTMManager shared];\n\n    SFAuthorization* authorization = [SFAuthorization authorization];\n    [authorization obtainWithRight:\"system.privilege.admin\"\n    flags:kAuthorizationFlagExtendRights error:NULL];\n\n    id dbContents = [sharedInstance dumpDatabaseWithAuthorization:authorization error:NULL];\n    ...\n} \n```", "```\n% **log stream**\n...\nbackgroundtaskmanagementd: -[BTMService listener:shouldAcceptNewConnection:]:\nprocess with pid=20987 lacks entitlement 'com.apple.private.backgroundtaskmanagement.manage'\nor deprecated entitlement 'com.apple.private.coreservices.canmanagebackgroundtasks' \n```", "```\n/* @class BTMService */\n-(BOOL)listener:(NSXPCListener*)listener\nshouldAcceptNewConnection:(NSXPCConnection*)newConnection {\n    ...\n    x24 = [x0 valueForEntitlement:@\"com.apple.private.coreservices.canmanagebackgroundtasks\"];\n    ...\n    if(objc_opt_isKindOfClass(x24, objc_opt_class(@class(NSNumber))) == 0x0 ||\n    [x24 boolValue] == 0x0) {\n        // Reject the client that is attempting to connect.\n    } \n```", "```\n% **codesign -d --entitlements - /usr/bin/sfltool**\nExecutable=/usr/bin/sfltool\n[Dict]\n    [Key] **com.apple.private.coreservices.canmanagebackgroundtasks**\n    [Value]\n        [Bool] true\n    [Key] com.apple.private.sharedfilelist.export\n    [Value]\n        [Bool] true \n```", "```\n-(void*)_decodeRootData:(NSData*)data error:(void**)arg3 {\n    ...\n    x0 = [NSKeyedUnarchiver alloc];\n    x21 = [x0 initForReadingFromData:data error:&error];\n    ...\n    x0 = [x21 decodeObjectOfClass:objc_opt_class(@class(Storage)) forKey:@\"store\"]; \n```", "```\n#define BTM_DIRECTORY @\"/private/var/db/com.apple.backgroundtaskmanagement/\"\n\nNSURL* getPath(void) {\n ❶ NSArray* files = [NSFileManager.defaultManager contentsOfDirectoryAtURL:\n    [NSURL fileURLWithPath:BTM_DIRECTORY] includingPropertiesForKeys:nil options:0 error:nil];\n\n  ❷ NSArray* btmFiles = [files filteredArrayUsingPredicate:[NSPredicate\n    predicateWithFormat:@\"self.absoluteString ENDSWITH '.btm'\"]];\n\n  ❸ return btmFiles.lastObject;\n} \n```", "```\n@interface Storage : NSObject <NSSecureCoding>\n    @property(nonatomic, retain)NSDictionary* itemsByUserIdentifier;\n@end \n```", "```\n@interface ItemRecord : NSObject <NSSecureCoding>\n    @property NSInteger type;\n    @property NSInteger generation;\n    @property NSInteger disposition;\n    @property(nonatomic, retain)NSURL* url;\n    ...\n @property(nonatomic, retain)NSString* identifier;\n    @property(nonatomic, retain)NSString* developerName;\n    @property(nonatomic, retain)NSString* executablePath;\n    @property(nonatomic, retain)NSString* teamIdentifier;\n    @property(nonatomic, retain)NSString* bundleIdentifier;\n@end \n```", "```\n-(void*)initWithCoder:(NSCoder*)decoder {\n  x0 = objc_opt_class(@class(NSUUID));\n  x0 = [decoder decodeObjectOfClass:x0 forKey:@\"uuid\"];\n  self.uuid = x0;\n\n  x0 = objc_opt_class(@class(NSString));\n  x0 = [decoder decodeObjectOfClass:x0 forKey:@\"executablePath\"];\n  self.executablePath = x0;\n\n  x0 = objc_opt_class(@class(NSString));\n  x0 = [decoder decodeObjectOfClass: x0 forKey:@\"teamIdentifier\"];\n  self.teamIdentifier = x0;\n  ...\n} \n```", "```\n-(id)initWithCoder:(NSCoder *)decoder {\n    self = [super init];\n    if(nil != self) {\n        self.uuid = [decoder decodeObjectOfClass:[NSUUID class] forKey:@\"uuid\"];\n\n        self.executablePath =\n        [decoder decodeObjectOfClass:[NSString class] forKey:@\"executablePath\"];\n\n        self.teamIdentifier =\n        [decoder decodeObjectOfClass:[NSString class] forKey:@\"teamIdentifier\"];\n        ...\n    return self;\n} \n```", "```\n#define BTM_DAEMON \"/System/Library/PrivateFrameworks/\\\nBackgroundTaskManagement.framework/Resources/backgroundtaskmanagementd\"\n\n❶ void* btmd = dlopen(BTM_DAEMON, RTLD_LAZY);\n\n❷ NSURL* path = getPath();\n❸ NSData* data = [NSData dataWithContentsOfURL:path options:0 error:NULL];\n\n❹ NSKeyedUnarchiver* keyedUnarchiver =\n[[NSKeyedUnarchiver alloc] initForReadingFromData:data error:NULL];\n\n❺ Storage* storage = [keyedUnarchiver decodeObjectOfClass:\n[NSClassFromString(@\"Storage\") class] forKey:@\"store\"]; \n```", "```\nint itemNumber = 0;\n\n❶ for(NSString* key in storage.itemsByUserIdentifier) {\n  ❷ NSArray* items = storage.itemsByUserIdentifier[key];\n    for(ItemRecord* item in items) {\n        printf(\" #%d\\n\", ++itemNumber);\n      ❸ printf(\" %s\\n\", [[item performSelector:NSSelectorFromString\n        (@\"dumpVerboseDescription\")] UTF8String]);\n    }\n} \n```", "```\n% **./dumpBTM**\nOpened /private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-vx.btm\n...\n#1\n                 UUID: 8C271A5F-928F-456C-B177-8D9162293BA7\n                 Name: softwareupdate\n       Developer Name: (null)\n                 Type: legacy daemon (0x10010)\n          Disposition: [enabled, allowed, visible, notified] (11)\n           Identifier: com.apple.softwareupdate\n                  URL: file:///Library/LaunchDaemons/com.apple.softwareupdate.plist\n      Executable Path: /Users/User/.local/softwareupdate\n           Generation: 1\n    Parent Identifier: Unknown Developer\n\n#2\n                 UUID: 9B6C3670-2946-4F0F-B58C-5D163BE627C0\n                 Name: ChmodBPF\n       Developer Name: Wireshark\n      Team Identifier: 7Z6EMTD2C6\n                 Type: curated legacy daemon (0x90010)\n Disposition: [enabled, allowed, visible, notified] (11)\n           Identifier: org.wireshark.ChmodBPF\n                  URL: file:///Library/LaunchDaemons/org.wireshark.ChmodBPF.plist\n      Executable Path: /Library/Application Support/Wireshark/ChmodBPF/ChmodBPF\n           Generation: 1\n    Assoc. Bundle IDs: [org.wireshark.Wireshark]\n    Parent Identifier: Wireshark \n```", "```\nfor(NSString* key in storage.itemsByUserIdentifier) {\n    NSArray* items = storage.itemsByUserIdentifier[key];\n\n    for(ItemRecord* item in items) {\n        NSURL* url = item.url;\n        NSString* name = item.name;\n        NSString* path = item.executablePath;\n        ...\n    }\n} \n```", "```\n#define KEY_BTM_ITEM_URL @\"url\"\n#define KEY_BTM_ITEM_UUID @\"uuid\"\n#define KEY_BTM_ITEM_NAME @\"name\"\n#define KEY_BTM_ITEM_EXE_PATH @\"executablePath\"\n\nNSDictionary* toDictionary(ItemRecord* item) {\n    NSMutableDictionary* dictionary = [NSMutableDictionary dictionary];\n\n    dictionary[KEY_BTM_ITEM_UUID] = item.uuid;\n    dictionary[KEY_BTM_ITEM_URL] = item.url;\n    dictionary[KEY_BTM_ITEM_NAME] = item.name;\n    dictionary[KEY_BTM_ITEM_EXE_PATH] = item.executablePath;\n    ...\n    return dictionary;\n} \n```", "```\n❶ #import \"dumpBTM.h\"\n...\n\n❷ NSDictionary* contents = parseBTM(nil);\n\n❸ for(NSString* uuid in contents[KEY_BTM_ITEMS_BY_USER_ID]) {\n    for(NSDictionary* item in contents[KEY_BTM_ITEMS_BY_USER_ID][uuid]) {\n        // Add code to process each persistent item.\n    }\n} \n```"]