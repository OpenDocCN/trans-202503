- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Tips and Tricks
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 提示与技巧
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll build confidence in your new MySQL skills by reviewing
    common pitfalls and how to avoid them. Then, you’ll look at transactions and the
    MySQL command line client. You’ll also learn how to load data to and from files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过回顾常见的陷阱及其避免方法，增强你对MySQL技能的信心。然后，你将学习事务和MySQL命令行客户端。你还将学习如何从文件中加载数据或将数据加载到文件中。
- en: Common Mistakes
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见错误
- en: MySQL can process sets of information very quickly. You can update thousands
    of rows in the blink of an eye. While this gives you a lot of power, it also means
    there is greater potential for mistakes, like running SQL against the wrong database
    or server or running partial SQL statements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL可以非常快速地处理大量信息。你可以在眨眼之间更新成千上万行。虽然这给你带来了很大的能力，但也意味着更容易出现错误，比如在错误的数据库或服务器上运行SQL，或运行部分SQL语句。
- en: Working in the Wrong Database
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在错误的数据库中工作
- en: When working with relational databases like MySQL, you need to be cognizant
    of which database you’re working in. It’s surprisingly common to run a SQL statement
    in the wrong one. Let’s look at some ways you can avoid it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用像MySQL这样的关系型数据库时，你需要时刻注意自己在使用哪个数据库。将SQL语句运行在错误的数据库中是一个相当常见的错误。让我们来看看一些可以避免它的方法。
- en: Say you’ve been asked to create a new database called `distribution` and to
    create a table called `employee`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你被要求创建一个名为`distribution`的新数据库，并创建一个名为`employee`的表。
- en: 'You might use these SQL commands:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会使用以下SQL命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you’re using MySQL Workbench to run the commands, you’ll see two green checkmarks
    in the lower panel telling you that your database and table were successfully
    created ([Figure 14-1](#figure14-1)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用MySQL Workbench来运行这些命令，你会看到下方面板中有两个绿色勾号，告诉你数据库和表已经成功创建（[图 14-1](#figure14-1)）。
- en: '![](image_fi/503007c14/f14001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c14/f14001.png)'
- en: 'Figure 14-1: You used MySQL Workbench to create an `employee` table in the
    `distribution` database . . . didn’t you?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-1：你使用MySQL Workbench在`distribution`数据库中创建了一个`employee`表……对吧？
- en: Everything looks good, so you declare victory and move on to your next task.
    Then you start to get calls saying that the table wasn’t created. What went wrong?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来都很顺利，因此你宣布任务完成并开始下一个任务。然后你开始接到电话，说表格没有创建。到底哪里出了问题？
- en: 'Although you created the `distribution` database, you didn’t set your current
    database to `distribution` before you created the table. Your new `employee` table
    instead was created in whatever your current database happened to be at the time.
    You should have included the `use` command before you created the table, like
    so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你创建了`distribution`数据库，但在创建表之前没有将当前数据库设置为`distribution`。你的新`employee`表实际上是在你当时所在的任何当前数据库中创建的。你应该在创建表之前使用`use`命令，像这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'One way to avoid creating a table in the wrong database is to *fully qualify*
    the table name when you create it. You can specify the name of the database to
    create the table in, so that even if you aren’t currently in that database, the
    table will be created there. Here you specify that you want to create the `employee`
    table in the `distribution` database:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在错误数据库中创建表的一种方法是*完全限定*表名。你可以指定创建表所在的数据库名称，即使你当前不在那个数据库中，表也会在那里创建。在此，你指定要在`distribution`数据库中创建`employee`表：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another way you could have avoided creating the table in the wrong database
    is by checking what your current database was before creating the table, like
    so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在创建表之前检查当前数据库来避免将表创建在错误的数据库中，方法如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If your result was anything other than `distribution`, this would have alerted
    you that you forgot to correctly set your current database with the `use` command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的结果不是`distribution`，这将提醒你忘记使用`use`命令正确设置当前数据库。
- en: You can fix such a mistake by figuring out which database the `employee` table
    was created in, dropping the table, and then re-creating the `employee` table
    in the `distribution` database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查明`employee`表创建在哪个数据库中，删除该表，并在`distribution`数据库中重新创建`employee`表来修复这个错误。
- en: 'To determine which database or databases have an `employee` table, run this
    query:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定哪个数据库或数据库中有`employee`表，请运行以下查询：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You’ve queried the `tables` table in the `information_schema` database, and
    selected the `create_time` column to see if this table was created recently. The
    output is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你查询了`information_schema`数据库中的`tables`表，并选择了`create_time`列来查看该表是否是最近创建的。输出如下：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It’s possible that you could have different tables named `employee` in more
    than one database. If that were the case, your query would have returned more
    than one row. But in this example, the only database with an `employee` table
    is `bank`, so that’s where your table was mistakenly created.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在多个数据库中都有名为`employee`的表。如果是这种情况，你的查询将返回多行。但在这个例子中，唯一有`employee`表的数据库是`bank`，所以表被错误地创建在这里。
- en: 'As an extra check, see how many rows are in the `employee` table:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的检查，查看`employee`表中有多少行：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are no rows in this table, which is expected for a table that was created
    by mistake. Confident that the `employee` table in the `bank` database is the
    one you accidentally created in the wrong place, you can now run these commands
    to correct your mistake:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表中没有任何行，这对于一个错误创建的表来说是可以预期的。你已经确认`bank`数据库中的`employee`表是你错误创建在错误位置的那个表，现在你可以运行这些命令来纠正你的错误：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your `employee` table in the `bank` database has been removed, and an `employee`
    table in the `distribution` database has been created.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`bank`数据库中的`employee`表已经被删除，而在`distribution`数据库中创建了一个`employee`表。
- en: 'You could have moved the table from one database to the other with the `alter
    table` command instead, like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以使用`alter table`命令将表从一个数据库移动到另一个数据库，像这样：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It’s preferable to drop and re-create a table rather than altering the table,
    however, especially if the table has triggers or foreign keys associated with
    it that might still be pointing to the wrong database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是删除并重新创建表，而不是修改表，特别是如果表中有触发器或外键关联，可能仍然指向错误的数据库。
- en: Using the Wrong Server
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用错误的服务器
- en: Sometimes, SQL statements can be executed against the wrong MySQL server. Companies
    often set up different servers for production and development. The *production*
    environment is the live environment that end users access, so you want to be careful
    with its data. The *development* environment is where developers test new code.
    Since the data in this environment is seen only by developers, you should always
    test your SQL statements here before releasing them to production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，SQL 语句可能会在错误的 MySQL 服务器上执行。公司通常会为生产和开发设置不同的服务器。*生产*环境是最终用户访问的实时环境，因此你需要小心其数据。*开发*环境是开发者测试新代码的地方。由于该环境中的数据只有开发者可见，因此你应该始终在这里测试
    SQL 语句，然后再发布到生产环境。
- en: 'It’s not unusual for a developer to have two windows open: one connected to
    the production server and one connected to the development server. If you’re not
    careful, you can make changes in the wrong window.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者有两个窗口同时打开的情况并不罕见：一个连接到生产服务器，另一个连接到开发服务器。如果不小心，你可能会在错误的窗口中进行更改。
- en: If you’re using a tool like MySQL Workbench, consider naming your connections
    *Production* and *Development* so that its tabs clearly state which environment
    is which (see [Figure 14-2](#figure14-2)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是像 MySQL Workbench 这样的工具，建议将连接命名为*生产*和*开发*，这样它的标签可以清晰地标明哪个环境是哪个（见[图 14-2](#figure14-2)）。
- en: '![](image_fi/503007c14/f14002.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c14/f14002.png)'
- en: 'Figure 14-2: Naming the MySQL Workbench tabs Development and Production'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-2：命名 MySQL Workbench 标签为开发和生产
- en: To name connections in MySQL Workbench, go to **Database**▶**Manage Connections**.
    In the Setup New Connection window that opens, enter a connection name like Development
    or Production that specifies the environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 MySQL Workbench 中命名连接，请进入**数据库**▶**管理连接**。在打开的设置新连接窗口中，输入一个连接名称，如 Development
    或 Production，以指定环境。
- en: Other tools have similar ways to mark production and development environments.
    Some allow you to change the background color, so you might consider setting your
    production screen to red as a reminder to be careful in that environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其他工具也有类似的方式来标记生产和开发环境。有些允许你更改背景色，因此你可以考虑将生产环境的背景色设置为红色，提醒自己在该环境下要小心。
- en: Leaving where Clauses Incomplete
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离开不完整的 `where` 子句
- en: When you insert, update, or delete data in a table, it’s crucial that your `where`
    clause is complete. If it isn’t, you run the risk of changing unintended rows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你插入、更新或删除表中的数据时，确保你的`where`子句完整至关重要。如果不完整，你可能会更改到不希望更改的行。
- en: 'Imagine you own a used car dealership and you store the cars you have in stock
    in the `inventory` table. Check what’s in the table:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你经营一家二手车经销商，并且你将库存中的车辆存储在`inventory`表中。查看表中的内容：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The results are:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Looking at a Ford Focus on the lot, you notice that you have it listed as green,
    but its color is actually closer to blue. You decide to update its color in the
    database ([Listing 14-1](#listing14-1)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 看着场地上的一辆福特福克斯，你注意到它被列为绿色，但它的颜色实际上更接近蓝色。你决定在数据库中更新它的颜色（[清单14-1](#listing14-1)）。
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 14-1: An `update` statement with incomplete criteria in the `where`
    clause'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 清单14-1：`update`语句中`where`子句缺少条件
- en: When you run the `update` statement, you’re surprised to see MySQL return a
    message of `3 row(s) affected`. You meant to update only one row, but it appears
    that three rows were changed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`update`语句时，你惊讶地看到MySQL返回了`3 row(s) affected`的消息。你原本只打算更新一行，但似乎有三行被更改了。
- en: 'You run a query to see what happened:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你运行查询以查看发生了什么：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The results are:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Because the `where` clause in your `update` statement was missing criteria,
    you mistakenly updated the color of every Ford Focus in the table to `blue`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`update`语句中的`where`子句缺少条件，你错误地将表中所有福特福克斯的颜色更新为`blue`。
- en: 'Your `update` statement in [Listing 14-1](#listing14-1) should have been:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[清单14-1](#listing14-1)中的`update`语句应该是：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last line is missing in [Listing 14-1](#listing14-1). With this additional
    criteria, the `update` statement would have changed just *green* Ford Focuses
    to blue. Since you had only one green Ford Focus on the lot, only the correct
    car would have been updated.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行在[清单14-1](#listing14-1)中缺失。添加这个条件后，`update`语句只会将*绿色*福特福克斯更新为蓝色。因为你场地上只有一辆绿色福特福克斯，所以只会更新正确的车辆。
- en: 'A more efficient way to do the update would have been to use the VIN (Vehicle
    Identification Number) in your `where` clause:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更高效的更新方式是使用`where`子句中的VIN（车辆识别号码）：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since each car has a distinct VIN, with this approach you are guaranteed that
    your `update` statement will update just one vehicle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每辆车都有独特的VIN，采用这种方法，你可以确保`update`语句只会更新一辆车。
- en: Either of these `update` statements would have provided enough criteria to identify
    the one row you intended to change, and you would have updated just that row.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个`update`语句都提供了足够的条件来识别你想要更改的那一行，因此你只会更新该行。
- en: 'A simple sanity check you can perform before you insert, update, or delete
    rows is to `select` from the table using the same `where` clause. For example,
    if you were planning to run the `update` statement in [Listing 14-1](#listing14-1),
    you would run this `select` statement first:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入、更新或删除行之前，你可以执行一个简单的完整性检查，即使用相同的`where`子句从表中`select`。例如，如果你计划运行[清单14-1](#listing14-1)中的`update`语句，你应该首先运行这个`select`语句：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The results would have been:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该是：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The query produces a list of the rows that you are about to update. If you really
    wanted to update all three rows, you could then run the `update` statement that
    uses the same `where` clause. In this case, you would have recognized that this
    `where` clause in your `select` statement matched too many rows and could have
    avoided updating more than the single row you intended.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查询会生成你即将更新的行列表。如果你确实想更新所有三行，那么你可以运行使用相同`where`子句的`update`语句。在这种情况下，你会发现`select`语句中的`where`子句匹配了太多行，能够避免更新超过你预期的单行。
- en: Running Partial SQL Statements
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行部分SQL语句
- en: MySQL Workbench has three lightning bolt icons that can be used for executing
    SQL statements in different ways. Each icon’s actions are listed in [Table 14-1](#table14-1).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Workbench有三个闪电图标，可以用于以不同方式执行SQL语句。每个图标的操作列在[表14-1](#table14-1)中。
- en: 'Table 14-1: Lightning Bolt Icons in MySQL Workbench'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-1：MySQL Workbench中的闪电图标
- en: '| Simple lightning bolt ![i14001](image_fi/503007c14/i14001.png) | Executes
    the selected statements or, if nothing is selected, all statements |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 简单闪电图标 ![i14001](image_fi/503007c14/i14001.png) | 执行选定的语句，或者如果没有选定语句，则执行所有语句
    |'
- en: '| Cursor lightning bolt ![i14002](image_fi/503007c14/i14002.png) | Executes
    the statement under the keyboard cursor |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 光标闪电图标 ![i14002](image_fi/503007c14/i14002.png) | 执行键盘光标下的语句 |'
- en: '| Magnifying glass lightning bolt ![i14003](image_fi/503007c14/i14003.png)
    | Executes the EXPLAIN plan for the statement under the cursor |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 放大镜闪电图标 ![i14003](image_fi/503007c14/i14003.png) | 执行光标下语句的EXPLAIN计划 |'
- en: Most MySQL Workbench users will use the simple and cursor lightning bolt icons
    for their day-to-day work. The magnifying glass lightning bolt is used less often,
    as it is an optimization tool that explains what steps MySQL would take to run
    your query.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数MySQL Workbench用户会使用简单和光标闪电图标来进行日常工作。放大镜闪电图标使用得较少，因为它是一个优化工具，用于解释MySQL执行查询时将采取的步骤。
- en: 'If you use the simple lightning bolt icon without realizing part of your SQL
    statement is highlighted, you’ll inadvertently run that highlighted section. For
    example, say you want to delete the Toyota Prius from the `inventory` table. You
    write the following `delete` statement to delete the car with the Prius’s VIN:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用简单的闪电图标而没有注意到SQL语句的部分被高亮显示，你会无意中执行被高亮的部分。例如，假设你想从`inventory`表中删除一辆丰田普锐斯。你写了以下`delete`语句来删除具有普锐斯VIN的那辆车：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, you’ll use MySQL Workbench to run your `delete` statement ([Figure 14-3](#figure14-3)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将使用MySQL Workbench来执行你的`delete`语句（[图14-3](#figure14-3)）。
- en: '![](image_fi/503007c14/f14003.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c14/f14003.png)'
- en: 'Figure 14-3: Mistakenly deleting all rows in the table using MySQL Workbench'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-3：使用MySQL Workbench错误地删除表中的所有行
- en: When you click the simple lightning bolt icon, MySQL tells you that all rows
    in the table were deleted. What happened?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击简单的闪电图标时，MySQL告诉你表中的所有行都已被删除。发生了什么？
- en: Before you ran the `delete` statement, you mistakenly highlighted the first
    line of the SQL command. This told MySQL to delete all rows in the table, rather
    than the one you attempted to specify.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`delete`语句之前，你错误地高亮了SQL命令的第一行。这导致MySQL删除了表中的所有行，而不是你原本想要删除的那一行。
- en: Transactions
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事务
- en: 'You can lessen the possibility of mistakes by executing statements as part
    of a transaction. A *transaction* is a group of one or more SQL statements that
    can be *committed* (made permanent) or *rolled* *back* (canceled). For example,
    before updating your `inventory` table, you could use the `start transaction`
    command to begin a transaction that you can later commit or roll back:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将语句作为事务的一部分执行，你可以减少错误的发生概率。一个*事务*是一组可以被*提交*（使永久）或*回滚*（取消）的一个或多个SQL语句。例如，在更新`inventory`表之前，你可以使用`start
    transaction`命令开始一个事务，稍后可以提交或回滚该事务：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `begin` command is an alias for `start transaction`. You can use either.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`begin`命令是`start transaction`的别名，你可以使用任意一个。'
- en: 'If you run your `update` statement and MySQL returns a message of `3 row(s)
    affected`, but you were expecting one row to be changed, you can roll back the
    transaction:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`update`语句时，MySQL返回`3 row(s) affected`的消息，但你本来预期只有一行被修改，你可以回滚事务：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Your `update` gets rolled back, the changes are canceled, and the rows remain
    unchanged in the table. To make the changes permanent, commit the transaction:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`update`语句被回滚，所有更改都被取消，表中的行保持不变。要使更改生效，请提交事务：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Transactions are helpful when you’re using Data Manipulation Language (DML)
    statements like `insert`, `update`, or `delete`. Data Definition Language (DDL)
    statements like `create function`, `drop procedure`, or `alter table` shouldn’t
    be made in a transaction. They can’t be rolled back—running them will automatically
    commit the transaction.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用数据操作语言（DML）语句，如`insert`、`update`或`delete`时，事务是很有帮助的。数据定义语言（DDL）语句，如`create
    function`、`drop procedure`或`alter table`，不应在事务中执行。这些语句无法回滚，执行时会自动提交事务。
- en: Until you commit or roll back your `update` statement, MySQL will keep the table
    locked. For example, if you run these commands
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在你提交或回滚`update`语句之前，MySQL会保持表的锁定。例如，如果你运行以下命令：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: the `inventory` table will remain locked and no other users will be able to
    make changes to its data until you commit or roll back your changes. If you start
    the transaction and then go to lunch without committing or rolling it back, you
    might come back to some angry database users.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`inventory`表将保持锁定，直到你提交或回滚更改，其他用户无法修改表中的数据。如果你开始事务后去吃午餐，却没有提交或回滚，可能会回来面对一些愤怒的数据库用户。'
- en: Supporting an Existing System
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持现有系统
- en: You may find yourself supporting a MySQL system that has already been developed.
    A good way to start to understand an existing system is by browsing through its
    database objects using MySQL Workbench ([Figure 14-4](#figure14-4)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到需要支持一个已经开发好的MySQL系统。理解现有系统的一个好方法是通过MySQL Workbench浏览其数据库对象（[图14-4](#figure14-4)）。
- en: You can learn a lot about an existing system by exploring using MySQL’s navigator
    panel. Are there many databases with a few tables in each one, or are there one
    or two databases with a lot of tables in each? What are the naming conventions
    you should follow? Are there many stored procedures, or is most of the business
    logic handled outside of MySQL in a programming language like PHP or Python? Have
    primary and foreign keys been set up for most tables? Do they use many triggers?
    Looking at the procedures, functions, and triggers, which delimiter do they use?
    Check the existing database objects and follow that lead when it comes to naming
    conventions for any new code you add to the system.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 MySQL 的导航面板，了解现有系统的许多信息。数据库里是有许多包含少量表的数据库，还是有一个或两个包含大量表的数据库？你应该遵循什么命名规范？是否有许多存储过程，还是大部分业务逻辑是通过像
    PHP 或 Python 这样的编程语言在 MySQL 外部处理的？大部分表是否已经设置了主键和外键？是否使用了很多触发器？查看存储过程、函数和触发器时，使用了什么分隔符？检查现有数据库对象，并在你为系统添加任何新代码时遵循它们的命名规范。
- en: '![](image_fi/503007c14/f14004.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c14/f14004.png)'
- en: 'Figure 14-4: Exploring an existing MySQL database'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-4：探索现有的 MySQL 数据库
- en: Sometimes the hardest part of supporting an existing system is understanding
    the problem set and terminology of the application. A good first question for
    you to ask is, “What are the most important tables?” Focus your attention on learning
    about them first. You can select from the table and understand how those primary
    key values uniquely identify the rows in the table. Check for triggers on those
    tables and look through the trigger code to understand what actions happen automatically
    when data in the tables is changed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，支持现有系统最困难的部分是理解应用程序的问题集和术语。你可以提出的第一个好问题是：“最重要的表是什么？”首先将注意力集中在了解这些表上。你可以从表中选择，并理解这些主键值如何唯一地标识表中的行。检查这些表上的触发器，查看触发器代码，了解当表中的数据发生更改时会自动执行哪些操作。
- en: MySQL Workbench also presents a nice graphical depiction of the way that MySQL
    objects hang together. For example, you can see in [Figure 14-4](#figure14-4)
    that databases have tables, stored procedures, and functions. Tables have columns,
    indexes, foreign keys, and triggers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Workbench 还以图形化的方式展示了 MySQL 对象之间的关系。例如，你可以在[图 14-4](#figure14-4)中看到，数据库包含表、存储过程和函数。表包含列、索引、外键和触发器。
- en: Using the MySQL Command Line Client
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MySQL 命令行客户端
- en: The MySQL command line client, `mysql`, allows you to run SQL commands from
    the command line interface of your computer (often called the *console*, *command*
    *prompt*, or *terminal*). This is useful in situations where you want to run SQL
    statements against a MySQL database but don’t need a graphical user interface
    like MySQL Workbench.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 命令行客户端`mysql`允许你从计算机的命令行界面（通常叫做*控制台*、*命令提示符*或*终端*）运行 SQL 命令。这在你希望对 MySQL
    数据库执行 SQL 语句，但又不需要像 MySQL Workbench 这样的图形用户界面时非常有用。
- en: 'At the command line of your computer, enter `mysql` to start the MySQL command
    line client tool, and supply additional information like:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在你计算机的命令行界面输入`mysql`来启动 MySQL 命令行客户端工具，并提供更多信息，例如：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can also use single-letter options with a single dash—for example, `-h`
    instead of `--host`; `-D` for `--database`; and `-u` and `-p` for `--user` and
    `--password=`, respectively.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用单个字母选项并且只加一个短横线——例如，使用`-h`代替`--host`；`-D`代替`--database`；`-u`和`-p`分别代替`--user`和`--password=`。
- en: You specify the host where the MySQL server is located with `--host`. In this
    example, the MySQL server is installed on my computer, so I’ve supplied the value
    `localhost`. If you’re connecting to a server that’s installed on another computer,
    you can the specify the host, like `--host www.nostarch.com`, or supply an IP
    address.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`--host`指定 MySQL 服务器所在的主机。在这个例子中，MySQL 服务器安装在我的计算机上，所以我提供了`localhost`作为值。如果你要连接的是安装在另一台计算机上的服务器，可以指定该主机，例如`--host
    www.nostarch.com`，或者提供一个 IP 地址。
- en: Then, enter the name of the database you want to connect to after `--database`,
    your MySQL user ID after `--user`, and your MySQL password after the `--password=`
    option.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`--database`后输入你想要连接的数据库名称，在`--user`后输入你的 MySQL 用户 ID，在`--password=`后输入你的
    MySQL 密码。
- en: 'You should see this warning:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下警告：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'That’s because you supplied the database password in plaintext. This isn’t
    a great idea, as anyone looking over your shoulder could see your password. A
    more secure approach is to let `mysql` prompt you for it. If you use `-p` at the
    command line without specifying the password, the tool will prompt you to enter
    the password. As you type the letters of the password, asterisks will appear:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你以明文形式提供了数据库密码。这样做并不好，因为任何在你肩膀后面的人都能看到你的密码。更安全的做法是让 `mysql` 提示你输入密码。如果你在命令行中使用
    `-p` 而不指定密码，工具会提示你输入密码。当你输入密码时，星号将显示出来：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Another approach is to use the MySQL configuration utility to securely store
    your credentials:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用 MySQL 配置工具来安全地存储你的凭证：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You specify host and user with the `--host` and `--user` options. The `--password`
    option allows you to enter your password.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `--host` 和 `--user` 选项来指定主机和用户。`--password` 选项允许你输入密码。
- en: 'Once you have saved credentials, you can use the `print --all` option to show
    them:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你保存了凭证，你可以使用 `print --all` 选项来显示它们：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The password appears as asterisks:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 密码会以星号的形式显示：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now you can enter the MySQL command line client, `mysql`, at the command line
    without having to enter your username, password, or host:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在命令行中输入 `mysql` 进入 MySQL 命令行客户端，而不需要输入用户名、密码或主机：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In other words, you can log in to MySQL by providing only the name of the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，你只需提供数据库的名称即可登录到 MySQL。
- en: 'You might wonder why you would use a text-based tool like `mysql` when more
    sophisticated graphical tools like MySQL Workbench are available. The `mysql`
    tool is particularly useful when you want to run SQL statements that are in a
    script file. A *script file* is a set of SQL commands saved in a file on your
    computer. For example, you could create a file called *max_and_min_indexes.sql*
    that contains the following SQL statements, which get the market index with the
    smallest and largest values:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，既然有更复杂的图形工具如 MySQL Workbench，为什么还要使用像 `mysql` 这样的基于文本的工具。`mysql` 工具特别有用当你想要运行保存在脚本文件中的
    SQL 语句时。*脚本文件* 是一组 SQL 命令，保存在你计算机上的文件中。例如，你可以创建一个名为 *max_and_min_indexes.sql*
    的文件，文件中包含以下 SQL 语句，用来获取市场指数中最小和最大的值：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can then run the SQL script from your command line using `mysql`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用 `mysql` 从命令行运行 SQL 脚本：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You used `<` so that `mysql` will take its input from the *min_and_max.sql*
    script, and `>` so that it will write its output to the *min_and_max.txt* file.
    If you supply the password, in this case `icu2`, don’t add a space after `-p`.
    Strangely, `-picu2` works but `-p icu2` does not.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用 `<` 让 `mysql` 从 *min_and_max.sql* 脚本中获取输入，使用 `>` 让它将输出写入 *min_and_max.txt*
    文件。如果你提供密码，这里是 `icu2`，不要在 `-p` 后加空格。奇怪的是，`-picu2` 可用，但 `-p icu2` 不行。
- en: 'After you run the command, the output file *min_and_max.txt* should look like
    this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，输出文件 *min_and_max.txt* 应该如下所示：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `mysql` tool writes a tab between the columns in the file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql` 工具在文件的列之间插入一个制表符。'
- en: Loading Data from a File
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件加载数据
- en: Oftentimes you’ll get data in the form of files, such as accepting a data feed
    from another organization. The `load data` command reads data from a file and
    writes it into a table.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你会以文件的形式获取数据，例如接受来自其他组织的数据流。`load data` 命令从文件中读取数据并将其写入表中。
- en: 'To test loading data from a file into a table, I created a data file on my
    computer called *market_indexes.txt* in the *C:\Users\rick\market\* directory.
    The file looks like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试从文件加载数据到表中，我在我的计算机上创建了一个数据文件，名为 *market_indexes.txt*，存放在 *C:\Users\rick\market\*
    目录中。文件内容如下：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The file contains the names and current value of three financial market indexes.
    It is *tab-delimited*, which means that the fields in the file are separated by
    the tab character.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含了三个金融市场指数的名称和当前值。它是 *制表符分隔* 的，这意味着文件中的字段由制表符分隔。
- en: 'In MySQL, load the file into a table like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 中，将文件加载到表中，如下所示：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You use the `load data` command and specify `local`, which tells MySQL to look
    for the data file on your local computer, not on the server where MySQL is installed.
    By default, `load data` loads tab-delimited files.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用 `load data` 命令并指定 `local`，这会告诉 MySQL 在你的本地计算机上查找数据文件，而不是在安装了 MySQL 的服务器上。默认情况下，`load
    data` 会加载以制表符分隔的文件。
- en: After the `infile` keyword, you give the name of the input file you want to
    load. In this example, you’re using the path of a file on a Windows computer.
    To specify the directory where the file is located on Windows, use forward slashes,
    as backslashes will result in an error. To load a file in a Mac or Linux environment,
    use forward slashes as usual.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `infile` 关键字之后，你提供要加载的输入文件名。在这个例子中，你使用的是 Windows 计算机上的文件路径。为了指定 Windows 上文件所在的目录，使用正斜杠，因为反斜杠会导致错误。在
    Mac 或 Linux 环境中加载文件时，照常使用正斜杠。
- en: 'Take a look at the data that was loaded into the table:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下加载到表中的数据：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The result is:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There were two fields in the file and two columns in the table, so the fields
    on the left were loaded into the first column and the fields on the right were
    loaded into the second column in the table.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中有两个字段，表中有两列，所以左边的字段加载到表的第一列，右边的字段加载到表的第二列。
- en: 'Another common data file format is a *comma-separated values (CSV)* file. You
    could have loaded a data file called *market_indexes.csv* that looks like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的数据文件格式是*逗号分隔值（CSV）*文件。你可以加载一个名为*market_indexes.csv*的数据文件，内容如下：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: To load this file, add the syntax `fields terminated by ","` to declare the
    delimiter in this file as a comma. MySQL uses the commas in the data file to identify
    the beginning and end of the fields.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载这个文件，添加语法 `fields terminated by ","` 来声明该文件中的分隔符为逗号。MySQL 使用数据文件中的逗号来标识字段的开始和结束。
- en: '[PRE38]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Occasionally, you’ll want to load a data file that has a header row, like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，你需要加载一个包含标题行的数据文件，如下所示：
- en: '[PRE39]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can have `load data` skip the header by using the `ignore` keyword:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `ignore` 关键字让 `load data` 跳过标题行：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There was one header line in the data file, so you used the `ignore 1 lines`
    syntax to prevent the first line from loading into the table. The three rows of
    data are loaded, but the `Financial Index` and `Current Value` headings in the
    data file are ignored.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件中有一行标题，所以你使用 `ignore 1 lines` 语法来防止第一行加载到表中。三行数据被加载，但数据文件中的 `Financial Index`
    和 `Current Value` 标题被忽略。
- en: Loading Data to a File
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据到文件
- en: You can provide data to another department or organization by sending data files.
    One way to write data from the database to a file is to use the syntax `select...into
    outfile`. You can run queries and select the results to a file rather than to
    your screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过发送数据文件将数据提供给其他部门或组织。将数据库中的数据写入文件的一种方式是使用 `select...into outfile` 语法。你可以运行查询并将结果保存到文件中，而不是显示在屏幕上。
- en: 'You can specify which delimiters you want to use to format the output. Create
    a CSV file containing the values in the `market_index` table like so:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定希望使用的分隔符来格式化输出。创建一个 CSV 文件，包含 `market_index` 表中的值，如下所示：
- en: '[PRE41]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You select all values from the `market_index` table and write them to the *market_index.csv*
    file in the *C:/ProgramData/MySQL/MySQL Server 8.0/Uploads* directory on the host
    computer.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你从 `market_index` 表中选择所有值，并将它们写入主机计算机上的*market_index.csv*文件，该文件位于 *C:/ProgramData/MySQL/MySQL
    Server 8.0/Uploads* 目录中。
- en: You use commas as the delimiter in your output file by using the syntax `fields
    terminated by ','`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过使用语法 `fields terminated by ','`，在输出文件中使用逗号作为分隔符。
- en: The `optionally enclosed by` `'"'` line tells MySQL to wrap fields in quotes
    for any columns that have a `string` data type.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`optionally enclosed by` `''"''` 这一行告诉 MySQL 将所有具有 `string` 数据类型的列字段用引号括起来。'
- en: 'Your *market_index.csv* gets created like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你的*market_index.csv*文件是这样创建的：
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `select...into outfile` syntax can create a file only on the server where
    MySQL is running. It can’t create a file on your local computer.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`select...into outfile` 语法只能在 MySQL 运行的服务器上创建文件，不能在你的本地计算机上创建文件。'
- en: MySQL Shell
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL Shell
- en: While the MySQL command line client (`mysql`) is a tried-and-true way to run
    SQL commands that has been used for decades, MySQL Shell (`mysqlsh`) is a newer
    MySQL command line client tool that can run SQL, Python, or JavaScript commands.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 MySQL 命令行客户端（`mysql`）是一种经过验证的、已经使用了数十年的 SQL 命令执行方式，但 MySQL Shell（`mysqlsh`）是一个较新的
    MySQL 命令行客户端工具，可以运行 SQL、Python 或 JavaScript 命令。
- en: 'You saw earlier that the `mysql` syntax to run a script called *min_and_max.sql*
    is:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前看到的，使用 `mysql` 语法运行名为*min_and_max.sql*的脚本是：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you prefer, you could use MySQL Shell to run that same script using this
    command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以使用 MySQL Shell 通过以下命令运行相同的脚本：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The syntax is similar, except you call `mysqlsh` instead of `mysql`. Also, since
    `mysqlsh` can run in SQL, Python, or JavaScript mode, you need to specify `--sql`
    to run in SQL mode. (The default mode is JavaScript.)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 语法类似，唯一的区别是你调用的是`mysqlsh`而不是`mysql`。此外，由于`mysqlsh`可以在SQL、Python或JavaScript模式下运行，你需要指定`--sql`来运行SQL模式。（默认模式是JavaScript。）
- en: MySQL Shell comes with a handy utility called *parallel table import* (`import-table`)
    that can load large data files to tables faster than `load data`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Shell自带一个名为*parallel table import*（`import-table`）的实用工具，可以比`load data`更快地将大数据文件加载到表中。
- en: '[PRE45]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When you use the `import-table` utility, you need to call `mysqlsh` with the
    `--mysql` syntax ❶ to use a classic MySQL protocol connection to communicate between
    the client and the MySQL server.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`import-table`工具时，需要用`--mysql`语法❶来调用`mysqlsh`，以使用经典的MySQL协议连接进行客户端和MySQL服务器之间的通信。
- en: To run the parallel table import utility, use the `-- util` syntax and then
    give the name of the utility you want to use—in this case, `import-table` ❷. You
    provide the name of the file you want to load, *c:\Users\rick\market_indexes.txt*,
    and the database, `investment`, as well as the table that you want to load the
    data into, `market_index`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行并行表导入工具，请使用`-- util`语法，然后提供你想要使用的工具名称——在这种情况下是`import-table`❷。你需要提供要加载的文件名称，*c:\Users\rick\market_indexes.txt*，以及数据库`investment`和你想要将数据加载到的表`market_index`。
- en: The choice to use `mysql` or `mysqlsh` is yours. As `mysqlsh` matures, more
    developers will move to it and away from `mysql`. If you have a large data load
    that is slow to run, using `mysqlsh` with its parallel table import utility will
    be considerably faster than using `load data`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mysql`还是`mysqlsh`由你自己决定。随着`mysqlsh`的逐渐成熟，更多的开发者将转向使用它，而不再使用`mysql`。如果你有一个数据量大且运行缓慢的任务，使用`mysqlsh`的并行表导入工具会比使用`load
    data`快得多。
- en: You can learn more about MySQL Shell at [https://dev.mysql.com/doc/mysql-shell/8.0/en/](https://dev.mysql.com/doc/mysql-shell/8.0/en/).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://dev.mysql.com/doc/mysql-shell/8.0/en/](https://dev.mysql.com/doc/mysql-shell/8.0/en/)了解更多关于MySQL
    Shell的信息。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you looked at some tips and tricks, including how to avoid
    making common mistakes, use transactions, support existing systems, and load data
    to and from files.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了一些技巧和窍门，包括如何避免常见错误、使用事务、支持现有系统以及如何从文件中加载数据。
- en: In the next chapter, you’ll call MySQL from programming languages like PHP,
    Python, and Java.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何从PHP、Python和Java等编程语言调用MySQL。
