- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Code Reviews
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查
- en: Most teams require code changes to be reviewed before they’re merged. A culture
    of high-quality code reviews helps engineers of all experience levels grow and
    promotes a shared understanding of the codebase. A poor code review culture inhibits
    innovation, slows down development, and builds resentment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数团队要求在合并代码之前进行审查。高质量代码审查的文化帮助各个经验层级的工程师成长，并促进对代码库的共同理解。糟糕的代码审查文化会抑制创新，减缓开发进度，并导致怨恨。
- en: Your team will expect you to participate in code reviews—both to give and to
    receive them. Code reviews can bring out impostor syndrome and the Dunning–Kruger
    effect—phenomena that we discuss in Chapter 2\. Both review anxiety and overconfidence
    are natural, but you can overcome them when armed with the right context and skills.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 团队会期望你参与代码审查——既要进行审查，也要接受审查。代码审查可能会引发冒充者综合症和达克效应——这些现象我们在第二章讨论过。审查焦虑和过度自信是自然的，但当你掌握了正确的上下文和技能后，可以克服它们。
- en: This chapter explains why code reviews are useful and how to be a good reviewer
    and reviewee. We’ll show you how to get your code reviewed and how to respond
    when you get feedback. Then, we’ll flip roles and show you how to be a good reviewer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了为什么代码审查很有用，以及如何成为一名优秀的审查者和被审查者。我们将展示如何让你的代码接受审查，以及如何回应反馈。然后，我们将转换角色，展示如何成为一名优秀的审查者。
- en: Why Review Code?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要审查代码？
- en: A well-executed code review is extremely valuable. There are obvious, superficial
    benefits—reviews can catch bugs and keep code clean—but a code review’s value
    goes beyond having humans stand in for automated tests and linters. Good reviews
    act as a teaching tool, spread awareness, document implementation decisions, and
    provide change records for security and compliance.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一次执行良好的代码审查是非常宝贵的。它有明显的表面效益——审查可以捕捉到错误并保持代码的清晰——但代码审查的价值超出了人类代替自动化测试和代码检查工具的功能。良好的审查可以作为一种教学工具，传播意识，记录实现决策，并为安全和合规提供更改记录。
- en: Code reviews act as a teaching and learning tool for your team. You can learn
    from the feedback that your code reviews get. Reviewers will point out useful
    libraries and coding practices that you might not be aware of. You can also read
    code review requests from more senior teammates to learn about the codebase and
    to learn how to write production-grade code (see Chapter 4 for more on writing
    production code). Code reviews are also an easy way to learn your team’s coding
    style.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是团队的教学和学习工具。你可以从自己代码审查的反馈中学习。审查者会指出你可能没有注意到的有用库和编码实践。你还可以通过阅读更资深队友的代码审查请求来学习代码库，并学习如何编写生产级代码（关于编写生产代码的更多内容，请参见第四章）。代码审查也是了解团队编码风格的一个简单方式。
- en: Reviewing changes to the codebase ensures that more than one person is familiar
    with every line of production code. A shared understanding of the codebase helps
    the team evolve code more cohesively. Having others know what you’re changing
    means you’re not the only one the team can go to if things go wrong. On-call engineers
    will have added context about what code changed when. This shared knowledge means
    you can take a vacation without worrying about having to support your code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 审查代码库的更改确保了不仅仅一个人熟悉每一行生产代码。对代码库的共同理解有助于团队更加有凝聚力地发展代码。让别人知道你在改变什么，意味着在问题发生时，团队不只依赖你一个人。如果出现问题，值班工程师将能够获得有关代码更改的更多上下文。这种共享知识意味着你可以放心地休假，而不必担心支持你的代码。
- en: Records of review comments also serve as documentation, explaining why things
    were done as they were. It’s not always obvious why code is written in a certain
    way. Code reviews act as an archive for implementation decisions. Having older
    code reviews to consult provides developers with a written history.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 审查评论的记录也作为文档，解释为什么代码是以这种方式编写的。代码为什么要以某种方式编写并不总是显而易见的。代码审查充当了实现决策的档案。拥有过去的代码审查记录可以为开发人员提供书面的历史资料。
- en: Reviews might even be required for security and compliance purposes. Security
    and compliance policies often prescribe code reviews as a way to prevent any single
    developer from maliciously modifying a codebase.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 审查可能甚至是出于安全和合规目的而要求的。安全和合规政策通常会规定代码审查作为防止单个开发人员恶意修改代码库的手段。
- en: All these benefits of code reviews apply only when all the participants are
    able to work in a “high trust” environment, in which reviewers are intentional
    about providing useful feedback and reviewees are open to input. Poorly executed
    reviews become toxic impediments. Thoughtless feedback provides no value and slows
    developers down. Slow turn-around time can grind code changes to a halt. Without
    the right culture, developers can get into knock-down-drag-out disagreements that
    can ruin a team. Reviews are not an opportunity to prove how smart you are, nor
    are they a rubber-stamping bureaucratic hurdle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码评审的好处仅在所有参与者都能在“高信任”环境中工作时才有效，在这种环境中，评审者有意提供有价值的反馈，而被评审者也愿意接受意见。执行不当的评审会变成有害的障碍。草率的反馈没有价值，反而会拖慢开发者的速度。缓慢的反馈周期可能导致代码更改停滞不前。如果没有正确的文化，开发者可能会陷入恶性争执，这可能会破坏团队。评审不是一个证明你有多聪明的机会，也不是一个走过场的官僚障碍。
- en: Getting Your Code Reviewed
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取你的代码评审
- en: Code changes are prepared, submitted, reviewed, and finally approved and merged.
    Developers start by preparing their code for submission. Once code is ready, they
    submit the changes, creating a “review request,” and reviewers are notified. If
    there’s feedback, back-and-forth discussion occurs, and changes are made. The
    review is then approved and merged into the codebase.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码更改被准备、提交、评审，最终批准并合并。开发者首先准备好代码以进行提交。一旦代码准备就绪，他们提交更改并创建“评审请求”，然后评审者会收到通知。如果有反馈，就会进行反复讨论并做出更改。评审通过后，代码会被批准并合并到代码库中。
- en: Prepare Your Review
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备你的评审
- en: 'A well-prepared review request makes it easy for developers to understand what
    you’re doing and provide constructive feedback. Follow the VCS guidance that we
    give in Chapter 3: keep individual code changes small, separate feature and refactoring
    work into different reviews, and write descriptive commit messages. Include comments
    and tests. Don’t get attached to the code you submit for review; expect it to
    change, sometimes significantly, as it goes through the process.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 精心准备的评审请求使开发者更容易理解你正在做什么并提供建设性反馈。请遵循第3章中提供的版本控制系统（VCS）指导：保持单个代码更改的小规模，将功能和重构工作分成不同的评审，并编写描述性提交信息。包括注释和测试。不要对提交的代码过于依赖；在评审过程中，它可能会发生变化，有时甚至是显著的变化。
- en: 'Include a title and description, add reviewers, and link to the issue that
    your review request is resolving. The title and description are not the same as
    a commit message. The request’s title and description should include added context
    about how the changes were tested, links to other resources, and callouts on open
    questions or implementation details. Here’s an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包括标题和描述，添加评审人，并链接到你的评审请求所解决的问题。标题和描述不同于提交信息。请求的标题和描述应包括关于如何测试变更的背景、其他资源的链接以及未解决问题或实现细节的说明。以下是一个示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This request example follows several best practices. Both individual reviewers
    and the entire UI/UX team are added to the review. The title references the issue
    that’s being fixed (UI-1343). Using a standard formatting convention for issue
    references enables integrations that automatically link issue trackers with code
    reviews. This is helpful when referring to older issues later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求示例遵循了多个最佳实践。单个评审者和整个UI/UX团队都被添加到评审中。标题引用了正在修复的问题（UI-1343）。使用标准格式化约定来引用问题，可以使集成自动将问题跟踪器与代码评审关联起来。这在后续引用旧问题时非常有用。
- en: The description in the review also fills out a code review template that was
    included with the repository. Some repositories have a description template that
    gives reviewers important context about the change. A change that modifies a public-facing
    API might need added scrutiny, for example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 评审中的描述也填写了与代码库一起提供的代码评审模板。某些代码库有描述模板，为评审者提供有关更改的重要背景。例如，修改公共接口的更改可能需要额外的审查。
- en: De-risk with Draft Reviews
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过草稿评审降低风险
- en: 'Many developers think best by coding. Draft changes are a great way to think
    through and propose a change without investing as much time in writing tests,
    polishing code, and adding documentation. You can sanity-check what you’re doing
    by submitting a *draft review*: an informal review request intended to get quick
    and cheap feedback from teammates, which significantly reduces the risk that you
    go too far down the wrong path.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者通过编写代码来思考。草稿更改是思考并提出更改的一种好方法，它不需要投入太多时间来编写测试、完善代码和添加文档。你可以通过提交*草稿审查*来检查你所做的事情：这是一种非正式的审查请求，旨在从队友那里快速获得反馈，从而显著降低你走错方向的风险。
- en: To avoid confusion, be clear when a code review is a draft or a work-in-progress
    (WIP). Many teams will have conventions for drafts; usually “DRAFT” or “WIP” is
    prepended to the title of the code review. Some code review platforms have built-in
    support for this; for example, GitHub has “draft pull requests.” Once your draft
    feels like it’s on the right track, you can transition it out of the “draft” state
    by finishing the implementation, tests, and documentation, and adding polish.
    Again, be clear when your code is ready for a nondraft review and then prepare
    the review request as described in the previous section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免混淆，明确代码审查是否为草稿或进行中的工作（WIP）。许多团队会对草稿有约定；通常“DRAFT”或“WIP”会加在代码审查标题前。一些代码审查平台对这个有所支持；例如，GitHub
    有“草稿拉取请求”。一旦你的草稿看起来在正确的轨道上，你可以通过完成实现、测试和文档，并进行优化，将其从“草稿”状态中转出。同样，明确你的代码何时准备好进行非草稿审查，然后按照前面一节所述准备审查请求。
- en: Don’t Submit Reviews to Trigger Tests
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要提交审查以触发测试
- en: Large projects often come with complex test tooling. It can be hard, as a new
    developer, to figure out how to run all relevant tests. Some developers bypass
    this problem by submitting code reviews to trigger the continuous integration
    (CI) system. This is a poor practice.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大型项目通常伴随着复杂的测试工具。作为新开发者，弄清楚如何运行所有相关测试可能会很困难。一些开发者通过提交代码审查来触发持续集成（CI）系统来绕过这个问题。这是一个不好的做法。
- en: Submitting a code review as a way to trigger test execution is wasteful. Your
    review will fill the test queue, which will block reviews that actually need their
    tests to be run before merge. Your teammates might mistake your review request
    for something they should look at. The CI will run the full test suite, when you
    might only need to run tests related to your change.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提交代码审查作为触发测试执行的方式是浪费的。你的审查会填满测试队列，这将阻塞那些在合并前确实需要运行测试的审查。你的队友可能会误以为你的审查请求是他们应该查看的内容。持续集成（CI）将运行完整的测试套件，而你可能只需要运行与你更改相关的测试。
- en: Invest the time to learn how to run your tests locally. Debugging a failed test
    is easier locally than in CI environments; you won’t be able to attach debuggers
    or get debug information easily on remote machines. Set up your local test environment
    and learn how to execute just the tests you care about. Make your coding and testing
    cycle fast so you know immediately if your changes break anything. It’s an up-front
    cost, but it will save you time in the long run (and it’s friendlier to your teammates).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 投入时间学习如何在本地运行你的测试。调试失败的测试在本地比在CI环境中更容易；你无法在远程机器上附加调试器或轻松获取调试信息。设置你的本地测试环境并学习如何仅执行你关心的测试。让你的编码和测试周期变得更快，这样你就能立刻知道你的更改是否破坏了什么。虽然这是前期的成本，但从长远来看，它会节省你时间（而且对你的队友更友好）。
- en: Walk Through Large Code Changes
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行大规模代码更改的走查
- en: Conduct code walk-throughs when making large changes. Walk-throughs are in-person
    meetings where a developer shares their screen and walks teammates through the
    changes that are being made. Walk-throughs are a great way to trigger ideas and
    get your team comfortable with changes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行大规模更改时，进行代码走查。走查是面对面的会议，开发者共享屏幕并带领队友了解正在进行的更改。走查是激发想法和让团队熟悉更改的好方法。
- en: Circulate relevant design documents and code in advance, and ask your teammates
    to take a look before the walk-through meeting. Give them adequate time—don’t
    schedule the walk-through for an hour later.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提前传阅相关的设计文档和代码，并要求队友在演示会议前查看。给他们足够的时间——不要安排在一个小时后再进行演示。
- en: Start a walk-through by giving background about the change. A quick review of
    the design document might be warranted. Then, share your screen and navigate the
    code in your IDE as you narrate. Walk-throughs are best done by navigating through
    code flow from the start—a page load, API call, or application startup—all the
    way to the termination of the execution. Explain the main concepts behind any
    new models or abstractions, how they are meant to be used, and how they fit into
    the overall application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行代码讲解时，首先介绍一下变更的背景。可能需要快速浏览一下设计文档。接着，分享你的屏幕，在你讲解的同时，导航到你IDE中的代码。讲解最好的方式是从头开始，按代码的执行流程进行逐步演示——包括页面加载、API调用或应用启动，一直到执行结束。解释任何新模型或抽象的主要概念，它们的使用方式以及它们如何融入整体应用中。
- en: Don’t try to get your teammates to actually review the code in the walk-through.
    Attendees should save their comments for the review itself. Walk-throughs are
    meant to help your team understand why a change is being proposed and to give
    them a good mental model for working through the code review in detail by themselves.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不要试图让你的团队成员在讲解过程中对代码进行实际的审查。与会者应该把评论留到正式审查时再提出。讲解的目的是帮助团队理解为什么提出这个变更，并为他们提供一个良好的思维模型，帮助他们自己详细地进行代码审查。
- en: Don’t Get Attached
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要执着
- en: Getting critical comments on your code can be tough. Keep some emotional distance—the
    review is of the code, not of you, and it’s not even really your code; the whole
    team will own the code in the future. Getting a lot of suggestions doesn’t mean
    you’ve failed a test; it means the reviewer is engaging with your code and thinking
    about how it can be improved. It’s completely normal to get lots of comments,
    particularly if you are one of the less experienced developers on the team.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接收到关于代码的批评意见可能会让人感到不适。保持一定的情感距离——审查的是代码，而不是你，甚至这并不完全是你的代码；未来代码将属于整个团队。收到很多建议并不意味着你通过了测试失败，而是审阅者正在与代码互动，并思考如何改进它。如果你是团队中经验较少的开发人员，收到大量评论是完全正常的。
- en: Reviewers might ask for changes that don’t seem important or that seem like
    they can be addressed later; they might have different priorities and timelines.
    Do your best to keep an open mind and understand where they are coming from. Be
    receptive to input and expect to revise your code based on feedback.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 审阅者可能会要求做一些看起来不重要或者可以稍后处理的修改，他们可能有不同的优先级和时间安排。尽量保持开放的心态，理解他们的出发点。要接纳反馈，并且做好根据反馈修改代码的准备。
- en: Practice Empathy, but Don’t Tolerate Rudeness
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习共情，但不要容忍粗鲁
- en: Everyone communicates differently, but rudeness should not be tolerated. Keep
    in mind that one person’s “short and to the point” can be another’s “brusque and
    rude.” Give reviewers the benefit of the doubt, but let them know if their comments
    seem off base or rude. If a discussion drags on or feels “off,” face-to-face discussion
    can help clear the air and get to a resolution. If you’re uncomfortable, talk
    to your manager.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人的沟通方式不同，但粗鲁行为是不容忍的。记住，一个人的“简洁明了”可能是另一个人的“生硬和粗鲁”。给予审阅者一些宽容，但如果他们的评论偏离主题或显得粗鲁，一定要让他们知道。如果讨论拖延或让你感觉“不对劲”，面对面的讨论有助于澄清问题并找到解决方案。如果你感到不舒服，可以和你的经理沟通。
- en: If you disagree with a suggestion, try to work the disagreement out. Examine
    your own reaction first. Are you instinctively protecting your code just because
    you wrote it or because your way is in fact better? Explain your viewpoint clearly.
    If you still can’t agree, ask your manager what the next step is. Teams deal with
    code review conflicts differently; some defer to the submitter, others to a tech
    lead, and still others to group quorum. Follow team convention.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不同意某个建议，尝试解决这种分歧。首先审视自己的反应。你是本能地在保护自己的代码，因为它是你写的吗？还是因为你认为你的方式确实更好？清晰地解释你的观点。如果你仍然无法达成一致，询问你的经理下一步应该怎么做。团队在处理代码审查冲突时的方式不同；有些团队倾向于听从提交者的意见，有些则听从技术负责人，还有些团队则依赖小组中的多数意见。遵循团队的惯例。
- en: Be Proactive
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 积极主动
- en: Don’t be shy about asking others to review your code. Reviewers are often bombarded
    with code review and ticket notifications, so reviews can get lost on high-velocity
    projects. If you don’t get any feedback, check in with the team (without being
    pushy). When you do receive comments, be responsive. You don’t want your code
    review to drag on for weeks. Everyone’s memory fades; the faster you respond,
    the faster you’ll get responses.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕请求别人审查你的代码。审查者通常会被大量的代码审查和工单通知轰炸，因此在高效项目中，审查可能会被遗漏。如果你没有得到反馈，跟团队沟通一下（但不要过于强迫）。当你收到评论时，要及时回应。你不希望你的代码审查拖延好几周。每个人的记忆都会衰退；你回应得越快，得到的反馈也会越快。
- en: Merge your changes promptly after you receive approval. Leaving a code review
    dangling is inconsiderate. Others might be waiting for your changes or want to
    change code once you merge. If you wait too long, your code will need to be rebased
    and fixed. In extreme cases, the rebase might break your code’s logic, which will
    require another code review.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在收到批准后及时合并变更。让代码审查悬而未决是不礼貌的。其他人可能在等待你的变更，或者在你合并后可能想更改代码。如果你等待太久，你的代码可能需要重新基准并修复。在极端情况下，重新基准可能会破坏代码的逻辑，从而需要进行另一次代码审查。
- en: Reviewing Code
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查代码
- en: Good reviewers break a review request into several stages. Triage the request
    to determine its urgency and complexity, and set aside time to review the change.
    Begin your review by reading code and asking questions to understand the context
    of the change. Then, give feedback and drive the review to a conclusion. Combining
    this recipe with a few best practices will substantially improve your reviews.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的审查者会将审查请求分成几个阶段。首先对请求进行分类，确定其紧急性和复杂性，并为审查变更预留时间。开始审查时，先阅读代码并提出问题，以理解变更的背景。然后，提供反馈并推动审查结论的达成。将此方法与一些最佳实践相结合，将大大提高你的审查质量。
- en: Triage Review Requests
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类审查请求
- en: Your work as a reviewer begins when you get a review notification. Start by
    triaging the review request. Some changes are critical and need to be reviewed
    right away. Most changes, however, are less pressing. If the urgency is unclear,
    ask the submitter. Change size and complexity also bear consideration. If a change
    is small and straightforward, a quick review will help unblock your teammate.
    Larger changes need more time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为审查者的工作从你收到审查通知开始。首先对审查请求进行分类。一些变更是关键的，需要立即审查。然而，大多数变更则不那么紧急。如果紧急性不明确，可以询问提交者。变更的大小和复杂性也需要考虑。如果变更小且简单，快速审查有助于解除同事的阻碍。较大的变更则需要更多时间。
- en: High velocity teams can have an overwhelming volume of code reviews. You don’t
    need to review every change. Focus on the changes that you can learn from and
    those that touch code you are familiar with.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 高效团队可能会有大量的代码审查。你不需要审查每一个变更。专注于那些你可以从中学习的变更，以及那些涉及你熟悉的代码的变更。
- en: Block Off Time for Reviews
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为审查预留时间
- en: Code reviews are similar to operational work (discussed in Chapter 9); their
    size and frequency are somewhat unpredictable. Don’t drop everything you’re doing
    every time a review request arrives. Left unchecked, review interruptions can
    torpedo your productivity.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查类似于运维工作（详见第9章）；它们的大小和频率具有一定的不确定性。每次收到审查请求时，不要放下你正在做的所有事情。如果不加以控制，审查中断可能会破坏你的生产力。
- en: Block off code review time in your calendar. Scheduled review time makes it
    easy for you to continue on your other tasks, knowing you’ll have focused review
    time later. It’ll also keep your reviews high quality—you won’t feel as much pressure
    to get back to other tasks when you have dedicated time.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在日历中为代码审查预留时间。安排审查时间使你可以继续处理其他任务，因为你知道稍后会有专注的审查时间。这也能保持审查的高质量——你不会因为急于返回其他任务而感到压力。
- en: Large reviews might need additional planning. If you get a review that’s going
    to take more than an hour or two to get through, create an issue to track the
    review itself. Work with your manager to allocate dedicated time in your sprint
    planning session (see Chapter 12 on Agile development).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大型审查可能需要额外的计划。如果你收到的审查需要一个小时或更长时间才能完成，创建一个问题来跟踪审查本身。与经理合作，在迭代规划会议中分配专门的时间（见第12章关于敏捷开发的内容）。
- en: Understand the Change
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解变更
- en: Don’t begin a review by leaving comments; first read and ask questions. Code
    reviews are most valuable if the reviewer really takes the time to understand
    the proposed changes. Aim to understand why a change is being made, how code used
    to behave, and how code behaves after the change. Consider long-term implications
    of the API design, data structures, and other key decisions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不要一开始就留下评论；先阅读并提出问题。如果审查者能真正花时间理解所提议的变更，代码审查会更有价值。力求理解为什么要做这项变更，代码之前是如何工作的，变更后代码又会如何表现。考虑API设计、数据结构及其他关键决策的长期影响。
- en: Understanding the motivation for a change will explain implementation decisions,
    and you might discover the change isn’t even needed. Comparing code before and
    after the change will also help you check for correctness and trigger alternative
    implementation ideas.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 理解变更的动机有助于解释实现决策，甚至你可能会发现这项变更其实并不必要。对比变更前后的代码，也有助于你检查代码的正确性，并激发替代的实现思路。
- en: Give Comprehensive Feedback
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 给出全面的反馈
- en: Give feedback on a change’s correctness, implementation, maintainability, legibility,
    and security. Point out code that violates style guides, is hard to read, or is
    confusing. Read tests and look for bugs to verify code correctness.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对变更的正确性、实现、可维护性、可读性和安全性给出反馈。指出违反风格指南、难以阅读或令人困惑的代码。阅读测试并查找漏洞，以验证代码的正确性。
- en: Ask yourself how you would implement the changes to trigger alternative ideas
    and discuss the trade-offs. If public APIs are being changed, think about ways
    this may affect compatibility and the planned rollout of the change (see Chapter
    8 to learn more about this topic). Consider ways in which a future programmer
    might misuse or misunderstand this code and how code can be altered to prevent
    this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 问问自己，如果是你来实现这些变化，会如何着手，激发出替代的思路并讨论权衡。若修改了公共API，考虑这可能如何影响兼容性和变更的发布计划（有关此主题，见第8章）。考虑将来程序员如何误用或误解这段代码，及如何改进代码以防止这种情况发生。
- en: Think about what libraries and services are available that might help with the
    changes. Suggest patterns discussed in Chapter 11 to keep code maintainable. Look
    for OWASP Top Ten ([https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/))
    violations, like SQL injection attacks, sensitive data leaks, and cross-site scripting
    vulnerabilities.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 思考一下有哪些库和服务可以帮助处理这些变化。建议参考第11章讨论的模式，以保持代码的可维护性。查找OWASP十大安全风险（[https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)）的漏洞，比如SQL注入攻击、敏感数据泄露和跨站脚本漏洞。
- en: 'Don’t be overly terse—write comments the way you would say them if you were
    reviewing code sitting side by side. Comments should be polite and include both
    a “what” and a “why”:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不要过于简略——写评论时，要像你和别人并排审查代码时一样表达。评论应该礼貌，包含“做了什么”和“为什么做”：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Acknowledge the Good Stuff
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认可做得好的地方
- en: It’s natural to focus on finding problems when reviewing code, but a code review
    doesn’t have to be all negative. Comment on the good stuff, too! If you learn
    something new from reading the code, mention that to the author. If a refactoring
    cleans up problematic areas of code or new tests feel like they make future changes
    less risky, recognize these things with a positive, encouraging comment. Even
    a code change you hate probably has something in it that you can say something
    nice about—if nothing else, acknowledge the intent and the effort.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查代码时，专注于发现问题是很自然的，但代码审查并不全是负面的。也要评论那些做得好的地方！如果从阅读代码中学到了新东西，告诉作者。如果重构清理了代码中的问题区域，或者新增的测试让未来的修改风险更小，要用积极鼓励的评论认可这些改进。即使是你不喜欢的代码变更，也可能有值得表扬的地方——至少可以认可它的意图和努力。
- en: This is an interesting change. I totally get wanting to migrate the queuing
    code to a third-party library, but I’m pretty averse to adding a new dependency;
    the existing code is simple and does what it needs to do. Definitely speak up
    if I’m misunderstanding the motivation; happy to talk more.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是一个有趣的变更。我完全理解为什么想将队列代码迁移到第三方库，但我对添加新依赖有些抗拒；现有的代码简单，且能完成它需要做的事情。如果我误解了动机，请一定指出；我很愿意进一步讨论。
- en: Distinguish Between Issues, Suggestions, and Nitpicks
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区分问题、建议和细节挑剔
- en: Not all review comments have the same level of importance. Major issues need
    more attention than neutral suggestions and superficial nitpicks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的审查评论都具有相同的优先级。主要问题需要更多关注，而中立的建议和表面的挑剔可以稍微忽略。
- en: 'Don’t shy away from stylistic feedback, but make it clear that you’re nitpicking.
    A “nit” prefix prepended to the comment is customary:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不要回避风格上的反馈，但要明确表明你是在挑剔。通常会在评论前加上“nit”作为前缀：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the same style issue occurs repeatedly, don’t keep harping on it; point out
    the first instance, and indicate that it’s something to fix across the board.
    No one likes to be told the same thing over and over, and it’s not necessary.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同样的风格问题反复出现，不要再三强调；指出第一次出现的情况，并表明这是需要统一修复的地方。没有人喜欢被反复告知同样的事情，而且也没必要这么做。
- en: If you find yourself nitpicking style often, ask whether the project has adequate
    linting tools set up. Ideally, tooling should do this work for you. If you find
    that your reviews are mostly nitpicks with few substantial comments, slow down
    and do a deeper reading. Pointing out useful cosmetic changes is part of a review,
    but it’s not the main goal. See Chapter 3 for more on linting and code-cleanliness
    tooling.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己经常挑剔风格，问问自己项目是否设置了足够的代码风格检查工具。理想情况下，工具应该为你完成这项工作。如果你发现你的审查大多是挑剔而很少有实质性的评论，那就放慢速度，深入阅读。指出有用的修饰性更改是审查的一部分，但这不是主要目标。有关代码风格检查和代码清理工具的更多内容，请参见第3章。
- en: Call out suggestions that seem better to you but aren’t required for approval
    by prefixing feedback with “optional,” “take it or leave it,” or “nonblocking.”
    Distinguish suggestions from changes you really want to see made; otherwise, it
    won’t necessarily be clear to the submitter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为某些建议会更好，但并不是批准所必需的，可以通过在反馈前添加“可选”、“随意”或“非阻塞”等词汇来提出建议。区分那些你真正希望看到的更改和仅仅是建议的地方；否则，提交者可能不会明确理解。
- en: Don’t Rubber-Stamp Reviews
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要草率审批审查
- en: You’re going to feel pressure to approve a review without really looking at
    it. An urgent change, pressure from a peer, a seemingly trivial change, or a change
    that’s too large will push you to sign off. Empathy might encourage you to turn
    a review around quickly—you know what it’s like to have to wait on a review.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你会感受到审批审查而不真正查看它的压力。紧急更改、同事的压力、看似微不足道的更改或过大的更改都会促使你签字同意。共情可能会促使你快速完成审查——你知道等待审查的感觉有多糟糕。
- en: Resist the temptation to rubber-stamp a review with a hasty approval. Rubber-stamping
    a review is harmful. Teammates will think you know what the change is and why
    it’s applied; you might be held responsible later. The submitter will think you
    have looked at and approved their work. If you can’t prioritize a review adequately,
    don’t review the change at all.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 抵制草率审批审查的诱惑。草率审批审查是有害的。团队成员会认为你知道更改的内容及其应用原因；以后你可能会被追究责任。提交者会认为你已经查看并批准了他们的工作。如果你无法合理地优先处理审查，干脆不要审查该更改。
- en: The temptation to rubber-stamp a request might be a signal that the code change
    is too big for one request. Don’t be afraid to ask your teammates to split up
    large code reviews into smaller sequential chunks. It’s easy for developers to
    get rolling and end up with a multithousand-line change. It’s unreasonable to
    expect a huge code change to be adequately reviewed in one shot. If you feel a
    code walk-through would be more efficient, you can also ask for that.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 草率审批请求的诱惑可能是代码更改太大，无法在一次请求中处理的信号。不要害怕让团队成员将大规模的代码审查拆分成更小的顺序部分。开发者很容易开始工作，最终做出几千行的更改。期望在一次审查中充分审查巨大的代码更改是不现实的。如果你觉得代码走查会更高效，你也可以请求进行走查。
- en: Don’t Limit Yourself to Web-Based Review Tools
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要仅限于基于网页的审查工具
- en: Code reviews are usually handled in a dedicated UI like GitHub’s pull request
    interface. Don’t forget that code reviews are just code. You can still check out
    or download the proposed changes and play with them locally.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查通常是在像GitHub拉取请求界面这样的专用UI中进行的。别忘了，代码审查只是代码。你仍然可以检出或下载提议的更改，并在本地进行测试。
- en: A local code checkout will let you examine the proposed changes in your IDE.
    Large changes are hard to navigate in a web interface. IDEs and desktop-based
    review tools let you more easily browse the changes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本地代码检出让你可以在IDE中检查提议的更改。在网页界面中，较大的更改很难浏览。IDE和基于桌面的审查工具可以让你更轻松地浏览这些更改。
- en: Local code is also runnable. You can create your own tests to verify things
    work as expected. A debugger can be attached to running code so you can better
    understand how things behave. You might even be able to trigger failure scenarios
    to better illustrate comments in your review.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本地代码也是可以运行的。你可以创建自己的测试来验证代码是否按预期工作。调试器可以附加到运行中的代码上，帮助你更好地理解代码的行为。你甚至可以触发失败场景，以更好地说明审查中的评论。
- en: Don’t Forget to Review Tests
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 别忘了审查测试
- en: Reviewers will often gloss over tests, especially when the change is on the
    long side. Tests should be reviewed just like the rest of the code. It is often
    useful to start a review by reading the tests; they illustrate how the code is
    used and what’s expected.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 审查者常常忽略测试，特别是在代码更改较大时。测试应该像其他代码一样被审查。通常，开始审查时阅读测试很有帮助；它们展示了代码的使用方式以及预期的效果。
- en: 'Make sure to check tests for maintainability and code cleanliness. Look for
    bad test patterns: execution ordering, lack of isolation, and remote system calls.
    See Chapter 6 for a complete list of testing best practices and violations to
    look out for.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 确保检查测试的可维护性和代码的整洁性。查找不良的测试模式：执行顺序、缺乏隔离性以及远程系统调用。查看第6章，了解完整的测试最佳实践和需注意的违规行为。
- en: Drive to a Conclusion
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推动审查结果的得出
- en: Don’t be the reason improvements wither on the vine. Help review submitters
    get their code approved quickly. Don’t insist on perfection, don’t expand the
    scope of the change, clearly describe which comments are critical, and don’t let
    disagreements fester.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 不要成为导致改进停滞不前的原因。帮助审查提交者迅速通过代码审核。不要坚持完美，不要扩大更改范围，清楚地描述哪些评论至关重要，且不要让分歧加剧。
- en: 'Insist on quality, but do not become an impassible barrier. Google’s “Engineering
    Practices Documentation” ([https://google.github.io/eng-practices/](https://google.github.io/eng-practices/))
    discusses this tension when reviewing a changelist (CL, Google’s internal term
    for a proposed code change):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持质量，但不要成为无法逾越的障碍。Google的“工程实践文档”（[https://google.github.io/eng-practices/](https://google.github.io/eng-practices/)）讨论了在审查代码更改（CL，Google内部术语，用于指代提议的代码更改）时的这种矛盾：
- en: In general, reviewers should favor approving a CL once it is in a state where
    it definitely improves the overall code health of the system being worked on,
    even if the CL isn’t perfect.
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一般来说，审查者应该倾向于批准一个CL，一旦它处于明确改进正在开发的系统整体代码健康状态的状态，即使该CL不是完美的。
- en: Respect the scope of the change that’s being made. As you read, you’ll find
    ways to improve adjacent code and have ideas for new features; don’t insist that
    these changes be made as part of the existing review. Open a ticket to improve
    the code and save the work for later. Keeping scope tight will increase velocity
    and keep changes incremental.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尊重所做更改的范围。在阅读时，你可能会发现改进相邻代码的方法，并有新的功能构想；但不要坚持将这些更改作为现有审查的一部分。可以开设票据来改进代码，并将工作留到后续。保持范围的紧凑将提高效率，并使更改保持增量式。
- en: 'You can conclude reviews by marking them as “Request Changes” or “Approved.”
    If you leave a lot of comments, a review summary can be helpful. If you’re requesting
    changes, specify which changes are required to meet your approval. Here’s an example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将审查标记为“请求修改”或“已批准”来结束审查。如果你留下了很多评论，审查总结会很有帮助。如果你请求修改，请明确哪些修改是为了满足你的批准要求。以下是一个示例：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If there is significant disagreement about the code change that you and the
    author cannot resolve, proactively propose taking the matter to other experts
    who can help resolve the disagreement.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和作者之间在代码更改上有重大分歧，并且无法解决，主动提议将问题提交给其他专家，以帮助解决分歧。
- en: Do’s and Don’ts
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做与不做
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **做** | **不要做** |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **DO** make sure tests and linters pass before requesting a review. | **DON’T**
    make review requests just to get the CI system to run. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **做** 在请求审查之前，确保所有测试和代码检查工具通过。 | **不要** 仅仅为了让CI系统运行而提出审查请求。 |'
- en: '| **DO** set aside time for code reviews and prioritize them just like you
    do other work. | **DON’T** rubber-stamp code reviews. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **做** 为代码审查预留时间，并像对待其他工作一样优先安排它们。 | **不要** 只是走个过场做代码审查。 |'
- en: '| **DO** speak up if comments seem rude, unconstructive, or inappropriate.
    | **DON’T** fall in love with your code or take feedback personally. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **做** 如果评论看起来粗鲁、不具建设性或不合适，请大胆发声。 | **不要** 过度依赖你的代码或对反馈产生个人情绪。 |'
- en: '| **DO** help the reviewer by providing appropriate context for the change.
    | **DON’T** review code minutiae before understanding the big picture of the change.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **做** 通过提供适当的上下文来帮助审查者理解更改。 | **不要** 在了解更改的全貌之前审查代码细节。 |'
- en: '| **DO** look beyond superficial style issues when doing a review. | **DON’T**
    nitpick excessively. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **做** 在进行审查时，超越表面风格问题的层次进行思考。 | **不要** 过度挑剔细节问题。 |'
- en: '| **DO** use all your tools, not just the code review interface, to understand
    tricky changes. | **DON’T** let perfect be the enemy of the good. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **做** 使用你所有的工具，而不仅仅是代码审查界面，来理解复杂的更改。 | **不要** 让完美成为良好的敌人。 |'
- en: '| **DO** review tests. |  |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **做**复审测试。 |  |'
- en: Level Up
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升技能
- en: Google’s “Code Review Developer Guide” at [https://google.github.io/eng-practices/review/](https://google.github.io/eng-practices/review/)
    is a good example of a company’s code review culture. Keep in mind that the guide
    is written specifically for Google. Your company’s tolerance for risk, investment
    in automated quality checks, and preference for speed or consistency might lead
    to a different philosophy.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Google 的《代码复审开发者指南》可以在[https://google.github.io/eng-practices/review/](https://google.github.io/eng-practices/review/)找到，是一个很好的公司代码复审文化示例。请记住，这份指南是专门为
    Google 编写的。你所在公司的风险容忍度、对自动化质量检查的投资以及对速度或一致性的偏好可能会导致不同的复审哲学。
- en: 'At the end of the day, code reviews are a specialized form of giving and receiving
    feedback. The book *Thanks for the Feedback: The Science and Art of Receiving
    Feedback Well* by Douglas Stone and Sheila Heen (Penguin Books, 2014) is an excellent
    resource that will help you become both a better reviewer and a better reviewee.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在一天的工作结束时，代码复审是一种特殊的反馈给予与接收形式。Douglas Stone 和 Sheila Heen（企鹅出版集团，2014）所著的《*感谢反馈：接受反馈的科学与艺术*》是一本非常好的资源，它将帮助你成为更好的复审者和更好的被复审者。
