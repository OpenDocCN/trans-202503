- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 9 WEBSITES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: During the summer of 2020, Matt Herman’s family moved from Brooklyn to Westchester
    County, New York. It was still early in the COVID-19 pandemic, and Herman was
    shocked that the county published little data about infection rates. Vaccines
    weren’t yet available, and daily choices like whether to go to the park depended
    on access to good data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time, Herman was deputy director of the ChildStat Data Unit in the Office
    of Research and Analytics at the New York City Administration for Children’s Services.
    This mouthful of a title meant he was skilled at working with data, enabling him
    to create the COVID resource he needed: the Westchester COVID-19 Tracking website.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Built entirely in R, this website uses charts, maps, tables, and text to summarize
    the latest COVID data for Westchester County. The website is no longer updated
    daily, but you can still view it at *[https://westchester-covid.mattherman.info](https://westchester-covid.mattherman.info)*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: To make this website, Herman wrote a set of R Markdown files and strung them
    together with the distill package. This chapter explains the basics of the package
    by walking through the creation of a simple website. You’ll learn how to produce
    different page layouts, navigation menus, and interactive graphics, then explore
    strategies for hosting your website.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New distill Project
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A website is merely a collection of HTML files like the one you produced in
    [Chapter 8](chapter8.xhtml) when you created a slideshow presentation. The distill
    package uses multiple R Markdown documents to create several HTML files, then
    connects them with a navigation menu and more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: To create a distill website, install the package using install.packages ("distill").
    Then start a project in RStudio by navigating to **File****New Project****New
    Directory** and selecting **Distill Website** as the project type.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Specify the directory and subdirectory where your project will live on your
    computer, then give your website a title. Check the Configure for GitHub Pages
    option, which provides an easy way to post your website online (you’ll learn how
    it works in “GitHub Hosting” on [page 154](#pg_154)). Select it if you’d like
    to use this deployment option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The Project Files
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should now have a project with several files. In addition to the *covid-website.Rproj*
    file indicating that you’re working in an RStudio project, you should have two
    R Markdown documents, a *_site.yml* file, and a *docs* folder, where the rendered
    HTML files will go. Let’s take a look at these website files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: R Markdown Documents
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each R Markdown file represents a page of the website. By default, distill creates
    a home page (*index.Rmd*) and an About page (*about.Rmd*) containing placeholder
    content. If you wanted to generate additional pages, you would simply add new
    R Markdown files, then list them in the *_site.yml* file discussed in the next
    section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the *index.Rmd* file, you’ll notice that the YAML contains two
    arguments, description and site, that didn’t appear in the R Markdown documents
    from previous chapters:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The description argument specifies the text that should go below the title of
    each page, as shown in [Figure 9-1](chapter9.xhtml#fig9-1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig9-1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: The default website description'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'The site: distill::distill_website line identifies the root page of a distill
    website. This means that when you knit the document, R Markdown knows to create
    a website rather than an individual HTML file and that the website should display
    this page first. The other pages of the website don’t require this line. As long
    as they’re listed in the *_site.yml* file, they’ll be added to the site.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also notice the absence of an argument you’ve seen in other R Markdown
    documents: output, which specifies the output format R should use while knitting.
    The reason output is missing here is that you’ll specify the output for the entire
    website in the *_site.yml* file.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The _site.yml File
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The *_site.yml* file tells R which R Markdown documents make up the website,
    what the knitted files should look like, what the website should be called, and
    more. When you open it, you should see the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The name argument determines the URL for your website. By default, this should
    be the name of the directory where your distill project lives; in my case, that’s
    the *covid-website* directory. The title argument creates the title for the entire
    website and shows up in the top left of the navigation bar by default. The description
    argument provides what’s known as a *meta description*, which will show up as
    a couple of lines in Google search results to give users an overview of the website
    content.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The output_dir argument determines where the rendered HTML files live when you
    generate the website. You should see the *docs* directory listed here. However,
    you can change the output directory to any folder you choose.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Next, the navbar section defines the website’s navigation. Here it appears on
    the right side of the header, but swapping the right parameter for left would
    switch its position. The navigation bar includes links to the site’s two pages,
    Home and About, as shown in [Figure 9-2](chapter9.xhtml#fig9-2).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig9-2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: The website navigation bar'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Within the navbar code, the text argument specifies what text shows up in the
    menu. (Try, for example, changing About to **About This Website**, and then change
    it back.) The href argument determines which HTML file the text in the navigation
    bar links to. If you want to include additional pages on your menu, you’ll need
    to add both the text and href parameters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the output argument specifies that all R Markdown documents should
    be rendered using the distill_article format. This format allows for layouts of
    different widths, *asides* (parenthetical items that live in a sidebar next to
    the main content), easily customizable CSS, and more.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Building the Site
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve explored the project’s files but haven’t yet used them to create the website.
    To do this, click **Build Website** in the Build tab of RStudio’s top-right pane.
    (You could also run rmarkdown::render_site() in the console or in an R script
    file.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: This should render all R Markdown documents and add the top navigation bar to
    them with the options specified in the *_site.yml* file. To find the rendered
    files, look in *docs* (or whatever output directory you specified). Open the *index.xhtml*
    file and you’ll find your website, which should look like [Figure 9-3](chapter9.xhtml#fig9-3).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig9-3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: The COVID website with default content'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: You can open any other HTML file as well to see its rendered version.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Applying Custom CSS
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Websites made with distill tend to look similar, but you can change their design
    using custom CSS. The distill package even provides a function to simplify this
    process. Run distill::create_theme() in the console to create a file called *theme.css*,
    shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within this file is a set of CSS variables that allow you to customize the
    design of your website. Most of them have names that clearly show their purpose,
    and you can alter their default values to whatever you’d like. For example, the
    following edits to the site’s header make the title and text size larger and change
    the background color to a light blue:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before you can see these changes, however, you need to add a line to the *_site.yml*
    file to tell distill to use this custom CSS when rendering:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you can generate the site again, and you should see your changes reflected.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of other CSS variables in *theme.css* that you can change to
    tweak the appearance of your website. Playing around with them and regenerating
    your site is a great way to figure out what each one does.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*To learn more about customizing the look and feel of your website, check out
    the distill websites made by others at* [https://distillery.rbind.io](https://distillery.rbind.io)*.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Working with Website Content
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can add content to a page on your website by creating Markdown text and
    code chunks in the page’s R Markdown document. For example, to highlight rates
    of COVID cases over time, you’ll replace the contents of *index.Rmd* with code
    that displays a table, a map, and a chart on the website’s home page. Here’s the
    start of the file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]{r setup, include=FALSE}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: knitr::opts_chunk$set(echo = FALSE,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: warning = FALSE,
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: message = FALSE)
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]{r}'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Load packages
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: library(tidyverse)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: library(janitor)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: library(tigris)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: library(gt)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: library(lubridate)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the YAML and setup code chunk, this code loads several packages, most
    of which you’ve seen in previous chapters: the tidyverse for data import, manipulation,
    and plotting (with ggplot); janitor for its clean_names() function, which makes
    the variable names easier to work with; tigris to import geospatial data about
    states; gt for making nice tables; and lubridate to work with dates.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to import and clean the data, add this new code chunk:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]{r}'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Import data
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: us_states <- states(
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: cb = TRUE,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: resolution = "20m",
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: progress_bar = FALSE
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: ) %>%
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: shift_geometry() %>%
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: clean_names() %>%
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: select(geoid, name) %>%
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: rename(state = name) %>%
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% state.name)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: covid_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-states.csv")
    %>%
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% state.name) %>%
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: mutate(geoid = str_remove(geoid, "USA-"))
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: last_day <- covid_data %>%  ❶
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: slice_max(
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: order_by = date,
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: n = 1
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: distinct(date) %>%
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: mutate(date_nice_format = str_glue("{month(date, label = TRUE, abbr = FALSE)}
    {day(date)},   {year(date)}")) %>%
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: pull(date_nice_format)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code uses the slice_max() function to get the latest date in the covid_data
    data frame. (Data was added until March 23, 2023, so that date is the most recent
    one.) From there, it uses distinct() to get a single observation of the most recent
    date (each date shows up multiple times in the covid_data data frame). The code
    then creates a date_nice_format variable using the str_glue() function to combine
    easy-to-read versions of the month, day, and year. Finally, the pull() function
    turns the data frame into a single variable called last_day ❶, which is referenced
    later in a text section. Using inline R code, this header now displays the current
    date ❷.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the following code to make a table showing the death rates per 100,000
    people in four states (using all states would create too large a table):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]{r}'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: covid_data %>%
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% c(
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '"Alabama",'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Alaska",'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arizona",'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arkansas"'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) %>%
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: slice_max(
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: order_by = date,
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: n = 1
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: select(state, deaths_avg_per_100k) %>%
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: arrange(state) %>%
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: set_names("State", "Death rate") %>%
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: gt() %>%
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: tab_style(
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: style = cell_text(weight = "bold"),
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: locations = cells_column_labels()
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This table resembles the code you saw in [Chapter 5](chapter5.xhtml). First,
    the filter() function filters the data down to four states, and the slice_max()
    function gets the latest date. The code then selects the relevant variables (state
    and deaths_avg_per_100k), arranges the data in alphabetical order by state, sets
    the variable names, and pipes this output into a table made with the gt package.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code, which uses techniques covered in [Chapter 4](chapter4.xhtml),
    to make a map of this data for all states:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]{r}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: most_recent <- us_states %>%
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: left_join(covid_data, by = "state") %>%
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: slice_max(order_by = date,
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: n = 1)
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: most_recent %>%
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(fill = deaths_avg_per_100k)) +
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: geom_sf() +
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: scale_fill_viridis_c(option = "rocket") +
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: labs(fill = "Deaths per\n100,000 people") +
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: theme_void()
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code creates a most_recent data frame by joining the us_states geospatial
    data with the covid_data data frame before filtering to include only the most
    recent date. Then, it uses most_recent to create a map that shows deaths per 100,000
    people.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to make a chart that shows COVID death rates over time in the four
    states from the table, add the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]{r}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: covid_data %>%
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% c(
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '"Alabama",'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Alaska",'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arizona",'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arkansas"'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) %>%
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: x = date,
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y = deaths_avg_per_100k,
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: group = state,
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fill = deaths_avg_per_100k
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) +
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: geom_col() +
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: scale_fill_viridis_c(option = "rocket") +
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal() +
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: labs(title = "Deaths per 100,000 people over time") +
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: theme(
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: legend.position = "none",
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title.position = "plot",
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title = element_text(face = "bold"),
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: panel.grid.minor = element_blank(),
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: axis.title = element_blank()
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) +
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: facet_wrap(
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: ~state,
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nrow = 2
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using the geom_col() function, this code creates a faceted set of bar charts
    that show change over time by state (faceting was discussed in [Chapter 2](chapter2.xhtml)).
    Finally, it applies the rocket color palette, applies theme_minimal(), and makes
    a few tweaks to that theme. [Figure 9-4](chapter9.xhtml#fig9-4) shows what the
    website’s home page looks like three years after the start of the pandemic.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig9-4.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-4: The COVID website with a table, map, and chart'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have some content in place, you can tweak it. For example, because
    many states are quite small, especially in the Northeast, it’s a bit challenging
    to see them. Let’s look at how to make the entire map bigger.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Applying distill Layouts
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One nice feature of distill is that it includes four layouts you can apply
    to a code chunk to widen its output: l-body-outset (creates output that is a bit
    wider than the default), l-page (creates output that is wider still), l-screen
    (creates full-screen output), and l-screen-inset (creates full-screen output with
    a bit of a buffer).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply l-screen-inset to the map by modifying the first line of its code chunk
    as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]{r **layout = "l-screen-inset"**}'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: library(reactable)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: covid_data %>%
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: slice_max(
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: order_by = date,
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: n = 1
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: select(state, deaths_avg_per_100k) %>%
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: arrange(state) %>%
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: set_names("State", "Death rate") %>%
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: reactable()
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**library(plotly)**'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '**covid_chart <- covid_data %>%**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% c(
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '"Alabama",'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Alaska",'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arizona",'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arkansas"'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) %>%
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: x = date,
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y = deaths_avg_per_100k,
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: group = state,
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fill = deaths_avg_per_100k
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) +
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: geom_col() +
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: scale_fill_viridis_c(option = "rocket") +
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal() +
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: labs(title = "Deaths per 100,000 people over time") +
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: theme(
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: legend.position = "none",
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title.position = "plot",
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title = element_text(face = "bold"),
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: panel.grid.minor = element_blank(),
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: axis.title = element_blank()
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) +
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: facet_wrap(
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: ~state,
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nrow = 2
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**ggplotly(covid_chart)**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: covid_chart <- covid_data %>%
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: filter(state %in% c(
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '"Alabama",'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Alaska",'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arizona",'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Arkansas"'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) %>%
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: mutate(date_nice_format = str_glue("{month(date, label = TRUE, abbr = FALSE)}
    {day(date)},   {year(date)}")) %>%  ❶
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: mutate(tooltip_text = str_glue("{state}<br>{date_nice_format}<br>{deaths_avg_per_100k}   per
    100,000 people")) %>%  ❷
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: x = date,
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y = deaths_avg_per_100k,
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: group = state,
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text = tooltip_text, ❸
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fill = deaths_avg_per_100k
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) +
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: geom_col() +
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: scale_fill_viridis_c(option = "rocket") +
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal() +
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: labs(title = "Deaths per 100,000 people over time") +
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: theme(
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: legend.position = "none",
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title.position = "plot",
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot.title = element_text(face = "bold"),
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: panel.grid.minor = element_blank(),
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: axis.title = element_blank()
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) +
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: facet_wrap(
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: ~state,
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nrow = 2
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: ggplotly(
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: covid_chart,
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: tooltip = "tooltip_text" ❹
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: library(tidyverse)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: library(rmarkdown)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: library(fs)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: library(rdrop2)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Render the website
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: render_site()
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Upload to Dropbox
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: website_files <- dir_ls(
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: path = "docs",
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: type = "file",
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: recurse = TRUE
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: walk(website_files, drop_upload, path = "COVID Website")
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: This code, which I typically add to a separate file called *render.R*, renders
    the site, uses the dir_ls() function from the fs package to identify all files
    in the *docs* directory, and then uploads these files to Dropbox. Now you can
    run your entire file to generate and upload your website in one go.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Hosting
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A more complicated yet powerful alternative to cloud hosting is to use a static
    hosting service like GitHub Pages. Each time you *commit* (take a snapshot of)
    your code and *push* (sync) it to GitHub, this service deploys the website to
    a URL you’ve set up. Learning to use GitHub is an investment of time and effort
    (the self-published book *Happy Git and GitHub for the useR* by Jenny Bryan at
    *[https://happygitwithr.com](https://happygitwithr.com)* is a great resource),
    but being able to host your website for free makes it worthwhile.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how GitHub Pages works. Most of the time, when you look at a file on
    GitHub, you see its underlying source code, so if you looked at an HTML file,
    you’d see only the HTML code. GitHub Pages, on the other hand, shows you the rendered
    HTML files. To host your website on GitHub Pages, you’ll need to first push your
    code to GitHub. Once you have a repository set up there, go to it, then go to
    the **Settings** tab, which should look like [Figure 9-10](chapter9.xhtml#fig9-10).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig9-10.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-10: Setting up GitHub Pages'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Now choose how you want GitHub to deploy the raw HTML. The easiest approach
    is to keep the default source. To do so, select **Deploy** from a branch and then
    select your default branch (usually *main* or *master*). Next, select the directory
    containing the HTML files you want to be rendered. If you configured your website
    for GitHub Pages at the beginning of this chapter, the files should be in *docs*.
    Click **Save** and wait a few minutes, and GitHub should show the URL where your
    website now lives.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: The best part about hosting your website on GitHub Pages is that any time you
    update your code or data, the website will update as well. R Markdown, distill,
    and GitHub Pages make building and maintaining websites a snap.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Pages 上托管网站的最大好处是，每当你更新代码或数据时，网站也会随之更新。R Markdown、distill 和 GitHub
    Pages 使得构建和维护网站变得轻松便捷。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you learned to use the distill package to make websites in
    R. This package provides a simple way to get a website up and running with the
    tool you’re already using for working with data. You’ve seen how to:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 distill 包在 R 中制作网站。这个包提供了一种简单的方法，可以使用你已经在处理数据时使用的工具，快速创建一个网站。你已经了解了如何：
- en: Create new pages and add them to your top navigation bar
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新页面并将它们添加到顶部导航栏
- en: Customize the look and feel of your website with tweaks to the CSS
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过调整 CSS 来定制网站的外观和感觉
- en: Use wider layouts to make content fit better on individual pages
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更宽的布局使内容在单个页面上更好地展示
- en: Convert static data visualization and tables into interactive versions
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将静态数据可视化和表格转换为交互式版本
- en: Use GitHub Pages to host an always-up-to-date version of your website
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Pages 托管始终保持最新版本的网站
- en: Matt Herman has continued building websites with R. He and his colleagues at
    the Council of State Governments Justice Center have made a great website using
    Quarto, the language-agnostic version of R Markdown. This website, found at *[https://projects.csgjusticecenter.org/tools-for-states-to-address-crime/](https://projects.csgjusticecenter.org/tools-for-states-to-address-crime/)*,
    highlights crime trends throughout the United States using many of the same techniques
    you saw in this chapter.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Matt Herman 一直在使用 R 构建网站。他和他在州政府司法中心的同事们使用 Quarto（R Markdown 的语言无关版本）制作了一个出色的网站。这个网站可以在
    *[https://projects.csgjusticecenter.org/tools-for-states-to-address-crime/](https://projects.csgjusticecenter.org/tools-for-states-to-address-crime/)*
    找到，展示了美国各地的犯罪趋势，使用了本章中介绍的许多相同的技巧。
- en: Whether you prefer distill or Quarto, using R is a quick way to develop complex
    websites without having to be a sophisticated frontend web developer. The websites
    look good and communicate well. They are one more example of how R can help you
    efficiently share your work with the world.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你更喜欢 distill 还是 Quarto，使用 R 都是开发复杂网站的一种快捷方式，无需成为一名复杂的前端网页开发者。这些网站既美观又有效沟通，它们是
    R 如何帮助你高效地与世界分享工作的一例。
- en: Additional Resources
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加资源
- en: The Distillery, “Welcome to the Distillery!,” accessed November 30, 2023, *[https://distillery.rbind.io](https://distillery.rbind.io)*.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The Distillery, “Welcome to the Distillery!,” 访问于 2023年11月30日， *[https://distillery.rbind.io](https://distillery.rbind.io)*。
- en: Thomas Mock, “Building a Blog with distill,” *The MockUp*, August 1, 2020, *[https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/](https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/)*.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thomas Mock, “Building a Blog with distill,” *The MockUp*, 2020年8月1日， *[https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/](https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/)*。
