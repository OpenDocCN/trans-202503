- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**FORENSIC IMAGE MANAGEMENT**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**取证图像管理**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: This chapter covers various aspects of managing forensic image files after acquisition.
    Disk images are enormous compared to typical files on a disk, and moving, copying,
    and converting large image files can be cumbersome and time-consuming. You’ll
    learn a number of techniques for managing large image files to help overcome various
    challenges. These techniques include compressing and splitting images for easier
    handling, securing images with encryption, and converting images between formats.
    In addition, I describe procedures for read-only mounting of an image for safe
    local browsing and demonstrate forensic cloning (or disk duplication). I also
    discuss the secure, reliable storage and network transfer of large image files.
    The chapter ends with a description of secure wiping and disposal of images and
    files. I’ll begin with the topic of managing image compression.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及获取后管理取证图像文件的各个方面。与磁盘上的典型文件相比，磁盘镜像非常庞大，移动、复制和转换这些大文件可能会变得笨重且耗时。你将学习多种管理大图像文件的技术，以帮助克服各种挑战。这些技术包括压缩和拆分图像以便更容易处理、使用加密保障图像安全以及在格式之间转换图像。此外，我还将描述如何以只读方式挂载图像进行安全的本地浏览，并演示取证克隆（或磁盘复制）。我还会讨论大图像文件的安全、可靠存储和网络传输。章节的最后我将介绍如何安全地擦除和处置图像及文件。我将从管理图像压缩开始。
- en: '**Manage Image Compression**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**管理图像压缩**'
- en: Raw disk images are always the same size as the total number of sectors they
    contain. The number of files or amount of data on the drive is irrelevant and
    does not affect the size of an uncompressed raw image. With the current widespread
    use of multiterabyte disks, maneuvering images within time and disk capacity constraints
    can be a challenge. Even simply copying an image can take many hours to complete.
    You can reduce this problem somewhat by keeping images compressed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 原始磁盘镜像的大小始终与其包含的扇区总数相同。磁盘上的文件数量或数据量无关紧要，并不会影响未压缩原始镜像的大小。随着当前多太字节磁盘的广泛使用，在时间和磁盘容量的限制下操作镜像可能会面临挑战。即使是简单地复制一个镜像，也可能需要花费几个小时才能完成。通过保持图像压缩，你可以在一定程度上减少这个问题。
- en: Compressing images in a forensic context involves sector-by-sector compression
    of the entire drive (as opposed to compressing each file on the disk). Disks with
    many gigabytes or terabytes of space that have never been written to over the
    life of the drive will compress better, because much of the drive still consists
    of untouched sectors filled with zeros. Well-used disks won’t compress as well
    if most sectors on the drive have been allocated over the lifetime of the drive
    and still contain residual data. Disk images with large numbers of audio and video
    files will compress poorly as well, because these files are already compressed
    with their own algorithms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在取证背景下压缩图像涉及对整个磁盘的逐扇区压缩（与压缩磁盘上每个文件不同）。未曾写入过数据的磁盘，尤其是那些存有大量千兆字节或太字节空间的磁盘，会更容易压缩，因为磁盘的很多部分仍然是未触及的扇区，里面填充着零。使用过的磁盘压缩效果较差，因为大多数扇区已经被分配并且仍然包含残留数据。包含大量音频和视频文件的磁盘镜像压缩效果也不好，因为这些文件已经通过它们自己的算法进行了压缩。
- en: It’s important to choose the most appropriate and efficient compression tool
    and technique. Some tools might have file size limitations, either for the original
    source file or the compressed destination file. Other tools may be inefficient
    or use temporary files during compression, causing memory exhaustion or creating
    disk space issues. To solve some of these problems when you’re performing compression
    activity, you can use piping and redirection.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最合适和高效的压缩工具和技术非常重要。有些工具可能对原始源文件或压缩后的目标文件有大小限制。其他工具可能效率较低，或者在压缩过程中使用临时文件，导致内存耗尽或产生磁盘空间问题。为了在进行压缩操作时解决这些问题，你可以使用管道和重定向。
- en: One of the most useful features of working with a compressed forensic image
    is the ability to use forensic tools against it without having to uncompress the
    entire image. But this is problematic with some compression tools, because they’re
    not able to seek within a compressed file. *Seeking* allows a program to randomly
    access any point in a file. Forensic formats are designed to allow analysis programs
    on-the-fly, random access to compressed images. The popular forensic formats all
    support image compression, which usually occurs during acquisition, although not
    all tools compress by default.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用压缩后的取证镜像最有用的功能之一是能够在不解压整个镜像的情况下直接使用取证工具进行分析。但这对于某些压缩工具来说是个问题，因为它们无法在压缩文件中进行定位。*定位*
    允许程序随机访问文件中的任何位置。取证格式被设计为允许分析程序在压缩镜像上进行实时的随机访问。流行的取证格式都支持镜像压缩，通常在采集过程中进行，尽管并非所有工具默认进行压缩。
- en: '***Standard Linux Compression Tools***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***标准 Linux 压缩工具***'
- en: Commonly used compression tools in the open source world today are zip, gzip,
    and bzip (version 1 or 2). The examples in this section use gzip, but you can
    use other compression tools as well. To attempt better compression at the expense
    of time and CPU cycles, you can adjust the level of compression.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当前开源世界中常用的压缩工具有 zip、gzip 和 bzip（版本 1 或 2）。本节中的示例使用了 gzip，但您也可以使用其他压缩工具。如果希望以时间和
    CPU 周期为代价，尝试更好的压缩，您可以调整压缩级别。
- en: 'Given enough disk space, you can simply compress a disk image file in place,
    like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有足够的磁盘空间，您可以直接压缩磁盘镜像文件，方法如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command creates the file *image.raw.gz* and deletes the original file on
    completion. Enough space needs to be available for the compressed and uncompressed
    files to coexist during the compression process. The same applies for uncompressing
    files using gunzip.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建文件 *image.raw.gz*，并在完成后删除原始文件。在压缩过程中，压缩文件和解压文件需要足够的空间共存。使用 gunzip 解压文件时同样适用。
- en: 'You can also compress images on the fly during acquisition using piping and
    redirection. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在采集过程中通过管道和重定向实现即时压缩。例如：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here the input file is a raw disk device. Not specifying an output file for
    dcfldd sends the image data stream to stdout, which is piped into gzip, which
    is finally redirected into a compressed file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的输入文件是一个原始磁盘设备。没有指定输出文件时，dcfldd 会将镜像数据流发送到标准输出（stdout），然后通过管道传递给 gzip，最后重定向到一个压缩文件中。
- en: 'The compressed file can be uncompressed to a raw image file, where you can
    use forensic tools to directly operate on it. Alternatively, you can pipe an uncompressed
    stream into some programs using stdout and stdin. For example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩文件可以解压为原始镜像文件，您可以使用取证工具直接对其进行操作。或者，您可以将解压后的数据流通过 stdout 和 stdin 管道传递给某些程序。例如：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here zcat uncompresses the image and pipes it into a program to produce a sha256
    cryptographic hash. It’s worth noting that the gzip file format contains additional
    metadata, such as a creation timestamp, original filename, and other information.
    The hash of a gzip container (*image.raw.gz*) will be different each time it’s
    created, even though the hash of the compressed file inside will be the same.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，zcat 解压图像并将其传递给程序，以生成 sha256 加密哈希。值得注意的是，gzip 文件格式包含额外的元数据，如创建时间戳、原始文件名和其他信息。即使压缩文件内的哈希值相同，gzip
    容器（*image.raw.gz*）的哈希值每次创建时也会不同。
- en: '***EnCase EWF Compressed Format***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***EnCase EWF 压缩格式***'
- en: 'The ewfacquire tool provides flags to control compression during the acquisition
    process. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ewfacquire 工具提供了控制采集过程中文件压缩的标志。例如：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the `-c` flag can specify a compression algorithm together
    with a compression level. Here, the algorithm was bzip2 configured with the best
    possible compression level. Because only EWFv2 formats support bzip2, the format
    version `encase7-v2` was specified as a parameter. Note that ewftools needs to
    be compiled with bzip2 support.^([1](footnote.xhtml#fn39))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`-c` 标志可以指定一个压缩算法以及压缩级别。这里，算法是 bzip2，配置为最佳的压缩级别。由于只有 EWFv2 格式支持 bzip2，因此指定了格式版本
    `encase7-v2` 作为参数。请注意，ewftools 需要编译时支持 bzip2。^([1](footnote.xhtml#fn39))
- en: '***FTK SMART Compressed Format***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FTK SMART 压缩格式***'
- en: 'The command line ftkimager tool supports compressed images during acquisition,
    as the following example shows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具 ftkimager 支持在采集过程中使用压缩镜像，如以下示例所示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here the `--s01` flag specifies the creation of a SMART ew-compressed image,
    and the `--compress` flag sets the highest compression level. You can use the
    `--help` flag to get more information about compression options for ftkimager.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`--s01`标志指定创建一个SMART ew压缩映像，而`--compress`标志设置为最高压缩级别。你可以使用`--help`标志来获取有关ftkimager压缩选项的更多信息。
- en: '***AFFlib Built-In Compression***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***AFFlib内置压缩***'
- en: Although AFFv3 has been deprecated (*[http://forensicswiki.org/wiki/AFF](http://forensicswiki.org/wiki/AFF)*)
    and the use of aimage is discouraged (*[http://forensicswiki.org/wiki/Aimage](http://forensicswiki.org/wiki/Aimage)*),
    aimage’s use of AFFv3 compression is mentioned here for illustration purposes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管AFFv3已被弃用（*[http://forensicswiki.org/wiki/AFF](http://forensicswiki.org/wiki/AFF)*)，并且不鼓励使用aimage（*[http://forensicswiki.org/wiki/Aimage](http://forensicswiki.org/wiki/Aimage)*)，但这里提到aimage使用AFFv3压缩仅用于示范目的。
- en: 'The following example demonstrates imaging a disk using aimage and specifying
    the LZMA compression algorithm (rather than the zlib default):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用aimage进行磁盘映像并指定LZMA压缩算法（而不是默认的zlib）：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Sleuth Kit forensics software provides integrated support for AFFlib compressed
    images. AFFv4 introduces the aff4imager tool, which adds additional features.
    This can be fournd at *[https://github.com/google/aff4/](https://github.com/google/aff4/)*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Sleuth Kit法医学软件提供了对AFFlib压缩映像的集成支持。AFFv4引入了aff4imager工具，新增了额外的功能。这个工具可以在*[https://github.com/google/aff4/](https://github.com/google/aff4/)*找到。
- en: '***SquashFS Compressed Evidence Containers***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***SquashFS压缩证据容器***'
- en: Recall that using SquashFS as a forensic evidence container was described in
    [Chapter 6](ch06.xhtml#ch06). When you’re creating a SquashFS file, you can tune
    several compression parameters. Three compression algorithms (gzip, lzo, xz) are
    available, various metadata from SquashFS can be compressed (inode table, extended
    attributes), and other tweaks can be made as well. See the squashfs(1) manual
    page for more information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在[第6章](ch06.xhtml#ch06)中描述了如何使用SquashFS作为法医证据容器。当你创建SquashFS文件时，可以调整多个压缩参数。提供了三种压缩算法（gzip、lzo、xz），可以压缩SquashFS的各种元数据（如inode表、扩展属性），还可以进行其他调整。更多信息请参见squashfs(1)手册页。
- en: 'In this example, a raw image file was converted to a compressed SquashFS file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个原始映像文件被转换为一个压缩的SquashFS文件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the `-comp` flag sets the compression algorithm to lzo (gzip is the default),
    and the `-noI` flag prevents compression of the inodes (of the SquashFS container,
    not the evidence image).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-comp`标志将压缩算法设置为lzo（gzip是默认的），而`-noI`标志则阻止压缩inode（指的是SquashFS容器中的inode，而不是证据映像中的inode）。
- en: The sfsimage shell script manages the creation of SquashFS forensic evidence
    containers with a few added forensic features.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: sfsimage shell脚本管理SquashFS法医证据容器的创建，并增加了一些额外的法医功能。
- en: 'The use of compression is fundamental when you’re working with large forensic
    images. However, even compressed images can still be very large to manage. There
    is another method that makes this process easier: you can split forensic images
    into multiple smaller pieces.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型法医映像时，压缩的使用是至关重要的。然而，即使是压缩的映像，管理起来仍然可能非常庞大。还有一种方法可以简化这一过程：你可以将法医映像拆分成多个较小的部分。
- en: '**Manage Split Images**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**管理拆分映像**'
- en: 'Managing acquired disk images can be problematic due to their large file sizes.
    Breaking an image into smaller, easier-to-handle pieces can help solve this problem.
    Consider the following examples in which a split image can be beneficial:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件大小庞大，管理获取的磁盘映像可能会出现问题。将映像分割成较小、易于处理的部分可以帮助解决这个问题。请考虑以下几个例子，在这些情况下，拆分映像可能是有益的：
- en: • Network transfers over unstable connections can be done with multiple smaller
    downloads using split images.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 在不稳定的网络连接下，可以通过多个较小的下载来进行网络传输，使用拆分映像。
- en: • A large image might exceed the maximum file size for a software tool. Splitting
    the image offers a workaround.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个大的映像文件可能会超过软件工具的最大文件大小。拆分映像提供了一种解决方法。
- en: • Storage media, such as tapes, CDs, or DVDs, have a fixed maximum capacity.
    Split images allow you to use a set of these media.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: • 存储介质，如磁带、CD或DVD，具有固定的最大容量。拆分映像使你可以使用一组这些介质。
- en: • Some filesystems (notably FAT) have a relatively small maximum file size.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: • 某些文件系统（尤其是FAT）具有相对较小的最大文件大小。
- en: The most common use of split images in digital forensics is for the transfer
    and storage of evidence. Historically, this has been done by burning the image
    to a set of CDs or DVDs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分映像在数字取证中的最常见用途是用于证据的传输和存储。历史上，这通常是通过将映像刻录到一组CD或DVD中来完成的。
- en: '***The GNU split Command***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GNU split命令***'
- en: 'Standard Unix and Linux systems have the split tool for breaking a large file
    into several smaller files. The following example uses the `split` command to
    break an existing image into DVD-sized chunks:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Unix和Linux系统提供了split工具，用于将大文件分割成多个较小的文件。以下示例使用`split`命令将现有图像分割成DVD大小的块：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-d` flag specifies that a numeric extension should be added to *image.raw.*
    (note the trailing dot); the `-b` flag specifies the size of the chunks made from
    the *image.raw* file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d`标志指定应该将数字扩展名添加到*image.raw.*（注意末尾的点）；`-b`标志指定从*image.raw*文件中分割出的块的大小。'
- en: 'Using a combination of piping between several tools, you can combine compressing
    and splitting during acquisition to save time and space. Here’s an example of
    a single command acquiring an image with dd, compressing it with gzip, and splitting
    it into CD-sized chunks:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将多个工具结合使用，可以在采集过程中同时进行压缩和分割，从而节省时间和空间。以下是一个示例：使用dd命令采集图像，使用gzip压缩，并将其分割成CD大小的块：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `split` command’s input file is *-*, which specifies stdin, and it splits
    the compressed byte stream into pieces. It’s important to note that the parts
    are not individually gzipped and cannot be individually uncompressed. The split
    parts must be reassembled before they can be uncompressed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`split`命令的输入文件是*-*，指定了标准输入，并将压缩字节流分割成多个部分。需要注意的是，这些部分不会被单独压缩，不能单独解压。必须将分割后的部分重新组装才能进行解压。'
- en: '***Split Images During Acquisition***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***采集过程中分割图像***'
- en: You can split an imaged hard disk into parts during the acquisition process
    rather than in a separate step at a later date. Before acquiring a large disk,
    consider whether you might need a split image in the future and what fragment
    size would make the most sense. Starting with the right split image could save
    you time and disk space during an investigation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在采集过程中将成像的硬盘分割成多个部分，而不是在后续的单独步骤中进行分割。在采集大磁盘之前，考虑一下是否可能需要分割图像，以及什么样的碎片大小最合适。从一开始就使用合适的分割图像可以在调查过程中节省时间和磁盘空间。
- en: Split images are common in digital forensics and therefore are well supported
    by forensic acquisition and analysis tools. Typically, flags can set the fragment
    size and customize the extension of a split image.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 分割图像在数字取证中非常常见，因此取证采集和分析工具对其提供了良好的支持。通常，标志可以设置碎片大小并自定义分割图像的扩展名。
- en: 'The dcfldd tool provides built-in splitting functionality. For example, if
    you’ll later transfer an image to a third party via a set of 16GB USB sticks,
    you can use dcfldd to acquire an image using the `split=16G` flag before the output
    file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: dcfldd工具提供了内建的分割功能。例如，如果你以后将图像通过一组16GB的USB闪存盘传输给第三方，可以在输出文件之前使用`split=16G`标志来使用dcfldd采集图像：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The default extension is a three-digit number appended to the output filename.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认扩展名是附加到输出文件名后的三位数字。
- en: 'Using the dc3dd tool, you can split images during acquisition by specifying
    the output size with `ofsz=`. The file extensions are numerical, as shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用dc3dd工具时，可以通过指定`ofsz=`来分割采集过程中的图像，设置输出大小。文件扩展名是数字，如下所示：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Be sure the file extension has enough zeros, or else dc3dd will fail to complete
    and generate an error message, such as `[!!] file extensions exhausted for image.raw.0`.
    The last file in the set will usually be smaller than the others (unless the image
    size is perfectly divisible by the split file size).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保文件扩展名中有足够的零，否则dc3dd将无法完成并生成错误消息，例如`[!!] file extensions exhausted for image.raw.0`。该文件集中的最后一个文件通常会比其他文件小（除非图像大小正好可以被分割文件大小整除）。
- en: 'EnCase tools typically default to splitting images during acquisition. You
    can acquire a disk to a split EnCase image using ewfacquire by specifying a maximum
    segment file size using the `-S` flag:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: EnCase工具通常默认为在采集过程中分割图像。你可以使用ewfacquire通过指定最大分段文件大小（`-S`标志）来将磁盘采集成一个分割的EnCase图像：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The commercial EnCase forensic suite can then use these images directly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 商业版EnCase取证套件可以直接使用这些图像。
- en: 'The ftkimager tool provides the `--frag` flag to save an image into parts during
    acquisition, as shown in this example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ftkimager工具提供了`--frag`标志，用于在采集过程中将图像保存为多个部分，如下示例所示：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here the disk is acquired with a maximum fragment size set at 20GB, and the
    format is a SMART compressed image. Notice the addition of the **.txt* file containing
    the metadata. Unlike some forensic formats, this is not embedded into FTK split
    files created by ftkimager.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的磁盘是通过设置最大碎片大小为20GB的方式进行获取，格式是SMART压缩镜像。请注意，添加了包含元数据的**.txt**文件。与某些法医格式不同，这些元数据并未嵌入由ftkimager创建的FTK拆分文件中。
- en: '***Access a Set of Split Image Files***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***访问拆分镜像文件集***'
- en: 'Forensic tools, such as Sleuth Kit, provide support for operating directly
    on a set of split images without needing to reassemble them first. To list the
    supported images in Sleuth Kit, use the `-i list` flag with any Sleuth Kit image-processing
    tool:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 法医工具，如Sleuth Kit，支持直接对拆分镜像集进行操作，而无需先重新组装它们。要列出Sleuth Kit中支持的镜像，可以在任何Sleuth Kit图像处理工具中使用`-i
    list`标志：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, there is support for split raw images (including Unix split
    files), split AFF images, and split EnCase files (though this is not explicitly
    stated, split EnCase files are supported). Some of these image format types might
    need to be explicitly included when compiling the Sleuth Kit software.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，支持拆分原始镜像（包括Unix拆分文件）、拆分AFF镜像和拆分EnCase文件（尽管没有明确说明，但拆分EnCase文件是受支持的）。这些图像格式类型中的一些可能需要在编译Sleuth
    Kit软件时显式包含。
- en: 'In the following example, an EWF image is split into 54 pieces. Running the
    `img_stat` command on the first file provides information about the complete set
    of files:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，一个EWF镜像被拆分为54个部分。运行`img_stat`命令对第一个文件进行操作，可以提供完整文件集的信息：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using various tools, you can operate on split images directly. Most Sleuth Kit
    commands will work with a set of split raw files when you specify the first file
    of the split image type.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种工具，你可以直接操作拆分的镜像。当你指定拆分镜像类型的第一个文件时，大多数Sleuth Kit命令将适用于拆分的原始文件集。
- en: 'Recent versions of Sleuth Kit will automatically check for sets of split files:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最近版本的Sleuth Kit会自动检查拆分文件集：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Earlier versions of Sleuth Kit may require that you specify a split image type:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本的Sleuth Kit可能要求你指定拆分镜像类型：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To check whether a set of split files is recognized, the `img_stat` command
    will show the total bytes recognized, and for raw types, the byte offset ranges
    for each piece:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一组拆分文件是否被识别，`img_stat`命令将显示已识别的总字节数，对于原始类型，它还会显示每个部分的字节偏移范围：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: An alternative method for determining whether split files are supported is to
    run the command or tool with `strace -e open` and see if it opens each of the
    split file pieces.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种确定是否支持拆分文件的方法是运行命令或工具，并使用`strace -e open`来查看是否打开了每个拆分文件部分。
- en: Splitting files and working with a set of split files are useful, but sometimes
    you need to reassemble them into a single image. This is shown in the next section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分文件并操作拆分文件集非常有用，但有时你需要将它们重新组装成一个完整的镜像。这将在下一节中展示。
- en: '***Reassemble a Split Image***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重新组装拆分镜像***'
- en: Reassembling split forensic formats is generally not needed, because tools that
    are compatible with a particular forensic format (EWF, SMART, or AFF) should support
    split files.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一般情况下，不需要重新组装拆分的法医格式文件，因为与特定法医格式（如EWF、SMART或AFF）兼容的工具应该能够支持拆分文件。
- en: 'Because no header or meta information is contained in a raw image, reassembly
    is simply a matter of concatenating the set of image fragments into a single image.
    Doing this carefully should be a two-step process, as shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为原始镜像中不包含任何头部或元数据信息，重新组装只是将一组镜像片段连接成一个完整的镜像。仔细操作时，这应该是一个两步过程，如下所示：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `ls -1` flag will list the files recognized by the shell-globbing pattern.
    Be sure to confirm that this is a complete and ordered list before using it to
    concatenate the files into a single image. If split pieces are missing or the
    file order is wrong, the assembled parts will not create the correct forensic
    image.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls -1`标志将列出由shell通配符模式识别的文件。使用此列表将文件连接成一个完整镜像之前，请务必确认这是一份完整且有序的列表。如果拆分片段丢失或文件顺序错误，组装后的部分将无法创建正确的法医镜像。'
- en: 'If you’ve received a stack of DVDs, each containing a fragment of a compressed
    raw image, you can reassemble them as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到一堆DVD，每张DVD包含一个压缩原始镜像的片段，你可以按以下方式重新组装它们：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, DVDs are repeatedly inserted and mounted on `/dvd`, and split parts are
    added until the image file is restored. Note that `>` in the initial cat command
    creates the image file, and `>>` in the subsequent commands appends the data (not
    overwriting it). After all parts have been appended to the destination file, the
    cryptographic hash of the uncompressed image should match the one taken during
    acquisition.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，DVD被反复插入并挂载到`/dvd`，直到映像文件被恢复，期间不断添加分割部分。请注意，初始的cat命令中的`>`创建了映像文件，而随后的命令中的`>>`则是追加数据（而非覆盖）。所有部分添加到目标文件后，解压后的映像的加密哈希应与获取时记录的哈希一致。
- en: 'You can also uncompress and assemble a set of split files from a compressed
    image by piping all the split files into zcat and redirecting the output to a
    file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将所有分割文件传输到zcat，并将输出重定向到一个文件，来解压并组装来自压缩映像的一组分割文件：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A useful method provided by AFFlib allows for the *virtual reassembly* of a
    set of fragments using a FUSE filesystem. The affuse tool can present a set of
    split files as a fully assembled raw image file, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: AFFlib提供的一个有用方法允许使用FUSE文件系统对一组碎片进行*虚拟重组*。affuse工具可以将一组分割文件呈现为一个完整的原始映像文件，如下所示：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, a directory full of raw files is represented as a single disk image file
    and is found in the */mnt* virtual filesystem. You can directly operate on this
    raw file using forensic tools.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一个包含原始文件的目录被表示为一个单一的磁盘映像文件，并且可以在*/mnt*虚拟文件系统中找到。你可以直接使用取证工具对这个原始文件进行操作。
- en: '**Verify the Integrity of a Forensic Image**'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**验证取证映像的完整性**'
- en: Verifying the cryptographic hash of an image is fundamental to performing digital
    forensics, and it’s the basis of preserving digital evidence. This section provides
    examples of verifying an image’s cryptographic hashes and signatures.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 验证映像的加密哈希是数字取证中至关重要的一步，它是保留数字证据的基础。本节提供了验证映像的加密哈希和签名的示例。
- en: Verifying the preservation of evidence involves confirming that a current cryptographic
    hash of an image is identical to a hash taken at an earlier point in time. You
    can use hashing to verify a successful operation on a disk or image (acquisition,
    conversion, transfer, backup, and so on). You can also use it to verify that a
    disk or image file has not been tampered with over a longer period of time (months
    or even years).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 验证证据的保留涉及确认映像的当前加密哈希与之前某个时间点的哈希是否一致。你可以使用哈希值来验证磁盘或映像上的成功操作（获取、转换、传输、备份等）。你还可以用它来验证磁盘或映像文件在较长时间内（几个月甚至几年）是否未被篡改。
- en: The requirements for hashing (procedures and algorithms) depend on the legal
    jurisdiction where they are used and on the organizational policies governing
    a forensic lab. Thus, no hashing recommendations are provided here.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希的要求（过程和算法）取决于使用的法律管辖区以及对取证实验室的组织政策。因此，本节不提供具体的哈希推荐。
- en: '***Verify the Hash Taken During Acquisition***'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***验证获取时的哈希值***'
- en: 'After acquiring a disk, if you need to validate the acquisition hash, it’s
    a simple (but possibly time-consuming) task of piping the contents of the disk
    into a cryptographic hashing program. Using a different program to validate a
    disk’s hash provides an independent verification at the tool level. For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 获取磁盘后，如果你需要验证获取的哈希值，任务非常简单（但可能耗时），只需将磁盘内容传输到加密哈希程序中。使用不同的程序来验证磁盘的哈希值，能够在工具层面提供独立的验证。例如：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, the img_stat output indicates the MD5 acquisition hash recorded by an
    EnCase imaging tool. A second tool, regular dd, is then used to recalculate the
    hash from the raw disk device. In this example, the two MD5 hashes match, confirming
    that the evidence integrity has been preserved.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，img_stat输出指示了EnCase成像工具记录的MD5获取哈希。接着，使用第二个工具——常规的dd命令，重新计算来自原始磁盘设备的哈希。在这个例子中，两个MD5哈希匹配，确认证据的完整性得到了保留。
- en: '***Recalculate the Hash of a Forensic Image***'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重新计算取证映像的哈希值***'
- en: 'Each of the forensic formats and the dd-based forensic tools can record or
    log a hash value of a disk image. To validate the recorded hash, you can recalculate
    the disk image’s hash. In the following example, the hash was recorded during
    acquisition with dc3dd and stored in the *hashlog.txt*. The hash can be verified
    as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每种取证格式和基于dd的取证工具都可以记录或日志记录磁盘映像的哈希值。为了验证记录的哈希值，你可以重新计算磁盘映像的哈希值。在以下示例中，哈希值是在使用dc3dd进行获取时记录的，并存储在*hashlog.txt*中。哈希值可以通过以下方式验证：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The hashes match, confirming that the evidence file and the hash log are consistent
    and thus indicating that the evidence integrity has been preserved.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希匹配，确认证据文件和哈希日志一致，从而表明证据的完整性得到了保留。
- en: 'The following example validates the image stored in the metadata of the EnCase
    format. In this example, a dedicated tool, ewfverify, is used to validate the
    hash:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例验证存储在EnCase格式元数据中的镜像。在此示例中，使用专用工具ewfverify来验证哈希：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, the recalculated hash matches, confirming the consistency of the EWF image
    file. This tool will automatically validate the hash of a set of split files in
    the EnCase forensic format.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，重新计算的哈希值匹配，确认了EWF镜像文件的一致性。该工具会自动验证一组拆分文件的哈希值，这些文件属于EnCase取证格式。
- en: 'The affinfo tool performs similar validity checking for AFF files. In this
    example, the SHA1 hash is validated:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: affinfo工具对AFF文件执行类似的有效性检查。在此示例中，SHA1哈希值被验证：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This output confirms that the hash of the image contained inside the AFF file
    is the same as the hash recorded in the AFF metadata.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出确认AFF文件中包含的镜像的哈希值与AFF元数据中记录的哈希值相同。
- en: '***Cryptographic Hashes of Split Raw Images***'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***拆分原始镜像的加密哈希值***'
- en: 'Calculating the cryptographic hash of a set of raw split files is straightforward,
    and you can do this by piping the concatenated parts into a hashing program. This
    example calculates the sha256 hash of a set of split raw files:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 计算一组原始拆分文件的加密哈希值是直接的，你可以通过将连接起来的部分传递到哈希程序中来完成此操作。以下示例计算一组拆分原始文件的sha256哈希值：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This example assumes the filenames of the parts can be sorted in the correct
    order (can be verified in this example with `ls -1 image.raw.*`). The `cat` command
    is necessary here, as it is concatenating (assembling) all of the pieces before
    they are piped into sha256sum.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例假设文件部分的文件名可以按正确的顺序排序（在此示例中，可以通过`ls -1 image.raw.*`进行验证）。这里需要使用`cat`命令，因为它在将所有部分拼接在一起后，才能将其传递给sha256sum。
- en: 'You can verify the cryptographic hash of an image that has been compressed
    and split into pieces by forming a command pipeline of several programs. In the
    following example, cat assembles the image and pipes it into zcat for uncompression.
    The output of zcat is sent to the hashing program, which produces a hash value
    upon completion:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过形成多个程序的命令管道来验证已压缩并拆分成多个部分的镜像的加密哈希值。在以下示例中，cat将镜像拼接在一起，并将其传递给zcat进行解压。zcat的输出被发送到哈希程序中，程序完成后会生成一个哈希值：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, the `cat` command is necessary because it is concatenating all the split
    pieces before passing to zcat. Using `zcat image.raw.gz.*` will fail because it
    will try to uncompress each piece rather than the assembled image.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`cat`命令是必要的，因为它在传递给zcat之前将所有拆分的部分连接在一起。使用`zcat image.raw.gz.*`会失败，因为它会尝试解压每个文件片段，而不是解压整个拼接后的镜像。
- en: In the Unix community, *useless use of cat (UUOC)* describes using the `cat`
    command to send a file to command when `<` could be used instead. Traditional
    Unix communities have given out UUOC awards to encourage more efficient use of
    shell command redirection. However, the examples in this section do need `cat`
    because they perform a concatenation function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix社区中，*无用的cat命令使用（UUOC）*指的是使用`cat`命令将文件传送到命令，而可以使用`<`来代替。传统的Unix社区会授予UUOC奖项，鼓励更高效地使用Shell命令重定向。然而，本节中的示例确实需要`cat`命令，因为它们执行了连接功能。
- en: '***Identify Mismatched Hash Windows***'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***识别不匹配的哈希窗口***'
- en: As disks age, or as they are transported and handled, there’s a risk of damage,
    possibly introducing bad sectors. If an original evidence disk produces unreadable
    sector errors since it was first imaged, the cryptographic checksum for the disk
    will fail to match. Hash windows become valuable in this case, because you can
    use them to identify more precisely which part of the disk failed to match. More
    important, hash windows can show which areas of a disk are still preserved, even
    though the hash for the entire disk has failed to match.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 随着磁盘老化，或在运输和处理过程中，可能会出现损坏的风险，进而可能引入坏道。如果原始证据磁盘自首次镜像以来就出现不可读的扇区错误，那么该磁盘的加密校验和将无法匹配。在这种情况下，哈希窗口变得非常有价值，因为你可以利用它们更精确地识别磁盘上哪个部分未能匹配。更重要的是，哈希窗口可以显示磁盘哪些区域仍然被保留，即使整个磁盘的哈希匹配失败。
- en: The specified size of a hash window determines how often a new hash is written
    during the acquisition of a disk or when you’re verifying disk hash windows. When
    you’re comparing two lists of hashes for verification, both lists must use the
    same size of hash window. To find the mismatching areas, you can compare the two
    hash logs using the Unix diff tool.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希窗口的指定大小决定了在获取磁盘或验证磁盘哈希窗口时，每次写入新哈希的频率。当比较两个哈希列表以进行验证时，两个列表必须使用相同大小的哈希窗口。要找到不匹配的区域，可以使用Unix
    diff工具比较这两个哈希日志。
- en: 'In the following example, a disk was imaged with dcfldd and a hash log with
    a 10M hash window size was saved. A subsequent verification failed to match the
    MD5 for the entire disk and provided a new hash log, also with a 10M hash window
    size:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，使用dcfldd对磁盘进行了成像，并保存了一个具有10M哈希窗口大小的哈希日志。后续的验证未能匹配整个磁盘的MD5哈希，并提供了一个新的哈希日志，仍然使用10M哈希窗口大小：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This output reveals mismatched hashes for the full image and also for the range
    of bytes between 20971520 and 31457280\. Dividing by the 512-byte sector size
    identifies the sector range between 40960 and 61440 where the hash mismatch occurred.
    The hashes on the rest of the disk are still good; only the sectors with mismatched
    hashes have not been forensically preserved. Content (blocks, files, portions
    of files, and so on) residing on a hash-mismatched sector range can be excluded
    from the presented evidence at a later stage. If two cryptographic hashes of a
    full image are a match, you can assume that all the hash windows also match.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出揭示了完整图像以及介于20971520到31457280字节之间的字节范围的哈希值不匹配。通过除以512字节的扇区大小，可以确定哈希值不匹配发生的扇区范围为40960到61440。磁盘其余部分的哈希值仍然是有效的；只有哈希值不匹配的扇区没有进行法医保留。位于哈希值不匹配的扇区范围内的内容（块、文件、文件部分等）可以在后续阶段从提交的证据中排除。如果两个完整图像的加密哈希值匹配，那么可以假设所有哈希窗口也匹配。
- en: The cryptographic hashes of forensic images preserve the integrity of collected
    evidence. However, the hash values themselves are not protected against malicious
    or accidental modification. Confirming the integrity of the calculated hashes
    can be preserved using cryptographic signing and time-stamping. Confirming the
    validity of signatures and timestamps is shown in the next section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 法医图像的加密哈希值保持了收集证据的完整性。然而，哈希值本身并未受到防止恶意或意外修改的保护。通过加密签名和时间戳，可以确认计算的哈希值的完整性得到保留。验证签名和时间戳的有效性将在下一节中展示。
- en: '***Verify Signature and Timestamp***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***验证签名和时间戳***'
- en: 'The previous chapter demonstrated the use of GnuPG to sign a disk’s hashes.
    You can verify the signature without having the signing private key. The original
    person who signed the evidence is not needed; only their public key is needed.
    This example verifies the gpg signature of the person who signed the acquired
    disk image:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章节演示了如何使用GnuPG对磁盘的哈希值进行签名。你可以在没有签名私钥的情况下验证签名。无需原始签署证据的人；只需要他们的公钥即可。此示例验证了对获取的磁盘镜像进行签名的人员的gpg签名：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, the contents of the signed message (the acquisition output and hash) are
    displayed together with a gpg message indicating that the signature is valid.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，显示了签名消息的内容（获取输出和哈希），以及一个gpg消息，表明签名是有效的。
- en: 'For S/MIME signed messages, a similar command will validate (or invalidate)
    the signature from a PEM file and looks like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于S/MIME签名消息，类似的命令将验证（或使之失效）来自PEM文件的签名，命令如下所示：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[Chapter 6](ch06.xhtml#ch06) discussed using timestamping services to generate
    RFC-3161 timestamps from a timestamp authority. Validating a timestamp is similar
    to validating a signature with S/MIME and requires the correct chain of certificate
    authority (CA) certificates to be installed for verification to be successful.
    This example verifies the previous timestamp created with FreeTSA (*[http://freetsa.org/](http://freetsa.org/)*).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.xhtml#ch06)讨论了使用时间戳服务从时间戳机构生成RFC-3161时间戳。验证时间戳类似于使用S/MIME验证签名，并且需要安装正确的证书颁发机构（CA）证书链，以便验证成功。此示例验证了之前使用FreeTSA创建的时间戳（*http://freetsa.org/*）。'
- en: 'If the timestamping service’s CA certificate is not installed on your system,
    it can be manually fetched. The TSA certificate should have been returned as part
    of the timestamp when the request was made (because of the `-cert` flag). For
    this example, the CA cert is fetched from FreeTSA as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果时间戳服务的CA证书未安装在你的系统中，可以手动获取。TSA证书应在请求时作为时间戳的一部分返回（由于`-cert`标志）。在此示例中，CA证书是从FreeTSA获取的，方法如下：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Assuming CA and TSA certificates are available to OpenSSL and valid, you can
    validate the timestamp as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 假设CA和TSA证书已经提供给OpenSSL并且有效，你可以通过以下方式验证时间戳：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `openssl ts` command is used to verify the timestamp. The timestamp query
    (`tsq`) and timestamp reponse (`tsr`) are provided, and in this example, the file
    containing the timestamp server’s CA certificate is specified. The third-party
    timestamp is valid (`Verification: OK`), indicating that the file (and the forensic
    acquisition hashes it contains) has not been modified since the specified time.
    If a particular timestamp authority is expected to be used permanently, you can
    add the CA certificates to the OS’s trusted CA store.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`openssl ts`命令用于验证时间戳。提供时间戳查询（`tsq`）和时间戳响应（`tsr`），在此示例中，指定包含时间戳服务器CA证书的文件。第三方时间戳有效（`Verification:
    OK`），这表明自指定时间以来，文件（以及它包含的取证获取哈希值）未被修改。如果期望永久使用某个特定的时间戳认证机构，可以将CA证书添加到操作系统的受信任CA存储中。'
- en: AFFlib also has provisions for signing and validating signatures for acquired
    images using X.509 certificates.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: AFFlib还规定了使用X.509证书签名和验证获取的图像签名的功能。
- en: This section did not discuss the web-of-trust or the public key infrastructure
    (PKI) needed to trust the keys being used to sign images and verify timestamps.
    The examples assume this trust is already established.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本节未讨论信任链或公钥基础设施（PKI），这些是用于信任签署图像和验证时间戳的密钥所必需的。示例假设此信任已建立。
- en: '**Convert Between Image Formats**'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在图像格式之间转换**'
- en: Converting between forensic image formats can be advantageous for various reasons.
    If a lab has new software or infrastructure and the current format is unsupported
    or less efficient, converting to another format could be an option. If you’ll
    be transferring an image to a third party, they might have a preferred image format.
    If you are receiving an image from a third party, you might want to convert it
    to your preferred format. This section provides examples of converting between
    formats on the command line. Conversion from a few source formats is shown, including
    EnCase, FTK, AFF, and raw images. In addition, the examples demonstrate converting
    various formats into SquashFS evidence containers.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同取证图像格式之间转换可能有多种好处。如果实验室有新的软件或基础设施，并且当前格式不受支持或效率较低，转换为其他格式可能是一个选择。如果你需要将图像传输给第三方，他们可能有首选的图像格式。如果你接收来自第三方的图像，可能希望将其转换为你偏好的格式。本节提供了在命令行中进行格式转换的示例。展示了几种源格式的转换，包括EnCase、FTK、AFF和原始图像。此外，示例展示了将各种格式转换为SquashFS证据容器。
- en: When you’re converting between image formats, it’s preferable to use pipes and
    redirection. Avoid tools that use temporary files. During the conversion process,
    two copies of an image might coexist (one or both might be compressed). To prepare
    for the conversion process, do some capacity planning.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在不同图像格式之间转换时，最好使用管道和重定向。避免使用临时文件的工具。在转换过程中，可能会同时存在两份图像（其中一份或两份可能被压缩）。在准备转换过程时，进行一些容量规划。
- en: After conversion, check the hash values from the original image and the destination
    to ensure a match.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后，检查原始图像和目标图像的哈希值，以确保匹配。
- en: '***Convert from Raw Images***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从原始图像转换***'
- en: Converting a raw image to another format is usually straightforward, because
    you can use regular disk-imaging functionality. Instead of a raw device name,
    the filename of the raw image is used.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将原始图像转换为其他格式通常很简单，因为可以使用常规的磁盘映像功能。与其使用原始设备名称，通常使用原始图像的文件名。
- en: 'The following examples show a raw image file being converted into EnCase and
    FTK formats. The first example uses `ewfacquire` to convert *image.raw* to EnCase
    Expert Witness format:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将一个原始图像文件转换为EnCase和FTK格式。第一个示例使用`ewfacquire`将*image.raw*转换为EnCase专家证人格式：
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, the specified source file is the raw image; `-t` is the base name of the
    EnCase target **.e01* files. EnCase version 7 was specified, and when the command
    is executed, a series of questions is asked. Because the raw file has no case
    metadata, you need to enter it manually.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，指定的源文件是原始镜像；`-t` 是 EnCase 目标 **.e01** 文件的基本名称。指定了 EnCase 版本 7，当命令执行时，会询问一系列问题。由于原始文件没有案件元数据，你需要手动输入这些信息。
- en: 'Converting from a raw image to FTK SMART is similar: you specify the raw image
    as a source and manually add the case metadata. Using ftkimage, you specify the
    case metadata on the command line, as shown in this example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始镜像转换为 FTK SMART 类似：你将原始镜像指定为源，并手动添加案件元数据。使用 ftkimage，你在命令行上指定案件元数据，如以下示例所示：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `--s01` flag specifies that a SMART compressed image will be created. The
    base filename is specified simply as `image`, and appropriate file extensions
    will be automatically added.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`--s01` 标志指定将创建一个 SMART 压缩图像。基本文件名仅指定为 `image`，并且适当的文件扩展名会自动添加。'
- en: 'Converting an image to a SquashFS forensic evidence container is also just
    a simple command if you use the sfsimage script, like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 sfsimage 脚本，将图像转换为 SquashFS 取证证据容器也只是一个简单的命令，如下所示：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, the raw image file was specified together with the destination SquashFS
    container filename. The sfsimage script builds the required SquashFS pseudo device
    and adds the log and hash information as regular text files. You can append additional
    case metadata to the evidence container manually (with `sfsimage -a`).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，原始镜像文件与目标 SquashFS 容器文件名一起指定。sfsimage 脚本构建所需的 SquashFS 虚拟设备，并将日志和哈希信息添加为常规文本文件。你可以手动向证据容器中附加额外的案件元数据（使用
    `sfsimage -a`）。
- en: 'You can’t directly access a gzip compressed raw image using typical forensic
    tools because of the inability to seek (randomly access any block within the file)
    within a gzip file. It’s best to convert such files into compressed formats that
    are seekable. Then you can operate on them directly using forensic analysis tools.
    In this example, a gzipped raw image file is converted into a SquashFS compressed
    file using sfsimage:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法直接使用典型的取证工具访问 gzip 压缩的原始镜像，因为无法在 gzip 文件中进行寻址（随机访问文件中的任意块）。最好将此类文件转换为可以寻址的压缩格式。然后你可以直接使用取证分析工具进行操作。在此示例中，一个
    gzip 压缩的原始镜像文件被转换为一个使用 sfsimage 创建的 SquashFS 压缩文件：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The original file remains in raw form, but it’s now inside a compressed filesystem.
    You can mount the resulting **.sfs* file to access the raw image, as shown here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 原始文件仍然以原始形式存在，但现在它位于一个压缩文件系统中。你可以挂载生成的**.sfs**文件来访问原始镜像，如此处所示：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can convert a raw image file into an AFF file by using a simple `affconvert`
    command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个简单的 `affconvert` 命令将原始镜像文件转换为 AFF 文件：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Then you can add the case metadata with a separate tool, such as affsegment.
    The affconvert tool provides sensible defaults for compression, and the resulting
    file has the **.aff* extension with the basename of the raw file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用一个单独的工具（如 affsegment）添加案件元数据。affconvert 工具提供了合理的压缩默认设置，生成的文件具有**.aff**扩展名，并以原始文件的基本名称命名。
- en: 'The following and final example shows the conversion of a raw image inside
    a SquashFS forensic evidence container to an AFF file using the `affconvert` command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最后一个示例，展示了如何使用 `affconvert` 命令将 SquashFS 取证证据容器中的原始镜像转换为 AFF 文件：
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Because SquashFS is read-only, you need to tell `affconvert` to write the output
    file to a different directory that is writable.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SquashFS 是只读的，你需要告诉`affconvert`将输出文件写入一个可写的不同目录。
- en: '***Convert from EnCase/E01 Format***'
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从 EnCase/E01 格式转换***'
- en: The libewf package contains the ewfexport tool for converting EnCase EWF (**.E0**)
    files to other formats. This includes the ability to read one or more files and
    pipe them into other programs.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: libewf 包含了 ewfexport 工具，用于将 EnCase EWF (**.E0**) 文件转换为其他格式。这包括读取一个或多个文件并将它们通过管道传输到其他程序的功能。
- en: '**NOTE**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*There is a bug in some older versions of ewfexport that appends the line*
    `ewfexport: SUCCESS` *to the end of an image after an export to stdout. This added
    string will cause a mismatch in the image MD5 hashes. The string is a fixed length
    of 19 bytes, so you can suppress it by piping it through* `tail -c 19`.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*某些旧版本的 ewfexport 存在一个 bug，会在导出到 stdout 后，将 `ewfexport: SUCCESS` 这一行附加到镜像的末尾。这个添加的字符串会导致图像的
    MD5 校验和不匹配。该字符串的长度为 19 字节，因此你可以通过管道命令* `tail -c 19` *来抑制它。*'
- en: '**Manual Creation of a SquashFS Container**'
  id: totrans-173
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**手动创建 SquashFS 容器**'
- en: Throughout the book, you’ve seen examples of the sfsimage shell script. But
    it’s useful to see one example of creating a SquashFS file without the script.
    This next example will make it easier to understand how sfsimage works internally.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你已经看到了 sfsimage shell 脚本的示例。但看到没有脚本的情况下如何创建 SquashFS 文件也是很有用的。下一个示例将帮助你更好地理解
    sfsimage 如何在内部工作。
- en: 'The following EnCase acquisition contains 54 **.E0* files that will be assembled
    into a single raw image and placed into a SquashFS evidence container:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 EnCase 获取包含 54 个 **.E0* 文件，这些文件将被组合成一个原始镜像并放入 SquashFS 证据容器中：
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To begin, you need a mksquashfs pseudo definition file to define the commands
    that will create files inside the SquashFS container. The pseudo definition file
    contains the target filename, file type, permissions, ownership, and command to
    be executed. The output of that command will become the contents of the defined
    filename inside the SquashFS filesystem.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个 mksquashfs 伪定义文件来定义将创建 SquashFS 容器中文件的命令。伪定义文件包含目标文件名、文件类型、权限、所有者和要执行的命令。该命令的输出将成为定义的文件名在
    SquashFS 文件系统中的内容。
- en: 'In the following example, a file named *pseudo_files.txt* has been created
    that contains two definitions. The first extracts the EnCase metadata with ewfinfo
    and places it into *image.txt* (this metadata would otherwise be lost). The second
    definition exports a raw image from the **.E0* files into *image.raw*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，已创建一个名为 *pseudo_files.txt* 的文件，文件中包含两个定义。第一个定义使用 ewfinfo 提取 EnCase 元数据并将其放入
    *image.txt*（否则这些元数据将丢失）。第二个定义将 **.E0* 文件中的原始镜像导出为 *image.raw*：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `ewfexport` flag `-u` allows the conversion to execute unattended (otherwise
    it prompts the user with questions). The `-t` flag specifies the target, which
    in this example is stdout or the dash `-`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`ewfexport` 标志 `-u` 允许转换过程以无人值守的方式执行（否则它会提示用户提问）。`-t` 标志指定目标，在此示例中是 stdout
    或者破折号 `-`。'
- en: 'With this definition file, you can create the compressed filesystem containing
    the generated files as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个定义文件，你可以创建包含生成文件的压缩文件系统，如下所示：
- en: '[PRE42]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The resulting SquashFS filesystem *image.sfs* will contain three files: the
    raw image file *image.raw*, *image.txt* containing the metadata, and the *pseudo_files.txt*
    file containing the definitions with the executed commands. The mksquashfs(1)
    manual page has more information about the flags and options for creating SquashFS
    file systems.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 SquashFS 文件系统 *image.sfs* 将包含三个文件：原始镜像文件 *image.raw*，包含元数据的 *image.txt*，以及包含已执行命令定义的
    *pseudo_files.txt* 文件。mksquashfs(1) 手册页面提供了有关创建 SquashFS 文件系统的标志和选项的更多信息。
- en: 'You can view the contents of a SquashFS file with the `unsquashfs` command
    as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令使用 `unsquashfs` 查看 SquashFS 文件的内容：
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The final step is to verify the preservation of evidence by comparing MD5 hash
    values. The `ewfinfo` command provides the MD5 hash calculated during the original
    EnCase acquisition. A second MD5 checksum can be calculated with md5sum on the
    newly converted raw image inside the SquashFS container. To do this, you need
    to mount the SquashFS filesystem first. The following example shows each of these
    steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是通过比较 MD5 哈希值来验证证据的完整性。`ewfinfo` 命令提供了原始 EnCase 获取过程中计算的 MD5 哈希值。你可以使用
    md5sum 在 SquashFS 容器中的新转换的原始镜像上计算第二个 MD5 校验和。为此，你需要首先挂载 SquashFS 文件系统。以下示例展示了这些步骤：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The result shows that the two MD5 hashes match, indicating a successfully preserved
    evidence conversion from EnCase to a raw image inside a SquashFS container. A
    third matching MD5 hash can be seen in the ewfexport output that was calculated
    during the conversion process. The ewfexport tool can also convert, or export,
    to other EnCase formats.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示两个 MD5 哈希值匹配，表明从 EnCase 到 SquashFS 容器中的原始镜像的证据转换已成功保存。在转换过程中计算的第三个匹配的 MD5
    哈希可以在 ewfexport 输出中看到。ewfexport 工具还可以转换或导出为其他 EnCase 格式。
- en: When the mounted SquashFS filesystem *image.sfs.d* is no longer needed, it can
    be unmounted with `umount image.sfs.d`. The sfsimage script manages these steps
    for you.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当挂载的 SquashFS 文件系统 *image.sfs.d* 不再需要时，可以通过 `umount image.sfs.d` 将其卸载。sfsimage
    脚本会为你管理这些步骤。
- en: '**Convert Files from EnCase to FTK**'
  id: totrans-190
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**从 EnCase 转换文件到 FTK**'
- en: 'The ftkimager tool can convert from EnCase to FTK. In this example, a set of
    EnCase **.e01* files are converted to SMART ew-compressed files with the same
    name but with the **.s01* extension:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ftkimager 工具可以从 EnCase 转换到 FTK。在此示例中，一组 EnCase **.e01* 文件被转换为 SMART ew 压缩文件，这些文件与原文件具有相同的名称，但扩展名为
    **.s01*：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Hashes are checked and added to the new FTK file. The original case metadata
    is not added to the newly converted files. Instead, it’s extracted from the original
    format and saved as a separate file with the same name but with a **.txt* extension
    (*image.s01.txt* in this example).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希值会被检查并添加到新的FTK文件中。原始的案例元数据不会添加到新转换的文件中，而是从原始格式中提取并保存为一个单独的文件，文件名相同，但扩展名为**.txt*（例如在这个例子中是*image.s01.txt*）。
- en: '***Convert from FTK Format***'
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从FTK格式转换***'
- en: The command line ftkimager tool converts between EnCase and FTK formats, and
    it allows you to use stdin and stdout for conversion with raw image files.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具ftkimager可以在EnCase和FTK格式之间进行转换，并允许您使用stdin和stdout与原始镜像文件进行转换。
- en: 'In the following example, a set of compressed FTK SMART **.s01* files are converted
    to the EnCase EWF *E01 format:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，一组压缩的FTK SMART **.s01* 文件被转换为EnCase EWF *E01格式：
- en: '[PRE46]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The case metadata is not transferred to the new format but is automatically
    saved to a separate file (*image.E01.txt*).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 案例元数据不会转移到新格式中，而是自动保存到单独的文件中（*image.E01.txt*）。
- en: 'The ftkimager can convert SMART **.s01* files to stdout, where you can redirect
    them to raw image files or pipe them into other programs. In the following example,
    a set of FTK SMART files are converted into a SquashFS forensic evidence container
    using ftkimager output piped into sfsimage:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: ftkimager可以将SMART **.s01* 文件转换为stdout，您可以将其重定向到原始镜像文件，或者将其通过管道输入到其他程序中。在以下示例中，一组FTK
    SMART文件被转换为SquashFS法医证据容器，使用ftkimager输出通过管道传递给sfsimage：
- en: '[PRE47]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: When you’re converting from an FTK format into a raw disk image, the case metadata
    is not transferred. You need to manually save the case metadata, which is usually
    found in a separate text file. You can add this to the SquashFS container as shown
    in the previous example with the `sfsimage -a` command.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将FTK格式转换为原始磁盘镜像时，案例元数据不会被转移。您需要手动保存案例元数据，通常它保存在单独的文本文件中。您可以像之前的示例那样，使用`sfsimage
    -a`命令将其添加到SquashFS容器中。
- en: After performing a format conversion of any kind, you should verify the hash
    value separately on the destination format to ensure the evidence integrity has
    been preserved.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何格式转换后，您应当在目标格式上单独验证哈希值，以确保证据的完整性已被保留。
- en: '***Convert from AFF Format***'
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从AFF格式转换***'
- en: 'The affconvert tool can convert AFF images to a raw image (and from a raw image
    to the AFF format). The affconvert tool does not use stdin or stdout; instead,
    it reads or creates stand-alone files. The following simple example shows converting
    an AFF file to a raw image:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: affconvert工具可以将AFF镜像转换为原始镜像（也可以将原始镜像转换为AFF格式）。affconvert工具不使用stdin或stdout，而是读取或创建独立的文件。以下简单示例展示了将AFF文件转换为原始镜像：
- en: '[PRE48]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: To convert a raw image to an AFF format, simply use `affconvert image.raw`,
    and the corresponding *image.aff* file will be created.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要将原始镜像转换为AFF格式，只需使用`affconvert image.raw`，系统会生成相应的*image.aff*文件。
- en: 'To use piping and redirection with AFF files, you can use the affcat tool.
    The previous example can be also be done with `affcat` and redirected to a file
    (without any status or completion information, which is useful for scripts) as
    follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要在AFF文件中使用管道和重定向，您可以使用affcat工具。之前的示例也可以通过`affcat`完成，并将输出重定向到文件（不包含任何状态或完成信息，这对于脚本很有用），如下面所示：
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To convert an AFF image to EnCase or FTK, the affcat tool can pipe an image
    via stdout or stdin into the appropriate tool, creating a new image in the desired
    format. For example, you can convert from AFF to a compressed FTK SMART image
    like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要将AFF镜像转换为EnCase或FTK格式，可以使用affcat工具通过stdout或stdin将镜像传输到相应工具，从而创建所需格式的新镜像。例如，您可以像这样将AFF格式转换为压缩的FTK
    SMART镜像：
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Here, the `-` represents the stdin file descriptor receiving the raw image data,
    `image` is the base filename, and the final flag `--s01` specifies the compressed
    format.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-`代表接收原始镜像数据的stdin文件描述符，`image`是基础文件名，最后的标志`--s01`指定了压缩格式。
- en: 'Similarly, you can convert to various EnCase formats using efwacquirestream.
    For example:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用efwacquirestream转换为各种EnCase格式。例如：
- en: '[PRE51]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the previous AFF conversion examples, the case metadata (case name, examiner
    name, acquisition times, hashes, and so on) is not preserved in the conversion
    from AFF to other formats. But you can export this information using affinfo and
    then add or save it manually to the destination format. Depending on the tool,
    you can also include metadata as command line flags as seen in the previous example
    with `-C 42 -E 1 -e "S. Holmes" -D "Data theft case"`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的AFF转换示例中，案例元数据（如案件名称、检查员姓名、采集时间、哈希值等）在从AFF转换为其他格式时没有得到保留。但你可以使用affinfo导出这些信息，然后手动添加或保存到目标格式中。根据所使用的工具，你也可以将元数据作为命令行参数包含在内，正如前面示例中的`-C
    42 -E 1 -e "S. Holmes" -D "Data theft case"`所示。
- en: 'This final example demonstrates converting an AFF file to a compressed SquashFS
    forensic evidence container using sfsimage:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的这个例子展示了如何使用sfsimage将AFF文件转换为压缩的SquashFS取证证据容器：
- en: '[PRE52]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can extract the metadata from AFF files using affinfo and then add it to
    the SquashFS forensic evidence container as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用affinfo提取AFF文件的元数据，然后将其添加到SquashFS取证证据容器中，方法如下：
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Once the image is converted, compare the hash values of the original image and
    the destination to ensure a match.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像转换完成，比较原始镜像和目标镜像的哈希值，以确保一致性。
- en: '**Secure an Image with Encryption**'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用加密保护镜像**'
- en: An important but often neglected component of digital forensics is information
    security. You should consider the information you acquire and extract during an
    investigation as sensitive and adequately protect its security.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 数字取证中一个重要但常被忽视的组成部分是信息安全。在调查过程中，你应当将获得和提取的信息视为敏感信息，并适当保护其安全性。
- en: The loss of data confidentiality may have undesired consequences. For example,
    it may violate organizational policy requirements, jeopardize legal and regulatory
    compliance, raise victim privacy issues, and do damage to the reputation of the
    investigating organization. Failing to adequately protect acquired evidence could
    result in damage to any of the parties involved, including the investigators and
    their employer, the victim, the defendant, and other participating parties. Leaked
    information could also interfere with or compromise an ongoing investigation.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 数据机密性的丧失可能带来不良后果。例如，这可能违反组织的政策要求，危及法律和合规性，带来受害者隐私问题，甚至损害调查组织的声誉。如果没有充分保护获取的证据，可能会对任何相关方造成损害，包括调查人员及其雇主、受害者、被告及其他参与方。泄露的信息还可能干扰或危及正在进行的调查。
- en: This section focuses on methods for ensuring that information is protected,
    in particular, maintaining security during data transfer and storage (both long-
    and short-term storage). Adding security to images increases the complexity and
    the time needed to encrypt and then later decrypt the images, but the examples
    you’ll see here attempt to keep this process as simple and efficient as possible.
    Basic symmetric encryption is used instead of more complex PKI or web-of-trust
    systems.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍确保信息保护的方法，特别是在数据传输和存储（包括长期和短期存储）过程中维持安全性。为镜像添加安全性会增加加密和后续解密的复杂性和所需时间，但你将在这里看到的示例尽力将这一过程保持尽可能简单高效。这里使用的是基本的对称加密，而非更复杂的公钥基础设施（PKI）或信任网系统。
- en: In addition to the methods shown in this section, the ZIP archive format could
    be used for encryption. Newer versions with the ZIP64 extensions support file
    sizes larger than 4GB. ZIP has the advantage of high compatability with other
    platforms such as Windows.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本节中展示的方法外，ZIP归档格式也可以用于加密。具有ZIP64扩展的较新版本支持超过4GB的文件大小。ZIP格式具有与其他平台（如Windows）高度兼容的优势。
- en: '***GPG Encryption***'
  id: totrans-225
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GPG加密***'
- en: Using symmetric encryption, you can easily encrypt disk images for protection
    during network transfer or storage. GNU Privacy Guard (GPG) encryption provides
    a free implementation of the OpenPGP standard defined by RFC-4880\. It’s an alternative
    to the traditional PGP encryption created by PhilZimmerman in the early 1990s.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对称加密，你可以轻松地加密磁盘镜像，以便在网络传输或存储过程中保护数据。GNU隐私保护工具（GPG）提供了一个免费的实现，符合RFC-4880定义的OpenPGP标准。它是传统PGP加密的替代方案，后者由Phil
    Zimmerman于1990年代初期创建。
- en: 'It’s useful to start the agent when you’re using GPG. (The agent is started
    automatically when using gpg2.) This is typically done at login with the following
    command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用GPG时，启动代理是非常有用的。（使用gpg2时，代理会自动启动。）通常在登录时，通过以下命令启动代理：
- en: '[PRE54]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: For all the examples that follow, the `-v` flag is used to increase verbosity.
    This makes the output more useful for documentation purposes (both in this book
    and for creating formal forensic reports describing the steps taken).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的所有示例中，`-v` 标志用于增加详细输出。这使得输出对于文档编写（无论是本书还是用于创建正式的取证报告）更加有用。
- en: 'Using GPG to encrypt an existing image is very simple, as shown here:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GPG 对现有图像进行加密非常简单，如下所示：
- en: '[PRE55]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'A passphrase is requested, and the image is encrypted with the default symmetric
    encryption algorithm, creating a new file with the extension *.gpg*. The size
    of the image is smaller because GPG compresses as it encrypts. This can be seen
    here:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 会请求输入密码短语，并使用默认的对称加密算法对图像进行加密，创建一个扩展名为 *.gpg* 的新文件。由于 GPG 在加密的同时进行压缩，图像的大小会变小。这可以在这里看到：
- en: '[PRE56]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The previous example showed encrypting a file in place. But you can also encrypt
    on the fly during acquisition:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了在原地加密文件。但你也可以在采集过程中实时加密：
- en: '[PRE57]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Here, dcfldd acquires the attached disk via */dev/sde* and pipes it directly
    into the GPG program. The encrypted output of GPG is then redirected to a file.
    The `sudo` command escalates privileges to root in order to read the raw device.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，dcfldd 通过 */dev/sde* 获取附加的磁盘，并将其直接传输到 GPG 程序。GPG 的加密输出然后被重定向到一个文件。`sudo`
    命令将权限提升为 root，以便读取原始设备。
- en: 'Decrypting a GPG-encrypted image is just as simple as encrypting one. The only
    differences are the use of the decryption flag and the requirement to specify
    an output file (by default, it outputs to stdout). In the following example, a
    GPG-encrypted image file is decrypted to a regular (unprotected) file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 解密一个 GPG 加密的图像和加密过程一样简单。唯一的区别是使用解密标志以及需要指定输出文件（默认情况下，它会输出到 stdout）。在以下示例中，GPG
    加密的图像文件被解密为一个常规（未加密）文件：
- en: '[PRE58]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This example demonstrates symmetric encryption without signing. You can also
    use GPG public and private keys to encrypt, decrypt, and sign images. The integrity
    is verified by comparing the hash of the GPG-encrypted image with the hash of
    the raw image file, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了不带签名的对称加密。你还可以使用 GPG 公钥和私钥来加密、解密和签名图像。通过将 GPG 加密的图像的哈希与原始图像文件的哈希进行比较，可以验证其完整性，如下所示：
- en: '[PRE59]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: When you’re decrypting an image, you need to do some capacity planning. After
    decryption, two copies of the image will exist (one or both will be compressed).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在解密图像时，需要进行一些容量规划。解密后，将会存在两个图像副本（其中一个或两个可能会被压缩）。
- en: A GPG-encrypted file is not seekable, so you cannot operate on its contents
    directly with forensic analysis tools.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: GPG 加密的文件是不可寻址的，因此不能直接使用取证分析工具对其内容进行操作。
- en: '***OpenSSL Encryption***'
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***OpenSSL 加密***'
- en: 'Other cryptographic systems can also provide security for disk images. The
    OpenSSL toolkit (*[http://www.openssl.org/](http://www.openssl.org/)*) provides
    a number of algorithms you can use to encrypt files. For example, to password
    encrypt an image with 256-bit AES using cipher block chaining mode, use this command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 其他加密系统也可以为磁盘镜像提供安全性。OpenSSL 工具包（*[http://www.openssl.org/](http://www.openssl.org/)）*提供了许多可以用来加密文件的算法。例如，要使用
    256 位 AES 和密码块链接模式对图像进行密码加密，可以使用以下命令：
- en: '[PRE60]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'OpenSSL is flexible regarding cipher types and modes, providing dozens of choices.
    Also supported are piping and redirection, and you can easily perform encryption
    during acquisition, for example:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL 对于加密算法和模式非常灵活，提供了数十种选择。还支持管道和重定向，你可以在采集过程中轻松进行加密，例如：
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Decrypting an OpenSSL-encrypted file is also relatively straightforward, provided
    you know the encryption algorithm, as shown here:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 解密一个 OpenSSL 加密的文件也相对简单，只要知道加密算法，如下所示：
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The addition of the `-d` flag signifies this is a decryption operation (`enc`
    specifies that symmetric ciphers are being used). Because OpenSSL doesn’t provide
    an automatic method to detect which symmetric encryption was used, it’s important
    to document how the file was encrypted.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `-d` 标志表示这是一个解密操作（`enc` 指定使用对称加密）。由于 OpenSSL 没有提供自动检测使用了哪种对称加密算法的方法，因此记录文件的加密方式非常重要。
- en: 'Unless specifically compiled with zlib, OpenSSL doesn’t compress files. To
    add compression on the fly during an acquisition, add gzip to the pipeline, like
    this:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 除非专门使用 zlib 编译，否则 OpenSSL 不会压缩文件。为了在采集过程中实时添加压缩，可以将 gzip 添加到管道中，像这样：
- en: '[PRE63]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'To verify the cryptographic hash of the image, you can run a similar command
    pipe, as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证图像的加密哈希，可以运行类似的命令管道，如下所示：
- en: '[PRE64]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Here, the decryption command takes the compressed and encrypted file as input
    and pipes the decrypted output to gunzip, which outputs the raw image to the hashing
    program.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，解密命令将压缩并加密的文件作为输入，并将解密后的输出通过管道传送给 gunzip，后者将原始镜像输出到哈希程序。
- en: Some implementations of ZIP also support built-in encryption and can be used
    to secure images and other evidence files.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 ZIP 实现也支持内建加密，可以用来保护镜像文件和其他证据文件。
- en: '***Forensic Format Built-In Encryption***'
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***法医格式内建加密***'
- en: GPG and OpenSSL are well-known tools for performing various encryption tasks,
    providing compatibility and interoperability with other tools. However, they’re
    not designed for digital forensics, and encrypted image files cannot be used directly
    by standard forensic tools (they must be decrypted first). Some versions of the
    popular forensic formats discussed throughout this book support randomly accessible
    encrypted images.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: GPG 和 OpenSSL 是众所周知的加密工具，提供与其他工具的兼容性和互操作性。然而，它们并非专为数字取证设计，加密后的镜像文件不能直接被标准的法医工具使用（必须先解密）。本书中讨论的某些流行法医格式支持随机访问加密镜像。
- en: 'The ftkimager program can protect image files using a password or a certificate.
    An example of encrypting with a password (*monkey99*) during acquisition is shown
    here:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ftkimager 程序可以使用密码或证书来保护镜像文件。以下是一个在采集过程中使用密码（*monkey99*）进行加密的示例：
- en: '[PRE65]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '**NOTE**'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Including a password in command parameters is generally bad practice. The
    password is visible in the shell history, and anyone can view the password in
    the process table.*'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*在命令参数中包含密码通常是不好的做法。密码会显示在 shell 历史记录中，任何人都可以在进程表中查看密码。*'
- en: 'Attempting to access an encrypted image without a password, or with the incorrect
    password, will generate the following error messages:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在没有密码或密码错误的情况下访问加密镜像将会生成以下错误信息：
- en: '[PRE66]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Operating on an encrypted image requires including the password on the command
    line, as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 对加密镜像进行操作需要在命令行中包含密码，示例如下：
- en: '[PRE67]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Some versions of the EWF format support encryption, and as of this writing,
    libewf support was at various stages of development. Refer to the latest source
    code for current encrypted-format support.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一些版本的 EWF 格式支持加密，截至本文撰写时，libewf 的支持处于不同的开发阶段。有关当前加密格式支持的信息，请参见最新的源代码。
- en: 'The AFFlibsuite allows you to directly access encrypted images via the Advanced
    Forensics Format (AFF) library. From the start, AFFlib was developed with information
    security in mind. It has a number of encryption possibilities for protecting forensic
    images, including password-based (symmetric) and certificate-based (X.509) encryption.
    You can add the protection to an existing acquired image using the affcrypto tool.
    Here is an example:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: AFFlibsuite 允许你通过高级法医格式（AFF）库直接访问加密镜像。从一开始，AFFlib 就是考虑到信息安全而开发的。它提供了多种加密方式来保护法医镜像，包括基于密码的（对称）加密和基于证书的（X.509）加密。你可以使用
    affcrypto 工具为已获取的镜像添加保护。以下是一个示例：
- en: '[PRE68]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Recent versions of dd_rescue implement a plugin interface and (at the time
    of this writing) had plugins for LZO compression, cryptographic hashing, and symmetric
    encryption (AES). The following example shows imaging a disk (*/dev/sdc*) and
    saving the output in encrypted form using the AES plugin:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最近版本的 dd_rescue 实现了插件接口，并且（截至本文撰写时）有 LZO 压缩、加密哈希和对称加密（AES）插件。以下示例展示了如何对磁盘（*/dev/sdc*）进行镜像，并使用
    AES 插件以加密形式保存输出：
- en: '[PRE69]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: If examiners in a forensics lab expect high volumes of encryption, signing,
    and timestamping of images and evidence, it’s worth investing the use of a PKI.
    This could be an in-house PKI system or an external commercial PKI provider.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果法医实验室的检查员预计会处理大量加密、签名和时间戳的镜像与证据文件，那么投资使用公钥基础设施（PKI）是值得的。可以选择使用内部的 PKI 系统，或者外部的商业
    PKI 提供商。
- en: '***General Purpose Disk Encryption***'
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通用磁盘加密***'
- en: The examples in the previous sections focused on protecting individual files
    or file containers. An alternative is to protect the entire drive where the image
    files reside. You can do this with filesystem encryption, in hardware, in user
    space, or in the kernel. You’ll see several examples in this section.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例集中在保护单个文件或文件容器上。另一种选择是保护存放镜像文件的整个驱动器。你可以通过文件系统加密、硬件加密、用户空间加密或内核加密来实现。你将在本节中看到几个示例。
- en: There are high-capacity secure external drives on the market that can be used
    to safely transport image files, such as Lenovo’s ThinkPad Secure Hard Drives,
    one of which is shown in [Figure 7-1](ch07.xhtml#ch7fig1). These drives are OS
    independent and encrypt drive contents with a pin entered in a physical keypad
    on the device.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有一些高容量的安全外部硬盘，可用于安全传输镜像文件，例如联想的ThinkPad安全硬盘，其中一款如[图7-1](ch07.xhtml#ch7fig1)所示。这些硬盘与操作系统无关，并通过设备上的物理键盘输入PIN码来加密硬盘内容。
- en: '![image](../images/f07-01.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-01.jpg)'
- en: '*Figure 7-1: ThinkPad Secure Hard Drive*'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：ThinkPad安全硬盘*'
- en: 'TrueCrypt was once the most popular free and cross-platform filesystem software
    available. But in May 2014, an unexpected and unexplained announcement from the
    developers recommended people find alternatives to TrueCrypt because development
    was stopped. A number of forks and compatible projects resulted, several of which
    are listed here:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: TrueCrypt曾是最流行的免费跨平台文件系统软件。但在2014年5月，开发者发布了一则意外且未作解释的公告，建议用户寻找TrueCrypt的替代品，因为该项目已停止开发。由此衍生出了一些分支和兼容项目，其中一些项目在这里列出：
- en: '• VeraCrypt: *[https://veracrypt.codeplex.com/](https://veracrypt.codeplex.com/)*'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '• VeraCrypt: *[https://veracrypt.codeplex.com/](https://veracrypt.codeplex.com/)*'
- en: '• tc-play: *[https://github.com/bwalex/tc-play/](https://github.com/bwalex/tc-play/)*'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '• tc-play: *[https://github.com/bwalex/tc-play/](https://github.com/bwalex/tc-play/)*'
- en: '• CipherShed: *[https://ciphershed.org/](https://ciphershed.org/)*'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '• CipherShed: *[https://ciphershed.org/](https://ciphershed.org/)*'
- en: '• zuluCrypt: *[http://mhogomchungu.github.io/zuluCrypt/](http://mhogomchungu.github.io/zuluCrypt/)*
    (not an implementation of TrueCrypt but a TrueCrypt manager worth mentioning)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '• zuluCrypt: *[http://mhogomchungu.github.io/zuluCrypt/](http://mhogomchungu.github.io/zuluCrypt/)*（不是TrueCrypt的实现，而是值得一提的TrueCrypt管理工具）'
- en: The rest of the examples in this section use VeraCrypt. As of this writing,
    VeraCrypt was under active development and gaining in popularity as an alternative
    to TrueCrypt.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的其余示例使用VeraCrypt。撰写本文时，VeraCrypt仍在积极开发中，并作为TrueCrypt的替代品，正在获得越来越多的关注。
- en: The following example encrypts an empty external drive in its entirety. You
    can then use the encrypted container for secure transfer or storage of evidence
    data. The veracrypt tool asks a number of questions regarding the setup of the
    encrypted container. Note that in this example, */dev/sda* is an examiner’s drive,
    not a subject drive.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何对整个外部硬盘进行加密。你可以将加密后的容器用于安全传输或存储证据数据。veracrypt工具会询问一些有关加密容器设置的问题。请注意，在此示例中，*/dev/sda*是检查员的硬盘，而非被调查者的硬盘。
- en: '[PRE70]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The drive has now been initialized as a VeraCrypt container (this can take
    a long time, depending on the speed of the PC and the size of the drive). To mount
    a VeraCrypt volume, you use a simple command that includes the source device and
    the mount point:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，硬盘已经初始化为VeraCrypt容器（根据PC的速度和硬盘的大小，这可能需要较长时间）。要挂载VeraCrypt卷，你需要使用一个简单的命令，其中包括源设备和挂载点：
- en: '[PRE71]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Safely removing the device requires “dismounting” the VeraCrypt volume and
    is also done using a simple command that specifies the mount point:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 安全移除设备需要“卸载”VeraCrypt卷，这也可以通过一个简单的命令来完成，命令中指定了挂载点：
- en: '[PRE72]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: At this point, you can physically detach the drive from the system. The encrypted
    drive in this example is an entire raw device, but it’s also possible to use a
    VeraCrypt container file. The mount point in this example is */mnt*, but it can
    be anywhere in the filesystem.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以将硬盘从系统中物理分离。此示例中的加密硬盘是整个原始设备，但也可以使用VeraCrypt容器文件。此示例中的挂载点是*/mnt*，但它可以是文件系统中的任何位置。
- en: There are other full-disk encryption systems that can be used to secure forensic
    image files and other data. You can use self-encrypting drives (SEDs), discussed
    in detail in “[Identify and Unlock Opal Self-Encrypting Drives](ch05.xhtml#ch05lev2sec12)”
    on [page 128](ch05.xhtml#page_128), with the `sedutil-cli` command to create an
    encrypted drive for storage and transport. Filesystem encryption, such as Linux
    LUKS and dm-crypt, offers similar levels of protection. Although these encryption
    systems will secure evidence data on a drive, they might not be interoperable
    with other OSes (Windows or OS X, for example).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他完整磁盘加密系统可以用来保护法证镜像文件和其他数据。你可以使用自加密硬盘（SED），详细内容请参阅“[识别和解锁Opal自加密硬盘](ch05.xhtml#ch05lev2sec12)”[第128页](ch05.xhtml#page_128)，使用`sedutil-cli`命令创建加密硬盘进行存储和传输。像Linux
    LUKS和dm-crypt这样的文件系统加密也提供类似的保护级别。尽管这些加密系统能在硬盘上保护证据数据，但它们可能与其他操作系统（例如Windows或OS
    X）不兼容。
- en: '**Disk Cloning and Duplication**'
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**磁盘克隆与复制**'
- en: 'In some situations, a clone or duplicate copy of a disk is preferred to an
    image file. Each duplicate is an exact sector-by-sector copy of the original disk.
    A newly cloned disk will have a cryptographic checksum that matches the original.
    A cloned disk can be useful for several reasons:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，磁盘的克隆或复制副本比镜像文件更受欢迎。每个副本都是原始磁盘的逐扇区精确复制。新克隆的磁盘将拥有与原始磁盘匹配的加密校验和。克隆磁盘有几个用途：
- en: • To use analysis tools and methods that require writing to disk
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用需要写入磁盘的分析工具和方法
- en: • To boot a PC with the disk clone
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: • 用克隆磁盘启动PC
- en: • To reconstruct RAID arrays using proprietary controllers
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用专有控制器重建RAID阵列
- en: Cloning disks is a straightforward process; it is basically acquisition in reverse.
    Be sure to exercise caution during the duplication process, because you could
    destroy data if the wrong device is mistakenly used as the destination.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘克隆是一个直接的过程；它基本上是反向的采集过程。在克隆过程中一定要小心，因为如果错误地使用了错误的设备作为目标磁盘，可能会破坏数据。
- en: '***Prepare a Clone Disk***'
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***准备克隆磁盘***'
- en: The size (number of sectors) of the destination, or clone, disk must be equal
    to or larger than the original disk. Because cloning involves a sector-by-sector
    copy, the destination disk must have the capacity to hold all sectors of the original
    disk. In some cases, having a larger destination disk is not a problem, because
    the PC and OS will be limited to what was defined in the partition table and ignore
    the rest of the disk. In other cases, duplicating the exact number of sectors
    of the disk is important, as software and tools may have certain sector number
    expectations. Some examples include the analysis of GPT partitions (where a backup
    is stored at the end of a disk) and RAID systems, and the analysis of certain
    strains of malware that partly reside in the final sectors of the disk.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 目标磁盘或克隆磁盘的大小（扇区数量）必须大于或等于原始磁盘。因为克隆涉及逐扇区复制，所以目标磁盘必须有足够的容量来容纳原始磁盘的所有扇区。在某些情况下，拥有更大的目标磁盘并不成问题，因为PC和操作系统会受限于分区表中定义的内容，并忽略磁盘的其余部分。在其他情况下，复制磁盘的精确扇区数量非常重要，因为软件和工具可能对扇区数量有特定的预期。一些例子包括GPT分区分析（备份存储在磁盘的末尾）和RAID系统，以及分析部分存储在磁盘最后几个扇区的恶意软件。
- en: Securely wiping (with zeroed sectors) the destination disk before cloning is
    critical to remove traces of previous data and reduce the risk of contaminating
    the clone.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在克隆之前，安全地擦除目标磁盘（用零填充扇区）对于去除以前数据的痕迹并减少污染克隆的风险至关重要。
- en: '***Use HPA to Replicate Sector Size***'
  id: totrans-301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用HPA复制扇区大小***'
- en: The HPA can be used to simulate the same number of sectors on the cloned disk
    as on the original.^([2](footnote.xhtml#fn40)) Setting the HPA on a cloned disk
    is beneficial if there is an expectation of the exact same number of sectors as
    the original. This is especially important when you’re reconstructing a RAID system
    with a proprietary controller or duplicating a disk with data expected in the
    final sectors of the disk.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: HPA可以用来模拟克隆磁盘上与原始磁盘相同数量的扇区。^([2](footnote.xhtml#fn40)) 如果有期望克隆磁盘和原始磁盘有完全相同数量的扇区，设置HPA会很有帮助。当你正在使用专有控制器重建RAID系统或复制一个数据预期存储在磁盘最后几个扇区的磁盘时，这一点尤其重要。
- en: '**NOTE**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You should know the exact sector count of the original drive (this was determined
    when the drive was attached to the examination host) before setting the HPA with
    the hdparm tool.*'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '*在使用hdparm工具设置HPA之前，你应该知道原始磁盘的确切扇区数量（这是在将磁盘连接到检查主机时确定的）。*'
- en: 'In this example, the HPA on a 500GB disk is set to duplicate a 120GB drive.
    The original disk reports 234441648 512-byte sectors, which you can use to set
    the *maximum visible sectors* on the clone drive. Use the following commands:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，500GB硬盘上的HPA被设置为复制一个120GB的硬盘。原始磁盘报告了234441648个512字节的扇区，你可以利用这些信息来设置克隆磁盘上的*最大可见扇区*。使用以下命令：
- en: '[PRE73]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The first `hdparm -N` command shows the initial state with 500GB of accessible
    sectors and a disabled HPA. The second `hdparm` command requires the `--yes-i-know-what-i-am-doing`
    flag to configure dangerous settings, such as changing the sector size. The `-N
    p234441648` specifies the number of sectors. It is prefixed with the letter `p`
    so the change is permanent across drive restarts. The final `hdparm` command checks
    whether the drive is now reporting the new sector size, which is now the same
    as that of the clone (120GB).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`hdparm -N`命令显示了初始状态，500GB的可访问扇区和禁用的HPA。第二个`hdparm`命令需要`--yes-i-know-what-i-am-doing`标志来配置危险设置，例如更改扇区大小。`-N
    p234441648`指定扇区数量。它以字母`p`为前缀，这样更改将在磁盘重启后保持永久有效。最后一个`hdparm`命令检查磁盘是否报告新的扇区大小，现在与克隆磁盘（120GB）相同。
- en: '***Write an Image File to a Clone Disk***'
  id: totrans-308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将镜像文件写入克隆磁盘***'
- en: To write an image to a new disk, use the same tools as when you acquire a disk
    but in reverse.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要将镜像写入新磁盘，使用与获取磁盘时相同的工具，只是过程是反向的。
- en: 'You can create a disk clone directly from the original suspect disk or from
    a previously acquired image file using the standard dd utilities. This example
    shows writing a raw image file to a clone disk using dc3dd:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接从原始嫌疑磁盘或先前获取的镜像文件使用标准的dd工具创建磁盘克隆。此示例展示了使用dc3dd将原始镜像文件写入克隆磁盘的过程：
- en: '[PRE74]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Now you can verify the cryptographic hash against the original. If the sector
    count of the original and clone disks don’t match, either an error is generated
    (if the clone doesn’t have enough sectors to complete the duplication activity)
    or the hash values won’t match.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以验证加密哈希值与原始文件的匹配情况。如果原始磁盘和克隆磁盘的扇区数量不匹配，则会产生错误（如果克隆磁盘的扇区不足以完成复制操作），或者哈希值将不匹配。
- en: You can write a set of split images, compressed images, or encrypted images
    back to a clone disk without creating a regular image file first.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一组拆分图像、压缩图像或加密图像写回克隆磁盘，而无需先创建常规的镜像文件。
- en: You can also use non-raw formats, such as AFF, EnCase EWF, or FTK SMART, to
    create clone disks. If a particular forensic tool cannot write an image back to
    a device, it might be able to pipe a raw image into a dd program, which can.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用非原始格式，如AFF、EnCase EWF或FTK SMART，来创建克隆磁盘。如果某个特定的取证工具无法将镜像写回设备，它可能能够将原始镜像传递到dd程序中，这样就可以完成操作。
- en: '**Image Transfer and Storage**'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**镜像传输与存储**'
- en: Managing the transfer and long-term storage of forensic images safely and successfully
    requires some thought and planning. Often, situations occur in which you need
    to transfer an image to another party, such as another department within a large
    organization, an independent third-party forensics firm, or a law enforcement
    agency.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和成功地管理取证镜像的传输和长期存储需要一些思考和规划。通常，会发生需要将镜像传输给另一方的情况，例如大型组织内部的其他部门、独立的第三方取证公司或执法机构。
- en: Several factors influence how transfers are completed, primarily the size of
    the data and the security of that data. In addition, depending on the organization,
    you might have to consider legal and regulatory requirements, as well as organizational
    policy requirements. For example, a global bank might not be able to transfer
    some disk images across national borders due to banking regulations prohibiting
    the transfer of client data outside the country.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 完成传输的过程受到多个因素的影响，主要是数据的大小和数据的安全性。此外，根据不同的组织，你可能还需要考虑法律和监管要求，以及组织的政策要求。例如，由于银行监管规定禁止将客户数据转移到境外，全球银行可能无法将某些磁盘镜像跨国界传输。
- en: Storing images for the long term also requires some thought and plan-ning. If
    an image will be reopened several years later, different staff, tools, and infrastructure
    could be in place. It is important to document what has been stored and maintain
    backward compatibility with the software used in the past.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 长期存储镜像也需要一定的思考和规划。如果某个镜像在几年后重新打开，可能会使用不同的员工、工具和基础设施。重要的是要记录已存储的内容，并保持与过去使用的软件的向后兼容性。
- en: '***Write to Removable Media***'
  id: totrans-319
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***写入可移动媒体***'
- en: In the past, a stack of CDs or DVDs were used in the transfer of acquired drive
    images. With compression and splitting, using these media was a cheap and feasible
    transfer method. Today, 4TB and 6TB disks are common, and 10TB disks are already
    on the consumer market. Optical discs are no longer a practical transfer medium
    for today’s larger image sizes, even with compression. However, for completeness,
    several examples are shown here.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，使用一堆CD或DVD来传输获取的磁盘镜像。通过压缩和分割，使用这些介质是一种便宜且可行的传输方法。如今，4TB和6TB的硬盘已经很常见，10TB硬盘已经进入消费市场。即使在压缩的情况下，光盘已不再是今天更大镜像文件的实用传输媒介。然而，为了完整性，以下仍然展示了几个示例。
- en: The following simple example shows burning a SquashFS file to CDROM. The `mkisofs`
    command is a symlink to genisoimage and is used to create the filesystem to be
    burned to a disk with the wodim tool.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单示例演示了将SquashFS文件刻录到CDROM。`mkisofs`命令是指向genisoimage的符号链接，用于创建文件系统，并通过wodim工具将其刻录到光盘。
- en: '[PRE75]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Here is a simple example of burning an image to a DVD. The growisofs tool began
    as a frontend to genisoimage and developed into a generalpurpose DVD and Blu-ray
    burning tool.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的将镜像刻录到DVD的示例。growisofs工具最初是作为genisoimage的前端，后来发展成为一个通用的DVD和Blu-ray刻录工具。
- en: '[PRE76]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The following example shows burning an image to a Blu-ray disc using the `growisofs`
    command:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用`growisofs`命令将镜像刻录到Blu-ray光盘：
- en: '[PRE77]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Burning large images to optical discs under Linux can be quirky. Depending on
    the drive and the media used, unexpected or inconsistent behavior might be observed.
    Be sure to test the compatibility of drives and media before using them in a production
    environment.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux下将大型镜像刻录到光盘时可能会遇到一些问题。根据使用的驱动器和介质，可能会出现意外或不一致的行为。在将其用于生产环境之前，务必测试驱动器和介质的兼容性。
- en: '***Inexpensive Disks for Storage and Transfer***'
  id: totrans-328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***便宜的磁盘用于存储和传输***'
- en: Creating a stack of optical discs from a set of split and compressed images
    requires a systematic process that can be time-consuming and error prone. The
    maximum capacity of Blu-ray discs is currently 100GB (BD-R XL). The cost per gigabyte
    of Blu-ray discs is more than the cost per gigabyte for cheap hard disks.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 从一组分割和压缩的镜像创建一堆光盘需要一个系统化的过程，这个过程可能既费时又容易出错。目前Blu-ray光盘的最大容量为100GB（BD-R XL）。Blu-ray光盘每GB的成本高于便宜硬盘的每GB成本。
- en: When you factor in human effort, risk of error, time required to burn data to
    optical discs, and cost per gigabtye, simply buying and using cheap hard disks
    becomes an attractive possibility for offline storage and transfer of forensic
    images.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到人工努力、错误风险、刻录数据到光盘所需的时间和每GB的成本，仅仅购买和使用便宜的硬盘，成为离线存储和转移取证镜像的一个有吸引力的选择。
- en: '***Perform Large Network Transfers***'
  id: totrans-331
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***执行大规模网络传输***'
- en: Some of the issues concerning acquiring images via a network were already discussed
    in [Chapter 6](ch06.xhtml#ch06).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 有关通过网络获取镜像的一些问题，已经在[第6章](ch06.xhtml#ch06)中讨论过。
- en: Large network transfers of acquired images may take long periods of time to
    complete and might saturate a corporate internal network or internet link. Dropped
    connections and timeouts might also occur during such long network transfers.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 获取的大型镜像进行网络传输可能需要较长的时间才能完成，且可能会饱和公司内部网络或互联网连接。在此类长时间网络传输过程中，也可能发生连接丢失和超时。
- en: Transferring large forensic images between hosts on a network is not nearly
    as fast as transferring them between disks on a local machine. To put network
    bandwidth speeds into perspective, it helpful to compare them to common disk speeds.
    [Table 7-1](ch07.xhtml#ch7table1) compares two fast drive interfaces to two fast
    network interfaces.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络之间传输大型取证镜像的速度远不如在本地机器上的磁盘之间传输。为了更好地理解网络带宽的速度，将其与常见的磁盘速度进行比较会很有帮助。[表7-1](ch07.xhtml#ch7table1)将两种快速驱动器接口与两种快速网络接口进行了比较。
- en: '**Table 7-1:** Transfer Speeds of Common Interfaces'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**表7-1：** 常见接口的传输速度'
- en: '| **Interface** | **Speed** |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| **接口** | **速度** |'
- en: '| --- | --- |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| NVME | 4000MB/s |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| NVME | 4000MB/s |'
- en: '| SATA III | 600MB/s |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| SATA III | 600MB/s |'
- en: '| Gigibit Ethernet | 125MB/s |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| Gigabit以太网 | 125MB/s |'
- en: '| Fast Ethernet | 12.5MB/s |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| 快速以太网 | 12.5MB/s |'
- en: For a more detailed comparison of different bandwidths, see the Wikipedia page
    at *[https://en.wikipedia.org/wiki/List_of_device_bit_rates](https://en.wikipedia.org/wiki/List_of_device_bit_rates)*.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 有关不同带宽的更详细比较，请参阅Wikipedia页面上的* [https://en.wikipedia.org/wiki/List_of_device_bit_rates](https://en.wikipedia.org/wiki/List_of_device_bit_rates)*。
- en: Depending on the network bandwidth and the image size, the physical delivery
    of a storage container with the acquired subject image(s) could be faster than
    a network transfer.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 根据网络带宽和映像大小，物理传输一个存储容器，其中包含获取的主题图像，可能比网络传输更快。
- en: But in some situations, secure network data transfer is necessary. Ensuring
    security during a transfer may have certain side effects, such as increased complexity
    or performance penalties. For network data transfer over untrusted or unknown
    networks, you can use several standard secure protocols, including SSL/TLS, ssh/sftp,
    or IPSEC.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某些情况下，安全的网络数据传输是必要的。在传输过程中确保安全可能会带来一些副作用，例如增加复杂性或性能下降。对于不受信任或未知的网络，可以使用几种标准的安全协议，包括SSL/TLS、ssh/sftp或IPSEC。
- en: 'The following simple example shows the transfer of a forensic image file using
    scp (secure copy) from the OpenSSH software package:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单示例展示了如何使用OpenSSH软件包中的scp（安全复制）传输一个取证图像文件：
- en: '[PRE78]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Here, an image file (*image.raw*) is copied over an insecure network to a specific
    data directory on a remote server. Using scp has several advantages, including
    strong encryption algorithms, built-in compression, real-time progress status,
    estimated completion time, and strong authentication possibilities. Most important
    for forensic investigators, scp allows for very large file sizes (assuming the
    software binary was compiled with 64-bit large file size support) and is easily
    capable of transferring large disk images.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一个图像文件 (*image.raw*) 被通过不安全的网络复制到远程服务器的特定数据目录中。使用scp有多个优点，包括强大的加密算法、内置压缩、实时进度状态、预计完成时间和强身份验证功能。对于取证调查员来说，最重要的是，scp支持非常大的文件大小（前提是软件二进制文件已编译为支持64位大文件大小），并且能够轻松传输大型磁盘映像。
- en: If an image file is already encrypted, the underlying security might be less
    of a concern, and you can use traditional file transfer protocols, such as File
    Transfer Protocol (FTP) or Windows Server Message Block (SMB). However, when you’re
    using insecure and weakly authenticated protocols to transfer encrypted files,
    you should confirm the file integrity by verifying the cryptographic hash after
    the transfer is complete.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个图像文件已经加密，那么底层的安全性可能不那么重要，你可以使用传统的文件传输协议，如文件传输协议（FTP）或Windows服务器消息块（SMB）。然而，当你使用不安全和弱认证的协议传输加密文件时，应该在传输完成后通过验证加密哈希来确认文件的完整性。
- en: '**Secure Wiping and Data Disposal**'
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安全擦除与数据销毁**'
- en: Whenever you discard or reuse a disk, or you no longer need temporary files,
    take diligent steps to properly erase the contents. Several command line wiping
    and secure deletion methods are available for this purpose.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你丢弃或重复使用磁盘，或者不再需要临时文件时，都应采取细致的措施来正确擦除内容。有多种命令行擦除和安全删除方法可以用于此目的。
- en: '***Dispose of Individual Files***'
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***销毁单个文件***'
- en: In some situations, you’ll need to securely erase individual files but not the
    entire disk. For example, you might need to dispose of temporary acquired images
    on the acquisition host. In this scenario, using a file shredder/wiper is sensible
    because it reduces the risk of destroying other data on the examiner’s workstation.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要安全地擦除单个文件，而不是整个磁盘。例如，你可能需要销毁临时获取的图像文件，这些图像文件存储在采集主机上。在这种情况下，使用文件销毁工具是合理的，因为它减少了破坏其他数据的风险，特别是在检查员的工作站上。
- en: 'The standard Linux coreutils package includes the shred tool, which attempts
    to securely delete files, as shown here:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Linux核心工具包包含shred工具，它试图安全地删除文件，如下所示：
- en: '[PRE79]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: A software package called the secure_deletion toolkit provides a suite of tools
    that attempts to erase swap, cache, memory, inodes, and files. In particular,
    srm will wipe an individual file. Another command line tool called wipe also will
    erase files.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为secure_deletion工具包的软件包提供了一套工具，旨在擦除交换空间、缓存、内存、i节点和文件。特别是，srm将擦除单个文件。另一个命令行工具叫做wipe，也可以擦除文件。
- en: Wiping individual files is a complex process and depends on many variables related
    to the OS and filesystem used. There are no guarantees that all fragments of a
    wiped or shredded file have been completely destroyed.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 擦除单个文件是一个复杂的过程，取决于所使用的操作系统和文件系统的许多变量。不能保证所有擦除或销毁的文件碎片都已被完全销毁。
- en: '***Secure Wipe a Storage Device***'
  id: totrans-357
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安全擦除存储设备***'
- en: Wiping entire physical drives involves writing zeros or random bytes to every
    user-accessible sector on the drive. This does not guarantee that all hidden or
    user-inaccessible areas of a physical drive are wiped. Sectors protected by an
    HPA or DCO (which can be removed), remapped bad sectors, overprovisioned areas
    of flash drives, and inaccessible system areas of a drive are not user accessible
    and therefore cannot be wiped with normal Linux tools. In spite of this, wiping
    all user-accessible sectors still provides a reasonable level of assurance, so
    this is a diligent method of data disposal for reusing drives within a lab.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 擦除整个物理驱动器涉及将零或随机字节写入驱动器上的每个用户可访问扇区。这并不能保证所有隐藏或用户无法访问的物理驱动器区域都已被擦除。由HPA或DCO保护的扇区（这些可以被移除）、重新映射的坏扇区、闪存驱动器的过度配置区域，以及驱动器的不可访问系统区域都不能通过正常的Linux工具擦除。尽管如此，擦除所有用户可访问的扇区仍然提供了一个合理的保证，因此这是一种适用于实验室中重用驱动器的数据销毁方法。
- en: 'Depending on a particular organization’s risk appetite and policies, data disposal
    might require one or more of the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定组织的风险偏好和政策，数据销毁可能需要以下一种或多种方法：
- en: • No wiping at all, just common reformatting
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: • 完全不擦除，仅进行常规格式化
- en: • Wiping all visible sectors with one pass of zeros
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用一次零擦除所有可见扇区
- en: • Wiping all visible sectors with multiple passes of random data
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用多次随机数据擦除所有可见扇区
- en: • Physically degaussing drives
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: • 物理消磁驱动器
- en: • Physically shredding drives
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: • 物理粉碎驱动器
- en: The disposal method required is a risk-based decision that depends on the sensitivity
    of the data on the drive, who might have an interest in recovering the data, cost
    and effort for recovery, and other factors.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的销毁方法是基于风险的决策，取决于驱动器上数据的敏感性、可能对恢复数据有兴趣的人、恢复的成本和努力以及其他因素。
- en: 'This first example uses dc3dd to write zeros to each visible sector on the
    disk. The dc3dd tool has built-in wiping functionality, and you can use it as
    follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例使用dc3dd将零写入磁盘的每个可见扇区。dc3dd工具具有内置的擦除功能，您可以按如下方式使用它：
- en: '[PRE80]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: You could also complete this task using dd with */dev/zero* as the input file,
    but dc3dd is faster.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用dd配合*/dev/zero*作为输入文件来完成此任务，但dc3dd更快。
- en: 'To confirm the disk has been wiped with zeros, you can use dd to read the disk
    into a hexdump program:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认磁盘已经被零擦除，你可以使用dd将磁盘读入hexdump程序：
- en: '[PRE81]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: If the entire disk is full of zeros, the hexdump (hd) tool will display one
    line of zeros followed by an asterisk (`[*]`), indicating a repeated pattern across
    the entire disk.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 如果整个磁盘充满零，hexdump（hd）工具将显示一行零后跟一个星号（`[*]`），表示整个磁盘上的重复模式。
- en: '[PRE82]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: If the result shows only zeros, the user-accessible sectors of the drive have
    been successfully wiped.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果仅显示零，表示驱动器的用户可访问扇区已成功擦除。
- en: The following example uses the nwipe tool, a fork of Darik’s Boot and Nuke (dban)
    tool. The nwipe tool can specify different wiping standards, randomicity, and
    number of rounds, and it will provide a log file of the activity. The Canadian
    RCMP TSSIT OPS-II wipe version is shown here:^([3](footnote.xhtml#fn41))
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用nwipe工具，这是Darik的启动和清除（dban）工具的一个分支。nwipe工具可以指定不同的擦除标准、随机性和轮次数量，并提供活动日志文件。这里显示的是加拿大RCMP
    TSSIT OPS-II擦除版本：^([3](footnote.xhtml#fn41))
- en: '[PRE83]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: When you’re wiping drives, ensure the DCO and HPA have been removed. With NVME
    drives, make sure each individual namespace has been wiped (most consumer NVME
    drives have only a single namespace).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在擦除驱动器时，确保已移除DCO和HPA。对于NVME驱动器，确保已擦除每个独立的命名空间（大多数消费者级NVME驱动器只有一个命名空间）。
- en: '***Issue ATA Security Erase Unit Commands***'
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***发出ATA安全擦除单元命令***'
- en: The ATA standard specifies a security erase command that you can issue directly
    to a drive to wipe a disk. The `ATA SECURITY ERASE UNIT` command will write zeros
    to all user accessible sectors of the disk. The `EXTENDED SECURITY ERASE` command
    will write a predefined pattern (defined by the drive manufacturer) instead of
    zeros.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: ATA标准规定了一个安全擦除命令，可以直接向驱动器发出该命令以擦除磁盘。`ATA SECURITY ERASE UNIT`命令会将零写入磁盘的所有用户可访问扇区。`EXTENDED
    SECURITY ERASE`命令会写入一个预定义的模式（由驱动器制造商定义），而不是零。
- en: 'Running `hdparm` displays the capabilities and status of security on the drive.
    Also provided is the estimated time needed to securely erase the drive, as shown
    here:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`hdparm`命令可以显示驱动器安全功能的能力和状态。还会提供估算的安全擦除驱动器所需的时间，如下所示：
- en: '[PRE84]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Some drives will reject the erase command if you don’t explicitly set a password
    first. In the following example, a Western Digital drive was used, and the password
    was first set to *dummy* before the `--security-erase` command was accepted:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有明确设置密码，有些驱动器会拒绝擦除命令。在以下示例中，使用的是 Western Digital 驱动器，密码首先设置为 *dummy*，然后才接受
    `--security-erase` 命令：
- en: '[PRE85]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The drive has now been securely wiped and can be reused. If a drive requires
    setting a password, don’t forget to disable the password after the security erase
    has completed.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动器现已安全擦除，可以重新使用。如果驱动器需要设置密码，请在安全擦除完成后不要忘记禁用密码。
- en: '***Destroy Encrypted Disk Keys***'
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***销毁加密磁盘密钥***'
- en: You can securely destroy encrypted disks and filesystems by destroying all known
    copies of the encryption key. If the key was generated on a secure device such
    as a smartcard, a TPM, or an Opal drive, then only one copy of the key will exist.
    If a drive or filesystem was provisioned in an enterprise environment, there might
    be backup or escrow copies of the key for recovery purposes.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过销毁加密密钥的所有已知副本来安全销毁加密的磁盘和文件系统。如果密钥是在如智能卡、TPM 或 Opal 驱动器等安全设备上生成的，那么只有一个密钥副本。如果驱动器或文件系统是在企业环境中配置的，则可能会有用于恢复目的的备份或托管副本。
- en: Key-wiping procedures for OS-based encrypted drives, such as Microsoft BitLocker,
    Apple FileVault, Linux LUKS/dm-crypt, or TrueCrypt variants, require detailed
    knowledge of where the keys are stored. Keys might be password/passphrase protected
    and stored in a file or in a certain block on the drive. They might also be stored
    in a key file elsewhere. If it’s not possible to locate and securely destroy all
    copies of a private key, the alternative is to wipe the disk with the full drive-wiping
    method described in a previous section.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 针对基于操作系统的加密驱动器（如 Microsoft BitLocker、Apple FileVault、Linux LUKS/dm-crypt 或 TrueCrypt
    变体）的密钥擦除程序，要求详细了解密钥存储的位置。密钥可能受到密码/短语保护，并存储在文件或驱动器的某个块中。它们也可能存储在其他地方的密钥文件中。如果无法定位并安全销毁所有副本的私钥，则替代方法是使用前述的完全驱动器擦除方法擦除磁盘。
- en: Typically, secure external USB thumb drives have a factory reset function for
    lost passwords. This can be used to destroy the key and hence the contents of
    the drive. For example, you can reset the Corsair Padlock2 thumb drive by holding
    down both the KEY and 0/1 buttons for three seconds, followed by entering `911`
    to reset the key and destroy the drive contents. On iStorage datashur drives,
    hold down both the KEY and 2 buttons for three seconds and then enter `999` to
    reset the key.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，安全外部 USB 闪存驱动器具有用于找回丢失密码的出厂重置功能。这可以用来销毁密钥，从而销毁驱动器的内容。例如，您可以通过同时按住 KEY 和 0/1
    按钮三秒钟来重置 Corsair Padlock2 闪存驱动器，然后输入 `911` 来重置密钥并销毁驱动器内容。在 iStorage datashur 驱动器上，按住
    KEY 和 2 按钮三秒钟，然后输入 `999` 来重置密钥。
- en: Destroying the contents of Opal SED drives is also instantaneous and simply
    involves destroying the encryption key on the drive by entering the *Physical
    Security ID (PSID)*. The PSID usually has a QR code on the physical cover of the
    drive that you can scan instead of typing it in by hand. You cannot get the PSID
    by querying the drive with ATA commands; it’s only visible on the cover of the
    physical drive.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁 Opal SED 驱动器内容也是即时的，只需通过输入 *物理安全 ID（PSID）* 来销毁驱动器上的加密密钥即可。PSID 通常在驱动器的物理封面上有一个二维码，您可以扫描它来代替手动输入。您无法通过
    ATA 命令查询获取 PSID；它仅在物理驱动器的封面上可见。
- en: 'The `sedutil-cli` command has a special option for irrevocably resetting the
    drive key using the PSID:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`sedutil-cli` 命令有一个特殊选项，可以使用 PSID 永久重置驱动器密钥：'
- en: '[PRE86]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The encryption key in the drive is now reset, and the data is effectively destroyed.
    The disk is factory reset, unlocked, and can be reused. The time needed to destroy
    the data on this 120GB drive was half a second.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动器中的加密密钥现在已重置，数据已有效销毁。磁盘已恢复出厂设置，解锁，并可以重新使用。销毁此 120GB 驱动器上的数据所需的时间为半秒。
- en: '**Closing Thoughts**'
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结束语**'
- en: In this chapter, you learned a variety of techniques for managing forensic images,
    including the use of compression with common Linux tools and built-in compression
    with forensic formats. You saw more examples of the SquashFS compressed filesystem
    and the sfsimage script for managing forensic evidence containers. I demonstrated
    splitting and reassembling images, duplicating drives, and converting between
    image formats. You also learned how to verify hashes, signatures, and timestamps
    and how to protect images with encryption during network transfer and storage.
    Finally, I showed the secure disposal of forensic image files and drives.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了多种管理取证镜像的技术，包括使用常见的 Linux 工具进行压缩和取证格式中的内建压缩。你看到了更多关于 SquashFS 压缩文件系统的示例，以及用于管理取证证据容器的
    sfsimage 脚本。我演示了镜像的分割与重组、驱动器的复制，以及镜像格式之间的转换。你还学习了如何验证哈希值、签名和时间戳，以及如何在网络传输和存储过程中使用加密保护镜像。最后，我展示了如何安全销毁取证镜像文件和驱动器。
