- en: '21'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ELECTRICITY
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we think about electricity, we often think about how it’s used, like the
    electric current flowing through a telephone wire or emerging from a battery.
    But all electrical technologies start from a single concept: electric charge.
    Electric charge has something to do with all electrical phenomena, and it’s the
    logical starting place for our discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, we’ll begin this chapter by describing electric charge. We’ll then
    discuss Coulomb’s late 18th century theory of electricity, which is specified
    by Coulomb’s law. Finally, we’ll put this theory to use in examining the motion
    of two charged particles repelling each other.
  prefs: []
  type: TYPE_NORMAL
- en: Electric Charge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Electric charge* is a quantity associated with a particle or object that determines
    whether and how it can participate in electrical phenomena. In the 1700s, people
    discovered that there were two types of electric charge. Charges of the same type
    repelled each other and charges of different types attracted each other. Later,
    when physicists discovered subatomic particles, they decided that the proton was
    positive and the electron negative, but that was an arbitrary choice that everyone
    now respects as a convention.'
  prefs: []
  type: TYPE_NORMAL
- en: The SI unit of charge is the Coulomb (C), named after Charles-Augustin de Coulomb,
    the French physicist of the late 18th century who did groundbreaking work on electricity.
    [Table 21-1](ch21.xhtml#ch21tab1) gives the charges of the proton, the electron,
    and the neutron. The charge of a proton is *exactly* 1.602176634 × 10^(–19) C.
    How can the charge of a proton be known exactly? Since 2019, the SI *defines*
    the Coulomb to be that quantity of charge such that an *elementary charge* is
    exactly 1.602176634 × 10 ^(–19) C. The proton is thought to possess one unit of
    elementary charge, and the electron negative one unit. The proton and electron
    are known experimentally to have equal (but opposite) charges to better than one
    part in 10^(18). In equations, we use *q* or *Q* as a symbol for charge.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 21-1:** Electric Charge and Mass of Some Common Particles'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Particle** | **Charge** | **Mass** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Proton | 1.602 × 10^(–19) C | 1.673 × 10^(–27) kg |'
  prefs: []
  type: TYPE_TB
- en: '| Neutron | 0 C | 1.675 × 10^(–27) kg |'
  prefs: []
  type: TYPE_TB
- en: '| Electron | –1.602 × 10^(–19) C | 9.109 × 10^(–31) kg |'
  prefs: []
  type: TYPE_TB
- en: '[Listing 21-1](ch21.xhtml#ch21list1) shows the first lines of code for the
    `Electricity` module we will develop in this chapter. We import `TwoBodyForce`
    and `MultiParticleState` from the `MultipleObjects` module of [Chapter 19](ch19.xhtml)
    because Coulomb’s law, the theory of electricity that we’ll describe in this chapter,
    is a two-body force.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 21-1: Opening lines of code for the Electricity module*'
  prefs: []
  type: TYPE_NORMAL
- en: Charge is a scalar, not a vector. Charge is represented by a real number. This
    suggests that the type for charge should be real numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s encode the value of the elementary charge.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Charge is quantized—that is, it occurs in discrete lumps—but this fact does
    not play a role in classical electromagnetic theory. In fact, the size of the
    lumps of charge are so small that we often want to think of charge as more like
    a fluid. Don’t worry if that doesn’t make sense quite yet; we’ll discuss continuous
    charge distributions in [Chapter 24](ch24.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Charge is also conserved. If the charge in any volume changes, it must flow
    in or out through the boundary surface of the volume.
  prefs: []
  type: TYPE_NORMAL
- en: The most important and interesting questions about charge are not about its
    intrinsic nature but rather about the relationships and interactions between charged
    particles. How do charges interact?
  prefs: []
  type: TYPE_NORMAL
- en: Coulomb’s Law
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Charles-Augustin de Coulomb was the first to give a quantitative relationship
    describing the interaction of two charged particles. He showed that the force
    exerted by one point charge on another is directly proportional to each charge
    and inversely proportional to the square of the distance between them. As an equation,
    Coulomb’s law can be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/411equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where *q*[1] is the charge of particle 1, *q*[2] is the charge of particle 2,
    and *r* is the distance between the particles. This equation gives the magnitude
    of the force produced by particle 1 on particle 2, which, by Newton’s third law,
    is the same as the magnitude of the force produced by particle 2 on particle 1\.
    The direction of the force depends on the signs of the charges; the force is repulsive
    for like charges and attractive for unlike charges. In SI units, the constant
    *k* is
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/411equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The constant ϵ[0], called the *vacuum electric permittivity*, *electric constant*,
    or *permittivity of free space*, serves as a kind of bridge between electrical
    units, such as the Coulomb, and mechanical units, such as the Newton. The expression
    1/(4*π*ϵ[0]) is often used instead of *k* as *k* is an overused symbol in physics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a translation of Equation 21.1 into Haskell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can use vector notation to give a more comprehensive version of Coulomb’s
    law, which includes the direction of the force in the equation. We’ll define the
    displacement vector **r**[21] to be the vector that points from particle 1 to
    particle 2, as in [Figure 21-1](ch21.xhtml#ch21fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/412equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 21-1: The displacement vector **r**[21] points from particle 1 to particle
    2.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The force **F**[21] exerted *on* particle 2 produced *by* particle 1 is given
    in vector notation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/412equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that if both charges are positive, the force **F**[21] on particle 2
    points in the same direction as the displacement vector **r**[21], away from particle
    1, as we expect for like charges. If the charges have unlike signs, the direction
    of **F**[21] will flip, indicating an attractive force.
  prefs: []
  type: TYPE_NORMAL
- en: 'If **r**[1] is the position vector for particle 1 and **r**[2] is the position
    vector for particle 2, then **r**[21]= **r**[2] – **r**[1] and we can write the
    force on particle 2 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/412equ03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In summary, Coulomb’s law 21.1 is simpler, and Coulomb’s laws 21.2 and 21.3
    are more powerful since the direction of the force is encoded in the equations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This Coulomb interaction is a `TwoBodyForce` of the kind we discussed in [Chapter
    19](ch19.xhtml). Here is Equation 21.3 in Haskell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Coulomb force is another example of a central force, so here we use the
    `centralForce` function we defined in [Chapter 19](ch19.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Having encoded Coulomb’s law as a two-body force, let’s apply it to a situation
    of two protons repelling one another.
  prefs: []
  type: TYPE_NORMAL
- en: Two Charges Interacting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose we release two protons with an initial separation of 1 cm. How far will
    they travel in five milliseconds? This is a good problem for the tools we developed
    in the previous chapters, especially [Chapter 19](ch19.xhtml). The problem cannot
    be solved using only algebra because the force diminishes as the particles move
    farther apart. The particles start from rest and accelerate away from each other,
    and this acceleration decreases as the repulsive force decreases. When the two
    protons are far apart, the force decreases to a negligible magnitude and the protons
    approach a terminal velocity.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at Extremes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before we apply the multi-particle tools of [Chapter 19](ch19.xhtml), let’s
    see how much we can learn about this situation by thinking about two extremes:
    what happens in the first few moments and what happens after a long time.'
  prefs: []
  type: TYPE_NORMAL
- en: For very short times, before the particles move much, we can approximate the
    initial acceleration as constant. We can obtain the initial acceleration of one
    of the protons by dividing the net force
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/413equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where *q[p]* is the charge of a proton and *d* is 1 cm, by the mass *m[p]*
    of a proton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/413equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Treating this acceleration as constant, the velocity and position of one proton
    are
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/413equ03.jpg)![Image](Images/413equ04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: from the constant acceleration Equations 4.14 and 4.15\. These equations are
    a good approximation for a short time, but extending them for too long is overly
    ambitious and gives poor results. We’ll call this approximation the “constant
    acceleration approximation.”
  prefs: []
  type: TYPE_NORMAL
- en: 'After the protons have been moving for some time, the particles will approach
    a terminal velocity. We can find this terminal velocity using conservation of
    energy. The potential energy of two charges *q*[1] and *q*[2] separated by a distance
    *d* is *kq*[1]*q*[2]/*d*, so the potential energy of two protons a distance *d*
    from each other is ![Image](Images/413equ05.jpg). The initial electric potential
    energy of the two protons is converted into kinetic energy. The kinetic energy
    of a particle with mass *m* moving with speed *v* is*mv*²/2\. The two protons
    will approach the same terminal speed *υ[T]*, so conservation of energy leads
    to the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/413equ06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The terminal speed of each proton is given through conservation of energy by
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/413equ07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For very long times, we can treat the terminal velocity as constant, so the
    velocity and position of one proton are
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/414equ01.jpg)![Image](Images/414equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where *x*[1] is some as-yet-undetermined distance. These equations are a good
    approximation when *t* is very large, but applying them for shorter times gives
    poor results. We will call this approximation the “terminal velocity approximation.”
  prefs: []
  type: TYPE_NORMAL
- en: Let’s summarize what we’ve learned from the short-time extreme and the long-time
    extreme. When released from rest, each proton experiences an acceleration of 1379
    m/s² away from the other proton. The acceleration decreases as the protons move
    farther apart, until the acceleration is negligible and the protons obtain the
    terminal speed of 3.71 m/s. If we were to plot proton velocity as a function of
    time, the velocity would start at 0 and increase with a slope of 1379 m/s². As
    time increases, velocity increases, asymptotically approaching the terminal speed
    of 3.71 m/s.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the Situation in Haskell
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we have a basic idea of what to expect, let’s apply the tools we developed
    in [Chapter 19](ch19.xhtml) for multiple-particle situations. The only force we
    need to include is the internal force of the Coulomb interaction between the protons.
  prefs: []
  type: TYPE_NORMAL
- en: By using `statesMPS` from [Chapter 19](ch19.xhtml), we can form an infinite
    list of multi-particle states.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We supply this function with a time step and an initial two-particle state,
    and it will give back an infinite list of two-particle states that we can mine
    for any information we want.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a function that sets an initial state with both protons at rest and
    with an initial separation given as a parameter to the function. The origin in
    this function is midway between the two protons. The proton mass is from [Table
    21-1](ch21.xhtml#ch21tab1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let’s start by making a graph of proton velocity as a function of time. The
    function `oneProtonVelocity` returns an infinite list of time-velocity pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We construct the list using a list comprehension, and we use pattern matching
    in the list comprehension to give the name `st2` to the state of the second proton.
    We choose the second proton rather than the first because, based on our initial
    state, the second proton will have a positive velocity component, while the first
    proton will have a negative velocity component. Finally, we use the functions
    `time`, `velocity`, and `xComp` to pick out the values we want to plot.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not so obvious what time step to use. Let’s try to use dimensional analysis
    with the parameters of this problem to estimate a characteristic time scale. The
    relevant parameters for this situation are the proton charge *q[p]*, the proton
    mass *m[p]*, the electrical constant *k*, and the distance *d* of 1 cm. Can we
    combine these parameters to get a quantity with dimensions of time? We can. The
    characteristic time scale of the problem is given by
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/415equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We’ll use a time step of 10^(–5) s, which is small compared with the characteristic
    time scale we just found.
  prefs: []
  type: TYPE_NORMAL
- en: The following list of time-velocity pairs is a finite list of the results we
    will plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We pass the time step `1e-5` (10^(–5) s) and the initial proton separation `1e-2`
    (1 cm) to the function `oneProtonVelocity` to get an infinite list of states.
    We then truncate this infinite list to a finite list of states occurring up to
    20 ms.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 21-2](ch21.xhtml#ch21fig2) shows the velocity of a proton as a function
    of time. The straight lines on the graph are the constant acceleration approximation
    and the terminal velocity approximation. The calculated velocity transitions smoothly
    from linearly increasing at the initial acceleration at very early times to approaching
    the terminal velocity at later times.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/416fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 21-2: Two protons repelling one another. The curve shows one proton’s
    velocity as a function of time. The horizontal line is the terminal velocity.
    The sloped line indicates the initial acceleration of the proton.*'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code that produced the graph in [Figure 21-2](ch21.xhtml#ch21fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since we created the finite concrete list `tvPairs` to hold the data, the plotting
    code consists mostly in using the `plotPaths` function. The two approximations
    are graphed by constructing time-velocity pairs with list comprehensions. The
    `1379` is the initial acceleration of a proton in m/s², and the `3.71` is the
    terminal speed in m/s.
  prefs: []
  type: TYPE_NORMAL
- en: Our original question asked how far a proton would travel in 5 ms. Let’s produce
    a graph of position versus time for a proton and then answer the original question
    directly. [Figure 21-3](ch21.xhtml#ch21fig3) shows the position of a proton as
    a function of time. It also shows the constant acceleration approximation, which
    is the parabola on the left that appears to give good results for about 2 ms.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/417fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 21-3: Two protons repelling one another. One proton’s position as a
    function of time is shown by the curve that becomes linear over time. The parabola,
    shown for comparison, gives position if the acceleration initially experienced
    by the proton were maintained at a constant value.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we ask GHCi to give us the position of a proton at 5 ms. Since `initialTwoProtonState
    0.01` is an initial two-particle state with the protons separated by 1 cm, and
    `twoProtonStates 1e-5 (initialTwoProtonState 0.01)` is an infinite list of two-proton
    states, formed with a time step of 10^(–5) s, a time of 5 ms occurs 500 time steps
    into the list. We can ask for the information we want as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: GHCi returns the two-particle state at 5 ms. I have formatted the output for
    easy readability. The protons are located at –1.55 cm and 1.55 cm along the x-axis,
    so they are 3.1 cm apart at 5 ms.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have given an overview of 18th century electrical theory, which works well
    when particles move slowly compared to the speed of light and don’t experience
    extreme acceleration. Coulomb’s 18th century theory is still a good theory of
    static electricity, also called *electrostatics*. Coulomb’s law is a two-body
    force, just like Newton’s law of universal gravity. Coulomb’s law is intended
    to be used in the context of the multi-particle Newtonian mechanics we studied
    in [Part II](part02.xhtml). An example of this is two protons repelling each other,
    a problem that, simple as it is to state, is not solvable by simple algebraic
    methods, but rather requires the ideas and tools we have developed.
  prefs: []
  type: TYPE_NORMAL
- en: In the 19th century, Michael Faraday discovered an electrical phenomenon that
    was not (directly) caused by electric charge. This led to the concepts of electric
    and magnetic fields, which, in the modern Faraday-Maxwell theory of electricity
    and magnetism, are the mediators of electric charge. This newer theory is a theory
    of *electrodynamics*, and it makes good predictions even when charges are moving
    rapidly and accelerating strongly. Since this newer theory is a field theory,
    meaning the players are fields rather than particles, and since a field in physics
    is a function of three-dimensional space or spacetime, we’ll spend the next two
    chapters studying coordinate systems and geometry for three-dimensional space.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise 21.1.** Make a plot similar to [Figure 21-2](ch21.xhtml#ch21fig2)
    for two electrons released from rest with a separation of 1 cm. What are the terminal
    velocity and characteristic time scale in this case?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 21.2.** Coulomb’s theory of electricity predicts that an electron
    could orbit a proton in much the same way that the Earth orbits the sun. We might
    call this “classical hydrogen.” (The modern Faraday-Maxwell theory of electricity
    and magnetism that we will touch on later in this part of the book presents problems
    for this picture because an accelerating charged particle radiates, making classical
    hydrogen unstable.) Write an animation for classical hydrogen in which the Coulomb
    force is the only internal force between the proton and the electron and there
    are no external forces. You will need to choose some initial conditions for the
    proton and the electron.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 21.3.** Consider a proton and an electron released from rest. Write
    a function to calculate the time until collision given the initial separation.
    How far apart should they be initially so that it will take one second for them
    to collide?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 21.4.** Animate the two-proton repulsion using gloss or not-gloss.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 21.5.** Write code to produce the graph in [Figure 21-3](ch21.xhtml#ch21fig3).
    Here is some starting code you may use if you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Exercise 21.6.** By trial and error, find a value for *x*[1] in Equation
    21.7 so that the position-time curve in [Figure 21-3](ch21.xhtml#ch21fig3) appears
    asymptotic to the straight line of Equation 21.7 for large times.'
  prefs: []
  type: TYPE_NORMAL
