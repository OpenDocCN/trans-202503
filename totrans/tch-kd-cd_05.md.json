["```\nif *condition*:\n   *indented statement(s)*\n```", "```\n➊ answer = input(\"Do you want to see a spiral? y/n:\")\n➋ if answer == 'y':\n➌     print(\"Working...\")\n       import turtle\n       t = turtle.Pen()\n       t.width(2)\n➍     for x in range(100):\n➎         t.forward(x*2)\n➏         t.left(89)\n➐ print(\"Okay, we're done!\")\n```", "```\n*expression1 conditional_operator expression2*\n```", "```\n➊ driving_age = eval(input(\"What is the legal driving age where you live? \"))\n➋ your_age = eval(input(\"How old are you? \"))\n➌ if your_age >= driving_age:\n➍     print(\"You're old enough to drive!\")\n➎ if your_age < driving_age:\n➏     print(\"Sorry, you can drive in\", driving_age - your_age, \"years.\")\n```", "```\nif *condition*:\n   *indented statement(s)*\nelse:\n   *other indented statement(s)*\n```", "```\ndriving_age = eval(input(\"What is the legal driving age where you live? \"))\nyour_age = eval(input(\"How old are you? \"))\nif your_age >= driving_age:\n    print(\"You're old enough to drive!\")\nelse:\n    print(\"Sorry, you can drive in\", driving_age - your_age, \"years.\")\n```", "```\n   import turtle\n   t = turtle.Pen()\n   # Ask the user for the number of sides or circles, default to 6\n➊ number = int(turtle.numinput(\"Number of sides or circles\",\n               \"How many sides or circles in your shape?\", 6))\n   # Ask the user whether they want a polygon or rosette\n➋ shape = turtle.textinput(\"Which shape do you want?\",\n                           \"Enter 'p' for polygon or 'r' for rosette:\")\n➌ for x in range(number):\n➍     if shape == 'r':       # User selected rosette\n➎         t.circle(100)\n➏     else:                  # Default to polygon\n➐         t.forward (150)\n➑     t.left(360/number)\n```", "```\nfor m in range(number):\n    if (m % 2 == 0): # Tests to see if m is even\n        # Do even stuff\n    else:            # Otherwise, m must be odd\n        # Do odd stuff\n```", "```\n   # RosettesAndPolygons.py - a spiral of polygons AND rosettes!\n   import turtle\n   t = turtle.Pen()\n   # Ask the user for the number of sides, default to 4\n   sides = int(turtle.numinput(\"Number of sides\",\n               \"How many sides in your spiral?\", 4))\n   # Our outer spiral loop for polygons and rosettes, from size 5 to 75\n➊ for m in range(5,75):\n       t.left(360/sides + 5)\n➋     t.width(m//25+1)\n➌     t.penup()       # Don't draw lines on spiral\n       t.forward(m*4)  # Move to next corner\n➍     t.pendown()     # Get ready to draw\n       # Draw a little rosette at each EVEN corner of the spiral\n➎      if (m % 2 == 0):\n➏         for n in range(sides):\n               t.circle(m/3)\n               t.right(360/sides)\n       # OR, draw a little polygon at each ODD corner of the spiral\n➐     else:\n➑         for n in range(sides):\n               t.forward(m)\n               t.right(360/sides)\n```", "```\n➊ grade = eval(input(\"Enter your number grade (0-100): \"))\n➋ if grade >= 90:\n       print(\"You got an A! :) \")\n➌ elif grade >= 80:\n       print(\"You got a B!\")\n➍ elif grade >= 70:\n       print(\"You got a C.\")\n➎ elif grade >= 60:\n       print(\"You got a D...\")\n➏ else:\n       print(\"You got an F. :( \")\n```", "```\nanswer = input(\"Do you want to see a spiral? y/n:\")\nif answer == 'y':\n```", "```\n>>> 'Yes, Sir'.lower()\n'yes, sir'\n```", "```\nif answer.lower() == 'y':\n```", "```\nanswer = input(\"Do you want to see a spiral? y/n:\").lower()\nif answer == 'y' or answer == 'yes': # Checks for either 'y' or 'yes'\n```", "```\n➊ rainy = input(\"How's the weather? Is it raining? (y/n)\").lower()\n➋ cold = input(\"Is it cold outside? (y/n)\").lower()\n➌ if (rainy == 'y' and cold == 'y'):      # Rainy and cold, yuck!\n      print(\"You'd better wear a raincoat.\")\n➍ elif (rainy == 'y' and cold != 'y'):    # Rainy, but warm\n      print(\"Carry an umbrella with you.\")\n➎ elif (rainy != 'y' and cold == 'y'):    # Dry, but cold\n      print(\"Put on a jacket, it's cold out!\")\n➏ elif (rainy != 'y' and cold != 'y'):    # Warm and sunny, yay!\n      print(\"Wear whatever you want, it's beautiful outside!\")\n```", "```\nSECRET MESSAGES ARE SO COOL! -> FRPERG ZRFFNTRF NER FB PBBY!\n```", "```\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nN O P Q R S T U V W X Y Z->A B C D E F G H I J K L M\n```", "```\n>>> 'Bryson'.upper()\n'BRYSON'\n>>> 'Wow, this is cool!'.upper()\n'WOW, THIS IS COOL!'\n```", "```\n>>> 'Bryson'.lower()\n'bryson'\n```", "```\n>>> 'B'.isupper()\nTrue\n>>> 'b'.isupper()\nFalse\n>>> '3'.isupper()\nFalse\n```", "```\n>>> 'P'.islower()\nFalse\n>>> 'p'.islower()\nTrue\n```", "```\nfor letter in message:\n```", "```\n>>> 'Bry' + 'son'\n'Bryson'\n>>> 'Payn' + 'e'\n'Payne'\n```", "```\n>>> ord('A')\n65\n>>> ord('Z')\n90\n```", "```\n>>> chr(65)\n'A'\n>>> chr(90)\n'Z'\n```", "```\n   message = input(\"Enter a message to encode or decode: \") # Get a message\n➊ message = message.upper()          # Make it all UPPERCASE :)\n➋ output = \"\"                        # Create an empty string to hold output\n➌ for letter in message:             # Loop through each letter of the message\n➍     if letter.isupper():           # If the letter is in the alphabet (A-Z),\n➎         value = ord(letter) + 13   # shift the letter value up by 13,\n➏         letter = chr(value)        # turn the value back into a letter,\n➐         if not letter.isupper():   # and check to see if we shifted too far\n➑             value -= 26            # If we did, wrap it back around Z->A\n➒             letter = chr(value)    # by subtracting 26 from the letter value\n➓     output += letter               # Add the letter to our output string\n  print(\"Output message: \", output)   # Output our coded/decoded message\n```"]