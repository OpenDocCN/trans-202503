- en: Chapter 6. Object Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript has many patterns for creating objects, and there’s usually more
    than one way to accomplish the same thing. You can define your own custom types
    or your own generic objects whenever you want. You can use inheritance to share
    behavior between objects, or you can employ other techniques, such as mixins.
    You can also take advantage of advanced JavaScript features to prevent an object’s
    structure from being modified. The patterns discussed in this chapter give you
    powerful ways of managing and creating objects, all based on your use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Private and Privileged Members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All object properties in JavaScript are public, and there’s no explicit way
    to indicate that a property shouldn’t be accessed from outside a particular object.
    At some point, however, you might not want data to be public. For example, when
    an object uses a value to determine some sort of state, modifying that data without
    the object’s knowledge throws the state management process into chaos. One way
    to avoid this is by using naming conventions. For example, it’s quite common to
    prefix properties with an underscore (such as `this._name`) when they are not
    intended to be public. However, there are ways of hiding data that don’t rely
    on convention and are therefore more “bulletproof” in preventing the modification
    of private information.
  prefs: []
  type: TYPE_NORMAL
- en: The Module Pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *module pattern* is an object-creation pattern designed to create singleton
    objects with private data. The basic approach is to use an *immediately invoked
    function expression (IIFE)* that returns an object. An IIFE is a function expression
    that is defined and then called immediately to produce a result. That function
    expression can contain any number of local variables that aren’t accessible from
    outside that function. Because the returned object is defined within that function,
    the object’s methods have access to the data. (All objects defined within the
    IIFE have access to the same local variables.) Methods that access private data
    in this way are called *privileged* methods. Here’s the basic format for the module
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this pattern, an anonymous function is created and executed immediately.
    (Note the extra parentheses at the end of the function ❶. You can execute anonymous
    functions immediately using this syntax.) That means the function exists for just
    a moment, is executed, and then is destroyed. IIFEs are a very popular pattern
    in JavaScript, partially for their use in the module pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module pattern allows you to use regular variables as de facto object properties
    that aren’t exposed publicly. You accomplish this by creating *closure* functions
    as object methods. Closures are simply functions that access data outside their
    own scope. For example, whenever you access a global object in a function, such
    as `window` in a web browser, that function is accessing a variable outside its
    own scope. The difference with the module function is that the variables are declared
    within the IIFE, and a function that is also declared inside the IIFE accesses
    those variables. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This code creates the `person` object using the module pattern. The `age` variable
    ❶ acts like a private property for the object. It can’t be accessed directly from
    outside the object, but it can be used by the object methods. There are two privileged
    methods on the object: `getAge()` ❷, which reads the value of the `age` variable,
    and `growOlder()` ❸, which increments `age`. Both of these methods can access
    the variable `age` directly because it is defined in the outer function in which
    they are defined.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a variation of the module pattern called the *revealing module pattern*,
    which arranges all variables and methods at the top of the IIFE and simply assigns
    them to the returned object. You can write the previous example using the revealing
    module pattern as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the revealing module pattern, `age`, `getAge()`, and `growOlder()` are all
    defined as local to the IIFE. The `getAge()` and `growOlder()` functions are then
    assigned to the returned object ❶, effectively “revealing” them outside the IIFE.
    This code is essentially the same as the earlier example using the traditional
    module pattern; however, some prefer this pattern because it keeps all variable
    and function declarations together.
  prefs: []
  type: TYPE_NORMAL
- en: Private Members for Constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The module pattern is great for defining individual objects that have private
    properties, but what about custom types that also require their own private properties?
    You can use a pattern that’s similar to the module pattern inside the constructor
    to create instance-specific private data. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this code, the `Person` constructor has a local variable, `age`. That variable
    is used as part of the `getAge()` ❶ and `growOlder()` ❷ methods. When you create
    an instance of `Person`, that instance receives its own `age` variable, `getAge()`
    method, and `growOlder()` method. In many ways, this is similar to the module
    pattern, where the constructor creates a local scope and returns the `this` object.
    As discussed in [Chapter 4](ch04.html "Chapter 4. Constructors and Prototypes"),
    placing methods on an object instance is less efficient than doing so on the prototype,
    but this is the only approach possible when you want private, instance-specific
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want private data to be shared across all instances (as if it were on
    the prototype), you can use a hybrid approach that looks like the module pattern
    but uses a constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this code, the `InnerPerson` constructor ❷ is defined inside an IIFE. The
    variable `age` ❶ is defined outside the constructor but is used for two prototype
    methods. The `InnerPerson` constructor is then returned and becomes the `Person`
    constructor in the global scope. All instances of `Person` end up sharing the
    `age` variable, so changing the value with one instance automatically affects
    the other instance.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although pseudoclassical inheritance and prototypal inheritance are used frequently
    in JavaScript, there is also a type of pseudoinheritance accomplished through
    mixins. *Mixins* occur when one object acquires the properties of another without
    modifying the prototype chain. The first object (a *receiver*) actually receives
    the properties of the second object (the *supplier*) by copying those properties
    directly. Traditionally, you create mixins using a function such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mixin()` function accepts two arguments: the receiver and the supplier.
    The goal of the function is to copy all enumerable properties from the supplier
    onto the receiver. You accomplish this using a `for-in` loop that iterates over
    the properties in `supplier` and then assigns the value of that property to a
    property of the same name on `receiver`. Keep in mind that this is a shallow copy,
    so if a property contains an object, then both the supplier and the receiver will
    be pointing to the same object. This pattern is used frequently for adding new
    behaviors to JavaScript objects that already exist on other objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can add event support to an object through a mixin rather
    than inheritance. First, suppose you’ve already defined a custom type for using
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `EventTarget` type provides basic event handling for any object. You can
    add ❶ and remove ❸ listeners as well as fire events ❷ directly on the object.
    The event listeners are stored on a `_listeners` property that is created only
    when `addListener()` is called for the first time (this makes it easier to mix
    in). You can use instances of `EventTarget` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Support for events is useful for objects in JavaScript. If you want to have
    a different type of object that also supports events, you have a few options.
    First, you can create a new instance of `EventTarget` and then add on the properties
    that you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this code, a new variable called `person` is created as an instance of `EventTarget`,
    and then the `person`-related properties are added. Unfortunately, this means
    that `person` is actually an instance of `EventTarget` instead of `Object` or
    a custom type. You also incur the overhead of needing to add a bunch of new properties
    by hand. It would be better to have a more organized way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'A second way to solve this problem is to use pseudoclassical inheritance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, there is a new `Person` type that inherits from `EventTarget`
    ❶. You can add any further methods you need to `Person`’s prototype afterward.
    However, this isn’t as succinct as it could be, and you could argue that the relationship
    doesn’t make sense: A person is a type of event target? By using a mixin instead,
    you can reduce the amount of code necessary to assign those new properties to
    the prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `Person.prototype` is mixed in with a new instance of `EventTarget` ❶
    to get the event behavior. Then, `Person.prototype` is mixed in with `constructor`
    and `sayName()` to complete the composition of the prototype. Instances of `Person`
    are not instances of `EventTarget` in this example because there is no inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you might decide that while you do want to use an object’s properties,
    you don’t want a constructor of pseudoclassical inheritance at all. In that case,
    you can use a mixin directly when you create your new object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a new instance of `EventTarget` is mixed in with some new properties
    to create the `person` object without affecting `person`’s prototype chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to keep in mind about using mixins in this way is that accessor properties
    on the supplier become data properties on the receiver, which means you can overwrite
    them if you’re not careful. That’s because the receiver properties are being created
    by assignment rather than by `Object.defineProperty()`, meaning the current value
    of the supplier property is read and then assigned to a property of the same name
    on the receiver. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this code, `name` is defined as an accessor property with only a getter ❶.
    That means assigning a value to the property should have no effect. However, because
    the accessor property becomes a data property on the `person` object, it’s possible
    to overwrite `name` with a new value ❷. During the call to `mixin()`, the value
    of `name` is read from the supplier and assigned to the property called `name`
    on the receiver. At no point during this process is a new accessor defined, making
    the `name` property on the receiver a data property.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want accessor properties to be copied over as accessor properties, you
    need a different `mixin()` function, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This version of `mixin()` uses `Object.keys()` ❶ to get an array of all enumerable
    own properties on `supplier`. The `forEach()` method is used to iterate over those
    properties. The property descriptor for each property on `supplier` is retrieved
    and then added to `receiver` via `Object.defineProperty()` ❷. This ensures that
    all of the relevant property information is transferred to `receiver`, not just
    the value. That means the `person` object has an accessor property called `name`,
    so it cannot be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, this version of `mixin()` works only in ECMAScript 5 JavaScript
    engines. If your code needs to work for older engines, you should combine the
    two `mixin()` approaches into a single function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, `mixin()` checks whether `Object.getOwnPropertyDescriptor()` ❶ exists
    to determine whether the JavaScript engine supports ECMAScript 5\. If so, it goes
    on to use the ECMAScript 5 version. Otherwise, the ECMAScript 3 version is used
    ❷. This function is safe to use in both modern and legacy JavaScript engines,
    as they will apply the most appropriate mixin strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Keep in mind that Object.keys() returns only enumerable properties. If you
    want to also copy over nonenumerable properties, use `Object.getOwnPropertyNames()`
    instead.*'
  prefs: []
  type: TYPE_NORMAL
- en: Scope-Safe Constructors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because all constructors are just functions, you can call them without using
    the `new` operator and therefore affect the value of `this`. Doing so can yield
    unexpected results, as `this` ends up coerced to the global object in nonstrict
    mode, or the constructor throws an error in strict mode. In [Chapter 4](ch04.html
    "Chapter 4. Constructors and Prototypes"), you encountered this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `name` is created as a global variable because the `Person` constructor
    is called without `new` ❶. Keep in mind that this code is running in nonstrict
    mode, as leaving out `new` would throw an error in strict mode. The fact that
    the constructor begins with a capital letter usually indicates that it should
    be preceded by `new`, but what if you want to allow this use case and have the
    function work without `new`? Many built-in constructors, such as `Array` and `RegExp`,
    also work without `new` because they are written to be *scope safe*. A scope-safe
    constructor can be called with or without `new` and returns the same type of object
    in either case.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `new` is called with a function, the newly created object represented
    by `this` is already an instance of the custom type represented by the constructor.
    So you can use `instanceof` to determine whether `new` was used in the function
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a pattern like this lets you control what a function does based on whether
    it’s called with `new` or without. You may want to treat each circumstance differently,
    but you’ll often want the function to behave the same way (frequently, to protect
    against accidental omission of `new`). A scope-safe version of `Person` looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For this constructor, the `name` property is assigned as always when `new`
    is used. If `new` isn’t used, the constructor is called recursively via `new`
    to create a proper instance of the object. In this way, the following are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creating new objects without using the `new` operator is becoming more common
    as an effort to curb errors caused by omitting `new`. JavaScript itself has several
    reference types with scope-safe constructors, such as `Object`, `Array`, `RegExp`,
    and `Error`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different ways to create and compose objects in JavaScript. While
    JavaScript does not include the formal concept of private properties, you can
    create data or functions that are accessible only from within an object. For singleton
    objects, you can use the module pattern to hide data from the outside world. You
    can use an immediately invoked function expression (IIFE) to define local variables
    and functions that are accessible only by the newly created object. Privileged
    methods are methods on the object that have access to private data. You can also
    create constructors that have private data by either defining variables in the
    constructor function or by using an IIFE to create private data that is shared
    among all instances.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins are a powerful way to add functionality to objects while avoiding inheritance.
    A mixin copies properties from one object to another so that the receiving object
    gains functionality without inheriting from the supplying object. Unlike inheritance,
    mixins do not allow you to identify where the capabilities came from after the
    object is created. For this reason, mixins are best used with data properties
    or small pieces of functionality. Inheritance is still preferable when you want
    to obtain more functionality and know where that functionality came from.
  prefs: []
  type: TYPE_NORMAL
- en: Scope-safe constructors are constructors that you can call with or without `new`
    to create a new object instance. This pattern takes advantage of the fact that
    `this` is an instance of the custom type as soon as the constructor begins to
    execute, which lets you alter the constructor’s behavior depending on whether
    or not you used the `new` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Principles of Object-Oriented JavaScript* is set in New Baskerville, Futura,
    TheSansMono Condensed, and Dogma. The book was printed and bound by Lake Book
    Manufacturing in Melrose Park, Illinois. The paper is 60# Husky Opaque Offset
    Smooth, which is certified by the Sustainable Forestry Initiative (SFI).'
  prefs: []
  type: TYPE_NORMAL
- en: Index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A note on the digital index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A link in an index entry is displayed as the section title in which that entry
    appears. Because some sections have multiple index markers, it is not unusual
    for an entry to have several links to the same section. Clicking on any link will
    take you directly to the place in the text in which the marker appears.
  prefs: []
  type: TYPE_NORMAL
- en: Symbols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: == (double equals operator), [Identifying Primitive Types](ch01.html#iddle1003)
  prefs: []
  type: TYPE_NORMAL
- en: === (triple equals operator), [Identifying Primitive Types](ch01.html#iddle1004)
  prefs: []
  type: TYPE_NORMAL
- en: '[ ] (square brackets)'
  prefs: []
  type: TYPE_NORMAL
- en: for array literals, [Object and Array Literals](ch01.html#iddle1005)
  prefs: []
  type: TYPE_NORMAL
- en: for property access, [Function Literals](ch01.html#iddle1006)
  prefs: []
  type: TYPE_NORMAL
- en: '[[ ]] (double-square-bracket notation), [Functions](ch02.html#iddle1007)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Call]] property, [Functions](ch02.html#iddle1043)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Configurable]] attribute, [Common Attributes](ch03.html#iddle1051), [Accessor
    Property Attributes](ch03.html#iddle1052)'
  prefs: []
  type: TYPE_NORMAL
- en: for sealed object, [Sealing Objects](ch03.html#iddle1053)
  prefs: []
  type: TYPE_NORMAL
- en: '[[Delete]] operation, for object property, [Detecting Properties](ch03.html#iddle1087)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Enumerable]] property attribute, [Common Attributes](ch03.html#iddle1097),
    [Accessor Property Attributes](ch03.html#iddle1098)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Extensible]] attribute, [Preventing Object Modification](ch03.html#iddle1106)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Get]] attribute, [Data Property Attributes](ch03.html#iddle1132)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Prototype]] property, [Prototypes](ch04.html#iddle1298), [Using Prototypes
    with Constructors](ch04.html#iddle1299)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Put]] method, [Defining Properties](ch03.html#iddle1310)'
  prefs: []
  type: TYPE_NORMAL
- en: for data properties, [Enumeration](ch03.html#iddle1311)
  prefs: []
  type: TYPE_NORMAL
- en: '[[Set]] attribute, [Defining Properties](ch03.html#iddle1331), [Data Property
    Attributes](ch03.html#iddle1332)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Value]] attribute, [Common Attributes](ch03.html#iddle1379)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Writable]] attribute, [Common Attributes](ch03.html#iddle1388)'
  prefs: []
  type: TYPE_NORMAL
- en: _ (underscore), in property name prefix, [Types of Properties](ch03.html#iddle1008),
    [Private and Privileged Members](ch06.html#iddle1009)
  prefs: []
  type: TYPE_NORMAL
- en: _proto_ property, [The [[Prototype]] Property](ch04.html#iddle1288)
  prefs: []
  type: TYPE_NORMAL
- en: '{ } (braces)'
  prefs: []
  type: TYPE_NORMAL
- en: and object properties, [Instantiating Built-in Types](ch01.html#iddle1002)
  prefs: []
  type: TYPE_NORMAL
- en: for function contents, [Functions](ch02.html#iddle1001)
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: accessor properties, [Enumeration](ch03.html#iddle1010)
  prefs: []
  type: TYPE_NORMAL
- en: attributes, [Data Property Attributes](ch03.html#iddle1011)
  prefs: []
  type: TYPE_NORMAL
- en: creating, [Accessor Property Attributes](ch03.html#iddle1012)
  prefs: []
  type: TYPE_NORMAL
- en: adding properties, [Dereferencing Objects](ch01.html#iddle1013)
  prefs: []
  type: TYPE_NORMAL
- en: anonymous functions, [Functions as Values](ch02.html#iddle1014), [Private and
    Privileged Members](ch06.html#iddle1015)
  prefs: []
  type: TYPE_NORMAL
- en: apply() method, [The call() Method](ch02.html#iddle1016), [Constructor Inheritance](ch05.html#iddle1017)
  prefs: []
  type: TYPE_NORMAL
- en: arguments object, [Functions as Values](ch02.html#iddle1019)
  prefs: []
  type: TYPE_NORMAL
- en: arguments, functions as, [Functions as Values](ch02.html#iddle1018)
  prefs: []
  type: TYPE_NORMAL
- en: arity, [Functions as Values](ch02.html#iddle1020)
  prefs: []
  type: TYPE_NORMAL
- en: Array built-in type, [Dereferencing Objects](ch01.html#iddle1021)
  prefs: []
  type: TYPE_NORMAL
- en: array literals, [Instantiating Built-in Types](ch01.html#iddle1023)
  prefs: []
  type: TYPE_NORMAL
- en: Array.isArray() method, [Identifying Reference Types](ch01.html#iddle1022)
  prefs: []
  type: TYPE_NORMAL
- en: Array.prototype, modifying, [Changing Prototypes](ch04.html#iddle1024)
  prefs: []
  type: TYPE_NORMAL
- en: arrays
  prefs: []
  type: TYPE_NORMAL
- en: identifying, [Identifying Reference Types](ch01.html#iddle1025)
  prefs: []
  type: TYPE_NORMAL
- en: passing to apply(), [The call() Method](ch02.html#iddle1026)
  prefs: []
  type: TYPE_NORMAL
- en: assignment expressions, [Functions](ch02.html#iddle1027)
  prefs: []
  type: TYPE_NORMAL
- en: attributes of properties, [Types of Properties](ch03.html#iddle1028)
  prefs: []
  type: TYPE_NORMAL
- en: accessor properties, [Data Property Attributes](ch03.html#iddle1029)
  prefs: []
  type: TYPE_NORMAL
- en: data properties, [Common Attributes](ch03.html#iddle1030)
  prefs: []
  type: TYPE_NORMAL
- en: autoboxing, [Identifying Arrays](ch01.html#iddle1031)
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: bind() method, [The bind() Method](ch02.html#iddle1032)
  prefs: []
  type: TYPE_NORMAL
- en: Boolean object, [Primitive Types](ch01.html#iddle1033), [Primitive Wrapper Types](ch01.html#iddle1034)
  prefs: []
  type: TYPE_NORMAL
- en: Boolean primitive wrapper type, [Identifying Arrays](ch01.html#iddle1035)
  prefs: []
  type: TYPE_NORMAL
- en: braces ({ })
  prefs: []
  type: TYPE_NORMAL
- en: and object properties, [Instantiating Built-in Types](ch01.html#iddle1037)
  prefs: []
  type: TYPE_NORMAL
- en: for function contents, [Functions](ch02.html#iddle1036)
  prefs: []
  type: TYPE_NORMAL
- en: bracket notation, for property access, [Function Literals](ch01.html#iddle1038)
  prefs: []
  type: TYPE_NORMAL
- en: built-in object prototypes, [Changing Prototypes](ch04.html#iddle1039)
  prefs: []
  type: TYPE_NORMAL
- en: built-in types, instantiating, [Dereferencing Objects](ch01.html#iddle1040)
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: call() method, [The this Object](ch02.html#iddle1041), [Constructor Inheritance](ch05.html#iddle1042)
  prefs: []
  type: TYPE_NORMAL
- en: capitalization, of constructor names, [Constructors](ch04.html#iddle1044)
  prefs: []
  type: TYPE_NORMAL
- en: capitalize() method, for strings, [Changing Prototypes](ch04.html#iddle1045)
  prefs: []
  type: TYPE_NORMAL
- en: charAt() method, [Primitive Methods](ch01.html#iddle1046)
  prefs: []
  type: TYPE_NORMAL
- en: classes, JavaScript lack of support for, [Primitive and Reference Types](ch01.html#iddle1047)
  prefs: []
  type: TYPE_NORMAL
- en: closure functions, [The Module Pattern](ch06.html#iddle1048)
  prefs: []
  type: TYPE_NORMAL
- en: comparison functions, [Functions as Values](ch02.html#iddle1049)
  prefs: []
  type: TYPE_NORMAL
- en: comparison without coercion, [Identifying Primitive Types](ch01.html#iddle1050)
  prefs: []
  type: TYPE_NORMAL
- en: console.log function, [Constructors](ch04.html#iddle1054)
  prefs: []
  type: TYPE_NORMAL
- en: constructor property, [Constructors](ch04.html#iddle1055)
  prefs: []
  type: TYPE_NORMAL
- en: changing by object literal notation, [Using Prototypes with Constructors](ch04.html#iddle1056)
  prefs: []
  type: TYPE_NORMAL
- en: constructors, [Primitive Methods](ch01.html#iddle1057), [Constructors and Prototypes](ch04.html#iddle1058)
  prefs: []
  type: TYPE_NORMAL
- en: inheritance, [Object Inheritance](ch05.html#iddle1059)
  prefs: []
  type: TYPE_NORMAL
- en: Object.defineProperty() method inside, [Constructors](ch04.html#iddle1060)
  prefs: []
  type: TYPE_NORMAL
- en: private members for, [The Module Pattern](ch06.html#iddle1061)
  prefs: []
  type: TYPE_NORMAL
- en: prototype use with, [Using Prototypes with Constructors](ch04.html#iddle1062)
  prefs: []
  type: TYPE_NORMAL
- en: purpose of, [Constructors](ch04.html#iddle1063)
  prefs: []
  type: TYPE_NORMAL
- en: scope-safe, [Mixins](ch06.html#iddle1064)
  prefs: []
  type: TYPE_NORMAL
- en: stealing, [Constructor Inheritance](ch05.html#iddle1065)
  prefs: []
  type: TYPE_NORMAL
- en: subtype, [Object Inheritance](ch05.html#iddle1066), [Constructor Inheritance](ch05.html#iddle1067)
  prefs: []
  type: TYPE_NORMAL
- en: supertype, [Object Inheritance](ch05.html#iddle1068), [Constructor Inheritance](ch05.html#iddle1069)
  prefs: []
  type: TYPE_NORMAL
- en: create() method, [Object Inheritance](ch05.html#iddle1070)
  prefs: []
  type: TYPE_NORMAL
- en: creating
  prefs: []
  type: TYPE_NORMAL
- en: accessor properties, [Accessor Property Attributes](ch03.html#iddle1071)
  prefs: []
  type: TYPE_NORMAL
- en: objects, [Primitive Methods](ch01.html#iddle1072)
  prefs: []
  type: TYPE_NORMAL
- en: properties, on temporary objects, [Primitive Wrapper Types](ch01.html#iddle1073)
  prefs: []
  type: TYPE_NORMAL
- en: Crockford, Douglas, [Modifying Object.prototype](ch05.html#iddle1074)
  prefs: []
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: data
  prefs: []
  type: TYPE_NORMAL
- en: sharing private, [Private Members for Constructors](ch06.html#iddle1075)
  prefs: []
  type: TYPE_NORMAL
- en: storing on prototype, [Using Prototypes with Constructors](ch04.html#iddle1076)
  prefs: []
  type: TYPE_NORMAL
- en: types (see primitive types; reference types; types)
  prefs: []
  type: TYPE_NORMAL
- en: data properties, [Enumeration](ch03.html#iddle1078)
  prefs: []
  type: TYPE_NORMAL
- en: attributes, [Common Attributes](ch03.html#iddle1079)
  prefs: []
  type: TYPE_NORMAL
- en: from mixins, [Mixins](ch06.html#iddle1080)
  prefs: []
  type: TYPE_NORMAL
- en: Date built-in type, [Dereferencing Objects](ch01.html#iddle1081)
  prefs: []
  type: TYPE_NORMAL
- en: Date object, valueOf() method, [valueOf()](ch05.html#iddle1082)
  prefs: []
  type: TYPE_NORMAL
- en: declarations, vs. expressions, [Functions](ch02.html#iddle1083)
  prefs: []
  type: TYPE_NORMAL
- en: defineProperties() method, [Accessor Property Attributes](ch03.html#iddle1084)
  prefs: []
  type: TYPE_NORMAL
- en: defineProperty() method, [Common Attributes](ch03.html#iddle1085), [Constructors](ch04.html#iddle1086)
  prefs: []
  type: TYPE_NORMAL
- en: delete operator, [Detecting Properties](ch03.html#iddle1088), [Summary](ch03.html#iddle1089)
  prefs: []
  type: TYPE_NORMAL
- en: dereferencing, objects, [Creating Objects](ch01.html#iddle1090)
  prefs: []
  type: TYPE_NORMAL
- en: detecting properties, [Defining Properties](ch03.html#iddle1091)
  prefs: []
  type: TYPE_NORMAL
- en: dot notation, for property access, [Function Literals](ch01.html#iddle1092)
  prefs: []
  type: TYPE_NORMAL
- en: double equals operator (==), [Identifying Primitive Types](ch01.html#iddle1093)
  prefs: []
  type: TYPE_NORMAL
- en: double-square-bracket notation ([[ ]]), [Functions](ch02.html#iddle1094)
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: enumerable properties
  prefs: []
  type: TYPE_NORMAL
- en: adding to Object.prototype, [Modifying Object.prototype](ch05.html#iddle1095)
  prefs: []
  type: TYPE_NORMAL
- en: copying between supplier and receiver, [Private Members for Constructors](ch06.html#iddle1096)
  prefs: []
  type: TYPE_NORMAL
- en: enumeration, [Enumeration](ch03.html#iddle1099)
  prefs: []
  type: TYPE_NORMAL
- en: equals operators, double (==) and triple (===), [Identifying Primitive Types](ch01.html#iddle1100)
  prefs: []
  type: TYPE_NORMAL
- en: Error built-in type, [Instantiating Built-in Types](ch01.html#iddle1101)
  prefs: []
  type: TYPE_NORMAL
- en: errors
  prefs: []
  type: TYPE_NORMAL
- en: for primitive wrapper objects, [Primitive Wrapper Types](ch01.html#iddle1103)
  prefs: []
  type: TYPE_NORMAL
- en: from constructors in strict mode, [Constructors](ch04.html#iddle1102)
  prefs: []
  type: TYPE_NORMAL
- en: event support, adding to objects, [Mixins](ch06.html#iddle1104)
  prefs: []
  type: TYPE_NORMAL
- en: expressions, vs. declarations, [Functions](ch02.html#iddle1105)
  prefs: []
  type: TYPE_NORMAL
- en: extensions for objects, preventing, [Preventing Object Modification](ch03.html#iddle1107)
  prefs: []
  type: TYPE_NORMAL
- en: F
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: falsy values, [Defining Properties](ch03.html#iddle1108)
  prefs: []
  type: TYPE_NORMAL
- en: first-class functions, [Primitive and Reference Types](ch01.html#iddle1109)
  prefs: []
  type: TYPE_NORMAL
- en: flexibility of JavaScript, [Primitive and Reference Types](ch01.html#iddle1110)
  prefs: []
  type: TYPE_NORMAL
- en: for-in loops, [Enumeration](ch03.html#iddle1111), [Modifying Object.prototype](ch05.html#iddle1112),
    [Private Members for Constructors](ch06.html#iddle1113)
  prefs: []
  type: TYPE_NORMAL
- en: frames of web pages, passing values between, [Identifying Reference Types](ch01.html#iddle1114)
  prefs: []
  type: TYPE_NORMAL
- en: freeze() method, [Freezing Objects](ch03.html#iddle1115), [Changing Prototypes](ch04.html#iddle1116)
  prefs: []
  type: TYPE_NORMAL
- en: freezing objects, [Freezing Objects](ch03.html#iddle1117)
  prefs: []
  type: TYPE_NORMAL
- en: frozen objects, prototype modification and, [Changing Prototypes](ch04.html#iddle1118)
  prefs: []
  type: TYPE_NORMAL
- en: Function constructor, [Instantiating Built-in Types](ch01.html#iddle1119), [Object
    and Array Literals](ch01.html#iddle1120), [Functions as Values](ch02.html#iddle1121)
  prefs: []
  type: TYPE_NORMAL
- en: function keyword, [Functions](ch02.html#iddle1122)
  prefs: []
  type: TYPE_NORMAL
- en: function literals, [Object and Array Literals](ch01.html#iddle1123)
  prefs: []
  type: TYPE_NORMAL
- en: functions, [Primitive and Reference Types](ch01.html#iddle1124), [Functions](ch02.html#iddle1125)
  prefs: []
  type: TYPE_NORMAL
- en: as values, [Declarations vs. Expressions](ch02.html#iddle1130)
  prefs: []
  type: TYPE_NORMAL
- en: declarations vs. expressions, [Functions](ch02.html#iddle1126)
  prefs: []
  type: TYPE_NORMAL
- en: hoisting, [Functions](ch02.html#iddle1127)
  prefs: []
  type: TYPE_NORMAL
- en: overloading, [Overloading](ch02.html#iddle1128)
  prefs: []
  type: TYPE_NORMAL
- en: parameters, [Functions as Values](ch02.html#iddle1129)
  prefs: []
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: garbage-collection language, JavaScript as, [Creating Objects](ch01.html#iddle1131)
  prefs: []
  type: TYPE_NORMAL
- en: getOwnPropertyDescriptor() method, [Defining Multiple Properties](ch03.html#iddle1133)
  prefs: []
  type: TYPE_NORMAL
- en: getPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1134)
  prefs: []
  type: TYPE_NORMAL
- en: getter functions, [Enumeration](ch03.html#iddle1135)
  prefs: []
  type: TYPE_NORMAL
- en: global object, this to represent, [The this Object](ch02.html#iddle1136)
  prefs: []
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: hash maps, JavaScript objects as, [Summary](ch03.html#iddle1137)
  prefs: []
  type: TYPE_NORMAL
- en: hasOwnProperty() method, [Detecting Properties](ch03.html#iddle1138), [Constructors](ch04.html#iddle1139),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1140), [Modifying Object.prototype](ch05.html#iddle1141)
  prefs: []
  type: TYPE_NORMAL
- en: hoisting functions, [Functions](ch02.html#iddle1142)
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: if condition, [Defining Properties](ch03.html#iddle1143)
  prefs: []
  type: TYPE_NORMAL
- en: immediately invoked function expression (IIFE), [Private and Privileged Members](ch06.html#iddle1144)
  prefs: []
  type: TYPE_NORMAL
- en: in operator, [Constructors](ch04.html#iddle1152)
  prefs: []
  type: TYPE_NORMAL
- en: testing for property instance with, [Defining Properties](ch03.html#iddle1153)
  prefs: []
  type: TYPE_NORMAL
- en: inheritance, [Inheritance](ch05.html#iddle1145)
  prefs: []
  type: TYPE_NORMAL
- en: between objects, [Modifying Object.prototype](ch05.html#iddle1148)
  prefs: []
  type: TYPE_NORMAL
- en: constructor, [Object Inheritance](ch05.html#iddle1146)
  prefs: []
  type: TYPE_NORMAL
- en: methods from Object.prototype, [Prototype Chaining and Object.prototype](ch05.html#iddle1147)
  prefs: []
  type: TYPE_NORMAL
- en: prototype chaining, [Inheritance](ch05.html#iddle1149)
  prefs: []
  type: TYPE_NORMAL
- en: pseudoclassical, [Constructor Stealing](ch05.html#iddle1150), [Mixins](ch06.html#iddle1151)
  prefs: []
  type: TYPE_NORMAL
- en: instanceof operator, [Property Access](ch01.html#iddle1154)
  prefs: []
  type: TYPE_NORMAL
- en: temporary objects and, [Primitive Wrapper Types](ch01.html#iddle1155)
  prefs: []
  type: TYPE_NORMAL
- en: instances, [Primitive and Reference Types](ch01.html#iddle1156)
  prefs: []
  type: TYPE_NORMAL
- en: (see also objects)
  prefs: []
  type: TYPE_NORMAL
- en: checking type of, [Constructors](ch04.html#iddle1157)
  prefs: []
  type: TYPE_NORMAL
- en: of reference types, [Primitive Methods](ch01.html#iddle1159)
  prefs: []
  type: TYPE_NORMAL
- en: prototype link to constructor, [Using Prototypes with Constructors](ch04.html#iddle1158)
  prefs: []
  type: TYPE_NORMAL
- en: instantiating
  prefs: []
  type: TYPE_NORMAL
- en: built-in types, [Dereferencing Objects](ch01.html#iddle1160)
  prefs: []
  type: TYPE_NORMAL
- en: objects, [Primitive Methods](ch01.html#iddle1161)
  prefs: []
  type: TYPE_NORMAL
- en: primitive wrappers, [Primitive Wrapper Types](ch01.html#iddle1162)
  prefs: []
  type: TYPE_NORMAL
- en: internal property, of functions, [Functions](ch02.html#iddle1163)
  prefs: []
  type: TYPE_NORMAL
- en: isArray() method, [Identifying Reference Types](ch01.html#iddle1164)
  prefs: []
  type: TYPE_NORMAL
- en: isExtensible() method, [Preventing Object Modification](ch03.html#iddle1165),
    [Sealing Objects](ch03.html#iddle1166)
  prefs: []
  type: TYPE_NORMAL
- en: isFrozen() method, [Freezing Objects](ch03.html#iddle1167)
  prefs: []
  type: TYPE_NORMAL
- en: isPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1168), [Prototype
    Chaining and Object.prototype](ch05.html#iddle1169)
  prefs: []
  type: TYPE_NORMAL
- en: isSealed() method, [Sealing Objects](ch03.html#iddle1170)
  prefs: []
  type: TYPE_NORMAL
- en: K
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: key/value pairs, [Summary](ch03.html#iddle1173)
  prefs: []
  type: TYPE_NORMAL
- en: keys() method, [Enumeration](ch03.html#iddle1171), [Mixins](ch06.html#iddle1172)
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: length property, of functions, [Functions as Values](ch02.html#iddle1174)
  prefs: []
  type: TYPE_NORMAL
- en: literals, [Primitive Types](ch01.html#iddle1175), [Instantiating Built-in Types](ch01.html#iddle1176)
  prefs: []
  type: TYPE_NORMAL
- en: array, [Object and Array Literals](ch01.html#iddle1177)
  prefs: []
  type: TYPE_NORMAL
- en: function, [Object and Array Literals](ch01.html#iddle1178)
  prefs: []
  type: TYPE_NORMAL
- en: object, [Instantiating Built-in Types](ch01.html#iddle1179)
  prefs: []
  type: TYPE_NORMAL
- en: regular expression, [Function Literals](ch01.html#iddle1180)
  prefs: []
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: memory location, pointer to, [Creating Objects](ch01.html#iddle1181)
  prefs: []
  type: TYPE_NORMAL
- en: methods, [Primitive Methods](ch01.html#iddle1182), [Overloading](ch02.html#iddle1183)
  prefs: []
  type: TYPE_NORMAL
- en: adding to arrays, [Changing Prototypes](ch04.html#iddle1184)
  prefs: []
  type: TYPE_NORMAL
- en: for supertypes, accessing, [Accessing Supertype Methods](ch05.html#iddle1188)
  prefs: []
  type: TYPE_NORMAL
- en: primitive, [Primitive Methods](ch01.html#iddle1185)
  prefs: []
  type: TYPE_NORMAL
- en: privileged, [Private and Privileged Members](ch06.html#iddle1186)
  prefs: []
  type: TYPE_NORMAL
- en: prototypes for defining, [Using Prototypes with Constructors](ch04.html#iddle1187)
  prefs: []
  type: TYPE_NORMAL
- en: mixins, [Private Members for Constructors](ch06.html#iddle1189)
  prefs: []
  type: TYPE_NORMAL
- en: data properties from, [Mixins](ch06.html#iddle1190)
  prefs: []
  type: TYPE_NORMAL
- en: module patterns, [Private and Privileged Members](ch06.html#iddle1191)
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: names
  prefs: []
  type: TYPE_NORMAL
- en: for constructors, capitalization of, [Constructors](ch04.html#iddle1192)
  prefs: []
  type: TYPE_NORMAL
- en: for properties, [Private and Privileged Members](ch06.html#iddle1194)
  prefs: []
  type: TYPE_NORMAL
- en: multiple functions with same, [Overloading](ch02.html#iddle1193)
  prefs: []
  type: TYPE_NORMAL
- en: new operator, [Primitive Methods](ch01.html#iddle1195), [Mixins](ch06.html#iddle1196)
  prefs: []
  type: TYPE_NORMAL
- en: constructors and, [Constructors and Prototypes](ch04.html#iddle1197), [Constructors](ch04.html#iddle1198),
    [Constructors](ch04.html#iddle1199)
  prefs: []
  type: TYPE_NORMAL
- en: instantiating reference types with, [Instantiating Built-in Types](ch01.html#iddle1200)
  prefs: []
  type: TYPE_NORMAL
- en: this object created with, [Constructors](ch04.html#iddle1201)
  prefs: []
  type: TYPE_NORMAL
- en: null value, [Primitive Types](ch01.html#iddle1202)
  prefs: []
  type: TYPE_NORMAL
- en: determining if a value is, [Identifying Primitive Types](ch01.html#iddle1203)
  prefs: []
  type: TYPE_NORMAL
- en: setting object variable to, [Creating Objects](ch01.html#iddle1204)
  prefs: []
  type: TYPE_NORMAL
- en: setting property to, [Detecting Properties](ch03.html#iddle1205)
  prefs: []
  type: TYPE_NORMAL
- en: typeof operator and, [Identifying Primitive Types](ch01.html#iddle1206)
  prefs: []
  type: TYPE_NORMAL
- en: Number primitive wrapper type, [Identifying Arrays](ch01.html#iddle1207)
  prefs: []
  type: TYPE_NORMAL
- en: number type, [Primitive Types](ch01.html#iddle1208)
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Object built-in type, [Instantiating Built-in Types](ch01.html#iddle1209)
  prefs: []
  type: TYPE_NORMAL
- en: Object constructor, [Defining Properties](ch03.html#iddle1210)
  prefs: []
  type: TYPE_NORMAL
- en: object literals, [Instantiating Built-in Types](ch01.html#iddle1225)
  prefs: []
  type: TYPE_NORMAL
- en: object patterns, [Object Patterns](ch06.html#iddle1226)
  prefs: []
  type: TYPE_NORMAL
- en: private and privileged members, [Private and Privileged Members](ch06.html#iddle1227)
  prefs: []
  type: TYPE_NORMAL
- en: Object.create() method, [Object Inheritance](ch05.html#iddle1211)
  prefs: []
  type: TYPE_NORMAL
- en: Object.defineProperties() method, [Accessor Property Attributes](ch03.html#iddle1212)
  prefs: []
  type: TYPE_NORMAL
- en: Object.defineProperty() method, [Common Attributes](ch03.html#iddle1213), [Constructors](ch04.html#iddle1214)
  prefs: []
  type: TYPE_NORMAL
- en: Object.freeze() method, [Freezing Objects](ch03.html#iddle1215), [Changing Prototypes](ch04.html#iddle1216)
  prefs: []
  type: TYPE_NORMAL
- en: Object.getOwnPropertyDescriptor() method, [Defining Multiple Properties](ch03.html#iddle1217)
  prefs: []
  type: TYPE_NORMAL
- en: Object.getPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1218)
  prefs: []
  type: TYPE_NORMAL
- en: Object.isExtensible() method, [Preventing Object Modification](ch03.html#iddle1219),
    [Sealing Objects](ch03.html#iddle1220)
  prefs: []
  type: TYPE_NORMAL
- en: Object.isFrozen() method, [Freezing Objects](ch03.html#iddle1221)
  prefs: []
  type: TYPE_NORMAL
- en: Object.isSealed() method, [Sealing Objects](ch03.html#iddle1222)
  prefs: []
  type: TYPE_NORMAL
- en: Object.keys() method, [Enumeration](ch03.html#iddle1223), [Mixins](ch06.html#iddle1224)
  prefs: []
  type: TYPE_NORMAL
- en: Object.preventExtensions() method, [Preventing Object Modification](ch03.html#iddle1228)
  prefs: []
  type: TYPE_NORMAL
- en: Object.prototype prototype
  prefs: []
  type: TYPE_NORMAL
- en: methods inherited from, [Prototype Chaining and Object.prototype](ch05.html#iddle1231)
  prefs: []
  type: TYPE_NORMAL
- en: modifying, [toString()](ch05.html#iddle1232)
  prefs: []
  type: TYPE_NORMAL
- en: Object.prototype.isPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1229),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1230)
  prefs: []
  type: TYPE_NORMAL
- en: Object.seal() method, [Preventing Object Modification](ch03.html#iddle1246),
    [Changing Prototypes](ch04.html#iddle1247)
  prefs: []
  type: TYPE_NORMAL
- en: objects, [Primitive and Reference Types](ch01.html#iddle1233), [Primitive Methods](ch01.html#iddle1234),
    [Understanding Objects](ch03.html#iddle1235)
  prefs: []
  type: TYPE_NORMAL
- en: creating, [Primitive Methods](ch01.html#iddle1236)
  prefs: []
  type: TYPE_NORMAL
- en: dereferencing, [Creating Objects](ch01.html#iddle1237)
  prefs: []
  type: TYPE_NORMAL
- en: freezing, [Freezing Objects](ch03.html#iddle1238)
  prefs: []
  type: TYPE_NORMAL
- en: inheritance, [Modifying Object.prototype](ch05.html#iddle1239)
  prefs: []
  type: TYPE_NORMAL
- en: methods, [Overloading](ch02.html#iddle1240)
  prefs: []
  type: TYPE_NORMAL
- en: modification, preventing, [Preventing Object Modification](ch03.html#iddle1241)
  prefs: []
  type: TYPE_NORMAL
- en: properties, defining, [Defining Properties](ch03.html#iddle1242)
  prefs: []
  type: TYPE_NORMAL
- en: property inheritance from prototype, [Inheritance](ch05.html#iddle1243)
  prefs: []
  type: TYPE_NORMAL
- en: reference types as, [Primitive and Reference Types](ch01.html#iddle1244)
  prefs: []
  type: TYPE_NORMAL
- en: sealing, [Preventing Object Modification](ch03.html#iddle1245)
  prefs: []
  type: TYPE_NORMAL
- en: overloading functions, [Overloading](ch02.html#iddle1248)
  prefs: []
  type: TYPE_NORMAL
- en: own properties
  prefs: []
  type: TYPE_NORMAL
- en: determining existence of, [Prototype Chaining and Object.prototype](ch05.html#iddle1249)
  prefs: []
  type: TYPE_NORMAL
- en: determining whether enumerable, [Prototype Chaining and Object.prototype](ch05.html#iddle1250)
  prefs: []
  type: TYPE_NORMAL
- en: for objects, [Defining Properties](ch03.html#iddle1252)
  prefs: []
  type: TYPE_NORMAL
- en: in operator to check for, [Detecting Properties](ch03.html#iddle1251)
  prefs: []
  type: TYPE_NORMAL
- en: vs. prototype properties, [The [[Prototype]] Property](ch04.html#iddle1253)
  prefs: []
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: parameters, [Functions as Values](ch02.html#iddle1254)
  prefs: []
  type: TYPE_NORMAL
- en: person object, module pattern for creating, [The Module Pattern](ch06.html#iddle1255)
  prefs: []
  type: TYPE_NORMAL
- en: pointer to memory location, [Creating Objects](ch01.html#iddle1256)
  prefs: []
  type: TYPE_NORMAL
- en: preventExtensions() method, [Preventing Object Modification](ch03.html#iddle1257)
  prefs: []
  type: TYPE_NORMAL
- en: preventing object modifications, [Preventing Object Modification](ch03.html#iddle1258)
  prefs: []
  type: TYPE_NORMAL
- en: primitive methods, [Primitive Methods](ch01.html#iddle1259)
  prefs: []
  type: TYPE_NORMAL
- en: primitive types, [Primitive and Reference Types](ch01.html#iddle1260), [Primitive
    Types](ch01.html#iddle1261)
  prefs: []
  type: TYPE_NORMAL
- en: primitive wrapper types, [Identifying Arrays](ch01.html#iddle1262)
  prefs: []
  type: TYPE_NORMAL
- en: private data, sharing, [Private Members for Constructors](ch06.html#iddle1263)
  prefs: []
  type: TYPE_NORMAL
- en: private members, [Private and Privileged Members](ch06.html#iddle1264)
  prefs: []
  type: TYPE_NORMAL
- en: for constructors, [The Module Pattern](ch06.html#iddle1265)
  prefs: []
  type: TYPE_NORMAL
- en: privileged members, [Private and Privileged Members](ch06.html#iddle1266)
  prefs: []
  type: TYPE_NORMAL
- en: properties, [Primitive Methods](ch01.html#iddle1267), [Function Literals](ch01.html#iddle1268),
    [Private and Privileged Members](ch06.html#iddle1269)
  prefs: []
  type: TYPE_NORMAL
- en: adding or removing, [Dereferencing Objects](ch01.html#iddle1270)
  prefs: []
  type: TYPE_NORMAL
- en: copying enumerable, between receiver and supplier, [Private Members for Constructors](ch06.html#iddle1271)
  prefs: []
  type: TYPE_NORMAL
- en: creating on temporary objects, [Primitive Wrapper Types](ch01.html#iddle1272)
  prefs: []
  type: TYPE_NORMAL
- en: defining, [Defining Properties](ch03.html#iddle1273)
  prefs: []
  type: TYPE_NORMAL
- en: defining multiple, [Accessor Property Attributes](ch03.html#iddle1274)
  prefs: []
  type: TYPE_NORMAL
- en: detecting, [Defining Properties](ch03.html#iddle1275)
  prefs: []
  type: TYPE_NORMAL
- en: enumerable, adding to Object.prototype, [Modifying Object.prototype](ch05.html#iddle1276)
  prefs: []
  type: TYPE_NORMAL
- en: enumeration, [Enumeration](ch03.html#iddle1277)
  prefs: []
  type: TYPE_NORMAL
- en: identifying on prototype, [Prototypes](ch04.html#iddle1278)
  prefs: []
  type: TYPE_NORMAL
- en: removing, [Detecting Properties](ch03.html#iddle1279)
  prefs: []
  type: TYPE_NORMAL
- en: string literals for names, [Instantiating Built-in Types](ch01.html#iddle1280)
  prefs: []
  type: TYPE_NORMAL
- en: types, [Enumeration](ch03.html#iddle1281)
  prefs: []
  type: TYPE_NORMAL
- en: property attributes, [Types of Properties](ch03.html#iddle1282)
  prefs: []
  type: TYPE_NORMAL
- en: changing, [Common Attributes](ch03.html#iddle1283)
  prefs: []
  type: TYPE_NORMAL
- en: retrieving, [Defining Multiple Properties](ch03.html#iddle1284)
  prefs: []
  type: TYPE_NORMAL
- en: propertyIsEnumerable() method, [Enumeration](ch03.html#iddle1285), [Common Attributes](ch03.html#iddle1286),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1287)
  prefs: []
  type: TYPE_NORMAL
- en: prototype chaining, [Inheritance](ch05.html#iddle1289), [Object Inheritance](ch05.html#iddle1290),
    [Constructor Inheritance](ch05.html#iddle1291)
  prefs: []
  type: TYPE_NORMAL
- en: object without, [Object Inheritance](ch05.html#iddle1292)
  prefs: []
  type: TYPE_NORMAL
- en: overwriting, [Constructor Inheritance](ch05.html#iddle1293)
  prefs: []
  type: TYPE_NORMAL
- en: prototype properties
  prefs: []
  type: TYPE_NORMAL
- en: identifying, [Prototypes](ch04.html#iddle1294)
  prefs: []
  type: TYPE_NORMAL
- en: vs. own properties, [The [[Prototype]] Property](ch04.html#iddle1295)
  prefs: []
  type: TYPE_NORMAL
- en: prototype property, of functions, [Constructors](ch04.html#iddle1296), [Object
    Inheritance](ch05.html#iddle1297)
  prefs: []
  type: TYPE_NORMAL
- en: prototypes, [Constructors](ch04.html#iddle1300)
  prefs: []
  type: TYPE_NORMAL
- en: built-in object, [Changing Prototypes](ch04.html#iddle1301)
  prefs: []
  type: TYPE_NORMAL
- en: changing, [Using Prototypes with Constructors](ch04.html#iddle1302)
  prefs: []
  type: TYPE_NORMAL
- en: identifying properties, [Prototypes](ch04.html#iddle1303)
  prefs: []
  type: TYPE_NORMAL
- en: overwriting, [Using Prototypes with Constructors](ch04.html#iddle1304)
  prefs: []
  type: TYPE_NORMAL
- en: property inheritance from, [Inheritance](ch05.html#iddle1305)
  prefs: []
  type: TYPE_NORMAL
- en: use with constructors, [Using Prototypes with Constructors](ch04.html#iddle1306)
  prefs: []
  type: TYPE_NORMAL
- en: pseudoclassical inheritance, [Constructor Stealing](ch05.html#iddle1307), [Mixins](ch06.html#iddle1308)
  prefs: []
  type: TYPE_NORMAL
- en: pseudoinheritance, mixins for, [Private Members for Constructors](ch06.html#iddle1309)
  prefs: []
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: read-only property, [Types of Properties](ch03.html#iddle1312)
  prefs: []
  type: TYPE_NORMAL
- en: receiver, copying enumerable properties between supplier and, [Private Members
    for Constructors](ch06.html#iddle1313)
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle constructor, [Constructor Inheritance](ch05.html#iddle1314)
  prefs: []
  type: TYPE_NORMAL
- en: reference types, [Primitive and Reference Types](ch01.html#iddle1315), [Primitive
    Methods](ch01.html#iddle1316)
  prefs: []
  type: TYPE_NORMAL
- en: identifying, [Property Access](ch01.html#iddle1317)
  prefs: []
  type: TYPE_NORMAL
- en: reference values, storing on prototype, [Using Prototypes with Constructors](ch04.html#iddle1318)
  prefs: []
  type: TYPE_NORMAL
- en: RegExp built-in type, [Instantiating Built-in Types](ch01.html#iddle1319)
  prefs: []
  type: TYPE_NORMAL
- en: RegExp constructor, [Function Literals](ch01.html#iddle1320)
  prefs: []
  type: TYPE_NORMAL
- en: regular expression literals, [Function Literals](ch01.html#iddle1321)
  prefs: []
  type: TYPE_NORMAL
- en: removing properties, [Dereferencing Objects](ch01.html#iddle1322), [Detecting
    Properties](ch03.html#iddle1323)
  prefs: []
  type: TYPE_NORMAL
- en: retrieving property attributes, [Defining Multiple Properties](ch03.html#iddle1324)
  prefs: []
  type: TYPE_NORMAL
- en: revealing module pattern, [The Module Pattern](ch06.html#iddle1325)
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: scope-safe constructors, [Mixins](ch06.html#iddle1326)
  prefs: []
  type: TYPE_NORMAL
- en: seal() method, [Preventing Object Modification](ch03.html#iddle1329), [Changing
    Prototypes](ch04.html#iddle1330)
  prefs: []
  type: TYPE_NORMAL
- en: sealed objects, prototype modification and, [Changing Prototypes](ch04.html#iddle1327)
  prefs: []
  type: TYPE_NORMAL
- en: sealing objects, [Preventing Object Modification](ch03.html#iddle1328)
  prefs: []
  type: TYPE_NORMAL
- en: setter functions, [Enumeration](ch03.html#iddle1333)
  prefs: []
  type: TYPE_NORMAL
- en: sharing private data, [Private Members for Constructors](ch06.html#iddle1334)
  prefs: []
  type: TYPE_NORMAL
- en: signatures, function with multiple, [Overloading](ch02.html#iddle1335)
  prefs: []
  type: TYPE_NORMAL
- en: sort() method, [Functions as Values](ch02.html#iddle1336)
  prefs: []
  type: TYPE_NORMAL
- en: square brackets ([ ])
  prefs: []
  type: TYPE_NORMAL
- en: for array literals, [Object and Array Literals](ch01.html#iddle1337)
  prefs: []
  type: TYPE_NORMAL
- en: for property access, [Function Literals](ch01.html#iddle1338)
  prefs: []
  type: TYPE_NORMAL
- en: Square constructor, [Constructor Inheritance](ch05.html#iddle1339)
  prefs: []
  type: TYPE_NORMAL
- en: stealing constructors, [Constructor Inheritance](ch05.html#iddle1340)
  prefs: []
  type: TYPE_NORMAL
- en: strict mode
  prefs: []
  type: TYPE_NORMAL
- en: for nonextensible objects, [Preventing Object Modification](ch03.html#iddle1341)
  prefs: []
  type: TYPE_NORMAL
- en: for sealed objects, [Sealing Objects](ch03.html#iddle1342)
  prefs: []
  type: TYPE_NORMAL
- en: string literals, as property names, [Instantiating Built-in Types](ch01.html#iddle1343)
  prefs: []
  type: TYPE_NORMAL
- en: String primitive wrapper type, [Identifying Arrays](ch01.html#iddle1344)
  prefs: []
  type: TYPE_NORMAL
- en: string type, [Primitive Types](ch01.html#iddle1348)
  prefs: []
  type: TYPE_NORMAL
- en: strings
  prefs: []
  type: TYPE_NORMAL
- en: capitalize() method, [Changing Prototypes](ch04.html#iddle1345)
  prefs: []
  type: TYPE_NORMAL
- en: conversion of values to, for comparison, [Functions as Values](ch02.html#iddle1346)
  prefs: []
  type: TYPE_NORMAL
- en: methods, [Primitive Methods](ch01.html#iddle1347)
  prefs: []
  type: TYPE_NORMAL
- en: substring() method, [Primitive Methods](ch01.html#iddle1349)
  prefs: []
  type: TYPE_NORMAL
- en: subtype constructors, [Object Inheritance](ch05.html#iddle1350), [Constructor
    Inheritance](ch05.html#iddle1351)
  prefs: []
  type: TYPE_NORMAL
- en: sum() function, [Functions as Values](ch02.html#iddle1352)
  prefs: []
  type: TYPE_NORMAL
- en: supertype
  prefs: []
  type: TYPE_NORMAL
- en: constructors, [Object Inheritance](ch05.html#iddle1353), [Constructor Inheritance](ch05.html#iddle1354)
  prefs: []
  type: TYPE_NORMAL
- en: methods, accessing, [Accessing Supertype Methods](ch05.html#iddle1355)
  prefs: []
  type: TYPE_NORMAL
- en: supplier, copying enumerable properties between receiver and, [Private Members
    for Constructors](ch06.html#iddle1356)
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: temporary objects, creating properties on, [Primitive Wrapper Types](ch01.html#iddle1357)
  prefs: []
  type: TYPE_NORMAL
- en: this object, [The this Object](ch02.html#iddle1358)
  prefs: []
  type: TYPE_NORMAL
- en: changing value of, [The this Object](ch02.html#iddle1359)
  prefs: []
  type: TYPE_NORMAL
- en: creating with new, [Constructors](ch04.html#iddle1361)
  prefs: []
  type: TYPE_NORMAL
- en: to create length and width properties, [Constructor Stealing](ch05.html#iddle1360)
  prefs: []
  type: TYPE_NORMAL
- en: toFixed() method, [Primitive Methods](ch01.html#iddle1362)
  prefs: []
  type: TYPE_NORMAL
- en: toLowerCase() method, [Primitive Methods](ch01.html#iddle1363)
  prefs: []
  type: TYPE_NORMAL
- en: toString() method, [Primitive Methods](ch01.html#iddle1364), [Detecting Properties](ch03.html#iddle1365),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1366), [valueOf()](ch05.html#iddle1367)
  prefs: []
  type: TYPE_NORMAL
- en: triple equals operator (===), [Identifying Primitive Types](ch01.html#iddle1368)
  prefs: []
  type: TYPE_NORMAL
- en: truthy values, [Defining Properties](ch03.html#iddle1369)
  prefs: []
  type: TYPE_NORMAL
- en: typeof operator, [Primitive Types](ch01.html#iddle1370), [Property Access](ch01.html#iddle1371)
  prefs: []
  type: TYPE_NORMAL
- en: types, [Primitive and Reference Types](ch01.html#iddle1372)
  prefs: []
  type: TYPE_NORMAL
- en: (see also primitive types; reference types)
  prefs: []
  type: TYPE_NORMAL
- en: checking for different, [Overloading](ch02.html#iddle1373)
  prefs: []
  type: TYPE_NORMAL
- en: checking instance for, [Constructors](ch04.html#iddle1374)
  prefs: []
  type: TYPE_NORMAL
- en: instantiating built-in, [Dereferencing Objects](ch01.html#iddle1375)
  prefs: []
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: undefined type, [Primitive Types](ch01.html#iddle1376)
  prefs: []
  type: TYPE_NORMAL
- en: underscore (_), in property name prefix, [Types of Properties](ch03.html#iddle1377),
    [Private and Privileged Members](ch06.html#iddle1378)
  prefs: []
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: valueOf() method, [Prototype Chaining and Object.prototype](ch05.html#iddle1380),
    [valueOf()](ch05.html#iddle1381)
  prefs: []
  type: TYPE_NORMAL
- en: values
  prefs: []
  type: TYPE_NORMAL
- en: functions as, [Declarations vs. Expressions](ch02.html#iddle1382)
  prefs: []
  type: TYPE_NORMAL
- en: passing, between web page frames, [Identifying Reference Types](ch01.html#iddle1383)
  prefs: []
  type: TYPE_NORMAL
- en: variable object, [Primitive and Reference Types](ch01.html#iddle1384)
  prefs: []
  type: TYPE_NORMAL
- en: variables, for primitive types, [Primitive Types](ch01.html#iddle1385)
  prefs: []
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: web pages, passing values between frames, [Identifying Reference Types](ch01.html#iddle1386)
  prefs: []
  type: TYPE_NORMAL
- en: wrapper types, primitive, [Identifying Arrays](ch01.html#iddle1387)
  prefs: []
  type: TYPE_NORMAL
- en: write-only properties, [Types of Properties](ch03.html#iddle1389)
  prefs: []
  type: TYPE_NORMAL
