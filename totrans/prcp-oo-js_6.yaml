- en: Chapter 6. Object Patterns
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 章 对象模式
- en: JavaScript has many patterns for creating objects, and there’s usually more
    than one way to accomplish the same thing. You can define your own custom types
    or your own generic objects whenever you want. You can use inheritance to share
    behavior between objects, or you can employ other techniques, such as mixins.
    You can also take advantage of advanced JavaScript features to prevent an object’s
    structure from being modified. The patterns discussed in this chapter give you
    powerful ways of managing and creating objects, all based on your use cases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有许多创建对象的模式，通常有不止一种方法可以完成相同的任务。你可以在任何时候定义自己的自定义类型或通用对象。你可以使用继承来共享对象之间的行为，或者你可以采用其他技术，如
    mixins（混入）。你还可以利用 JavaScript 的高级特性，防止对象结构被修改。本章讨论的模式为你提供了强大的对象管理和创建方式，所有这些方式都是基于你的使用场景。
- en: Private and Privileged Members
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有和特权成员
- en: All object properties in JavaScript are public, and there’s no explicit way
    to indicate that a property shouldn’t be accessed from outside a particular object.
    At some point, however, you might not want data to be public. For example, when
    an object uses a value to determine some sort of state, modifying that data without
    the object’s knowledge throws the state management process into chaos. One way
    to avoid this is by using naming conventions. For example, it’s quite common to
    prefix properties with an underscore (such as `this._name`) when they are not
    intended to be public. However, there are ways of hiding data that don’t rely
    on convention and are therefore more “bulletproof” in preventing the modification
    of private information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的所有对象属性都是公共的，且没有显式的方式来指示某个属性不应该从外部访问。然而，在某些情况下，你可能不希望数据是公开的。例如，当一个对象使用某个值来确定某种状态时，如果在没有对象知情的情况下修改该数据，会导致状态管理过程陷入混乱。一种避免这种情况的方法是使用命名约定。例如，当属性不打算公开时，常常会使用下划线前缀（如
    `this._name`）。然而，也有一些不依赖约定的隐藏数据的方法，因此在防止私密信息被修改方面更具“防弹性”。
- en: The Module Pattern
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块模式
- en: 'The *module pattern* is an object-creation pattern designed to create singleton
    objects with private data. The basic approach is to use an *immediately invoked
    function expression (IIFE)* that returns an object. An IIFE is a function expression
    that is defined and then called immediately to produce a result. That function
    expression can contain any number of local variables that aren’t accessible from
    outside that function. Because the returned object is defined within that function,
    the object’s methods have access to the data. (All objects defined within the
    IIFE have access to the same local variables.) Methods that access private data
    in this way are called *privileged* methods. Here’s the basic format for the module
    pattern:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块模式* 是一种对象创建模式，旨在创建具有私有数据的单例对象。基本方法是使用一个*立即调用函数表达式（IIFE）*，该表达式返回一个对象。IIFE
    是一种函数表达式，它被定义后立即调用以产生结果。该函数表达式可以包含任何数量的局部变量，这些变量无法从外部访问。因为返回的对象是在该函数内定义的，所以该对象的方法可以访问这些数据。（所有在
    IIFE 内定义的对象都可以访问相同的局部变量。）以这种方式访问私有数据的方法被称为 *特权* 方法。以下是模块模式的基本格式：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this pattern, an anonymous function is created and executed immediately.
    (Note the extra parentheses at the end of the function ❶. You can execute anonymous
    functions immediately using this syntax.) That means the function exists for just
    a moment, is executed, and then is destroyed. IIFEs are a very popular pattern
    in JavaScript, partially for their use in the module pattern.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式中，创建并立即执行一个匿名函数。（注意函数末尾的额外括号❶。你可以使用这种语法立即执行匿名函数。）这意味着该函数存在的时间仅为片刻，执行后立即销毁。IIFE（立即调用的函数表达式）是
    JavaScript 中非常流行的模式，部分原因在于它们在模块模式中的使用。
- en: 'The module pattern allows you to use regular variables as de facto object properties
    that aren’t exposed publicly. You accomplish this by creating *closure* functions
    as object methods. Closures are simply functions that access data outside their
    own scope. For example, whenever you access a global object in a function, such
    as `window` in a web browser, that function is accessing a variable outside its
    own scope. The difference with the module function is that the variables are declared
    within the IIFE, and a function that is also declared inside the IIFE accesses
    those variables. For example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模块模式允许你将常规变量用作实际上不公开的对象属性。你通过创建*闭包*函数作为对象方法来实现这一点。闭包只是访问其外部作用域数据的函数。例如，每当你在函数中访问一个全局对象（例如在网页浏览器中的`window`）时，该函数就是在访问一个外部作用域的变量。与模块函数的不同之处在于，变量是在IIFE内部声明的，而在IIFE内部声明的函数则访问这些变量。例如：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code creates the `person` object using the module pattern. The `age` variable
    ❶ acts like a private property for the object. It can’t be accessed directly from
    outside the object, but it can be used by the object methods. There are two privileged
    methods on the object: `getAge()` ❷, which reads the value of the `age` variable,
    and `growOlder()` ❸, which increments `age`. Both of these methods can access
    the variable `age` directly because it is defined in the outer function in which
    they are defined.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用模块模式创建了`person`对象。`age`变量❶充当该对象的私有属性。它不能直接从对象外部访问，但可以被对象方法使用。对象上有两个特权方法：`getAge()`❷，用于读取`age`变量的值，和`growOlder()`❸，用于增加`age`的值。这两个方法都可以直接访问`age`变量，因为它是在它们定义的外部函数中声明的。
- en: 'There is a variation of the module pattern called the *revealing module pattern*,
    which arranges all variables and methods at the top of the IIFE and simply assigns
    them to the returned object. You can write the previous example using the revealing
    module pattern as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种模块模式的变体叫做*揭示模块模式*，它将所有变量和方法放置在IIFE的顶部，并简单地将它们分配给返回的对象。你可以像下面这样使用揭示模块模式来编写前面的例子：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the revealing module pattern, `age`, `getAge()`, and `growOlder()` are all
    defined as local to the IIFE. The `getAge()` and `growOlder()` functions are then
    assigned to the returned object ❶, effectively “revealing” them outside the IIFE.
    This code is essentially the same as the earlier example using the traditional
    module pattern; however, some prefer this pattern because it keeps all variable
    and function declarations together.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在揭示模块模式中，`age`、`getAge()`和`growOlder()`都被定义为IIFE的局部变量。然后，`getAge()`和`growOlder()`函数被分配给返回的对象❶，有效地“揭示”了它们，让它们可以在IIFE外部访问。这段代码本质上与之前使用传统模块模式的例子相同；然而，一些人更喜欢这种模式，因为它将所有变量和函数声明集中在一起。
- en: Private Members for Constructors
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数的私有成员
- en: 'The module pattern is great for defining individual objects that have private
    properties, but what about custom types that also require their own private properties?
    You can use a pattern that’s similar to the module pattern inside the constructor
    to create instance-specific private data. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模块模式非常适合定义具有私有属性的独立对象，但如果是需要私有属性的自定义类型呢？你可以在构造函数内部使用类似于模块模式的模式，来创建实例特定的私有数据。例如：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this code, the `Person` constructor has a local variable, `age`. That variable
    is used as part of the `getAge()` ❶ and `growOlder()` ❷ methods. When you create
    an instance of `Person`, that instance receives its own `age` variable, `getAge()`
    method, and `growOlder()` method. In many ways, this is similar to the module
    pattern, where the constructor creates a local scope and returns the `this` object.
    As discussed in [Chapter 4](ch04.html "Chapter 4. Constructors and Prototypes"),
    placing methods on an object instance is less efficient than doing so on the prototype,
    but this is the only approach possible when you want private, instance-specific
    data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`Person`构造函数有一个局部变量`age`。该变量作为`getAge()`❶和`growOlder()`❷方法的一部分。当你创建`Person`的实例时，该实例将获得自己的`age`变量、`getAge()`方法和`growOlder()`方法。从许多方面来看，这类似于模块模式，其中构造函数创建了一个局部作用域并返回`this`对象。如在[第4章](ch04.html
    "第4章. 构造函数与原型")中讨论的那样，将方法放置在对象实例上比放置在原型上效率低，但当你需要私有的、实例特定的数据时，这是唯一可行的做法。
- en: 'If you want private data to be shared across all instances (as if it were on
    the prototype), you can use a hybrid approach that looks like the module pattern
    but uses a constructor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让私有数据在所有实例之间共享（就像它在原型上），你可以使用一种混合方法，这种方法看起来像模块模式，但使用构造函数：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code, the `InnerPerson` constructor ❷ is defined inside an IIFE. The
    variable `age` ❶ is defined outside the constructor but is used for two prototype
    methods. The `InnerPerson` constructor is then returned and becomes the `Person`
    constructor in the global scope. All instances of `Person` end up sharing the
    `age` variable, so changing the value with one instance automatically affects
    the other instance.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`InnerPerson` 构造函数❷被定义在一个立即调用的函数表达式（IIFE）内。变量 `age` ❶ 定义在构造函数外部，但被两个原型方法使用。然后返回
    `InnerPerson` 构造函数，并成为全局作用域中的 `Person` 构造函数。所有 `Person` 的实例最终都共享 `age` 变量，因此通过一个实例更改其值会自动影响到其他实例。
- en: Mixins
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混入（Mixins）
- en: 'Although pseudoclassical inheritance and prototypal inheritance are used frequently
    in JavaScript, there is also a type of pseudoinheritance accomplished through
    mixins. *Mixins* occur when one object acquires the properties of another without
    modifying the prototype chain. The first object (a *receiver*) actually receives
    the properties of the second object (the *supplier*) by copying those properties
    directly. Traditionally, you create mixins using a function such as this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管伪经典继承和原型继承在 JavaScript 中使用频繁，但也有一种通过混入实现的伪继承类型。*混入*发生在一个对象获取另一个对象的属性时，而无需修改原型链。第一个对象（*接收者*）实际上是通过直接复制第二个对象（*提供者*）的属性来接收这些属性的。传统上，你可以使用这样的函数来创建混入：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `mixin()` function accepts two arguments: the receiver and the supplier.
    The goal of the function is to copy all enumerable properties from the supplier
    onto the receiver. You accomplish this using a `for-in` loop that iterates over
    the properties in `supplier` and then assigns the value of that property to a
    property of the same name on `receiver`. Keep in mind that this is a shallow copy,
    so if a property contains an object, then both the supplier and the receiver will
    be pointing to the same object. This pattern is used frequently for adding new
    behaviors to JavaScript objects that already exist on other objects.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixin()` 函数接受两个参数：接收者和提供者。该函数的目标是将所有可枚举的属性从提供者复制到接收者。你通过使用 `for-in` 循环遍历 `supplier`
    中的属性，然后将该属性的值赋给接收者上同名的属性来实现这一点。请记住，这是一个浅拷贝，所以如果某个属性包含对象，那么提供者和接收者都会指向同一个对象。这个模式通常用于为已经存在于其他对象上的
    JavaScript 对象添加新行为。'
- en: 'For example, you can add event support to an object through a mixin rather
    than inheritance. First, suppose you’ve already defined a custom type for using
    events:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以通过混入而非继承向一个对象添加事件支持。首先，假设你已经定义了一个用于事件的自定义类型：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `EventTarget` type provides basic event handling for any object. You can
    add ❶ and remove ❸ listeners as well as fire events ❷ directly on the object.
    The event listeners are stored on a `_listeners` property that is created only
    when `addListener()` is called for the first time (this makes it easier to mix
    in). You can use instances of `EventTarget` like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventTarget` 类型为任何对象提供了基本的事件处理功能。你可以在对象上直接添加❶和移除❸监听器，并触发❷事件。事件监听器存储在 `_listeners`
    属性中，只有在第一次调用 `addListener()` 时才会创建这个属性（这使得混入变得更容易）。你可以像这样使用 `EventTarget` 的实例：'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Support for events is useful for objects in JavaScript. If you want to have
    a different type of object that also supports events, you have a few options.
    First, you can create a new instance of `EventTarget` and then add on the properties
    that you want:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对象支持事件对于 JavaScript 来说非常有用。如果你想要一个支持事件的不同类型对象，你有几个选择。首先，你可以创建一个 `EventTarget`
    的新实例，然后添加你需要的属性：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this code, a new variable called `person` is created as an instance of `EventTarget`,
    and then the `person`-related properties are added. Unfortunately, this means
    that `person` is actually an instance of `EventTarget` instead of `Object` or
    a custom type. You also incur the overhead of needing to add a bunch of new properties
    by hand. It would be better to have a more organized way of doing this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，创建了一个名为 `person` 的新变量，作为 `EventTarget` 的实例，并添加了与 `person` 相关的属性。不幸的是，这意味着
    `person` 实际上是 `EventTarget` 的一个实例，而不是 `Object` 或自定义类型。你还需要手动添加一堆新属性，这带来了额外的开销。更好的方法是有一种更有组织的方式来实现这一点。
- en: 'A second way to solve this problem is to use pseudoclassical inheritance:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的第二种方法是使用伪经典继承：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this case, there is a new `Person` type that inherits from `EventTarget`
    ❶. You can add any further methods you need to `Person`’s prototype afterward.
    However, this isn’t as succinct as it could be, and you could argue that the relationship
    doesn’t make sense: A person is a type of event target? By using a mixin instead,
    you can reduce the amount of code necessary to assign those new properties to
    the prototype:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有一个新的 `Person` 类型，它继承自 `EventTarget` ❶。你可以之后在 `Person` 的原型上添加任何需要的方法。然而，这并不像它本来应该的那样简洁，你可以认为这种关系并没有意义：一个人是事件目标的一种类型？通过使用混合器，你可以减少分配这些新属性到原型所需的代码量：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `Person.prototype` is mixed in with a new instance of `EventTarget` ❶
    to get the event behavior. Then, `Person.prototype` is mixed in with `constructor`
    and `sayName()` to complete the composition of the prototype. Instances of `Person`
    are not instances of `EventTarget` in this example because there is no inheritance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Person.prototype` 与一个新的 `EventTarget` 实例混合 ❶ 以获得事件行为。然后，`Person.prototype`
    与 `constructor` 和 `sayName()` 混合，以完成原型的组合。在这个示例中，`Person` 的实例不是 `EventTarget`
    的实例，因为没有继承。
- en: 'Of course, you might decide that while you do want to use an object’s properties,
    you don’t want a constructor of pseudoclassical inheritance at all. In that case,
    you can use a mixin directly when you create your new object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能决定，尽管你确实想使用对象的属性，但你根本不想使用伪类继承的构造函数。在这种情况下，你可以在创建新对象时直接使用混合器：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, a new instance of `EventTarget` is mixed in with some new properties
    to create the `person` object without affecting `person`’s prototype chain.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个新的 `EventTarget` 实例与一些新的属性混合，创建了 `person` 对象，而不影响 `person` 的原型链。
- en: 'One thing to keep in mind about using mixins in this way is that accessor properties
    on the supplier become data properties on the receiver, which means you can overwrite
    them if you’re not careful. That’s because the receiver properties are being created
    by assignment rather than by `Object.defineProperty()`, meaning the current value
    of the supplier property is read and then assigned to a property of the same name
    on the receiver. For example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方式的混合器时，需要记住的一件事是，供应者上的访问器属性会变成接收者上的数据属性，这意味着如果不小心，你可以覆盖它们。这是因为接收者属性是通过赋值而不是
    `Object.defineProperty()` 创建的，这意味着会先读取供应者属性的当前值，然后将其赋给接收者上同名的属性。例如：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this code, `name` is defined as an accessor property with only a getter ❶.
    That means assigning a value to the property should have no effect. However, because
    the accessor property becomes a data property on the `person` object, it’s possible
    to overwrite `name` with a new value ❷. During the call to `mixin()`, the value
    of `name` is read from the supplier and assigned to the property called `name`
    on the receiver. At no point during this process is a new accessor defined, making
    the `name` property on the receiver a data property.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`name` 被定义为只有 getter 的访问器属性 ❶。这意味着给这个属性赋值应该没有效果。然而，由于访问器属性变成了 `person`
    对象上的数据属性，因此可以用新值覆盖 `name` ❷。在调用 `mixin()` 时，`name` 的值从供应者读取并赋给接收者上名为 `name` 的属性。在这个过程中，始终没有定义新的访问器，因此接收者上的
    `name` 属性成为了一个数据属性。
- en: 'If you want accessor properties to be copied over as accessor properties, you
    need a different `mixin()` function, such as:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望访问器属性作为访问器属性被复制过来，你需要一个不同的 `mixin()` 函数，比如：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This version of `mixin()` uses `Object.keys()` ❶ to get an array of all enumerable
    own properties on `supplier`. The `forEach()` method is used to iterate over those
    properties. The property descriptor for each property on `supplier` is retrieved
    and then added to `receiver` via `Object.defineProperty()` ❷. This ensures that
    all of the relevant property information is transferred to `receiver`, not just
    the value. That means the `person` object has an accessor property called `name`,
    so it cannot be overwritten.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 `mixin()` 使用 `Object.keys()` ❶ 获取 `supplier` 上所有可枚举的自有属性的数组。然后使用 `forEach()`
    方法遍历这些属性。每个属性的属性描述符会被检索出来，并通过 `Object.defineProperty()` ❷ 添加到 `receiver` 上。这确保了所有相关的属性信息都被转移到
    `receiver`，而不仅仅是值。这意味着 `person` 对象有一个叫做 `name` 的访问器属性，因此它不能被覆盖。
- en: 'Of course, this version of `mixin()` works only in ECMAScript 5 JavaScript
    engines. If your code needs to work for older engines, you should combine the
    two `mixin()` approaches into a single function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个版本的 `mixin()` 仅在 ECMAScript 5 的 JavaScript 引擎中有效。如果你的代码需要在较旧的引擎上运行，你应该将这两种
    `mixin()` 方法合并成一个单一的函数：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `mixin()` checks whether `Object.getOwnPropertyDescriptor()` ❶ exists
    to determine whether the JavaScript engine supports ECMAScript 5\. If so, it goes
    on to use the ECMAScript 5 version. Otherwise, the ECMAScript 3 version is used
    ❷. This function is safe to use in both modern and legacy JavaScript engines,
    as they will apply the most appropriate mixin strategy.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`mixin()` 检查 `Object.getOwnPropertyDescriptor()` ❶ 是否存在，以确定 JavaScript 引擎是否支持
    ECMAScript 5。如果支持，它就使用 ECMAScript 5 版本。否则，使用 ECMAScript 3 版本 ❷。这个函数在现代和遗留的 JavaScript
    引擎中都可以安全使用，因为它们会应用最合适的混合策略。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Keep in mind that Object.keys() returns only enumerable properties. If you
    want to also copy over nonenumerable properties, use `Object.getOwnPropertyNames()`
    instead.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*请记住，Object.keys() 仅返回可枚举的属性。如果你想要复制不可枚举的属性，请改用 `Object.getOwnPropertyNames()`。*'
- en: Scope-Safe Constructors
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围安全构造函数
- en: 'Because all constructors are just functions, you can call them without using
    the `new` operator and therefore affect the value of `this`. Doing so can yield
    unexpected results, as `this` ends up coerced to the global object in nonstrict
    mode, or the constructor throws an error in strict mode. In [Chapter 4](ch04.html
    "Chapter 4. Constructors and Prototypes"), you encountered this example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所有构造函数本质上都是函数，你可以在不使用 `new` 操作符的情况下调用它们，从而影响 `this` 的值。这样做可能会导致意想不到的结果，因为在非严格模式下，`this`
    会被强制转换为全局对象，或者在严格模式下构造函数会抛出错误。在[第4章](ch04.html "第4章 构造函数和原型")中，你遇到过这个例子：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this case, `name` is created as a global variable because the `Person` constructor
    is called without `new` ❶. Keep in mind that this code is running in nonstrict
    mode, as leaving out `new` would throw an error in strict mode. The fact that
    the constructor begins with a capital letter usually indicates that it should
    be preceded by `new`, but what if you want to allow this use case and have the
    function work without `new`? Many built-in constructors, such as `Array` and `RegExp`,
    also work without `new` because they are written to be *scope safe*. A scope-safe
    constructor can be called with or without `new` and returns the same type of object
    in either case.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`name` 被创建为全局变量，因为 `Person` 构造函数是没有 `new` 的情况下调用的 ❶。请记住，这段代码是在非严格模式下运行的，因为如果在严格模式下遗漏
    `new` 会抛出错误。构造函数以大写字母开头通常表示它应该以 `new` 开头，但如果你希望允许这种用法并且让函数在没有 `new` 的情况下工作呢？许多内建的构造函数，例如
    `Array` 和 `RegExp`，也能在没有 `new` 的情况下工作，因为它们是 *范围安全的*。一个范围安全的构造函数可以带 `new` 或不带 `new`
    调用，并且无论哪种方式都会返回相同类型的对象。
- en: 'When `new` is called with a function, the newly created object represented
    by `this` is already an instance of the custom type represented by the constructor.
    So you can use `instanceof` to determine whether `new` was used in the function
    call:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `new` 与函数一起调用时，`this` 表示的新创建的对象已经是由构造函数表示的自定义类型的实例。所以你可以使用 `instanceof` 来判断函数调用中是否使用了
    `new`：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using a pattern like this lets you control what a function does based on whether
    it’s called with `new` or without. You may want to treat each circumstance differently,
    but you’ll often want the function to behave the same way (frequently, to protect
    against accidental omission of `new`). A scope-safe version of `Person` looks
    like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的模式可以让你根据函数是带 `new` 还是不带 `new` 调用来控制函数的行为。你可能希望根据不同的情况处理不同的逻辑，但通常你希望函数的行为相同（经常是为了防止遗漏
    `new`）。一个范围安全的 `Person` 构造函数如下所示：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For this constructor, the `name` property is assigned as always when `new`
    is used. If `new` isn’t used, the constructor is called recursively via `new`
    to create a proper instance of the object. In this way, the following are equivalent:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个构造函数，当使用 `new` 时，`name` 属性总是会被分配。如果没有使用 `new`，构造函数会通过 `new` 递归调用，以创建该对象的正确实例。这样，以下两者是等效的：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Creating new objects without using the `new` operator is becoming more common
    as an effort to curb errors caused by omitting `new`. JavaScript itself has several
    reference types with scope-safe constructors, such as `Object`, `Array`, `RegExp`,
    and `Error`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用 `new` 操作符创建新对象的做法越来越普遍，这是为了减少因遗漏 `new` 导致的错误。JavaScript 本身有多个带有范围安全构造函数的引用类型，例如
    `Object`、`Array`、`RegExp` 和 `Error`。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: There are many different ways to create and compose objects in JavaScript. While
    JavaScript does not include the formal concept of private properties, you can
    create data or functions that are accessible only from within an object. For singleton
    objects, you can use the module pattern to hide data from the outside world. You
    can use an immediately invoked function expression (IIFE) to define local variables
    and functions that are accessible only by the newly created object. Privileged
    methods are methods on the object that have access to private data. You can also
    create constructors that have private data by either defining variables in the
    constructor function or by using an IIFE to create private data that is shared
    among all instances.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，有许多不同的方式来创建和组合对象。虽然 JavaScript 没有正式的私有属性概念，但你可以创建仅在对象内部可访问的数据或函数。对于单例对象，可以使用模块模式来隐藏外部世界的数据。你可以使用立即调用的函数表达式（IIFE）来定义仅新创建的对象可访问的局部变量和函数。特权方法是指那些能够访问私有数据的对象方法。你还可以通过在构造函数中定义变量或使用
    IIFE 创建共享给所有实例的私有数据来创建具有私有数据的构造函数。
- en: Mixins are a powerful way to add functionality to objects while avoiding inheritance.
    A mixin copies properties from one object to another so that the receiving object
    gains functionality without inheriting from the supplying object. Unlike inheritance,
    mixins do not allow you to identify where the capabilities came from after the
    object is created. For this reason, mixins are best used with data properties
    or small pieces of functionality. Inheritance is still preferable when you want
    to obtain more functionality and know where that functionality came from.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Mixins 是一种强大的方法，可以在不继承的情况下为对象添加功能。Mixin 将一个对象的属性复制到另一个对象，从而使接收对象获得功能而无需继承提供对象。与继承不同，mixins
    不允许你在对象创建后识别功能的来源。因此，mixins 最适合用于数据属性或小段功能。当你需要获得更多功能并且需要知道这些功能的来源时，继承仍然是首选。
- en: Scope-safe constructors are constructors that you can call with or without `new`
    to create a new object instance. This pattern takes advantage of the fact that
    `this` is an instance of the custom type as soon as the constructor begins to
    execute, which lets you alter the constructor’s behavior depending on whether
    or not you used the `new` operator.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 范围安全构造函数是指你可以使用或不使用 `new` 来调用的构造函数，用于创建新的对象实例。该模式利用了 `this` 在构造函数开始执行时即为自定义类型实例的事实，这使得你可以根据是否使用
    `new` 操作符来改变构造函数的行为。
- en: '*The Principles of Object-Oriented JavaScript* is set in New Baskerville, Futura,
    TheSansMono Condensed, and Dogma. The book was printed and bound by Lake Book
    Manufacturing in Melrose Park, Illinois. The paper is 60# Husky Opaque Offset
    Smooth, which is certified by the Sustainable Forestry Initiative (SFI).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*面向对象的 JavaScript 原则* 使用了 New Baskerville、Futura、TheSansMono Condensed 和 Dogma
    字体。此书由位于伊利诺伊州梅尔罗斯公园的 Lake Book Manufacturing 印刷和装订。纸张采用60# Husky Opaque Offset
    Smooth，且通过了可持续森林计划（SFI）认证。'
- en: Index
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: A note on the digital index
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字索引的说明
- en: A link in an index entry is displayed as the section title in which that entry
    appears. Because some sections have multiple index markers, it is not unusual
    for an entry to have several links to the same section. Clicking on any link will
    take you directly to the place in the text in which the marker appears.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 索引条目中的链接显示为该条目所在章节的标题。由于某些章节包含多个索引标记，因此一个条目可能会有多个指向同一章节的链接。点击任何一个链接都会直接带你到文本中标记出现的地方。
- en: Symbols
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 符号
- en: == (double equals operator), [Identifying Primitive Types](ch01.html#iddle1003)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ==（双等号运算符）， [识别原始类型](ch01.html#iddle1003)
- en: === (triple equals operator), [Identifying Primitive Types](ch01.html#iddle1004)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ===（三等号运算符）， [识别原始类型](ch01.html#iddle1004)
- en: '[ ] (square brackets)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[ ]（中括号）'
- en: for array literals, [Object and Array Literals](ch01.html#iddle1005)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组字面量，[对象和数组字面量](ch01.html#iddle1005)
- en: for property access, [Function Literals](ch01.html#iddle1006)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于属性访问，[函数字面量](ch01.html#iddle1006)
- en: '[[ ]] (double-square-bracket notation), [Functions](ch02.html#iddle1007)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[[ ]]（双中括号表示法）， [函数](ch02.html#iddle1007)'
- en: '[[Call]] property, [Functions](ch02.html#iddle1043)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Call]] 属性，[函数](ch02.html#iddle1043)'
- en: '[[Configurable]] attribute, [Common Attributes](ch03.html#iddle1051), [Accessor
    Property Attributes](ch03.html#iddle1052)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Configurable]] 属性， [常见属性](ch03.html#iddle1051)，[访问器属性](ch03.html#iddle1052)'
- en: for sealed object, [Sealing Objects](ch03.html#iddle1053)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于密封对象， [密封对象](ch03.html#iddle1053)
- en: '[[Delete]] operation, for object property, [Detecting Properties](ch03.html#iddle1087)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Delete]] 操作，针对对象属性，[检测属性](ch03.html#iddle1087)'
- en: '[[Enumerable]] property attribute, [Common Attributes](ch03.html#iddle1097),
    [Accessor Property Attributes](ch03.html#iddle1098)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Enumerable]] 属性属性，[常见属性](ch03.html#iddle1097)，[访问器属性属性](ch03.html#iddle1098)'
- en: '[[Extensible]] attribute, [Preventing Object Modification](ch03.html#iddle1106)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Extensible]] 属性，[防止对象修改](ch03.html#iddle1106)'
- en: '[[Get]] attribute, [Data Property Attributes](ch03.html#iddle1132)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Get]] 属性，[数据属性属性](ch03.html#iddle1132)'
- en: '[[Prototype]] property, [Prototypes](ch04.html#iddle1298), [Using Prototypes
    with Constructors](ch04.html#iddle1299)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Prototype]] 属性，[原型](ch04.html#iddle1298)，[使用构造函数的原型](ch04.html#iddle1299)'
- en: '[[Put]] method, [Defining Properties](ch03.html#iddle1310)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Put]] 方法，[定义属性](ch03.html#iddle1310)'
- en: for data properties, [Enumeration](ch03.html#iddle1311)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据属性，[枚举](ch03.html#iddle1311)
- en: '[[Set]] attribute, [Defining Properties](ch03.html#iddle1331), [Data Property
    Attributes](ch03.html#iddle1332)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Set]] 属性，[定义属性](ch03.html#iddle1331)，[数据属性属性](ch03.html#iddle1332)'
- en: '[[Value]] attribute, [Common Attributes](ch03.html#iddle1379)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Value]] 属性，[常见属性](ch03.html#iddle1379)'
- en: '[[Writable]] attribute, [Common Attributes](ch03.html#iddle1388)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Writable]] 属性，[常见属性](ch03.html#iddle1388)'
- en: _ (underscore), in property name prefix, [Types of Properties](ch03.html#iddle1008),
    [Private and Privileged Members](ch06.html#iddle1009)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: _（下划线），在属性名前缀，[属性类型](ch03.html#iddle1008)，[私有与特权成员](ch06.html#iddle1009)
- en: _proto_ property, [The [[Prototype]] Property](ch04.html#iddle1288)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: _proto_ 属性，[[[Prototype]] 属性](ch04.html#iddle1288)
- en: '{ } (braces)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '{ }（花括号）'
- en: and object properties, [Instantiating Built-in Types](ch01.html#iddle1002)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 和对象属性，[实例化内建类型](ch01.html#iddle1002)
- en: for function contents, [Functions](ch02.html#iddle1001)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数内容，[函数](ch02.html#iddle1001)
- en: A
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A
- en: accessor properties, [Enumeration](ch03.html#iddle1010)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器属性，[枚举](ch03.html#iddle1010)
- en: attributes, [Data Property Attributes](ch03.html#iddle1011)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，[数据属性属性](ch03.html#iddle1011)
- en: creating, [Accessor Property Attributes](ch03.html#iddle1012)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建，[访问器属性属性](ch03.html#iddle1012)
- en: adding properties, [Dereferencing Objects](ch01.html#iddle1013)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 添加属性，[解除引用对象](ch01.html#iddle1013)
- en: anonymous functions, [Functions as Values](ch02.html#iddle1014), [Private and
    Privileged Members](ch06.html#iddle1015)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数，[作为值的函数](ch02.html#iddle1014)，[私有与特权成员](ch06.html#iddle1015)
- en: apply() method, [The call() Method](ch02.html#iddle1016), [Constructor Inheritance](ch05.html#iddle1017)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: apply() 方法，[call() 方法](ch02.html#iddle1016)，[构造函数继承](ch05.html#iddle1017)
- en: arguments object, [Functions as Values](ch02.html#iddle1019)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: arguments 对象，[作为值的函数](ch02.html#iddle1019)
- en: arguments, functions as, [Functions as Values](ch02.html#iddle1018)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: arguments，作为函数，[作为值的函数](ch02.html#iddle1018)
- en: arity, [Functions as Values](ch02.html#iddle1020)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数个数，[作为值的函数](ch02.html#iddle1020)
- en: Array built-in type, [Dereferencing Objects](ch01.html#iddle1021)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Array 内建类型，[解除引用对象](ch01.html#iddle1021)
- en: array literals, [Instantiating Built-in Types](ch01.html#iddle1023)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 数组字面量，[实例化内建类型](ch01.html#iddle1023)
- en: Array.isArray() method, [Identifying Reference Types](ch01.html#iddle1022)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Array.isArray() 方法，[识别引用类型](ch01.html#iddle1022)
- en: Array.prototype, modifying, [Changing Prototypes](ch04.html#iddle1024)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Array.prototype，修改，[更改原型](ch04.html#iddle1024)
- en: arrays
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 数组
- en: identifying, [Identifying Reference Types](ch01.html#iddle1025)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 识别，[识别引用类型](ch01.html#iddle1025)
- en: passing to apply(), [The call() Method](ch02.html#iddle1026)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 apply()，[call() 方法](ch02.html#iddle1026)
- en: assignment expressions, [Functions](ch02.html#iddle1027)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值表达式，[函数](ch02.html#iddle1027)
- en: attributes of properties, [Types of Properties](ch03.html#iddle1028)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的属性，[属性类型](ch03.html#iddle1028)
- en: accessor properties, [Data Property Attributes](ch03.html#iddle1029)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器属性，[数据属性属性](ch03.html#iddle1029)
- en: data properties, [Common Attributes](ch03.html#iddle1030)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性，[常见属性](ch03.html#iddle1030)
- en: autoboxing, [Identifying Arrays](ch01.html#iddle1031)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 自动装箱，[识别数组](ch01.html#iddle1031)
- en: B
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: B
- en: bind() method, [The bind() Method](ch02.html#iddle1032)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: bind() 方法，[bind() 方法](ch02.html#iddle1032)
- en: Boolean object, [Primitive Types](ch01.html#iddle1033), [Primitive Wrapper Types](ch01.html#iddle1034)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔对象，[原始类型](ch01.html#iddle1033)，[原始包装类型](ch01.html#iddle1034)
- en: Boolean primitive wrapper type, [Identifying Arrays](ch01.html#iddle1035)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔原始包装类型，[识别数组](ch01.html#iddle1035)
- en: braces ({ })
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号 ({ })
- en: and object properties, [Instantiating Built-in Types](ch01.html#iddle1037)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 和对象属性，[实例化内建类型](ch01.html#iddle1037)
- en: for function contents, [Functions](ch02.html#iddle1036)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数内容，[函数](ch02.html#iddle1036)
- en: bracket notation, for property access, [Function Literals](ch01.html#iddle1038)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 中括号表示法，用于属性访问，[函数字面量](ch01.html#iddle1038)
- en: built-in object prototypes, [Changing Prototypes](ch04.html#iddle1039)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 内建对象原型，[更改原型](ch04.html#iddle1039)
- en: built-in types, instantiating, [Dereferencing Objects](ch01.html#iddle1040)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 内建类型，实例化，[解引用对象](ch01.html#iddle1040)
- en: C
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C
- en: call() method, [The this Object](ch02.html#iddle1041), [Constructor Inheritance](ch05.html#iddle1042)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: call() 方法，[this 对象](ch02.html#iddle1041)，[构造函数继承](ch05.html#iddle1042)
- en: capitalization, of constructor names, [Constructors](ch04.html#iddle1044)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数名称的大小写，[构造函数](ch04.html#iddle1044)
- en: capitalize() method, for strings, [Changing Prototypes](ch04.html#iddle1045)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: capitalize() 方法，用于字符串，[更改原型](ch04.html#iddle1045)
- en: charAt() method, [Primitive Methods](ch01.html#iddle1046)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: charAt() 方法，[原始方法](ch01.html#iddle1046)
- en: classes, JavaScript lack of support for, [Primitive and Reference Types](ch01.html#iddle1047)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 类，JavaScript 对类的缺乏支持，[原始类型和引用类型](ch01.html#iddle1047)
- en: closure functions, [The Module Pattern](ch06.html#iddle1048)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包函数，[模块模式](ch06.html#iddle1048)
- en: comparison functions, [Functions as Values](ch02.html#iddle1049)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 比较函数，[函数作为值](ch02.html#iddle1049)
- en: comparison without coercion, [Identifying Primitive Types](ch01.html#iddle1050)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 无强制转换的比较，[识别原始类型](ch01.html#iddle1050)
- en: console.log function, [Constructors](ch04.html#iddle1054)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: console.log 函数，[构造函数](ch04.html#iddle1054)
- en: constructor property, [Constructors](ch04.html#iddle1055)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: constructor 属性，[构造函数](ch04.html#iddle1055)
- en: changing by object literal notation, [Using Prototypes with Constructors](ch04.html#iddle1056)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对象字面量表示法进行更改，[使用构造函数与原型](ch04.html#iddle1056)
- en: constructors, [Primitive Methods](ch01.html#iddle1057), [Constructors and Prototypes](ch04.html#iddle1058)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数，[原始方法](ch01.html#iddle1057)，[构造函数与原型](ch04.html#iddle1058)
- en: inheritance, [Object Inheritance](ch05.html#iddle1059)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 继承，[对象继承](ch05.html#iddle1059)
- en: Object.defineProperty() method inside, [Constructors](ch04.html#iddle1060)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Object.defineProperty() 方法内部，[构造函数](ch04.html#iddle1060)
- en: private members for, [The Module Pattern](ch06.html#iddle1061)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 私有成员，[模块模式](ch06.html#iddle1061)
- en: prototype use with, [Using Prototypes with Constructors](ch04.html#iddle1062)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原型与，[使用构造函数与原型](ch04.html#iddle1062)
- en: purpose of, [Constructors](ch04.html#iddle1063)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 目的，[构造函数](ch04.html#iddle1063)
- en: scope-safe, [Mixins](ch06.html#iddle1064)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 范围安全，[混入](ch06.html#iddle1064)
- en: stealing, [Constructor Inheritance](ch05.html#iddle1065)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 偷窃，[构造函数继承](ch05.html#iddle1065)
- en: subtype, [Object Inheritance](ch05.html#iddle1066), [Constructor Inheritance](ch05.html#iddle1067)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 子类型，[对象继承](ch05.html#iddle1066)，[构造函数继承](ch05.html#iddle1067)
- en: supertype, [Object Inheritance](ch05.html#iddle1068), [Constructor Inheritance](ch05.html#iddle1069)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 超类型，[对象继承](ch05.html#iddle1068)，[构造函数继承](ch05.html#iddle1069)
- en: create() method, [Object Inheritance](ch05.html#iddle1070)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: create() 方法，[对象继承](ch05.html#iddle1070)
- en: creating
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建
- en: accessor properties, [Accessor Property Attributes](ch03.html#iddle1071)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器属性，[访问器属性特性](ch03.html#iddle1071)
- en: objects, [Primitive Methods](ch01.html#iddle1072)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，[原始方法](ch01.html#iddle1072)
- en: properties, on temporary objects, [Primitive Wrapper Types](ch01.html#iddle1073)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，在临时对象上，[原始包装类型](ch01.html#iddle1073)
- en: Crockford, Douglas, [Modifying Object.prototype](ch05.html#iddle1074)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 克罗克福德，道格拉斯，[修改 Object.prototype](ch05.html#iddle1074)
- en: D
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D
- en: data
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 数据
- en: sharing private, [Private Members for Constructors](ch06.html#iddle1075)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 共享私有，[构造函数的私有成员](ch06.html#iddle1075)
- en: storing on prototype, [Using Prototypes with Constructors](ch04.html#iddle1076)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在原型上，[使用构造函数与原型](ch04.html#iddle1076)
- en: types (see primitive types; reference types; types)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 类型（见原始类型；引用类型；类型）
- en: data properties, [Enumeration](ch03.html#iddle1078)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性，[枚举](ch03.html#iddle1078)
- en: attributes, [Common Attributes](ch03.html#iddle1079)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，[常见属性](ch03.html#iddle1079)
- en: from mixins, [Mixins](ch06.html#iddle1080)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从混入中，[混入](ch06.html#iddle1080)
- en: Date built-in type, [Dereferencing Objects](ch01.html#iddle1081)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 内建的 Date 类型，[解引用对象](ch01.html#iddle1081)
- en: Date object, valueOf() method, [valueOf()](ch05.html#iddle1082)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Date 对象，valueOf() 方法，[valueOf()](ch05.html#iddle1082)
- en: declarations, vs. expressions, [Functions](ch02.html#iddle1083)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 声明与表达式，[函数](ch02.html#iddle1083)
- en: defineProperties() method, [Accessor Property Attributes](ch03.html#iddle1084)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: defineProperties() 方法，[访问器属性特性](ch03.html#iddle1084)
- en: defineProperty() method, [Common Attributes](ch03.html#iddle1085), [Constructors](ch04.html#iddle1086)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: defineProperty() 方法，[常见属性](ch03.html#iddle1085)，[构造函数](ch04.html#iddle1086)
- en: delete operator, [Detecting Properties](ch03.html#iddle1088), [Summary](ch03.html#iddle1089)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 删除运算符，[检测属性](ch03.html#iddle1088)，[总结](ch03.html#iddle1089)
- en: dereferencing, objects, [Creating Objects](ch01.html#iddle1090)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 解引用, 对象, [创建对象](ch01.html#iddle1090)
- en: detecting properties, [Defining Properties](ch03.html#iddle1091)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 检测属性, [定义属性](ch03.html#iddle1091)
- en: dot notation, for property access, [Function Literals](ch01.html#iddle1092)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 点表示法, 用于访问属性, [函数字面量](ch01.html#iddle1092)
- en: double equals operator (==), [Identifying Primitive Types](ch01.html#iddle1093)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 双等号运算符 (==), [识别基本类型](ch01.html#iddle1093)
- en: double-square-bracket notation ([[ ]]), [Functions](ch02.html#iddle1094)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 双中括号表示法 ([[ ]]), [函数](ch02.html#iddle1094)
- en: E
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: E
- en: enumerable properties
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 可枚举属性
- en: adding to Object.prototype, [Modifying Object.prototype](ch05.html#iddle1095)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到 Object.prototype, [修改 Object.prototype](ch05.html#iddle1095)
- en: copying between supplier and receiver, [Private Members for Constructors](ch06.html#iddle1096)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商与接收者之间的复制, [构造函数的私有成员](ch06.html#iddle1096)
- en: enumeration, [Enumeration](ch03.html#iddle1099)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举, [枚举](ch03.html#iddle1099)
- en: equals operators, double (==) and triple (===), [Identifying Primitive Types](ch01.html#iddle1100)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 等于运算符，双等号 (==) 和三等号 (===), [识别基本类型](ch01.html#iddle1100)
- en: Error built-in type, [Instantiating Built-in Types](ch01.html#iddle1101)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 错误内建类型, [实例化内建类型](ch01.html#iddle1101)
- en: errors
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: for primitive wrapper objects, [Primitive Wrapper Types](ch01.html#iddle1103)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本包装对象, [基本包装类型](ch01.html#iddle1103)
- en: from constructors in strict mode, [Constructors](ch04.html#iddle1102)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式下的构造函数, [构造函数](ch04.html#iddle1102)
- en: event support, adding to objects, [Mixins](ch06.html#iddle1104)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 事件支持, 添加到对象, [混入](ch06.html#iddle1104)
- en: expressions, vs. declarations, [Functions](ch02.html#iddle1105)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式, 与声明的对比, [函数](ch02.html#iddle1105)
- en: extensions for objects, preventing, [Preventing Object Modification](ch03.html#iddle1107)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 防止对象扩展, [防止对象修改](ch03.html#iddle1107)
- en: F
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F
- en: falsy values, [Defining Properties](ch03.html#iddle1108)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 假值, [定义属性](ch03.html#iddle1108)
- en: first-class functions, [Primitive and Reference Types](ch01.html#iddle1109)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一等函数, [基本类型和引用类型](ch01.html#iddle1109)
- en: flexibility of JavaScript, [Primitive and Reference Types](ch01.html#iddle1110)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的灵活性, [基本类型和引用类型](ch01.html#iddle1110)
- en: for-in loops, [Enumeration](ch03.html#iddle1111), [Modifying Object.prototype](ch05.html#iddle1112),
    [Private Members for Constructors](ch06.html#iddle1113)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: for-in 循环, [枚举](ch03.html#iddle1111), [修改 Object.prototype](ch05.html#iddle1112),
    [构造函数的私有成员](ch06.html#iddle1113)
- en: frames of web pages, passing values between, [Identifying Reference Types](ch01.html#iddle1114)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 网页框架, 在不同框架间传递值, [识别引用类型](ch01.html#iddle1114)
- en: freeze() method, [Freezing Objects](ch03.html#iddle1115), [Changing Prototypes](ch04.html#iddle1116)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: freeze() 方法, [冻结对象](ch03.html#iddle1115), [修改原型](ch04.html#iddle1116)
- en: freezing objects, [Freezing Objects](ch03.html#iddle1117)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 冻结对象, [冻结对象](ch03.html#iddle1117)
- en: frozen objects, prototype modification and, [Changing Prototypes](ch04.html#iddle1118)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 冻结对象，原型修改与之关系, [修改原型](ch04.html#iddle1118)
- en: Function constructor, [Instantiating Built-in Types](ch01.html#iddle1119), [Object
    and Array Literals](ch01.html#iddle1120), [Functions as Values](ch02.html#iddle1121)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Function 构造器, [实例化内建类型](ch01.html#iddle1119), [对象和数组字面量](ch01.html#iddle1120),
    [函数作为值](ch02.html#iddle1121)
- en: function keyword, [Functions](ch02.html#iddle1122)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: function 关键字, [函数](ch02.html#iddle1122)
- en: function literals, [Object and Array Literals](ch01.html#iddle1123)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 函数字面量, [对象和数组字面量](ch01.html#iddle1123)
- en: functions, [Primitive and Reference Types](ch01.html#iddle1124), [Functions](ch02.html#iddle1125)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 函数, [基本类型和引用类型](ch01.html#iddle1124), [函数](ch02.html#iddle1125)
- en: as values, [Declarations vs. Expressions](ch02.html#iddle1130)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 作为值, [声明与表达式](ch02.html#iddle1130)
- en: declarations vs. expressions, [Functions](ch02.html#iddle1126)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 声明与表达式, [函数](ch02.html#iddle1126)
- en: hoisting, [Functions](ch02.html#iddle1127)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 变量提升, [函数](ch02.html#iddle1127)
- en: overloading, [Overloading](ch02.html#iddle1128)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 函数重载, [重载](ch02.html#iddle1128)
- en: parameters, [Functions as Values](ch02.html#iddle1129)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参数, [函数作为值](ch02.html#iddle1129)
- en: G
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: G
- en: garbage-collection language, JavaScript as, [Creating Objects](ch01.html#iddle1131)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾回收语言，作为 JavaScript， [创建对象](ch01.html#iddle1131)
- en: getOwnPropertyDescriptor() method, [Defining Multiple Properties](ch03.html#iddle1133)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: getOwnPropertyDescriptor() 方法, [定义多个属性](ch03.html#iddle1133)
- en: getPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1134)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: getPrototypeOf() 方法, [[[原型]] 属性](ch04.html#iddle1134)
- en: getter functions, [Enumeration](ch03.html#iddle1135)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: getter 函数, [枚举](ch03.html#iddle1135)
- en: global object, this to represent, [The this Object](ch02.html#iddle1136)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 全局对象, 使用 this 表示, [this 对象](ch02.html#iddle1136)
- en: H
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H
- en: hash maps, JavaScript objects as, [Summary](ch03.html#iddle1137)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希映射, JavaScript 对象作为, [总结](ch03.html#iddle1137)
- en: hasOwnProperty() method, [Detecting Properties](ch03.html#iddle1138), [Constructors](ch04.html#iddle1139),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1140), [Modifying Object.prototype](ch05.html#iddle1141)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: hasOwnProperty() 方法，[检测属性](ch03.html#iddle1138)，[构造函数](ch04.html#iddle1139)，[原型链和
    Object.prototype](ch05.html#iddle1140)，[修改 Object.prototype](ch05.html#iddle1141)
- en: hoisting functions, [Functions](ch02.html#iddle1142)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 提升函数，[函数](ch02.html#iddle1142)
- en: I
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: I
- en: if condition, [Defining Properties](ch03.html#iddle1143)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: if 条件，[定义属性](ch03.html#iddle1143)
- en: immediately invoked function expression (IIFE), [Private and Privileged Members](ch06.html#iddle1144)
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 立即调用函数表达式 (IIFE)，[私有和特权成员](ch06.html#iddle1144)
- en: in operator, [Constructors](ch04.html#iddle1152)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: in 操作符，[构造函数](ch04.html#iddle1152)
- en: testing for property instance with, [Defining Properties](ch03.html#iddle1153)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 测试属性实例，[定义属性](ch03.html#iddle1153)
- en: inheritance, [Inheritance](ch05.html#iddle1145)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 继承，[继承](ch05.html#iddle1145)
- en: between objects, [Modifying Object.prototype](ch05.html#iddle1148)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对象之间，[修改 Object.prototype](ch05.html#iddle1148)
- en: constructor, [Object Inheritance](ch05.html#iddle1146)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数，[对象继承](ch05.html#iddle1146)
- en: methods from Object.prototype, [Prototype Chaining and Object.prototype](ch05.html#iddle1147)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Object.prototype 的方法，[原型链和 Object.prototype](ch05.html#iddle1147)
- en: prototype chaining, [Inheritance](ch05.html#iddle1149)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 原型链，[继承](ch05.html#iddle1149)
- en: pseudoclassical, [Constructor Stealing](ch05.html#iddle1150), [Mixins](ch06.html#iddle1151)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 伪经典，[构造函数窃取](ch05.html#iddle1150)，[混入](ch06.html#iddle1151)
- en: instanceof operator, [Property Access](ch01.html#iddle1154)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: instanceof 操作符，[属性访问](ch01.html#iddle1154)
- en: temporary objects and, [Primitive Wrapper Types](ch01.html#iddle1155)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 临时对象，[原始包装类型](ch01.html#iddle1155)
- en: instances, [Primitive and Reference Types](ch01.html#iddle1156)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 实例，[原始与引用类型](ch01.html#iddle1156)
- en: (see also objects)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: （另见对象）
- en: checking type of, [Constructors](ch04.html#iddle1157)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 检查类型，[构造函数](ch04.html#iddle1157)
- en: of reference types, [Primitive Methods](ch01.html#iddle1159)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 引用类型，[原始方法](ch01.html#iddle1159)
- en: prototype link to constructor, [Using Prototypes with Constructors](ch04.html#iddle1158)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 原型链与构造函数，[使用构造函数与原型](ch04.html#iddle1158)
- en: instantiating
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化
- en: built-in types, [Dereferencing Objects](ch01.html#iddle1160)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 内建类型，[取消引用对象](ch01.html#iddle1160)
- en: objects, [Primitive Methods](ch01.html#iddle1161)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，[原始方法](ch01.html#iddle1161)
- en: primitive wrappers, [Primitive Wrapper Types](ch01.html#iddle1162)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 原始包装器，[原始包装类型](ch01.html#iddle1162)
- en: internal property, of functions, [Functions](ch02.html#iddle1163)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的内部属性，[函数](ch02.html#iddle1163)
- en: isArray() method, [Identifying Reference Types](ch01.html#iddle1164)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: isArray() 方法，[识别引用类型](ch01.html#iddle1164)
- en: isExtensible() method, [Preventing Object Modification](ch03.html#iddle1165),
    [Sealing Objects](ch03.html#iddle1166)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: isExtensible() 方法，[防止对象修改](ch03.html#iddle1165)，[封闭对象](ch03.html#iddle1166)
- en: isFrozen() method, [Freezing Objects](ch03.html#iddle1167)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: isFrozen() 方法，[冻结对象](ch03.html#iddle1167)
- en: isPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1168), [Prototype
    Chaining and Object.prototype](ch05.html#iddle1169)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: isPrototypeOf() 方法，[[[Prototype]] 属性](ch04.html#iddle1168)，[原型链和 Object.prototype](ch05.html#iddle1169)
- en: isSealed() method, [Sealing Objects](ch03.html#iddle1170)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: isSealed() 方法，[封闭对象](ch03.html#iddle1170)
- en: K
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: K
- en: key/value pairs, [Summary](ch03.html#iddle1173)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 键/值对，[总结](ch03.html#iddle1173)
- en: keys() method, [Enumeration](ch03.html#iddle1171), [Mixins](ch06.html#iddle1172)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: keys() 方法，[枚举](ch03.html#iddle1171)，[混入](ch06.html#iddle1172)
- en: L
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: L
- en: length property, of functions, [Functions as Values](ch02.html#iddle1174)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的 length 属性，[函数作为值](ch02.html#iddle1174)
- en: literals, [Primitive Types](ch01.html#iddle1175), [Instantiating Built-in Types](ch01.html#iddle1176)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 字面量，[原始类型](ch01.html#iddle1175)，[实例化内建类型](ch01.html#iddle1176)
- en: array, [Object and Array Literals](ch01.html#iddle1177)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 数组，[对象和数组字面量](ch01.html#iddle1177)
- en: function, [Object and Array Literals](ch01.html#iddle1178)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 函数，[对象和数组字面量](ch01.html#iddle1178)
- en: object, [Instantiating Built-in Types](ch01.html#iddle1179)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，[实例化内建类型](ch01.html#iddle1179)
- en: regular expression, [Function Literals](ch01.html#iddle1180)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式，[函数字面量](ch01.html#iddle1180)
- en: M
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: M
- en: memory location, pointer to, [Creating Objects](ch01.html#iddle1181)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 内存位置，指针指向，[创建对象](ch01.html#iddle1181)
- en: methods, [Primitive Methods](ch01.html#iddle1182), [Overloading](ch02.html#iddle1183)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 方法，[原始方法](ch01.html#iddle1182)，[重载](ch02.html#iddle1183)
- en: adding to arrays, [Changing Prototypes](ch04.html#iddle1184)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到数组，[改变原型](ch04.html#iddle1184)
- en: for supertypes, accessing, [Accessing Supertype Methods](ch05.html#iddle1188)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于超类型，访问，[访问超类型方法](ch05.html#iddle1188)
- en: primitive, [Primitive Methods](ch01.html#iddle1185)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 原始，[原始方法](ch01.html#iddle1185)
- en: privileged, [Private and Privileged Members](ch06.html#iddle1186)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 特权的, [私有和特权成员](ch06.html#iddle1186)
- en: prototypes for defining, [Using Prototypes with Constructors](ch04.html#iddle1187)
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 定义原型, [使用原型与构造函数](ch04.html#iddle1187)
- en: mixins, [Private Members for Constructors](ch06.html#iddle1189)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 混入, [构造函数的私有成员](ch06.html#iddle1189)
- en: data properties from, [Mixins](ch06.html#iddle1190)
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性来自, [混入](ch06.html#iddle1190)
- en: module patterns, [Private and Privileged Members](ch06.html#iddle1191)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 模块模式, [私有和特权成员](ch06.html#iddle1191)
- en: N
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: N
- en: names
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 名称
- en: for constructors, capitalization of, [Constructors](ch04.html#iddle1192)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于构造函数, 大写, [构造函数](ch04.html#iddle1192)
- en: for properties, [Private and Privileged Members](ch06.html#iddle1194)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于属性, [私有和特权成员](ch06.html#iddle1194)
- en: multiple functions with same, [Overloading](ch02.html#iddle1193)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的多个函数, [重载](ch02.html#iddle1193)
- en: new operator, [Primitive Methods](ch01.html#iddle1195), [Mixins](ch06.html#iddle1196)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: new 操作符, [原始方法](ch01.html#iddle1195), [混入](ch06.html#iddle1196)
- en: constructors and, [Constructors and Prototypes](ch04.html#iddle1197), [Constructors](ch04.html#iddle1198),
    [Constructors](ch04.html#iddle1199)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数和, [构造函数与原型](ch04.html#iddle1197), [构造函数](ch04.html#iddle1198), [构造函数](ch04.html#iddle1199)
- en: instantiating reference types with, [Instantiating Built-in Types](ch01.html#iddle1200)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 使用引用类型实例化, [实例化内建类型](ch01.html#iddle1200)
- en: this object created with, [Constructors](ch04.html#iddle1201)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该对象创建的, [构造函数](ch04.html#iddle1201)
- en: null value, [Primitive Types](ch01.html#iddle1202)
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: null 值, [原始类型](ch01.html#iddle1202)
- en: determining if a value is, [Identifying Primitive Types](ch01.html#iddle1203)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 确定一个值是否为, [识别原始类型](ch01.html#iddle1203)
- en: setting object variable to, [Creating Objects](ch01.html#iddle1204)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象变量设置为, [创建对象](ch01.html#iddle1204)
- en: setting property to, [Detecting Properties](ch03.html#iddle1205)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 设置属性为, [检测属性](ch03.html#iddle1205)
- en: typeof operator and, [Identifying Primitive Types](ch01.html#iddle1206)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: typeof 操作符和, [识别原始类型](ch01.html#iddle1206)
- en: Number primitive wrapper type, [Identifying Arrays](ch01.html#iddle1207)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Number 原始包装类型, [识别数组](ch01.html#iddle1207)
- en: number type, [Primitive Types](ch01.html#iddle1208)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 数字类型, [原始类型](ch01.html#iddle1208)
- en: O
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: O
- en: Object built-in type, [Instantiating Built-in Types](ch01.html#iddle1209)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Object 内建类型, [实例化内建类型](ch01.html#iddle1209)
- en: Object constructor, [Defining Properties](ch03.html#iddle1210)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Object 构造函数, [定义属性](ch03.html#iddle1210)
- en: object literals, [Instantiating Built-in Types](ch01.html#iddle1225)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量, [实例化内建类型](ch01.html#iddle1225)
- en: object patterns, [Object Patterns](ch06.html#iddle1226)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 对象模式, [对象模式](ch06.html#iddle1226)
- en: private and privileged members, [Private and Privileged Members](ch06.html#iddle1227)
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 私有和特权成员, [私有和特权成员](ch06.html#iddle1227)
- en: Object.create() method, [Object Inheritance](ch05.html#iddle1211)
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Object.create() 方法, [对象继承](ch05.html#iddle1211)
- en: Object.defineProperties() method, [Accessor Property Attributes](ch03.html#iddle1212)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Object.defineProperties() 方法, [访问器属性特性](ch03.html#iddle1212)
- en: Object.defineProperty() method, [Common Attributes](ch03.html#iddle1213), [Constructors](ch04.html#iddle1214)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Object.defineProperty() 方法, [常见属性](ch03.html#iddle1213), [构造函数](ch04.html#iddle1214)
- en: Object.freeze() method, [Freezing Objects](ch03.html#iddle1215), [Changing Prototypes](ch04.html#iddle1216)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Object.freeze() 方法, [冻结对象](ch03.html#iddle1215), [改变原型](ch04.html#iddle1216)
- en: Object.getOwnPropertyDescriptor() method, [Defining Multiple Properties](ch03.html#iddle1217)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Object.getOwnPropertyDescriptor() 方法, [定义多个属性](ch03.html#iddle1217)
- en: Object.getPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1218)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Object.getPrototypeOf() 方法, [[[Prototype]] 属性](ch04.html#iddle1218)
- en: Object.isExtensible() method, [Preventing Object Modification](ch03.html#iddle1219),
    [Sealing Objects](ch03.html#iddle1220)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Object.isExtensible() 方法, [防止对象修改](ch03.html#iddle1219), [密封对象](ch03.html#iddle1220)
- en: Object.isFrozen() method, [Freezing Objects](ch03.html#iddle1221)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Object.isFrozen() 方法, [冻结对象](ch03.html#iddle1221)
- en: Object.isSealed() method, [Sealing Objects](ch03.html#iddle1222)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Object.isSealed() 方法, [密封对象](ch03.html#iddle1222)
- en: Object.keys() method, [Enumeration](ch03.html#iddle1223), [Mixins](ch06.html#iddle1224)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Object.keys() 方法, [枚举](ch03.html#iddle1223), [混入](ch06.html#iddle1224)
- en: Object.preventExtensions() method, [Preventing Object Modification](ch03.html#iddle1228)
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Object.preventExtensions() 方法, [防止对象修改](ch03.html#iddle1228)
- en: Object.prototype prototype
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Object.prototype 原型
- en: methods inherited from, [Prototype Chaining and Object.prototype](ch05.html#iddle1231)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 继承的方法, [原型链和 Object.prototype](ch05.html#iddle1231)
- en: modifying, [toString()](ch05.html#iddle1232)
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 修改, [toString()](ch05.html#iddle1232)
- en: Object.prototype.isPrototypeOf() method, [The [[Prototype]] Property](ch04.html#iddle1229),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1230)
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Object.prototype.isPrototypeOf() 方法， [[[Prototype]] 属性](ch04.html#iddle1229)，
    [原型链和 Object.prototype](ch05.html#iddle1230)
- en: Object.seal() method, [Preventing Object Modification](ch03.html#iddle1246),
    [Changing Prototypes](ch04.html#iddle1247)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Object.seal() 方法， [防止对象修改](ch03.html#iddle1246)， [修改原型](ch04.html#iddle1247)
- en: objects, [Primitive and Reference Types](ch01.html#iddle1233), [Primitive Methods](ch01.html#iddle1234),
    [Understanding Objects](ch03.html#iddle1235)
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对象， [原始和引用类型](ch01.html#iddle1233)， [原始方法](ch01.html#iddle1234)， [理解对象](ch03.html#iddle1235)
- en: creating, [Primitive Methods](ch01.html#iddle1236)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 创建， [原始方法](ch01.html#iddle1236)
- en: dereferencing, [Creating Objects](ch01.html#iddle1237)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 取消引用， [创建对象](ch01.html#iddle1237)
- en: freezing, [Freezing Objects](ch03.html#iddle1238)
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 冻结， [冻结对象](ch03.html#iddle1238)
- en: inheritance, [Modifying Object.prototype](ch05.html#iddle1239)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 继承， [修改 Object.prototype](ch05.html#iddle1239)
- en: methods, [Overloading](ch02.html#iddle1240)
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 方法， [重载](ch02.html#iddle1240)
- en: modification, preventing, [Preventing Object Modification](ch03.html#iddle1241)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 修改，防止， [防止对象修改](ch03.html#iddle1241)
- en: properties, defining, [Defining Properties](ch03.html#iddle1242)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，定义， [定义属性](ch03.html#iddle1242)
- en: property inheritance from prototype, [Inheritance](ch05.html#iddle1243)
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 从原型继承属性， [继承](ch05.html#iddle1243)
- en: reference types as, [Primitive and Reference Types](ch01.html#iddle1244)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 引用类型作为， [原始和引用类型](ch01.html#iddle1244)
- en: sealing, [Preventing Object Modification](ch03.html#iddle1245)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 密封， [防止对象修改](ch03.html#iddle1245)
- en: overloading functions, [Overloading](ch02.html#iddle1248)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 重载函数， [重载](ch02.html#iddle1248)
- en: own properties
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 自有属性
- en: determining existence of, [Prototype Chaining and Object.prototype](ch05.html#iddle1249)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 确定存在性， [原型链和 Object.prototype](ch05.html#iddle1249)
- en: determining whether enumerable, [Prototype Chaining and Object.prototype](ch05.html#iddle1250)
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 确定是否可枚举， [原型链和 Object.prototype](ch05.html#iddle1250)
- en: for objects, [Defining Properties](ch03.html#iddle1252)
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的， [定义属性](ch03.html#iddle1252)
- en: in operator to check for, [Detecting Properties](ch03.html#iddle1251)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 in 操作符检查， [检测属性](ch03.html#iddle1251)
- en: vs. prototype properties, [The [[Prototype]] Property](ch04.html#iddle1253)
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 与原型属性比较， [[[Prototype]] 属性](ch04.html#iddle1253)
- en: P
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: P
- en: parameters, [Functions as Values](ch02.html#iddle1254)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 参数， [作为值的函数](ch02.html#iddle1254)
- en: person object, module pattern for creating, [The Module Pattern](ch06.html#iddle1255)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 人物对象，模块模式创建， [模块模式](ch06.html#iddle1255)
- en: pointer to memory location, [Creating Objects](ch01.html#iddle1256)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 指向内存位置， [创建对象](ch01.html#iddle1256)
- en: preventExtensions() method, [Preventing Object Modification](ch03.html#iddle1257)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: preventExtensions() 方法， [防止对象修改](ch03.html#iddle1257)
- en: preventing object modifications, [Preventing Object Modification](ch03.html#iddle1258)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 防止对象修改， [防止对象修改](ch03.html#iddle1258)
- en: primitive methods, [Primitive Methods](ch01.html#iddle1259)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 原始方法， [原始方法](ch01.html#iddle1259)
- en: primitive types, [Primitive and Reference Types](ch01.html#iddle1260), [Primitive
    Types](ch01.html#iddle1261)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型， [原始和引用类型](ch01.html#iddle1260)， [原始类型](ch01.html#iddle1261)
- en: primitive wrapper types, [Identifying Arrays](ch01.html#iddle1262)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 原始包装类型， [识别数组](ch01.html#iddle1262)
- en: private data, sharing, [Private Members for Constructors](ch06.html#iddle1263)
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 私有数据， 共享， [构造函数的私有成员](ch06.html#iddle1263)
- en: private members, [Private and Privileged Members](ch06.html#iddle1264)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 私有成员， [私有和特权成员](ch06.html#iddle1264)
- en: for constructors, [The Module Pattern](ch06.html#iddle1265)
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数， [模块模式](ch06.html#iddle1265)
- en: privileged members, [Private and Privileged Members](ch06.html#iddle1266)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 特权成员， [私有和特权成员](ch06.html#iddle1266)
- en: properties, [Primitive Methods](ch01.html#iddle1267), [Function Literals](ch01.html#iddle1268),
    [Private and Privileged Members](ch06.html#iddle1269)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 属性， [原始方法](ch01.html#iddle1267)， [函数字面量](ch01.html#iddle1268)， [私有和特权成员](ch06.html#iddle1269)
- en: adding or removing, [Dereferencing Objects](ch01.html#iddle1270)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 添加或移除， [取消引用对象](ch01.html#iddle1270)
- en: copying enumerable, between receiver and supplier, [Private Members for Constructors](ch06.html#iddle1271)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 复制可枚举的，在接收方和提供方之间， [构造函数的私有成员](ch06.html#iddle1271)
- en: creating on temporary objects, [Primitive Wrapper Types](ch01.html#iddle1272)
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在临时对象上创建， [原始包装类型](ch01.html#iddle1272)
- en: defining, [Defining Properties](ch03.html#iddle1273)
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 定义， [定义属性](ch03.html#iddle1273)
- en: defining multiple, [Accessor Property Attributes](ch03.html#iddle1274)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 定义多个， [访问器属性特性](ch03.html#iddle1274)
- en: detecting, [Defining Properties](ch03.html#iddle1275)
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 检测， [定义属性](ch03.html#iddle1275)
- en: enumerable, adding to Object.prototype, [Modifying Object.prototype](ch05.html#iddle1276)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 可枚举，添加到 Object.prototype，[修改 Object.prototype](ch05.html#iddle1276)
- en: enumeration, [Enumeration](ch03.html#iddle1277)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举，[枚举](ch03.html#iddle1277)
- en: identifying on prototype, [Prototypes](ch04.html#iddle1278)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在原型上识别，[原型](ch04.html#iddle1278)
- en: removing, [Detecting Properties](ch03.html#iddle1279)
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 移除，[检测属性](ch03.html#iddle1279)
- en: string literals for names, [Instantiating Built-in Types](ch01.html#iddle1280)
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 用于名称的字符串字面量，[实例化内建类型](ch01.html#iddle1280)
- en: types, [Enumeration](ch03.html#iddle1281)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 类型，[枚举](ch03.html#iddle1281)
- en: property attributes, [Types of Properties](ch03.html#iddle1282)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 属性特性，[属性类型](ch03.html#iddle1282)
- en: changing, [Common Attributes](ch03.html#iddle1283)
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 更改，[常见属性](ch03.html#iddle1283)
- en: retrieving, [Defining Multiple Properties](ch03.html#iddle1284)
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 检索，[定义多个属性](ch03.html#iddle1284)
- en: propertyIsEnumerable() method, [Enumeration](ch03.html#iddle1285), [Common Attributes](ch03.html#iddle1286),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1287)
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: propertyIsEnumerable() 方法，[枚举](ch03.html#iddle1285)，[常见属性](ch03.html#iddle1286)，[原型链和
    Object.prototype](ch05.html#iddle1287)
- en: prototype chaining, [Inheritance](ch05.html#iddle1289), [Object Inheritance](ch05.html#iddle1290),
    [Constructor Inheritance](ch05.html#iddle1291)
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 原型链，[继承](ch05.html#iddle1289)，[对象继承](ch05.html#iddle1290)，[构造函数继承](ch05.html#iddle1291)
- en: object without, [Object Inheritance](ch05.html#iddle1292)
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 没有对象，[对象继承](ch05.html#iddle1292)
- en: overwriting, [Constructor Inheritance](ch05.html#iddle1293)
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖，[构造函数继承](ch05.html#iddle1293)
- en: prototype properties
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 原型属性
- en: identifying, [Prototypes](ch04.html#iddle1294)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 识别，[原型](ch04.html#iddle1294)
- en: vs. own properties, [The [[Prototype]] Property](ch04.html#iddle1295)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 与自身属性对比，[[[Prototype]] 属性](ch04.html#iddle1295)
- en: prototype property, of functions, [Constructors](ch04.html#iddle1296), [Object
    Inheritance](ch05.html#iddle1297)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的原型属性，[构造函数](ch04.html#iddle1296)，[对象继承](ch05.html#iddle1297)
- en: prototypes, [Constructors](ch04.html#iddle1300)
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 原型，[构造函数](ch04.html#iddle1300)
- en: built-in object, [Changing Prototypes](ch04.html#iddle1301)
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 内建对象，[更改原型](ch04.html#iddle1301)
- en: changing, [Using Prototypes with Constructors](ch04.html#iddle1302)
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 更改，[使用构造函数的原型](ch04.html#iddle1302)
- en: identifying properties, [Prototypes](ch04.html#iddle1303)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 识别属性，[原型](ch04.html#iddle1303)
- en: overwriting, [Using Prototypes with Constructors](ch04.html#iddle1304)
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖，[使用构造函数的原型](ch04.html#iddle1304)
- en: property inheritance from, [Inheritance](ch05.html#iddle1305)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 从[继承](ch05.html#iddle1305)中继承属性
- en: use with constructors, [Using Prototypes with Constructors](ch04.html#iddle1306)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 与构造函数一起使用，[使用构造函数的原型](ch04.html#iddle1306)
- en: pseudoclassical inheritance, [Constructor Stealing](ch05.html#iddle1307), [Mixins](ch06.html#iddle1308)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 伪经典继承，[构造函数偷窃](ch05.html#iddle1307)，[混入](ch06.html#iddle1308)
- en: pseudoinheritance, mixins for, [Private Members for Constructors](ch06.html#iddle1309)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 伪继承，混入用于，[构造函数的私有成员](ch06.html#iddle1309)
- en: R
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: R
- en: read-only property, [Types of Properties](ch03.html#iddle1312)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 只读属性，[属性类型](ch03.html#iddle1312)
- en: receiver, copying enumerable properties between supplier and, [Private Members
    for Constructors](ch06.html#iddle1313)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 接收者，复制可枚举属性到供应者和接收者之间，[构造函数的私有成员](ch06.html#iddle1313)
- en: Rectangle constructor, [Constructor Inheritance](ch05.html#iddle1314)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形构造函数，[构造函数继承](ch05.html#iddle1314)
- en: reference types, [Primitive and Reference Types](ch01.html#iddle1315), [Primitive
    Methods](ch01.html#iddle1316)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 引用类型，[基本类型和引用类型](ch01.html#iddle1315)，[基本方法](ch01.html#iddle1316)
- en: identifying, [Property Access](ch01.html#iddle1317)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 识别，[属性访问](ch01.html#iddle1317)
- en: reference values, storing on prototype, [Using Prototypes with Constructors](ch04.html#iddle1318)
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 引用值，存储在原型上，[使用构造函数的原型](ch04.html#iddle1318)
- en: RegExp built-in type, [Instantiating Built-in Types](ch01.html#iddle1319)
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式内建类型，[实例化内建类型](ch01.html#iddle1319)
- en: RegExp constructor, [Function Literals](ch01.html#iddle1320)
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式构造函数，[函数字面量](ch01.html#iddle1320)
- en: regular expression literals, [Function Literals](ch01.html#iddle1321)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式字面量，[函数字面量](ch01.html#iddle1321)
- en: removing properties, [Dereferencing Objects](ch01.html#iddle1322), [Detecting
    Properties](ch03.html#iddle1323)
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 移除属性，[解除引用对象](ch01.html#iddle1322)，[检测属性](ch03.html#iddle1323)
- en: retrieving property attributes, [Defining Multiple Properties](ch03.html#iddle1324)
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 检索属性特性，[定义多个属性](ch03.html#iddle1324)
- en: revealing module pattern, [The Module Pattern](ch06.html#iddle1325)
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 揭示模块模式，[模块模式](ch06.html#iddle1325)
- en: S
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: S
- en: scope-safe constructors, [Mixins](ch06.html#iddle1326)
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 范围安全构造函数，[混入](ch06.html#iddle1326)
- en: seal() method, [Preventing Object Modification](ch03.html#iddle1329), [Changing
    Prototypes](ch04.html#iddle1330)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: seal() 方法, [防止对象修改](ch03.html#iddle1329), [改变原型](ch04.html#iddle1330)
- en: sealed objects, prototype modification and, [Changing Prototypes](ch04.html#iddle1327)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 密封对象, 原型修改与, [改变原型](ch04.html#iddle1327)
- en: sealing objects, [Preventing Object Modification](ch03.html#iddle1328)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 密封对象, [防止对象修改](ch03.html#iddle1328)
- en: setter functions, [Enumeration](ch03.html#iddle1333)
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 设置器函数, [枚举](ch03.html#iddle1333)
- en: sharing private data, [Private Members for Constructors](ch06.html#iddle1334)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 共享私有数据, [构造函数的私有成员](ch06.html#iddle1334)
- en: signatures, function with multiple, [Overloading](ch02.html#iddle1335)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 签名, 带有多个参数的函数, [重载](ch02.html#iddle1335)
- en: sort() method, [Functions as Values](ch02.html#iddle1336)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: sort() 方法, [函数作为值](ch02.html#iddle1336)
- en: square brackets ([ ])
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号 ([ ])
- en: for array literals, [Object and Array Literals](ch01.html#iddle1337)
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组字面量, [对象和数组字面量](ch01.html#iddle1337)
- en: for property access, [Function Literals](ch01.html#iddle1338)
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 属性访问, [函数字面量](ch01.html#iddle1338)
- en: Square constructor, [Constructor Inheritance](ch05.html#iddle1339)
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Square 构造函数, [构造函数继承](ch05.html#iddle1339)
- en: stealing constructors, [Constructor Inheritance](ch05.html#iddle1340)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 窃取构造函数, [构造函数继承](ch05.html#iddle1340)
- en: strict mode
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式
- en: for nonextensible objects, [Preventing Object Modification](ch03.html#iddle1341)
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不可扩展的对象, [防止对象修改](ch03.html#iddle1341)
- en: for sealed objects, [Sealing Objects](ch03.html#iddle1342)
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 对于密封对象, [密封对象](ch03.html#iddle1342)
- en: string literals, as property names, [Instantiating Built-in Types](ch01.html#iddle1343)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量, 作为属性名, [实例化内建类型](ch01.html#iddle1343)
- en: String primitive wrapper type, [Identifying Arrays](ch01.html#iddle1344)
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串原始包装类型, [识别数组](ch01.html#iddle1344)
- en: string type, [Primitive Types](ch01.html#iddle1348)
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串类型, [原始类型](ch01.html#iddle1348)
- en: strings
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: capitalize() method, [Changing Prototypes](ch04.html#iddle1345)
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: capitalize() 方法, [改变原型](ch04.html#iddle1345)
- en: conversion of values to, for comparison, [Functions as Values](ch02.html#iddle1346)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 将值转换为用于比较, [函数作为值](ch02.html#iddle1346)
- en: methods, [Primitive Methods](ch01.html#iddle1347)
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 方法, [原始方法](ch01.html#iddle1347)
- en: substring() method, [Primitive Methods](ch01.html#iddle1349)
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: substring() 方法, [原始方法](ch01.html#iddle1349)
- en: subtype constructors, [Object Inheritance](ch05.html#iddle1350), [Constructor
    Inheritance](ch05.html#iddle1351)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 子类型构造函数, [对象继承](ch05.html#iddle1350), [构造函数继承](ch05.html#iddle1351)
- en: sum() function, [Functions as Values](ch02.html#iddle1352)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: sum() 函数, [函数作为值](ch02.html#iddle1352)
- en: supertype
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 超类型
- en: constructors, [Object Inheritance](ch05.html#iddle1353), [Constructor Inheritance](ch05.html#iddle1354)
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数, [对象继承](ch05.html#iddle1353), [构造函数继承](ch05.html#iddle1354)
- en: methods, accessing, [Accessing Supertype Methods](ch05.html#iddle1355)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 方法, 访问, [访问超类型方法](ch05.html#iddle1355)
- en: supplier, copying enumerable properties between receiver and, [Private Members
    for Constructors](ch06.html#iddle1356)
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商, 在接收者与供应商之间复制可枚举属性, [构造函数的私有成员](ch06.html#iddle1356)
- en: T
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: T
- en: temporary objects, creating properties on, [Primitive Wrapper Types](ch01.html#iddle1357)
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 临时对象, 在其上创建属性, [原始包装类型](ch01.html#iddle1357)
- en: this object, [The this Object](ch02.html#iddle1358)
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: this 对象, [this 对象](ch02.html#iddle1358)
- en: changing value of, [The this Object](ch02.html#iddle1359)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 改变值, [this 对象](ch02.html#iddle1359)
- en: creating with new, [Constructors](ch04.html#iddle1361)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 new 创建, [构造函数](ch04.html#iddle1361)
- en: to create length and width properties, [Constructor Stealing](ch05.html#iddle1360)
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 创建长宽属性, [构造函数窃取](ch05.html#iddle1360)
- en: toFixed() method, [Primitive Methods](ch01.html#iddle1362)
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: toFixed() 方法, [原始方法](ch01.html#iddle1362)
- en: toLowerCase() method, [Primitive Methods](ch01.html#iddle1363)
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: toLowerCase() 方法, [原始方法](ch01.html#iddle1363)
- en: toString() method, [Primitive Methods](ch01.html#iddle1364), [Detecting Properties](ch03.html#iddle1365),
    [Prototype Chaining and Object.prototype](ch05.html#iddle1366), [valueOf()](ch05.html#iddle1367)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: toString() 方法, [原始方法](ch01.html#iddle1364), [检测属性](ch03.html#iddle1365), [原型链与
    Object.prototype](ch05.html#iddle1366), [valueOf()](ch05.html#iddle1367)
- en: triple equals operator (===), [Identifying Primitive Types](ch01.html#iddle1368)
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 三等号操作符 (===), [识别原始类型](ch01.html#iddle1368)
- en: truthy values, [Defining Properties](ch03.html#iddle1369)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 真值, [定义属性](ch03.html#iddle1369)
- en: typeof operator, [Primitive Types](ch01.html#iddle1370), [Property Access](ch01.html#iddle1371)
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: typeof 操作符, [原始类型](ch01.html#iddle1370), [属性访问](ch01.html#iddle1371)
- en: types, [Primitive and Reference Types](ch01.html#iddle1372)
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 类型, [原始类型和引用类型](ch01.html#iddle1372)
- en: (see also primitive types; reference types)
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: （另见原始类型；引用类型）
- en: checking for different, [Overloading](ch02.html#iddle1373)
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 检查不同, [重载](ch02.html#iddle1373)
- en: checking instance for, [Constructors](ch04.html#iddle1374)
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 检查实例，[构造函数](ch04.html#iddle1374)
- en: instantiating built-in, [Dereferencing Objects](ch01.html#iddle1375)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化内置，[解除引用对象](ch01.html#iddle1375)
- en: U
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: U
- en: undefined type, [Primitive Types](ch01.html#iddle1376)
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: undefined 类型， [原始类型](ch01.html#iddle1376)
- en: underscore (_), in property name prefix, [Types of Properties](ch03.html#iddle1377),
    [Private and Privileged Members](ch06.html#iddle1378)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线 (_) 在属性名前缀中，[属性类型](ch03.html#iddle1377), [私有和特权成员](ch06.html#iddle1378)
- en: V
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V
- en: valueOf() method, [Prototype Chaining and Object.prototype](ch05.html#iddle1380),
    [valueOf()](ch05.html#iddle1381)
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: valueOf() 方法, [原型链和 Object.prototype](ch05.html#iddle1380), [valueOf()](ch05.html#iddle1381)
- en: values
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: functions as, [Declarations vs. Expressions](ch02.html#iddle1382)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 函数作为，[声明与表达式](ch02.html#iddle1382)
- en: passing, between web page frames, [Identifying Reference Types](ch01.html#iddle1383)
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 传递，在网页框架之间，[识别引用类型](ch01.html#iddle1383)
- en: variable object, [Primitive and Reference Types](ch01.html#iddle1384)
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 变量对象，[原始类型和引用类型](ch01.html#iddle1384)
- en: variables, for primitive types, [Primitive Types](ch01.html#iddle1385)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 变量，对于原始类型， [原始类型](ch01.html#iddle1385)
- en: W
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: W
- en: web pages, passing values between frames, [Identifying Reference Types](ch01.html#iddle1386)
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 网页，传递值在框架之间，[识别引用类型](ch01.html#iddle1386)
- en: wrapper types, primitive, [Identifying Arrays](ch01.html#iddle1387)
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 包装类型，原始，[识别数组](ch01.html#iddle1387)
- en: write-only properties, [Types of Properties](ch03.html#iddle1389)
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 只写属性，[属性类型](ch03.html#iddle1389)
