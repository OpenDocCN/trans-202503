["```\nfrom shapely.geometry import Polygon, Point\nimport networkx as nx\nimport triangle as tr\n❶ gallery_poly = Polygon([\n    (0, 0), (0, 2), (0.55, 1.55), (1.4, 0.33),\n    (1, 0.33), (0.45, 1.22), (0.25, 1.29)\n    ])\ngallery_coords = gallery_poly.exterior.coords[:-1]\nG = nx.Graph()\n❷ G.add_node( 0, coords=gallery_coords[0])\n❸ pos = [list(gallery_coords[0])]\n❹ for i in range(1, len(gallery_coords)):\n    p = gallery_coords[i] \n    pos.append(p)\n  ❺ G.add_edge(i-1, i)\n  ❻ G.nodes[i][\"coords\"] = p\n    if i == len(gallery_coords)-1:\n      ❼ G.add_edge(i, 0)\n```", "```\ntri_dict = {\n    \"vertices\": gallery_poly.exterior.coords[:-1],\n    \"segments\": list(G.edges())\n}\ntriangulated = triangulate(tri_dict, \"pe\")\n```", "```\nG2 = G.copy()\nfor e in triangulated[\"edges\"]:\n    if list(e) not in list(G2.edges()):\n        G2.add_edge(e[0], e[1])\n```", "```\nfrom networkx.algorithms.coloring import greedy_color\ngallery_coloring = greedy_color(G2)\n```", "```\ntriangulated = tr.triangulate(tri_dict, \"pe**a0.1**\")\n```", "```\ndef assign_triangles(g, triangulated, group_id):\n  ❶ guard_nodes = [n for n in g.nodes() if g.nodes[n][\"group\"] == group_id]\n  ❷ triangles = {k:[] for k in guard_nodes}\n    for i in range(len(triangulated[\"triangles\"])):\n      ❸ t = triangulated[\"triangles\"][i]\n      ❹ t_poly = Polygon([g.nodes[p][\"coords\"] for p in t])\n\n        # If triangle touches a guard directly at any point:\n      ❺ if t[0] in guard_nodes:\n            triangles[t[0]].append(t_poly)\n        elif t[1] in guard_nodes:\n            triangles[t[1]].append(t_poly)\n        elif t[2] in guard_nodes:\n            triangles[t[2]].append(t_poly)\n        else:\n          ❻ dists = {\n                k: t_poly.distance(\n                     Point(g.nodes[k][\"coords\"])\n                   ) for k in guard_nodes}\n          ❼ close = min(dists, key=dists.get)\n          ❽ triangles[close].append(t_poly)\n  ❾ return triangles\n```", "```\nfor k in triangles.keys():\n    area = sum([(t.area * 300) for t in triangles[k]])\n    print(\"Position %d covers %.2fm2\" % (k, area))\n```", "```\nPosition 2 covers 60.41m2\nPosition 11 covers 98.68m2\nPosition 12 covers 82.34m2\n```", "```\next_3 = [(0.0, 0.0), (0.0, 3.0), (3.0, 3.0), (3.0, 0.0)]\nint_3 = [(1.0, 1.0), (1.0, 2.0), (2.0, 2.0), (2.0, 1.0)]\nverts = ext_3 + int_3\n❶ hole_p = Polygon(int_3).representative_point()\n❷ hp1 = [list(v)[0] for v in list(hole_p.xy)]\nsegs = [(0,1), (1,2), (2,3), (3,0), (4,5), (5,6), (6,7), (7,4)]\nsq_tri_dict = {\n    \"vertices\": verts,\n    \"segments\": segs,\n  ❸ \"holes\":[hp1]\n}\ntriangulated = tr.triangulate(sq_tri_dict, \"pe\")\n```", "```\nsq_tri_dict = {\n    `--snip--`\n    \"regions\":[\n        [1.5, 2.5, **0.** , 0\\. ],\n        [0.5, 1.5, 1\\. , 0\\. ],\n        [1.5, 0.5, 2\\. , 0\\. ],\n        [2.5, 1.5, 3\\. , 0\\. ]]\n}\n```", "```\ntriangulated = tr.triangulate(sq_tri_dict, \"pe**A**\")\n```", "```\nfrom filemanager import DataSaver\nsaver = DataSaver(triangulated, \"square\", 1, \"/myproject/\")\nsaver.set_region_areas([-1,0.1,-1,0.05])\nsaver.save_project()\n```", "```\nreload = tr.load(\"/myproject/\", \"square_1\")\nrefined = tr.triangulate(reload, \"ra\")\n```", "```\nsaver = DataSaver(refined, \"square\", 2)\nwsaver.save_project()\n```"]