- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: All-in-One Weather Sensor Station**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**一体化气象传感器站**'
- en: In this project, you’ll build a local weather station that detects the temperature,
    humidity, and barometric pressure with the Sense HAT. You’ll also create a graphical
    user interface to display temperature, humidity, and barometric pressure readings
    in real time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个本地气象站，利用Sense HAT检测温度、湿度和气压。你还将创建一个图形用户界面，实时显示温度、湿度和气压读数。
- en: '![image](../images/f0127-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0127-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberr y Pi (versions with 40 GPIOs)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi（带有40个GPIO接口的版本）
- en: Sense HAT
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT
- en: '**THE SENSE HAT AS A WEATHER STATION**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Sense HAT作为气象站**'
- en: The Sense HAT makes an excellent small and affordable weather station, as it
    comes with temperature, humidity, and barometric pressure sensors. Reading sensor
    values with the Sense HAT is very straightforward, so this is a good starting
    point to learn about sensor readings.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT是一个优秀的小型且价格实惠的气象站，因为它配备了温度、湿度和气压传感器。使用Sense HAT读取传感器数据非常简单，因此它是学习传感器读取的好起点。
- en: '**The Temperature Sensor**'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**温度传感器**'
- en: '**NOTE**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The temperature readings might be a few degrees off when compared to the real
    value. The Sense HAT fits over the Pi and the heat from the Raspberry Pi processor
    can alter the results slightly.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*与真实值相比，温度读数可能会偏差几度。Sense HAT安装在Pi上，Raspberry Pi处理器的热量可能会稍微影响结果。*'
- en: As the name suggests, the temperature sensor measures temperature. By default,
    the Sense HAT reads the temperature in degrees Celsius, so if you prefer the temperature
    in degrees Fahrenheit, you’ll need to convert the reading. To do so, multiply
    the degrees in Celsius by 9, divide by 5, and add 32, as shown in the following
    formula.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，温度传感器用于测量温度。默认情况下，Sense HAT以摄氏度读取温度，因此如果你需要以华氏度显示温度，需将读取值进行转换。转换公式为：将摄氏度数值乘以9，除以5，再加上32，具体公式如下所示。
- en: '![image](../images/f0128-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0128-01.jpg)'
- en: You can add this formula to your code so that it does the conversion for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此公式添加到代码中，这样程序就能为你自动转换。
- en: '**The Humidity Sensor**'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**湿度传感器**'
- en: 'There are two common ways of expressing humidity: absolute humidity and relative
    humidity. *Absolute humidity* is the mass of water vapor in a certain volume of
    air, regardless of temperature, and it is expressed as kilograms per cubic meter
    (kg/m³). The amount of water vapor that the air can hold changes with temperature.
    The higher the temperature, the more water vapor it can hold. *Relative humidity*
    is expressed as a percentage and is the current water vapor in the air in relation
    to the maximum possible amount at a given temperature.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 湿度有两种常见的表达方式：绝对湿度和相对湿度。*绝对湿度*是指在特定体积空气中的水蒸气质量，与温度无关，单位是千克每立方米（kg/m³）。空气能够容纳的水蒸气量随温度变化而变化，温度越高，空气能容纳的水蒸气越多。*相对湿度*则表示当前空气中的水蒸气量与在给定温度下最大可能容纳的水蒸气量的比例，通常以百分比表示。
- en: 'The Sense HAT records relative humidity because it’s more useful for weather
    forecasts: the greater the relative humidity percentage, the higher the probability
    of precipitation. As relative humidity changes with temperature, it’s always coupled
    with a temperature sensor.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT记录相对湿度，因为它对于天气预报更为有用：相对湿度百分比越大，降水的概率越高。由于相对湿度随着温度的变化而变化，因此它总是与温度传感器配合使用。
- en: '**The Barometric Pressure Sensor**'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**气压传感器**'
- en: The barometric pressure sensor reads atmospheric pressure, the “weight” of the
    air at a given point, measured in hPa (hectoPascal), which is equivalent to mbar
    (millibar). Why is it interesting to measure pressure? Because changes in atmospheric
    pressure can help you forecast the weather. Rising pressure tends to be a sign
    of good weather to come, and falling pressure a sign of bad weather, like rain
    or storms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 气压传感器读取大气压力，即在给定点的空气“重量”，单位是hPa（百帕），相当于mbar（毫巴）。为什么测量气压很有趣呢？因为大气压力的变化有助于预测天气。气压上升通常意味着好天气即将到来，而气压下降则意味着坏天气的预兆，比如降雨或风暴。
- en: Changes in pressure are really small. You need to follow your barometer readings
    meticulously to notice a trend.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 气压变化非常小。你需要仔细跟踪气压计的读数，才能注意到变化趋势。
- en: '**READING TEMPERATURE, HUMIDITY, AND PRESSURE**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**读取温度、湿度和气压**'
- en: Now let’s look at how to read from the sensors and print the readings to the
    Python shell.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何从传感器读取数据并将其输出到Python shell。
- en: Mount your Sense HAT on your Pi like you did in [Project 8](ch08.xhtml#ch08)
    and make sure it’s well connected. When it’s first connected, the Sense HAT should
    display a rainbow background that matches the rainbow you see on the screen when
    you boot your Pi (see [Figure 9-1](ch09.xhtml#ch09fig1)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将Sense HAT安装在你的树莓派上，就像在[项目8](ch08.xhtml#ch08)中一样，并确保它连接良好。当首次连接时，Sense HAT应显示一个彩虹背景，与你在启动树莓派时在屏幕上看到的彩虹匹配（见[图9-1](ch09.xhtml#ch09fig1)）。
- en: '![image](../images/f0129-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0129-01.jpg)'
- en: '**FIGURE 9-1:** Sense HAT rainbow background'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-1：** Sense HAT 彩虹背景'
- en: Inside your *Projects* folder create a new folder called *Sensors*. Then open
    **Python 3 (IDLE)** and go to **File** ▸ **New** to create a new script called
    *weather_data.py* and enter the code in [Listing 9-1](ch09.xhtml#ch09list1) (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    ).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的*Projects*文件夹中创建一个名为*Sensors*的新文件夹。然后打开**Python 3 (IDLE)**，点击**文件** ▸ **新建**来创建一个新的脚本，命名为*weather_data.py*，并输入[清单9-1](ch09.xhtml#ch09list1)中的代码（记住，你可以在*
    [https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载所有脚本）。
- en: '**LISTING 9-1:** Reading temperature, humidity, and pressure with the Sense
    HAT'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单9-1：** 使用Sense HAT读取温度、湿度和压力'
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First you import the `SenseHat` class from the sense_hat library ➊. Then, you
    create an object called `sense` to refer to the Sense HAT ➋.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你从sense_hat库导入`SenseHat`类➊。然后，你创建一个名为`sense`的对象来引用Sense HAT➋。
- en: 'Getting the sensor readings ➌ is simple thanks to the following, aptly named
    functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 获取传感器读数➌是很简单的，因为有以下几个恰如其分命名的函数：
- en: '`sense.temperature` gets the temperature reading.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.temperature` 获取温度读数。'
- en: '`sense.humidity` gets the humidity reading.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.humidity` 获取湿度读数。'
- en: '`sense.pressure` gets the pressure reading.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.pressure` 获取压力读数。'
- en: The readings are given to several decimal places, so you use the function `round()`
    to round the numbers and make the results more readable. The `round()` function
    ➍ accepts as arguments the number you want to round and the number of decimal
    places you want to set, in that order—here, it’s set to two decimal places. You
    also use the `str()` function that converts the argument it takes into a string.
    You need to convert the readings into a string so you can concatenate them with
    the text you’ll print to the shell ➎.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 读数精确到小数点后若干位，因此你可以使用`round()`函数来四舍五入数字，使结果更易读。`round()`函数➍接受两个参数：你想要四舍五入的数字以及你希望设置的小数位数，顺序为：在这里，它被设置为两位小数。你还可以使用`str()`函数，它将传入的参数转换为字符串。你需要将读数转换为字符串，以便将它们与要打印到终端的文本拼接起来➎。
- en: Now you’re almost a meteorologist! Next, you’ll build a user interface for your
    weather data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你几乎成了一个气象学家！接下来，你将为你的天气数据构建一个用户界面。
- en: '**BUILDING A USER INTERFACE FOR YOUR READINGS**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为你的读数构建用户界面**'
- en: 'Let’s take this project to another level and build a cool user interface to
    display your sensor readings. Your interface should feature:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个项目提升到另一个层次，构建一个酷炫的用户界面来显示你的传感器读数。你的界面应该包括：
- en: A window in your desktop that displays temperature, humidity, and pressure
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示温度、湿度和压力的桌面窗口
- en: The humidity displayed in a vertical progress bar from 0 to 100 percent
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度以垂直进度条形式显示，范围从0到100百分比
- en: The temperature and pressure displayed in numbers
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度和压力以数字形式显示
- en: Labels for each reading
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个读数的标签
- en: '[Figure 9-2](ch09.xhtml#ch09fig2) shows a draft layout for the user interface
    that should help you work out how to go about the code.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-2](ch09.xhtml#ch09fig2)显示了一个用户界面草图，应该能帮助你理解如何编写代码。'
- en: '![image](../images/f0131-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0131-01.jpg)'
- en: '**FIGURE 9-2:** Graphical user interface draft'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-2：** 图形用户界面草图'
- en: You’ll also be able to edit the code to choose font type, size, and color, and
    how labels and readings are positioned within the window. The following table
    gives you a list of all the titles and values and how we’ll display them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以编辑代码来选择字体类型、大小和颜色，以及标签和读数在窗口中的位置。下表列出了所有标题和数值，以及我们如何展示它们。
- en: '| **WIDGET** | **OPTIONS** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **小部件** | **选项** |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Window Title | Text: “Local Weather Station” |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 窗口标题 | 文本：“本地气象站” |'
- en: '| Humidity Title | Text: “Humidity”, Font: Helvetica, Size: 18, Vertical padding:
    3 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 湿度标题 | 文本：“湿度”，字体：Helvetica，大小：18，垂直填充：3 |'
- en: '| Humidity Value | Font: Courier, Size: 20, Color: Blue, Position: North |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 湿度值 | 字体：Courier，大小：20，颜色：蓝色，位置：北 |'
- en: '| Humidity Progress Bar | Orientation: Vertical, Size: 20, Color: Blue, Position:
    North, Length: 200, Maximum Value: 100 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 湿度进度条 | 方向：垂直，大小：20，颜色：蓝色，位置：北，长度：200，最大值：100 |'
- en: '| Temperature Title | Text: “Temperature”, Font: Helvetica, Size: 18, Position:
    South |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 温度标题 | 文本：“Temperature”，字体：Helvetica，大小：18，位置：南 |'
- en: '| Temperature Value | Font: Courier, Size: 20, Color: Red, Position: North
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 温度值 | 字体：Courier，大小：20，颜色：红色，位置：北 |'
- en: '| Pressure Title | Text: “Pressure”, Font: Helvetica, Size: 18, Position: South
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 压力标题 | 文本：“Pressure”，字体：Helvetica，大小：18，位置：南 |'
- en: '| Pressure Value | Font: Courier, Size: 20, Color: Green, Position: North |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 压力值 | 字体：Courier，大小：20，颜色：绿色，位置：北 |'
- en: '**WRITING THE SCRIPT**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 9-2](ch09.xhtml#ch09list2) to the Python Editor
    and save the script as *weather_station.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，然后选择**文件** ▸ **新建文件**，创建一个新脚本。将[Listing 9-2](ch09.xhtml#ch09list2)中的代码复制到Python编辑器中，并将脚本保存为*weather_station.py*，存放在*Sensors*文件夹内（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 9-2:** Displaying the Sense HAT readings in a graphical user interface'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-2：** 在图形用户界面中显示Sense HAT读数'
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As usual, you start the code by importing the necessary libraries ➊. You may
    wonder why we need to import ttk if we’ve already imported everything with `*`
    from the tkinter library in the previous line. In this case, when you import with
    the wildcard `*`, you’re importing only a subset of what’s stored in the library
    folder—there isn’t any particular reason for this, it’s just the way the author
    of the library decided to do it—so we need to import the ttk library that’s also
    needed for this user interface separately.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你通过导入必要的库开始编写代码➊。你可能会想知道，既然我们在上一行已经通过`*`导入了tkinter库的所有内容，为什么还需要单独导入ttk库。其实，当你用通配符`*`导入时，你只导入了库文件夹中存储的部分内容——这没有特别的原因，只是库的作者如此设计。所以我们需要单独导入ttk库，它对于这个用户界面是必需的。
- en: To gather weather data, you need to use the physical Sense HAT and the sense_hat
    library.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集天气数据，你需要使用物理的Sense HAT和sense_hat库。
- en: '**Creating the User Interface**'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建用户界面**'
- en: After importing all of the libraries, you implement the part of the code that
    creates the user interface. First, you create a window that’s 200×480 pixels and
    give it the title `Local Weather Station` ➋. Then, you create a label for the
    humidity title ➌ with the settings shown in the table on [page 131](ch09.xhtml#page_131).
    At ➍, you create a string variable called `humidity` that will hold the humidity
    value. This value is then displayed at ➎.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入所有库之后，你实现了创建用户界面的代码部分。首先，你创建一个200×480像素的窗口，并为其设置标题为`Local Weather Station`
    ➋。然后，你创建一个用于湿度标题的标签 ➌，其设置如[第131页](ch09.xhtml#page_131)表格所示。在 ➍，你创建了一个名为`humidity`的字符串变量，用来存储湿度值。这个值随后会在
    ➎ 显示出来。
- en: The lines of code at ➏ create a canvas to place the progress bar in—the canvas
    is like a reserved space for the progress bar. After that, the code initializes
    a variable called `humidity_bar` of type `double` ➐, which is the variable type
    accepted by the progress bar. Finally, the lines at ➑ create the humidity progress
    bar to place on the canvas.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的第 ➏ 行创建了一个画布，用来放置进度条——画布就像是为进度条预留的空间。之后，代码初始化了一个名为`humidity_bar`的变量，类型为`double`
    ➐，这是进度条所接受的变量类型。最后，第 ➑ 行的代码创建了湿度进度条并放置在画布上。
- en: The process for displaying titles and values for temperature and pressure follows
    the same steps as at ➌, ➍, and ➎.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 显示温度和压力的标题和值的过程与在 ➌、➍ 和 ➎ 中所述的步骤相同。
- en: '**Automatically Updating the Readings**'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**自动更新读数**'
- en: At ➒, you define the `update_readings()` function, which updates the displayed
    values every three seconds to keep your weather readings up to date.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➒ 处，你定义了`update_readings()`函数，它每三秒更新一次显示的值，以保持天气数据的实时性。
- en: 'The following line updates the `temperature` variable:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码更新了`temperature`变量：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break this line into its component parts:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这一行分解成其组成部分：
- en: '`sense.temperature` retrieves the temperature reading from the Sense HAT.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.temperature`从Sense HAT获取温度读数。'
- en: '`round(sense.temperature,2)` rounds the temperature readings to two decimal
    places.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round(sense.temperature,2)`将温度读数四舍五入到小数点后两位。'
- en: '`str(round(sense.temperature,2)` converts the rounded reading to a string.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str(round(sense.temperature,2)` 将四舍五入的读数转换为字符串。'
- en: '`(str(round(sense.temperature,2)) + ''*C'')` concatenates the degree symbol
    to the string.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(str(round(sense.temperature,2)) + ''*C'')` 将度数符号附加到字符串中。'
- en: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` updates the `temperature`
    variable with the latest reading.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` 更新 `temperature`
    变量，使用最新的读数。'
- en: The script uses a similar procedure for updating the `pressure` and `humidity`
    variables.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使用类似的过程来更新 `pressure` 和 `humidity` 变量。
- en: The `window.update_idletasks()` function keeps the window up to date while monitoring.
    Finally, `window.after(3000, update_readings)` adds `update_readings` as an event
    to the `mainloop()`, and tells the Pi to call this function every 3,000 milliseconds
    (3 seconds).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.update_idletasks()` 函数在监视时保持窗口的更新。最后，`window.after(3000, update_readings)`
    将 `update_readings` 作为事件添加到 `mainloop()` 中，并告诉 Pi 每 3,000 毫秒（3 秒）调用一次该函数。'
- en: At ➓, you call the `update_readings()` function and the `window.mainloop()`
    function that keeps the window running.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在➓处，你调用了 `update_readings()` 函数和 `window.mainloop()` 函数，这个函数保持窗口运行。
- en: 'Finally, you can display the temperature in Fahrenheit by commenting and uncommenting
    these two lines:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过注释和取消注释这两行代码来以华氏度显示温度：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Running the Script**'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. You should
    see your weather data displayed in the user interface as shown at the beginning
    of the project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按 **F5** 或前往 **Run** ▸ **Run Module** 运行脚本。你应该会看到如项目开始时所示的用户界面中显示的天气数据。
- en: Congratulations! You’ve made your own weather station. You are officially a
    budding meteorologist.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经制作了自己的天气站。你正式成为一名新兴气象学家。
- en: '**TAKING IT FURTHER**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更进一步**'
- en: 'Here are some ideas for customizing this project:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些定制此项目的创意：
- en: Add the Fahrenheit conversion to the code and display the temperature as °F.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中添加华氏度转换，并以 °F 显示温度。
- en: Change the graphical user interface—layout, font color, size, and type—to suit
    your tastes.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改图形用户界面——布局、字体颜色、大小和类型——以适应你的个人喜好。
- en: Use the LED matrix display on the Sense HAT to display information about the
    weather. For example, you can display text, relative bar graphs, or green and
    red arrows indicating temperature, humidity, or pressure rising or falling.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sense HAT 上的 LED 矩阵显示屏来显示天气信息。例如，你可以显示文本、相对条形图，或使用绿色和红色箭头表示温度、湿度或气压的升降。
- en: In the rest of the projects within this part, you’ll learn how to send an email
    with Python and how to save sensor readings. Use these skills to send your weather
    data to your email or build a weather station data logger. Make sure you don’t
    miss the next projects!
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这一部分的其余项目中，你将学习如何使用 Python 发送电子邮件以及如何保存传感器读数。利用这些技能，你可以将天气数据发送到你的电子邮件，或构建一个天气站数据记录器。确保不要错过下一个项目！
