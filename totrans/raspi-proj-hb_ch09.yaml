- en: '**9'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All-in-One Weather Sensor Station**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll build a local weather station that detects the temperature,
    humidity, and barometric pressure with the Sense HAT. You’ll also create a graphical
    user interface to display temperature, humidity, and barometric pressure readings
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0127-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberr y Pi (versions with 40 GPIOs)
  prefs: []
  type: TYPE_NORMAL
- en: Sense HAT
  prefs: []
  type: TYPE_NORMAL
- en: '**THE SENSE HAT AS A WEATHER STATION**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Sense HAT makes an excellent small and affordable weather station, as it
    comes with temperature, humidity, and barometric pressure sensors. Reading sensor
    values with the Sense HAT is very straightforward, so this is a good starting
    point to learn about sensor readings.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Temperature Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The temperature readings might be a few degrees off when compared to the real
    value. The Sense HAT fits over the Pi and the heat from the Raspberry Pi processor
    can alter the results slightly.*'
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, the temperature sensor measures temperature. By default,
    the Sense HAT reads the temperature in degrees Celsius, so if you prefer the temperature
    in degrees Fahrenheit, you’ll need to convert the reading. To do so, multiply
    the degrees in Celsius by 9, divide by 5, and add 32, as shown in the following
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0128-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can add this formula to your code so that it does the conversion for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Humidity Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two common ways of expressing humidity: absolute humidity and relative
    humidity. *Absolute humidity* is the mass of water vapor in a certain volume of
    air, regardless of temperature, and it is expressed as kilograms per cubic meter
    (kg/m³). The amount of water vapor that the air can hold changes with temperature.
    The higher the temperature, the more water vapor it can hold. *Relative humidity*
    is expressed as a percentage and is the current water vapor in the air in relation
    to the maximum possible amount at a given temperature.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sense HAT records relative humidity because it’s more useful for weather
    forecasts: the greater the relative humidity percentage, the higher the probability
    of precipitation. As relative humidity changes with temperature, it’s always coupled
    with a temperature sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Barometric Pressure Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The barometric pressure sensor reads atmospheric pressure, the “weight” of the
    air at a given point, measured in hPa (hectoPascal), which is equivalent to mbar
    (millibar). Why is it interesting to measure pressure? Because changes in atmospheric
    pressure can help you forecast the weather. Rising pressure tends to be a sign
    of good weather to come, and falling pressure a sign of bad weather, like rain
    or storms.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in pressure are really small. You need to follow your barometer readings
    meticulously to notice a trend.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEMPERATURE, HUMIDITY, AND PRESSURE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s look at how to read from the sensors and print the readings to the
    Python shell.
  prefs: []
  type: TYPE_NORMAL
- en: Mount your Sense HAT on your Pi like you did in [Project 8](ch08.xhtml#ch08)
    and make sure it’s well connected. When it’s first connected, the Sense HAT should
    display a rainbow background that matches the rainbow you see on the screen when
    you boot your Pi (see [Figure 9-1](ch09.xhtml#ch09fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0129-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 9-1:** Sense HAT rainbow background'
  prefs: []
  type: TYPE_NORMAL
- en: Inside your *Projects* folder create a new folder called *Sensors*. Then open
    **Python 3 (IDLE)** and go to **File** ▸ **New** to create a new script called
    *weather_data.py* and enter the code in [Listing 9-1](ch09.xhtml#ch09list1) (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 9-1:** Reading temperature, humidity, and pressure with the Sense
    HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First you import the `SenseHat` class from the sense_hat library ➊. Then, you
    create an object called `sense` to refer to the Sense HAT ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the sensor readings ➌ is simple thanks to the following, aptly named
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sense.temperature` gets the temperature reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sense.humidity` gets the humidity reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sense.pressure` gets the pressure reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The readings are given to several decimal places, so you use the function `round()`
    to round the numbers and make the results more readable. The `round()` function
    ➍ accepts as arguments the number you want to round and the number of decimal
    places you want to set, in that order—here, it’s set to two decimal places. You
    also use the `str()` function that converts the argument it takes into a string.
    You need to convert the readings into a string so you can concatenate them with
    the text you’ll print to the shell ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re almost a meteorologist! Next, you’ll build a user interface for your
    weather data.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING A USER INTERFACE FOR YOUR READINGS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s take this project to another level and build a cool user interface to
    display your sensor readings. Your interface should feature:'
  prefs: []
  type: TYPE_NORMAL
- en: A window in your desktop that displays temperature, humidity, and pressure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The humidity displayed in a vertical progress bar from 0 to 100 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The temperature and pressure displayed in numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels for each reading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 9-2](ch09.xhtml#ch09fig2) shows a draft layout for the user interface
    that should help you work out how to go about the code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0131-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 9-2:** Graphical user interface draft'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also be able to edit the code to choose font type, size, and color, and
    how labels and readings are positioned within the window. The following table
    gives you a list of all the titles and values and how we’ll display them.
  prefs: []
  type: TYPE_NORMAL
- en: '| **WIDGET** | **OPTIONS** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Window Title | Text: “Local Weather Station” |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Title | Text: “Humidity”, Font: Helvetica, Size: 18, Vertical padding:
    3 |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Value | Font: Courier, Size: 20, Color: Blue, Position: North |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Progress Bar | Orientation: Vertical, Size: 20, Color: Blue, Position:
    North, Length: 200, Maximum Value: 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Temperature Title | Text: “Temperature”, Font: Helvetica, Size: 18, Position:
    South |'
  prefs: []
  type: TYPE_TB
- en: '| Temperature Value | Font: Courier, Size: 20, Color: Red, Position: North
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pressure Title | Text: “Pressure”, Font: Helvetica, Size: 18, Position: South
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pressure Value | Font: Courier, Size: 20, Color: Green, Position: North |'
  prefs: []
  type: TYPE_TB
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 9-2](ch09.xhtml#ch09list2) to the Python Editor
    and save the script as *weather_station.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 9-2:** Displaying the Sense HAT readings in a graphical user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As usual, you start the code by importing the necessary libraries ➊. You may
    wonder why we need to import ttk if we’ve already imported everything with `*`
    from the tkinter library in the previous line. In this case, when you import with
    the wildcard `*`, you’re importing only a subset of what’s stored in the library
    folder—there isn’t any particular reason for this, it’s just the way the author
    of the library decided to do it—so we need to import the ttk library that’s also
    needed for this user interface separately.
  prefs: []
  type: TYPE_NORMAL
- en: To gather weather data, you need to use the physical Sense HAT and the sense_hat
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the User Interface**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After importing all of the libraries, you implement the part of the code that
    creates the user interface. First, you create a window that’s 200×480 pixels and
    give it the title `Local Weather Station` ➋. Then, you create a label for the
    humidity title ➌ with the settings shown in the table on [page 131](ch09.xhtml#page_131).
    At ➍, you create a string variable called `humidity` that will hold the humidity
    value. This value is then displayed at ➎.
  prefs: []
  type: TYPE_NORMAL
- en: The lines of code at ➏ create a canvas to place the progress bar in—the canvas
    is like a reserved space for the progress bar. After that, the code initializes
    a variable called `humidity_bar` of type `double` ➐, which is the variable type
    accepted by the progress bar. Finally, the lines at ➑ create the humidity progress
    bar to place on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The process for displaying titles and values for temperature and pressure follows
    the same steps as at ➌, ➍, and ➎.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatically Updating the Readings**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At ➒, you define the `update_readings()` function, which updates the displayed
    values every three seconds to keep your weather readings up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line updates the `temperature` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this line into its component parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sense.temperature` retrieves the temperature reading from the Sense HAT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`round(sense.temperature,2)` rounds the temperature readings to two decimal
    places.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str(round(sense.temperature,2)` converts the rounded reading to a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(str(round(sense.temperature,2)) + ''*C'')` concatenates the degree symbol
    to the string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` updates the `temperature`
    variable with the latest reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script uses a similar procedure for updating the `pressure` and `humidity`
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: The `window.update_idletasks()` function keeps the window up to date while monitoring.
    Finally, `window.after(3000, update_readings)` adds `update_readings` as an event
    to the `mainloop()`, and tells the Pi to call this function every 3,000 milliseconds
    (3 seconds).
  prefs: []
  type: TYPE_NORMAL
- en: At ➓, you call the `update_readings()` function and the `window.mainloop()`
    function that keeps the window running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can display the temperature in Fahrenheit by commenting and uncommenting
    these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. You should
    see your weather data displayed in the user interface as shown at the beginning
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve made your own weather station. You are officially a
    budding meteorologist.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some ideas for customizing this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the Fahrenheit conversion to the code and display the temperature as °F.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the graphical user interface—layout, font color, size, and type—to suit
    your tastes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the LED matrix display on the Sense HAT to display information about the
    weather. For example, you can display text, relative bar graphs, or green and
    red arrows indicating temperature, humidity, or pressure rising or falling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the rest of the projects within this part, you’ll learn how to send an email
    with Python and how to save sensor readings. Use these skills to send your weather
    data to your email or build a weather station data logger. Make sure you don’t
    miss the next projects!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
