- en: '**10**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10**'
- en: '**COLOR AND OPACITY**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**颜色与不透明度**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/common-01.jpg)'
- en: 'Color in CSS2 was based around the *Red*, *Green*, *Blue (RGB)* model; whether
    you used hexadecimal or `rgb()` function values, you had to combine those three
    colors to add color to your pages. Of course, designers speak in terms of shades
    and tints: When a designer says to use a “50 percent tint” of a certain color,
    developers have had to use the RGB model to match that color, which has often
    involved some chicanery with a graphics package to find the exact tone needed.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS2中，颜色基于*红色*、*绿色*、*蓝色（RGB）*模型；无论你使用的是十六进制值还是`rgb()`函数值，都需要将这三种颜色混合在一起为页面添加颜色。当然，设计师通常使用色调和色泽的术语：当设计师说要使用某种颜色的“50%色泽”时，开发人员必须使用RGB模型来匹配该颜色，这通常涉及到使用图形软件来精确找到所需的色调。
- en: The CSS Color Module (*[http://www.w3.org/TR/css3-color/](http://www.w3.org/TR/css3-color/)*)
    has a solution to that problem—and more besides. For starters, it introduces the
    concepts of *opacity* through the `opacity` property and the *Alpha* color channel.
    In addition, the CSS Color Module adds an entirely new color model, which is more
    intuitive and easier to tweak to find the perfect tone.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS色彩模块 (*[http://www.w3.org/TR/css3-color/](http://www.w3.org/TR/css3-color/))*
    提供了解决这一问题的方法——还有更多的解决方案。首先，它通过`opacity`属性和*Alpha*颜色通道引入了*不透明度*的概念。此外，CSS色彩模块还添加了一个全新的颜色模型，这个模型更加直观，也更容易调整以找到完美的色调。
- en: The Color Module is a W3C Recommendation and is well implemented in IE9 and
    above and every other major browser, so with perhaps a bit of careful coding to
    provide a fallback for older versions of IE, you can begin to use its properties
    and values straightaway.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 色彩模块是W3C的推荐标准，并在IE9及以上版本以及其他主流浏览器中得到了很好的实现，因此，通过一些小心的编码为旧版IE提供备用方案，你可以立即开始使用其属性和值。
- en: '**The opacity Property**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**不透明度属性**'
- en: Opacity is, strictly speaking, the measure of an object’s resistance to light—the
    more opaque something is, the less light it lets through. An object with no opacity
    is fully transparent.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，不透明度是衡量物体对光的阻力——物体越不透明，它透过的光就越少。没有不透明度的物体是完全透明的。
- en: 'In CSS, opacity is measured using the `opacity` property. In essence, with
    `opacity`, you are setting how much of the background can be seen through the
    specified element. The `opacity` property has the following syntax:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，不透明度是通过`opacity`属性来测量的。实际上，使用`opacity`时，你设置的是指定元素中可以透过背景看到多少内容。`opacity`属性的语法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `*number*` value is a decimal fraction—that is, a number between 0.0 and
    1.0—where 0.0 is fully transparent, 1.0 is fully opaque, and any value between
    those two is a blend of opacity and transparency. For example, to set an element
    to be 50 percent opaque (or 50 percent transparent, depending on whether your
    glass is half empty or half full), you use the following rule:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`*number*`值是一个十进制小数——即一个介于0.0和1.0之间的数字，0.0表示完全透明，1.0表示完全不透明，介于这两者之间的任何值则表示不透明度和透明度的混合。例如，要将一个元素设置为50%不透明（或者说50%透明，取决于你的玻璃是半空还是半满），你可以使用以下规则：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To further demonstrate, I’ll show a set of elements—a parent `div`, with a
    child `div`, which in turn has a child `p`—repeated three times:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步演示，我将展示一组元素——一个父`div`，里面有一个子`div`，而该子`div`里又有一个子`p`——重复三次：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I’ll apply the same rules to each set of elements, except for a change to the
    `opacity` value. Here are the relevant rules for this example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我将对每组元素应用相同的规则，唯一的变化是`opacity`值的不同。以下是本示例的相关规则：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see the output in [Figure 10-1](ch10.html#ch10fig1). The `.child` element
    in the first (left) example has no explicitly set value for `opacity`, so it defaults
    to 1.0, or fully opaque—its background is white. The next (middle) `.child` has
    a value of `0.66`, so its opacity is reduced by a third, causing the white background
    to appear as a light gray (a blend of the black background color of the parent
    and the white background color of the element itself, which shows through). Finally,
    the last (right) `.child` has an `opacity` value of `0.33`, so it can be considered
    two-thirds transparent, making the box a darker gray color.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图10-1](ch10.html#ch10fig1)中查看输出。第一个（左侧）`.child`元素没有显式设置`opacity`值，因此默认值为1.0，即完全不透明——它的背景是白色。接下来（中间）的`.child`设置了`0.66`，因此其不透明度减少了三分之一，导致白色背景看起来像浅灰色（这是父元素的黑色背景色和元素本身的白色背景色的混合，透过了元素的透明部分）。最后一个（右侧）的`.child`设置了`opacity`值为`0.33`，因此可以认为它是三分之二透明的，使得盒子的颜色变得更暗。
- en: '![Image](graphics/f10-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f10-01.jpg)'
- en: '*Figure 10-1: The effect of differing* `*opacity*` *values on three identical
    elements*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, here’s an extremely important point to remember about this property: Opacity
    affects not only the element it’s applied to but also all of that element’s children.
    If I set an `opacity` value of 0.5 on an element, its children will never be more
    opaque than that. This setting can’t be overruled by any other property—or rather,
    you can never make an element more opaque than its parent, but you *can* make
    it less opaque.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: This may make the `opacity` property seem somewhat limiting, as you can’t apply
    it to elements with children without also applying it to their children. CSS3
    has a new method to get around this limitation, however; it’s called the Alpha
    channel, and I explain it in the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**New and Extended Color Values**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSS2.1 allowed three methods for specifying color values: keywords (`black`),
    hexadecimal notation (`#000000`), and RGB (`0`,`0`,`0`). In CSS3, the range is
    expanded by a completely new method of specifying colors (see “[Hue, Saturation,
    Lightness](ch10.html#ch10leve1sec119)” on [page 116](ch10.html#page_116)), as
    well as the introduction of opacity through the Alpha channel.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '***The Alpha Channel***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *Alpha channel* (*Alpha* for short) is the measure of the opacity of a color—as
    opposed to the `opacity` property, which is the measure of the opacity of an element.
    So, although color values using Alpha can be inherited by child elements like
    any other color value, the overall opacity of the element is not affected.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS3 introduces Alpha as a value in the *RGBA* color model. RGBA stands for
    *Red*, *Green*, *Blue*, *Alpha*, and is applied with the `rgba()` function. The
    syntax is the same as for the `rgb()` function value used in CSS2, but with the
    Alpha value specified by an extra comma-separated argument at the end:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The value of the `*alpha*` argument is the same as the value provided for opacity:
    a decimal fraction from 0.0 to 1.0, which is once again a measure between full
    transparency (0.0) and full opacity (1.0). If you want an element to have a foreground
    color of black at 50 percent opacity, you use the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As mentioned, `rgba()` differs from the `opacity` property in two ways: First,
    `rgba()` is a color value, so you couldn’t, for example, use it to change the
    opacity of an image (or an element with a background image). Second, although
    the value of the `rgba()` function can be inherited, child elements can overrule
    with an `rgba()` value of their own.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'To more precisely illustrate the difference between the two, I’ll create two
    identical code blocks using the following markup:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I’ll apply the following CSS rules to this markup: both elements will get the
    same rules except that I’ll set the `opacity` of one and give an `rgba()` value
    to the `background-color` of another, both with the same decimal fraction value
    of `0.5`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The results are shown in [Figure 10-2](ch10.html#ch10fig2), and the difference
    is pretty clear. Both boxes have the same level of transparency, but in the first,
    the `opacity` value has been inherited by its child `p` element, also making the
    text semitransparent. In the second box, the `rgba()` value is applied strictly
    to the `background-color` of the `.text` element, so the `p` element retains its
    fully opaque black `color`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在[图 10-2](ch10.html#ch10fig2)中，差异非常明显。两个框的透明度相同，但在第一个框中，`opacity` 值已经被子元素
    `p` 继承，这也使得文本变得半透明。在第二个框中，`rgba()` 值严格应用于 `.text` 元素的 `background-color`，因此 `p`
    元素保持完全不透明的黑色 `color`。
- en: '![Image](graphics/f10-02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f10-02.jpg)'
- en: '*Figure 10-2: Comparing opacity (left) and RGBA (right)*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：比较透明度（左）和 RGBA（右）*'
- en: 'Having established that `rgba()` is not the same as `opacity`, let’s see how
    it works. Being a color value, it can obviously be used for backgrounds, borders,
    shadows, and so on. The following code shows some examples of `rgba` applied to
    different properties:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确定 `rgba()` 不等于 `opacity` 后，让我们来看看它是如何工作的。作为一种颜色值，它显然可以用于背景、边框、阴影等。以下代码展示了 `rgba`
    应用于不同属性的示例：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 10-3](ch10.html#ch10fig3) shows these properties in action. Moving
    clockwise from top left, in the first box, `rgba` lowers the opacity of `box-shadow`;
    setting the Alpha value to `0.7` ➊ allows some of the background to show through,
    making the shadow more “realistic.” The next example shows a 50 percent opaque
    black `border` ➋ (which I used in the example shown in [Figure 8-6](ch08.html#ch08fig6)
    on [page 93](ch08.html#page_93)). In the next example, the Alpha value of the
    `color` property has been set to `0.6` ➌, which makes the text appear semi-opaque.
    And finally the last example shows another shadow effect, this time on the `text-shadow`
    property. The Alpha value is set at `0.6` ➍, which, once again, makes for a more
    realistic shadow.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-3](ch10.html#ch10fig3)展示了这些属性的实际效果。从左上角顺时针移动，在第一个框中，`rgba` 降低了 `box-shadow`
    的不透明度；将 Alpha 值设置为 `0.7` ➊ 使得部分背景透过阴影显示出来，使阴影看起来更加“真实”。下一个示例展示了一个 50% 不透明的黑色 `border`
    ➋（这是我在[图 8-6](ch08.html#ch08fig6)中使用的示例，见[第 93 页](ch08.html#page_93)）。接下来的示例中，`color`
    属性的 Alpha 值被设置为 `0.6` ➌，这使得文本看起来半透明。最后一个示例展示了另一个阴影效果，这次应用于 `text-shadow` 属性。Alpha
    值设置为 `0.6` ➍，同样使得阴影更加真实。'
- en: '![Image](graphics/f10-03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f10-03.jpg)'
- en: '*Figure 10-3: RGBA applied to different properties*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：RGBA 应用于不同属性*'
- en: '**RGBA and Graceful Degradation**'
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**RGBA 和优雅降级**'
- en: 'Older browsers that don’t support RGBA values (notably IE8) will ignore any
    rules that use them and default to a previously specified or inherited value.
    To compensate, you should specify the color twice—first without and then with
    an Alpha value—using the cascade to ensure the right color is implemented:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持 RGBA 值的旧版浏览器（尤其是 IE8）会忽略使用这些值的规则，并回退到之前指定或继承的值。为了解决这个问题，你应该将颜色指定两次——首先指定没有
    Alpha 值的颜色，然后指定带有 Alpha 值的颜色——利用层叠规则确保正确的颜色被实现：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, browsers that don’t support RGBA values ignore the second `color`
    property and apply the first `color` property. Of course, this result means that
    a fully opaque color will be used instead of a semiopaque one, so check your design
    thoroughly to make sure it isn’t negatively affected.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，不支持 RGBA 值的浏览器会忽略第二个 `color` 属性，并应用第一个 `color` 属性。当然，这意味着会使用一个完全不透明的颜色，而不是半透明的颜色，因此要彻底检查你的设计，确保它不会受到负面影响。
- en: The same goes for all new color values introduced in the rest of this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其余章节中引入的所有新颜色值也适用相同的原则。
- en: '***Hue, Saturation, Lightness***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***色相、饱和度、亮度***'
- en: 'I mentioned earlier in the chapter that CSS3 brings a new notations system
    for color, and that system is known as HSL. Summing up exactly what HSL is without
    providing a course in color theory is hard, but I’ll do my best: *HSL*—which stands
    for *Hue*, *Saturation*, *Lightness* (sometimes called *Luminance*)—is a cylindrical-coordinate
    representation of color space. Still not clear? Take a look at [Figure 10-4](ch10.html#ch10fig4).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本章早些时候提到过，CSS3 引入了一种新的颜色表示法系统，这种系统被称为 HSL。准确总结 HSL 是什么而不提供一门颜色理论课程是很困难的，但我会尽力解释：*HSL*——代表*色相*（Hue）、*饱和度*（Saturation）、*亮度*（Lightness，
    有时称为 *明度*）——是一种颜色空间的圆柱坐标表示法。如果还是不清楚的话，可以看看[图 10-4](ch10.html#ch10fig4)。
- en: '![Image](graphics/f10-04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f10-04.jpg)'
- en: '*Figure 10-4: The HSL color notation method ^([1](footnote.html#footnote5))*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：HSL 颜色表示法 ^([1](footnote.html#footnote5))*'
- en: All the possible colors are arranged in a cylinder with a central axis. The
    angle around the axis is the *hue*; the distance from the axis is the *saturation*;
    and the distance along the axis is the *lightness*. The combination of those three
    values creates a unique color.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可能的颜色都被排列在一个有中心轴的圆柱体中。轴周围的角度表示*色相*；从轴的距离表示*饱和度*；沿轴的距离表示*亮度*。这三者的组合创造了独特的颜色。
- en: '*Hue* represents the major colors, starting and ending with red (0 or 360)
    and including all the main colors between. Think of the colors of the visible
    spectrum (or the colors of the rainbow) you learned about in school—red, orange,
    yellow, green, blue, indigo, and violet—arranged around the circumference of a
    circle; the value of hue is a degree around that circumference that points to
    a specific color.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*色相*代表主要颜色，从红色（0或360）开始和结束，并包括之间的所有主要颜色。可以将你在学校学习过的可见光谱的颜色（或彩虹的颜色）想象成排列在圆周上——红色、橙色、黄色、绿色、蓝色、靛蓝色和紫色——色相值就是指向特定颜色的圆周上的角度。'
- en: '*Saturation* is the strength or intensity of that color: 0 percent is zero
    intensity, which makes the color a shade of gray, and 100 percent is full strength,
    the most intense version of that color.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*饱和度*是颜色的强度或浓度：0%代表没有强度，使颜色呈灰色，而100%是完全强度，即该颜色最强烈的版本。'
- en: '*Lightness* is the brightness or darkness of the color: 50 percent is the true
    color, 0 percent is black, and 100 percent is white.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*亮度*是颜色的明暗程度：50%是原色，0%是黑色，100%是白色。'
- en: 'If you’ve never encountered HSL before and my explanation has still left you
    baffled, don’t worry—for our purposes, you just need to understand that HSL is
    applied with the `hsl()` color value function. It takes three arguments, with
    a similar syntax to `rgb()`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有接触过HSL，而我的解释仍然让你感到困惑，不要担心——对于我们的用途，你只需要理解HSL是通过`hsl()`颜色值函数应用的。它接受三个参数，语法类似于`rgb()`：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `*hue*` value is a number between 0 and 360 (the degrees around the hue
    wheel), and `*saturation*` and `*lightness*` accept values from 0 percent to 100
    percent. Some simple color examples with their hexadecimal and RGB equivalents
    are shown in [Table 10-1](ch10.html#ch10table1).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`*色相*`值是一个介于0和360之间的数字（代表色轮上的角度），而`*饱和度*`和`*亮度*`则接受从0%到100%之间的值。以下是一些简单的颜色示例及其十六进制和RGB等效值，见[表
    10-1](ch10.html#ch10table1)。'
- en: '**Table 10-1**: Common Color Equivalents for Four Color Values'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 10-1**：四种颜色值的常见等效色'
- en: '| **HSL** | **RGB** | **Hexadecimal** | **Keyword** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **HSL** | **RGB** | **十六进制** | **关键词** |'
- en: '| 0,0%,0% | 0,0,0 | #000000 | `black` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 0,0%,0% | 0,0,0 | #000000 | `黑色` |'
- en: '| 360,0%,100% | 255,255,255 | #FFFFFF | `white` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 360,0%,100% | 255,255,255 | #FFFFFF | `白色` |'
- en: '| 0,100%,50% | 255,0,0 | #FF0000 | `red` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 0,100%,50% | 255,0,0 | #FF0000 | `红色` |'
- en: '| 120,100%,25% | 0,128,0 | #008000 | `green` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 120,100%,25% | 0,128,0 | #008000 | `绿色` |'
- en: '| 240,100%,50% | 0,0,255 | #0000FF | `blue` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 240,100%,50% | 0,0,255 | #0000FF | `蓝色` |'
- en: '**NOTE**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Even if you are using a 0 (zero) value for saturation and lightness, you must
    still specify the value as a percentage.*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*即使你使用的是饱和度和亮度值为0（零）的情况，你仍然需要将该值指定为百分比。*'
- en: '[Table 10-1](ch10.html#ch10table1) doesn’t actually tell the whole story—many
    different combinations of values allow you to create pure white, for example.
    Really, the best way to learn more about HSL is to get a color picker that supports
    it and play around for a while. Photoshop and most other graphics packages have
    an HSL color picker, and you should also be able to find color conversion tools
    online. Be careful, however, not to confuse HSL with *Hue, Saturation, Value (HSV)*—although
    they use an identical syntax, the color values are mapped differently so you will
    not get the same results.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 10-1](ch10.html#ch10table1)实际上并没有讲述完整的故事——例如，许多不同的值组合可以让你创造纯白色。实际上，了解更多关于HSL的最佳方式是使用一个支持HSL的颜色选择器，并玩一玩。Photoshop和大多数其他图形软件都有HSL颜色选择器，你也应该能在线找到颜色转换工具。然而，注意不要将HSL与*色相、饱和度、明度（HSV）*混淆——虽然它们使用相同的语法，但颜色值的映射方式不同，因此你不会得到相同的结果。'
- en: The advantage of HSL over RGB (or hexadecimal) is that it allows you to try
    different variants of a color more quickly, such as making a certain color lighter/darker
    or more/less intense. The flexibility of HSL makes it more useful for web designers.
    If you’re a developer coding from other people’s designs, however, you may want
    to continue using RGB. HSL is simply a new alternative to consider.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: HSL 相比 RGB（或十六进制）的优势在于，它允许你更快速地尝试不同的颜色变体，例如让某种颜色变浅/变暗或更/更少强烈。HSL 的灵活性使它对网页设计师更为有用。然而，如果你是从他人的设计中进行开发，你可能仍然希望继续使用
    RGB。HSL 仅仅是一个可以考虑的新选项。
- en: '***HSLA***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***HSLA***'
- en: 'If you’ve decided that HSL is the color method for you, then you’ll also be
    able to utilize the Alpha channel for transparency with the `hsla()` color value
    function. Like its counterpart `rgba()`, `hsla()` simply extends the color scheme
    with an extra argument in the function:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经决定 HSL 是适合你的颜色方法，那么你也可以使用 `hsla()` 颜色值函数来利用 Alpha 通道实现透明度。和它的对应函数 `rgba()`
    一样，`hsla()` 只是通过在函数中添加一个额外的参数来扩展颜色方案：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, for example, if you want an element with a `color` value of red and 50
    percent opacity, you use this rule:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，如果你想要一个颜色值为红色并且具有 50% 不透明度的元素，你可以使用以下规则：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '***The Color Variable: currentColor***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***颜色变量：currentColor***'
- en: 'In addition to the new color methods I’ve just described, CSS3 also introduces
    a new `color` value keyword: `currentColor`. This keyword acts as a variable for
    the current color: the value of `currentColor` for an element is the value of
    its own `color` property. So when an element has a `color` value of, say, `red`,
    the value of `currentColor` is also `red`. You can then use that to set a color
    value on a different property without having to specify `red` again.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我刚才描述的新的颜色方法外，CSS3 还引入了一个新的 `color` 值关键字：`currentColor`。这个关键字作为当前颜色的变量：一个元素的
    `currentColor` 值就是它自己的 `color` 属性的值。所以，当一个元素的 `color` 值是例如 `red` 时，它的 `currentColor`
    值也是 `red`。你可以利用这一点，在不同的属性上设置颜色值，而无需再次指定 `red`。
- en: 'The following example should clarify the usefulness of `currentColor`. First,
    I take the following markup:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例应该能阐明 `currentColor` 的有用性。首先，我使用以下的标记：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'and I apply this CSS to it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我为它应用这个 CSS：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One `h2` displays in black (`black`) text on the default (`white`) background,
    and the other in `white` text on a `black` background. Next, I use the `currentColor`
    keyword as a value for the `border-bottom` property on the `abbr` elements. You
    can see the result in [Figure 10-5](ch10.html#ch10fig5).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `h2` 元素在默认（`white`）背景上显示黑色（`black`）文本，另一个则在黑色（`black`）背景上显示白色（`white`）文本。接下来，我使用
    `currentColor` 关键字作为 `abbr` 元素的 `border-bottom` 属性的值。你可以在[图10-5](ch10.html#ch10fig5)中看到结果。
- en: '![Image](graphics/f10-05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f10-05.jpg)'
- en: '*Figure 10-5: A demonstration of the* `*currentColor*` *color value keyword*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：`*currentColor*` 颜色值关键字的演示*'
- en: Because the first `h2` has a `color` value of `black`, the color of the `border-bottom`
    property of the `abbr` element is also `black`. Because the second `h2` has a
    `color` value of `white`, the `border-bottom` property of the `abbr` element has
    the same color. These values have taken on the `color` property of their parent
    elements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为第一个 `h2` 元素的 `color` 值是 `black`，所以 `abbr` 元素的 `border-bottom` 属性颜色也是 `black`。因为第二个
    `h2` 元素的 `color` 值是 `white`，所以 `abbr` 元素的 `border-bottom` 属性也具有相同的颜色。这些值已经继承了它们父元素的
    `color` 属性。
- en: 'The `currentColor` keyword means I don’t have to specify the color of the border
    for every instance of the `abbr` element. In this example, I don’t have to use
    an extra rule—without it, I have to use something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentColor` 关键字意味着我不需要为每个 `abbr` 元素实例指定边框颜色。在这个示例中，我不需要使用额外的规则——如果没有它，我必须像这样使用：'
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Although this may not seem like a big savings, the addition of `currentColor`
    means I can update the parent element color and not have to worry about setting
    the color on any relevant children. On a large site with many different color
    combinations, you can see that `currentColor` would be extremely handy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来可能不算是一个大节省，但 `currentColor` 的引入意味着我可以更新父元素的颜色，而不必担心为任何相关的子元素设置颜色。在一个拥有许多不同颜色组合的大型网站上，你可以看到
    `currentColor` 将会非常方便。
- en: '**Summary**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**概述**'
- en: The introduction of the `opacity` property and the Alpha channel to CSS3 may
    seem minor, but transparency unlocks some significant changes to page designs;
    overlapping colors have long been a staple of print design, but this style never
    made serious inroads into web design because of how difficult it was to implement.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity` 属性和 Alpha 通道的引入对 CSS3来说可能看似微不足道，但透明度为页面设计带来了显著的变化；重叠的颜色长期以来是印刷设计的常见元素，但由于实现难度大，这种风格从未真正进入网页设计领域。'
- en: And although the HSL color model doesn’t impact how visitors experience your
    website, it allows you as an author to experiment with color more easily during
    the design process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 HSL 色彩模型并不会影响访客浏览网站的体验，但它使得你作为作者，在设计过程中能更轻松地进行色彩实验。
- en: In the next chapter, I’ll complete the quartet of chapters on element decoration
    with a look at the gradient background.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将通过探讨渐变背景，完成关于元素装饰的四部曲。
- en: '**Color and Opacity: Browser Support**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**颜色与透明度：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| `opacity` | Yes | Yes | Yes | Yes |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `opacity` | 是 | 是 | 是 | 是 |'
- en: '| RGBA values | Yes | Yes | Yes | Yes |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| RGBA 值 | 是 | 是 | 是 | 是 |'
- en: '| HSL values | Yes | Yes | Yes | Yes |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| HSL 值 | 是 | 是 | 是 | 是 |'
- en: '| HSLA values | Yes | Yes | Yes | Yes |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| HSLA 值 | 是 | 是 | 是 | 是 |'
- en: '| `currentColor` value | Yes | Yes | Yes | Yes |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `currentColor` 值 | 是 | 是 | 是 | 是 |'
