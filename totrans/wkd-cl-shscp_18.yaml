- en: '**B**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**B**'
- en: '**BONUS SCRIPTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加脚本**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: Because we couldn’t say no to these gems! As we developed this second edition,
    we ended up writing a few more scripts for backup purposes. It turns out we didn’t
    need the spare scripts, but we didn’t want to keep our secret sauce from our readers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们无法拒绝这些珍品！在我们开发第二版时，最终我们写了几个备份脚本。结果我们并不需要这些备用脚本，但我们不想把我们的秘密武器藏着不让读者知道。
- en: The first two bonus scripts are for the systems administrators out there who
    have to manage moving or processing a lot of files. The last script is for web
    users always looking for the next web service that’s just begging to be turned
    into a shell script; we’ll scrape a website that helps us track the phases of
    the moon!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个附加脚本是为系统管理员设计的，他们需要管理大量文件的迁移或处理。最后一个脚本是为那些总是在寻找下一个即将被转化为shell脚本的web服务的web用户准备的；我们将抓取一个帮助我们跟踪月亮各个阶段的网站！
- en: '**#102 Bulk-Renaming Files**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#102 批量重命名文件**'
- en: Systems administrators are often tasked with moving many files from one system
    to another, and it’s fairly common for the files in the new system to require
    a totally different naming scheme. For a few files, renaming is simple to do manually,
    but when renaming hundreds or thousands of files, it immediately becomes a job
    better suited for a shell script.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员经常需要将许多文件从一个系统移动到另一个系统，而且在新系统中，文件通常需要完全不同的命名方案。对于一些文件，手动重命名很简单，但当需要重命名数百或数千个文件时，这立即成为一个更适合用shell脚本完成的任务。
- en: '***The Code***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: The simple script in [Listing B-1](app02.xhtml#app02ex1) takes two arguments
    for the text to match and replace, and a list of arguments specifying the files
    you want to rename (which can be globbed for easy use).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing B-1](app02.xhtml#app02ex1)中的简单脚本接受两个参数用于匹配和替换的文本，以及一个指定要重命名的文件的参数列表（这些文件可以通过通配符方便地使用）。'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing B-1: The* `*bulkrename*` *script*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing B-1: `*bulkrename*` 脚本*'
- en: '***How It Works***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: We first define a `printHelp()` function ➊ that will print the arguments required
    and the purpose of the script, and then exit. After defining the new function,
    the code iterates over the arguments passed to the script with `getopts` ➋, as
    done in previous scripts, assigning values to the `replace` and `match` variables
    when their arguments are specified.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个`printHelp()`函数 ➊，它将打印所需的参数和脚本的目的，然后退出。在定义了新函数后，代码使用`getopts` ➋（如同之前的脚本中一样）迭代脚本传入的参数，当指定了参数时，将值赋给`replace`和`match`变量。
- en: The script then checks that we have values for the variables we will use later.
    If the `replace` ➌ and `match` ➍ variables have a length of zero, the script prints
    an error telling the user that they need to supply a string to find and a string
    to replace. The script then prints the `printHelp` text and exits.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本接着检查我们是否为稍后使用的变量提供了值。如果`replace` ➌和`match` ➍变量的长度为零，脚本会打印错误消息，告诉用户他们需要提供一个查找字符串和一个替换字符串。然后脚本打印`printHelp`文本并退出。
- en: After verifying there are values for `match` and `replace`, the script begins
    iterating over the rest of the arguments specified ➎, which should be the files
    to rename. We use `sed` ➏ to replace the `match` string with the `replace` string
    in the filename and store the new filename in a bash variable. With the new filename
    stored, we use the `mv` command to move the file to the new filename, and then
    print a message telling the user that the file has been renamed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证`match`和`replace`有值之后，脚本开始迭代其余指定的参数 ➎，这些参数应该是需要重命名的文件。我们使用`sed` ➏将文件名中的`match`字符串替换为`replace`字符串，并将新文件名存储在一个bash变量中。存储了新文件名后，我们使用`mv`命令将文件移动到新文件名，并打印一条消息告诉用户文件已经被重命名。
- en: '***Running the Script***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: The `bulkrename` shell script takes the two string arguments and the files to
    rename (which can be globbed for easier use; otherwise, they’re listed individually).
    If invalid arguments are specified, a friendly help message is printed, as shown
    in [Listing B-2](app02.xhtml#app02ex2).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`bulkrename` shell脚本接受两个字符串参数和要重命名的文件（这些文件可以通过通配符方便地使用；否则，必须逐个列出）。如果指定了无效的参数，将打印一条友好的帮助消息，如[Listing
    B-2](app02.xhtml#app02ex2)所示。'
- en: '***The Results***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing B-2: Running the* `*bulkrename*` *script*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing B-2: 运行`*bulkrename*` 脚本*'
- en: You can list the files to rename individually or glob them using an asterisk
    (`*`) in the file path like we do at ➊. After being moved, each renamed file is
    printed to the screen with its new name to reassure the user that the files were
    renamed as expected.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以单独列出要重命名的文件，或者使用文件路径中的星号（`*`）进行通配符匹配，就像我们在 ➊ 中所做的那样。每个重命名的文件在被移动后都会显示其新名称，以确保用户文件已按预期重命名。
- en: '***Hacking the Script***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: Sometimes it may be useful to replace text in a filename with a special string,
    like today’s date or a timestamp. Then you’d know when the file was renamed without
    needing to specify today’s date in the `-r` argument. You can accomplish this
    by adding special tokens to the script that can then be replaced when the file
    is renamed. For instance, you could have a `replace` string containing `%d` or
    `%t`, which are then replaced with today’s date or a timestamp, respectively,
    when the file is renamed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将文件名中的文本替换为特殊字符串（如今天的日期或时间戳）可能会很有用。这样，你就能知道文件是什么时候重命名的，而不需要在`-r`参数中指定今天的日期。你可以通过在脚本中添加特殊标记来实现这一点，这些标记在文件重命名时会被替换。例如，你可以有一个`replace`字符串，其中包含`%d`或`%t`，它们在文件重命名时分别被今天的日期或时间戳替换。
- en: Special tokens like this can make moving files for backup purposes easier. You
    can add a `cron` job that moves certain files so the dynamic token in the filenames
    will be updated by the script automatically, instead of updating the `cron` job
    when you want to change the date in the filename.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的特殊标记可以使文件移动以备份变得更容易。你可以添加一个`cron`作业来移动某些文件，这样脚本就会自动更新文件名中的动态标记，而不必在想要更改文件名中的日期时更新`cron`作业。
- en: '**#103 Bulk-Running Commands on Multiprocessor Machines**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#103 在多处理器机器上批量运行命令**'
- en: When this book was first published, it was uncommon to have a multicore or multiprocessor
    machine unless you worked on servers or mainframes for a living. Today, most laptops
    and desktops have multiple cores, allowing the computer to perform more work at
    once. But sometimes programs you want to run are unable to take advantage of this
    increase in processing power and will only use one core at a time; to use more
    cores you have to run multiple instances of the program in parallel.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书首次出版时，除非你从事服务器或大型主机相关工作，否则拥有多核或多处理器的机器是非常罕见的。如今，大多数笔记本电脑和台式机都有多个核心，使得计算机可以同时处理更多的任务。但有时你想要运行的程序无法充分利用这种处理能力的增加，可能一次只能使用一个核心；要利用更多的核心，你需要同时运行多个程序实例。
- en: Say you have a program that converts image files from one format to another,
    and you have a whole lot of files to convert! Having a single process convert
    each file serially (one after another instead of in parallel) could take a long
    time. It would be much faster to split up the files across multiple processes
    running alongside each other.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个将图像文件从一种格式转换为另一种格式的程序，并且有大量的文件需要转换！让一个进程依次串行转换每个文件（一个接一个，而不是并行转换）可能需要很长时间。将文件分配到多个进程中并行处理会更快。
- en: The script in [Listing B-3](app02.xhtml#app02ex3) details how to parallelize
    a given command for a certain number of processes you may want to run all at once.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 B-3](app02.xhtml#app02ex3)中的脚本详细介绍了如何将给定的命令并行化，以便一次运行多个进程。'
- en: '**NOTE**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you* don’t *have multiple cores in your computer, or if your program is
    slow for other reasons, such as a hard drive access bottleneck, running parallel
    instances of a program may be detrimental to performance. Be careful with starting
    too many processes as it could easily overwhelm an underpowered system. Luckily,
    even a Raspberry Pi has multiple cores nowadays!*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你*没有*多核的计算机，或者程序因为其他原因（如硬盘访问瓶颈）而变慢，运行多个并行实例可能会对性能产生不利影响。启动过多进程可能会使系统负担过重，因此要小心。幸运的是，即便是树莓派现在也有多个核心了！*'
- en: '***The Code***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing B-3: The* `*bulkrun*` *script*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 B-3: The* `*bulkrun*` *脚本*'
- en: '***How It Works***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: 'The `bulkrun` script takes three arguments: the maximum number of processes
    to run at any one time ➊, the directory containing the files to process ➋, and
    the command to run (suffixed with the filename to run on) ➌. After going through
    the arguments supplied by the user with `getopts` ➍, the script checks that the
    user supplied these three arguments. If any of the `procs`, `command`, or `inputdir`
    variables are undefined after processing the user arguments, the script prints
    an error message ➎ and the help text and then exits.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`bulkrun` 脚本接受三个参数：同时运行的最大进程数 ➊，包含待处理文件的目录 ➋，以及要执行的命令（后缀为要处理的文件名） ➌。通过 `getopts`
    解析用户提供的参数 ➍ 后，脚本检查用户是否提供了这三个参数。如果在处理用户参数后，`procs`、`command` 或 `inputdir` 变量未定义，脚本将打印错误信息
    ➎ 和帮助文本，然后退出。'
- en: Once we know we have the variables needed to manage running the parallel processes,
    the real work of the script can start. First, the script determines the number
    of files to process ➏ and saves a list of the files for use later. Then the script
    begins a `for` loop that will be used to keep track of how many files it has processed
    so far. This `for` loop uses the `seq` command ➐ to iterate from 1 to the total
    number of files specified, using the number of processes that will run in parallel
    as the increment step.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定了运行并行进程所需的变量，脚本的真正工作就可以开始了。首先，脚本确定要处理的文件数量 ➏ 并保存文件列表，以备后用。然后，脚本开始一个 `for`
    循环，用来跟踪到目前为止处理了多少文件。这个 `for` 循环使用 `seq` 命令 ➐ 从 1 到指定的文件总数迭代，并使用将并行运行的进程数作为增量步长。
- en: Inside this is another `for` loop ➑ that tracks the number of processes starting
    at a given time. This inner `for` loop also uses the `seq` command to iterate
    from 0 to the number of processes specified, with 1 as the default increment step.
    In each iteration of the inner `for` loop, a new file is pulled out of the file
    list ➒, using `sed` to print only the file we want from the list of files saved
    at the beginning of the script, and the supplied command is run on the file in
    the background using the `&` sign.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中还有一个 `for` 循环 ➑ 用于跟踪在给定时间启动的进程数量。这个内部的 `for` 循环也使用 `seq` 命令从 0 迭代到指定的进程数，默认增量步长为
    1。在每次内部 `for` 循环的迭代中，脚本从文件列表 ➒ 中提取一个新文件，使用 `sed` 打印出我们需要的文件，并在后台使用 `&` 符号运行提供的命令。
- en: 'When the maximum number of processes has been started in the background, the
    `wait` command ➓ tells the script to sleep until all the commands in the background
    have finished processing. After `wait` is finished, the whole workflow starts
    over again, picking up more processes to work on more files. This is similar to
    how we quickly achieve the best compression in the script `bestcompress` ([Script
    #34](ch04.xhtml#ch04lev1sec08) on [page 113](ch04.xhtml#page_113)).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '当最大进程数在后台启动后，`wait` 命令 ➓ 会告诉脚本休眠，直到后台所有命令完成处理。`wait` 完成后，整个工作流将重新开始，继续处理更多文件。这类似于我们在脚本
    `bestcompress` 中快速实现最佳压缩的方法（[脚本 #34](ch04.xhtml#ch04lev1sec08) 在 [第 113 页](ch04.xhtml#page_113)）。'
- en: '***Running the Script***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Using the `bulkrun` script is pretty straightforward. The three arguments it
    takes are the maximum number of processes to run at any one time, the directory
    of files to work on, and the command to run on them. If you wanted to run the
    ImageMagick utility `mogrify` to resize a directory of images in parallel, for
    instance, you could run something like [Listing B-4](app02.xhtml#app02ex4).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `bulkrun` 脚本非常简单。它接受的三个参数分别是同时运行的最大进程数、要处理的文件目录和要在文件上执行的命令。例如，如果你想并行地运行 ImageMagick
    工具 `mogrify` 来调整图像目录中的图片大小，你可以运行类似于 [列表 B-4](app02.xhtml#app02ex4) 的命令。
- en: '***The Results***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing B-4: Running the* `*bulkrun*` *command to parallelize the* `*mogrify*`
    *ImageMagick command*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 B-4：运行* `*bulkrun*` *命令并行化* `*mogrify*` *ImageMagick 命令*'
- en: '***Hacking the Script***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: 'It’s often useful to be able to specify a filename inside of a command, or
    use tokens similar to those mentioned in the `bulkrename` script ([Script #102](app02.xhtml#app02lev1sec01)
    on [page 346](app02.xhtml#page_346)): special strings that are replaced at runtime
    with dynamic values (such as `%d`, which is replaced with the current date, or
    `%t`, which is replaced with a timestamp). Updating the script so that it can
    replace special tokens in the command or in the filename with something like a
    date or timestamp as the files are processed would prove useful.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '能够在命令中指定文件名，或者使用类似于在 `bulkrename` 脚本中提到的令牌（[脚本 #102](app02.xhtml#app02lev1sec01)
    在 [第346页](app02.xhtml#page_346)）是非常有用的：这些特殊字符串在运行时被动态值替换（例如 `%d`，它被当前日期替换，或者 `%t`，它被时间戳替换）。更新脚本，使其能够在命令或文件名中替换类似日期或时间戳的特殊令牌，在处理文件时会非常有帮助。'
- en: Another useful hack might be to track how long it takes to perform all the processing
    using the `time` utility. Having the script print statistics on how many files
    will be processed, or how many have been processed and how many are left, would
    be valuable if you’re taking care of a truly massive job.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的技巧可能是使用 `time` 工具跟踪所有处理所需的时间。如果脚本能打印统计信息，显示将处理多少文件，已处理多少文件，还剩多少文件，那么在处理一项真正庞大的工作时，了解这些信息是非常有价值的。
- en: '**#104 Finding the Phase of the Moon**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#104 查找月相**'
- en: Whether you’re a werewolf, a witch, or just interested in the lunar calendar,
    it can be helpful and educational to track the phases of the moon and learn about
    waxing, waning, and even gibbous moons (which have nothing to do with gibbons).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是狼人、女巫，还是单纯对农历感兴趣，跟踪月相并了解盈亏和凸月（月亮几乎与长臂猿无关）是非常有用且具有教育意义的。
- en: To make things complicated, the moon has an orbit of 27.32 days and its phase
    is actually dependent on where you are on Earth. Still, given a specific date,
    it is possible to calculate the phase of the moon.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让事情变得复杂的是，月亮的轨道周期为 27.32 天，并且它的月相实际上取决于你在地球上的位置。不过，给定一个特定日期，还是可以计算出月亮的相位。
- en: 'But why go through all the work when there are plenty of sites online that
    already calculate the phase for any given date in the past, present, or future?
    For the script in [Listing B-5](app02.xhtml#app02ex5), we’re going to utilize
    the same site Google uses if you do a search for the current phase of the moon:
    *[http://www.moongiant.com/](http://www.moongiant.com/)*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但既然有很多在线站点已经可以计算过去、现在或未来的任意日期的月相，为什么还要做这么多工作呢？在[列表 B-5](app02.xhtml#app02ex5)中的脚本，我们将利用
    Google 使用的同一站点，如果你搜索当前月相，网站是：* [http://www.moongiant.com/](http://www.moongiant.com/)
    *。
- en: '***The Code***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing B-5: The* `*moonphase*` *script*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 B-5：* `*moonphase*` *脚本*'
- en: '***How It Works***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: As with other scripts that scrape values from a web query, the `moonphase` script
    revolves around identifying the format of different query URLs and pulling the
    specific value from the resultant HTML data stream.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他从网络查询中提取值的脚本类似，`moonphase` 脚本的核心是识别不同查询 URL 的格式，并从返回的 HTML 数据流中提取特定值。
- en: 'Analysis of the site shows that there are two types of URLs: one that specifies
    the current date, simply structured as “phase/today”, and one that specifies a
    date in the past or future in the format MM/DD/Y Y Y Y, like “phase/08/03/2017”.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对该站点的分析显示，存在两种类型的 URL：一种指定当前日期，简单结构为“phase/today”，另一种指定过去或未来的日期，格式为 MM/DD/YYYY，如“phase/08/03/2017”。
- en: Specify a date in the right format and you can get the phase of the moon on
    that date. But we can’t just append the date to the site’s domain name without
    some error-checking, so the script splits the user input into three fields—month,
    day, and year—and then makes sure that the day and year values are nonzero at
    ➊. There’s more error-checking that can be done, which we’ll explore in “Hacking
    the Script.”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 指定正确格式的日期，你就可以获得该日期的月相。但我们不能仅仅将日期附加到站点的域名上而不做错误检查，因此脚本将用户输入拆分成三部分——月份、日期和年份——然后在
    ➊ 处确保日期和年份的值不为零。还可以进行更多的错误检查，我们将在“黑客脚本”一节中探讨。
- en: The trickiest part of any scraper script is properly identifying the pattern
    that lets you extract the desired data. In the `moonphase` script, that’s specified
    at ➋. The longest and most complicated line is at ➌, where the script gets the
    page from the *moongiant.com* site, and then uses a sequence of `grep` and `sed`
    commands to pull just the line that matches the pattern specified.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 任何抓取脚本中最棘手的部分就是正确识别出能够提取所需数据的模式。在`moonphase`脚本中，这一点在➋处指定。最长且最复杂的代码行出现在➌处，脚本从*moongiant.com*网站获取页面，然后使用一系列`grep`和`sed`命令提取与指定模式匹配的那一行。
- en: After that, it’s just a matter of displaying the illumination level, either
    for today or the specified date, using the final `if`/`then`/`else` statement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需通过最终的`if`/`then`/`else`语句显示照明级别，无论是今天还是指定的日期。
- en: '***Running the Script***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Without an argument, the `moonphase` script shows the percentage of lunar illumination
    for the current date. Specify any date in the past or future by entering MM/DD/YYYY,
    as shown in [Listing B-6](app02.xhtml#app02ex6).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有参数，`moonphase`脚本会显示当前日期的月亮照明百分比。通过输入MM/DD/YYYY格式的日期来指定过去或未来的任何日期，如[清单 B-6](app02.xhtml#app02ex6)所示。
- en: '***The Results***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing B-6: Running the* `*moonphase*` *script*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 B-6：运行* `*moonphase*` *脚本*'
- en: '**NOTE**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*December 12, 1941 is when the classic Universal horror film* The Wolf Man
    *was first released to movie theaters. And it wasn’t a full moon. Go figure!*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*1941年12月12日是经典的环球恐怖电影《狼人与人》首次在电影院上映的日子。那时并不是满月。真是不可思议！*'
- en: '***Hacking the Script***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***黑客破解脚本***'
- en: 'From an internal perspective, the script could be greatly improved by having
    a better error-checking sequence, or even by just utilizing [Script #3](ch01.xhtml#ch01lev1sec04)
    on [page 17](ch01.xhtml#page_17). That would let users specify dates in more formats.
    An improvement would be to replace the `if`/`then`/`else` statement at the end
    with a function that translates illumination level into more common moon phase
    phrases like “waning,” “waxing,” and “gibbous.” NASA has a web page you could
    use that defines the different phases: *[http://starchild.gsfc.nasa.gov/docs/StarChild/
    solar_system_level2/moonlight.html](http://starchild.gsfc.nasa.gov/docs/StarChild/solar_system_level2/moonlight.html)*.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '从内部角度来看，脚本可以通过更好的错误检查序列来大大改进，甚至仅通过在[第17页](ch01.xhtml#page_17)使用[脚本 #3](ch01.xhtml#ch01lev1sec04)。这将允许用户以更多格式指定日期。一个改进是用一个函数替换末尾的`if`/`then`/`else`语句，该函数将照明级别转换为更常见的月相词汇，如“盈月”、“亏月”和“凸月”。NASA
    有一个你可以使用的网页，定义了不同的月相：[http://starchild.gsfc.nasa.gov/docs/StarChild/solar_system_level2/moonlight.html](http://starchild.gsfc.nasa.gov/docs/StarChild/solar_system_level2/moonlight.html)。'
