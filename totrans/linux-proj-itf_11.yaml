- en: Chapter 11. System Limits and Options
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 11 章 系统限制和选项
- en: 'Each UNIX implementation sets limits on various system features and resources,
    and provides—or chooses not to provide—options defined in various standards. Examples
    include the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 UNIX 实现都对各种系统功能和资源设置了限制，并根据不同的标准提供（或选择不提供）选项。以下是一些示例：
- en: How many files can a process hold open at one time?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程最多可以同时打开多少个文件？
- en: Does the system support realtime signals?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是否支持实时信号？
- en: What is the largest value that can be stored in a variable of type *int*?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*int* 类型的变量能存储的最大值是多少？'
- en: How big an argument list can a program have?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序能拥有多大的参数列表？
- en: What is the maximum length of a pathname?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径名的最大长度是多少？
- en: 'While we could hard-code assumed limits and options into an application, this
    reduces portability, since limits and options may vary:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将假定的限制和选项硬编码到应用程序中，但这样做会减少可移植性，因为限制和选项可能会有所不同：
- en: '*Across UNIX implementations*: Although limits and options may be fixed on
    an individual implementation, they can vary from one UNIX implementation to another.
    The maximum value that can be stored in an *int* is an example of such a limit.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跨 UNIX 实现*：尽管某些限制和选项在个别实现中可能是固定的，但它们在不同的 UNIX 实现之间可能会有所不同。可以存储在 *int* 类型中的最大值就是这种限制的一个例子。'
- en: '*At run time on a particular implementation*: The kernel may have been reconfigured
    to change a limit, for example. Alternatively, the application may have been compiled
    on one system, but run on another system with different limits and options.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在特定实现的运行时*：例如，内核可能已经重新配置以更改某个限制。或者，应用程序可能是在一个系统上编译的，但在另一个具有不同限制和选项的系统上运行。'
- en: '*From one file system to another*: For example, traditional System V file systems
    allow a filename to be up to 14 bytes, while traditional BSD file systems and
    most native Linux file systems allow filenames of up to 255 bytes.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从一个文件系统到另一个文件系统*：例如，传统的 System V 文件系统允许文件名最多为 14 字节，而传统的 BSD 文件系统和大多数本地 Linux
    文件系统允许文件名最多为 255 字节。'
- en: 'Since system limits and options affect what an application may do, a portable
    application needs ways of determining limit values and whether options are supported.
    The C programming language standards and SUSv3 provide two principal avenues for
    an application to obtain such information:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于系统限制和选项会影响应用程序的行为，因此便携式应用程序需要有方法来确定限制值以及选项是否受支持。C 编程语言标准和 SUSv3 提供了两种主要的途径供应用程序获取此类信息：
- en: Some limits and options can be determined at compile time. For example, the
    maximum value of an *int* is determined by the hardware architecture and compiler
    design choices. Such limits can be recorded in header files.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些限制和选项可以在编译时确定。例如，*int* 的最大值由硬件架构和编译器设计选择决定。这类限制可以在头文件中记录。
- en: Other limits and options may vary at run time. For such cases, SUSv3 defines
    three functions—*sysconf()*, *pathconf()*, and *fpathconf()*—that an application
    can call to check these implementation limits and options.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他限制和选项可能在运行时发生变化。对于这种情况，SUSv3 定义了三个函数——*sysconf()*、*pathconf()* 和 *fpathconf()*——应用程序可以调用它们来检查这些实现限制和选项。
- en: SUSv3 specifies a range of limits that a conforming implementation may enforce,
    as well as a set of options, each of which may or may not be provided by a particular
    system. We describe a few of these limits and options in this chapter, and describe
    others at relevant points in later chapters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 指定了一系列可由符合规范的实现强制执行的限制，以及一组选项，每个选项可能由特定系统提供，也可能不提供。我们将在本章中描述其中的一些限制和选项，并在后续章节的相关部分描述其他选项和限制。
- en: System Limits
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统限制
- en: For each limit that it specifies, SUSv3 requires that all implementations support
    a *minimum value* for the limit. In most cases, this minimum value is defined
    as a constant in `<limits.h>` with a name prefixed by the string `_POSIX_`, and
    (usually) containing the string `_MAX`; thus, the form of the name is `_POSIX_XXX_MAX`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个它指定的限制，SUSv3 要求所有实现都支持该限制的*最小值*。在大多数情况下，这个最小值会在 `<limits.h>` 中定义为一个常量，名称以字符串
    `_POSIX_` 开头，并且（通常）包含字符串 `_MAX`；因此，名称的形式为 `_POSIX_XXX_MAX`。
- en: If an application restricts itself to the minimum values that SUSv3 requires
    for each limit, then it will be portable to all implementations of the standard.
    However, doing so prevents an application from taking advantage of implementations
    that provide higher limits. For this reason, it is usually preferable to determine
    the limit on a particular system using `<limits.h>`, *sysconf()*, or *pathconf()*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用程序将自己限制在SUSv3为每个限制所要求的最小值上，那么它将能够在所有符合标准的实现中移植。然而，这样做会阻止应用程序利用提供更高限制的实现。因此，通常更建议通过`<limits.h>`、*sysconf()*或*pathconf()*来确定特定系统的限制。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The use of the string `_MAX` in the limit names defined by SUSv3 can appear
    confusing, given their description as *minimum* values. The rationale for the
    names becomes clear when we consider that each of these constants defines an upper
    limit on some resource or feature, and the standards are saying that this upper
    limit must have a certain minimum value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3定义的限制名称中使用字符串`_MAX`可能会让人感到困惑，因为它们被描述为*最小*值。当我们考虑到每个常量定义了某个资源或特性上的上限，并且标准规定这个上限必须具有某个最小值时，名称的理由就变得清晰了。
- en: 'In some cases, *maximum values* are provided for a limit, and these values
    have names containing the string `_MIN`. For these constants, the converse holds
    true: they represent a lower limit on some resource, and the standards are saying
    that, on a conforming implementation, this lower limit can be no greater than
    a certain value. For example, the `FLT_MIN` limit (`1E-37`) defines the largest
    value that an implementation may set for the smallest floating-point number that
    may be represented, and all conforming implementations will be able to represent
    floating-point numbers at least this small.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，*最大值*被提供为某个限制，这些值的名称包含字符串`_MIN`。对于这些常量，情况恰恰相反：它们表示某个资源的下限，标准规定，在符合要求的实现中，这个下限不能大于某个值。例如，`FLT_MIN`限制（`1E-37`）定义了一个实现可能设置的最小浮点数的最大值，所有符合标准的实现都能够表示至少这么小的浮点数。
- en: Each limit has a *name*, which corresponds to the *minimum value name* described
    above, but lacks the `_POSIX_` prefix. An implementation *may* define a constant
    with this name in `<limits.h>` to indicate the corresponding limit for this implementation.
    If defined, this limit will always be at least the size of the minimum value described
    above (i.e., `XXX_MAX >= _POSIX_XXX_MAX`).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个限制都有一个*名称*，该名称对应于上述描述的*最小值名称*，但没有`_POSIX_`前缀。实现*可以*在`<limits.h>`中定义一个常量，表示该实现对应的限制。如果定义了这个常量，那么这个限制将始终至少等于上述描述的最小值（即，`XXX_MAX
    >= _POSIX_XXX_MAX`）。
- en: 'SUSv3 divides the limits that it specifies into three categories: *runtime
    invariant values*, *pathname variable values*, and *runtime increasable values*.
    In the following paragraphs, we describe these categories and provide some examples.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3将其指定的限制分为三类：*运行时不变值*、*路径名可变值*和*运行时可增加值*。在接下来的段落中，我们将描述这些类别并提供一些示例。
- en: Runtime invariant values (possibly indeterminate)
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时不变值（可能是未确定的）
- en: A runtime invariant value is a limit whose value, if defined in `<limits.h>`,
    is fixed for the implementation. However, the value may be indeterminate (perhaps
    because it depends on available memory space), and hence omitted from `<limits.h>`.
    In this case (and even if the limit is also defined in `<limits.h>`), an application
    can use *sysconf()* to determine the value at run time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时不变值是一个限制，如果在`<limits.h>`中定义，则其值对于该实现是固定的。然而，值可能是未确定的（可能因为它依赖于可用的内存空间），因此会被省略在`<limits.h>`中。在这种情况下（即使该限制也在`<limits.h>`中定义），应用程序仍然可以使用*sysconf()*在运行时确定该值。
- en: 'The `MQ_PRIO_MAX` limit is an example of a runtime invariant value. As noted
    in [Sending Messages](ch52.html#sending_messages-id1 "Sending Messages"), there
    is a limit on the priority for messages in POSIX message queues. SUSv3 defines
    the constant `_POSIX_MQ_PRIO_MAX`, with the value 32, as the minimum value that
    all conforming implementations must provide for this limit. This means that we
    can be sure that all conforming implementations will allow priorities from 0 up
    to at least 31 for message priorities. A UNIX implementation can set a higher
    limit than this, defining the constant `MQ_PRIO_MAX` in `<limits.h>` with the
    value of its limit. For example, on Linux, `MQ_PRIO_MAX` is defined with the value
    32,768\. This value can also be determined at run time using the following call:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`MQ_PRIO_MAX` 限制是运行时不变值的一个示例。如在 [发送消息](ch52.html#sending_messages-id1 "发送消息")
    中所述，POSIX 消息队列中的消息优先级存在限制。SUSv3 定义了常量 `_POSIX_MQ_PRIO_MAX`，其值为 32，作为所有符合要求的实现必须提供的此限制的最小值。这意味着我们可以确定，所有符合要求的实现都将允许从
    0 到至少 31 的消息优先级。UNIX 实现可以设置一个高于此值的限制，在 `<limits.h>` 中定义常量 `MQ_PRIO_MAX`，并给出其限制值。例如，在
    Linux 上，`MQ_PRIO_MAX` 的值为 32,768。此值也可以在运行时通过以下调用来确定：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pathname variable values
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 路径名变量值
- en: Pathname variable values are limits that relate to pathnames (files, directories,
    terminals, and so on). Each limit may be constant for the implementation or may
    vary from one file system to another. In cases where a limit can vary depending
    on the pathname, an application can determine its value using *pathconf()* or
    *fpathconf()*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 路径名变量值是与路径名（文件、目录、终端等）相关的限制。每个限制可能对实现是常量，或者可能因文件系统的不同而有所不同。在限制可能因路径名而有所变化的情况下，应用程序可以通过
    *pathconf()* 或 *fpathconf()* 来确定其值。
- en: 'The `NAME_MAX` limit is an example of a pathname variable value. This limit
    defines the maximum size for a filename on a particular file system. SUSv3 defines
    the constant `_POSIX_NAME_MAX`, with the value 14 (the old System V file-system
    limit), as the minimum value that an implementation must allow. An implementation
    may define `NAME_MAX` with a limit higher than this and/or make information about
    a specific file system available via a call of the following form:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAME_MAX` 限制是路径名变量值的一个示例。此限制定义了特定文件系统上文件名的最大大小。SUSv3 定义了常量 `_POSIX_NAME_MAX`，其值为
    14（旧的 System V 文件系统限制），作为实现必须允许的最小值。实现可以定义一个高于此值的 `NAME_MAX` 限制，并/或通过以下形式的调用提供有关特定文件系统的信息：'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The *directory_path* is a pathname for a directory on the file system of interest.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*directory_path* 是感兴趣的文件系统中目录的路径名。'
- en: Runtime increasable values
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时可增加值
- en: A runtime increasable value is a limit that has a fixed minimum value for a
    particular implementation, and all systems running the implementation will provide
    at least this minimum value. However, a specific system may increase this limit
    at run time, and an application can find the actual value supported on the system
    using *sysconf()*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时可增加值是指对于特定实现具有固定最小值的限制，所有运行该实现的系统都将提供至少此最小值。然而，特定系统可以在运行时增加此限制，应用程序可以使用 *sysconf()*
    来查找系统上支持的实际值。
- en: An example of a runtime increasable value is `NGROUPS_MAX`, which defines the
    maximum number of simultaneous supplementary group IDs for a process ([Supplementary
    Group IDs](ch09.html#supplementary_group_ids "Supplementary Group IDs")). SUSv3
    defines the corresponding minimum value, `_POSIX_NGROUPS_MAX`, with the value
    8\. At run time, an application can retrieve the limit using the call *sysconf(_SC_NGROUPS_MAX)*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个运行时可增加值的示例是 `NGROUPS_MAX`，它定义了进程可以同时拥有的最大补充组 ID 数量（[补充组 ID](ch09.html#supplementary_group_ids
    "补充组 ID")）。SUSv3 定义了相应的最小值 `_POSIX_NGROUPS_MAX`，其值为 8。在运行时，应用程序可以通过调用 *sysconf(_SC_NGROUPS_MAX)*
    来获取此限制。
- en: Summary of selected SUSv3 limits
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选定的 SUSv3 限制总结
- en: '[Table 11-1](ch11.html#selected_susv3_limits "Table 11-1. Selected SUSv3 limits")
    lists a few of the SUSv3-defined limits that are relevant to this book (other
    limits are introduced in later chapters).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 11-1](ch11.html#selected_susv3_limits "表 11-1. 选定的 SUSv3 限制") 列出了与本书相关的部分
    SUSv3 定义的限制（其他限制将在后续章节中介绍）。'
- en: Table 11-1. Selected SUSv3 limits
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11-1. 选定的 SUSv3 限制
- en: '| Name of limit (`<limits.h>`) | Min. value | *sysconf()/pathconf()* name (`<unistd.h>`
    | Description |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 限制名称 (`<limits.h>`) | 最小值 | *sysconf()/pathconf()* 名称 (`<unistd.h>`) | 描述
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `ARG_MAX` | `4096` | `_SC_ARG_MAX` | Maximum bytes for arguments (*argv*)
    plus environment (*environ*) that can be supplied to an *exec()* ([Environment
    List](ch06.html#environment_list-id1 "Environment List") and [Passing the Caller’s
    Environment to the New Program](ch27.html#passing_the_caller_number_symble_s_envir
    "Passing the Caller’s Environment to the New Program")) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `ARG_MAX` | `4096` | `_SC_ARG_MAX` | 可传递给*exec()*的参数（*argv*）加上环境（*environ*）的最大字节数（[环境列表](ch06.html#environment_list-id1
    "环境列表")和[将调用者的环境传递给新程序](ch27.html#passing_the_caller_number_symble_s_envir "将调用者的环境传递给新程序")）
    |'
- en: '| none | none | `_SC_CLK_TCK` | Unit of measurement for *times()* |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| none | none | `_SC_CLK_TCK` | *times()* 的计量单位 |'
- en: '| `LOGIN_NAME_MAX` | `9` | `_SC_LOGIN_NAME_MAX` | Maximum size of a login name
    (including terminating null byte) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `LOGIN_NAME_MAX` | `9` | `_SC_LOGIN_NAME_MAX` | 登录名的最大长度（包括终止的空字节） |'
- en: '| `OPEN_MAX` | `20` | `_SC_OPEN_MAX` | Maximum number of file descriptors that
    a process can have open at one time, and one greater than maximum usable descriptor
    number ([Process Resource Limits](ch36.html#process_resource_limits "Process Resource
    Limits")) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `OPEN_MAX` | `20` | `_SC_OPEN_MAX` | 进程一次可以打开的文件描述符的最大数量，比最大可用描述符数量多一个（[进程资源限制](ch36.html#process_resource_limits
    "进程资源限制")） |'
- en: '| `NGROUPS_MAX` | `8` | `_SC_NGROUPS_MAX` | Maximum number of supplementary
    groups of which a process can be a member ([Retrieving and Modifying Supplementary
    Group IDs](ch09.html#retrieving_and_modifying_supplementary_g "Retrieving and
    Modifying Supplementary Group IDs")) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `NGROUPS_MAX` | `8` | `_SC_NGROUPS_MAX` | 进程可以作为成员的最大补充组数（[检索和修改补充组ID](ch09.html#retrieving_and_modifying_supplementary_g
    "检索和修改补充组ID")） |'
- en: '| none | `1` | `_SC_PAGESIZE` | Size of a virtual memory page (`_SC_PAGE_SIZE`
    is a synonym) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| none | `1` | `_SC_PAGESIZE` | 虚拟内存页面的大小（`_SC_PAGE_SIZE`是其同义词） |'
- en: '| `RTSIG_MAX` | `8` | `_SC_RTSIG_MAX` | Maximum number of distinct realtime
    signals ([Realtime Signals](ch22.html#realtime_signals "Realtime Signals")) |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `RTSIG_MAX` | `8` | `_SC_RTSIG_MAX` | 最大的不同实时信号数（[实时信号](ch22.html#realtime_signals
    "实时信号")） |'
- en: '| `SIGQUEUE_MAX` | `32` | `_SC_SIGQUEUE_MAX` | Maximum number of queued realtime
    signals ([Realtime Signals](ch22.html#realtime_signals "Realtime Signals")) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `SIGQUEUE_MAX` | `32` | `_SC_SIGQUEUE_MAX` | 最大排队的实时信号数（[实时信号](ch22.html#realtime_signals
    "实时信号")） |'
- en: '| `STREAM_MAX` | `8` | `_SC_STREAM_MAX` | Maximum number of *stdio* streams
    that can be open at one time |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `STREAM_MAX` | `8` | `_SC_STREAM_MAX` | 一次可以打开的*stdio*流的最大数量 |'
- en: '| `NAME_MAX` | `14` | `_PC_NAME_MAX` | Maximum number of bytes in a filename,
    *excluding* terminating null byte |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `NAME_MAX` | `14` | `_PC_NAME_MAX` | 文件名的最大字节数，*不包括*终止空字节 |'
- en: '| `PATH_MAX` | `256` | `_PC_PATH_MAX` | Maximum number of bytes in a pathname,
    *including* terminating null byte |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `PATH_MAX` | `256` | `_PC_PATH_MAX` | 路径名中的最大字节数，*包括*终止空字节 |'
- en: '| `PIPE_BUF` | `512` | `_PC_PIPE_BUF` | Maximum number of bytes that can be
    written atomically to a pipe or FIFO ([Overview](ch44.html#overview-id11 "Overview"))
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `PIPE_BUF` | `512` | `_PC_PIPE_BUF` | 可以原子写入管道或FIFO的最大字节数（[概述](ch44.html#overview-id11
    "概述")） |'
- en: The first column of [Table 11-1](ch11.html#selected_susv3_limits "Table 11-1. Selected
    SUSv3 limits") gives the name of the limit, which may be defined as a constant
    in `<limits.h>` to indicate the limit for a particular implementation. The second
    column is the SUSv3-defined minimum for the limit (also defined in `<limits.h>`).
    In most cases, each of the minimum values is defined as a constant prefixed with
    the string `_POSIX_`. For example, the constant `_POSIX_RTSIG_MAX` (defined with
    the value 8) specifies the SUSv3-required minimum corresponding to the `RTSIG_MAX`
    implementation constant. The third column specifies the constant name that can
    be given at run time to *sysconf()* or *pathconf()* in order to retrieve the implementation
    limit. The constants beginning with `_SC_` are for use with *sysconf()*; those
    beginning with `_PC_` are for use with *pathconf()* and *fpathconf()*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 11-1](ch11.html#selected_susv3_limits "表 11-1. 选择的 SUSv3 限制")的第一列给出了限制的名称，可以在`<limits.h>`中定义为常量，以表示特定实现的限制。第二列是SUSv3定义的该限制的最小值（也在`<limits.h>`中定义）。在大多数情况下，每个最小值都被定义为一个以`_POSIX_`为前缀的常量。例如，常量`_POSIX_RTSIG_MAX`（定义为值8）指定了SUSv3所要求的最小值，对应于`RTSIG_MAX`实现常量。第三列指定了可以在运行时传递给*sysconf()*或*pathconf()*以检索实现限制的常量名称。以`_SC_`开头的常量用于*sysconf()*；以`_PC_`开头的常量用于*pathconf()*和*fpathconf()*。'
- en: 'Note the following information supplementary to that shown in [Table 11-1](ch11.html#selected_susv3_limits
    "Table 11-1. Selected SUSv3 limits"):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下信息，作为对 [表 11-1](ch11.html#selected_susv3_limits "表 11-1. 选定的 SUSv3 限制")
    中所示内容的补充：
- en: The *getdtablesize()* function is an obsolete alternative for determining the
    process file descriptor limit (`OPEN_MAX`). This function was specified in SUSv2
    (marked LEGACY), but was removed in SUSv3.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getdtablesize()* 函数是一个过时的替代方法，用于确定进程文件描述符的限制（`OPEN_MAX`）。该函数在 SUSv2 中被指定（标记为
    LEGACY），但在 SUSv3 中被移除。'
- en: The *getpagesize()* function is an obsolete alternative for determining the
    system page size (`_SC_PAGESIZE`). This function was specified in SUSv2 (marked
    LEGACY), but was removed in SUSv3.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getpagesize()* 函数是一个过时的替代方法，用于确定系统页面大小（`_SC_PAGESIZE`）。该函数在 SUSv2 中被指定（标记为
    LEGACY），但在 SUSv3 中被移除。'
- en: The constant `FOPEN_MAX`, defined in `<stdio.h>`, is synonymous with `STREAM_MAX`.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量 `FOPEN_MAX`，在 `<stdio.h>` 中定义，与 `STREAM_MAX` 同义。
- en: '`NAME_MAX` excludes the terminating null byte, while `PATH_MAX` includes it.
    This inconsistency repairs an earlier inconsistency in the POSIX.1 standard that
    left it unclear whether `PATH_MAX` included the terminating null byte. Defining
    `PATH_MAX` to include the terminator means that applications that allocated just
    `PATH_MAX` bytes for a pathname will still conform to the standard.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME_MAX` 不包括终止的空字节，而 `PATH_MAX` 包括它。这个不一致修复了 POSIX.1 标准中的早期不一致，该标准未明确说明 `PATH_MAX`
    是否包含终止的空字节。将 `PATH_MAX` 定义为包括终止符意味着，分配了正好 `PATH_MAX` 字节作为路径名的应用程序仍然符合标准。'
- en: 'Determining limits and options from the shell: *getconf*'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 shell 确定限制和选项：*getconf*
- en: 'From the shell, we can use the *getconf* command to obtain the limits and options
    implemented by a particular UNIX implementation. The general form of this command
    is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从 shell 中，我们可以使用 *getconf* 命令来获取特定 UNIX 实现所实现的限制和选项。此命令的一般形式如下：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The *variable-name* identifies the limit of interest and is one of the SUSV3
    standard limit names, such as `ARG_MAX` or `NAME_MAX`. Where the limit relates
    to a pathname, we must specify a pathname as the second argument to the command,
    as in the second of the following examples.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*variable-name* 标识了感兴趣的限制，它是 SUSV3 标准限制名称之一，如 `ARG_MAX` 或 `NAME_MAX`。当限制与路径名相关时，我们必须指定路径名作为命令的第二个参数，如下列第二个示例所示。'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Retrieving System Limits (and Options) at Run Time
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在运行时检索系统限制（和选项）
- en: The *sysconf()* function allows an application to obtain the values of system
    limits at run time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*sysconf()* 函数允许应用程序在运行时获取系统限制的值。'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns value of limit specified by *name*, or -1 if limit is indeterminate
    or an error occurred
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由 *name* 指定的限制值，如果限制无法确定或发生错误，则返回 -1。
- en: The *name* argument is one of the `_SC_*` constants defined in `<unistd.h>`,
    some of which are listed in [Table 11-1](ch11.html#selected_susv3_limits "Table 11-1. Selected
    SUSv3 limits"). The value of the limit is returned as the function result.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*name* 参数是 `<unistd.h>` 中定义的 `_SC_*` 常量之一，其中一些常量列在 [表 11-1](ch11.html#selected_susv3_limits
    "表 11-1. 选定的 SUSv3 限制") 中。限制的值作为函数结果返回。'
- en: If a limit can’t be determined, *sysconf()* returns -1\. It may also return
    -1 if an error occurred. (The only specified error is `EINVAL`, indicating that
    *name* is not valid.) To distinguish the case of an indeterminate limit from an
    error, we must set *errno* to 0 before the call; if the call returns -1 and *errno*
    is set after the call, then an error occurred.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法确定某个限制，*sysconf()* 返回 -1。如果发生错误，它也可能返回 -1。（唯一指定的错误是 `EINVAL`，表示 *name* 无效。）为了区分限制不确定的情况和错误，我们必须在调用之前将
    *errno* 设置为 0；如果调用返回 -1 且调用后 *errno* 被设置，则发生了错误。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The limit values returned by *sysconf()* (as well as *pathconf()* and *fpathconf()*)
    are always (*long*) integers. In the rationale text for *sysconf()*, SUSv3 notes
    that strings were considered as possible return values, but were rejected because
    of the complexity of implementation and use.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*sysconf()* 返回的限制值（以及 *pathconf()* 和 *fpathconf()*）始终是（*long*）整数。在 *sysconf()*
    的原理说明中，SUSv3 提到字符串曾被考虑作为可能的返回值，但由于实现和使用的复杂性而被拒绝。'
- en: '[Example 11-1](ch11.html#using_sysconf_open_parenthesis_close_par "Example 11-1. Using
    sysconf()") demonstrates the use of *sysconf()* to display various system limits.
    Running this program on one Linux 2.6.31/x86-32 system yields the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-1](ch11.html#using_sysconf_open_parenthesis_close_par "示例 11-1. 使用 sysconf()")
    演示了使用 *sysconf()* 来显示各种系统限制。在一台 Linux 2.6.31/x86-32 系统上运行此程序的输出如下：'
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Example 11-1. Using *sysconf()*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 11-1. 使用 *sysconf()*
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: SUSv3 requires that the value returned by *sysconf()* for a particular limit
    be constant for the lifetime of the calling process. For example, we can assume
    that the value returned for `_SC_PAGESIZE` won’t change while a process is running.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 要求 *sysconf()* 返回的特定限制值在调用进程的生命周期内保持不变。例如，我们可以假设在进程运行期间，返回的 `_SC_PAGESIZE`
    值不会发生变化。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'On Linux, there are some (sensible) exceptions to the statement that limit
    values are constant for the life of a process. A process can use *setrlimit()*
    ([Process Resource Limits](ch36.html#process_resource_limits "Process Resource
    Limits")) to change various process resource limits that affect limit values reported
    by *sysconf()*: `RLIMIT_NOFILE`, which determines the number of files the process
    may open (`_SC_OPEN_MAX`); `RLIMIT_NPROC` (a resource limit not actually specified
    in SUSv3), which is the per-user limit on the number of processes that may created
    by this process (`_SC_CHILD_MAX`); and `RLIMIT_STACK`, which, since Linux 2.6.23,
    determines the limit on the space allowed for the process’s command-line arguments
    and environment (`_SC_ARG_MAX`; see the *execve(2)* manual page for details).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，对于限制值在进程生命周期内应保持不变的说法，存在一些（合理的）例外。进程可以使用 *setrlimit()*（[进程资源限制](ch36.html#process_resource_limits
    "进程资源限制")）来更改影响 *sysconf()* 返回的限制值的各种进程资源限制：`RLIMIT_NOFILE`，决定进程可以打开的文件数量（`_SC_OPEN_MAX`）；`RLIMIT_NPROC`（SUSv3
    中未实际指定的资源限制），即此进程可以创建的最大子进程数（`_SC_CHILD_MAX`）；以及 `RLIMIT_STACK`，自 Linux 2.6.23
    起，决定允许进程的命令行参数和环境变量的空间限制（`_SC_ARG_MAX`；有关详细信息，请参见 *execve(2)* 手册页）。
- en: Retrieving File-Related Limits (and Options) at Run Time
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时获取与文件相关的限制（和选项）
- en: The *pathconf()* and *fpathconf()* functions allow an application to obtain
    the values of file-related limits at run time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*pathconf()* 和 *fpathconf()* 函数允许应用程序在运行时获取与文件相关的限制值。'
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both return value of limit specified by *name*, or -1 if limit is indeterminate
    or an error occurred
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 两者返回由 *name* 指定的限制值，若限制无法确定或发生错误，则返回 -1。
- en: The only difference between *pathconf()* and *fpathconf()* is the manner in
    which a file or directory is specified. For *pathconf()*, specification is by
    pathname; for *fpathconf()*, specification is via a (previously opened) file descriptor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*pathconf()* 和 *fpathconf()* 之间的唯一区别在于指定文件或目录的方式。对于 *pathconf()*，通过路径名指定；对于
    *fpathconf()*，通过（已打开的）文件描述符指定。'
- en: The *name* argument is one of the `_PC_*` constants defined in `<unistd.h>`,
    some of which are listed in [Table 11-1](ch11.html#selected_susv3_limits "Table 11-1. Selected
    SUSv3 limits"). [Table 11-2](ch11.html#details_of_selected_pathconf_open_parent
    "Table 11-2. Details of selected pathconf() _PC_* names") provides some further
    details about the `_PC_*` constants that were shown in [Table 11-1](ch11.html#selected_susv3_limits
    "Table 11-1. Selected SUSv3 limits").
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`*name*` 参数是 `<unistd.h>` 中定义的 `_PC_*` 常量之一，其中一些常量列在[表 11-1](ch11.html#selected_susv3_limits
    "表 11-1. 选定的 SUSv3 限制")中。[表 11-2](ch11.html#details_of_selected_pathconf_open_parent
    "表 11-2. 选定 pathconf() _PC_* 名称的详细信息")提供了有关在[表 11-1](ch11.html#selected_susv3_limits
    "表 11-1. 选定的 SUSv3 限制")中显示的 `_PC_*` 常量的更多细节。'
- en: The value of the limit is returned as the function result. We can distinguish
    between an indeterminate return and an error return in the same manner as for
    *sysconf()*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 限制值作为函数结果返回。我们可以像对待 *sysconf()* 一样区分不确定返回和错误返回。
- en: Unlike *sysconf()*, SUSv3 doesn’t require that the values returned by *pathconf()*
    and *fpathconf()* remain constant over the lifetime of a process, since, for example,
    a file system may be dismounted and remounted with different characteristics while
    a process is running.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *sysconf()* 不同，SUSv3 不要求 *pathconf()* 和 *fpathconf()* 返回的值在进程生命周期内保持不变，因为例如，文件系统可能在进程运行时被卸载并重新挂载，且具有不同的特性。
- en: Table 11-2. Details of selected *pathconf()* `_PC_*` names
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11-2. 选定的 *pathconf()* `_PC_*` 名称的详细信息
- en: '| Constant | Notes |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 常量 | 注释 |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `_PC_NAME_MAX` | For a directory, this yields a value for files in the directory.
    Behavior for other file types is unspecified. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `_PC_NAME_MAX` | 对于目录，此值表示目录中文件的最大数量。其他文件类型的行为未指定。 |'
- en: '| `_PC_PATH_MAX` | For a directory, this yields the maximum length for a relative
    pathname from this directory. Behavior for other file types is unspecified. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `_PC_PATH_MAX` | 对于目录，此值表示从该目录到相对路径名的最大长度。其他文件类型的行为未指定。 |'
- en: '| `_PC_PIPE_BUF` | For a FIFO or a pipe, this yields a value that applies to
    the referenced file. For a directory, the value applies to a FIFO created in that
    directory. Behavior for other file types is unspecified. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `_PC_PIPE_BUF` | 对于FIFO或管道，它会返回一个适用于被引用文件的值。对于目录，该值适用于在该目录中创建的FIFO。其他文件类型的行为未指定。
    |'
- en: '[Example 11-2](ch11.html#using_fpathconf_open_parenthesis_close_p "Example 11-2. Using
    fpathconf()") shows the use of *fpathconf()* to retrieve various limits for the
    file referred to by its standard input. When we run this program specifying standard
    input as a directory on an *ext2* file system, we see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-2](ch11.html#using_fpathconf_open_parenthesis_close_p "示例 11-2. 使用 fpathconf()")展示了使用*fpathconf()*来检索通过其标准输入引用的文件的各种限制。当我们运行该程序并指定标准输入为*ext2*文件系统上的一个目录时，我们看到如下输出：'
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Example 11-2. Using *fpathconf()*
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 11-2. 使用*fpathconf()*
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Indeterminate Limits
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不确定的限制
- en: 'On occasion, we may find that some system limit is not defined by an implementation
    limit constant (e.g., `PATH_MAX`), and that *sysconf()* or *pathconf()* informs
    us that the limit (e.g., `_PC_PATH_MAX`) is indeterminate. In this case, we can
    employ one of the following strategies:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能会发现某些系统限制没有由实现限制常量（例如，`PATH_MAX`）定义，并且*sysconf()*或*pathconf()*告诉我们该限制（例如，`_PC_PATH_MAX`）是不可确定的。在这种情况下，我们可以采用以下策略之一：
- en: When writing an application to be portable across multiple UNIX implementations,
    we could elect to use the minimum limit value specified by SUSv3\. These are the
    constants with names of the form `_POSIX_*_MAX`, described in Section 11.1. Sometimes,
    this approach may not be viable because the limit is unrealistically low, as in
    the cases of `_POSIX_PATH_MAX` and `_POSIX_OPEN_MAX`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写一个可移植的应用程序以适应多个UNIX实现时，我们可以选择使用SUSv3中指定的最小限制值。这些常量的名称形式为`_POSIX_*_MAX`，在第11.1节中有描述。有时，这种方法可能不可行，因为限制值不切实际地低，像是`_POSIX_PATH_MAX`和`_POSIX_OPEN_MAX`的情况。
- en: In some cases, a practical solution may be to ignore the checking of limits,
    and instead perform the relevant system or library function call. (Similar arguments
    can also apply with respect to some of the SUSv3 options described in Section
    11.5.) If the call fails and *errno* indicates that the error occurred because
    some system limit was exceeded, then we can try again, modifying the application
    behavior as necessary. For example, most UNIX implementations impose a limit on
    the number of realtime signals that can be queued to a process. Once this limit
    is reached, attempts to send further signals (using *sigqueue()*) fail with the
    error `EAGAIN`. In this case, the sending process could simply retry, perhaps
    after some delay interval. Similarly, attempting to open a file whose name is
    too long yields the error `ENAMETOOLONG`, and an application could deal with this
    by trying again with a shorter name.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，实际的解决方案可能是忽略限制的检查，而是直接执行相关的系统或库函数调用。（类似的论点也适用于第11.5节中描述的一些SUSv3选项。）如果调用失败并且*errno*表明错误发生是由于某个系统限制被超出，那么我们可以重试，根据需要修改应用程序的行为。例如，大多数UNIX实现对可以排队到进程的实时信号数有限制。一旦达到了此限制，尝试发送更多信号（使用*sigqueue()*）将失败，并显示错误`EAGAIN`。在这种情况下，发送信号的进程可以简单地重试，可能是在某个延迟间隔后。同样，尝试打开一个文件名过长的文件将产生错误`ENAMETOOLONG`，应用程序可以通过尝试使用较短的名称来处理这种情况。
- en: We can write our own program or function to either deduce or estimate the limit.
    In each case, the relevant *sysconf()* or *pathconf()* call is made, and if this
    limit is indeterminate, the function returns a “good guess” value. While not perfect,
    such a solution is often viable in practice.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以编写自己的程序或函数来推断或估算该限制。在每种情况下，都会调用相关的*sysconf()*或*pathconf()*，如果该限制是不可确定的，函数将返回一个“合理的猜测”值。虽然这种解决方案并不完美，但在实践中通常是可行的。
- en: We can employ a tool such as GNU *Autoconf*, an extensible tool that can determine
    the existence and settings of various system features and limits. The Autoconf
    program produces header files based on the information it determines, and these
    files can then be included in C programs. Further information about Autoconf can
    be found at [http://www.gnu.org/software/autoconf/](http://www.gnu.org/software/autoconf/).
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用像GNU *Autoconf*这样的工具，它是一个可扩展的工具，可以确定各种系统特性和限制的存在及设置。Autoconf程序基于它确定的信息生成头文件，这些文件随后可以包含在C程序中。有关Autoconf的更多信息可以在[http://www.gnu.org/software/autoconf/](http://www.gnu.org/software/autoconf/)找到。
- en: System Options
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统选项
- en: As well as specifying limits for various system resources, SUSv3 also specifies
    various options that a UNIX implementation may support. These include support
    for features such as realtime signals, POSIX shared memory, job control, and POSIX
    threads. With a few exceptions, implementations are not required to support these
    options. Instead, SUSv3 allows an implementation to advise—at both compile time
    and run time—whether it supports a particular feature.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为各种系统资源指定限制外，SUSv3 还指定了 UNIX 实现可能支持的各种选项。这些选项包括对实时信号、POSIX 共享内存、作业控制和 POSIX
    线程等特性的支持。除少数例外外，实施者不需要支持这些选项。相反，SUSv3 允许实施者在编译时和运行时指示是否支持特定特性。
- en: An implementation can advertise support for a particular SUSv3 option at compile
    time by defining a corresponding constant in `<unistd.h>`. Each such constant
    starts with a prefix that indicates the standard from which it originates (e.g.,
    `_POSIX_` or `_XOPEN_`).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以通过在`<unistd.h>`中定义相应的常量，在编译时声明对特定 SUSv3 选项的支持。每个这样的常量都以指示其来源标准的前缀开始（例如，`_POSIX_`
    或 `_XOPEN_`）。
- en: 'Each option constant, if defined, has one of the following values:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果定义了每个选项常量，它们的值将是以下之一：
- en: A value of -1 means that *the option is not supported*. In this case, header
    files, data types, and function interfaces associated with the option need not
    be defined by the implementation. We may need to handle this possibility by conditional
    compilation using `#if` preprocessor directives.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值为 -1 意味着*该选项不受支持*。在这种情况下，实施者不需要定义与该选项相关的头文件、数据类型和函数接口。我们可能需要通过使用`#if`预处理指令来处理这种可能性。
- en: A value of 0 means that *the option may be supported*. An application must check
    at run time to see whether the option is supported.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值为 0 意味着*该选项可能受支持*。应用程序必须在运行时检查该选项是否受支持。
- en: A value greater than 0 means that *the option is supported*. All header files,
    data types, and function interfaces associated with this option are defined and
    behave as specified. In many cases, SUSv3 requires that this positive value be
    `200112L`, a constant corresponding to the year and month number in which SUSv3
    was approved as a standard. (The analogous value for SUSv4 is `200809L`.)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于 0 的值意味着*该选项受支持*。与该选项相关的所有头文件、数据类型和函数接口都已定义并按指定方式运行。在许多情况下，SUSv3 要求该正值为 `200112L`，这是与
    SUSv3 被批准为标准的年份和月份号对应的常量。（SUSv4 对应的值为 `200809L`。）
- en: Where a constant is defined with the value 0, an application can use the *sysconf()*
    and *pathconf()* (or *fpathconf()*) functions to check at run time whether the
    option is supported. The *name* arguments passed to these functions generally
    have the same form as the corresponding compile-time constants, but with the prefix
    replaced by `_SC_` or `_PC_`. The implementation must provide at least the header
    files, constants, and function interfaces necessary to perform the run-time check.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果常量的值为 0，应用程序可以使用*sysconf()*和*pathconf()*（或*fpathconf()*）函数在运行时检查该选项是否受支持。传递给这些函数的*name*参数通常与相应的编译时常量相同，但前缀替换为`_SC_`或`_PC_`。实现必须至少提供必要的头文件、常量和函数接口，以便执行运行时检查。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: SUSv3 is unclear on whether an undefined option constant has the same meaning
    as defining the constant with the value 0 (“the option may be supported”) or with
    the value -1 (“the option is not supported”). The standards committee subsequently
    resolved that this case should mean the same as defining the constant with the
    value -1, and SUSv4 states this explicitly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 对于未定义的选项常量是否与定义常量为值 0（“该选项可能受支持”）或值 -1（“该选项不受支持”）有相同的含义并不明确。标准委员会随后决定该情况应表示与定义常量为值
    -1 相同，SUSv4 明确声明了这一点。
- en: '[Table 11-3](ch11.html#selected_susv3_options "Table 11-3. Selected SUSv3 options")
    lists some of the options specified in SUSv3\. The first column of the table gives
    the name of the associated compile-time constant for the option (defined in `<unistd.h>`),
    as well as the corresponding *sysconf()* (`_SC_*`) or *pathconf()* (`_PC_*`) *name*
    argument. Note the following points regarding specific options:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 11-3](ch11.html#selected_susv3_options "表 11-3. 选定的 SUSv3 选项")列出了 SUSv3
    中指定的一些选项。表格的第一列给出了与选项关联的编译时常量名称（在`<unistd.h>`中定义），以及相应的*sysconf()*（`_SC_*`）或*pathconf()*（`_PC_*`）*name*参数。请注意以下有关特定选项的要点：'
- en: Certain options are required by SUSv3; that is, the compile-time constant always
    evaluates to a value greater than 0\. Historically, these options were truly optional,
    but nowadays they are not. These options are marked with the character `+` in
    the *Notes* column. (In SUSv4, a range of options that were optional in SUSv3
    become mandatory.)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些选项是SUSv3要求的；也就是说，编译时常量始终评估为大于0的值。从历史上看，这些选项曾经是可选的，但现在它们不是了。这些选项在*备注*列中以字符`+`标记。（在SUSv4中，SUSv3中可选的多个选项变为强制性选项。）
- en: Note
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although such options are required by SUSv3, some UNIX systems may nevertheless
    be installed in a nonconforming configuration. Thus, for portable applications,
    it may be worth checking whether an option that affects the application is supported,
    regardless of whether the standard requires that option.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这些选项是SUSv3要求的，但某些UNIX系统可能仍然以不符合规范的配置安装。因此，对于便携式应用程序，检查影响应用程序的选项是否受支持可能是值得的，无论标准是否要求该选项。
- en: For certain options, the compile-time constant must have a value other than
    -1\. In other words, either the option must be supported or support at run time
    must be checkable. These options are marked with the character `*` in the *Notes*
    column.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于某些选项，编译时常量必须具有非-1的值。换句话说，选项必须得到支持，或者必须能够在运行时检查是否支持这些选项。这些选项在*备注*列中以字符`*`标记。
- en: Table 11-3. Selected SUSv3 options
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11-3. 选定的SUSv3选项
- en: '| Option (constant) name (*sysconf()* / *pathconf()* name) | Description |
    Notes |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 选项（常量）名称 (*sysconf()* / *pathconf()* 名称) | 描述 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `_POSIX_ASYNCHRONOUS_IO (_SC_ASYNCHRONOUS_IO)` | *Asynchronous I/O* |   |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_ASYNCHRONOUS_IO (_SC_ASYNCHRONOUS_IO)` | *异步I/O* |   |'
- en: '| `_POSIX_CHOWN_RESTRICTED (_PC_CHOWN_RESTRICTED)` | Only privileged processes
    can use *chown()* and *fchown()* to change the user ID and group ID of a file
    to arbitrary values ([Changing File Ownership: *chown()*, *fchown()*, and *lchown()*](ch15.html#changing_file_ownership_colon_chown_open
    "Changing File Ownership: chown(), fchown(), and lchown()")) | `*` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_CHOWN_RESTRICTED (_PC_CHOWN_RESTRICTED)` | 只有特权进程才能使用*chown()*和*fchown()*将文件的用户ID和组ID更改为任意值
    ([更改文件所有权：*chown()*, *fchown()* 和 *lchown()*](ch15.html#changing_file_ownership_colon_chown_open
    "Changing File Ownership: chown(), fchown(), and lchown()")) | `*` |'
- en: '| `_POSIX_JOB_CONTROL (_SC_JOB_CONTROL)` | *Job Control* ([Job Control](ch34.html#job_control
    "Job Control")) | `+` |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_JOB_CONTROL (_SC_JOB_CONTROL)` | *作业控制* ([作业控制](ch34.html#job_control
    "Job Control")) | `+` |'
- en: '| `_POSIX_MESSAGE_PASSING (_SC_MESSAGE_PASSING)` | *POSIX Message Queues* ([Chapter 52](ch52.html
    "Chapter 52. POSIX Message Queues")) |   |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_MESSAGE_PASSING (_SC_MESSAGE_PASSING)` | *POSIX消息队列* ([第52章](ch52.html
    "Chapter 52. POSIX Message Queues")) |   |'
- en: '| `_POSIX_PRIORITY_SCHEDULING (_SC_PRIORITY_SCHEDULING)` | *Process Scheduling*
    ([Realtime Process Scheduling API](ch35.html#realtime_process_scheduling_api "Realtime
    Process Scheduling API")) |   |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_PRIORITY_SCHEDULING (_SC_PRIORITY_SCHEDULING)` | *进程调度* ([实时进程调度API](ch35.html#realtime_process_scheduling_api
    "Realtime Process Scheduling API")) |   |'
- en: '| `_POSIX_REALTIME_SIGNALS (_SC_REALTIME_SIGNALS)` | *Realtime Signals Extension*
    ([Realtime Signals](ch22.html#realtime_signals "Realtime Signals")) |   |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_REALTIME_SIGNALS (_SC_REALTIME_SIGNALS)` | *实时信号扩展* ([实时信号](ch22.html#realtime_signals
    "Realtime Signals")) |   |'
- en: '| `_POSIX_SAVED_IDS` (none) | Processes have saved set-user-IDs and saved set-group-IDs
    ([Saved Set-User-ID and Saved Set-Group-ID](ch09.html#saved_set-user-id_and_saved_set-group-id
    "Saved Set-User-ID and Saved Set-Group-ID")) | `+` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_SAVED_IDS` (无) | 进程具有已保存的用户ID和已保存的组ID ([已保存的用户ID和已保存的组ID](ch09.html#saved_set-user-id_and_saved_set-group-id
    "Saved Set-User-ID and Saved Set-Group-ID")) | `+` |'
- en: '| `_POSIX_SEMAPHORES (_SC_SEMAPHORES)` | *POSIX Semaphores* ([Chapter 53](ch53.html
    "Chapter 53. POSIX Semaphores")) |   |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_SEMAPHORES (_SC_SEMAPHORES)` | *POSIX信号量* ([第53章](ch53.html "Chapter
    53. POSIX Semaphores")) |   |'
- en: '| `_POSIX_SHARED_MEMORY_OBJECTS (_SC_SHARED_MEMORY_OBJECTS)` | *POSIX Shared
    Memory Objects*([Chapter 54](ch54.html "Chapter 54. POSIX Shared Memory")) |  
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_SHARED_MEMORY_OBJECTS (_SC_SHARED_MEMORY_OBJECTS)` | *POSIX共享内存对象*
    ([第54章](ch54.html "Chapter 54. POSIX Shared Memory")) |   |'
- en: '| `_POSIX_THREADS (_SC_THREADS)` | *POSIX Threads* |   |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `_POSIX_THREADS (_SC_THREADS)` | *POSIX线程* |   |'
- en: '| `_XOPEN_UNIX` (`_SC_XOPEN_UNIX`) | The XSI extension is supported ([SUSv3
    and POSIX.1-2001](ch01.html#susv3_and_posix.1-2001 "SUSv3 and POSIX.1-2001"))
    |   |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `_XOPEN_UNIX` (`_SC_XOPEN_UNIX`) | 支持XSI扩展 ([SUSv3和POSIX.1-2001](ch01.html#susv3_and_posix.1-2001
    "SUSv3 and POSIX.1-2001")) |   |'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: SUSv3 specifies limits that an implementation may enforce and system options
    that an implementation may support.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3规定了实现可能强制执行的限制以及实现可能支持的系统选项。
- en: Often, it is desirable not to hard-code assumptions about system limits and
    options into a program, since these may vary across implementations and also on
    a single implementation, either at run time or across file systems. Therefore,
    SUSv3 specifies methods by which an implementation can advertise the limits and
    options it supports. For most limits, SUSv3 specifies a minimum value that all
    implementations must support. Additionally, each implementation can advertise
    its implementation-specific limits and options at compile time (via a constant
    definition in `<limits.h>` or `<unistd.h>`) and/or run time (via a call to *sysconf()*,
    *pathconf()*, or *fpathconf()*). These techniques may similarly be used to find
    out which SUSv3 options an implementation supports. In some cases, it may not
    be possible to determine a particular limit using either of these methods. For
    such indeterminate limits, we must resort to ad hoc techniques to determine the
    limit to which an application should adhere.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，不希望将关于系统限制和选项的假设硬编码到程序中，因为这些假设在不同的实现中可能会有所不同，并且在同一个实现中，也可能在运行时或不同的文件系统之间有所变化。因此，SUSv3规定了一些方法，通过这些方法，某个实现可以公开它所支持的限制和选项。对于大多数限制，SUSv3规定了一个所有实现必须支持的最小值。此外，每个实现可以在编译时（通过在`<limits.h>`或`<unistd.h>`中定义常量）和/或运行时（通过调用*sysconf()*、*pathconf()*或*fpathconf()*）公开其特定实现的限制和选项。这些技术也可以类似地用于查找某个实现支持的SUSv3选项。在某些情况下，可能无法通过这两种方法之一确定特定的限制。对于这些无法确定的限制，我们必须
    resort to ad hoc 技术来确定应用程序应该遵守的限制。
- en: Further information
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多信息
- en: '[Chapter 2](ch02.html "Chapter 2. Fundamental Concepts") of [Stevens & Rago,
    2005] and [Chapter 2](ch02.html "Chapter 2. Fundamental Concepts") of [Gallmeister,
    1995] cover similar ground to this chapter. [Lewine, 1991] also provides much
    useful (although now slightly outdated) background. Some information about POSIX
    options with notes on *glibc* and Linux details can be found at [http://people.redhat.com/drepper/posix-option-groups.html](http://people.redhat.com/drepper/posix-option-groups.html).
    The following Linux manual pages are also relevant: *sysconf(3)*, *pathconf(3)*,
    *feature_test_macros(7)*, *posixoptions(7)*, and *standards(7)*.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 基本概念")来自[Stevens & Rago, 2005]和[第2章](ch02.html "第2章.
    基本概念")来自[Gallmeister, 1995]涵盖的内容与本章类似。[Lewine, 1991]也提供了许多有用的（尽管现在略显过时的）背景信息。有关POSIX选项以及关于*glibc*和Linux细节的一些信息可以在[http://people.redhat.com/drepper/posix-option-groups.html](http://people.redhat.com/drepper/posix-option-groups.html)找到。以下Linux手册页也与此相关：*sysconf(3)*、*pathconf(3)*、*feature_test_macros(7)*、*posixoptions(7)*和*standards(7)*。'
- en: The best sources of information (though sometimes difficult reading) are the
    relevant parts of SUSv3, particularly [Chapter 2](ch02.html "Chapter 2. Fundamental
    Concepts") from the Base Definitions (XBD), and the specifications for *<unistd.h>*,
    *<limits.h>*, *sysconf()*, and *fpathconf()*. [Josey, 2004] provides guidance
    on the use of SUSv3.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的信息来源（尽管有时难以阅读）是SUSv3的相关部分，特别是来自基本定义（XBD）的[第2章](ch02.html "第2章. 基本概念")，以及*<unistd.h>*、*<limits.h>*、*sysconf()*和*fpathconf()*的规范。[Josey,
    2004]提供了关于使用SUSv3的指导。
- en: Exercises
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Try running the program in [Example 11-1](ch11.html#using_sysconf_open_parenthesis_close_par
    "Example 11-1. Using sysconf()") on other UNIX implementations if you have access
    to them.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可以访问其他UNIX实现，尝试在其他UNIX实现上运行[示例 11-1](ch11.html#using_sysconf_open_parenthesis_close_par
    "示例 11-1. 使用 sysconf()")中的程序。
- en: Try running the program in [Example 11-2](ch11.html#using_fpathconf_open_parenthesis_close_p
    "Example 11-2. Using fpathconf()") on other file systems.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在其他文件系统上运行[示例 11-2](ch11.html#using_fpathconf_open_parenthesis_close_p "示例
    11-2. 使用 fpathconf()")中的程序。
