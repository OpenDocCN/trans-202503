- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Building and Protecting Momentum
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建与保护动力
- en: This book mainly focuses on big projects. When I discuss upgrades, I’m not talking
    about running a package manager to install the latest versions of your dependencies.
    When I mention deprecations, I’m not talking about versioning your API. Much of
    the advice in this book will work regardless of project size, but it is primarily
    intended for big ones.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要关注大型项目。当我讨论升级时，我指的不是运行包管理器来安装最新版本的依赖包。当我提到弃用时，我不是在讨论为你的 API 进行版本控制。本书中的大部分建议无论项目规模如何都适用，但它主要是针对大型项目的。
- en: 'Chapter 3 covered developing strategy around the engineering challenge posed
    by your legacy system. In that chapter, I described the shape and nature of different
    types of approaches and how to look at such a challenge holistically. This chapter
    describes a similar approach from the organizational side: how to create a plan
    that builds momentum and keeps teams focused and optimistic even as the work becomes
    difficult.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第三章讨论了围绕遗留系统所带来的工程挑战发展策略。在那一章中，我描述了不同类型方法的形态和性质，并讲解了如何从整体角度看待这种挑战。本章则从组织角度描述了一种类似的方式：如何制定一个能够推动动力、保持团队专注和乐观的计划，即使工作变得艰难。
- en: The funny thing about big legacy modernization projects is that technologists
    suddenly seem drawn to strategies that they know do not work in other contexts.
    Few modern software engineers would forgo Agile development to spend months planning
    exactly what an architecture should look like and try to build a complete product
    all at once. And yet, when asked to modernize an old system, suddenly everyone
    is breaking things down into sequential phases that are completely dependent on
    one another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大型遗留系统现代化项目的有趣之处在于，技术人员似乎突然间开始倾向于那些他们知道在其他情况下无效的策略。很少有现代软件工程师会放弃敏捷开发，去花费数月时间规划架构的具体样貌，并试图一次性构建一个完整的产品。然而，当被要求进行旧系统现代化时，突然间每个人都开始将其分解成相互依赖的连续阶段。
- en: Agile approaches to legacy challenges are not well publicized. Any number of
    books are available that describe how you build software. A few exist that cover
    how to maintain software, and even fewer have been published that explain how
    to tackle the challenges of rebuilding software when it has been left to rot or
    was built wrong in the first place.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 面对遗留问题，敏捷方法并没有得到广泛宣传。市面上有很多书籍描述如何构建软件。也有一些书籍介绍如何维护软件，甚至更少有书籍讲解如何处理当软件被遗弃或最初构建时出现问题时，重建软件所面临的挑战。
- en: In truth, what works when rebuilding a system is not all that different from
    what worked to build it in the first place. You need to keep the scope small,
    and you need to iterate on your successes. This might seem unnecessary, because
    the old system and its history have defined all your requirements for you. Assuming
    you fully understand the requirements because an existing system is operational
    is a critical mistake. One of the advantages of building a new system is that
    the team is more aware of the unknowns. Existing systems can be a distraction.
    The software team treats the full-featured implementation of it as the MVP, no
    matter how large or how complex that existing system actually is. It’s simply
    too much information to manage. People become overwhelmed, and they get discouraged
    and demoralized. The project stalls and reinforces the notion that the modernization
    work is impossible.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，重建一个系统时有效的方法与当初建立它时所使用的方法并没有太大不同。你需要保持小范围，并且不断迭代你的成功。这个做法看起来可能不必要，因为旧系统及其历史已经为你定义了所有的需求。假设仅仅因为一个现有系统可以运行，你就完全理解了这些需求，这是一个严重的错误。建立新系统的一个优势是团队对未知因素有更清晰的认识。现有系统可能会成为干扰。软件团队把它的全功能实现当作最小可行产品（MVP），不管那个现有系统有多大或多复杂。简而言之，信息量过大，难以管理。人们会感到不知所措，变得沮丧、丧失士气。项目停滞不前，这也加固了“现代化工作不可能完成”的观念。
- en: 'Momentum Builder: The Bliss of Measurable Problems'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动力构建者：可衡量问题的乐趣
- en: There are a couple different ways to restrict scope when an existing system
    looms in the background. The most straightforward approach is to define an MVP
    from the existing system’s array of features. Pare it down into a lighter-weight
    version of itself that becomes the first iteration and then gradually add back
    features. While sensible, this strategy requires discipline and strong leadership.
    All users of the existing system will naturally see the features they use as the
    most critical and lobby to get them scheduled for the earliest possible iteration.
    The process becomes political very quickly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当现有系统在背景中存在时，有几种不同的方法可以限制范围。最直接的方法是从现有系统的功能阵列中定义一个MVP（最小可行产品）。将其简化成一个更轻量的版本，作为第一版，然后逐步添加回功能。尽管这种方法合理，但它需要纪律性和强有力的领导力。现有系统的所有用户自然会认为他们使用的功能是最关键的，并会游说尽早将其安排到第一版。这一过程很快就会变得政治化。
- en: Instead, I prefer to restrict the scope by defining one measurable problem we
    are trying to solve. Building a modern infrastructure is not a goal. Different
    people naturally are going to disagree on which standards and best practices should
    be enforced and on how strongly they should be enforced. Few real-life systems
    completely conform to an ideal; there are always at least one or two places in
    systems where a nonstandard approach was used to make a specific function or integration
    work. Everyone knows these compromises exist and that they probably will continue
    to exist in some form or another in the new system, but it’s unlikely the organization
    will be able to agree on when and where to introduce them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我更倾向于通过定义一个可以衡量的问题来限制范围。构建现代化基础设施不是一个目标。不同的人自然会就应该执行哪些标准和最佳实践以及应该执行多么严格产生分歧。很少有现实中的系统完全符合理想标准；总是至少有一两处地方使用了非标准的方法来使某个特定功能或集成得以工作。每个人都知道这些妥协的存在，并且它们可能以某种形式或另一种形式在新系统中继续存在，但组织不太可能就何时以及在哪些地方引入这些妥协达成共识。
- en: But if all the work is structured around one critical problem that you can measure
    and monitor, these conversations become much easier. You start by looking for
    as many opportunities as possible to make the problem better and prioritize them
    by amount of estimated impact. When there is a disagreement on approach or technology,
    the criteria for the decision becomes “Which one moves the needle further?”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果所有的工作都围绕一个可以衡量和监控的关键问题来构建，那么这些对话会变得更容易。你从寻找尽可能多的机会开始，以改善这个问题，并按预计影响的大小进行优先排序。当在方法或技术上出现分歧时，决策的标准变成了“哪个能更进一步推动进展？”
- en: Legacy modernization projects go better when the individuals contributing to
    them feel comfortable being autonomous and when they can adapt to challenges and
    surprises as they present themselves because they understand what the priorities
    are. The more decisions need to go up to a senior group—be that VPs, enterprise
    architects, or a CEO—the more delays and bottlenecks appear. The more momentum
    is lost, and people stop believing success is possible. When people stop believing
    success is possible, they stop bringing their best to work. Measurable problems
    empower team members to make decisions. Everyone has agreed that metric X needs
    to be better; any actions taken to improve metric X need not be run up the chain
    of command.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 继承的现代化项目进行得更顺利时，当贡献者感到可以自主工作，并且能够根据挑战和意外的出现进行调整，因为他们明白优先事项是什么。需要向高级团队汇报的决策越多——无论是副总裁、企业架构师，还是首席执行官——延迟和瓶颈就越多。失去的动力越大，人们就越不相信成功是可能的。当人们不再相信成功是可能的，他们就会停止全力以赴地工作。可衡量的问题赋予团队成员做决策的权力。大家已经达成一致，指标X需要改进；任何为改善指标X而采取的行动无需向上层报告。
- en: Measurable problems create clearly articulated goals. Having a goal means you
    can define what kind of value you expect the project to add and whom that value
    will benefit most. Will modernization make things faster for customers? Will it
    improve scaling so you can sign bigger clients? Will it save people’s lives? Or,
    will it just mean that someone gets to give a conference talk or write an article
    about switching from technology A to technology B?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可衡量的问题创造了明确表述的目标。有了目标，你就可以定义期望项目带来什么样的价值，以及这些价值将最有利于谁。现代化会让客户的体验更快吗？它能提高扩展性，帮助你签下更大的客户吗？它会拯救人们的生命吗？或者，它只是意味着某人可以进行一次会议演讲或撰写一篇关于从技术A切换到技术B的文章？
- en: Anatomy of the Measurable Problem
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可衡量问题的结构
- en: It’s natural to want to approach architecture in a holistic way. Our minds love
    order and patterns, the neatness of everything being consistent and well thought
    out. But systems are like houses; they never really stay perfectly clean for long.
    The very act of using something forces it to change. You have less memory and
    less storage, your hardware decays, and you’ve added new features, which mean
    more lines of code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想要以整体方式处理架构是很自然的。我们的思维喜欢秩序和模式，一切都井然有序、深思熟虑的整洁感。但系统就像房子；它们永远不会保持完全干净太久。使用某样东西本身就迫使它发生变化。你会有更少的内存和存储，硬件会衰退，而且你增加了新功能，这意味着更多的代码行。
- en: Good modernization work needs to suppress that impulse to create elegant comprehensive
    architectures up front. You can have your neat and orderly system, but you won’t
    get it from designing it that way in the beginning. Instead, you’ll build it through
    iteration.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的现代化工作需要抑制一开始就创建优雅而全面架构的冲动。你可以拥有一个整洁有序的系统，但你不会通过一开始就按照这种方式设计它来实现这一点。相反，你需要通过迭代来构建它。
- en: The measurable problem is what will guide your teams through the modernization
    effort. When the legacy system was new, its footprint and the team that ran it
    were both small. As the system grew, internal politics grew with it. In some cases,
    entire business units were born or rearranged to follow the pattern of the technology.
    Getting all those people to agree and march in the same direction is difficult.
    The strength of the measurable problem is that it is objective and irrefutable,
    and therefore, it helps the team navigate the internal politics they have inherited
    from the existing system. People can and will disagree on whether the measurable
    problem is the right problem to solve, but that shifts the burden of mediating
    those disagreements away from the engineering team and toward the senior executive
    who signed off on focusing modernization activities on that measurable problem
    in the first place.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可衡量的问题将引导你的团队完成现代化工作。当遗留系统刚推出时，它的规模和运维团队都很小。随着系统的增长，内部政治也随之增长。在某些情况下，整个业务单元的诞生或重组是为了跟随技术模式的发展。让所有这些人达成一致并朝同一个方向前进是非常困难的。可衡量问题的优势在于它是客观且不可辩驳的，因此，它有助于团队在现有系统遗留下来的内部政治中找到导航方向。人们可能会对可衡量的问题是否是正确的解决问题方向产生分歧，但这将把调解分歧的责任从工程团队转移到最初批准将现代化活动聚焦于该可衡量问题的高级管理者身上。
- en: The last benefit of measurable problems is that positive results are not linked
    to feature launches. When the team tries to create an MVP from an existing system,
    the organization will pressure them to achieve feature parity with the existing
    system as quickly as possible. Success or failure becomes tied to launches, which
    encourages cut corners and technical debt.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可衡量问题的最后一个好处是，正面结果与功能发布无关。当团队尝试从现有系统创建最小可行产品（MVP）时，组织会迫使他们尽快实现与现有系统的功能对等。成功或失败变得与发布挂钩，这促使了减少投入和技术债务的发生。
- en: In all likelihood, the business side of the organization does not understand
    what’s wrong with the existing system. Rolling out features they already have
    is not something they will celebrate. To build momentum behind a modernization
    effort, it’s essential to communicate how modernizing will improve the status
    quo. Defining a measurable problem explains to the business side of the organization
    how the existing system could be better. Once the metrics and criteria are defined,
    any given action either moves the needle in a positive direction or doesn’t. Missteps
    are easier to identify, define, and correct. Everyone in the organization can
    figure out how things are going by looking at the metrics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，组织的业务方面并不理解现有系统的问题所在。推出他们已经拥有的功能不是他们会庆祝的事情。为了推动现代化工作取得进展，必须清晰地传达现代化如何改善现状。定义一个可衡量的问题向业务方面解释现有系统如何能够更好。一旦指标和标准被定义，任何给定的行动要么朝着积极方向发展，要么不会。错误更容易被识别、定义和纠正。组织中的每个人都可以通过查看指标来了解情况。
- en: But how does one identify a good measurable problem?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何识别一个好的可衡量问题呢？
- en: The easiest candidates are ones that reflect the business or mission goals of
    the organization. If you’re thinking about rearchitecting a system and cannot
    tie the effort back to some kind of business goal, you probably shouldn’t be doing
    it at all.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的候选问题是那些能反映组织的业务或使命目标的问题。如果你在考虑重构系统，却无法将这项工作与某种业务目标联系起来，那你可能根本不该做这件事。
- en: When I was working for the government, one of the most inspiring projects I
    saw was the effort to modernize the immigration system enough to meet a stretch
    goal for refugee resettlement the Obama administration had set. The system itself,
    even just the subset that concerned refugees, was large and complex. Engineers
    were overwhelmed by the scope of it and the problems that it experienced from
    time to time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在政府工作时，我看到的最鼓舞人心的项目之一是努力现代化移民系统，以便达到奥巴马政府设定的难民重新安置的挑战目标。即便只是涉及难民的子系统，整个系统也庞大复杂。工程师们被它的范围以及它偶尔遇到的问题所压倒。
- en: But the challenge of this particular project was not to make that whole system
    better; it was to get that whole system to process a specific type of application
    faster. Defining the goal in this way created a much clearer scope for the effort.
    The team started by doing an analysis of where the bottlenecks in application
    processing were, and then they began precision-targeting those areas, seeking
    only to make iterative improvements. Conversations about prioritization focused
    on what changes were likely to increase the number of applications processed—numbers
    anyone on the team could look at and refer to as needed. As they worked toward
    this specific goal, the team passed up a lot of opportunities to make much needed
    infrastructure changes, because doing so would not produce the results where they
    needed them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个项目的挑战不是让整个系统变得更好；而是让整个系统处理特定类型的应用程序更加高效。以这种方式定义目标为努力创造了更清晰的范围。团队首先分析了应用处理中的瓶颈，然后开始精准地针对这些领域，寻求仅做逐步改进。关于优先级的讨论集中在哪些变化可能会增加处理的应用程序数量——这些数字是团队中的任何人都可以查看和参考的。当他们朝着这个具体目标努力时，团队放弃了许多急需的基础设施变更机会，因为这样做无法在需要的地方产生结果。
- en: At first glance, this approach might seem unwise or even irresponsible, but
    the number-one killer of big efforts is not technical failure. It’s loss of momentum.
    To be successful at those long-term rearchitecting challenges, the team needs
    to establish a feedback loop that continuously builds on and promotes their track
    record of success. When it became clear that the refugee team was not only going
    to reach the stretch goal—a number that many felt was impossible—but that they
    were actually going to overshoot it by a few thousand people, other teams that
    were better positioned to make those much needed infrastructure changes started
    coming to work with renewed energy. Don’t lose sight of the fact that modernization
    projects are long and typically involve coordinating multiple teams. Being strategically
    narrow-minded to demonstrate value and build momentum is not a bad idea.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，这种方法可能显得不明智甚至不负责任，但大规模努力的头号杀手并不是技术失败，而是失去动力。要在长期的架构重建挑战中取得成功，团队需要建立一个反馈循环，不断基于并促进他们的成功记录。当显而易见的是，难民团队不仅会达到这个挑战目标——一个许多人认为不可能的数字——而且他们实际上会超额完成，超过几千人时，其他更有条件做出那些急需的基础设施改变的团队也开始以新的动力投入工作。不要忽视现代化项目通常是长期的，且通常涉及协调多个团队。战略性地狭隘一些以展示价值并建立动力并不是坏主意。
- en: Good measurable problems have to be focused on problems that your engineers
    give a shit about. Number of refugees saved from ISIS was an easy goal to rally
    people around. In all likelihood, you won’t be able to say your database migration
    is going to do that, but engineers feel passionate about other things. Talk to
    them and figure out what those are.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的可衡量问题必须聚焦于你们工程师关心的问题。拯救免于ISIS的难民数量是一个容易激起人们关注的目标。很可能，你无法说你的数据库迁移能做到这一点，但工程师们对其他事情充满热情。与他们交谈，找出那些事情是什么。
- en: 'Momentum Killer: The Team Cannot Agree'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动力杀手：团队无法达成一致
- en: When I moved from being an individual contributor to running engineering teams,
    my role in technical conversations shifted. I saw better outcomes when I focused
    on facilitating a productive conversation rather than vying to be the decision-maker.
    Have you ever found yourself in a meeting that felt like it was running around
    in circles? Meetings where people seemed to be competing to see who could predict
    the most obscure potential failure? Meetings where past decisions were relitigated
    and everyone walked away less certain as to what the next steps were? Facilitating
    technical conversations is more important than being the decision-maker because
    unproductive and frustrating meetings demoralize teams.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我从一个个人贡献者转变为领导工程团队时，我在技术讨论中的角色发生了变化。当我专注于促进富有成效的对话，而不是争夺决策者角色时，我看到更好的结果。你有没有曾经参加过一个感觉像是在原地打转的会议？那种大家似乎在竞争，看谁能预测出最隐晦的潜在失败的会议？那种过去的决策被重新审议，最后每个人都不确定下一步该做什么的会议？促进技术对话比当决策者更为重要，因为无效且令人沮丧的会议会让团队士气低落。
- en: Because large systems are typically complex, out of control meetings can derail
    decision-making about the technology that backs them. Measurable problems help
    people prioritize what improvements to make and in which order, but when it comes
    to the nitty-gritty implementation details, it is not always possible to predict
    which options will have the biggest impact. Reasonable people are going to disagree,
    but pointless arguments need to be defused before they do too much damage.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大型系统通常比较复杂，失控的会议可能会使得关于支撑它们的技术的决策偏离轨道。可衡量的问题帮助人们优先考虑要改进的内容以及改进的顺序，但当涉及到具体的实施细节时，并不总是能够预测哪些选项会产生最大的影响。理智的人会有不同意见，但无意义的争论需要在造成过多损害之前化解。
- en: 'Step 1: Define a Scope'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：定义范围
- en: The best way to handle dysfunctional decision-making meetings is to prevent
    them from happening in the first place by defining and enforcing a scope. I usually
    start meetings by listing the desired outcomes, the outcomes I would be satisfied
    with, and what’s out of scope for this decision. I may even write this information
    on a whiteboard or put it in a PowerPoint slide for reference. What do we want
    to accomplish in this meeting? If we get stuck, what other outcomes would be acceptable?
    Sometimes a team cannot agree because there is an actual blocker to agreement—a
    gray area that requires more research, for example. If that happens, what is the
    smallest decision we could make and still feel like the meeting was productive?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 处理不良决策会议的最佳方式是从一开始就防止它们发生，方法是定义并执行会议范围。我通常会在会议开始时列出预期的结果、我会满意的结果，以及这个决策的范围外内容。我甚至可能会把这些信息写在白板上，或放入
    PowerPoint 幻灯片中以供参考。我们想在这次会议中达成什么目标？如果我们卡住了，哪些结果是可以接受的？有时团队无法达成一致，因为存在真正的阻碍因素——比如一个需要更多研究的灰色区域。如果发生这种情况，我们能做出什么最小的决定，同时还能让会议看起来是有成效的？
- en: Once the meeting has a scope, I define areas that we should be able to agree
    are outside that scope. Often out-of-scope issues are decisions that are neither
    blockers nor dependencies. The hard ones do seem to be related to in-scope issues,
    so when in doubt, the team needs to be able to articulate clearly how our in-scope
    decisions are affected by the issue being raised. For example, I had an engineering
    team that was charged with creating a seamless platform where engineers could
    run commands and have the heavy lifting of building, configuring, and deploying
    done for them. At the same time, the organization was also thinking about phasing
    out one programming language in favor of another. To accomplish the first goal,
    we needed to make a few decisions about the architecture of the tool. Would we
    build a suite of separate tools, or would we build one tool that we could add
    functionality to? Whatever design pattern we chose could have been done equally
    well in either language, so any debate about programming languages would bring
    us no closer to reaching a decision on what we wanted the meeting to be about.
    Discussions about programming languages were out of scope. Although the issue
    would ultimately affect implementation of the design pattern we selected, it was
    neither a blocker nor a dependency when picking the pattern.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦会议确定了范围，我会定义出那些我们应该一致认为不属于该范围的领域。通常，超出范围的问题是既不构成阻碍也不依赖于其他问题的决策。这些困难的问题似乎通常与会议范围内的议题有关，因此在有疑问时，团队需要能够清晰地表述出我们范围内的决策是如何受到提出的问题影响的。例如，我曾经有一个工程团队，负责创建一个无缝的平台，工程师可以在上面运行命令，平台会自动完成构建、配置和部署等繁重工作。与此同时，组织也在考虑逐步淘汰一种编程语言，转而采用另一种编程语言。为了实现第一个目标，我们需要就工具架构做出一些决策。我们是构建一组独立的工具，还是构建一个可以扩展功能的单一工具？无论我们选择什么设计模式，都可以在两种语言中同样完成，因此关于编程语言的任何争论都不会使我们更接近决定会议讨论的主题。关于编程语言的讨论是超出范围的。尽管这个问题最终会影响我们选择的设计模式的实现，但在选择设计模式时，它既不是阻碍因素，也不是依赖因素。
- en: 'With my engineers, I set the expectation that to have a productive, free-flowing
    debate, we need to be able to sort comments and issues into in-scope and out-of-scope
    quickly and easily as a team. I call this technique “true but irrelevant,” because
    I can typically sort meeting information into three buckets: things that are true,
    things that are false, and things that are true but irrelevant. Irrelevant is
    just a punchier way of saying out of scope.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在与我的工程师们一起工作时，我设定了一个期望：为了进行富有成效、自由流畅的辩论，我们需要能够迅速且轻松地将评论和问题分为范围内和范围外的内容。我把这种技巧称为“真实但不相关”，因为我通常可以将会议中的信息分为三个类别：真实的、虚假的和真实但不相关的。不相关只是说超出范围的一种更简洁的表达方式。
- en: The purpose of thinking about comments made during meetings as true, false,
    or true but irrelevant is not to discourage people from bringing up irrelevant
    details. When we think of contributions only in terms of true or false, we put
    pressure on individuals to save face by fighting to have the validity of their
    irrelevant facts acknowledged. By encouraging people to think about their comments
    as in-scope and out-of-scope, we’re saying that the engineer speaking raised a
    valid point that should be considered in a different conversation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将会议中的评论看作真实、虚假或真实但不相关的目的，并不是为了阻止人们提出不相关的细节。当我们仅仅把贡献看作真实或虚假时，我们给个人施加了压力，迫使他们为了保全面子而为他们不相关的事实的有效性辩护。通过鼓励大家将评论视为在范围内或范围外，我们实际上是在说，发言的工程师提出了一个有效的观点，应该在不同的讨论中考虑。
- en: At the same time, relevancy is often difficult for any one person to determine.
    You don’t want engineers to self-censor for fear of bringing up something that’s
    out of scope. They might incorrectly assume something is out of scope because
    they have incomplete information. If they fail to raise the issue because they
    associate the true but irrelevant bucket with failure, they may fail to point
    out actual problems. A great meeting is not a meeting where no one ever mentions
    anything out of scope; it’s one where out-of-scope comments are quickly identified
    as such by the team and dispatched before they have derailed the conversation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，相关性往往是任何一个人都很难判断的。你不希望工程师因为担心提出超出范围的内容而自我审查。他们可能会错误地认为某些问题超出了范围，因为他们掌握的信息不完全。如果他们因为将真正但不相关的问题与失败挂钩而没有提出问题，他们可能会忽略实际存在的问题。一次伟大的会议并不是没有人提到任何超出范围的内容，而是能够迅速由团队识别并处理这些超出范围的评论，而不会让它们偏离话题。
- en: 'Step 2: Check for Conflicting Optimization Strategies'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步：检查优化策略冲突
- en: Even with a carefully defined scope, engineers might bump heads anyway. A quick
    trick when two capable engineers cannot seem to agree on a decision is to ask
    yourself what each one is optimizing for with their suggested approach. Remember,
    technology has a number of trade-offs where optimizing for one characteristic
    diminishes another important characteristic. Examples include security versus
    usability, coupling versus complexity, fault tolerance versus consistency, and
    so on, and so forth. If two engineers really can’t agree on a decision, it’s usually
    because they have different beliefs about where the ideal optimization between
    two such poles is.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在范围定义清晰的情况下，工程师们仍然可能会发生冲突。当两个有能力的工程师无法就某个决策达成一致时，一个快速的技巧是问问自己，每个工程师在他们建议的方法中优化的是什么。记住，技术有很多权衡，优化一个特性会削弱另一个重要特性。例如，安全性与可用性、耦合性与复杂性、容错性与一致性等等。如果两位工程师实在无法达成共识，通常是因为他们对这两个极端之间的理想优化点有不同的看法。
- en: Looking for absolute truths in situations that are ambiguous and value-based
    is painful. Sometimes it helps just to highlight the fact that the disagreement
    is really over what to optimize for, rather than pure technical correctness. What
    is the impact of each optimization? Can the negative effects of over-optimizing
    in one direction be mitigated?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在模糊不清且基于价值的情境中寻找绝对真理是痛苦的。有时，最有帮助的是明确指出争议的根源实际上是关于优化什么，而不是单纯的技术正确性。每个优化的影响是什么？过度优化某一方向的负面影响能否得到缓解？
- en: 'Step 3: Perform Time-Boxed Experiments'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步：进行时间限定实验
- en: If the disagreement is in scope and isn’t a matter of conflicting optimization
    strategies, the best way to settle it is by creating time-boxed experiments. Find
    a way to try each approach on a small sample size with a clear evaluation date
    and specific success criteria defined in advance. Becoming good at experiments
    is valuable for practically any organization. It’s the basis of iteration—you
    build something, collect data on how it is performing, modify it to improve performance,
    and start the cycle over. This is how effective technology is built, so engineering
    teams should get comfortable using it to make hard decisions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果争议在范围内，并且不是由于优化策略冲突导致的，那么解决的最佳方式是进行时间限定的实验。找到一种方法，在小范围的样本中尝试每种方法，并设定一个明确的评估日期和具体的成功标准。成为实验的高手对于几乎任何组织来说都是非常宝贵的。这是迭代的基础——你建立某个东西，收集它的性能数据，修改它以提高性能，然后重新开始这个周期。这就是有效技术的构建方式，所以工程团队应该习惯使用它来做出艰难的决策。
- en: 'Momentum Killer: A History of Failure'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动力杀手：失败的历史
- en: Odds are good that the modernization effort you’re working on now is not the
    first attempt. Companies that successfully maintain their technology over time
    usually do not need to engage in a big modernization project after all. They are
    able to keep up through incremental change and regular maintenance. If you are
    running a team tasked with just cleaning up the debt and migrating onto more suitable
    technologies, it means the existing organization has failed to adapt.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在正在进行的现代化工作很可能不是第一次尝试。那些能够成功维持技术的公司通常不需要进行大规模的现代化项目。它们通过逐步变革和定期维护来保持技术的更新。如果你所在的团队只是负责清理技术债务并迁移到更合适的技术平台，那么这意味着现有组织未能适应变化。
- en: Your specific situation might have a history of failure that is much deeper
    than slacking off on regular maintenance. Is this even the first modernization
    project? If not, each prior effort likely has left scar tissue on the organization
    that you need to consider. The more false starts a project has had, the harder
    it is to build the momentum necessary to succeed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你的具体情况可能有着比单纯忽视常规维护更深层次的失败历史。这真的是第一次现代化项目吗？如果不是，每一次以前的尝试都可能在组织中留下了创伤，你需要考虑这些因素。一个项目经历的失败越多，建立成功所需的动力就越困难。
- en: The first deliverables of a modernization effort have to take this history of
    failure into account. People aren’t pessimistic and uninspired by legacy modernization
    projects because they don’t care or don’t realize that modernization is important.
    They often feel that way because they are convinced that success is impossible
    after experiencing a number of failures.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化工作中的首批交付成果必须考虑到这种失败的历史。人们对遗留系统的现代化项目感到悲观和缺乏灵感，并不是因为他们不关心或者没有意识到现代化的重要性。通常，他们之所以有这种感觉，是因为在经历了多次失败后，他们确信成功是不可能的。
- en: At the same time, I have yet to find a group of engineers who didn’t want to
    believe they could reach a better state. It’s surprisingly easy to change people’s
    minds about the inevitability of failure when you demonstrate that success is
    possible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我至今没有遇到一个工程团队，他们不愿意相信自己能够达到更好的状态。当你证明成功是可能的时，改变人们对失败不可避免的看法是相当容易的。
- en: Inspired and motivated engineering teams run smoother and more productive modernization
    processes, so design your modernization strategy around front-loading value. What
    changes will produce the most immediate positive impact?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 受启发并充满动力的工程团队能更顺利、更高效地推进现代化进程，因此，请围绕提前创造价值来设计你的现代化战略。哪些变化能够产生最直接的积极影响？
- en: I once worked for an organization that was facing a major challenge around the
    breakup of its monolith. The organization wanted to build a standardized platform
    that product engineering teams could use to deploy services to production easily—a
    reasonable ambition—but the product itself was three monoliths crammed onto a
    single VM. It was a monolith of monoliths, if you will. At the time it had been
    built, that architecture fit the business case, but in the years that followed,
    the organization had seen explosive growth. By the time I got there, the architecture
    didn’t make sense anymore.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾为一个面临拆解其单体架构的重大挑战的组织工作。该组织希望构建一个标准化平台，产品工程团队可以利用它轻松地将服务部署到生产环境中——这是一个合理的目标——但产品本身却是三个单体架构堆叠在一个虚拟机上。如果你愿意的话，这可以被看作是“单体中的单体”。在当时该架构的构建符合业务需求，但在随后的几年中，组织经历了爆炸式的增长。等我加入时，那个架构已经不再适用了。
- en: This organization was facing two problems. First, the platform initiative and
    the monolith breakup were blocking each other. The product teams did not want
    to break up their monolith into services until they could deploy on a platform.
    Understandably, they did not want to put something on a release pipeline only
    to have to migrate it off when the platform arrived. The platform group, on the
    other hand, could not build a platform without requirements set by the product
    teams. They had to be able to build with the real needs of real services in mind—services
    that did not exist because they had not been broken off the monolith yet.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组织面临两个问题。首先，平台建设和单体拆解相互制约。产品团队不想在能够部署到平台之前将单体拆解为服务。可以理解的是，他们不想把某个东西放到发布管道中，结果平台到来时还得再迁移。另一方面，平台组在没有产品团队设定的需求之前无法构建平台。他们必须能够根据真实服务的实际需求来构建平台，而这些服务因为尚未从单体架构中拆解出来，所以并不存在。
- en: The second problem was that the organization had actually tried both sides of
    this process before and failed at them, multiple times. It had tried to build
    a platform and had migrated some small, unimportant services that could be split
    off with minimum redesign. It had tried this at least three times by my estimation,
    each time losing momentum and failing to finish.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，组织之前其实已经尝试过这两个过程，但每次都失败了，且失败了不止一次。他们曾尝试构建平台，并且迁移了一些小型、无关紧要的服务，这些服务拆解后不需要太多的重设计。根据我的估算，他们至少尝试了三次，每次都因失去动力而未能完成。
- en: The organization had also tried to break up the monolith several times. Each
    time, it became overwhelmed by the complexity of the task. Splitting monoliths
    is rarely, if ever, only about copying and pasting some code into a different
    repository. When software is designed to be coupled, engineers usually take advantage
    of that fact and build on the easy access that coupling provides. In this case,
    that meant their testing suites had a high concentration of end-to-end tests over
    unit tests. It meant multiple components were accessing the same data store and
    sharing responsibilities over the same information. When their tightly coupled
    monolith became decoupled services, the tests would break, and a plan for keeping
    the data consistent between services would need to be developed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 组织曾多次尝试拆解单体架构。每一次都被任务的复杂性所压倒。拆解单体架构很少，仅仅是把一些代码复制粘贴到不同的代码库中。当软件被设计为紧密耦合时，工程师通常会利用这种紧密耦合的优势，基于这种便捷的耦合关系进行构建。在这种情况下，这意味着他们的测试套件中大多数是端到端测试，而非单元测试。这也意味着多个组件访问同一个数据存储，并共同承担相同的信息责任。当他们将紧耦合的单体架构转变为解耦服务时，测试将失败，并且需要制定一种保持服务之间数据一致性的计划。
- en: Now facing their fourth attempt, optimism was pretty low. Everybody wanted to
    see the project be successful, but no one wanted to be the first team to invest
    the work only to be left holding the bag when the effort fell apart once again.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 面对他们的第四次尝试，乐观情绪相当低落。每个人都希望这个项目能够成功，但没有人愿意成为第一个投入大量工作却在努力再次失败时只剩下空手的团队。
- en: 'Prominent engineers on the platform group were asked to come up with a plan.
    They spent weeks collecting data and interviewing teams and eventually pitched
    the following compromise: they would pull the three monoliths onto their own release
    channels with their own VMs, thereby ensuring that the platform could support
    everything the product needed without requiring the product team to split anything
    immediately.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 平台团队的知名工程师被要求提出一个计划。他们花了数周时间收集数据并采访团队，最终提出了以下折衷方案：他们将把三个单体应用推到自己的发布渠道上，配备自己的虚拟机，从而确保平台能够支持产品所需的一切，而不需要产品团队立刻拆分任何东西。
- en: The problem with this plan was that it didn’t actually make anything better.
    Now instead of one release cycle with an owner and an orderly schedule determining
    when code hit each region and environment, the organization would have three release
    cycles with no one owning them. Every deploy would have to be carefully coordinated
    across multiple teams so that changes did not accidentally hit production for
    one monolith early or late.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计划的问题在于，它并没有真正改善任何事情。现在，不再是一个有负责人和有序计划决定何时将代码推送到每个区域和环境的发布周期，而是组织将有三个发布周期，而没有人负责它们。每次部署都必须在多个团队之间精心协调，以确保变化不会意外地早早或晚些时候影响某个单体应用的生产环境。
- en: It wasn’t going to lower costs either. Commercial cloud providers charge per
    time usage of each VM. Three separate sets of VMs meant the proposed plan would
    easily double or even triple the organization’s hosting expenses.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它也不会降低成本。商业云服务提供商按照每个虚拟机的使用时间收费。三组独立的虚拟机意味着提议的计划会轻松使组织的托管费用翻倍甚至三倍。
- en: I wasn’t even sure it would get off the ground. My team had been working hard
    redesigning a service that appeared to be fully separate to go onto the platform,
    and we were finding all sort of weird places where components were integrated
    in unexpected ways.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至不确定它是否能够顺利启动。我的团队一直在努力重新设计一个看似完全独立的服务，打算将其放上平台，但我们发现各种奇怪的地方，组件在出乎意料的方式下集成在一起。
- en: What was the value of putting three monoliths on separate release channels?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将三个单体应用放在不同发布渠道上的价值是什么？
- en: When I asked that question, the engineers thought I was asking what the value
    of breaking up the monolith was. It took several conversations before I could
    get them to understand that I wasn’t questioning their goal. I was questioning
    their starting point. Starting with tripling the number of VMs would make updates
    more complicated for product teams and would increase spending unnecessarily.
    Why would the organization continue to invest in the process of breaking up the
    monolith if its first experiences with that process made work harder and more
    expensive?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我提出这个问题时，工程师们以为我在问拆分单体应用的价值是什么。经过几次对话，我才让他们明白，我并不是在质疑他们的目标，而是在质疑他们的出发点。从将虚拟机数量三倍化开始，会使得产品团队的更新变得更加复杂，并且不必要地增加支出。如果组织在拆分单体应用的过程中第一次经历了让工作变得更加困难和昂贵的情况，为什么还要继续投资这一过程呢？
- en: The hard problems around legacy modernization are not technical problems; they’re
    people problems. The technology is usually pretty straightforward. Keeping people
    focused and motivated through the months or years it takes to finish the job is
    hard. To do this, you need to provide significant value right away, as soon as
    possible, so that you overcome people’s natural skepticism and get them to buy
    in. The important word in the phrase proof of concept is *proof*. You need to
    prove to people that success is possible and worth doing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于遗留系统现代化的难题，不是技术问题，而是人际问题。技术通常是相当直接的。要保持人们的专注和动力，完成这一任务可能需要几个月甚至几年的时间，这很难做到。为了做到这一点，你需要立即提供显著的价值，尽快让人们克服天生的怀疑态度并支持你。概念验证中最重要的词是*证明*。你需要向人们证明成功是可能的，并且值得去做。
- en: The more an organization has failed at something, the more proof it needs that
    modernization will bring value. When there’s a history of failure, that first
    step has to provide enough value to build the momentum necessary to be successful.
    The obvious problem with that is it means there’s a natural upper bound. There
    is a point where cynicism is so high, no single first step will ever provide enough
    value to prove the project will work.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织失败得越多，它就越需要证明现代化能带来价值的证据。当有过失败的历史时，第一步必须提供足够的价值，以建立起成功所需的动力。这样做的明显问题是，它意味着有一个自然的上限。怀疑主义达到如此之高的程度时，任何单一的第一步都无法提供足够的价值来证明项目能够成功。
- en: Then what?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么接下来呢？
- en: 'Momentum Builder: Inspiring Urgency'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动力建设者：激发紧迫感
- en: If you find yourself in this situation, you have a little due diligence to do
    first. The first question to ask is does this particular migration actually add
    any value at all? Or are we migrating because there’s a new shiny technology in
    front of us? After all, monoliths are not universally bad. Plenty of successful
    companies run monoliths.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己处于这种情况，首先需要做一些尽职调查。第一个问题是，这次迁移到底是否带来了任何实际的价值？还是我们仅仅因为眼前有一种崭新的技术就去迁移？毕竟，单体系统并不全是坏的。许多成功的公司仍然在运行单体系统。
- en: If you believe the migration does add value, the next question to ask yourself
    is will leadership make a commitment to prioritizing it? Sometimes you get lucky,
    and the change is one with a hard deadline and real consequences for it slipping.^([1](#c05-footnote-1))
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你相信迁移确实能带来价值，接下来你需要问自己的是，领导层是否会承诺优先考虑这一点？有时你可能会运气好，变革是有硬性截止日期的，并且错过了会有实际后果。^([1](#c05-footnote-1))
- en: But if leadership isn’t prioritizing it and if you believe the migration has
    real business value but you’re weighted down with the cynicism of repeated failures,
    what you need is a crisis. Value is relative, after all. When things are working
    well and money is coming in, engineers can tolerate a multitude of sins. When
    things are bad, the perception of value added by nearly any change goes up. Dealing
    with crisis alters the organization’s internal calculus around risk.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果领导层没有优先考虑此事，并且如果你相信迁移确实有商业价值，但又被反复失败的怀疑主义所困扰，那么你需要的就是一场危机。毕竟，价值是相对的。当一切顺利，钱进账时，工程师们可以容忍各种过错。而当形势不佳时，几乎任何变化所带来的价值感知都会增加。应对危机会改变组织内部对风险的权衡。
- en: When I was working in government, we would reach the upper bound on the value
    scale frequently. Some of the systems were so old, efforts to modernize them had
    literally been passed from generation to generation. Having a crisis became an
    essential component of how my teams operated—to the point that we might delay
    talking to an agency for a few weeks or months just to see whether a crisis would
    pop up that we could hook into.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我政府工作的时期，我们经常会达到价值规模的上限。有些系统非常陈旧，现代化的努力几乎是代代相传。拥有一场危机成了我团队运作的一个重要组成部分——以至于我们可能会拖延几周或几个月才与某个机构沟通，就为了看看是否会冒出一个我们可以借机处理的危机。
- en: Occasionally, I went as far as looking for a crisis to draw attention to. This
    usually didn’t require too much effort. Any system more than five years old will
    have at least a couple major things wrong with it. It didn’t mean lying, and it
    didn’t mean injecting problems where they didn’t exist. Instead, it was a matter
    of storytelling—taking something that was unreported and highlighting its potential
    risks. These problems *were* problems, and my analysis of their potential impact
    was always truthful, but some of them could have easily stayed buried for months
    or years without triggering a single incident.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，我会走得更远，寻找一场危机来引起关注。这通常不需要太多努力。任何超过五年的系统都会至少有几个重大问题。这并不意味着撒谎，也不意味着在不存在问题的地方制造问题。相反，这是讲故事的艺术——把一些未被报道的问题提出来，突出其潜在风险。这些问题*确实*是问题，我对它们潜在影响的分析总是诚实的，但其中一些问题完全可以在几个月或几年内未被发现，甚至没有引发任何事件。
- en: My favorite place to start was with security, followed by system stability.
    One does not need much technical literacy to understand the impact and consequences
    of getting those issues wrong. There are also areas where even the best technical
    teams struggle from time to time, so you’re unlikely to come up empty-handed if
    you look for a potential crisis on either these two fronts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢从安全性开始，然后是系统稳定性。理解这些问题出错的影响和后果并不需要太多的技术知识。也有一些领域，即使是最优秀的技术团队也会时不时遇到困难，因此如果你在这两个方面寻找潜在的危机，通常不会空手而归。
- en: 'Protecting Momentum: A Quota on Big Decisions'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护进展：对重大决策的配额限制
- en: Now that you’ve done all the work of assessing the situation and organizing
    around it, you don’t want to let the organization itself undermine that work.
    People mean well, but any kind of change is risky, and saying yes to risk is difficult.
    Never fear. You can set the stage to get a yes to organizational change rather
    than a no.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经完成了评估情况并围绕它组织工作的所有任务，你就不希望让组织本身削弱这些努力。人们本意是好的，但任何形式的变革都有风险，接受风险是困难的。别担心，你可以为组织变革创造一个让人们同意而非拒绝的氛围。
- en: First, you need to learn to talk about what you are doing in a way that minimizes
    the number of big decisions that need to be made—particularly big decisions that
    include changes in process or anything that would need multiple stakeholders to
    sign off on and many rounds of approvals to change.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要学会以一种方式来谈论你正在做的事情，最大限度地减少需要做出的重大决策数量，尤其是那些包括过程变更或需要多个利益相关者签字并经过多轮审批才能改变的决策。
- en: Decisions that require consulting many stakeholders are obviously difficult
    and painful to manage. People will naturally want to avoid them. Therefore, the
    more big decisions your proposal seems to include, the more likely people are
    going to want to slow down or delay it a quarter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 需要咨询许多利益相关者的决策显然难以管理且痛苦。人们自然会想避免这些决策。因此，你的提案看起来包含的重大决策越多，人们就越有可能想要放慢进度或推迟一个季度。
- en: You may think that by giving projects fancy names, projecting budgets, and settling
    staffing questions up front you are being diligent, and you are! But you’re also
    making the project look like a series of big decisions, which for audiences insulated
    from the day-to-day pain of legacy systems seems too risky. Consider different
    ways of talking about the same project for different audiences. Some audiences
    will appreciate detailed planning, and other audiences will appreciate a high-level
    approach.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为通过为项目起个花哨的名字、预测预算并事先解决人员配置问题是在认真工作，确实是这样！但你也在让项目看起来像是一系列重大的决策，对于那些没有日常处理遗留系统痛苦的受众来说，这看起来太冒险。考虑针对不同受众以不同的方式谈论同一个项目。有些受众会欣赏详细的计划，而另一些受众则会更倾向于高层次的方案。
- en: 'Look for the following when you need to prune the number of big decisions that
    have to be made to move forward:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在你需要减少为了推进工作必须做出的重大决策时，请注意以下几点：
- en: Existing programs, projects, or technology These are the best off-by-one errors.
    Riding the coattails of an already approved solution removes the need to seek
    out those approvals yourself.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现有的项目、计划或技术——这些是最典型的“差一错”的例子。借助已经批准的解决方案可以避免你自己去寻求这些批准。
- en: Advantageous regulation You can eliminate a big decision by making it seem like
    it was already made, but you can also eliminate a big decision by making it seem
    like the organization doesn’t have a choice. Compliance, particularly around security,
    is a great place to look, because those rules often come with specific deadlines
    when they must be done or the organization loses certifications, funding, and,
    potentially, clients.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有利的法规 你可以通过让重大决策看起来已经做出，从而消除这一决策，但你也可以通过让组织看似没有选择的方式来消除重大决策。合规性，尤其是与安全相关的合规性，是一个值得关注的领域，因为这些规则通常伴随着必须在特定时间完成的截止日期，否则组织将失去认证、资金，甚至可能失去客户。
- en: Ambiguous approval process The saying “Ask for forgiveness, not permission”
    is popular among the startup crowd, but let’s face it, you’re better off asking
    for forgiveness if it’s believable that you might have been acting in good faith.
    If you’re bypassing a well-documented and well-known approval process, the outcome
    is less likely to end favorably than when the process is ambiguous or nonexistent.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模糊的审批过程 "请求宽恕，而非许可" 是初创公司圈子里流行的说法，但说实话，如果你能让人相信你是在诚意行事，那么最好请求宽恕。如果你绕过了一个记录清晰且广为人知的审批过程，结果往往不如当流程模糊或不存在时那样有利。
- en: 'Protecting Momentum: Calculating Opportunity Costs'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护进展：计算机会成本
- en: Value add isn’t always a matter of technical outcomes. More often than not,
    business outcomes provide a clearer path to prioritization. Business outcomes
    could be profits, but if you’re working for a mission-driven organization, business
    outcomes could also be people served or impact observed. When running a multiyear
    modernization project, buy-in from the business side is essential. You can’t rely
    on them understanding the technical outcomes, so you should know how to illustrate
    the value of business outcomes by calculating opportunity costs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 增值不仅仅是技术结果的体现。往往，商业结果提供了更清晰的优先级路径。商业结果可能是利润，但如果你在一个以使命为驱动的组织工作，商业结果也可能是服务的人数或观察到的影响。在进行一个多年的现代化项目时，得到业务方的支持至关重要。你不能指望他们理解技术成果，因此你应该知道如何通过计算机会成本来阐明商业成果的价值。
- en: For those not familiar with the concept, an *opportunity cost* is money lost
    by not doing something because you have chosen another opportunity instead. Typically,
    opportunity costs are expressed in expected profits not realized, but in the context
    of legacy systems, we usually think of opportunity costs in terms of money saved.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉这一概念的人，*机会成本*是指由于选择了其他机会而未进行某项活动，从而导致的资金损失。通常，机会成本通过未实现的预期利润来表达，但在遗留系统的背景下，我们通常会将机会成本理解为节省的资金。
- en: Opportunity costs are better as thought experiments than actual calculations.
    If it were possible to calculate accurately how much time and money we were going
    to spend on each potential approach to upgrading an existing system (or upgrading
    it versus leaving it be and building new features), maintaining legacy systems
    would be easy. But opportunity costs are useful in getting people to communicate
    their assumptions and build a case for why the organization should do what we
    want them to do. To provide value, estimates of opportunity cost need not be accurate.
    They need only provide insightful context of the trade-offs proposed by a given
    decision.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 机会成本更适合作为思想实验，而不是实际计算。如果我们能够准确计算出每种可能的方式升级现有系统（或者与不做升级、仅增加新特性相比）将花费多少时间和金钱，那么维护遗留系统就会变得容易。但机会成本的价值在于促使人们交流他们的假设，并为为什么组织应该做我们想要做的事情提供论据。为了提供价值，机会成本的估算不必准确，只需要为给定决策的权衡提供有洞察力的背景。
- en: Calculating opportunity costs isn’t just about making more profitable decisions.
    It gives the team data with which to justify the modernization activity to a wide
    variety of stakeholders. Investing in the health of your technology makes sense
    to everyone only when the technology is visibly failing, and by that point, the
    problem is much larger and much harder to solve. Senior management tends to be
    skeptical of any kind of cleanup activity—fearing that it will slow the organization’s
    velocity unnecessarily.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机会成本不仅仅是为了做出更有利可图的决策。它为团队提供了数据，以向各方利益相关者证明现代化活动的合理性。只有当技术明显失败时，投资技术健康才对所有人有意义，而到那时，问题已经变得更加严重，解决起来也更为困难。高层管理通常对任何清理活动持怀疑态度——担心它会不必要地拖慢组织的速度。
- en: My first big project at Auth0 was getting a handle on our notifications system.
    Auth0 was maintaining a shared email server for testing and development purposes
    only. Nevertheless, customers occasionally neglected to move on to a dedicated
    provider when going to production even though plenty of free options were available.
    Customers were rate-limited on the shared provider precisely because it was not
    intended for production, but when they hit their limit, we dumped their email
    into a retry queue so that they could be sent at a later point.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我在Auth0的第一个大项目是处理我们的通知系统。Auth0当时仅为测试和开发目的维护着一个共享的电子邮件服务器。然而，客户们偶尔会忽视在进入生产阶段时，尽管有许多免费的选项可用，还是未能迁移到专用的服务提供商。当客户达到限制时，我们会将他们的邮件放入重试队列，以便稍后发送。
- en: We assumed—wrongly as it turned out—that customers would go over their quota
    gradually, as a result of natural traffic growth. Had this been the case, retrying
    email over time would have made sense. A handful of email messages get delayed,
    and as those delays become more common, it nudges the customer onto a dedicated
    provider instead. In reality, customers were much more likely to catapult over
    the limit with activities that would trigger email to all of their users—hundreds
    if not thousands of emails all at once.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾错误地假设客户会逐步超过配额，这是由自然流量增长造成的。如果真是这样，随着时间的推移，重试邮件是有意义的。少量邮件延迟，随着延迟变得越来越普遍，就会促使客户转向专用服务商。事实上，客户更有可能因某些活动突然突破配额限制，这些活动会触发向所有用户发送邮件——一次可能是数百甚至数千封邮件。
- en: That created a situation where the retry queue would fill up to the point where
    20 workers would need hours of processing just to clear the messages. It affected
    the performance of the service for everyone and set off a page to whoever was
    on call—all over a bunch of email that most of the time no one actually wanted
    delivered in the first place.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这就导致了一个情况：重试队列会被填满，直到20个工作人员需要花费数小时的处理时间才能清理邮件。这影响了所有用户的服务性能，并触发了值班人员的提醒——这一切仅仅是因为一堆大多数时候根本没人真正想要送达的邮件。
- en: We decided to change the way rate-limiting worked so that instead of retrying
    email, the shared provider would drop them when the limit was exhausted. That
    was a lot of migration work, and not only did we have to change the rate-limiting
    algorithm, but we also had to change the technology that was doing the rate-limiting
    in the first place. Our existing rate-limiting solution was in the process of
    being replaced by another solution. We needed to change our architecture and then
    figure out a backward-compatible strategy for our on-premises customers who upgraded
    at a slower cadence than cloud customers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定改变速率限制的工作方式，改为当超出限制时，共享服务商不再重试邮件，而是直接丢弃它们。这是一项艰巨的迁移工作，我们不仅需要改变速率限制的算法，还需要更换最初执行速率限制的技术。我们现有的速率限制解决方案正在被另一个解决方案替代。我们需要改变架构，并为升级速度较慢的本地客户制定一种向后兼容的策略，而这些客户的升级速度比云客户要慢。
- en: 'All of this was a lot of work, and our motivation for investing in it was very
    personal: when the retry queue filled up, it paged someone on our team to go fix
    it. This was both annoying and disruptive. The interruption was made doubly frustrating
    by the fact that the official resolution to this issue in our playbook was to
    drop all the email in the retry queue anyway. It seemed pointless to ask a human
    to wake up at 3 am to do what a computer should be able to do automatically.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都需要大量的工作，而我们投入其中的动力非常个人化：当重试队列填满时，会向我们团队的某个成员发送提醒，让他们去解决这个问题。这既令人烦恼又具有干扰性。更加令人沮丧的是，解决此问题的官方方案是将重试队列中的所有邮件都丢弃掉。让人不禁觉得，要求一个人凌晨3点起床去做一件本该由计算机自动完成的事，简直毫无意义。
- en: What we didn’t think about until we were in the middle of the change is how
    much money not trying to send hundreds of thousands of pointless emails was going
    to save us. We got a certain number of email messages per month from the company
    that ran the shared email server for us. When we went over that limit, our account
    with this provider automatically bought 50,000 more emails for $20 and sent us
    an alert letting us know it had done so. When we started rolling out this change,
    we were receiving about 10 such alerts a day, or $200 in additional email. A single
    incident might cost us anywhere from $1,000 to $2,000.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直到变更进行到一半时才意识到，避免发送成百上千封无意义的邮件能为我们节省多少资金。我们从为我们运行共享邮件服务器的公司每月收到一定数量的邮件。当我们超过这个限制时，我们与该服务商的账户会自动购买50,000封额外邮件，费用为20美元，并会发送提醒通知我们已经完成了购买。当我们开始实施这个变更时，我们每天大约会收到10个此类提醒，意味着额外花费了200美元的邮件费用。单次事件的费用可能从1,000美元到2,000美元不等。
- en: When the changes went live, we literally saved the organization tens of thousands
    of dollars just by getting rid of email that our customers didn’t want sent in
    the first place. The whole project had been a huge win, but the cost savings gave
    us political capital that we could spend both to justify why we hadn’t spent that
    time adding new features and to get buy-in for similar maintenance work later.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些变更生效时，我们通过简单地取消那些客户本不想发送的邮件，就为公司节省了数万美元。这整个项目可以说是一个巨大的成功，但节省的成本给了我们政治资本，可以用来证明我们为什么没有花时间增加新功能，并为以后类似的维护工作争取支持。
- en: It can be tricky getting started with opportunity costs because the number of
    potential opportunities to calculate can seem infinite. Remember that opportunity
    costs are thought experiments and rhetorical devices. You don’t need to list the
    costs of everything your team might be doing, just the activities that strengthen
    the case for what you want to be doing. This means highlighting how activities
    with high prioritization might be more expensive than the organization is assuming
    and describing in business-friendly language how much value there is to be gained
    by doing things the way you’d like them to be done.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机会成本时可能会有些棘手，因为潜在的机会似乎是无穷无尽的。记住，机会成本是思维实验和修辞工具。你不需要列出团队可能正在做的所有事情的成本，只需要列出那些能够支持你想要做的事情的活动。这意味着要突出高优先级活动可能比组织预期的要贵，并且用通俗易懂的语言描述按照你希望的方式做事能带来多少价值。
- en: When looking for the right opportunities to compare against, consider activities
    from these three general categories.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找适当的机会进行比较时，可以考虑以下三个大类中的活动。
- en: The Cost of Not Adding New Features
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不添加新特性的成本
- en: This cost typically is calculated by estimating profits or impact of new features.
    It is larger in small organizations where the development team may not be big
    enough to have broken out into distinct units. Shipping a new feature with a small
    organization locks up a greater percentage of the total staff, which means they
    are not available to do modernization work or contribute to other projects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个成本通常是通过估算新特性带来的利润或影响来计算的。在小型组织中，这个成本更大，因为开发团队可能没有足够大，无法拆分成不同的部门。推出一个新特性会占用更多比例的总员工，这意味着他们无法进行现代化工作或参与其他项目。
- en: The pressure to delay maintenance work on legacy systems in favor of new features
    and products is constant at most organizations. There’s never a good time for
    it, although it always seems that if the organization could just get through the
    latest challenge, things will calm down and the cleanup can begin. To avoid endless
    procrastination, try to align the new features with the goal state. For example,
    if migrating from a monolith to services, you might want to use the new feature
    to identify the first service to peel off.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数组织中，推迟对遗留系统进行维护以优先考虑新特性和产品的压力是常态。虽然总是觉得组织如果能够度过当前的挑战，事情会平静下来并且清理工作可以开始，但实际上从没有一个合适的时机。为了避免无休止的拖延，尽量将新特性与目标状态对齐。例如，如果从单体架构迁移到服务架构，你可能想通过新特性来确定第一个需要拆分的服务。
- en: The Cost of Not Fixing Something Else
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不解决其他问题的成本
- en: Legacy systems rarely have only one thing wrong with them. Each step in the
    modernization process is a decision between problems that could be fixed with
    the same time and energy. I’ve already described various methods for choosing
    what to fix and when. Opportunity costs are really about selling the strategy
    up the chain of command. Doing this is easier if the organization has defined
    *service-level objectives**(SLOs**)* or has *service-level agreements (SLAs**)*.
    Both SLOs and SLAs equate performance levels with consumer value. SLAs may go
    as far as defining a specific monetary amount the customer can be reimbursed when
    performance dips below a specific level.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统通常不仅仅有一个问题。现代化过程中的每一步都是在选择用相同的时间和精力来解决的不同问题。我已经描述了选择修复什么以及何时修复的各种方法。机会成本实际上是关于如何向上层管理推销策略。如果组织已经定义了*服务水平目标*(SLOs)*，或者有*服务水平协议*(SLAs)*，那么这将更容易。SLOs和SLAs都将性能水平与消费者价值挂钩。SLAs甚至可能会规定当性能低于某个特定水平时，客户可以获得的具体赔偿金额。
- en: 'SLOs and SLAs help the team prioritize fixes by how much pain the problem is
    causing for users. They are a good thing to have even if you feel confident that
    you won’t need to justify what you modernize and when. But if you do have to justify
    your strategy, you should be able to study historical data and project under what
    conditions a given system or part of a system might violate its SLO. Often this
    is heavily influenced by scale, so it’s a good opportunity to leverage the business
    side’s ambition to your advantage: look at what level of growth the business is
    expecting and calculate opportunity costs based on how that level of growth will
    affect SLOs.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 服务水平目标（SLOs）和服务水平协议（SLAs）帮助团队根据问题对用户造成的痛苦程度来优先修复问题。即使你确信不需要证明何时以及如何进行现代化，它们也是一个很好的工具。但是如果你确实需要为你的策略辩护，你应该能够研究历史数据并预测在什么条件下，某个系统或系统的某个部分可能会违反其SLO。通常，这受到规模的强烈影响，因此这是一个利用业务方雄心壮志的好机会：看看业务期望的增长水平，并基于这一增长水平如何影响SLO来计算机会成本。
- en: The Cost of Not Deprecating in Favor of a Different Solution
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不弃用而选择其他解决方案的成本
- en: This is a particularly difficult cost to calculate because deprecations do not
    complete all at once. For a period of time during a migration or modernization,
    it’s likely that an organization will be maintaining both the old solution and
    the modern one, especially if the new solution requires code changes to be deployed.
    So, in addition to the cost of either purchasing or developing the new solution,
    you have to factor in the cost of decommissioning the old solution. How many teams
    does that affect? What are they not working on while they make those changes?
    What is the long-term maintenance burden of the old solution versus the new one?
    Depending on whether the new solution is hosted/software as a service (SaaS) or
    just a new custom-built tool, the considerations could look very different.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特别难以计算的成本，因为弃用并不是一次性完成的。在迁移或现代化的过程中，组织很可能会同时维护旧解决方案和现代化解决方案，尤其是当新解决方案需要部署代码更改时。因此，除了购买或开发新解决方案的成本外，还需要考虑弃用旧解决方案的成本。这个成本会影响多少团队？在进行这些更改时，他们不能做哪些工作？旧解决方案和新解决方案的长期维护负担如何？根据新解决方案是托管的/软件即服务（SaaS）还是仅仅是一个新的定制工具，考虑的因素可能会有很大不同。
