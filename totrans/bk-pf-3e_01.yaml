- en: Chapter 1. Building the Network you Need
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章：构建你需要的网络
- en: '![Building the Network you Need](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![构建你需要的网络](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
- en: PF, the OpenBSD *Packet Filter subsystem*, is in my opinion the finest tool
    available for taking control of your network. Before diving into the specifics
    of how to make your network the fine-tuned machinery of your dreams, please read
    this chapter. It introduces basic networking terminology and concepts, provides
    some PF history, and gives you an overview of what you can expect to find in this
    book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PF，OpenBSD的*数据包过滤子系统*，在我看来是控制网络的最佳工具。在深入了解如何将你的网络打造成理想的精密机器之前，请先阅读本章。本章介绍了基本的网络术语和概念，提供了一些PF的历史，并概述了你可以在本书中找到的内容。
- en: 'Your Network: High Performance, Low Maintenance, and Secure'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的网络：高性能、低维护和安全
- en: If this heading accurately describes your network, you’re most likely reading
    this book for pure entertainment, and I hope you’ll enjoy the rest of it. If,
    on the other hand, you’re still learning how to build networks or you’re not quite
    confident of your skills yet, a short recap of basic network security concepts
    can be useful.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个标题准确描述了你的网络，那么你很可能是为了纯粹的娱乐而阅读本书，希望你能享受接下来的内容。另一方面，如果你还在学习如何构建网络，或者还不太自信自己的技能，那么回顾一些基本的网络安全概念会很有帮助。
- en: Information technology (IT) security is a large, complex, and sometimes confusing
    subject. Even if we limit ourselves to thinking only in terms of network security,
    it may seem that we haven’t narrowed down the field much or eliminated enough
    of the inherently confusing terminology. Matters became significantly worse some
    years ago when personal computers started joining the networked world, equipped
    with system software and applications that clearly weren’t designed for a networked
    environment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 信息技术（IT）安全是一个庞大、复杂且有时令人困惑的话题。即使我们只将视角限定在网络安全上，也可能会觉得我们并没有大幅缩小领域范围，或消除足够多固有的困惑性术语。几年前，随着个人计算机加入联网世界，并配备了显然不适合网络环境的系统软件和应用程序，情况变得更为严重。
- en: The result was predictable. Even before the small computers became networked,
    they’d become home to malicious software, such as *viruses* (semiautonomous software
    that is able to “infect” other files in order to deliver its payload and make
    further copies of itself) and *trojans* (originally *trojan horses*, software
    or documents with code embedded that, if activated, would cause the victim’s computer
    to perform actions the user didn’t intend). When the small computers became networked,
    they were introduced to yet another kind of malicious software called a *worm*,
    a class of software that uses the network to propagate its payload.^([[1](#ftn.ch01fn01)])
    Along the way, the networked versions of various kinds of frauds made it onto
    the network security horizon as well, and today a significant part of computer
    security activity (possibly the largest segment of the industry) centers on threat
    management, with emphasis on fighting and cataloging malicious software, or *malware*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是可预测的。即使在小型计算机联网之前，它们也已经成为恶意软件的温床，例如*病毒*（半自动化软件，能够“感染”其他文件，以传递其有效载荷并制作更多副本）和*木马*（最初是*特洛伊木马*，包含嵌入式代码的软件或文档，一旦激活，会使受害者的计算机执行用户未曾预期的操作）。当小型计算机开始联网时，又引入了另一类恶意软件，称为*蠕虫*，这类软件利用网络传播其有效载荷^([[1](#ftn.ch01fn01)])。与此同时，网络化的各种诈骗方式也开始出现在网络安全的视野中，今天，计算机安全活动的一个重要部分（可能是行业中最大的部分）集中在威胁管理上，特别是打击和分类恶意软件，或称*恶意软件*（malware）。
- en: The futility of enumerating badness has been argued convincingly elsewhere (see
    [Appendix A](apa.html "Appendix A. Resources") for references, such as Marcus
    Ranum’s excellent essay “The Six Dumbest Ideas in Computer Security”). The OpenBSD
    approach is to design and code properly in the first place. However, even smart
    people make mistakes every now and then, producing bugs, so make sure to design
    the system to allow any such failure to have the least possible impact security-wise.
    Then, if you later discover mistakes and the bugs turn out to be exploitable,
    fix those bugs wherever similar code turns up in the tree, even if it could mean
    a radical overhaul of the design and, at worst, a loss of backward compatibility.^([[2](#ftn.ch01fn02)])
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举恶劣情况的无意义性已经在其他地方有力地讨论过（参考文献见[附录 A](apa.html "附录 A. 资源")，例如马库斯·拉努姆的精彩文章《计算机安全中最愚蠢的六个想法》）。OpenBSD的方法是在一开始就正确地设计和编码。然而，即使是聪明的人偶尔也会犯错，产生漏洞，因此请确保设计系统时能够将任何此类失败的安全影响降到最低。然后，如果你后来发现错误且漏洞是可被利用的，请修复这些漏洞，无论它们出现在代码树中的哪个地方，即使这可能意味着彻底重做设计，最坏情况下会丧失向后兼容性。^([[2](#ftn.ch01fn02)])
- en: In PF, and by extension in this book, the focus is narrower, concentrated on
    network traffic at the network level. The introduction of divert(4) sockets in
    OpenBSD 4.7 made it incrementally easier to set up a system where PF contributes
    to *deep packet inspection*, much like some fiercely marketed products. However,
    the interface is not yet widely used in free software for that purpose, although
    exceptions exist. Therefore, we’ll instead focus on some techniques based on pure
    network-level behavior, which are most evident in the example configurations in
    [Chapter 6](ch06.html "Chapter 6. Turning the Tables for Proactive Defense").
    These techniques will help ease the load on content-inspecting products if you
    have them in place. As you’ll see in the following chapters, the network level
    offers a lot of fun and excitement, in addition to the blocking or passing packets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在PF中，广义上在本书中，重点更狭窄，集中于网络层的网络流量。OpenBSD 4.7中引入的divert(4)套接字使得设置一个系统变得更加容易，在这个系统中，PF有助于*深度数据包检查*，类似于一些经过激烈营销的产品。然而，这个接口在自由软件中还未广泛用于这个目的，尽管也有例外。因此，我们将重点讨论一些基于纯网络层行为的技术，这些技术在[第6章](ch06.html
    "第6章. 主动防御的新思路")的示例配置中最为显著。这些技术将在你已配置的内容检查产品中减轻负担。正如你在接下来的章节中所看到的，除了阻止或通过数据包之外，网络层还带来了许多乐趣和激动。
- en: Where the Packet Filter Fits In
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包过滤器的作用
- en: The packet filter’s main function is, as the name suggests, to filter network
    packets by matching the properties of individual packets and the network connections
    built from those packets against the filtering criteria defined in its configuration
    files. The packet filter is responsible for deciding what to do with those packets.
    This could mean passing them through or rejecting them, or it could mean triggering
    events that other parts of the operating system or external applications are set
    up to handle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 包过滤器的主要功能正如其名，是通过匹配单个数据包的属性和由这些数据包构建的网络连接，按照其配置文件中定义的过滤标准来过滤网络数据包。包过滤器负责决定如何处理这些数据包。这可能意味着通过数据包或者拒绝它们，或者触发其他操作系统部分或外部应用程序预设的事件。
- en: PF lets you write custom filtering criteria to control network traffic based
    on essentially any packet or connection property, including address family, source
    and destination address, interface, protocol, port, and direction. Based on these
    criteria, the packet filter performs the action you specify. One of the simplest
    and most common actions is to block traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PF允许你编写自定义过滤标准，以基于几乎任何数据包或连接属性来控制网络流量，包括地址族、源地址和目标地址、接口、协议、端口和方向。根据这些标准，包过滤器会执行你指定的操作。最简单和最常见的操作之一就是阻止流量。
- en: A packet filter can keep unwanted traffic out of your network. It can also help
    contain network traffic inside your own network. Both these functions are important
    to the *firewall* concept, but blocking is far from the only useful or interesting
    feature of a functional packet filter. As you’ll see in this book, you can use
    filtering criteria to direct certain kinds of network traffic to specific hosts,
    assign classes of traffic to queues, perform traffic shaping, and even hand off
    selected kinds of traffic to other software for special treatment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 包过滤器可以阻止不必要的流量进入你的网络。它还可以帮助将网络流量限制在你自己的网络内部。这两个功能对*防火墙*概念非常重要，但阻止流量远不是功能齐全的包过滤器唯一有用或有趣的功能。正如你在本书中将看到的，你可以使用过滤标准将某些类型的网络流量定向到特定的主机，将流量类别分配到队列中，执行流量整形，甚至将选定类型的流量交给其他软件进行特别处理。
- en: All this processing happens at the network level, based on packet and connection
    properties. PF is part of the network stack, firmly embedded in the operating
    system kernel. While there have been examples of packet filtering implemented
    in user space, in most operating systems, the filtering functions are performed
    in the kernel because it’s faster to do so.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些处理都发生在网络层，基于数据包和连接属性。PF是网络堆栈的一部分，深深嵌入操作系统内核。尽管也有在用户空间实现包过滤的例子，但在大多数操作系统中，过滤功能是在内核中执行的，因为这样做更快。
- en: The Rise of PF
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PF的崛起
- en: If you have a taste for history, you probably already know that OpenBSD and
    the other BSDs^([[3](#ftn.ch01fn03)]) are direct descendants of the BSD system
    (sometimes referred to as *BSD Unix*), the operating system that contained the
    original reference implementation of the TCP/IP Internet protocols in the early
    1980s.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对历史感兴趣，你可能已经知道OpenBSD和其他BSD^([[3](#ftn.ch01fn03)])是BSD系统的直接后裔（有时称为*BSD Unix*），这是一个包含了1980年代早期TCP/IP互联网协议原始参考实现的操作系统。
- en: As the research project behind BSD development started winding down in the early
    1990s, the code was liberated for further development by small groups of enthusiasts
    around the world. Some of these enthusiasts were responsible for keeping vital
    parts of the emerging Internet’s infrastructure running reliably, and BSD development
    continued along parallel lines in several groups. The OpenBSD group became known
    as the most security-oriented of the BSDs. For its packet-filtering needs, it
    used a subsystem called *IPFilter*, written mainly by Darren Reed. During these
    early years, OpenBSD quickly earned a positive reputation as “THE firewall OS,”
    and it’s still quite common for people to believe that OpenBSD was developed specifically
    for that purpose.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着90年代初期BSD开发背后的研究项目逐渐结束，代码被解放出来，供世界各地的小型开发者团队进一步开发。这些开发者中的一些人负责确保新兴互联网的关键基础设施稳定运行，BSD开发在多个团队中平行进行。OpenBSD团队成为了BSD家族中最注重安全的团队。为了满足包过滤的需求，它使用了一个名为*IPFilter*的子系统，主要由Darren
    Reed编写。在这些早期的岁月里，OpenBSD迅速赢得了“防火墙操作系统”的美誉，至今仍然有人认为OpenBSD是专门为此目的开发的。
- en: It shocked the OpenBSD community when Reed announced in early 2001 that IPFilter,
    which at that point was intimately integrated with OpenBSD, wasn’t covered under
    the BSD license. Instead, it used almost a word-for-word copy of the license,
    omitting only the right to make changes to the code and distribute the result.
    The problem was that the OpenBSD version of IPFilter contained several changes
    and customizations that, as it turned out, were not allowed under the license.
    As a result, IPFilter was deleted from the OpenBSD source tree on May 29, 2001,
    and for a few weeks, the development version of OpenBSD (-current) didn’t include
    any packet filter software.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当Reed在2001年初宣布，已经与OpenBSD紧密集成的IPFilter并不受BSD许可证的保护时，OpenBSD社区感到震惊。事实上，它使用的是几乎逐字复制的许可证，只是省略了对代码进行修改和分发结果的权利。问题在于，OpenBSD版本的IPFilter包含了几项更改和定制，而这些更改显然不符合许可证要求。结果，IPFilter于2001年5月29日被从OpenBSD源代码树中删除，几周内，OpenBSD的开发版本（-current）中没有任何包过滤软件。
- en: Fortunately, at this time, in Switzerland, Daniel Hartmeier had been performing
    some limited experiments involving kernel hacking in the networking code. He began
    by hooking a small function of his own into the networking stack and then making
    packets pass through it. Then, he began thinking about filtering. When the license
    crisis happened, PF was already under development on a small scale. The first
    commit of the PF code was on Sunday, June 24, 2001, at 19:48:58 UTC. A few months
    of intense activity by many developers followed, and the resulting version of
    PF was launched as a default part of the OpenBSD 3.0 base system in December of
    2001.^([[4](#ftn.ch01fn04)]) This version contained an implementation of packet
    filtering, including network address translation, with a configuration language
    that was similar enough to IPFilter’s that migrating to the new OpenBSD version
    did not pose major problems.^([[5](#ftn.ch01fn05)])
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在此时，丹尼尔·哈特迈尔（Daniel Hartmeier）在瑞士进行了一些涉及内核黑客技术的有限实验，实验内容涉及网络代码。他首先将自己编写的一个小函数挂接到网络堆栈中，然后让数据包经过它。接着，他开始思考过滤问题。当许可证危机发生时，PF已经在小规模开发中。PF代码的第一次提交发生在2001年6月24日星期天，19:48:58
    UTC。接下来是几个月的开发者密集活动，最终PF的版本作为OpenBSD 3.0基础系统的默认部分于2001年12月发布。^([[4](#ftn.ch01fn04)])
    该版本包含了数据包过滤的实现，包括网络地址转换（NAT），并且其配置语言与IPFilter相似，因此迁移到新的OpenBSD版本时没有遇到重大问题。^([[5](#ftn.ch01fn05)])
- en: PF proved to be well-developed software. In 2002, Hartmeier presented a USENIX
    paper with performance tests showing that the OpenBSD 3.1 PF performed equally
    well or better under stress than either IPFilter on OpenBSD 3.1 or iptables on
    Linux. In addition, tests run on the original PF from OpenBSD 3.0 showed mainly
    that the code had gained in efficiency from version 3.0 to version 3.1.^([[6](#ftn.ch01fn06)])
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PF证明是一个开发成熟的软件。2002年，哈特迈尔在USENIX会议上发表了一篇论文，进行的性能测试表明，在压力测试下，OpenBSD 3.1的PF与OpenBSD
    3.1上的IPFilter或Linux上的iptables性能相当，甚至更好。此外，在OpenBSD 3.0的原始PF上进行的测试表明，从3.0版本到3.1版本，代码的效率得到了显著提升。^([[6](#ftn.ch01fn06)])
- en: The OpenBSD PF code, with a fresh packet-filtering engine written by experienced
    and security-oriented developers, naturally generated interest in the sister BSDs
    as well. The FreeBSD project gradually adopted PF, first as a package and then,
    from version 5.3 on, in the base system as one of three packet-filtering systems.
    PF has also been included in NetBSD and DragonFly BSD.^([[7](#ftn.ch01fn07)])
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenBSD的PF代码，由经验丰富且注重安全性的开发人员编写，配备了全新的数据包过滤引擎， naturally 引起了其他BSD系统的兴趣。FreeBSD项目逐渐采纳了PF，最初作为一个包管理器软件包，之后从5.3版本开始，作为三种数据包过滤系统之一，集成到了基础系统中。PF还被包括在NetBSD和DragonFly
    BSD中。^([[7](#ftn.ch01fn07)])
- en: This book focuses on the PF version available in OpenBSD 5.5\. I’ll note significant
    differences between that version and the ones integrated in other systems as appropriate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书聚焦于OpenBSD 5.5中可用的PF版本。根据需要，我会指出该版本与其他系统中集成的版本之间的显著差异。
- en: If you’re ready to dive into PF configuration, you can jump to [Chapter 2](ch02.html
    "Chapter 2. PF Configuration Basics") to get started. If you want to spend a little
    more time getting your bearings in unfamiliar BSD territory, continue reading
    this chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好深入PF配置，可以跳到[第2章](ch02.html "第2章 PF配置基础")开始。如果你想花更多时间在不熟悉的BSD领域中摸索，可以继续阅读本章。
- en: Newer PF Releases Perform Better
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 更新版的PF发布性能更佳
- en: Like the rest of the computing world, OpenBSD and PF have been affected by rapid
    changes in hardware and network conditions. I haven’t seen tests comparable to
    the ones in Daniel Hartmeier’s USENIX paper performed recently, but PF users have
    found that the filtering overhead is modest.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与计算机世界的其余部分一样，OpenBSD和PF也受到了硬件和网络条件快速变化的影响。我最近没有看到与丹尼尔·哈特迈尔USENIX论文中进行的测试相当的测试，但PF用户发现其过滤开销适中。
- en: As an example (mainly to illustrate that even unexciting hardware configurations
    can be useful), the machine that gateways between one small office network in
    my care and the world is a Pentium III 450MHz with 384MB of RAM. When I’ve remembered
    to check, I’ve never seen the machine at less than 96 percent idle according to
    the output from the `top(1)` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子（主要是为了说明即使是平凡的硬件配置也可以有用），我负责管理的小型办公室网络与外界之间的网关机器是一台450MHz的Pentium III，配备384MB的RAM。每当我检查时，从`top(1)`命令的输出来看，这台机器从未低于96%的空闲状态。
- en: It’s also worth noting that the current PF developers, mainly Henning Brauer
    and Ryan McBride, with contributions from several others, rewrote large portions
    of OpenBSD’s PF code with improved performance as a stated main goal during recent
    releases, making each release from 4.4 through 5.6 perform noticeably better than
    its predecessors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，当前的PF开发者主要是Henning Brauer和Ryan McBride，他们在最近的发布版本中对OpenBSD的PF代码进行了大量重写，提升了性能，并将性能提升作为主要目标，使得从4.4到5.6的每个版本在性能上都有明显改善。
- en: If You Came from Elsewhere
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你来自其他系统
- en: If you’re reading this because you’re considering moving your setup to PF from
    some other system, this section is for you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本节内容，是因为你正在考虑将你的设置从其他系统迁移到PF，那么这一节是为你准备的。
- en: If you want to use PF, you need to install and run a BSD system, such as OpenBSD,
    FreeBSD, NetBSD, or DragonFly BSD. These are all fine operating systems, but my
    personal favorite is OpenBSD, mainly because that’s the operating system where
    essentially all PF development happens. I also find the no-nonsense approach of
    the developers and the system refreshing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用PF，你需要安装并运行一个BSD系统，例如OpenBSD、FreeBSD、NetBSD或DragonFly BSD。这些都是很好的操作系统，但我个人最喜欢的是OpenBSD，主要是因为几乎所有PF的开发工作都发生在这个操作系统中。我也觉得开发者的务实态度和系统的简洁性令人耳目一新。
- en: Occasionally, minor changes and bug fixes trickle back to the main PF code base
    from the PF implementations on other systems, but the newest, most up-to-date
    PF code is always to be found on OpenBSD. Some of the features described in this
    book are available only in the most recent versions of OpenBSD. The other BSDs
    have tended to port the latest released PF version from OpenBSD to their code
    bases in time for their next release, but synchronized updates are far from guaranteed,
    and the lag is sometimes considerable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，来自其他系统的PF实现会将一些小的改动和bug修复反馈到主PF代码库，但最新、最更新的PF代码始终可以在OpenBSD上找到。本书中描述的某些功能仅在OpenBSD的最新版本中可用。其他BSD系统通常会将OpenBSD最新发布的PF版本移植到它们的代码库中，以便在下次发布时使用，但同步更新远非保证，而且有时延迟会相当显著。
- en: If you’re planning to run PF on FreeBSD, NetBSD, DragonFly BSD, or another system,
    you should check your system’s release notes and other documentation for information
    about which version of PF is included.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在FreeBSD、NetBSD、DragonFly BSD或其他系统上运行PF，你应该查看你系统的发布说明和其他文档，了解包含的PF版本。
- en: Pointers for Linux Users
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux用户指南
- en: 'The differences and similarities between Linux and BSD are potentially a large
    topic if you probe deeply, but if you have a reasonable command of the basics,
    it shouldn’t take too long for you to feel right at home with the BSD way of doing
    things. In the rest of this book, I’ll assume you can find your way around the
    basics of BSD network configuration. So, if you’re more familiar with configuring
    Linux or other systems than you are with BSD, it’s worth noting a few points about
    BSD configuration:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和BSD之间的差异和相似之处如果深入探讨，可能会成为一个庞大的话题，但如果你对基本知识有一定掌握，应该不会花太多时间就能适应BSD的操作方式。在本书的其余部分，我将假设你能够熟悉BSD网络配置的基本内容。所以，如果你对Linux或其他系统的配置更为熟悉而不是BSD，值得注意一些关于BSD配置的要点：
- en: Linux and BSD use different conventions for naming network interfaces. The Linux
    convention is to label all the network interfaces on a given machine in the sequence
    `eth0`, `eth1`, and so on (although with some Linux versions and driver combinations,
    you also see `wlan0`, `wlan1`, and so on for wireless interfaces).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux和BSD在命名网络接口时使用不同的约定。Linux的约定是按照顺序标记机器上的所有网络接口，依次为`eth0`、`eth1`等（尽管在某些Linux版本和驱动组合中，你还会看到`wlan0`、`wlan1`等无线接口）。
- en: On the BSDs, interfaces are assigned names that equal the driver name plus a
    sequence number. For example, older 3Com cards using the ep driver appear as `ep0`,
    `ep1`, and so on; Intel Gigabit cards are likely to end up as `em0`, `em1`, and
    so on. Some SMC cards are listed as `sn0`, `sn1`, and so on. This system is quite
    logical and makes it easier to find the documentation for the specifics of that
    interface. If your kernel reports (at boot time or in `ifconfig` output) that
    you have an interface called `em0`, you need only type `man em` at a shell command-line
    prompt to find out what speeds it supports—whether there are any eccentricities
    to be aware of, whether any firmware download is needed, and so on.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在BSD系统中，接口会被分配一个名称，该名称由驱动程序名和一个序列号组成。例如，使用ep驱动的旧版3Com卡会显示为`ep0`、`ep1`，依此类推；Intel千兆卡可能会显示为`em0`、`em1`，依此类推。某些SMC卡会列为`sn0`、`sn1`，依此类推。这种系统非常合乎逻辑，使得查找该接口的具体文档变得更容易。如果你的内核（在启动时或在`ifconfig`输出中）报告说你有一个名为`em0`的接口，你只需在Shell命令行中输入`man
    em`，即可查找该接口支持的速度——是否有任何特殊要求，需要下载固件等等。
- en: You should be aware that in BSDs, the configuration is */etc/rc.conf*-centric.
    In general, the BSDs are organized to read the configuration from the file */etc/rc.conf*,
    which is read by the */etc/rc* script at startup. OpenBSD recommends using */etc/rc.conf.local*
    for local customizations because *rc.conf* contains the default values. FreeBSD
    uses */etc/defaults/rc.conf* to store the default settings, making */etc/rc.conf*
    the correct place to make changes. In addition, OpenBSD uses per-interface configuration
    files called *hostname.<if>*, where *<if>* is replaced with the interface name.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该了解，在BSD系统中，配置是以*/etc/rc.conf*为中心的。一般来说，BSD系统会从文件*/etc/rc.conf*读取配置，该文件在启动时由*/etc/rc*脚本读取。OpenBSD建议使用*/etc/rc.conf.local*来进行本地自定义，因为*rc.conf*包含默认值。FreeBSD使用*/etc/defaults/rc.conf*来存储默认设置，使得*/etc/rc.conf*成为进行更改的正确位置。此外，OpenBSD使用每个接口的配置文件，名为*hostname.<if>*，其中*<if>*会被接口名替换。
- en: For the purpose of learning PF, you’ll need to concentrate on an */etc/pf.conf*
    file, which will be largely your own creation.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了学习PF，你需要专注于一个*/etc/pf.conf*文件，这个文件大部分将是你自己的创作。
- en: If you need a broader and more thorough introduction to your BSD of choice,
    look up the operating system’s documentation, including FAQs and guides, at the
    project’s website. You can also find some suggestions for further reading in [Appendix A](apa.html
    "Appendix A. Resources").
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要对所选BSD操作系统有更广泛和更全面的了解，请查阅操作系统的文档，包括FAQ和指南，可以在项目的网站上找到。你还可以在[附录A](apa.html
    "附录A. 资源")中找到一些进一步阅读的建议。
- en: Frequently Answered Questions About PF
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于PF的常见问题解答
- en: This section is based on questions I’ve been asked via email or at meetings
    and conferences as well as some that have popped up in mailing lists and other
    discussion forums. Some of the more common questions are covered here in a FAQ-style^([[8](#ftn.ch01fn08)])
    format.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容基于我在电子邮件、会议和研讨会上收到的提问，以及在邮件列表和其他讨论论坛中出现的一些问题。这里以FAQ样式^([[8](#ftn.ch01fn08)])的格式涵盖了一些更常见的问题。
- en: Can I run PF on my Linux machine?
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我可以在我的Linux机器上运行PF吗？
- en: In a word, no. Over the years, announcements have appeared on the PF mailing
    list from someone claiming to have started a Linux port of PF, but at the time
    of this writing, no one has yet claimed to have completed the task. The main reason
    for this is probably that PF is developed primarily as a deeply integrated part
    of the OpenBSD networking stack. Even after more than a decade of parallel development,
    the OpenBSD code still shares enough fundamentals with the other BSDs to make
    porting possible, but porting PF to a non-BSD system would require rewriting large
    chunks of PF itself as well as whatever integration is needed at the target side.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，不能。在过去的几年里，PF邮件列表上曾有某人宣称已开始将PF移植到Linux，但截至目前为止，还没有人声称已完成这一任务。其主要原因可能是PF主要作为OpenBSD网络栈的一个深度集成部分进行开发。即使在经过十多年并行开发后，OpenBSD代码与其他BSD系统仍然共享足够的基础，使得移植成为可能，但将PF移植到非BSD系统将需要重写PF的很大一部分代码，以及根据目标平台的需要进行集成。
- en: For some basic orientation tips for Linux users to find their way in BSD network
    configurations, see [Pointers for Linux Users](ch01.html#pointers_for_linux_users
    "Pointers for Linux Users").
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux用户如何在BSD网络配置中找到方向的一些基本指导，请参阅[Linux用户指南](ch01.html#pointers_for_linux_users
    "Linux用户指南")。
- en: Can you recommend a GUI tool for managing my PF rule set?
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你能推荐一个GUI工具来管理我的PF规则集吗？
- en: This book is mainly oriented toward users who edit their rule sets in their
    favorite text editor. The sample rule sets in this book are simple enough that
    you probably wouldn’t get a noticeable benefit from any of the visualization options
    the various GUI tools are known to offer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要面向那些在自己喜欢的文本编辑器中编辑规则集的用户。本书中的示例规则集足够简单，你可能不会从各种GUI工具提供的可视化选项中获得显著的收益。
- en: A common claim is that the PF configuration files are generally readable enough
    that a graphic visualization tool isn’t really necessary. There are, however,
    several GUI tools available that can edit and/or generate PF configurations, including
    a complete, customized build of FreeBSD called *pfSense* (*[http://www.pfsense.org/](http://www.pfsense.org/)*),
    which includes a sophisticated GUI rule editor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的说法是，PF配置文件通常足够可读，以至于不需要图形可视化工具。然而，确实有几种可用的GUI工具可以编辑和/或生成PF配置，包括一个完整的、定制的FreeBSD版本，名为*pfSense*（*
    [http://www.pfsense.org/](http://www.pfsense.org/)*），它包含一个复杂的GUI规则编辑器。
- en: I recommend that you work through the parts of this book that apply to your
    situation and then decide whether you need to use a GUI tool to feel comfortable
    running and maintaining the systems you build.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你根据本书中与你的情况相关的部分进行学习，然后决定是否需要使用GUI工具，以便更舒适地运行和维护你所构建的系统。
- en: Is there a tool I can use to convert my OtherProduct^® setup to a PF configuration?
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有没有工具可以将我的OtherProduct^®设置转换为PF配置？
- en: The best strategy when converting network setups, including firewall setups,
    from one product to another is to go back to the specifications or policies for
    your network or firewall configuration and then implement the policies using the
    new tool.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络设置（包括防火墙设置）从一种产品转换到另一种产品时，最佳策略是回到网络或防火墙配置的规范或政策，然后使用新工具实施这些政策。
- en: Other products will inevitably have a slightly different feature set, and the
    existing configuration you created for OtherProduct^® is likely to mirror slightly
    different approaches to specific problems, which do not map easily, or at all,
    to features in PF and related tools.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其他产品不可避免地会有稍微不同的功能集，而你为OtherProduct^®创建的现有配置可能会在某些特定问题的处理方式上有所不同，这些差异可能无法直接映射到PF及其相关工具中的功能。
- en: Having a documented policy, and taking care to update it as your needs change,
    will make your life easier. This documentation should contain a complete prose
    specification of what your setup is meant to achieve. (You might start out by
    putting comments in your configuration file to explain the purpose of your rules.)
    This makes it possible to verify whether the configuration you’re running actually
    implements the design goals. In some corporate settings, there may even be a formal
    requirement for a written policy.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一份文档化的政策，并随着需求的变化及时更新，将使你的工作更加轻松。这份文档应包含一份完整的文字说明，解释你的设置旨在实现什么目标。（你可以通过在配置文件中添加注释来解释规则的目的，作为起点。）这使得可以验证你当前运行的配置是否真正实现了设计目标。在一些公司环境中，甚至可能有书面政策的正式要求。
- en: The impulse to look for a way to automate your conversion is quite understandable
    and perhaps expected in a system administrator. I urge you to resist the impulse
    and to perform your conversion after reevaluating your business and technical
    needs and (preferably) after creating or updating a formal specification or policy
    in the process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找一种自动化转换的方式是完全可以理解的，尤其是对于系统管理员来说，这也许是预期的。我建议你克制这个冲动，在重新评估你的业务和技术需求之后，再进行转换操作，并（最好）在此过程中创建或更新正式的规范或政策。
- en: Some of the GUI tools that serve as administration frontends claim the ability
    to output configuration files for several firewall products and could conceivably
    be used as conversion tools. However, this has the effect of inserting another
    layer of abstraction between you and your rule set, and it puts you at the mercy
    of the tool author’s understanding of how PF rule sets work. I recommend working
    through at least the relevant parts of this book before spending serious time
    on considering an automated conversion.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些作为管理前端的GUI工具声称能够输出多个防火墙产品的配置文件，并可能作为转换工具使用。然而，这样做的结果是将你与规则集之间增加了一层抽象层，并且你将受制于工具作者对PF规则集工作原理的理解。我建议你至少学习本书中相关的部分，然后再考虑花费大量时间进行自动化转换。
- en: I heard PF is based on IPFilter, which I know from working with Solaris. Can
    I just copy my IPFilter configuration across and have a working setup right away?
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我听说PF基于IPFilter，我曾在Solaris中使用过IPFilter。我可以直接将我的IPFilter配置复制过去，并立即得到一个可用的配置吗？
- en: If people claim that PF is “based on” IPFilter, they are saying something that
    isn’t true. PF was written from scratch to be a replacement for the newly deleted
    IPFilter code. For that first version of PF, one of the design goals was to keep
    the syntax fairly compatible with the older software so the transition to OpenBSD
    3.0 would be as painless as possible and not break existing setups too badly or
    in unpredictable ways.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人声称PF是“基于”IPFilter的，那是不准确的。PF是从零开始编写的，目的是替代被新删除的IPFilter代码。在PF的第一个版本中，设计目标之一是尽量保持语法与旧软件兼容，这样从OpenBSD
    3.0过渡时，能够尽量减少痛苦，并且不会过度破坏现有配置，或者以不可预测的方式破坏它们。
- en: However, a version or two down the road, it was reasonable to believe that no
    OpenBSD users were still likely to upgrade from a version that contained IPFilter,
    so staying compatible with the older system fell off the list of priorities. Some
    syntax similarities remain, even after 25 OpenBSD releases and more than 12 years
    of active development. Trying to load one system’s configuration on the other—for
    example, copying across an IPFilter configuration to an OpenBSD system and trying
    to load it there or copying a modern PF configuration to a Solaris system and
    trying to load it as an IPFilter configuration—is guaranteed to fail in almost
    all cases, except for a few specially crafted but still quite trivial and, in
    fact, rather useless configurations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在未来的一个或两个版本中，认为没有OpenBSD用户仍然可能从包含IPFilter的版本进行升级是合理的，因此保持与旧系统兼容不再是优先事项。即便经过了25个OpenBSD版本和12年以上的积极开发，仍然保持一些语法相似性。试图将一个系统的配置加载到另一个系统中——例如，将IPFilter的配置复制到OpenBSD系统并尝试加载，或者将现代PF配置复制到Solaris系统并尝试作为IPFilter配置加载——几乎在所有情况下都会失败，除非是一些特别精心制作但仍然相当简单且实际上非常无用的配置。
- en: Why did the PF rule syntax change all of a sudden?
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为什么PF的规则语法突然发生了变化？
- en: The world changed, and PF changed with it. More specifically, the OpenBSD developers
    have a very active and pragmatically critical relationship to their code, and
    like all parts of OpenBSD, the PF code is under constant review.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 世界发生了变化，PF也随之变化。更具体地说，OpenBSD开发者对他们的代码有着非常积极且务实的批判性关系，像OpenBSD的所有部分一样，PF代码也在不断审查之中。
- en: The lessons learned over more than a decade of PF development and use led to
    internal changes in the code that eventually made it clear to the developers that
    changing the syntax slightly would make sense. The changes would make the PF syntax
    more consistent and make life easier for users in the long run at the price of
    some light edits of configuration files. The result for you, the user, is that
    PF is now even easier to use and that it performs better than the earlier versions.
    If you’re upgrading your system to OpenBSD 4.7 or newer, you’re in for a real
    treat.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在超过十年的PF开发和使用过程中获得的经验教训，促使了代码内部的变化，最终让开发者们意识到稍微调整语法是有意义的。这些变化使PF语法更加一致，并且从长远来看，使用户的使用更加轻松，代价只是对配置文件进行一些轻微编辑。对你来说，用户，现在PF变得更加易用，而且比早期版本性能更好。如果你正在将系统升级到OpenBSD
    4.7或更高版本，你将体验到真正的惊喜。
- en: 'And with OpenBSD 5.5, you’ll find another good reason to upgrade: the new queuing
    system for traffic shaping, which is intended to replace the venerable ALTQ system.
    ALTQ is still part of OpenBSD 5.5, although in slightly modified form, but it
    has already been removed from the OpenBSD kernel in time for the OpenBSD 5.6 release.
    [Chapter 7](ch07.html "Chapter 7. Traffic Shaping with Queues and Priorities")
    contains a section specifically about migrating to the new traffic-shaping system.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenBSD 5.5中，你将找到另一个升级的好理由：新的流量整形队列系统，旨在替代久负盛名的ALTQ系统。虽然ALTQ仍然是OpenBSD 5.5的一部分，且略有修改，但它已经在OpenBSD
    5.6版本中被移除。关于迁移到新流量整形系统的内容可以在[第7章](ch07.html "第7章. 使用队列和优先级进行流量整形")找到专门的部分。
- en: Where can I find out more?
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我在哪里可以了解更多信息？
- en: There are several good sources of information about PF and the systems on which
    it runs. You’ve already found one in this book. You can find references to a number
    of printed and online resources in [Appendix A](apa.html "Appendix A. Resources").
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个很好的资源可以了解PF以及它运行的系统，你已经在本书中找到了一个。你可以在[附录A](apa.html "附录A. 资源")中找到一些印刷版和在线资源的参考。
- en: If you have a BSD system with PF installed, consult the online manual pages,
    or *man pages*, for information about your exact release of the software. Unless
    otherwise indicated, the information in this book refers to the world as it looks
    from the command line on an OpenBSD 5.5 system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有安装了 PF 的 BSD 系统，可以查阅在线手册页或 *man 页*，获取有关你所使用的软件版本的详细信息。除非另有说明，本书中的信息指的是从
    OpenBSD 5.5 系统的命令行视角所看到的世界。
- en: 'A Little Encouragement: A PF Haiku'
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一点鼓励：PF 俳句
- en: If you’re not quite convinced yet, or even if you are, a little encouragement
    may be in order. Over the years, a good many people have said and written their
    bit about PF—sometimes odd, sometimes wonderful, and sometimes just downright
    strange.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有完全相信，或者即使你已经相信了，也许还是需要一点鼓励。多年来，很多人已经对 PF 发表了自己的看法——有时很奇怪，有时很精彩，有时则非常怪异。
- en: The poem quoted here is a good indication of the level of feeling PF sometimes
    inspires in its users. This poem appeared on the PF mailing list, in a thread
    that started with a message with the subject “Things pf can’t do?” in May 2004\.
    The message was written by someone who didn’t have a lot of firewall experience
    and who consequently found it hard to get the desired setup.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里引用的诗歌很好地反映了 PF 有时激发用户情感的程度。这首诗出现在 PF 邮件列表中，最初是一封主题为“Things pf can’t do?”的邮件，在
    2004 年 5 月开始。这封邮件的作者是一个没有太多防火墙经验的人，因此在设置过程中遇到了困难。
- en: This, of course, led to some discussion, with several participants saying that
    if PF was hard on a newbie, the alternatives weren’t any better. The thread ended
    in the following haiku of praise from Jason Dixon, dated May 20, 2004.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这引发了一些讨论，几位参与者表示，如果 PF 对新手来说很难，其他替代方案也不会更好。该讨论以 Jason Dixon 于 2004 年 5 月
    20 日写的俳句结尾。
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some of the concepts Dixon mentions here may sound a bit unfamiliar, but if
    you read on, it’ll all make sense soon.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Dixon 在这里提到的一些概念可能听起来有些陌生，但如果你继续阅读，很快就会明白。
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[1](#ch01fn01)]) The famous worms before the Windows era were the IBM Christmas
    Tree EXEC worm (1987) and the first Internet worm, the Morris worm (1988). A wealth
    of information about both is within easy reach of your favorite search engine.
    The Windows era of networked worms is considered to have started with the ILOVEYOU
    worm in May 2000.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[1](#ch01fn01)]) Windows 时代之前著名的蠕虫包括 IBM 圣诞树 EXEC 蠕虫（1987 年）和第一只互联网蠕虫 Morris
    蠕虫（1988 年）。有关这两者的丰富信息可以轻松通过你喜欢的搜索引擎找到。Windows 时代的网络蠕虫被认为是从 2000 年 5 月的 ILOVEYOU
    蠕虫开始的。
- en: '^([[2](#ch01fn02)]) Several presentations on OpenBSD’s approach to security
    can be found via the collection at *[http://www.openbsd.org/papers/](http://www.openbsd.org/papers/)*.
    Some of my favorites are Theo de Raadt’s “Exploit Mitigation Techniques” (as well
    as the 2013 follow-up, “Security Mitigation Techniques: An Update After 10 Years”),
    Damien Miller’s “Security Measures in OpenSSH,” and Henning Brauer and Sven Dehmlow’s
    “Puffy at Work—Getting Code Right and Secure, the OpenBSD Way.”'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '^([[2](#ch01fn02)]) 有关 OpenBSD 安全方法的多个演讲可以通过* [http://www.openbsd.org/papers/](http://www.openbsd.org/papers/)*
    的汇总找到。我最喜欢的一些包括 Theo de Raadt 的《Exploit Mitigation Techniques》（以及 2013 年的后续讲座《Security
    Mitigation Techniques: An Update After 10 Years》），Damien Miller 的《Security Measures
    in OpenSSH》，以及 Henning Brauer 和 Sven Dehmlow 的《Puffy at Work—Getting Code Right
    and Secure, the OpenBSD Way》。'
- en: '^([[3](#ch01fn03)]) If *BSD* doesn’t sound familiar, here is a short explanation:
    The acronym expands to *Berkeley Software Distribution* and originally referred
    to a collection of useful software developed for the Unix operating system by
    staff and students at the University of California, Berkeley. Over time, the collection
    expanded into a complete operating system, which in turn became the forerunner
    of a family of systems, including OpenBSD, FreeBSD, NetBSD, DragonFly BSD, and,
    by some definitions, even Apple’s Mac OS X. For a very readable explanation of
    what BSD is, see Greg Lehey’s “Explaining BSD” at *[http://www.freebsd.org/doc/en/articles/explaining-bsd/](http://www.freebsd.org/doc/en/articles/explaining-bsd/)*
    (and, of course, the projects’ websites).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[3](#ch01fn03)]) 如果 *BSD* 这个词听起来不熟悉，这里有一个简短的解释：这个缩写代表 *Berkeley Software
    Distribution*，最初指的是加利福尼亚大学伯克利分校的工作人员和学生为 Unix 操作系统开发的一系列有用软件。随着时间的推移，这些软件扩展成了一个完整的操作系统，而这个操作系统成为了一个系列操作系统的前身，包括
    OpenBSD、FreeBSD、NetBSD、DragonFly BSD，甚至按某些定义，包括苹果的 Mac OS X。要了解 BSD 是什么，可以阅读 Greg
    Lehey 的《Explaining BSD》，该文发表于 *[http://www.freebsd.org/doc/en/articles/explaining-bsd/](http://www.freebsd.org/doc/en/articles/explaining-bsd/)*（当然，还有各个项目的官方网站）。
- en: ^([[4](#ch01fn04)]) The IPFilter copyright episode spurred the OpenBSD team
    to perform a license audit of the entire source tree in order to avoid similar
    situations in the future. Several potential problems were resolved over the months
    that followed, resulting in the removal of a number of potential license pitfalls
    for everyone involved in free software development. Theo de Raadt summed up the
    effort in a message to the *openbsd-misc* mailing list on February 20, 2003\.
    The initial drama of the license crisis had blown over, and the net gain was a
    new packet-filtering system under a free license, with the best code quality available,
    as well as better free licenses for a large body of code in OpenBSD itself and
    in other widely used free software.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[4](#ch01fn04)]) IPFilter版权事件促使OpenBSD团队对整个源代码树进行许可证审计，以避免未来出现类似情况。在接下来的几个月中，解决了几个潜在问题，最终消除了许多可能的许可证陷阱，惠及所有参与自由软件开发的人。Theo
    de Raadt在2003年2月20日向*openbsd-misc*邮件列表发送的消息中总结了这一努力。许可证危机的初步剧烈波动已经平息，而最终的成果是一个新的基于自由许可证的包过滤系统，具备最佳的代码质量，并且OpenBSD本身及其他广泛使用的自由软件中的大量代码也获得了更好的自由许可证。
- en: ^([[5](#ch01fn05)]) Compatibility with IPFilter configurations was an early
    design goal for the PF developers, but it stopped being a priority once it could
    be safely assumed that all OpenBSD users had moved to PF (around the time OpenBSD
    3.2 was released, if not earlier). You shouldn’t assume that an existing IPFilter
    configuration will work without changes with any version of PF. With the syntax
    changes introduced in OpenBSD 4.7, even upgrades from earlier PF versions will
    involve some conversion work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[5](#ch01fn05)]) 与IPFilter配置的兼容性是PF开发者早期的设计目标，但一旦可以安全地假设所有OpenBSD用户已经迁移到PF（大约在OpenBSD
    3.2发布时，如果不是更早的话），这一目标就不再是优先事项。你不应该假设现有的IPFilter配置在任何版本的PF中都能无修改地工作。随着OpenBSD 4.7引入的语法变化，即使是从早期PF版本的升级，也需要进行一定的转换工作。
- en: ^([[6](#ch01fn06)]) The article that provides the details of these tests is
    available from Daniel Hartmeier’s website. See *[http://www.benzedrine.cx/pf-paper.html](http://www.benzedrine.cx/pf-paper.html)*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[6](#ch01fn06)]) 提供这些测试详细信息的文章可以在Daniel Hartmeier的网站上找到。请参阅 *[http://www.benzedrine.cx/pf-paper.html](http://www.benzedrine.cx/pf-paper.html)*。
- en: ^([[7](#ch01fn07)]) At one point, there even existed a personal firewall product
    running on Microsoft Windows, named *Core Force*, that was based on a port of
    PF. By early 2010, Core Security, the company that developed Core Force (*[http://force.coresecurity.com/](http://force.coresecurity.com/)*),
    seemed to have shifted focus to other security areas, such as penetration testing,
    but the product was still available for download.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[7](#ch01fn07)]) 曾经存在过一款运行在Microsoft Windows上的个人防火墙产品，名为*Core Force*，它是基于PF的移植版本。到2010年初，开发Core
    Force的公司Core Security（*http://force.coresecurity.com/*）似乎已经将重心转向了其他安全领域，如渗透测试，但该产品仍然可以下载。
- en: ^([[8](#ch01fn08)]) The three-letter abbreviation FAQ expands to either *frequently
    asked questions* or *frequently answered questions*—both equally valid.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[8](#ch01fn08)]) 三个字母的缩写FAQ可以扩展为*frequently asked questions*或*frequently
    answered questions*——两者都是有效的。
