- en: '**5**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SURVEILLANCE AND RASPBERRY PI**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you can detect zombies, it’s also a good idea to monitor their movements.
    But don’t risk joining the undead ranks by following them around! Watch them safely
    from inside your base, and you’ll keep your brain intact. This chapter shows you
    how to make a surveillance camera setup with USB and wireless webcams, using a
    Raspberry Pi single-board computer to minimize your energy usage (see [Figure
    5-1](ch05.html#ch05fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: Both projects in this chapter require you to download software, so you’d be
    well advised to think ahead and get your system set up before disaster strikes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-1: Zombie smiling and waving at a webcam'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE RASPBERRY PI**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You could get these projects working with a regular laptop or desktop computer,
    but those devices take a fair bit of power. A laptop typically consumes 20W to
    60W, and a desktop draws even more. Also, you’d need an AC inverter. Laptop power
    supplies provide low-voltage DC, but generally that voltage is still higher than
    12V, so powering directly from a 12V battery wouldn’t be an option.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, if you have to shift bases because the zombie population density has
    gotten too high, do you really want to risk being weighed down by a giant desktop
    tower?
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi, on the other hand, is a tiny Linux computer on a single board
    about the size of a credit card, and it uses less than 3W of power. A Raspberry
    Pi Model B+ is used in this project and throughout this book ([Figure 5-2](ch05.html#ch05fig2)).
    If you happen to have an older Raspberry Pi Model B or a newer Raspberry Pi 2,
    they should also work just fine. In fact, the extra power of the Pi 2 should make
    the webcam browser page perform noticeably quicker. Models A and A+ are not ideal,
    as they are less powerful and have less memory than the other models.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-2: A Raspberry Pi Model B+'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi can run simple Python scripts, and you can link it to external
    hardware, too. For example, in “[Project 7: Monitor Zombies with a USB Webcam](ch05.html#ch00lev1sec95)”
    on [page 87](ch05.html#page_87), when the webcam detects movement, an LED will
    turn from green to red using the Raspberry Pi’s GPIO (general purpose input and
    output) connector. The GPIO connector is the double row of pins down one side
    of the board ([Figure 5-2](ch05.html#ch05fig2)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE RASPBERRY PI SYSTEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A complete Raspberry Pi system includes a USB keyboard, a mouse, and a small
    HDMI (High-Definition Multimedia Interface) monitor ([Figure 5-3](ch05.html#ch05fig3)).
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard and mouse are standard items that you can buy anywhere. For a constant
    visual on your zombie foes, you’ll need something to watch the video feed on,
    and you could just connect a normal TV or monitor to the Raspberry Pi. However,
    to save even more power, this project uses a 12V DC monitor with a 7-inch (180
    mm) display. At worst, this might double the power consumption to a peak of 6W.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-3: A Raspberry Pi system'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To use this Raspberry Pi system with a 12V battery as this book describes, you’ll
    need the following items.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEM** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Raspberry Pi | Model B+ or Pi 2 with NOOBS
    micro SD card | Adafruit (2358), Fry’s (8258726) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Small HDMI monitor | 12V HDMI monitor. Suggested
    device has 800×480 pixel resolution. | Adafruit (1934), eBay |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Keyboard and mouse | Standard USB keyboard
    and mouse | Computer store, online |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) HDMI cable | As short as possible | Computer
    store, online |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 12V to USB adapter | Minimum current of 1 A
    | Auto parts store, Computer store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Vehicle to 2.1 mm jack adapter |  | Auto parts
    store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Powered USB hub | Needed only if you have a
    Raspberry Pi Model B | Computer store, online |'
  prefs: []
  type: TYPE_TB
- en: If you’re using a Model B Raspberry Pi that has only two USB sockets, then you’ll
    need a powered USB hub or a wireless keyboard and mouse combo that uses a single
    USB adapter. Otherwise, the keyboard and mouse will occupy both of the Model B’s
    USB ports, and you won’t be able to plug in the webcam needed in the next project.
  prefs: []
  type: TYPE_NORMAL
- en: '**POWERING THE SYSTEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Raspberry Pi is powered from a micro USB socket, so you can use a 12V-to-USB
    power adapter when powering it from a 12V battery. The monitor I suggest has a
    separate driver board that powers the display and connects it to the Raspberry
    Pi; that’s the printed circuit board (PCB) in the middle of [Figure 5-3](ch05.html#ch05fig3).
    This driver board has a 2.1 mm DC power socket.
  prefs: []
  type: TYPE_NORMAL
- en: A combined cigarette lighter and USB socket adapter (such as in [Figure 5-4](ch05.html#ch05fig4))
    is a great way to power this whole system from batteries. If you haven’t already
    done so, you’ll need to replace the cigarette plug with a pair of alligator clips
    to attach the adapter to the battery. Refer to [Chapter 3](ch03.html#ch03) for
    instructions on how to connect your 12V battery to low-voltage devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-4: Combined USB and 12V DC power adapter'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the power adapter setup of [Figure 5-4](ch05.html#ch05fig4), you can power
    your Raspberry Pi from a normal micro USB lead and, in “[Project 8: A Wireless
    Zombie Surveillance System](ch05.html#ch00lev1sec102)” on [page 96](ch05.html#page_96),
    power the Wi-Fi webcam and router with a DC jack-to-cigarette lighter adapter.
    Check the voltages used by your router and Wi-Fi webcam, but they’re quite likely
    12V DC, which is very handy if you’ve stockpiled car batteries for the apocalypse
    already.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when handling the display, especially if the display has a metal
    back. The exposed underside of the driver board can easily short against the metal,
    damaging the board.
  prefs: []
  type: TYPE_NORMAL
- en: To connect the driver board to a car battery from your stockpile, just make
    a lead with a 2.1 mm jack on one end and alligator clips on the other. However,
    if your battery is overloaded with alligator clips, you may want to attach a multiple
    cigarette lighter socket adapter to it instead. Then you can plug various appliances
    into the adapter with cigarette lighter plugs, as described in “[Cigarette Lighter
    Sockets](ch03.html#ch00lev1sec53)” on [page 46](ch03.html#page_46).
  prefs: []
  type: TYPE_NORMAL
- en: '**INSTALLING RASPBIAN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Raspberry Pi computer doesn’t have a hard disk. Instead, the Raspberry Pi
    2 and Model B+ stores its operating system, programs, and data on a micro SD card.
    Older Raspberry Pi models store that information on a regular SD card. There won’t
    be an Internet after the zombie apocalypse, so get a micro SD card preloaded with
    an operating system (OS)—you won’t be able to download it. In fact, a Raspberry
    Pi with a preloaded SD card usually doesn’t cost much more than the Raspberry
    Pi on its own, so I recommend just buying the preloaded card with your Raspberry
    Pi. If you do want to add an OS to a blank SD card yourself, visit *[http://www.raspberrypi.org/help/noobs-setup/](http://www.raspberrypi.org/help/noobs-setup/)*
    and follow the directions there before the Internet ceases to exist.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you buy a preloaded micro SD card or add the software yourself, this
    book assumes you’re using a micro SD card with the Raspberry Pi Foundation’s NOOBS
    (New Out Of the Box Software) installer. Once you have one, fit the micro SD card
    into the Raspberry Pi; plug in the keyboard, mouse, and monitor; and power everything
    up.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The monitor I suggest for this project should detect the Raspberry Pi through
    the HDMI cable, and the Pi should automatically detect the screen resolution.
    If the Pi doesn’t detect the screen resolution, then visit the Raspberry Pi’s
    documentation page ([http://www.raspberrypi.org/documentation/](http://www.raspberrypi.org/documentation/)),
    go to the Configuration section, and read config.txt to learn how to configure
    your Raspberry Pi. Print the instructions and keep them with this book so you’re
    ready when the apocalypse ends the Internet as we know it.
  prefs: []
  type: TYPE_NORMAL
- en: When you boot the Raspberry Pi with NOOBS, you’ll be offered your choice of
    operating system. This book uses Raspbian, so select the checkbox next to Raspbian
    and then click **Install**. The installation will take a while, so watch your
    PIR zombie detector or double-check your battery stockpile while you wait. Once
    the installer finishes, you’re ready to move on.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspbian distribution comes with a pretty comprehensive set of software,
    but at the time of writing, one thing it lacks is a decent browser that will work
    with a webcam. I favor Chromium, a derivative of Google Chrome that works well
    without hogging so many of the Raspberry Pi’s resources that the Pi becomes too
    zombie-like for comfort. As with most free software, you’ll need to download Chromium
    from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'I apologize if it’s too late, but if it’s not, then connect the Raspberry Pi
    to your preapocalyptic home modem or router with an Ethernet cable. Then, to install
    Chromium, click the **LX Terminal** icon on the Raspberry Pi desktop. A terminal
    window should open, and at first, you should just see a flashing cursor and a
    command prompt like this:'
  prefs: []
  type: TYPE_NORMAL
- en: $
  prefs: []
  type: TYPE_NORMAL
- en: 'Anytime you need to enter commands for a project in this book, I’ll also show
    the dollar command prompt on the left, which you don’t need to type. Now, enter
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo apt-get update
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo apt-get install chromium
  prefs: []
  type: TYPE_NORMAL
- en: The `sudo` (short for *substitute user do*) command allows you to execute administrative
    commands. Prepend it to commands that need administrative access, such as commands
    that install new software as we’re doing now.
  prefs: []
  type: TYPE_NORMAL
- en: The `apt-get` package management software on Debian-based Linux distributions
    such as Raspbian is used to manage and install software. The `update` command
    used with `apt-get` tells your system to update its cached list of available software
    from Internet software repositories. The `apt-get install` command tells `apt-get`
    to search for and install the latest version of the package supplied as the final
    argument, which in this case is Chromium.
  prefs: []
  type: TYPE_NORMAL
- en: With Chromium in place, you are ready to build your surveillance system. Now
    let’s monitor some zombies!
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 7: MONITOR ZOMBIES WITH A USB WEBCAM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project uses a low-cost USB webcam with a long lead attached to the Raspberry
    Pi. The maximum usable length of a USB 2 lead is 96 feet (30 m), so that’s the
    farthest away from the Raspberry Pi that your camera can be.
  prefs: []
  type: TYPE_NORMAL
- en: You can see most of the setup in [Figure 5-5](ch05.html#ch05fig5), though the
    webcam is just out of view on the left; I’ve shown it in the inset photo. One
    of the benefits of building a surveillance system for yourself rather than simply
    using an off-the-shelf closed-circuit television (CCTV) system is that because
    the software is completely under your control, you can customize it however you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: The webcam is controlled by a short Python program that monitors the images
    being captured for changes. When movement is detected on the screen, the program
    uses the Raspberry Pi’s GPIO pins to turn an RGB (red-green-blue) LED from green
    to red. You can cancel the alarm by pressing the spacebar on the keyboard, which
    will turn the LED green again.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-5: Zombie webcam and movement alarm'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantage of this project over “[Project 6: PIR Zombie Detector](ch04.html#ch00lev1sec81)”
    on [page 72](ch04.html#page_72), which uses a PIR sensor, is that now, if the
    alarm is triggered, you can take a good look at the zombies that are about to
    attack you.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To set up this USB webcam, you’ll need the Raspberry Pi setup described in “[The
    Raspberry Pi](ch05.html#ch00lev1sec90)” on [page 82](ch05.html#page_82) and the
    additional items described here.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEM** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) USB webcam | See [http://elinux.org/RPi_USB_Webcams/](http://elinux.org/RPi_USB_Webcams/)
    for compatible webcams. | Computer store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) USB extension lead | Length to suit your compound
    (less than 100 feet [30 m]) | Computer store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Raspberry Squid | Contains the RGB LED | Amazon,
    [http://www.monkmakes.com/](http://www.monkmakes.com/) |'
  prefs: []
  type: TYPE_TB
- en: Not every USB webcam is compatible with the Raspberry Pi, so check *[http://elinux.org/RPi_USB_Webcams](http://elinux.org/RPi_USB_Webcams)*
    for a list of cameras known to work with the Raspberry Pi. I used an HP 2300 Webcam.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi camera module is a high-resolution camera that plugs directly
    into a special connector on the Raspberry Pi. The module is great if you’re making
    a Raspberry Pi camera, but it’s not much use in a situation like this, where you
    want the camera to be some distance from the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Squid is a handy little accessory built just for the Raspberry
    Pi. It has an RGB LED with built-in current-limiting resistors that allow you
    to connect it directly to the Raspberry Pi’s GPIO pins. Its design is open source,
    and you can find details of how to build your own here: *[https://github.com/simonmonk/squid/](https://github.com/simonmonk/squid/)*.
    You can also buy a ready-made Squid; see *[http://www.monkmakes.com/](http://www.monkmakes.com/)*
    for details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After completing the setup in “[The Raspberry Pi System](ch05.html#ch00lev1sec91)”
    on [page 83](ch05.html#page_83), to build this project you just need to attach
    the Raspberry Squid to the GPIO connector of the Raspberry Pi, plug in the USB
    webcam, supply 12V to the monitor, and supply 5V to the Raspberry Pi (see [Figure
    5-6](ch05.html#ch05fig6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-6: Schematic for the surveillance system'
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: ATTACH THE RASPBERRY SQUID**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: By controlling the three outputs of the Raspberry Squid, you can make the LED
    display any color. However, this project won’t use the accessory’s full potential
    since this surveillance setup needs to display only red and green.
  prefs: []
  type: TYPE_NORMAL
- en: To help identify the GPIO pins, you can use a GPIO pin identification template.
    There are many of these available from suppliers like Adafruit, including the
    Raspberry Leaf, which is included if you buy a ready-made Raspberry Squid. Place
    this template over the GPIO connectors so that you can tell which pin is which.
    Then connect the Raspberry Squid to the GPIO connector ([Figure 5-7](ch05.html#ch05fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-7: Connecting the Raspberry Squid to the GPIO connector'
  prefs: []
  type: TYPE_NORMAL
- en: The black lead of the Raspberry Squid goes to one of the GND pins on the Raspberry
    Pi. In the orientation shown ([Figure 5-7](ch05.html#ch05fig7)), this is the third
    pin down on the right. The red lead of the Raspberry Squid goes to pin 18 on the
    Raspberry Pi, and the green lead of the Squid goes to pin 23 of the Pi. Since
    you won’t need the blue color, you can leave the blue lead of the Raspberry Squid
    unattached, but if you prefer to keep the leads tidy, just attach the blue lead
    to any one of the other GND pins of the GPIO header.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: INSTALL THE USB WEBCAM**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If you already have a USB webcam, then see if it works with the Raspberry Pi
    before you get another one. First, check whether the Raspberry Pi can detect your
    webcam as a USB device by entering the command lsusb in LXTerminal both before
    and after plugging the webcam into the Pi, without the USB extension lead.
  prefs: []
  type: TYPE_NORMAL
- en: $ lsusb
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 004: ID 03f0:e207 Hewlett-Packard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 006: ID 04d9:1603 Holtek Semiconductor, Inc. Keyboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bus 001 Device 005: ID 1c4f:0034 SiGma Micro'
  prefs: []
  type: TYPE_NORMAL
- en: If an extra entry appears after you run the command with the webcam plugged
    in, then that entry should be your webcam. In the list I’ve shown, my Hewlett-Packard
    webcam is the fourth entry from the top.
  prefs: []
  type: TYPE_NORMAL
- en: If your webcam does not appear in the list, then try unplugging it, plugging
    it back in, and running the `lsusb` command again. If that doesn’t work, try a
    reboot of the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, being recognized as a USB device is still no guarantee that a
    webcam will work with the Raspberry Pi. You’ll find out for certain when you run
    the program. You may also find that your webcam works only if it’s plugged into
    a powered hub. If you have an older model of Raspberry Pi, you may find instead
    that the whole board resets when you plug the webcam into the USB port. If this
    is the case for your board, then plug the webcam in while the Raspberry Pi is
    powered off.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: INSTALL THE SOFTWARE**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Connect the Raspberry Pi to your network with an Ethernet cable, make sure the
    Internet is up and running, and download the Raspberry Pi programs for the projects
    in this book. From your browser on the Pi, you can head to *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*,
    click the link to GitHub, and download the *Raspberry Pi* directory. For this
    project, you’ll use the code in the *usb_webcam* directory. But the easiest way
    to get the software onto your Raspberry Pi is to clone the GitHub repository directly
    onto your Raspberry Pi, as I describe in “Fetching Source Code from GitHub” on
    [page 92](ch05.html#page_92).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python program *monitor.py* is pretty brief, considering what it does,
    and I’ll walk you through it here. I won’t, however, cover Python itself beyond
    the context of the projects that use it. If you are new to Python, you might take
    a look another of my books, *Programming the Raspberry Pi: Getting Started with
    Python* (McGraw-Hill, 2013).'
  prefs: []
  type: TYPE_NORMAL
- en: '**FETCHING SOURCE CODE FROM GITHUB**'
  prefs: []
  type: TYPE_NORMAL
- en: You can get all the Raspberry Pi programs used in this book onto your Raspberry
    Pi in one go by cloning the book’s GitHub repository. Just enter the following
    commands from a terminal window on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: $ cd /home/pi
  prefs: []
  type: TYPE_NORMAL
- en: $ git clone https://github.com/simonmonk/zombies.git
  prefs: []
  type: TYPE_NORMAL
- en: These commands will fetch all of code for the book, including the Arduino code
    used in other projects (which you can ignore in this chapter). Even though you’re
    not using a browser, you’ll still need an Internet connection for the commands
    to work, so definitely get this code before the apocalypse.
  prefs: []
  type: TYPE_NORMAL
- en: The program begins by importing the various Python modules that it needs. These
    libraries of existing code are all included in the Raspbian distribution, so you
    shouldn’t need to install them separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `sys` and `time` modules have general utilities for accessing the operating
    system and the ability to tell the program to sleep as a way of delaying its activity
    for a period of time. The `pygame` module contains the Pygame graphical games
    library, which includes a camera interface. To control the LED, the program needs
    access to the GPIO system, and this is provided by the `RPi.GPIO` library.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the program defines some constants that it will use. You could change
    these if you wanted to use the camera at a different resolution or make the default
    size of the window larger.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters in parentheses after the `camera_res` and `window_res` constants
    are the width and height respectively (in pixels). After the constants, the Pygame
    system (used to display the camera images) and the camera itself are initialized,
    along with the GPIO ports that you’ll use to control the Raspberry Squid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first two lines of initialization code ➊ handle Pygame and the camera, while
    the next three lines ➋ initialize those GPIO ports. The screen is then initialized
    ➌ to the size of the window specified in `window_size`. The final cluster of lines
    ➍ first finds all the cameras connected to the Raspberry Pi and then creates a
    link to the first one (`webcam`). It then starts running the webcam. The final
    line ➎ defines a variable called `old_image`, which is used to detect movement
    by spotting changes in successive frames from the webcam.
  prefs: []
  type: TYPE_NORMAL
- en: After initialization, the first function this program defines is called `check_for_movement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As the name suggests, `check_for_movement` takes two images, the previous frame
    (`old_image`) and the latest frame (`new_image`), and compares them. The `distance`
    parameter to `compare` is the “distance” between the color of the pixel in one
    image and the color of that same pixel in the other image. The `weights` parameter
    is not explained in the `pygame` documentation, and the values used here are taken
    in faith from an example in the `pygame` documentation for `PixelArray` (*[http://www.pygame.org/docs/ref/pixelarray.html](http://www.pygame.org/docs/ref/pixelarray.html)*).
  prefs: []
  type: TYPE_NORMAL
- en: The comparison results in a new image called `diff_image` that only has white
    pixels where a difference was found between the pixels in the two images.
  prefs: []
  type: TYPE_NORMAL
- en: To decide whether movement has occurred, the program should really go through
    every pixel in the `diff_image`. But any largish movement will result in lots
    of pixels changing, and zombies are big, so the code speeds things up by only
    sampling 1 pixel in 20.
  prefs: []
  type: TYPE_NORMAL
- en: The next two functions set the LED of the Raspberry Squid to red or green.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Raspberry Squid is just an RGB LED, and as with most RGB LEDs, you can select
    the color it glows by outputting certain combinations of high (`True`) and low
    (`False`) on the GPIO pins the LED is connected to. In this case, you want red
    and green, so the code just sets the appropriate pin to `True` and the other to
    `False`. The blue takes no part in this project, so you don’t have to deal with
    it in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we come to the main loop of the program, where the new image is fetched
    and scaled so it’s ready to display in the window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `count` variable keeps track of how many times the loop has run. When `count`
    gets to 10, the last two images are compared. Sampling only one-tenth of the time
    also speeds up the program, which would otherwise be too slow. If there was movement,
    meaning `check_for_movement` returns `True`, the LED turns red.
  prefs: []
  type: TYPE_NORMAL
- en: The last part of the main loop checks for the close window event (which stops
    the program).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The event checking also catches any key press event (`KEYDOWN`), and if the
    spacebar is pressed, the program sets the LED back to green.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE WEBCAM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To get the webcam started, run *monitor.py* by entering the following commands
    in a terminal window on your Raspberry Pi. A window should open showing a view
    from the webcam ([Figure 5-8](ch05.html#ch05fig8)).
  prefs: []
  type: TYPE_NORMAL
- en: $ cd "/home/pi/zombies/Raspberry Pi/usb_webcam"
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo python monitor.py
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the Raspberry Squid LED should be green. To test the movement
    detection, wave your hand in front of the webcam. The LED should go red and stay
    red until you press the spacebar on the Raspberry Pi’s keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: When everything is working with the webcam connected directly to the Raspberry
    Pi, you can use the USB extension lead to place the camera further away. Place
    the camera somewhere overlooking your base’s entrance, and then you’ll know when
    the coast is clear to go outside.
  prefs: []
  type: TYPE_NORMAL
- en: There will be a limit on how far you can move the webcam before the signal degrades
    and you start getting errors, so keep the lead under 30 m.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-8: The USB webcam in operation'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 8: A WIRELESS ZOMBIE SURVEILLANCE SYSTEM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be no Internet after the apocalypse, but that doesn’t mean you can’t
    set up your own wireless network and attach a Wi-Fi webcam to it. You can use
    a low-cost webcam for this project ([Figure 5-9](ch05.html#ch05fig9)). With a
    wireless webcam, you can put even more distance between you and the zombies you’re
    monitoring, making you safer than ever.
  prefs: []
  type: TYPE_NORMAL
- en: Once you set up the camera and a local network, you can view the camera video
    from the browser on your Raspberry Pi ([Figure 5-10](ch05.html#ch05fig10)) or
    even a Wi-Fi-equipped tablet or smartphone. What’s more, if you buy the right
    sort of webcam, you’ll be able to use software to change the direction the webcam
    is pointing.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-9: A low-cost Wi-Fi webcam'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-10: Using a Wi-Fi webcam with the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: 'All this comes at a cost, of course: Wi-Fi uses quite a lot of power. The wireless
    router and Wi-Fi webcam are likely to both use between 5W and 10W of power each.
    You want to turn them on only when needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Raspberry Pi in [Figure 5-8](ch05.html#ch05fig8) still has the
    Raspberry Squid attached, even though this project doesn’t use the Squid. Leave
    Project 7’s hardware connected, and you can monitor zombies from both cameras!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To setup this Wi-Fi webcam, you’ll need the Raspberry Pi setup described in
    “[The Raspberry Pi System](ch05.html#ch00lev1sec91)” on [page 83](ch05.html#page_83)
    and these additional items.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEM** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Wi-Fi webcam | Preferably a unit that can rotate
    ($50) | Computer store, eBay |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Wi-Fi router | Low-end unit ($20) operating
    from 12V DC supply | Computer store, eBay |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 2x Ethernet cable | Any length will do. |  |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 2x 12V adapter lead | 2.1 mm jack plug-to-cigarette
    lighter adapter | Auto parts store |'
  prefs: []
  type: TYPE_TB
- en: Wi-Fi webcams are available at a wide range of costs. The device I chose is
    at the low-cost end and while the image isn’t fantastic, it’s plenty good enough
    to spot zombies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wi-Fi router is just a normal household router; most homes with Internet
    access probably have several, and I’ll bet you have a spare lying around, too.
    These devices serve two purposes: first, to connect your devices to the Internet
    (not going to happen with zombies all over the place) and, second, to make a local
    area network (LAN) to which you can attach wired and wireless devices. We’ll use
    the second function of the Wi-Fi router here.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This project uses ready-made components, so you don’t really have any electronics
    construction to do. You’ll just be connecting components ([Figure 5-11](ch05.html#ch05fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-11: Schematic for the Wi-Fi camera system'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a tablet or smartphone to the Wi-Fi network ([Figure 5-11](ch05.html#ch05fig11))
    is by no means essential, but it would allow you to monitor the webcam from a
    mobile device as well as the screen of your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: SET UP A LOCAL AREA NETWORK (LAN)**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Since this network will not connect to the Internet, you only need a router.
    That means even if you have a modem-router combination, you don’t need to connect
    it to a phone line or cable connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The router allows devices to connect to it in two ways: using an Ethernet cable
    or using Wi-Fi. We’ll connect the Raspberry Pi using an Ethernet cable because
    a wired connection is more reliable and uses less power than Wi-Fi.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you plug the Raspberry Pi into the router, the Pi should automatically
    join the network using DHCP (Dynamic Host Configuration Protocol), so you shouldn’t
    need to set it up. At this point, though, you may want to set up the Wi-Fi details
    of the router. This will involve connecting to the configuration page for your
    router. The IP address for this page is usually 192.168.1.1, but in my case, it
    was 192.168.1.254\. In other words, check your router documentation. When you
    know the address of your router’s admin page, open the Chromium browser and type
    that URL into the browser’s address bar.
  prefs: []
  type: TYPE_NORMAL
- en: The router admin page should have a wireless, WLAN, or Wi-Fi settings page somewhere.
    Find this page and set the wireless network name (also called the ESSID) and password
    ([Figure 5-12](ch05.html#ch05fig12)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-12: Setting up a wireless network'
  prefs: []
  type: TYPE_NORMAL
- en: Set the network name to something like *Apocalypse Survivors* so techsavvy survivors
    can find you easily. Your group of survivors can always benefit from more geeks—especially
    if it looks like you can run faster than them.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: SET UP THE WI-FI CAMERA**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Wi-Fi camera can’t connect itself to your wireless network without knowing
    your password and network name. To give it this information, you’ll need to connect
    to it from a browser, but first it must be connected to the network. This is a
    bit of a problem. Fortunately, it’s a problem that can be resolved by connecting
    the Wi-Fi camera to the router using an Ethernet cable. Making a wired connection
    doesn’t require a password, and the camera should connect to the network using
    DHCP just like the Raspberry Pi. After you finish the setup, you can disconnect
    the Ethernet cable, and the Wi-Fi camera will be free!
  prefs: []
  type: TYPE_NORMAL
- en: Connect the Wi-Fi camera to the router and go back to the same router admin
    page you used to set up the wireless network. You can use it again to find the
    IP address of the camera so you can configure it. This time, you’re looking for
    a page called either DHCP table or ARP (Address Resolution Protocol) table. [Figure
    5-13](ch05.html#ch05fig13) shows the ARP table for my router.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-13: Finding the IP address of the camera'
  prefs: []
  type: TYPE_NORMAL
- en: The connection to the camera is wired, so the IP address of the camera is either
    192.168.1.102 or 192.168.1.100\. One of those IP addresses belongs to the Raspberry
    Pi. Find out which is which by entering the ifconfig command in LXTerminal. You
    should see one of the two addresses above in the response to the command, and
    that’s the Raspberry Pi’s address.
  prefs: []
  type: TYPE_NORMAL
- en: My Raspberry Pi had an IP address of 192.168.1.102, so by process of elimination,
    my camera’s IP address was 192.168.1.100\. Start a new tab on the browser and
    connect to that IP address, adding :99 after the last number in the address. (I
    pointed my browser to 192.168.1.100:99.) This extra number specifies the network
    port to use for the webcam. In most cases, this is 99, but if you’re using a different
    camera, then check your documentation because its port may be different.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Any IP address can have a port number after it like this. Different types of
    network traffic use different ports. For example, most web traffic uses port 80,
    which is the default. The webcam happens to use port 99, so this has to be specified
    in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: The browser should immediately start displaying video from the camera as well
    as the controls to pan and tilt the camera. Somewhere on the page, you should
    see a settings link. Click on this and look for Wireless LAN Settings. Click **Wireless
    LAN Settings**, and you should see an option to scan for Wireless Networks ([Figure
    5-14](ch05.html#ch05fig14)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-14: Connecting the camera to the wireless network'
  prefs: []
  type: TYPE_NORMAL
- en: Select the *Apocalypse Survivors* network, enter the password (also called the
    *share key*), and click **Submit**. The camera should reboot, and then you can
    unplug the Ethernet because from now on, the camera will use its Wi-Fi connection.
  prefs: []
  type: TYPE_NORMAL
- en: Once the camera has switched over to using Wi-Fi, it will also have a different
    IP address, so return to the router admin page ([Figure 5-13](ch05.html#ch05fig13)).
    This time, there should be an entry in the wireless section of the list representing
    the camera. Try browsing to the camera using that IP address with :99 on the end.
    Once again, the video should appear in the browser window along with the camera
    controls ([Figure 5-15](ch05.html#ch05fig15)).
  prefs: []
  type: TYPE_NORMAL
- en: One problem with using DHCP to allocate an address to the webcam is that the
    router may allocate a different IP address if it is restarted. To avoid this problem,
    look for the option in your router’s DHCP settings that sets the lease time and
    set this to its maximum. That way, once the IP address is allocated, it shouldn’t
    change until sometime after civilization has been reestablished.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f05-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-15: A view from the Wi-Fi camera'
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE WI-FI WEBCAM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once everything is set up, you can view the image from the webcam by going to
    the URL for your camera in the browser. The software for most webcams will also
    allow you to set up multiple cameras and split the screen two or four ways so
    that you can monitor all the images at once. Then, you can keep tabs on your entrance,
    supply cache, any zombie traps you’ve built, and the survivors across the street
    simultaneously!
  prefs: []
  type: TYPE_NORMAL
- en: You could also access the camera from a mobile browser on a smartphone or tablet
    computer. There may also be an app for the camera that works better than a browser.
    This would allow you to work in one area of your compound while keeping an eye
    on another area using your mobile device. The app provided with the camera I used
    includes a function to send alerts when movement is detected.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to control an electric door latch. After
    completing that project, you’ll be able to unlock doors remotely and get inside
    faster. You’ll also be able to detect when the door opens, just in case the undead
    begin to overrun your base.
  prefs: []
  type: TYPE_NORMAL
