- en: Afterword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后记
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This book should give you a good start with embedded C programming, but there’s
    a whole world outside *Bare Metal C* waiting for you to explore it. In closing,
    here are some helpful tips for starting down the road to professional programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书应该能帮助你顺利入门嵌入式C编程，但在*裸金属C*之外还有一个全新的世界等着你去探索。最后，以下是一些开始走向专业编程道路的有用建议。
- en: Learn How to Write
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学会如何写作
- en: By far, the most important skill a professional programmer can have is being
    able to write well, as the programming process includes writing several types
    of documents, such as proposals, requirements, design documents, user documentation,
    and sales literature.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，专业程序员最重要的技能是能够写得好，因为编程过程包括撰写几种类型的文档，如提案、需求、设计文档、用户文档和销售资料。
- en: Take a creative writing course where your work is reviewed by others in your
    class. The feedback I got from the San Diego Writing Workshop was some of the
    most valuable training I’ve received in my life.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参加一个创意写作课程，在课程中你的作品会被同学们审阅。我从圣地亚哥写作工作坊获得的反馈是我一生中最宝贵的训练之一。
- en: 'Here’s a pro tip: if you’re writing the design or requirements for a project,
    you have great power in steering the direction of the project.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个专业小贴士：如果你正在为一个项目编写设计或需求文档，你将拥有引导项目方向的巨大权力。
- en: Learn How to Read
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学会如何阅读
- en: You can learn a lot by “reading” technical documentation. I’ve put “reading”
    in quotation marks because you don’t read most technical documents in their entirety.
    You scan them to find the information you need at the time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过“阅读”技术文档学到很多东西。我把“阅读”放在引号里，是因为你不会完全阅读大多数技术文档。你只是浏览它们，找到你当时需要的信息。
- en: 'Here’s a list of the documents I’ve used in preparation for this book:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我为本书准备过程中所使用的文档列表：
- en: 'ISO/IEC9899:2017, “Programing Languages: C” (500 pages)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC9899:2017，“编程语言：C”（500页）
- en: RM0360 reference manual, “STM32F030x4/x6/x8/xC and STM32F070x6/xB Advanced ARM®-based
    32-bit MCUs” (800 pages)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RM0360参考手册，“STM32F030x4/x6/x8/xC和STM32F070x6/xB高级ARM®-基于32位MCU”（800页）
- en: ARM® Developer Suite Assembler Guide Version 1.2, [https://developer.arm.com/documentation/dui0068/b](https://developer.arm.com/documentation/dui0068/b)
    (400 pages)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM®开发者套件汇编指南版本1.2, [https://developer.arm.com/documentation/dui0068/b](https://developer.arm.com/documentation/dui0068/b)（400页）
- en: “Using the GNU Compiler Collection” (GCC documentation, 1,000 pages)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “使用GNU编译器集合”（GCC文档，1,000页）
- en: GNU Make Manual, [https://www.gnu.org/software/make/manual](https://www.gnu.org/software/make/manual)
    (225 pages)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Make手册, [https://www.gnu.org/software/make/manual](https://www.gnu.org/software/make/manual)（225页）
- en: I did not read all these documents cover to cover. I probably used about 0.5
    to 15 percent of them. I’ve become proficient at using the `find` command to locate
    the portion of the documentation I’m interested in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我并没有从头到尾阅读这些文档。我可能只用了其中的0.5%到15%。我已经熟练使用`find`命令来定位我感兴趣的文档部分。
- en: Collaboration and Creative Theft
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合作与创意盗用
- en: No matter how experienced you are, you are only one person. By getting together
    with other people and reviewing each other’s work, you can expand your own knowledge
    and the knowledge of others. A good example of where this has worked well is the
    Linux kernel. Thousands of people have shared their code, received feedback, improved
    their code, and then collected it into the most powerful operating system in the
    world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你多么有经验，你始终只是一个人。通过与他人合作并互相审查工作，你可以扩展自己的知识并帮助他人提升。Linux内核就是一个很好的例子。成千上万的人分享了他们的代码，收到了反馈，改进了代码，最终将其汇集成世界上最强大的操作系统。
- en: Looking through publicly available code to see how other programmers do things
    is also helpful. One example is the HAL firmware that comes with the STM32 Workbench.
    It is professional code that provides great internal documentation. (See the upcoming
    “Doxygen” section.) The bad news is that it’s designed to be used on a whole set
    of different chips, so you have to deal with the land of 200 `#ifdef`s. Lots of
    good source is available. Browse through some and see what you pick up.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览公开的代码，看看其他程序员是如何做的，这也很有帮助。一个例子是STM32工作台附带的HAL固件。它是专业的代码，并提供了很好的内部文档。（见接下来的“Doxygen”部分。）坏消息是，它设计用于一整套不同的芯片，因此你需要应对200个`#ifdef`的代码块。许多优质源代码是公开的。浏览一下，看看你能学到什么。
- en: Useful Open Source Tools
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的开源工具
- en: The open source community has a long history of developing quality tools to
    aid in program creation and editing. These free tools are created by the people
    who want to use them, as opposed to commercial programs that add features that
    help sell the programs but might not be useful. This section describes a few helpful
    open source tools.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开源社区有着悠久的历史，开发了许多优质工具来帮助程序的创建和编辑。这些免费工具是由想要使用它们的人开发的，而不是那些添加有助于销售程序但可能不实用的功能的商业软件。此节描述了几款有用的开源工具。
- en: Cppcheck
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cppcheck
- en: The Cppcheck program is a static program checker. In other words, it looks for
    problems in your program that the compiler didn’t find, which is getting tough
    these days as the compilers have become quite sophisticated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Cppcheck程序是一个静态程序检查器。换句话说，它会查找编译器没有发现的程序问题，而现在编译器变得相当复杂，这让检查变得更具挑战性。
- en: 'This program was responsible for finding my favorite bit of C code. This was
    the error message:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序帮助我找到了我最喜欢的一段C代码。这是错误信息：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In other words, the body of the `if` and the body of the `else` contained the
    same code. There’s no need for the condition if the computer does the same thing
    when the condition is true or false.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，`if`语句和`else`语句的主体包含了相同的代码。如果条件成立或不成立时计算机执行相同的操作，那么这个条件是没有必要的。
- en: 'Here’s the code in question:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相关代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That’s right, the body of the `if` was one commented-out procedure call, and
    the body of the `else` was the same commented-out procedure call!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 没错，`if`语句的主体是一个被注释掉的过程调用，而`else`语句的主体则是相同的被注释掉的过程调用！
- en: I prefer Cppcheck over most commercial static program analyzers because it generates
    a minimum number of false positives. If Cppcheck flags a line in your code, it’s
    a good idea to look at that code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我更倾向于使用Cppcheck，而不是大多数商业静态程序分析器，因为它生成的假阳性最少。如果Cppcheck标记了你代码中的某一行，最好检查一下那段代码。
- en: Doxygen
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Doxygen
- en: Ever since the first program grew to be longer than 50 lines, people have tried
    to make programming languages that are self-documenting. So far, they’ve failed.
    The people behind Doxygen created a system where through structured comments in
    your program, you can create documentation for it (at least in theory).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 自从第一段程序的代码超过50行以来，人们就一直尝试开发能够自我生成文档的编程语言。到目前为止，他们还没有成功。Doxygen的开发者创建了一个系统，通过在程序中添加结构化注释，你可以为程序生成文档（至少在理论上是如此）。
- en: The first difficulty is that you have to put the comments in the code, and many
    engineers fail to comment their code at all. Another issue is that the documentation
    looks like it was automatically generated. Although it’s actually very good for
    automatically generated documentation, it’s still automatically generated documentation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个困难是你必须在代码中添加注释，而许多工程师根本没有为他们的代码添加注释。另一个问题是，文档看起来像是自动生成的。尽管自动生成的文档其实很好，但它终究是自动生成的文档。
- en: The Cppcheck program mentioned in the previous section uses Doxygen for its
    internal documentation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中提到的Cppcheck程序使用Doxygen进行其内部文档生成。
- en: Valgrind
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Valgrind
- en: The Valgrind project is a suite of tools designed to look at your program to
    check for errors dynamically. One of the most popular tools in the suite is memcheck,
    which looks for memory errors such as array overflows, pointers being used after
    they are freed, and so on. It’s very effective at detecting most simple runtime
    errors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind项目是一套工具，旨在动态检查你的程序中的错误。该套件中最受欢迎的工具之一是memcheck，它用于查找诸如数组溢出、已释放的指针被再次使用等内存错误。它在检测大多数简单的运行时错误时非常有效。
- en: SQLite
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite is an embedded database library that’s good for small databases (up to
    100,000 records). It’s not the fastest database in the world, but for small embedded
    systems where you don’t want the overhead of a major database, it works well.
    You’ll need to learn SQL to use it, but it’s a valuable skill to learn.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是一个嵌入式数据库库，适用于小型数据库（最多10万条记录）。它不是世界上最快的数据库，但对于不想使用大型数据库所带来开销的小型嵌入式系统来说，它运行良好。你需要学习SQL来使用它，但这是一项值得学习的技能。
- en: Never Stop Learning
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永不停止学习
- en: Computer technology is changing at an amazing rate. That one little 38¢ STM
    microchip we use in this book has more power than all the computers in the world
    had in 1950\. The technology will never stop changing, so you should never stop
    learning. You never know what new discovery you’ll find around the corner.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机技术正在以前所未有的速度变化。我们在本书中使用的那款38¢的STM微芯片，其性能超过了1950年世界上所有计算机的总和。技术永远不会停止变化，因此你应该不断学习。你永远不知道转角处会有什么新发现等着你。
