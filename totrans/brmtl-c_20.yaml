- en: Afterword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This book should give you a good start with embedded C programming, but there’s
    a whole world outside *Bare Metal C* waiting for you to explore it. In closing,
    here are some helpful tips for starting down the road to professional programming.
  prefs: []
  type: TYPE_NORMAL
- en: Learn How to Write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By far, the most important skill a professional programmer can have is being
    able to write well, as the programming process includes writing several types
    of documents, such as proposals, requirements, design documents, user documentation,
    and sales literature.
  prefs: []
  type: TYPE_NORMAL
- en: Take a creative writing course where your work is reviewed by others in your
    class. The feedback I got from the San Diego Writing Workshop was some of the
    most valuable training I’ve received in my life.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a pro tip: if you’re writing the design or requirements for a project,
    you have great power in steering the direction of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: Learn How to Read
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can learn a lot by “reading” technical documentation. I’ve put “reading”
    in quotation marks because you don’t read most technical documents in their entirety.
    You scan them to find the information you need at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a list of the documents I’ve used in preparation for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ISO/IEC9899:2017, “Programing Languages: C” (500 pages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RM0360 reference manual, “STM32F030x4/x6/x8/xC and STM32F070x6/xB Advanced ARM®-based
    32-bit MCUs” (800 pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM® Developer Suite Assembler Guide Version 1.2, [https://developer.arm.com/documentation/dui0068/b](https://developer.arm.com/documentation/dui0068/b)
    (400 pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Using the GNU Compiler Collection” (GCC documentation, 1,000 pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU Make Manual, [https://www.gnu.org/software/make/manual](https://www.gnu.org/software/make/manual)
    (225 pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I did not read all these documents cover to cover. I probably used about 0.5
    to 15 percent of them. I’ve become proficient at using the `find` command to locate
    the portion of the documentation I’m interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration and Creative Theft
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter how experienced you are, you are only one person. By getting together
    with other people and reviewing each other’s work, you can expand your own knowledge
    and the knowledge of others. A good example of where this has worked well is the
    Linux kernel. Thousands of people have shared their code, received feedback, improved
    their code, and then collected it into the most powerful operating system in the
    world.
  prefs: []
  type: TYPE_NORMAL
- en: Looking through publicly available code to see how other programmers do things
    is also helpful. One example is the HAL firmware that comes with the STM32 Workbench.
    It is professional code that provides great internal documentation. (See the upcoming
    “Doxygen” section.) The bad news is that it’s designed to be used on a whole set
    of different chips, so you have to deal with the land of 200 `#ifdef`s. Lots of
    good source is available. Browse through some and see what you pick up.
  prefs: []
  type: TYPE_NORMAL
- en: Useful Open Source Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The open source community has a long history of developing quality tools to
    aid in program creation and editing. These free tools are created by the people
    who want to use them, as opposed to commercial programs that add features that
    help sell the programs but might not be useful. This section describes a few helpful
    open source tools.
  prefs: []
  type: TYPE_NORMAL
- en: Cppcheck
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Cppcheck program is a static program checker. In other words, it looks for
    problems in your program that the compiler didn’t find, which is getting tough
    these days as the compilers have become quite sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This program was responsible for finding my favorite bit of C code. This was
    the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In other words, the body of the `if` and the body of the `else` contained the
    same code. There’s no need for the condition if the computer does the same thing
    when the condition is true or false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code in question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That’s right, the body of the `if` was one commented-out procedure call, and
    the body of the `else` was the same commented-out procedure call!
  prefs: []
  type: TYPE_NORMAL
- en: I prefer Cppcheck over most commercial static program analyzers because it generates
    a minimum number of false positives. If Cppcheck flags a line in your code, it’s
    a good idea to look at that code.
  prefs: []
  type: TYPE_NORMAL
- en: Doxygen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ever since the first program grew to be longer than 50 lines, people have tried
    to make programming languages that are self-documenting. So far, they’ve failed.
    The people behind Doxygen created a system where through structured comments in
    your program, you can create documentation for it (at least in theory).
  prefs: []
  type: TYPE_NORMAL
- en: The first difficulty is that you have to put the comments in the code, and many
    engineers fail to comment their code at all. Another issue is that the documentation
    looks like it was automatically generated. Although it’s actually very good for
    automatically generated documentation, it’s still automatically generated documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Cppcheck program mentioned in the previous section uses Doxygen for its
    internal documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Valgrind
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Valgrind project is a suite of tools designed to look at your program to
    check for errors dynamically. One of the most popular tools in the suite is memcheck,
    which looks for memory errors such as array overflows, pointers being used after
    they are freed, and so on. It’s very effective at detecting most simple runtime
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLite is an embedded database library that’s good for small databases (up to
    100,000 records). It’s not the fastest database in the world, but for small embedded
    systems where you don’t want the overhead of a major database, it works well.
    You’ll need to learn SQL to use it, but it’s a valuable skill to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Never Stop Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Computer technology is changing at an amazing rate. That one little 38¢ STM
    microchip we use in this book has more power than all the computers in the world
    had in 1950\. The technology will never stop changing, so you should never stop
    learning. You never know what new discovery you’ll find around the corner.
  prefs: []
  type: TYPE_NORMAL
