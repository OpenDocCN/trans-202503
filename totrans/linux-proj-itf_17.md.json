["```\n*tag-type*:[*tag-qualifier*]: *permissions*\n```", "```\nu::rw-,g::r-x,o::---\nu::rw,g::rx,o::-\nuser::rw,group::rx,other::-\n```", "```\nu::rw,u:paulh:rw,u:annabel:rw,g::r,g:teach:rw,m::rwx,o::-\n```", "```\nuser::rwx                       # ACL_USER_OBJ\nuser:paulh:r-x                  # ACL_USER\ngroup::r-x                      # ACL_GROUP_OBJ\ngroup:teach:--x                 # ACL_GROUP\nother::--x                      # ACL_OTHER\n```", "```\nchmod(pathname, 0700);      /* Set permissions to rwx------ */\n```", "```\n    user::rwx                       # ACL_USER_OBJ\n    user:paulh:---                  # ACL_USER\n    group::---                      # ACL_GROUP_OBJ\n    group:teach:---                 # ACL_GROUP\n    other::---                      # ACL_OTHER\n    ```", "```\n    chmod(pathname, 751);\n    ```", "```\nuser::rw-,group::---,mask::---,other::r--\n```", "```\nuser::rw-,group::---,mask::rw-,other::r--\n```", "```\n`$ umask 022`                         *Set shell umask to known state*\n$ `touch tfile`                       *Create a new file*\n$ `getfacl tfile`\n# file: tfile\n# owner: mtk\n# group: users\nuser::rw-\ngroup::r--\nother::r--\n```", "```\n`$ chmod u=rwx,g=rx,o=x tfile`\n$ `getfacl --omit-header tfile`\nuser::rwx\ngroup::r-x\nother::--x\n```", "```\n`$ setfacl -m u:paulh:rx,g:teach:x tfile`\n$ `getfacl --omit-header tfile`\nuser::rwx\nuser:paulh:r-x                      ACL_USER entry\ngroup::r-x\ngroup:teach:--x                     ACL_GROUP entry\nmask::r-x                           ACL_MASK entry\nother::--x\n```", "```\n$ `ls -l tfile`\n-rwxr-x--x+   1 mtk      users           0 Dec 3 15:42 tfile\n```", "```\n`$ setfacl -m m::x tfile`\n$ `getfacl --omit-header tfile`\nuser::rwx\nuser:paulh:r-x                  #effective:--x\ngroup::r-x                      #effective:--x\ngroup:teach:--x\nmask::--x\nother::--x\n```", "```\n$ ls -l tfile\n-rwx--x--x+   1 mtk      users           0 Dec 3 15:42 tfile\n```", "```\n`$ setfacl -x u:paulh,g:teach tfile`\n`$ getfacl --omit-header tfile`\nuser::rwx\ngroup::r-x\nmask::r-x\nother::--x\n```", "```\n`$ mkdir sub`\n`$ setfacl -d -m u::rwx,u:paulh:rx,g::rx,g:teach:rwx,o::- sub`\n`$ getfacl -d --omit-header sub`\nuser::rwx\nuser:paulh:r-x\ngroup::r-x\ngroup:teach:rwx\nmask::rwx                       *setfacl generated ACL_MASK entry automatically*\nother::---\n```", "```\nopen(\"sub/tfile\", O_RDWR | O_CREAT,\n        S_IRWXU | S_IXGRP | S_IXOTH);   /* rwx--x--x */\n```", "```\n$ `getfacl --omit-header sub/tfile`\nuser::rwx\nuser:paulh:r-x                  #effective:--x\ngroup::r-x                      #effective:--x\ngroup:teach:rwx                 #effective:--x\nmask::--x\nother::---\n```", "```\nacl_t acl;\n\nacl = acl_get_file(pathname, type);\n```", "```\nacl_entry_t entry;\n\nstatus = acl_get_entry(acl, entry_id, &entry);\n```", "```\nacl_tag_t tag_type;\n\nstatus = acl_get_tag_type(entry, &tag_type);\nstatus = acl_set_tag_type(entry, tag_type);\n```", "```\nuid_t *qualp;               /* Pointer to UID */\n\nqualp = acl_get_qualifier(entry);\nstatus = acl_set_qualifier(entry, qualp);\n```", "```\nacl_permset_t permset;\n\nstatus = acl_get_permset(entry, &permset);\nstatus = acl_set_permset(entry, permset);\n```", "```\nint is_set;\n\nis_set = acl_get_perm(permset, perm);\n\nstatus = acl_add_perm(permset, perm);\nstatus = acl_delete_perm(permset, perm);\nstatus = acl_clear_perms(permset);\n```", "```\nacl_entry_t entry;\n\nstatus = acl_create_entry(&acl, &entry);\n```", "```\nstatus = acl_delete_entry(acl, entry);\n```", "```\nint status;\n\nstatus = acl_set_file(pathname, type, acl);\n```", "```\nacl = acl_from_text(acl_string);\n```", "```\nchar *str;\nssize_t len;\n\nstr = acl_to_text(acl, &len);\n```", "```\n`$ touch tfile`\n`$ setfacl -m 'u:annie:r,u:paulh:rw,g:teach:r' tfile`\n`$ ./acl_view tfile`\nuser_obj             rw-\nuser        annie    r--\nuser        paulh    rw-\ngroup_obj            r--\ngroup       teach    r--\nmask                 rw-\nother                r--\n```", "```\n`acl/acl_view.c`\n#include <acl/libacl.h>\n#include <sys/acl.h>\n#include \"ugid_functions.h\"\n#include \"tlpi_hdr.h\"\n\nstatic void\nusageError(char *progName)\n{\n    fprintf(stderr, \"Usage: %s [-d] filename\\n\", progName);\n    exit(EXIT_FAILURE);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    acl_t acl;\n    acl_type_t type;\n    acl_entry_t entry;\n    acl_tag_t tag;\n    uid_t *uidp;\n    gid_t *gidp;\n    acl_permset_t permset;\n    char *name;\n    int entryId, permVal, opt;\n\n    type = ACL_TYPE_ACCESS;\n    while ((opt = getopt(argc, argv, \"d\")) != -1) {\n        switch (opt) {\n        case 'd': type = ACL_TYPE_DEFAULT;      break;\n        case '?': usageError(argv[0]);\n        }\n    }\n\n    if (optind + 1 != argc)\n        usageError(argv[0]);\n\n    acl = acl_get_file(argv[optind], type);\n    if (acl == NULL)\n        errExit(\"acl_get_file\");\n\n    /* Walk through each entry in this ACL */\n\n    for (entryId = ACL_FIRST_ENTRY; ; entryId = ACL_NEXT_ENTRY) {\n\n        if (acl_get_entry(acl, entryId, &entry) != 1)\n            break;                      /* Exit on error or no more entries */\n        /* Retrieve and display tag type */\n\n        if (acl_get_tag_type(entry, &tag) == -1)\n            errExit(\"acl_get_tag_type\");\n\n        printf(\"%-12s\", (tag == ACL_USER_OBJ) ?  \"user_obj\" :\n                        (tag == ACL_USER) ?      \"user\" :\n                        (tag == ACL_GROUP_OBJ) ? \"group_obj\" :\n                        (tag == ACL_GROUP) ?     \"group\" :\n                        (tag == ACL_MASK) ?      \"mask\" :\n                        (tag == ACL_OTHER) ?     \"other\" : \"???\");\n\n        /* Retrieve and display optional tag qualifier */\n\n        if (tag == ACL_USER) {\n            uidp = acl_get_qualifier(entry);\n            if (uidp == NULL)\n                errExit(\"acl_get_qualifier\");\n\n            name = groupNameFromId(*uidp);\n            if (name == NULL)\n                printf(\"%-8d \", *uidp);\n            else\n                printf(\"%-8s \", name);\n\n            if (acl_free(uidp) == -1)\n                errExit(\"acl_free\");\n\n        } else if (tag == ACL_GROUP) {\n            gidp = acl_get_qualifier(entry);\n            if (gidp == NULL)\n                errExit(\"acl_get_qualifier\");\n\n            name = groupNameFromId(*gidp);\n            if (name == NULL)\n                printf(\"%-8d \", *gidp);\n            else\n                printf(\"%-8s \", name);\n            if (acl_free(gidp) == -1)\n                errExit(\"acl_free\");\n\n        } else {\n            printf(\"         \");\n        }\n\n        /* Retrieve and display permissions */\n\n        if (acl_get_permset(entry, &permset) == -1)\n            errExit(\"acl_get_permset\");\n\n        permVal = acl_get_perm(permset, ACL_READ);\n        if (permVal == -1)\n            errExit(\"acl_get_perm - ACL_READ\");\n        printf(\"%c\", (permVal == 1) ? 'r' : '-');\n        permVal = acl_get_perm(permset, ACL_WRITE);\n        if (permVal == -1)\n            errExit(\"acl_get_perm - ACL_WRITE\");\n        printf(\"%c\", (permVal == 1) ? 'w' : '-');\n        permVal = acl_get_perm(permset, ACL_EXECUTE);\n        if (permVal == -1)\n            errExit(\"acl_get_perm - ACL_EXECUTE\");\n        printf(\"%c\", (permVal == 1) ? 'x' : '-');\n\n        printf(\"\\n\");\n    }\n\n    if (acl_free(acl) == -1)\n        errExit(\"acl_free\");\n\n    exit(EXIT_SUCCESS);\n}\n     `acl/acl_view.c`\n```"]