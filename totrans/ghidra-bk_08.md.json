["```\nvoid demo_cdecl(int w, int x, int y, int z);\n```", "```\ndemo_cdecl(1, 2, 3, 4);    // call to demo_cdecl (in C)\n```", "```\n➊ PUSH   4              ; push parameter z\n\n  PUSH   3              ; push parameter y\n\n  PUSH   2              ; push parameter x\n\n  PUSH   1              ; push parameter w\n\n  CALL   demo_cdecl     ; call the function\n\n➋ ADD   ESP, 16        ; adjust ESP to its former value\n```", "```\nMOV    [ESP+12], 4    ; move parameter z to fourth position on stack\n\nMOV    [ESP+8], 3     ; move parameter y to third position on stack\n\nMOV    [ESP+4], 2     ; move parameter x to second position on stack\n\nMOV    [ESP], 1       ; move parameter w to top of stack\n\nCALL   demo_cdecl     ; call the function\n```", "```\nvoid _stdcall demo_stdcall(int w, int x, int y);\n```", "```\nRET 12    ; return and clear 12 bytes from the stack\n```", "```\nvoid fastcall demo_fastcall(int w, int x, int y, int z);\n```", "```\ndemo_fastcall(1, 2, 3, 4);      // call to demo_fastcall (in C)\n```", "```\nPUSH   4              ; move parameter z to second position on stack\n\nPUSH   3              ; move parameter y to top position on stack\n\nMOV    EDX, 2         ; move parameter x to EDX\n\nMOV    ECX, 1         ; move parameter w to ECX\n\nCall   demo_fastcall  ; call the function\n```", "```\nvoid helper(int j, int k);    // a function prototype\n\nvoid demo_stackframe(int a, int b, int c) {\n\n    int x;\n\n    char buffer[64];\n\n    int y;\n\n    int z;\n\n    // body of function not terribly relevant\n\n    // other than the following function call\n\n    helper(z, y);\n\n}\n```", "```\nSUB    ESP, 76        ; allocate sufficient space for all local variables\n```", "```\n➊ PUSH   dword [ESP+4]  ; push y\n\n➋ PUSH   dword [ESP+4]  ; push z\n\n   CALL   helper\n\n   ADD    ESP, 8         ; cdecl requires caller to clear parameters\n```", "```\nADD    ESP, 76        ; adjust ESP to point to the saved return address\n\nRET                   ; return to the caller\n```", "```\n➊ PUSH   EBP            ; save the caller's EBP value, because it's no-clobber\n\n➋ MOV    EBP, ESP       ; make EBP point to the saved register value\n\n➌ SUB    ESP, 76        ; allocate space for local variables\n```", "```\n➍ PUSH   dword [ebp-72] ; PUSH y\n\n   PUSH   dword [ebp-76] ; PUSH z\n\n   CALL   helper\n\n   ADD    ESP, 8         ; cdecl requires caller to clear parameters\n```", "```\nMOV    ESP, EBP       ; clears local variables by resetting ESP\n\nPOP    EBP            ; restore the caller's value of EBP\n\nRET                   ; pop return address to return to the caller\n```", "```\nLEAVE                 ; copies EBP to ESP AND then pops into EBP\n\nRET                   ; pop return address to return to the caller\n```", "```\nMOV    EAX, [EBP+8]\n```", "```\nvoid demo_stackframe(int i, int j, int k) {\n\n    int x = k;\n\n    char buffer[64];\n\n int y = j;\n\n    int z = 10;\n\n    buffer[0] = 'A';\n\n    helper(z, y);\n\n}\n```", "```\nvoid demo_stackframe_2(int b) {\n\n    helper(10, b);\n\n}\n```", "```\n        undefined   AL:1            <RETURN>\n\n        undefined   Stack[0x4]:1    param_1\n\n        undefined4  Stack[0x8]:4    param_2\n\n        undefined4  Stack[0xc]:4    param_3\n\n        undefined4  Stack[-0x10]:4  local_10\n\n        undefined4  Stack[-0x14]:4  local_14\n\n        undefined4  Stack[-0x18]:4  local_18\n\n        undefined1  Stack[-0x58]:1  local_58\n```", "```\nvoid demo_stackframe_2(int j) {\n\n    helper(10, j);\n\n}\n```", "```\n        undefined   AL:1            <RETURN>\n\n        undefined   Stack[0x4]:4    param_1\n\n        undefined4  Stack[0x8]:4    param_2\n\n        undefined4  Stack[-0x10]:4  local_10\n\n        undefined4  Stack[-0x14]:4  local_14\n\n        undefined4  Stack[-0x18]:4  local_18\n\n        undefined1  Stack[-0x58]:1  local_58\n```", "```\n08048473 55           PUSH   EBP➊\n\n08048474 89 e5        MOV    EBP,ESP\n\n08048476 83 ec 58     SUB    ESP,0x58➋\n\n08048479 8b 45 10     MOV    EAX,dword ptr [EBP + param_3]\n\n0804847c 89 45 f4     MOV    dword ptr [EBP + local_10],EAX➌\n\n0804847f 8b 45 0c     MOV    EAX,dword ptr [EBP + param_2]\n\n08048482 89 45 f0     MOV    dword ptr [EBP + local_14],EAX➍\n\n08048485 c7 45 ec     MOV    dword ptr [EBP + local_18],0xa➎\n\n         0a 00 00 00\n\n0804848c c6 45 ac 41  MOV    byte ptr [EBP + local_58],0x41➏\n\n08048490 83 ec 08     SUB    ESP,0x8\n\n08048493 ff 75 f0     PUSH   dword ptr [EBP + local_14]➐\n\n08048496 ff 75 ec     PUSH   dword ptr [EBP + local_18]\n```", "```\nstackargs:               ; An example x86 32-bit function\n\n    PUSH EBP             ; save no-clobber ebp\n\n    MOV  EBP, ESP        ; set up frame pointer\n\n ➊ MOV  EAX, [EBP + 8]  ; retrieve stack-allocated argument\n\n    MOV  CL, byte [EAX]  ; dereference retrieved pointer argument\n\n    ...\n\n    RET\n\nregargs:                 ; An example x86-64 function\n\n    PUSH RBP             ; save no-clobber rbp\n\n    MOV  RBP, RSP        ; set up frame pointer\n\n ➋ MOV  CL, byte [RDI]  ; dereference pointer argument\n\n    ...\n\n    RET\n```"]