- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Environment
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s start by setting up the programming environment we’ll use throughout the
    rest of the book. Python is flexible enough to run across a number of platforms,
    so I can’t cover all possible installation and configuration options. That said,
    because some of the problems we’ll be analyzing can be computationally expensive,
    I’ll assume you’re using a laptop or desktop to do your experimentation, and not
    a tablet or phone. A multicore CPU will help speed up some of the processing.
    While it’s not necessary (and I won’t be using them), some libraries can also
    leverage modern GPUs, so I encourage you to experiment with them. Finally, several
    operations can be memory intensive. I recommend having at least 4GB of RAM available,
    but 8GB or more is preferred. With every environment, you have to balance implementation
    cost against the time it takes to generate solutions. In [Chapter 13](c13.xhtml)
    we’ll examine distributing the problem across many smaller platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll present two setups: one simple, one advanced. If you’re new to Python
    programming, I recommend you start out with the simple setup, which uses Anaconda
    for package and environment management and installs an integrated development
    environment (IDE) named Spyder. The Spyder IDE is specifically tooled toward mathematical
    and scientific applications, making it an excellent choice for the upcoming projects.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re familiar with the nuances of environment and package management and
    already have a Python environment configured, the advanced setup covers using
    a virtual environment to isolate your experimental workspace from the rest of
    your production tools, as well as manually installing the required packages.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Environment Configuration with Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll start by installing Anaconda, a platform designed for managing multiple
    Python environments painlessly, even for people who don’t have a background in
    system administration. Anaconda will make it easy to install the packages we need,
    update them over time, and ensure environment dependencies remain consistent.
    Anaconda has been specifically designed for data science and machine learning
    workflows. There are installers available for Linux, Windows, and macOS. Head
    to the Anaconda distribution page ([https://www.anaconda.com/distribution](https://www.anaconda.com/distribution))
    and download the most recent installer version for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s walk through the instructions for Linux, Windows, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The download you receive from the Anaconda link is actually a shell script
    to assist in downloading and configuring the necessary packages. You should *not*
    run this script as a privileged user (like `su` on Debian, for instance). Start
    by opening a terminal in the directory where the install script is located. You
    can execute the installer with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To begin the installation, you need to mark this script as executable using
    `chmod +x`. Make sure to change the name of the script to match the version you
    downloaded. You can then run the installer using the default shell interpreter.
    During setup you’ll be asked to confirm a few installation options. In most cases,
    the default options are good enough. If you plan to change any of the defaults,
    take the time to read the documentation—some options can have unforeseen consequences.
    After the installation completes, you can verify everything is working using the
    newly installed conda utility. Open a new terminal and issue this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There’s some good information here. First, there’s `user config file`, the location
    of the user configuration file. Editing this file will allow you to personalize
    Anaconda; it’s worth looking into if you plan to do a lot of work in it. The next
    two pieces are `conda version` and `python version`. Compare `conda version` against
    the latest available Anaconda version to ensure you have the most up-to-date tools
    possible. The `python version` is the default Python interpreter that Anaconda
    will use when creating environments. You can set specific Python versions for
    each environment, but ensuring your default is set to your preferred version can
    save you some time if you forget to specify a version when you create an environment.
  prefs: []
  type: TYPE_NORMAL
- en: The `channel URLs` field tells you the remote locations conda will check when
    trying to install new packages. Be careful when modifying this list. Adding untrusted
    source repositories poses a security risk if an attacker replaces a legitimate
    package like pandas with a malicious version. It’s also a good idea to audit this
    field from time to time to make sure it doesn’t include any unrecognized channels.
    The `package cache` field shows you where Anaconda will store package information
    for the libraries it has installed. Since multiple environments will likely request
    the same version of packages, Anaconda builds a cache of the known packages to
    speed up future installations and reduce creation times for similar environments.
    The final piece to take note of is the `envs directories` field, which tells you
    where on the system Anaconda will store the files related to defining each environment,
    including a copy of the package versions installed for each. Knowing where this
    information is stored will come in handy if you have to troubleshoot a package
    conflict in a specific environment (although conda has tools to help with this
    as well).
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your base environment is set up and you’re ready to configure
    your research environment. You can skip to the “[Setting Up a Virtual Environment](#h1-502567c01-0002)”
    section later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you run the Anaconda install script for a Windows machine, you’ll be greeted
    with a typical Windows-style install prompt, similar to [Figure 1-1](#figure1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502567c01/f01001_NEW.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1: The Anaconda installer on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Select the directory where you’d like the base application to reside. If your
    system has a large secondary drive and a small primary solid-state drive (SSD),
    make sure you install Anaconda on the larger drive. With multiple environments
    and interpreters and package versions, it can grow quite big over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the installer will walk you through configuring Anaconda. The defaults
    are typically fine for most cases. If you plan to change any of the defaults,
    take the time to read the documentation—some options can have unforeseen consequences.
    You may need to give the installer permission to make changes (via the User Account
    Control pop-up). In some instances you may get an error message when the GUI attempts
    to start. You can often fix this issue by explicitly telling conda where to find
    the proper executable. Open a run prompt (you can use the key combination win-R
    on most keyboards), type `cmd.exe`, and then press enter. Navigate to the *scripts*
    subdirectory inside the directory where you installed Anaconda. If you used the
    install directory in [Figure 1-1](#figure1-1), for example, the path to the scripts
    directory would be *C:\Users\IEUser\anaconda3\scripts*. Move into that folder
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The first command tells Anaconda to activate the root environment, which is
    created during installation and contains the default Python version and some basic
    packages. The second command tells Anaconda to update the root environment’s version
    of the conda application. You’ll be asked to confirm the update by pressing Y,
    and then Anaconda will install the latest version of conda. Finally, you can update
    all the packages in the root environment using the updated version of conda like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once again, you’ll be asked to confirm the update by pressing Y. After the setup
    and updates have completed, you can access an Anaconda Navigator interface similar
    to the one in [Figure 1-2](#figure1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502567c01/f01002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-2: The Anaconda Navigator interface'
  prefs: []
  type: TYPE_NORMAL
- en: The Navigator interface can be used for package management, virtual environment
    management, and more. It’s the command center for administering your Anaconda
    installation. Even though Windows installations do have access to the conda utility
    (it’s what the GUI relies on under the hood, after all), most never need to use
    it directly since all the most useful tools have been wrapped in a pleasant interface.
    One benefit of the Windows install is how easy it is to create virtual environments.
    Simply click the **Environments** tab and then click **Create**. Enter a name
    for your new environment and pick the appropriate interpreter. That’s it! Now
    you can skip to the “[Setting Up a Virtual Environment](#h1-502567c01-0002)” section.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you run the *.pkg* file downloaded from the Anaconda link, you should see
    something like [Figure 1-3](#figure1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502567c01/f01003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-3: The Anaconda installation screen'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the installer will walk you through configuring Anaconda. The defaults
    are typically fine for most cases. If you plan to change any of the defaults,
    take the time to read the documentation—some options can have unforeseen consequences.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the recommended IDE (Spyder, covered shortly) isn’t natively supported
    under macOS. It’s available using the port package manager, though. If you’re
    on a macOS system, you can elect to skip the Spyder setup described in this chapter
    and choose a Python IDE specifically designed for use with your system. None of
    Spyder’s advanced features are necessary to view or run the code examples, so
    any modern IDE should suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Virtual Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyone who has worked in Python for long enough has seen the inevitable chaos
    that comes from working on too many projects in one space. Different packages
    will require different versions of the same dependency. One project requires a
    different interpreter than another. It can be a real mess, and one you typically
    won’t notice until it’s too late and you’re spending the weekend resolving your
    poor choices.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid all the headache and lost time, you can simply break your projects
    up into separate virtual environments. You can think of a virtual environment
    as an isolated Python world. Packages in one virtual environment are blissfully
    unaware of packages in other virtual environments. Interpreters are automatically
    changed to the proper one for the environment. Life is once again harmonious.
    In your preferred terminal, enter the following command to have conda create a
    new environment for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here `env_name` is the name you want to give your environment; change this to
    suit your preference. You can specify a Python version using the `python=``version`
    syntax. The example will configure a Python 3.*X* interpreter as the default for
    your new environment. Press Y to proceed. Anaconda will make a copy of the Python
    interpreter and all the associated libraries to the *environments* subdirectory.
    The exact path to this directory will depend on your OS and where you installed
    Anaconda. On my system, the path to this environment becomes */home/dreilly/anaconda3/envs/researchenv/*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a moment now to locate this directory and make a note of the full path
    to the folder. You’ll need this in a few minutes to properly configure the IDE.
    To activate your new virtual environment and begin working within it, issue the
    following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you activate an Anaconda virtual environment, the management application
    modifies your operating system’s underlying environment variables to accommodate
    the separation between projects. The `PATH`, `PYTHONPATH`, and other variables
    are updated to point at the specific isolated Python setup you’ve created. Your
    terminal prompt should change to tell you which virtual environment you’re currently
    working in. You may also want to verify the setup by checking the `conda info`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The result should be a list of all the virtual environments you currently have
    defined with an asterisk next to the currently active environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the IDE with Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spyder ([https://www.spyder-ide.org](https://www.spyder-ide.org)) is a scientific
    and mathematics programming environment written in Python, for Python. It’s been
    designed by a dedicated group of programmers, scientists, engineers, and data
    analysts to meet the demands of their work. The best part about the Spyder IDE
    is the fact that it comes available through Anaconda. You can install it from
    your terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once the install completes, you can run the IDE from the console with the command
    `spyder`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve set up the virtual and coding environments, you’re almost ready!
    You can give yourself two cool points and skip to the “[Jupyter Notebooks](#h1-502567c01-0005)”
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the following setup, you can isolate your experimental work from your
    production workspace using virtual environments. It assumes you’ve already installed
    Python 3 correctly on your system and you’re familiar with using the pip utility
    to install packages. A *setup.py* script is provided in this book’s GitHub repository
    for your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up virtualenv
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The virtualenv is a Python package manager for isolating different projects’
    dependencies. Using virtualenv allows you to avoid installing Python packages
    globally, which could break system tools or lead to inconsistent dependent libraries
    in other projects. You’ll be installing virtualenv using the pip utility. Enter
    the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on your install, on Windows machines, you may need to change the
    command to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the virtualenv module, you can create the environment. The
    details of this process have changed over the years, but the idea remains the
    same. Since Python 3.9 this is the preferred method to create virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Installing the IDE without Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can install the Spyder IDE in many different ways depending on the platform
    you operate on. Debian Linux users may be interested in installing via apt-get
    instead of Anaconda. Spyder’s official Debian package is available on the Debian
    package repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the spyder3 application to */usr/bin/anaconda3*. You can
    verify this location with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It’s possible to install Spyder using pip, but it’s not recommended (it can
    get quite complex). See the Spyder installation guide ([https://docs.spyder-ide.org/installation.html](https://docs.spyder-ide.org/installation.html))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re on Windows you can get the Spyder IDE, along with a suite of other
    useful libraries, within the Anaconda Navigator. Under the Home tab you’ll see
    a sample of applications that integrate with Anaconda. Click **Install** under
    the Spyder application to begin the process. Once the installation is complete,
    the Install button will be replaced with a Launch button that will start the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: WinPython ([https://winpython.github.io](https://winpython.github.io)) is another
    scientific Python distribution that is similar to Anaconda in that it includes
    all the most sought-after scientific packages and utility libraries. One notable
    difference, though, is the lack of a package management tool like Anaconda’s conda
    utility. It’s this lack of beginner-friendly tooling that ultimately made me decide
    to use Anaconda for this book. If you’re already using WinPython you’ll be able
    to follow along with the projects, but if you’re starting a brand-new environment
    I highly recommend going the Anaconda route.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations—at this point your development environment is complete! There’s
    one more tool, however, that you can optionally install to get the most out of
    this book: the Jupyter notebook server. Several of the projects in this book are
    accompanied by interactive Jupyter notebooks that include more detail about the
    mathematical formulas, discussions about creating the graphics used in the text,
    and pieces of template code you can use to speed up your own application development.
    If you followed the Anaconda setup on Debian Linux, I have good news: you already
    have the Jupyter notebook server installed. If you installed Anaconda under Windows,
    you can use the Anaconda Navigator to get the application. Navigate to the **Home**
    tab and click **Install** under the Jupyter Notebook app. Once the Install button
    changes to a Launch button, you’re ready.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also install Jupyter in your virtual environment manually with the
    following pip commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then start a notebook server from the terminal using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Or on Windows you can simply start the notebook server using the Anaconda Navigator
    GUI as I mentioned before. Either way, Jupyter will open a web browser that displays
    the contents of the directory where you ran the command. You can use the web interface
    to create new notebooks or open existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to the concept of interactive notebooks, I urge you to take this
    opportunity to learn what they’re all about. Jupyter is a web application that
    allows you to create and share documents that contain live code, visualizations,
    and text formatted in HTML or the more compact Markdown syntax. By combining Markdown,
    code, and output, we can automatically generate beautiful reports, informative
    analysis, and working proofs of concept all in one place. Code snippets can be
    run independently, but data persists between code in different blocks (called
    *cells*).
  prefs: []
  type: TYPE_NORMAL
- en: I regularly use notebooks while I’m writing and testing individual functions
    for a project because I can configure the variables once and then repeatedly test
    the function without needing to rerun any other code. As you’ll see, I also used
    them extensively when writing these chapters to generate most of the figures and
    code blocks. Being able to run certain pieces of code independently came in handy
    when I was tweaking and rendering the figures.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Planning and building a solid Python environment may not be the most exciting
    reading topic in the world, but making sure all your tools are in place and ready
    to work will make jumping into the rest of the book much simpler. Whether you
    chose to go the simple route with Anaconda or the more advanced route with virtualenv,
    you should now have an isolated area to follow along with the code in the upcoming
    projects. In the next chapter, we’ll finish our last bit of housekeeping by clearing
    up some of the programmatic and mathematical syntax used throughout the rest of
    the book. If you’re already very comfortable with Python and know your sigmas
    from your deltas, feel free to skip ahead to [Chapter 3](c03.xhtml).
  prefs: []
  type: TYPE_NORMAL
