["```\n65.55.219.126 - - [04/Jul/2016:14:07:23 +0000] \"GET /index.rdf HTTP/1.0\" 301\n310 \"-\" \"msnbot-UDiscovery/2.0b (+http://search.msn.com/msnbot.htm)\"\"\n```", "```\n$ wc -l access_log\n   7836 access_log\n$ head -1 access_log ; tail -1 access_log\n69.195.124.69 - - [29/Jun/2016:03:35:37 +0000] ...\n65.55.219.126 - - [04/Jul/2016:14:07:23 +0000] ...\n```", "```\n   #!/bin/bash\n   # webaccess--Analyzes an Apache-format access_log file, extracting\n   #   useful and interesting statistics\n\n   bytes_in_gb=1048576\n\n # You will want to change the following to match your own hostname\n   #   to help weed out internally referred hits in the referrer analysis.\n   host=\"intuitive.com\"\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $(basename $0) logfile\" >&2\n     exit 1\n   fi\n\n   if [ ! -r \"$1\" ] ; then\n     echo \"Error: log file $1 not found.\" >&2\n     exit 1\n   fi\n\n➊ firstdate=\"$(head -1 \"$1\" | awk '{print $4}' | sed 's/\\[//')\"\n   lastdate=\"$(tail -1 \"$1\" | awk '{print $4}' | sed 's/\\[//')\"\n\n   echo \"Results of analyzing log file $1\"\n   echo \"\"\n   echo \"  Start date: $(echo $firstdate|sed 's/:/ at /')\"\n   echo \"    End date: $(echo $lastdate|sed 's/:/ at /')\"\n\n➋ hits=\"$(wc -l < \"$1\" | sed 's/[^[:digit:]]//g')\"\n\n   echo \"        Hits: $(nicenumber $hits) (total accesses)\"\n\n➌ pages=\"$(grep -ivE '(.gif|.jpg|.png)' \"$1\" | wc -l | sed 's/[^[:digit:]]//g')\"\n\n   echo \"   Pageviews: $(nicenumber $pages) (hits minus graphics)\"\n\n   totalbytes=\"$(awk '{sum+=$10} END {print sum}' \"$1\")\"\n\n   /bin/echo -n \" Transferred: $(nicenumber $totalbytes) bytes \"\n\n   if [ $totalbytes -gt $bytes_in_gb ] ; then\n     echo \"($(scriptbc $totalbytes / $bytes_in_gb) GB)\"\n   elif [ $totalbytes -gt 1024 ] ; then\n     echo \"($(scriptbc $totalbytes / 1024) MB)\"\n   else\n     echo \"\"\n   fi\n\n   # Now let's scrape the log file for some useful data.\n\n   echo \"\"\n   echo \"The 10 most popular pages were:\"\n\n➍ awk '{print $7}' \"$1\" | grep -ivE '(.gif|.jpg|.png)' | \\\n     sed 's/\\/$//g' | sort | \\\n     uniq -c | sort -rn | head -10\n\n   echo \"\"\n\n   echo \"The 10 most common referrer URLs were:\"\n\n➎ awk '{print $11}' \"$1\" | \\\n     grep -vE \"(^\\\"-\\\"$|/www.$host|/$host)\" | \\\n     sort | uniq -c | sort -rn | head -10\n\n   echo \"\"\n   exit 0\n```", "```\n   #!/bin/bash\n   # searchinfo--Extracts and analyzes search engine traffic indicated in the\n   #   referrer field of a Common Log Format access log\n\n   host=\"intuitive.com\"    # Change to your domain, as desired.\n   maxmatches=20\n   count=0\n   temp=\"/tmp/$(basename $0).$$\"\n\n   trap \"$(which rm) -f $temp\" 0\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $(basename $0) logfile\"  >&2\n     exit 1\n   fi\n   if [ ! -r \"$1\" ] ; then\n     echo \"Error: can't open file $1 for analysis.\" >&2\n     exit 1\n   fi\n\n➊ for URL in $(awk '{ if (length($11) > 4) { print $11 } }' \"$1\" | \\\n     grep -vE \"(/www.$host|/$host)\" | grep '?')\n   do\n➋   searchengine=\"$(echo $URL | cut -d/ -f3 | rev | cut -d. -f1-2 | rev)\"\n     args=\"$(echo $URL | cut -d\\? -f2 | tr '&' '\\n' | \\\n        grep -E '(^q=|^sid=|^p=|query=|item=|ask=|name=|topic=)' | \\\n➌      sed -e 's/+/ /g' -e 's/%20/ /g' -e 's/\"//g' | cut -d= -f2)\"\n     if [ ! -z \"$args\" ] ; then\n       echo \"${searchengine}:      $args\" >> $temp\n➍   else\n       # No well-known match, show entire GET string instead...\n       echo \"${searchengine}       $(echo $URL | cut -d\\? -f2)\" >> $temp\n     fi\n     count=\"$(( $count + 1 ))\"\n   done\n\n   echo \"Search engine referrer info extracted from ${1}:\"\n\n   sort $temp | uniq -c | sort -rn | head -$maxmatches | sed 's/^/ /g'\n\n   echo \"\"\n\n   echo Scanned $count entries in log file out of $(wc -l < \"$1\") total.\n\n   exit 0\n```", "```\n$ searchinfo /web/logs/intuitive/access_log\nSearch engine referrer info extracted from access_log:\n      771\n        4 online reputation management akado\n        4 Names Hawaiian Flowers\n        3 norvegian star\n        3 disneyland pirates of the caribbean\n        3 disney california adventure\n        3 colorado railroad\n        3 Cirque Du Soleil Masks\n        2 www.baskerballcamp.com\n        2 o logo\n        2 hawaiian flowers\n        2 disneyland pictures pirates of the caribbean\n        2 cirque\n        2 cirqu\n        2 Voil%C3%A0 le %3Cb%3Elogo du Cirque du Soleil%3C%2Fb%3E%21\n        2 Tropical Flowers Pictures and Names\n        2 Hawaiian Flowers\n        2 Hawaii Waterfalls\n        2 Downtown Disney Map Anaheim\n\nScanned 983 entries in log file out of 7839 total.\n```", "```\nfor URL in $(awk '{ if (length($11) > 4) { print $11 } }' \"$1\" | \\\n  grep $2)\ndo\n  args=\"$(echo $URL | cut -d\\? -f2 | tr '&' '\\n' | \\\n     grep -E '(^q=|^sid=|^p=|query=|item=|ask=|name=|topic=)' | \\\n     cut -d= -f2)\"\n  echo $args  | sed -e 's/+/ /g' -e 's/\"//g' >> $temp\n  count=\"$(( $count + 1 ))\"\ndone\n```", "```\nawk '{if (substr($9,0,1) <= \"3\") { print $0 } }' apache.log > access_log\nawk '{if (substr($9,0,1)  > \"3\") { print $0 } }' apache.log > error_log\n```", "```\n$ head -1 error_log\n[Mon Jun 06 08:08:35 2016] [error] [client 54.204.131.75] File does not exist:\n/var/www/vhosts/default/htdocs/clientaccesspolicy.xml\n```", "```\n$ awk '{print $9\" \"$10\" \"$11\" \"$12 }' error_log | sort -u\nFile does not exist:\nInvalid error redirection directive:\nPremature end of script\nexecution failure for parameter\npremature EOF in parsed\nscript not found or\nmalformed header from script\n```", "```\n   #!/bin/bash\n   # weberrors--Scans through an Apache error_log file, reports the\n   #   most important errors, and then lists additional entries\n\n   temp=\"/tmp/$(basename $0).$$\"\n\n   # For this script to work best, customize the following three lines for\n   #   your own installation.\n\n   htdocs=\"/usr/local/etc/httpd/htdocs/\"\n   myhome=\"/usr/home/taylor/\"\n   cgibin=\"/usr/local/etc/httpd/cgi-bin/\"\n\n   sedstr=\"s/^/  /g;s|$htdocs|[htdocs]  |;s|$myhome|[homedir] \"\n   sedstr=$sedstr\"|;s|$cgibin|[cgi-bin] |\"\n\n   screen=\"(File does not exist|Invalid error redirect|premature EOF\"\n   screen=$screen\"|Premature end of script|script not found)\"\n\n   length=5                # Entries per category to display\n\n   checkfor()\n   {\n     grep \"${2}:\" \"$1\" | awk '{print $NF}' \\\n       | sort | uniq -c | sort -rn | head -$length | sed \"$sedstr\" > $temp\n\n     if [ $(wc -l < $temp) -gt 0 ] ; then\n       echo \"\"\n       echo \"$2 errors:\"\n       cat $temp\n     fi\n   }\n\n   trap \"$(which rm) -f $temp\" 0\n\n   if [ \"$1\" = \"-l\" ] ; then\n     length=$2; shift 2\n   fi\n\n   if [ $# -ne 1 -o ! -r \"$1\" ] ; then\n     echo \"Usage: $(basename $0) [-l len] error_log\" >&2\n     exit 1\n   fi\n\n   echo Input file $1 has $(wc -l < \"$1\") entries.\n\n   start=\"$(grep -E '\\[.*:.*:.*\\]' \"$1\" | head -1 \\\n      | awk '{print $1\" \"$2\" \"$3\" \"$4\" \"$5 }')\"\n   end=\"$(grep -E '\\[.*:.*:.*\\]' \"$1\" | tail -1 \\\n      | awk '{print $1\" \"$2\" \"$3\" \"$4\" \"$5 }')\"\n\n   /bin/echo -n \"Entries from $start to $end\"\n\n   echo \"\"\n\n   ### Check for various common and well-known errors:\n\n   checkfor \"$1\" \"File does not exist\"\n   checkfor \"$1\" \"Invalid error redirection directive\"\n   checkfor \"$1\" \"Premature EOF\"\n   checkfor \"$1\" \"Script not found or unable to stat\"\n   checkfor \"$1\" \"Premature end of script headers\"\n\n➊ grep -vE \"$screen\" \"$1\" | grep \"\\[error\\]\" | grep \"\\[client \" \\\n     | sed 's/\\[error\\]/\\`/' | cut -d\\` -f2 | cut -d\\ -f4- \\\n➋   | sort | uniq -c | sort -rn | sed 's/^/ /' | head -$length > $temp\n\n   if [ $(wc -l < $temp) -gt 0 ] ; then\n     echo \"\"\n     echo \"Additional error messages in log file:\"\n     cat $temp\n   fi\n\n   echo \"\"\n   echo \"And non-error messages occurring in the log file:\"\n\n➌ grep -vE \"$screen\" \"$1\" | grep -v \"\\[error\\]\" \\\n     | sort | uniq -c | sort -rn \\\n     | sed 's/^/  /' | head -$length\n\n   exit 0\n```", "```\n$ weberrors error_log\nInput file error_log has 768 entries.\nEntries from [Mon Jun 05 03:35:34 2017] to [Fri Jun 09 13:22:58 2017]\n\nFile does not exist errors:\n       94 /var/www/vhosts/default/htdocs/mnews.htm\n       36 /var/www/vhosts/default/htdocs/robots.txt\n       15 /var/www/vhosts/default/htdocs/index.rdf\n       10 /var/www/vhosts/default/htdocs/clientaccesspolicy.xml\n        5 /var/www/vhosts/default/htdocs/phpMyAdmin\n\nScript not found or unable to stat errors:\n        1 /var/www/vhosts/default/cgi-binphp5\n        1 /var/www/vhosts/default/cgi-binphp4\n        1 /var/www/vhosts/default/cgi-binphp.cgi\n        1 /var/www/vhosts/default/cgi-binphp-cgi\n        1 /var/www/vhosts/default/cgi-binphp\n\nAdditional error messages in log file:\n        1 script '/var/www/vhosts/default/htdocs/wp-trackback.php' not found\nor unable to stat\n        1 script '/var/www/vhosts/default/htdocs/sprawdza.php' not found or\nunable to stat\n        1 script '/var/www/vhosts/default/htdocs/phpmyadmintting.php' not\nfound or unable to stat\n\nAnd non-error messages occurring in the log file:\n        6 /usr/lib64/python2.6/site-packages/mod_python/importer.py:32:\nDeprecationWarning: the md5 module is deprecated; use hashlib instead\n        6   import md5\n        3 [Sun Jun 25 03:35:34 2017] [warn] RSA server certificate CommonName\n(CN) `Parallels Panel' does NOT match server name!?\n        1 sh: /usr/local/bin/zip: No such file or directory\n        1 sh: /usr/local/bin/unzip: No such file or directory\n```", "```\n   #!/bin/bash\n   # remotebackup--Takes a list of files and directories, builds a single\n   #   compressed archive, and then emails it off to a remote archive site\n   #   for safekeeping. It's intended to be run every night for critical\n   #   user files but not intended to replace a more rigorous backup scheme.\n\n   outfile=\"/tmp/rb.$$.tgz\"\n   outfname=\"backup.$(date +%y%m%d).tgz\"\n   infile=\"/tmp/rb.$$.in\"\n\n   trap \"$(which rm) -f $outfile $infile\" 0\n\n   if [ $# -ne 2 -a $# -ne 3 ] ; then\n     echo \"Usage: $(basename $0) backup-file-list remoteaddr {targetdir}\" >&2\n     exit 1\n   fi\n\n   if [ ! -s \"$1\" ] ; then\n     echo \"Error: backup list $1 is empty or missing\" >&2\n     exit 1\n   fi\n\n   # Scan entries and build fixed infile list. This expands wildcards\n   #   and escapes spaces in filenames with a backslash, producing a\n   #   change: \"this file\" becomes this\\ file, so quotes are not needed.\n\n➊ while read entry; do\n     echo \"$entry\" | sed -e 's/ /\\\\ /g' >> $infile\n   done < \"$1\"\n\n   # The actual work of building the archive, encoding it, and sending it\n\n➋ tar czf - $(cat $infile) | \\\n     uuencode $outfname | \\\n     mail -s \"${3:-Backup archive for $(date)}\" \"$2\"\n\n   echo \"Done. $(basename $0) backed up the following files:\"\n   sed 's/^/   /' $infile\n   /bin/echo -n \"and mailed them to $2 \"\n\n   if [ ! -z \"$3\" ] ; then\n     echo \"with requested target directory $3\"\n   else\n     echo \"\"\n   fi\n\n   exit 0\n```", "```\n$ cat filelist\n*.sh\n*.html\n```", "```\n$ remotebackup filelist taylor@intuitive.com\nDone. remotebackup backed up the following files:\n   *.sh\n   *.html\nand mailed them to taylor@intuitive.com\n$ cd /web\n$ remotebackup backuplist taylor@intuitive.com mirror\nDone. remotebackup backed up the following files:\n   ourecopass\nand mailed them to taylor@intuitive.com with requested target directory mirror\n```", "```\n#!/bin/bash\n# trimmailbox--A simple script to ensure that only the four most recent\n#   messages remain in the user's mailbox. Works with Berkeley Mail\n#   (aka Mailx or mail)--will need modifications for other mailers!\n\nkeep=4  # By default, let's just keep around the four most recent messages.\n\ntotalmsgs=\"$(echo 'x' | mail | sed -n '2p' | awk '{print $2}')\"\n\nif [ $totalmsgs -lt $keep ] ; then\n  exit 0          # Nothing to do\nfi\n\ntopmsg=\"$(( $totalmsgs - $keep ))\"\n\nmail > /dev/null << EOF\nd1-$topmsg\nq\nEOF\n\nexit 0\n```", "```\n   #!/bin/bash\n   # getstats--Every 'n' minutes, grabs netstats values (via crontab)\n\n   logfile=\"/Users/taylor/.netstatlog\"   # Change for your configuration.\n   temp=\"/tmp/getstats.$$.tmp\"\n\n   trap \"$(which rm) -f $temp\" 0\n\n   if [ ! -e $logfile ] ; then     # First time run?\n     touch $logfile\n   fi\n   ( netstat -s -p tcp > $temp\n\n   # Check your log file the first time this is run: some versions of netstat\n   #   report more than one line, which is why the \"| head -1\" is used here.\n➊ sent=\"$(grep 'packets sent' $temp | cut -d\\  -f1 | sed \\\n   's/[^[:digit:]]//g' | head -1)\"\n   resent=\"$(grep 'retransmitted' $temp | cut -d\\  -f1 | sed \\\n   's/[^[:digit:]]//g')\"\n   received=\"$(grep 'packets received$' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n   dupacks=\"$(grep 'duplicate acks' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n   outoforder=\"$(grep 'out-of-order packets' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n   connectreq=\"$(grep 'connection requests' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n   connectacc=\"$(grep 'connection accepts' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n   retmout=\"$(grep 'retransmit timeouts' $temp | cut -d\\  -f1 | \\\n     sed 's/[^[:digit:]]//g')\"\n\n   /bin/echo -n \"time=$(date +%s);\"\n➋ /bin/echo -n \"snt=$sent;re=$resent;rec=$received;dup=$dupacks;\"\n   /bin/echo -n \"oo=$outoforder;creq=$connectreq;cacc=$connectacc;\"\n   echo \"reto=$retmout\"\n\n   ) >> $logfile\n\n   exit 0\n```", "```\n   #!/bin/bash\n   # netperf--Analyzes the netstat running performance log, identifying\n   #   important results and trends\n\n   log=\"/Users/taylor/.netstatlog\"     # Change for your configuration.\n   stats=\"/tmp/netperf.stats.$$\"\n   awktmp=\"/tmp/netperf.awk.$$\"\n\n   trap \"$(which rm) -f $awktmp $stats\" 0\n\n   if [ ! -r $log ] ; then\n     echo \"Error: can't read netstat log file $log\" >&2\n     exit 1\n   fi\n\n   # First, report the basic statistics of the latest entry in the log file...\n\n   eval $(tail -1 $log)    # All values turn into shell variables.\n\n➌ rep=\"$(scriptbc -p 3 $re/$snt\\*100)\"\n   repn=\"$(scriptbc -p 4 $re/$snt\\*10000 | cut -d. -f1)\"\n   repn=\"$(( $repn / 100 ))\"\n   retop=\"$(scriptbc -p 3 $reto/$snt\\*100)\";\n   retopn=\"$(scriptbc -p 4 $reto/$snt\\*10000 | cut -d. -f1)\"\n   retopn=\"$(( $retopn / 100 ))\"\n   dupp=\"$(scriptbc -p 3 $dup/$rec\\*100)\";\n   duppn=\"$(scriptbc -p 4 $dup/$rec\\*10000 | cut -d. -f1)\"\n   duppn=\"$(( $duppn / 100 ))\"\n   oop=\"$(scriptbc -p 3 $oo/$rec\\*100)\";\n   oopn=\"$(scriptbc -p 4 $oo/$rec\\*10000 | cut -d. -f1)\"\n   oopn=\"$(( $oopn / 100 ))\"\n\n   echo \"Netstat is currently reporting the following:\"\n\n   /bin/echo -n \"  $snt packets sent, with $re retransmits ($rep%) \"\n   echo \"and $reto retransmit timeouts ($retop%)\"\n\n /bin/echo -n \"  $rec packets received, with $dup dupes ($dupp%)\"\n   echo \" and $oo out of order ($oop%)\"\n   echo \"   $creq total connection requests, of which $cacc were accepted\"\n   echo \"\"\n\n   ## Now let's see if there are any important problems to flag.\n\n   if [ $repn -ge 5 ] ; then\n     echo \"*** Warning: Retransmits of >= 5% indicates a problem \"\n     echo \"(gateway or router flooded?)\"\n   fi\n   if [ $retopn -ge 5 ] ; then\n     echo \"*** Warning: Transmit timeouts of >= 5% indicates a problem \"\n     echo \"(gateway or router flooded?)\"\n   fi\n   if [ $duppn -ge 5 ] ; then\n     echo \"*** Warning: Duplicate receives of >= 5% indicates a problem \"\n     echo \"(probably on the other end)\"\n   fi\n   if [ $oopn -ge 5 ] ; then\n     echo \"*** Warning: Out of orders of >= 5% indicates a problem \"\n     echo \"(busy network or router/gateway flood)\"\n   fi\n\n   # Now let's look at some historical trends...\n\n   echo \"Analyzing trends...\"\n\n   while read logline ; do\n       eval \"$logline\"\n       rep2=\"$(scriptbc -p 4 $re / $snt \\* 10000 | cut -d. -f1)\"\n       retop2=\"$(scriptbc -p 4 $reto / $snt \\* 10000 | cut -d. -f1)\"\n       dupp2=\"$(scriptbc -p 4 $dup / $rec \\* 10000 | cut -d. -f1)\"\n       oop2=\"$(scriptbc -p 4 $oo / $rec \\* 10000 | cut -d. -f1)\"\n       echo \"$rep2 $retop2 $dupp2 $oop2\" >> $stats\n     done < $log\n\n   echo \"\"\n\n   # Now calculate some statistics and compare them to the current values.\n\n   cat << \"EOF\" > $awktmp\n       { rep += $1; retop += $2; dupp += $3; oop += $4 }\n   END { rep /= 100; retop /= 100; dupp /= 100; oop /= 100;\n         print \"reps=\"int(rep/NR) \";retops=\" int(retop/NR) \\\n            \";dupps=\" int(dupp/NR) \";oops=\"int(oop/NR) }\n   EOF\n\n➍ eval $(awk -f $awktmp < $stats)\n\n   if [ $repn -gt $reps ] ; then\n     echo \"*** Warning: Retransmit rate is currently higher than average.\"\n     echo \"    (average is $reps% and current is $repn%)\"\n   fi\n\n   if [ $retopn -gt $retops ] ; then\n     echo \"*** Warning: Transmit timeouts are currently higher than average.\"\n     echo \"    (average is $retops% and current is $retopn%)\"\n   fi\n   if [ $duppn -gt $dupps ] ; then\n     echo \"*** Warning: Duplicate receives are currently higher than average.\"\n     echo \"    (average is $dupps% and current is $duppn%)\"\n   fi\n   if [ $oopn -gt $oops ] ; then\n     echo \"*** Warning: Out of orders are currently higher than average.\"\n     echo \"    (average is $oops% and current is $oopn%)\"\n   fi\n   echo \\(Analyzed $(wc -l < $stats) netstat log entries for calculations\\)\n   exit 0\n```", "```\n$ netstat -s -p tcp | head\ntcp:\n    51848278 packets sent\n        46007627 data packets (3984696233 bytes)\n        16916 data packets (21095873 bytes) retransmitted\n        0 resends initiated by MTU discovery\n        5539099 ack-only packets (2343 delayed)\n        0 URG only packets\n        0 window probe packets\n        210727 window update packets\n        74107 control packets\n```", "```\n*/15 * * * *       /home/taylor/bin/getstats\n```", "```\n$ sudo touch /Users/taylor/.netstatlog\n$ sudo chmod a+rw /Users/taylor/.netstatlog\n```", "```\n$ netperf\nNetstat is currently reporting the following:\n  52170128 packets sent, with 16927 retransmits (0%) and 2722 retransmit timeouts (0%)\n  20290926 packets received, with 129910 dupes (.600%) and 18064 out of order (0%)\n   39841 total connection requests, of which 123 were accepted\n\nAnalyzing trends...\n\n(Analyzed 6 netstat log entries for calculations)\n```", "```\n#!/bin/bash\n# renicename--Renices the job that matches the specified name\n\nuser=\"\"; tty=\"\"; showpid=0; niceval=\"+1\"        # Initialize\n\nwhile getopts \"n:u:t:p\" opt; do\n  case $opt in\n   n ) niceval=\"$OPTARG\";               ;;\n   u ) if [ ! -z \"$tty\" ] ; then\n         echo \"$0: error: -u and -t are mutually exclusive.\" >&2\n         exit 1\n       fi\n       user=$OPTARG                     ;;\n   t ) if [ ! -z \"$user\" ] ; then\n         echo \"$0: error: -u and -t are mutually exclusive.\" >&2\n         exit 1\n       fi\n       tty=$OPTARG                      ;;\n   p ) showpid=1;                       ;;\n   ? ) echo \"Usage: $0 [-n niceval] [-u user|-t tty] [-p] pattern\" >&2\n       echo \"Default niceval change is \\\"$niceval\\\" (plus is lower\" >&2\n       echo \"priority, minus is higher, but only root can go below 0)\" >&2\n       exit 1\n  esac\ndone\nshift $(($OPTIND - 1))  # Eat all the parsed arguments.\n\nif [ $# -eq 0 ] ; then\n  echo \"Usage: $0 [-n niceval] [-u user|-t tty] [-p] pattern\" >&2\n  exit 1\nfi\n\nif [ ! -z \"$tty\" ] ; then\n  pid=$(ps cu -t $tty | awk \"/ $1/ { print \\\\$2 }\")\nelif [ ! -z \"$user\" ] ; then\n  pid=$(ps cu -U $user | awk \"/ $1/ { print \\\\$2 }\")\nelse\n  pid=$(ps cu -U ${USER:-LOGNAME} | awk \"/ $1/ { print \\$2 }\")\nfi\n\nif [ -z \"$pid\" ] ; then\n  echo \"$0: no processes match pattern $1\" >&2\n  exit 1\nelif [ ! -z \"$(echo $pid | grep ' ')\" ] ; then\n  echo \"$0: more than one process matches pattern ${1}:\"\n  if [ ! -z \"$tty\" ] ; then\n    runme=\"ps cu -t $tty\"\n  elif [ ! -z \"$user\" ] ; then\n    runme=\"ps cu -U $user\"\n  else\n    runme=\"ps cu -U ${USER:-LOGNAME}\"\n  fi\n  eval $runme | \\\n      awk \"/ $1/ { printf \\\"  user %-8.8s pid %-6.6s job %s\\n\\\", \\\n      \\$1,\\$2,\\$11 }\"\n  echo \"Use -u user or -t tty to narrow down your selection criteria.\"\nelif [ $showpid -eq 1 ] ; then\n  echo $pid\nelse\n  # Ready to go. Let's do it!\n  /bin/echo -n \"Renicing job \\\"\"\n  /bin/echo -n $(ps cp $pid | sed 's/ [ ]*/ /g' | tail -1 |  cut -d\\  -f6-)\n  echo \"\\\" ($pid)\"\n  renice $niceval $pid\nfi\n\nexit 0\n```", "```\n$ renicename \"vi\"\nrenicename: more than one process matches pattern vi:\n  user taylor    pid 6584    job vi\n  user taylor    pid 10949   job vi\nUse -u user or -t tty to narrow down your selection criteria.\n```", "```\n$ renicename \"vi\"\nRenicing job \"vi\" (6584)\n```", "```\n$ ps –l 6584\nUID   PID  PPID     F CPU PRI NI        SZ   RSS WCHAN    S   ADDR TTY                 TIME CMD\n501  6584  1193  4006   0  30  1➊  2453832  1732     -  SN+  0 ttys000  0:00.01 vi wasting.time\n```", "```\n#!/bin/bash\n# watch_and_nice--Watches for the specified process name and renices it\n#   to the desired value when seen.\n\nif [ $# -ne 2 ] ; then\n  echo \"Usage: $(basename $0) desirednice jobname\" >&2\n  exit 1\nfi\n\npid=\"$(renicename -p \"$2\")\"\n\nif [ \"$pid\" == \"\" ] ; then\n  echo \"No process found for $2\"\n  exit 1\nfi\n\nif [ ! -z \"$(echo $pid | sed 's/[0-9]*//g')\" ] ; then\n  echo \"Failed to make a unique match in the process table for $2\" >&2\n  exit 1\nfi\n\ncurrentnice=\"$(ps -lp $pid | tail -1 | awk '{print $6}')\"\n\nif [ $1 -gt $currentnice ] ; then\n  echo \"Adjusting priority of $2 to $1\"\n  renice $1 $pid\nfi\n\nexit 0\n```"]