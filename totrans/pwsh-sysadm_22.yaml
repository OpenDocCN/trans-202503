- en: '19'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '19'
- en: REFACTORING YOUR CODE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 重构你的代码
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'In the preceding chapter, you built a VM with a running SQL server using nothing
    besides an existing hypervisor, an operating system ISO file, and a little bit
    of code. Doing so meant linking together many of the functions you created in
    the previous chapters. Here, you’ll do something different: instead of adding
    new functionality to your PowerLab module, you’ll dig into your code and see if
    you can make your module a little more modular.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你使用现有的虚拟化管理程序、操作系统ISO文件和少量代码构建了一个运行SQL服务器的虚拟机。这样做意味着你将前几章中创建的多个函数链接在一起。在这里，你将做一些不同的事情：你不再向PowerLab模块添加新功能，而是深入研究代码，看看是否可以让你的模块更模块化。
- en: When I say *modular*, I’m talking about separating the functionality of the
    code into reusable functions that can handle many situations. The more modular
    the code, the more generally applicable it will be. And the more generally applicable
    your code, the more useful it will be. With modular code, you can reuse functions
    such as `New-PowerLabVM` or `Install-PowerLabOperatingSystem` to install many
    kinds of servers (which you’ll see in the next chapter).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说*模块化*时，我指的是将代码的功能拆分为可重用的函数，这些函数能够处理多种情况。代码越模块化，它的通用性就越强。而代码的通用性越强，它就越有用。通过模块化代码，你可以重用像`New-PowerLabVM`或`Install-PowerLabOperatingSystem`这样的函数来安装多种类型的服务器（你将在下一章中看到）。
- en: A Second Look at New-PowerLabSqlServer
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 再看一下`New-PowerLabSqlServer`
- en: 'You created two main functions in [Chapter 18](ch18.xhtml#ch18): `New-PowerLabSqlServer`
    and `Install-PowerLabSqlServer`. You did so with the goal of setting up an SQL
    server. But what if you want to make your functions more generally applicable?
    After all, different servers share a lot of components with SQL ones: virtual
    machine, virtual disk, Windows OS, and so forth. You could simply copy the function
    you have and swap out all the specific SQL references for references to the server
    type you want.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第18章](ch18.xhtml#ch18)中，你创建了两个主要函数：`New-PowerLabSqlServer`和`Install-PowerLabSqlServer`。你这样做的目的是为了设置一个SQL服务器。但如果你想让你的函数更具通用性呢？毕竟，不同的服务器与SQL服务器有很多相同的组件：虚拟机、虚拟磁盘、Windows操作系统等等。你可以简单地复制你已有的函数，然后将所有特定的SQL引用替换为你想要的服务器类型的引用。
- en: But I’m going to have to advise against this. There’s no need for all that extra
    code. Instead, you’ll simply refactor your existing code. *Refactoring* refers
    to the process of changing a code’s insides without changing its functionality;
    in other words, refactoring is something for you, the programmer. It helps code
    be more readable, and it makes sure that you can keep growing your project without
    running into too many headache-inducing organizational issues.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但我必须建议你不要这样做。没有必要写那么多额外的代码。相反，你只需要重构现有的代码。*重构*指的是在不改变功能的情况下，改变代码内部结构；换句话说，重构是为你，程序员，所做的事情。它帮助代码变得更易读，并确保你在扩展项目时不会遇到太多让人头疼的组织问题。
- en: Let’s start by taking a look at that `New-PowerLabSqlServer` function you created,
    shown in [Listing 19-1](ch19.xhtml#ch19list1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看你创建的`New-PowerLabSqlServer`函数，见[清单 19-1](ch19.xhtml#ch19list1)。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 19-1: `New-PowerLabSqlServer` function*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 19-1: `New-PowerLabSqlServer`函数*'
- en: How would you go about refactoring this code? Well for starters, you know that
    every server needs a virtual machine, a virtual disk, and an operating system;
    you handle these needs in the code block between ❸ and ❹.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你打算如何重构这段代码？首先，你知道每个服务器都需要一个虚拟机、一个虚拟磁盘和一个操作系统；你在❸和❹之间的代码块中处理了这些需求。
- en: If you look at this code, though, you’ll see that you can’t just pull it out
    and paste it into a new function. Parameters are defined in the `New-PowerLabSqlServer`
    function ❶ that you use in those lines. Notice that the only parameter that’s
    specific to SQL here is `AnswerFilePath` ❷.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你查看这段代码，你会发现你不能简单地将其提取出来并粘贴到一个新函数中。在`New-PowerLabSqlServer`函数❶中定义的参数在这些行中被使用。请注意，这里唯一特定于SQL的参数是`AnswerFilePath`❷。
- en: Now that you’ve identified the code that isn’t SQL specific, let’s pull it out
    and use it to create the new function `New-PowerLabServer` ([Listing 19-2](ch19.xhtml#ch19list2)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经找出了那些与SQL无关的代码，让我们将其提取出来并用它来创建新的函数`New-PowerLabServer`（[清单 19-2](ch19.xhtml#ch19list2)）。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 19-2: A more generic `New-PowerLabServer` function*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 19-2: 更通用的`New-PowerLabServer`函数*'
- en: 'At this point, you have a general server-provisioning function, but no way
    to indicate the kind of server you’re creating. Let’s fix that by using another
    parameter called `ServerType`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你有了一个通用的服务器配置函数，但没有办法指明你要创建的是哪种服务器。让我们通过使用另一个名为`ServerType`的参数来解决这个问题：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice the new `ValidateSet` parameter. I’ll give an in-depth explanation of
    what this does later in the chapter; for now, you just need to know that this
    ensures that the user can pass in only a server type contained within this set.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意新的`ValidateSet`参数。我将在本章稍后深入解释它的作用；现在，你只需要知道的是，它确保用户只能传入此集合中的服务器类型。
- en: 'Now that you have this parameter, let’s use it. Insert a `switch` statement
    at the end of the function to execute different code depending on which server
    type the user enters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了这个参数，让我们来使用它。在函数的末尾插入一个`switch`语句，根据用户输入的服务器类型执行不同的代码：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, you handle the three types of server input (and use the `default`
    case to handle any exceptions ❶). But there’s a problem. To fill out the SQL code,
    you copied and pasted code from the `New-PowerLabSqlServer` function, and now
    you’re using something you don’t have: the `AnswerFilePath` variable. Recall that
    when you moved your generic code to a new function, you left this variable behind,
    meaning that you can’t use it here . . . or can you?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你处理了三种类型的服务器输入（并使用`default`情况来处理任何异常❶）。但这里有个问题。为了填写SQL代码，你从`New-PowerLabSqlServer`函数中复制并粘贴了代码，而现在你使用了你没有的东西：`AnswerFilePath`变量。回想一下，当你将通用代码移到新函数时，你将这个变量留下了，这意味着你无法在这里使用它……还是可以吗？
- en: Using Parameter Sets
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用参数集
- en: In situations like the preceding one, when you have one parameter that determines
    which other parameter you need, PowerShell has a handy feature called *parameter
    sets*. You can think of parameter sets as letting you use conditional logic to
    control which parameters a user inputs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在像前面这样的情况下，当你有一个参数决定需要哪个其他参数时，PowerShell有一个非常方便的功能叫做*参数集*。你可以将参数集视为允许你使用条件逻辑来控制用户输入哪些参数。
- en: 'In this example, you’ll use three parameter sets: a set for provisioning SQL
    servers, a set for provisioning web servers, and a default set.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将使用三个参数集：一个用于配置SQL服务器，一个用于配置Web服务器，以及一个默认集。
- en: 'You can define parameter sets by using the `ParameterSetName` attribute followed
    by a name. Here’s an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`ParameterSetName`属性并跟上一个名称来定义参数集。以下是一个示例：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that you haven’t assigned `ServerType` a parameter set. Parameters that
    are not part of a parameter set can be used with any set. Because of this, you
    can use `ServerType` with either `AnswerFilePath` or the newly created parameter
    you’ll be using for web server provisioning: `CreateDefaultWebsite`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你没有为`ServerType`分配参数集。未属于任何参数集的参数可以与任何集一起使用。因此，你可以将`ServerType`与`AnswerFilePath`或你将用于Web服务器配置的新增参数`CreateDefaultWebsite`一起使用。
- en: 'You can see here that the majority of the parameters stay the same, but you
    add a final one based on what you pass in for `ServerType`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这里大部分参数保持不变，但你根据为`ServerType`传入的值添加了一个最终的参数：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you try to mix and match, and use parameters from two different parameter
    sets at the same time, you’ll fail:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试混合并匹配，同时使用两个不同参数集中的参数，你将会失败：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What would happen if you did the opposite and used neither the `NoDefaultWebsite`
    parameter nor the `AnswerFilePath` parameter?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做相反的操作，既不使用`NoDefaultWebsite`参数也不使用`AnswerFilePath`参数，会发生什么呢？
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You get the same error about not being able to resolve the parameter set as
    before. Why? PowerShell doesn’t know which parameter set to use! Earlier, I said
    you’d be using three sets, but you defined only two. You need to set a default
    parameter set. As you saw earlier, parameters that are not explicitly assigned
    to a parameter set can be used in conjunction with any in a set. However, if you
    do define a default parameter set, PowerShell will use those parameters if no
    parameters in any set are being used.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到与之前相同的错误，提示无法解析参数集。为什么？因为PowerShell不知道该使用哪个参数集！之前我说过你将使用三个集，但你只定义了两个。你需要设置一个默认的参数集。正如你之前看到的，未明确分配给参数集的参数可以与任何集中的参数一起使用。但是，如果你定义了默认的参数集，PowerShell将在没有任何集参数被使用的情况下使用这些参数。
- en: 'As for your default set, you could pick the defined SQL or web parameter set
    to be your default, or you could simply define a nonspecific parameter set like
    `blah blah`, which would create an inherent set for all parameters that do not
    have an explicit set defined:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 至于你的默认集，你可以选择定义的 SQL 或 Web 参数集作为默认值，或者你也可以简单地定义一个不特定的参数集，比如 `blah blah`，这将为所有没有明确定义集的参数创建一个默认集：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you don’t want to set a defined parameter set as default, you can set it
    to anything, and PowerShell will ignore both parameter sets *if no parameter in
    a parameter set is used*. This is what you need to do in this case; it’s perfectly
    okay to not use a defined parameter set because you have the `ServerType` parameter
    to indicate whether or not you’re going to deploy a web server or SQL server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将某个已定义的参数集设置为默认值，可以将其设置为任何值，只要*没有使用参数集中的任何参数*，PowerShell 将会忽略这两个参数集。在这种情况下，你需要这样做；不使用已定义的参数集是完全可以的，因为你有
    `ServerType` 参数来指示你是否要部署 Web 服务器或 SQL 服务器。
- en: With your new parameter sets, the parameter portion of `New-PowerLabServer`
    looks like [Listing 19-3](ch19.xhtml#ch19list3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你新的参数集，`New-PowerLabServer` 函数的参数部分看起来像是 [清单 19-3](ch19.xhtml#ch19list3)。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 19-3: The new `New-PowerLabServer` function*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 19-3：新的 `New-PowerLabServer` 函数*'
- en: Notice that you have a reference to the function `Install-PowerLabSqlServer`.
    This looks similar to the function (`New-PowerLabSqlServer`) that got us into
    this mess. Instead of creating the virtual machine and installing the operating
    system, `Install-PowerLabSqlServer` takes over from `New-PowerLabServer`, installs
    the SQL server software, and performs basic configuration. You might be inclined
    to perform this same round of refactoring on this function. You could do this,
    but as soon as you look at the code that’s inside `Install-PowerLabSqlServer`,
    you’ll soon realize there are nearly no commonalities between the installation
    phase of SQL server and that of other types of servers. It’s a unique process
    and would be hard to “genericize” for other server deployments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你有一个对函数 `Install-PowerLabSqlServer` 的引用。这个函数看起来和将我们带入困境的函数（`New-PowerLabSqlServer`）相似。不同的是，`Install-PowerLabSqlServer`
    在 `New-PowerLabServer` 完成后接管，安装 SQL 服务器软件并进行基本配置。你可能会倾向于对这个函数进行同样的重构。你可以这么做，但一旦你查看
    `Install-PowerLabSqlServer` 中的代码，你会很快意识到，SQL 服务器的安装阶段与其他类型服务器的安装几乎没有共同点。这是一个独特的过程，且很难为其他服务器部署“通用化”。
- en: Summary
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Well, now that the code is nice and refactored, you’re left with a function
    capable of . . . provisioning a SQL server. So back where you started, right?
    I hope not! Even though you haven’t changed anything about the functionality of
    the code, you’ve built the foundation you need to easily insert the code for creating
    a web server (which you’ll do in the next chapter).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在代码已经很好地重构了，你剩下的是一个可以……提供 SQL 服务器的函数。那么你是不是回到原点了呢？希望不是！即使你没有改变代码的功能，你已经构建了一个基础，方便你在下章中插入创建
    Web 服务器的代码。
- en: As you saw in this chapter, refactoring PowerShell code isn’t a cut-and-dried
    process. Knowing the ways you can refactor your code, and which of those ways
    is the best for your present situation, is a skill that comes with experience.
    But as long as you keep what programmers call *the DRY principle* (don’t repeat
    yourself) in mind, you’ll be on the right path. More than anything, abiding by
    DRY means avoiding duplicate code and redundant functionality. You saw this in
    this chapter when you chose to create a general function that created new servers,
    as opposed to another `New-PowerLab`InsertServerTypeHere`Server` function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章中看到的，重构 PowerShell 代码并不是一个简单明了的过程。了解如何重构代码，以及在当前情况下哪种方式最适合，是一种通过经验获得的技能。但只要你始终牢记程序员所说的*DRY
    原则*（不要重复自己），你就会走在正确的道路上。最重要的是，遵循 DRY 原则意味着避免重复代码和冗余功能。你在本章中看到了这一点，当你选择创建一个通用函数来创建新服务器，而不是另一个
    `New-PowerLab`InsertServerTypeHere`Server` 函数时。
- en: Your hard work wasn’t for nothing. In the next chapter, you’ll get back to automating,
    adding the code you need to create IIS web servers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你辛苦的工作没有白费。在下一章中，你将重新开始自动化，添加创建 IIS Web 服务器所需的代码。
