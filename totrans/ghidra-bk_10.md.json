["```\n00010a30  CALL  getaddrinfo    int getaddrinfo(char * __name, c...\n```", "```\n  local_48.ai_family = 2;\n\n  local_48.ai_socktype = 1;\n\n  local_10 = getaddrinfo(param_1,\"www\",&local_48,&local_18);\n```", "```\nint array_demo[100];\n```", "```\nint bytes = 100 * sizeof(int); // or 100 * sizeof(array_demo[0])\n```", "```\n ➊ array_demo[20] = 15;              // fixed index into the array\n\n    for (int i = 0; i < 100; i++) {\n\n     ➋ array_demo[i] = i;            // varying index into the array\n```", "```\nint global_array[3];\n\nint main(int argc, char **argv) {\n\n    int idx = atoi(argv[1]); //not bounds checked for simplicity\n\n    global_array[0] = 10;\n\n    global_array[1] = 20;\n\n    global_array[2] = 30;\n\n    global_array[idx] = 40;\n\n}\n```", "```\n          ...\n\n00100657  CALL   atoi\n\n0010065c  MOV    dword ptr [RBP + local_c],EAX\n\n0010065f  MOV    dword ptr [DAT_00301018],10➊\n\n00100669  MOV    dword ptr [DAT_0030101c],20➋\n\n00100673  MOV    dword ptr [DAT_00301020],30➌\n\n0010067d  MOV    EAX,dword ptr [RBP + local_c]\n\n00100680  CDQE\n\n00100682  LEA    RDX,[RAX*4]➍\n\n0010068a  LEA    RAX,[DAT_00301018]➎\n\n00100691  MOV    dword ptr [RDX + RAX*1]=>DAT_00301018,40➏\n\n          ...\n```", "```\n        DAT_00301018\n\n00301018      ??       ??\n\n00301019      ??       ??\n\n0030101a      ??       ??\n\n0030101b      ??       ??\n\n        DAT_0030101c\n\n0030101c      ??       ??\n\n0030101d      ??       ??\n\n0030101e      ??       ??\n\n0030101f      ??       ??\n\n DAT_00301020\n\n00301020      ??       ??\n\n00301021      ??       ??\n\n00301022      ??       ??\n\n00301023      ??       ??\n```", "```\n00100660  MOV    dword ptr [INT_ARRAY_00301018],10\n\n0010066a  MOV    dword ptr [INT_ARRAY_00301018[1]],20\n\n00100674  MOV    dword ptr [INT_ARRAY_00301018[2]],30\n```", "```\nint main(int argc, char **argv) {\n\n   int stack_array[3];\n\n   int idx = atoi(argv[1]); //bounds check omitted for simplicity\n\n   stack_array[0] = 10;\n\n   stack_array[1] = 20;\n\n   stack_array[2] = 30;\n\n   stack_array[idx] = 40;\n\n}\n```", "```\n     undefined main()\n\n        undefined     AL:1           <RETURN>\n\n        undefined4    Stack[-0xc]:4  local_c➊\n\n        undefined4    Stack[-0x10]:4 local_10\n\n        undefined4    Stack[-0x14]:4 local_14\n\n        undefined4    Stack[-0x18]:4 local_18\n\n        undefined4    Stack[-0x1c]:4 local_1c\n\n        undefined8    Stack[-0x28]:8 local_28\n\n0010063a  PUSH   RBP\n\n0010063b  MOV    RBP,RSP\n\n0010063e  SUB    RSP,0x20\n\n00100642  MOV➋  dword ptr [RBP + local_1c],EDI\n\n00100645  MOV    qword ptr [RBP + local_28],RSI\n\n00100649  MOV    RAX,qword ptr [RBP + local_28]\n\n0010064d  ADD    RAX,0x8\n\n00100651  MOV    RAX,qword ptr [RAX]\n\n00100654  MOV    RDI,RAX\n\n00100657  MOV    EAX,0x0\n\n0010065c  CALL   atoi\n\n00100661  MOV➌  dword ptr [RBP + local_c],EAX\n\n00100664  MOV➍  dword ptr [RBP + local_18],10\n\n0010066b  MOV    dword ptr [RBP + local_14],20\n\n00100672  MOV    dword ptr [RBP + local_10],30\n\n00100679  MOV    EAX,dword ptr [RBP + local_c]\n\n0010067c  CDQE\n\n0010067e  MOV    dword ptr [RBP + RAX*0x4 + -0x10],40➎\n\n00100686  MOV    EAX,0x0\n\n0010068b  LEAVE\n\n0010068c  RET\n```", "```\n          ...\n\n00100664  MOV    dword ptr [RBP + local_18[0]],10\n\n0010066b  MOV    dword ptr [RBP + local_18[1]],20\n\n00100672  MOV    dword ptr [RBP + local_18[2]],30\n\n          ...\n```", "```\nint main(int argc, char **argv) {\n\n   int *heap_array = (int*)malloc(3 * sizeof(int));\n\n   int idx = atoi(argv[1]); //bounds check omitted for simplicity\n\n   heap_array[0] = 10;\n\n   heap_array[1] = 20;\n\n   heap_array[2] = 30;\n\n   heap_array[idx] = 40;\n\n}\n```", "```\n     undefined main()\n\n        undefined     AL:1              <RETURN>\n\n        undefined8    Stack[-0x10]:8    heap_array\n\n        undefined4    Stack[-0x14]:4    local_14\n\n        undefined4    Stack[-0x1c]:4    local_1c\n\n        undefined8    Stack[-0x28]:8    local_28\n\n0010068a  PUSH   RBP\n\n0010068b  MOV    RBP,RSP\n\n0010068e  SUB    RSP,0x20\n\n 00100692  MOV    dword ptr [RBP + local_1c],EDI\n\n00100695  MOV    qword ptr [RBP + local_28],RSI\n\n00100699  MOV    EDI,0xc➊\n\n0010069e  CALL    malloc\n\n001006a3  MOV    qword ptr [RBP + heap_array],RAX➋\n\n001006a7  MOV    RAX,qword ptr [RBP + local_28]\n\n001006ab  ADD    RAX,0x8\n\n001006af  MOV    RAX,qword ptr [RAX]\n\n001006b2  MOV    RDI,RAX\n\n001006b5  CALL    atoi\n\n001006ba  MOV    dword ptr [RBP + local_14],EAX\n\n001006bd  MOV    RAX,qword ptr [RBP + heap_array]\n\n001006c1  MOV    dword ptr [RAX],10➌\n\n001006c7  MOV    RAX,qword ptr [RBP + heap_array]\n\n001006cb  ADD    RAX,0x4➍\n\n001006cf  MOV    dword ptr [RAX],20\n\n001006d5  MOV    RAX,qword ptr [RBP + heap_array]\n\n001006d9  ADD    RAX,0x8➎\n\n001006dd  MOV    dword ptr [RAX],30\n\n001006e3  MOV    EAX,dword ptr [RBP + local_14]\n\n001006e6  CDQE\n\n001006e8  LEA    RDX,[RAX*0x4]➏\n\n001006f0  MOV    RAX,qword ptr [RBP + heap_array]\n\n001006f4  ADD➐  RAX,RDX\n\n001006f7  MOV    dword ptr [RAX],40\n\n001006fd  MOV    EAX,0x0\n\n00100702  LEAVE\n\n00100703  RET\n```", "```\nstruct ch8_struct {     //Size  Minimum offset  Default offset\n\n    int    field1;      //  4       0            0\n\n    short  field2;      //  2       4            4\n\n    char   field3;      //  1       6            6\n\n    int    field4;      //  4       7            8\n\n    double field5;      //  8       11           16\n\n};                      // Minimum total size: 19 Default size: 24\n```", "```\nstruct ch8_struct global_struct;\n\nint main() {\n\n    global_struct.field1 = 10;\n\n    global_struct.field2 = 20;\n\n    global_struct.field3 = 30;\n\n    global_struct.field4 = 40;\n\n    global_struct.field5 = 50.0;\n\n}\n```", "```\n     undefined main()\n\n        undefined     AL:1              <RETURN>\n\n001005fa  PUSH   RBP\n\n001005fb  MOV    RBP,RSP\n\n001005fe  MOV    dword ptr [DAT_00301020],10\n\n00100608  MOV    word ptr [DAT_00301024],20\n\n00100611  MOV    byte ptr [DAT_00301026],30\n\n00100618  MOV    dword ptr [DAT_00301028],40\n\n00100622  MOVSD  XMM0,qword ptr [DAT_001006c8]\n\n0010062a  MOVSD  qword ptr [DAT_00301030],XMM0\n\n00100632  MOV    EAX,0x0\n\n00100637  POP    RBP\n\n00100638  RET\n```", "```\n     undefined main()\n\n        undefined     AL:1              <RETURN>\n\n        undefined8    Stack[-0x18]:8    local_18\n\n        undefined4    Stack[-0x20]:4    local_20\n\n        undefined1    Stack[-0x22]:1    local_22\n\n        undefined2    Stack[-0x24]:2    local_24\n\n        undefined4    Stack[-0x28]:4    local_28\n\n001005fa  PUSH   RBP\n\n001005fb  MOV    RBP,RSP\n\n001005fe  MOV    dword ptr [RBP + local_28],10\n\n00100605  MOV    word ptr [RBP + local_24],20\n\n0010060b  MOV    byte ptr [RBP + local_22],30\n\n0010060f  MOV    dword ptr [RBP + local_20],40\n\n00100616  MOVSD  XMM0,qword ptr [DAT_001006b8]\n\n0010061e  MOVSD  qword ptr [RBP + local_18],XMM0\n\n00100623  MOV    EAX,0x0\n\n00100628  POP    RBP\n\n00100629  RET\n```", "```\nint main() {\n\n    struct ch8_struct *heap_struct;\n\n    heap_struct = (struct ch8_struct*)malloc(sizeof(struct ch8_struct));\n\n    heap_struct->field1 = 10;\n\n    heap_struct->field2 = 20;\n\n    heap_struct->field3 = 30;\n\n    heap_struct->field4 = 40;\n\n    heap_struct->field5 = 50.0;\n\n}\n```", "```\n     undefined main()\n\n        undefined     AL:1              <RETURN>\n\n        undefined8    Stack[-0x10]:8    heap_struct\n\n0010064a  PUSH   RBP\n\n0010064b  MOV    RBP,RSP\n\n0010064e  SUB    RSP,16\n\n00100652  MOV    EDI,24➊\n\n00100657  CALL   malloc\n\n0010065c  MOV    qword ptr [RBP + heap_struct],RAX\n\n00100660  MOV    RAX,qword ptr [RBP + heap_struct]\n\n00100664  MOV    dword ptr [RAX],10➋\n\n0010066a  MOV    RAX,qword ptr [RBP + heap_struct]\n\n0010066e  MOV    word ptr [RAX + 4],20➌\n\n00100674  MOV    RAX,qword ptr [RBP + heap_struct]\n\n00100678  MOV    byte ptr [RAX + 6],30➍\n\n0010067c  MOV    RAX,qword ptr [RBP + heap_struct]\n\n00100680  MOV    dword ptr [RAX + 8],40➎\n\n00100687  MOV    RAX,qword ptr [RBP + heap_struct]\n\n0010068b  MOVSD  XMM0,qword ptr [DAT_00100728]\n\n00100693  MOVSD  qword ptr [RAX + 16],XMM0➏\n\n00100698  MOV    EAX,0x0\n\n0010069d  LEAVE\n\n0010069e  RET\n```", "```\n0010064a  PUSH    RBP\n\n0010064e  SUB    RSP,16\n\n00100652  MOV    EDI,19\n\n00100657  CALL   malloc\n\n0010065c  MOV    qword ptr [RBP + local_10],RAX\n\n00100660  MOV    RAX,qword ptr [RBP + local_10]\n\n00100664  MOV    dword ptr [RAX],10\n\n0010066a  MOV    RAX,qword ptr [RBP + local_10]\n\n0010066e  MOV    word ptr [RAX + 4],20\n\n00100674  MOV    RAX,qword ptr [RBP + local_10]\n\n00100678  MOV    byte ptr [RAX + 6],30\n\n0010067c  MOV    RAX,qword ptr [RBP + local_10]\n\n00100680  MOV    dword ptr [RAX + 7],40\n\n00100687  MOV    RAX,qword ptr [RBP + local_10]\n\n0010068b  MOVSD  XMM0,qword ptr [DAT_00100728] =\n\n00100693  MOVSD  qword ptr [RAX + 11],XMM0\n\n00100698  MOV    EAX,0x0\n\n0010069d  LEAVE\n\n0010069e  RET\n```", "```\nint main() {\n\n    int idx = 1;\n\n    struct ch8_struct *heap_struct;\n\n heap_struct = (struct ch8_struct*)malloc(sizeof(struct ch8_struct) * 5);\n\n    heap_struct[idx].field1 = 10;\n\n}\n```", "```\n     undefined main()\n\n        undefined     AL:1              <RETURN>\n\n        undefined4    Stack[-0xc]:4     idx\n\n        undefined4    Stack[-0x18]:8    heap_struct\n\n0010064a  PUSH   RBP\n\n0010064b  MOV    RBP,RSP\n\n0010064e  SUB    RSP,16\n\n00100652  MOV    dword ptr [RBP + idx],1\n\n00100659  MOV➊  EDI,120\n\n0010065e  CALL   malloc\n\n00100663  MOV    qword ptr [RBP + heap_struct],RAX\n\n00100667  MOV    EAX,dword ptr [RBP + idx]\n\n0010066a  MOVSXD RDX,EAX\n\n0010066d  MOV➋  RAX,RDX\n\n00100670  ADD    RAX,RAX\n\n00100673  ADD    RAX,RDX\n\n00100676  SHL➌  RAX,3\n\n0010067a  MOV    RDX,RAX\n\n0010067d  MOV    RAX,qword ptr [RBP + heap_struct]\n\n00100681  ADD➍  RAX,RDX\n\n00100684  MOV➎  dword ptr [RAX],10\n\n0010068a  MOV    EAX,0\n\n0010068f  LEAVE\n\n00100690  RET\n```", "```\n001005fa  PUSH   RBP\n\n001005fb  MOV    RBP,RSP\n\n001005fe  MOV    dword ptr [DAT_00301020],10\n\n00100608  MOV    word ptr [DAT_00301024],20\n\n00100611  MOV    byte ptr [DAT_00301026],30\n\n00100618  MOV    dword ptr [DAT_00301028],40\n\n00100622  MOVSD  XMM0,qword ptr [DAT_001006c8]\n\n0010062a  MOVSD  qword ptr [DAT_00301030],XMM0\n\n00100632  MOV    EAX,0\n\n00100637  POP    RBP\n\n00100638  RET\n```", "```\n00401035  POP    EBP\n\n001005fb  MOV    RBP,RSP\n\n001005fe  MOV    dword ptr [ch8_struct_00301020],10\n\n00100608  MOV    word ptr [ch8_struct_00301020.field_0x4],20\n\n00100611  MOV    byte ptr [ch8_struct_00301020.field_0x6],30\n\n00100618  MOV    dword ptr [ch8_struct_00301020.field_0x8],40\n\n00100622  MOVSD  XMM0,qword ptr [DAT_001006c8]\n\n0010062a  MOVSD  qword ptr [ch8_struct_00301020.field_0x10],XMM0\n\n00100632  MOV    EAX,0\n\n00100637  POP    RBP\n\n00100638  RET\n```", "```\n     undefined get_page(undefined4 param_1, undefined param_2...\n\n        undefined     AL:1              <RETURN>\n\n        undefined4    Stack[0x4]:4      param_1\n\n        undefined     Stack[0x8]:1      param_2\n\n        undefined4    Stack[0xc]:4      param_3\n```", "```\niVar1=connect(local_14,*(sockaddr **)(param_3+20),*(socklen_t*)(param_3+16));\n```", "```\niVar1 = connect(local_14, param_3->ai_addr, param_3->ai_addrlen);\n```", "```\n// object1, object2, and *p_obj are all the same type.\n\nobject1.member_func();\n\nobject2.member_func();\n\np_obj->member_func();\n```", "```\nclass BaseClass {\n\n    public:\n\n        BaseClass();\n\n     ➊ virtual void vfunc1() = 0➋;\n\n        virtual void vfunc2();\n\n        virtual void vfunc3();\n\n        virtual void vfunc4();\n\n    private:\n\n        int x;\n\n        int y;\n\n};\n\nclass SubClass : public BaseClass➌ {\n\n    public:\n\n        SubClass();\n\n     ➍ virtual void vfunc1();\n\n        virtual void vfunc3();\n\n        virtual void vfunc5();\n\n    private:\n\n        int z;\n\n};\n```", "```\nvoid call_vfunc(BaseClass *bc) {\n\n    bc->vfunc3();\n\n}\n\nint main() {\n\n    BaseClass *bc = new Subclass();\n\n    call_vfunc(bc);\n\n}\n```", "```\n     undefined __cdecl call_vfunc(int * bc)\n\n        undefined     AL:1              <RETURN>\n\n        int *         Stack[0x4]:4      bc\n\n004010a0  PUSH   EBP\n\n004010a1  MOV    EBP,ESP\n\n004010a3  MOV    EAX,dword ptr [EBP + bc]\n\n004010a6  MOV➊  EDX,dword ptr [EAX]\n\n004010a8  MOV➋  ECX,dword ptr [EBP + bc]\n\n004010ab  MOV➌  EAX,dword ptr [EDX + 8]\n\n004010ae  CALL➍ EAX\n\n004010b0  POP    EBP\n\n004010b1  RET\n```", "```\n  class abstract_class {\n\n      public:\n\n          virtual int vfunc() = 0;\n\n  };\n\n    class concrete_class : public abstract_class {\n\n      public:\n\n          concrete_class(){};\n\n          int vfunc();\n\n  };\n\n  int concrete_class::vfunc() {return 0;}\n\n➊ void print_type(abstract_class *p) {\n\n      cout << typeid(*p).name() << endl;\n\n  }\n\n  int main() {\n\n      abstract_class *sc = new concrete_class();➋\n\n      print_type(sc);\n\n  }\n```"]