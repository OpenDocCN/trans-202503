["```\n<?php\nnamespace Mattsmithdev;\n\nclass ProductRepository\n{\n    private ?\\PDO $connection = NULL;\n\n    public function __construct()\n    {\n        $db = new Database();\n        $this->connection = $db->getConnection();\n    }\n\n    public function findAll(): array\n    {\n        if (NULL == $this->connection) return [];\n\n        $sql = 'SELECT * FROM product';\n        $stmt = $this->connection->prepare($sql);\n        $stmt->execute();\n        $stmt->setFetchMode(\\PDO::FETCH_CLASS, 'Mattsmithdev\\\\Product');\n        $products = $stmt->fetchAll();\n\n        return $products;\n    }\n\n    public function find(int $id): ?Product\n    {\n        if (NULL == $this->connection) return NULL;\n\n        $sql = 'SELECT * FROM product WHERE id = :id';\n        $stmt = $this->connection->prepare($sql);\n\n        $stmt->bindParam(':id', $id);\n        $stmt->execute();\n\n        $stmt->setFetchMode(\\PDO::FETCH_CLASS, 'Mattsmithdev\\\\Product');\n        $product = $stmt->fetch();\n\n        return $product;\n    }\n\n    --snip--\n\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Mattsmithdev\\PdoCrudRepo\\DatabaseTableRepository;\n\nclass ProductRepository extends DatabaseTableRepository\n{\n}\n```", "```\n$ **composer require mattsmithdev/pdo-crud-for-free-repositories**\n```", "```\nMYSQL_USER=root\nMYSQL_PASSWORD=password\nMYSQL_HOST=127.0.0.1\nMYSQL_PORT=3306\nMYSQL_DATABASE=demo1\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Mattsmithdev\\PdoCrudRepo\\DatabaseTableRepository;\n\nclass ProductRepository extends DatabaseTableRepository\n{\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass ProductController extends Controller\n{\n private ProductRepository $productRepository;\n\n    --snip--\n\n public function processCreate(string $description, float $price): void\n {\n        $product = new Product();\n        $product->setDescription($description);\n        $product->setPrice($price);\n\n      ❶ $newObjectId = $this->productRepository->insert($product);\n\n $_SESSION['id'] = $newObjectId;\n\n $location = '/?action=products';\n header(\"Location: $location\");\n }\n\n    --snip--\n\n public function processEdit(int $id, string $description,\n float $price): void\n {\n      ❷ $product = $this->productRepository->find($id);\n        $product->setDescription($description);\n        $product->setPrice($price);\n\n        $this->productRepository->update($product);\n\n $_SESSION['id'] = $id;\n\n $location = '/?action=products';\n header(\"Location: $location\");\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass User\n{\n    private int $id;\n    private string $username;\n    private string $password;\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function setId(int $id): void\n    {\n        $this->id = $id;\n    }\n\n    public function getUsername(): string\n    {\n        return $this->username;\n    }\n\n public function setUsername(string $username): void\n    {\n        $this->username = $username;\n    }\n\n    public function getPassword(): string\n    {\n        return $this->password;\n    }\n\n    public function setPassword(string $password): void\n    {\n        $this->password = $password;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Mattsmithdev\\PdoCrudRepo\\DatabaseTableRepository;\n\nclass UserRepository extends DatabaseTableRepository\n{\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass UserController extends Controller\n{\n    private UserRepository $userRepository;\n\n public function __construct()\n    {\n        parent::__construct();\n        $this->userRepository = new UserRepository();\n    }\n\n    public function list(): void\n    {\n      ❶ $users = $this->userRepository->findAll();\n\n        $template = 'user/list.xhtml.twig';\n        $args = [\n            'users' => $users,\n        ];\n        print $this->twig->render($template, $args);\n    }\n}\n```", "```\n<!doctype html>\n<html lang=\"en\">\n--snip--\n<body class=\"container\">\n\n<ul class=\"nav nav-pills\">\n <li class=\"nav-item\">\n <a class=\"nav-link {% block homeLink %}{% endblock %}\"\n href=\"/\">Home page</a>\n </li>\n <li class=\"nav-item\">\n <a class=\"nav-link {% block productLink %}{% endblock %}\"\n href=\"/?action=products\">Product List page</a>\n </li>\n    <li class=\"nav-item\">\n        <a class=\"nav-link {% block userLink %}{% endblock %}\"\n            href=\"/?action=users\">User List page</a>\n    </li>\n</ul>\n\n{% block body %}\n{% endblock %}\n</body></html>\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}User List page{% endblock %}\n\n❶ {% block userLink %}active{% endblock %}\n\n{% block body %}\n    <h1>User List page</h1>\n\n    <ul>\n      ❷ {% for user in users %}\n        <li class=\"mt-5\">\n            id: {{user.id}}\n            <br>\n            username: {{  user.username}}\n            <br>\n            password: {{  user.password}}\n        </li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n private DefaultController $defaultController;\n private ProductController $productController;\n    private UserController $userController;\n\n public function __construct()\n {\n $this->defaultController = new DefaultController();\n $this->productController = new ProductController();\n        $this->userController = new UserController();\n }\n\n public function run(): void\n {\n $action = filter_input(INPUT_GET, 'action');\n $isPostSubmission = ($_SERVER['REQUEST_METHOD'] === 'POST');\n\n switch ($action)\n {\n case 'products':\n $this->productController->list();\n break;\n\n            case 'users':\n                $this->userController->list();\n                break;\n\n            --snip--\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Mattsmithdev\\User;\nuse Mattsmithdev\\UserRepository;\n\n$userRepository = new UserRepository();\n\n❶ $userRepository->resetTable();\n\n$user1 = new User();\n$user1->setUsername('matt');\n$user1->setPassword('password1');\n$userRepository->insert($user1);\n\n$user2 = new User();\n$user2->setUsername('john');\n$user2->setPassword('password2');\n$userRepository->insert($user2);\n\n$users = $userRepository->findAll();\nprint '<pre>';\nvar_dump($users);\nprint '</pre>';\n```", "```\n$ **php db/setup_users.php**\n<pre>array(2) {\n  [0]=>  object(Mattsmithdev\\User)#8 (3) {\n    [\"id\":\"Mattsmithdev\\User\":private]=> int(1)\n    [\"username\":\"Mattsmithdev\\User\":private]=> string(4) \"matt\"\n    [\"password\":\"Mattsmithdev\\User\":private]=> string(9) \"password1\"\n  }\n  [1]=>  object(Mattsmithdev\\User)#9 (3) {\n    [\"id\":\"Mattsmithdev\\User\":private]=> int(2)\n    [\"username\":\"Mattsmithdev\\User\":private]=> string(4) \"john\"\n    [\"password\":\"Mattsmithdev\\User\":private]=> string(9) \"password2\"\n  }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass User\n{\n private int $id;\n private string $username;\n private string $password;\n\n    --snip--\n\n public function setPassword(string $password): void\n {\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n        $this->password = $hashedPassword;\n }\n}\n```", "```\n$ **php db/setup_users.php**\n<pre>array(2) {\n [0]=>  object(Mattsmithdev\\User)#8 (3) {\n [\"id\":\"Mattsmithdev\\User\":private]=> int(1)\n [\"username\":\"Mattsmithdev\\User\":private]=> string(4) \"matt\"\n [\"password\":\"Mattsmithdev\\User\":private]=> string(60)\n    \"$2y$10$k25neEiR.2k8j4gM7Gn6aeiHK8T7ZNgS18QUVsTdm592fGfN23SZG\"\n }\n [1]=>  object(Mattsmithdev\\User)#9 (3) {\n [\"id\":\"Mattsmithdev\\User\":private]=> int(2)\n [\"username\":\"Mattsmithdev\\User\":private]=> string(4) \"john\"\n [\"password\":\"Mattsmithdev\\User\":private]=> string(60)\n    \"$2y$10$telY8TmtAD7a/niym3/W5OvlKIFbu.CYOfrX0u3yRKdPEyD1V6KRi\"\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    --snip--\n\n public function run(): void\n {\n $action = filter_input(INPUT_GET, 'action');\n $isPostSubmission = ($_SERVER['REQUEST_METHOD'] === 'POST');\n\n switch ($action)\n {\n            case 'login':\n                $this->userController->loginForm(); ❶\n                break;\n\n            case 'processLogin':\n                $username = filter_input(INPUT_POST, 'username');\n                $password = filter_input(INPUT_POST, 'password');\n                if (empty($username) || empty($password)) {❷\n                    $this->defaultController->error(\n                        'error - you must enter both a username and a password to login');\n                } else {\n                    $this->userController->processLogin($username, $password); ❸\n                }\n                break;\n--snip--\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass UserController extends Controller\n{\n--snip--\n\n    public function loginForm(): void\n    {\n        $template = 'user/login.xhtml.twig';\n        $args = [];\n        print $this->twig->render($template, $args);\n    }\n\n    public function processLogin(string $username, string $password): void\n    {\n      ❶ $loginSuccess = $this->isValidUsernamePassword($username, $password);\n        if ($loginSuccess) {\n            print 'success - username and password found in database';\n        } else {\n            print 'sorry - there was an error with your username/password';\n        }\n    }\n\n    private function isValidUsernamePassword($username, $password): bool\n    {\n      ❷ $user = $this->userRepository->findOneByUsername($username);\n\n        // False if no user for username\n        if ($user == NULL) {\n            return false;\n        }\n\n        // See if entered password matches stored (hashed) one\n      ❸ return password_verify($password, $user->getPassword());\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Mattsmithdev\\PdoCrudRepo\\DatabaseTableRepository;\n\nclass UserRepository extends DatabaseTableRepository\n{\n    public function findOneByUsername(string $username): ?User\n    {\n        $users = $this->searchByColumn('username', $username);\n\n        if (count($users) != 1) {\n            return NULL;\n        }\n\n        return $users[0];\n    }\n}\n```", "```\n<!doctype html>\n<html lang=\"en\">\n--snip--\n<body class=\"container\">\n\n<ul class=\"nav nav-pills\">\n --snip--\n    <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/?action=login\">Login</a>\n    </li>\n</ul>\n\n{% block body %}\n{% endblock %}\n</body></html>\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}login page{% endblock %}\n\n{% block body %}\n    <h1>Login</h1>\n\n    <form method=\"POST\" action=\"/?action=processLogin\">\n        <p>\n            Username:\n            <input name=\"username\">\n        </p>\n        <p>\n            Password:\n          ❶ <input name=\"password\" type=\"password\">\n        </p>\n        <input type=\"submit\">\n    </form>\n{% endblock %}\n```", "```\n$ **composer remove mattsmithdev/pdo-crud-for-free-repositories**\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass ProductRepository\n{\n}\n```", "```\n$ **composer require doctrine/orm**\n$ **composer require symfony/cache**\n$ **composer require symfony/dotenv**\n```", "```\n<?php\nrequire_once \"vendor/autoload.php\";\n\nuse Doctrine\\DBAL\\DriverManager;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\ORMSetup;\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\n❶ $dotenv = new Dotenv();\n$dotenv->load(__DIR__ . '/.env');\n\n// Get Doctrine to create DB connection\n$connectionParams = [\n    'dbname' => $_ENV['MYSQL_DATABASE'],\n    'user' => $_ENV['MYSQL_USER'],\n    'password' => $_ENV['MYSQL_PASSWORD'],\n    'host' => $_ENV['MYSQL_HOST'],\n    'driver' => 'pdo_mysql',\n];\n\n$config = ORMSetup::createAttributeMetadataConfiguration(\n    paths: [__DIR__.'/src'],\n isDevMode: true,\n);\n❷ $connection = DriverManager::getConnection($connectionParams, $config);\n❸ $entityManager = new EntityManager($connection, $config);\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../bootstrap.php';\n\n$sql = 'SELECT * FROM product';\n$stmt = $connection->executeQuery($sql);\n$result = $stmt->fetchAllAssociative();\n\n// Print results\nforeach ($result as $row) {\n    print \"ID: {$row['id']}, Description: {$row['description']}\\n\";\n}\n```", "```\nID: 1, Description: bag of nails\nID: 2, Description: bucket\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Symfony\\Component\\Dotenv\\Dotenv;\nuse Doctrine\\DBAL\\DriverManager;\n\n$dotenv = new Dotenv(); ❶\n$dotenv->load(__DIR__ . '/../.env');\n\n$connectionParams = [\n    'user' => $_ENV['MYSQL_USER'],\n    'password' => $_ENV['MYSQL_PASSWORD'],\n    'host' => \"{$_ENV['MYSQL_HOST']}:{$_ENV['MYSQL_PORT']}\",\n    'driver' => 'pdo_mysql',\n];\n\ntry {\n    // Get connection\n    $connection = DriverManager::getConnection($connectionParams); ❷\n\n    $databaseNames = $connection->createSchemaManager()->listDatabases();\n    $databaseExists = array_search($_ENV['MYSQL_DATABASE'], $databaseNames); ❸\n    // Drop database if exists already\n    if ($databaseExists) {\n        $connection->createSchemaManager()->dropDatabase($_ENV['MYSQL_DATABASE']);\n    }\n\n    // Create database\n    $connection->createSchemaManager()->createDatabase($_ENV['MYSQL_DATABASE']); ❹\n\n    print \"succeeded in (re)creating database: {$_ENV['MYSQL_DATABASE']}\\n\";\n} catch (Exception $e) {❺\n    print \"there was a problem creating the database: $e\";\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../bootstrap.php';\n\nuse Doctrine\\ORM\\Tools\\Console\\ConsoleRunner;\nuse Doctrine\\ORM\\Tools\\Console\\EntityManagerProvider\\SingleManagerProvider;\n\nConsoleRunner::run(new SingleManagerProvider($entityManager), []);\n```", "```\n$ **php bin/doctrine orm:schema-tool:create**\n[OK] No Metadata Classes to process.\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n❶ #[ORM\\Entity]\n#[ORM\\Table(name: 'product')]\nclass Product\n{\n❷#[ORM\\Id]\n    #[ORM\\Column(type: 'integer')]\n    #[ORM\\GeneratedValue]\n private ?int $id;\n\n#[ORM\\Column(type: 'string')]\n private string $description;\n\n#[ORM\\Column()]\n private float $price;\n\n    --snip--\n}\n```", "```\n$ **php bin/doctrine orm:schema-tool:create --dump-sql**\nCREATE TABLE product (id INT AUTO_INCREMENT NOT NULL, description VARCHAR(255)\nNOT NULL, price DOUBLE PRECISION NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER\nSET utf8 COLLATE `utf8_unicode_ci` ENGINE = InnoDB;\n```", "```\n$ **php bin/doctrine orm:schema-tool:create**\n! [CAUTION] This operation should not be executed in a production environment!\nCreating database schema...\n[OK] Database schema created successfully!\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../bootstrap.php';\n\nuse Mattsmithdev\\Product;\n\n❶ $product1 = new Product();\n$product1->setDescription(\"small hammer\");\n$product1->setPrice(4.50);\n\n$entityManager->persist($product1);\n$entityManager->flush();\n\n// Retrieve products from Database\n❷ $productRepository = $entityManager->getRepository(Product::class);\n$products = $productRepository->findAll();\nforeach ($products as $product) {\n    print \"Product OBJECT = ID: {$product->getId()}, \"\n        . \"Description: {$product->getDescription()}\\n\";\n}\n```", "```\nProduct OBJECT = ID: 1, Description: small hammer\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Doctrine\\ORM\\EntityManager;\n\nclass OrmHelper\n{\n    private static EntityManager $entityManager;\n\n    public static function getEntityManager(): EntityManager\n    {\n        return self::$entityManager;\n    }\n\n    public static function setEntityManager(\n        EntityManager $entityManager): void\n    {\n        self::$entityManager = $entityManager;\n    }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n❶ require_once __DIR__ . '/../bootstrap.php';\n\nsession_start();\n\nuse Mattsmithdev\\Application;\n❷ use Mattsmithdev\\OrmHelper;\n\nOrmHelper::setEntityManager($entityManager);\n\n$app = new Application();\n$app->run();\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\EntityRepository;\nuse Mattsmithdev\\Product;\n\nclass ProductRepository extends EntityRepository\n{\n    private EntityManager $entityManager;\n\n    public function __construct()\n    {\n      ❶ $this->entityManager = OrmHelper::getEntityManager();\n        $entityClass = Product::class;\n        $entityMetadata = $this->entityManager->\n            getClassMetadata($entityClass);\n      ❷ parent::__construct($this->entityManager, $entityMetadata);\n    }\n\n    public function insert(Product $product): int\n    {\n        $this->entityManager->persist($product);\n        $this->entityManager->flush();\n\n        return $product->getId();\n    }\n\n    public function update(Product $product): void\n    {\n        $this->entityManager->persist($product);\n        $this->entityManager->flush();\n }\n\n public function delete(int $id): void\n    {\n        $product = $this->find($id);\n        $this->entityManager->remove($product);\n        $this->entityManager->flush();\n    }\n\n    public function deleteAll(): void\n    {\n        $products = $this->findAll();\n        foreach ($products as $product) {\n            $this->entityManager->remove($product);\n        }\n        $this->entityManager->flush();\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\n❶ #[ORM\\Table(name: 'category')]\nclass Category\n{\n    #[ORM\\Id]\n    #[ORM\\Column(type: 'integer')]\n  ❷ #[ORM\\GeneratedValue]\n    private ?int $id;\n\n    #[ORM\\Column(type: 'string')]\n    private string $name;\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function setId(?int $id): void\n    {\n        $this->id = $id;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\n#[ORM\\Table(name: 'product')]\nclass Product\n{\n #[ORM\\Id]\n #[ORM\\Column(type: 'integer')]\n #[ORM\\GeneratedValue]\n private ?int $id;\n\n #[ORM\\Column(type: 'string')]\n private string $description;\n\n #[ORM\\Column()]\n private float $price;\n\n❶#[ORM\\ManyToOne(targetEntity: Category::class)]\n    private Category|NULL $category = NULL;\n\n    public function getCategory(): ?Category\n    {\n        return $this->category;\n    }\n\n    public function setCategory(?Category $category): void\n    {\n        $this->category = $category;\n    }\n    --snip--\n}\n```", "```\n$ **php bin/doctrine orm:schema-tool:drop --force**\n[OK] Database schema dropped successfully!\n```", "```\n$ **php bin/doctrine orm:schema-tool:create --dump-sql**\nCREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255)\nNOT NULL, PRIMARY KEY(id))\n--snip--\nCREATE TABLE product (id INT AUTO_INCREMENT NOT NULL, category_id INT DEFAULT\nNULL, description VARCHAR(255) NOT NULL, price DOUBLE PRECISION NOT NULL,\nINDEX IDX_1x (category_id), PRIMARY KEY(id))\n--snip--\nALTER TABLE product ADD CONSTRAINT FK_1x FOREIGN KEY (category_id) REFERENCES\ncategory (id);\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../bootstrap.php';\n\nuse Mattsmithdev\\ProductRepository;\nuse Mattsmithdev\\OrmHelper;\n\nOrmHelper::setEntityManager($entityManager);\n\n// -- Create 2 categories ---\n$category1 = new \\Mattsmithdev\\Category();\n$category1->setName('HARDWARE');\n$entityManager->persist($category1);\n\n$category2 = new \\Mattsmithdev\\Category();\n$category2->setName('APPLIANCES');\n$entityManager->persist($category2);\n\n// Push category objects into DB\n❶ $entityManager->flush();\n\n// -- Create 2 products ---\n$productRepository = new ProductRepository();\n$productRepository->deleteAll();\n\n$product1 = new \\Mattsmithdev\\Product();\n$product1->setDescription(\"small hammer\");\n$product1->setPrice(4.50);\n$product1->setCategory($category1);\n$productRepository->insert($product1);\n\n$product2 = new \\Mattsmithdev\\Product();\n$product2->setDescription(\"fridge\");\n$product2->setPrice(200);\n$product2->setCategory($category2);\n$productRepository->insert($product2);\n\n// Retrieve products from Database\n❷ $products = $productRepository->findAll();\nif (empty($products)) {\n    print 'no products found in DB';\n} else {\n    foreach ($products as $product) {\n        print \"Product OBJECT = ID: {$product->getId()}, \"\n            . \"Description: {$product->getDescription()} // \"\n            . \"Category = {$product->getCategory()->getName()}\\n\";\n\n    }\n}\n```", "```\nProduct OBJECT = ID: 1, Description: small hammer // Category = HARDWARE\nProduct OBJECT = ID: 2, Description: fridge // Category = APPLIANCES\n```", "```\n$ **composer create-project mattsmithdev/pdo-repo-project demo1**\n```"]