- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xenophobic Security
  prefs: []
  type: TYPE_NORMAL
- en: If you accept strangers without much thought, the enemy shinobi may come in
    disguised as a stranger and seek information from the inside.
  prefs: []
  type: TYPE_NORMAL
- en: If beggars or outcasts come near the guardhouse, treat them in a rough way and
    clear them off.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '—Yoshimori Hyakushu #91'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore the concept of *xenophobic security*—or security
    based on a distrust of outsiders—and how it can be applied as a type of anti-privilege
    protection domain. To illustrate this idea, we’ll consider the hostile environment
    that shinobi had to navigate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shinobi trying to infiltrate villages and gather information in plain sight
    faced a ubiquitous challenge: the pervasive xenophobia of the medieval Japanese.
    The isolation of the country’s villages gave rise to unique dialects, hairstyles,
    clothing, and other customs that made each community its own social ecosystem.^([1](b01.xhtml#endnote-33))
    The small populations in these remote locales meant everyone usually knew everyone
    else and an outsider obviously did not fit in.^([2](b01.xhtml#endnote-34))'
  prefs: []
  type: TYPE_NORMAL
- en: As outsiders, the shinobi were routinely viewed with suspicion and followed.
    They could not move freely around town, and they were often prevented from renting
    rooms and purchasing food. Certainly, villagers would not share information with
    them. The community’s xenophobia reduced the shinobi to anti-privileged status.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Anti-Privilege
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To grasp the significance of anti-privilege, let’s first examine the concept
    of *privilege*, which in cybersecurity refers to the permissions a user has to
    perform actions, such as reading or deleting a file. Modern computer systems have
    a ringed architecture with different levels of privilege:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ring4** Default (unprivileged)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ring3** Normal user (least privileged)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ring2** Superuser (admin)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ring1** Root (elevated privilege)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ring0** Kernel (system)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, a common villager (least privileged) or a cat (unprivileged) may
    be able to leave the town any time they want. A village chief with elevated privilege
    has the additional permissions to lock the town gates at will. However, a foreigner
    suspected of mischief (anti-privilege) could have less permission than a stray
    cat (unprivileged) and therefore would not be allowed to leave the village.
  prefs: []
  type: TYPE_NORMAL
- en: This distinction between anti-privileged and unprivileged status is important.
    In some computer systems, actions such as logging out are considered unprivileged
    and are given by default to actors in all rings. Untrustworthy processes/users
    can use these default unprivileged capabilities to enable more malicious actions
    or operate somewhat freely to further more sophisticated goals. On the other hand,
    by denying an anti-privileged process from logging out, you may prevent it from
    clearing its session history or evidence of its existence in the first place.
    Consider if computer systems could adopt a ring5 (anti-privilege) security control.
    Using our village as an example, one could speculatively force a suspected shinobi
    to submit to searches and interrogation before being allowed to leave the village.
    In this way, the village could catch thieves and spies. Furthermore, by making
    infiltrators’ jobs that much more risky and expensive, villages undoubtedly deterred
    hostile activity.
  prefs: []
  type: TYPE_NORMAL
- en: To infiltrate such a xenophobic village, a shinobi first had to memorize and
    practice a range of culturally distinct disguises, becoming fluent in the style
    of dress, dialect, grooming techniques, monetary customs, and social mores unique
    to the location.
  prefs: []
  type: TYPE_NORMAL
- en: When the cultural disguise was mastered, the shinobi still needed to have a
    convincing reason to be in the village; usually this was job related. The *Ninpiden*
    describes how shinobi could appropriate a generic cover story, perhaps claiming
    to be a monk on a spiritual journey, a merchant, a beggar, or even a samurai traveling
    on orders from his lord. (Though also recognized by villagers as an outsider,
    a samurai did not incur the same level of distrust as a potential fugitive or
    bandit.)
  prefs: []
  type: TYPE_NORMAL
- en: While in disguise around people of the same job, class, or caste, shinobi were
    advised to demonstrate enough knowledge to appear believable in the profession
    but also to act dumb and in need of help to perform common tasks. Feigning ignorance
    served to deceive a target about the shinobi’s true intelligence while flattering
    the target’s own, causing them to lower their guard and offer information freely.
    The *Ninpiden* lists specific targets shinobi should attempt to win over with
    these tactics, such as local deputies, magistrates, doctors, monks, and others
    who may work in the presence of the local lord or authority. These targets typically
    had information valuable to the mission.^([3](b01.xhtml#endnote-35))
  prefs: []
  type: TYPE_NORMAL
- en: Note that the social hierarchies of the medieval Japanese village resemble the
    privilege ring structure in modern computer systems, or even the layered segmentation
    of computer networks in which the outside layers, like a DMZ, are the least trusted.
    Likewise, normal villagers (the least privileged) would be unable to interact
    with the lord who is at the center, or ring0\.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply the way shinobi identified likely targets to a cybersecurity context.
    Just as shinobi targeted those who were, metaphorically, closer to ring0 or who
    had access to ring0, so will modern threat actors target privileged classes of
    systems/users. Thus, defenders should consider what the computer equivalents of
    such high-status individuals as monks and magistrates are in their systems. Furthermore,
    you should consider what disguises a modern threat actor might use to approach
    the more privileged systems/users.
  prefs: []
  type: TYPE_NORMAL
- en: The Problem with Interoperability and Universal Standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whether they consciously think about it or not, *interoperability* is a top
    priority for technology consumers: people expect their devices, apps, systems,
    and software to work seamlessly with new and old versions and across different
    platforms, as well as interchangeably with other makes and models. The International
    Organization for Standardization (ISO), the International Electrotechnical Commission
    (IEC), the Internet Engineering Task Force (IETF), the Internet Society (ISOC),
    and other governing bodies have established widely agreed-upon standards for how
    technology is designed and should operate and integrate.'
  prefs: []
  type: TYPE_NORMAL
- en: These efforts have produced many of the ISO standards, Request for Comments
    (RFC), and other interoperability protocols that make computers more accessible,
    not to mention easier to build, manage, diagnose, repair, program, network, and
    run. A prime example is the Plug and Play (PnP) standard introduced in 1995, which
    directs a host system to detect and accept any foreign device plugged into it
    via USB, PCI, PCMCIA, PCIe, FireWire, Thunderbolt, or other means and then autoconfigure,
    load, install, and interface automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, when the goals are to establish functionality and maintain its
    operability, security is almost never a priority. In fact, the PnP standard—which
    facilitates the trust and acceptance of unfamiliar entities—was built to the exact
    opposite of the xenophobic security standard held by the medieval Japanese. For
    example, an unfamiliar system can connect to a network as an outsider and request
    an IP address from Dynamic Host Configuration Protocol (DHCP), ask for directions
    from the local router, query the authoritative DNS server for the names of other
    devices, and obtain local information from Address Resolution Protocol (ARP),
    Server Message Block (SMB), Web Proxy Auto Discovery (WPAD), and other protocols
    designed to ease the burden of compatibility. You plug the system into the network
    and it works, demonstrating behavior users expect and desire. However, the cybersecurity
    industry would benefit from being more “xenophobic” in its networking protocols.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate weaknesses resulting from PnP-like accessibility, security controls
    such as Network Access Control (NAC) and Group Policy Objects (GPO) have been
    introduced. On host systems, these technologies safeguard against potentially
    malicious foreign devices that physically connect to internal networks or systems.
  prefs: []
  type: TYPE_NORMAL
- en: NACs typically lock down the DHCP, assigning unrecognized computers to guest
    IP subnets or unprivileged VLANs. This allows foreign systems to connect to the
    internet for general access but segments them from the rest of the trusted network.
    Such behavior is especially desirable for conference rooms and lobbies so that
    external business partners and vendors can operate without exposing the network
    to threats.
  prefs: []
  type: TYPE_NORMAL
- en: GPO on local hosts enforces what types of devices—external hard drives, USBs,
    media readers, and the like—can be configured and installed on a system. GPO can
    even whitelist known applications within an organization while simultaneously
    blocking all unfamiliar software from downloading or installing on the host system.
  prefs: []
  type: TYPE_NORMAL
- en: However, these security controls are notable exceptions. From RJ45 Ethernet
    jacks using the EIA/TIA-561 and Yost standards to packet-based networking using
    the IEEE 802 standards—and everything in between—most technologies are built with
    transparent, widely known, default standards that ensure quick and easy use across
    foreign systems and networks, leaving them vulnerable to unauthorized rogue systems
    that may conduct network discovery, reconnaissance, sniffing, and communication.
  prefs: []
  type: TYPE_NORMAL
- en: Developing Unique Characteristics for Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having unique properties and characteristics in your IT inventory will help
    to distinguish your assets from rogue assets that may enter your environment and
    even protect your network from compromise. These characteristics are observable
    through inspection or analysis, but their use should not be publicly disclosed,
    as such disclosure would defeat the countermeasures. Most elements within modern
    IT systems and software are configurable, and such configuration changes effectively
    create a xenophobic IT model in your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Recently introduced commercial products that use a zero-trust model can help
    make your network or systems “xenophobic” to unfamiliar systems, software, and
    devices through a combination of technical protocols and distrust. Strict whitelists
    and authentication/authorization procedures can achieve similar results, but a
    proper solution would introduce a computer version of “dialects”—settings, customs,
    and other unique characteristics that deviate from universal computing standards.
    Systems or devices connecting to your internal network would need to be “indoctrinated”
    to the unique culture of your organization, while unindoctrinated servers, components,
    networking devices, and protocols would distrust or reject the unfamiliar foreign
    agent and alert the security team to its presence.
  prefs: []
  type: TYPE_NORMAL
- en: With some creativity and engineering, these cultural computer identifiers could
    be implemented at any layer of the Open Systems Interconnection (OSI) model (application,
    presentation, session, transport, networking, data link, physical) to identify
    network outsiders and provide an additional layer of defense against adversaries.
    Whether it’s transposing certain wires in hidden adapters of RJ45 jacks, expecting
    secret handshakes (SYN, SYN ACK, ACK-PUSH) at the TCP/IP level, or using reserved
    bits in the Ethernet header, a xenophobic solution should be modular, customizable,
    and unique per instance.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Security Controls and Mitigations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where relevant, the following recommendations are presented with an applicable
    security control from the NIST 800-53 standard. Each should be evaluated with
    the concept of xenophobic security in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inspect systems to determine whether their specifications or requirements deviate
    from the previously agreed-upon baseline configuration. [CM-2: Baseline Configuration]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Maintain documentation of all information systems in your organization so you
    can more readily identify foreign systems in your environment. [CM-8: Information
    System Inventory]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use encrypted information, embedded data, special data types, or metadata (for
    example, padding all packets to be a certain size) as special identifiers in communications
    so that filters can identify and restrict unfamiliar traffic. [AC-4: Information
    Flow Enforcement; SA-4: Acquisition Process]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restrict the implementation and knowledge of xenophobic identifiers to newly
    acquired systems and devices. [SA-4: Acquisition Process]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Embed xenophobic inspection as a security control for identifying and authenticating
    systems and devices in your organization. [IA-3: Device Identification and Authentication]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debrief
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter described the historically xenophobic environment for shinobi that
    required the investment of time and effort, as well as advanced techniques, to
    perform preparatory reconnaissance using open disguise tactics before actual target
    reconnaissance could begin. You learned the concept of anti-privilege and how
    to create unique internal characteristics to identify rogue assets or users in
    your environment. Now you may be able to identify key resources or people who
    are likely targets in your environment that you perhaps hadn’t considered as attack
    vectors from previous threat-modeling exercises, and you can then consider the
    systems or accounts that work closely with these potential targets.
  prefs: []
  type: TYPE_NORMAL
- en: However, by using the correct insignia, clothing, hairstyle, accent, and other
    characteristics, shinobi could evade the xenophobic inspections detailed in this
    chapter. Therefore, in the next chapter, we’ll explore the matched-pair security
    technique historically used by Japanese lords to detect shinobi who might otherwise
    infiltrate their fortification by using a disguise.
  prefs: []
  type: TYPE_NORMAL
