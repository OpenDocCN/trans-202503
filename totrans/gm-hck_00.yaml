- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A common misconception in the world of online gaming is the idea that the only
    game you can play is the one in the title. In fact, game hackers enjoy playing
    the game that hides behind the curtain: a cat-and-mouse game of wits between them
    and the game developers. While game hackers work to reverse engineer game binaries,
    automate aspects of game play, and modify gaming environments, game developers
    combat the hacker-designed tools (normally referred to as *bots*) using anti-reversing
    techniques, bot detection algorithms, and heuristic data mining.'
  prefs: []
  type: TYPE_NORMAL
- en: As the battle between game hackers and developers has progressed, the technical
    methods implemented by both parties—many of which resemble techniques utilized
    by malware developers and antivirus vendors—have evolved, becoming more complex.
    This book highlights the fight put up by game hackers, and the advanced methods
    they have engineered to manipulate games while simultaneously eluding game developers
    in the dark corners of their own software.
  prefs: []
  type: TYPE_NORMAL
- en: Although the book focuses on teaching you to develop tools that would likely
    be considered a nuisance or even malicious by gaming companies, you’ll find that
    many of the techniques are useful for development of tools that are perfectly
    benign and neutral. Furthermore, the knowledge of how these techniques are implemented
    is key for the game developers working to prevent their use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites for the Reader**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book does not aim to teach you software development, and therefore assumes
    that you have, at minimum, a solid software development background. This background
    should include familiarity with native Windows-based development, as well as light
    experience with game development and memory management. While these skills will
    be enough for you to follow this book, experience with x86 assembly and Windows
    internals will ensure that details of more advanced implementations are not lost
    on you.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, since all the advanced hacks discussed in this book rely on code
    injection, an ability to write code in a native language like C or C++ is a must.
    All of the example code in this book is written in C++ and can be compiled with
    Microsoft Visual C++ Express Edition. (You can download MSVC++ Express Edition
    from *[http://www.visualstudio.com/en-US/products/visual-studio-express-vs](http://www.visualstudio.com/en-US/products/visual-studio-express-vs)*.)
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Other languages that compile to native code, such as Delphi, are also capable
    of injection, but I will not discuss them in this book.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**A Brief Game Hacking History**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since the dawn of online PC gaming in the early 1980s, an ongoing war of wits
    between game hackers and game developers has been taking place. This seemingly
    endless struggle has prompted game developers to devote countless hours toward
    preventing hackers from taking their games apart and greasing between the gears.
    These hackers, who fight back with their sophisticated stealth implementations,
    have many motivations: customized graphics, better performance, ease of use, autonomous
    play, in-game asset acquisition, and, of course, real-life profit.'
  prefs: []
  type: TYPE_NORMAL
- en: The late 1990s and early 2000s were the golden age of game hacking, when online
    PC games became advanced enough to draw large crowds but were still simple enough
    to easily reverse engineer and manipulate. Online games that came out during this
    time, such as *Tibia* (January 1997), *Runescape* (January 2001), and *Ultima
    Online* (September 1997), were heavily targeted by bot developers. The developers
    of these games and others like them still struggle today to control the massive
    communities of bot developers and bot users. The game developers’ lack of action
    and the hackers’ tenacity have not only completely shattered the economies within
    the games, but have also produced a thriving for-profit industry focused around
    bot development and bot defense.
  prefs: []
  type: TYPE_NORMAL
- en: In the years since the golden age, more mature game companies started taking
    bot defense very seriously. These companies now have dedicated teams focused on
    developing bot prevention systems, and many also view bots as a legal matter and
    will not hesitate to banish players who use bots and sue the bot developers who
    provided them. As a result, many game hackers have been forced to develop advanced
    stealth techniques to keep their users safe.
  prefs: []
  type: TYPE_NORMAL
- en: This war wages on, and the numbers on both sides of the fight will continue
    to grow as online gaming becomes more prevalent over the coming years. Major game
    developers are pursuing hackers with endless determination, even slamming some
    game hacking giants with multimillion-dollar lawsuits. This means that game hackers
    who are serious about their business must either target smaller gaming companies,
    or anonymously market their products from the shadows in order to escape prosecution.
    For the foreseeable future, game hacking and bot development will continue to
    grow into a larger and more lucrative industry for those game hackers bold enough
    to take the risks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Hack Games?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Aside from its obvious allure and challenging nature, game hacking has some
    practical and profitable purposes. Every day, thousands of novice programmers
    experiment with small-scale game hacking as a way to automate monotonous tasks
    or perform menial actions. These script kiddies will use automation tools like
    AutoIt for their small, relatively harmless hacks. On the other hand, professional
    game hackers, backed by their large toolkits and years of programming experience,
    will devote hundreds of hours to the development of advanced game hacks. These
    types of game hacks, which are the focus of this book, are often created with
    the intent of making large amounts of money.
  prefs: []
  type: TYPE_NORMAL
- en: Gaming is a huge industry that generated $22.4 billion in sales in 2014, according
    to the Entertainment Software Association. Of the tens of millions of players
    who play games daily, 20 percent play massively multiplayer online role-playing
    games (MMORPGs). These MMORPGs often have thousands of players who trade virtual
    goods within thriving in-game economies. Players often have a need for in-game
    assets and are willing to buy these assets with real-world money. Consequently,
    MMORPG players end up developing large communities that provide gold-for-cash
    services. These services often go as far as enforcing exchange rates from in-game
    gold to real-world currencies.
  prefs: []
  type: TYPE_NORMAL
- en: To take advantage of this, game hackers will create bots that are capable of
    automatically farming gold and leveling characters. Then, depending on their goal,
    hackers will either set up massive gold farms and sell their in-game profits,
    or perfect and sell their software to players who wish to seamlessly obtain levels
    and gold with minimal interference. Due to the massive communities surrounding
    popular MMORPGs, these game hackers can make between six and seven figures annually.
  prefs: []
  type: TYPE_NORMAL
- en: While MMORPGs provide the largest attack surface for hackers, they have a relatively
    small audience overall. About 38 percent of gamers favor real-time strategy (RTS)
    and massive online battle arena (MOBA) games, and another 6 percent play primarily
    first-person shooter (FPS) games. These competitive player versus player (PvP)
    games collectively represent 44 percent of the gaming market and provide great
    rewards to determined game hackers.
  prefs: []
  type: TYPE_NORMAL
- en: PvP games are often episodic in nature; each match is an isolated game, and
    there’s typically not much profitable progression for botting away from keyboard
    (AFK). This means that, instead of running gold farms or creating autonomous bots
    to level up characters, hackers will create reactive bots that assist players
    in combat.
  prefs: []
  type: TYPE_NORMAL
- en: These highly competitive games are about skill and tactics, and most players
    participate to prove their ability to themselves and others. As a consequence,
    the number of people seeking bots for PvP-type games is substantially lower than
    you’d find in the grind-heavy world of MMORPGs. Nevertheless, hackers can still
    make a pretty penny selling their PvP bots, which are often much easier to develop
    than full-fledged autonomous bots.
  prefs: []
  type: TYPE_NORMAL
- en: '**How This Book Is Organized**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This book is split into four parts, each of which focuses on a different core
    aspect of game hacking. In **[Part 1: Tools of the Trade](part01.xhtml#part01)**,
    you’ll get a box full of tools to help you hack games.'
  prefs: []
  type: TYPE_NORMAL
- en: '• **[Chapter 1: Scanning Memory Using Cheat Engine](ch01.xhtml#ch01)** will
    teach you how to scan a game’s memory for important values using Cheat Engine.'
  prefs: []
  type: TYPE_NORMAL
- en: '• In **[Chapter 2: Debugging Games with OllyDbg](ch02.xhtml#ch02)**, you’ll
    get a crash course in debugging and reverse engineering with OllyDbg. The skills
    you learn here will be extremely useful when you start making advanced bots and
    injecting code.'
  prefs: []
  type: TYPE_NORMAL
- en: '• To wrap up, **[Chapter 3: Reconnaissance with Process Monitor and Process
    Explorer](ch03.xhtml#ch03)**, will teach you how to use two reconnaissance tools
    to inspect how games interact with files, other processes, the network, and the
    operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: The online resources for each chapter in [Part 1](part01.xhtml#part01) include
    custom binaries I created to give you a safe place to test and hone your newly
    discovered skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’re comfortable with every wrench and hammer, **[Part 2: Game Dissection](part02.xhtml#part02)**,
    will teach you how to get under the hood and figure out how games work.'
  prefs: []
  type: TYPE_NORMAL
- en: '• In **[Chapter 4: From Code to Memory: A General Primer](ch04.xhtml#ch04)**,
    you’ll learn what a game’s source code and data look like once compiled into a
    game binary.'
  prefs: []
  type: TYPE_NORMAL
- en: '• **[Chapter 5: Advanced Memory Forensics](ch05.xhtml#ch05)** builds on the
    knowledge you’ll gain from [Chapter 4](ch04.xhtml#ch04). You’ll learn how to scan
    memory and use debugging to seamlessly locate tricky memory values and dissect
    complex classes and structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Finally, **[Chapter 6: Reading from and Writing to Game Memory](ch06.xhtml#ch06)**
    shows you how to read and modify data within a running game.'
  prefs: []
  type: TYPE_NORMAL
- en: These chapters provide lots of in-depth proof-of-concept example code that you
    can use to verify everything you read.
  prefs: []
  type: TYPE_NORMAL
- en: 'In **[Part 3: Process Puppeteering](part03.xhtml#part03)**, you’ll become a
    puppeteer as you learn how to turn any game into a marionette.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Building on the skills from [Parts 1](part01.xhtml#part01) and [2](part02.xhtml#part02),
    **[Chapter 7: Code Injection](ch07.xhtml#ch07)** describes how to inject and execute
    your own code in the address space of a game.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Once you’ve mastered injection, **[Chapter 8: Manipulating Control Flow in
    a Game](ch08.xhtml#ch08)** will teach you how to use injection to intercept, modify,
    or disable any function call made by a game, and will wrap up with some useful
    real-world examples for the common libraries Adobe AIR and Direct 3D.'
  prefs: []
  type: TYPE_NORMAL
- en: To complement your puppeteering classes, these chapters are accompanied by thousands
    of lines of production-ready code that you can use as a boilerplate library for
    a future bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In **[Part 4: Creating Bots](part04.xhtml#part04)**, you’ll see how to combine
    your toolbox, dissection abilities, puppeteering skills, and software engineering
    background to create powerful bots.'
  prefs: []
  type: TYPE_NORMAL
- en: '• **[Chapter 9: Using Extrasensory Perception to Ward Off Fog of War](ch09.xhtml#ch09)**
    explores ways to make a game display useful information that isn’t exposed by
    default, such as the locations of hidden enemies and the amount of experience
    you earn per hour.'
  prefs: []
  type: TYPE_NORMAL
- en: '• **[Chapter 10: Responsive Hacks](ch10.xhtml#ch10)** shows code patterns you
    can use to detect in-game events, like decreases in health, and to make bots that
    react to those events faster than human players.'
  prefs: []
  type: TYPE_NORMAL
- en: '• **[Chapter 11: Putting It All Together: Writing Autonomous Bots](ch11.xhtml#ch11)**
    reveals how bots that play games without human interaction work. Automated bots
    combine control theory, state machines, search algorithms, and mathematical models,
    and this chapter is a crash course in those topics.'
  prefs: []
  type: TYPE_NORMAL
- en: '• In **[Chapter 12: Staying Hidden](ch12.xhtml#ch12)**, you’ll learn about
    some of the high-level techniques you can use to escape and evade any system that
    would interfere with your bots.'
  prefs: []
  type: TYPE_NORMAL
- en: As you’ve probably come to expect, these chapters have lots of example code.
    Some of the hacks shown in this part are built on example code from previous chapters.
    Others explore succinct, straightforward design patterns you can use to create
    your own bots. Once you’ve finished all four parts of this book, you’ll be sent
    off into the virtual world with your new superpower.
  prefs: []
  type: TYPE_NORMAL
- en: '**About the Online Resources**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll find many additional resources for this book at *[https://www.nostarch.com/gamehacking/](https://www.nostarch.com/gamehacking/)*.
    These resources include compiled binaries to test your skills, a considerable
    amount of example code, and quite a few snippets of production-ready game hacking
    code. These resources go hand-in-hand with the book, and it really isn’t complete
    without them, so make sure to download them before you continue.
  prefs: []
  type: TYPE_NORMAL
- en: '**How to Use This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book should be used first and foremost as a guide to get you started in
    game hacking. The progression is such that the content of each chapter introduces
    new skills and abilities that build on all previous chapters. As you complete
    chapters, I encourage you to play with the example code and test your skills on
    a real game before continuing your reading. This is important, as some covered
    topics will have use cases that don’t become evident until you’re 10 feet deep
    in the mud.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve finished the book, I hope it can still be useful to you as a field
    manual. If you come across some data structure you’re unsure of, maybe the details
    in [Chapter 5](ch05.xhtml#ch05) can help. If you reverse engineer a game’s map
    format and are ready to create a pathfinder, you can always flip to [Chapter 11](ch11.xhtml#ch11),
    study the content, and use some of the example code as a starting point. Although
    it’s impossible to anticipate all the problems you might face when you’re hacking
    away, I’ve tried to ensure you’ll find some answers within these pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**A NOTE FROM THE PUBLISHER**'
  prefs: []
  type: TYPE_NORMAL
- en: This book does not condone piracy, violating the DMCA, infringing copyright,
    or breaking in-game Terms of Service. Game hackers have been banned from games
    for life, sued for millions of dollars, and even jailed for their work.
  prefs: []
  type: TYPE_NORMAL
