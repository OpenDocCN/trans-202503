- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Infrastructure
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施
- en: '![g10001](image_fi/502680c10/g10001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g10001](image_fi/502680c10/g10001.png)'
- en: 'One of the non-obvious parts about any software project, particularly a project
    that is being worked on by more than just one or two people, is the infrastructure
    that you need to actually build the product. *Infrastructure* can refer to a number
    of things, including:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何软件项目中，尤其是当项目不止一个或两个人在合作时，一个不太明显的部分就是实际构建产品所需要的基础设施。*基础设施*可能涉及多个方面，包括：
- en: Building How do you take the code that random engineers are constantly submitting
    and build the product? What if the product needs to run on various different devices
    and not just one? And where do you store all of these builds for testing, debugging,
    and releasing purposes?
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 你如何将随机工程师不断提交的代码构建成产品？如果产品需要在多种不同的设备上运行，而不仅仅是一个设备，怎么办？你将如何存储这些构建文件以便进行测试、调试和发布？
- en: Testing How do you test the product once it’s built? And how do you test it
    continuously so that you can catch bugs that have crept in before they cause serious
    problems (and while you can more easily trace them back to when they were first
    submitted so that you can find and fix them)?
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试 一旦产品构建完成，你如何进行测试？你如何进行持续测试，以便在问题变得严重之前抓住潜在的错误（并且在出现问题时，可以更容易追溯到错误最初被提交的时刻，进而定位和修复）？
- en: Source code control Where do you store all of the code? And how do you allow
    a team of people to make simultaneous changes to the same source code files?
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码控制 你将所有代码存储在哪里？如何让一个团队的成员同时修改相同的源代码文件？
- en: Release How do you actually ship the product to the devices that need it?
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布 你如何将产品实际发布到需要它的设备上？
- en: Android needed people dedicated to solving these infrastructure problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Android需要专门的人来解决这些基础设施问题。
- en: Joe Onorato and the Build
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乔·奥诺拉托和构建
- en: In the beginning, Android builds were cobbled together by a fragile and time-consuming
    system that built all of the constituent pieces for the kernel, the platform,
    the apps, and everything in between. This system was fine in the early days when
    there wasn’t much to build, but Android was getting too big for it to work any
    longer. So in the Spring of 2006, Joe Onorato attacked the problem.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初的阶段，Android的构建是由一个脆弱且耗时的系统拼凑起来的，这个系统为内核、平台、应用以及其他所有部分构建了组件。在早期，构建的内容并不复杂，系统能够满足需求，但随着Android的规模扩大，原有的系统已经无法再适用了。因此，在2006年春天，乔·奥诺拉托开始着手解决这个问题。
- en: Joe figures he was destined to be a programmer, since both of his parents were
    MIT grads. “They met at the Tech Model Railroad Club;^([1](#c10-footnote-1)) it
    was love at first chat. It was pretty much obvious that I was going to be a computer
    scientist.”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 乔认为自己注定要成为程序员，因为他的父母都是麻省理工学院的毕业生。“他们在技术模型铁路俱乐部相遇；^([1](#c10-footnote-1)) 一见钟情。几乎可以预见我会成为一名计算机科学家。”
- en: In high school, Joe worked on the yearbook with his friend Jeff Hamilton (a
    future Be, PalmSource, and Android colleague), making the first Jostens^([2](#c10-footnote-2))
    yearbook that was entirely digital. Their system included a custom search algorithm
    and a digitizing system that simplified publishing while decreasing the cost for
    the students. Joe later worked (again, with Jeff) at Be, and then PalmSource,
    on operating system projects that were similar to what he would work on later
    at Android.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在高中时，乔与他的朋友Jeff Hamilton（未来的Be、PalmSource和Android同事）一起参与了年鉴的制作，制作了第一本完全数字化的Jostens^([2](#c10-footnote-2))年鉴。他们的系统包括一个定制的搜索算法和一个数字化系统，这些都简化了出版过程并降低了学生的成本。乔后来（再次与Jeff一起）在Be公司和PalmSource公司从事类似的操作系统项目，这些项目与他后来在Android所从事的工作非常相似。
- en: In late 2005, Joe wasn’t excited about where PalmSource was going, so he reached
    out to a former colleague from Be. That person knew Swetland and got Joe routed
    over to the Android team. Joe got an offer, but wasn’t sure what he was signing
    up for, so the recruiter got him in touch with Andy. After assurances of confidentiality,
    Andy told Joe, “We’re going to make the best phone ever.” That’s when Joe joined
    the Android team.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年末，乔对PalmSource的未来方向感到不满，因此他联系了曾在Be公司共事的前同事。那人认识Swetland，并把乔推荐到了Android团队。乔收到了一份邀请，但不确定自己加入的是什么团队，因此招聘人员把他介绍给了Andy。在得到保密承诺后，Andy告诉乔：“我们将打造最棒的手机。”
    就这样，乔加入了Android团队。
- en: Joe worked on several projects in those early times, including the framework
    and the UI toolkit. But in the Spring of 2006, he saw that the build system needed
    a serious restructuring.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 乔在早期参与了多个项目，包括框架和UI工具包。但是在2006年春天，他发现构建系统需要进行大规模重构。
- en: '“We had a big recursive^([3](#c10-footnote-3)) make build system, and I was
    like, ‘Let’s have a real build system.’ It was somewhat controversial: is it even
    possible?” Fortunately, Joe had experience from Be. Be used a similar build system,
    which was written by a group of people including future Android engineer Jean-Baptiste
    Quéru (who was known to the team as “JBQ”). Joe remembered, “I think some of the
    Danger folks [who had also worked at Be] had left before that happened and thought
    that was an impossible thing to do. How could you have one make file that knows
    about everything? Like it’s going to get all confused. But . . . it worked.”'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “我们有一个很大的递归^([3](#c10-footnote-3))make构建系统，我当时想，‘我们该有一个真正的构建系统了。’这有点有争议：这甚至可能吗？”幸运的是，Joe有Be公司的经验。Be使用了一个类似的构建系统，那个系统是由一群人编写的，其中包括未来的Android工程师Jean-Baptiste
    Quéru（团队称他为“JBQ”）。Joe回忆道，“我想一些危险公司的人[他们也曾在Be工作]在那之前就离开了，认为这是不可能完成的事。怎么可能有一个make文件知道所有的事情？它会搞得一团糟。但...它成功了。”
- en: Joe dove in and made the build system work for Android, speeding it up and making
    it more robust in the process. The whole project took a couple months, resulting
    in a system called Total Dependency Awareness.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Joe深入工作，成功让Android的构建系统运作起来，在这个过程中加速了构建并增强了系统的稳定性。整个项目持续了几个月，最终形成了一个名为“总依赖感知”的系统。
- en: Ed Heyl and Android Infrastructure
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ed Heyl和Android基础设施
- en: The first monkey lab was my laptop and seven Dream devices. I wrote some scripts
    and tools to beat the shit out of them till they crashed.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一个猴子实验室是我的笔记本电脑和七台Dream设备。我写了一些脚本和工具，把它们弄得崩溃。
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Ed Heyl
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——Ed Heyl
- en: The build system that Joe wrote worked sufficiently for a while. But as the
    team and the number of code submissions grew, there was a need for a system that
    could automatically build the product as developers submitted their changes. For
    example, if someone submits code that causes a bug, it’s better to be able to
    build and test the product with just that change than to wait until after many
    other changes have piled on top of it, obscuring the root cause of the problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Joe编写的构建系统在一段时间内运作得足够好。但随着团队的扩大和代码提交数量的增多，出现了一个需求：一个能够在开发者提交更改时自动构建产品的系统。例如，如果有人提交的代码导致了一个bug，最好能仅凭这次更改就构建并测试产品，而不是等到其他多个更改叠加后才进行构建和测试，这样会掩盖问题的根本原因。
- en: In September of 2007, to get the build and test infrastructure under control,
    the team brought in Ed Heyl, who was then working at Microsoft.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在2007年9月，为了控制构建和测试基础设施，团队引入了当时在微软工作的Ed Heyl。
- en: In college Ed studied computer science but couldn’t wait to graduate. “I was
    looking to get out as fast as possible and get into the workforce. I did okay
    in school . . . but I excelled at work.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ed在大学学习计算机科学，但迫不及待想毕业。“我想尽快毕业进入职场。我在学校表现还可以…但在工作中我表现得更好。”
- en: Ed joined Apple in 1987, where he worked for five years. “The company was in
    a really weird state. They were still making all their money off the Apple II,
    but all the mindshare was going into Mac.” A few years later, Ed joined the Taligent^([4](#c10-footnote-4))
    spin-out, followed by General Magic soon after, “right when they did their IPO.
    It set the record for IPO gain, and then nose-dived in the months after. The company
    itself was not very healthy at that time. All the people were already kind of
    disenchanted. There was so much hype building up to the IPO that there was a lot
    of letdown.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ed于1987年加入了苹果公司，并在那里工作了五年。“那时公司处于一个非常奇怪的状态。他们仍然靠Apple II赚钱，但所有的关注都集中在Mac上。”几年后，Ed加入了Taligent^([4](#c10-footnote-4))的分拆公司，随后不久加入了General
    Magic，“正好在他们进行IPO的时候。它创下了IPO增幅的记录，但在之后几个月股价暴跌。公司当时状况并不健康，所有人都有些失望。IPO前的炒作太过火了，之后的落差很大。”
- en: Ed lasted at General Magic for about ten months, then joined WebTV. He stayed
    through the acquisition by Microsoft and another ten years until joining the Android
    team. At WebTV and Microsoft, Ed worked with future Android people, including
    Andy Rubin, Steve Horowitz, Mike Cleron, and Andy McFadden.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ed在General Magic工作了大约十个月，然后加入了WebTV。他一直待到微软收购，并在微软继续工作了十年，直到加入Android团队。在WebTV和微软，Ed与未来的Android团队成员合作，包括Andy
    Rubin、Steve Horowitz、Mike Cleron和Andy McFadden。
- en: Ed started on the Android team around the time that the Android SDK was first
    released, in October of 2007\. At the time Ed joined, Android already had an automated
    build system called *Launch Control*. Three times per day, it would take whatever
    code had been submitted and build it, producing a result that was then available
    for the automated testing system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ed在2007年10月Android SDK首次发布时加入了Android团队。Ed加入时，Android已经有了一个名为*Launch Control*的自动化构建系统。每天三次，它会接收所有提交的代码并进行构建，生成的结果随后可供自动化测试系统使用。
- en: Launch Control was better than nothing, but it was nowhere near what Android
    needed. “It was something for QA to test, as opposed to a dashboard to show the
    state of the world. There wasn’t a lot of traceability. Continuous integration^([5](#c10-footnote-5))
    tries to build and test as much as it can to give you as many data points as it
    can.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Launch Control比什么都没有好，但远远不足以满足Android的需求。“它只是供QA测试使用，而不是一个展示系统状态的仪表盘。它缺乏追溯性。持续集成^([5](#c10-footnote-5))尽可能多地构建和测试，以提供尽可能多的数据点。”
- en: 'The team needed a system that would build and test far more often. It also
    needed to scale up. At the time, it was only building for a single device: Sooner.
    But soon the team would have Dream devices (which launched with 1.0 as the G1),
    and the system would have to build for multiple targets.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 团队需要一个可以更频繁地构建和测试的系统。这个系统还需要具备可扩展性。当时，它只为一个设备构建：Sooner。但不久后，团队将拥有Dream设备（该设备与1.0一起发布，成为G1），系统必须能够为多个目标构建。
- en: Ed started on his own, but eventually led a team of people who worked on the
    build. Ed said, “It was Dave Bort that took it and actually made it good enough
    to base products on. Made it really solid, with a good design and a good layout
    of how things worked. Dave Bort took it from a good but sloppy build system to
    a product.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ed最初是独自开始工作的，但最终他领导了一个团队，专注于构建工作。Ed说：“是Dave Bort接手了这个工作，并真正把它做得足够好，可以用于产品开发。让它变得非常稳固，设计合理，工作方式布局清晰。Dave
    Bort将它从一个不错但有些粗糙的构建系统，做成了一个产品。”
- en: “At the same time he reorganized the build system, he reorganized the whole
    source tree. He set all of the fundamentals in place for open source and architectural
    level things. Even though he worked on the build system, it was architectural;
    it rippled through the whole system. He laid all that groundwork. He basically
    got Android ready for open source.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “在重新组织构建系统的同时，他也重新组织了整个源代码树。他为开源和架构级的事情奠定了所有基础。尽管他主要在构建系统上工作，但它是架构性的；这种变化影响了整个系统。他为此奠定了所有基础。可以说，他让Android准备好了开源。”
- en: Testing, Testing
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试，测试
- en: Another area that had to be figured out was testing. How do you verify that
    all of the random bits of software landing in the build constantly from different
    engineers on different parts of the system are not actually breaking things? It’s
    necessary, in any software system, to have some kind of automated test framework,^([6](#c10-footnote-6))
    to catch problems quickly. Android didn’t have automated testing at that time,
    so Ed got some monkeys to do it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要解决的问题是测试。如何验证不断从不同工程师在系统不同部分提交的随机软件片段不会破坏系统？在任何软件系统中，都需要有某种自动化测试框架^([6](#c10-footnote-6))，以便快速捕捉问题。那时，Android并没有自动化测试系统，于是Ed让一些monkeys来完成这项工作。
- en: “At WebTV, we had this thing called the monkey,^([7](#c10-footnote-7)) which
    would find links on web pages and just go nuts surfing everywhere.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “在WebTV时，我们有一个叫做monkey的东西^([7](#c10-footnote-7))，它会在网页上找到链接，然后疯狂地到处冲浪。”
- en: “I can’t remember if Dianne had already done it [for the Android platform],
    or whether we were talking to her about it and she did it. But she put in the
    system for randomization and event injection into the framework, which we call
    ‘monkey’ today.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “我记不清楚Dianne是否已经为Android平台做过这件事，还是我们在与她讨论时她做了这件事。但她将随机化和事件注入的系统集成到了框架中，今天我们称之为‘monkey’。”
- en: “I built the first monkey lab, which was my laptop and seven Dream devices.
    I wrote some scripts and tools to beat the shit out of them till they crashed,
    grabbed the crash [report] and put them back to work. I’d analyze those reports
    and I’d summarize them all. So every day we could have the number of events that
    it would handle, and what crashes it hit. Jason Parks and I, and eventually Evan
    Millar, hooked up a set of tools to help create our first stability numbers. That
    ended up living for years and years, as bad as it was. It was just Python^([8](#c10-footnote-8))
    scripts analyzing bug reports and writing out HTML reports. In late 2008, I hired
    Bruce Gay [also from Microsoft]. He took that and turned it into a real lab environment.”^([9](#c10-footnote-9))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “我建立了第一个猴子实验室，它就是我的笔记本电脑和七台Dream设备。我编写了一些脚本和工具，让它们不停地崩溃，抓取崩溃的[报告]，然后让它们重新工作。我会分析这些报告并总结出来。这样每天我们就可以知道它能够处理的事件数量以及遇到的崩溃情况。我和Jason
    Parks，以及最终的Evan Millar，连接了一套工具来帮助创建我们的第一个稳定性数据。那套系统坚持了很多年，尽管它很糟糕。它只是一些Python^([8](#c10-footnote-8))脚本，用来分析错误报告并输出HTML报告。2008年末，我雇佣了来自微软的Bruce
    Gay。他接手后把这些变成了一个真正的实验室环境。”^([9](#c10-footnote-9))
- en: Bruce grew the lab over the years from an initial set of seven devices to more
    than 400\. He said there were some unanticipated problems to resolve over that
    time. “One day I walked into the monkey lab to hear a voice say, ‘911—What’s your
    emergency?’” That situation resulted in Dianne adding a new function to the API,
    `isUserAMonkey()`, which is used to gate actions that monkeys shouldn’t take during
    tests (including dialing the phone and resetting the device).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Bruce在这些年中把实验室从最初的七台设备扩展到超过400台。他提到，在这个过程中有一些预料之外的问题需要解决。“有一天我走进猴子实验室，听到一个声音说，‘911——发生了什么紧急情况？’”
    这个情况促使Dianne在API中添加了一个新功能，`isUserAMonkey()`，它用来限制猴子在测试过程中不应该执行的操作（包括拨打电话和重置设备）。
- en: Early monkey tests would run for up to 3,000 input events before crashing. By
    1.0, the number was up around 5,000\. Bruce said, “‘Passing’ was 125K events.
    It took us a few years to meet that goal.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的猴子测试在崩溃之前会运行最多3,000个输入事件。到1.0版本时，这个数字已经达到约5,000。Bruce说，“‘通过’的标准是125K个事件。我们花了几年才达到这个目标。”
- en: '![](image_fi/502680c10/f10001.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c10/f10001.png)'
- en: The monkey test lab in May of 2009 (photo courtesy Brian Swetland)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年5月的猴子测试实验室（照片由Brian Swetland提供）
- en: Romain Guy talked about how critical monkey testing was in the run up to 1.0\.
    “We used to rely on the monkey a lot back then. Every night we would run those
    monkey tests and every morning we had a lot of crashes to fix. Our goal was to
    get the monkey number up; how long can we run the monkey without crashing? Because
    they were crashing everywhere, from the widgets down to the kernel or SurfaceFlinger.^([10](#c10-footnote-10))
    Especially once we switched to the touchscreen, things were a lot more complicated.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Romain Guy谈到猴子测试在1.0版本发布前的重要性。“那时候我们非常依赖猴子测试。每天晚上我们都会跑这些猴子测试，每天早上我们都会有很多崩溃需要修复。我们的目标是提高猴子的测试数量；我们能让猴子在不崩溃的情况下运行多久？因为崩溃无处不在，从小部件到内核再到SurfaceFlinger^([10](#c10-footnote-10))，尤其是我们切换到触摸屏后，情况变得更加复杂。”
- en: In addition to monkey tests, other people on the team were working on different
    kinds of tests to verify that the platform had the correct behavior. Evan Millar,
    who joined the team out of grad school in early 2007, worked on early performance
    testing frameworks, timing how long it took for applications to launch. He also
    worked on an early system of automated testing called Puppet Master, which allowed
    test scripts to drive the UI (opening windows, clicking on buttons), measuring
    correctness against golden images.^([11](#c10-footnote-11)) The results were mixed,
    given the difficulty of comparing against golden images, in addition to the asynchronous
    nature of the tests and the platform. A test script would request a particular
    UI action, like clicking a button or launching an application, but it might take
    a while for the platform to process that event, making correctness-testing tricky
    and error-prone.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了猴子测试，团队中的其他成员也在进行不同类型的测试，以验证平台的正确行为。Evan Millar在2007年初从研究生院加入团队，他负责早期的性能测试框架，测量应用程序启动所需的时间。他还参与了早期的自动化测试系统——Puppet
    Master，它允许测试脚本驱动UI（打开窗口、点击按钮），并与黄金图像进行正确性比对^([11](#c10-footnote-11))。由于比较黄金图像的困难，加上测试和平台的异步性，结果是喜忧参半的。测试脚本会请求特定的UI操作，比如点击一个按钮或启动一个应用程序，但平台处理该事件可能需要一段时间，这使得正确性测试变得复杂且容易出错。
- en: Chiu-Ki Chan dealt with some of these inherent difficulties in testing when
    she joined the Maps team after stints on the services and Android Market teams.
    She had been working on a system to automate testing of the maps app, but was
    increasingly frustrated with the difficulties of testing her app on a system that
    not designed for testing. She said, “Testing? There was no such thing as testing.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Chiu-Ki Chan 在加入地图团队后，曾在服务和 Android Market 团队工作，处理了一些这些内在的测试困难。她一直在开发一个系统来自动化地图应用的测试，但越来越对在一个并非为测试设计的系统上测试她的应用感到沮丧。她说：“测试？根本没有所谓的测试。”
- en: An important part of overall Android testing is the Compatibility Test Suite
    (CTS). This was a system built initially by external contractors (managed by Patrick
    Brady^([12](#c10-footnote-12))). CTS tests are important because they not only
    test specific pieces of functionality in the system and catch regressions^([13](#c10-footnote-13))
    when tests fail, but they are required for partners to pass as well, guaranteeing
    that the Android devices they ship conform to Android’s defined platform behavior.
    For example, if there is a test that colors the screen white and tests that the
    result is, in fact, white pixels, it should be impossible for a device to reinterpret
    “white” as red and still pass that test.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Android 测试的一个重要部分是兼容性测试套件（CTS）。这个系统最初由外部承包商构建（由 Patrick Brady^([12](#c10-footnote-12)))
    管理）。CTS 测试非常重要，因为它们不仅测试系统中特定功能块，并在测试失败时捕捉回归^([13](#c10-footnote-13))，而且它们也是合作伙伴通过认证所必需的，确保他们发布的
    Android 设备符合 Android 定义的平台行为。例如，如果有一个测试将屏幕变成白色，并测试结果是否确实是白色像素，那么设备不应该将“白色”误解为红色并且仍然通过该测试。
- en: Lean Infrastructure
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精益基础设施
- en: 'Android build, test, and release infrastructure, like much of the rest of Android,
    was created by a small team with limited resources. This was a conscious decision
    about where to invest limited budget given the priorities of getting the product
    out the door. Ed Heyl said, “We had no idea whether what we were doing was going
    to be successful or not. We were just trying to make a new device and be relevant.
    Apple was getting all the mindshare, Microsoft was not going to let go, and they
    were actually in the best position at that point. So everything was of the mindset:
    whatever we can do to make forward progress. We did not prioritize investing in
    really good solutions, it was just ‘we gotta get this going, prove that we can
    deliver and iterate.’ We never stopped and said we really need to invest in a
    build infrastructure, Python scripts are not going to get us very far, so we should
    really think about how we’re going to use the Google back-end infrastructure.
    We never stopped to think about that. It was just full steam ahead.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Android 构建、测试和发布基础设施，像 Android 的其他部分一样，最初是由一个资源有限的小团队创建的。这是关于如何在有限预算内做出投资的一个有意识的决策，考虑到产品尽快发布的优先级。Ed
    Heyl 说：“我们根本不知道我们正在做的事情是否会成功。我们只是尽力制造一款新设备并让它有影响力。苹果已经占据了所有的市场关注，微软不打算放手，他们在那个时刻处于最佳位置。所以我们的一切思维方式都是：我们能做的任何事情，只为向前推进。我们没有优先考虑投资很好的解决方案，只是‘我们得让这个开始，证明我们能交付并持续迭代。’我们从未停下来想，我们真的需要投资建立一个构建基础设施，Python
    脚本无法带我们走得太远，所以我们应该认真思考如何使用 Google 的后台基础设施。我们从未停下来想过这个问题。我们只是全速前进。”
- en: “If it was part of the core product, we invested more into it. But if it was
    just test, or build, it was minimum stuff to get it going. That’s the way we operated.”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “如果它是核心产品的一部分，我们会投入更多资源。但如果它只是测试或构建，那就只做最低限度的工作来让它启动。我们就是这么操作的。”
