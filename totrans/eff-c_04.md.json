["```\nint i = 21; // declaration with initializer\nint j = 7;  // declaration with initializer\ni = j;      // simple assignment\n```", "```\nj = i + 12; // j now has the value 19\n```", "```\nint i;\ni = 5;     // i is an lvalue, 5 is an rvalue\nint j = i; // lvalues can appear on the right side of an assignment\n7 = i;     // error: rvalues can't appear on the left side of an assignment\n```", "```\nsigned char c;\nint i = INT_MAX;\nlong k;\nk = (c = i);\n```", "```\na[i] + f() + 9\n```", "```\nint j;\nj = a[i] + f() + 9;\n```", "```\nint x = 11;\nint y = 21;\nint max_of_x_and_y = max(x, y);\n```", "```\nint f() {\n  // `--snip--`\n return 0;\n}\nvoid g(int (*func)()) {\n  // `--snip--`\n  if (func() != 0)\n    printf(\"g failed\\n\");\n  // `--snip--`\n}\n// `--snip--`\ng(f); // call g with function-pointer argument\n// `--snip--`\n```", "```\nint i = 5;\nint e;    // expression result\ne = i++;  // postfix increment: e ← 5, i ← 6\ne = i--;  // postfix decrement: e ← 6, i ← 5\ne = ++i;  // prefix increment: e ← 6, i ← 6\ne = --i;  // prefix decrement: e ← 5, i ← 5\n```", "```\nchar cba[] = \"cba\";\nchar *p = cba;\nprintf(\"%c\", ++*p);\n\nchar xyz[] = \"xyz\";\nchar *q = xyz;\nprintf(\"%c\", *q++);\n```", "```\nint glob;  // static storage initialized to 0\n\nint f(void) {\n  return glob + 10;\n}\nint g(void) {\n  glob = 42;\n  return glob;\n}\nint main(void) {\n  int max_value = max(f(), g());\n  // `--snip--`\n}\n```", "```\nint f_val = f();\nint g_val = g();\nint max_value = max(f_val, g_val);\n```", "```\nprintf(\"%d\\n\", ++i + ++j * --k);\n```", "```\nint i = 5;\nprintf(\"Result = %d\\n\", i++ * i++);\n```", "```\nint i = 5;\nint j = i++;\nint k = i++;\nprintf(\"Result = %d\\n\", j * k);\n```", "```\nint i = 5;\nint j = i++;\nprintf(\"Result = %d\\n\", j * i++);\n```", "```\nint i;\nsize_t i_size = sizeof i;      // the size of the object i\nsize_t int_size = sizeof(int); // the size of the type int\n```", "```\nbool is_odd(int n) {\n  return n % 2 == 1;\n}\n```", "```\nbool is_odd(int n) {\n  return n % 2 != 0;\n}\n```", "```\nunsigned char uc = UCHAR_MAX; // 0xFF\nint i = ~uc;\n```", "```\n`shift expression << additive expression`\n```", "```\n`shift expression >> additive expression`\n```", "```\nextern int si1, si2, sresult;\nextern unsigned int ui1, ui2, uresult;\n// `--snip--`\n❶ if ((si2 < 0) || (si2 >= sizeof(si1)*CHAR_BIT)) {\n  /* error */\n}\nelse {\n  sresult = si1 >> si2;\n}\n❷ if (ui2 >= sizeof(unsigned int)*CHAR_BIT) {\n  /* error */\n}\nelse {\n  uresult = ui1 >> ui2;\n}\n```", "```\n#include <math.h>\n#include <stdio.h>\n\nint main(void) {\n  int i = 128;\n  if (i == pow(2, 7)) {\n    puts(\"equal\");\n  }\n}\n```", "```\nbool isN(int* ptr, int n) {\n  return ptr && *ptr == n; // avoid a null pointer dereference\n}\n```", "```\nis_file_ready() || prepare_file()\n```", "```\nenum {max = 15};\nint i = 17;\n\nif ((i >= 0) && ((i++) <= max)) {\n  // `--snip--`\n}\n```", "```\ndouble x = 1.2;\nint sum = (int)x + 1;  // explicit conversion from double to int\n```", "```\nintptr_t i = (intptr_t)a_pointer; // reinterpret bits as an integer\n```", "```\nint i = (int)a_float; // change bits to an integer representation\n```", "```\nchar c;\n// `--snip--`\nwhile ((c = fgetc(in)) != EOF) {\n  // `--snip--`\n}\n```", "```\nSeverity  Code   Description\nWarning   C4244  '=': conversion from 'int' to 'char', possible loss of data\n```", "```\nchar c;\nwhile ((c = **(char)**fgetc(in)) != EOF) {\n  // `--snip--`\n}\n```", "```\nresult = condition ? valueReturnedIfTrue : valueReturnedIfFalse;\n```", "```\nconst int x = (a < b) ? b : a;\n```", "```\n#include <stdio.h>\n#include <stddef.h>\n#include <stdalign.h>\n#include <assert.h>\n\nint main(void) {\n  int arr[4];\n  static_assert(alignof(arr) == 4, \"unexpected alignment\");\n  static_assert(alignof(max_align_t) == 16, \"unexpected alignment\");\n  printf(\"Alignment of arr = %zu\\n\", alignof(arr));\n  printf(\"Alignment of max_align_t = %zu\\n\", alignof(max_align_t));\n}\n```", "```\nAlignment of arr = 4\nAlignment of max_align_t = 16\n```", "```\nint i, j;\nbool b1 = &i < &j;  // undefined behavior\nbool b2 = &i == &j; // OK, but tautologically false\n```", "```\nf(a, (t=3, t+2), c)\n```", "```\nint arr[100];\nint *arrp1 = &arr[40];\nint *arrp2 = arrp1 + 20; // arrp2 points to arr[60]\nprintf(\"%td\\n\", arrp2 - arrp1); // prints 20\n```", "```\nint m[2] = {1, 2};\n\nint sum_m_elems(void) {\n  int *pi; int j = 0;\n  for (pi = &m[0]; pi < &m[2]; ++pi) j += *pi;\n  return j;\n}\n```"]