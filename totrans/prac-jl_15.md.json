["```\njulia> ForwardDiff.derivative(sin, 0.0)\n1.0\n```", "```\njulia> function fdst(x)\n           (x - floor(x))^2 / ceil(x)\n       end\nfdst (generic function with 1 method)\n\njulia> plot(fdst, 0, 5; label=\"fdst(x)\", xlabel=\"x\", lw=2);\n\njulia> plot!(x -> ForwardDiff.derivative(fdst, x); label=\"fdst'(x)\", lw=2, ls=:dash)\n```", "```\n   using ForwardDiff\n   using DifferentialEquations\n   const L = 1.0\n   const g = 9.8\n   const m = 1.0\n\n➊ function ppot(θ)\n       return m*g*L*(1-cos(θ))\n   end\n\n   function pendulum!(du, u, p, t)\n       L, g = p\n       θ, ω = u\n       du[1] = ω\n    ➋ du[2] = -ForwardDiff.derivative(ppot, u[1])/m\n   end\n\n   function pendulumF!(du, u, p, t)\n       L, g = p\n       θ, ω = u\n       du[1] = ω\n       du[2] = -g/L * sin(θ)\n   end\n   p = [L, g] #  <- Parameters\n\n   u0 = [deg2rad(175), 0]\n              #  θ   ω  <- Initial conditions\n\n   tspan = (0, 20)\n\n   prob = ODEProblem(pendulum!, u0, tspan, p)\n   probF = ODEProblem(pendulumF!, u0, tspan, p)\n\n➌ sol5d = solve(prob)\n   sol5dF = solve(probF)\n```", "```\n   using DifferentialEquations\n   using ForwardDiff\n\n   U(r) = exp(-(exp((-0.4*(r-1)^2))))/sqrt(r+1)\n\n   function particle!(du, u, p, t)\n       x1, x2 = p\n       r, v = u\n       du[1] = v\n    ➊ du[2] = -ForwardDiff.derivative(U, abs(r - x1)) +\n                ForwardDiff.derivative(U, abs(r - x2))\n   end\n\n➋ p = [0.0, 20.0]\n➌ u0 = [5.0, 0.2035]\n\n   tspan = (0, 650)\n\n   prob = ODEProblem(particle!, u0, tspan, p)\n   sol = solve(prob)\n```", "```\njulia> using Turing, StatsPlots\n\njulia> @model function coin(Nheads, L)\n           Pheads ~ Uniform(0, 1)\n        ➊ Nheads ~ Binomial(L, Pheads)\n       end;\n```", "```\njulia> flips = sample(coin(60, 100), SMC(), 1000)\n```", "```\nChains MCMC chain (1000×3×1 Array{Float64, 3}):\n\nLog evidence      = -4.5014682572661195\nIterations        = 1:1:1000\nNumber of chains  = 1\nSamples per chain = 1000\nWall duration     = 12.73 seconds\nCompute duration  = 12.73 seconds\nparameters        = Pheads\ninternals         = lp, weight\n\nSummary Statistics\n  parameters      mean       std   naive_se      mcse        ess      rhat   ess_per_sec\n      Symbol   Float64   Float64    Float64   Float64    Float64   Float64       Float64\n\n      Pheads    0.6024    0.0460     0.0015    0.0023   410.5088    1.0002       32.2499\n\nQuantiles\n  parameters      2.5%     25.0%     50.0%     75.0%     97.5%\n      Symbol   Float64   Float64   Float64   Float64   Float64\n\n      Pheads    0.5058    0.5719    0.6092    0.6319    0.6862\n```", "```\njulia> histogram(flips; normalize=true)\njulia> plot!(Normal(0.6024, 0.0460); lw=2)\n```", "```\njulia> cdf(Normal(0.6024, 0.0460), 0.52) - cdf(Normal(0.6024, 0.0460), 0.48)\n0.032725277247186525\n```", "```\njulia> histogram(sample(coin(6, 10), SMC(), 1000); normalize=:probability, fc=:lightgray)\njulia> histogram!(sample(coin(600, 1000), SMC(), 1000); normalize=:probability, fc=:gray)\n```", "```\nconst t = 0:π/50:4π;\nA0 = 3.4; f0 = 2.7;\ndata = A0*sin.(f0*t) + 0.5 .* randn(length(t));\n\n@model function wave(data)\n    f ~ Uniform(0, 3)\n    A ~ Uniform(0, 4)\n ➊ prediction = A*sin.(f*t)\n    for i in eachindex(t)\n     ➋ data[i] ~ Normal(prediction[i], 0.5)\n    end\nend;\n```", "```\njulia> wavesample = sample(wave(data), MH(), 1000)\nChains MCMC chain (1000×3×1 Array{Float64, 3}):\n\nIterations        = 1:1:1000\nNumber of chains  = 1\nSamples per chain = 1000\nWall duration     = 0.92 seconds\nCompute duration  = 0.92 seconds\nparameters        = f, A\ninternals         = lp\n\nSummary Statistics\n  parameters      mean       std   naive_se      mcse       ess      rhat   ess_per_sec\n      Symbol   Float64   Float64    Float64   Float64   Float64   Float64       Float64\n\n           f    2.6876    0.0247     0.0008    0.0039    8.9062    1.1077        9.7230\n           A    3.4323    0.3867     0.0122    0.0681    2.5378    2.1700        2.7706\n```", "```\njulia> plot(t, A0*sin.(f0*t); lw=2, legend=false, ylabel=\"A(t)\", xlabel=\"t\")\njulia> plot!(t, data)\njulia> A1 = 3.4323; f1 = 2.6876;\njulia> plot!(t, A1*sin.(f1*t); ls=:dot)\n```", "```\n   using DifferentialEquations\n\n   function pendulum!(du, u, p, t)\n       L, g = p\n       θ, ω = u\n       du[1] = ω\n       du[2] = -g/L(t) * sin(θ)\n   end\n\n➊ g = 9.8; A = 0.2; f = 0.97\n   L(t) = 1.0 + A * cos(f*2*sqrt(g)*t)\n   p = [L, g]\n\n   u0 = [deg2rad(5), 0]\n   #  θ   ω  <- Initial conditions\n\n   tspan = (0, 80)\n\n   sol = solve(ODEProblem(pendulum!, u0, tspan, p); saveat=0.1)\n```", "```\ng = 9.8; A = 0.2; f = 1.0\nL(t) = 1.0 + A * cos(f*2*sqrt(g)*t)\np = [L, g]\nplot(solve(ODEProblem(pendulum!, u0, tspan, p)); idxs=1,\n     legend=false, ylabel=\"A(t)\")\n\nf = 0.95\nL(t) = 1.0 + A * cos(f*2*sqrt(g)*t)\np = [L, g]\nplot!(solve(ODEProblem(pendulum!, u0, tspan, p)); idxs=1, lw=2)\n\nannotate!(40, 1, (\"Thin line:\\nparametric forcing at resonance\", 8))\nannotate!(40, -0.5, (\"Thick line:\\n5% detuning\", 8))\n```", "```\nusing Turing\n\n@model function pdpen(observation)\n    A ~ Uniform(0.0, 0.3)\n    f ~ Uniform(0.9, 1.1)\n    g = 9.8\n    L(t) = 1.0 + A * cos(2*f*sqrt(g)*t)\n    p = [L, g]\n    prediction = Array(solve(ODEProblem(pendulum!, u0, tspan, p); saveat=0.1))[1, :]\n    mstd = 0.1 * maximum(abs.(prediction))\n    for i in eachindex(prediction)\n        observation[i] ~ Normal(prediction[i], mstd)\n    end\nend\n```", "```\nplot(; xrange=(0, 0.3), yrange=(0.9, 1.1), legend=false,\n       xlabel=\"A\", ylabel=\"f\")\nfor A in range(0.02, 0.25; length=3)\n    for f in range(0.95, 1.05; length=3)\n     ➊ L(t) = 1.0 + A * cos(2*f*sqrt(g)*t)\n        p = [L, g]\n     ➋ sol = solve(ODEProblem(pendulum!, u0, tspan, p); saveat=0.1)\n        mstd = 0.1 * maximum(abs.(Array(sol)[1, :]))\n        observation = Array(sol)[1, :] + mstd * randn(length(sol))\n     ➌ psamples = sample(pdpen(observation), MH(), 3000)\n        scatter!([A], [f]; mc=:lightgray, ms=9)\n        scatter!([mean(psamples[:A])], [mean(psamples[:f])];\n                 xerror=std(psamples[:A]), yerror=std(psamples[:f]),\n                 mc=:black, shape=:hexagon, ms=9)\n    end\nend\nplot!()\n```"]