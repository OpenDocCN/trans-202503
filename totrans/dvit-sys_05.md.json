["```\nNOT(A)    # is 1 when A is 0\n\nNOT(B)    # is 1 when B is 0\n```", "```\nNOT(A) AND NOT(B)    # is 1 when A and B are both 0\n```", "```\nA AND B   # is 1 when A and B are both 1\n```", "```\n(NOT(A) AND NOT(B)) OR (A AND B)  # is 1 when A and B are both 0 or both 1\n```", "```\nSUM: (NOT(A) AND B) OR (A AND NOT(B))     # 1 when exactly one of A or B is 1\n\nCARRY OUT:  A AND B                       # 1 when both A and B are 1\n```", "```\nx = 6 + 8;\n```", "```\nif( (x + 8) != 0 ) {\n\n    x++;\n\n}\n```", "```\n  OPCODE BITS | OPERAND A SOURCE | OPERAND B SOURCE | RESULT DESTINATION\n```", "```\nMOV M[0x84], Reg1     # move value at memory address 0x84 to register Reg1\n\nADD 2, Reg1, Reg1     # add 2 to value in Reg1 and store result in Reg1\n\nMOV 4, Reg2           # copy the value 4 to register Reg2\n\nADD Reg2, Reg2, Reg2  # compute Reg2 + Reg2, store result in Reg2\n\nJMP L1<0x14>          # jump to executing code at L1 (code address 0x14)\n```", "```\nMOV M[0x84], Reg1     # move value at memory address 0x84 to register Reg1\n\nADD 2, Reg1, Reg1     # add 2 to value in Reg1 and store result in Reg1\n```", "```\nMOV 4, Reg2           # copy the value 4 to register Reg2\n\nADD Reg2, Reg2, Reg2  # compute Reg2 + Reg2, store result in Reg2\n```", "```\nint result = *x; // x holds an int\n\nint temp = *y;   // y holds another int\n\nif (result <= temp) {\n\n   result = result - temp;\n\n}\n\nelse {\n\n   result = result + temp;\n\n}\n\nreturn result;\n```", "```\n  MOV M[0x84], Reg1     # move value at memory address 0x84 to register Reg1\n\n  MOV M[0x88], Reg2     # move value at memory address 0x88 to register Reg2\n\n  CMP Reg1, Reg2        # compare value in Reg1 to value in Reg2\n\n  JLE L1<0x14>          # switch code execution to L1 if Reg1 less than Reg2\n\n  ADD Reg1, Reg2, Reg1  # compute Reg1 + Reg2, store result in Reg1\n\n  JMP L2<0x20>          # switch code execution to L2 (code address 0x20)\n\nL1:\n\n  SUB Reg1, Reg2, Reg1  # compute Reg1 - Reg2, store in Reg1\n\nL2:\n\n  RET                   # return from function\n```"]