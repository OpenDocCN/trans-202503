["```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nimport\n UserNotifications\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions\n\n    launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n\n  ➊\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n  ➋\n center.requestAuthorization\n (options: ➌\n [.alert\n , .sound\n ], \n\n        completionHandler: ➍\n { (granted, error) in\n\n      ➎\n if\n granted {\n\n            print\n (\"Permission for notifications granted!\"\n )\n\n        } else\n {\n\n            print\n (\"Permission for notifications denied.\"\n )\n\n        }\n\n    })\n\n    return true\n\n}\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    try context.save()\n\n    let\n message = \"Wish\n \\(\n firstName)\n \\(\n lastName) a Happy Birthday today!\"\n\n} catch let error {\n\n    print (\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let message = \"Wish \\(firstName) + \\(lastName) a Happy Birthday today!\"\n\n ➊\n let\n content = UNMutableNotificationContent\n ()\n\n ➋\n content.body\n = message\n\n ➌\n content.sound\n = UNNotificationSound\n .default\n ()\n\n} catch let error {\n\n    print(\"Could not save because of \\(error).\")\n\n}\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n   let content = UNMutableNotificationContent()\n\n   content.body = message\n\n   content.sound = UNNotificationSound.default()\n\n ➊\n var\n dateComponents = Calendar\n .current\n .dateComponents\n ([.month\n , .day\n ], \n\n       from: birthdate)\n\n ➋\n dateComponents.hour\n = 8\n\n ➌\n let\n trigger = UNCalendarNotificationTrigger\n (dateMatching: dateComponents, \n\n        repeats: true\n )\n\n} catch let error {\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\ndo {\n\n    --\n *snip* \n --\n\n    let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n        repeats: true)\n\n    if let\n identifier = newBirthday.birthdayId\n {\n\n     ➊\n let\n request = UNNotificationRequest\n (identifier: identifier,\n\n           content: content, trigger: trigger)\n\n     ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n     ➌\n center.add\n (request, withCompletionHandler: nil\n )\n\n    }\n\n} catch let error {\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\nvar dateComponents = Calendar.current.dateComponents([.month, .day],\n\n    from: birthDate)\n\ndateComponents.hour\n = 13\n\ndateComponents.minute\n = 45\n\nlet trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents,\n\n    repeats: true)\n\n--\n *snip* \n --\n\n}\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```", "```\n  let birthday = birthdays[indexPath.row]\n\n  // Remove notification\n\n➊\n if let\n identifier = birthday.birthdayId\n {\n\n    ➋\n let\n center = UNUserNotificationCenter\n .current\n ()\n\n    ➌\n center.removePendingNotificationRequests\n (withIdentifiers: [identifier])\n\n   }\n\n  let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n\n  let context = appDelegate.managedObjectContext\n\n```"]