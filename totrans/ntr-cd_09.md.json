["```\nfunction factorial(n) {\n  if (n <= 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```", "```\nfunction cantor(x, y, length) {\n  line(x, y, x + length, y);\n}\n```", "```\ncantor(10, 20, width - 20);\n```", "```\n  line(x, y + 20, x + length / 3, y + 20);\n```", "```\n  cantor(x, y + 20, length / 3);\n```", "```\n  cantor(x + (2 * length / 3), y + 20, length / 3);\n```", "```\nlet segments = [];\n```", "```\nfunction draw() {\n  background(255);\n  for (let segment of segments) {\n    segment.show();\n  }\n}\n```", "```\n    next.add(new KochLine(a, b));\n    next.add(new KochLine(b, c));\n    next.add(new KochLine(c, d));\n    next.add(new KochLine(d, e));\n```", "```\ntranslate(width / 2, height);\n```", "```\nline(0, 0, 0, -100);\n```", "```\nlet current = \"A\";\n```", "```\nlet next = \"\";\n```", "```\ncurrent = next;\n```", "```\nline(0, 0, 0, length);\ntranslate(0, length);\n```", "```\ntranslate(0, length);\n```", "```\nrotate(angle);\n```", "```\nrotate(-angle);\n```", "```\npush();\n```", "```\npop();\n```"]