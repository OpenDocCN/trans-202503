["```\nvar copy = existing;\n```", "```\npublic sealed class Product\n{\n    public int     Id {get; set;}\n    public decimal Price {get; set;}\n}\npublic readonly struct Purchase\n{\n    **public Product  Item {get; init;}**\n    public DateTime Ordered {get; init;}\n    public int      Quantity {get; init;}\n}\n```", "```\nvar existing = new Purchase\n    {\n        Item = new Product {Id = 10990, Price = 12.99m},\n        Ordered = DateTime.Parse(\"2024-02-02\"),\n        Quantity = 12\n    };\n```", "```\nvar existing = new Purchase\n    {\n        Item = new Product {Id = 10990, Price = 12.99m},\n        Ordered = DateTime.Parse(\"2024-02-02\"),\n        Quantity = 12\n    };\n--`snip--`\n**var copy** **=** **existing;**\n```", "```\nvar existing = new Purchase\n    {\n        Item = new Product {Id = 10990, Price = 12.99m},\n        Ordered = DateTime.Parse(\"2024-02-02\"),\n        Quantity = 12\n    };\nvar copy = existing;\n**copy.Item.Price** **=** **14.99;**\nAssert.That(existing.Item.Price, Is.EqualTo(14.99));\n```", "```\npublic readonly struct Purchase\n{\n    public Product   Item {get; init;}\n    public DateTime  Ordered {get; init;}\n    public int       Quantity {get; init;}\n}\nvar order = new Purchase\n    {\n        Item = new Product {Id = 10990, Price = 12.99m},\n        Ordered = DateTime.Parse(\"2024-02-02\"),\n        Quantity = 12\n    };\n```", "```\n**var __temp** **=** **new Purchase();**\n__temp.Item = new Product {Id = 10990, Price = 12.99m};\n__temp.Ordered = DateTime.Parse(\"2024-02-02\");\n__temp.Quantity = 12;\n**var order** **=** **__temp;**\n```", "```\norder = new Purchase\n    {\n        **Item** **=** **order.Item,**\n        Ordered = DateTime.Parse(\"2024-02-03\"),\n        Quantity = 5\n    };\n```", "```\norder = new Purchase();\n**order.Item** **=** **order.Item;**\norder.Ordered = DateTime.Parse(\"2024-02-03\");\norder.Quantity = 5;\n```", "```\npublic readonly struct Color\n{\n    public Color(int red, int green, int blue)\n        => (Red, Green, Blue) = (red, green, blue);\n    public int Red {get;}\n    public int Green {get;}\n    public int Blue {get;}\n}\n**var background** **=** **new Color(red: 0xFF, green: 0xA5, blue: 0x0);**\n```", "```\nColor __temp;\n__temp..ctor(red: 0xFF, green: 0xA5, blue: 0x0);\nColor background = __temp;\n```", "```\npublic class Brush\n{\n    public void Assign(int r, int g, int b)\n    {\n        **background** **=** **new Color(red: r, green: g, blue: b);**\n    }\n    private Color background = new Color(red: 0xFF, green: 0xA5, blue: 0);\n}\n```", "```\npublic sealed record Color(int Red, int Green, int Blue);\nvar pink = new Color(Red: 0xFF, Green: 0xA5, Blue: 0xFF);\n**var orange** **=** **pink with {Blue** **=** **0};**\n```", "```\nvar black = pink;\nAssert.That(ReferenceEquals(black, pink), Is.True);\n```", "```\npublic readonly struct Coordinate\n{\n    public int X {get; init;}\n    public int Y {get; init;}\n    public object Clone()\n    {\n        var item = new Coordinate {X = this.X, Y = this.Y};\n        return item;\n    }\n    `--snip--`\n}\n```", "```\nvar original = new Coordinate(`--snip--)`;\nobject box = original.Clone();\n**Coordinate clone** **=** **(Coordinate)box;**\n```", "```\n**public readonly struct Color : IComparable<Color>**\n{\n    public Color(uint val) => rgb = val;\n    int IComparable<Color>.CompareTo(Color other)\n        => rgb.CompareTo(other.rgb);\n    private readonly uint rgb;\n}\n```", "```\nvar red = new Color(0xFF0000);\nvar green = new Color(0x00FF00);\n**IComparable<Color>** **compare** **=** **red;**\nvar less = compare.CompareTo(green);\n```", "```\npublic static bool LessThan<T>(T left, T right)\n    **where T : IComparable<T>**\n{\n    return left.CompareTo(right) < 0;\n}\nvar red = new Color(0xFF0000);\nvar green = new Color(0x00FF00);\nAssert.That(LessThan(green, red), Is.True);\n```", "```\nDateTime now = DateTime.Now;\n--`snip--`\nConsole.WriteLine(\"Time now: {0}\", now);\n```", "```\npublic readonly struct Speed\n{\n    private Speed(double ms) => InMetersPerSecond = ms;\n    public double InMetersPerSecond {get;}\n    public static Speed FromMetersPerSecond(double val) => new Speed(val);\n    **public static Speed Incremented(Speed original)**\n    **{**\n        **var result** **=**\n            **Speed.FromMetersPerSecond(original.InMetersPerSecond** **+** **10);**\n        **return result;**\n    **}**\n}\nvar start = Speed.FromMetersPerSecond(40);\nvar end = Speed.Incremented(start);\nAssert.That(end.InMetersPerSecond, Is.EqualTo(50));\n```", "```\npublic static class SpeedExtensions\n{\n    **public static double InMph(this Speed speed)**\n        => speed.InMetersPerSecond * 2.236936;\n}\nvar mph = initial.InMph();\n```", "```\npublic readonly struct Velocity\n{\n    public Velocity(Speed speed, Angle angle)\n        => (Speed, Direction) = (speed, angle);\n    **public Speed Speed {get;}**\n    public Angle Direction {get;}\n}\n```", "```\n.property instance valuetype Speed Speed()\n{\n    .get instance valuetype Speed Velocity::**get_Speed**()\n} // end of property Velocity::Speed\n```", "```\n.method public hidebysig specialname instance valuetype Speed\n    **get_Speed**() cil managed\n{\n    `--snip--`\n```", "```\npublic Speed get_Speed()\n{\n    // return a Speed value\n}\n```", "```\nvar start = Speed.FromMetersPerSecond(55);\nvar increase = Speed.FromMetersPerSecond(15);\nvar final = **start** **+** **increase**;\n```", "```\npublic static Speed operator+(Speed left, Speed right)\n    => new Speed(left.InMetersPerSecond + right.InMetersPerSecond);\n```", "```\npublic readonly struct Velocity\n{\n    public Velocity(Speed speed, Angle angle)\n        => (Speed, Direction) = (speed, angle);\n    public Speed Speed {get;}\n    public Angle Direction {get;}\n    **public static implicit operator Speed(Velocity velocity)**\n        **=>** **velocity.Speed;**\n}\n```", "```\npublic double **DistanceInKm(Speed speed, TimeSpan elapsed)**\n    => speed.InMetersPerSecond / 1000 * elapsed.TotalSeconds;\nvar velocity = new Velocity(initial, direction);\nvar distance = **DistanceInKm(velocity, TimeSpan.FromHours(2));**\n```", "```\npublic struct Speed\n{\n    public double InMetersPerSecond {get; set;}\n    public static Speed FromKmh(double val)\n        => new Speed(val * 1000 / 3600);\n    private Speed(double ms) => InMetersPerSecond = ms;\n}\n**Speed.FromKmh(70).InMetersPerSecond** **=** **15.2;**\n```", "```\n[CS1612] Cannot modify the return value of 'Speed.FromKmh(double)' because it is not a variable\n```", "```\nvar start = Speed.FromKmh(70);\nstart.InMetersPerSecond = 15.2;\n```", "```\npublic class ReadBuffer\n{\n    public StringBuilder Data()\n        => buffer;\n    private readonly StringBuilder buffer = new();\n}\nvar buffer = new ReadBuffer();\n**buffer.Data().Capacity** **=** **128;**\n```", "```\nbuffer.Data() = new StringBuilder();\n```", "```\n[CS0131] The left-hand side of an assignment must be a variable, property or indexer\n```", "```\npublic struct Speed\n{\n    public double InMetersPerSecond {get; set;}\n    **public void Reset()** **=>** **InMetersPerSecond** **=** **0;**\n    `--snip--`\n}\n```", "```\nvar velocity = new Velocity(Speed.FromKmh(55), Angle.FromDegrees(45));\n**velocity.Speed.Reset();**\nAssert.That(velocity.Speed.InMetersPerSecond, Is.EqualTo(0));\n```", "```\npublic class Journey\n{\n    `--snip--`\n    public Velocity this[int idx]\n    {\n        get => legs[idx]; set => legs[idx] = value;\n  }\n    private List<Velocity> legs = new List<Velocity>();\n}\n**journey[0].Speed.Reset();**\n```", "```\npublic static double BallisticRange(<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">in Speed initialSpeed, in Angle initialDirection</samp>)\n{\n    const double Gravity = 9.81;\n    return initialSpeed.InMetersPerSecond * initialSpeed.InMetersPerSecond *\n            Math.Sin(initialDirection.InRadians * 2) / Gravity;\n}\npublic readonly struct Velocity\n{\n    public Velocity(Speed speed, Angle angle)\n        => (Speed, Direction) = (speed, angle);\n public Speed Speed {get;}\n    public Angle Direction {get;}\n}\nvar velocity = new Velocity(Speed.FromMetersPerSecond(55),\n                            Angle.FromRadians(0.78));\n**var distance** **=** **BallisticRange(velocity.Speed, velocity.Direction);**\n```", "```\nvar __temp_Speed = velocity.Speed;\nvar __temp_Angle = velocity.Direction;\nvar distance = BallisticRange(in __temp_Speed, in __temp_Angle);\n```", "```\npublic struct Speed\n{\n      `--snip--`\n    public double InMetersPerSecond => amount;\n    private readonly double amount;\n}\npublic struct Angle\n{\n    public double InRadians {get;}\n      `--snip--`\n}\npublic static double BallisticRange(in Speed initialSpeed, in Angle initialDirection)\n{\n    const double Gravity = 9.81;\n    return initialSpeed.InMetersPerSecond * initialSpeed.InMetersPerSecond *\n            Math.Sin(initialDirection.InRadians * 2) / Gravity;\n}\n```", "```\npublic double InMetersPerSecond\n{\n    get {return amount;}\n}\n```", "```\n.method public hidebysig specialname instance float64\nget_InRadians() cil managed\n{\n  .custom instance void [System.Runtime]\n          **System.Runtime.CompilerServices.IsReadOnlyAttribute**::.ctor()\n   = (01 00 00 00)\n--`snip--`\n```", "```\npublic sealed class Projectile\n{\n    public Projectile(Speed speed, Angle angle)\n        => (initial, direction) = (speed, angle);\n    **public ref readonly Speed Speed** **=>** **ref initialSpeed;**\n    **public ref readonly Angle Angle** **=>** **ref initialDirection;**\n    private readonly Speed initialSpeed;\n    private readonly Angle initialDirection;\n}\n```", "```\nvar dart = new Projectile(initial, direction);\n**ref readonly var speed** **=** **ref dart.Speed;**\n**ref readonly var angle** **=** **ref dart.Angle;**\nvar kmh = speed.InMetersPerSecond;\nvar degrees = angle.InRadians;\n```", "```\npublic sealed class Projectile\n{\n    public double BallisticRange()\n    {\n        const double Gravity = 9.81;\n        return initialSpeed.InMetersPerSecond * initialSpeed.InMetersPerSecond *\n               Math.Sin(initialDirection.InRadians * 2) / Gravity;\n    }\n    **private readonly Speed initialSpeed;**\n    **private readonly Angle initialDirection;**\n}\n```", "```\npublic struct Speed\n{\n    `--snip--`\n    **public readonly double InMetersPerSecond** **=>** **amount;**\n    public double InKmh\n    {\n        **readonly get** **=>** **amount / 1000 * 3600;** private set {amount = value / 3.6;}\n  }\n    private double amount;\n}\n```", "```\npublic struct Angle\n{\n    public readonly double InRadians {get;}\n    **public readonly double Sin()**\n        => Math.Sin(InRadians);\n}\n```", "```\n**public readonly struct Speed**\n{\n    public Speed(double amount) => this.amount = amount;\n    public double InMetersPerSecond => amount;\n    public double InKmh => amount / 1000 * 3600;\n    private readonly double amount;\n}\n```"]