- en: '22'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cellular Communications
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Have your Arduino dial a telephone number when an event occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a text message to a cell phone using the Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control devices connected to an Arduino via text message from a cell phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can connect your Arduino projects to a cell phone network to allow simple
    communication between your Arduino and a cellular or landline phone. With a little
    imagination, you can come up with many uses for this type of communication, including
    some of the projects included in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to review this chapter before you purchase any hardware, because the
    success of the projects will depend on your cellular network. Your network must
    be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Operate at UMTS (3G) 850 MHz, 900 MHz, 1900 MHz, or 2100 MHz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the use of devices not supplied by the network provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make use of these projects, you might consider selecting either a prepaid
    calling plan or a plan that offers a lot of included text messages, in case an
    error in your sketch causes the project to send out several SMS (Short Message
    Service) text messages. Also, make sure the requirement to enter a PIN to use
    the SIM card is turned off. (You should be able to do this easily by inserting
    the SIM card in a regular cell phone and changing the setting in the security
    menu.)
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the projects use a common hardware configuration, so we’ll set that up
    first. You’ll need specific hardware to complete the projects in this chapter,
    starting with a SIM5320-type 3G GSM shield and antenna, shown in [Figure 22-1](#figure22-1).
    This shield is available from TinySine ([https://www.tinyosshop.com/](https://www.tinyosshop.com/))
    and its distributors. There are two types of SIM5320 shield: the SIM5320A and
    SIM5320E.'
  prefs: []
  type: TYPE_NORMAL
- en: The -E version uses the UMTS/HSDPA 900/2100 MHz frequency bands (mainly for
    European users), and the -A version uses the UMTS/HSDPA 850/1900 MHz frequency
    band (mainly for US-based users and Australians using the Telstra network).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22001](image_fi/500587c22/f22001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-1: 3G shield with antenna attached'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need a power supply. In some situations, the 3G shield can draw
    up to 2 A of current (more than is available from the Arduino) and will damage
    your Arduino if it’s used without external power. Therefore, you will need an
    external power supply. This can be a DC plug pack or wall wart power supply brick
    (or a large 7.2 V rechargeable battery, solar panel/battery source, 12 V battery,
    or similar, as long as it doesn’t exceed 12 V DC) that can offer up to 2 A of
    current.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware Configuration and Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s configure and test the hardware by making sure that the 3G shield
    can communicate with the cellular network and the Arduino. We first need to set
    up the serial communication jumpers, since the 3G shield communicates with the
    Arduino via a serial port in the same manner as the GPS modules used in Chapter
    15. We can set which digital pins the shield will use to communicate with the
    Arduino using jumpers on the top right of the shield. All our projects will use
    digital pin 2 for shield transmit and digital pin 3 for shield receive. To configure
    this, connect jumpers over the TX2 and RX3 pins, as shown in [Figure 22-2](#figure22-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22002](image_fi/500587c22/f22002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-2: Shield serial configuration jumpers'
  prefs: []
  type: TYPE_NORMAL
- en: Next, turn the shield over and insert your SIM card into the holder, as shown
    in [Figure 22-3](#figure22-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22003](image_fi/500587c22/f22003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-3: SIM card in place'
  prefs: []
  type: TYPE_NORMAL
- en: Next, gently insert the 3G shield into the Arduino. Connect the external power
    and the USB cable between the Arduino and the PC. Finally, just as with a cellular
    phone, you need to turn the SIM module on (and off) using the power button on
    the top-left corner of the shield, as shown in [Figure 22-4](#figure22-4). Press
    the button for 2 seconds and let go. After a moment, the P (for power) and S (for
    status) LEDs will come on, and the blue LED will start blinking once the 3G shield
    has registered with the cellular network.
  prefs: []
  type: TYPE_NORMAL
- en: For future reference, the shield’s power button is connected to digital pin
    8, so you can control the power from your sketch instead of manually turning the
    button on or off.
  prefs: []
  type: TYPE_NORMAL
- en: '![f22004](image_fi/500587c22/f22004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-4: 3G shield power button and status LEDs'
  prefs: []
  type: TYPE_NORMAL
- en: Now enter and upload the sketch shown in [Listing 22-1](#listing22-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 22-1: 3G shield test sketch'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch simply relays all the information coming from the 3G shield to the
    Serial Monitor. The 3G shield has a software serial connection between it and
    Arduino digital pins 2 and 3 so that it won’t interfere with the normal serial
    connection between the Arduino and the PC, which is on digital pins 0 and 1\.
    We set up a virtual serial port for the 3G shield at 1, 2, and 3. By default,
    the 3G shield communicates over serial at 4,800 bps, and this is fine for our
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve uploaded the sketch, open the Serial Monitor window and wait about
    10 seconds. Then, using a different telephone, call the number for your 3G shield.
    You should see data similar to that shown in [Figure 22-5](#figure22-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22005](image_fi/500587c22/f22005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-5: Example output from [Listing 22-1](#listing22-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The `RING` notifications come from the shield when you are calling it, and the
    missed call notification shows up when you end the call to the shield. If your
    cellular network supports caller ID, the originating phone number is shown after
    the time. (The number has been blacked out in [Figure 22-5](#figure22-5) for the
    sake of privacy.) Now that the 3G shield is operating, we can make use of various
    functions for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #63: Building an Arduino Dialer'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By the end of this project, your Arduino will dial a telephone number when an
    event occurs, as determined by your Arduino sketch. For example, if the temperature
    in your storage freezer rises above a certain level or your burglar alarm system
    activates, you could have the Arduino call you from a preset number, wait for
    20 seconds, and then hang up. Your phone’s caller ID will identify the phone number
    as the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project uses the hardware described at the beginning of the chapter as
    well as any extra circuitry you choose for your application. For demonstration
    purposes, we’ll use a button to trigger the call.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the hardware already discussed, here’s what you’ll need to create
    this project:'
  prefs: []
  type: TYPE_NORMAL
- en: One push button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 kΩ resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 100 nF capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Schematic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the external circuitry, as shown in [Figure 22-6](#figure22-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22006](image_fi/500587c22/f22006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-6: Schematic for Project 63'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter *but don’t upload* the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After setting up the software serial and regular serial ports, the sketch waits
    for a press of the button connected to digital pin 7 at 5. Once it’s pressed,
    the function `callSomeone()` is run at 6. At 1, digital pin 8 is toggled `HIGH`
    for 2 seconds, turning the shield on, and waits 10 seconds to give the shield
    time to register with the cellular network. Next, at 2, the sketch sends the command
    to dial a telephone number. Finally, after the call has been ended at 3, the shield
    is turned off to conserve power at 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll replace `xxxxxxxxxx` with the number you want your Arduino to call.
    Use the same dialing method that you’d use from your mobile phone. For example,
    if you wanted the Arduino to call 212.555.1212, you’d add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After you have entered the phone number, you can upload the sketch, wait a minute
    to allow time for the 3G module to connect to the network, and then test it by
    pressing the button. It’s very easy to integrate the dialing function into an
    existing sketch, because it’s simply called when required at 2. From here, it’s
    up to you to find a reason—possibly triggered by a temperature sensor, a light
    sensor, or any other input reaching a certain level—for your Arduino to dial a
    phone number.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s drag your Arduino into the 21st century by sending a text message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #64: Building an Arduino Texter'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, the Arduino will send a text message to another cell phone
    when an event occurs. To simplify the code, we’ll use the SerialGSM Arduino library,
    available from [https://github.com/meirm/SerialGSM/archive/master.zip](https://github.com/meirm/SerialGSM/archive/master.zip).
    After you’ve installed the library, restart the Arduino IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The hardware you’ll need for this project is identical to that for Project 63.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter the following sketch into the Arduino IDE, but *don’t upload it* yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 3G shield is set up as normal at 1 and in `void setup()`. Button presses
    are detected at 4, and the function `sendSMS()` is called. This simple function
    sends a text message to the cell phone number stored at 3.
  prefs: []
  type: TYPE_NORMAL
- en: Before uploading the sketch, replace `xxxxxxxxxxx` with the recipient’s cell
    phone number; enter the area code plus number, without any spaces or brackets.
    For example, to send a text to 212.555.1212 in the United States, you would store
    `2125551212`.
  prefs: []
  type: TYPE_NORMAL
- en: '![f22007](image_fi/500587c22/f22007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-7: A sample text message being received'
  prefs: []
  type: TYPE_NORMAL
- en: The text message to be sent is stored at 2. (Note that the maximum length for
    a message is 160 characters.)
  prefs: []
  type: TYPE_NORMAL
- en: After you have stored a sample text message and a destination number, upload
    the sketch, wait 30 seconds, and then press the button. In a moment, the message
    should arrive on the destination phone, as shown in [Figure 22-7](#figure22-7).
  prefs: []
  type: TYPE_NORMAL
- en: Project 64 can be integrated quite easily into other sketches, and various text
    messages could be sent by comparing data against a parameter with a `switch case`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #65: Setting Up an SMS Remote Control'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you’ll control the digital output pins on your Arduino by sending
    a text message from your cell phone. You should be able to use your existing knowledge
    to add various devices to control. We’ll allow for four separate digital outputs,
    but you can control more or fewer as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To turn on or off four digital outputs (pins 10 through 13 in this example),
    you’d send a text message to your Arduino in the following format: `#a``x``b``x``c``x``d``x`,
    replacing `x` with either a `0` for off or a `1` for on. For example, to turn
    on all four outputs, you’d send `#a1b1c1d1`.'
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project uses the hardware described at the start of the chapter, plus
    any extra circuitry you choose. We’ll use four LEDs to indicate the status of
    the digital outputs being controlled. Therefore, the following extra hardware
    is required for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: Four LEDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four 560 Ω resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Schematic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the external circuitry as shown in [Figure 22-8](#figure22-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![f22008](image_fi/500587c22/f22008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22-8: Schematic for Project 65'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this project, the 3G shield library is not used. Instead, we rely on the
    raw commands to control the module. Furthermore, we don’t turn the shield on or
    off during the sketch, as we need it to be on in order to listen for incoming
    text messages. Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project, the Arduino monitors every text character sent from the 3G
    shield. Thus, at 1, we tell the shield to convert incoming SMS messages to text
    and send the contents to the virtual serial port at 2. Next, the Arduino waits
    for a text message to come from the shield at 3.
  prefs: []
  type: TYPE_NORMAL
- en: Because the commands sent from the cell phone and passed by the 3G module to
    control pins on the Arduino start with a `#`, the sketch waits for a hash mark
    (`#`) to appear in the text message at 4. At 5, the first output parameter `a`
    is checked—if it is followed by a `0` or `1`, the pin is turned off or on, respectively.
    The process repeats for the next three outputs controlled by `b`, `c`, and `d`.
  prefs: []
  type: TYPE_NORMAL
- en: Fire up your imagination to think of how easy it would be to use this project
    to create a remote control for all manner of things—lights, pumps, alarms, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the three projects in this chapter, you’ve created a great framework on
    which to build your own projects that can communicate over a cell network. You’re
    limited only by your imagination—for example, you could receive a text message
    if your basement floods or turn on your air conditioner from your cell phone.
    Once again, remember to take heed of network charges before setting your projects
    free.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, after having read about (and hopefully built) the 65 projects
    in this book, you should have the understanding, knowledge, and confidence you
    need to create your own Arduino-based projects. You know the basic building blocks
    used to create many projects, and I’m sure you will be able to apply the technology
    to solve all sorts of problems and have fun at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m always happy to receive feedback about this book, which can be left via
    the contact details at the book’s web page: [https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/).'
  prefs: []
  type: TYPE_NORMAL
- en: But remember—this is only the beginning. You can find many more forms of hardware
    to work with, and with some thought and planning, you can work with them all.
    You’ll find a huge community of Arduino users on the internet (in such places
    as the Arduino forum at [http://forum.arduino.cc/](http://forum.arduino.cc/)),
    and even at a local hackerspace or club.
  prefs: []
  type: TYPE_NORMAL
- en: So don’t just sit there—make something!
  prefs: []
  type: TYPE_NORMAL
