- en: '22'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '22'
- en: Cellular Communications
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 移动通信
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将会：
- en: Have your Arduino dial a telephone number when an event occurs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当事件发生时，让你的Arduino拨打一个电话号码
- en: Send a text message to a cell phone using the Arduino
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino发送短信到手机
- en: Control devices connected to an Arduino via text message from a cell phone
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过手机的短信控制连接到Arduino的设备
- en: You can connect your Arduino projects to a cell phone network to allow simple
    communication between your Arduino and a cellular or landline phone. With a little
    imagination, you can come up with many uses for this type of communication, including
    some of the projects included in this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将Arduino项目连接到手机网络，实现Arduino与手机或固定电话之间的简单通信。凭借一些想象力，你可以为这种通信类型设计许多应用，包括本章中的一些项目。
- en: 'Be sure to review this chapter before you purchase any hardware, because the
    success of the projects will depend on your cellular network. Your network must
    be able to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在购买任何硬件之前，一定要先审阅本章内容，因为项目的成功将依赖于你的手机网络。你的网络必须能够做到以下几点：
- en: Operate at UMTS (3G) 850 MHz, 900 MHz, 1900 MHz, or 2100 MHz.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在UMTS（3G）850 MHz、900 MHz、1900 MHz或2100 MHz频段下运行。
- en: Allow the use of devices not supplied by the network provider.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用网络提供商未提供的设备。
- en: To make use of these projects, you might consider selecting either a prepaid
    calling plan or a plan that offers a lot of included text messages, in case an
    error in your sketch causes the project to send out several SMS (Short Message
    Service) text messages. Also, make sure the requirement to enter a PIN to use
    the SIM card is turned off. (You should be able to do this easily by inserting
    the SIM card in a regular cell phone and changing the setting in the security
    menu.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这些项目，你可能需要选择预付费通话计划或提供大量短信的计划，以防你的程序出现错误，导致项目发送出多个短信（短消息服务，SMS）。此外，确保SIM卡使用时不要求输入PIN码。（你可以通过将SIM卡插入普通手机并在安全设置菜单中更改该设置来轻松完成此操作。）
- en: The Hardware
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件
- en: 'All the projects use a common hardware configuration, so we’ll set that up
    first. You’ll need specific hardware to complete the projects in this chapter,
    starting with a SIM5320-type 3G GSM shield and antenna, shown in [Figure 22-1](#figure22-1).
    This shield is available from TinySine ([https://www.tinyosshop.com/](https://www.tinyosshop.com/))
    and its distributors. There are two types of SIM5320 shield: the SIM5320A and
    SIM5320E.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有项目都使用共同的硬件配置，因此我们将首先进行设置。你需要特定的硬件来完成本章中的项目，首先是SIM5320类型的3G GSM扩展板和天线，如[图22-1](#figure22-1)所示。这个扩展板可以从TinySine
    ([https://www.tinyosshop.com/](https://www.tinyosshop.com/))及其分销商处购买。SIM5320扩展板有两种类型：SIM5320A和SIM5320E。
- en: The -E version uses the UMTS/HSDPA 900/2100 MHz frequency bands (mainly for
    European users), and the -A version uses the UMTS/HSDPA 850/1900 MHz frequency
    band (mainly for US-based users and Australians using the Telstra network).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: -E版本使用UMTS/HSDPA 900/2100 MHz频段（主要供欧洲用户使用），而-A版本使用UMTS/HSDPA 850/1900 MHz频段（主要供美国用户和使用Telstra网络的澳大利亚用户使用）。
- en: '![f22001](image_fi/500587c22/f22001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f22001](image_fi/500587c22/f22001.png)'
- en: 'Figure 22-1: 3G shield with antenna attached'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图22-1：附加天线的3G扩展板
- en: You’ll also need a power supply. In some situations, the 3G shield can draw
    up to 2 A of current (more than is available from the Arduino) and will damage
    your Arduino if it’s used without external power. Therefore, you will need an
    external power supply. This can be a DC plug pack or wall wart power supply brick
    (or a large 7.2 V rechargeable battery, solar panel/battery source, 12 V battery,
    or similar, as long as it doesn’t exceed 12 V DC) that can offer up to 2 A of
    current.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个电源供应。在某些情况下，3G扩展板可能需要最多2 A的电流（比Arduino本身能够提供的电流还要多），如果在没有外部电源的情况下使用，将会损坏你的Arduino。因此，你需要一个外部电源。这个电源可以是一个直流插头电源适配器、墙壁适配器电源（或者是一个大容量的7.2V可充电电池、太阳能电池板/电池源、12V电池等，只要它不超过12V
    DC），能够提供最多2 A的电流。
- en: Hardware Configuration and Testing
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件配置与测试
- en: Now let’s configure and test the hardware by making sure that the 3G shield
    can communicate with the cellular network and the Arduino. We first need to set
    up the serial communication jumpers, since the 3G shield communicates with the
    Arduino via a serial port in the same manner as the GPS modules used in Chapter
    15. We can set which digital pins the shield will use to communicate with the
    Arduino using jumpers on the top right of the shield. All our projects will use
    digital pin 2 for shield transmit and digital pin 3 for shield receive. To configure
    this, connect jumpers over the TX2 and RX3 pins, as shown in [Figure 22-2](#figure22-2).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们配置并测试硬件，确保 3G 模块可以与蜂窝网络和 Arduino 通信。我们首先需要设置串口通信跳线，因为 3G 模块通过串口与 Arduino
    通信，方式与第 15 章中使用的 GPS 模块相同。我们可以使用模块顶部右侧的跳线来设置模块与 Arduino 通信所使用的数字引脚。我们所有的项目将使用数字引脚
    2 作为模块的发送引脚，数字引脚 3 作为接收引脚。要配置此设置，请在 TX2 和 RX3 引脚之间连接跳线，如 [图 22-2](#figure22-2)
    所示。
- en: '![f22002](image_fi/500587c22/f22002.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![f22002](image_fi/500587c22/f22002.png)'
- en: 'Figure 22-2: Shield serial configuration jumpers'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-2：模块串口配置跳线
- en: Next, turn the shield over and insert your SIM card into the holder, as shown
    in [Figure 22-3](#figure22-3).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，翻转模块，将 SIM 卡插入卡槽，如 [图 22-3](#figure22-3) 所示。
- en: '![f22003](image_fi/500587c22/f22003.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![f22003](image_fi/500587c22/f22003.png)'
- en: 'Figure 22-3: SIM card in place'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-3：已安装 SIM 卡
- en: Next, gently insert the 3G shield into the Arduino. Connect the external power
    and the USB cable between the Arduino and the PC. Finally, just as with a cellular
    phone, you need to turn the SIM module on (and off) using the power button on
    the top-left corner of the shield, as shown in [Figure 22-4](#figure22-4). Press
    the button for 2 seconds and let go. After a moment, the P (for power) and S (for
    status) LEDs will come on, and the blue LED will start blinking once the 3G shield
    has registered with the cellular network.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，轻轻将 3G 模块插入 Arduino。连接外部电源和 Arduino 与 PC 之间的 USB 电缆。最后，就像使用手机一样，你需要使用模块左上角的电源按钮打开（和关闭）SIM
    模块，如 [图 22-4](#figure22-4) 所示。按住按钮 2 秒钟后松开。片刻之后，P（电源）和 S（状态）LED 会亮起，蓝色 LED 会开始闪烁，表示
    3G 模块已成功注册到蜂窝网络。
- en: For future reference, the shield’s power button is connected to digital pin
    8, so you can control the power from your sketch instead of manually turning the
    button on or off.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 供将来参考，模块的电源按钮连接到数字引脚 8，因此你可以从草图中控制电源，而无需手动开关按钮。
- en: '![f22004](image_fi/500587c22/f22004.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![f22004](image_fi/500587c22/f22004.png)'
- en: 'Figure 22-4: 3G shield power button and status LEDs'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-4：3G 模块电源按钮和状态 LED
- en: Now enter and upload the sketch shown in [Listing 22-1](#listing22-1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传 [列表 22-1](#listing22-1) 中显示的草图。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 22-1: 3G shield test sketch'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 22-1：3G 模块测试草图
- en: This sketch simply relays all the information coming from the 3G shield to the
    Serial Monitor. The 3G shield has a software serial connection between it and
    Arduino digital pins 2 and 3 so that it won’t interfere with the normal serial
    connection between the Arduino and the PC, which is on digital pins 0 and 1\.
    We set up a virtual serial port for the 3G shield at 1, 2, and 3. By default,
    the 3G shield communicates over serial at 4,800 bps, and this is fine for our
    projects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图简单地将来自 3G 模块的所有信息转发到串口监视器。3G 模块通过软件串口与 Arduino 的数字引脚 2 和 3 连接，这样它就不会干扰 Arduino
    和 PC 之间的正常串口连接（该连接使用数字引脚 0 和 1）。我们为 3G 模块设置了一个虚拟串口，编号为 1、2 和 3。默认情况下，3G 模块通过串口以
    4800 bps 的速度进行通信，这对于我们的项目来说已经足够了。
- en: Once you’ve uploaded the sketch, open the Serial Monitor window and wait about
    10 seconds. Then, using a different telephone, call the number for your 3G shield.
    You should see data similar to that shown in [Figure 22-5](#figure22-5).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，打开串口监视器窗口，等待大约 10 秒钟。然后，使用另一部电话拨打你 3G 模块的号码。你应该能看到类似于 [图 22-5](#figure22-5)
    中显示的数据。
- en: '![f22005](image_fi/500587c22/f22005.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f22005](image_fi/500587c22/f22005.png)'
- en: 'Figure 22-5: Example output from [Listing 22-1](#listing22-1)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-5：[列表 22-1](#listing22-1) 输出示例
- en: The `RING` notifications come from the shield when you are calling it, and the
    missed call notification shows up when you end the call to the shield. If your
    cellular network supports caller ID, the originating phone number is shown after
    the time. (The number has been blacked out in [Figure 22-5](#figure22-5) for the
    sake of privacy.) Now that the 3G shield is operating, we can make use of various
    functions for our projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拨打电话时，`RING` 通知会来自扩展板，而未接来电通知则会在你挂断电话时显示。如果你的移动网络支持来电显示，源电话号码将在时间后显示。（为了隐私保护，[图
    22-5](#figure22-5) 中的号码已经被打上了马赛克。）现在 3G 扩展板已经开始工作，我们可以利用其提供的各种功能来进行项目开发。
- en: 'Project #63: Building an Arduino Dialer'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #63：构建一个 Arduino 拨号器'
- en: By the end of this project, your Arduino will dial a telephone number when an
    event occurs, as determined by your Arduino sketch. For example, if the temperature
    in your storage freezer rises above a certain level or your burglar alarm system
    activates, you could have the Arduino call you from a preset number, wait for
    20 seconds, and then hang up. Your phone’s caller ID will identify the phone number
    as the Arduino.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这个项目后，你的 Arduino 会在事件发生时拨打一个电话号码，事件由你的 Arduino 草图决定。例如，如果存储冷冻柜的温度超过某个水平，或者入侵报警系统被激活，你可以让
    Arduino 从预设号码拨打给你，等待 20 秒钟后挂断。你的电话的来电显示将会把电话号码识别为 Arduino。
- en: The Hardware
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: This project uses the hardware described at the beginning of the chapter as
    well as any extra circuitry you choose for your application. For demonstration
    purposes, we’ll use a button to trigger the call.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目使用了章节开头描述的硬件以及你为应用选择的任何额外电路。为了演示，我们将使用按钮来触发电话拨打。
- en: 'In addition to the hardware already discussed, here’s what you’ll need to create
    this project:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面讨论的硬件外，创建这个项目还需要以下组件：
- en: One push button
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮
- en: One 10 kΩ resistor
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 10 kΩ 电阻
- en: One 100 nF capacitor
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 100 nF 电容
- en: Various connecting wires
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One breadboard
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: The Schematic
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: Connect the external circuitry, as shown in [Figure 22-6](#figure22-6).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 22-6](#figure22-6) 所示连接外部电路。
- en: '![f22006](image_fi/500587c22/f22006.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f22006](image_fi/500587c22/f22006.png)'
- en: 'Figure 22-6: Schematic for Project 63'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-6：项目 63 的电路图
- en: The Sketch
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter *but don’t upload* the following sketch:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 *但不要上传* 以下草图：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Understanding the Sketch
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: After setting up the software serial and regular serial ports, the sketch waits
    for a press of the button connected to digital pin 7 at 5. Once it’s pressed,
    the function `callSomeone()` is run at 6. At 1, digital pin 8 is toggled `HIGH`
    for 2 seconds, turning the shield on, and waits 10 seconds to give the shield
    time to register with the cellular network. Next, at 2, the sketch sends the command
    to dial a telephone number. Finally, after the call has been ended at 3, the shield
    is turned off to conserve power at 4.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好软件串口和常规串口后，草图会等待按下连接到数字引脚 7 的按钮。当按钮被按下后，`callSomeone()` 函数会在第 6 步运行。在第 1
    步时，数字引脚 8 会被切换为 `HIGH`，保持 2 秒钟，打开扩展板，并等待 10 秒钟让扩展板与移动网络注册。接下来，在第 2 步，草图发送拨打电话号码的指令。最后，在第
    3 步通话结束后，扩展板在第 4 步关闭以节省电力。
- en: 'You’ll replace `xxxxxxxxxx` with the number you want your Arduino to call.
    Use the same dialing method that you’d use from your mobile phone. For example,
    if you wanted the Arduino to call 212.555.1212, you’d add this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 `xxxxxxxxxx` 替换为你希望 Arduino 拨打的电话号码。使用与手机拨号相同的方式。例如，如果你想让 Arduino 拨打 212.555.1212，你需要添加以下内容：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After you have entered the phone number, you can upload the sketch, wait a minute
    to allow time for the 3G module to connect to the network, and then test it by
    pressing the button. It’s very easy to integrate the dialing function into an
    existing sketch, because it’s simply called when required at 2. From here, it’s
    up to you to find a reason—possibly triggered by a temperature sensor, a light
    sensor, or any other input reaching a certain level—for your Arduino to dial a
    phone number.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入电话号码后，你可以上传草图，等待一分钟让 3G 模块连接到网络，然后通过按下按钮来进行测试。将拨号功能集成到现有的草图中非常简单，因为只需要在第
    2 步时调用它。之后，你可以找到触发条件——可能是温度传感器、光传感器，或者其他任何输入达到某个水平——来使 Arduino 拨打一个电话号码。
- en: Now let’s drag your Arduino into the 21st century by sending a text message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过发送短信把你的 Arduino 带入 21 世纪。
- en: 'Project #64: Building an Arduino Texter'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #64：构建一个 Arduino 文字信息发送器'
- en: In this project, the Arduino will send a text message to another cell phone
    when an event occurs. To simplify the code, we’ll use the SerialGSM Arduino library,
    available from [https://github.com/meirm/SerialGSM/archive/master.zip](https://github.com/meirm/SerialGSM/archive/master.zip).
    After you’ve installed the library, restart the Arduino IDE.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，当事件发生时，Arduino将向另一部手机发送短信。为简化代码，我们将使用SerialGSM Arduino库，您可以从[https://github.com/meirm/SerialGSM/archive/master.zip](https://github.com/meirm/SerialGSM/archive/master.zip)下载该库。安装库后，重新启动Arduino
    IDE。
- en: The hardware you’ll need for this project is identical to that for Project 63.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本项目中使用的硬件与项目63中使用的硬件相同。
- en: The Sketch
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter the following sketch into the Arduino IDE, but *don’t upload it* yet:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下草图输入到Arduino IDE中，但*暂时不要上传*：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Understanding the Sketch
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: The 3G shield is set up as normal at 1 and in `void setup()`. Button presses
    are detected at 4, and the function `sendSMS()` is called. This simple function
    sends a text message to the cell phone number stored at 3.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 3G扩展板如常在1处设置，并在`void setup()`中初始化。按钮按下事件在4处被检测到，并调用`sendSMS()`函数。这个简单的函数将短信发送到存储在3处的手机号码。
- en: Before uploading the sketch, replace `xxxxxxxxxxx` with the recipient’s cell
    phone number; enter the area code plus number, without any spaces or brackets.
    For example, to send a text to 212.555.1212 in the United States, you would store
    `2125551212`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传草图之前，将`xxxxxxxxxxx`替换为接收者的手机号码；输入区号和号码，不要使用空格或括号。例如，要将短信发送到美国的212.555.1212，您应存储`2125551212`。
- en: '![f22007](image_fi/500587c22/f22007.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f22007](image_fi/500587c22/f22007.png)'
- en: 'Figure 22-7: A sample text message being received'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图22-7：接收到的示例短信
- en: The text message to be sent is stored at 2. (Note that the maximum length for
    a message is 160 characters.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送的短信存储在第2步。（请注意，消息的最大长度为160个字符。）
- en: After you have stored a sample text message and a destination number, upload
    the sketch, wait 30 seconds, and then press the button. In a moment, the message
    should arrive on the destination phone, as shown in [Figure 22-7](#figure22-7).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 存储了一个示例短信和目标号码后，上传草图，等待30秒钟，然后按下按钮。稍后，消息应送达目标手机，如[图22-7](#figure22-7)所示。
- en: Project 64 can be integrated quite easily into other sketches, and various text
    messages could be sent by comparing data against a parameter with a `switch case`
    statement.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 项目64可以轻松集成到其他草图中，并且可以通过`switch case`语句根据参数比较数据发送不同的短信。
- en: 'Project #65: Setting Up an SMS Remote Control'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #65：设置SMS远程控制'
- en: In this project, you’ll control the digital output pins on your Arduino by sending
    a text message from your cell phone. You should be able to use your existing knowledge
    to add various devices to control. We’ll allow for four separate digital outputs,
    but you can control more or fewer as required.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，您将通过从手机发送短信来控制Arduino的数字输出引脚。您应该能够利用现有的知识来添加各种设备进行控制。我们将提供四个独立的数字输出，但您可以根据需要控制更多或更少的输出。
- en: 'To turn on or off four digital outputs (pins 10 through 13 in this example),
    you’d send a text message to your Arduino in the following format: `#a``x``b``x``c``x``d``x`,
    replacing `x` with either a `0` for off or a `1` for on. For example, to turn
    on all four outputs, you’d send `#a1b1c1d1`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开或关闭四个数字输出（在此示例中为10到13号引脚），您需要以以下格式将短信发送到您的Arduino：`#a``x``b``x``c``x``d``x`，将`x`替换为`0`（关闭）或`1`（打开）。例如，要打开所有四个输出，您将发送`#a1b1c1d1`。
- en: The Hardware
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'This project uses the hardware described at the start of the chapter, plus
    any extra circuitry you choose. We’ll use four LEDs to indicate the status of
    the digital outputs being controlled. Therefore, the following extra hardware
    is required for this example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用的是本章开始时描述的硬件，外加您选择的任何额外电路。我们将使用四个LED来指示数字输出的状态。因此，以下额外硬件是本示例所需的：
- en: Four LEDs
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个LED
- en: Four 560 Ω resistors
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个560 Ω的电阻
- en: Various connecting wires
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One breadboard
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: The Schematic
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: Connect the external circuitry as shown in [Figure 22-8](#figure22-8).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图22-8](#figure22-8)所示连接外部电路。
- en: '![f22008](image_fi/500587c22/f22008.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![f22008](image_fi/500587c22/f22008.png)'
- en: 'Figure 22-8: Schematic for Project 65'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图22-8：项目65的原理图
- en: The Sketch
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'For this project, the 3G shield library is not used. Instead, we rely on the
    raw commands to control the module. Furthermore, we don’t turn the shield on or
    off during the sketch, as we need it to be on in order to listen for incoming
    text messages. Enter and upload the following sketch:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们并未使用3G模块库，而是直接依赖原始命令来控制该模块。此外，在整个草图中，我们没有打开或关闭模块，因为我们需要它处于开启状态才能监听传入的短信。输入并上传以下草图：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Understanding the Sketch
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: In this project, the Arduino monitors every text character sent from the 3G
    shield. Thus, at 1, we tell the shield to convert incoming SMS messages to text
    and send the contents to the virtual serial port at 2. Next, the Arduino waits
    for a text message to come from the shield at 3.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，Arduino监控从3G模块发送的每个文本字符。因此，在步骤1中，我们告诉模块将传入的短信转化为文本并将内容发送到虚拟串口。在步骤2之后，Arduino在步骤3等待来自模块的文本消息。
- en: Because the commands sent from the cell phone and passed by the 3G module to
    control pins on the Arduino start with a `#`, the sketch waits for a hash mark
    (`#`) to appear in the text message at 4. At 5, the first output parameter `a`
    is checked—if it is followed by a `0` or `1`, the pin is turned off or on, respectively.
    The process repeats for the next three outputs controlled by `b`, `c`, and `d`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从手机发送的命令并通过3G模块传递给Arduino控制引脚的指令以`#`开头，因此草图会等待文本消息中的井号（`#`）出现。在步骤5中，首先检查第一个输出参数`a`——如果后面跟着`0`或`1`，则分别关闭或开启引脚。对于接下来的三个由`b`、`c`和`d`控制的输出，过程会重复进行。
- en: Fire up your imagination to think of how easy it would be to use this project
    to create a remote control for all manner of things—lights, pumps, alarms, and
    more.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 激发你的想象力，想象一下使用这个项目创造一个遥控器来控制各种事物——如灯光、泵、警报等，会是多么的简单。
- en: Looking Ahead
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: With the three projects in this chapter, you’ve created a great framework on
    which to build your own projects that can communicate over a cell network. You’re
    limited only by your imagination—for example, you could receive a text message
    if your basement floods or turn on your air conditioner from your cell phone.
    Once again, remember to take heed of network charges before setting your projects
    free.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的三个项目，你已经建立了一个良好的框架，能够构建自己的项目，实现在蜂窝网络上的通信。你唯一受限的是想象力——例如，你可以在地下室淹水时接收短信，或者用手机开启空调。再次提醒，在让你的项目“自由飞翔”之前，记得留意网络费用。
- en: At this point, after having read about (and hopefully built) the 65 projects
    in this book, you should have the understanding, knowledge, and confidence you
    need to create your own Arduino-based projects. You know the basic building blocks
    used to create many projects, and I’m sure you will be able to apply the technology
    to solve all sorts of problems and have fun at the same time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，经过阅读（并且希望已经动手构建）本书中的65个项目后，你应该已经具备了创造自己的Arduino项目所需的理解、知识和信心。你已经掌握了创建多个项目的基本构建块，并且我相信你能够运用这些技术解决各种问题，同时享受乐趣。
- en: 'I’m always happy to receive feedback about this book, which can be left via
    the contact details at the book’s web page: [https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我始终很高兴收到关于本书的反馈，您可以通过本书网页上的联系方式留言：[https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/)。
- en: But remember—this is only the beginning. You can find many more forms of hardware
    to work with, and with some thought and planning, you can work with them all.
    You’ll find a huge community of Arduino users on the internet (in such places
    as the Arduino forum at [http://forum.arduino.cc/](http://forum.arduino.cc/)),
    and even at a local hackerspace or club.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住——这只是开始。你可以找到更多的硬件形式来进行操作，只要稍加思考和规划，你就可以与它们所有的设备进行合作。你会在互联网上找到庞大的Arduino用户社区（例如在[http://forum.arduino.cc/](http://forum.arduino.cc/)上的Arduino论坛），甚至在本地的黑客空间或俱乐部中也可以找到。
- en: So don’t just sit there—make something!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以不要只是坐在那里——做点什么吧！
