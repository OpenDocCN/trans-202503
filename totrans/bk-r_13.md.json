["```\nfunctionname <- function(arg1,arg2,arg3,...){\n    do any code in here when called\n    return(returnobject)\n}\n```", "```\nmyfib <- function(){\n    fib.a <- 1\n    fib.b <- 1\n    cat(fib.a,\", \",fib.b,\", \",sep=\"\")\n    repeat{\n        temp <- fib.a+fib.b\n        fib.a <- fib.b\n        fib.b <- temp\n        cat(fib.b,\", \",sep=\"\")\n        if(fib.b>150){\n            cat(\"BREAK NOW...\")\n            break\n        }\n    }\n}\n```", "```\nR> myfib <- function(){\n+   fib.a <- 1\n+   fib.b <- 1\n+   cat(fib.a,\", \",fib.b,\", \",sep=\"\")\n+   repeat{\n+       temp <- fib.a+fib.b\n+       fib.a <- fib.b\n+       fib.b <- temp\n+       cat(fib.b,\", \",sep=\"\")\n+       if(fib.b>150){\n+           cat(\"BREAK NOW...\")\n+           break\n+       }\n+   }\n+ }\n```", "```\nR> myfib()\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, BREAK NOW...\n```", "```\nmyfib2 <- function(thresh){\n    fib.a <- 1\n    fib.b <- 1\n    cat(fib.a,\", \",fib.b,\", \",sep=\"\")\n    repeat{\n        temp <- fib.a+fib.b\n        fib.a <- fib.b\n        fib.b <- temp\n        cat(fib.b,\", \",sep=\"\")\n        if(fib.b>thresh){\n            cat(\"BREAK NOW...\")\n            break\n        }\n    }\n}\n```", "```\nR> myfib2(thresh=150)\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, BREAK NOW...\n```", "```\nR> myfib2(1000000)\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584,\n4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,\n514229, 832040, 1346269, BREAK NOW...\n```", "```\nmyfib3 <- function(thresh){\n    fibseq <- c(1,1)\n    counter <- 2\n    repeat{\n        fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])\n        counter <- counter+1\n        if(fibseq[counter]>thresh){\n            break\n        }\n    }\n    return(fibseq)\n}\n```", "```\nR> myfib3(150)\n [1]   1   1   2   3   5   8  13  21  34  55  89 144 233\nR> foo <- myfib3(10000)\nR> foo\n [1]     1     1     2     3     5     8    13     21    34   55   89   144\n[13]   233   377   610   987  1597  2584  4181   6765 10946\nR> bar <- foo[1:5]\nR> bar\n[1] 1 1 2 3 5\n```", "```\ndummy1 <- function(){\n    aa <- 2.5\n    bb <- \"string me along\"\n    cc <- \"string 'em up\"\n    dd <- 4:8\n}\n\ndummy2 <- function(){\n    aa <- 2.5\n    bb <- \"string me along\"\n    cc <- \"string 'em up\"\n    dd <- 4:8\n    return(dd)\n}\n```", "```\nR> foo <- dummy1()\nR> foo\n[1] 4 5 6 7 8\nR> bar <- dummy2()\nR> bar\n[1] 4 5 6 7 8\n```", "```\ndummy3 <- function(){\n    aa <- 2.5\n    bb <- \"string me along\"\n    return(aa)\n    cc <- \"string 'em up\"\n    dd <- 4:8\n    return(bb)\n}\n```", "```\nR> baz <- dummy3()\nR> baz\n[1] 2.5\n```", "```\nmultiples1 <- function(x,mat,str1,str2){\n    matrix.flags <- sapply(x,FUN=is.matrix)\n\n    if(!any(matrix.flags)){\n        return(str1)\n    }\n\n    indexes <- which(matrix.flags)\n    counter <- 0\n    result <- list()\n    for(i in indexes){\n        temp <- x[[i]]\n        if(ncol(temp)==nrow(mat)){\n            counter <- counter+1\n            result[[counter]] <- temp%*%mat\n        }\n    }\n\n    if(counter==0){\n        return(str2)\n    } else {\n        return(result)\n    }\n}\n```", "```\nR> foo <- list(matrix(1:4,2,2),\"not a matrix\",\n               \"definitely not a matrix\",matrix(1:8,2,4),matrix(1:8,4,2))\nR> bar <- list(1:4,\"not a matrix\",c(F,T,T,T),\"??\")\nR> baz <- list(1:4,\"not a matrix\",c(F,T,T,T),\"??\",matrix(1:8,2,4))\n```", "```\nR> multiples1(x=foo,mat=diag(2),str1=\"no matrices in 'x'\",\n              str2=\"matrices in 'x' but none of appropriate dimensions given\n              'mat'\")\n[[1]]\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n[[2]]\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n```", "```\nR> multiples1(x=bar,mat=diag(2),str1=\"no matrices in 'x'\",\n              str2=\"matrices in 'x' but none of appropriate dimensions given\n              'mat'\")\n[1] \"no matrices in 'x'\"\n```", "```\nR> multiples1(x=baz,mat=diag(2),str1=\"no matrices in 'x'\",\n              str2=\"matrices in 'x' but none of appropriate dimensions given\n              'mat'\")\n[1] \"matrices in 'x' but none of appropriate dimensions given 'mat'\"\n```", "```\nR> multiples1(x=foo,mat=diag(2))\n[[1]]\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n[[2]]\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n```", "```\nR> multiples1(x=bar,mat=diag(2))\nError in multiples1(x = bar, mat = diag(2)) :\n  argument \"str1\" is missing, with no default\n```", "```\nmultiples2 <- function(x,mat,str1=\"no valid matrices\",str2=str1){\n    matrix.flags <- sapply(x,FUN=is.matrix)\n\n    if(!any(matrix.flags)){\n        return(str1)\n    }\n\n    indexes <- which(matrix.flags)\n    counter <- 0\n    result <- list()\n    for(i in indexes){\n        temp <- x[[i]]\n        if(ncol(temp)==nrow(mat)){\n            counter <- counter+1\n            result[[counter]] <- temp%*%mat\n        }\n    }\n\n    if(counter==0){\n        return(str2)\n    } else {\n        return(result)\n    }\n}\n```", "```\nR> multiples2(foo,mat=diag(2))\n[[1]]\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n[[2]]\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\nR> multiples2(bar,mat=diag(2))\n[1] \"no valid matrices\"\nR> multiples2(baz,mat=diag(2))\n[1] \"no valid matrices\"\n```", "```\nmultiples3 <- function(x,mat,str1,str2){\n    matrix.flags <- sapply(x,FUN=is.matrix)\n\n    if(!any(matrix.flags)){\n        if(missing(str1)){\n            return(\"'str1' was missing, so this is the message\")\n        } else {\n            return(str1)\n        }\n    }\n\n    indexes <- which(matrix.flags)\n    counter <- 0\n    result <- list()\n    for(i in indexes){\n        temp <- x[[i]]\n        if(ncol(temp)==nrow(mat)){\n            counter <- counter+1\n            result[[counter]] <- temp%*%mat\n        }\n    }\n\n    if(counter==0){\n        if(missing(str2)){\n            return(\"'str2' was missing, so this is the message\")\n        } else {\n            return(str2)\n        }\n    } else {\n        return(result)\n    }\n}\n```", "```\nR> multiples3(foo,diag(2))\n[[1]]\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n[[2]]\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\nR> multiples3(bar,diag(2))\n[1] \"'str1' was missing, so this is the message\"\nR> multiples3(baz,diag(2))\n[1] \"'str2' was missing, so this is the message\"\n```", "```\nmyfibplot <- function(thresh,plotit=TRUE,...){\n    fibseq <- c(1,1)\n    counter <- 2\n    repeat{\n        fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])\n        counter <- counter+1\n        if(fibseq[counter]>thresh){\n            break\n        }\n    }\n\n    if(plotit){\n        plot(1:length(fibseq),fibseq,...)\n    } else {\n        return(fibseq)\n    }\n}\n```", "```\nR> myfibplot(150)\n```", "```\nR> myfibplot(150,type=\"b\",pch=4,lty=2,main=\"Terms of the Fibonacci sequence\",\n             ylab=\"Fibonacci number\",xlab=\"Term (n)\")\n```", "```\nunpackme <- function(...){\n    x <- list(...)\n    cat(\"Here is ... in its entirety as a list:\\n\")\n    print(x)\n    cat(\"\\nThe names of ... are:\",names(x),\"\\n\\n\")\n    cat(\"\\nThe classes of ... are:\",sapply(x,class))\n}\n```", "```\nR> unpackme(aa=matrix(1:4,2,2),bb=TRUE,cc=c(\"two\",\"strings\"),\n            dd=factor(c(1,1,2,1)))\nHere is ... in its entirety as a list:\n$aa\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$bb\n[1] TRUE\n\n$cc\n[1] \"two\"     \"strings\"\n\n$dd\n[1] 1 1 2 1\nLevels: 1 2\n\nThe names of ... are: aa bb cc dd\n\nThe classes of ... are: matrix logical character factor\n```", "```\nmultiples_helper_ext <- function(x,matrix.flags,mat){\n    indexes <- which(matrix.flags)\n    counter <- 0\n    result <- list()\n    for(i in indexes){\n        temp <- x[[i]]\n        if(ncol(temp)==nrow(mat)){\n            counter <- counter+1\n            result[[counter]] <- temp%*%mat\n        }\n    }\n    return(list(result,counter))\n}\n\nmultiples4 <- function(x,mat,str1=\"no valid matrices\",str2=str1){\n    matrix.flags <- sapply(x,FUN=is.matrix)\n\n    if(!any(matrix.flags)){\n        return(str1)\n    }\n\n    helper.call <- multiples_helper_ext(x,matrix.flags,mat)\n    result <- helper.call[[1]]\n    counter <- helper.call[[2]]\n\n    if(counter==0){\n        return(str2)\n    } else {\n        return(result)\n    }\n}\n```", "```\nmultiples5 <- function(x,mat,str1=\"no valid matrices\",str2=str1){\n    matrix.flags <- sapply(x,FUN=is.matrix)\n\n    if(!any(matrix.flags)){\n        return(str1)\n    }\n\n    multiples_helper_int <- function(x,matrix.flags,mat){\n        indexes <- which(matrix.flags)\n        counter <- 0\n        result <- list()\n        for(i in indexes){\n            temp <- x[[i]]\n            if(ncol(temp)==nrow(mat)){\n                counter <- counter+1\n                result[[counter]] <- temp%*%mat\n            }\n        }\n        return(list(result,counter))\n    }\n\n    helper.call <- multiples_helper_int(x,matrix.flags,mat)\n    result <- helper.call[[1]]\n    counter <- helper.call[[2]]\n\n    if(counter==0){\n        return(str2)\n    } else {\n        return(result)\n    }\n}\n```", "```\nR> foo <- matrix(c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)\nR> foo\n     [,1] [,2] [,3] [,4]\n[1,]    2    4    7    6\n[2,]    3    2    3    7\n[3,]    3    4    3    2\n```", "```\nR> apply(foo,MARGIN=2,FUN=function(x){sort(rep(x,2))})\n     [,1] [,2] [,3] [,4]\n[1,]    2    2    3    2\n[2,]    2    2    3    2\n[3,]    3    4    3    6\n[4,]    3    4    3    6\n[5,]    3    4    7    7\n[6,]    3    4    7    7\n```", "```\nmyfibrec <- function(n){\n    if(n==1||n==2){\n        return(1)\n    } else {\n        return(myfibrec(n-1)+myfibrec(n-2))\n    }\n}\n```", "```\nR> myfibrec(5)\n[1] 5\n```", "```\n    foo <- list(\"a\",c(\"b\",\"c\",\"d\",\"e\"),\"f\",c(\"g\",\"h\",\"i\"))\n    ```", "```\n        R> foo <- list(1:3,matrix(c(3.3,3.2,2.8,2.1,4.6,4.5,3.1,9.4),4,2),\n                       matrix(c(3.3,3.2,2.8,2.1,4.6,4.5,3.1,9.4),2,4))\n        R> geolist(foo)\n        [[1]]\n        [1] 1.817121\n\n        [[2]]\n        [1] 3.896152 3.794733 2.946184 4.442972\n\n        [[3]]\n        [1] 3.388035 4.106080\n        ```", "```\n        R> bar <- list(1:9,matrix(1:9,1,9),matrix(1:9,9,1),matrix(1:9,3,3))\n        R> geolist(bar)\n        [[1]]\n        [1] 4.147166\n\n        [[2]]\n        [1] 4.147166\n\n        [[3]]\n        [1] 1 2 3 4 5 6 7 8 9\n\n        [[4]]\n        [1] 3.036589 4.308869 5.451362\n        ```"]