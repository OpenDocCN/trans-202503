["```\n> (define coffee '(moka turkish expresso cappuccino latte))\n```", "```\n> (member 'latte coffee)\n'(latte)\n\n> (member 'milk coffee)\n#f\n```", "```\n> (require racklog)\n\n> (define %coffee\n    (%rel ()\n          [('moka)]\n          [('turkish)]\n          [('expresso)]\n          [('cappuccino)]\n          [('latte)]))\n```", "```\n> (%which () (%coffee 'latte))\n'()\n\n> (%which () (%coffee 'milk))\n#f\n```", "```\n> (%which () %true)\n'()\n\n> (%which () %fail)\n#f\n```", "```\n> (%which (c) (%coffee c))\n'((c . moka))\n```", "```\n> (%more)\n'((c . turkish))\n\n> (%more)\n'((c . expresso))\n\n> (%more)\n'((c . cappuccino))\n\n> (%more)\n'((c . latte))\n\n> (%more)\n#f\n```", "```\n> (%which () (%coffee (_)))\n'()\n```", "```\n> (define %parent\n    (%rel ()\n          [('Wilma 'Pebbles)]\n          [('Fred 'Pebbles)]\n          [('Homer 'Bart)]\n          [('Dick 'Harry)]\n          [('Sam 'Tim)]\n          [('William 'Henry)]\n          [('Henry 'John)]\n          [('Mary 'Sam)]\n          [('Dick 'Harriet)]\n          [('Tom 'Dick)]\n          [('George 'Sam)]\n          [('Tim 'Sue)]))\n```", "```\n> (%assert! %parent () [('Homer 'Lisa)])\n> (%assert-after! %parent () [('Homer 'Maggie)])\n```", "```\n> (%which (c) (%parent 'Homer c))\n'((c . Maggie))\n\n> (%more)\n'((c . Bart))\n\n> (%more)\n'((c . Lisa))\n```", "```\n> (define %parent %empty-rel)\n> (%assert! %parent () [('Adam 'Bill)])\n> (%assert! %parent () [('Noah 'Andy)])\n```", "```\n> (define %grand\n ➊ (%rel (g p c)\n       ➋ [(g c)\n            ➌ (%parent g p) (%parent p c)]))\n```", "```\ngrand(G,C) :- parent(G,P), parent(P,C).\n```", "```\n> (%which (k) (%grand 'Tom k))\n'((k . Harry))\n```", "```\n> (%more)\n'((k . Harriet))\n```", "```\n> (%which (g) (%grand g (_)))\n'((g . William))\n\n> (%more)\n'((g . Tom))\n\n> (%more)\n#f\n```", "```\n> (%which () (%grand 'Homer (_)))\n#f\n```", "```\n> (%which (p) (%bag-of p (%parent p (_)) p))\n'((p Wilma Fred Homer Dick William Henry Mary Sam George Dick Tom Tim))\n```", "```\n> (%which (p) (%bag-of (cons 'parent p) (%parent p (_)) p))\n'((p\n   (parent . Wilma)\n   (parent . Fred)\n   (parent . Homer)\n   (parent . Dick)\n   (parent . William)\n   (parent . Henry)\n   (parent . Mary)\n   (parent . Sam)\n   (parent . George)\n   (parent . Dick)\n   (parent . Tom)\n   (parent . Tim)))\n```", "```\n> (%find-all (p) (%parent p (_)))\n'(((p . Wilma))\n  ((p . Fred))\n  ((p . Homer))\n  ((p . Dick))\n  ((p . William))\n  ((p . Henry))\n  ((p . Mary))\n  ((p . Sam))\n  ((p . George))\n  ((p . Dick))\n  ((p . Tom))\n  ((p . Tim)))\n```", "```\n> (%which (p) (%set-of p (%parent p (_)) p))\n'((p Wilma Fred Homer Dick William Henry Mary Sam George Tom Tim))\n```", "```\n> (%which (a b) (%= '(1 potato sack) (cons a b)))\n'((a . 1) (b potato sack))\n\n> (%which (x y) (%= (vector x 5) (vector 4 y)))\n'((x . 4) (y . 5))\n\n> (%which (x y) (%= (vector x 5) (list 4 y)))\n#f\n\n> (%which () (%= (list 4 5) (list 4 5)))\n'()\n```", "```\n> (%which (a) (%= (list 4 5) (list 5 a)))\n#f\n\n> (%which (a) (%/= (list 4 5) (list 5 a)))\n'((a . _))\n```", "```\n> (%which (a b) (%== (list 1 2) (list a b)))\n#f\n\n> (%which () (%== (list 1 2) (list 1 2)))\n'()\n```", "```\n> (define %friends %empty-rel)\n> (%assert! %friends () [('jack 'jill)])\n> (%assert! %friends () [('fred 'barny)])\n> (%which (pals) (%let (a b) (%bag-of (cons a b) (%friends a b) pals)))\n'((pals (jack . jill) (fred . barny)))\n```", "```\n> (%which (val) (%is val (+ 1 (* 2 3 4))))\n'((val . 25))\n\n> (%which () (%is 25 (+ 1 (* 2 3 4))))\n'()\n\n> (%which () (%is 5 (+ 1 (* 2 3 4))))\n#f\n```", "```\n> (%which (x y) (%= (list x 5) (list 4 y)))\n'((x . 4) (y . 5))\n\n> (%which (x y) (%is (list x 5) (list 4 y)))\n#f\n\n> (%which (x y) (%is (list x y) (list 4 5)))\n'((x . 4) (y . 5))\n```", "```\n> (%which () (%=:= 1 2))\n#f\n\n> (%which () (%=:= 1 1))\n'()\n\n> (%which () (%< 1 2))\n'()\n\n> (%which () (%>= 5 (+ 2 3)))\n'()\n```", "```\n> (%which () (%not %fail))\n'()\n\n> (%which () (%not %true))\n#f\n\n> (%which () (%and %true %true %true))\n'()\n\n> (%which () (%and %true %fail %true))\n#f\n\n> (%which () (%or %true %fail %true))\n'()\n```", "```\n#lang racket\n(require racklog)\n\n(define %spud\n  (%rel ()\n        [('Russet 'plain)]\n        [('Yam 'sweet)]\n        [('Kennebec 'plain)]\n        [('Sweet 'sweet)]\n        [('LaRette 'nutty)]))\n\n(define %spud-taste\n  (%rel (tater t taste)\n     [(tater t) \n         (%if-then-else\n             (%spud tater taste)\n             (%is t taste)\n             (%is t 'unknown))]))\n```", "```\n> (%which (taste) (%spud-taste 'LaRette taste))\n'((taste . nutty))\n\n> (%which (taste) (%spud-taste 'Yam taste))\n'((taste . sweet))\n\n> (%which (taste) (%spud-taste 'broccoli taste))\n'((taste . unknown))\n```", "```\n> (append '(1 2 3) '(4 5 6))\n'(1 2 3 4 5 6)\n```", "```\n> (%which (result) (%append '(1 2 3) '(4 5 6) result))\n'((result 1 2 3 4 5 6))\n```", "```\n> (%which (l1) (%append l1 '(4 5 6) '(1 2 3 4 5 6)))\n'((l1 1 2 3))\n```", "```\n> (%which (l2) (%append '(1 2 3) l2 '(1 2 3 4 5 6)))\n'((l2 4 5 6))\n```", "```\n> (%which (lists)\n          (%let (l1 l2)\n                (%bag-of (list l1 l2)\n                         (%append l1 l2 '(1 2 3 4 5 6)) lists)))\n'((lists\n   (() (1 2 3 4 5 6))\n   ((1) (2 3 4 5 6))\n   ((1 2) (3 4 5 6))\n   ((1 2 3) (4 5 6))\n   ((1 2 3 4) (5 6))\n   ((1 2 3 4 5) (6))\n   ((1 2 3 4 5 6) ())))\n```", "```\n(define %append\n  (%rel (h l l1 l2 l3)\n     ➊ [('() l l)]\n     ➋ [((cons h l1) l2 (cons h l3))\n      \t➌ (%append l1 l2 l3)]))\n```", "```\n(define %member\n  (%rel (x y)\n        [(x (cons x (_)))]\n        [(x (cons (_) y)) (%member x y)]))\n```", "```\n> (define stooges '(larry curly moe))\n> (%which () (%member 'larry stooges))\n'()\n\n> (%which () (%member 'fred stooges))\n#f\n\n> (%find-all (stooge) (%member stooge stooges))\n'(((stooge . larry)) ((stooge . curly)) ((stooge . moe)))\n```", "```\n(define %select\n  (%rel (x r h t)\n        [(x (cons x t) t)]\n        [(x (cons h t) (cons h r))\n         \t(%select x t r)]))\n```", "```\n> (%which (r) (%select 'x '(u v w x y z) r)) ; remove 'x from list\n'((r u v w y z))\n\n> (%which (s) (%select s '(u v w x y z) '(u v x y z))) ; find value in first\n     list that is not in the second\n'((s . w))\n\n> (%find-all (s) (%select s '(u v w x y z) (_)))\n'(((s . u)) ((s . v)) ((s . w)) ((s . x)) ((s . y)) ((s . z)))\n\n> (%find-all (l) (%select 'a l '(u v w x y z)))\n'(((l a u v w x y z))\n  ((l u a v w x y z))\n  ((l u v a w x y z))\n  ((l u v w a x y z))\n  ((l u v w x a y z))\n  ((l u v w x y a z))\n  ((l u v w x y z a)))\n```", "```\n(define %subtract\n  (%rel (s r h t u)\n        [(s '() s)]\n        [(s (cons h t) r)\n             (%select h s u)\n             (%subtract u t r)]))\n```", "```\n> (%which (r) (%subtract '(1 2 3 4) '(2 1) r))\n'((r 3 4))\n\n> (%which (r) (%subtract '(1 2 3 4) '(3) r))\n'((r 1 2 4))\n\n> (%which (t) (%subtract '(1 2 3 4) t '(2)))\n'((t 1 3 4))\n\n> (%which (s) (%subtract s '(1 2 4) '(3)))\n'((s 1 2 4 3))\n```", "```\n(1) (2 3 4)\n(2) (1 3 4)\n(3) (1 2 4)\n(4) (1 2 3)\n```", "```\n(define %permutation\n  (%rel (l h t u v w)\n     ➊ [('() '())]\n     ➋ [(l (cons h t))\n\t      ➌ (%append v (cons h u) l)\n\t      ➍ (%append v u w)\n\t      ➎ (%permutation w t)]))\n```", "```\n> (%find-all (s) (%permutation '(♠ ♣ ♡ ♢) s))\n'(((s ♠ ♣ ♡ ♢))\n  ((s ♠ ♣ ♢ ♡))\n  ((s ♠ ♡ ♣ ♢))\n  ((s ♠ ♡ ♢ ♣))\n  ((s ♠ ♢ ♣ ♡))\n  ((s ♠ ♢ ♡ ♣))\n  ((s ♣ ♠ ♡ ♢))\n  ((s ♣ ♠ ♢ ♡))\n  ((s ♣ ♡ ♠ ♢))\n  ((s ♣ ♡ ♢ ♠))\n  ((s ♣ ♢ ♠ ♡))\n  ((s ♣ ♢ ♡ ♠))\n  ((s ♡ ♠ ♣ ♢))\n  ((s ♡ ♠ ♢ ♣))\n  ((s ♡ ♣ ♠ ♢))\n  ((s ♡ ♣ ♢ ♠))\n  ((s ♡ ♢ ♠ ♣))\n  ((s ♡ ♢ ♣ ♠))\n  ((s ♢ ♠ ♣ ♡))\n  ((s ♢ ♠ ♡ ♣))\n  ((s ♢ ♣ ♠ ♡))\n  ((s ♢ ♣ ♡ ♠))\n  ((s ♢ ♡ ♠ ♣))\n  ((s ♢ ♡ ♣ ♠)))\n```", "```\n(define %permute-n\n  (%rel (l h t u v w n m)\n        [((_) '() 0) !]\n        [(l (cons h t) n)\n            (%append v (cons h u) l)\n            (%append v u w)\n            (%is m (sub1 n))\n            (%permute-n w t m)]))\n```", "```\n(define %permute\n  (%rel (l h t u v w n m)\n\n        ;permute all\n        [('() '())]\n        [(l (cons h t))\n            (%append v (cons h u) l)\n            (%append v u w)\n            (%permute w t)]\n\n        ;permute n\n        [((_) '() 0) !]\n        [(l (cons h t) n)\n            (%append v (cons h u) l)\n            (%append v u w)\n            (%is m (sub1 n))\n            (%permute w t m)]))\n```", "```\n> (%find-all (p) (%permute '(1 2 3) p))\n'(((p 1 2 3)) ((p 1 3 2)) ((p 2 1 3)) ((p 2 3 1)) ((p 3 1 2)) ((p 3 2 1)))\n\n> (%find-all (p) (%permute '(1 2 3) p 2))\n'(((p 1 2)) ((p 1 3)) ((p 2 1)) ((p 2 3)) ((p 3 1)) ((p 3 2)))\n```", "```\n   #lang at-exp racket\n\n   (require infix racklog)\n\n   (define %permute-n\n       ; see previous section\n       ...)\n\n➊ (define %check\n  (%rel (S E N D O R Y s1 s2)\n        [((list S E N D O R Y))\n        ➋ (%is s1 @${S*1000 + E*100 + N*10 + D +\n              1000 + O*100 + R*10 + E})\n        ➌ (%is s2 @${10000 + O*1000 + N*100 + E*10 + Y})\n           (%=:= s1 s2)]))\n\n➍ (define %solve\n  (%rel (S E N D M O R Y p)\n        [(S E N D M O R Y)\n            (%is M 1)\n         ➎ (%permute-n '(0 2 3 4 5 6 7 8 9) p 7) \n            (%check p) \n         ➏ (%= p (list S E N D O R Y))]))\n```", "```\n> (%which (S E N D M O R Y) (%solve S E N D M O R Y))\n'((S . 9) (E . 5) (N . 6) (D . 7) (M . 1) (O . 0) (R . 8) (Y . 2))\n```", "```\n#lang racket\n(require racklog)\n\n(define %reject\n  (%rel ()\n        [(#(0 1 1 1))]\n        [(#(0 1 1 0))]\n        [(#(0 0 1 1))]\n        [(#(1 0 0 0))]\n        [(#(1 0 0 1))]\n        [(#(1 1 0 0))]))\n```", "```\n(define %reject\n  (%rel (x y)\n        [((vector x y y (_))) (%=/= x y)]\n        [((vector x x y y)) (%=/= x y)]))\n```", "```\n(define (toggle-item s a)\n  (for/vector ([i (in-range 4)])\n    (let ([loc (vector-ref s i)])\n   ➊ (if (or (zero? i) (= i a))\n          (- 1 loc)\n          loc))))\n```", "```\n(define %gen-move\n  (%rel (n t s0 s1)\n     ➊ [('() s0 s1)\n             (%is s1 (cons 0 (toggle-item s0 0))) !]\n     ➋ [((cons n (_)) s0 s1)\n             (%is s1 (cons n (toggle-item s0 n)))]\n     ➌ [((cons (_) t) s0 s1)\n             (%gen-move t s0 s1)]))\n```", "```\n(define %check-history\n  (%rel (state h t)\n        [(state '())]\n        [(state (cons h t))\n          ➊ (%is #t (equal? state h)) ! %fail]\n        [(state (cons (_) t))\n\t         (%check-history state t)]))\n```", "```\n(define %gen-valid-move\n  (%rel (state hist move s a left-behind)\n        [(state hist move)\n            (%gen-move '(0 1 2 3)  state (cons a s))\n            (%is left-behind (toggle-item state a))         \n            (%not (%reject left-behind))\n            (%check-history s hist)\n            (%is move (cons a s))]))\n```", "```\n(define %solve\n  (%rel (a s state hist move moves m1 m2)\n        [(state (_) moves moves)\n          ➊ (%is #t (equal? state #(1 1 1 1))) !]\n        [(state hist m1 m2)\n          ➋ (%gen-valid-move state hist (cons a s))\n          ➌ (%is move (cons a s))\n          ➍ (%solve s (cons s hist) (cons move m1) m2)]))\n```", "```\n> (%which (moves) (%solve #(0 0 0 0) '() '() moves))\n'((moves\n   (2 . #(1 1 1 1))\n   (0 . #(0 1 0 1))\n   (1 . #(1 1 0 1))\n   (2 . #(0 0 0 1))\n   (3 . #(1 0 1 1))\n   (0 . #(0 0 1 0))\n   (2 . #(1 0 1 0))))\n```", "```\n(define %print\n  (%rel (fmt val)\n        [(fmt val) (%is #t (begin (printf fmt val) #t))]))\n```", "```\n(define (get-items s b)\n  (for/list ([i (in-range 4)] #:when (= b (vector-ref s i)))\n    (vector-ref #(Farmer Fox Goose Beans) i)))\n```", "```\n(define %print-moves\n  (%rel (s t i pass dir b0 b1 d)\n        [('()) %true]\n        [((cons (cons i s) t))\n         (%is pass (vector-ref\n             #(Farmer Farmer-Fox Farmer-Goose Farmer-Beans) i))\n         (%is d (vector-ref s 0))\n         (%is dir (vector-ref #( <- -> ) d))\n         (%print \"~a\\n\" (list dir pass))\n         (%is b0 (get-items s (- 1 d)))\n         (%is b1 (get-items s (vector-ref s 0)))\n         (%if-then-else\n            (%=:= 0 d)\n            (%print \"~a\\n\\n\" (list b1 b0))\n            (%print \"~a\\n\\n\" (list b0 b1)))\n         (%print-moves t)]))\n```", "```\n(define %print-solution\n  (%rel (moves rev-moves)\n        [()\n             (%print \"~a\\n\\n\" (list (get-items #(0 0 0 0) 0) '()))\n             (%solve #(0 0 0 0) '() '() moves)\n             (%is rev-moves (reverse moves))\n             (%print-moves rev-moves)]))\n```", "```\n> (%which () (%print-solution))\n((Farmer Fox Goose Beans) ())\n\n(-> Farmer-Goose)\n((Fox Beans) (Farmer Goose))\n\n(<- Farmer)\n((Farmer Fox Beans) (Goose))\n\n(-> Farmer-Fox)\n((Beans) (Farmer Fox Goose))\n\n(<- Farmer-Goose)\n((Farmer Goose Beans) (Fox))\n\n(-> Farmer-Beans)\n((Goose) (Farmer Fox Beans))\n\n(<- Farmer)\n((Farmer Goose) (Fox Beans))\n\n(-> Farmer-Goose)\n(() (Farmer Fox Goose Beans))\n\n'()\n```", "```\n#lang racket\n(require racklog)\n\n; Each person can have from one to six donuts\n(define %can-have\n  (%rel (d)\n        [(d) (%member d '(1 2 3 4 5 6))]))\n\n; an alias for equality\n(define %has (%rel (n) [(n n)]))\n\n; if a person doesn't have d donuts, they have n donuts\n(define %not-have\n  (%rel (n d)\n        [(n d)\n           (%can-have n)\n           (%=/= n d)]))\n```", "```\n(define %statement\n  (%rel (Jack Janet Chris)\n\n        ; Jack's statements\n        [('jack Jack Janet)\n            (%has Janet 2) (%has Jack 1)]\n        [('jack Jack Janet)\n            (%not-have Janet 2) (%not-have Jack 1)]\n\n        ; Janet's statements\n        [('janet Jack Janet)\n            (%has Janet 2) (%has Jack 2)]\n        [('janet Jack Janet)\n            (%not-have Janet 2) (%not-have Jack 2)]\n\n        ; Chris's statements\n        [('chris Jack Janet)\n            (%has Janet 2) (%can-have Jack) (%> Jack 3)]\n        [('chris Jack Janet)\n            (%not-have Janet 2) (%can-have Jack) (%<= Jack 3)]))\n```", "```\n(define %solve\n  (%rel (Jack Janet Chris)\n        [(Jack Janet Chris)\n            (%statement 'jack Jack Janet)\n            (%statement 'janet Jack Janet)\n            (%statement 'chris Jack Janet)\n            (%can-have Chris)\n            (%is 6 (+ Jack Janet Chris))]))\n```", "```\n> (%which (Jack Janet Chris) (%solve Jack Janet Chris))\n'((Jack . 3) (Janet . 1) (Chris . 2))\n```", "```\n> (%which () (%repl))\n\nGuess: (3 8 2 1 7)\n03\n\nGuess: (8 3 1 0 5)\n12\n\nGuess: (8 2 3 5 6)\n21\n\nGuess: (8 2 0 3 4)\n12\n\nGuess: (8 1 4 5 2)\n04\n\nGuess: (1 2 3 4 5)\n50\n'()\n```", "```\n(require racklog)\n\n(define DIGITS 5)\n\n(define %repl\n  (%rel (digits guess val boles creots)\n        [()\n         ➊ (%is digits (randomize-digits))\n         ➋ (%is #t (begin (set! history '()) #t))\n            (%repl digits)]\n        [(digits)\n         ➌ (%permute-n digits guess DIGITS)\n         ➍ (%consistent? guess)\n         ➎ (%print \"\\nGuess: ~a\\n\" guess)\n         ➏ (%= (cons boles creots) (get-input))\n         ➐ (%update-history guess boles creots)\n         ➑ (%if-then-else (%=:= boles DIGITS) ! %fail)]))\n```", "```\n(define history '())\n\n(define %update-history\n  (%rel (guess boles creots)\n        [(guess boles creots)\n         (%is #t\n              (begin\n                (set! history (cons (list guess boles creots) history))\n                #t))]))\n```", "```\n(define (score c h)\n  (let loop ([l1 c] [l2 h] [boles 0] [creots 0])\n    (if (equal? l1 null)\n        (cons boles creots)\n        (let ([d1 (car l1)]\n              [d2 (car l2)]\n              [t1 (cdr l1)]\n              [t2 (cdr l2)])\n          (if (= d1 d2) \n              (loop t1 t2 (add1 boles) creots)\n              (loop t1 t2 boles (+ creots (if (member d1 h) 1 0))))))))\n```", "```\n(define (randomize-digits)\n  (let loop([count 10] [l '()])\n    (if (= count 0) l\n    (let ([d (random 10)])\n      (if (member d l)\n          (loop count l)\n          (loop (sub1 count) (cons d l)))))))\n```", "```\n(define %permute-n\n  (%rel (l h t u v w n m)\n        [((_) '() 0) !]\n        [(l (cons h t) n)\n            (%append v (cons h u) l)\n            (%append v u w)\n            (%is m (sub1 n))\n            (%permute-n w t m)]))\n```", "```\n(define %consistent?\n  (%rel (g h hb hc gb gc t)\n        [((_) '()) %true]\n        [(g (cons (list h hb hc) t))\n            (%is (cons gb gc) (score g h))\n            (%and (%=:= hb gb) (%=:= hc gc))\n            (%consistent? g t)]\n        [(g) (%consistent? g history)]))\n```", "```\n(define %print\n  (%rel (fmt val)\n        [(fmt val)\n         (%is #t (begin (printf fmt val) #t))]))\n(define (get-input)\n  (let ([val (read (current-input-port))])\n    (let-values ([(boles creots) (quotient/remainder val 10)])\n      (cons boles creots))))\n```"]