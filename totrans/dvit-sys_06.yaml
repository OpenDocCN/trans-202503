- en: '6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: 'UNDER THE C: DIVING INTO ASSEMBLY'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: C语言深度解析：探索汇编
- en: '*Under the C, under the C Don’t you know it’s better Dealing with registers
    And assembly?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*Under the C, under the C Don’t you know it’s better Dealing with registers
    And assembly?'
- en: —Sebastian, probably*
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: —塞巴斯蒂安，可能*
- en: '![image](../images/common.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Prior to the invention of the compiler in the early days of computing, many
    programmers coded in *assembly language*, which directly specifies the set of
    instructions that a computer follows during execution. Assembly language is the
    closest a programmer gets to coding at the machine level without writing code
    directly in 1s and 0s, and is a readable form of *machine code*. To write efficient
    assembly code, programmers must intimately understand the operation of the underlying
    machine architecture.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译器发明之前的计算机早期，许多程序员使用*汇编语言*进行编码，汇编语言直接指定计算机在执行过程中遵循的指令集。汇编语言是程序员在不直接编写1和0的代码的情况下，最接近机器级编码的方式，也是*机器代码*的一种可读形式。为了编写高效的汇编代码，程序员必须深入理解底层机器架构的运作。
- en: The invention of the compiler fundamentally changed the way programmers write
    code. A *compiler* translates a human-readable programming language (usually written
    using English words) into a language that a computer understands (i.e., machine
    code). Compilers translate the human-readable code into machine code using the
    rules of the programming language, the specification of the operating system,
    and the instruction set of the machine, and provide some error detection and type
    checking in the process. Most modern compilers produce assembly code that is as
    efficient as the handwritten assembly code of yesteryear.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器的发明从根本上改变了程序员编写代码的方式。*编译器*将人类可读的编程语言（通常使用英语单词编写）翻译成计算机能够理解的语言（即机器代码）。编译器使用编程语言的规则、操作系统的规范和机器的指令集，将人类可读的代码翻译成机器代码，并在过程中提供错误检测和类型检查。大多数现代编译器生成的汇编代码与过去手写的汇编代码一样高效。
- en: The Benefits of Learning Assembly
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习汇编语言的好处
- en: Given all the benefits of compilers, it may not be obvious why learning assembly
    is useful. However, there are several compelling reasons to learn and understand
    assembly code. Here are a few examples.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编译器有很多好处，但学习汇编语言的价值可能并不明显。然而，学习和理解汇编代码有几个非常有说服力的理由。以下是一些例子。
- en: Higher-Level Abstraction Hides Valuable Program Details
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 高层抽象掩盖了程序中的宝贵细节
- en: The abstraction provided by high-level programming languages is a boon for reducing
    the complexity of programming. At the same time, this simplification makes it
    easy for programmers to make design decisions without fully understanding the
    ramifications of their choices at the machine level. Lacking knowledge of assembly
    often prevents a programmer from understanding valuable information on how a program
    runs, and limits their ability to understand what their code is actually doing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 高级编程语言提供的抽象对于减少编程的复杂性是一大福音。同时，这种简化使得程序员在做设计决策时，可能并没有完全理解他们选择在机器级上的实际影响。缺乏汇编语言的知识往往会阻止程序员理解程序运行中的宝贵信息，并限制他们了解代码实际执行情况的能力。
- en: 'As an example, take a look at the following program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例子，请看下面的程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What is the program’s output? At first glance, the `assign` function appears
    to have no effect, as its return value is not stored by any variable in `main`.
    The `adder` function returns the value of `a + 2`, although the variable `a` is
    uninitialized (though on some machines the compiler will initialize `a` to 0).
    Printing out `x` should result in an undefined value. However, compiling and running
    it on most 64-bit machines consistently produces an answer of `42`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出是什么？乍一看，`assign`函数似乎没有任何效果，因为它的返回值没有被`main`中的任何变量存储。`adder`函数返回`a + 2`的值，尽管变量`a`没有初始化（不过在某些机器上，编译器会将`a`初始化为0）。打印`x`应该会得到一个未定义的值。然而，在大多数64位机器上编译并运行该程序时，结果总是`42`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output of this program seems nonsensical at first glance, as the `adder`and
    `assign` functions appear to be disconnected. Understanding stack frames and how
    functions execute under the hood will help you understand why the answer is `42`.
    We will revisit this example in the upcoming chapters.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出乍一看似乎毫无意义，因为`adder`和`assign`函数似乎没有连接在一起。理解栈帧和函数是如何在幕后执行的，将帮助你理解为什么答案是`42`。我们将在接下来的章节中重新审视这个例子。
- en: Some Computing Systems Are Too Resource-Constrained for Compilers
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一些计算机系统由于资源限制，无法使用编译器
- en: The most common types of “computer” are those we cannot readily identify as
    computers. These devices exist everywhere from cars and coffee makers to washing
    machines and smart watches. Sensors, microcontrollers, and other embedded processors
    play an increasingly dominant role in our lives, and all require software to operate.
    However, the processors contained in such devices are often so small that they
    cannot execute the compiled code written by higher-level programming languages.
    In many cases, these devices require standalone assembly programs that are not
    dependent on the runtime libraries required by common programming languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的“计算机”是那些我们无法直接识别为计算机的设备。这些设备无处不在，从汽车、咖啡机到洗衣机和智能手表。传感器、微控制器和其他嵌入式处理器在我们的生活中扮演着越来越重要的角色，并且所有这些设备都需要软件来运行。然而，这些设备中所含的处理器通常非常小，以至于无法执行由高级编程语言编写的编译代码。在许多情况下，这些设备需要独立的汇编程序，而这些程序不依赖于常见编程语言所需的运行时库。
- en: Vulnerability Analysis
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 漏洞分析
- en: A subset of security professionals spend their days trying to identify vulnerabilities
    in various types of computer systems. Many avenues for attacking a program involve
    the way the program stores its runtime information. Learning assembly enables
    security professionals to understand how vulnerabilities arise and how they can
    be exploited.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一部分安全专业人员的工作是尝试识别各种计算机系统中的漏洞。许多攻击程序的途径涉及程序如何存储其运行时信息。学习汇编语言使安全专家能够理解漏洞是如何产生的，以及如何被利用。
- en: Other security professionals spend time “reverse engineering” malicious code
    in malware and other malicious software. A working knowledge of assembly is essential
    to enable these software engineers to quickly develop countermeasures to protect
    systems against attack. Lastly, developers who lack an understanding of how the
    code they write translates to assembly may end up unwittingly writing vulnerable
    code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他安全专家则花时间“逆向工程”恶意代码，例如恶意软件中的代码。掌握汇编语言的基本知识对这些软件工程师至关重要，能够帮助他们迅速开发对策，保护系统免受攻击。最后，缺乏对自己编写的代码如何转换为汇编语言的理解的开发人员，可能会无意中编写出有漏洞的代码。
- en: Critical Code Sequences in System-Level Software
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统级软件中的关键代码序列
- en: Lastly, there are some components of a computer system that just cannot be optimized
    sufficiently by compilers and require handwritten assembly. Some system levels
    have handwritten assembly code in areas where detailed machine-specific optimizations
    are critical for performance. For example, the boot sequence on all computers
    is written in assembly code. Operating systems often contain handwritten assembly
    for thread or process context-switching. Humans are often able to produce better-optimized
    assembly code than compilers for these short and performance-critical sequences.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，计算机系统中有些组件是编译器无法充分优化的，必须手写汇编代码。一些系统层次中，存在手写的汇编代码，这些代码在需要进行详细的机器特定优化以提升性能的区域中至关重要。例如，所有计算机的引导序列都是用汇编语言编写的。操作系统通常包含手写的汇编代码，用于线程或进程上下文切换。在这些短小且对性能至关重要的代码序列中，人类通常能够写出比编译器更优化的汇编代码。
- en: What You Will Learn in the Coming Chapters
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将在接下来的章节中学到什么
- en: The next three chapters cover three different flavors of assembly. [Chapters
    7](ch07.xhtml#ch07) and [8](ch08.xhtml#ch08) cover x86-64 and its earlier form,
    IA32\. [Chapter 9](ch09.xhtml#ch09) covers ARMv8-A assembly, which is the ISA
    found on most modern ARM devices, including single-board computers like the Raspberry
    Pi. [Chapter 10](ch10.xhtml#ch10) contains a summary and some key takeaways for
    learning assembly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三章将介绍三种不同风格的汇编语言。[第7章](ch07.xhtml#ch07)和[第8章](ch08.xhtml#ch08)介绍x86-64及其早期版本IA32。
    [第9章](ch09.xhtml#ch09)介绍ARMv8-A汇编语言，这是大多数现代ARM设备的指令集架构（ISA），包括像Raspberry Pi这样的单板计算机。[第10章](ch10.xhtml#ch10)总结了学习汇编的要点和一些关键的收获。
- en: Each of these different flavors of assembly implement different instruction
    set architectures (ISAs). Recall that an *ISA* (see [Chapter 5](ch05.xhtml#ch05))
    defines the set of instructions and their binary encoding, the set of CPU registers,
    and the effects of executing instructions on the state of the CPU and memory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每种不同风格的汇编实现了不同的指令集架构（ISA）。回想一下，*ISA*（参见[第5章](ch05.xhtml#ch05)）定义了指令及其二进制编码、CPU寄存器的集合，以及执行指令时对CPU和内存状态的影响。
- en: 'In the following three chapters, you will see general similarities across all
    the ISAs, including that CPU registers are used as operands of many instructions,
    and that each ISA provides similar types of instructions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三章中，你将看到所有ISA之间的普遍相似性，包括CPU寄存器作为许多指令的操作数，并且每个ISA提供类似类型的指令：
- en: instructions for computing arithmetic and logic operations, such as addition
    or bitwise AND
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于计算算术和逻辑运算的指令，例如加法或按位与。
- en: instructions for control flow that are used to implement branching such as if–else,
    loops, and function call and return
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于控制流的指令，这些指令用于实现分支操作，如if–else、循环和函数调用与返回。
- en: instructions for data movement that load and store values between CPU registers
    and memory
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据移动的指令，这些指令在CPU寄存器和内存之间加载和存储值。
- en: instructions for pushing and popping values from the stack. These instructions
    are used to implement the execution call stack, where a new frame of stack memory
    (that stores a running function’s local variables and parameters) is added to
    the top of the stack on a function call, and a frame is removed from the top of
    the stack on a function return.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于从栈中推送和弹出值的指令。这些指令用于实现执行调用栈，当函数被调用时，一个新的栈帧（存储运行函数的局部变量和参数）会被添加到栈顶，而函数返回时，栈顶的栈帧会被移除。
- en: A C compiler translates C source code to a specific ISA instruction set. The
    compiler translates C statements, including loops, `if`–`else`, function calls,
    and variable access, to a specific set of instructions that are defined by the
    ISA and implemented by a CPU that is designed to execute instructions from the
    specific ISA. For example, a compiler translates C to x86 instructions for execution
    on an Intel x86 processor, or translates C to ARM instructions for execution on
    an ARM processor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个C语言编译器将C源代码翻译为特定的ISA指令集。编译器将C语句，包括循环、`if`–`else`、函数调用和变量访问，翻译成由ISA定义并由设计来执行该ISA指令的CPU实现的特定指令集。例如，编译器将C语言翻译为x86指令，以便在Intel
    x86处理器上执行，或将C语言翻译为ARM指令，以便在ARM处理器上执行。
- en: As you read the chapters in the assembly part of the book, you may notice that
    some key terms are defined again and that some figures are reproduced. To best
    aid other CS educators, we designed each chapter to be used independently at particular
    colleges and universities. While most of the material in each chapter is unique,
    we hope the commonalities between the chapters help reinforce the similarities
    between the different flavors of assembly in the mind of readers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读本书汇编部分的章节时，你可能会注意到一些关键术语被重新定义，并且一些图表被重复展示。为了更好地帮助其他计算机科学教育工作者，我们设计了每章可以在特定的高校和大学独立使用。虽然每一章中的大部分内容都是独特的，但我们希望章节之间的共性有助于加强读者对不同汇编风格之间相似性的理解。
- en: Ready to learn assembly? Let’s dive right in!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好学习汇编语言了吗？让我们直接开始吧！
