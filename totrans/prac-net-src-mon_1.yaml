- en: $ **tcpdump -n -r icmp.pcap dst net 192.168.2.0**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:28.844237 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 5, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.850913 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 6, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP echo request, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-11: Capturing traffic to a network via BPF with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: Many protocols offer BPF primitives that allow you to look at specific
  prefs: []
  type: TYPE_NORMAL
- en: aspects of the traffic, and you can also combine elements of the previous
  prefs: []
  type: TYPE_NORMAL
- en: examples to limit what you see. For example, Listing 6-12 shows only ICMP
  prefs: []
  type: TYPE_NORMAL
- en: echo replies from IP address 192.168.2.127\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and dst host 192.168.2.127**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-12: Capturing ICMP echo replies to a host via BPF with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Extracting Details from Tcpdump Output***'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to displaying traffic more specifically, with Tcpdump, you can
  prefs: []
  type: TYPE_NORMAL
- en: also extract more details from the results. For example, Listing 6-13 tells
  prefs: []
  type: TYPE_NORMAL
- en: 'Tcpdump to show timestamps as *YYYY*- *MM*- *DD* *HH*: *MM*: *SS.milli seconds*
    via'
  prefs: []
  type: TYPE_NORMAL
- en: –tttt, adds layer 2 headers with –e, and tells Tcpdump to show all headers
  prefs: []
  type: TYPE_NORMAL
- en: and data in hex and ASCII format with -XX.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -tttt -e -XX -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and
    dst host 192.168.2.127**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '2013-02-16 20:30:30.013728 00:0d:b9:27:f1:48 > 00:13:10:65:2f:ac, ethertype
    IPv4 (0x0800), length 98: 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0000: 0013 1065 2fac 000d b927 f148 0800 4500 ...e/....''.H..E.'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0010: 0054 0000 0000 fb01 035c adc2 4b63 c0a8 .T.......\..Kc..'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0020: 027f 0000 2092 b951 0001 65ec 1f51 0000 .......Q..e..Q..'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0030: 0000 d30a 0f00 0000 0000 1011 1213 1415 ................'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0040: 1617 1819 1a1b 1c1d 1e1f 2021 2223 2425 ...........!"#$%'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0050: 2627 2829 2a2b 2c2d 2e2f 3031 3233 3435 &''()*+,-./012345'
  prefs: []
  type: TYPE_NORMAL
- en: '0x0060: 3637 67'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-13: Extracting more details from Tcpdump output*'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tcpdump offers other matching and storage options. For more information, see*'
  prefs: []
  type: TYPE_NORMAL
- en: '*the Tcpdump manual page on SO. Type **man tcpdump** at a command prompt to*'
  prefs: []
  type: TYPE_NORMAL
- en: '*read the manual.*'
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **121**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Examining Full Content Data with Tcpdump***'
  prefs: []
  type: TYPE_NORMAL
- en: Because Tcpdump also works on saved traces, you can use it to examine the
  prefs: []
  type: TYPE_NORMAL
- en: full content data saved on SO stand-alone or sensor platforms in the */nsm/*
  prefs: []
  type: TYPE_NORMAL
- en: '*sensor_data/<sensorname>/dailylogs* directory. When searching for indicators
    of compromise in network traffic, you may want to search every file in these'
  prefs: []
  type: TYPE_NORMAL
- en: directories. You can use Tcpdump and a BPF modifier to hone your output.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Listing 6-14 looks through all files for traffic involving
  prefs: []
  type: TYPE_NORMAL
- en: host 8.8.8.8 and TCP thanks to a for loop and the find command. Note the
  prefs: []
  type: TYPE_NORMAL
- en: backticks (on the same key as the tilde symbol) in front of the find and after
  prefs: []
  type: TYPE_NORMAL
- en: -type f.
  prefs: []
  type: TYPE_NORMAL
- en: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/ -type f`; do tcpdump
    -n -c 1 -r $i** **host 8.8.8.8 and tcp; done**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361019690,
    link-type EN10MB (Ethernet) u
  prefs: []
  type: TYPE_NORMAL
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361045719,
    link-type EN10MB (Ethernet) v
  prefs: []
  type: TYPE_NORMAL
- en: '21:02:06.430169 IP 192.168.2.126.44334 > 8.8.8.8.53:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [S], seq 1330246822, win 42340, options
  prefs: []
  type: TYPE_NORMAL
- en: '[mss 1460,sackOK,TS val 157066547 ecr 0,nop,wscale 11], length 0 w'
  prefs: []
  type: TYPE_NORMAL
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361017706,
    link-type EN10MB (Ethernet) x
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-14: Looping through pcap files*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-14 shows that the first trace u did not contain any traffic
  prefs: []
  type: TYPE_NORMAL
- en: matching the BPF. The second trace v contains a matching SYN packet w.
  prefs: []
  type: TYPE_NORMAL
- en: The third trace at x did not contain any matching packets.
  prefs: []
  type: TYPE_NORMAL
- en: With a repository of full content data at your disposal, you give greater
  prefs: []
  type: TYPE_NORMAL
- en: context to your NSM analysis. While most NSM analysts use many tools to
  prefs: []
  type: TYPE_NORMAL
- en: access full content data, I often use Tcpdump to take a quick look at specific
  prefs: []
  type: TYPE_NORMAL
- en: network activity, applying a BPF for a certain port or host of interest.
  prefs: []
  type: TYPE_NORMAL
- en: '**using dumpcap and Tshark**'
  prefs: []
  type: TYPE_NORMAL
- en: The Dumpcap and Tshark tools are shipped with the Wireshark ( *http://*
  prefs: []
  type: TYPE_NORMAL
- en: '*www.wireshark.org/*) suite. Dumpcap is a simple traffic collection tool, and'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark is the command line version of the Wireshark network traffic ana-
  prefs: []
  type: TYPE_NORMAL
- en: lyzer. Dumpcap, and by extension Tshark, depend on the libpcap traffic
  prefs: []
  type: TYPE_NORMAL
- en: capture library to access packets. Both Dumpcap and Tshark are avail-
  prefs: []
  type: TYPE_NORMAL
- en: able on SO, but they are not running by default. Analysts can invoke each
  prefs: []
  type: TYPE_NORMAL
- en: on demand, most often to access full content data in */nsm/sensor_data/*
  prefs: []
  type: TYPE_NORMAL
- en: '*<sensorname>/dailylogs*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Gerald Combs is the original author of Dumpcap, and he and the Wireshark team*'
  prefs: []
  type: TYPE_NORMAL
- en: '*code under the GNU General Public License version 2 (* http://www.wireshark'
  prefs: []
  type: TYPE_NORMAL
- en: .org/faq.html *).*
  prefs: []
  type: TYPE_NORMAL
- en: '**122** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark’s strength lies in protocol analysis, thanks to the hundreds of protocols
    it understands, and, unlike Tcpdump, it allows you access just
  prefs: []
  type: TYPE_NORMAL
- en: about any aspect of a protocol using fairly human-friendly syntax. For this
  prefs: []
  type: TYPE_NORMAL
- en: reason, if I need to decode a specific protocol in a command line environ-
  prefs: []
  type: TYPE_NORMAL
- en: ment, I choose Tshark over Tcpdump.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Tshark***'
  prefs: []
  type: TYPE_NORMAL
- en: You can run Tshark from a command terminal, although if you start it
  prefs: []
  type: TYPE_NORMAL
- en: with sudo, it will likely report the following error and warning as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 6-15\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tshark -i eth1**
  prefs: []
  type: TYPE_NORMAL
- en: 'tshark: Lua: Error during loading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[string "/usr/share/wireshark/init.lua"]:45: dofile has been disabled'
  prefs: []
  type: TYPE_NORMAL
- en: Running as user "root" and group "root". This could be dangerous.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing on eth1
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-15: Lua error when starting Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: The protocol dissectors shipped with Wireshark and Tshark may con-
  prefs: []
  type: TYPE_NORMAL
- en: tain vulnerabilities. Clever intruders could exploit those vulnerabilities by
  prefs: []
  type: TYPE_NORMAL
- en: sending specially crafted network traffic past a sensor. If malicious packets
  prefs: []
  type: TYPE_NORMAL
- en: exploit Wireshark or Tshark while it is sniffing traffic, an intruder could
  prefs: []
  type: TYPE_NORMAL
- en: gain control of the sensor. If Wireshark or Tshark is running with root privi-
  prefs: []
  type: TYPE_NORMAL
- en: leges when exploitation occurs, the intruder could gain total control of the
  prefs: []
  type: TYPE_NORMAL
- en: sensor.
  prefs: []
  type: TYPE_NORMAL
- en: To partially mitigate the risk of granting intruders unauthorized access,
  prefs: []
  type: TYPE_NORMAL
- en: the Wireshark developers recommend that users not run either program
  prefs: []
  type: TYPE_NORMAL
- en: with root privileges. Instead, they suggest capturing traffic with Dumpcap
  prefs: []
  type: TYPE_NORMAL
- en: first, and then analyzing saved packets with Wireshark or Tshark.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Dumpcap***'
  prefs: []
  type: TYPE_NORMAL
- en: Dumpcap uses the same BPF syntax as Tcpdump, as shown in Listing 6-16\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo dumpcap -i eth1 -c 2 -w /tmp/tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
  prefs: []
  type: TYPE_NORMAL
- en: 'File: /tmp/tshark-icmp.pcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packets captured: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packets Received/Dropped on Interface eth1: 2/0'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-16: Capturing two ICMP packets with Dumpcap*'
  prefs: []
  type: TYPE_NORMAL
- en: The command in Listing 6-16 tells Dumpcap to listen to the eth1 inter-
  prefs: []
  type: TYPE_NORMAL
- en: face, save two packets, write to the */tmp/tshark-icmp.pcap* file, and limit
    capture to ICMP traffic involving the computer at IP address 192.168.2.108\.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the listing, you don’t need to specify a snaplength via -s
  prefs: []
  type: TYPE_NORMAL
- en: as you do with Tcpdump, because Dumpcap uses a default maximum value.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-15 writes to the */tmp* directory because the operating system won’t
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **123**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: let me write to my home directory as root through sudo. I must write to a directory
    that the root user can also write to, which doesn’t include my
  prefs: []
  type: TYPE_NORMAL
- en: user’s home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Besides using sudo and writing to a directory writable by root, you can
  prefs: []
  type: TYPE_NORMAL
- en: reconfigure Wireshark on SO to create a wireshark group, and then add your
  prefs: []
  type: TYPE_NORMAL
- en: user account to that group. Doing so will allow your users to capture packets
  prefs: []
  type: TYPE_NORMAL
- en: with Dumpcap without invoking sudo to elevate privileges. To accomplish this
  prefs: []
  type: TYPE_NORMAL
- en: 'goal, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo dpkg-reconfigure wireshark-common**
  prefs: []
  type: TYPE_NORMAL
- en: If you run this command within an OpenSSH session, the screen should
  prefs: []
  type: TYPE_NORMAL
- en: look like Listing 6-17\.
  prefs: []
  type: TYPE_NORMAL
- en: âââââââââââââââââââââââ¤ Configuring wireshark-common âââââââââââââââââââââââ
  prefs: []
  type: TYPE_NORMAL
- en: â â
  prefs: []
  type: TYPE_NORMAL
- en: â Dumpcap can be installed in a way that allows members of the "wireshark" â
    â system group to capture packets. This is recommended over the â
  prefs: []
  type: TYPE_NORMAL
- en: â alternative of running Wireshark/Tshark directly as root, because less â
  prefs: []
  type: TYPE_NORMAL
- en: â of the code will run with elevated privileges. â
  prefs: []
  type: TYPE_NORMAL
- en: â â
  prefs: []
  type: TYPE_NORMAL
- en: â For more detailed information please see â
  prefs: []
  type: TYPE_NORMAL
- en: â /usr/share/doc/wireshark-common/README.Debian. â
  prefs: []
  type: TYPE_NORMAL
- en: â â
  prefs: []
  type: TYPE_NORMAL
- en: â Enabling this feature may be a security risk, so it is disabled by â
  prefs: []
  type: TYPE_NORMAL
- en: â default. If in doubt, it is suggested to leave it disabled. â
  prefs: []
  type: TYPE_NORMAL
- en: â â
  prefs: []
  type: TYPE_NORMAL
- en: â Should non-superusers be able to capture packets? â
  prefs: []
  type: TYPE_NORMAL
- en: â â
  prefs: []
  type: TYPE_NORMAL
- en: â <Yes> <No> â â â
  prefs: []
  type: TYPE_NORMAL
- en: âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-17: Configuring wireshark-common via OpenSSH session*'
  prefs: []
  type: TYPE_NORMAL
- en: Use the tab or arrow keys to select **Yes**, and then press enter. The script
  prefs: []
  type: TYPE_NORMAL
- en: will add a wireshark user to the */etc/group* file. Next, add your user to the
  prefs: []
  type: TYPE_NORMAL
- en: 'wireshark group. Here, the username is sademo:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo usermod -a -G wireshark sademo**
  prefs: []
  type: TYPE_NORMAL
- en: Now log out of the system and log back in. (If you try to capture traffic
  prefs: []
  type: TYPE_NORMAL
- en: without logging in again, you will get an error.) Try capturing traffic as a
  prefs: []
  type: TYPE_NORMAL
- en: normal user, as shown in Listing 6-18\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **dumpcap -i eth1 -c 2 -w tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
  prefs: []
  type: TYPE_NORMAL
- en: 'File: tshark-icmp.pcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packets captured: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packets received/dropped on interface eth1: 2/0'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-18: Capturing traffic with user-level privileges with Dumpcap. You
    can now* *capture traffic with Dumpcap without using sudo and encountering errors.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**124** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Tshark on Dumpcap’s Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: Once Dumpcap has captured traffic, analyze it with Tshark. To run Tshark
  prefs: []
  type: TYPE_NORMAL
- en: in its most basic mode, use the -r switch, as shown in Listing 6-19\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -r tshark-icmp.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: 1 0.000000 192.168.2.108 -> 8.8.8.8 ICMP 74 Echo (ping) request
  prefs: []
  type: TYPE_NORMAL
- en: id=0x0001, seq=17/4352, ttl=127
  prefs: []
  type: TYPE_NORMAL
- en: 2 0.022643 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo (ping) reply
  prefs: []
  type: TYPE_NORMAL
- en: id=0x0001, seq=17/4352, ttl=251
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-19: Reading a trace with Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: This output should be fairly easy to understand, although the time field
  prefs: []
  type: TYPE_NORMAL
- en: may be unfamiliar. Specifically, host 192.168.2.108 issues an ICMP echo
  prefs: []
  type: TYPE_NORMAL
- en: request to host 8.8.8.8 in packet 1, and host 8.8.8.8 responds with an ICMP
  prefs: []
  type: TYPE_NORMAL
- en: echo reply in packet 2\. By default, Tshark shows an initial time of 0, fol-
  prefs: []
  type: TYPE_NORMAL
- en: lowed by time elapsed since the first packet. You can change that to show
  prefs: []
  type: TYPE_NORMAL
- en: a more readable format with the -t ad switch, as shown in Listing 6-20\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -r tshark-icmp.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: 1 2013-02-17 13:37:45.922462 192.168.2.108 -> 8.8.8.8 ICMP 74 Echo
  prefs: []
  type: TYPE_NORMAL
- en: (ping) request id=0x0001, seq=17/4352, ttl=127
  prefs: []
  type: TYPE_NORMAL
- en: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
  prefs: []
  type: TYPE_NORMAL
- en: (ping) reply id=0x0001, seq=17/4352, ttl=251
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-20: Showing absolute timestamps using the -t ad switch in Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Display Filters with Tshark***'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark provides a robust language to show packets that match *display*
  prefs: []
  type: TYPE_NORMAL
- en: '*filters*. Tshark and Wireshark use display filters to control what traffic
    is'
  prefs: []
  type: TYPE_NORMAL
- en: shown, but display filters do not affect packet capture. Use BPF syntax if you
  prefs: []
  type: TYPE_NORMAL
- en: want to influence what Tshark (or Dumpcap, for that matter) collects and
  prefs: []
  type: TYPE_NORMAL
- en: stores. For example, Listing 6-21 invokes a display filter to show only ICMP
  prefs: []
  type: TYPE_NORMAL
- en: echo replies (ICMP type 0 messages).
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0"**
  prefs: []
  type: TYPE_NORMAL
- en: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
  prefs: []
  type: TYPE_NORMAL
- en: (ping) reply id=0x0001, seq=17/4352, ttl=251
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-21: Showing an ICMP echo reply in Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: This output may not seem very different from that of the Tcpdump fil-
  prefs: []
  type: TYPE_NORMAL
- en: ter shown in Listing 6-20, but the power of Tshark (and Wireshark) comes
  prefs: []
  type: TYPE_NORMAL
- en: from the extensive catalog of available display filters. The ICMP protocol has
  prefs: []
  type: TYPE_NORMAL
- en: 64 display filters available as of this writing, as listed at *http://www.wireshark*
  prefs: []
  type: TYPE_NORMAL
- en: '*.org/docs/dfref/i/icmp.html*. All of these can be used to define specific
    values to be matched with a display filter.'
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **125**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark reveals its depth of knowledge for protocols when you pass it the
  prefs: []
  type: TYPE_NORMAL
- en: -V switch, which tells Tshark to produce a verbose protocol decode for the
  prefs: []
  type: TYPE_NORMAL
- en: specified traffic. Add -x to display a hex and ASCII listing of the packet.
  prefs: []
  type: TYPE_NORMAL
- en: Both options are shown in Listing 6-22\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0" -x -V**
  prefs: []
  type: TYPE_NORMAL
- en: 'uFrame 2: 74 bytes on wire (592 bits), 74 bytes captured (592 bits)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrival Time: Feb 17, 2014 13:37:45.945105000 UTC'
  prefs: []
  type: TYPE_NORMAL
- en: 'Epoch Time: 1361108265.945105000 seconds'
  prefs: []
  type: TYPE_NORMAL
- en: '[Time delta from previous captured frame: 0.022643000 seconds]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Time delta from previous displayed frame: 0.000000000 seconds]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Time since reference or first frame: 0.022643000 seconds]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Frame Number: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Frame Length: 74 bytes (592 bits)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture Length: 74 bytes (592 bits)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Frame is marked: False]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Frame is ignored: False]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Protocols in frame: eth:ip:icmp:data]'
  prefs: []
  type: TYPE_NORMAL
- en: 'vEthernet II, Src: PcEngine_27:f1:48 (00:0d:b9:27:f1:48), Dst: Cisco-Li_65:2f:ac'
  prefs: []
  type: TYPE_NORMAL
- en: (00:13:10:65:2f:ac)
  prefs: []
  type: TYPE_NORMAL
- en: 'Destination: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Address: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
  prefs: []
  type: TYPE_NORMAL
- en: '.... ...0 .... .... .... .... = IG bit: Individual address (unicast)'
  prefs: []
  type: TYPE_NORMAL
- en: '.... ..0\. .... .... .... .... = LG bit: Globally unique address (factory default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Address: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
  prefs: []
  type: TYPE_NORMAL
- en: '.... ...0 .... .... .... .... = IG bit: Individual address (unicast)'
  prefs: []
  type: TYPE_NORMAL
- en: '.... ..0\. .... .... .... .... = LG bit: Globally unique address (factory default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type: IP (0x0800)'
  prefs: []
  type: TYPE_NORMAL
- en: 'wInternet Protocol Version 4, Src: 8.8.8.8 (8.8.8.8), Dst: 192.168.2.108 (192.168.2.108)
    Version: 4'
  prefs: []
  type: TYPE_NORMAL
- en: 'Header length: 20 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT
    (Not'
  prefs: []
  type: TYPE_NORMAL
- en: ECN-Capable Transport))
  prefs: []
  type: TYPE_NORMAL
- en: '0000 00.. = Differentiated Services Codepoint: Default (0x00)'
  prefs: []
  type: TYPE_NORMAL
- en: '.... ..00 = Explicit Congestion Notification: Not-ECT (Not ECN-Capable Transport)'
  prefs: []
  type: TYPE_NORMAL
- en: (0x00)
  prefs: []
  type: TYPE_NORMAL
- en: 'Total Length: 60'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identification: 0x0000 (0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flags: 0x00'
  prefs: []
  type: TYPE_NORMAL
- en: '0... .... = Reserved bit: Not set'
  prefs: []
  type: TYPE_NORMAL
- en: '.0.. .... = Don''t fragment: Not set'
  prefs: []
  type: TYPE_NORMAL
- en: '..0\. .... = More fragments: Not set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fragment offset: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Time to live: 251'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protocol: ICMP (1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Header checksum: 0xec9c [correct]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Good: True]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bad: False]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: 8.8.8.8 (8.8.8.8)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Destination: 192.168.2.108 (192.168.2.108)'
  prefs: []
  type: TYPE_NORMAL
- en: '**126** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: xInternet Control Message Protocol
  prefs: []
  type: TYPE_NORMAL
- en: 'Type: 0 (Echo (ping) reply)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checksum: 0x554a [correct]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identifier (BE): 1 (0x0001)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identifier (LE): 256 (0x0100)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequence number (BE): 17 (0x0011)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequence number (LE): 4352 (0x1100)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Response To: 1]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Response Time: 22.643 ms]'
  prefs: []
  type: TYPE_NORMAL
- en: Data (32 bytes)
  prefs: []
  type: TYPE_NORMAL
- en: 'Data: 6162636465666768696a6b6c6d6e6f707172737475767761...'
  prefs: []
  type: TYPE_NORMAL
- en: '[Length: 32]'
  prefs: []
  type: TYPE_NORMAL
- en: y0000 00 13 10 65 2f ac 00 0d b9 27 f1 48 08 00 45 00 ...e/....'.H..E.
  prefs: []
  type: TYPE_NORMAL
- en: 0010 00 3c 00 00 00 00 fb 01 ec 9c 08 08 08 08 c0 a8 .<..............
  prefs: []
  type: TYPE_NORMAL
- en: 0020 02 6c 00 00 55 4a 00 01 00 11 61 62 63 64 65 66 .l..UJ....abcdef
  prefs: []
  type: TYPE_NORMAL
- en: 0030 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 ghijklmnopqrstuv
  prefs: []
  type: TYPE_NORMAL
- en: 0040 77 61 62 63 64 65 66 67 68 69 wabcdefghilll
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-22: Full decode of the ICMP echo reply in Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full decode for this packet is broken into five main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: • Section u displays frame information, with metadata on time, frame
  prefs: []
  type: TYPE_NORMAL
- en: size, and other details.
  prefs: []
  type: TYPE_NORMAL
- en: • Section v shows details found in the Ethernet header such as source,
  prefs: []
  type: TYPE_NORMAL
- en: destination, and Media Access Control (MAC) addresses.
  prefs: []
  type: TYPE_NORMAL
- en: • Section w offers information from the IP header, like source and desti-
  prefs: []
  type: TYPE_NORMAL
- en: nation IP addresses and other IP protocol data.
  prefs: []
  type: TYPE_NORMAL
- en: • Section x shows details on the ICMP protocol itself.
  prefs: []
  type: TYPE_NORMAL
- en: • Section y is a hexadecimal and ASCII representation of the entire frame.
  prefs: []
  type: TYPE_NORMAL
- en: Tools like Tshark are helpful because they expose every detail of a
  prefs: []
  type: TYPE_NORMAL
- en: protocol. For example, you may find that it is important to know an ICMP
  prefs: []
  type: TYPE_NORMAL
- en: sequence number, if that element may have been used for suspicious or
  prefs: []
  type: TYPE_NORMAL
- en: malicious purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Tshark Display Filters in Action***'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll look at some display filter examples that demonstrate
  prefs: []
  type: TYPE_NORMAL
- en: the power of Tshark.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you want to search traffic for Simple Mail Transport Protocol
  prefs: []
  type: TYPE_NORMAL
- en: (SMTP) commands. You could use the smtp.req.command display filter, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 6-23\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -r smtp.pcap -R 'smtp.req.command'**
  prefs: []
  type: TYPE_NORMAL
- en: '4 2014-02-17 14:09:14.659043 192.168.2.127 -> 68.87.26.155 SMTP 76 C: helo
    test'
  prefs: []
  type: TYPE_NORMAL
- en: '10 2014-02-17 14:09:19.090208 192.168.2.127 -> 68.87.26.155 SMTP 71 C: quit'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-23: Tshark display filter for SMTP*'
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **127**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: To look for user agents in HTTP GET request traffic generated by curl, you could
    use two filters together. Listing 6-24 uses a for loop to search an
  prefs: []
  type: TYPE_NORMAL
- en: entire directory. The echo statement shows the trace in question as Tshark
  prefs: []
  type: TYPE_NORMAL
- en: searches it.
  prefs: []
  type: TYPE_NORMAL
- en: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/ -type
    f`; do echo $i;** **tshark -t ad -r $i -R 'http.user_agent contains "curl" and
    http.request.method == GET'; done**
  prefs: []
  type: TYPE_NORMAL
- en: /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
  prefs: []
  type: TYPE_NORMAL
- en: 143841 2014-02-17 14:26:43.875022 192.168.2.127 -> 217.160.51.31 HTTP 223 GET
    / HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-24: Looping through data with Tshark to find HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark display filters also make it easy to search for traffic to or from
  prefs: []
  type: TYPE_NORMAL
- en: a range of IP addresses. For example, Listing 6-25 looks for traffic with IP
  prefs: []
  type: TYPE_NORMAL
- en: addresses between 192.168.2.100 and 192.168.2.110 inclusive that is not TCP
  prefs: []
  type: TYPE_NORMAL
- en: or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -r /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
    -R**
  prefs: []
  type: TYPE_NORMAL
- en: '**''ip.dst >= 192.168.2.100 and ip.dst <= 192.168.2.110 and not tcp and not
    udp''**'
  prefs: []
  type: TYPE_NORMAL
- en: 10327 2014-02-17 13:33:01.775757 8.8.8.8 -> 192.168.2.108
  prefs: []
  type: TYPE_NORMAL
- en: ICMP 74 Echo (ping) reply id=0x0001, seq=16/4096, ttl=251
  prefs: []
  type: TYPE_NORMAL
- en: 12519 2014-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108
  prefs: []
  type: TYPE_NORMAL
- en: ICMP 74 Echo (ping) reply id=0x0001, seq=17/4352, ttl=251
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-25: Searching for a range of IP addresses with a Tshark display
    filter*'
  prefs: []
  type: TYPE_NORMAL
- en: For more detail, add the -V and/or -x switch.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I like to use Tshark to review saved traces for specific
  prefs: []
  type: TYPE_NORMAL
- en: elements. It would be difficult to create the equivalent BPF syntax for many
  prefs: []
  type: TYPE_NORMAL
- en: of these display filters. While technically possible, the BPF syntax can be
  prefs: []
  type: TYPE_NORMAL
- en: horribly complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**running argus and the ra client**'
  prefs: []
  type: TYPE_NORMAL
- en: Our final command line tool is Argus ( *http://www.qosient.com/argus/*), a
  prefs: []
  type: TYPE_NORMAL
- en: session data generation and analysis suite, and its client for reading data,
  prefs: []
  type: TYPE_NORMAL
- en: Ra. The Argus server is running by default on SO, but analysts must use
  prefs: []
  type: TYPE_NORMAL
- en: the Argus client tools to access the data stored in the */nsm/sensor_data/*
  prefs: []
  type: TYPE_NORMAL
- en: '*<sensorname>/argus* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Carter Bullard first started writing Argus at Carnegie Mellon’s Software Engineering*
    *Institute (SEI) in 1993, and released the code publicly as Argus 1.5 in early
    1996\.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Today, the code exists as a server component and multiple client components,
    licensed* *under the GNU General Public License version 3\.*'
  prefs: []
  type: TYPE_NORMAL
- en: You can validate the status of the Argus server by running the nsm_sensor_
  prefs: []
  type: TYPE_NORMAL
- en: ps-status script with the --only-argus switch, as shown in Listing 6-26\.
  prefs: []
  type: TYPE_NORMAL
- en: '**128** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-status --only-argus**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sademo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-26: Checking Argus status*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Stopping and Starting Argus***'
  prefs: []
  type: TYPE_NORMAL
- en: If Argus is not running, you can restart it. Let’s stop it, and then restart
    it,
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Listing 6-27\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-stop --only-argus**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: sademo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-start --only-argus**
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: sademo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* disk space currently at 21%'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-27: Stopping and starting Argus*'
  prefs: []
  type: TYPE_NORMAL
- en: The Argus data stored in the */nsm/sensor_data/<sensorname>/argus* direc-
  prefs: []
  type: TYPE_NORMAL
- en: tory appears as individual files, one for each day, named *YYYY-MM-DD.log*.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting the Argus server will not destroy the previous file,
  prefs: []
  type: TYPE_NORMAL
- en: only append to it.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Argus File Format***'
  prefs: []
  type: TYPE_NORMAL
- en: The files in the Argus directory are binary files readable only by the Argus
  prefs: []
  type: TYPE_NORMAL
- en: client tools. The binary format keeps the files compact. In comparison, a
  prefs: []
  type: TYPE_NORMAL
- en: sample sensor with 48 days of NSM data shows the following directory usage
  prefs: []
  type: TYPE_NORMAL
- en: for full content and Argus session data. Listing 6-28 has the details.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo du -csh /nsm/sensor_data/soe-eth0/argus/**
  prefs: []
  type: TYPE_NORMAL
- en: 1.8G /nsm/sensor_data/soe-eth0/argus/
  prefs: []
  type: TYPE_NORMAL
- en: 1.8G total
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo du -csh /nsm/sensor_data/soe-eth0/dailylogs/**
  prefs: []
  type: TYPE_NORMAL
- en: 83G /nsm/sensor_data/soe-eth0/dailylogs/
  prefs: []
  type: TYPE_NORMAL
- en: 83G total
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-28: Sample Argus and pcap storage*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, 48 days of full content data in pcap format on this sen-
  prefs: []
  type: TYPE_NORMAL
- en: sor occupies 83GB, but Argus session data for the same period occupies
  prefs: []
  type: TYPE_NORMAL
- en: only 1.8GB, or 1/46 of the space. This ratio is likely to be quite different
  prefs: []
  type: TYPE_NORMAL
- en: depending on the nature of each network, but you can see the space advan-
  prefs: []
  type: TYPE_NORMAL
- en: tage associated with session data compared to full content data.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **129**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: This comparison demonstrates the power of session data. If you just
  prefs: []
  type: TYPE_NORMAL
- en: need to know the IP address, protocol, and/or ports associated with a con-
  prefs: []
  type: TYPE_NORMAL
- en: nection, you can acquire all of that information from session data. You
  prefs: []
  type: TYPE_NORMAL
- en: don’t need to capture or search through piles of full content data to get it.
  prefs: []
  type: TYPE_NORMAL
- en: '***Examining Argus Data***'
  prefs: []
  type: TYPE_NORMAL
- en: Analysts who enjoy parsing data using command line tools are likely to find
  prefs: []
  type: TYPE_NORMAL
- en: Argus data particularly useful. I’ll show a few ways to examine this data for
  prefs: []
  type: TYPE_NORMAL
- en: interesting results. You might take this approach if you want to look for spe-
  prefs: []
  type: TYPE_NORMAL
- en: cific information or script searches of session data for anomalous activity.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll compare reading session data using two Argus clients, Ra
  prefs: []
  type: TYPE_NORMAL
- en: and Racluster. Listing 6-29 shows an example of using Ra to look for session
  prefs: []
  type: TYPE_NORMAL
- en: records with destination port 21, which is used by many FTP servers.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ra -n -r 2014-02-10.log - tcp and dst port 21 -s stime saddr sport daddr
    dport sbytes dbytes** StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes
    u 11:10:53.939711 192.168.2.127.60102 202.12.29.205.21 140 74
  prefs: []
  type: TYPE_NORMAL
- en: v 11:11:04.434637 192.168.2.127.60102 202.12.29.205.21 769 1633
  prefs: []
  type: TYPE_NORMAL
- en: w 11:11:10.003721 192.168.2.127.60102 202.12.29.205.21 204 301
  prefs: []
  type: TYPE_NORMAL
- en: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
  prefs: []
  type: TYPE_NORMAL
- en: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 840 979
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:23.449643 192.168.2.127.41657 193.0.6.140.21 348 301
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-29: Argus Ra output for port 21*'
  prefs: []
  type: TYPE_NORMAL
- en: The -n switch tells Ra to not resolve port numbers to names. The BPF
  prefs: []
  type: TYPE_NORMAL
- en: syntax filter tcp and dst port 21 specifies a protocol and port of interest.
    The
  prefs: []
  type: TYPE_NORMAL
- en: -s switch tells Ra which fields to display. (The Ra man page lists all output
  prefs: []
  type: TYPE_NORMAL
- en: fields controlled by the -s switch.) The SrcBytes and DstBytes columns in
  prefs: []
  type: TYPE_NORMAL
- en: the results count transaction data bytes, which include packet headers. (To
  prefs: []
  type: TYPE_NORMAL
- en: get application layer bytes, use sappbytes and dappbytes instead of sbytes and
  prefs: []
  type: TYPE_NORMAL
- en: dbytes on the command line.)
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there are several session records for certain conversations.
  prefs: []
  type: TYPE_NORMAL
- en: The Argus server wrote these records as it saw the connection stay active.
  prefs: []
  type: TYPE_NORMAL
- en: That’s fine for a short result like the one in Listing 6-29, but not for con-
  prefs: []
  type: TYPE_NORMAL
- en: nections that stay open longer. To collapse these records, use Racluster, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 6-30\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **racluster -n -r 2013-02-10.log - tcp and dst port 21 -s stime saddr sport
    daddr dport sbytes** **dbytes**
  prefs: []
  type: TYPE_NORMAL
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes u 11:10:53.939711 192.168.2.127.60102
    202.12.29.205.21 1113 2008
  prefs: []
  type: TYPE_NORMAL
- en: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
  prefs: []
  type: TYPE_NORMAL
- en: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
  prefs: []
  type: TYPE_NORMAL
- en: '**130** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
  prefs: []
  type: TYPE_NORMAL
- en: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 1188 1280
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-30: Argus Racluster output for port 21*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the first three records (u, v, and w) from the Ra record in
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-29 have been collapsed into one record u in Listing 6-30, though
  prefs: []
  type: TYPE_NORMAL
- en: when you add the byte counts from the same sessions in the Ra output,
  prefs: []
  type: TYPE_NORMAL
- en: you’ll find that they match the total byte count in the Racluster output. For
  prefs: []
  type: TYPE_NORMAL
- en: example, the SrcBytes count for the session to 202.12.29.205 in the Ra out-
  prefs: []
  type: TYPE_NORMAL
- en: put is 140 + 769 + 204 = 1113, which is the same value as the SrcBytes field
  prefs: []
  type: TYPE_NORMAL
- en: for the session to 202.12.29.205 in the Racluster output.
  prefs: []
  type: TYPE_NORMAL
- en: I often use Argus with Racluster to quickly search a large collection
  prefs: []
  type: TYPE_NORMAL
- en: of session data via the command line, especially for unexpected entries.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than searching for specific data, I tell Argus what to omit, and then
  prefs: []
  type: TYPE_NORMAL
- en: I review what’s left.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we’ll walk through building a fairly complicated Racluster
  prefs: []
  type: TYPE_NORMAL
- en: search. It will tell Racluster to search three Argus archives for UDP traffic,
  prefs: []
  type: TYPE_NORMAL
- en: but to exclude ports 53 (DNS), 123 (Network Time Protocol, or NTP), or
  prefs: []
  type: TYPE_NORMAL
- en: host 192.168.2.120\.
  prefs: []
  type: TYPE_NORMAL
- en: This will require the use of the -m saddr daddr switch, which instructs Ra
  prefs: []
  type: TYPE_NORMAL
- en: to group records by source and destination IP address, and the -s switch,
  prefs: []
  type: TYPE_NORMAL
- en: which specifies the desired output fields. Two additional elements add the
  prefs: []
  type: TYPE_NORMAL
- en: year, month, and day to the timestamps in this report. To add these, first
  prefs: []
  type: TYPE_NORMAL
- en: create the */tmp/ra.conf* file, as shown in Listing 6-31, with a variable telling
    Ra how to display the time. (To learn more about this format, see the manual page
    for the date command.)
  prefs: []
  type: TYPE_NORMAL
- en: cat /tmp/ra.conf
  prefs: []
  type: TYPE_NORMAL
- en: RA_TIME_FORMAT="%Y-%m-%d %T"
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-31: Contents of the* /tmp/ra .conf *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, add the stime element of the -s switch that tells Ra to provide
  prefs: []
  type: TYPE_NORMAL
- en: enough room in the print buffer to show the entire date and timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-32 assembles all these components and shows the output.
  prefs: []
  type: TYPE_NORMAL
- en: $ **racluster -F /tmp/ra.conf -n -r 2014-02-10.log 2013-02-16.log 2014-02-17.log
    - udp and not \** **(port 53 or port 123 or host 192.168.2.120\) -m saddr daddr
    -s stime:20 saddr sport daddr dport** **sbytes dbytes**
  prefs: []
  type: TYPE_NORMAL
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes 2013-02-17 13:26:49
    192.168.2.114.16403 17.173.254.222.0u 540 540
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 13:26:49 192.168.2.114.16403 17.173.254.223.16386 240 240
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 13:26:49 192.168.2.114.16403 96.231.180.71.0v 660 0
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.222.0w 6000 6000
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.223.16386 2820 2820
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 20:35:09 192.168.2.115.16403 96.231.180.71.0x 7740 0
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-10 11:28:29 192.168.2.116.58444 23.23.189.8.0y 534 918
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-10 11:28:29 192.168.2.116.58444 23.23.189.44.33434 382 0
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 19:12:09 192.168.2.117.63517 157.56.106.184.3544 2472 3624
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **131**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 19:12:09 192.168.2.117.63517 157.56.106.185.3544 206 302
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.0z 157.56.149.60.3544 33372 48169
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.0{ 157.56.149.61.3544 515 755
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-32: Using Racluster to look for UDP traffic while ignoring port
    53, port 123, and host 192.168.2.120*'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 6-32, you see entries where the destination port is 0 at u, v,
  prefs: []
  type: TYPE_NORMAL
- en: w, x, and y, and where the source port is 0 at z and {. When the destina-
  prefs: []
  type: TYPE_NORMAL
- en: tion port shows 0, Racluster has aggregated multiple destination ports into
  prefs: []
  type: TYPE_NORMAL
- en: one record. For example, Listing 6-33 shows a similar Racluster search that
  prefs: []
  type: TYPE_NORMAL
- en: looks at Argus records involving 192.168.2.117 as the source IP address and
  prefs: []
  type: TYPE_NORMAL
- en: 157.56.149.0/24 (meaning any fourth octet is acceptable) as the destination
  prefs: []
  type: TYPE_NORMAL
- en: net block.
  prefs: []
  type: TYPE_NORMAL
- en: $ **racluster -F /tmp/ra.conf -n -r 2014-02-10.log 2013-02-16.log 2014-02-17.log
    - src host** **192.168.2.117 and dst net 157.56.149.0/24 and udp and not \(port
    53 or port 123 or host** **192.168.2.120\) -s stime:20 saddr sport daddr dport
    sbytes dbytes**
  prefs: []
  type: TYPE_NORMAL
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes 2013-02-16 13:37:19
    192.168.2.117.64412 157.56.149.60.3544u 20909 30653
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.64412 157.56.149.61.3544w 412 604
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 14:27:57 192.168.2.117.57672 157.56.149.60.3544v 12463 17516
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 14:27:57 192.168.2.117.57672 157.56.149.61.3544x 103 151
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-33: Using Racluster with 192.168.2.117 as the source IP address
    and 157.56.149.0/24 as the* *destination net block*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that this output represents four distinct connections: two to'
  prefs: []
  type: TYPE_NORMAL
- en: 157.56.149.60 at u and v, and two to 157.56.149.61 at w and x. When you
  prefs: []
  type: TYPE_NORMAL
- en: aggregate results using the source IP address, as in Listing 6-32, you lose
  prefs: []
  type: TYPE_NORMAL
- en: this granularity.
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned earlier that I like to use Argus and its Ra or Racluster client
  prefs: []
  type: TYPE_NORMAL
- en: to omit certain traffic, and then review what’s left for anomalies. Listing
    6-32
  prefs: []
  type: TYPE_NORMAL
- en: contains some data that I could review for suspicious or malicious entries.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this sort of review requires some ability to recognize net blocks and
  prefs: []
  type: TYPE_NORMAL
- en: protocols, but it can yield interesting results.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a net block approach means determining the source or destina-
  prefs: []
  type: TYPE_NORMAL
- en: tion of traffic. Tools like the Robtex website ( *http://www.robtex.com/*) can
  prefs: []
  type: TYPE_NORMAL
- en: help identify network owners. For example, traffic in Listing 6-32 to the
  prefs: []
  type: TYPE_NORMAL
- en: 17.0.0.0/8 traffic is likely related to Apple protocols, because Apple owns
  prefs: []
  type: TYPE_NORMAL
- en: that entire Class A net block. Doing similar analysis shows Microsoft owns
  prefs: []
  type: TYPE_NORMAL
- en: the 157.56.0.0/14 net block, Amazon owns 23.20.0.0/14, and Verizon owns
  prefs: []
  type: TYPE_NORMAL
- en: 96.224.0.0/11\.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a protocol approach requires looking at the protocols involved,
  prefs: []
  type: TYPE_NORMAL
- en: often by deciphering which applications use certain TCP or UDP ports.
  prefs: []
  type: TYPE_NORMAL
- en: Online resources like the SANS Internet Storm Center (ISC) Port Report
  prefs: []
  type: TYPE_NORMAL
- en: ( *https://isc.sans.edu/portreport.html*) provide clues concerning the functions
    of various TCP and UDP ports. For example, Apple uses port 3544 UDP for
  prefs: []
  type: TYPE_NORMAL
- en: its push notification service, and port 16386 UDP for its FaceTime service.
  prefs: []
  type: TYPE_NORMAL
- en: Many systems run UDP-based Traceroute using port 33434\. Based on this
  prefs: []
  type: TYPE_NORMAL
- en: '**132** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: knowledge, I can determine that the applications depicted in Listing 6-32
  prefs: []
  type: TYPE_NORMAL
- en: are likely all benign, and that they’re associated with Apple traffic and net-
  prefs: []
  type: TYPE_NORMAL
- en: work path discovery using Traceroute. Of course, in order to firmly identify
  prefs: []
  type: TYPE_NORMAL
- en: these sessions, I would need access to full content data or logs from other
  prefs: []
  type: TYPE_NORMAL
- en: sources. Still, this approach provides a way to identify interesting activity
  prefs: []
  type: TYPE_NORMAL
- en: with a minimum amount of effort.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter began by explaining the three types of tools available in SO:'
  prefs: []
  type: TYPE_NORMAL
- en: software for data collection, presentation, and delivery. Within the presen-
  prefs: []
  type: TYPE_NORMAL
- en: tation category, we find tools for packet analysis, and applications that work
  prefs: []
  type: TYPE_NORMAL
- en: best as NSM consoles. Some of the packet analysis tools rely on command
  prefs: []
  type: TYPE_NORMAL
- en: line interfaces, and others use graphical interfaces. This chapter discussed
  prefs: []
  type: TYPE_NORMAL
- en: several packet analysis data presentation tools that are used from the com-
  prefs: []
  type: TYPE_NORMAL
- en: 'mand line: Tcpdump, Tshark, and the Argus Ra client. You also saw how to'
  prefs: []
  type: TYPE_NORMAL
- en: use Dumpcap in concert with Tshark.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chapter 7, we’ll look at the graphical interface packet analysis tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, Xplico, and NetworkMiner. You’ll see that GUI access to packets
  prefs: []
  type: TYPE_NORMAL
- en: offers several distinct advantages, including the availability of more forms
  prefs: []
  type: TYPE_NORMAL
- en: of NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **133**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**g r a P h i c a l Pa c k e T**'
  prefs: []
  type: TYPE_NORMAL
- en: '**a N a ly S i S T o o l S**'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 introduced the categories of
  prefs: []
  type: TYPE_NORMAL
- en: 'NSM tools: data presentation, data collec-'
  prefs: []
  type: TYPE_NORMAL
- en: tion, and data delivery. As explained in that
  prefs: []
  type: TYPE_NORMAL
- en: chapter, within the data presentation category,
  prefs: []
  type: TYPE_NORMAL
- en: some tools are more suited to packet analysis, and
  prefs: []
  type: TYPE_NORMAL
- en: others are intended to function as NSM consoles.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 focused on data presentation tools that
  prefs: []
  type: TYPE_NORMAL
- en: offer access to packets on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on packet analysis tools that give analysts
  prefs: []
  type: TYPE_NORMAL
- en: GUI access to traffic. Tools in this family include Wireshark, Xplico, and
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner (NM). All of these applications ship with SO and are avail-
  prefs: []
  type: TYPE_NORMAL
- en: able on demand from the distribution. We’ll start with the most popular
  prefs: []
  type: TYPE_NORMAL
- en: 'of these types of tools: Wireshark.'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 72](index-170_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**using wireshark**'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is the main tool in the Wireshark suite, which also includes
  prefs: []
  type: TYPE_NORMAL
- en: Tshark and Dumpcap. This section highlights the Wireshark features I use
  prefs: []
  type: TYPE_NORMAL
- en: most regularly when conducting NSM operations. To learn more about
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, refer to one of the excellent books about it, such as Laura
  prefs: []
  type: TYPE_NORMAL
- en: Chappell’s work at *http://www.wiresharkbook.com/*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Wireshark***'
  prefs: []
  type: TYPE_NORMAL
- en: Like Tcpdump and Tshark, Wireshark operates on the full content data
  prefs: []
  type: TYPE_NORMAL
- en: stored in the / *nsm/sensor_data/<sensorname>/dailylogs* directory. You can
    launch Wireshark either directly or from other tools (such as Sguil, as
  prefs: []
  type: TYPE_NORMAL
- en: explained in Chapter 8).
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Wireshark is not necessarily the best tool for processing large collections
    of full content* *data, and I typically don’t suggest you begin your analysis
    of network traffic by loading a* *gigantic trace into Wireshark. Instead, identify
    traffic of interest using another means,* *such as by reviewing session data,
    and then apply Wireshark to just that traffic.*'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is an on-demand tool in SO and will run only if you launch
  prefs: []
  type: TYPE_NORMAL
- en: it manually by entering **wireshark** in a terminal window, or by choosing
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Onion**4**Wireshark** from the GUI. Wireshark displays an opening'
  prefs: []
  type: TYPE_NORMAL
- en: screen, as shown in Figure 7-1\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-1: Default Wireshark screen*'
  prefs: []
  type: TYPE_NORMAL
- en: '**136** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 73](index-171_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Viewing a Packet Capture in Wireshark***'
  prefs: []
  type: TYPE_NORMAL
- en: 'To open a packet capture in pcap format, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Choose **File**4**Open** and navigate to the */nsm/sensor_data/<sensorname>/*
  prefs: []
  type: TYPE_NORMAL
- en: '*dailylogs* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Choose one of the *YYYY-MM-DD* directories, and then select a trace of
  prefs: []
  type: TYPE_NORMAL
- en: interest. Wireshark presents some basic statistics about that trace. For
  prefs: []
  type: TYPE_NORMAL
- en: example, in Figure 7-2, the sample trace is 11.9MB (shown in the Size
  prefs: []
  type: TYPE_NORMAL
- en: column) with 19,866 packets (shown in the Packets field). As you can
  prefs: []
  type: TYPE_NORMAL
- en: see in the First Packet field, the trace begins at 2013-02-10 13:09:28 and
  prefs: []
  type: TYPE_NORMAL
- en: lasts 8 minutes and 16 seconds (shown in the Elapsed Time field).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Uncheck the Enable MAC Name Resolution and Enable Transport Name
  prefs: []
  type: TYPE_NORMAL
- en: Resolution options so that you’ll see numbers rather than names for
  prefs: []
  type: TYPE_NORMAL
- en: these fields, and then click **Open**.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-2: Opening a trace in Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Modifying the Default Wireshark Layout***'
  prefs: []
  type: TYPE_NORMAL
- en: After opening a trace, the default Wireshark layout displays the fields shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 7-3\. These include information such as the packet number, a time-
  prefs: []
  type: TYPE_NORMAL
- en: stamp measured in time since the first packet, source and destination IP
  prefs: []
  type: TYPE_NORMAL
- en: addresses, the protocol, and messages about the packet (in the Info field).
  prefs: []
  type: TYPE_NORMAL
- en: If you would prefer a different layout, you can change the default either
  prefs: []
  type: TYPE_NORMAL
- en: through the GUI or by editing the preferences file.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **137**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 74](index-172_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: Default columns in Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modifying the Layout Using the GUI**'
  prefs: []
  type: TYPE_NORMAL
- en: I prefer a Wireshark layout that shows absolute date and time, along with
  prefs: []
  type: TYPE_NORMAL
- en: the source and destination port numbers. We’ll set up that layout as an
  prefs: []
  type: TYPE_NORMAL
- en: example of how to use the Wireshark GUI to modify displayed columns to
  prefs: []
  type: TYPE_NORMAL
- en: better show relevant packet fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the default layout settings, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select **Edit**4**Preferences**4**Columns**.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Highlight the Time row.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the Field Type field to **Absolute Date and Time**.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Change the Source Address field to **Src Addr (unresolved)** and the
  prefs: []
  type: TYPE_NORMAL
- en: Destination Address field to **Dest Addr (unresolved)**.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Click **Add**, and then select **Source Port (unresolved)**.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Double-click the New Column field and replace the Title entry with
  prefs: []
  type: TYPE_NORMAL
- en: '**SrcPort**.'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Click **Add** again, and add **Dest Port (unresolved)**.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Double-click the New Column field and replace the Title entry with
  prefs: []
  type: TYPE_NORMAL
- en: '**DstPort**.'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. To hide the Length field that shows the packet length in bytes, high-
  prefs: []
  type: TYPE_NORMAL
- en: light that field and click **Remove**.
  prefs: []
  type: TYPE_NORMAL
- en: '**138** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 75](index-173_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 10\. Click and drag each of the new columns to the locations shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-4\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-4: Customizing the Wireshark layout*'
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Click **Apply**, and then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Modifying the Preferences File**'
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer a more direct approach to modifying the screen layout, edit
  prefs: []
  type: TYPE_NORMAL
- en: the *.wireshark/preferences* file. First, you need to create this file by choosing
    **Edit**4**Preferences**4**Columns**4**Apply**4**OK**, with or without making
    changes. Then you should find a *.wireshark/preferences* file in your home directory.
    This file controls Wireshark’s column layout and is shown in Listing 7-1\.
  prefs: []
  type: TYPE_NORMAL
- en: Packet list column format.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each pair of strings consists of a column title and its format.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'column.format:'
  prefs: []
  type: TYPE_NORMAL
- en: '"No.", "%m",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Time", "%t",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Source", "%s",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Destination", "%d",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Protocol", "%p",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Length", "%L",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Info", "%i"'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-1: Contents of the* .wireshark/preferences *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **139**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 76](index-174_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Close Wireshark and edit the fields in *.wireshark/preferences* so that they
  prefs: []
  type: TYPE_NORMAL
- en: appear as shown in Listing 7-2 (with changes shown in bold). Also, delete
  prefs: []
  type: TYPE_NORMAL
- en: the Length field entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Packet list column format.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each pair of strings consists of a column title and its format.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'column.format:'
  prefs: []
  type: TYPE_NORMAL
- en: '"No.", "%m",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Time", "%**Y**t",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Source", "%**u**s",'
  prefs: []
  type: TYPE_NORMAL
- en: '**"SrcPort", "%uS",**'
  prefs: []
  type: TYPE_NORMAL
- en: '"Destination", "%**u**d",'
  prefs: []
  type: TYPE_NORMAL
- en: '**"DstPort", "%uD",**'
  prefs: []
  type: TYPE_NORMAL
- en: '"Protocol", "%p",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Info", "%i"'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-2: Edited contents of the* .wireshark/preferences *file*'
  prefs: []
  type: TYPE_NORMAL
- en: When you restart Wireshark and open a trace, the GUI will now display
  prefs: []
  type: TYPE_NORMAL
- en: columns as shown in Figure 7-5\. This is a trace from a demo SO stand-
  prefs: []
  type: TYPE_NORMAL
- en: alone system with the display filter arp or ip.addr==192.168.2.127, which tells
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark to show Address Resolution Protocol (ARP) frames, or any traf-
  prefs: []
  type: TYPE_NORMAL
- en: fic involving 192.168.2.127\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-5: Wireshark showing new column preferences and display filter*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Some Useful Wireshark Features***'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have Wireshark up and running, we’ll discuss a few of my
  prefs: []
  type: TYPE_NORMAL
- en: favorite Wireshark features, including the ability to see low-level proto-
  prefs: []
  type: TYPE_NORMAL
- en: col features in detail. Although Tshark offers this feature, Wireshark’s
  prefs: []
  type: TYPE_NORMAL
- en: '**140** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 77](index-175_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: graphical nature makes it easier to jump from one element to another.
  prefs: []
  type: TYPE_NORMAL
- en: I also enjoy adding and removing display filters in Wireshark. Again,
  prefs: []
  type: TYPE_NORMAL
- en: you can do this with Tshark, but each new filter requires running Tshark
  prefs: []
  type: TYPE_NORMAL
- en: again. In Wireshark, all it takes is applying the new filter in the GUI. Also,
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark exposes features for controlling how data is decoded, following
  prefs: []
  type: TYPE_NORMAL
- en: streams, and exporting object functions; these help analysts manipulate
  prefs: []
  type: TYPE_NORMAL
- en: traffic in ways not offered in Tshark.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewing Lower-Level Protocol Features in Detail**'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark permits analysts to see lower-level protocol features in extreme
  prefs: []
  type: TYPE_NORMAL
- en: detail. Its deep understanding of protocols allows it to decode just about
  prefs: []
  type: TYPE_NORMAL
- en: every field it encounters, assuming the traffic is unencrypted and recog-
  prefs: []
  type: TYPE_NORMAL
- en: nized by its protocol dissectors. (Should you encounter encrypted sessions,
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark offers some capabilities for incorporating cryptographic keys to
  prefs: []
  type: TYPE_NORMAL
- en: decrypt traffic.)
  prefs: []
  type: TYPE_NORMAL
- en: For example, Figure 7-6 displays an ARP request message. Looking only
  prefs: []
  type: TYPE_NORMAL
- en: at the hex and ASCII values in the bottom pane, you would be hard-pressed
  prefs: []
  type: TYPE_NORMAL
- en: to understand all of the elements of this frame. However, the protocol decode
  prefs: []
  type: TYPE_NORMAL
- en: in the middle pane explains every field quite clearly. Whatever field you high-
  prefs: []
  type: TYPE_NORMAL
- en: light in the middle pane is highlighted in the corresponding hex and ASCII
  prefs: []
  type: TYPE_NORMAL
- en: output in the bottom pane.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-6: Wireshark explains an ARP request message.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Omitting traffic to See remnants**'
  prefs: []
  type: TYPE_NORMAL
- en: Another particularly useful feature of Wireshark is its ability to filter traf-
  prefs: []
  type: TYPE_NORMAL
- en: fic to show you interesting remnants. Sometimes I hunt for traffic by tell-
  prefs: []
  type: TYPE_NORMAL
- en: ing Wireshark what to ignore so that I can examine what’s left behind. I
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **141**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 78](index-176_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: start with a simple filter, review the results, add another filter, review the
  prefs: []
  type: TYPE_NORMAL
- en: results, and so on until I’m left with a small amount of traffic to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Listing 7-3 shows how I progressively built a display filter to
  prefs: []
  type: TYPE_NORMAL
- en: search for noteworthy traffic.
  prefs: []
  type: TYPE_NORMAL
- en: not http and not ntp and not dns and not tcp.port==443 and not tcp.port==80
  prefs: []
  type: TYPE_NORMAL
- en: and not icmp and not tcp.port==5223 and not arp
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-3: Display filter omit ing traffic in Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This filter omits the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • HTTP traffic
  prefs: []
  type: TYPE_NORMAL
- en: • NTP traffic
  prefs: []
  type: TYPE_NORMAL
- en: • DNS traffic
  prefs: []
  type: TYPE_NORMAL
- en: • Any traffic on port 443 TCP
  prefs: []
  type: TYPE_NORMAL
- en: • Any traffic on port 80 TCP
  prefs: []
  type: TYPE_NORMAL
- en: • ICMP traffic
  prefs: []
  type: TYPE_NORMAL
- en: • Any TCP traffic on port 5223 (Apple Push Notification service)
  prefs: []
  type: TYPE_NORMAL
- en: • Address Resolution Protocol (ARP) traffic
  prefs: []
  type: TYPE_NORMAL
- en: The result is shown in Figure 7-7\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-7: Traffic remaining after applying the display filter in Listing
    7-3*'
  prefs: []
  type: TYPE_NORMAL
- en: '**142** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 79](index-177_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Following Streams**'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-7 shows two sets of TCP streams. The destination port for each is
  prefs: []
  type: TYPE_NORMAL
- en: 10002, but the source port for one stream is 60560 and the other is 60563\.
  prefs: []
  type: TYPE_NORMAL
- en: With the two streams intertwined, it is somewhat difficult to follow what is
  prefs: []
  type: TYPE_NORMAL
- en: happening. Another drawback to this approach is that I’m more interested
  prefs: []
  type: TYPE_NORMAL
- en: in the content of the conversation, rather than a packet-by-packet list. This
  prefs: []
  type: TYPE_NORMAL
- en: 'brings me to my third favorite Wireshark feature: following streams.'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark can identify all TCP segments in a stream, reassemble them
  prefs: []
  type: TYPE_NORMAL
- en: using a specific algorithm, and present the results as text. This capabil-
  prefs: []
  type: TYPE_NORMAL
- en: ity makes it easy to identify the purpose of a conversation and determine
  prefs: []
  type: TYPE_NORMAL
- en: whether it is benign, suspicious, or malicious.
  prefs: []
  type: TYPE_NORMAL
- en: To tell Wireshark to reassemble a TCP stream, highlight one of the
  prefs: []
  type: TYPE_NORMAL
- en: packets in a stream, right-click, and choose **Follow TCP Stream**, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 7-8\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-8: Choosing Fol ow TCP Stream in Wireshark*'
  prefs: []
  type: TYPE_NORMAL
- en: For this example, Wireshark renders the stream shown in Figure 7-9\.
  prefs: []
  type: TYPE_NORMAL
- en: The text at the top shows a GET request from a web browser. The text begin-
  prefs: []
  type: TYPE_NORMAL
- en: ning with HTTP/1.1 200 OK shows a web server’s reply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the web client mentions the Accept-Encoding: gzip, deflate'
  prefs: []
  type: TYPE_NORMAL
- en: option. The reply from the web server is actually gzip-encoded, but Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: unzips the content and displays cleartext. We recognize this traffic as HTTP,
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **143**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 80](index-178_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: even though Wireshark did not identify it as such by default. (In the figure,
  prefs: []
  type: TYPE_NORMAL
- en: I’ve redacted possibly sensitive information from the transcript involving
  prefs: []
  type: TYPE_NORMAL
- en: the cookie used during this exchange.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-9: Wireshark displays a reassembled TCP stream.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Protocol Decode Method with Decode as**'
  prefs: []
  type: TYPE_NORMAL
- en: After reassembling a stream as discussed in the previous section, Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: will display only the packets in that stream in the main window. To change
  prefs: []
  type: TYPE_NORMAL
- en: the way that Wireshark sees this traffic, use the Decode As option. This tells
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark to apply a certain protocol decode method to specific traffic.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we’ll tell Wireshark to think of traffic to port 10002
  prefs: []
  type: TYPE_NORMAL
- en: as HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Right-click one of the packets in the stream to be decoded, and click
  prefs: []
  type: TYPE_NORMAL
- en: '**Decode As**, as shown in Figure 7-10\.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. You will see a menu asking which ports Wireshark should decode. For
  prefs: []
  type: TYPE_NORMAL
- en: this example, choose **Destination (10002)** in the TCP Port(s) field.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Scroll through the protocols listed on the right to find and select **HTTP**.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Click **Apply**.
  prefs: []
  type: TYPE_NORMAL
- en: '**144** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 81](index-179_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 82](index-179_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-10: Selecting Decode As*'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see that Wireshark now understands a GET request and a web
  prefs: []
  type: TYPE_NORMAL
- en: server reply, as shown in Figure 7-11\. For example, notice how frames 11636
  prefs: []
  type: TYPE_NORMAL
- en: and 11648 are now listed as HTTP in Wireshark’s Protocol column.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-11: Wireshark decodes port 10002 TCP as HTTP.*'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **145**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 83](index-180_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Following Other Streams**'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the protocol, Wireshark can also follow other sorts of streams,
  prefs: []
  type: TYPE_NORMAL
- en: such as UDP or Secure Sockets Layer (SSL). (Because UDP is not a session-
  prefs: []
  type: TYPE_NORMAL
- en: oriented protocol like TCP, Wireshark makes its best assessment of which
  prefs: []
  type: TYPE_NORMAL
- en: UDP packets make up a UDP “session.”)
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Wireshark can extract content from some streams, such
  prefs: []
  type: TYPE_NORMAL
- en: as HTTP objects, Server Message Block (SMB) objects, and Digital Imaging
  prefs: []
  type: TYPE_NORMAL
- en: and Communications in Medicine (DICOM) objects. For example, at the
  prefs: []
  type: TYPE_NORMAL
- en: bottom of Figure 7-9, we see that the web server sent a 43-byte *.gif* file
    to
  prefs: []
  type: TYPE_NORMAL
- en: the web client. We can use Wireshark’s HTTP objects export function to
  prefs: []
  type: TYPE_NORMAL
- en: investigate this file. Select **File**4**Export**4 **Objects**4**HTTP** to access
    this feature. You’ll see a window showing all HTTP objects that Wireshark recognizes
    in the trace, including HTML pages, JavaScript, text, images, and
  prefs: []
  type: TYPE_NORMAL
- en: other objects. To access the packet of interest here, scroll down to packet
  prefs: []
  type: TYPE_NORMAL
- en: 11648, which contains the HTTP/1.1 200 OK (GIF89a) message, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-12\. Then click **Save As**, name the file, and save it.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-12: Wireshark HTTP object list*'
  prefs: []
  type: TYPE_NORMAL
- en: Upon reviewing the *.gif*, you’ll find that it’s a 1×1 pixel image, perhaps
  prefs: []
  type: TYPE_NORMAL
- en: for tracking and advertisement purposes. The web server in question at
  prefs: []
  type: TYPE_NORMAL
- en: 74.201.145.181 is owned by OwnerIQ, described at *http://www.owneriq.com/*
  prefs: []
  type: TYPE_NORMAL
- en: as “THE advertising network that pioneered the concept of Ownership
  prefs: []
  type: TYPE_NORMAL
- en: '**146** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Targeting. . . . We enable advertisers to define and reach their ideal online
    consumer.” That sounds like the sort of service that might deploy a 1×1 “web
  prefs: []
  type: TYPE_NORMAL
- en: bug” image on a nonstandard port for tracking purposes.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Wireshark equips us with the ability to pivot from one
  prefs: []
  type: TYPE_NORMAL
- en: datatype to another, applying extra processing to certain protocols when
  prefs: []
  type: TYPE_NORMAL
- en: possible. That’s just the beginning! As I suggested at the beginning of this
  prefs: []
  type: TYPE_NORMAL
- en: section, read a book devoted to Wireshark to learn more about its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '**using xplico**'
  prefs: []
  type: TYPE_NORMAL
- en: Xplico ( *http://www.xplico.org/*) is an open source network forensic analysis
  prefs: []
  type: TYPE_NORMAL
- en: (NFA) tool that understands many network protocols and will carve out the
  prefs: []
  type: TYPE_NORMAL
- en: information it recognizes.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Gianluca Costa and Andrea De Franceschi developed Xplico under the GNU General*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Public License version 2\.*'
  prefs: []
  type: TYPE_NORMAL
- en: As an NFA tool, Xplico is most often used against a saved trace file to
  prefs: []
  type: TYPE_NORMAL
- en: extract and interpret interesting content, as we will do in this chapter’s
  prefs: []
  type: TYPE_NORMAL
- en: example. Xplico can also sniff traffic live from the wire. However, the
  prefs: []
  type: TYPE_NORMAL
- en: authors don’t recommend running Xplico against a live interface and say
  prefs: []
  type: TYPE_NORMAL
- en: that is more for demonstrations than production use.
  prefs: []
  type: TYPE_NORMAL
- en: To understand Xplico, we’ll use it to analyze network traffic available
  prefs: []
  type: TYPE_NORMAL
- en: through the Digital Corpora project ( *http://www.digitalcorpora.org/*). Digital
    Corpora is a National Science Foundation grant–funded collection of digital evidence,
    led by forensics guru Simson Garfinkel. Analysts and students
  prefs: []
  type: TYPE_NORMAL
- en: can use the Digital Corpora project to download and interpret data from
  prefs: []
  type: TYPE_NORMAL
- en: cell phones, hard drives, and network traffic in order to learn how to use
  prefs: []
  type: TYPE_NORMAL
- en: forensic tools and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the pcap file bundled in the “Nitroba University Harass-
  prefs: []
  type: TYPE_NORMAL
- en: ment Scenario” ( *http://digitalcorpora.org/corpora/scenarios/nitroba-university*
  prefs: []
  type: TYPE_NORMAL
- en: '*-harassment-scenario/*) posted at *http://digitalcorpora.org/corp/nps/packets/*'
  prefs: []
  type: TYPE_NORMAL
- en: '*2008-nitroba/nitroba.pcap*. The trace is approximately 55MB and contains a'
  prefs: []
  type: TYPE_NORMAL
- en: variety of network traffic suitable for NSM and forensic review. Download
  prefs: []
  type: TYPE_NORMAL
- en: the *nitroba.pcap* file before trying to use Xplico.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Xplico***'
  prefs: []
  type: TYPE_NORMAL
- en: Xplico is managed via a web browser. By default, SO is configured to allow
  prefs: []
  type: TYPE_NORMAL
- en: only local access to the Xplico web server. Remote users must either tunnel
  prefs: []
  type: TYPE_NORMAL
- en: traffic via OpenSSH (as discussed in Chapter 5) or alter the firewall rules
  prefs: []
  type: TYPE_NORMAL
- en: to permit remote access to port 9876 TCP. Choose the option that best meets
  prefs: []
  type: TYPE_NORMAL
- en: your needs.
  prefs: []
  type: TYPE_NORMAL
- en: When first accessing Xplico, you may see an error like the one shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-13\.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **147**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 84](index-182_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 85](index-182_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-13: By default, Xplico is not running.*'
  prefs: []
  type: TYPE_NORMAL
- en: This error means that while the Apache web server on SO is serving
  prefs: []
  type: TYPE_NORMAL
- en: pages, the Xplico service is not yet active. Fix that by running the command
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 7-4\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service xplico start**
  prefs: []
  type: TYPE_NORMAL
- en: '* Starting Xplico'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying priority to -1 [ OK ]
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-4: Starting the Xplico service*'
  prefs: []
  type: TYPE_NORMAL
- en: Now reload the web browser and choose a language. Next, use the
  prefs: []
  type: TYPE_NORMAL
- en: username **xplico** and the password **xplico** to log in, as shown in Figure
    7-14\.
  prefs: []
  type: TYPE_NORMAL
- en: (Selecting the language changes the URL but does not show the language
  prefs: []
  type: TYPE_NORMAL
- en: choice in the Language drop-down box.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-14: Logging in to Xplico*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Xplico Cases and Sessions***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xplico organizes network traffic as *sessions* and refers to analysis sessions
    as *cases*. To start a new case and a session to interpret, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select **New Case** and leave the default Data Acquisition method set to
  prefs: []
  type: TYPE_NORMAL
- en: '**Uploading PCAP Capture File/s**, as shown in Figure 7-15\.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Enter a case name, and then click **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: '**148** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 86](index-183_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 87](index-183_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-15: Creating a new case in Xplico*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. After creating a new case, you should see it listed in a cases list. Click
  prefs: []
  type: TYPE_NORMAL
- en: the name of the case to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Click the **New Session** link in the upper-left menu to create a new session.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Give the session a name, as shown in Figure 7-16, and then click **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: (Xplico will allow only alphanumeric characters in session names, so
  prefs: []
  type: TYPE_NORMAL
- en: you cannot use dashes in the name.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-16: Creating a new session in Xplico*'
  prefs: []
  type: TYPE_NORMAL
- en: With the new session created, Xplico is now ready to process network
  prefs: []
  type: TYPE_NORMAL
- en: traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '***Processing Network Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: To process network traffic, click the name of the session. You will see a
  prefs: []
  type: TYPE_NORMAL
- en: screen like the one shown in Figure 7-17\. Because we have not processed
  prefs: []
  type: TYPE_NORMAL
- en: any traffic yet, Xplico will not show any results.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Choose File**, browse to the *nitroba.pcap* file you downloaded earlier,
    click **Open**, and then click **Upload**. The web browser should report that
    it is uploading the file. Once the file has been uploaded, Xplico will display
  prefs: []
  type: TYPE_NORMAL
- en: “File uploaded, wait start decoding…” at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: It will probably take a few minutes for Xplico to process the traffic,
  prefs: []
  type: TYPE_NORMAL
- en: depending on your hardware. Once Xplico has finished decoding the
  prefs: []
  type: TYPE_NORMAL
- en: traffic, it should report **Decoding Completed** in the Status field. Its main
  prefs: []
  type: TYPE_NORMAL
- en: screen will display statistics on the sorts of traffic it recognized and inter-
  prefs: []
  type: TYPE_NORMAL
- en: preted, as shown in Figure 7-18\.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **149**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 88](index-184_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 89](index-184_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-17: Xplico session screen*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-18: Xplico has finished decoding the trace file.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Understanding the Decoded Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, an analyst can peruse the decoded traffic for content of inter-
  prefs: []
  type: TYPE_NORMAL
- en: est. This investigative method differs from that of the previous tools, which
  prefs: []
  type: TYPE_NORMAL
- en: interact with packets or sessions. With Xplico, analysts manipulate and
  prefs: []
  type: TYPE_NORMAL
- en: browse extracted content.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an analyst may want to know if video content was trans-
  prefs: []
  type: TYPE_NORMAL
- en: ferred during a web browsing session. In fact, Figure 7-18 shows **1** in the
  prefs: []
  type: TYPE_NORMAL
- en: '**150** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 90](index-185_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 91](index-185_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Video field in the HTTP section of the summary screen. This means Xplico
  prefs: []
  type: TYPE_NORMAL
- en: extracted video content from the network traffic and can make it viewable
  prefs: []
  type: TYPE_NORMAL
- en: to users. To access the content, click the **Web** link in the upper-left corner
  prefs: []
  type: TYPE_NORMAL
- en: of the Xplico display, and then click the **Site** link that appears next.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Xplico will show the last 16 web sessions, with the newest
  prefs: []
  type: TYPE_NORMAL
- en: listed first, as shown in Figure 7-19\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-19: Xplico’s list of web sessions*'
  prefs: []
  type: TYPE_NORMAL
- en: To access the video content that Xplico identified, click the **Video** radio
  prefs: []
  type: TYPE_NORMAL
- en: button at the top of the screen, and then click **Go**. Xplico shows a link
    to a
  prefs: []
  type: TYPE_NORMAL
- en: '*googlevideo.com* site, as shown in Figure 7-20\.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-20: One video link in the Digital Corpora trace*'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **151**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 92](index-186_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 93](index-186_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the *info.xml* link at the far right reveals options to see metadata
  prefs: []
  type: TYPE_NORMAL
- en: about the trace, as well as a link to download pcap. Most interesting, clicking
  prefs: []
  type: TYPE_NORMAL
- en: the URL shown in Figure 7-20 or the gray box to the right of the link will
  prefs: []
  type: TYPE_NORMAL
- en: open the video for viewing, as shown in Figure 7-21\. This video is not being
  prefs: []
  type: TYPE_NORMAL
- en: streamed from the Web; it’s a reconstruction of the video as downloaded
  prefs: []
  type: TYPE_NORMAL
- en: when the network traffic was originally captured.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-21: Reconstructing a video downloaded from the Web*'
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to browse thumbnails of images downloaded while this
  prefs: []
  type: TYPE_NORMAL
- en: network trace was being captured. As shown in Figure 7-22, someone went
  prefs: []
  type: TYPE_NORMAL
- en: shopping for a backpack at eBay.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-22: Reconstructing images downloaded from the Web*'
  prefs: []
  type: TYPE_NORMAL
- en: '**152** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 94](index-187_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Getting Metadata and Summarizing Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: Besides reconstructing interesting content, Xplico provides some metadata
  prefs: []
  type: TYPE_NORMAL
- en: and summarization of the traffic it understands. To see this in action, fol-
  prefs: []
  type: TYPE_NORMAL
- en: 'low these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Under the **Graphs** menu item in the upper-left portion of the screen,
  prefs: []
  type: TYPE_NORMAL
- en: click the **DNS** link to tell Xplico to show a sorted list of DNS queries.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. At the top of the screen, a red, yellow, and green pie chart icon will
  prefs: []
  type: TYPE_NORMAL
- en: appear. Click that icon to display a bar chart of DNS responses, with
  prefs: []
  type: TYPE_NORMAL
- en: a tab for Host Popularity in the upper-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Click the **Host Popularity** tab to see a chart with DNS queries ordered
  prefs: []
  type: TYPE_NORMAL
- en: by frequency, as shown in Figure 7-23\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-23: Xplico graphs DNS queries by frequency.*'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Highlight any bar to display the hostname queried and a response
  prefs: []
  type: TYPE_NORMAL
- en: count.
  prefs: []
  type: TYPE_NORMAL
- en: Xplico makes it very easy to review a variety of content captured in a
  prefs: []
  type: TYPE_NORMAL
- en: network trace. By publishing the data through SO’s Apache web server, the
  prefs: []
  type: TYPE_NORMAL
- en: authors allow anyone with a web browser and authenticated access to review
  prefs: []
  type: TYPE_NORMAL
- en: the data. This is one tool that really brings NSM extracted content to life.
  prefs: []
  type: TYPE_NORMAL
- en: '**examining content with NetworkMiner**'
  prefs: []
  type: TYPE_NORMAL
- en: NM ( *http://sourceforge.net/projects/networkminer/*) is an open source NFA
    tool that also exists as a commercial version.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Erik Hjelmvik develops NM under the GNU General Public License version 2\.*'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **153**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 95](index-188_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The commercial version of NM at *http://www.netresec.com/* enables remote
  prefs: []
  type: TYPE_NORMAL
- en: packet capture via Pcap-over-IP, Port Independent Protocol Identification
  prefs: []
  type: TYPE_NORMAL
- en: (PIPI; see *http://taosecurity.blogspot.com/2006/09/port-independent-protocol*
  prefs: []
  type: TYPE_NORMAL
- en: '*.html* for a description), and other features. The free version bundled with'
  prefs: []
  type: TYPE_NORMAL
- en: SO contains the core features an analyst would want in order to examine
  prefs: []
  type: TYPE_NORMAL
- en: content.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll see what NM does with the Digital Corpora trace
  prefs: []
  type: TYPE_NORMAL
- en: examined earlier in the Xplico discussion. If you haven’t already down-
  prefs: []
  type: TYPE_NORMAL
- en: loaded *nitroba.pcap* onto the SO platform, do that before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running NetworkMiner***'
  prefs: []
  type: TYPE_NORMAL
- en: NM is a Windows application, but the SO team configured it to run under
  prefs: []
  type: TYPE_NORMAL
- en: the open source Mono ( *http://www.mono-project.com/*) implementation of
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: To access NM from the SO desktop click the blue-and-white mouse
  prefs: []
  type: TYPE_NORMAL
- en: icon, then **Security Onion**, and finally **NetworkMiner**. By default, NM
    wants to watch a live interface to collect traffic. To start the analysis process,
    select
  prefs: []
  type: TYPE_NORMAL
- en: '**File**4**Open** in NM and browse to the location of the *nitroba.pcap* file.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the file is loaded, NM should display a flurry of analysis activity,
  prefs: []
  type: TYPE_NORMAL
- en: including extracting content and resolving all of the domain names it finds
  prefs: []
  type: TYPE_NORMAL
- en: in the trace, as shown in Figure 7-24\. This process may take an hour or two
  prefs: []
  type: TYPE_NORMAL
- en: and will keep your SO platform busy.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-24: NM processes the* nitroba .pcap *trace.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**154** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 96](index-189_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*NM on Windows is much faster than it is on Mono and Linux. You may want to*'
  prefs: []
  type: TYPE_NORMAL
- en: '*install it on a Windows workstation with plenty of memory, or limit its use
    on SO*'
  prefs: []
  type: TYPE_NORMAL
- en: '*to processing smaller trace files.*'
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this section focuses on how to interact with the same
  prefs: []
  type: TYPE_NORMAL
- en: '*nitroba.pcap* trace using the Windows version of NM, which is functionally'
  prefs: []
  type: TYPE_NORMAL
- en: equivalent to NM on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: '***Col ecting and Organizing Traffic Details***'
  prefs: []
  type: TYPE_NORMAL
- en: Many analysts begin reviewing NM data in its Hosts tab, which lists all IP
  prefs: []
  type: TYPE_NORMAL
- en: addresses that it sees in a network trace, as you can see in Figure 7-25\. The
  prefs: []
  type: TYPE_NORMAL
- en: IP address 192.168.15.5 is shown highlighted and expanded in the figure.
  prefs: []
  type: TYPE_NORMAL
- en: To expand an entry for an IP address, click the small box to the left of that
  prefs: []
  type: TYPE_NORMAL
- en: address.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-25: Metadata from NM for IP address 192.168.15.5*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, although NM couldn’t identify the operating system, it
  prefs: []
  type: TYPE_NORMAL
- en: does tell us that the MAC address is assigned to TRENDnet, a maker of net-
  prefs: []
  type: TYPE_NORMAL
- en: working equipment. The Universal Plug and Play (UPnP) queries involving
  prefs: []
  type: TYPE_NORMAL
- en: MediaRenderer indicate that this device may be an audiovisual platform.
  prefs: []
  type: TYPE_NORMAL
- en: The details and metadata for IP 192.168.15.4 are very different from
  prefs: []
  type: TYPE_NORMAL
- en: that of 192.168.15.5, as shown in Figure 7-26\.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **155**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 97](index-190_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 98](index-190_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-26: Metadata from NM for IP address 192.168.15.4*'
  prefs: []
  type: TYPE_NORMAL
- en: The hardware at this address appears to be an Apple device. In addition,
  prefs: []
  type: TYPE_NORMAL
- en: the Host Details section shows a variety of web browser user-agent strings,
  prefs: []
  type: TYPE_NORMAL
- en: which tells us that this system is much more active than 192.168.15.5, as
  prefs: []
  type: TYPE_NORMAL
- en: shown by the number of outgoing sessions (1658).
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the Host Details section, the screen resolutions observed
  prefs: []
  type: TYPE_NORMAL
- en: during the traffic capture that NM obtained from Google Analytics are listed,
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Figure 7-27\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-27: NM lists three screen resolutions for IP address 192.168.15.4\.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Rendering Content***'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to collecting and organizing details about hosts seen on the wire,
  prefs: []
  type: TYPE_NORMAL
- en: NM extracts content and renders it for easy viewing. Figure 7-28 shows an
  prefs: []
  type: TYPE_NORMAL
- en: example involving email.
  prefs: []
  type: TYPE_NORMAL
- en: '**156** Chapter 7'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 99](index-191_1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Messages tab in Figure 7-28 shows an email sent from 192.168.15.4,
  prefs: []
  type: TYPE_NORMAL
- en: the Apple computer that we reviewed in Figure 7-26\. A sender with the email
  prefs: []
  type: TYPE_NORMAL
- en: address *the_whole_world_is_watching@nitroba.org* sent an unpleasant email
  prefs: []
  type: TYPE_NORMAL
- en: message to *lilytuckrige@yahoo.com*. Now we understand why this is a harass-
  prefs: []
  type: TYPE_NORMAL
- en: ment case.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-28: Harassing email extracted by NM*'
  prefs: []
  type: TYPE_NORMAL
- en: Like Xplico, NM extracts and displays all captured images, along with
  prefs: []
  type: TYPE_NORMAL
- en: various other forms of content. It can be a bit easier to use than Xplico
  prefs: []
  type: TYPE_NORMAL
- en: because you scroll through output, rather than click from page to page as
  prefs: []
  type: TYPE_NORMAL
- en: with Xplico’s web server. NM can simplify the process of extracting content
  prefs: []
  type: TYPE_NORMAL
- en: in bulk from a network trace.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter described three graphical packet analysis tools: Wireshark,'
  prefs: []
  type: TYPE_NORMAL
- en: Xplico, and NM. Wireshark is undoubtedly the most popular, with support
  prefs: []
  type: TYPE_NORMAL
- en: for thousands of protocols and an ever-expanding set of capabilities. Lesser-
  prefs: []
  type: TYPE_NORMAL
- en: known projects like Xplico and NM are more forensics focused, providing
  prefs: []
  type: TYPE_NORMAL
- en: parsers to extract content automatically and giving analysts an overview of
  prefs: []
  type: TYPE_NORMAL
- en: network-derived artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing which tool to use depends on the needs of the investiga-
  prefs: []
  type: TYPE_NORMAL
- en: tion. When you require deep understanding of a protocol, I recommend
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark. When you want rapid overviews of content exchanged between
  prefs: []
  type: TYPE_NORMAL
- en: computers, Xplico or NM may be more appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these tools offers different capabilities and exposes various
  prefs: []
  type: TYPE_NORMAL
- en: forms of NSM data. While these tools are powerful additions to the analyst’s
  prefs: []
  type: TYPE_NORMAL
- en: arsenal, they don’t function as NSM consoles. Chapter 8 concludes the data
  prefs: []
  type: TYPE_NORMAL
- en: presentation tool discussion by looking at the NSM consoles Sguil, Squert,
  prefs: []
  type: TYPE_NORMAL
- en: Snorby, and ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **157**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**8**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N S M c o N S o l e S**'
  prefs: []
  type: TYPE_NORMAL
- en: Chapters 6 and 7 discussed tools for packet
  prefs: []
  type: TYPE_NORMAL
- en: analysis. This chapter covers NSM con-
  prefs: []
  type: TYPE_NORMAL
- en: soles, which are tools built specifically for
  prefs: []
  type: TYPE_NORMAL
- en: NSM. Applications like Tcpdump, Tshark,
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, Xplico, and NetworkMiner process live
  prefs: []
  type: TYPE_NORMAL
- en: traffic or traffic saved in pcap format. When reading
  prefs: []
  type: TYPE_NORMAL
- en: this chapter, you may recall features of those tools that share certain simi-
  prefs: []
  type: TYPE_NORMAL
- en: larities with the software discussed here. Some of them generate session or
  prefs: []
  type: TYPE_NORMAL
- en: extracted content data, for example, or present multiple forms of data in
  prefs: []
  type: TYPE_NORMAL
- en: a single interface. The difference between the tools covered in Chapters 6
  prefs: []
  type: TYPE_NORMAL
- en: and 7 and those presented in this chapter is that the NSM consoles help
  prefs: []
  type: TYPE_NORMAL
- en: analysts drive a decision-making process, rather than a troubleshooting or
  prefs: []
  type: TYPE_NORMAL
- en: forensic process.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, NSM consoles tend not to work on raw packets, whether
  prefs: []
  type: TYPE_NORMAL
- en: in the form of live traffic or traffic saved in pcap format. All of the tools
    in
  prefs: []
  type: TYPE_NORMAL
- en: Chapters 6 and 7 contained features that let analysts tell the software to
  prefs: []
  type: TYPE_NORMAL
- en: sniff traffic from the wire or open a saved trace. NSM consoles, in contrast,
  prefs: []
  type: TYPE_NORMAL
- en: offer a framework and interface to manipulate and interact with multiple
  prefs: []
  type: TYPE_NORMAL
- en: NSM datatypes, but generally not via processing a saved trace. This is a
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: limitation in some respects, because it restricts their use to live operational
    scenarios. This is not necessarily true of some commercial tools, but the
  prefs: []
  type: TYPE_NORMAL
- en: focus of this book is open source software packaged with the free SO distri-
  prefs: []
  type: TYPE_NORMAL
- en: 'bution: Sguil, Squert, Snorby, and ELSA.'
  prefs: []
  type: TYPE_NORMAL
- en: '**an NSM-centric look at Network Traffic**'
  prefs: []
  type: TYPE_NORMAL
- en: The tools we’ve explored so far generate one or more forms of NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a brief recap of the NSM datatypes (introduced in Chapter 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Full content data** Network traffic stored to disk in pcap format.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extracted content** Information carved from network traffic, such as'
  prefs: []
  type: TYPE_NORMAL
- en: files or web pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Session data** A high-level summary of network conversations, focusing'
  prefs: []
  type: TYPE_NORMAL
- en: on who talked to whom, at what time, plus how much information was
  prefs: []
  type: TYPE_NORMAL
- en: exchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction data** A more granular form of session data, exposing'
  prefs: []
  type: TYPE_NORMAL
- en: details of protocols with request-reply characteristics like HTTP, FTP,
  prefs: []
  type: TYPE_NORMAL
- en: and SMTP.
  prefs: []
  type: TYPE_NORMAL
- en: '**Statistical data** Descriptive information that characterizes network'
  prefs: []
  type: TYPE_NORMAL
- en: activity, like counts of various aspects of conversations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata** “Data about data,” or an integration of external information'
  prefs: []
  type: TYPE_NORMAL
- en: like geography or ownership, applied to network information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert data** Reflects whether traffic triggered some sort of notification.'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a judgment made by a tool, typically an IDS, about some characteris-
  prefs: []
  type: TYPE_NORMAL
- en: tic of network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: That’s a lot of data to manage. NSM isn’t about collecting evidence for
  prefs: []
  type: TYPE_NORMAL
- en: the sake of having it, though. CIRTs collect NSM data because it enables
  prefs: []
  type: TYPE_NORMAL
- en: them to achieve a specific business objective. The outcome of an NSM-
  prefs: []
  type: TYPE_NORMAL
- en: 'centric look at network traffic is a decision: Is the event in question benign,'
  prefs: []
  type: TYPE_NORMAL
- en: suspicious, or malicious? The answer to that question determines what a
  prefs: []
  type: TYPE_NORMAL
- en: CIRT analyst does next. Mature CIRTs answer these questions to meet busi-
  prefs: []
  type: TYPE_NORMAL
- en: ness goals, such as conducting detection and response in one hour or less.
  prefs: []
  type: TYPE_NORMAL
- en: Many forms of network data, and tools to inspect that data, help ana-
  prefs: []
  type: TYPE_NORMAL
- en: lysts meet business security goals. Tools built specifically for NSM, however,
  prefs: []
  type: TYPE_NORMAL
- en: 'assist in three specific ways:'
  prefs: []
  type: TYPE_NORMAL
- en: • They make it easy for analysts to review multiple forms of NSM data,
  prefs: []
  type: TYPE_NORMAL
- en: often within a single interface.
  prefs: []
  type: TYPE_NORMAL
- en: • They enable analysts to “pivot,” or transition, from one form of NSM
  prefs: []
  type: TYPE_NORMAL
- en: data to another.
  prefs: []
  type: TYPE_NORMAL
- en: • They capture the outcome of the analyst’s decision-making process.
  prefs: []
  type: TYPE_NORMAL
- en: NSM-specific tools make a workflow possible, usually coordinating the
  prefs: []
  type: TYPE_NORMAL
- en: actions of multiple analysts to complete a shared objective.
  prefs: []
  type: TYPE_NORMAL
- en: '**160** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil, Squert, Snorby, and ELSA are four open source tools written by NSM practitioners,
    for NSM practitioners. These software authors realized
  prefs: []
  type: TYPE_NORMAL
- en: that other tools for analyzing network-centric data were helpful but not
  prefs: []
  type: TYPE_NORMAL
- en: sufficient for conducting NSM as a continuous business process. Each tool
  prefs: []
  type: TYPE_NORMAL
- en: offers a way to integrate several types of NSM data, pivoting among the
  prefs: []
  type: TYPE_NORMAL
- en: information, and, in most cases, classifying the outcome of an investigation.
  prefs: []
  type: TYPE_NORMAL
- en: The NSM consoles packaged with SO work with several overlapping sets
  prefs: []
  type: TYPE_NORMAL
- en: of NSM data. Whereas the packet analysis tools discussed in Chapters 6 and 7
  prefs: []
  type: TYPE_NORMAL
- en: tend to be *producers* of NSM data, the consoles in this chapter are more like
  prefs: []
  type: TYPE_NORMAL
- en: '*consumers* of NSM data. Similar to the tools profiled in Chapters 6 and 7,'
  prefs: []
  type: TYPE_NORMAL
- en: the consoles in this chapter are available in SO by default, except for ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: (The setup wizard asks if you want to run ELSA when installing SO.) This
  prefs: []
  type: TYPE_NORMAL
- en: chapter highlights the key features of each tool to help you decide which
  prefs: []
  type: TYPE_NORMAL
- en: best suits the needs of your NSM operation.
  prefs: []
  type: TYPE_NORMAL
- en: '**using Sguil**'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil ( *http://www.sguil.net/*) is an open source NSM, first written as a
  prefs: []
  type: TYPE_NORMAL
- en: proprietary application, but then recoded and released as open source
  prefs: []
  type: TYPE_NORMAL
- en: in early 2003\.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bamm Visscher codes Sguil under the Qt Public License* ( *QPL,* http://sourceforge'
  prefs: []
  type: TYPE_NORMAL
- en: .net/projects/sguil/) *.*
  prefs: []
  type: TYPE_NORMAL
- en: Sguil is one of the main applications packaged with SO. Its components
  prefs: []
  type: TYPE_NORMAL
- en: collect, store, and present data that other SO tools use, and certain applica-
  prefs: []
  type: TYPE_NORMAL
- en: tions rely on Sguil’s authentication database. Even if you decide not to use
  prefs: []
  type: TYPE_NORMAL
- en: the Sguil console to review NSM data, you’ll benefit from its collection and
  prefs: []
  type: TYPE_NORMAL
- en: management of NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Sguil***'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil is a client/server application written in Tcl/Tk. Its server coordinates
  prefs: []
  type: TYPE_NORMAL
- en: with Sguil agents deployed on sensors to collect NSM data. The Sguil client
  prefs: []
  type: TYPE_NORMAL
- en: is the analyst’s window into Sguil’s data. You can start the Sguil console
  prefs: []
  type: TYPE_NORMAL
- en: via the Sguil icon on the SO desktop, or you can install the Sguil client on
  prefs: []
  type: TYPE_NORMAL
- en: another computer.
  prefs: []
  type: TYPE_NORMAL
- en: The tools we’ve discussed so far work by analyzing live or saved network
  prefs: []
  type: TYPE_NORMAL
- en: traffic; they’re meant for use in live operations or when conducting review
  prefs: []
  type: TYPE_NORMAL
- en: on historical activity. In contrast, Sguil is a solely a live tool. You can’t
    use
  prefs: []
  type: TYPE_NORMAL
- en: Sguil to “open” a saved network trace; you can interact with Sguil only as its
  prefs: []
  type: TYPE_NORMAL
- en: various components and dependencies collect and generate traffic gathered
  prefs: []
  type: TYPE_NORMAL
- en: from a live network interface. As an example, we’ll use the Sguil client to
  prefs: []
  type: TYPE_NORMAL
- en: interact with a sample server and sensor.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **161**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’ve already installed SO, you should be able to follow along with the
    example.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*However, the data you see will not match the data shown because you’ll be
    watching* *new, live data, although the analysis process is the same.*'
  prefs: []
  type: TYPE_NORMAL
- en: Before running Sguil, make sure that all of its underlying services are
  prefs: []
  type: TYPE_NORMAL
- en: running on the sensor with the service command, as shown in Listing 8-1\.
  prefs: []
  type: TYPE_NORMAL
- en: You should see OK in each field.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 2433 0 24 Feb 18:27:19
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sademo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 8-1: Output of the sudo service nsm status command*'
  prefs: []
  type: TYPE_NORMAL
- en: If one or more components are not running, you can try restarting all
  prefs: []
  type: TYPE_NORMAL
- en: 'of the software using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm restart**
  prefs: []
  type: TYPE_NORMAL
- en: If one or more components are still not running, you may need to rerun
  prefs: []
  type: TYPE_NORMAL
- en: the SO setup script or consult the SO mailing list for additional assistance.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve confirmed that all services are running, connect to the Sguil
  prefs: []
  type: TYPE_NORMAL
- en: console by clicking the Sguil icon on the SO desktop. In this example, the
  prefs: []
  type: TYPE_NORMAL
- en: Sguil client will connect to the Sguil server on localhost. (You could connect
  prefs: []
  type: TYPE_NORMAL
- en: to the server from another computer running a Sguil client, but it’s easier
    to
  prefs: []
  type: TYPE_NORMAL
- en: use the SO platform.)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Connect to your instance of an SO server, and enter the username and
  prefs: []
  type: TYPE_NORMAL
- en: password you selected for Sguil during the SO installation process, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 8-1, and then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The Sguil client asks you to select network(s) to monitor. Click **Select**
  prefs: []
  type: TYPE_NORMAL
- en: '**All**, and then click **Start Sguil**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**162** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 100](index-197_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 101](index-197_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-1: Logging in to Sguil*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The Sguil console appears. Highlight any row in the top section, and
  prefs: []
  type: TYPE_NORMAL
- en: then check the **Reverse DNS**, **Show Packet Data**, and **Show Rule** boxes.
  prefs: []
  type: TYPE_NORMAL
- en: The Sguil console will display data like that shown in Figure 8-2\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-2: The Sguil console displaying data*'
  prefs: []
  type: TYPE_NORMAL
- en: If you see information similar to that in Figure 8-2, your Sguil installa-
  prefs: []
  type: TYPE_NORMAL
- en: tion is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **163**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Sguil’s Six Key Functions***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sguil enables six key functions helpful to NSM analysts:'
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil performs simple aggregation of similar alert data records.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil makes certain types of metadata, and related data, readily
  prefs: []
  type: TYPE_NORMAL
- en: available.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil allows queries and review of alert data.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil permits queries and review of session data.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil provides a right-click menu that lets you pivot, or move from
  prefs: []
  type: TYPE_NORMAL
- en: either of those two categories of data to full content data, rendered as
  prefs: []
  type: TYPE_NORMAL
- en: text in a *transcript*, in a protocol analyzer like Wireshark, or in a network
  prefs: []
  type: TYPE_NORMAL
- en: forensic tool like NM.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil exposes features so analysts can count and classify events, thereby
  prefs: []
  type: TYPE_NORMAL
- en: enabling escalation and other incident response decisions.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections explain how to use these features.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple aggregation**'
  prefs: []
  type: TYPE_NORMAL
- en: A powerful but possibly underappreciated Sguil feature is its ability to aggre-
  prefs: []
  type: TYPE_NORMAL
- en: gate similar records into single lines of output in the console. Figure 8-2
  prefs: []
  type: TYPE_NORMAL
- en: shows this feature in action. The CNT column is Sguil’s mechanism to dis-
  prefs: []
  type: TYPE_NORMAL
- en: play record counts. The top row, for example, shows how Sguil aggregated
  prefs: []
  type: TYPE_NORMAL
- en: four similar records into a single entry in the console.
  prefs: []
  type: TYPE_NORMAL
- en: This simple act of grouping similar records into single lines reduces the
  prefs: []
  type: TYPE_NORMAL
- en: analyst’s workload. The review process can focus on unique records rather
  prefs: []
  type: TYPE_NORMAL
- en: than repetitive entries that differ only by timestamp. Because Sguil is a
  prefs: []
  type: TYPE_NORMAL
- en: live, or “real-time,” tool, it processes and aggregates entries as the console
  prefs: []
  type: TYPE_NORMAL
- en: receives them. Entries in the CNT column may increase as new but repeti-
  prefs: []
  type: TYPE_NORMAL
- en: tive events reach the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata and related Data**'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil doesn’t expose a great deal of metadata, but it makes three important
  prefs: []
  type: TYPE_NORMAL
- en: types easily accessible. In Figure 8-2, you can see two forms of metadata in
  prefs: []
  type: TYPE_NORMAL
- en: the lower-left corner of the console. The entries labeled *Src IP*, *Src Name*,
    *Dst IP*, and *Dst Name* represent the IP addresses and hostnames (if available
    via DNS) for the source and destination IP addresses of any highlighted
  prefs: []
  type: TYPE_NORMAL
- en: record. Under this IP and hostname information, Sguil displays WHOIS
  prefs: []
  type: TYPE_NORMAL
- en: data for either the source or destination IP address. Analysts can choose
  prefs: []
  type: TYPE_NORMAL
- en: which to display via a radio button.
  prefs: []
  type: TYPE_NORMAL
- en: Sguil shows one other form of metadata and one form of related data
  prefs: []
  type: TYPE_NORMAL
- en: in the lower-right corner of the console. When showing alert data gener-
  prefs: []
  type: TYPE_NORMAL
- en: ated by an IDS like Snort or Suricata (discussed in the next section), Sguil
  prefs: []
  type: TYPE_NORMAL
- en: displays the rule that triggered the generation of the alert data. Under the
  prefs: []
  type: TYPE_NORMAL
- en: rule, Sguil shows the packet that triggered the creation of the alert data.
  prefs: []
  type: TYPE_NORMAL
- en: '**164** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: This metadata and related data give analysts more context about the
  prefs: []
  type: TYPE_NORMAL
- en: systems involved in network traffic. They can also choose to disable the dis-
  prefs: []
  type: TYPE_NORMAL
- en: play of this information.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s take a closer look at the alert data to understand what it
  prefs: []
  type: TYPE_NORMAL
- en: means in the context of the Sguil console.
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying alert Data in Sguil**'
  prefs: []
  type: TYPE_NORMAL
- en: When you start Sguil, alert data is the first form of NSM evidence you will
    see.
  prefs: []
  type: TYPE_NORMAL
- en: Sguil calls alerts *event data*. The database supporting Sguil stores the alert
    data in an *event table*, so you’ll see references to that term, rather than *alert*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sguil incorporates four forms of alert data:'
  prefs: []
  type: TYPE_NORMAL
- en: • Network IDS engines like Snort and Suricata generate alert data when
  prefs: []
  type: TYPE_NORMAL
- en: traffic they observe triggers one of their rules. These rules are indica-
  prefs: []
  type: TYPE_NORMAL
- en: tors of compromises that may require human analysis to determine if
  prefs: []
  type: TYPE_NORMAL
- en: they represent benign, suspicious, or malicious activity. Alert data from
  prefs: []
  type: TYPE_NORMAL
- en: the Snort or Suricata IDSs bear entries in the Event Messages column
  prefs: []
  type: TYPE_NORMAL
- en: that begin with text like *ET* (for *Emerging Threats*, an IDS rule source)
    or *GPL* (another rule source).
  prefs: []
  type: TYPE_NORMAL
- en: • Host-based IDS engines like OSSEC ( *http://www.ossec.net/*), if enabled,
  prefs: []
  type: TYPE_NORMAL
- en: provide similar warnings based on analyzing information about indi-
  prefs: []
  type: TYPE_NORMAL
- en: vidual computers. Using OSSEC requires installing an OSSEC software
  prefs: []
  type: TYPE_NORMAL
- en: agent on servers. By default, SO runs OSSEC on its own operating sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem. Alerts from OSSEC have event messages beginning with *[OSSEC]*.
  prefs: []
  type: TYPE_NORMAL
- en: (For more information on OSSEC, see the online manual at *http://*
  prefs: []
  type: TYPE_NORMAL
- en: '*www.ossec.net/doc/*.)'
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil also integrates data in the event table from some sources that are
  prefs: []
  type: TYPE_NORMAL
- en: not IDS engines. For example, Sguil collects network profiling data
  prefs: []
  type: TYPE_NORMAL
- en: created by the Passive Real-time Asset Detection System (PRADS) tool
  prefs: []
  type: TYPE_NORMAL
- en: ( *https://github.com/gamelinux/prads/*). Alert data from PRADS begins
  prefs: []
  type: TYPE_NORMAL
- en: with *PADS*. PADS is a reference to the Passive Asset Detection System,
  prefs: []
  type: TYPE_NORMAL
- en: the precursor to PRADS.
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil stores HTTP transaction data generated by Bro. This data records
  prefs: []
  type: TYPE_NORMAL
- en: Uniform Resource Locators (URLs) observed by Bro, such as *www*
  prefs: []
  type: TYPE_NORMAL
- en: '*.testmyids.com*. Sguil displays these messages by prepending them with'
  prefs: []
  type: TYPE_NORMAL
- en: the label *URL*. Because HTTP activity is so common on networks, URL
  prefs: []
  type: TYPE_NORMAL
- en: data is not displayed by default, unlike data from Snort/Suricata,
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC, and PRADS.
  prefs: []
  type: TYPE_NORMAL
- en: Data from Snort/Suricata, OSSEC, and PRADS appear by default in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-2, in the top half of the Sguil console. If you want to query for
  prefs: []
  type: TYPE_NORMAL
- en: HTTP URL data recorded by Bro, you must ask Sguil manually. As an
  prefs: []
  type: TYPE_NORMAL
- en: example, we’ll create a query for HTTP data. Sguil refers to this as an
  prefs: []
  type: TYPE_NORMAL
- en: '*event query*.'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **165**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 102](index-200_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 103](index-200_2.png)'
  prefs: []
  type: TYPE_IMG
- en: To run an event query, choose **Query**4**Query Event Table** from the
  prefs: []
  type: TYPE_NORMAL
- en: Sguil menu. In the Query Builder window, modify the default text as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 8-2\. Note the use of single quote characters (to the left of the
  prefs: []
  type: TYPE_NORMAL
- en: enter key on the US keyboard).
  prefs: []
  type: TYPE_NORMAL
- en: WHERE event.timestamp > '2014-02-10 11:13:00' AND event.timestamp < '2013-02-
  prefs: []
  type: TYPE_NORMAL
- en: 10 11:16:00' AND event.signature LIKE 'URL%'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 8-2: Running an event query for signatures beginning with URL%*'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-3 shows this query in the Sguil console.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-3: Sguil event query for ''URL%''*'
  prefs: []
  type: TYPE_NORMAL
- en: This query looks for events in the Sguil database with timestamps
  prefs: []
  type: TYPE_NORMAL
- en: between 11:13:00 and 11:16:00 UTC on February 10, 2013, where the signa-
  prefs: []
  type: TYPE_NORMAL
- en: ture or message begins with the string URL. Figure 8-4 shows the results of
  prefs: []
  type: TYPE_NORMAL
- en: this query on our demo system.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-4: Querying Sguil for URL events*'
  prefs: []
  type: TYPE_NORMAL
- en: '**166** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: These URL events are drawn from the Bro application’s *http.log* file, which
    contains a summary of observed HTTP traffic. A Sguil agent read
  prefs: []
  type: TYPE_NORMAL
- en: '*http.log* and inserted the results into the MySQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that certain details—such as the timestamp, source and destina-
  prefs: []
  type: TYPE_NORMAL
- en: tion IP addresses and ports, and URL—are available as individual rows.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight any row and check the **Display Detail** box to see the rest of the
  prefs: []
  type: TYPE_NORMAL
- en: 'information associated with this event. The text after the UID: element of'
  prefs: []
  type: TYPE_NORMAL
- en: the detailed display is a unique identifier created by Bro for this session.
  prefs: []
  type: TYPE_NORMAL
- en: You could use this UID to query Bro logs later.
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying Session Data in Sguil**'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to query for NSM session data is another one of Sguil’s key func-
  prefs: []
  type: TYPE_NORMAL
- en: tions. Sguil refers to session data as *SANCP data*. SANCP stands for Security
  prefs: []
  type: TYPE_NORMAL
- en: Analyst Network Connection Profiler, which is a tool written by John Curry
  prefs: []
  type: TYPE_NORMAL
- en: packaged with earlier versions of Sguil to generate session data. In SO,
  prefs: []
  type: TYPE_NORMAL
- en: Doug Burks replaced SANCP with PRADS in late 2012\.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to generating session data, PRADS performs network device
  prefs: []
  type: TYPE_NORMAL
- en: profiling and tracks the systems it sees. Despite the new code, Sguil’s data-
  prefs: []
  type: TYPE_NORMAL
- en: base maintains a *sancp table* for storing session data. This form of NSM data
  prefs: []
  type: TYPE_NORMAL
- en: keeps thorough records of every conversation seen by the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike alert data, session data is always written to disk, regardless of
  prefs: []
  type: TYPE_NORMAL
- en: whether any system considers it normal or troublesome. The same neutral
  prefs: []
  type: TYPE_NORMAL
- en: approach also applies to full content data, extracted content data, transac-
  prefs: []
  type: TYPE_NORMAL
- en: tion data, statistical data, and metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Collecting and generating data beyond IDS alerts is a key aspect of network
    security* *monitoring. The availability of other forms of data, stored regardless
    of any relationship to an IDS alert, is a core differentiator between NSM-centric
    operations and* *alert-centric operations. With NSM, the alert is only the beginning
    of the analysis* *process, not the end. If your network monitoring model relies
    on IDS alerts, or IDS*'
  prefs: []
  type: TYPE_NORMAL
- en: '*alerts triggering packet capture, you’re not conducting NSM. Why not convert
    today?*'
  prefs: []
  type: TYPE_NORMAL
- en: Session data isn’t displayed by default in the Sguil console. Analysts can
  prefs: []
  type: TYPE_NORMAL
- en: query for session data using a process similar to running an event query, as
  prefs: []
  type: TYPE_NORMAL
- en: described in the previous section. The difference involves querying the sancp
  prefs: []
  type: TYPE_NORMAL
- en: table instead of the event table. More common, however, is the process of
  prefs: []
  type: TYPE_NORMAL
- en: '*pivoting* from alert data to session data. With pivoting, you start with one
    form of data, identify an item of interest, and use that item as the jumping-off'
  prefs: []
  type: TYPE_NORMAL
- en: point for a new query.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how to query for session data using a pivot methodology,
  prefs: []
  type: TYPE_NORMAL
- en: we’ll begin with the results of the URL-based alert data query. Suppose that
  prefs: []
  type: TYPE_NORMAL
- en: we want to know more about activity involving the destination IP address
  prefs: []
  type: TYPE_NORMAL
- en: for one of the URL records. Rather than run a new search from the Query
  prefs: []
  type: TYPE_NORMAL
- en: menu, we’ll pivot on the highlighted message. Right-click the destination IP
  prefs: []
  type: TYPE_NORMAL
- en: address of the highlighted event, and then select **Advanced Query**4**Query**
  prefs: []
  type: TYPE_NORMAL
- en: '**Sancp Table**4**Query DstIP/1 Hour**, as shown in Figure 8-5\.'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **167**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 104](index-202_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 105](index-202_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-5: Pivoting from a message to SANCP data*'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil displays the Query Builder window with prepopulated syntax that
  prefs: []
  type: TYPE_NORMAL
- en: looks for session records 30 minutes prior and 30 minutes following the
  prefs: []
  type: TYPE_NORMAL
- en: highlighted record, as shown in Figure 8-6\. The timestamp on the high-
  prefs: []
  type: TYPE_NORMAL
- en: lighted event is 11:14:57, so the query starts at 10:44:57 and ends at 11:44:57
  prefs: []
  type: TYPE_NORMAL
- en: on February 10, 2013\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-6: Query for SANCP records in the Query Builder window*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in Figure 8-7, this query returns only one session data
  prefs: []
  type: TYPE_NORMAL
- en: record. The PRADS application created this session record. A Sguil software
  prefs: []
  type: TYPE_NORMAL
- en: agent running on the sensor read the PRADS output and loaded the session
  prefs: []
  type: TYPE_NORMAL
- en: record into the MySQL database on the SO server. This is an example of
  prefs: []
  type: TYPE_NORMAL
- en: how an NSM console like Sguil integrates data from multiple systems and
  prefs: []
  type: TYPE_NORMAL
- en: platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '**168** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 106](index-203_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-7: Session data displayed in Sguil*'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Display Sancp Details** option to see a summary of the TCP
  prefs: []
  type: TYPE_NORMAL
- en: flags counted during this session. The TCP protocol uses flags like SYN,
  prefs: []
  type: TYPE_NORMAL
- en: ACK, FIN, ACK, RST, URG, and PSH to coordinate the transfer of data during a
    ses-
  prefs: []
  type: TYPE_NORMAL
- en: sion. PRADS keeps track of the total set of flags seen when two computers
  prefs: []
  type: TYPE_NORMAL
- en: exchange data using TCP. Sguil can display those flags in the console to
  prefs: []
  type: TYPE_NORMAL
- en: help analysts recognize patterns of communication. For example, the pat-
  prefs: []
  type: TYPE_NORMAL
- en: tern ACK PSH SYN FIN shown in Figure 8-7 reflects all of the flags that would
  prefs: []
  type: TYPE_NORMAL
- en: be used at some point during a normal TCP session.
  prefs: []
  type: TYPE_NORMAL
- en: The information in this record is similar to what we saw generated
  prefs: []
  type: TYPE_NORMAL
- en: by Argus in Chapter 6, including timestamps, source and destination IP
  prefs: []
  type: TYPE_NORMAL
- en: addresses and ports, protocol (6 here for TCP), and source and destination
  prefs: []
  type: TYPE_NORMAL
- en: packet and byte counts. These elements are the core features of session
  prefs: []
  type: TYPE_NORMAL
- en: 'data: who talked to whom, when, and how much data they exchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Just before this book went to press, the PRADS developers changed their code
    and*'
  prefs: []
  type: TYPE_NORMAL
- en: '*the way they count bytes of data sent by source and destination computers
    in session* *records. PRADS, along with Bro and NM, count bytes in the IP header,
    the TCP or*'
  prefs: []
  type: TYPE_NORMAL
- en: '*UDP header, and any application data when reporting bytes of data sent or
    received* *in a session. In contrast, Argus and Wireshark count bytes in the Ethernet
    header, the* *IP header, the TCP or UDP header, and any application data bytes.
    The decision to* *exclude bytes from the Ethernet header means PRADS, Bro, and
    NM will report fewer* *bytes compared to Argus and Wireshark results. These choices
    are arbitrary and harm-less, but important to understand when comparing data from
    these different tools.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pivoting to Full Content Data**'
  prefs: []
  type: TYPE_NORMAL
- en: Just as we pivoted from an event to session data, Sguil allows us to pivot from
  prefs: []
  type: TYPE_NORMAL
- en: alert or session data to full content data. To see how this works, click the
  prefs: []
  type: TYPE_NORMAL
- en: '**RealTime Events** tab and highlight an interesting alert. This example uses'
  prefs: []
  type: TYPE_NORMAL
- en: an alert about an outdated version of Java. An IDS like Snort or Suricata
  prefs: []
  type: TYPE_NORMAL
- en: generated an ET POLICY Vulnerable Java Version alert when the detection
  prefs: []
  type: TYPE_NORMAL
- en: engine noticed traffic from a computer running an old version of Java.
  prefs: []
  type: TYPE_NORMAL
- en: The IDS wrote the alert to disk, and then a Sguil agent read the data and
  prefs: []
  type: TYPE_NORMAL
- en: inserted it into the MySQL database. Using Sguil, we can learn more about
  prefs: []
  type: TYPE_NORMAL
- en: this event by right-clicking the **Alert ID** field and selecting **Transcript**,
    as shown in Figure 8-8\.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **169**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 107](index-204_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-8: Pivoting from alert data to a transcript*'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil generates a new window called a *transcript*, as shown in Figure 8-9
  prefs: []
  type: TYPE_NORMAL
- en: (similar to the window that appears after rebuilding a TCP session in
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark). We see a computer with IP address 192.168.2.108 connecting
  prefs: []
  type: TYPE_NORMAL
- en: to a server in the *oracle.com* domain. This is HTTP traffic, as demonstrated
  prefs: []
  type: TYPE_NORMAL
- en: by the GET request and the HTTP/1.1 reply. The ET POLICY rule for Vulnerable
  prefs: []
  type: TYPE_NORMAL
- en: Java Version noticed that 192.168.2.108 is running an outdated version of
  prefs: []
  type: TYPE_NORMAL
- en: Java, as reported by the User-Agent field and the UA-Java-Version (1.7.0_13).
  prefs: []
  type: TYPE_NORMAL
- en: 'This data is important for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: • It’s a reconstruction of the full content data saved by Netsniff-ng. This
  prefs: []
  type: TYPE_NORMAL
- en: data was *not* collected because the IDS detected suspicious or malicious
  prefs: []
  type: TYPE_NORMAL
- en: activity and decided to trigger the capture of full content data. Rather,
  prefs: []
  type: TYPE_NORMAL
- en: we simply used the ET POLICY rule for Vulnerable Java Version alert as a
  prefs: []
  type: TYPE_NORMAL
- en: reason to pivot from alert data to full content data.
  prefs: []
  type: TYPE_NORMAL
- en: • It shows all of the content for this session—exactly what the source sent
  prefs: []
  type: TYPE_NORMAL
- en: and how the destination replied. This data can be critical when trying
  prefs: []
  type: TYPE_NORMAL
- en: to understand what is happening during an intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: • Although this data appeared in a Sguil Tcl/Tk window, it could just as
  prefs: []
  type: TYPE_NORMAL
- en: easily have automatically gone to Wireshark, as shown in Figure 8-10, or
  prefs: []
  type: TYPE_NORMAL
- en: NM. In fact, you can open Wireshark by right-clicking the Alert ID field
  prefs: []
  type: TYPE_NORMAL
- en: and selecting either option.
  prefs: []
  type: TYPE_NORMAL
- en: '**170** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 108](index-205_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 109](index-205_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-9: Sguil transcript*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-10: Pivoting to Wireshark from Sguil alert data*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **171**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 110](index-206_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time Sguil retrieves full content data from the sensor, it saves a copy
    in the* /nsm/'
  prefs: []
  type: TYPE_NORMAL
- en: server_data/<servername>/archive *directory. The Sguil client also saves a copy
    for* *local use. For example, the pcap file required to build a transcript might
    be archived* *on the SO server at* /nsm/server_data/securityonion/archive/2013-02-24/
  prefs: []
  type: TYPE_NORMAL
- en: sademo-eth1/192.168.2.117:49207_184.51.126.91:80-6.raw *. The format of the*
  prefs: []
  type: TYPE_NORMAL
- en: '*filename is* SourceIP:SourcePort_DestinationIP:DestinationPort-Protocol.raw
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil’s full content capabilities are powerful for several reasons. First,
  prefs: []
  type: TYPE_NORMAL
- en: they’re easy to use. Analysts who are more familiar with manual retrieval of
  prefs: []
  type: TYPE_NORMAL
- en: network traffic via the command line are usually thrilled to interact with
  prefs: []
  type: TYPE_NORMAL
- en: Sguil on a right-click basis. Also, Sguil, through its Netsniff-ng component,
  prefs: []
  type: TYPE_NORMAL
- en: is *always* capturing full content data to disk. Whether or not there’s an alert,
    Sguil will have the data. The only limitation is the amount of hard drive
  prefs: []
  type: TYPE_NORMAL
- en: space reserved for capture. Wait too long, and the hard drive housekeeping
  prefs: []
  type: TYPE_NORMAL
- en: scripts running on SO will erase older captures to make room for new cap-
  prefs: []
  type: TYPE_NORMAL
- en: tures. This is why Sguil’s ability to keep archived copies of requested tran-
  prefs: []
  type: TYPE_NORMAL
- en: 'scripts on the server and client is so helpful: SO may delete the original
    full'
  prefs: []
  type: TYPE_NORMAL
- en: content data to make room for new files. As long as an analyst requested a
  prefs: []
  type: TYPE_NORMAL
- en: transcript, the associated full content evidence is preserved in two locations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Categorizing alert Data**'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil was designed as a real-time console for analysts sitting in a CIRT or
  prefs: []
  type: TYPE_NORMAL
- en: a security operations center (SOC). Sguil is not an “alert browser” for pag-
  prefs: []
  type: TYPE_NORMAL
- en: ing through security information. Analysts should not treat Sguil like a log
  prefs: []
  type: TYPE_NORMAL
- en: management platform that passively stores records. Instead, analysts should
  prefs: []
  type: TYPE_NORMAL
- en: monitor the Sguil console and investigate alerts as they appear. They must
  prefs: []
  type: TYPE_NORMAL
- en: decide whether an event is benign, suspicious, or malicious. After making this
  prefs: []
  type: TYPE_NORMAL
- en: decision, the analyst can assign a label to the event conveying that informa-
  prefs: []
  type: TYPE_NORMAL
- en: tion. This process of classification changes the status of the event from *RT*
  prefs: []
  type: TYPE_NORMAL
- en: (for *Real Time*) to another code chosen by the user.
  prefs: []
  type: TYPE_NORMAL
- en: To support this workflow,
  prefs: []
  type: TYPE_NORMAL
- en: Sguil allows you to categorize
  prefs: []
  type: TYPE_NORMAL
- en: alert data. Select **File**4**Display**
  prefs: []
  type: TYPE_NORMAL
- en: '**Incident Categories** to see the'
  prefs: []
  type: TYPE_NORMAL
- en: categories built into Sguil by
  prefs: []
  type: TYPE_NORMAL
- en: default, as shown in Figure 8-11\.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight any event in Sguil and
  prefs: []
  type: TYPE_NORMAL
- en: click the corresponding func-
  prefs: []
  type: TYPE_NORMAL
- en: tion key (F1 for Category I, F2
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-11: Sguil incident categories*'
  prefs: []
  type: TYPE_NORMAL
- en: for Category II, and so on) to
  prefs: []
  type: TYPE_NORMAL
- en: classify an alert. For example,
  prefs: []
  type: TYPE_NORMAL
- en: if you find evidence of an intruder achieving root-level access to a system,
  prefs: []
  type: TYPE_NORMAL
- en: pressing F1 will classify the event as an Unauthorized Root/Admin Access
  prefs: []
  type: TYPE_NORMAL
- en: incident. Crucially, *the alert will disappear from the real-time display*.
    The event is still preserved in the database, but from Sguil’s perspective, the
    event has
  prefs: []
  type: TYPE_NORMAL
- en: been “handled.” To classify an event as being of no consequence, press F8
  prefs: []
  type: TYPE_NORMAL
- en: instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**172** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 111](index-207_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that you can classify only alert data—not session data. Analysts
  prefs: []
  type: TYPE_NORMAL
- en: who use Sguil tend to assign their own meanings to the different function
  prefs: []
  type: TYPE_NORMAL
- en: keys, so devise a plan that suits your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Sguil users don’t let alert data pile up in the console. Instead, they work
  prefs: []
  type: TYPE_NORMAL
- en: to clear the screen as efficiently as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The case studies later in this book demonstrate how to apply this NSM
  prefs: []
  type: TYPE_NORMAL
- en: operational model to hunt for intrusions using NSM data. For now, it’s
  prefs: []
  type: TYPE_NORMAL
- en: enough to understand that Sguil provides CIRT members a way to perform
  prefs: []
  type: TYPE_NORMAL
- en: 'six key functions: viewing aggregated alerts, accessing some metadata and'
  prefs: []
  type: TYPE_NORMAL
- en: related data, querying for alert data, querying for session data, pivoting to
  prefs: []
  type: TYPE_NORMAL
- en: full content data, and classifying alert data.
  prefs: []
  type: TYPE_NORMAL
- en: '**using Squert**'
  prefs: []
  type: TYPE_NORMAL
- en: Squert ( *http://www.squertproject.org/*) is an open source web interface for
  prefs: []
  type: TYPE_NORMAL
- en: NSM data. Paul Halliday wrote Squert to provide access to the Sguil data-
  prefs: []
  type: TYPE_NORMAL
- en: bases using a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Paul codes Squert under the GNU General Public License version 3* (https://'
  prefs: []
  type: TYPE_NORMAL
- en: github.com/int13h/squert/blob/master/COPYING/) *.*
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the previous examples, the Sguil client focuses on pre-
  prefs: []
  type: TYPE_NORMAL
- en: senting key elements of different datatypes as records in rows. Squert adds
  prefs: []
  type: TYPE_NORMAL
- en: features like visualizations and supporting information to events in the
  prefs: []
  type: TYPE_NORMAL
- en: Sguil database. Figure 8-12 shows the Events tab of the Squert page with
  prefs: []
  type: TYPE_NORMAL
- en: the PING TEST alerts selected.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-12: Events tab in Squert 1.0*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **173**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 112](index-208_1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Squert dashboard presents several data visualizations. For example,
  prefs: []
  type: TYPE_NORMAL
- en: the events grouped by minute and hour graph shows spikes and valleys in
  prefs: []
  type: TYPE_NORMAL
- en: counts of alerts created by the Snort or Suricata IDS engines, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-13\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-13: Squert visualization of IDS alerts over time*'
  prefs: []
  type: TYPE_NORMAL
- en: Future versions of Squert should allow analysts to pivot from alert data
  prefs: []
  type: TYPE_NORMAL
- en: to packet details and full content data.
  prefs: []
  type: TYPE_NORMAL
- en: The Squert project expands beyond the key datatypes captured and
  prefs: []
  type: TYPE_NORMAL
- en: integrated by Sguil and its components, but the Snorby project takes that
  prefs: []
  type: TYPE_NORMAL
- en: integration a step further.
  prefs: []
  type: TYPE_NORMAL
- en: '**using Snorby**'
  prefs: []
  type: TYPE_NORMAL
- en: Snorby ( *http://www.snorby.org/*) is a newer open source web interface for
  prefs: []
  type: TYPE_NORMAL
- en: NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dustin Webber codes Snorby under a GNU General Public License version 3*'
  prefs: []
  type: TYPE_NORMAL
- en: (https://github.com/Snorby/snorby/blob/master/LICENSE) *.*
  prefs: []
  type: TYPE_NORMAL
- en: SO users can access Snorby by pointing a web browser to port 444 TCP
  prefs: []
  type: TYPE_NORMAL
- en: on the SO server. Log in using the email address and password selected
  prefs: []
  type: TYPE_NORMAL
- en: during the SO installation process to see a summary dashboard of data
  prefs: []
  type: TYPE_NORMAL
- en: from the Sguil database, as shown in Figure 8-14\. As with Sguil, Snorby
  prefs: []
  type: TYPE_NORMAL
- en: users can classify events using function keys.
  prefs: []
  type: TYPE_NORMAL
- en: Most users find the Snorby interface to be intuitive. For example, click-
  prefs: []
  type: TYPE_NORMAL
- en: ing the High Severity portion of the dashboard takes you to the list of high-
  prefs: []
  type: TYPE_NORMAL
- en: severity alerts (as designated by the IDS engine). Clicking any record in the
  prefs: []
  type: TYPE_NORMAL
- en: list displays additional data for the event in question, as shown in Figure
    8-15\.
  prefs: []
  type: TYPE_NORMAL
- en: Snorby also supports creating transcripts, thanks to Paul Halliday’s
  prefs: []
  type: TYPE_NORMAL
- en: CapMe program ( *https://github.com/int13h/capme*). To use it, select **Packet**
  prefs: []
  type: TYPE_NORMAL
- en: '**Capture Options**, and then select **Custom**. The Packet Capture Builder'
  prefs: []
  type: TYPE_NORMAL
- en: window will appear, as shown in Figure 8-16\.
  prefs: []
  type: TYPE_NORMAL
- en: '**174** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 113](index-209_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 114](index-209_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-14: The initial Snorby screen*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-15: Snorby alert detail*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **175**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 115](index-210_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 116](index-210_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-16: Packet Capture Builder window in Snorby*'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Fetch Packet** to open a new window titled *capME!* , as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-17\. This window is prepopulated with the fields necessary to retrieve
  prefs: []
  type: TYPE_NORMAL
- en: full content data associated with the particular event. All that remains is
    to
  prefs: []
  type: TYPE_NORMAL
- en: enter a username and password to authenticate to the SO sensor that stores
  prefs: []
  type: TYPE_NORMAL
- en: the full content data.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-17: CapMe ready to build a transcript*'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re ready, click **Submit**, and CapMe will retrieve full content
  prefs: []
  type: TYPE_NORMAL
- en: data from the appropriate sensor, return it to the server, and render it via
  prefs: []
  type: TYPE_NORMAL
- en: the web browser, as shown in Figure 8-18\.
  prefs: []
  type: TYPE_NORMAL
- en: '**176** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 117](index-211_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-18: CapMe returns a transcript.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we see HTTP traffic, with HEAD and GET requests, fol-
  prefs: []
  type: TYPE_NORMAL
- en: lowed by an HTTP/1.1 status code. It looks as if 192.168.2.117 is retrieving
    an
  prefs: []
  type: TYPE_NORMAL
- en: update from Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Snorby can also offer data to analysts in nontraditional ways, such as via
  prefs: []
  type: TYPE_NORMAL
- en: iPhone apps. For example, the Snorby iPhone app ( *https://itunes.apple.com/*
  prefs: []
  type: TYPE_NORMAL
- en: '*us/app/snorby/id570584212?mt=8/*) offers an innovative way to review Snorby'
  prefs: []
  type: TYPE_NORMAL
- en: alerts on the go, as shown in Figure 8-19\.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*In 2013 Dustin Webber published a cloud-based version of Snorby called Threat*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Stack* (https://www.threatstack.com/) *, mentioned in the conclusion. He plans
    to* *continue to support the open source version of Snorby, but the cloud edition
    contains* *many compelling features.*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **177**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 118](index-212_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-19: Snorby iPhone app displays suspicious scan alerts.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**using elSa**'
  prefs: []
  type: TYPE_NORMAL
- en: ELSA, the Enterprise Log Search and Archive ( *https://code.google.com/p/*
  prefs: []
  type: TYPE_NORMAL
- en: '*enterprise-log-search-and-archive/*), provides a fully asynchronous web-based'
  prefs: []
  type: TYPE_NORMAL
- en: query interface that normalizes logs and makes searching billions of them
  prefs: []
  type: TYPE_NORMAL
- en: for arbitrary strings as easy as searching the Web, as stated on the project’s
  prefs: []
  type: TYPE_NORMAL
- en: website.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Martin Holste codes ELSA under a GNU General Public License version 2*'
  prefs: []
  type: TYPE_NORMAL
- en: '*(* http://enterprise-log-search-and-archive.googlecode.com/svn/trunk/'
  prefs: []
  type: TYPE_NORMAL
- en: elsa/LICENSE/ *).*
  prefs: []
  type: TYPE_NORMAL
- en: ELSA relies on Syslog-ng ( *http://www.balabit.com/network-security/syslog-ng/*)
    to collect remote log events, stores them in MySQL, and provides search
  prefs: []
  type: TYPE_NORMAL
- en: capabilities using the search server Sphinx ( *http://sphinxsearch.com/*). ELSA
  prefs: []
  type: TYPE_NORMAL
- en: is closely tied to the Bro tool, and many analysts use it to interpret Bro logs.
  prefs: []
  type: TYPE_NORMAL
- en: Because ELSA has been integrated into SO, using it is as easy as point-
  prefs: []
  type: TYPE_NORMAL
- en: ing a web browser to the address and port listening on the SO server, and
  prefs: []
  type: TYPE_NORMAL
- en: then authenticating using the username and password you set for the Sguil
  prefs: []
  type: TYPE_NORMAL
- en: database. ELSA should listen on port 3154 TCP by default and must be
  prefs: []
  type: TYPE_NORMAL
- en: accessed via HTTPS. After authentication, it offers the query window shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 8-20\.
  prefs: []
  type: TYPE_NORMAL
- en: '**178** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 119](index-213_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 120](index-213_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 121](index-213_3.png)'
  prefs: []
  type: TYPE_IMG
