- en: $ **tcpdump -n -r icmp.pcap dst net 192.168.2.0**
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tcpdump -n -r icmp.pcap dst net 192.168.2.0**
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 icmp.pcap 中读取，链路类型为 EN10MB（以太网）
- en: '20:30:28.844237 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 5, length 40'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '20:30:28.844237 IP 192.168.2.108 > 173.194.75.104: ICMP 回显请求，id 1，seq 5，长度
    40'
- en: '20:30:29.850913 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 6, length 40'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '20:30:29.850913 IP 192.168.2.108 > 173.194.75.104: ICMP 回显请求，id 1，seq 6，长度
    40'
- en: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP echo request, id 47441,
    seq 1, length 64'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP 回显请求，id 47441，seq 1，长度
    64'
- en: '*Listing 6-11: Capturing traffic to a network via BPF with Tcpdump*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-11：通过 BPF 使用 Tcpdump 捕获网络流量*'
- en: Many protocols offer BPF primitives that allow you to look at specific
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多协议提供了 BPF 原语，允许你查看特定的
- en: aspects of the traffic, and you can also combine elements of the previous
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 流量的各个方面，并且你还可以结合前面的元素
- en: examples to limit what you see. For example, Listing 6-12 shows only ICMP
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用于限制显示内容。例如，列表 6-12 仅显示 ICMP
- en: echo replies from IP address 192.168.2.127\.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从 IP 地址 192.168.2.127 获取回显回复\。
- en: $ **tcpdump -n -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and dst host 192.168.2.127**
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tcpdump -n -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and dst host 192.168.2.127**
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 icmp.pcap 中读取，链路类型为 EN10MB（以太网）
- en: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP 回显回复，id 47441，seq 1，长度
    64'
- en: '*Listing 6-12: Capturing ICMP echo replies to a host via BPF with Tcpdump*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-12：通过 BPF 使用 Tcpdump 捕获主机的 ICMP 回显回复*'
- en: '***Extracting Details from Tcpdump Output***'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '***从 Tcpdump 输出中提取细节***'
- en: In addition to displaying traffic more specifically, with Tcpdump, you can
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更具体地显示流量外，使用 Tcpdump，你还可以
- en: also extract more details from the results. For example, Listing 6-13 tells
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以从结果中提取更多细节。例如，列表 6-13 显示
- en: 'Tcpdump to show timestamps as *YYYY*- *MM*- *DD* *HH*: *MM*: *SS.milli seconds*
    via'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Tcpdump 显示时间戳格式为 *YYYY*- *MM*- *DD* *HH*: *MM*: *SS.毫秒*，通过'
- en: –tttt, adds layer 2 headers with –e, and tells Tcpdump to show all headers
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: –tttt，添加第二层头信息，使用 –e，指示 Tcpdump 显示所有头信息
- en: and data in hex and ASCII format with -XX.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以十六进制和 ASCII 格式显示数据，使用 -XX。
- en: $ **tcpdump -n -tttt -e -XX -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and
    dst host 192.168.2.127**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tcpdump -n -tttt -e -XX -r icmp.pcap 'icmp[icmptype] = icmp-echoreply' and
    dst host 192.168.2.127**
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 icmp.pcap 中读取，链路类型为 EN10MB（以太网）
- en: '2013-02-16 20:30:30.013728 00:0d:b9:27:f1:48 > 00:13:10:65:2f:ac, ethertype
    IPv4 (0x0800), length 98: 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '2013-02-16 20:30:30.013728 00:0d:b9:27:f1:48 > 00:13:10:65:2f:ac, ethertype
    IPv4 (0x0800)，长度 98：173.194.75.99 > 192.168.2.127: ICMP 回显回复，id 47441，seq 1，长度
    64'
- en: '0x0000: 0013 1065 2fac 000d b927 f148 0800 4500 ...e/....''.H..E.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0000: 0013 1065 2fac 000d b927 f148 0800 4500 ...e/....''.H..E.'
- en: '0x0010: 0054 0000 0000 fb01 035c adc2 4b63 c0a8 .T.......\..Kc..'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0010: 0054 0000 0000 fb01 035c adc2 4b63 c0a8 .T.......\..Kc..'
- en: '0x0020: 027f 0000 2092 b951 0001 65ec 1f51 0000 .......Q..e..Q..'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0020: 027f 0000 2092 b951 0001 65ec 1f51 0000 .......Q..e..Q..'
- en: '0x0030: 0000 d30a 0f00 0000 0000 1011 1213 1415 ................'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0030: 0000 d30a 0f00 0000 0000 1011 1213 1415 ................'
- en: '0x0040: 1617 1819 1a1b 1c1d 1e1f 2021 2223 2425 ...........!"#$%'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0040: 1617 1819 1a1b 1c1d 1e1f 2021 2223 2425 ...........!"#$%'
- en: '0x0050: 2627 2829 2a2b 2c2d 2e2f 3031 3233 3435 &''()*+,-./012345'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0050: 2627 2829 2a2b 2c2d 2e2f 3031 3233 3435 &''()*+,-./012345'
- en: '0x0060: 3637 67'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '0x0060: 3637 67'
- en: '*Listing 6-13: Extracting more details from Tcpdump output*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-13：从 Tcpdump 输出中提取更多细节*'
- en: '**N o T e**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Tcpdump offers other matching and storage options. For more information, see*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tcpdump 提供其他匹配和存储选项。更多信息，请参见*'
- en: '*the Tcpdump manual page on SO. Type **man tcpdump** at a command prompt to*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tcpdump 手册页面。请在命令提示符下输入 **man tcpdump** 来查看*'
- en: '*read the manual.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*阅读手册。*'
- en: Command Line Packet Analysis Tools **121**
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行数据包分析工具 **121**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '***Examining Full Content Data with Tcpdump***'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '***使用 Tcpdump 检查完整内容数据***'
- en: Because Tcpdump also works on saved traces, you can use it to examine the
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Tcpdump 也可以在保存的跟踪中工作，因此你可以用它检查
- en: full content data saved on SO stand-alone or sensor platforms in the */nsm/*
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SO 独立或传感器平台上保存的完整内容数据位于 */nsm/*
- en: '*sensor_data/<sensorname>/dailylogs* directory. When searching for indicators
    of compromise in network traffic, you may want to search every file in these'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*sensor_data/<sensorname>/dailylogs* 目录。当在网络流量中寻找入侵指标时，你可能想要搜索这些目录中的每个文件'
- en: directories. You can use Tcpdump and a BPF modifier to hone your output.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目录。你可以使用 Tcpdump 和 BPF 修改符来优化输出。
- en: For example, Listing 6-14 looks through all files for traffic involving
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，列表 6-14 会搜索所有文件，查找涉及
- en: host 8.8.8.8 and TCP thanks to a for loop and the find command. Note the
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: host 8.8.8.8 和 TCP 通过 for 循环和 find 命令实现。注意
- en: backticks (on the same key as the tilde symbol) in front of the find and after
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 find 命令前面加上反引号（与波浪符号在同一键位），并在后面加上反引号
- en: -type f.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: -type f。
- en: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/ -type f`; do tcpdump
    -n -c 1 -r $i** **host 8.8.8.8 and tcp; done**
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/ -type f`; do tcpdump
    -n -c 1 -r $i** **host 8.8.8.8 and tcp; done**
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361019690,
    link-type EN10MB (Ethernet) u
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361019690 读取，链路类型
    EN10MB（以太网） u
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361045719,
    link-type EN10MB (Ethernet) v
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361045719 读取，链路类型
    EN10MB（以太网） v
- en: '21:02:06.430169 IP 192.168.2.126.44334 > 8.8.8.8.53:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '21:02:06.430169 IP 192.168.2.126.44334 > 8.8.8.8.53:'
- en: Flags [S], seq 1330246822, win 42340, options
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 标志 [S]，序列号 1330246822，窗口大小 42340，选项
- en: '[mss 1460,sackOK,TS val 157066547 ecr 0,nop,wscale 11], length 0 w'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[mss 1460,sackOK,TS val 157066547 ecr 0,nop,wscale 11]，长度 0 w'
- en: reading from file /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361017706,
    link-type EN10MB (Ethernet) x
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-16/snort.log.1361017706 读取，链路类型
    EN10MB（以太网） x
- en: '*-- snip --*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*-- 截取 --*'
- en: '*Listing 6-14: Looping through pcap files*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-14：遍历 pcap 文件*'
- en: Listing 6-14 shows that the first trace u did not contain any traffic
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-14 显示，第一次跟踪没有包含任何流量
- en: matching the BPF. The second trace v contains a matching SYN packet w.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 BPF 的流量。第二次跟踪 v 包含一个匹配的 SYN 数据包 w。
- en: The third trace at x did not contain any matching packets.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第三次跟踪 x 没有包含任何匹配的包。
- en: With a repository of full content data at your disposal, you give greater
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有完整内容数据的存储库后，你能提供更强大的
- en: context to your NSM analysis. While most NSM analysts use many tools to
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的 NSM 分析提供上下文。虽然大多数 NSM 分析师使用许多工具来
- en: access full content data, I often use Tcpdump to take a quick look at specific
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 访问完整内容数据时，我通常使用 Tcpdump 快速查看特定
- en: network activity, applying a BPF for a certain port or host of interest.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 网络活动，应用 BPF 过滤器来监控特定端口或主机的流量。
- en: '**using dumpcap and Tshark**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 dumpcap 和 Tshark**'
- en: The Dumpcap and Tshark tools are shipped with the Wireshark ( *http://*
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Dumpcap 和 Tshark 工具随 Wireshark 一同发布（*http://*
- en: '*www.wireshark.org/*) suite. Dumpcap is a simple traffic collection tool, and'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*www.wireshark.org/*) 套件。Dumpcap 是一个简单的流量收集工具，且'
- en: Tshark is the command line version of the Wireshark network traffic ana-
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark 是 Wireshark 网络流量分析器的命令行版
- en: lyzer. Dumpcap, and by extension Tshark, depend on the libpcap traffic
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器。Dumpcap 和 Tshark 依赖于 libpcap 流量
- en: capture library to access packets. Both Dumpcap and Tshark are avail-
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获库用来访问数据包。Dumpcap 和 Tshark 都可以在
- en: able on SO, but they are not running by default. Analysts can invoke each
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可在 SO 上使用，但默认情况下它们未运行。分析师可以根据需要调用每个
- en: on demand, most often to access full content data in */nsm/sensor_data/*
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按需访问，通常用于访问 */nsm/sensor_data/* 中的完整内容数据
- en: '*<sensorname>/dailylogs*.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*<sensorname>/dailylogs*。'
- en: '**N o T e**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Gerald Combs is the original author of Dumpcap, and he and the Wireshark team*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*Gerald Combs 是 Dumpcap 的原始作者，他和 Wireshark 团队*'
- en: '*code under the GNU General Public License version 2 (* http://www.wireshark'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*根据 GNU 通用公共许可证第2版 (* http://www.wireshark'
- en: .org/faq.html *).*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: .org/faq.html *）。*
- en: '**122** Chapter 6'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**122** 第6章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: Tshark’s strength lies in protocol analysis, thanks to the hundreds of protocols
    it understands, and, unlike Tcpdump, it allows you access just
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark 的强大之处在于协议分析，得益于它理解的数百种协议，而且与 Tcpdump 不同，它允许你只访问
- en: about any aspect of a protocol using fairly human-friendly syntax. For this
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相当人性化的语法解读协议的任何方面。对于这个
- en: reason, if I need to decode a specific protocol in a command line environ-
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是，如果我需要在命令行环境中解码某个特定协议
- en: ment, I choose Tshark over Tcpdump.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我选择 Tshark 而不是 Tcpdump。
- en: '***Running Tshark***'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '***运行 Tshark***'
- en: You can run Tshark from a command terminal, although if you start it
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令终端运行 Tshark，尽管如果你启动它时
- en: with sudo, it will likely report the following error and warning as shown
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sudo 时，它可能会报告如下错误和警告，正如所示
- en: in Listing 6-15\.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表 6-15 中\。
- en: $ **sudo tshark -i eth1**
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo tshark -i eth1**
- en: 'tshark: Lua: Error during loading:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'tshark: Lua: 加载时发生错误：'
- en: '[string "/usr/share/wireshark/init.lua"]:45: dofile has been disabled'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[string "/usr/share/wireshark/init.lua"]:45: dofile 已被禁用'
- en: Running as user "root" and group "root". This could be dangerous.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以用户 "root" 和组 "root" 运行。这可能很危险。
- en: Capturing on eth1
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 eth1 上捕获
- en: '*Listing 6-15: Lua error when starting Tshark*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-15：启动 Tshark 时的 Lua 错误*'
- en: The protocol dissectors shipped with Wireshark and Tshark may con-
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 和 Tshark 附带的协议解码器可能包含
- en: tain vulnerabilities. Clever intruders could exploit those vulnerabilities by
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可能包含漏洞。聪明的入侵者可以利用这些漏洞
- en: sending specially crafted network traffic past a sensor. If malicious packets
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 发送特别构造的网络流量通过传感器。如果恶意数据包
- en: exploit Wireshark or Tshark while it is sniffing traffic, an intruder could
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果恶意数据包在传感器前发送，入侵者可能会利用 Wireshark 或 Tshark 正在嗅探流量的漏洞
- en: gain control of the sensor. If Wireshark or Tshark is running with root privi-
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 获取传感器控制权。如果 Wireshark 或 Tshark 正在以 root 权限运行，
- en: leges when exploitation occurs, the intruder could gain total control of the
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当利用发生时，入侵者可能会获得传感器的完全控制权。
- en: sensor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器。
- en: To partially mitigate the risk of granting intruders unauthorized access,
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部分缓解授予入侵者未经授权访问的风险，
- en: the Wireshark developers recommend that users not run either program
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 开发者建议用户不要以 root 权限运行任何程序
- en: with root privileges. Instead, they suggest capturing traffic with Dumpcap
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以 root 权限运行。相反，他们建议使用 Dumpcap 捕获流量
- en: first, and then analyzing saved packets with Wireshark or Tshark.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 Wireshark 或 Tshark 分析保存的数据包。
- en: '***Running Dumpcap***'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '***运行 Dumpcap***'
- en: Dumpcap uses the same BPF syntax as Tcpdump, as shown in Listing 6-16\.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Dumpcap 使用与 Tcpdump 相同的 BPF 语法，如清单 6-16 所示\。
- en: $ **sudo dumpcap -i eth1 -c 2 -w /tmp/tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo dumpcap -i eth1 -c 2 -w /tmp/tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
- en: 'File: /tmp/tshark-icmp.pcap'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：/tmp/tshark-icmp.pcap
- en: 'Packets captured: 2'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获的数据包：2
- en: 'Packets Received/Dropped on Interface eth1: 2/0'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口 eth1 上接收/丢弃的数据包：2/0
- en: '*Listing 6-16: Capturing two ICMP packets with Dumpcap*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-16：使用 Dumpcap 捕获两个 ICMP 数据包*'
- en: The command in Listing 6-16 tells Dumpcap to listen to the eth1 inter-
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-16 中的命令告诉 Dumpcap 监听 eth1 网络接口
- en: face, save two packets, write to the */tmp/tshark-icmp.pcap* file, and limit
    capture to ICMP traffic involving the computer at IP address 192.168.2.108\.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 面对，保存两个数据包，写入到 */tmp/tshark-icmp.pcap* 文件，并将捕获限制为涉及 IP 地址 192.168.2.108 计算机的
    ICMP 流量\。
- en: As you can see in the listing, you don’t need to specify a snaplength via -s
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在清单中看到的，不需要通过 -s 指定 snaplength
- en: as you do with Tcpdump, because Dumpcap uses a default maximum value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Tcpdump 一样，因为 Dumpcap 使用默认的最大值。
- en: Listing 6-15 writes to the */tmp* directory because the operating system won’t
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-15 写入到 */tmp* 目录，因为操作系统不会
- en: Command Line Packet Analysis Tools **123**
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行数据包分析工具 **123**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: let me write to my home directory as root through sudo. I must write to a directory
    that the root user can also write to, which doesn’t include my
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我通过 sudo 以 root 身份写入我的主目录。我必须写入 root 用户也可以写入的目录，而这不包括我的
- en: user’s home directory.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的主目录。
- en: Besides using sudo and writing to a directory writable by root, you can
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 sudo 并写入 root 可写的目录外，你还可以
- en: reconfigure Wireshark on SO to create a wireshark group, and then add your
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置 Wireshark，在 SO 中创建 wireshark 组，并将你的
- en: user account to that group. Doing so will allow your users to capture packets
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 用户帐户添加到该组中。这样做将允许用户捕获数据包
- en: with Dumpcap without invoking sudo to elevate privileges. To accomplish this
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dumpcap 而不调用 sudo 提升权限来完成此操作
- en: 'goal, run the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 目标，运行以下命令：
- en: $ **sudo dpkg-reconfigure wireshark-common**
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo dpkg-reconfigure wireshark-common**
- en: If you run this command within an OpenSSH session, the screen should
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 OpenSSH 会话中运行此命令，屏幕应显示
- en: look like Listing 6-17\.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像清单 6-17\。
- en: âââââââââââââââââââââââ¤ Configuring wireshark-common âââââââââââââââââââââââ
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: âââââââââââââââââââââââ¤ 配置 wireshark-common âââââââââââââââââââââââ
- en: â â
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: â â
- en: â Dumpcap can be installed in a way that allows members of the "wireshark" â
    â system group to capture packets. This is recommended over the â
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: â Dumpcap 可以以一种方式安装，使得“wireshark”系统组的成员能够捕获数据包。推荐这种方法，而不是 â
- en: â alternative of running Wireshark/Tshark directly as root, because less â
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: â 直接以 root 身份运行 Wireshark/Tshark 的替代方法，因为较少 â
- en: â of the code will run with elevated privileges. â
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: â 代码将以提升的权限运行。 â
- en: â â
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: â â
- en: â For more detailed information please see â
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: â 如需详细信息，请参见 â
- en: â /usr/share/doc/wireshark-common/README.Debian. â
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: â /usr/share/doc/wireshark-common/README.Debian. â
- en: â â
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: â â
- en: â Enabling this feature may be a security risk, so it is disabled by â
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: â 启用此功能可能带来安全风险，因此默认情况下禁用。 â
- en: â default. If in doubt, it is suggested to leave it disabled. â
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: â 默认情况下。如果有疑问，建议保持禁用状态。 â
- en: â â
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: â â
- en: â Should non-superusers be able to capture packets? â
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: â 非超级用户是否能捕获数据包？ â
- en: â â
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: â â
- en: â <Yes> <No> â â â
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: â <是> <否> â â â
- en: âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
- en: '*Listing 6-17: Configuring wireshark-common via OpenSSH session*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-17: 通过OpenSSH会话配置wireshark-common*'
- en: Use the tab or arrow keys to select **Yes**, and then press enter. The script
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用制表符或箭头键选择**Yes**，然后按回车键。脚本
- en: will add a wireshark user to the */etc/group* file. Next, add your user to the
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将会在*/etc/group*文件中添加一个Wireshark用户。接下来，将你的用户添加到
- en: 'wireshark group. Here, the username is sademo:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: wireshark组。这里，用户名是sademo：
- en: $ **sudo usermod -a -G wireshark sademo**
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo usermod -a -G wireshark sademo**
- en: Now log out of the system and log back in. (If you try to capture traffic
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从系统注销并重新登录。（如果你尝试捕获流量
- en: without logging in again, you will get an error.) Try capturing traffic as a
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不重新登录，你将收到一个错误。）尝试以普通用户身份捕获流量
- en: normal user, as shown in Listing 6-18\.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户，如列表6-18所示。
- en: $ **dumpcap -i eth1 -c 2 -w tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: $ **dumpcap -i eth1 -c 2 -w tshark-icmp.pcap -f "icmp and host 192.168.2.108"**
- en: 'File: tshark-icmp.pcap'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：tshark-icmp.pcap
- en: 'Packets captured: 2'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获的数据包：2
- en: 'Packets received/dropped on interface eth1: 2/0'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口eth1上接收到/丢弃的数据包：2/0
- en: '*Listing 6-18: Capturing traffic with user-level privileges with Dumpcap. You
    can now* *capture traffic with Dumpcap without using sudo and encountering errors.*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-18: 使用Dumpcap以用户级权限捕获流量。现在你可以* *在不使用sudo并避免错误的情况下使用Dumpcap捕获流量。*'
- en: '**124** Chapter 6'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**第124章 第6章**'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '***Running Tshark on Dumpcap’s Traffic***'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '***在Dumpcap的流量上运行Tshark***'
- en: Once Dumpcap has captured traffic, analyze it with Tshark. To run Tshark
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Dumpcap捕获到流量，使用Tshark进行分析。要运行Tshark
- en: in its most basic mode, use the -r switch, as shown in Listing 6-19\.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最基本的模式下，使用-r选项，如列表6-19所示。
- en: $ **tshark -r tshark-icmp.pcap**
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -r tshark-icmp.pcap**
- en: 1 0.000000 192.168.2.108 -> 8.8.8.8 ICMP 74 Echo (ping) request
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 1 0.000000 192.168.2.108 -> 8.8.8.8 ICMP 74 Echo（ping）请求
- en: id=0x0001, seq=17/4352, ttl=127
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: id=0x0001, seq=17/4352, ttl=127
- en: 2 0.022643 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo (ping) reply
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 2 0.022643 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo（ping）应答
- en: id=0x0001, seq=17/4352, ttl=251
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: id=0x0001, seq=17/4352, ttl=251
- en: '*Listing 6-19: Reading a trace with Tshark*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-19: 使用Tshark读取跟踪*'
- en: This output should be fairly easy to understand, although the time field
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出应该相对容易理解，尽管时间字段
- en: may be unfamiliar. Specifically, host 192.168.2.108 issues an ICMP echo
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会让你感到陌生。具体来说，主机192.168.2.108发起了一个ICMP回显
- en: request to host 8.8.8.8 in packet 1, and host 8.8.8.8 responds with an ICMP
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请求主机8.8.8.8的数据包1，主机8.8.8.8用ICMP应答返回
- en: echo reply in packet 2\. By default, Tshark shows an initial time of 0, fol-
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据包2中为回显应答。默认情况下，Tshark显示初始时间为0，随后是
- en: lowed by time elapsed since the first packet. You can change that to show
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随后是从第一个数据包起的时间经过。你可以更改为显示
- en: a more readable format with the -t ad switch, as shown in Listing 6-20\.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用-t ad选项，可以以更易读的格式显示，如列表6-20所示。
- en: $ **tshark -t ad -r tshark-icmp.pcap**
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -t ad -r tshark-icmp.pcap**
- en: 1 2013-02-17 13:37:45.922462 192.168.2.108 -> 8.8.8.8 ICMP 74 Echo
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 1 2013-02-17 13:37:45.922462 192.168.2.108 -> 8.8.8.8 ICMP 74 回显
- en: (ping) request id=0x0001, seq=17/4352, ttl=127
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: （ping）请求 id=0x0001, seq=17/4352, ttl=127
- en: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
- en: (ping) reply id=0x0001, seq=17/4352, ttl=251
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: （ping）应答 id=0x0001, seq=17/4352, ttl=251
- en: '*Listing 6-20: Showing absolute timestamps using the -t ad switch in Tshark*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-20: 使用-t ad选项在Tshark中显示绝对时间戳*'
- en: '***Using Display Filters with Tshark***'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '***使用Tshark的显示过滤器***'
- en: Tshark provides a robust language to show packets that match *display*
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark提供了一种强大的语言来显示匹配*显示过滤器*的数据包
- en: '*filters*. Tshark and Wireshark use display filters to control what traffic
    is'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*filters*组。Tshark和Wireshark使用显示过滤器来控制捕获的流量。'
- en: shown, but display filters do not affect packet capture. Use BPF syntax if you
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，但显示过滤器不影响数据包捕获。如果你
- en: want to influence what Tshark (or Dumpcap, for that matter) collects and
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 想要影响Tshark（或者说Dumpcap）收集的数据
- en: stores. For example, Listing 6-21 invokes a display filter to show only ICMP
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 存储。例如，列表6-21调用了一个显示过滤器，只显示ICMP
- en: echo replies (ICMP type 0 messages).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 回显应答（ICMP类型0消息）。
- en: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0"**
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0"**
- en: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 2 2013-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108 ICMP 74 Echo
- en: (ping) reply id=0x0001, seq=17/4352, ttl=251
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: （ping）应答 id=0x0001, seq=17/4352, ttl=251
- en: '*Listing 6-21: Showing an ICMP echo reply in Tshark*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-21: 在Tshark中显示ICMP回显应答*'
- en: This output may not seem very different from that of the Tcpdump fil-
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出可能与Tcpdump的文件输出看起来没有太大区别
- en: ter shown in Listing 6-20, but the power of Tshark (and Wireshark) comes
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如列表 6-20 所示，但 Tshark（和 Wireshark）的强大之处在于
- en: from the extensive catalog of available display filters. The ICMP protocol has
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从可用显示过滤器的广泛目录中。ICMP 协议具有
- en: 64 display filters available as of this writing, as listed at *http://www.wireshark*
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，共有 64 个显示过滤器可用，详细信息请参见 *http://www.wireshark*
- en: '*.org/docs/dfref/i/icmp.html*. All of these can be used to define specific
    values to be matched with a display filter.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*.org/docs/dfref/i/icmp.html*。所有这些都可以用来定义与显示过滤器匹配的特定值。'
- en: Command Line Packet Analysis Tools **125**
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行数据包分析工具 **125**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: Tshark reveals its depth of knowledge for protocols when you pass it the
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark 显示了它在协议方面的深厚知识，当你给它传递
- en: -V switch, which tells Tshark to produce a verbose protocol decode for the
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: -V 开关，指示 Tshark 输出详细的协议解码
- en: specified traffic. Add -x to display a hex and ASCII listing of the packet.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 指定流量。添加 -x 参数以显示数据包的十六进制和 ASCII 列表。
- en: Both options are shown in Listing 6-22\.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项在列表 6-22 中显示\。
- en: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0" -x -V**
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -t ad -r tshark-icmp.pcap -R "icmp.type == 0" -x -V**
- en: 'uFrame 2: 74 bytes on wire (592 bits), 74 bytes captured (592 bits)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'uFrame 2: 74 字节在网络上传输 (592 位)，74 字节已捕获 (592 位)'
- en: 'Arrival Time: Feb 17, 2014 13:37:45.945105000 UTC'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '到达时间: 2014年2月17日 13:37:45.945105000 UTC'
- en: 'Epoch Time: 1361108265.945105000 seconds'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '时间戳: 1361108265.945105000 秒'
- en: '[Time delta from previous captured frame: 0.022643000 seconds]'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[与前一帧的时间差: 0.022643000 秒]'
- en: '[Time delta from previous displayed frame: 0.000000000 seconds]'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[前一帧显示时间差: 0.000000000 秒]'
- en: '[Time since reference or first frame: 0.022643000 seconds]'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[与参考时间或前一帧的时间差: 0.022643000 秒]'
- en: 'Frame Number: 2'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '帧编号: 2'
- en: 'Frame Length: 74 bytes (592 bits)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '帧长度: 74 字节 (592 位)'
- en: 'Capture Length: 74 bytes (592 bits)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '捕获长度: 74 字节 (592 位)'
- en: '[Frame is marked: False]'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[帧被标记: 否]'
- en: '[Frame is ignored: False]'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[帧被忽略: 否]'
- en: '[Protocols in frame: eth:ip:icmp:data]'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[帧协议: eth:ip:icmp:data]'
- en: 'vEthernet II, Src: PcEngine_27:f1:48 (00:0d:b9:27:f1:48), Dst: Cisco-Li_65:2f:ac'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'v以太网 II, 源: PcEngine_27:f1:48 (00:0d:b9:27:f1:48), 目标: Cisco-Li_65:2f:ac'
- en: (00:13:10:65:2f:ac)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: (00:13:10:65:2f:ac)
- en: 'Destination: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '目的地: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
- en: 'Address: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '地址: Cisco-Li_65:2f:ac (00:13:10:65:2f:ac)'
- en: '.... ...0 .... .... .... .... = IG bit: Individual address (unicast)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '.... ...0 .... .... .... .... = IG 位: 单播地址 (单播)'
- en: '.... ..0\. .... .... .... .... = LG bit: Globally unique address (factory default)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '.... ..0\. .... .... .... .... = LG 位: 全球唯一地址 (出厂默认)'
- en: 'Source: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '源: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
- en: 'Address: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '地址: PcEngine_27:f1:48 (00:0d:b9:27:f1:48)'
- en: '.... ...0 .... .... .... .... = IG bit: Individual address (unicast)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '.... ...0 .... .... .... .... = IG 位: 单播地址 (单播)'
- en: '.... ..0\. .... .... .... .... = LG bit: Globally unique address (factory default)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '.... ..0\. .... .... .... .... = LG 位: 全球唯一地址 (出厂默认)'
- en: 'Type: IP (0x0800)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '类型: IP (0x0800)'
- en: 'wInternet Protocol Version 4, Src: 8.8.8.8 (8.8.8.8), Dst: 192.168.2.108 (192.168.2.108)
    Version: 4'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'w互联网协议版本 4, 源: 8.8.8.8 (8.8.8.8), 目标: 192.168.2.108 (192.168.2.108) 版本: 4'
- en: 'Header length: 20 bytes'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '头部长度: 20 字节'
- en: 'Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT
    (Not'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '区分服务字段: 0x00 (DSCP 0x00: 默认; ECN: 0x00: 非ECT (非'
- en: ECN-Capable Transport))
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ECN 支持的传输))
- en: '0000 00.. = Differentiated Services Codepoint: Default (0x00)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '0000 00.. = 区分服务代码点: 默认 (0x00)'
- en: '.... ..00 = Explicit Congestion Notification: Not-ECT (Not ECN-Capable Transport)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '.... ..00 = 明确拥塞通知: 非ECT (非 ECN 支持的传输)'
- en: (0x00)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: (0x00)
- en: 'Total Length: 60'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '总长度: 60'
- en: 'Identification: 0x0000 (0)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '标识符: 0x0000 (0)'
- en: 'Flags: 0x00'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '标志: 0x00'
- en: '0... .... = Reserved bit: Not set'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '0... .... = 保留位: 未设置'
- en: '.0.. .... = Don''t fragment: Not set'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '.0.. .... = 不分片: 未设置'
- en: '..0\. .... = More fragments: Not set'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '..0\. .... = 更多片段: 未设置'
- en: 'Fragment offset: 0'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '分片偏移: 0'
- en: 'Time to live: 251'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '生存时间: 251'
- en: 'Protocol: ICMP (1)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '协议: ICMP (1)'
- en: 'Header checksum: 0xec9c [correct]'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '头部校验和: 0xec9c [正确]'
- en: '[Good: True]'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[正确: 是]'
- en: '[Bad: False]'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[错误: 否]'
- en: 'Source: 8.8.8.8 (8.8.8.8)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '源: 8.8.8.8 (8.8.8.8)'
- en: 'Destination: 192.168.2.108 (192.168.2.108)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '目的地: 192.168.2.108 (192.168.2.108)'
- en: '**126** Chapter 6'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**126** 第 6 章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: xInternet Control Message Protocol
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: x互联网控制消息协议
- en: 'Type: 0 (Echo (ping) reply)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '类型: 0 (回显 (ping) 回复)'
- en: 'Code: 0'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '代码: 0'
- en: 'Checksum: 0x554a [correct]'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '校验和: 0x554a [正确]'
- en: 'Identifier (BE): 1 (0x0001)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '标识符 (BE): 1 (0x0001)'
- en: 'Identifier (LE): 256 (0x0100)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '标识符 (LE): 256 (0x0100)'
- en: 'Sequence number (BE): 17 (0x0011)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '序列号 (BE): 17 (0x0011)'
- en: 'Sequence number (LE): 4352 (0x1100)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '序列号 (LE): 4352 (0x1100)'
- en: '[Response To: 1]'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应于: 1]'
- en: '[Response Time: 22.643 ms]'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应时间: 22.643 毫秒]'
- en: Data (32 bytes)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 数据 (32 字节)
- en: 'Data: 6162636465666768696a6b6c6d6e6f707172737475767761...'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 数据：6162636465666768696a6b6c6d6e6f707172737475767761...
- en: '[Length: 32]'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[长度：32]'
- en: y0000 00 13 10 65 2f ac 00 0d b9 27 f1 48 08 00 45 00 ...e/....'.H..E.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: y0000 00 13 10 65 2f ac 00 0d b9 27 f1 48 08 00 45 00 ...e/....'.H..E.
- en: 0010 00 3c 00 00 00 00 fb 01 ec 9c 08 08 08 08 c0 a8 .<..............
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 0010 00 3c 00 00 00 00 fb 01 ec 9c 08 08 08 08 c0 a8 .<..............
- en: 0020 02 6c 00 00 55 4a 00 01 00 11 61 62 63 64 65 66 .l..UJ....abcdef
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 0020 02 6c 00 00 55 4a 00 01 00 11 61 62 63 64 65 66 .l..UJ....abcdef
- en: 0030 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 ghijklmnopqrstuv
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 0030 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 ghijklmnopqrstuv
- en: 0040 77 61 62 63 64 65 66 67 68 69 wabcdefghilll
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 0040 77 61 62 63 64 65 66 67 68 69 wabcdefghilll
- en: '*Listing 6-22: Full decode of the ICMP echo reply in Tshark*'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表6-22：Tshark中ICMP回显应答的完整解码*'
- en: 'The full decode for this packet is broken into five main sections:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据包的完整解码分为五个主要部分：
- en: • Section u displays frame information, with metadata on time, frame
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: • 部分u显示帧信息，包括时间、帧大小和其他细节。
- en: size, and other details.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 大小和其他细节。
- en: • Section v shows details found in the Ethernet header such as source,
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: • 部分v显示以太网头部的详细信息，如源地址，
- en: destination, and Media Access Control (MAC) addresses.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 目的地和媒体访问控制（MAC）地址。
- en: • Section w offers information from the IP header, like source and desti-
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: • 部分w提供来自IP头部的信息，如源地址和目的地。
- en: nation IP addresses and other IP protocol data.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 国家IP地址和其他IP协议数据。
- en: • Section x shows details on the ICMP protocol itself.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: • 部分x显示关于ICMP协议本身的详细信息。
- en: • Section y is a hexadecimal and ASCII representation of the entire frame.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: • 部分y是整个帧的十六进制和ASCII表示。
- en: Tools like Tshark are helpful because they expose every detail of a
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 像Tshark这样的工具非常有用，因为它们展示了每一个细节。
- en: protocol. For example, you may find that it is important to know an ICMP
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 协议。例如，你可能会发现知道ICMP
- en: sequence number, if that element may have been used for suspicious or
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 序列号，如果该元素可能已被用于可疑或
- en: malicious purposes.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意用途。
- en: '***Tshark Display Filters in Action***'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '***Tshark显示过滤器的实际应用***'
- en: In this section, we’ll look at some display filter examples that demonstrate
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将查看一些显示过滤器的示例，展示
- en: the power of Tshark.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark的强大功能。
- en: Imagine you want to search traffic for Simple Mail Transport Protocol
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想查找简单邮件传输协议（SMTP）的流量，
- en: (SMTP) commands. You could use the smtp.req.command display filter, as
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: (SMTP)命令。你可以使用smtp.req.command显示过滤器，正如
- en: shown in Listing 6-23\.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如列表6-23所示。
- en: $ **tshark -t ad -r smtp.pcap -R 'smtp.req.command'**
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -t ad -r smtp.pcap -R 'smtp.req.command'**
- en: '4 2014-02-17 14:09:14.659043 192.168.2.127 -> 68.87.26.155 SMTP 76 C: helo
    test'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '4 2014-02-17 14:09:14.659043 192.168.2.127 -> 68.87.26.155 SMTP 76 C: helo
    test'
- en: '10 2014-02-17 14:09:19.090208 192.168.2.127 -> 68.87.26.155 SMTP 71 C: quit'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '10 2014-02-17 14:09:19.090208 192.168.2.127 -> 68.87.26.155 SMTP 71 C: quit'
- en: '*Listing 6-23: Tshark display filter for SMTP*'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表6-23：Tshark显示过滤器用于SMTP*'
- en: Command Line Packet Analysis Tools **127**
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行数据包分析工具 **127**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: To look for user agents in HTTP GET request traffic generated by curl, you could
    use two filters together. Listing 6-24 uses a for loop to search an
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查找由curl生成的HTTP GET请求中的用户代理，可以将两个过滤器一起使用。列表6-24使用for循环搜索
- en: entire directory. The echo statement shows the trace in question as Tshark
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 整个目录。echo语句显示了Tshark追踪的相关信息。
- en: searches it.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索它。
- en: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/ -type
    f`; do echo $i;** **tshark -t ad -r $i -R 'http.user_agent contains "curl" and
    http.request.method == GET'; done**
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: $ **for i in `find /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/ -type
    f`; do echo $i;** **tshark -t ad -r $i -R 'http.user_agent contains "curl" and
    http.request.method == GET'; done**
- en: /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
- en: 143841 2014-02-17 14:26:43.875022 192.168.2.127 -> 217.160.51.31 HTTP 223 GET
    / HTTP/1.1
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 143841 2014-02-17 14:26:43.875022 192.168.2.127 -> 217.160.51.31 HTTP 223 GET
    / HTTP/1.1
- en: '*Listing 6-24: Looping through data with Tshark to find HTTP traffic*'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表6-24：使用Tshark通过循环查找HTTP流量*'
- en: Tshark display filters also make it easy to search for traffic to or from
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Tshark显示过滤器还可以轻松搜索来自或到达
- en: a range of IP addresses. For example, Listing 6-25 looks for traffic with IP
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 一个IP地址范围。例如，列表6-25查找IP范围内的流量。
- en: addresses between 192.168.2.100 and 192.168.2.110 inclusive that is not TCP
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 地址范围在192.168.2.100到192.168.2.110之间，包括，但不包括TCP
- en: or UDP.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 或UDP。
- en: $ **tshark -t ad -r /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
    -R**
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tshark -t ad -r /nsm/sensor_data/sademo-eth1/dailylogs/2013-02-17/snort.log.1361107364
    -R**
- en: '**''ip.dst >= 192.168.2.100 and ip.dst <= 192.168.2.110 and not tcp and not
    udp''**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**''ip.dst >= 192.168.2.100 and ip.dst <= 192.168.2.110 and not tcp and not
    udp''**'
- en: 10327 2014-02-17 13:33:01.775757 8.8.8.8 -> 192.168.2.108
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 10327 2014-02-17 13:33:01.775757 8.8.8.8 -> 192.168.2.108
- en: ICMP 74 Echo (ping) reply id=0x0001, seq=16/4096, ttl=251
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP 74 Echo（ping）回复 id=0x0001，seq=16/4096，ttl=251
- en: 12519 2014-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 12519 2014-02-17 13:37:45.945105 8.8.8.8 -> 192.168.2.108
- en: ICMP 74 Echo (ping) reply id=0x0001, seq=17/4352, ttl=251
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP 74 Echo（ping）回复 id=0x0001，seq=17/4352，ttl=251
- en: '*Listing 6-25: Searching for a range of IP addresses with a Tshark display
    filter*'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单6-25：使用Tshark显示过滤器搜索IP地址范围*'
- en: For more detail, add the -V and/or -x switch.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多细节，可以添加`-V`和/或`-x`开关。
- en: As you can see, I like to use Tshark to review saved traces for specific
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我喜欢使用Tshark来查看保存的跟踪数据，查找特定元素。
- en: elements. It would be difficult to create the equivalent BPF syntax for many
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 元素。对于许多显示过滤器，创建等效的BPF语法是困难的。
- en: of these display filters. While technically possible, the BPF syntax can be
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这些显示过滤器的语法。虽然技术上是可行的，但BPF语法会
- en: horribly complex.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 非常复杂。
- en: '**running argus and the ra client**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行argus和ra客户端**'
- en: Our final command line tool is Argus ( *http://www.qosient.com/argus/*), a
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终命令行工具是Argus（*http://www.qosient.com/argus/*），这是一个
- en: session data generation and analysis suite, and its client for reading data,
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 会话数据生成和分析套件，以及用于读取数据的客户端，
- en: Ra. The Argus server is running by default on SO, but analysts must use
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Ra。Argus服务器默认在SO上运行，但分析师必须使用
- en: the Argus client tools to access the data stored in the */nsm/sensor_data/*
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Argus客户端工具访问存储在*/nsm/sensor_data/*中的数据
- en: '*<sensorname>/argus* directory.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '*<sensorname>/argus*目录。'
- en: '**N o T e**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**注**'
- en: '*Carter Bullard first started writing Argus at Carnegie Mellon’s Software Engineering*
    *Institute (SEI) in 1993, and released the code publicly as Argus 1.5 in early
    1996\.*'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*Carter Bullard于1993年开始在卡内基梅隆大学软件工程研究所（SEI）编写Argus，并于1996年初公开发布了Argus 1.5版本。*'
- en: '*Today, the code exists as a server component and multiple client components,
    licensed* *under the GNU General Public License version 3\.*'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '*今天，这个代码作为一个服务器组件和多个客户端组件存在，采用GNU通用公共许可证第3版授权。*'
- en: You can validate the status of the Argus server by running the nsm_sensor_
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`nsm_sensor_`命令来验证Argus服务器的状态。
- en: ps-status script with the --only-argus switch, as shown in Listing 6-26\.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--only-argus`开关的ps-status脚本，如清单6-26所示。
- en: '**128** Chapter 6'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**128** 第六章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: $ **sudo nsm_sensor_ps-status --only-argus**
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo nsm_sensor_ps-status --only-argus**
- en: 'Status: sademo-eth1'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：sademo-eth1
- en: '* argus [ OK ]'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '* argus [ OK ]'
- en: '*Listing 6-26: Checking Argus status*'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单6-26：检查Argus状态*'
- en: '***Stopping and Starting Argus***'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '***停止和启动Argus***'
- en: If Argus is not running, you can restart it. Let’s stop it, and then restart
    it,
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Argus未运行，你可以重新启动它。让我们先停止它，然后重新启动。
- en: as shown in Listing 6-27\.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如清单6-27所示。
- en: $ **sudo nsm_sensor_ps-stop --only-argus**
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo nsm_sensor_ps-stop --only-argus**
- en: 'Stopping: sademo-eth1'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 停止中：sademo-eth1
- en: '* stopping: argus [ OK ]'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '* 停止中：argus [ OK ]'
- en: $ **sudo nsm_sensor_ps-start --only-argus**
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo nsm_sensor_ps-start --only-argus**
- en: 'Starting: sademo-eth1'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 启动中：sademo-eth1
- en: '* starting: argus [ OK ]'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '* 启动中：argus [ OK ]'
- en: '* disk space currently at 21%'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '* 当前磁盘空间使用率为21%'
- en: '*Listing 6-27: Stopping and starting Argus*'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单6-27：停止和启动Argus*'
- en: The Argus data stored in the */nsm/sensor_data/<sensorname>/argus* direc-
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在*/nsm/sensor_data/<sensorname>/argus*目录中的Argus数据
- en: tory appears as individual files, one for each day, named *YYYY-MM-DD.log*.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件以单独的文件形式显示，每个文件代表一天，命名为*YYYY-MM-DD.log*。
- en: Stopping and starting the Argus server will not destroy the previous file,
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 停止并重新启动Argus服务器不会销毁先前的文件，
- en: only append to it.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在此基础上追加数据。
- en: '***The Argus File Format***'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '***Argus文件格式***'
- en: The files in the Argus directory are binary files readable only by the Argus
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Argus目录中的文件是仅能由Argus客户端工具读取的二进制文件。
- en: client tools. The binary format keeps the files compact. In comparison, a
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端工具。二进制格式保持文件的紧凑性。相比之下，文本格式会占用更多空间。
- en: sample sensor with 48 days of NSM data shows the following directory usage
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 示例传感器，具有48天的NSM数据，显示以下目录使用情况
- en: for full content and Argus session data. Listing 6-28 has the details.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 用于完整内容和Argus会话数据。详细信息请参见清单6-28。
- en: $ **sudo du -csh /nsm/sensor_data/soe-eth0/argus/**
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo du -csh /nsm/sensor_data/soe-eth0/argus/**
- en: 1.8G /nsm/sensor_data/soe-eth0/argus/
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 1.8G /nsm/sensor_data/soe-eth0/argus/
- en: 1.8G total
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 1.8G 总计
- en: $ **sudo du -csh /nsm/sensor_data/soe-eth0/dailylogs/**
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: $ **sudo du -csh /nsm/sensor_data/soe-eth0/dailylogs/**
- en: 83G /nsm/sensor_data/soe-eth0/dailylogs/
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 83G /nsm/sensor_data/soe-eth0/dailylogs/
- en: 83G total
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 83G 总计
- en: '*Listing 6-28: Sample Argus and pcap storage*'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单6-28：示例Argus和pcap存储*'
- en: As you can see, 48 days of full content data in pcap format on this sen-
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在此传感器上有48天的完整内容数据，格式为pcap。
- en: sor occupies 83GB, but Argus session data for the same period occupies
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器占用了83GB空间，但相同时间段内的Argus会话数据只占用
- en: only 1.8GB, or 1/46 of the space. This ratio is likely to be quite different
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 1.8GB，或者是总空间的 1/46。这个比率可能会有很大不同。
- en: depending on the nature of each network, but you can see the space advan-
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于每个网络的性质，但你可以看到与会话数据相比，空间的优势。
- en: tage associated with session data compared to full content data.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 与会话数据相比，完整内容数据的空间占用较少。
- en: Command Line Packet Analysis Tools **129**
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行数据包分析工具 **129**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: This comparison demonstrates the power of session data. If you just
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这个比较展示了会话数据的强大功能。如果你只是
- en: need to know the IP address, protocol, and/or ports associated with a con-
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 需要知道与连接相关的 IP 地址、协议和/或端口。
- en: nection, you can acquire all of that information from session data. You
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连接，你可以通过会话数据获取所有这些信息。
- en: don’t need to capture or search through piles of full content data to get it.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要捕获或搜索大量完整内容数据就能获取这些信息。
- en: '***Examining Argus Data***'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '***检查 Argus 数据***'
- en: Analysts who enjoy parsing data using command line tools are likely to find
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢使用命令行工具解析数据的分析师可能会发现
- en: Argus data particularly useful. I’ll show a few ways to examine this data for
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: Argus 数据特别有用。我将展示几种检查这些数据的方法。
- en: interesting results. You might take this approach if you want to look for spe-
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的结果。如果你想查找特定信息或执行脚本搜索，可能会使用这种方法来查找异常活动。
- en: cific information or script searches of session data for anomalous activity.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 查找特定信息或执行会话数据的脚本搜索来查找异常活动。
- en: First, we’ll compare reading session data using two Argus clients, Ra
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将比较使用两个 Argus 客户端 Ra 来读取会话数据。
- en: and Racluster. Listing 6-29 shows an example of using Ra to look for session
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Racluster。列出 6-29 显示了一个使用 Ra 查找会话的示例。
- en: records with destination port 21, which is used by many FTP servers.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 包含目标端口 21 的记录，这个端口被许多 FTP 服务器使用。
- en: $ **ra -n -r 2014-02-10.log - tcp and dst port 21 -s stime saddr sport daddr
    dport sbytes dbytes** StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes
    u 11:10:53.939711 192.168.2.127.60102 202.12.29.205.21 140 74
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: $ **ra -n -r 2014-02-10.log - tcp and dst port 21 -s stime saddr sport daddr
    dport sbytes dbytes** StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes
    u 11:10:53.939711 192.168.2.127.60102 202.12.29.205.21 140 74
- en: v 11:11:04.434637 192.168.2.127.60102 202.12.29.205.21 769 1633
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: v 11:11:04.434637 192.168.2.127.60102 202.12.29.205.21 769 1633
- en: w 11:11:10.003721 192.168.2.127.60102 202.12.29.205.21 204 301
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: w 11:11:10.003721 192.168.2.127.60102 202.12.29.205.21 204 301
- en: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
- en: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
- en: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
- en: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
- en: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
- en: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 840 979
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 840 979
- en: 11:12:23.449643 192.168.2.127.41657 193.0.6.140.21 348 301
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:23.449643 192.168.2.127.41657 193.0.6.140.21 348 301
- en: '*Listing 6-29: Argus Ra output for port 21*'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出 6-29：端口 21 的 Argus Ra 输出*'
- en: The -n switch tells Ra to not resolve port numbers to names. The BPF
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: -n 开关告诉 Ra 不要将端口号解析为名称。BPF
- en: syntax filter tcp and dst port 21 specifies a protocol and port of interest.
    The
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 语法过滤器 tcp 和 dst port 21 指定了一个感兴趣的协议和端口。
- en: -s switch tells Ra which fields to display. (The Ra man page lists all output
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: -s 开关告诉 Ra 显示哪些字段。 （Ra 手册页面列出了所有输出
- en: fields controlled by the -s switch.) The SrcBytes and DstBytes columns in
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 由 -s 开关控制的字段。SrcBytes 和 DstBytes 列中
- en: the results count transaction data bytes, which include packet headers. (To
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 结果计数事务数据字节，其中包括数据包头。 （要
- en: get application layer bytes, use sappbytes and dappbytes instead of sbytes and
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取应用层字节，使用 sappbytes 和 dappbytes 替代 sbytes 和
- en: dbytes on the command line.)
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行中的 dbytes。
- en: Notice that there are several session records for certain conversations.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到某些会话有多个记录。
- en: The Argus server wrote these records as it saw the connection stay active.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: Argus 服务器在看到连接保持活动时写入了这些记录。
- en: That’s fine for a short result like the one in Listing 6-29, but not for con-
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像列出 6-29 中这样简短的结果没问题，但对于连接时间较长的情况就不适用了。
- en: nections that stay open longer. To collapse these records, use Racluster, as
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 对于保持连接较长时间的会话，使用 Racluster 来合并这些记录，如
- en: shown in Listing 6-30\.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如在列出 6-30 中所示。
- en: $ **racluster -n -r 2013-02-10.log - tcp and dst port 21 -s stime saddr sport
    daddr dport sbytes** **dbytes**
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: $ **racluster -n -r 2013-02-10.log - tcp and dst port 21 -s stime saddr sport
    daddr dport sbytes** **dbytes**
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes u 11:10:53.939711 192.168.2.127.60102
    202.12.29.205.21 1113 2008
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes u 11:10:53.939711 192.168.2.127.60102
    202.12.29.205.21 1113 2008
- en: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 11:11:25.561995 192.168.2.127.50732 192.149.252.20.21 917 1195
- en: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 11:11:25.806418 192.168.2.127.50734 192.149.252.20.21 979 1198
- en: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:07.851453 192.168.2.127.48178 200.3.14.11.21 939 1346
- en: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:09.236747 192.168.2.127.48180 200.3.14.11.21 935 1345
- en: '**130** Chapter 6'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 130 章**'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:16.019452 192.168.2.127.41655 193.0.6.140.21 1114 1279
- en: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 1188 1280
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 11:12:17.357230 192.168.2.127.41657 193.0.6.140.21 1188 1280
- en: '*Listing 6-30: Argus Racluster output for port 21*'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-30：端口 21 的 Argus Racluster 输出*'
- en: Notice that the first three records (u, v, and w) from the Ra record in
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Ra 记录中的前三个记录（u、v 和 w）在
- en: Listing 6-29 have been collapsed into one record u in Listing 6-30, though
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-29 中的记录已经合并为示例 6-30 中的一个记录 u，尽管
- en: when you add the byte counts from the same sessions in the Ra output,
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Ra 输出中添加来自相同会话的字节计数时，
- en: you’ll find that they match the total byte count in the Racluster output. For
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现它们与 Racluster 输出中的总字节计数匹配。对于
- en: example, the SrcBytes count for the session to 202.12.29.205 in the Ra out-
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Ra 输出中到 202.12.29.205 会话的 SrcBytes 计数
- en: put is 140 + 769 + 204 = 1113, which is the same value as the SrcBytes field
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 140 + 769 + 204 = 1113，这与 SrcBytes 字段中的值相同
- en: for the session to 202.12.29.205 in the Racluster output.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 对于会话到 202.12.29.205 的 Racluster 输出。
- en: I often use Argus with Racluster to quickly search a large collection
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常使用 Argus 与 Racluster 快速搜索大量数据
- en: of session data via the command line, especially for unexpected entries.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行会话数据，特别是用于查找意外条目。
- en: Rather than searching for specific data, I tell Argus what to omit, and then
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 与其搜索特定数据，我告诉 Argus 忽略哪些内容，然后
- en: I review what’s left.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 我查看剩下的内容。
- en: As an example, we’ll walk through building a fairly complicated Racluster
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将通过构建一个相当复杂的 Racluster 来演示
- en: search. It will tell Racluster to search three Argus archives for UDP traffic,
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索。这将告诉 Racluster 搜索三个 Argus 存档中的 UDP 流量，
- en: but to exclude ports 53 (DNS), 123 (Network Time Protocol, or NTP), or
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 但排除端口 53（DNS）、123（网络时间协议，或 NTP）或
- en: host 192.168.2.120\.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 主机 192.168.2.120\。
- en: This will require the use of the -m saddr daddr switch, which instructs Ra
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要使用 -m saddr daddr 开关，它告诉 Ra
- en: to group records by source and destination IP address, and the -s switch,
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 -s 开关按源和目标 IP 地址分组记录，
- en: which specifies the desired output fields. Two additional elements add the
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 它指定了所需的输出字段。两个额外的元素添加了
- en: year, month, and day to the timestamps in this report. To add these, first
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 向报告中的时间戳添加年、月和日。要添加这些内容，首先
- en: create the */tmp/ra.conf* file, as shown in Listing 6-31, with a variable telling
    Ra how to display the time. (To learn more about this format, see the manual page
    for the date command.)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 */tmp/ra.conf* 文件，如示例 6-31 所示，文件中包含一个变量，告诉 Ra 如何显示时间。 （要了解更多关于此格式的信息，请参阅
    `date` 命令的手册页。）
- en: cat /tmp/ra.conf
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: cat /tmp/ra.conf
- en: RA_TIME_FORMAT="%Y-%m-%d %T"
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: RA_TIME_FORMAT="%Y-%m-%d %T"
- en: '*Listing 6-31: Contents of the* /tmp/ra .conf *file*'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-31：* /tmp/ra.conf *文件的内容*'
- en: Next, add the stime element of the -s switch that tells Ra to provide
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加 -s 开关中的 stime 元素，告诉 Ra 提供
- en: enough room in the print buffer to show the entire date and timestamp.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 打印缓冲区足够大，可以显示整个日期和时间戳。
- en: Listing 6-32 assembles all these components and shows the output.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-32 汇总了所有这些组件并显示了输出。
- en: $ **racluster -F /tmp/ra.conf -n -r 2014-02-10.log 2013-02-16.log 2014-02-17.log
    - udp and not \** **(port 53 or port 123 or host 192.168.2.120\) -m saddr daddr
    -s stime:20 saddr sport daddr dport** **sbytes dbytes**
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: $ **racluster -F /tmp/ra.conf -n -r 2014-02-10.log 2013-02-16.log 2014-02-17.log
    - udp and not \** **(port 53 or port 123 or host 192.168.2.120\) -m saddr daddr
    -s stime:20 saddr sport daddr dport** **sbytes dbytes**
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes 2013-02-17 13:26:49
    192.168.2.114.16403 17.173.254.222.0u 540 540
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes 2013-02-17 13:26:49
    192.168.2.114.16403 17.173.254.222.0u 540 540
- en: 2013-02-17 13:26:49 192.168.2.114.16403 17.173.254.223.16386 240 240
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 2013-02-17 13:26:49 192.168.2.114.16403 17.173.254.223.16386 240 240
- en: 2013-02-17 13:26:49 192.168.2.114.16403 96.231.180.71.0v 660 0
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 2013-02-17 13:26:49 192.168.2.114.16403 96.231.180.71.0v 660 0
- en: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.222.0w 6000 6000
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.222.0w 6000 6000
- en: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.223.16386 2820 2820
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 2013-02-16 20:35:09 192.168.2.115.16403 17.173.254.223.16386 2820 2820
- en: 2013-02-16 20:35:09 192.168.2.115.16403 96.231.180.71.0x 7740 0
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-10 11:28:29 192.168.2.116.58444 23.23.189.8.0y 534 918
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-10 11:28:29 192.168.2.116.58444 23.23.189.44.33434 382 0
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 19:12:09 192.168.2.117.63517 157.56.106.184.3544 2472 3624
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **131**
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 19:12:09 192.168.2.117.63517 157.56.106.185.3544 206 302
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.0z 157.56.149.60.3544 33372 48169
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.0{ 157.56.149.61.3544 515 755
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-32: Using Racluster to look for UDP traffic while ignoring port
    53, port 123, and host 192.168.2.120*'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 6-32, you see entries where the destination port is 0 at u, v,
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: w, x, and y, and where the source port is 0 at z and {. When the destina-
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: tion port shows 0, Racluster has aggregated multiple destination ports into
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: one record. For example, Listing 6-33 shows a similar Racluster search that
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: looks at Argus records involving 192.168.2.117 as the source IP address and
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 157.56.149.0/24 (meaning any fourth octet is acceptable) as the destination
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: net block.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: $ **racluster -F /tmp/ra.conf -n -r 2014-02-10.log 2013-02-16.log 2014-02-17.log
    - src host** **192.168.2.117 and dst net 157.56.149.0/24 and udp and not \(port
    53 or port 123 or host** **192.168.2.120\) -s stime:20 saddr sport daddr dport
    sbytes dbytes**
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: StartTime SrcAddr Sport DstAddr Dport SrcBytes DstBytes 2013-02-16 13:37:19
    192.168.2.117.64412 157.56.149.60.3544u 20909 30653
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-16 13:37:19 192.168.2.117.64412 157.56.149.61.3544w 412 604
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 14:27:57 192.168.2.117.57672 157.56.149.60.3544v 12463 17516
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 2013-02-17 14:27:57 192.168.2.117.57672 157.56.149.61.3544x 103 151
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-33: Using Racluster with 192.168.2.117 as the source IP address
    and 157.56.149.0/24 as the* *destination net block*'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that this output represents four distinct connections: two to'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: 157.56.149.60 at u and v, and two to 157.56.149.61 at w and x. When you
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: aggregate results using the source IP address, as in Listing 6-32, you lose
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: this granularity.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned earlier that I like to use Argus and its Ra or Racluster client
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: to omit certain traffic, and then review what’s left for anomalies. Listing
    6-32
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: contains some data that I could review for suspicious or malicious entries.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Doing this sort of review requires some ability to recognize net blocks and
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: protocols, but it can yield interesting results.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: Taking a net block approach means determining the source or destina-
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: tion of traffic. Tools like the Robtex website ( *http://www.robtex.com/*) can
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: help identify network owners. For example, traffic in Listing 6-32 to the
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 17.0.0.0/8 traffic is likely related to Apple protocols, because Apple owns
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: that entire Class A net block. Doing similar analysis shows Microsoft owns
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: the 157.56.0.0/14 net block, Amazon owns 23.20.0.0/14, and Verizon owns
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: 96.224.0.0/11\.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: Taking a protocol approach requires looking at the protocols involved,
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: often by deciphering which applications use certain TCP or UDP ports.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: Online resources like the SANS Internet Storm Center (ISC) Port Report
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: ( *https://isc.sans.edu/portreport.html*) provide clues concerning the functions
    of various TCP and UDP ports. For example, Apple uses port 3544 UDP for
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: its push notification service, and port 16386 UDP for its FaceTime service.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Many systems run UDP-based Traceroute using port 33434\. Based on this
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '**132** Chapter 6'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: knowledge, I can determine that the applications depicted in Listing 6-32
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: are likely all benign, and that they’re associated with Apple traffic and net-
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: work path discovery using Traceroute. Of course, in order to firmly identify
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: these sessions, I would need access to full content data or logs from other
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: sources. Still, this approach provides a way to identify interesting activity
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: with a minimum amount of effort.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter began by explaining the three types of tools available in SO:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: software for data collection, presentation, and delivery. Within the presen-
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: tation category, we find tools for packet analysis, and applications that work
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: best as NSM consoles. Some of the packet analysis tools rely on command
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: line interfaces, and others use graphical interfaces. This chapter discussed
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: several packet analysis data presentation tools that are used from the com-
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: 'mand line: Tcpdump, Tshark, and the Argus Ra client. You also saw how to'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: use Dumpcap in concert with Tshark.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chapter 7, we’ll look at the graphical interface packet analysis tools:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, Xplico, and NetworkMiner. You’ll see that GUI access to packets
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: offers several distinct advantages, including the availability of more forms
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: of NSM data.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **133**
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '**7**'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '**g r a P h i c a l Pa c k e T**'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '**a N a ly S i S T o o l S**'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 introduced the categories of
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: 'NSM tools: data presentation, data collec-'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: tion, and data delivery. As explained in that
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: chapter, within the data presentation category,
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: some tools are more suited to packet analysis, and
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: others are intended to function as NSM consoles.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 focused on data presentation tools that
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: offer access to packets on the command line.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on packet analysis tools that give analysts
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: GUI access to traffic. Tools in this family include Wireshark, Xplico, and
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner (NM). All of these applications ship with SO and are avail-
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: able on demand from the distribution. We’ll start with the most popular
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: 'of these types of tools: Wireshark.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 72](index-170_1.png)'
  id: totrans-529
  prefs: []
  type: TYPE_IMG
- en: '**using wireshark**'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is the main tool in the Wireshark suite, which also includes
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: Tshark and Dumpcap. This section highlights the Wireshark features I use
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: most regularly when conducting NSM operations. To learn more about
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, refer to one of the excellent books about it, such as Laura
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解Wireshark，请参考一些优秀的相关书籍，如Laura
- en: Chappell’s work at *http://www.wiresharkbook.com/*.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: Chappell的作品在*http://www.wiresharkbook.com/*上。
- en: '***Running Wireshark***'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '***运行Wireshark***'
- en: Like Tcpdump and Tshark, Wireshark operates on the full content data
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 像Tcpdump和Tshark一样，Wireshark操作在完整内容数据上
- en: stored in the / *nsm/sensor_data/<sensorname>/dailylogs* directory. You can
    launch Wireshark either directly or from other tools (such as Sguil, as
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在*/nsm/sensor_data/<sensorname>/dailylogs*目录下。你可以直接或通过其他工具（例如Sguil）启动Wireshark，
- en: explained in Chapter 8).
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 如第8章所述。
- en: '**N o T e**'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Wireshark is not necessarily the best tool for processing large collections
    of full content* *data, and I typically don’t suggest you begin your analysis
    of network traffic by loading a* *gigantic trace into Wireshark. Instead, identify
    traffic of interest using another means,* *such as by reviewing session data,
    and then apply Wireshark to just that traffic.*'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '*Wireshark不一定是处理大量完整内容数据的最佳工具*，*我通常不建议你在分析网络流量时直接加载一个庞大的跟踪文件到Wireshark中。相反，使用其他方法识别感兴趣的流量*，*例如通过查看会话数据，然后仅将Wireshark应用于这些流量。*'
- en: Wireshark is an on-demand tool in SO and will run only if you launch
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark是SO中的按需工具，只有在你启动它时才会运行
- en: it manually by entering **wireshark** in a terminal window, or by choosing
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端窗口中手动输入**wireshark**，或通过选择
- en: '**Security Onion**4**Wireshark** from the GUI. Wireshark displays an opening'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全洋葱**4**Wireshark** 从图形界面启动Wireshark。Wireshark显示一个启动画面'
- en: screen, as shown in Figure 7-1\.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 如图7-1所示的屏幕。
- en: '*Figure 7-1: Default Wireshark screen*'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：默认的Wireshark屏幕*'
- en: '**136** Chapter 7'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '**136** 第7章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '![Image 73](index-171_1.jpg)'
  id: totrans-549
  prefs: []
  type: TYPE_IMG
  zh: '![Image 73](index-171_1.jpg)'
- en: '***Viewing a Packet Capture in Wireshark***'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '***在Wireshark中查看数据包捕获***'
- en: 'To open a packet capture in pcap format, follow these steps:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个pcap格式的数据包捕获，请按照以下步骤操作：
- en: 1\. Choose **File**4**Open** and navigate to the */nsm/sensor_data/<sensorname>/*
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 选择**文件**4**打开**，并导航到*/nsm/sensor_data/<sensorname>/*
- en: '*dailylogs* directory.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '*dailylogs*目录。'
- en: 2\. Choose one of the *YYYY-MM-DD* directories, and then select a trace of
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 选择一个*YYYY-MM-DD*格式的目录，然后选择一个跟踪文件
- en: interest. Wireshark presents some basic statistics about that trace. For
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark呈现关于该跟踪的一些基本统计信息。例如
- en: example, in Figure 7-2, the sample trace is 11.9MB (shown in the Size
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如图7-2所示，示例跟踪文件为11.9MB（显示在大小字段中）。
- en: column) with 19,866 packets (shown in the Packets field). As you can
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: （列中）包含19,866个数据包（显示在数据包字段中）。如你所见
- en: see in the First Packet field, the trace begins at 2013-02-10 13:09:28 and
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如在第一包字段中看到的，跟踪从2013-02-10 13:09:28开始
- en: lasts 8 minutes and 16 seconds (shown in the Elapsed Time field).
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间为8分钟16秒（显示在经过时间字段中）。
- en: 3\. Uncheck the Enable MAC Name Resolution and Enable Transport Name
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 取消勾选启用MAC名称解析和启用传输名称
- en: Resolution options so that you’ll see numbers rather than names for
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 解析选项，这样你将看到数字而非名称
- en: these fields, and then click **Open**.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 填写这些字段，然后点击**打开**。
- en: '*Figure 7-2: Opening a trace in Wireshark*'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-2：在Wireshark中打开一个跟踪文件*'
- en: '***Modifying the Default Wireshark Layout***'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '***修改默认的Wireshark布局***'
- en: After opening a trace, the default Wireshark layout displays the fields shown
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 打开跟踪后，Wireshark的默认布局会显示如图所示的字段。
- en: in Figure 7-3\. These include information such as the packet number, a time-
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 如图7-3所示。这些包括数据包编号、时间戳等信息。
- en: stamp measured in time since the first packet, source and destination IP
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 显示时间戳，显示自第一个数据包以来的时间，源和目标IP
- en: addresses, the protocol, and messages about the packet (in the Info field).
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 地址、协议以及有关数据包的信息（在信息字段中）。
- en: If you would prefer a different layout, you can change the default either
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢不同的布局，可以更改默认设置，
- en: through the GUI or by editing the preferences file.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 通过图形界面（GUI）或编辑偏好设置文件。
- en: Graphical Packet Analysis Tools **137**
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 图形化数据包分析工具**137**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '![Image 74](index-172_1.jpg)'
  id: totrans-573
  prefs: []
  type: TYPE_IMG
  zh: '![Image 74](index-172_1.jpg)'
- en: '*Figure 7-3: Default columns in Wireshark*'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-3：Wireshark中的默认列*'
- en: '**Modifying the Layout Using the GUI**'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用图形界面修改布局**'
- en: I prefer a Wireshark layout that shows absolute date and time, along with
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢一种Wireshark布局，它显示绝对的日期和时间，同时
- en: the source and destination port numbers. We’ll set up that layout as an
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 源端口和目标端口号。我们将把该布局设置为
- en: example of how to use the Wireshark GUI to modify displayed columns to
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何使用Wireshark图形界面修改显示列的示例，以便
- en: better show relevant packet fields.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地显示相关数据包字段。
- en: 'To change the default layout settings, follow these steps:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改默认布局设置，请按照以下步骤操作：
- en: 1\. Select **Edit**4**Preferences**4**Columns**.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 选择**编辑**4**首选项**4**列**。
- en: 2\. Highlight the Time row.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 高亮显示时间行。
- en: 3\. Change the Field Type field to **Absolute Date and Time**.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 将字段类型更改为**绝对日期和时间**。
- en: 4\. Change the Source Address field to **Src Addr (unresolved)** and the
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 将源地址字段更改为**源地址（未解析）**，目标地址字段更改为
- en: Destination Address field to **Dest Addr (unresolved)**.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 目标地址字段更改为**目标地址（未解析）**。
- en: 5\. Click **Add**, and then select **Source Port (unresolved)**.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 点击**添加**，然后选择**源端口（未解析）**。
- en: 6\. Double-click the New Column field and replace the Title entry with
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 双击新列字段，将标题条目替换为
- en: '**SrcPort**.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '**源端口**。'
- en: 7\. Click **Add** again, and add **Dest Port (unresolved)**.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 再次点击**添加**，并添加**目标端口（未解析）**。
- en: 8\. Double-click the New Column field and replace the Title entry with
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 双击新列字段，将标题条目替换为
- en: '**DstPort**.'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标端口**。'
- en: 9\. To hide the Length field that shows the packet length in bytes, high-
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 要隐藏显示数据包长度（字节）的长度字段，请高亮显示该字段，
- en: light that field and click **Remove**.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮该字段并点击**删除**。
- en: '**138** Chapter 7'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '**138** 第7章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '![Image 75](index-173_1.jpg)'
  id: totrans-596
  prefs: []
  type: TYPE_IMG
  zh: '![图 75](index-173_1.jpg)'
- en: 10\. Click and drag each of the new columns to the locations shown in
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 点击并拖动每个新列到显示的位置
- en: Figure 7-4\.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-4\。
- en: '*Figure 7-4: Customizing the Wireshark layout*'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-4：自定义 Wireshark 布局*'
- en: 11\. Click **Apply**, and then click **OK**.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 点击**应用**，然后点击**确定**。
- en: '**Modifying the Preferences File**'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '**修改首选项文件**'
- en: If you prefer a more direct approach to modifying the screen layout, edit
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于直接修改屏幕布局，可以编辑
- en: the *.wireshark/preferences* file. First, you need to create this file by choosing
    **Edit**4**Preferences**4**Columns**4**Apply**4**OK**, with or without making
    changes. Then you should find a *.wireshark/preferences* file in your home directory.
    This file controls Wireshark’s column layout and is shown in Listing 7-1\.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '*.wireshark/preferences* 文件。首先，你需要通过选择**编辑**4**首选项**4**列**4**应用**4**确定**来创建此文件，无论是否做出更改。然后你应该能在你的主目录中找到一个
    *.wireshark/preferences* 文件。此文件控制 Wireshark 的列布局，见清单 7-1\。'
- en: Packet list column format.
  id: totrans-604
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包列表列格式。
- en: Each pair of strings consists of a column title and its format.
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每对字符串由列标题和格式组成。
- en: 'column.format:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: column.format：
- en: '"No.", "%m",'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '"编号", "%m",'
- en: '"Time", "%t",'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '"时间", "%t",'
- en: '"Source", "%s",'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '"源", "%s",'
- en: '"Destination", "%d",'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '"目标", "%d",'
- en: '"Protocol", "%p",'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '"协议", "%p",'
- en: '"Length", "%L",'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '"长度", "%L",'
- en: '"Info", "%i"'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '"信息", "%i"'
- en: '*Listing 7-1: Contents of the* .wireshark/preferences *file*'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-1：*.wireshark/preferences* 文件内容*'
- en: Graphical Packet Analysis Tools **139**
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 图形数据包分析工具 **139**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '![Image 76](index-174_1.jpg)'
  id: totrans-617
  prefs: []
  type: TYPE_IMG
  zh: '![图 76](index-174_1.jpg)'
- en: Close Wireshark and edit the fields in *.wireshark/preferences* so that they
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭 Wireshark 并编辑 *.wireshark/preferences* 文件，以便它们
- en: appear as shown in Listing 7-2 (with changes shown in bold). Also, delete
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 如清单 7-2 所示（以粗体显示的为更改部分）。另外，删除
- en: the Length field entirely.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 完全隐藏长度字段。
- en: Packet list column format.
  id: totrans-621
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包列表列格式。
- en: Each pair of strings consists of a column title and its format.
  id: totrans-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每对字符串由列标题和格式组成。
- en: 'column.format:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: column.format：
- en: '"No.", "%m",'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '"编号", "%m",'
- en: '"Time", "%**Y**t",'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '"时间", "%**Y**t",'
- en: '"Source", "%**u**s",'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '"源", "%**u**s",'
- en: '**"SrcPort", "%uS",**'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '**"源端口", "%uS",**'
- en: '"Destination", "%**u**d",'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '"目标", "%**u**d",'
- en: '**"DstPort", "%uD",**'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '**"目标端口", "%uD",**'
- en: '"Protocol", "%p",'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '"协议", "%p",'
- en: '"Info", "%i"'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '"信息", "%i"'
- en: '*Listing 7-2: Edited contents of the* .wireshark/preferences *file*'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-2：编辑后的*.wireshark/preferences* 文件内容*'
- en: When you restart Wireshark and open a trace, the GUI will now display
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 当你重新启动 Wireshark 并打开一个追踪时，GUI 将显示
- en: columns as shown in Figure 7-5\. This is a trace from a demo SO stand-
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 列如图 7-5 所示。这是一个来自演示 SO stand- 的追踪，
- en: alone system with the display filter arp or ip.addr==192.168.2.127, which tells
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显示过滤器 arp 或 ip.addr==192.168.2.127 来独立运行系统，指示
- en: Wireshark to show Address Resolution Protocol (ARP) frames, or any traf-
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 显示地址解析协议（ARP）帧，或任何涉及 192.168.2.127 的流量\。
- en: fic involving 192.168.2.127\.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 流量涉及 192.168.2.127\。
- en: '*Figure 7-5: Wireshark showing new column preferences and display filter*'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-5：Wireshark 显示新的列首选项和显示过滤器*'
- en: '***Some Useful Wireshark Features***'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '***一些有用的 Wireshark 特性***'
- en: Now that you have Wireshark up and running, we’ll discuss a few of my
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Wireshark 已经启动并运行，我们将讨论一些我个人
- en: favorite Wireshark features, including the ability to see low-level proto-
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的 Wireshark 特性，包括查看低级协议的能力，
- en: col features in detail. Although Tshark offers this feature, Wireshark’s
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 列特性详细介绍。虽然 Tshark 提供了这个功能，但 Wireshark 的
- en: '**140** Chapter 7'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '**140** 第7章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '![Image 77](index-175_1.jpg)'
  id: totrans-645
  prefs: []
  type: TYPE_IMG
- en: graphical nature makes it easier to jump from one element to another.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: I also enjoy adding and removing display filters in Wireshark. Again,
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: you can do this with Tshark, but each new filter requires running Tshark
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: again. In Wireshark, all it takes is applying the new filter in the GUI. Also,
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark exposes features for controlling how data is decoded, following
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: streams, and exporting object functions; these help analysts manipulate
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: traffic in ways not offered in Tshark.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewing Lower-Level Protocol Features in Detail**'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark permits analysts to see lower-level protocol features in extreme
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: detail. Its deep understanding of protocols allows it to decode just about
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: every field it encounters, assuming the traffic is unencrypted and recog-
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: nized by its protocol dissectors. (Should you encounter encrypted sessions,
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark offers some capabilities for incorporating cryptographic keys to
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: decrypt traffic.)
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: For example, Figure 7-6 displays an ARP request message. Looking only
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: at the hex and ASCII values in the bottom pane, you would be hard-pressed
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: to understand all of the elements of this frame. However, the protocol decode
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: in the middle pane explains every field quite clearly. Whatever field you high-
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: light in the middle pane is highlighted in the corresponding hex and ASCII
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: output in the bottom pane.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-6: Wireshark explains an ARP request message.*'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '**Omitting traffic to See remnants**'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: Another particularly useful feature of Wireshark is its ability to filter traf-
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: fic to show you interesting remnants. Sometimes I hunt for traffic by tell-
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: ing Wireshark what to ignore so that I can examine what’s left behind. I
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **141**
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 78](index-176_1.jpg)'
  id: totrans-673
  prefs: []
  type: TYPE_IMG
- en: start with a simple filter, review the results, add another filter, review the
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: results, and so on until I’m left with a small amount of traffic to analyze.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: For example, Listing 7-3 shows how I progressively built a display filter to
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: search for noteworthy traffic.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: not http and not ntp and not dns and not tcp.port==443 and not tcp.port==80
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: and not icmp and not tcp.port==5223 and not arp
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-3: Display filter omit ing traffic in Wireshark*'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: 'This filter omits the following:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: • HTTP traffic
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: • NTP traffic
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: • DNS traffic
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: • Any traffic on port 443 TCP
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: • Any traffic on port 80 TCP
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: • ICMP traffic
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: • Any TCP traffic on port 5223 (Apple Push Notification service)
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: • Address Resolution Protocol (ARP) traffic
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: The result is shown in Figure 7-7\.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-7: Traffic remaining after applying the display filter in Listing
    7-3*'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '**142** Chapter 7'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 79](index-177_1.jpg)'
  id: totrans-694
  prefs: []
  type: TYPE_IMG
- en: '**Following Streams**'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-7 shows two sets of TCP streams. The destination port for each is
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: 10002, but the source port for one stream is 60560 and the other is 60563\.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: With the two streams intertwined, it is somewhat difficult to follow what is
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: happening. Another drawback to this approach is that I’m more interested
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: in the content of the conversation, rather than a packet-by-packet list. This
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: 'brings me to my third favorite Wireshark feature: following streams.'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark can identify all TCP segments in a stream, reassemble them
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: using a specific algorithm, and present the results as text. This capabil-
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: ity makes it easy to identify the purpose of a conversation and determine
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: whether it is benign, suspicious, or malicious.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: To tell Wireshark to reassemble a TCP stream, highlight one of the
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: packets in a stream, right-click, and choose **Follow TCP Stream**, as shown
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 7-8\.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-8: Choosing Fol ow TCP Stream in Wireshark*'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: For this example, Wireshark renders the stream shown in Figure 7-9\.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: The text at the top shows a GET request from a web browser. The text begin-
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: ning with HTTP/1.1 200 OK shows a web server’s reply.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the web client mentions the Accept-Encoding: gzip, deflate'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: option. The reply from the web server is actually gzip-encoded, but Wireshark
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: unzips the content and displays cleartext. We recognize this traffic as HTTP,
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **143**
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 80](index-178_1.jpg)'
  id: totrans-718
  prefs: []
  type: TYPE_IMG
- en: even though Wireshark did not identify it as such by default. (In the figure,
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: I’ve redacted possibly sensitive information from the transcript involving
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: the cookie used during this exchange.)
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-9: Wireshark displays a reassembled TCP stream.*'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Protocol Decode Method with Decode as**'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: After reassembling a stream as discussed in the previous section, Wireshark
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: will display only the packets in that stream in the main window. To change
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: the way that Wireshark sees this traffic, use the Decode As option. This tells
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark to apply a certain protocol decode method to specific traffic.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we’ll tell Wireshark to think of traffic to port 10002
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: as HTTP.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Right-click one of the packets in the stream to be decoded, and click
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: '**Decode As**, as shown in Figure 7-10\.'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: 2\. You will see a menu asking which ports Wireshark should decode. For
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: this example, choose **Destination (10002)** in the TCP Port(s) field.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Scroll through the protocols listed on the right to find and select **HTTP**.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Click **Apply**.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: '**144** Chapter 7'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 81](index-179_1.jpg)'
  id: totrans-738
  prefs: []
  type: TYPE_IMG
- en: '![Image 82](index-179_2.jpg)'
  id: totrans-739
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-10: Selecting Decode As*'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see that Wireshark now understands a GET request and a web
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: server reply, as shown in Figure 7-11\. For example, notice how frames 11636
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: and 11648 are now listed as HTTP in Wireshark’s Protocol column.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-11: Wireshark decodes port 10002 TCP as HTTP.*'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **145**
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 83](index-180_1.jpg)'
  id: totrans-747
  prefs: []
  type: TYPE_IMG
- en: '**Following Other Streams**'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the protocol, Wireshark can also follow other sorts of streams,
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: such as UDP or Secure Sockets Layer (SSL). (Because UDP is not a session-
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: oriented protocol like TCP, Wireshark makes its best assessment of which
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: UDP packets make up a UDP “session.”)
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Wireshark can extract content from some streams, such
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: as HTTP objects, Server Message Block (SMB) objects, and Digital Imaging
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: and Communications in Medicine (DICOM) objects. For example, at the
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: bottom of Figure 7-9, we see that the web server sent a 43-byte *.gif* file
    to
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: the web client. We can use Wireshark’s HTTP objects export function to
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: investigate this file. Select **File**4**Export**4 **Objects**4**HTTP** to access
    this feature. You’ll see a window showing all HTTP objects that Wireshark recognizes
    in the trace, including HTML pages, JavaScript, text, images, and
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: other objects. To access the packet of interest here, scroll down to packet
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: 11648, which contains the HTTP/1.1 200 OK (GIF89a) message, as shown in
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-12\. Then click **Save As**, name the file, and save it.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-12: Wireshark HTTP object list*'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: Upon reviewing the *.gif*, you’ll find that it’s a 1×1 pixel image, perhaps
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: for tracking and advertisement purposes. The web server in question at
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: 74.201.145.181 is owned by OwnerIQ, described at *http://www.owneriq.com/*
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: as “THE advertising network that pioneered the concept of Ownership
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: '**146** Chapter 7'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: Targeting. . . . We enable advertisers to define and reach their ideal online
    consumer.” That sounds like the sort of service that might deploy a 1×1 “web
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: bug” image on a nonstandard port for tracking purposes.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Wireshark equips us with the ability to pivot from one
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: datatype to another, applying extra processing to certain protocols when
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: possible. That’s just the beginning! As I suggested at the beginning of this
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: section, read a book devoted to Wireshark to learn more about its capabilities.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: '**using xplico**'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: Xplico ( *http://www.xplico.org/*) is an open source network forensic analysis
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: (NFA) tool that understands many network protocols and will carve out the
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: information it recognizes.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: '*Gianluca Costa and Andrea De Franceschi developed Xplico under the GNU General*'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: '*Public License version 2\.*'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: As an NFA tool, Xplico is most often used against a saved trace file to
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: extract and interpret interesting content, as we will do in this chapter’s
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: example. Xplico can also sniff traffic live from the wire. However, the
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: authors don’t recommend running Xplico against a live interface and say
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: that is more for demonstrations than production use.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: To understand Xplico, we’ll use it to analyze network traffic available
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: through the Digital Corpora project ( *http://www.digitalcorpora.org/*). Digital
    Corpora is a National Science Foundation grant–funded collection of digital evidence,
    led by forensics guru Simson Garfinkel. Analysts and students
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: can use the Digital Corpora project to download and interpret data from
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: cell phones, hard drives, and network traffic in order to learn how to use
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: forensic tools and techniques.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the pcap file bundled in the “Nitroba University Harass-
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: ment Scenario” ( *http://digitalcorpora.org/corpora/scenarios/nitroba-university*
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '*-harassment-scenario/*) posted at *http://digitalcorpora.org/corp/nps/packets/*'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '*2008-nitroba/nitroba.pcap*. The trace is approximately 55MB and contains a'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: variety of network traffic suitable for NSM and forensic review. Download
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: the *nitroba.pcap* file before trying to use Xplico.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Xplico***'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: Xplico is managed via a web browser. By default, SO is configured to allow
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: only local access to the Xplico web server. Remote users must either tunnel
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: traffic via OpenSSH (as discussed in Chapter 5) or alter the firewall rules
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: to permit remote access to port 9876 TCP. Choose the option that best meets
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: your needs.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: When first accessing Xplico, you may see an error like the one shown in
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7-13\.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **147**
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 84](index-182_1.png)'
  id: totrans-808
  prefs: []
  type: TYPE_IMG
- en: '![Image 85](index-182_2.jpg)'
  id: totrans-809
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-13: By default, Xplico is not running.*'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: This error means that while the Apache web server on SO is serving
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: pages, the Xplico service is not yet active. Fix that by running the command
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 7-4\.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service xplico start**
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: '* Starting Xplico'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: Modifying priority to -1 [ OK ]
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 7-4: Starting the Xplico service*'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: Now reload the web browser and choose a language. Next, use the
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: username **xplico** and the password **xplico** to log in, as shown in Figure
    7-14\.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: (Selecting the language changes the URL but does not show the language
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: choice in the Language drop-down box.)
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-14: Logging in to Xplico*'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Xplico Cases and Sessions***'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: 'Xplico organizes network traffic as *sessions* and refers to analysis sessions
    as *cases*. To start a new case and a session to interpret, follow these steps:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select **New Case** and leave the default Data Acquisition method set to
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '**Uploading PCAP Capture File/s**, as shown in Figure 7-15\.'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Enter a case name, and then click **Create**.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: '**148** Chapter 7'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 86](index-183_1.jpg)'
  id: totrans-830
  prefs: []
  type: TYPE_IMG
- en: '![Image 87](index-183_2.jpg)'
  id: totrans-831
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-15: Creating a new case in Xplico*'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: 3\. After creating a new case, you should see it listed in a cases list. Click
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: the name of the case to continue.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Click the **New Session** link in the upper-left menu to create a new session.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Give the session a name, as shown in Figure 7-16, and then click **Create**.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: (Xplico will allow only alphanumeric characters in session names, so
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: you cannot use dashes in the name.)
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-16: Creating a new session in Xplico*'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: With the new session created, Xplico is now ready to process network
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: traffic.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: '***Processing Network Traffic***'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: To process network traffic, click the name of the session. You will see a
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: screen like the one shown in Figure 7-17\. Because we have not processed
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: any traffic yet, Xplico will not show any results.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: Select **Choose File**, browse to the *nitroba.pcap* file you downloaded earlier,
    click **Open**, and then click **Upload**. The web browser should report that
    it is uploading the file. Once the file has been uploaded, Xplico will display
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: “File uploaded, wait start decoding…” at the top of the screen.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: It will probably take a few minutes for Xplico to process the traffic,
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: depending on your hardware. Once Xplico has finished decoding the
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: traffic, it should report **Decoding Completed** in the Status field. Its main
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: screen will display statistics on the sorts of traffic it recognized and inter-
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: preted, as shown in Figure 7-18\.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **149**
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 88](index-184_1.png)'
  id: totrans-855
  prefs: []
  type: TYPE_IMG
- en: '![Image 89](index-184_2.png)'
  id: totrans-856
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-17: Xplico session screen*'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-18: Xplico has finished decoding the trace file.*'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '***Understanding the Decoded Traffic***'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: At this point, an analyst can peruse the decoded traffic for content of inter-
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: est. This investigative method differs from that of the previous tools, which
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: interact with packets or sessions. With Xplico, analysts manipulate and
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: browse extracted content.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: For example, an analyst may want to know if video content was trans-
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: ferred during a web browsing session. In fact, Figure 7-18 shows **1** in the
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '**150** Chapter 7'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 90](index-185_1.png)'
  id: totrans-868
  prefs: []
  type: TYPE_IMG
- en: '![Image 91](index-185_2.jpg)'
  id: totrans-869
  prefs: []
  type: TYPE_IMG
- en: Video field in the HTTP section of the summary screen. This means Xplico
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: extracted video content from the network traffic and can make it viewable
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: to users. To access the content, click the **Web** link in the upper-left corner
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: of the Xplico display, and then click the **Site** link that appears next.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: By default, Xplico will show the last 16 web sessions, with the newest
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: listed first, as shown in Figure 7-19\.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-19: Xplico’s list of web sessions*'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: To access the video content that Xplico identified, click the **Video** radio
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: button at the top of the screen, and then click **Go**. Xplico shows a link
    to a
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: '*googlevideo.com* site, as shown in Figure 7-20\.'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-20: One video link in the Digital Corpora trace*'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **151**
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 92](index-186_1.jpg)'
  id: totrans-883
  prefs: []
  type: TYPE_IMG
- en: '![Image 93](index-186_2.jpg)'
  id: totrans-884
  prefs: []
  type: TYPE_IMG
- en: Clicking the *info.xml* link at the far right reveals options to see metadata
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: about the trace, as well as a link to download pcap. Most interesting, clicking
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: the URL shown in Figure 7-20 or the gray box to the right of the link will
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: open the video for viewing, as shown in Figure 7-21\. This video is not being
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: streamed from the Web; it’s a reconstruction of the video as downloaded
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: when the network traffic was originally captured.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-21: Reconstructing a video downloaded from the Web*'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to browse thumbnails of images downloaded while this
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: network trace was being captured. As shown in Figure 7-22, someone went
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: shopping for a backpack at eBay.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-22: Reconstructing images downloaded from the Web*'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: '**152** Chapter 7'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 94](index-187_1.jpg)'
  id: totrans-898
  prefs: []
  type: TYPE_IMG
- en: '***Getting Metadata and Summarizing Traffic***'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: Besides reconstructing interesting content, Xplico provides some metadata
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: and summarization of the traffic it understands. To see this in action, fol-
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: 'low these steps:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Under the **Graphs** menu item in the upper-left portion of the screen,
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
- en: click the **DNS** link to tell Xplico to show a sorted list of DNS queries.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: 2\. At the top of the screen, a red, yellow, and green pie chart icon will
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: appear. Click that icon to display a bar chart of DNS responses, with
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: a tab for Host Popularity in the upper-right corner.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Click the **Host Popularity** tab to see a chart with DNS queries ordered
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: by frequency, as shown in Figure 7-23\.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-23: Xplico graphs DNS queries by frequency.*'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Highlight any bar to display the hostname queried and a response
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: count.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: Xplico makes it very easy to review a variety of content captured in a
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: network trace. By publishing the data through SO’s Apache web server, the
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: authors allow anyone with a web browser and authenticated access to review
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: the data. This is one tool that really brings NSM extracted content to life.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: '**examining content with NetworkMiner**'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: NM ( *http://sourceforge.net/projects/networkminer/*) is an open source NFA
    tool that also exists as a commercial version.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '*Erik Hjelmvik develops NM under the GNU General Public License version 2\.*'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **153**
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 95](index-188_1.jpg)'
  id: totrans-923
  prefs: []
  type: TYPE_IMG
- en: The commercial version of NM at *http://www.netresec.com/* enables remote
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: packet capture via Pcap-over-IP, Port Independent Protocol Identification
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: (PIPI; see *http://taosecurity.blogspot.com/2006/09/port-independent-protocol*
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: '*.html* for a description), and other features. The free version bundled with'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
- en: SO contains the core features an analyst would want in order to examine
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: content.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll see what NM does with the Digital Corpora trace
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: examined earlier in the Xplico discussion. If you haven’t already down-
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: loaded *nitroba.pcap* onto the SO platform, do that before continuing.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: '***Running NetworkMiner***'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: NM is a Windows application, but the SO team configured it to run under
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: the open source Mono ( *http://www.mono-project.com/*) implementation of
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s .NET Framework.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: To access NM from the SO desktop click the blue-and-white mouse
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: icon, then **Security Onion**, and finally **NetworkMiner**. By default, NM
    wants to watch a live interface to collect traffic. To start the analysis process,
    select
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: '**File**4**Open** in NM and browse to the location of the *nitroba.pcap* file.'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: Once the file is loaded, NM should display a flurry of analysis activity,
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: including extracting content and resolving all of the domain names it finds
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: in the trace, as shown in Figure 7-24\. This process may take an hour or two
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: and will keep your SO platform busy.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-24: NM processes the* nitroba .pcap *trace.*'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
- en: '**154** Chapter 7'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 96](index-189_1.png)'
  id: totrans-947
  prefs: []
  type: TYPE_IMG
- en: '**N o T e**'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: '*NM on Windows is much faster than it is on Mono and Linux. You may want to*'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: '*install it on a Windows workstation with plenty of memory, or limit its use
    on SO*'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: '*to processing smaller trace files.*'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this section focuses on how to interact with the same
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: '*nitroba.pcap* trace using the Windows version of NM, which is functionally'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: equivalent to NM on Linux.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: '***Col ecting and Organizing Traffic Details***'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: Many analysts begin reviewing NM data in its Hosts tab, which lists all IP
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: addresses that it sees in a network trace, as you can see in Figure 7-25\. The
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: IP address 192.168.15.5 is shown highlighted and expanded in the figure.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: To expand an entry for an IP address, click the small box to the left of that
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: address.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-25: Metadata from NM for IP address 192.168.15.5*'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, although NM couldn’t identify the operating system, it
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: does tell us that the MAC address is assigned to TRENDnet, a maker of net-
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: working equipment. The Universal Plug and Play (UPnP) queries involving
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: MediaRenderer indicate that this device may be an audiovisual platform.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: The details and metadata for IP 192.168.15.4 are very different from
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: that of 192.168.15.5, as shown in Figure 7-26\.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **155**
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 97](index-190_1.png)'
  id: totrans-970
  prefs: []
  type: TYPE_IMG
- en: '![Image 98](index-190_2.png)'
  id: totrans-971
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-26: Metadata from NM for IP address 192.168.15.4*'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: The hardware at this address appears to be an Apple device. In addition,
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: the Host Details section shows a variety of web browser user-agent strings,
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: which tells us that this system is much more active than 192.168.15.5, as
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: shown by the number of outgoing sessions (1658).
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the Host Details section, the screen resolutions observed
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: during the traffic capture that NM obtained from Google Analytics are listed,
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Figure 7-27\.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-27: NM lists three screen resolutions for IP address 192.168.15.4\.*'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: '***Rendering Content***'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: In addition to collecting and organizing details about hosts seen on the wire,
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: NM extracts content and renders it for easy viewing. Figure 7-28 shows an
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: example involving email.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '**156** Chapter 7'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 99](index-191_1.png)'
  id: totrans-987
  prefs: []
  type: TYPE_IMG
- en: The Messages tab in Figure 7-28 shows an email sent from 192.168.15.4,
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: the Apple computer that we reviewed in Figure 7-26\. A sender with the email
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: address *the_whole_world_is_watching@nitroba.org* sent an unpleasant email
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: message to *lilytuckrige@yahoo.com*. Now we understand why this is a harass-
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: ment case.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7-28: Harassing email extracted by NM*'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: Like Xplico, NM extracts and displays all captured images, along with
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: various other forms of content. It can be a bit easier to use than Xplico
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: because you scroll through output, rather than click from page to page as
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: with Xplico’s web server. NM can simplify the process of extracting content
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: in bulk from a network trace.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter described three graphical packet analysis tools: Wireshark,'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: Xplico, and NM. Wireshark is undoubtedly the most popular, with support
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: for thousands of protocols and an ever-expanding set of capabilities. Lesser-
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: known projects like Xplico and NM are more forensics focused, providing
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: parsers to extract content automatically and giving analysts an overview of
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: network-derived artifacts.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: Choosing which tool to use depends on the needs of the investiga-
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: tion. When you require deep understanding of a protocol, I recommend
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark. When you want rapid overviews of content exchanged between
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: computers, Xplico or NM may be more appropriate.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
- en: Each of these tools offers different capabilities and exposes various
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: forms of NSM data. While these tools are powerful additions to the analyst’s
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
- en: arsenal, they don’t function as NSM consoles. Chapter 8 concludes the data
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: presentation tool discussion by looking at the NSM consoles Sguil, Squert,
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: Snorby, and ELSA.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Packet Analysis Tools **157**
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: '**8**'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: '**N S M c o N S o l e S**'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: Chapters 6 and 7 discussed tools for packet
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: analysis. This chapter covers NSM con-
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: soles, which are tools built specifically for
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: NSM. Applications like Tcpdump, Tshark,
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark, Xplico, and NetworkMiner process live
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: traffic or traffic saved in pcap format. When reading
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: this chapter, you may recall features of those tools that share certain simi-
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: larities with the software discussed here. Some of them generate session or
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: extracted content data, for example, or present multiple forms of data in
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: a single interface. The difference between the tools covered in Chapters 6
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: and 7 and those presented in this chapter is that the NSM consoles help
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: analysts drive a decision-making process, rather than a troubleshooting or
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: forensic process.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, NSM consoles tend not to work on raw packets, whether
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: in the form of live traffic or traffic saved in pcap format. All of the tools
    in
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: Chapters 6 and 7 contained features that let analysts tell the software to
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: sniff traffic from the wire or open a saved trace. NSM consoles, in contrast,
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: offer a framework and interface to manipulate and interact with multiple
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: NSM datatypes, but generally not via processing a saved trace. This is a
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: limitation in some respects, because it restricts their use to live operational
    scenarios. This is not necessarily true of some commercial tools, but the
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: focus of this book is open source software packaged with the free SO distri-
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: 'bution: Sguil, Squert, Snorby, and ELSA.'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
- en: '**an NSM-centric look at Network Traffic**'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: The tools we’ve explored so far generate one or more forms of NSM data.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a brief recap of the NSM datatypes (introduced in Chapter 1):'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: '**Full content data** Network traffic stored to disk in pcap format.'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: '**Extracted content** Information carved from network traffic, such as'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: files or web pages.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: '**Session data** A high-level summary of network conversations, focusing'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: on who talked to whom, at what time, plus how much information was
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: exchanged.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction data** A more granular form of session data, exposing'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: details of protocols with request-reply characteristics like HTTP, FTP,
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: and SMTP.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: '**Statistical data** Descriptive information that characterizes network'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: activity, like counts of various aspects of conversations.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata** “Data about data,” or an integration of external information'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: like geography or ownership, applied to network information.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert data** Reflects whether traffic triggered some sort of notification.'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: It’s a judgment made by a tool, typically an IDS, about some characteris-
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: tic of network traffic.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: That’s a lot of data to manage. NSM isn’t about collecting evidence for
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: the sake of having it, though. CIRTs collect NSM data because it enables
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: them to achieve a specific business objective. The outcome of an NSM-
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: 'centric look at network traffic is a decision: Is the event in question benign,'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: suspicious, or malicious? The answer to that question determines what a
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: CIRT analyst does next. Mature CIRTs answer these questions to meet busi-
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: ness goals, such as conducting detection and response in one hour or less.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: Many forms of network data, and tools to inspect that data, help ana-
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: lysts meet business security goals. Tools built specifically for NSM, however,
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: 'assist in three specific ways:'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: • They make it easy for analysts to review multiple forms of NSM data,
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: often within a single interface.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: • They enable analysts to “pivot,” or transition, from one form of NSM
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: data to another.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: • They capture the outcome of the analyst’s decision-making process.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: NSM-specific tools make a workflow possible, usually coordinating the
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: actions of multiple analysts to complete a shared objective.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: '**160** Chapter 8'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: Sguil, Squert, Snorby, and ELSA are four open source tools written by NSM practitioners,
    for NSM practitioners. These software authors realized
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
- en: that other tools for analyzing network-centric data were helpful but not
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: sufficient for conducting NSM as a continuous business process. Each tool
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: offers a way to integrate several types of NSM data, pivoting among the
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: information, and, in most cases, classifying the outcome of an investigation.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: The NSM consoles packaged with SO work with several overlapping sets
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: of NSM data. Whereas the packet analysis tools discussed in Chapters 6 and 7
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
- en: tend to be *producers* of NSM data, the consoles in this chapter are more like
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: '*consumers* of NSM data. Similar to the tools profiled in Chapters 6 and 7,'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: the consoles in this chapter are available in SO by default, except for ELSA.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: (The setup wizard asks if you want to run ELSA when installing SO.) This
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: chapter highlights the key features of each tool to help you decide which
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: best suits the needs of your NSM operation.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: '**using Sguil**'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: Sguil ( *http://www.sguil.net/*) is an open source NSM, first written as a
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: proprietary application, but then recoded and released as open source
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: in early 2003\.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
- en: '*Bamm Visscher codes Sguil under the Qt Public License* ( *QPL,* http://sourceforge'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: .net/projects/sguil/) *.*
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: Sguil is one of the main applications packaged with SO. Its components
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: collect, store, and present data that other SO tools use, and certain applica-
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: tions rely on Sguil’s authentication database. Even if you decide not to use
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
- en: the Sguil console to review NSM data, you’ll benefit from its collection and
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: management of NSM data.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Sguil***'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: Sguil is a client/server application written in Tcl/Tk. Its server coordinates
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: with Sguil agents deployed on sensors to collect NSM data. The Sguil client
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
- en: is the analyst’s window into Sguil’s data. You can start the Sguil console
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: via the Sguil icon on the SO desktop, or you can install the Sguil client on
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: another computer.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: The tools we’ve discussed so far work by analyzing live or saved network
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: traffic; they’re meant for use in live operations or when conducting review
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: on historical activity. In contrast, Sguil is a solely a live tool. You can’t
    use
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: Sguil to “open” a saved network trace; you can interact with Sguil only as its
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: various components and dependencies collect and generate traffic gathered
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: from a live network interface. As an example, we’ll use the Sguil client to
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: interact with a sample server and sensor.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **161**
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’ve already installed SO, you should be able to follow along with the
    example.*'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
- en: '*However, the data you see will not match the data shown because you’ll be
    watching* *new, live data, although the analysis process is the same.*'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: Before running Sguil, make sure that all of its underlying services are
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: running on the sensor with the service command, as shown in Listing 8-1\.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
- en: You should see OK in each field.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 2433 0 24 Feb 18:27:19
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sademo-eth1'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 8-1: Output of the sudo service nsm status command*'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
- en: If one or more components are not running, you can try restarting all
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
- en: 'of the software using the following command:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm restart**
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
- en: If one or more components are still not running, you may need to rerun
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: the SO setup script or consult the SO mailing list for additional assistance.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve confirmed that all services are running, connect to the Sguil
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: console by clicking the Sguil icon on the SO desktop. In this example, the
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
- en: Sguil client will connect to the Sguil server on localhost. (You could connect
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
- en: to the server from another computer running a Sguil client, but it’s easier
    to
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
- en: use the SO platform.)
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Connect to your instance of an SO server, and enter the username and
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
- en: password you selected for Sguil during the SO installation process, as
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 8-1, and then click **OK**.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The Sguil client asks you to select network(s) to monitor. Click **Select**
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
- en: '**All**, and then click **Start Sguil**.'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
- en: '**162** Chapter 8'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 100](index-197_1.jpg)'
  id: totrans-1164
  prefs: []
  type: TYPE_IMG
- en: '![Image 101](index-197_2.png)'
  id: totrans-1165
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-1: Logging in to Sguil*'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The Sguil console appears. Highlight any row in the top section, and
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: then check the **Reverse DNS**, **Show Packet Data**, and **Show Rule** boxes.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: The Sguil console will display data like that shown in Figure 8-2\.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-2: The Sguil console displaying data*'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: If you see information similar to that in Figure 8-2, your Sguil installa-
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
- en: tion is working as expected.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **163**
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: '***Sguil’s Six Key Functions***'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: 'Sguil enables six key functions helpful to NSM analysts:'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil performs simple aggregation of similar alert data records.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil makes certain types of metadata, and related data, readily
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: available.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil allows queries and review of alert data.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil permits queries and review of session data.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil provides a right-click menu that lets you pivot, or move from
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: either of those two categories of data to full content data, rendered as
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: text in a *transcript*, in a protocol analyzer like Wireshark, or in a network
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: forensic tool like NM.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil exposes features so analysts can count and classify events, thereby
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: enabling escalation and other incident response decisions.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: The following sections explain how to use these features.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple aggregation**'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: A powerful but possibly underappreciated Sguil feature is its ability to aggre-
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: gate similar records into single lines of output in the console. Figure 8-2
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: shows this feature in action. The CNT column is Sguil’s mechanism to dis-
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: play record counts. The top row, for example, shows how Sguil aggregated
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: four similar records into a single entry in the console.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: This simple act of grouping similar records into single lines reduces the
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: analyst’s workload. The review process can focus on unique records rather
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: than repetitive entries that differ only by timestamp. Because Sguil is a
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: live, or “real-time,” tool, it processes and aggregates entries as the console
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: receives them. Entries in the CNT column may increase as new but repeti-
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: tive events reach the sensor.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata and related Data**'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: Sguil doesn’t expose a great deal of metadata, but it makes three important
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
- en: types easily accessible. In Figure 8-2, you can see two forms of metadata in
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: the lower-left corner of the console. The entries labeled *Src IP*, *Src Name*,
    *Dst IP*, and *Dst Name* represent the IP addresses and hostnames (if available
    via DNS) for the source and destination IP addresses of any highlighted
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: record. Under this IP and hostname information, Sguil displays WHOIS
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: data for either the source or destination IP address. Analysts can choose
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: which to display via a radio button.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: Sguil shows one other form of metadata and one form of related data
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: in the lower-right corner of the console. When showing alert data gener-
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: ated by an IDS like Snort or Suricata (discussed in the next section), Sguil
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
- en: displays the rule that triggered the generation of the alert data. Under the
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: rule, Sguil shows the packet that triggered the creation of the alert data.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: '**164** Chapter 8'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
- en: This metadata and related data give analysts more context about the
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: systems involved in network traffic. They can also choose to disable the dis-
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
- en: play of this information.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s take a closer look at the alert data to understand what it
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
- en: means in the context of the Sguil console.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying alert Data in Sguil**'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
- en: When you start Sguil, alert data is the first form of NSM evidence you will
    see.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
- en: Sguil calls alerts *event data*. The database supporting Sguil stores the alert
    data in an *event table*, so you’ll see references to that term, rather than *alert*.
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
- en: 'Sguil incorporates four forms of alert data:'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
- en: • Network IDS engines like Snort and Suricata generate alert data when
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
- en: traffic they observe triggers one of their rules. These rules are indica-
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
- en: tors of compromises that may require human analysis to determine if
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
- en: they represent benign, suspicious, or malicious activity. Alert data from
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
- en: the Snort or Suricata IDSs bear entries in the Event Messages column
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
- en: that begin with text like *ET* (for *Emerging Threats*, an IDS rule source)
    or *GPL* (another rule source).
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: • Host-based IDS engines like OSSEC ( *http://www.ossec.net/*), if enabled,
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
- en: provide similar warnings based on analyzing information about indi-
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: vidual computers. Using OSSEC requires installing an OSSEC software
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
- en: agent on servers. By default, SO runs OSSEC on its own operating sys-
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: tem. Alerts from OSSEC have event messages beginning with *[OSSEC]*.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
- en: (For more information on OSSEC, see the online manual at *http://*
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: '*www.ossec.net/doc/*.)'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil also integrates data in the event table from some sources that are
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: not IDS engines. For example, Sguil collects network profiling data
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
- en: created by the Passive Real-time Asset Detection System (PRADS) tool
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
- en: ( *https://github.com/gamelinux/prads/*). Alert data from PRADS begins
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: with *PADS*. PADS is a reference to the Passive Asset Detection System,
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: the precursor to PRADS.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
- en: • Sguil stores HTTP transaction data generated by Bro. This data records
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
- en: Uniform Resource Locators (URLs) observed by Bro, such as *www*
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
- en: '*.testmyids.com*. Sguil displays these messages by prepending them with'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
- en: the label *URL*. Because HTTP activity is so common on networks, URL
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
- en: data is not displayed by default, unlike data from Snort/Suricata,
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC, and PRADS.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
- en: Data from Snort/Suricata, OSSEC, and PRADS appear by default in
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-2, in the top half of the Sguil console. If you want to query for
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
- en: HTTP URL data recorded by Bro, you must ask Sguil manually. As an
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
- en: example, we’ll create a query for HTTP data. Sguil refers to this as an
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
- en: '*event query*.'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **165**
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 102](index-200_1.png)'
  id: totrans-1256
  prefs: []
  type: TYPE_IMG
- en: '![Image 103](index-200_2.png)'
  id: totrans-1257
  prefs: []
  type: TYPE_IMG
- en: To run an event query, choose **Query**4**Query Event Table** from the
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
- en: Sguil menu. In the Query Builder window, modify the default text as shown
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 8-2\. Note the use of single quote characters (to the left of the
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
- en: enter key on the US keyboard).
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: WHERE event.timestamp > '2014-02-10 11:13:00' AND event.timestamp < '2013-02-
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
- en: 10 11:16:00' AND event.signature LIKE 'URL%'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 8-2: Running an event query for signatures beginning with URL%*'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-3 shows this query in the Sguil console.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-3: Sguil event query for ''URL%''*'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: This query looks for events in the Sguil database with timestamps
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: between 11:13:00 and 11:16:00 UTC on February 10, 2013, where the signa-
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: ture or message begins with the string URL. Figure 8-4 shows the results of
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: this query on our demo system.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-4: Querying Sguil for URL events*'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: '**166** Chapter 8'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
- en: These URL events are drawn from the Bro application’s *http.log* file, which
    contains a summary of observed HTTP traffic. A Sguil agent read
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: '*http.log* and inserted the results into the MySQL database.'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
- en: Notice that certain details—such as the timestamp, source and destina-
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: tion IP addresses and ports, and URL—are available as individual rows.
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: Highlight any row and check the **Display Detail** box to see the rest of the
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: 'information associated with this event. The text after the UID: element of'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: the detailed display is a unique identifier created by Bro for this session.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
- en: You could use this UID to query Bro logs later.
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying Session Data in Sguil**'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
- en: The ability to query for NSM session data is another one of Sguil’s key func-
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: tions. Sguil refers to session data as *SANCP data*. SANCP stands for Security
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
- en: Analyst Network Connection Profiler, which is a tool written by John Curry
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
- en: packaged with earlier versions of Sguil to generate session data. In SO,
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: Doug Burks replaced SANCP with PRADS in late 2012\.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: In addition to generating session data, PRADS performs network device
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
- en: profiling and tracks the systems it sees. Despite the new code, Sguil’s data-
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: base maintains a *sancp table* for storing session data. This form of NSM data
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
- en: keeps thorough records of every conversation seen by the sensor.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: Unlike alert data, session data is always written to disk, regardless of
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: whether any system considers it normal or troublesome. The same neutral
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: approach also applies to full content data, extracted content data, transac-
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: tion data, statistical data, and metadata.
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: '*Collecting and generating data beyond IDS alerts is a key aspect of network
    security* *monitoring. The availability of other forms of data, stored regardless
    of any relationship to an IDS alert, is a core differentiator between NSM-centric
    operations and* *alert-centric operations. With NSM, the alert is only the beginning
    of the analysis* *process, not the end. If your network monitoring model relies
    on IDS alerts, or IDS*'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
- en: '*alerts triggering packet capture, you’re not conducting NSM. Why not convert
    today?*'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: Session data isn’t displayed by default in the Sguil console. Analysts can
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
- en: query for session data using a process similar to running an event query, as
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: described in the previous section. The difference involves querying the sancp
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: table instead of the event table. More common, however, is the process of
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: '*pivoting* from alert data to session data. With pivoting, you start with one
    form of data, identify an item of interest, and use that item as the jumping-off'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: point for a new query.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how to query for session data using a pivot methodology,
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: we’ll begin with the results of the URL-based alert data query. Suppose that
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: we want to know more about activity involving the destination IP address
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: for one of the URL records. Rather than run a new search from the Query
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: menu, we’ll pivot on the highlighted message. Right-click the destination IP
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: address of the highlighted event, and then select **Advanced Query**4**Query**
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
- en: '**Sancp Table**4**Query DstIP/1 Hour**, as shown in Figure 8-5\.'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **167**
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 104](index-202_1.png)'
  id: totrans-1314
  prefs: []
  type: TYPE_IMG
- en: '![Image 105](index-202_2.png)'
  id: totrans-1315
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-5: Pivoting from a message to SANCP data*'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: Sguil displays the Query Builder window with prepopulated syntax that
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
- en: looks for session records 30 minutes prior and 30 minutes following the
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
- en: highlighted record, as shown in Figure 8-6\. The timestamp on the high-
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
- en: lighted event is 11:14:57, so the query starts at 10:44:57 and ends at 11:44:57
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: on February 10, 2013\.
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-6: Query for SANCP records in the Query Builder window*'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in Figure 8-7, this query returns only one session data
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: record. The PRADS application created this session record. A Sguil software
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
- en: agent running on the sensor read the PRADS output and loaded the session
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
- en: record into the MySQL database on the SO server. This is an example of
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
- en: how an NSM console like Sguil integrates data from multiple systems and
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: platforms.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: '**168** Chapter 8'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 106](index-203_1.png)'
  id: totrans-1331
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-7: Session data displayed in Sguil*'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Display Sancp Details** option to see a summary of the TCP
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: flags counted during this session. The TCP protocol uses flags like SYN,
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
- en: ACK, FIN, ACK, RST, URG, and PSH to coordinate the transfer of data during a
    ses-
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: sion. PRADS keeps track of the total set of flags seen when two computers
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
- en: exchange data using TCP. Sguil can display those flags in the console to
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
- en: help analysts recognize patterns of communication. For example, the pat-
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: tern ACK PSH SYN FIN shown in Figure 8-7 reflects all of the flags that would
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
- en: be used at some point during a normal TCP session.
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: The information in this record is similar to what we saw generated
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
- en: by Argus in Chapter 6, including timestamps, source and destination IP
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
- en: addresses and ports, protocol (6 here for TCP), and source and destination
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: packet and byte counts. These elements are the core features of session
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
- en: 'data: who talked to whom, when, and how much data they exchanged.'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
- en: '*Just before this book went to press, the PRADS developers changed their code
    and*'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: '*the way they count bytes of data sent by source and destination computers
    in session* *records. PRADS, along with Bro and NM, count bytes in the IP header,
    the TCP or*'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
- en: '*UDP header, and any application data when reporting bytes of data sent or
    received* *in a session. In contrast, Argus and Wireshark count bytes in the Ethernet
    header, the* *IP header, the TCP or UDP header, and any application data bytes.
    The decision to* *exclude bytes from the Ethernet header means PRADS, Bro, and
    NM will report fewer* *bytes compared to Argus and Wireshark results. These choices
    are arbitrary and harm-less, but important to understand when comparing data from
    these different tools.*'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: '**Pivoting to Full Content Data**'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: Just as we pivoted from an event to session data, Sguil allows us to pivot from
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
- en: alert or session data to full content data. To see how this works, click the
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: '**RealTime Events** tab and highlight an interesting alert. This example uses'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
- en: an alert about an outdated version of Java. An IDS like Snort or Suricata
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: generated an ET POLICY Vulnerable Java Version alert when the detection
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
- en: engine noticed traffic from a computer running an old version of Java.
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: The IDS wrote the alert to disk, and then a Sguil agent read the data and
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: inserted it into the MySQL database. Using Sguil, we can learn more about
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
- en: this event by right-clicking the **Alert ID** field and selecting **Transcript**,
    as shown in Figure 8-8\.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **169**
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 107](index-204_1.png)'
  id: totrans-1362
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-8: Pivoting from alert data to a transcript*'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: Sguil generates a new window called a *transcript*, as shown in Figure 8-9
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: (similar to the window that appears after rebuilding a TCP session in
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark). We see a computer with IP address 192.168.2.108 connecting
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: to a server in the *oracle.com* domain. This is HTTP traffic, as demonstrated
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
- en: by the GET request and the HTTP/1.1 reply. The ET POLICY rule for Vulnerable
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: Java Version noticed that 192.168.2.108 is running an outdated version of
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: Java, as reported by the User-Agent field and the UA-Java-Version (1.7.0_13).
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: 'This data is important for several reasons:'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: • It’s a reconstruction of the full content data saved by Netsniff-ng. This
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: data was *not* collected because the IDS detected suspicious or malicious
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: activity and decided to trigger the capture of full content data. Rather,
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: we simply used the ET POLICY rule for Vulnerable Java Version alert as a
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: reason to pivot from alert data to full content data.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: • It shows all of the content for this session—exactly what the source sent
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: and how the destination replied. This data can be critical when trying
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: to understand what is happening during an intrusion.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: • Although this data appeared in a Sguil Tcl/Tk window, it could just as
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: easily have automatically gone to Wireshark, as shown in Figure 8-10, or
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: NM. In fact, you can open Wireshark by right-clicking the Alert ID field
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: and selecting either option.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: '**170** Chapter 8'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 108](index-205_1.png)'
  id: totrans-1386
  prefs: []
  type: TYPE_IMG
- en: '![Image 109](index-205_2.jpg)'
  id: totrans-1387
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-9: Sguil transcript*'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-10: Pivoting to Wireshark from Sguil alert data*'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **171**
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 110](index-206_1.png)'
  id: totrans-1392
  prefs: []
  type: TYPE_IMG
- en: '**N o T e**'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time Sguil retrieves full content data from the sensor, it saves a copy
    in the* /nsm/'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: server_data/<servername>/archive *directory. The Sguil client also saves a copy
    for* *local use. For example, the pcap file required to build a transcript might
    be archived* *on the SO server at* /nsm/server_data/securityonion/archive/2013-02-24/
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: sademo-eth1/192.168.2.117:49207_184.51.126.91:80-6.raw *. The format of the*
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: '*filename is* SourceIP:SourcePort_DestinationIP:DestinationPort-Protocol.raw
    *.*'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: Sguil’s full content capabilities are powerful for several reasons. First,
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: they’re easy to use. Analysts who are more familiar with manual retrieval of
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: network traffic via the command line are usually thrilled to interact with
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: Sguil on a right-click basis. Also, Sguil, through its Netsniff-ng component,
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: is *always* capturing full content data to disk. Whether or not there’s an alert,
    Sguil will have the data. The only limitation is the amount of hard drive
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: space reserved for capture. Wait too long, and the hard drive housekeeping
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: scripts running on SO will erase older captures to make room for new cap-
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: tures. This is why Sguil’s ability to keep archived copies of requested tran-
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: 'scripts on the server and client is so helpful: SO may delete the original
    full'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: content data to make room for new files. As long as an analyst requested a
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: transcript, the associated full content evidence is preserved in two locations.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: '**Categorizing alert Data**'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: Sguil was designed as a real-time console for analysts sitting in a CIRT or
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
- en: a security operations center (SOC). Sguil is not an “alert browser” for pag-
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: ing through security information. Analysts should not treat Sguil like a log
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: management platform that passively stores records. Instead, analysts should
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: monitor the Sguil console and investigate alerts as they appear. They must
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: decide whether an event is benign, suspicious, or malicious. After making this
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: decision, the analyst can assign a label to the event conveying that informa-
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: tion. This process of classification changes the status of the event from *RT*
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: (for *Real Time*) to another code chosen by the user.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: To support this workflow,
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: Sguil allows you to categorize
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: alert data. Select **File**4**Display**
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: '**Incident Categories** to see the'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
- en: categories built into Sguil by
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: default, as shown in Figure 8-11\.
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
- en: Highlight any event in Sguil and
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: click the corresponding func-
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: tion key (F1 for Category I, F2
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-11: Sguil incident categories*'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
- en: for Category II, and so on) to
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: classify an alert. For example,
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: if you find evidence of an intruder achieving root-level access to a system,
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: pressing F1 will classify the event as an Unauthorized Root/Admin Access
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: incident. Crucially, *the alert will disappear from the real-time display*.
    The event is still preserved in the database, but from Sguil’s perspective, the
    event has
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: been “handled.” To classify an event as being of no consequence, press F8
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: instead.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: '**172** Chapter 8'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 111](index-207_1.jpg)'
  id: totrans-1438
  prefs: []
  type: TYPE_IMG
- en: Note that you can classify only alert data—not session data. Analysts
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
- en: who use Sguil tend to assign their own meanings to the different function
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: keys, so devise a plan that suits your needs.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
- en: Sguil users don’t let alert data pile up in the console. Instead, they work
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
- en: to clear the screen as efficiently as possible.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: The case studies later in this book demonstrate how to apply this NSM
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: operational model to hunt for intrusions using NSM data. For now, it’s
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: enough to understand that Sguil provides CIRT members a way to perform
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: 'six key functions: viewing aggregated alerts, accessing some metadata and'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: related data, querying for alert data, querying for session data, pivoting to
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: full content data, and classifying alert data.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: '**using Squert**'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: Squert ( *http://www.squertproject.org/*) is an open source web interface for
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: NSM data. Paul Halliday wrote Squert to provide access to the Sguil data-
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: bases using a web browser.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: '*Paul codes Squert under the GNU General Public License version 3* (https://'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: github.com/int13h/squert/blob/master/COPYING/) *.*
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the previous examples, the Sguil client focuses on pre-
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
- en: senting key elements of different datatypes as records in rows. Squert adds
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: features like visualizations and supporting information to events in the
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
- en: Sguil database. Figure 8-12 shows the Events tab of the Squert page with
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
- en: the PING TEST alerts selected.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-12: Events tab in Squert 1.0*'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **173**
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 112](index-208_1.png)'
  id: totrans-1465
  prefs: []
  type: TYPE_IMG
- en: The Squert dashboard presents several data visualizations. For example,
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
- en: the events grouped by minute and hour graph shows spikes and valleys in
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
- en: counts of alerts created by the Snort or Suricata IDS engines, as shown in
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-13\.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-13: Squert visualization of IDS alerts over time*'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: Future versions of Squert should allow analysts to pivot from alert data
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
- en: to packet details and full content data.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: The Squert project expands beyond the key datatypes captured and
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
- en: integrated by Sguil and its components, but the Snorby project takes that
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
- en: integration a step further.
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
- en: '**using Snorby**'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: Snorby ( *http://www.snorby.org/*) is a newer open source web interface for
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
- en: NSM data.
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
- en: '*Dustin Webber codes Snorby under a GNU General Public License version 3*'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: (https://github.com/Snorby/snorby/blob/master/LICENSE) *.*
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
- en: SO users can access Snorby by pointing a web browser to port 444 TCP
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: on the SO server. Log in using the email address and password selected
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
- en: during the SO installation process to see a summary dashboard of data
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
- en: from the Sguil database, as shown in Figure 8-14\. As with Sguil, Snorby
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
- en: users can classify events using function keys.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
- en: Most users find the Snorby interface to be intuitive. For example, click-
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
- en: ing the High Severity portion of the dashboard takes you to the list of high-
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
- en: severity alerts (as designated by the IDS engine). Clicking any record in the
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: list displays additional data for the event in question, as shown in Figure
    8-15\.
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
- en: Snorby also supports creating transcripts, thanks to Paul Halliday’s
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: CapMe program ( *https://github.com/int13h/capme*). To use it, select **Packet**
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: '**Capture Options**, and then select **Custom**. The Packet Capture Builder'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: window will appear, as shown in Figure 8-16\.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: '**174** Chapter 8'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 113](index-209_1.jpg)'
  id: totrans-1497
  prefs: []
  type: TYPE_IMG
- en: '![Image 114](index-209_2.jpg)'
  id: totrans-1498
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-14: The initial Snorby screen*'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-15: Snorby alert detail*'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **175**
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 115](index-210_1.png)'
  id: totrans-1503
  prefs: []
  type: TYPE_IMG
- en: '![Image 116](index-210_2.jpg)'
  id: totrans-1504
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-16: Packet Capture Builder window in Snorby*'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
- en: Click **Fetch Packet** to open a new window titled *capME!* , as shown in
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-17\. This window is prepopulated with the fields necessary to retrieve
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: full content data associated with the particular event. All that remains is
    to
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
- en: enter a username and password to authenticate to the SO sensor that stores
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: the full content data.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-17: CapMe ready to build a transcript*'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
- en: When you’re ready, click **Submit**, and CapMe will retrieve full content
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: data from the appropriate sensor, return it to the server, and render it via
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
- en: the web browser, as shown in Figure 8-18\.
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: '**176** Chapter 8'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 117](index-211_1.png)'
  id: totrans-1517
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-18: CapMe returns a transcript.*'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we see HTTP traffic, with HEAD and GET requests, fol-
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
- en: lowed by an HTTP/1.1 status code. It looks as if 192.168.2.117 is retrieving
    an
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
- en: update from Microsoft.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: Snorby can also offer data to analysts in nontraditional ways, such as via
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
- en: iPhone apps. For example, the Snorby iPhone app ( *https://itunes.apple.com/*
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
- en: '*us/app/snorby/id570584212?mt=8/*) offers an innovative way to review Snorby'
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: alerts on the go, as shown in Figure 8-19\.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
- en: '*In 2013 Dustin Webber published a cloud-based version of Snorby called Threat*'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: '*Stack* (https://www.threatstack.com/) *, mentioned in the conclusion. He plans
    to* *continue to support the open source version of Snorby, but the cloud edition
    contains* *many compelling features.*'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **177**
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 118](index-212_1.jpg)'
  id: totrans-1531
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-19: Snorby iPhone app displays suspicious scan alerts.*'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '**using elSa**'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
- en: ELSA, the Enterprise Log Search and Archive ( *https://code.google.com/p/*
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: '*enterprise-log-search-and-archive/*), provides a fully asynchronous web-based'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
- en: query interface that normalizes logs and makes searching billions of them
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
- en: for arbitrary strings as easy as searching the Web, as stated on the project’s
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
- en: website.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
- en: '*Martin Holste codes ELSA under a GNU General Public License version 2*'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: '*(* http://enterprise-log-search-and-archive.googlecode.com/svn/trunk/'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
- en: elsa/LICENSE/ *).*
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: ELSA relies on Syslog-ng ( *http://www.balabit.com/network-security/syslog-ng/*)
    to collect remote log events, stores them in MySQL, and provides search
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
- en: capabilities using the search server Sphinx ( *http://sphinxsearch.com/*). ELSA
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: is closely tied to the Bro tool, and many analysts use it to interpret Bro logs.
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: Because ELSA has been integrated into SO, using it is as easy as point-
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
- en: ing a web browser to the address and port listening on the SO server, and
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
- en: then authenticating using the username and password you set for the Sguil
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
- en: database. ELSA should listen on port 3154 TCP by default and must be
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
- en: accessed via HTTPS. After authentication, it offers the query window shown
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 8-20\.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: '**178** Chapter 8'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 119](index-213_1.png)'
  id: totrans-1554
  prefs: []
  type: TYPE_IMG
- en: '![Image 120](index-213_2.png)'
  id: totrans-1555
  prefs: []
  type: TYPE_IMG
- en: '![Image 121](index-213_3.png)'
  id: totrans-1556
  prefs: []
  type: TYPE_IMG
