["```\n$ **mkdir sample-next**\n$ **cd ./sample-next**\n$ **npx create-next-app@latest** **-****-typescript** **-****-use-npm**\n--`snip`--\nWhat is your project named? ... **my-app**\n--`snip`--\nCreating a new Next.js app in /Users/.../my-app.\n\nInstalling dependencies:\n- react\n- react-dom\n- next\n\nInstalling devDependencies:\n- eslint\n- eslint-config-next\n- typescript\n- @types/react\n- @types/node\n- @types/react-dom \n```", "```\n$ **cd my-app**\n$ **npm run dev**\n\n> my-app@0.1.0 dev\n> next dev\n\nready - started server on 0.0.0.0:3000, url: http://localhost:3000 \n```", "```\nimport type {NextPage} from \"next\";\n\nconst Hello: NextPage = () => {\n    return (<>Hello World!</>);\n}\n\nexport default Hello; \n```", "```\nimport type {NextPage} from \"next\";\nimport React, {useState, useEffect} from \"react\";\n\nconst PageComponentWeather: NextPage = () => {\n\n    interface WeatherProps {\n        weather: string;\n    }\n\n    const WeatherComponent = (props: WeatherProps) => {\n\n        const [count, setCount] = useState(0);\n        useEffect(() => {\n            setCount(1);\n        }, []);\n\n        return (\n            <h1 onClick={() => setCount(count + 1)}>\n                The weather is {props.weather},\n                and the counter shows {count}\n            </h1>\n        );\n    };\n\n return (<WeatherComponent weather=\"sunny\" />);\n};\n\nexport default PageComponentWeather; \n```", "```\nimport type {NextApiRequest, NextApiResponse} from \"next\";\n\ntype responseItemType = {\n    id: string;\n    name: string;\n};\n\nexport default async function handler(\n    req: NextApiRequest,\n    res: NextApiResponse\n): Promise<NextApiResponse<responseItemType[]> | void> {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data;\n    try {\n        const response = await fetch(url);\n        data = (await response.json()) as responseItemType[];\n    } catch (err) {\n        return res.status(500);\n    }\n    const names = data.map((item) => {\n        return {id: item.id, name: item.name};\n    });\n    return res.status(200).json(names);\n} \n```", "```\nimport type {NextApiRequest, NextApiResponse} from \"next\";\n\ntype WeatherDetailType = {\n    zipcode: string;\n    weather: string;\n    temp?: number;\n};\n\nexport default async function handler(\n    req: NextApiRequest,\n    res: NextApiResponse\n): Promise<NextApiResponse<WeatherDetailType> | void> {\n\n    return res.status(200).json({\n        zipcode: req.query.zipcode,\n        weather: \"sunny\",\n        temp: 35\n    });\n\n} \n```", "```\nimport \"@/styles/globals.css\";\n```", "```\n.container {\n    padding: 0 2rem;\n} \n```", "```\nimport styles from \"../styles/Home.module.css\"\n--`snip`--\nconst Home: NextPage = () => {\n    return (\n        <div className={styles.container}>\n        --`snip`--\n        </div>\n    );\n}; \n```", "```\nimport type {NextPage} from \"next\";\n**import Head from \"next/head\";**\n\nconst Hello: NextPage = () => {\n    return (\n        <div>\n            **<Head>**\n                **<title>Hello World Page Title</title>**\n                **<meta property=\"og:title\" content=\"Hello World\" key=\"title\" />**\n            **</Head>**\n            <div>Hello World!</div>\n        </div>\n    );\n};\n\nexport default Hello; \n```", "```\nimport type {NextPage} from \"next\";\nimport Head from \"next/head\";\n**import Link from \"next/link\";**\n\nconst Hello: NextPage = () => {\n    return (\n        <div>\n            <Head>\n                <title>Hello World Page Title</title>\n                <meta property=\"og:title\" content=\"Hello World\" key=\"title\" />\n            </Head>\n            <div>Hello World!</div>\n            <div>\n                Use the HTML anchor for an\n                **<a href=\"https://nostarch.com\" > external link</a>**\n                and the Link component for an\n                **<Link href=****\"/components/weather\"> internal page**\n                **</Link>**\n                .\n            </div>\n        </div>\n    );\n};\n\nexport default Hello; \n```", "```\nimport type {NextPage} from \"next\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\n**import Image from \"next/image\";**\n\nconst Hello: NextPage = () => {\n    return (\n        <div>\n            <Head>\n                <title>Hello World Page Title</title>\n                <meta property=\"og:title\" content=\"Hello World\" key=\"title\" />\n            </Head>\n            <div>Hello World!</div>\n            <div>\n                Use the HTML anchor for an <a href=\"https://nostarch.com\">\n                external link</a> and the Link component for an\n                <Link href=\"/components/weather\"> internal page</Link>.\n                **<Image**\n                    **src****=\"/vercel.svg\"**\n                    **alt=\"Vercel Logo\"**\n                    **width={72}**\n                    **height={16}**\n                **/>**\n            </div>\n        </div>\n    );\n};\nexport default Hello; \n```", "```\ntype responseItemType = {\n    id: string;\n    name: string;\n};\n\nexport const fetchNames = async () => {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data: responseItemType[] | [] = [];\n    let names: responseItemType[] | [];\n    try {\n        const response = await fetch(url);\n        data = (await response.json()) as responseItemType[];\n    } catch (err) {\n        names = [];\n    }\n    names = data.map((item) => {return {id: item.id, name: item.name}});\n\n    return names;\n}; \n```", "```\nimport type {\n    **GetServerSideProps,**\n    **GetServerSidePropsContext,**\n    **InferGetServerSidePropsType,**\n    NextPage,\n    PreviewData\n} from \"next\";\nimport {ParsedUrlQuery} from \"querystring\";\nimport {fetchNames} from \"../utils/fetch-names\";\n\ntype responseItemType = {\n    id: string;\n    name: string;\n};\n\nconst NamesSSR: NextPage = **(props: InferGetServerSidePropsType<typeof getServerSideProps>****)** => {\n\n    const output = props.names.map((item: responseItemType, idx: number) => {\n        return (\n            <li key={`name-${idx}`}>\n                {item.id} : {item.name}\n            </li>\n        );\n    });\n\n    return (\n        <ul>\n            {output}\n        </ul>\n    );\n};\n\n**export const getServerSideProps: GetServerSideProps** = async (\n    context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>\n) => {\n\n    let names: responseItemType[] | [] = [];\n    try {\n        names = await fetchNames();\n    } catch(err) {}\n    return {\n        props: {\n          names\n        }\n    };\n};\n\nexport default NamesSSR; \n```", "```\nimport type {\n    **GetStaticProps,**\n    **GetStaticPropsContext,**\n    **InferGetStaticPropsType,**\n    NextPage,\n    PreviewData,\n} from \"next\";\nimport {ParsedUrlQuery} from \"querystring\";\nimport {fetchNames} from \"../utils/fetch-names\";\n\ntype responseItemType = {\n    id: string,\n    name: string,\n};\n\nconst **NamesSSG**: NextPage = **(props: InferGetStaticPropsType<typeof getStaticProps>)** => {\n\n    const output = props.names.map((item: responseItemType, idx: number) => {\n        return (\n            <li key={`name-${idx}`}>\n                {item.id} : {item.name}\n            </li>\n        );\n    });\n\n    return (\n        <ul>\n            {output}\n        </ul>\n    );\n};\n\n**export const getStaticProps: GetStaticProps = async (**\n    context: **GetStaticPropsContext<ParsedUrlQuery, PreviewData>**\n) => {\n\n    let names: responseItemType[] | [] = [];\n    try {\n        **names = await fetchNames();**\n    } catch (err) {}\n\n    return {\n        props: {\n            names\n        }\n    };\n};\n\nexport default NamesSSG; \n```", "```\nreturn {\n        props: {\n        names,\n        revalidate: 30\n    }\n}; \n```", "```\nimport type {\n    NextPage\n} from \"next\";\nimport {**useEffect, useState**} from \"react\";\nimport {fetchNames} from \"../utils/fetch-names\";\n\ntype responseItemType = {\n    id: string,\n    name: string,\n};\n\nconst NamesCSR: NextPage = () => {\n    const [data, setData] = **useState<responseItemType[] | []>**();\n    **useEffect**(() => {\n        const fetchData = async () => {\n            let names;\n            try {\n                names = await fetchNames();\n            } catch (err) {\n                console.log(\"ERR\", err);\n            }\n            setData(names);\n        };\n        fetchData();\n    }**);**\n\n    const output = data?.map((item: responseItemType, idx: number) => {\n        return (\n            <li key={`name-${idx}`}>\n                {item.id} : {item.name}\n            </li>\n        );\n    });\n\n    return (\n        <ul>\n            {output}\n        </ul>\n    );\n\n};\n\nexport default NamesCSR; \n```", "```\ninterface WeatherProps {\n    weather: string;\n}\n\ntype WeatherDetailType = {\n    zipcode: string;\n    weather: string;\n    temp?: number;\n};\n\ntype responseItemType = {\n    id: string;\n    name: string;\n}; \n```"]