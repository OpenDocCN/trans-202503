- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inserting, Updating, and Deleting Data
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll learn to insert, update, and delete data from tables.
    You’ll practice ways to insert data from one table to another, use queries to
    update or delete data from a table, and create a table that automatically increments
    a numeric value into a column as you insert rows.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you’ve been querying data from tables. But how did the data get into
    the tables in the first place? Typically, you insert data using the `insert` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Adding rows to a table with the `insert` statement is known as *populating*
    a table. You specify the name of the table, the names of the columns you want
    to insert values into, and the values you want to insert.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you insert a row of data into the `arena` table, which contains information
    about various arena names, locations, and capacities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, you specify that you want to insert a row into the `arena` table ❶, and
    that your data will go into the `arena_id`, `arena_name`, `location`, and `seating_capacity`
    columns ❷. You then list the values you want to insert under the `values` keyword
    in the same order in which you listed the columns ❸. You surround, or wrap, the
    values `Madison Square Garden` and `New York` in quotes because they are character
    strings ❹.
  prefs: []
  type: TYPE_NORMAL
- en: When you run this `insert` statement, MySQL returns the message `1 row(s) affected`
    to let you know that one row was inserted into the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then query your `arena` table to confirm the new row looks as you intended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The row was inserted, and the columns and their values appear as you expected.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Null Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you want to insert a null value into a column, you have two options. First,
    you can list the column name and use the `null` keyword as the value to insert.
    For example, if you want to add a row to the `arena` table for the `Dean Smith
    Center` but don’t know its seating capacity, you can write an `insert` statement
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The second option is to omit the column name entirely. As an alternative to
    the preceding `insert` statement, you can omit the `seating_capacity` column from
    your list of columns and provide no value for it in your list of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you didn’t insert a value into the `seating_capacity` column, MySQL will
    set it to `null` by default. You can see the row that was inserted using this
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `seating_capacity` column will be set to `null` regardless of which approach
    you take.
  prefs: []
  type: TYPE_NORMAL
- en: If the `seating_capacity` column had been defined as `not null` when you created
    the table, you wouldn’t be allowed to insert a null value using either approach
    (see [Chapter 2](c02.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Multiple Rows at Once
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you want to insert multiple rows, you can either insert one row at a time
    or insert them as a group. Let’s start with the first approach. Here’s how you
    insert three arenas into the `arena` table using individual `insert` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You could achieve the same results by combining all three rows into one `insert`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To insert multiple rows at once, surround each row’s values with parentheses
    and use a comma between each set of values. MySQL will insert all three rows into
    the table and give you the message `3 row(s) affected` to let you know that all
    three rows were inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Without Listing Column Names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also insert data into a table without specifying the column names.
    Since you’re inserting four values and the `arena` table only has four columns,
    you could replace the `insert` statement that lists the column names with one
    that does not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: MySQL is able to determine which columns to insert the values into because you’ve
    provided the data in the same order as the columns in your table.
  prefs: []
  type: TYPE_NORMAL
- en: Although omitting the column names saves you some typing, it’s best practice
    to list them. At some point in the future, you might add a fifth column to the
    `arena` table. If you don’t list your columns, making that change would break
    your `insert` statements because you’d be trying to insert four values into a
    table with five columns.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Sequences of Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might want to insert sequential numbers into a table column, such as in
    the `arena` table where the first row of the `arena_id` column should have the
    value `1`, the next row of the `arena_id` column should have the value `2`, the
    next row should have a value of `3`, and so on. MySQL provides an easy way to
    do that by letting you define a column with the `auto_increment` attribute. The
    `auto_increment` attribute is particularly useful for a primary key column—that
    is, the column that uniquely identifies the rows in a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at how it works. Select everything from the `arena` table you’ve
    created thus far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see that each arena has its own `arena_id` that is one larger than the
    value for the arena that was inserted before it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you inserted the values in the `arena_id` column, you found the highest
    `arena_id` already in the table and added 1 to it when inserting the next row.
    For example, when you inserted the row for the `Staples Center`, you hardcoded
    the `arena_id` as `6` because the previous `arena_id` was `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This approach won’t work very well in a real production database where many
    new rows are being created quickly. A better approach is to have MySQL manage
    that work for you by defining the `arena_id` column with `auto_increment` when
    you create the table. Let’s try it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drop the `arena` table and re-create it using `auto_increment` for the `arena_id`
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you insert rows into the table, you won’t have to deal with inserting
    data into the `arena_id` column. You can insert data into the other columns and
    MySQL will automatically increment the `arena_id` column for you with each new
    row that you insert. Your `insert` statements should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You didn’t list `arena_id` as one of the columns in your list of columns, nor
    did you provide a value for `arena_id` in your list of values. Take a look at
    the rows in the table after MySQL runs your `insert` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, MySQL automatically incremented the values for the `arena_id`
    column.
  prefs: []
  type: TYPE_NORMAL
- en: Only one column per table can be defined with `auto_increment`, and it has to
    be the primary key column (or a column that is part of the primary key).
  prefs: []
  type: TYPE_NORMAL
- en: When inserting a value into a column defined with `auto_increment`, MySQL will
    always insert a higher number, but there can be gaps between the numbers. For
    example, you could end up with `arena_id` 22, 23, and then 29 in your table. The
    reasons for this have to do with the storage engine your database is using, how
    your MySQL server is configured, and other factors that are beyond the scope of
    this book, so just know that a column defined with `auto_increment` will always
    result in an ascending list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Data Using a Query
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can insert data into a table based on values returned from a query. For
    example, say the `large_building` table has data you want to add to your `arena`
    table. The `large_building` table was created with these data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It contains this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For your purposes, you don’t care about the first row in the table, because
    `Wanda Inn` is a hotel, not an arena. You can write a query to return the arena
    data from the other rows in the `large_building` table like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then use that query as the basis for an `insert` statement to insert
    these rows into the `arena` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL inserts the two rows that were returned from your query into the `arena`
    table. You can query the `arena` table to see the new rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the results with the new rows included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `insert` statement added arenas `7` and `8` to the existing data in the
    `arena` table.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Query to Create and Populate a New Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `create table as` syntax allows you to create and populate a table in one
    step. Here you create a new table called `new_arena` and insert rows into it at
    the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This statement creates a table called `new_arena` based on the results of the
    preceding `large_building` query. Now query the new table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `new_arena` table is created with the same column names and data types
    as the `large_building` table. You can confirm the data types by describing the
    table with the `desc` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `create table` to make a copy of a table. For example, you
    might save the current state of the `arena` table by making a copy of it and calling
    the new table `arena_` with the current date appended to it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Before you add or remove columns from the `arena` table, you might want to ensure
    you have your original data saved in a second table first. This is useful when
    you’re about to make major changes to a table, but it may not be practical to
    make a copy of a very large table.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have data in your tables, you’ll likely want to make changes to it
    over time. MySQL’s `update` statement allows you to modify existing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arenas are notorious for having their names changed, and the arenas in your
    table are no exception. Here you change the `arena_name` value for `arena_id 6`
    from `Staples Center` to `Crypto.com Arena` using the `update` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: First, you use the `set` keyword to set column values in the table. Here you
    are setting the `arena_name` column’s value to `Crypto.com Arena`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you specify which row(s) you want updated in the `where` clause. In this
    case, you chose to update the row based on the `arena_id` column with a value
    of `6`, but you could have updated that same row based on another column. For
    example, you can update the row based on the `arena_name` column instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, since you have only one arena in Los Angeles listed, you can update the
    row using the `location` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It’s important that you craft your `where` clauses carefully because any rows
    that match the criteria specified there will be updated. For example, if there
    are five arenas with a `location` of `Los Angeles`, this `update` statement will
    rename all five to `Crypto.com Arena`, whether or not that’s what you intended.
  prefs: []
  type: TYPE_NORMAL
- en: It’s usually best to update rows based on a primary key column. When you created
    the `arena` table, you defined the `arena_id` column as the primary key of the
    table. That means there will only be one row in the table for an `arena_id` of
    `6`, so if you use the syntax `where arena_id = 6`, you can be confident you’re
    updating only that row.
  prefs: []
  type: TYPE_NORMAL
- en: Using a primary key in your `where` clause is also best practice because primary
    key columns are indexed. Indexed columns are typically faster at finding rows
    in the table than unindexed columns.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Multiple Rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To update multiple rows, you can use a `where` clause that matches more than
    one row. Here you update the seating capacity of all arenas with an `arena_id`
    greater than `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: MySQL updates arenas `4`, `5`, and `6` to have `seating_capacity` values of
    20,000.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remove your `where` clause entirely, all rows in your table will be
    updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you `select * from arena` now, you can see that all arenas have a seating
    capacity of 15,000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In this example, it’s apparent that you forgot to use a `where` clause to limit
    the number of rows to update.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Multiple Columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can update more than one column with one `update` statement by separating
    the column names with a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here, you’ve updated both the `arena_name` and the `seating_capacity` column
    values for the row that has an `arena_id` of `6`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove data from your tables, you use the `delete` statement. You can delete
    one row at a time, multiple rows, or all rows with one `delete` statement. You
    use the `where` clause to specify which rows you want to delete. Here, you delete
    the row with an `arena_id` of `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After you run this `delete` statement, select the remaining rows from the table
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the row containing the `arena_id` of `2` has been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 7](c07.xhtml), you learned about using `like` for simple pattern
    matches. You can do that here to delete all arenas that have the word `Arena`
    in their name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the remaining rows from the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The two rows containing `Philippine Arena` and `Crypto.com Arena` are no longer
    in the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you write a `delete` statement and the `where` clause doesn’t match any
    rows, no rows will be deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This statement won’t delete any rows because there aren’t any with an `arena_id`
    of `459237`. MySQL won’t produce an error message, but it will tell you `0 row(s)
    affected`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete all rows from the table, you can use a `delete` statement without
    a `where` clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This statement removes all rows from the table.
  prefs: []
  type: TYPE_NORMAL
- en: Truncating and Dropping a Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Truncating* a table removes all the rows but keeps the table intact. It has
    the same effect as using `delete` without a `where` clause, but it’s typically
    faster.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can truncate a table using the `truncate table` command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Once the statement runs, the table will still exist but there will be no rows
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to remove both the table and all of its data, you can use the `drop
    table` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If you try to select from the `arena` table now, MySQL will display a message
    saying the table doesn’t exist.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter you looked at inserting, updating, and deleting data from a
    table. You saw how to insert null values and quickly create or delete entire tables.
    In the next chapter, you’ll learn the benefits of using table-like structures
    called *views*.
  prefs: []
  type: TYPE_NORMAL
