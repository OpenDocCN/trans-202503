- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 1 PHP PROGRAM BASICS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you’ll learn two ways to create and run PHP programs: using
    an online coding environment and using an editor installed locally on your own
    computer. We’ll try both techniques to practice key programming tasks like printing
    out text messages, assigning values to variables, and working with data of different
    types. We’ll also explore core PHP language features including comments, constants,
    and expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: Two Methods to Run PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Often the easiest way to learn a programming language is to use an online environment
    that has everything already set up for you. This lets you start coding right away
    and see the results instantly, without having to install and configure language
    engines, code editors, web servers, or other tools. On the other hand, some prefer
    the customization and control that comes from working in a programming environment
    installed on their own machine.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll get to explore both approaches as you write your first
    PHP programs. You can then use either method to follow along with the examples
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: The Replit Online Coding Environment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Several online sites facilitate interactive PHP development and can run PHP
    web servers for you. We’ll focus on Replit (*[https://replit.com](https://replit.com)*),
    a popular service that’s free to use for starter projects. To try it out, go to
    the Replit website and create an account.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Replit is named for the* read-evaluate-print loop (REPL), *a type of computer
    environment where the programmer enters an expression and the system immediately
    executes it, prints out the response, and waits for the next input. A command
    line terminal, where you enter single-line commands and the terminal executes
    those commands, is a type of REPL.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replit features two official, preconfigured templates for creating PHP projects:
    PHP CLI (short for *command line interface*) and PHP Web Server. The former is
    appropriate for projects that simply output text in a command line terminal window
    or work with data files, while the latter is for web development. Let’s take a
    look at each of these templates so you can learn a bit about how PHP programs
    work in the process.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Command Line Interface Project
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To create a PHP command line interface project, go to the home screen of your
    Replit account and click **Create Repl**. This will launch a pop-up window where
    you can search for project templates. Enter **PHP** into the search box. The results
    should include the PHP CLI and PHP Web Server templates from Replit. (Below these
    official Replit templates, you may also see other templates created by Replit
    users and tagged for the PHP language.) Choose **PHP CLI** and enter a name for
    your project, or take the random-words default name offered. Then click **Create
    Repl** to launch the project.
  prefs: []
  type: TYPE_NORMAL
- en: The website will take a short while to set up your new project, including creating
    its file and folder structure and starting up a cloud virtual machine to run it.
    When the project loads, you’ll be presented with the three-column screen shown
    in [Figure 1-1](#fig1-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1: The new PHP CLI project screen, with the default “Hello, world!”
    script'
  prefs: []
  type: TYPE_NORMAL
- en: The left column lists the project’s files and folders, the middle column is
    an online code editor, and the right column is the command line terminal output
    (called *Console*) and an interactive terminal (called *Shell*) for the virtual
    computer that Replit has created. The Run button at the top of the screen runs
    the project, at which point any output will be displayed in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical PHP project includes one or more files, called *scripts*, saved with
    the.*php* file extension. In this case, the Replit PHP CLI project automatically
    starts with a prewritten file called *main.php*. The file contains PHP code to
    output the message Hello, world! in the console. Writing a program that displays
    this message is a tradition when learning a new language. Besides being fun, it
    provides an opportunity to learn how to name the text files containing your programs,
    how to write valid statements in your language of choice, and how to execute a
    program. What’s more, a “Hello, world!” script serves as a basic test of the language
    tools on the computer system: if the program runs and successfully outputs the
    Hello, world! message, that means PHP is working.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 1-1](#lis1-1) shows the boilerplate “Hello, world!” script that Replit
    provides in *main.php*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: The “Hello, world!” program in main.php'
  prefs: []
  type: TYPE_NORMAL
- en: The <?php at the start of the script is an opening PHP tag. This tag signals
    that what follows is PHP code. In this case, the code uses the echo command to
    print out the text Hello, world! in the console, followed by a line break denoted
    with a newline character (\n). Notice that the text to be printed is enclosed
    in double quotation marks. These quotes indicate that the text is a *string*,
    a type of data consisting of a sequence of characters. We’ll discuss strings and
    special characters like \n in detail in [Chapter 3](chapter3.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: The echo line of code is an example of a *statement*, a single command directing
    the computer to perform a task (in this case, to display some text). Every PHP
    statement must end with a semicolon (;) to indicate the command is over, as this
    echo statement does. Think of the semicolon as the period at the end of a sentence;
    without it, the statement is considered incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: Running the main.php Script
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Click the green **Run** button to run the *main.php* script. You should see
    the Hello, world! message printed to the console. Congratulations, you’ve just
    run your first PHP program! But what actually happened when you clicked Run?
  prefs: []
  type: TYPE_NORMAL
- en: PHP is a *scripted* programming language. This means a program called an *interpreter*
    translates the contents of a PHP file into machine code as the file is being executed.
    Other scripted languages include Python and JavaScript. Scripted languages are
    different from *compiled* programming languages like C, C++, and Swift, in which
    the translation happens in a separate step prior to execution. During this extra
    step, all program files are compiled and optimized into one or more executable
    files.
  prefs: []
  type: TYPE_NORMAL
- en: The interpreter that translates PHP scripts into executable code is usually
    called the *PHP engine*. When you click Replit’s Run button to run the *main.php*
    file, Replit invokes the PHP engine, which then reads the contents of the file
    and interprets and executes the lines of code inside it. For simple PHP scripts
    (such as our Replit *main.php*) that consist of just one or more statements meant
    to be executed in order, this is a straightforward process. Almost all programs
    involve more complex decision logic, however, performing tests so the code can
    respond dynamically to events and determine which statements to execute and in
    which order. The way the PHP engine decides what to do next is referred to as
    the *flow of control*. We’ll explore this concept further when we discuss conditionals
    and loops in [Chapters 4](chapter4.xhtml) and [6](chapter6.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hitting Replit’s Run button isn’t the only way to run a PHP script. You can
    also invoke the PHP engine from the command line by using the php command followed
    by the name of the script you want to execute. To try it out, switch over from
    the Console tab to the Shell tab in the right-hand column of your Replit project
    to bring up an interactive command line terminal. Then enter the following after
    the $ prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The php main.php command instructs the PHP engine to execute the *main.php*
    script. As before, this outputs the Hello, world! message. You can use this same
    technique to execute PHP files from the command line on your local machine, where
    you won’t necessarily have Replit’s convenient Run button.
  prefs: []
  type: TYPE_NORMAL
- en: '##### Creating a Web Server Project'
  prefs: []
  type: TYPE_NORMAL
- en: PHP is primarily used for developing web applications, so let’s now try creating
    a basic web-based PHP project by using Replit’s PHP Web Server template. Go back
    to your Replit account home page and create a new project, this time choosing
    the **PHP Web Server** template after entering **PHP** into the template search
    box. Your new project should look like [Figure 1-2](#fig1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-2: The new PHP Web Server template project screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The only file shown in the left column is a boilerplate *index.php* file. An
    *index* file such as this has special significance: it represents the default
    file served up when you visit the home page of a website. (We’ll discuss how this
    works in more detail when we explore web programming in [Part III](part3.xhtml).)
    The file’s contents are shown in the middle column. In the right column are the
    Console and Shell tabs, and this is also where a Webview tab will appear when
    we run the web server to show the rendered web page.'
  prefs: []
  type: TYPE_NORMAL
- en: The *index.php* file should contain the code shown in [Listing 1-2](#lis1-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-2: The web server script in index.php'
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of this file isn’t PHP code but rather the HyperText Markup Language
    (HTML) needed to create a generic web page, as indicated by the opening <html>
    and closing </html> tags at the beginning and end of the file, respectively. As
    we’ll discuss further in “Template Text vs. PHP Code” on [page 13](#pg_13), many
    PHP scripts mix dynamic PHP code meant to be interpreted and executed on the fly
    with static text in a language like HTML. In this case, the only PHP code is an
    echo statement to display the text Hello World ❶. The text is wrapped in HTML
    <p> tags, meaning it will be rendered on the resulting web page as a body paragraph,
    and the entire echo statement is enclosed in PHP tags (the opening <?php tag and
    the closing ?> tag) to indicate that it’s actual PHP code, unlike the surrounding
    HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Web Server Project
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Click the **Run** button, and Replit will launch a web server hosting the *index.php*
    file and running the PHP engine needed to interpret the PHP code in the file.
    This time, instead of seeing text appear in a Console tab, you should see Hello
    World displayed as a basic web page in the Webview tab (see [Figure 1-3](#fig1-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-3: Viewing the index.php script output in the Replit Webview panel'
  prefs: []
  type: TYPE_NORMAL
- en: When running the web server, Replit publishes temporary pages to its *replit.dev*
    domain. This means it provides publicly served web pages you can view and interact
    with in a separate web browser tab rather than just through the Replit site itself.
    To try this, click the green *{...}.replit.dev* URL address bar in the Webview
    panel. Then copy the URL shown in the pop-up window and paste it into a new tab
    in your web browser. You should see the same Hello World message rendered as its
    own web page, separate from the Replit interface. Congratulations, you’ve just
    published your first PHP website!
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you choose to use Replit to follow along with this book, you’ll have to
    do extra configuration to work on some of the more sophisticated projects in later
    chapters. See [Appendix C](appendix-c.xhtml) for details.*'
  prefs: []
  type: TYPE_NORMAL
- en: A Local PHP Installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Online editors like Replit can be fantastic, but they may be slow and restricted
    on free plans, and they require a reliable, fast internet connection. Many developers
    instead prefer to work locally on their own machine. To do this, the first step
    is to install PHP on your computer. If you haven’t already done so, follow the
    guidelines in [Appendix A](appendix-a.xhtml) to install the latest version of
    PHP for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Once PHP is installed, you’ll need an *integrated development environment (IDE)*
    where you can write your code. An IDE is a powerful text editor that includes
    useful programming tools like a terminal, sophisticated search-and-replace functions,
    code spelling correction, and even automatic code generation for common tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll focus on local PHP development with PhpStorm, a popular
    IDE from JetBrains. Anyone can use it free for 30 days, and from there many people
    (such as students, teachers, and those in coding bootcamps, user groups, and open
    source projects) can get a free license. Visit *[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)*
    to download PhpStorm and follow the installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you don’t want to use PhpStorm, other free IDEs offer plug-ins to assist
    your PHP coding, including Visual Studio Code, Eclipse, and Apache NetBeans.*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating “Hello, world!” with PhpStorm
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s create a “Hello, world!” project with PhpStorm, similar to the default
    script that comes with Replit’s PHP CLI template. Open the PhpStorm IDE, click
    **New Project**, and choose **PHP Empty Project** from the list of possible templates.
    Select a location for the project and change the *untitled* default name to your
    desired project name. Make sure to include a forward slash before your project’s
    name in the location path, as in */program1*. Then click **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm will set up a new folder with your chosen project name in the desired
    location. All the files for the project will be contained in this folder; more
    complex projects might also have subfolders to organize data, program files, configuration
    files, and so on. With the folder created, PhpStorm will load into the project-editing
    view shown in [Figure 1-4](#fig1-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-4: The three main PhpStorm panels'
  prefs: []
  type: TYPE_NORMAL
- en: The top-left panel in PhpStorm shows the project folder and its contents. The
    top-right panel is where you edit your code and data files. Click the Terminal
    (**>_**) icon in the left-hand column of the application window to open a command
    line terminal at the bottom of the application window, where you can enter commands
    and see the text output of your programs. This terminal automatically opens at
    the project folder location.
  prefs: []
  type: TYPE_NORMAL
- en: We’re ready to add a basic “Hello, world!” script to the project. Select your
    project folder in the top-left panel of the application window and then choose
    **File** ▸ **New** ▸ **PHP File** from the top menu. Enter **hello** for the filename
    (PhpStorm will add the .*php* file extension for you) and click **OK**. You should
    see this new *hello.php* file appear in the project contents panel, and the file
    should be opened for editing in the code-editing panel, already containing the
    opening PHP tag (<?php) needed to designate the file’s contents as PHP code. Now
    edit the file so it matches the code in [Listing 1-3](#lis1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-3: Our “Hello, world!” program in hello.php'
  prefs: []
  type: TYPE_NORMAL
- en: As in our Replit command line program, this code simply prints out the text
    Hello, world! followed by a newline character (\n). Notice that this time the
    statement uses print rather than echo to display the text. The two are largely
    interchangeable; see the following “print or echo?” box for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run your script, open the Terminal panel (if you haven’t already done so)
    and enter the following at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You should see the Hello, world! message appear on the next line in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: A second way to run your script in PhpStorm is to click the green Run button
    (next to the green “bug” button) at the top right of the application window. This
    should execute the file currently being edited. If clicking the button opens a
    drop-down menu offering a choice of PHP and JS (JavaScript) ways to run the script,
    choose the PHP option.
  prefs: []
  type: TYPE_NORMAL
- en: If you execute the script this way, a Run panel should open at the bottom of
    the screen showing the PHP engine you’re using and the location of the script
    being executed. This information is useful if you have multiple versions of the
    PHP engine on a single computer so that you can test scripts for compatibility
    with the different engines. Below this should be the output of running the program,
    followed by an exit code of 0 indicating the program successfully completed execution.
  prefs: []
  type: TYPE_NORMAL
- en: Running a PHP Web Server Locally
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When you install PHP, it comes with a built-in web server for testing web development
    projects locally on your system. You can see information about this web server
    (and verify that it’s working) by using the phpinfo() function. This function
    generates a long string of HTML text reporting details about the current PHP installation.
    Running a script that calls this function is a useful first step when testing
    any PHP system for web development, whether on your local machine computer or
    on a hosted web server.
  prefs: []
  type: TYPE_NORMAL
- en: Using PhpStorm (or another IDE of your choice), create a new project in a folder
    named *web_project_1*. Then create a new file for the project called *index.php*.
    As mentioned, the name *index* indicates this will be the default file that the
    web server hosting the project will return. Edit the file to match the contents
    of [Listing 1-4](#lis1-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-4: Our info web application in index.php'
  prefs: []
  type: TYPE_NORMAL
- en: After the obligatory opening PHP tag, you use the statement print phpinfo();
    to display the report that results from calling the phpinfo() function. You can
    view this report as a nicely formatted web page by executing the script in a web
    browser. In PhpStorm, choose **View** ▸ **Open in Browser** ▸ **Built-in Preview**,
    or click the PhpStorm icon when your mouse is in the file-editing panel (see [Figure
    1-5](#fig1-5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-5: Using the PhpStorm web preview'
  prefs: []
  type: TYPE_NORMAL
- en: Launching the built-in preview should run the PHP web server and display the
    results of the *index.php* script in a sample browser window within PhpStorm,
    as shown in [Figure 1-6](#fig1-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure1-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-6: The output of the phpinfo() function in the PhpStorm preview'
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to scroll through this web page to learn more about your system’s
    PHP setup. You’ll find the version of the PHP engine, the location of the *php.ini*
    configuration file, information about what database extensions (if any) are enabled,
    the names of key contributors to the PHP language, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view the result of your *index.php* script in a real web browser
    like Google Chrome or Mozilla Firefox rather than within PhpStorm. (If you’re
    using a different IDE, this may be your only option.) First, open the IDE’s terminal
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This tells PHP to launch its built-in web server and make the current project
    available at *localhost:8000*. Here, *localhost* refers to your local computer
    system, and *8000* sets the port number. Each application that needs to send and
    receive messages over the internet needs a unique port number; you can think of
    these ports as different mailboxes at the same location. Web servers for testing
    purposes usually use port number 8000 or 8080, whereas production (live) web servers
    usually run at port 80\. Personally, I always use 8000 when developing locally.
  prefs: []
  type: TYPE_NORMAL
- en: With the web server running, open a web browser and enter **localhost:8000**
    in the address bar. You should see your PHP script’s output as before. When you’re
    done, go back to the terminal and press CTRL-C to terminate the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Note that to view a script that isn’t named *index.php* in the browser, you’ll
    have to append the script’s filename to the end of the URL in the browser address
    bar. For example, to view the *hello.php* script from [Listing 1-3](#lis1-3) as
    a web page, you would first run the PHP web server with the php -S localhost:8000
    command, then navigate to *localhost:8000/hello.php* in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Template Text vs. PHP Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP is a popular language for web development because of how easy it is for
    PHP scripts to output HTML (or CSS or JavaScript) for display in a web browser.
    Some parts of the output are typically unchanging *template text*, while other
    parts are dynamically generated through the execution of PHP program statements.
    This combination of static template text and dynamic, code-generated text is the
    backbone of just about any interactive website.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, think about viewing a shopping cart at an online retail site.
    The web designer doesn’t need to write a separate script for displaying every
    possible configuration of items in a shopping cart. They just have to write one
    script that mixes the generic template text for the elements that would appear
    in any shopping cart (the hidden HTML head elements, a navigation bar, the company
    logo, and the like) with the PHP code needed to dynamically fill in the name,
    price, quantity, and other details of each specific cart item.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to mix template text with PHP code is why we’ve needed the opening
    <?php tag in our scripts so far, and why we sometimes need the closing ?> tag
    as well. Anything outside these tags is treated as template text and will be output
    verbatim; anything inside these tags is interpreted as PHP code and executed accordingly.
    If the script consists entirely of PHP code, as in [Listings 1-1](#lis1-1), [1-3](#lis1-3),
    and [1-4](#lis1-4), then only the opening <?php is needed; if the PHP code is
    followed by template text, as in [Listing 1-2](#lis1-2), the closing ?> tag is
    needed as well.
  prefs: []
  type: TYPE_NORMAL
- en: To clarify the difference between template text and PHP code, let’s write an
    example script that combines the two. Create a new project (either online with
    Replit or locally with PhpStorm), and inside this project create a new file called
    *hello2.php*. Edit the file to match the contents of [Listing 1-5](#lis1-5) exactly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-5: The hello2.php script, featuring template text with no PHP code-block
    tags'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first and third lines of this script are template text and are meant to
    be output directly when the script is executed. The middle line is PHP code to
    output the phrase Hello, world! followed by a line break. Or is it? Try running
    this script by entering php hello2.php in a command line terminal. Here’s the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The output reproduces all three lines of text verbatim, just as they appear
    in the file. In particular, the middle line includes PHP code elements like the
    print keyword, quotation marks, and semicolon that weren’t meant to be seen. The
    problem is that we haven’t included any opening or closing tags to designate the
    middle line as PHP code, so the entire script has been interpreted as template
    text and output directly.
  prefs: []
  type: TYPE_NORMAL
- en: Notice also that the last line of output ends with a new terminal prompt (in
    this case, a percent symbol). This is because spaces, tabs, and newline characters
    are copied exactly as they’re written when they appear outside the PHP script
    tags as template text. The terminal then picks up right away with a new prompt
    wherever the output leaves off, without adding an extra line break. Had we included
    a blank line at the end of the *hello2.php* script, the new terminal prompt would
    appear on its own line.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s update our script to fix both of these problems. [Listing 1-6](#lis1-6)
    shows a revised version of *hello2.php*, with the changes bolded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-6: Fixing hello2.php to distinguish template text from PHP code'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added an opening <?php tag before the print statement and a closing ?>
    tag after it. This tells the PHP interpreter that what falls between the tags
    should be interpreted and executed as PHP code. We’ve also added a blank line
    to the end of the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you rerun this script, the PHP engine should now find the starting and ending
    PHP program tags wrapped around the print "Hello, world!\n"; statement, and so,
    as well as outputting template text outside those tags, it will execute that line
    of code to print out Hello, world! and a newline character. Here’s the result
    of executing the script again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This time, notice that the first and last lines of the script have been output
    verbatim as template text, while the middle line contains only the Hello, world!
    message, indicating it has successfully been interpreted as PHP code. The new
    terminal prompt now also appears on its own line, since we included a blank line
    at the end of the script in [Listing 1-6](#lis1-6).
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Comments* are a useful feature of any programming language. They’re a way
    to tell the PHP engine to ignore some text written within a PHP code block, so
    the text will neither be output nor be interpreted as code that should be executed.'
  prefs: []
  type: TYPE_NORMAL
- en: Comments can play several roles in a computer program. First, they’re a way
    to embed human-readable notes in the code, such as an explanation of how something
    works, why you’ve done something the way you have, or a reminder about something
    you still need to do. Second, turning one or more lines of code into a comment
    is a great way to temporarily disable that code while debugging or trying an alternative
    way of doing something, without having to delete the code altogether. Finally,
    comments can also contain special content for preprocessing tools such as documentation
    generators or code-testing utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with most languages, PHP provides several ways to define comments. A single-line
    comment begins with two forward slashes (//) and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything on the line after the two slashes is treated as a comment and ignored
    when the code is executed. This means you can place a comment after a program
    statement on the same line, and the program statement itself will still be executed,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here print 2 + 2 will be executed, resulting in an output of 4, but the PHP
    engine will ignore the // Should print 4 comment at the end of the line.
  prefs: []
  type: TYPE_NORMAL
- en: A comment that starts with /* and ends with */ can span multiple lines. [Listing
    1-7](#lis1-7) illustrates this multiline comment syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-7: A multiline comment example'
  prefs: []
  type: TYPE_NORMAL
- en: This style of comment is especially useful if you have a longer block of code
    that you want to temporarily disable, or *comment out*.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You may also meet the older shell-style single-line comment, which begins
    with the* # *character rather than two slashes, if you work with or have to maintain
    legacy code written many years ago. While these shell-style comments are still
    valid in PHP programs, the* // *syntax is the preferred style of single-line comment
    in modern PHP programming.*'
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A distinguishing feature of computer programs is that they are *dynamic*, meaning
    their behavior can change each time they’re executed based on different data and
    events. Fundamental to this is the use of *variables*, named values or references
    to data within code. Variables allow you to store values and refer to them with
    a meaningful name (an *identifier*).
  prefs: []
  type: TYPE_NORMAL
- en: They’re called variables because the value they refer to can change each time
    a program is executed. For example, a variable might refer to the current date
    or time, and a program might have logic to do something special based on the value
    of this variable. Perhaps it will display a greeting on the user’s birthday or
    trigger an alarm each day at 6 AM. Another variable might represent the size of
    a logfile, and the program might automatically back up the contents of this file
    and start a new one whenever the size exceeds a certain threshold.
  prefs: []
  type: TYPE_NORMAL
- en: The values of variables don’t just change from one run of a program to another;
    they can also change *during* the course of a program’s execution. For example,
    a variable representing the total value of an online shopping cart will start
    at 0 and then update as items are added or removed. A variable holding the number
    of simultaneous users logged into a system would also change as a program runs.
    At busy times, if the value is very high, more memory or disk space may need to
    be added to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Creating Variables'
  prefs: []
  type: TYPE_NORMAL
- en: 'You create a PHP variable by giving it a name and assigning it a value. Here,
    for example, we create a variable called $age and assign it a value of 21:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: PHP variable names must begin with a dollar sign ($), something that distinguishes
    PHP code from almost all other programming languages. Assigning a value to a variable
    hinges around an equal sign (=), known in this context as the *assignment operator*.
    The variable name goes on the left of the equal sign and its value on the right.
    Since setting a variable’s value is a type of statement, the whole thing ends
    with a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: The code to the right of the assignment operator is an expression. An *expression*
    is something that yields a single value or can be evaluated into a single value.
    The simplest expression is simply a literal value, like the number 21 in this
    example. A *literal* is a value that is expressed as itself. Examples are 21 (the
    whole number twenty-one), 3.5 (the floating-point number three-point-five), true
    (the truth value true), and "Matt Smith" (the text string Matt Smith).
  prefs: []
  type: TYPE_NORMAL
- en: Other expressions are more complex. They might involve mathematical calculations,
    incorporate other variables, or even, as you’ll see in [Chapter 5](chapter5.xhtml),
    feature a call to a function. In these cases, the expression must be *evaluated*,
    meaning its resulting value is determined, before that value is assigned to the
    variable. [Listing 1-8](#lis1-8) illustrates some examples of assignment statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-8: Examples of assigning the value of an expression to a variable'
  prefs: []
  type: TYPE_NORMAL
- en: We first assign the $username variable the value "matt", a string literal. Variables
    can hold values representing many types of data, as we’ll discuss in detail in
    [Chapter 2](chapter2.xhtml). We next assign the $total variable the value of the
    calculation 3 + 5. This variable will therefore hold the number 8. For the value
    of the $numSlices variable, we multiply the value of another variable, $numPizzas,
    by 8 (the * symbol denotes multiplication in PHP). Finally, we set the $timestamp
    variable to the value that results from calling the time() function. (You’ll learn
    more about how to get values out of functions in [Chapter 5](chapter5.xhtml).)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to execute the code in [Listing 1-8](#lis1-8), it won’t quite work.
    PHP will produce a warning message like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The problem here is that the $numPizzas variable is *undefined*, meaning it
    hasn’t been given a value. It’s important to always assign a value to a variable
    before you first make use of it.  #### Using Variables'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created a variable, you can use its name anywhere you need to reference
    that variable’s value. For example, [Listing 1-9](#lis1-9) shows a program illustrating
    how to use variables to calculate and print the total number of pizza slices,
    given a number of pizzas. Create a *pizza.php* file containing the contents of
    this listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-9: Working with variables in pizza.php'
  prefs: []
  type: TYPE_NORMAL
- en: First, we assign the numeric value 1 to the $numPizzas variable. Then we multiply
    the value of $numPizzas by 8 to assign the value of the $numSlices variable. Remember,
    variables must be written starting with a dollar sign; you’ll get used to this
    very quickly as you write more PHP. We next use a print statement to show the
    value inside $numSlices, followed by another print statement with the \n newline
    character to create a line break.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, the value of a variable can change while a program is running,
    so we next update the value inside the $numPizzas variable from 1 to 3. Then we
    update the value of $numSlices by again multiplying $numPizzas by 8, and we print
    out the new value. Here’s the result of executing this program at the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the value of $numSlices changes from 8 to 24 over the course of
    the program. These values, in turn, are calculated based on the changing values
    of $numPizzas. Try changing the number inside the variable $numPizzas yourself
    to get a different number of slices.
  prefs: []
  type: TYPE_NORMAL
- en: Naming Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A few rules and conventions exist for naming variables in PHP. First and foremost,
    as we’ve already discussed, all variable names must start with a dollar sign.
    If you forget the dollar sign when referencing a variable, PHP will usually report
    an undefined constant fatal error, and the program will crash. (We’ll discuss
    constants in the next section.)
  prefs: []
  type: TYPE_NORMAL
- en: The next character in a variable name after the dollar sign must be a letter
    of the alphabet (or in certain cases, an underscore). By convention, this letter
    should be lowercase. While a capital letter is technically permitted, an initial
    capital is usually reserved for class names rather than variable names. (You’ll
    begin learning about classes and object-oriented programming in [Part V](part5.xhtml).)
    The remaining symbols in a variable name can be letters, numerals, or underscores.
  prefs: []
  type: TYPE_NORMAL
- en: 'Single-word variable names should typically be all lowercase, as in $name or
    $total. For variable names with multiple words, we follow two common conventions.
    One is *snake case* : everything is lowercase, and the words are separated by
    underscores, as in $game_lives_remaining or $customer_number. The other is *lower
    camel case*: the first word is all lowercase, and subsequent words start with
    a capital letter, as in $gameLivesRemaining or $customerNumber.'
  prefs: []
  type: TYPE_NORMAL
- en: The most important rules of thumb are to be consistent in whatever naming convention
    you choose, to follow PHP’s style recommendations when possible, and above all,
    to choose names that clearly communicate what the variable represents. A name
    like $customerNumber is clearer than something abbreviated like $custNo and certainly
    clearer than a meaningless variable name like $x or $variable.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that PHP variable names are case sensitive, so identifiers like
    $username and $userName will be treated as separate variables. If you get the
    capitalization wrong when you reference a variable (or otherwise type the variable
    name incorrectly), PHP won’t know what you mean. [Listing 1-10](#lis1-10) shows
    an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-10: Misspelling a variable name'
  prefs: []
  type: TYPE_NORMAL
- en: 'We assign the value "matt" to the $username variable, then attempt to print
    the value of this variable. Because of the incorrect capitalization in $userName,
    however, executing this script at the command line will result in a warning message
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Because PHP variables are case sensitive, the PHP engine interprets $userName
    as a reference to a completely different variable that hasn’t previously been
    given a value. In PHP’s eyes, this is therefore the same problem as trying to
    use the $numPizzas variable without first defining it in [Listing 1-8](#lis1-8).
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that while some aspects of PHP, like variable names, are case sensitive,
    other aspects of the language are case insensitive, meaning capitalization doesn’t
    matter. These include keywords like if, for, switch, and print; data types such
    as int and string; values such as true and false; and function and method names.
    That said, it’s common practice to use lowercase for language keywords and data
    types, and lower camel case for function and method names. The exercises at the
    end of the chapter suggest a coding style guide that can help you learn more about
    these conventions.
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some values never change, such as the value of *π* (always 3.14) or the neutral
    value on the pH scale (always 7). When referencing such values in code, it’s best
    to use a *constant* rather than a variable. Unlike a variable, once a constant
    is defined, its value can’t be updated. By convention, the names of constants
    are written in *upper snake case*, with all capital letters and underscores between
    words, as in MAX_PROJECTS or NEUTRAL_PH. Unlike variables, constants don’t start
    with a dollar sign.
  prefs: []
  type: TYPE_NORMAL
- en: Some constants are built into the PHP language. [Table 1-1](#tab1-1) lists a
    few examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1-1: Examples of Built-in PHP Constants'
  prefs: []
  type: TYPE_NORMAL
- en: '| Constant | Description | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| M_PI | π, the ratio of a circle’s circumference to its diameter | 3.1415926535898
    |'
  prefs: []
  type: TYPE_TB
- en: '| M_E | e, Euler’s number | 2.718281828459 |'
  prefs: []
  type: TYPE_TB
- en: '| PHP_INT_MAX | The largest integer that can be supported by the installed
    PHP system | Usually 9223372036854775807 for 64-bit systems |'
  prefs: []
  type: TYPE_TB
- en: You can also create your own custom constants by using the define() function.
    The script in [Listing 1-11](#lis1-11) shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-11: Defining and printing a constant'
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the define() function to create a constant named MAX_PROJECTS with
    the value 99. This makes the constant available for use anywhere in the code.
    We then print out the value of the constant as part of a message. (Multiple print
    statements in a row will output to the same line if they don’t contain any line
    breaks; the final print "\n" adds a newline to ensure that the next output—in
    this case, the next command line prompt—will appear on its own line.) The output
    of running this script should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the constant’s name must be enclosed in quotation marks when we
    create it with the define() function. Without these quotation marks, creating
    the constant wouldn’t work. For example, if you were to write define(MAX_PROJECTS,
    99) without quotes, PHP would interpret MAX _PROJECTS as a reference to a previously
    defined constant and would report an error. Once you’ve defined a constant, however,
    you don’t need the quotation marks when you reference it.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The PHP documentation rather confusingly refers to numeric and Boolean literals
    as* constants*, although it also uses the term* string literals*. When reading
    that documentation, it’s therefore useful to distinguish between simple constants
    (literal values themselves) and named constants (such as those created with the*
    define() *function).*'
  prefs: []
  type: TYPE_NORMAL
- en: Operators and Operands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Operators* are the programming language symbols we use to manipulate data,
    such as the plus sign (+) for numeric addition and the equal sign (=) for assigning
    a value to a variable. *Operands* are the values (literals, variables, or complex
    expressions) that an operator works on. For example, the numeric addition operator
    expects two operands: one number to the left of the plus sign and another number
    to the right, as in 2 + 2 or $price + $salesTax.'
  prefs: []
  type: TYPE_NORMAL
- en: PHP has different operators for working with different types of data. In this
    section, we’ll focus primarily on operators for numeric values. In later chapters,
    we’ll consider other operators as well, such as operators for comparing values
    ([Chapter 2](chapter2.xhtml)) and for manipulating logical true/false values ([Chapter
    4](chapter4.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic Operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: PHP has *arithmetic operators* for basic mathematical calculations, such as
    addition (+), subtraction (-), multiplication (*), and division (/). These are
    all *binary operators*, meaning they require two operands. PHP also has the **
    operator for raising a number to a given power and the modulo operator (%), which
    divides one number by another and reports the remainder. [Table 1-2](#tab1-2)
    summarizes these operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1-2: The Six Binary (Two-Operand) Arithmetic Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example expression | Expression value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Addition | Returns the sum of the two operands | 3 + 1 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtraction | Returns the difference of the two operands | 10 - 2 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Multiplication | Returns the product of the two operands | 2 * 3 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Division | Returns the quotient of the two operands | 8 / 2 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| Modulo | Returns the remainder of the first operand divided by the second
    | 8 % 3 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exponentiation | Returns the first operand raised to the power of the second
    | 2 ** 3 | 8 |'
  prefs: []
  type: TYPE_TB
- en: As in mathematics, these operators have an *order of precedence* that controls
    the way an expression is evaluated when it contains multiple operations. The arithmetic
    operators for multiplication, division, and modulo have higher precedence, while
    the operators for addition and subtraction have lower precedence. Therefore, in
    the arithmetic expression 1 + 2 * 3, the 2 * 3 component will first be evaluated
    to 6, and then 1 + 6 will be evaluated, so the whole expression evaluates to 7.
    You can use parentheses to force precedence; for example, the expression (1 +
    2) * 3 evaluates to 9 rather than 7 since the parentheses force the addition component
    to be evaluated to 3 before the multiplication component.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*See the PHP documentation at* [https://www.php.net/manual/en/language.operators.precedence.php](https://www.php.net/manual/en/language.operators.precedence.php)
    *for a complete list of the order of precedence for all PHP’s operators.*'
  prefs: []
  type: TYPE_NORMAL
- en: Combined Arithmetic Assignment Operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ve already discussed how the basic = assignment operator takes a value and
    assigns it to a variable. Other assignment operators, such as += and -=, combine
    assignment with arithmetic. These combined operators exist because it’s common
    to want to take the value in a variable, perform a calculation with it, and store
    the result back in the same variable, replacing the previous value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, say we have a $total variable for keeping track of the total
    cost of the items in an online shopping cart. Every time the user adds or removes
    an item from the cart, we’d want to change $total by the cost of that item. We
    could do this with the regular = operator by writing something like $total = $total
    + 25 or $total = $total - 15. With combined arithmetic assignment operators, however,
    we can accomplish the same task by using more concise syntax: $total += 25 or
    $total -= 15. These statements instruct the PHP engine to update the value of
    the $total variable by adding 25 or subtracting 15 from its previous value.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar arithmetic assignment operators are used for the other arithmetic operations.
    For instance, the *= operator multiplies a variable by a given value. The others,
    /=, %=, and **= for division, modulo, and exponentiation, respectively, are used
    much less often.
  prefs: []
  type: TYPE_NORMAL
- en: Increment and Decrement Operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Numbers can also be *incremented* (increased by 1) or *decremented* (decreased
    by 1) using special operators: a double plus sign (++) for incrementing and a
    double minus sign (--) for decrementing. As with the combined arithmetic assignment
    operators, ++ and -- provide a more concise syntax for a common programming task.
    For example, to add 1 to the existing value of the $age variable, we could use
    the basic assignment operator and write $age = $age + 1, or use an arithmetic
    assignment operator and write $age += 1. With the increment operator, however,
    we simply write $age++. Likewise, $age-- subtracts 1 from the value of $age. These
    are examples of *unary operators*, meaning they expect only a single operand.'
  prefs: []
  type: TYPE_NORMAL
- en: When you want to use the result of an increment or decrement operation in an
    expression, the placement of the operator before or after the value it operates
    on matters. Say $age contains an integer value of 21. The expression $age++ yields
    the current value of $age (21) and then increments the variable. On the other
    end, ++$age will first apply the increment and then yield the variable’s newly
    incremented value (22). [Listing 1-12](#lis1-12) illustrates this distinction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-12: Demonstrating the difference between pre- and post-increment
    operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we set both $person1Age and $person2Age to 21, then use ++ to increment
    each person’s age. However, since we use ++$person1Age in one case ❶ and $person2Age++
    in the other ❷, the printed results are different, as the script’s output shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Both times we print $person1Age, we see 22 in the output. This is because placing
    the ++ operator before the variable ensures that its value is incremented from
    21 to 22 before it’s first printed. By contrast, placing the ++ operator after
    $person2Age allows us to first see its original value of 21 ❶, since it forces
    the increment operation to take place after the variable’s value is used in the
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid confusion about whether the pre- and post-increment value will be
    used, many programmers opt to use two separate lines of code: one with a statement
    incrementing a variable’s value, and another with a statement to make use of that
    new value, as in [Listing 1-13](#lis1-13).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-13: Separating the increment operation from the print statement'
  prefs: []
  type: TYPE_NORMAL
- en: Here we use one statement to only increment $person1Age and another statement
    to only print the variable’s value. This unambiguously ensures that the resulting
    output will be 22.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve covered some important PHP programming basics in this chapter. We looked
    at two ways to create and run PHP programs: using the Replit online environment
    and using the PhpStorm IDE on your local computer. We covered statements, expressions,
    variables, constants, and operators, which are all key building blocks of computer
    programs, and we discussed how to use comments to help make code more readable
    for humans and to temporarily disable blocks of code when developing and debugging
    programs. We also took a first look at how to interweave PHP program statements
    with unchanging template text, a fundamental technique for creating web applications
    that can dynamically customize the web pages returned to users.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 1.   Visit the PHP website, *[https://www.php.net](https://www.php.net)*, and
    get to know the layout of the language’s documentation pages. They will be a great
    reference when you’re programming in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 2.   Visit another handy online PHP resource, PHP the Right Way (*[https://phptherightway.com](https://phptherightway.com)*).
    This website is a collection of best practices in the PHP programming community.
    Almost everyone in the community now follows the same code-styling guidelines,
    which makes PHP code from different programmers easy to read, understand, and
    contribute to. You can read about these guidelines at *[https://phptherightway.com/#code_style_guide](https://phptherightway.com/#code_style_guide)*,
    where you’ll also find links to specific style recommendations from the PHP Framework
    Interop Group (PHP-FIG), the unofficial group of international PHP professionals
    driving the language’s coding standards.
  prefs: []
  type: TYPE_NORMAL
- en: '3.   Use comments to disable some of the lines in the following listing so
    that only Cat, Dog, and Helicopter are printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 4.   Write a script that creates a $name variable containing your name and uses
    that variable to print out the message My name is your name followed by a newline
    character.
  prefs: []
  type: TYPE_NORMAL
