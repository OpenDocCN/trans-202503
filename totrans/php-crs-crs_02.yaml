- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 1 PHP PROGRAM BASICS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 PHP 程序基础
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: 'In this chapter, you’ll learn two ways to create and run PHP programs: using
    an online coding environment and using an editor installed locally on your own
    computer. We’ll try both techniques to practice key programming tasks like printing
    out text messages, assigning values to variables, and working with data of different
    types. We’ll also explore core PHP language features including comments, constants,
    and expressions.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍两种创建和运行 PHP 程序的方法：使用在线编码环境和使用本地安装的编辑器。我们将尝试这两种方法，以练习一些关键的编程任务，比如打印文本消息、给变量赋值以及处理不同类型的数据。我们还将探索
    PHP 语言的核心特性，包括注释、常量和表达式。
- en: Two Methods to Run PHP
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 PHP 的两种方法
- en: Often the easiest way to learn a programming language is to use an online environment
    that has everything already set up for you. This lets you start coding right away
    and see the results instantly, without having to install and configure language
    engines, code editors, web servers, or other tools. On the other hand, some prefer
    the customization and control that comes from working in a programming environment
    installed on their own machine.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，学习编程语言的最简单方法是使用一个已经为你配置好的在线环境。这样你可以立刻开始编码并实时查看结果，而不需要安装和配置语言引擎、代码编辑器、网络服务器或其他工具。另一方面，一些人更喜欢自己计算机上安装的编程环境，因为它提供了更多的自定义和控制。
- en: In this section, you’ll get to explore both approaches as you write your first
    PHP programs. You can then use either method to follow along with the examples
    throughout this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将探索这两种方法，并写出你的第一个 PHP 程序。然后，你可以使用任意一种方法来跟随本书中的示例。
- en: The Replit Online Coding Environment
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Replit 在线编码环境
- en: Several online sites facilitate interactive PHP development and can run PHP
    web servers for you. We’ll focus on Replit (*[https://replit.com](https://replit.com)*),
    a popular service that’s free to use for starter projects. To try it out, go to
    the Replit website and create an account.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个在线平台可以支持交互式 PHP 开发，并且可以为你运行 PHP 网络服务器。我们将重点介绍 Replit (*[https://replit.com](https://replit.com)*)，这是一个广受欢迎的服务，适合初学者的免费项目。要试用它，请访问
    Replit 网站并创建一个账户。
- en: NOTE
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*Replit is named for the* read-evaluate-print loop (REPL), *a type of computer
    environment where the programmer enters an expression and the system immediately
    executes it, prints out the response, and waits for the next input. A command
    line terminal, where you enter single-line commands and the terminal executes
    those commands, is a type of REPL.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*Replit 的名称源自* 读-评估-打印循环（REPL），*这是一种计算机环境，在这种环境中，程序员输入一个表达式，系统立即执行它，打印出响应并等待下一个输入。命令行终端就是一种
    REPL，程序员输入单行命令，终端执行这些命令。*'
- en: 'Replit features two official, preconfigured templates for creating PHP projects:
    PHP CLI (short for *command line interface*) and PHP Web Server. The former is
    appropriate for projects that simply output text in a command line terminal window
    or work with data files, while the latter is for web development. Let’s take a
    look at each of these templates so you can learn a bit about how PHP programs
    work in the process.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Replit 提供了两种官方的、预配置的模板来创建 PHP 项目：PHP CLI（即*命令行界面*）和 PHP Web 服务器。前者适用于仅在命令行终端窗口输出文本或处理数据文件的项目，而后者则用于
    web 开发。我们来看看这两个模板，以便在学习 PHP 程序工作原理的过程中获得一些了解。
- en: Creating a Command Line Interface Project
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建命令行界面项目
- en: To create a PHP command line interface project, go to the home screen of your
    Replit account and click **Create Repl**. This will launch a pop-up window where
    you can search for project templates. Enter **PHP** into the search box. The results
    should include the PHP CLI and PHP Web Server templates from Replit. (Below these
    official Replit templates, you may also see other templates created by Replit
    users and tagged for the PHP language.) Choose **PHP CLI** and enter a name for
    your project, or take the random-words default name offered. Then click **Create
    Repl** to launch the project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 PHP 命令行界面项目，首先进入 Replit 账户的主页，然后点击 **Create Repl**。这将弹出一个窗口，你可以在其中搜索项目模板。在搜索框中输入
    **PHP**。结果中应包括 Replit 的 PHP CLI 和 PHP Web 服务器模板。（在这些官方的 Replit 模板下，你还可能看到一些由 Replit
    用户创建并标注为 PHP 语言的其他模板。）选择 **PHP CLI**，并为你的项目输入一个名称，或者使用默认的随机单词名称。然后点击 **Create
    Repl** 来启动项目。
- en: The website will take a short while to set up your new project, including creating
    its file and folder structure and starting up a cloud virtual machine to run it.
    When the project loads, you’ll be presented with the three-column screen shown
    in [Figure 1-1](#fig1-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网站将花费一些时间来设置你的新项目，包括创建文件和文件夹结构，并启动一个云虚拟机来运行它。当项目加载时，你将看到如[图 1-1](#fig1-1)所示的三列屏幕。
- en: '![](../images/figure1-1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-1.jpg)'
- en: 'Figure 1-1: The new PHP CLI project screen, with the default “Hello, world!”
    script'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-1：新 PHP CLI 项目屏幕，带有默认的“Hello, world!”脚本
- en: The left column lists the project’s files and folders, the middle column is
    an online code editor, and the right column is the command line terminal output
    (called *Console*) and an interactive terminal (called *Shell*) for the virtual
    computer that Replit has created. The Run button at the top of the screen runs
    the project, at which point any output will be displayed in the console.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧列显示项目的文件和文件夹，中间列是一个在线代码编辑器，右侧列是命令行终端输出（称为*控制台*）和 Replit 创建的虚拟计算机的交互式终端（称为*Shell*）。屏幕顶部的运行按钮会运行项目，此时所有输出将显示在控制台中。
- en: 'A typical PHP project includes one or more files, called *scripts*, saved with
    the.*php* file extension. In this case, the Replit PHP CLI project automatically
    starts with a prewritten file called *main.php*. The file contains PHP code to
    output the message Hello, world! in the console. Writing a program that displays
    this message is a tradition when learning a new language. Besides being fun, it
    provides an opportunity to learn how to name the text files containing your programs,
    how to write valid statements in your language of choice, and how to execute a
    program. What’s more, a “Hello, world!” script serves as a basic test of the language
    tools on the computer system: if the program runs and successfully outputs the
    Hello, world! message, that means PHP is working.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的 PHP 项目包含一个或多个文件，称为*脚本*，并以.*php* 文件扩展名保存。在这种情况下，Replit PHP CLI 项目会自动启动一个名为*main.php*的预编写文件。该文件包含
    PHP 代码，用于在控制台输出消息“Hello, world!”。编写一个显示此消息的程序是学习新语言时的一项传统。除了有趣，它还提供了一个机会，学习如何命名包含程序的文本文件，如何编写有效的语句，以及如何执行程序。更重要的是，“Hello,
    world!”脚本作为计算机系统上语言工具的基本测试：如果程序运行并成功输出“Hello, world!”消息，那么 PHP 就正常工作了。
- en: '[Listing 1-1](#lis1-1) shows the boilerplate “Hello, world!” script that Replit
    provides in *main.php*.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-1](#lis1-1) 显示了 Replit 提供的默认“Hello, world!”脚本，它位于*main.php*中。'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 1-1: The “Hello, world!” program in main.php'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-1：main.php 中的“Hello, world!”程序
- en: The <?php at the start of the script is an opening PHP tag. This tag signals
    that what follows is PHP code. In this case, the code uses the echo command to
    print out the text Hello, world! in the console, followed by a line break denoted
    with a newline character (\n). Notice that the text to be printed is enclosed
    in double quotation marks. These quotes indicate that the text is a *string*,
    a type of data consisting of a sequence of characters. We’ll discuss strings and
    special characters like \n in detail in [Chapter 3](chapter3.xhtml).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本开头的<?php是一个开头的 PHP 标签。此标签表示接下来的内容是 PHP 代码。在这个例子中，代码使用 echo 命令在控制台中打印出文本“Hello,
    world!”，后面跟着一个换行符（\n）。请注意，要打印的文本被双引号括起来。这些引号表示文本是一个*字符串*，它是一种由一系列字符组成的数据类型。我们将在[第
    3 章](chapter3.xhtml)中详细讨论字符串和特殊字符，如 \n。
- en: The echo line of code is an example of a *statement*, a single command directing
    the computer to perform a task (in this case, to display some text). Every PHP
    statement must end with a semicolon (;) to indicate the command is over, as this
    echo statement does. Think of the semicolon as the period at the end of a sentence;
    without it, the statement is considered incomplete.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: echo 语句是一条*语句*的例子，它是一个指示计算机执行某个任务的单一命令（在本例中是显示某些文本）。每个 PHP 语句必须以分号（;）结束，以表示命令结束，就像这个
    echo 语句一样。可以把分号看作是句子结尾的句号；没有它，语句被认为是不完整的。
- en: Running the main.php Script
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 运行 main.php 脚本
- en: Click the green **Run** button to run the *main.php* script. You should see
    the Hello, world! message printed to the console. Congratulations, you’ve just
    run your first PHP program! But what actually happened when you clicked Run?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 点击绿色的**运行**按钮来运行*main.php*脚本。你应该会看到控制台打印出“Hello, world!”消息。恭喜你，你刚刚运行了第一个 PHP
    程序！但是，当你点击“运行”时，实际上发生了什么呢？
- en: PHP is a *scripted* programming language. This means a program called an *interpreter*
    translates the contents of a PHP file into machine code as the file is being executed.
    Other scripted languages include Python and JavaScript. Scripted languages are
    different from *compiled* programming languages like C, C++, and Swift, in which
    the translation happens in a separate step prior to execution. During this extra
    step, all program files are compiled and optimized into one or more executable
    files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是一种*脚本化*编程语言。这意味着一个名为*解释器*的程序会在执行 PHP 文件时将其内容翻译成机器代码。其他脚本化语言包括 Python 和
    JavaScript。脚本化语言不同于 *编译型* 编程语言，如 C、C++ 和 Swift，这些语言的翻译过程发生在执行之前的独立步骤中。在这个额外的步骤中，所有程序文件都会被编译并优化为一个或多个可执行文件。
- en: The interpreter that translates PHP scripts into executable code is usually
    called the *PHP engine*. When you click Replit’s Run button to run the *main.php*
    file, Replit invokes the PHP engine, which then reads the contents of the file
    and interprets and executes the lines of code inside it. For simple PHP scripts
    (such as our Replit *main.php*) that consist of just one or more statements meant
    to be executed in order, this is a straightforward process. Almost all programs
    involve more complex decision logic, however, performing tests so the code can
    respond dynamically to events and determine which statements to execute and in
    which order. The way the PHP engine decides what to do next is referred to as
    the *flow of control*. We’ll explore this concept further when we discuss conditionals
    and loops in [Chapters 4](chapter4.xhtml) and [6](chapter6.xhtml).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将 PHP 脚本转换为可执行代码的解释器通常被称为*PHP 引擎*。当你点击 Replit 的运行按钮来运行 *main.php* 文件时，Replit
    调用 PHP 引擎，PHP 引擎随后读取文件内容并解释执行其中的代码行。对于简单的 PHP 脚本（例如我们的 Replit *main.php*），这些脚本仅由一个或多个按顺序执行的语句组成，整个过程相对简单。然而，几乎所有程序都涉及更复杂的决策逻辑，需要进行测试，以便代码能够动态响应事件并确定执行哪些语句以及按照什么顺序执行。PHP
    引擎决定接下来做什么的方式被称为*控制流程*。我们将在讨论[第 4 章](chapter4.xhtml)和[第 6 章](chapter6.xhtml)中的条件语句和循环时进一步探讨这个概念。
- en: 'Hitting Replit’s Run button isn’t the only way to run a PHP script. You can
    also invoke the PHP engine from the command line by using the php command followed
    by the name of the script you want to execute. To try it out, switch over from
    the Console tab to the Shell tab in the right-hand column of your Replit project
    to bring up an interactive command line terminal. Then enter the following after
    the $ prompt:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Replit 的运行按钮并不是执行 PHP 脚本的唯一方式。你还可以通过命令行调用 PHP 引擎，使用 php 命令并跟上你想要执行的脚本的名称。要尝试这个方法，切换到
    Replit 项目右侧栏的 Shell 标签页，以打开交互式命令行终端。然后在 $ 提示符后输入以下内容：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The php main.php command instructs the PHP engine to execute the *main.php*
    script. As before, this outputs the Hello, world! message. You can use this same
    technique to execute PHP files from the command line on your local machine, where
    you won’t necessarily have Replit’s convenient Run button.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: php main.php 命令指示 PHP 引擎执行 *main.php* 脚本。像以前一样，这会输出 "Hello, world!" 消息。你可以使用相同的方法在本地计算机的命令行上执行
    PHP 文件，在这种情况下，你不一定能够使用 Replit 方便的运行按钮。
- en: '##### Creating a Web Server Project'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '##### 创建 Web 服务器项目'
- en: PHP is primarily used for developing web applications, so let’s now try creating
    a basic web-based PHP project by using Replit’s PHP Web Server template. Go back
    to your Replit account home page and create a new project, this time choosing
    the **PHP Web Server** template after entering **PHP** into the template search
    box. Your new project should look like [Figure 1-2](#fig1-2).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 主要用于开发 web 应用程序，因此现在让我们尝试通过使用 Replit 的 PHP Web 服务器模板来创建一个基本的基于 Web 的 PHP
    项目。返回你的 Replit 主页，创建一个新项目，这次在模板搜索框中输入 **PHP** 后，选择 **PHP Web Server** 模板。你的新项目应该类似于[图
    1-2](#fig1-2)。
- en: '![](../images/figure1-2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-2.jpg)'
- en: 'Figure 1-2: The new PHP Web Server template project screen'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-2：新的 PHP Web 服务器模板项目屏幕
- en: 'The only file shown in the left column is a boilerplate *index.php* file. An
    *index* file such as this has special significance: it represents the default
    file served up when you visit the home page of a website. (We’ll discuss how this
    works in more detail when we explore web programming in [Part III](part3.xhtml).)
    The file’s contents are shown in the middle column. In the right column are the
    Console and Shell tabs, and this is also where a Webview tab will appear when
    we run the web server to show the rendered web page.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 左栏中显示的唯一文件是一个模板 *index.php* 文件。像这样的 *index* 文件具有特殊的意义：它代表着当你访问一个网站的首页时，默认显示的文件。（我们将在[第三部分](part3.xhtml)中详细讨论这如何工作。）该文件的内容显示在中间栏。右栏是控制台和终端标签，这里也是当我们运行
    Web 服务器以显示渲染后的网页时，Webview 标签会出现的地方。
- en: The *index.php* file should contain the code shown in [Listing 1-2](#lis1-2).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*index.php* 文件应包含 [列表 1-2](#lis1-2) 中显示的代码。'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 1-2: The web server script in index.php'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-2：index.php 中的 Web 服务器脚本
- en: The bulk of this file isn’t PHP code but rather the HyperText Markup Language
    (HTML) needed to create a generic web page, as indicated by the opening <html>
    and closing </html> tags at the beginning and end of the file, respectively. As
    we’ll discuss further in “Template Text vs. PHP Code” on [page 13](#pg_13), many
    PHP scripts mix dynamic PHP code meant to be interpreted and executed on the fly
    with static text in a language like HTML. In this case, the only PHP code is an
    echo statement to display the text Hello World ❶. The text is wrapped in HTML
    <p> tags, meaning it will be rendered on the resulting web page as a body paragraph,
    and the entire echo statement is enclosed in PHP tags (the opening <?php tag and
    the closing ?> tag) to indicate that it’s actual PHP code, unlike the surrounding
    HTML.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的大部分内容不是 PHP 代码，而是创建通用网页所需的超文本标记语言（HTML），这一点可以通过文件开头和结尾的 <html> 和 </html>
    标签看到。正如我们在 [第13页](#pg_13) 的《模板文本与 PHP 代码》中将进一步讨论的，许多 PHP 脚本将动态的 PHP 代码（用于即时解释和执行）与
    HTML 这种静态文本混合在一起。在这个例子中，唯一的 PHP 代码是一个 echo 语句，用来显示文本 Hello World ❶。这些文本被包裹在 HTML
    的 <p> 标签中，这意味着它将在渲染后的网页中作为一个正文段落显示，而整个 echo 语句被 PHP 标签（开头的 <?php 标签和结尾的 ?> 标签）包围，以表明它是实际的
    PHP 代码，不同于周围的 HTML。
- en: Running the Web Server Project
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 运行 Web 服务器项目
- en: Click the **Run** button, and Replit will launch a web server hosting the *index.php*
    file and running the PHP engine needed to interpret the PHP code in the file.
    This time, instead of seeing text appear in a Console tab, you should see Hello
    World displayed as a basic web page in the Webview tab (see [Figure 1-3](#fig1-3)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **运行** 按钮，Replit 将启动一个 Web 服务器，托管 *index.php* 文件并运行 PHP 引擎来解释文件中的 PHP 代码。这一次，你不应在控制台标签中看到文本，而应在
    Webview 标签中看到作为基本网页显示的 Hello World（参见 [图 1-3](#fig1-3)）。
- en: '![](../images/figure1-3.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-3.jpg)'
- en: 'Figure 1-3: Viewing the index.php script output in the Replit Webview panel'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-3：在 Replit Webview 面板中查看 index.php 脚本输出
- en: When running the web server, Replit publishes temporary pages to its *replit.dev*
    domain. This means it provides publicly served web pages you can view and interact
    with in a separate web browser tab rather than just through the Replit site itself.
    To try this, click the green *{...}.replit.dev* URL address bar in the Webview
    panel. Then copy the URL shown in the pop-up window and paste it into a new tab
    in your web browser. You should see the same Hello World message rendered as its
    own web page, separate from the Replit interface. Congratulations, you’ve just
    published your first PHP website!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Web 服务器时，Replit 会将临时页面发布到 *replit.dev* 域名。这意味着它提供了公共的网页，你可以在一个独立的浏览器标签中查看和交互，而不仅仅是通过
    Replit 网站本身。要尝试此操作，请点击 Webview 面板中绿色的 *{...}.replit.dev* URL 地址栏。然后复制弹出窗口中显示的
    URL，并将其粘贴到浏览器中新标签页中。你应该会看到相同的 Hello World 消息被渲染为一个独立的网页，与 Replit 界面分开。恭喜你，你已经发布了第一个
    PHP 网站！
- en: NOTE
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you choose to use Replit to follow along with this book, you’ll have to
    do extra configuration to work on some of the more sophisticated projects in later
    chapters. See [Appendix C](appendix-c.xhtml) for details.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你选择使用 Replit 跟随本书进行学习，你将需要做额外的配置来处理后续章节中的一些更复杂的项目。详情请参见 [附录 C](appendix-c.xhtml)。*'
- en: A Local PHP Installation
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 本地 PHP 安装
- en: Online editors like Replit can be fantastic, but they may be slow and restricted
    on free plans, and they require a reliable, fast internet connection. Many developers
    instead prefer to work locally on their own machine. To do this, the first step
    is to install PHP on your computer. If you haven’t already done so, follow the
    guidelines in [Appendix A](appendix-a.xhtml) to install the latest version of
    PHP for your operating system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Replit 这样的在线编辑器非常好用，但它们在免费计划下可能会比较慢并受到限制，并且需要稳定快速的互联网连接。许多开发者更喜欢在自己的机器上进行本地开发。要做到这一点，第一步是安装
    PHP。如果你还没有安装，请按照[附录 A](appendix-a.xhtml)中的指南，安装适合你操作系统的最新版本的 PHP。
- en: Once PHP is installed, you’ll need an *integrated development environment (IDE)*
    where you can write your code. An IDE is a powerful text editor that includes
    useful programming tools like a terminal, sophisticated search-and-replace functions,
    code spelling correction, and even automatic code generation for common tasks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 PHP 安装完成，你将需要一个*集成开发环境（IDE）*来编写代码。IDE 是一个强大的文本编辑器，包含了许多有用的编程工具，如终端、复杂的查找和替换功能、代码拼写检查，甚至为常见任务自动生成代码。
- en: In this section, we’ll focus on local PHP development with PhpStorm, a popular
    IDE from JetBrains. Anyone can use it free for 30 days, and from there many people
    (such as students, teachers, and those in coding bootcamps, user groups, and open
    source projects) can get a free license. Visit *[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)*
    to download PhpStorm and follow the installation instructions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍使用 PhpStorm 进行本地 PHP 开发，PhpStorm 是 JetBrains 出品的一款流行 IDE。任何人都可以免费使用 30
    天，之后许多人（如学生、教师、编程训练营的学员、用户组成员以及开源项目的参与者）可以获得免费许可证。访问 *[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)*
    下载 PhpStorm，并按照安装说明进行操作。
- en: NOTE
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you don’t want to use PhpStorm, other free IDEs offer plug-ins to assist
    your PHP coding, including Visual Studio Code, Eclipse, and Apache NetBeans.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你不想使用 PhpStorm，其他免费 IDE 也提供了辅助 PHP 编程的插件，包括 Visual Studio Code、Eclipse 和
    Apache NetBeans。*'
- en: Creating “Hello, world!” with PhpStorm
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用 PhpStorm 创建“Hello, world!”
- en: Let’s create a “Hello, world!” project with PhpStorm, similar to the default
    script that comes with Replit’s PHP CLI template. Open the PhpStorm IDE, click
    **New Project**, and choose **PHP Empty Project** from the list of possible templates.
    Select a location for the project and change the *untitled* default name to your
    desired project name. Make sure to include a forward slash before your project’s
    name in the location path, as in */program1*. Then click **Create**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 PhpStorm 创建一个“Hello, world!”项目，类似于 Replit 的 PHP CLI 模板中的默认脚本。打开 PhpStorm
    IDE，点击**新建项目**，从可能的模板列表中选择**PHP 空项目**。选择项目的位置，并将*未命名*的默认名称更改为你希望的项目名称。确保在项目名称的路径前加上正斜杠，如*/program1*。然后点击**创建**。
- en: PhpStorm will set up a new folder with your chosen project name in the desired
    location. All the files for the project will be contained in this folder; more
    complex projects might also have subfolders to organize data, program files, configuration
    files, and so on. With the folder created, PhpStorm will load into the project-editing
    view shown in [Figure 1-4](#fig1-4).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm 会在你选择的项目名称下，在指定位置创建一个新文件夹。所有的项目文件都将包含在这个文件夹中；更复杂的项目可能还会有子文件夹，用于组织数据、程序文件、配置文件等。文件夹创建后，PhpStorm
    会加载到项目编辑视图，如[图 1-4](#fig1-4)所示。
- en: '![](../images/figure1-4.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-4.jpg)'
- en: 'Figure 1-4: The three main PhpStorm panels'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-4：PhpStorm 的三个主要面板
- en: The top-left panel in PhpStorm shows the project folder and its contents. The
    top-right panel is where you edit your code and data files. Click the Terminal
    (**>_**) icon in the left-hand column of the application window to open a command
    line terminal at the bottom of the application window, where you can enter commands
    and see the text output of your programs. This terminal automatically opens at
    the project folder location.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm 的左上面板显示项目文件夹及其内容。右上面板是用来编辑代码和数据文件的地方。点击应用程序窗口左侧列中的终端（**>_**）图标，在应用程序窗口底部打开命令行终端，在这里你可以输入命令并查看程序的文本输出。这个终端会自动打开到项目文件夹的位置。
- en: We’re ready to add a basic “Hello, world!” script to the project. Select your
    project folder in the top-left panel of the application window and then choose
    **File** ▸ **New** ▸ **PHP File** from the top menu. Enter **hello** for the filename
    (PhpStorm will add the .*php* file extension for you) and click **OK**. You should
    see this new *hello.php* file appear in the project contents panel, and the file
    should be opened for editing in the code-editing panel, already containing the
    opening PHP tag (<?php) needed to designate the file’s contents as PHP code. Now
    edit the file so it matches the code in [Listing 1-3](#lis1-3).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备向项目中添加一个基础的“Hello, world!”脚本。在应用窗口的左上面板中选择你的项目文件夹，然后从顶部菜单中选择 **文件** ▸ **新建**
    ▸ **PHP 文件**。输入 **hello** 作为文件名（PhpStorm 会自动为你添加 .*php* 文件扩展名），然后点击 **确定**。你应该能在项目内容面板中看到这个新建的
    *hello.php* 文件，并且该文件应该会在代码编辑面板中打开，文件中已经包含了指定文件内容为 PHP 代码所需的 PHP 开始标签（<?php）。现在编辑文件，使其与
    [列表 1-3](#lis1-3) 中的代码匹配。
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 1-3: Our “Hello, world!” program in hello.php'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-3：我们在 hello.php 中的 “Hello, world!” 程序
- en: As in our Replit command line program, this code simply prints out the text
    Hello, world! followed by a newline character (\n). Notice that this time the
    statement uses print rather than echo to display the text. The two are largely
    interchangeable; see the following “print or echo?” box for more information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 和我们在 Replit 命令行程序中一样，这段代码仅仅是打印出文本 Hello, world!，后面跟着一个换行符（\n）。注意，这次语句使用的是 print
    而不是 echo 来显示文本。二者大致可以互换；关于更多信息，请参见下面的“print 还是 echo？”框。
- en: 'To run your script, open the Terminal panel (if you haven’t already done so)
    and enter the following at the command line:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的脚本，请打开终端面板（如果还没打开的话），然后在命令行中输入以下内容：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should see the Hello, world! message appear on the next line in the terminal.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在终端的下一行看到 Hello, world! 消息。
- en: A second way to run your script in PhpStorm is to click the green Run button
    (next to the green “bug” button) at the top right of the application window. This
    should execute the file currently being edited. If clicking the button opens a
    drop-down menu offering a choice of PHP and JS (JavaScript) ways to run the script,
    choose the PHP option.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种在 PhpStorm 中运行脚本的方法是点击绿色的运行按钮（位于绿色“bug”按钮旁边），该按钮位于应用窗口的右上角。这将执行当前正在编辑的文件。如果点击按钮后出现一个下拉菜单，提供
    PHP 和 JS（JavaScript）两种运行脚本的方式，选择 PHP 选项。
- en: If you execute the script this way, a Run panel should open at the bottom of
    the screen showing the PHP engine you’re using and the location of the script
    being executed. This information is useful if you have multiple versions of the
    PHP engine on a single computer so that you can test scripts for compatibility
    with the different engines. Below this should be the output of running the program,
    followed by an exit code of 0 indicating the program successfully completed execution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以这种方式执行脚本，屏幕底部应该会弹出一个运行面板，显示你正在使用的 PHP 引擎以及正在执行的脚本的位置。如果你在一台计算机上有多个 PHP 引擎版本，这些信息非常有用，能够帮助你测试脚本与不同引擎的兼容性。下面应该显示运行程序的输出，后面跟着一个退出代码
    0，表示程序成功完成了执行。
- en: Running a PHP Web Server Locally
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在本地运行 PHP Web 服务器
- en: When you install PHP, it comes with a built-in web server for testing web development
    projects locally on your system. You can see information about this web server
    (and verify that it’s working) by using the phpinfo() function. This function
    generates a long string of HTML text reporting details about the current PHP installation.
    Running a script that calls this function is a useful first step when testing
    any PHP system for web development, whether on your local machine computer or
    on a hosted web server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 PHP 后，它会自带一个内置的 Web 服务器，用于在你的系统上本地测试 Web 开发项目。你可以通过使用 phpinfo() 函数来查看有关此
    Web 服务器的信息（并验证它是否正常工作）。该函数生成一串很长的 HTML 文本，报告有关当前 PHP 安装的详细信息。运行一个调用此函数的脚本是测试任何
    PHP 系统用于 Web 开发时的有用第一步，无论是在本地计算机上还是在托管的 Web 服务器上。
- en: Using PhpStorm (or another IDE of your choice), create a new project in a folder
    named *web_project_1*. Then create a new file for the project called *index.php*.
    As mentioned, the name *index* indicates this will be the default file that the
    web server hosting the project will return. Edit the file to match the contents
    of [Listing 1-4](#lis1-4).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PhpStorm（或你选择的其他 IDE），在名为 *web_project_1* 的文件夹中创建一个新项目。然后为该项目创建一个名为 *index.php*
    的新文件。如前所述，*index* 这个名称表示这是 Web 服务器托管项目时会返回的默认文件。编辑文件，使其与 [列表 1-4](#lis1-4) 中的内容一致。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 1-4: Our info web application in index.php'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-4：我们在 index.php 中的 info Web 应用
- en: After the obligatory opening PHP tag, you use the statement print phpinfo();
    to display the report that results from calling the phpinfo() function. You can
    view this report as a nicely formatted web page by executing the script in a web
    browser. In PhpStorm, choose **View** ▸ **Open in Browser** ▸ **Built-in Preview**,
    or click the PhpStorm icon when your mouse is in the file-editing panel (see [Figure
    1-5](#fig1-5)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在必需的 PHP 开始标签后，你使用语句 print phpinfo(); 来显示调用 phpinfo() 函数后生成的报告。你可以通过在网页浏览器中执行脚本来查看这个报告，它会以格式化良好的网页形式呈现。在
    PhpStorm 中，选择 **视图** ▸ **在浏览器中打开** ▸ **内置预览**，或者在文件编辑面板中，将鼠标放在 PhpStorm 图标上并点击（参见[图
    1-5](#fig1-5)）。
- en: '![](../images/figure1-5.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-5.jpg)'
- en: 'Figure 1-5: Using the PhpStorm web preview'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-5：使用 PhpStorm 的网页预览
- en: Launching the built-in preview should run the PHP web server and display the
    results of the *index.php* script in a sample browser window within PhpStorm,
    as shown in [Figure 1-6](#fig1-6).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 启动内置预览应该会运行 PHP 网页服务器，并在 PhpStorm 中的示例浏览器窗口中显示 *index.php* 脚本的结果，如[图 1-6](#fig1-6)所示。
- en: '![](../images/figure1-6.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure1-6.jpg)'
- en: 'Figure 1-6: The output of the phpinfo() function in the PhpStorm preview'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-6：PhpStorm 预览中的 phpinfo() 函数输出
- en: You may wish to scroll through this web page to learn more about your system’s
    PHP setup. You’ll find the version of the PHP engine, the location of the *php.ini*
    configuration file, information about what database extensions (if any) are enabled,
    the names of key contributors to the PHP language, and more.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望滚动浏览此网页，了解更多关于系统 PHP 设置的信息。你将找到 PHP 引擎的版本、*php.ini* 配置文件的位置、启用的数据库扩展（如果有的话）、PHP
    语言的主要贡献者名称等信息。
- en: 'You can also view the result of your *index.php* script in a real web browser
    like Google Chrome or Mozilla Firefox rather than within PhpStorm. (If you’re
    using a different IDE, this may be your only option.) First, open the IDE’s terminal
    and enter the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在真实的网页浏览器中查看 *index.php* 脚本的结果，比如 Google Chrome 或 Mozilla Firefox，而不是在 PhpStorm
    中查看。（如果你使用的是其他 IDE，这可能是你唯一的选择。）首先，打开 IDE 的终端并输入以下命令：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This tells PHP to launch its built-in web server and make the current project
    available at *localhost:8000*. Here, *localhost* refers to your local computer
    system, and *8000* sets the port number. Each application that needs to send and
    receive messages over the internet needs a unique port number; you can think of
    these ports as different mailboxes at the same location. Web servers for testing
    purposes usually use port number 8000 or 8080, whereas production (live) web servers
    usually run at port 80\. Personally, I always use 8000 when developing locally.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这条命令告诉 PHP 启动其内置的网页服务器，并使当前项目在*localhost:8000*上可用。这里，*localhost* 指代你的本地计算机系统，而
    *8000* 设置了端口号。每个需要通过互联网发送和接收消息的应用程序都需要一个唯一的端口号；你可以把这些端口想象成同一地点的不同邮箱。用于测试目的的网页服务器通常使用
    8000 或 8080 端口，而生产（线上）网页服务器通常使用 80 端口。就个人而言，我在本地开发时总是使用 8000 端口。
- en: With the web server running, open a web browser and enter **localhost:8000**
    in the address bar. You should see your PHP script’s output as before. When you’re
    done, go back to the terminal and press CTRL-C to terminate the web server.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页服务器运行时，打开网页浏览器并在地址栏中输入 **localhost:8000**。你应该会看到与之前相同的 PHP 脚本输出。当你完成时，回到终端并按
    CTRL-C 终止网页服务器。
- en: Note that to view a script that isn’t named *index.php* in the browser, you’ll
    have to append the script’s filename to the end of the URL in the browser address
    bar. For example, to view the *hello.php* script from [Listing 1-3](#lis1-3) as
    a web page, you would first run the PHP web server with the php -S localhost:8000
    command, then navigate to *localhost:8000/hello.php* in your browser.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要在浏览器中查看一个不是 *index.php* 命名的脚本，你需要将脚本的文件名附加到浏览器地址栏 URL 的末尾。例如，要将[列表 1-3](#lis1-3)中的
    *hello.php* 脚本作为网页查看，你首先需要运行命令 php -S localhost:8000 启动 PHP 网页服务器，然后在浏览器中访问 *localhost:8000/hello.php*。
- en: Template Text vs. PHP Code
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板文本与 PHP 代码
- en: PHP is a popular language for web development because of how easy it is for
    PHP scripts to output HTML (or CSS or JavaScript) for display in a web browser.
    Some parts of the output are typically unchanging *template text*, while other
    parts are dynamically generated through the execution of PHP program statements.
    This combination of static template text and dynamic, code-generated text is the
    backbone of just about any interactive website.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: PHP是一种流行的网页开发语言，因为PHP脚本可以轻松地输出HTML（或CSS或JavaScript），以便在网页浏览器中显示。输出的某些部分通常是不变的*模板文本*，而其他部分则通过执行PHP程序语句动态生成。静态的模板文本和动态的代码生成文本的结合构成了几乎所有互动网站的基础。
- en: As an example, think about viewing a shopping cart at an online retail site.
    The web designer doesn’t need to write a separate script for displaying every
    possible configuration of items in a shopping cart. They just have to write one
    script that mixes the generic template text for the elements that would appear
    in any shopping cart (the hidden HTML head elements, a navigation bar, the company
    logo, and the like) with the PHP code needed to dynamically fill in the name,
    price, quantity, and other details of each specific cart item.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，想象一下在一个在线零售网站查看购物车。网页设计师不需要为展示每种可能的购物车物品配置编写单独的脚本。他们只需编写一个脚本，将任何购物车中都会出现的元素的通用模板文本（如隐藏的HTML头元素、导航栏、公司标志等）与动态填写每个具体购物车项目的名称、价格、数量等细节所需的PHP代码混合在一起。
- en: The ability to mix template text with PHP code is why we’ve needed the opening
    <?php tag in our scripts so far, and why we sometimes need the closing ?> tag
    as well. Anything outside these tags is treated as template text and will be output
    verbatim; anything inside these tags is interpreted as PHP code and executed accordingly.
    If the script consists entirely of PHP code, as in [Listings 1-1](#lis1-1), [1-3](#lis1-3),
    and [1-4](#lis1-4), then only the opening <?php is needed; if the PHP code is
    followed by template text, as in [Listing 1-2](#lis1-2), the closing ?> tag is
    needed as well.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将模板文本与PHP代码混合的能力是我们为什么至今需要在脚本中加入开头的<?php标签，以及为什么有时需要结束的?>标签。任何在这些标签外的部分都被视为模板文本并将逐字输出；任何在这些标签内的部分都会被解析为PHP代码并相应执行。如果脚本完全由PHP代码组成，如[列表1-1](#lis1-1)、[1-3](#lis1-3)和[1-4](#lis1-4)中所示，那么只需要开头的<?php标签；如果PHP代码后面有模板文本，如[列表1-2](#lis1-2)所示，那么也需要闭合的?>标签。
- en: To clarify the difference between template text and PHP code, let’s write an
    example script that combines the two. Create a new project (either online with
    Replit or locally with PhpStorm), and inside this project create a new file called
    *hello2.php*. Edit the file to match the contents of [Listing 1-5](#lis1-5) exactly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清模板文本和PHP代码之间的区别，我们来编写一个将两者结合的示例脚本。创建一个新项目（可以在线使用Replit，或者在本地使用PhpStorm），在该项目中创建一个名为*hello2.php*的新文件。编辑文件，使其完全匹配[列表1-5](#lis1-5)的内容。
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 1-5: The hello2.php script, featuring template text with no PHP code-block
    tags'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列表1-5：hello2.php脚本，包含没有PHP代码块标签的模板文本
- en: 'The first and third lines of this script are template text and are meant to
    be output directly when the script is executed. The middle line is PHP code to
    output the phrase Hello, world! followed by a line break. Or is it? Try running
    this script by entering php hello2.php in a command line terminal. Here’s the
    result:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的第一行和第三行是模板文本，执行脚本时应直接输出。中间一行是PHP代码，用于输出“Hello, world!”并换行。或者是吗？尝试在命令行终端输入`php
    hello2.php`运行这个脚本，看看结果：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output reproduces all three lines of text verbatim, just as they appear
    in the file. In particular, the middle line includes PHP code elements like the
    print keyword, quotation marks, and semicolon that weren’t meant to be seen. The
    problem is that we haven’t included any opening or closing tags to designate the
    middle line as PHP code, so the entire script has been interpreted as template
    text and output directly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会逐字复制文件中的三行文本，正如它们在文件中显示的那样。特别是中间那一行，包括了像`print`关键字、引号和分号等PHP代码元素，它们本不应显示。问题在于我们没有加上任何标识PHP代码的开闭标签，所以整个脚本被当作模板文本直接输出。
- en: Notice also that the last line of output ends with a new terminal prompt (in
    this case, a percent symbol). This is because spaces, tabs, and newline characters
    are copied exactly as they’re written when they appear outside the PHP script
    tags as template text. The terminal then picks up right away with a new prompt
    wherever the output leaves off, without adding an extra line break. Had we included
    a blank line at the end of the *hello2.php* script, the new terminal prompt would
    appear on its own line.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还注意到，输出的最后一行以新的终端提示符（此时是百分号符号）结束。这是因为，当它们出现在PHP脚本标签之外作为模板文本时，空格、制表符和换行符会被精确复制。因此，终端会立即接上新的提示符，输出从中断处继续，而不会额外添加换行符。如果我们在*hello2.php*脚本的末尾添加了一个空行，新的终端提示符将出现在自己的新行上。
- en: Let’s update our script to fix both of these problems. [Listing 1-6](#lis1-6)
    shows a revised version of *hello2.php*, with the changes bolded.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新脚本，解决这两个问题。[清单 1-6](#lis1-6)显示了修订后的*hello2.php*版本，并且变更部分已加粗。
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 1-6: Fixing hello2.php to distinguish template text from PHP code'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-6：修复hello2.php，区分模板文本与PHP代码
- en: We’ve added an opening <?php tag before the print statement and a closing ?>
    tag after it. This tells the PHP interpreter that what falls between the tags
    should be interpreted and executed as PHP code. We’ve also added a blank line
    to the end of the script.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在print语句前添加了一个打开的<?php标签，并在其后添加了一个关闭的?>标签。这告诉PHP解释器，标签之间的内容应作为PHP代码进行解释和执行。我们还在脚本末尾添加了一个空行。
- en: 'If you rerun this script, the PHP engine should now find the starting and ending
    PHP program tags wrapped around the print "Hello, world!\n"; statement, and so,
    as well as outputting template text outside those tags, it will execute that line
    of code to print out Hello, world! and a newline character. Here’s the result
    of executing the script again:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重新运行这个脚本，PHP引擎现在应该会找到包裹在print "Hello, world!\n";语句前后的起始和结束PHP程序标签，因此，除了输出这些标签外，它还会执行那行代码，打印出“Hello,
    world!”以及换行符。以下是再次执行脚本后的结果：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This time, notice that the first and last lines of the script have been output
    verbatim as template text, while the middle line contains only the Hello, world!
    message, indicating it has successfully been interpreted as PHP code. The new
    terminal prompt now also appears on its own line, since we included a blank line
    at the end of the script in [Listing 1-6](#lis1-6).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这次注意到脚本的第一行和最后一行已原样输出为模板文本，而中间一行仅包含“Hello, world!”消息，表明它已成功作为PHP代码被解释执行。由于我们在[清单
    1-6](#lis1-6)的脚本末尾添加了一个空行，新的终端提示符现在也出现在自己的新行上。
- en: Comments
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '*Comments* are a useful feature of any programming language. They’re a way
    to tell the PHP engine to ignore some text written within a PHP code block, so
    the text will neither be output nor be interpreted as code that should be executed.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*注释*是任何编程语言中有用的功能。它们是一种告诉PHP引擎忽略PHP代码块内某些文本的方式，因此这些文本既不会被输出，也不会被解释为应执行的代码。'
- en: Comments can play several roles in a computer program. First, they’re a way
    to embed human-readable notes in the code, such as an explanation of how something
    works, why you’ve done something the way you have, or a reminder about something
    you still need to do. Second, turning one or more lines of code into a comment
    is a great way to temporarily disable that code while debugging or trying an alternative
    way of doing something, without having to delete the code altogether. Finally,
    comments can also contain special content for preprocessing tools such as documentation
    generators or code-testing utilities.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注释在计算机程序中可以发挥多个作用。首先，它们是将人类可读的注释嵌入代码中的一种方式，例如对某个功能的解释，或者为什么以某种方式编写代码的原因，或者提醒自己需要做的事情。其次，将一行或多行代码变为注释是调试或尝试其他方法时暂时禁用该代码的一种好方法，而不需要完全删除代码。最后，注释还可以包含特殊内容，供预处理工具（如文档生成器或代码测试工具）使用。
- en: 'As with most languages, PHP provides several ways to define comments. A single-line
    comment begins with two forward slashes (//) and looks like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数语言一样，PHP提供了几种定义注释的方式。单行注释以两个正斜杠（//）开头，格式如下：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Everything on the line after the two slashes is treated as a comment and ignored
    when the code is executed. This means you can place a comment after a program
    statement on the same line, and the program statement itself will still be executed,
    like so:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠后面的所有内容都会被视为注释，在执行代码时会被忽略。这意味着你可以在程序语句后面加注释，且程序语句本身仍会被执行，如下所示：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here print 2 + 2 will be executed, resulting in an output of 4, but the PHP
    engine will ignore the // Should print 4 comment at the end of the line.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，执行 2 + 2 将会输出 4，但 PHP 引擎会忽略行尾的 // 应输出 4 注释。
- en: A comment that starts with /* and ends with */ can span multiple lines. [Listing
    1-7](#lis1-7) illustrates this multiline comment syntax.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以 /* 开头并以 */ 结尾的注释可以跨越多行。[列表 1-7](#lis1-7)展示了这种多行注释的语法。
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 1-7: A multiline comment example'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-7：多行注释示例
- en: This style of comment is especially useful if you have a longer block of code
    that you want to temporarily disable, or *comment out*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这种注释风格特别有用，尤其是当你有一段较长的代码块，希望临时禁用或*注释掉*时。
- en: NOTE
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*You may also meet the older shell-style single-line comment, which begins
    with the* # *character rather than two slashes, if you work with or have to maintain
    legacy code written many years ago. While these shell-style comments are still
    valid in PHP programs, the* // *syntax is the preferred style of single-line comment
    in modern PHP programming.*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你处理或维护的是多年前编写的遗留代码，你可能还会遇到较老的 shell 风格单行注释，它以*#*字符开头，而不是两个斜杠。尽管这些 shell
    风格的注释在 PHP 程序中仍然有效，但*// *语法是现代 PHP 编程中首选的单行注释风格。*'
- en: Variables
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: A distinguishing feature of computer programs is that they are *dynamic*, meaning
    their behavior can change each time they’re executed based on different data and
    events. Fundamental to this is the use of *variables*, named values or references
    to data within code. Variables allow you to store values and refer to them with
    a meaningful name (an *identifier*).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序的一个显著特点是它们是*动态的*，这意味着它们的行为每次执行时会根据不同的数据和事件发生变化。程序的核心就在于使用*变量*，即在代码中引用数据的命名值或引用。变量使你能够存储值并使用有意义的名称（*标识符*）引用它们。
- en: They’re called variables because the value they refer to can change each time
    a program is executed. For example, a variable might refer to the current date
    or time, and a program might have logic to do something special based on the value
    of this variable. Perhaps it will display a greeting on the user’s birthday or
    trigger an alarm each day at 6 AM. Another variable might represent the size of
    a logfile, and the program might automatically back up the contents of this file
    and start a new one whenever the size exceeds a certain threshold.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被称为变量，因为它们所指的值在每次程序执行时可能会变化。例如，一个变量可能代表当前的日期或时间，而程序可能有逻辑根据该变量的值执行某些特定的操作。也许它会在用户生日时显示问候语，或者每天早上
    6 点触发一个警报。另一个变量可能表示日志文件的大小，当该文件的大小超过某个阈值时，程序可能会自动备份该文件的内容并开始一个新的文件。
- en: The values of variables don’t just change from one run of a program to another;
    they can also change *during* the course of a program’s execution. For example,
    a variable representing the total value of an online shopping cart will start
    at 0 and then update as items are added or removed. A variable holding the number
    of simultaneous users logged into a system would also change as a program runs.
    At busy times, if the value is very high, more memory or disk space may need to
    be added to the system.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的值不仅会在程序的每次运行中发生变化；它们还可以在程序执行的*过程中*发生变化。例如，表示在线购物车总金额的变量将从 0 开始，并在添加或移除物品时进行更新。一个存储系统中同时登录用户数的变量也会随着程序的运行而变化。在繁忙时段，如果该值非常高，可能需要向系统添加更多的内存或磁盘空间。
- en: '#### Creating Variables'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 创建变量'
- en: 'You create a PHP variable by giving it a name and assigning it a value. Here,
    for example, we create a variable called $age and assign it a value of 21:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过给变量命名并为其赋值来创建一个 PHP 变量。例如，在这里，我们创建了一个名为 $age 的变量，并为其赋值 21：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: PHP variable names must begin with a dollar sign ($), something that distinguishes
    PHP code from almost all other programming languages. Assigning a value to a variable
    hinges around an equal sign (=), known in this context as the *assignment operator*.
    The variable name goes on the left of the equal sign and its value on the right.
    Since setting a variable’s value is a type of statement, the whole thing ends
    with a semicolon.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 变量名必须以美元符号 ($) 开头，这是 PHP 代码与几乎所有其他编程语言的一个区别。给变量赋值是通过等号 (=) 完成的，这个等号在这里被称为*赋值运算符*。变量名放在等号的左边，值放在右边。由于设置变量值是一种语句，整个过程以分号结束。
- en: The code to the right of the assignment operator is an expression. An *expression*
    is something that yields a single value or can be evaluated into a single value.
    The simplest expression is simply a literal value, like the number 21 in this
    example. A *literal* is a value that is expressed as itself. Examples are 21 (the
    whole number twenty-one), 3.5 (the floating-point number three-point-five), true
    (the truth value true), and "Matt Smith" (the text string Matt Smith).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符右侧的代码是一个表达式。*表达式* 是一种能够产生单一值或可以被计算为单一值的东西。最简单的表达式就是一个字面量值，就像这个例子中的数字 21。*字面量*
    是指以其本身的形式表达的值。例如 21（整数二十一）、3.5（浮点数三点五）、true（布尔值 true）和 "Matt Smith"（文本字符串 Matt
    Smith）都是字面量。
- en: Other expressions are more complex. They might involve mathematical calculations,
    incorporate other variables, or even, as you’ll see in [Chapter 5](chapter5.xhtml),
    feature a call to a function. In these cases, the expression must be *evaluated*,
    meaning its resulting value is determined, before that value is assigned to the
    variable. [Listing 1-8](#lis1-8) illustrates some examples of assignment statements.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其他表达式更为复杂。它们可能涉及数学计算，包含其他变量，甚至如你在[第 5 章](chapter5.xhtml)中看到的那样，可能会调用一个函数。在这些情况下，表达式必须被
    *计算*，也就是说，必须先确定其结果值，然后才将该值赋给变量。[清单 1-8](#lis1-8)展示了一些赋值语句的示例。
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 1-8: Examples of assigning the value of an expression to a variable'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-8：将表达式的值赋给变量的示例
- en: We first assign the $username variable the value "matt", a string literal. Variables
    can hold values representing many types of data, as we’ll discuss in detail in
    [Chapter 2](chapter2.xhtml). We next assign the $total variable the value of the
    calculation 3 + 5. This variable will therefore hold the number 8. For the value
    of the $numSlices variable, we multiply the value of another variable, $numPizzas,
    by 8 (the * symbol denotes multiplication in PHP). Finally, we set the $timestamp
    variable to the value that results from calling the time() function. (You’ll learn
    more about how to get values out of functions in [Chapter 5](chapter5.xhtml).)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将字符串字面量 "matt" 赋值给 $username 变量。变量可以存储表示多种数据类型的值，我们将在[第 2 章](chapter2.xhtml)中详细讨论。接着，我们将
    $total 变量赋值为计算结果 3 + 5。因此，该变量将存储数字 8。对于 $numSlices 变量的值，我们将另一个变量 $numPizzas 的值乘以
    8（在 PHP 中，* 符号表示乘法）。最后，我们将 $timestamp 变量设置为调用 time() 函数得到的值。（你将在[第 5 章](chapter5.xhtml)中了解更多关于如何从函数中获取值的内容。）
- en: 'If you try to execute the code in [Listing 1-8](#lis1-8), it won’t quite work.
    PHP will produce a warning message like the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试执行[清单 1-8](#lis1-8)中的代码，它将无法正常工作。PHP 会产生类似以下的警告信息：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The problem here is that the $numPizzas variable is *undefined*, meaning it
    hasn’t been given a value. It’s important to always assign a value to a variable
    before you first make use of it.  #### Using Variables'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的问题是 $numPizzas 变量是 *未定义的*，意味着它还没有被赋值。在你第一次使用变量之前，始终为其赋值非常重要。 #### 使用变量'
- en: Once you’ve created a variable, you can use its name anywhere you need to reference
    that variable’s value. For example, [Listing 1-9](#lis1-9) shows a program illustrating
    how to use variables to calculate and print the total number of pizza slices,
    given a number of pizzas. Create a *pizza.php* file containing the contents of
    this listing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了一个变量，就可以在需要引用该变量值的任何地方使用它的名称。例如，[清单 1-9](#lis1-9)展示了一个程序，演示了如何使用变量来计算并打印给定披萨数量时的总披萨片数。创建一个包含此清单内容的
    *pizza.php* 文件。
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 1-9: Working with variables in pizza.php'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-9：在 pizza.php 中使用变量
- en: First, we assign the numeric value 1 to the $numPizzas variable. Then we multiply
    the value of $numPizzas by 8 to assign the value of the $numSlices variable. Remember,
    variables must be written starting with a dollar sign; you’ll get used to this
    very quickly as you write more PHP. We next use a print statement to show the
    value inside $numSlices, followed by another print statement with the \n newline
    character to create a line break.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将数字值 1 赋给 $numPizzas 变量。然后，我们将 $numPizzas 的值乘以 8，赋给 $numSlices 变量。记住，变量必须以美元符号开始；随着你编写更多
    PHP 代码，你会很快习惯这个规则。接着，我们使用打印语句显示 $numSlices 里的值，然后再使用另一个打印语句并加上 \n 换行符来创建一个换行。
- en: 'As mentioned, the value of a variable can change while a program is running,
    so we next update the value inside the $numPizzas variable from 1 to 3. Then we
    update the value of $numSlices by again multiplying $numPizzas by 8, and we print
    out the new value. Here’s the result of executing this program at the command
    line:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，变量的值可以在程序运行时改变，因此接下来我们将 $numPizzas 变量的值从 1 更新为 3。然后我们再次通过将 $numPizzas 乘以
    8 来更新 $numSlices 的值，并打印出新值。以下是命令行执行该程序的结果：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that the value of $numSlices changes from 8 to 24 over the course of
    the program. These values, in turn, are calculated based on the changing values
    of $numPizzas. Try changing the number inside the variable $numPizzas yourself
    to get a different number of slices.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 $numSlices 的值在程序执行过程中从 8 变为 24。这些值是基于 $numPizzas 变化的值计算得出的。你可以尝试自己修改 $numPizzas
    变量中的数字，看看能得到多少片不同的披萨。
- en: Naming Variables
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量命名
- en: A few rules and conventions exist for naming variables in PHP. First and foremost,
    as we’ve already discussed, all variable names must start with a dollar sign.
    If you forget the dollar sign when referencing a variable, PHP will usually report
    an undefined constant fatal error, and the program will crash. (We’ll discuss
    constants in the next section.)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 中有一些命名变量的规则和约定。首先，如我们之前讨论的那样，所有变量名必须以美元符号开始。如果在引用变量时忘记加上美元符号，PHP 通常会报告一个未定义常量的致命错误，程序将崩溃。（我们将在下一节讨论常量。）
- en: The next character in a variable name after the dollar sign must be a letter
    of the alphabet (or in certain cases, an underscore). By convention, this letter
    should be lowercase. While a capital letter is technically permitted, an initial
    capital is usually reserved for class names rather than variable names. (You’ll
    begin learning about classes and object-oriented programming in [Part V](part5.xhtml).)
    The remaining symbols in a variable name can be letters, numerals, or underscores.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名中的第一个字符（即美元符号后的字符）必须是字母（或在某些情况下是下划线）。按照约定，这个字母应该是小写字母。虽然技术上可以使用大写字母，但通常首字母大写是保留给类名而非变量名的。（你将在[第
    V 部分](part5.xhtml)中开始学习类和面向对象编程。）变量名中的其余符号可以是字母、数字或下划线。
- en: 'Single-word variable names should typically be all lowercase, as in $name or
    $total. For variable names with multiple words, we follow two common conventions.
    One is *snake case* : everything is lowercase, and the words are separated by
    underscores, as in $game_lives_remaining or $customer_number. The other is *lower
    camel case*: the first word is all lowercase, and subsequent words start with
    a capital letter, as in $gameLivesRemaining or $customerNumber.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 单词变量名通常应该全部小写，例如 $name 或 $total。对于多词变量名，我们有两种常见的命名约定。一种是 *蛇形命名法*：所有字母小写，单词之间用下划线分隔，例如
    $game_lives_remaining 或 $customer_number。另一种是 *小驼峰命名法*：第一个单词全部小写，后续单词的首字母大写，例如
    $gameLivesRemaining 或 $customerNumber。
- en: The most important rules of thumb are to be consistent in whatever naming convention
    you choose, to follow PHP’s style recommendations when possible, and above all,
    to choose names that clearly communicate what the variable represents. A name
    like $customerNumber is clearer than something abbreviated like $custNo and certainly
    clearer than a meaningless variable name like $x or $variable.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的原则是，无论选择哪种命名约定，都要保持一致，尽可能遵循 PHP 的风格建议，最重要的是，选择能够清楚传达变量表示内容的名称。像 $customerNumber
    这样的名称比像 $custNo 这样缩写的名称更清晰，当然也比像 $x 或 $variable 这样没有意义的变量名更好。
- en: Keep in mind that PHP variable names are case sensitive, so identifiers like
    $username and $userName will be treated as separate variables. If you get the
    capitalization wrong when you reference a variable (or otherwise type the variable
    name incorrectly), PHP won’t know what you mean. [Listing 1-10](#lis1-10) shows
    an example.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，PHP 变量名是区分大小写的，因此像 $username 和 $userName 这样的标识符会被视为不同的变量。如果你在引用变量时大小写写错了（或其他地方输入错误的变量名），PHP
    将不知道你指的是什么。[列表 1-10](#lis1-10) 展示了一个示例。
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 1-10: Misspelling a variable name'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 1-10: 拼写错误的变量名'
- en: 'We assign the value "matt" to the $username variable, then attempt to print
    the value of this variable. Because of the incorrect capitalization in $userName,
    however, executing this script at the command line will result in a warning message
    like the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将值 "matt" 分配给 $username 变量，然后尝试打印该变量的值。然而，由于 $userName 的大小写错误，在命令行执行这个脚本时会显示如下警告信息：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Because PHP variables are case sensitive, the PHP engine interprets $userName
    as a reference to a completely different variable that hasn’t previously been
    given a value. In PHP’s eyes, this is therefore the same problem as trying to
    use the $numPizzas variable without first defining it in [Listing 1-8](#lis1-8).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 PHP 变量区分大小写，所以 PHP 引擎将 `$userName` 视为一个完全不同的变量，它之前并未赋值。在 PHP 看来，这与在[示例 1-8](#lis1-8)中未定义
    `$numPizzas` 变量就尝试使用它是同一个问题。
- en: Keep in mind that while some aspects of PHP, like variable names, are case sensitive,
    other aspects of the language are case insensitive, meaning capitalization doesn’t
    matter. These include keywords like if, for, switch, and print; data types such
    as int and string; values such as true and false; and function and method names.
    That said, it’s common practice to use lowercase for language keywords and data
    types, and lower camel case for function and method names. The exercises at the
    end of the chapter suggest a coding style guide that can help you learn more about
    these conventions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，虽然 PHP 中的某些部分（如变量名）区分大小写，但语言中的其他部分是大小写不敏感的，意味着大小写不会影响。例如关键字如 if、for、switch
    和 print；数据类型如 int 和 string；值如 true 和 false；以及函数和方法名。因此，通常的做法是对语言关键字和数据类型使用小写，对函数和方法名使用小驼峰式命名法。本章末的练习建议了一种编码风格指南，帮助你了解更多关于这些约定的信息。
- en: Constants
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量
- en: Some values never change, such as the value of *π* (always 3.14) or the neutral
    value on the pH scale (always 7). When referencing such values in code, it’s best
    to use a *constant* rather than a variable. Unlike a variable, once a constant
    is defined, its value can’t be updated. By convention, the names of constants
    are written in *upper snake case*, with all capital letters and underscores between
    words, as in MAX_PROJECTS or NEUTRAL_PH. Unlike variables, constants don’t start
    with a dollar sign.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有些值永远不会改变，例如 *π*（总是 3.14）或 pH 值的中性值（总是 7）。在代码中引用这些值时，最好使用 *常量* 而非变量。与变量不同，一旦常量被定义，它的值就不能被更新。按照惯例，常量的名称采用
    *大写蛇形命名法*，即所有字母大写，单词之间用下划线连接，如 MAX_PROJECTS 或 NEUTRAL_PH。与变量不同，常量不以美元符号（$）开头。
- en: Some constants are built into the PHP language. [Table 1-1](#tab1-1) lists a
    few examples.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常量是内建于 PHP 语言中的。[表 1-1](#tab1-1)列出了几个示例。
- en: 'Table 1-1: Examples of Built-in PHP Constants'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1-1：内建 PHP 常量示例
- en: '| Constant | Description | Value |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 常量 | 描述 | 值 |'
- en: '| --- | --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| M_PI | π, the ratio of a circle’s circumference to its diameter | 3.1415926535898
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| M_PI | π，圆周率与直径的比值 | 3.1415926535898 |'
- en: '| M_E | e, Euler’s number | 2.718281828459 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| M_E | e，欧拉常数 | 2.718281828459 |'
- en: '| PHP_INT_MAX | The largest integer that can be supported by the installed
    PHP system | Usually 9223372036854775807 for 64-bit systems |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| PHP_INT_MAX | 系统支持的最大整数值 | 对于 64 位系统，通常是 9223372036854775807 |'
- en: You can also create your own custom constants by using the define() function.
    The script in [Listing 1-11](#lis1-11) shows an example.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用 `define()` 函数来创建自己的自定义常量。[示例 1-11](#lis1-11) 中的脚本展示了一个例子。
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Listing 1-11: Defining and printing a constant'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1-11：定义和打印常量
- en: 'We call the define() function to create a constant named MAX_PROJECTS with
    the value 99. This makes the constant available for use anywhere in the code.
    We then print out the value of the constant as part of a message. (Multiple print
    statements in a row will output to the same line if they don’t contain any line
    breaks; the final print "\n" adds a newline to ensure that the next output—in
    this case, the next command line prompt—will appear on its own line.) The output
    of running this script should be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `define()` 函数来创建一个名为 MAX_PROJECTS 的常量，其值为 99。这样常量在代码中的任何地方都可以使用。接着，我们将常量的值作为消息的一部分打印出来。（如果多个打印语句连续执行且不包含换行符，它们会输出到同一行；最后的打印
    "\n" 会添加换行符，确保下一次输出——在本例中是下一个命令行提示符——会出现在新的一行上。）运行此脚本的输出应该如下所示：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that the constant’s name must be enclosed in quotation marks when we
    create it with the define() function. Without these quotation marks, creating
    the constant wouldn’t work. For example, if you were to write define(MAX_PROJECTS,
    99) without quotes, PHP would interpret MAX _PROJECTS as a reference to a previously
    defined constant and would report an error. Once you’ve defined a constant, however,
    you don’t need the quotation marks when you reference it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们使用 define() 函数创建常量时，常量的名称必须用引号括起来。如果没有这些引号，创建常量将失败。例如，如果你写 define(MAX_PROJECTS,
    99) 而没有引号，PHP 会将 MAX_PROJECTS 视为对一个先前定义的常量的引用，并报错。然而，一旦定义了常量，在引用时就不需要引号了。
- en: NOTE
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*The PHP documentation rather confusingly refers to numeric and Boolean literals
    as* constants*, although it also uses the term* string literals*. When reading
    that documentation, it’s therefore useful to distinguish between simple constants
    (literal values themselves) and named constants (such as those created with the*
    define() *function).*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*PHP 文档中令人困惑的是，将数值和布尔字面量称为* 常量 *，虽然它也使用了* 字符串字面量 *这个术语。在阅读文档时，区分简单常量（字面值本身）和命名常量（例如通过*
    define() *函数创建的常量）是很有用的。*'
- en: Operators and Operands
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运算符和操作数
- en: '*Operators* are the programming language symbols we use to manipulate data,
    such as the plus sign (+) for numeric addition and the equal sign (=) for assigning
    a value to a variable. *Operands* are the values (literals, variables, or complex
    expressions) that an operator works on. For example, the numeric addition operator
    expects two operands: one number to the left of the plus sign and another number
    to the right, as in 2 + 2 or $price + $salesTax.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*运算符* 是我们在编程语言中用来操作数据的符号，比如加号（+）用于数值加法，等号（=）用于给变量赋值。*操作数* 是运算符操作的数据（字面量、变量或复杂表达式）。例如，数值加法运算符需要两个操作数：加号左边的一个数字和右边的另一个数字，像
    2 + 2 或 $price + $salesTax。'
- en: PHP has different operators for working with different types of data. In this
    section, we’ll focus primarily on operators for numeric values. In later chapters,
    we’ll consider other operators as well, such as operators for comparing values
    ([Chapter 2](chapter2.xhtml)) and for manipulating logical true/false values ([Chapter
    4](chapter4.xhtml)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 有不同的运算符用于处理不同类型的数据。在本节中，我们将主要关注用于数值的运算符。在后面的章节中，我们还会考虑其他运算符，例如用于比较值的运算符（[第
    2 章](chapter2.xhtml)）和用于操作逻辑真假值的运算符（[第 4 章](chapter4.xhtml)）。
- en: Arithmetic Operators
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 算术运算符
- en: PHP has *arithmetic operators* for basic mathematical calculations, such as
    addition (+), subtraction (-), multiplication (*), and division (/). These are
    all *binary operators*, meaning they require two operands. PHP also has the **
    operator for raising a number to a given power and the modulo operator (%), which
    divides one number by another and reports the remainder. [Table 1-2](#tab1-2)
    summarizes these operators.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 有 *算术运算符* 用于基本的数学计算，例如加法（+）、减法（-）、乘法（*）和除法（/）。这些都是 *二元运算符*，意味着它们需要两个操作数。PHP
    还提供了 ** 运算符用于将数字提高到给定的幂次，以及取余运算符（%），它将一个数字除以另一个数字并返回余数。[表 1-2](#tab1-2) 总结了这些运算符。
- en: 'Table 1-2: The Six Binary (Two-Operand) Arithmetic Operators'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1-2：六个二元（两个操作数）算术运算符
- en: '| Operator | Description | Example expression | Expression value |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例表达式 | 表达式值 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Addition | Returns the sum of the two operands | 3 + 1 | 4 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 加法 | 返回两个操作数的和 | 3 + 1 | 4 |'
- en: '| Subtraction | Returns the difference of the two operands | 10 - 2 | 8 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 减法 | 返回两个操作数的差值 | 10 - 2 | 8 |'
- en: '| Multiplication | Returns the product of the two operands | 2 * 3 | 6 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 乘法 | 返回两个操作数的乘积 | 2 * 3 | 6 |'
- en: '| Division | Returns the quotient of the two operands | 8 / 2 | 4 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 除法 | 返回两个操作数的商 | 8 / 2 | 4 |'
- en: '| Modulo | Returns the remainder of the first operand divided by the second
    | 8 % 3 | 2 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 取余 | 返回第一个操作数除以第二个操作数的余数 | 8 % 3 | 2 |'
- en: '| Exponentiation | Returns the first operand raised to the power of the second
    | 2 ** 3 | 8 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 指数运算 | 返回第一个操作数的第二个操作数次方 | 2 ** 3 | 8 |'
- en: As in mathematics, these operators have an *order of precedence* that controls
    the way an expression is evaluated when it contains multiple operations. The arithmetic
    operators for multiplication, division, and modulo have higher precedence, while
    the operators for addition and subtraction have lower precedence. Therefore, in
    the arithmetic expression 1 + 2 * 3, the 2 * 3 component will first be evaluated
    to 6, and then 1 + 6 will be evaluated, so the whole expression evaluates to 7.
    You can use parentheses to force precedence; for example, the expression (1 +
    2) * 3 evaluates to 9 rather than 7 since the parentheses force the addition component
    to be evaluated to 3 before the multiplication component.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 就像数学运算一样，这些运算符有一个*优先级顺序*，它决定了当表达式包含多个运算时，如何对其进行求值。乘法、除法和取模的算术运算符具有较高的优先级，而加法和减法的运算符优先级较低。因此，在算术表达式1
    + 2 * 3中，2 * 3部分会先被计算出6，然后1 + 6再进行计算，所以整个表达式的结果是7。你可以使用括号强制优先级；例如，表达式(1 + 2) *
    3的结果是9，而不是7，因为括号强制加法部分先被计算为3，再进行乘法计算。
- en: NOTE
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*See the PHP documentation at* [https://www.php.net/manual/en/language.operators.precedence.php](https://www.php.net/manual/en/language.operators.precedence.php)
    *for a complete list of the order of precedence for all PHP’s operators.*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看PHP文档中的完整运算符优先级列表*，[https://www.php.net/manual/en/language.operators.precedence.php](https://www.php.net/manual/en/language.operators.precedence.php)
    *以获取所有PHP运算符的优先级顺序。*'
- en: Combined Arithmetic Assignment Operators
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 组合算术赋值运算符
- en: We’ve already discussed how the basic = assignment operator takes a value and
    assigns it to a variable. Other assignment operators, such as += and -=, combine
    assignment with arithmetic. These combined operators exist because it’s common
    to want to take the value in a variable, perform a calculation with it, and store
    the result back in the same variable, replacing the previous value.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过基础的=赋值运算符，它将一个值赋给一个变量。其他赋值运算符，如+=和-=，将赋值与算术操作结合起来。这些组合运算符的存在，是因为通常我们需要获取变量中的值，进行计算后将结果重新存储回同一个变量，替换掉之前的值。
- en: 'To illustrate, say we have a $total variable for keeping track of the total
    cost of the items in an online shopping cart. Every time the user adds or removes
    an item from the cart, we’d want to change $total by the cost of that item. We
    could do this with the regular = operator by writing something like $total = $total
    + 25 or $total = $total - 15. With combined arithmetic assignment operators, however,
    we can accomplish the same task by using more concise syntax: $total += 25 or
    $total -= 15. These statements instruct the PHP engine to update the value of
    the $total variable by adding 25 or subtracting 15 from its previous value.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们有一个$total变量，用于跟踪在线购物车中商品的总成本。每次用户添加或移除购物车中的商品时，我们都想通过该商品的成本来改变$total的值。我们可以使用常规的=运算符，通过编写类似$total
    = $total + 25或$total = $total - 15来实现。然而，使用组合算术赋值运算符，我们可以通过更简洁的语法完成相同的任务：$total
    += 25或$total -= 15。这些语句指示PHP引擎通过将25加到之前的值上，或将15从之前的值中减去，来更新$total变量的值。
- en: Similar arithmetic assignment operators are used for the other arithmetic operations.
    For instance, the *= operator multiplies a variable by a given value. The others,
    /=, %=, and **= for division, modulo, and exponentiation, respectively, are used
    much less often.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的算术赋值运算符也用于其他算术操作。例如，*=运算符将一个变量乘以一个给定值。其他运算符，如/=、%=和**=，分别用于除法、取模和指数运算，但这些运算符的使用频率较低。
- en: Increment and Decrement Operators
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 增量和减量运算符
- en: 'Numbers can also be *incremented* (increased by 1) or *decremented* (decreased
    by 1) using special operators: a double plus sign (++) for incrementing and a
    double minus sign (--) for decrementing. As with the combined arithmetic assignment
    operators, ++ and -- provide a more concise syntax for a common programming task.
    For example, to add 1 to the existing value of the $age variable, we could use
    the basic assignment operator and write $age = $age + 1, or use an arithmetic
    assignment operator and write $age += 1. With the increment operator, however,
    we simply write $age++. Likewise, $age-- subtracts 1 from the value of $age. These
    are examples of *unary operators*, meaning they expect only a single operand.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 数字也可以通过特殊运算符进行*递增*（增加1）或*递减*（减少1）：使用双加号（++）进行递增，使用双减号（--）进行递减。与结合的算术赋值运算符类似，++和--提供了更加简洁的语法，用于完成常见的编程任务。例如，要向$age变量的现有值添加1，我们可以使用基本的赋值运算符并写成$age
    = $age + 1，或者使用算术赋值运算符并写成$age += 1。然而，使用递增运算符时，我们只需写$age++。同样，$age--会从$age的值中减去1。这些是*一元运算符*的例子，意味着它们只需要一个操作数。
- en: When you want to use the result of an increment or decrement operation in an
    expression, the placement of the operator before or after the value it operates
    on matters. Say $age contains an integer value of 21. The expression $age++ yields
    the current value of $age (21) and then increments the variable. On the other
    end, ++$age will first apply the increment and then yield the variable’s newly
    incremented value (22). [Listing 1-12](#lis1-12) illustrates this distinction.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在表达式中使用递增或递减操作的结果时，运算符在值之前或之后的位置很重要。假设$age包含整数值21。表达式$age++将返回$age的当前值（21），然后递增该变量。另一方面，++$age将首先应用递增操作，然后返回变量的新值（22）。[示例1-12](#lis1-12)说明了这一区别。
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing 1-12: Demonstrating the difference between pre- and post-increment
    operators'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1-12：演示前后递增运算符的区别
- en: 'Here we set both $person1Age and $person2Age to 21, then use ++ to increment
    each person’s age. However, since we use ++$person1Age in one case ❶ and $person2Age++
    in the other ❷, the printed results are different, as the script’s output shows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将$person1Age和$person2Age都设置为21，然后使用++递增每个人的年龄。然而，由于在一种情况下使用了++$person1Age
    ❶，而在另一种情况下使用了$person2Age++ ❷，所以打印出的结果不同，正如脚本输出所示：
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Both times we print $person1Age, we see 22 in the output. This is because placing
    the ++ operator before the variable ensures that its value is incremented from
    21 to 22 before it’s first printed. By contrast, placing the ++ operator after
    $person2Age allows us to first see its original value of 21 ❶, since it forces
    the increment operation to take place after the variable’s value is used in the
    expression.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 每次打印$person1Age时，我们都会在输出中看到22。这是因为将++运算符放在变量前面，确保它的值在第一次打印之前从21递增到22。相反，将++运算符放在$person2Age后面，则会先看到它原始的值21
    ❶，因为它强制递增操作发生在变量值在表达式中使用之后。
- en: 'To avoid confusion about whether the pre- and post-increment value will be
    used, many programmers opt to use two separate lines of code: one with a statement
    incrementing a variable’s value, and another with a statement to make use of that
    new value, as in [Listing 1-13](#lis1-13).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免关于是否使用递增前后值的混淆，许多程序员选择使用两行代码：一行用于递增变量的值，另一行用于使用该新值，如[示例1-13](#lis1-13)所示。
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Listing 1-13: Separating the increment operation from the print statement'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1-13：将递增操作与打印语句分开
- en: Here we use one statement to only increment $person1Age and another statement
    to only print the variable’s value. This unambiguously ensures that the resulting
    output will be 22.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用一个语句只对$person1Age进行递增，另一个语句只打印该变量的值。这明确确保了最终输出将是22。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'We’ve covered some important PHP programming basics in this chapter. We looked
    at two ways to create and run PHP programs: using the Replit online environment
    and using the PhpStorm IDE on your local computer. We covered statements, expressions,
    variables, constants, and operators, which are all key building blocks of computer
    programs, and we discussed how to use comments to help make code more readable
    for humans and to temporarily disable blocks of code when developing and debugging
    programs. We also took a first look at how to interweave PHP program statements
    with unchanging template text, a fundamental technique for creating web applications
    that can dynamically customize the web pages returned to users.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们介绍了一些重要的 PHP 编程基础知识。我们探讨了两种创建和运行 PHP 程序的方式：使用 Replit 在线环境和在本地计算机上使用 PhpStorm
    IDE。我们涵盖了语句、表达式、变量、常量和运算符，这些都是计算机程序的关键构建块，并讨论了如何使用注释来帮助使代码对人类更易读，并在开发和调试程序时暂时禁用代码块。我们还首次了解了如何将
    PHP 程序语句与不变的模板文本交织在一起，这是创建能够动态定制返回给用户网页的 web 应用程序的基本技术。
- en: Exercises
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 1.   Visit the PHP website, *[https://www.php.net](https://www.php.net)*, and
    get to know the layout of the language’s documentation pages. They will be a great
    reference when you’re programming in PHP.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   访问 PHP 网站，*[https://www.php.net](https://www.php.net)*，并了解该语言文档页面的布局。在你编写
    PHP 程序时，这些文档将是一个很好的参考。
- en: 2.   Visit another handy online PHP resource, PHP the Right Way (*[https://phptherightway.com](https://phptherightway.com)*).
    This website is a collection of best practices in the PHP programming community.
    Almost everyone in the community now follows the same code-styling guidelines,
    which makes PHP code from different programmers easy to read, understand, and
    contribute to. You can read about these guidelines at *[https://phptherightway.com/#code_style_guide](https://phptherightway.com/#code_style_guide)*,
    where you’ll also find links to specific style recommendations from the PHP Framework
    Interop Group (PHP-FIG), the unofficial group of international PHP professionals
    driving the language’s coding standards.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   访问另一个实用的在线 PHP 资源，PHP the Right Way (*[https://phptherightway.com](https://phptherightway.com)*)。这个网站汇集了
    PHP 编程社区中的最佳实践。如今，社区中的几乎每个人都遵循相同的代码风格规范，这使得不同程序员的 PHP 代码易于阅读、理解和贡献。你可以在 *[https://phptherightway.com/#code_style_guide](https://phptherightway.com/#code_style_guide)*
    上阅读这些规范，同时你还可以找到来自 PHP Framework Interop Group（PHP-FIG）的特定风格推荐链接，PHP-FIG 是一个由国际
    PHP 专业人士组成的非正式小组，致力于推动语言的编码标准。
- en: '3.   Use comments to disable some of the lines in the following listing so
    that only Cat, Dog, and Helicopter are printed:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 3.   使用注释禁用以下代码中的部分行，使得只有 Cat、Dog 和 Helicopter 被打印出来：
- en: '[PRE26]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 4.   Write a script that creates a $name variable containing your name and uses
    that variable to print out the message My name is your name followed by a newline
    character.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 4.   编写一个脚本，创建一个包含你名字的 `$name` 变量，并使用该变量打印出“我的名字是你的名字”，然后加上换行符。
