- en: '## **12'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: CUSTOMIZING GHIDRA**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: After spending time with Ghidra, you may prefer some settings that you wish
    to use as defaults every time you open a new project or that you want to apply
    to all files within a particular project. At this point, you may be confused as
    to why some of the options you have changed carry over from session to session,
    while other options need resetting every time you load a new project or file.
    In this chapter, we examine the ways in which you can customize Ghidra’s default
    appearance and behavior to better serve your reverse engineering needs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the scope of some customizations, it’s useful to understand the
    (fuzzy) distinction between the terms *plugin* and *tool*. In a general sense,
    the following is true:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**Plugin** A plugin is a software component (for example, Byte Viewer, Listing
    window, and so on) that adds functionality to Ghidra. Plugins frequently present
    themselves as windows, but many plugins do their work behind the scenes (for example,
    analyzers).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**Tool** A tool can be a single plugin or a set of plugins that work together.
    They generally present as a useful graphical user interface (GUI) to help users
    accomplish tasks. A tool that we have been working with extensively, CodeBrowser,
    is a window that serves as a GUI framework. Function Graph is also a tool.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Don’t panic if these definitions are not strictly adhered to. In many cases,
    distinguishing between the two simply doesn’t matter. For example, some menus,
    such as the Tool Options menu discussed later in this chapter, include options
    that can be applied to both tools and plugins despite using the term *Tool*. In
    that context, as well as many others, the distinction is not important, as both
    are treated the same. You should be able to successfully navigate the customization
    process even when the usage of the terms varies.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In addition to Ghidra customizations, we’ll also discuss Ghidra *workspaces*
    to round out the chapter. Workspaces couple a tool with a configuration and provide
    the capability to design and use a personalized virtual desktop.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**CodeBrowser**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapters 4](ch04.xhtml#ch04) and [5](ch05.xhtml#ch05), we introduced the
    CodeBrowser and many of its associated windows. We already covered some of the
    basic customization options; now we will walk through a more thorough example
    of customizations in the CodeBrowser before moving on to the Ghidra Project window
    and workspaces.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '***Rearranging Windows***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following six basic operations allow you to control where the individual
    windows appear in relation to the CodeBrowser window:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**Open** Windows are generally opened using the CodeBrowser’s Window menu.
    Each window has defaults that determine where it opens.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**Close** Windows can be closed by clicking the X in the upper right of the
    window. (If you reopen a closed window, it will reappear at the same location
    rather than its original default location.)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Move** Move windows around by dragging and dropping them.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**移动** 通过拖放的方式移动窗口。'
- en: '**Stack** Use the drag-and-drop functionality to stack and unstack windows.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆叠** 使用拖放功能堆叠和取消堆叠窗口。'
- en: '**Resize** Hovering on a border between two windows reveals an arrow that allows
    to you grow and shrink the windows adjacent to the border.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**调整大小** 将鼠标悬停在两个窗口之间的边框上，会出现一个箭头，允许你扩大或缩小与边框相邻的窗口。'
- en: '**Undock** You can undock a tool from the CodeBrowser window, but redocking
    is not as straightforward as you might wish, as shown in [Figure 12-1](ch12.xhtml#fig12_1).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**取消停靠** 你可以将工具从 CodeBrowser 窗口中取消停靠，但重新停靠并不像你想象的那么简单，如[图 12-1](ch12.xhtml#fig12_1)所示。'
- en: '![image](Images/fig12-1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-1.jpg)'
- en: '*Figure 12-1: Redocking the Decompiler window*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-1：重新停靠反汇编窗口*'
- en: To redock a window, you can’t click the title bar ➊, as you’ll just drag the
    window around in front of the CodeBrowser. Instead, click the internal title bar
    ➋ to redock or stack a window. Now that we can rearrange windows, let’s customize
    the windows themselves by using the Edit ▸ Tool Options menu.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新停靠窗口，你不能点击标题栏 ➊，因为那样会把窗口拖动到 CodeBrowser 前面。相反，点击内部标题栏 ➋ 来重新停靠或堆叠窗口。现在我们可以重新排列窗口，让我们通过使用“编辑
    ▸ 工具选项”菜单来自定义窗口本身。
- en: '***Editing Tool Options***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***编辑工具选项***'
- en: When you choose Edit ▸ Tool Options, a CodeBrowser option window opens, as shown
    in [Figure 12-2](ch12.xhtml#fig12_2). This window allows you to control options
    associated with individual CodeBrowser components.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择“编辑 ▸ 工具选项”时，会打开一个 CodeBrowser 选项窗口，如[图 12-2](ch12.xhtml#fig12_2)所示。这个窗口允许你控制与单个
    CodeBrowser 组件相关的选项。
- en: Available options are determined by the developers of each component, and the
    significant variability between available options reflects the specific nature
    of the individual tools. Because describing every available tool option would
    take up an entire book, we’ll look at a few edits that affect tools we have discussed
    in previous chapters and some that are similar for many tools.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的选项由每个组件的开发者决定，且可用选项之间的显著差异反映了各个工具的具体性质。由于描述每个可用工具选项将占据整本书的篇幅，我们将重点看一些影响我们在前面章节中讨论过的工具的编辑内容，以及一些适用于许多工具的相似编辑。
- en: '![image](Images/fig12-2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-2.jpg)'
- en: '*Figure 12-2: Default CodeBrowser Edit ▸ Tool Options window*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-2：默认的 CodeBrowser 编辑 ▸ 工具选项窗口*'
- en: While it may not be apparent when rendered in grayscale, many of the tools use
    color to identify attributes, and the associated color palette is configurable.
    Clicking a default color within the Options window opens a standard Color Editor
    dialog, as shown in the Byte Viewer options panels in [Figure 12-3](ch12.xhtml#fig12_3).
    This provides you with the option to control the color of a plethora of items
    within your CodeBrowser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在灰度模式下可能不明显，许多工具使用颜色来识别属性，并且相关的颜色调色板是可配置的。点击选项窗口中的默认颜色将打开一个标准的颜色编辑器对话框，如[图
    12-3](ch12.xhtml#fig12_3)中的 Byte Viewer 选项面板所示。这为你提供了控制 CodeBrowser 中各种项目颜色的选项。
- en: '![image](Images/fig12-3.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-3.jpg)'
- en: '*Figure 12-3: Edit ▸ Tool Options Color Editor dialog*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-3：编辑 ▸ 工具选项颜色编辑器对话框*'
- en: 'In [Figure 12-3](ch12.xhtml#fig12_3), you can select colors for six items in
    the Byte Viewer window: Block Separator, Current View Cursor, Cursor, Edit Cursor,
    Highlight Cursor Line, and Non-Focus Cursor. In addition to customizing color
    in the Byte Viewer window, you can also select the font and choose to highlight
    the cursor line. Conveniently, any CodeBrowser tool’s option panel includes a
    Restore Defaults option in the lower right. This enables you to use special color
    schemes during some analysis steps and then revert to the default color scheme
    for the tool when done.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 12-3](ch12.xhtml#fig12_3)中，你可以为 Byte Viewer 窗口中的六个项目选择颜色：块分隔符、当前视图光标、光标、编辑光标、高亮光标行和非焦点光标。除了在
    Byte Viewer 窗口中自定义颜色外，你还可以选择字体，并选择高亮显示光标行。方便的是，任何 CodeBrowser 工具的选项面板中都包含一个右下角的“恢复默认值”选项。这使得你可以在某些分析步骤中使用特殊的颜色方案，完成后再恢复工具的默认颜色方案。
- en: Beyond cosmetic changes, many tools provide the ability to set parameters in
    the edit options. We have hinted at this potential as we introduced new functionality
    in previous chapters, such as the ability to control which analyzers are included
    in auto analysis. In general, anytime something has a *default*, there is a way
    to change it to something else.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了外观上的变化，许多工具还提供了在编辑选项中设置参数的能力。我们在之前的章节中介绍新功能时，也暗示了这一潜力，例如控制哪些分析器包含在自动分析中的能力。一般来说，任何有*默认值*的地方，都有方法将其更改为其他选项。
- en: The settings for some overarching tools are also accessible and modifiable through
    the Options window. For example, key bindings are used to specify mappings between
    Ghidra actions and hotkey sequences, and there are over 550 actions in the default
    CodeBrowser window for which you can create or reassign a hotkey binding using
    the Options window. Hotkey reassignment is useful in many instances, including
    making additional commands available via hotkeys, changing default sequences to
    sequences that are easier to remember, and changing sequences that might conflict
    with others in use by the operating system or your terminal application. You might
    even remap all hotkeys to match those of other disassemblers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 某些通用工具的设置也可以通过选项窗口访问和修改。例如，按键绑定用于指定 Ghidra 操作和热键序列之间的映射，在默认的 CodeBrowser 窗口中有超过
    550 个操作，你可以通过选项窗口创建或重新分配热键绑定。热键重新分配在许多情况下都很有用，包括通过热键使额外的命令可用、将默认序列更改为更容易记住的序列、以及更改可能与操作系统或终端应用程序使用的其他序列冲突的序列。你甚至可以将所有热键重新映射为与其他反汇编器相同的热键。
- en: Three fields are associated with each key binding, as shown in [Figure 12-4](ch12.xhtml#fig12_4).
    The first field is Action Name. In some cases, the action name corresponds to
    a menu command (for example, Analysis ▸ Auto Analyze). In other cases, it is a
    parameter associated with a menu command (for example, Aggressive Instruction
    Finder within Analysis Options).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个热键绑定都与三个字段相关，如[图 12-4](ch12.xhtml#fig12_4)所示。第一个字段是操作名称。在某些情况下，操作名称对应于菜单命令（例如，分析
    ▸ 自动分析）。在其他情况下，它是与菜单命令相关联的参数（例如，分析选项中的 Aggressive Instruction Finder）。
- en: '![image](Images/fig12-4.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-4.jpg)'
- en: '*Figure 12-4: Edit ▸ Tool Options Key Bindings option*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-4：编辑 ▸ 工具选项 热键绑定选项*'
- en: The second column is the actual key binding (hotkey) that is associated with
    the action. The final column holds the name of the plugin in which the action
    is implemented.^([1](footnotes.xhtml#ch12fn1)) Not all actions have associated
    hotkeys, but you can easily assign hotkeys by selecting an action and entering
    the desired hotkey in the text box. A list of all other uses of that hotkey is
    displayed if the hotkey has already been associated with another action. When
    you use a hotkey that has multiple key bindings, you will be provided a list of
    potential actions and will need to choose the appropriate one.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列是与操作相关联的实际按键绑定（热键）。最后一列包含实现该操作的插件名称。^([1](footnotes.xhtml#ch12fn1)) 并非所有操作都有关联的热键，但你可以通过选择一个操作并在文本框中输入所需的热键来轻松分配热键。如果该热键已经与其他操作关联，系统会显示该热键的所有其他用途。当你使用具有多个键绑定的热键时，系统会提供一个潜在操作列表，你需要选择合适的操作。
- en: '***Editing the Tool***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***编辑工具***'
- en: At the bottom of the Edit ▸ Tool Options window is an option called Tool. The
    meaning of Tool changes depending on the tool whose menu was used to reach the
    Options dialog. Generally this will be either the CodeBrowser or the Project window.
    [Figure 12-5](ch12.xhtml#fig12_5) shows the default configuration options for
    the CodeBrowser tool. The title bar of the Options dialog provides the most prominent
    clue that we are looking at the options page for the CodeBrowser.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 编辑 ▸ 工具选项 窗口的底部，有一个名为 Tool 的选项。Tool 的含义取决于用于打开选项对话框的工具菜单。通常，这将是 CodeBrowser
    或项目窗口。[图 12-5](ch12.xhtml#fig12_5) 显示了 CodeBrowser 工具的默认配置选项。选项对话框的标题栏提供了我们正在查看
    CodeBrowser 选项页面的最明显线索。
- en: '![image](Images/fig12-5.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-5.jpg)'
- en: '*Figure 12-5: Using Edit ▸ Tool Options ▸ Tool to edit CodeBrowser options*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-5：使用 编辑 ▸ 工具选项 ▸ 工具 编辑 CodeBrowser 选项*'
- en: '#### ***Special Tool Editing Features***'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***特殊工具编辑功能***'
- en: Some tools have editing features integrated within their individual windows
    so that you can immediately see the effect of the options on the associated contents.
    The most extensive set of built-in editing features is available in the Listing
    window. The Listing window contains the textual contents of the disassembly and
    is highly configurable using the Browser Field Formatter introduced in “[Changing
    Code Display Options](ch07.xhtml#ch07lev133)” on [page 133](ch07.xhtml#page_133).
    [Figure 12-6](ch12.xhtml#fig12_6) shows a Listing window with the default Browser
    Field Formatter open.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-6.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-6: Listing window with default Browser Field Formatter open*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: A row of tabs ➊ representing the various field types present in the disassembly
    appears at the top of the formatter. In this case, we are looking at instructions,
    so the Instruction/Data tab is selected. The remainder of the formatter ➋ displays
    bars for each individual field associated with an address in an Instruction/Data
    section. In this case, the cursor is on an address within the Listing window,
    so the Address field is highlighted.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: You can use the Browser Field Formatter to change the appearance of the listing.
    The capabilities are extensive, and each field has its own associated options.
    We will investigate only some of the simpler capabilities, many of which are similar
    to editing the appearance of windows in the CodeBrowser. You can rearrange fields
    by dragging them to new locations; increase or decrease the width of a field;
    and add, remove, enable, or disable individual fields.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-7](ch12.xhtml#fig12_7) shows the same listing contents after removing
    the Bytes field. We have removed the Bytes field in many of the listing images
    in previous chapters to condense the listing and show more content in the available
    space.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-7.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-7: Listing window with customized Browser Field Formatter selections*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '***Saving the CodeBrowser Layout***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When closing the CodeBrowser, you can save any layout changes associated with
    a file. Alternatively, you can exit without saving, which generates a warning
    message to make sure you understand the implications. If you use the File ▸ Save
    Tool option in the CodeBrowser window, the current CodeBrowser appearance will
    be associated with the current file within the active project. The next time you
    open the file, Ghidra will use the saved CodeBrowser layout. When you have multiple
    CodeBrowser instances open at the same time and have modified some (or all) of
    them, this can result in conflicting tool configurations. Ghidra will then display
    a new Save Tool dialog, as shown in [Figure 12-8](ch12.xhtml#fig12_8).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-8.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-8: Ghidra’s Save Tool – Possible Conflict dialog*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we will show you how to use this and similar customization
    functionality to create a new powerful suite of tools that are tuned to your individual
    reverse engineering tasks and tastes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '**Ghidra Project Window**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Ghidra 项目窗口**'
- en: Let’s switch gears (or windows anyway) and venture back to the Ghidra Project
    window, shown in [Figure 12-9](ch12.xhtml#fig12_9). The main menu was discussed
    in the preceding chapter. Before we discuss Project window customizations, let’s
    look at two areas of the window that we have not yet discussed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们换个思路（或者换个窗口）回到 Ghidra 项目窗口，如[图 12-9](ch12.xhtml#fig12_9)所示。主菜单在前一章已经讨论过。在讨论项目窗口的自定义之前，让我们先看看窗口中两个尚未讨论的区域。
- en: '![image](Images/fig12-9.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-9.jpg)'
- en: '*Figure 12-9: Ghidra Project window*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-9：Ghidra 项目窗口*'
- en: The Tool Chest ➋ displays icons for all of the tools capable of operating on
    the binaries that you have imported into your projects. By default, two tools
    are available. The dragon icon is the default for the CodeBrowser, and the footprints
    icon is associated with Ghidra’s version control tool. We demonstrate how to supplement
    the Tool Chest by modifying and importing tools, as well as building our own,
    a little later in this chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 工具箱 ➋ 显示了所有能够操作你导入到项目中的二进制文件的工具图标。默认情况下，提供两个工具。龙形图标是 CodeBrowser 的默认图标，足迹图标与
    Ghidra 的版本控制工具相关联。在本章稍后的部分，我们将演示如何通过修改和导入工具以及构建我们自己的工具来补充工具箱。
- en: The Running Tools ➌ contains icons for each running tool instance. In this example,
    we have opened each of the project files in a separate CodeBrowser window. As
    a result, four instances of CodeBrowser are currently running. Clicking any of
    the Running Tools icons brings the associated tool to the foreground of your desktop.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正在运行的工具 ➌ 包含每个正在运行的工具实例的图标。在这个例子中，我们已将每个项目文件在单独的 CodeBrowser 窗口中打开。因此，目前有四个
    CodeBrowser 实例在运行。点击任何一个正在运行的工具图标将把相应的工具调到桌面前台。
- en: 'Let’s return to the Ghidra Project window menu ➊ and look at some of the options
    to customize the window. We will start by investigating the four Edit ▸ Tool Options
    actions for the Ghidra project shown in [Figure 12-10](ch12.xhtml#fig12_10). Two
    of the options are the same as in CodeBrowser: Key Bindings and Tool.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们返回到 Ghidra 项目窗口菜单 ➊，查看一些自定义窗口的选项。我们将从调查[图 12-10](ch12.xhtml#fig12_10)中显示的
    Ghidra 项目四个编辑 ▸ 工具选项开始。两个选项与 CodeBrowser 中的相同：键绑定和工具。
- en: In [Figure 12-10](ch12.xhtml#fig12_10), the Key Bindings option has been selected.
    The Ghidra Project tool has significantly fewer actions than the CodeBrowser tool
    does, and therefore fewer options for key binding. If you’re playing along at
    home, you may notice that most of the actions are associated with the FrontEndPlugin.
    (The Ghidra Project tool is also called the Ghidra Frontend, and these terms are
    used interchangeably throughout the Ghidra environment, including Ghidra Help.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 12-10](ch12.xhtml#fig12_10)中，选择了键绑定选项。与 CodeBrowser 工具相比，Ghidra 项目工具的操作显著较少，因此键绑定的选项也较少。如果你在家里跟着操作，可能会注意到大部分操作都与
    FrontEndPlugin 相关。（Ghidra 项目工具也称为 Ghidra 前端，在整个 Ghidra 环境中，包括 Ghidra 帮助文档，都会交替使用这两个术语。）
- en: '![image](Images/fig12-10.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-10.jpg)'
- en: '*Figure 12-10: Ghidra Project window (aka Ghidra Frontend), via Edit ▸ Tool
    Options*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-10：Ghidra 项目窗口（即 Ghidra 前端），通过编辑 ▸ 工具选项*'
- en: Eclipse Integration is the focus of [Chapter 15](ch15.xhtml#ch15), so we will
    postpone discussion of this particular option for now. Recovery simply allows
    you to set a frequency for snapshots. The default value is 5 minutes. Setting
    this value to 0 disables snapshots.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 集成是[第 15 章](ch15.xhtml#ch15)的重点，因此我们暂时会推迟讨论这个选项。恢复选项允许你设置快照的频率，默认值是
    5 分钟。将此值设置为 0 将禁用快照。
- en: The final option, Tool, can be quite fun to experiment with. As mentioned earlier
    in the chapter, the generic term *tool*, in this context, refers to the active
    tool. In this case, it is the Ghidra Project tool. The associated options are
    shown in [Figure 12-11](ch12.xhtml#fig12_11), and we will focus on the Swing Look
    And Feel and Use Inverted Colors options, which change the appearance of the Ghidra
    windows.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的选项，工具，可能会很有趣，可以尝试一下。如本章前面所述，术语*工具*在此上下文中指的是活动工具。在此情况下，它是 Ghidra 项目工具。相关选项如[图
    12-11](ch12.xhtml#fig12_11)所示，我们将重点关注 Swing 外观与感觉和使用反转颜色选项，这些选项会改变 Ghidra 窗口的外观。
- en: '![image](Images/fig12-11.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-11.jpg)'
- en: '*Figure 12-11: Ghidra Project tool edit options*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-11：Ghidra 项目工具编辑选项*'
- en: The combination of Use Inverted Colors with the selection of Metal for the Swing
    Look And Feel results in a dark theme that is popular with many reverse engineers.
    Your changes will take effect after you restart Ghidra, and the new styles will
    be used for all Ghidra windows, including the CodeBrowser and Decompiler. A portion
    of the resulting CodeBrowser window is shown in [Figure 12-12](ch12.xhtml#fig12_12).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-12.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-12: Portion of the CodeBrowser window using a dark theme*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to change the look and feel of Ghidra to better suit your
    personality, let’s return to the File menu and investigate what configuration
    means in that context. The File ▸ Configure option displays three categories of
    Ghidra plugin collections, as shown in [Figure 12-13](ch12.xhtml#fig12_13). Each
    category has a different purpose.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra Core contains the set of plugins that we have been using in our default
    Ghidra configuration. These provide the basic functionality that is essential
    to reverse engineering. The Developer category provides plugins that assist you
    in the process of developing new plugins. This is a good starting point if you
    want to learn more about Ghidra development. The final group of plugins is Experimental.
    These plugins have not been thoroughly tested and could destabilize your Ghidra
    instance, so use them with caution.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-13.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-13: Ghidra project configuration options*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: While only Ghidra Core is enabled as part of the default Ghidra installation,
    you can check the box next to the other options to enable them as well. Use the
    Configure option beneath a category to select (or deselect) the individual plugins
    that appear in the category list. [Figure 12-14](ch12.xhtml#fig12_14) displays
    the Ghidra Core plugins list, including a description and category for each. If
    you click a Ghidra plugin within this menu, a window at the bottom of the screen
    will provide additional information about the plugin.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Two additional Ghidra Project menu options are available for Ghidra configuration.
    The first is File ▸ Install Extensions, which we discuss in [Chapter 15](ch15.xhtml#ch15).
    The other option, Edit ▸ Plugin Path, allows you to add, modify, and delete new
    user plugin paths, which tell Ghidra where to look for additional Java classes
    beyond its installed defaults. Through this option, you can include additional
    plugins and classes in your Ghidra instance. Editing the plugin path requires
    that you restart Ghidra in order to see the results.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-14.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-14: Ghidra Core configuration window with ImporterPlugin selected*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have seen the potential to modify plugin options, we can move on
    to extend plugin use. The Tools menu option allows you to perform operations associated
    with tools, including creating new tools (if none of the existing tools exactly
    fit your needs). In this case, we will build and work with tools that are collections
    of existing plugins, rather than coding plugins from scratch.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了修改插件选项的潜力，我们可以继续扩展插件的使用。工具菜单选项允许你执行与工具相关的操作，包括创建新工具（如果现有工具无法完全满足你的需求）。在这种情况下，我们将构建并使用现有插件集合的工具，而不是从头编写插件。
- en: '**Tools**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工具**'
- en: Most of the tool options are provided in the Ghidra Project window Tools menu,
    shown in [Figure 12-15](ch12.xhtml#fig12_15). Until now, you have been using and
    modifying the default tool, CodeBrowser, as your primary analysis tool. We will
    now demonstrate how you can create custom tools in Ghidra.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数工具选项都可以在 Ghidra 项目窗口的工具菜单中找到，如[图 12-15](ch12.xhtml#fig12_15)所示。到目前为止，你一直在使用和修改默认工具
    CodeBrowser，作为你的主要分析工具。接下来，我们将演示如何在 Ghidra 中创建自定义工具。
- en: '![image](Images/fig12-15.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-15.jpg)'
- en: '*Figure 12-15: Ghidra Tools menu options*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-15：Ghidra 工具菜单选项*'
- en: If you have experimented with modifying the CodeBrowser tool, you may have become
    frustrated when the default tool is modified for sub­sequent files you open. Let’s
    consider a specialized case where you want to examine a file, with many function
    calls, that is complicated to navigate. In [Chapter 10](ch10.xhtml#ch10), we demonstrated
    the use of function call graphs and function graphs to help you understand the
    control flow of a program. Both of these graphs open in their own windows, which
    can cause challenges if you have many files open. Let’s address these challenges
    with a specialized tool called *ExamineControlFlow* that you can use to analyze
    the flow of control in a program.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经尝试修改 CodeBrowser 工具，可能会因为默认工具在你打开后续文件时被修改而感到沮丧。让我们考虑一个特殊的情况：你想要检查一个包含许多函数调用的文件，这个文件导航起来比较复杂。在[第
    10 章](ch10.xhtml#ch10)中，我们演示了如何使用函数调用图和函数图来帮助你理解程序的控制流。这两种图表都会在各自的窗口中打开，如果你打开了很多文件，这可能会造成一些挑战。我们将通过一个名为
    *ExamineControlFlow* 的专用工具来解决这些问题，它可以帮助你分析程序中的控制流。
- en: When you choose the Tools ▸ Create Tool… menu option, you are presented with
    two windows (shown stacked in [Figure 12-16](ch12.xhtml#fig12_16)). The upper
    window in the figure presents plugin options similar to those you saw in [Figure
    12-13](ch12.xhtml#fig12_13), but with one additional category, Function ID, which
    we discuss in [Chapter 13](ch13.xhtml#ch13). The lower window in the figure is
    an empty, untitled tool development window that you can customize to create your
    tool, ExamineControlFlow.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择“工具 ▸ 创建工具…”菜单选项时，你将看到两个窗口（如[图 12-16](ch12.xhtml#fig12_16)所示）。图中的上窗口展示了类似于[图
    12-13](ch12.xhtml#fig12_13)中看到的插件选项，但增加了一个新的类别：功能 ID，详细内容请参见[第 13 章](ch13.xhtml#ch13)。图中的下窗口是一个空白的、未命名的工具开发窗口，你可以自定义该窗口以创建你的工具——ExamineControlFlow。
- en: '![image](Images/fig12-16.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-16.jpg)'
- en: '*Figure 12-16: Ghidra Configure Tool window*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-16：Ghidra 配置工具窗口*'
- en: You can compose your new tool by using plugins from Ghidra Core. When you select
    the Ghidra Core category, your tool development window populates with options
    from Ghidra Core, as shown in [Figure 12-17](ch12.xhtml#fig12_17). The resulting
    window has a lot in common with the CodeBrowser. This makes sense, as the CodeBrowser
    is also based on Ghidra Core.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 Ghidra Core 中的插件来组合你的新工具。当你选择 Ghidra Core 类别时，你的工具开发窗口将填充来自 Ghidra Core
    的选项，如[图 12-17](ch12.xhtml#fig12_17)所示。结果窗口与 CodeBrowser 很相似，这是因为 CodeBrowser 也是基于
    Ghidra Core 开发的。
- en: '![image](Images/fig12-17.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig12-17.jpg)'
- en: '*Figure 12-17: New, untitled tool before configuration*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-17：配置前的新工具，未命名*'
- en: 'You will need to remove some of the plugins that you don’t want in your new
    tool and then specify the windows that you do want. Click the **Configure** option
    under Ghidra Core and delete the following plugins you don’t need (you could remove
    many others, but we have chosen not to for the sake of brevity):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要移除一些你不想在新工具中使用的插件，然后指定你想要的窗口。点击 Ghidra Core 下的 **配置** 选项，并删除以下你不需要的插件（你还可以删除其他插件，但为了简洁起见，我们只删除了这些）：
- en: Console
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台
- en: DataTypeManagerPlugin
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataTypeManagerPlugin
- en: EclipseIntegrationPlugin
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EclipseIntegrationPlugin
- en: ProgramTreePlugin
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ProgramTreePlugin
- en: Each of these is associated with other plugins, so, as you remove each one from
    your new tool, Ghidra will display a warning message with the list of additional
    plugins that are being removed. You can add plugins back in by choosing File ▸
    Configure from your new tool at any time. An example of the warning message associated
    with removing DataTypeManagerPlugin is shown in [Figure 12-18](ch12.xhtml#fig12_18).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-18.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-18: Plugin dependency warning for DataTypeManagerPlugin*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: You can also control the layout of your new tool. In this case, you want to
    be able to see the Listing, Function Call Graph, and Function Graph windows in
    the same tool. Using the techniques described in previous chapters, you open the
    desired windows by using the Window menu in your new tool and then drag them into
    the desired locations. The new, untitled tool is shown in [Figure 12-19](ch12.xhtml#fig12_19).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-19.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-19: New, untitled tool*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Since you plan to use this tool frequently and share it with your collaborators,
    you should save the tool by selecting File ▸ Save Tool As, which presents you
    with the options to name the tool and associate an icon with it (see [Figure 12-20](ch12.xhtml#fig12_20)).
    You can choose from among the provided icons or select your own image file in
    a supported format (for example, *.jpg*, *.png*, *.gif*, and so on).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-20.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-20: Icon options for new tools*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: This new tool (and other tools you create) becomes part of your Tool Chest and
    will be displayed as an option in your projects, as shown in [Figure 12-21](ch12.xhtml#fig12_21).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: To share a new tool with others, export it using Tools ▸ Export Tools. Ghidra
    will ask you to choose a folder in which to save the tool and then create a *.tool*
    file containing your tool specification. To import a tool, use the Tools ▸ Import
    Tool option.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-21.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-21: New project with new tool options displayed in Tool Chest*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: While double-clicking a file in the Ghidra Project window opens the file in
    the CodeBrowser by default, you can choose any tool in your Tool Chest by right-clicking
    the file and then choosing the tool from the context menu. Alternatively, you
    can drag the filename and drop it onto a tool.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The more you use Ghidra, the more you will realize that there is no one-size-fits-all
    Ghidra interface that provides exactly the tools you need for each RE task you
    undertake. As a reverse engineer, the approach to analyzing a particular file
    largely depends on the file itself, the goal of the analysis, and the progress
    toward that goal.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: We have devoted much of this chapter and earlier chapters to describing how
    you might change Ghidra’s look and feel as well as the tools available to meet
    your needs. A final step in customizing Ghidra is the ability to save these configurations
    you have created so that you can choose the correct configuration based on the
    analysis project you are undertaking. This is accomplished through the creation
    and preservation of Ghidra workspaces.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**Workspaces**'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Ghidra *workspace* can be viewed as a virtual desktop that includes the tools
    as they are currently configured and the associated files. Imagine that you are
    analyzing a binary. While you are looking at the file, you notice characteristics
    that are similar to another file you analyzed last week. You would like to compare
    the two files to identify the similarities between the two functions, but you
    also want to continue analyzing the file. These are two unique problems that have
    a file in common.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: One way to proceed down these two paths concurrently is to create a workspace
    associated with each analysis problem. You can preserve your current analysis
    by selecting Project ▸ Workspace ▸ Add from the Ghidra Project window and giving
    the new workspace a name. In this example, we will call this workspace *FileAnalysis*.
    You can then open another tool from the Tool Chest and perhaps compare the two
    files using a specialized tool that utilizes the *Diff View* (see [Chapter 23](ch23.xhtml#ch23)),
    then create a second workspace (*FileComparison*) using the same method. You can
    now easily switch between the workspaces by selecting the workspace in the pull-down
    menu shown in [Figure 12-22](ch12.xhtml#fig12_22) or by using the Switch option
    in the Project ▸ Workspace menu, which cycles you through the available workspaces.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-22.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-22: Workspace options within Ghidra Project window*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When starting out with Ghidra, you may be perfectly satisfied with its default
    behaviors and its default CodeBrowser layout. However, as you become more comfortable
    with Ghidra’s basic features, you are certain to find ways to customize Ghidra
    for your reverse engineering workflow. While there is no way for a single chapter
    to provide complete coverage of every possible option Ghidra offers, we have introduced
    and provided examples for the customization capabilities that you will most likely
    need at some point in your SRE experience. Discovering additional useful tools
    and options is left as a matter of exploration for inquisitive readers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
