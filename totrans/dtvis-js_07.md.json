["```\nhubble_data = [\n    { nebulae: \"NGC 6822\", distance:  0.500, distance_error: 0.010,\n      velocity:   57, velocity_error: 2, },\n    { nebulae: \"NGC  221\", distance:  0.763, distance_error: 0.024,\n      velocity:  200, velocity_error: 6, },\n    { nebulae: \"NGC  598\", distance:  0.835, distance_error: 0.105,\n      velocity:  179, velocity_error: 3, },\n    *// Data set continues...*\n```", "```\n   <!DOCTYPE html>\n   **<html** lang=\"en\"**>**\n     **<head>**\n       **<meta** charset=\"utf-8\"**>**\n       **<title></title>**\n     **</head>**\n     **<body>**\n➊     **<div** id=\"container\"**></div>**\n➋     **<script**\n         src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.4.6/d3.min.js\"**>**\n       **</script>**\n     **</body>**\n   **</html>**\n```", "```\n**var** svg = $(\"<svg>\").attr(\"height\", height).attr(\"width\", width);\n$(\"#container\").append(svg);\n```", "```\n**var** svg = d3.select(\"#container\").append(\"svg\")\n    .attr(\"height\", height)\n    .attr(\"width\", width);\n```", "```\n**var** margin = {top: 20, right: 20, bottom: 30, left: 40},\n    width = 640 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n```", "```\n**var** svg = d3.select(\"#chart1\").append(\"svg\")\n    .attr(\"height\", height + margin.left + margin.right)\n    .attr(\"width\", width + margin.top + margin.bottom);\n```", "```\n**var** chart = svg.append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\"\n    );\n```", "```\n**var** xScale = d3.scale.linear()\n    .range([0,width]);\n**var** yScale = d3.scale.linear()\n    .range([height,0]);\n```", "```\n**var** minDist = d3.min(hubble_data, **function**(nebulae) {\n    **return** nebulae.distance - nebulae.distance_error;\n});\n```", "```\nxScale.domain([\n        d3.min(hubble_data, **function**(nebulae) {\n            **return** nebulae.distance - nebulae.distance_error;\n        }),\n        d3.max(hubble_data, **function**(nebulae) {\n            **return** nebulae.distance + nebulae.distance_error;\n        })\n    ])\n    .nice();\nyScale.domain([\n        d3.min(hubble_data, **function**(nebulae) {\n            **return** nebulae.velocity - nebulae.velocity_error;\n        }),\n        d3.max(hubble_data, **function**(nebulae) {\n            **return** nebulae.velocity + nebulae.velocity_error;\n        })\n    ])\n    .nice();\n```", "```\n**var** xAxis = d3.svg.axis()\n    .scale(xScale)\n    .orient(\"bottom\");\n**var** yAxis = d3.svg.axis()\n    .scale(yScale)\n    .orient(\"left\");\n```", "```\n**var** xAxisGroup = chart.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\");\n```", "```\nxAxis(xAxisGroup);\n```", "```\nchart.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n```", "```\nchart.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis)\n  .append(\"text\")\n    .attr(\"x\", width)\n    .attr(\"y\", -6)\n    .style(\"text-anchor\", \"end\")\n    .text(\"Distance (Mpc)\");\n```", "```\n**<g** class=\"x axis\" transform=\"translate(0,450)\"**>**\n    **<g** class=\"tick\" transform=\"translate(0,0)\" style=\"opacity: 1;\"**>**\n        **<line** y2=\"6\" x2=\"0\"**></line>**\n        **<text** y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\"**>**0**</text>**\n    **</g>**\n    **<g** class=\"tick\" transform=\"translate(77.77,0)\" style=\"opacity: 1;\"**>**\n        **<line** y2=\"6\" x2=\"0\"**></line>**\n        **<text** y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\"**>**2**</text>**\n    **</g>**\n    *<!-- Additional tick marks... -->*\n    **<path** class=\"domain\" d=\"M0,6V0H700V6\"**></path>**\n    **<text** x=\"700\" y=\"-6\" style=\"text-anchor: end;\"**>**Distance (Mpc)**</text>**\n**</g>**\n```", "```\nchart.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis)\n  .append(\"text\")\n    .attr(\"x\", width)\n    .attr(\"y\", -6)\n    .style(\"text-anchor\", \"end\")\n    .text(\"Distance (Mpc)\");\n\nchart.append(\"g\")\n    .call(yAxis)\n  .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \".71em\")\n    .style(\"text-anchor\", \"end\")\n    .text(\"Red Shift Velocity (km/s)\")\n```", "```\nhubble_data.forEach(**function**(nebulae) {\n    chart2.append(\"rect\")\n      .attr(\"x\", xScale(nebulae.distance - nebulae.distance_error))\n      .attr(\"width\", xScale(2 * nebulae.distance_error))\n      .attr(\"y\", yScale(nebulae.velocity - nebulae.velocity_error))\n      .attr(\"height\", height - yScale(2 * nebulae.velocity_error));\n});\n```", "```\nchart.append(\"line\")\n    .attr(\"x1\",xScale(0))\n    .attr(\"y1\",yScale(0))\n    .attr(\"x2\",xScale(20))\n    .attr(\"y2\",yScale(1400));\n```", "```\n**var** albums = [\n  {\n    album: \"Miles Davis - Kind of Blue\",\n    musicians: [\n      \"Cannonball Adderley\",\n      \"Paul Chambers\",\n      \"Jimmy Cobb\",\n      \"John Coltrane\",\n      \"Miles Davis\",\n      \"Bill Evans\"\n  ]\n},{\n  album: \"John Coltrane - A Love Supreme\",\n  musicians: [\n    \"John Coltrane\",\n    \"Jimmy Garrison\",\n    \"Elvin Jones\",\n    \"McCoy Tyner\"\n  ]\n*// Data set continues...*\n```", "```\n**var** nodes = [\n  {\n    \"name\": \"Miles Davis - Kind of Blue\",\n    \"links\": [\n      \"Cannonball Adderley\",\n      \"Paul Chambers\",\n      \"Jimmy Cobb\",\n      \"John Coltrane\",\n      \"Miles Davis\",\n      \"Bill Evans\"\n    ],\n    \"x\": 270,\n    \"y\": 200\n  },\n  {\n    \"name\": \"John Coltrane - A Love Supreme\",\n    \"links\": [\n      \"John Coltrane\",\n      \"Jimmy Garrison\",\n      \"Elvin Jones\",\n      \"McCoy Tyner\"\n    ],\n    \"x\": 307.303483,\n    \"y\": 195.287474\n  },\n  *// Data set continues...*\n];\n```", "```\n**var** edges = [\n  {\n    \"source\": 0,\n    \"target\": 16,\n    \"links\": [\n      \"Cannonball Adderley\",\n      \"Miles Davis\"\n    ]\n  },\n  {\n    \"source\": 0,\n    \"target\": 6,\n    \"links\": [\n      \"Paul Chambers\",\n      \"John Coltrane\"\n    ]\n  },\n  *// Data set continues...*\n];\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    **<div** id=\"container\"**></div>**\n    **<script**\n      src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.4.6/d3.min.js\"**>**\n    **</script>**\n  **</body>**\n**</html>**\n```", "```\n**var** svg = d3.select(\"#container\").append(\"svg\")\n    .attr(\"height\", 500)\n    .attr(\"width\", 960);\n```", "```\nnodes.forEach(**function**(node) {\n    svg.append(\"circle\");\n});\n```", "```\n**var** selection = svg.selectAll(\"circle\")\n.data(nodes);\n\nselection.enter().append(\"circle\");\n```", "```\n**var** nodeSelection = svg.selectAll(\"circle\")\n    .data(nodes)\n    .enter().append(\"circle\");\n```", "```\n**var** edgeSelection = svg.selectAll(\"line\")\n    .data(edges)\n    .enter().append(\"line\");\n```", "```\ncircle **{**\n    **fill:** #ccc**;**\n    **stroke:** #fff**;**\n    **stroke-width:** 1px**;**\n**}**\n\nline **{**\n    **stroke:** #777**;**\n    **stroke-width:** 1px**;**\n**}**\n```", "```\nnodeSelection.attr(\"r\", 10);\n```", "```\nnodeSelection\n    .attr(\"r\", 10)\n    .attr(\"cx\", **function**(dataValue) { **return** dataValue.x; })\n    .attr(\"cy\", **function**(dataValue) { **return** dataValue.y; });\n```", "```\nedgeSelection\n    .attr(\"x1\", **function**(d) { **return** nodes[d.source].x; })\n    .attr(\"y1\", **function**(d) { **return** nodes[d.source].y; })\n    .attr(\"x2\", **function**(d) { **return** nodes[d.target].x; })\n    .attr(\"y2\", **function**(d) { **return** nodes[d.target].y; });\n```", "```\n**var** force = d3.layout.charge()\n    .size([width, height])\n    .nodes(nodes)\n    .links(edges)\n    .linkDistance(40)\n    .charge(-500);\n```", "```\nforce.on(\"tick\", **function**() {\n    *// Update graph with intermediate results*\n});\n```", "```\nforce.on(\"tick\", **function**() {\n    nodeSelection.each(**function**(node) {\n        node.x = Math.max(node.x, 5);\n        node.y = Math.max(node.y, 5);\n        node.x = Math.min(node.x, width-5);\n        node.y = Math.min(node.y, height-5);\n    });\n    *// Update graph with intermediate results*\n});\n```", "```\nnodeSelection\n    .attr(\"cx\", **function**(d) { **return** d.x; })\n    .attr(\"cy\", **function**(d) { **return** d.y; });\n```", "```\nedgeSelection\n    .attr(\"x1\", **function**(d) { **return** d.source.x; })\n    .attr(\"y1\", **function**(d) { **return** d.source.y; })\n    .attr(\"x2\", **function**(d) { **return** d.target.x; })\n    .attr(\"y2\", **function**(d) { **return** d.target.y; });\n```", "```\nforce.start();\n```", "```\nnodeSelection.on(\"click\", **function**(d) {\n    *// Handle the click event*\n});\n```", "```\nd3.select(**this**)\n   .classed(\"selected\", **true**)\n   .attr(\"r\", 1.5*nodeRadius);\n```", "```\n   edgeSelection.each(**function**(edge) {\n       **if** ((edge.source === d) || (edge.target === d)) {\n➊         d3.select(**this**).classed(\"selected\",**true**);\n       }\n   });\n```", "```\n   nodeSelection\n➊     .filter(**function**(node) { **return** node !== d; })\n       .classed(\"selected\", **false**)\n       .attr(\"r\", nodeRadius);\n```", "```\nedgeSelection.classed(\"selected\", **false**);\n```", "```\nd3.select(**this**)\n    .classed(\"selected\", **true**)\n    .attr(\"r\", 1.5*nodeRadius);\n```", "```\nnodeSelection.on(\"click\", **function**(d) {\n\n    nodeSelection\n        .filter(**function**(node) { **return** node !== d; })\n        .classed(\"selected\", **false**)\n        .attr(\"r\", nodeRadius);\n\n    edgeSelection.classed(\"selected\", **false**);\n\n    **if** (d3.select(**this**).classed(\"selected\")) {\n        d3.select(**this**)\n            .classed(\"selected\", **false**)\n            .attr(\"r\", nodeRadius)\n\n    } **else** {\n        d3.select(**this**)\n            .classed(\"selected\", **true**)\n            .attr(\"r\", 1.5*nodeRadius);\n\n        edgeSelection.each(**function**(edge) {\n             **if** ((edge.source === d) || (edge.target === d)) {\n                 d3.select(**this**).classed(\"selected\",**true**);\n             }\n        });\n    }\n});\n```", "```\nf_scale,latitude,longitude\nEF1,33.87,-88.23\nEF1,33.73,-87.9\nEF0,33.93,-87.5\nEF1,34.06,-87.37\nEF1,34.21,-87.18\nEF1,34.23,-87.11\nEF1,31.54,-88.16\nEF1,31.59,-88.06\nEF1,31.62,-87.85\n--*snip*--\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    **<div** id=\"map\"**></div>**\n    **<script**\n      src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.4.6/d3.min.js\"**>**\n    **</script>**\n  **</body>**\n**</html>**\n```", "```\n➊ **var** width = 640,\n➋     height = 400;\n\n➌ **var** projection = d3.geo.albers()\n➍     .scale(888)\n➎     .translate([width / 2, height / 2]);\n\n➏ **var** path = d3.geo.path()\n➐     .projection(projection);\n```", "```\n   **var** svg = d3.select(\"#map\").append(\"svg\")\n       .attr(\"width\", width)\n       .attr(\"height\", height);\n\n➊  **var** g = svg.append(\"g\");\n```", "```\nd3.json(\"data/us-states.json\", **function**(map) {\n    *// Process the JSON map data*\n});\n```", "```\n➊ g.selectAll(\"path\")\n➋     .data(map.features)\n➌   .enter().append(\"path\")\n➍     .attr(\"d\", path);\n```", "```\n   d3.csv(\"tornadoes.csv\", **function**(data) {\n➊     data = data.filter(**function**(d, i) {\n➋         **if** (d.latitude && d.longitude) {\n➌             d.latitude = +d.latitude;\n➍             d.longitude = +d.longitude;\n➎             d.f_scale = +d.f_scale[2];\n➏             d.position = projection([\n➐                 d.longitude, d.latitude\n               ]);\n➑             **return** **true**;\n           }\n       });\n       *// Continue creating the visualization...*\n   });\n```", "```\n   g.selectAll(\"circle\")\n       .data(data)\n     .enter().append(\"circle\")\n       .attr(\"cx\", **function**(d) { **return** d.position[0]; })\n       .attr(\"cy\", **function**(d) { **return** d.position[1]; })\n➊     .attr(\"r\", **function**(d) { **return** 4 + 2*d.f_scale; });\n```", "```\n**var** active = d3.select(**null**)\n```", "```\n   g.selectAll(\"path\")\n       .data(map.features)\n     .enter().append(\"path\")\n       .attr(\"d\", path)\n➊     .on(\"click\", clicked);\n```", "```\n   **var** clicked = **function**(d) {\n➊     active.attr(\"fill\", \"#cccccc\");\n       active = d3.select(**this**)\n           .attr(\"fill\", \"#F77B15\");\n\n➋     **var** bounds = path.bounds(d),\n           dx = bounds[1][0] - bounds[0][0],\n           dy = bounds[1][1] - bounds[0][1],\n           x = (bounds[0][0] + bounds[1][0]) / 2,\n           y = (bounds[0][1] + bounds[1][1]) / 2,\n➌         scale = .9 / Math.max(dx / width, dy / height),\n➍         translate = [\n               width / 2 - scale * x,\n               height / 2 - scale * y];\n\n➎     g.transition()\n           .duration(750)\n           .attr(\"transform\", \"translate(\" +\n               translate + \")scale(\" +\n               scale + \")\");\n   };\n```", "```\nstate,region,county\nConnecticut,New England,Fairfield County\nConnecticut,New England,Hartford County\nConnecticut,New England,Hartford County\nConnecticut,New England,Tolland County\nMaine,New England,Somerset County\nMaine,New England,Washington County\nMaine,New England,Piscataquis County\n--*snip*--\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    **<div** id=\"chart\"**></div>**\n    **<script**\n      src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.4.6/d3.min.js\"**>**\n    **</script>**\n  **</body>**\n**</html>**\n```", "```\n   **var** width = 640,\n       height = 400,\n➊     maxRadius = Math.min(width, height) / 2;\n\n   **var** svg = d3.select(\"#chart\").append(\"svg\")\n       .attr(\"width\", width)\n       .attr(\"height\", height);\n\n   **var** g = svg.append(\"g\");\n➋     .attr(\"transform\", \"translate(\" +\n           (width / 2) + \",\" +\n           (height / 2) + \")\");\n```", "```\n**var** theta = d3.scale.linear()\n    .range([0, 2 * Math.PI]);\n**var** radius= d3.scale.sqrt()\n    .range([0, maxRadius]);\n```", "```\n**var** arc = d3.svg.arc()\n    .startAngle(**function**(d) {\n        **return** Math.max(0, Math.min(2 * Math.PI, theta(d.x)));\n    })\n    .endAngle(**function**(d) {\n        **return** Math.max(0, Math.min(2 * Math.PI, theta(d.x + d.dx)));\n    })\n    .innerRadius(**function**(d) {\n        **return** Math.max(0, radius(d.y));\n    })\n    .outerRadius(**function**(d) {\n        **return** Math.max(0, radius(d.y + d.dy));\n    });\n```", "```\nd3.csv(\"tornadoes.csv\", **function**(data) {\n    *// Continue processing the data...*\n});\n```", "```\n[ {\n    \"state\":\"Connecticut\",\n    \"region\":\"New England\",\n    \"county\":\"Fairfield County\"\n  },{\n    \"state\":\"Connecticut\",\n    \"region\":\"New England\",\n    \"county\":\"Hartford County\"\n  },{\n    \"state\":\"Connecticut\",\n    \"region\":\"New England\",\n    \"county\":\"Hartford County\"\n  },\n*// Data set continues...*\n```", "```\n➊ **var** hierarchy = {\n       key: \"United States\",\n       values: d3.nest()\n➋         .key(**function**(d) { **return** d.region; })\n           .key(**function**(d) { **return** d.state; })\n           .key(**function**(d) { **return** d.county; })\n➌         .rollup(**function**(leaves) {\n➍             **return** leaves.length;\n           })\n➎         .entries(data)\n       };\n```", "```\n{\n    \"key\": \"United States\",\n    \"values\": [\n        {\n            \"key\": \"New England\",\n            \"values\": [\n                {\n                    \"key\": \"Connecticut\",\n                    \"values\": [\n                        {\n                            \"key\": \"Fairfield County\",\n                            \"values\": 1\n                        },{\n                            \"key\": \"Hartford County\",\n                            \"values\": 2\n                        },{\n*// Data set continues...*\n```", "```\n   **var** partition = d3.layout.partition()\n➊     .children(**function**(d) {\n➋         **return** Array.isArray(d.values) ? d.values : **null**;\n       })\n➌     .value(**function**(d) {\n➍         **return** d.values;\n       });\n```", "```\n➊  **var** path = g.selectAll(\"path\")\n       .data(partition.nodes(hierarchy))\n➋     .enter().append(\"path\")\n➌       .attr(\"d\", arc);\n```", "```\n➊ **var** color = **function**(d) {\n       **var** colors;\n       **if** (!d.parent) {\n➋         colors = d3.scale.category10();\n➌         d.color = \"#fff\";\n       }\n\n       *// More code needed...*\n```", "```\n   **if** (d.children) {\n➊     d.children.map(**function**(child, i) {\n           **return** {value: child.value, idx: i};\n➋     }).sort(**function**(a,b) {\n             **return** b.value - a.value\n➌     }).forEach(**function**(child, i) {\n           d.children[child.idx].color = colors(i);\n       });\n   }\n```", "```\n   **var** color = **function**(d) {\n       **var** colors;\n       **if** (!d.parent) {\n           *// Handle root node as above...*\n       } **else** **if** (d.children) {\n\n➊         **var** startColor = d3.hcl(d.color)\n                               .darker(),\n               endColor = d3.hcl(d.color)\n                               .brighter();\n\n➋         colors = d3.scale.linear()\n➌                 .interpolate(d3.interpolateHcl)\n➍                 .range([\n                       startColor.toString(),\n                       endColor.toString()\n                   ])\n➎                 .domain([0,d.children.length+1]);\n       }\n\n       *// Code continues...*\n```", "```\n**var** path = g.selectAll(\"path\")\n    .data(partition.nodes(hierarchy))\n  .enter().append(\"path\")\n    .attr(\"d\", arc)\n    .attr(\"fill\", color);\n```", "```\n   **var** path = g.selectAll(\"path\")\n       .data(partition.nodes(hierarchy))\n       .enter().append(\"path\")\n         .attr(\"d\", arc)\n         .attr(\"fill\", color)\n➊         .on(\"click\", handleClick);\n```", "```\n**function** handleClick(datum) {\n    path.transition().duration(750)\n        .attrTween(\"d\", arcTween(datum));\n};\n```", "```\n**function** arcTween(datum) {\n    **var** thetaDomain = d3.interpolate(theta.domain(),\n                         [datum.x, datum.x + datum.dx]),\n        radiusDomain = d3.interpolate(radius.domain(),\n                         [datum.y, 1]),\n        radiusRange = d3.interpolate(radius.range(),\n                         [datum.y ? 20 : 0, maxRadius]);\n\n    **return** **function** calculateNewPath(d, i) {\n        **return** i ?\n            **function** interpolatePathForRoot(t) {\n                **return** arc(d);\n            } :\n            **function** interpolatePathForNonRoot(t) {\n                theta.domain(thetaDomain(t));\n                radius.domain(radiusDomain(t)).range(radiusRange(t));\n                **return** arc(d);\n            };\n    };\n};\n```"]