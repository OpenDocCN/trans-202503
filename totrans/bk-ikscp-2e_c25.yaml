- en: '25'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tutorial: The Rose'
  prefs: []
  type: TYPE_NORMAL
- en: The complex image of a rose (see [Figure 17 in the color insert](c15b.xhtml#ill-fig17))
    was created to showcase Inkscape's versatility. A single drawing of a rose—traced
    from a photo—is rendered in a different way in each of the six square windows
    as well as in the background. A single tutorial showing the stages of creating
    this image is like seven different tutorials on ways to draw a rose—or anything
    else, for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: I started with a photo, but if you can draw well, you don’t need to do that.
    Just draw whatever you like on an empty canvas. Tracing a photo, however, is a
    useful technique by itself.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **File ▶ Import** (or press Ctrl-I) to import the photo, and scale and
    position it as convenient. Rename the layer with the image to background. You
    will need to hide and show the photo several times, which is much easier to do
    when it's in its own layer. Reducing the photo’s opacity and locking its layer
    so you don’t move it accidentally is a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Then, create a new layer called ink and start to trace over the outlines and
    the boundaries between colors in the photo ([Figure 25-1](#fig25-1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-01.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-1: Importing the image and setting up tracing using the Calligraphic
    pen'
  prefs: []
  type: TYPE_NORMAL
- en: The best tool to use for tracing an image depends on the nature of the image
    and the result you want to get. If you're tracing geometric shapes that can be
    rendered as straight lines and Bézier segments, use the Pen tool. If you need
    more freeform and artistic shapes but want to minimize the number of paths and
    nodes, the Pencil tool is a better choice. Finally, if you want an expressive,
    artistically untidy style, use the Calligraphic pen. I wanted my drawing to be
    minimal but artistic and natural, and I had no reason to save on the number of
    nodes, so I used the Calligraphic pen, as shown in [Figure 25-2](#fig25-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-02.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-2: Tracing complete: 106 path objects in layerink'
  prefs: []
  type: TYPE_NORMAL
- en: I used a pressure-sensitive tablet pen, allowing me to vary the width of the
    brush stroke by how hard I pressed the pen. You can get a similar result with
    a regular mouse, though. In fact, you may even prefer using a mouse, because controlling
    the stroke thickness with pen pressure, although nice in theory, requires a lot
    of practice and rarely produces the exact result you desire. A better approach
    is to draw with a constant width in the Calligraphic pen and then apply the Tweak
    tool's Shrink/Grow mode ([12.6.4](c12.xhtml#section12.6.4)) to make your strokers
    thicker or thinner where appropriate, as [Figure 25-3](#fig25-3) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-03.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-3: Tweaking the drawing with the Tweak tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'The black and white outline is ready; now let''s add color to it. With a crisp
    ink outline, I wanted a soft washed-out coloring. To do that, hide thebackground
    layer, create a new layer called watercolor, and put it below the ink layer. After
    that, with a wide calligraphic brush, make a few wild strokes: red under the rose,
    green under the stalk and leaf, and various shades of blue around those. Finally,
    blur those strokes by a large enough radius so they almost blend together ([Figure 25-4](#fig25-4)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-04.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-4: Adding a blurred background'
  prefs: []
  type: TYPE_NORMAL
- en: 'This already looks nice, but not nice enough. The smoothly blurred blotches
    are*too* smooth—and, frankly, boring. To make them more natural, I expanded the
    simple Gaussian Blur filter applied to the background by adding more primitives
    to it. First, I added a Turbulence primitive, composited with the blur, to imitate
    paper grain. This looked better but was still too uniform—too computer-generated.
    I then added another Turbulence component with a much larger period, which I used
    twice: once via a Displacement Map, for making the overall watercolor more blotchy
    and splotchy, and then via a Composite operator, for modulating the small-scale
    paper grain to imitate paper more realistically, where some areas are smoother
    and others are more grainy, as shown in [Figure 25-5](#fig25-5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-05.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-5: Building up the "realistic watercolor" filter for the background'
  prefs: []
  type: TYPE_NORMAL
- en: The final composite filter, which I called *Sandy Blur* (see [17.5.2](c17.xhtml#section17.5.2)
    for more details), looked a lot more realistic but was slower to render. I had
    to switch to the No Filters mode ([17.5.4](c17.xhtml#section17.5.4)) so I could
    work without the annoying rendering delays.
  prefs: []
  type: TYPE_NORMAL
- en: As a last touch, you can duplicate the content of the ink layer and blur it
    to form a shadow, or (as I did) soften the ink lines slightly by outsetting (thickening)
    duplicates of the ink paths and making them semitransparent. The rose drawing’s
    background is done.
  prefs: []
  type: TYPE_NORMAL
- en: '25.1 Treatment 1: Engraving'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ink and watercolor layers finished, I went on to create a series of
    treatments—demos on how to render the same image differently. I overlaid the rose
    with six randomly scattered squares and limited each treatment to one square.
  prefs: []
  type: TYPE_NORMAL
- en: The first rendition is an engraving made of lattices of curved variable-width
    pen strokes. For this treatment, I chose an area of the rose where the curving
    and shading of the petals was especially deep. Engraving is an intricate art;
    I do not claim that my attempt is any good, but I was surprised by how easy it
    was to do using Inkscape's tools.
  prefs: []
  type: TYPE_NORMAL
- en: When you have an outline and want to turn it into an engraving, the first step
    is planning. Think about the most natural directions for the engraving lines in
    each part of the drawing. Create a new layer and draw several wide-spaced test
    strokes with the Calligraphic pen, trying to capture the changing curvature of
    each area while maintaining the best directional contrast at the boundaries where
    the areas of different curvature meet ([Figure 25-6](#fig25-6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-06.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-6: Choosing the engraving square and doing test strokes'
  prefs: []
  type: TYPE_NORMAL
- en: Once you get an idea of how you want the engraving strokes to go, move the test
    strokes aside (but keep them for reference) and use the Calligraphic pen's guide
    tracking feature ([14.2.7](c14.xhtml#section14.2.7)) to fill each area with evenly
    spaced uniform-width strokes ([Figure 25-7](#fig25-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-07.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-7: Creating an evenly spaced lattice with the Calligraphic pen'
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if the direction or curvature of your strokes drifts off somewhat;
    you will be able to fix that later. What matters more at this stage is the uniformity
    of spacing. You can rotate the canvas (Ctrl-Shift-wheel) to make it easier to
    stroke. Draw beyond the edges of the area you're filling; it's much easier to
    trim strokes that are too long than it is to extend short ones.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the Tweak tool to do the rest of the work ([Figure 25-8](#fig25-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-08.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-8: Finalizing the engraving with the Tweak tool'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Shrink mode to trim line ends and thin them, the Grow mode to thicken,
    and the Push mode to move and curve the entire lattice (select all of the lattice’s
    strokes to bend them together). Don't worry about the trimmed strokes’ unsightly
    butts. In the final result, the ink layer’s wide boundary strokes will cover them.
  prefs: []
  type: TYPE_NORMAL
- en: '25.2 Treatment 2: Tessellation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This treatment is easy to do because it's mostly automatic. The only tricky
    part is creating the tessellation itself—that is, a pattern of complex interlocked
    tiles covering the entire plane without holes or overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: Draw a shape—any shape—and create a pattern of tiled clones from it (**Edit ▶ Clone ▶ Create
    Tiled Clones**, [16.6](c16.xhtml#section16.6)) with any nontrivial symmetry group;
    I used P3\. At first, the clones do not form any kind of tessellation; it is your
    task to reshape the source shape—with its clones already in place— until the clones
    meet and smoothly interlock. This step is easier than it might seem. The fact
    that the clones immediately reflect any change in the source shape makes the task
    almost trivial. Just add nodes and move them to grow appendages or make depressions
    in your shape. Each of the clones will mirror those changes. Keep sculpting the
    shape until the clones precisely interlock and cover the entire plane, as shown
    in [Figure 25-9](#fig25-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-09.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-9: Creating a tessellation'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s make the pattern reflect the background colors, so that the rose
    drawing shows through. Once set up, the process is mostly automatic. Make sure
    the **Use saved size and position of the tile** checkbox is on, delete the existing
    tiling (**Remove** button), and set the **Width** and **Height** for the pattern
    to cover all of the area you want covered. Unset the fill color of the original
    shape (right-click the **Fill:** swatch in the status bar and choose**Unset**).
    Then, go to the **Trace** tab, enable **Trace the drawing under the tiles**, pick
    **Color**, and apply the picked value to the clones'**Color** as well ([Figure 25-10](#fig25-10)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-10.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-10: Color tracing with the tessellation'
  prefs: []
  type: TYPE_NORMAL
- en: As a final touch, let's add slight glossy highlights to the tiles using filters
    ([Chapter 17](c17.xhtml#ch17)). One problem with this is that the gloss filter
    is not symmetric—it has one special direction from which the light is cast. However,
    if you apply such a filter to rotated *clones* in the pattern, the filter will
    be rotated together with the clones and all highlights will appear as if lit from
    different directions. To work around this, simply group all tiled clones (Ctrl-G)
    and apply the **Button** filter from **Filters ▶ Bevels** to the group, as shown
    in [Figure 25-11](#fig25-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-11.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-11: Adding highlights'
  prefs: []
  type: TYPE_NORMAL
- en: '25.3 Treatment 3: A Field of Cubes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the color-tracing tessellation, this treatment uses the Create Tiled Clones
    dialog. In other respects, however, this design is the direct opposite. It’s randomized
    instead of regular, pseudo-3D instead of flat, and uses three different original
    objects—and thus three intermingled patterns—instead of a single one.
  prefs: []
  type: TYPE_NORMAL
- en: Start by drawing a cube with the 3D Box tool. Convert it into a group of paths
    (Shift-Ctrl-C) and duplicate it (Ctrl-D). In one copy of the cube, enter it as
    the group, select all six sides and union them (Ctrl-+), then ungroup. This turns
    a cube into a single cube-shaped path. Unset its fill—in the clones, this one
    will take the color of the background. For the second copy of the cube, use 50
    percent opacity and either white or black on each of the sides without unioning.
    You can also add an ellipse with a white-to-transparent elliptic gradient on the
    foremost corner of the cube as a highlight ([Figure 25-12](#fig25-12), left).
    This is the shading layer that makes each box look like a box despite a change
    in overall color.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, position the shading cube exactly on top of the background shape and
    group them together. This is your cloneable object that can both pick the background
    color with its unset-fill shape and present a pseudo-3D appearance with the semitransparent
    overlay. Repeat all these steps for two more differently oriented cubes, so there
    are three overall ([Figure 25-12](#fig25-12), right).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-12.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-12: Original objects for the cube scattering'
  prefs: []
  type: TYPE_NORMAL
- en: Now, select a prepared cube and create a P1-symmetry scattering over the area
    you want to cover, using color-to-color tracing in the Create Tiled Clones dialog
    ([16.6.6](c16.xhtml#section16.6.6)). Randomize their rotation (slightly, so as
    not to destroy the perception of all boxes being in a common perspective), their
    size, and their position. To imitate the effect of a 3D field, set scaling and
    row spacing to increase per row from top to bottom, as shown in [Figure 25-13](#fig25-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-13.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-13: Scattering the cubes'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this procedure for the two other cubes you've prepared, covering the
    same area. This combined field of cubes doesn't yet look like a *field*, because
    the z-order is wrong. The cubes that are closer to the bottom and larger are supposed
    to be closer to us and therefore on top of the others, but they are not. To fix
    this, use the **Restack** extension (from **Extensions ▶ Arrange**) to sort the
    z-order of the boxes so they stack from top to bottom. Then, do a single **Unclump**
    action from the **Align and Distribute** dialog so the arrangement of cubes has
    fewer gaps ([Figure 25-14](#fig25-14)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-14.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-14: The field of cubes: z-order sorting and unclumping'
  prefs: []
  type: TYPE_NORMAL
- en: The goal is to reproduce a square area of the rose's background layer. However,
    if you use automatic color-to-color background tracing (as done in [16.6.6](c16.xhtml#section16.6.6))
    for all three patterns placed over the target area, you may find the colors resulting
    from that tracing are quite drab. That is because each cube samples color from
    a relatively large area that it covers, averages it, and makes it less saturated
    than the original background image. Also, the 3D shading overlay in each cube
    washes out the color of the background shape.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, you can simply paint the cubes manually, as shown in [Figure 25-15](#fig25-15).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-15.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-15: Painting colors on the cubes'
  prefs: []
  type: TYPE_NORMAL
- en: Just select all the cube clones, choose the Tweak tool’s Color Paint mode ([8.9](c08.xhtml#section8.9)),
    choose a bright red color (or pick it from the background image with the Dropper,
    [8.8](c08.xhtml#section8.8)), and paint over the image’s red area. Then, do the
    same for the other colored areas, including the black ink lines. (If it doesn’t
    work, you may have forgotten to unset fill in the bottom path in each cube, see
    [Figure 25-12](#fig25-12).) Such a thoroughly bitmap-like paint job is a fun way
    to edit a vector drawing!
  prefs: []
  type: TYPE_NORMAL
- en: Finally, group all the cubes and clip ([18.3](c18.xhtml#section18.3)) the group
    to the chosen square.
  prefs: []
  type: TYPE_NORMAL
- en: '25.4 Treatment 4: Photorealistic Drawing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This photorealistic rendition is the most time-consuming of all. I wanted to
    re-create the original photograph as closely as possible in this part of the drawing.
    Absolute photorealism, of course, is neither possible nor desirable, but you can
    strive for the characteristic "vector photorealism" look that is attractive in
    its own way. The key here is a smart use of shapes, gradients, and blurs.
  prefs: []
  type: TYPE_NORMAL
- en: First, locate the square in which you're going to work and reveal (but leave
    locked) the layer that has the source photo. Start by dividing your drawing into
    areas, each approximated by flat color or a single gradient. Use the Pencil tool
    ([14.1.2](c14.xhtml#section14.1.2)) to create these areas and the Gradient tool
    ([10.1](c10.xhtml#section10.1)) to paint and stretch gradients across them, as
    shown in [Figure 25-16](#fig25-16). Use the Dropper tool ([8.8](c08.xhtml#section8.8))
    to pick the exact colors from the photo layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-16.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-16: Approximating areas of the image using paths with gradients'
  prefs: []
  type: TYPE_NORMAL
- en: To soften the edges, blur the shapes a bit (no more than 2 percent) using the
    **Fill and Stroke** dialog. To apply some naturalistic texture, draw a 40 percent
    gray, 10 percent opaque rectangle over the shapes and apply **Filters ▶ Overlays ▶ Speckle**
    to it. In the**Filter Editor** dialog, increase the frequency of the random texture
    (**Base Frequency** in the **Turbulence** primitive), as [Figure 25-17](#fig25-17)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-17.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-17: Blurring and texturizing the background'
  prefs: []
  type: TYPE_NORMAL
- en: What exists so far is just a layer of rough background paint, upon which you’ll
    overlay the fine details—reproducing the characteristic wrinkles and texture of
    the rose petals. You’ll primarily use the Calligraphic pen ([14.2](c14.xhtml#section14.2))
    with relatively small Width, zeroFixation, and some Tremor. Typically you would
    draw with semitransparent black or white for shades or highlights, respectively.
    You can also try barely saturated versions of complimentary colors (for example,
    pale green for red areas) that can often make your drawing look more natural—in
    real life, color tints are never perfectly uniform.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you’ll need to blur these semitransparent brush strokes as well.
    Don't apply blur to each stroke separately—this would be tedious to do (unlike
    opacity, blur is not retained in the tool's style and therefore not applied to
    the next created object automatically) and slower to render. Instead, draw a single
    stroke, group it (Ctrl-G), blur the group, and then enter the group (Ctrl-Enter).
    Now, each new object you create with Calligraphic pen or any other tool gets added
    to the blurred group and becomes blurred along with its siblings ([Figure 25-18](#fig25-18)).
    When finished drawing within the group, press Ctrl-Backspace to leave it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-18.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-18: Adding hand-drawn foreground strokes'
  prefs: []
  type: TYPE_NORMAL
- en: Pay special attention to the edges of the objects on your drawing—properly emphasizing
    edges with dense highlights and shadows is the key to an attractive "painterly"
    look. Making the edges of highlights and shadows slightly more intense often works
    well.
  prefs: []
  type: TYPE_NORMAL
- en: '25.5 Treatment 5: Map'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The map treatment is less an example of a practically useful technique than
    it is a creative reinterpretation of something plain and straightforward. I was
    just playing with an eight-color Potrace tracing (Path ▶ Trace Bitmap, [18.5.2](c18.xhtml#section18.5.2))
    of this area of the original photo when I noticed that it acquired an interesting
    map-like look when I discarded the fill colors and assigned a dashed stroke to
    the resulting shapes, as shown in [Figure 25-19](#fig25-19).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t01-19.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25-19: Tracing the source photo'
  prefs: []
  type: TYPE_NORMAL
- en: To imitate the surface of an old map, I created a yellowish, slightly rough
    (Filters ▶ Distort ▶ Roughen), semitransparent (so that the background drawing
    showed through a bit) background rectangle. Then I added some cryptic text labels
    to complete the picture.
  prefs: []
  type: TYPE_NORMAL
- en: '25.6 Treatment 6: Spruced-Up Photo'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the spruced-up photo treatment, I wanted to showcase Inkscape's abilities
    as a tool for making bitmaps look better, rather than as a vector editor. Of course
    "better" is a subjective term, but you can make a number of simple edits in Inkscape
    to improve almost any photo’s appearance.[Figure 18 in the color insert](c15b.xhtml#ill-fig18)
    shows a fragment of the original rose photo with colors brightened, shadows deepened,
    highlights added, and textures empasized.
  prefs: []
  type: TYPE_NORMAL
- en: As a final touch for the combined rose image, I added dotted frames to all six
    squares containing various treatments. [Figure 17 in the color insert](c15b.xhtml#ill-fig17)
    shows the complete image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever I import a photo into Inkscape, I usually make one or more of the
    following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: I apply Filters ▶ Color ▶ Lightness-Contrast to expand the photo’s dynamic range.
    In a bitmap editor such as Photoshop or GIMP, I would use the Levels command for
    this, but in Inkscape, the Lightness-Contrast filter is the closest approximation.
    The idea is to stretch all the colors of the photo apart so that its darkest area
    becomes maximally dark (that is, black) and its lightest area becomes maximally
    light (that is, white). If performed correctly, no image details are lost in this
    operation, but the photo's visual appearance improves, often considerably. I typically
    enable the Live preview checkbox in the Lightness-Contrast dialog and tweak the
    two values, trying to contrast without losing either shades or highlights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightness-Contrast range expansion works on the entire image indiscriminately.
    Usually, however, I can see that some areas would benefit from manual lightening
    or darkening. My favorite way of doing that is to create a white circle ([11.4](c11.xhtml#section11.4)),
    paint it with a white-to-transparent elliptic gradient ([10.1](c10.xhtml#section10.1)),
    and assign the Overlay blend mode ([17.2](c17.xhtml#section17.2)) to it. I duplicate
    it, move it to where I need a highlight, and scale to taste; if a particular highlight
    seems too strong, I tone down its opacity. For emphasizing a dark detail, I create
    a similar shader object with black instead of white. Sometimes, I also use other
    colors of highlights for color accents. That's what I did on [Figure 18 in the
    color insert](c15b.xhtml#ill-fig18) (bottom) to make the shading of the petals
    more expressive; the extents of the overlays are shown with the black and white
    outlines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost always, an image that is part of a design composition needs to have its
    saturation adjusted. Some images—such as our rose—look best when highly saturated.
    Most of the time, however, a photo may benefit from being fully or partially desaturated.
    For this, I use the Filters ▶ Color ▶ Color Shift filter that has two sliders
    for hue and saturation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I often improve low-resolution photos by using the Filters ▶ Image Effects ▶ Sharpen
    or Sharpen More filters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
