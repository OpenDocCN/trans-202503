- en: '**NETWORK PROTOCOL ANALYSIS TOOLKIT**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, I’ve demonstrated several tools and libraries you can
    use in network protocol analysis, but I didn’t discuss many that I use regularly.
    This appendix describes the tools that I’ve found useful during analysis, investigation,
    and exploitation. Each tool is categorized based on its primary use, although
    some tools would fit several categories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Passive Network Protocol Capture and Analysis Tools**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As discussed in [Chapter 2](../Text/ch02.xhtml#ch02), passive network capture
    refers to listening and capturing packets without disrupting the flow of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '***Microsoft Message Analyzer***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://blogs.technet.com/b/messageanalyzer/](http://blogs.technet.com/b/messageanalyzer/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Commercial; free of charge'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform** Windows'
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Message Analyzer is an extensible tool for analyzing network traffic
    on Windows. The tool includes many parsers for different protocols and can be
    extended with a custom programming language. Many of its features are similar
    to those of Wireshark except Message Analyzer has added support for Windows events.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0278-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***TCPDump and LibPCAP***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://www.tcpdump.org/](http://www.tcpdump.org/)*; *[http://www.winpcap.org/](http://www.winpcap.org/)*
    for Windows implementation (WinPcap/WinDump)'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** BSD License'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Solaris, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: The TCPDump utility installed on many operating systems is the grandfather of
    network packet capture tools. You can use it for basic network data analysis.
    Its LibPCAP development library allows you to write your own tools to capture
    traffic and manipulate PCAP files.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0279-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Wireshark***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://www.wireshark.org/](https://www.wireshark.org/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Solaris, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is the most popular tool for passive packet capture and analysis.
    Its GUI and large library of protocol analysis modules make it more robust and
    easier to use than TCPDump. Wireshark supports almost every well-known capture
    file format, so even if you capture traffic using a different tool, you can use
    Wireshark to do the analysis. It even includes support for analyzing nontraditional
    protocols, such as USB or serial port communication. Most Wireshark distributions
    also include `tshark`, a replacement for TCPDump that has most of the features
    offered in the main Wireshark GUI, such as the protocol dissectors. It allows
    you to view a wider range of protocols on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0280-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Active Network Capture and Analysis**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To modify, analyze, and exploit network traffic as discussed in [Chapters 2](../Text/ch02.xhtml#ch02)
    and [8](../Text/ch08.xhtml#ch08), you’ll need to use active network capture techniques.
    I use the following tools on a daily basis when I’m analyzing and testing network
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: '***Canape***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://github.com/ctxis/canape/](https://github.com/ctxis/canape/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv3'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Windows (with .NET 4)'
  prefs: []
  type: TYPE_NORMAL
- en: I developed the Canape tool as a generic network protocol man-in-the-middle
    testing, analyzing, and exploitation tool with a usable GUI. Canape contains tools
    that allow users to develop protocol parsers, C# and IronPython scripted extensions,
    and different types of man-in-the-middle proxies. It’s open source as of version
    1.4, so users can contribute to its development.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0281-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Canape Core***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://github.com/tyranid/CANAPE.Core/releases/](https://github.com/tyranid/CANAPE.Core/releases/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv3'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** .NET Core 1.1 and 2.0 (Linux, macOS, Windows)'
  prefs: []
  type: TYPE_NORMAL
- en: The Canape Core libraries, a stripped-down fork of the original Canape code
    base, are designed for use from the command line. In the examples throughout this
    book, I’ve used Canape Core as the library of choice. It has much the same power
    as the original Canape tool while being usable on any OS supported by .NET Core
    instead of only on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: '***Mallory***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://github.com/intrepidusgroup/mallory/](https://github.com/intrepidusgroup/mallory/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Python Software Foundation License v2; GPLv3 if using the GUI'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform** Linux'
  prefs: []
  type: TYPE_NORMAL
- en: Mallory is an extensible man-in-the-middle tool that acts as a network gateway,
    which makes the process of capturing, analyzing, and modifying traffic transparent
    to the application being tested. You can configure Mallory using Python libraries
    as well as a GUI debugger. You’ll need to configure a separate Linux VM to use
    it. Some useful instructions are available at *[https://bitbucket.org/IntrepidusGroup/mallory/wiki/Mallory_Minimal_Guide/](https://bitbucket.org/IntrepidusGroup/mallory/wiki/Mallory_Minimal_Guide/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Network Connectivity and Protocol Testing**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re trying to test an unknown protocol or network device, basic network
    testing can be very useful. The tools listed in this section help you discover
    and connect to exposed network servers on the target device.
  prefs: []
  type: TYPE_NORMAL
- en: '***Hping***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://www.hping.org/](http://www.hping.org/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: The Hping tool is similar to the traditional `ping` utility, but it supports
    more than just ICMP echo requests. You can also use it to craft custom network
    packets, send them to a target, and display any responses. This is a very useful
    tool to have in your kit.
  prefs: []
  type: TYPE_NORMAL
- en: '***Netcat***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** Find the original at *[http://nc110.sourceforge.net/](http://nc110.sourceforge.net/)*
    and the GNU version at *[http://netcat.sourceforge.net/](http://netcat.sourceforge.net/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2, public domain'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Netcat is a command line tool that connects to an arbitrary TCP or UDP port
    and allows you to send and receive data. It supports the creation of sending or
    listening sockets and is about as simple as it gets for network testing. Netcat
    has many variants, which, annoyingly, all use different command line options.
    But they all do pretty much the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: '***Nmap***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://nmap.org/](https://nmap.org/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to scan the open network interface on a remote system, nothing is
    better than Nmap. It supports many different ways to elicit responses from TCP
    and UDP socket servers, as well as different analysis scripts. It’s invaluable
    when you’re testing an unknown device.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0283-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Web Application Testing**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although this book does not focus heavily on testing web applications, doing
    so is an important part of network protocol analysis. One of the most widely used
    protocols on the internet, HTTP is even used to proxy other protocols, such as
    DCE/RPC, to bypass firewalls. Here are some of the tools I use and recommend.
  prefs: []
  type: TYPE_NORMAL
- en: '***Burp Suite***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://portswigger.net/burp/](https://portswigger.net/burp/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Commercial; limited free version is available'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Supported Java platforms (Linux, macOS, Solaris, Windows)'
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite is the gold standard of commercial web application–testing tools.
    Written in Java for maximum cross-platform capability, it provides all the features
    you need for testing web applications, including built-in proxies, SSL decryption
    support, and easy extensibility. The free version has fewer features than the
    commercial version, so consider buying the commercial version if you plan to use
    it a lot.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0284-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Zed Attack Proxy (ZAP)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://www.owasp.org/index.php/ZAP](https://www.owasp.org/index.php/ZAP)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Apache License v2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Supported Java platforms (Linux, macOS, Solaris, Windows)'
  prefs: []
  type: TYPE_NORMAL
- en: If Burp Suite’s price is beyond reach, ZAP is a great free option. Developed
    by OWASP, ZAP is written in Java, can be scripted, and can be easily extended
    because it’s open source.
  prefs: []
  type: TYPE_NORMAL
- en: '***Mitmproxy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://mitmproxy.org/](https://mitmproxy.org/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** MIT'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Any Python-supported platform, although the program is somewhat
    limited on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Mitmproxy is a command line–based web application–testing tool written in Python.
    Its many standard features include interception, modification, and replay of requests.
    You can also include it as a separate library within your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0285-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Fuzzing, Packet Generation, and Vulnerability Exploitation Frameworks**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you’re developing exploits for and finding new vulnerabilities, you’ll
    usually need to implement a lot of common functionality. The following tools provide
    a framework, allowing you to reduce the amount of standard code and common functionality
    you need to implement.
  prefs: []
  type: TYPE_NORMAL
- en: '***American Fuzzy Lop (AFL)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://lcamtuf.coredump.cx/afl/](http://lcamtuf.coredump.cx/afl/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Apache License v2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Linux; some support for other Unix-like platforms'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t let its cute name throw you off. American Fuzzy Lop (AFL) may be named
    after a breed of rabbit, but it’s an amazing tool for fuzz testing, especially
    on applications that can be recompiled to include special instrumentation. It
    has an almost magical ability to generate valid inputs for a program from the
    smallest of examples.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0286-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Kali Linux***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://www.kali.org/](https://www.kali.org/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Licenses** A range of open source and non-free licenses depending on the
    packages used'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** ARM, Intel x86 and x64'
  prefs: []
  type: TYPE_NORMAL
- en: Kali is a Linux distribution designed for penetration testing. It comes pre-installed
    with Nmap, Wireshark, Burp Suite, and various other tools listed in this appendix.
    Kali is invaluable for testing and exploiting network protocol vulnerabilities,
    and you can install it natively or run it as a live distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '***Metasploit Framework***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://github.com/rapid7/metasploit-framework/](https://github.com/rapid7/metasploit-framework/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** BSD, with some parts under different licenses'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** BSD, Linux, macOS, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit is pretty much the only game in town when you need a generic vulnerability
    exploitation framework, at least if you don’t want to pay for one. Metasploit
    is open source, is actively updated with new vulnerabilities, and will run on
    almost all platforms, making it useful for testing new devices. Metasploit provides
    many built-in libraries to perform typical exploitation tasks, such as generating
    and encoding shell code, spawning reverse shells, and gaining elevated privileges,
    allowing you to concentrate on developing your exploit without having to deal
    with various implementation details.
  prefs: []
  type: TYPE_NORMAL
- en: '***Scapy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://www.secdev.org/projects/scapy/](http://www.secdev.org/projects/scapy/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Any Python-supported platform, although it works best on Unix-like
    platforms'
  prefs: []
  type: TYPE_NORMAL
- en: Scapy is a network packet generation and manipulation library for Python. You
    can use it to build almost any packet type, from Ethernet packets through TCP
    or HTTP packets. You can replay packets to test what a network server does when
    it receives them. This functionality makes it a very flexible tool for testing,
    analysis, or fuzzing of network protocols.
  prefs: []
  type: TYPE_NORMAL
- en: '***Sulley***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://github.com/OpenRCE/sulley/](https://github.com/OpenRCE/sulley/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Any Python-supported platform'
  prefs: []
  type: TYPE_NORMAL
- en: Sulley is a Python-based fuzzing library and framework designed to simplify
    data representation, transmission, and instrumentation. You can use it to fuzz
    anything from file formats to network protocols.
  prefs: []
  type: TYPE_NORMAL
- en: '**Network Spoofing and Redirection**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To capture network traffic, sometimes you have to redirect that traffic to a
    listening machine. This section lists a few tools that provide ways to implement
    network spoofing and redirection without needing much configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***DNSMasq***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://www.thekelleys.org.uk/dnsmasq/doc.html](http://www.thekelleys.org.uk/dnsmasq/doc.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform** Linux'
  prefs: []
  type: TYPE_NORMAL
- en: The DNSMasq tool is designed to quickly set up basic network services, such
    as DNS and DHCP, so you don’t have to hassle with complex service configuration.
    Although DNSMasq isn’t specifically designed for network spoofing, you can repurpose
    it to redirect a device’s network traffic for capture, analysis, and exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: '***Ettercap***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://ettercap.github.io/ettercap/](https://ettercap.github.io/ettercap/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Linux, macOS'
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap (discussed in [Chapter 4](../Text/ch04.xhtml#ch04)) is a man-in-the-middle
    tool designed to listen to network traffic between two devices. It allows you
    to spoof DHCP or ARP addresses to redirect a network’s traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Executable Reverse Engineering**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reviewing the source code of an application is often the easiest way to determine
    how a network protocol works. However, when you don’t have access to the source
    code, or the protocol is complex or proprietary, network traffic–based analysis
    is difficult. That’s where reverse engineering tools come in. Using these tools,
    you can disassemble and sometimes decompile an application into a form that you
    can inspect. This section lists several reverse engineering tools that I use.
    (See the discussion in [Chapter 6](../Text/ch06.xhtml#ch06) for more details,
    examples, and explanation.)
  prefs: []
  type: TYPE_NORMAL
- en: '***Java Decompiler (JD)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://jd.benow.ca/](http://jd.benow.ca/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** GPLv3'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Supported Java platforms (Linux, macOS, Solaris, Windows)'
  prefs: []
  type: TYPE_NORMAL
- en: Java uses a bytecode format with rich metadata, which makes it fairly easy to
    reverse engineer Java bytecode into Java source code using a tool such as the
    Java Decompiler. The Java Decompiler is available with a stand-alone GUI as well
    as plug-ins for the Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0288-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***IDA Pro***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://www.hex-rays.com/](https://www.hex-rays.com/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Commercial; limited free version available'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Linux, macOS, Windows'
  prefs: []
  type: TYPE_NORMAL
- en: IDA Pro is the best-known tool for reverse engineering executables. It disassembles
    and decompiles many different process architectures, and it provides an interactive
    environment to investigate and analyze the disassembly. Combined with support
    for custom scripts and plug-ins, IDA Pro is the best tool for reverse engineering
    executables. Although the full professional version is quite expensive, a free
    version is available for noncommercial use; however, it is restricted to 32-bit
    x86 binaries and has other limitations.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0289-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Hopper***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://www.hopperapp.com/](http://www.hopperapp.com/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Commercial; a limited free trial version is also available'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platforms** Linux, macOS'
  prefs: []
  type: TYPE_NORMAL
- en: Hopper is a very capable disassembler and basic decompiler that can more than
    match many of the features of IDA Pro. Although as of this writing Hopper doesn’t
    support the range of processor architectures that IDA Pro does, it should prove
    more than sufficient in most situations due to its support of x86, x64, and ARM
    processors. The full commercial version is considerably cheaper than IDA Pro,
    so it’s definitely worth a look.
  prefs: []
  type: TYPE_NORMAL
- en: '***ILSpy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[http://ilspy.net/](http://ilspy.net/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** MIT'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform** Windows (with .NET4)'
  prefs: []
  type: TYPE_NORMAL
- en: ILSpy, with its Visual Studio–like environment, is the best supported of the
    free .NET decompiler tools.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0290-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***.NET Reflector***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Website** *[https://www.red-gate.com/products/dotnet-development/reflector/](https://www.red-gate.com/products/dotnet-development/reflector/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**License** Commercial'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform** Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Reflector is the original .NET decompiler. It takes a .NET executable or library
    and converts it into C# or Visual Basic source code. Reflector is very effective
    at producing readable source code and allowing simple navigation through an executable.
    It’s a great tool to have in your arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/f0291-01.jpg)'
  prefs: []
  type: TYPE_IMG
