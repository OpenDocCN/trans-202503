["```\n$ cat mac-format-file.txt\n$\n```", "```\n$ cat -v mac-format-file.txt\nThe rain in Spain^Mfalls mainly on^Mthe plain.^MNo kidding. It does.^M $\n```", "```\n$ tr '\\r' '\\n' < mac-format-file.txt > unix-format-file.txt\n```", "```\n$ tr '\\r' '\\n' < mac-format-file.txt\nThe rain in Spain\nfalls mainly on\nthe plain.\nNo kidding. It does.\n```", "```\n$ tr '\\n' '\\r' < unixfile.txt > macfile.txt\n```", "```\n$ screencapture -h\nscreencapture: illegal option -- h\nusage: screencapture [-icMPmwsWxSCUtoa] [files]\n  -c         force screen capture to go to the clipboard\n  -C         capture the cursor as well as the screen. only in non-interactive\nmodes\n  -d         display errors to the user graphically\n  -i         capture screen interactively, by selection or window\n               control key - causes screen shot to go to clipboard\n               space key   - toggle between mouse selection and\n                             window selection modes\n               escape key  - cancels interactive screen shot\n  -m         only capture the main monitor, undefined if -i is set\n  -M         screen capture output will go to a new Mail message\n  -o         in window capture mode, do not capture the shadow of the window\n  -P         screen capture output will open in Preview\n  -s         only allow mouse selection mode\n  -S         in window capture mode, capture the screen not the window\n  -t<format> image format to create, default is png (other options include\npdf, jpg, tiff and other formats)\n  -T<seconds> Take the picture after a delay of <seconds>, default is 5\n  -w         only allow window selection mode\n  -W         start interaction in window selection mode\n  -x         do not play sounds\n  -a         do not include windows attached to selected windows\n  -r         do not add dpi meta data to image\n  -l<windowid> capture this windowsid\n  -R<x,y,w,h> capture screen rect\n  files   where to save the screen capture, 1 file per screen\n```", "```\n$ sleep 30; screencapture capture.tiff\n```", "```\n   #!/bin/bash\n   # screencapture2--Use the OS X screencapture command to capture a sequence of\n   #   screenshots of the main window, in stealth mode. Handy if you're in a\n   #   questionable computing environment!\n\n   capture=\"$(which screencapture) -x -m -C\"\n➊ freq=60         # Every 60 seconds\n   maxshots=30     # Max screen captures\n   animate=0       # Create animated gif? No.\n\n   while getopts \"af:m\" opt; do\n     case $opt in\n      a ) animate=1;                  ;;\n      f ) freq=$OPTARG;               ;;\n      m ) maxshots=$OPTARG;           ;;  # Quit after specified num of pics\n      ? ) echo \"Usage: $0 [-a] [-f frequency] [-m maxcaps]\" >&2\n          exit 1\n     esac\n   done\n\n   counter=0\n\n   while [ $counter -lt $maxshots ] ; do\n     $capture capture${counter}.jpg   # Counter keeps incrementing.\n     counter=$(( counter + 1 ))\n     sleep $freq   # freq is therefore the number of seconds between pics.\n   done\n\n   # Now, optionally, compress all the individual images into an animated GIF.\n\n   if [ $animate -eq 1 ] ; then\n➋   convert -delay 100 -loop 0 -resize \"33%\" capture* animated-captures.gif\n   fi\n\n   # No exit status to stay stealthy\n   exit 0\n```", "```\n$ screencapture2 &\n$\n```", "```\n$ screencapture2 -f 5 -m 30 &\n$\n```", "```\n$ ls -s *gif *jpg\n 4448 animated-captures.gif      4216 capture2.jpg      25728 capture5.jpg\n 4304 capture0.jpg               4680 capture3.jpg      4456 capture6.jpg\n 4296 capture1.jpg               4680 capture4.jpg\n```", "```\n   #!/bin/bash\n   # titleterm--Tells the OS X Terminal application to change its title\n   #   to the value specified as an argument to this succinct script\n\n   if [ $# -eq 0 ]; then\n     echo \"Usage: $0 title\" >&2\n     exit 1\n   else\n➊   echo -e \"\\033]0;$@\\007\"\n   fi\n\n   exit 0\n```", "```\n$ titleterm $(pwd)\n$\n```", "```\nalias precmd 'titleterm \"$PWD\"'                      [tcsh]\n```", "```\nexport PROMPT_COMMAND=\"titleterm \\\"\\$PWD\\\"\"          [bash]\n```", "```\n   #!/bin/bash\n   # ituneslist--Lists your iTunes library in a succinct and attractive\n   #   manner, suitable for sharing with others, or for synchronizing\n   #   (with diff) iTunes libraries on different computers and laptops\n\n   itunehome=\"$HOME/Music/iTunes\"\n   ituneconfig=\"$itunehome/iTunes Music Library.xml\"\n\n➊ musiclib=\"/$(grep '>Music Folder<' \"$ituneconfig\" | cut -d/ -f5- | \\\n     cut -d\\< -f1 | sed 's/%20/ /g')\"\n\n   echo \"Your library is at $musiclib\"\n\n   if [ ! -d \"$musiclib\" ] ; then\n     echo \"$0: Confused: Music library $musiclib isn't a directory?\" >&2\n     exit 1\n   fi\n\n   exec find \"$musiclib\" -type d -mindepth 2 -maxdepth 2 \\! -name '.*' -print \\\n     | sed \"s|$musiclib/||\"\n```", "```\nfile://localhost/Users/taylor/Music/iTunes/iTunes %20Media/\n```", "```\n$ ituneslist | head -15\nYour library is at /Users/taylor/Music/iTunes/iTunes Media/\nAudiobooks/Andy Weir\nAudiobooks/Barbara W. Tuchman\nAudiobooks/Bill Bryson\nAudiobooks/Douglas Preston\nAudiobooks/Marc Seifer\nAudiobooks/Paul McGann\nAudiobooks/Robert Louis Stevenson\niPod Games/Klondike\nMovies/47 Ronin (2013)\nMovies/Mad Max (1979)\nMovies/Star Trek Into Darkness (2013)\nMovies/The Avengers (2012)\nMovies/The Expendables 2 (2012)\nMovies/The Hobbit The Desolation of Smaug (2013)\n```", "```\n   #!/bin/bash\n   # open2--A smart wrapper for the cool OS X 'open' command\n   #   to make it even more useful. By default, 'open' launches the\n   #   appropriate application for a specified file or directory\n   #   based on the Aqua bindings, and it has a limited ability to\n   #   launch applications if they're in the /Applications dir.\n\n   #   First, whatever argument we're given, try it directly.\n\n➊ if ! open \"$@\" >/dev/null 2>&1 ; then\n     if ! open -a \"$@\" >/dev/null 2>&1 ; then\n\n       # More than one arg? Don't know how to deal with it--quit.\n       if [ $# -gt 1 ] ; then\n         echo \"open: More than one program not supported\" >&2\n         exit 1\n       else\n➋         case $(echo $1 | tr '[:upper:]' '[:lower:]') in\n           activ*|cpu   ) app=\"Activity Monitor\"           ;;\n           addr*        ) app=\"Address Book\"               ;;\n           chat         ) app=\"Messages\"                   ;;\n           dvd          ) app=\"DVD Player\"                 ;;\n           excel        ) app=\"Microsoft Excel\"            ;;\n           info*        ) app=\"System Information\"         ;;\n           prefs        ) app=\"System Preferences\"         ;;\n           qt|quicktime ) app=\"QuickTime Player\"           ;;\n           word         ) app=\"Microsoft Word\"             ;;\n           *            ) echo \"open: Don't know what to do with $1\" >&2\n               exit 1\n         esac\n         echo \"You asked for $1 but I think you mean $app.\" >&2\n         open -a \"$app\"\n       fi\n     fi\n   fi\n\n   exit 0\n```", "```\n$ open2 excel\nYou asked for excel but I think you mean Microsoft Excel.\n```", "```\n$ open \"Microsoft Word\"\nThe file /Users/taylor/Desktop//Microsoft Word does not exist.\n```", "```\n$ open2 \"Microsoft Word\"\n$\n```"]