["```\n .data\n    .align 4\n❶ integer:\n    .long 100\n    .align 8\n❷ dbl:\n    .double 3.5\n    .text\n    .globl main\n❸ main:\n    pushq   %rbp\n    movq    %rsp, %rbp\n    subq    $16, %rsp\n    # call a function\n ❹ callq   f\n ❺ # put some stuff in registers\n    movl    $0x87654321, %eax\n    movsd   dbl(%rip), %xmm0\n    # put some stuff on the stack\n    movl    $0xdeadbeef, -4(%rbp)\n    movl    $0, -8(%rbp)\n    movl    $-1, -12(%rbp)\n    movl    $0xfeedface, -16(%rbp)\n ❻ # initialize loop counter\n    movl    $25, %ecx\n.L_loop_start:\n    # decrement counter\n    subl    $1, %ecx\n    cmpl    $0, %ecx\n    # jump back to start of loop\n    jne     .L_loop_start\n    # return 0\n    movl    $0, %eax\n movq    %rbp, %rsp\n    popq    %rbp\n    ret\n    .text\n    .globl  f\nf:\n    movl    $1, %eax\n    ret\n    .section .note.GNU-stack,\"\",@progbits\n```", "```\n$ **gcc hello_debugger.s -o hello_debugger**\n$ **./hello_debugger**\n```", "```\n$ **gcc -g hello_debugger.s -o hello_debugger**\n```", "```\n$ **gdb hello_debugger**\n`--snip--`\n(gdb)\n```", "```\n(gdb) **layout asm**\n(gdb) **layout reg**\n```", "```\n(gdb) **focus cmd**\n(gdb) **focus asm**\n(gdb) **focus regs**\n```", "```\n(gdb) **break main**\nBreakpoint 1 at 0x112d\n```", "```\n(gdb) **run**\nStarting program: /home/ubuntu/hello_debugger\n\n❶ Breakpoint 1, 0x000055555555512d in main ()\n```", "```\n(gdb) **stepi 2**\n0x0000555555555176 in ❶ f ()\n```", "```\n(gdb) **finish**\nRun till exit from #0  0x0000555555555176 in f ()\n0x0000555555555136 in main ()\n```", "```\n(gdb) **continue**\nContinuing.\n[Inferior 1 (process 82326) exited normally]\n```", "```\n(gdb) **run**\nStarting program: /home/ubuntu/hello_debugger\n\nBreakpoint 1, 0x000055555555512d in main ()\n```", "```\n(gdb) **nexti 2**\n0x0000555555555136 in main ()\n```", "```\n ❶ 0x555555555143 ❷ <main+26>        movl    0xdeadbeef, -4(%rbp)\n```", "```\n(gdb) **break *main+26**\n```", "```\n(gdb) **break ***`**MEMORY_ADDRESS**`\n```", "```\n(gdb) **info break**\nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   0x000055555555512d <main+4>\n        breakpoint already hit 1 time\n2       breakpoint     keep y   0x0000555555555143 <main+26>\n```", "```\n(gdb) **delete 1**\n```", "```\n(gdb) **stepi**\n`--snip--`\n(gdb) **print $eax**\n$1 = ❶ -2023406815\n(gdb) **print/x $eax**\n$2 = ❷ 0x87654321\n(gdb) **print/u $eax**\n$3 = ❸ 2271560481\n```", "```\n(gdb) **help x**\n`--snip--`\nFormat letters are o(octal), x(hex), d(decimal), u(unsigned decimal),\n  t(binary), f(float), a(address), i(instruction), c(char), s(string)\n  and z(hex, zero padded on the left).\n`--snip--`\n```", "```\n(gdb) **stepi**\n`--snip--`\n(gdb) **print $xmm0**\n$4 = {v4_float = {0, 2.1875, 0, 0}, v2_double = {3.5, 0}, v16_int8 = {0, 0, 0, 0,\n0, 0, 12, 64, 0, 0, 0, 0, 0, 0, 0, 0}, v8_int16 = {0, 0, 0, 16396, 0, 0, 0, 0},\nv4_int32 = {0, 1074528256, 0, 0}, v2_int64 = {4615063718147915776, 0}, uint128 =\n4615063718147915776}\n```", "```\n(gdb) **print $xmm0.v2_double[0]**\n$5 = 3.5\n```", "```\n(gdb) **print (long) integer**\n$6 = 100\n(gdb) **print (double) dbl**\n$7 = 3.5\n```", "```\n(gdb) **print/x $eax + 0x10**\n$8 = 0x87654331\n```", "```\n(gdb) **print (int) f()**\n$9 = 1\n```", "```\n(gdb) **stepi**\n`--snip--`\n(gdb) **print/x *(int *)($rbp - 4)**\n$10 = 0xdeadbeef\n```", "```\n(gdb) **x/1xw ($rbp - 4)**\n❶ 0x7fffffffe2ac: ❷ 0xdeadbeef\n```", "```\n movl    $0, -8(%rbp)\n    movl    $-1, -12(%rbp)\n    movl    $0xfeedface, -16(%rbp)\n```", "```\n(gdb) **stepi 3**\n(gdb) **x/6xw $rsp**\n0x7fffffffe2a0: ❶ 0xfeedface      0xffffffff     0x00000000     ❷ 0xdeadbeef\n0x7fffffffe2b0: ❸ 0x00000000      0x00000000\n```", "```\n(gdb) **x/4ag $rsp**\n0x7fffffffe2a0: 0xfffffffffeedface      0xdeadbeef00000000\n0x7fffffffe2b0: 0x0     ❶ 0x7ffff7dee083 <__libc_start_main+243>\n```", "```\n 0x55555555516a <main+65>        jne    0x555555555164 <main+59>\n```", "```\n(gdb) **break *main+65 if $ecx == 0**\n```", "```\n(gdb) **c**\nContinuing.\n\nBreakpoint 3, 0x000055555555516a in main ()\n(gdb) **print $ecx**\n$11 = 0\n```", "```\n(gdb) **info break**\n`--snip--`\n3       breakpoint     keep y   0x000055555555516a ❶ <main+65>\n        stop only if ❷ $ecx == 0\n```", "```\n(gdb) **stepi**\n```", "```\n(gdb) **help run**\nStart debugged program.\nYou may specify arguments to give it.\n`--snip--`\n```", "```\n$ **lldb hello_debugger**\n(lldb) target create \"hello_debugger\"\nCurrent executable set to 'hello_debugger' (x86_64).\n(lldb)\n```", "```\n(lldb) **break set -n main**\nBreakpoint 1: where = hello_debugger`main, address = 0x0000000100003f65\n```", "```\n(lldb) **run**\nProcess 6750 launched: '/Users/me/hello_debugger' (x86_64)\nProcess 6750 stopped\n* thread #1, queue = 'com.apple.main-thread', ❶ stop reason = breakpoint 1.1\n    frame #0: 0x0000000100003f65 hello_debugger`main\n❷ hello_debugger`main:\n❸ ->  0x100003f65 <+0>: pushq  %rbp\n    0x100003f66 <+1>: movq   %rsp, %rbp\n    0x100003f69 <+4>: subq   $0x10, %rsp\n    0x100003f6d <+8>: callq  0x100003fb2               ; f\nTarget 0: (hello_debugger) stopped.\n(lldb)\n```", "```\n(lldb) **stepi -c 4**\n`--snip--`\n❶ hello_debugger`f:\n->  0x100003fb2 <+0>: movl   $0x1, %eax\n`--snip--`\n```", "```\n(lldb) **finish**\n`--snip--`\nhello_debugger`main:\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n`--snip--`\n```", "```\n(lldb) **continue**\nProcess 6750 resuming\nProcess 6750 exited with status = 0 (0x00000000)\n```", "```\n(lldb) **run**\n```", "```\n(lldb) **nexti -c 4**\n`--snip--`\nhello_debugger`main:\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n`--snip--`\n```", "```\nhello_debugger`main:\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n    0x100003f77 <+18>: movsd  0x181(%rip), %xmm0        ; dbl, xmm0 = mem[0],zero\n  ❶ 0x100003f7f ❷ <+26>: movl   $0xdeadbeef, -0x4(%rbp)   ; imm = 0xDEADBEEF\n    0x100003f86 <+33>: movl   $0x0, -0x8(%rbp)\n```", "```\n(lldb) **break set -a** `**MEMORY_ADDRESS**`\n```", "```\n(lldb) **break set -a '(void()) main + 26'**\n```", "```\n(lldb) **break list**\nCurrent breakpoints:\n1: name = 'main', locations = 1, resolved = 1, hit count = 1\n  1.1: where = hello_debugger`main, address = 0x0000000100003f65, resolved, hit count = 1\n\n2: address = hello_debugger[0x0000000100003f7f], locations = 1, resolved = 1, hit count = 0\n  2.1: where = hello_debugger`main + 26, address = 0x0000000100003f7f, resolved, hit count = 0\n\n3: address = hello_debugger[0x0000000100003f7f], locations = 1, resolved = 1, hit count = 0\n  3.1: where = hello_debugger`main + 26, address = 0x0000000100003f7f, resolved, hit count = 0\n```", "```\n (lldb) **break delete 3**\n```", "```\n(lldb) **disassemble -n main**\nhello_debugger`main:\n    0x100003f65 <+0>:  pushq  %rbp\n    0x100003f66 <+1>:  movq   %rsp, %rbp\n    0x100003f69 <+4>:  subq   $0x10, %rsp\n    0x100003f6d <+8>:  callq  0x100003fb2               ; f\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n    0x100003f77 <+18>: movsd  0x181(%rip), %xmm0        ; dbl, xmm0 = mem[0],zero\n    0x100003f7f <+26>: movl   $0xdeadbeef, -0x4(%rbp)   ; imm = 0xDEADBEEF\n    0x100003f86 <+33>: movl   $0x0, -0x8(%rbp)\n    0x100003f8d <+40>: movl   $0xffffffff, -0xc(%rbp)   ; imm = 0xFFFFFFFF\n    0x100003f94 <+47>: movl   $0xfeedface, -0x10(%rbp)  ; imm = 0xFEEDFACE\n    0x100003f9b <+54>: movl   $0x19, %ecx\n    0x100003fa0 <+59>: subl   $0x1, %ecx\n    0x100003fa3 <+62>: cmpl   $0x0, %ecx\n    0x100003fa6 <+65>: jne    0x100003fa0               ; <+59>\n    0x100003fa8 <+67>: movl   $0x0, %eax\n    0x100003fad <+72>: movq   %rbp, %rsp\n    0x100003fb0 <+75>: popq   %rbp\n    0x100003fb1 <+76>: retq\n(lldb)\n```", "```\n(lldb) **disassemble -s 0x100003f69 -c 5**\nhello_debug`main:\n    0x100003f69 <+4>:  subq   $0x10, %rsp\n    0x100003f6d <+8>:  callq  0x100003fb2               ; f\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n    0x100003f77 <+18>: movsd  0x181(%rip), %xmm0        ; dbl, xmm0 = mem[0],zero\n    0x100003f7f <+26>: movl   $0xdeadbeef, -0x4(%rbp)   ; imm = 0xDEADBEEF\n```", "```\n(lldb) **disassemble --pc -c 3**\n->  0x100003f72 <+13>: movl   $0x87654321, %eax         ; imm = 0x87654321\n    0x100003f77 <+18>: movsd  0x181(%rip), %xmm0        ; dbl, xmm0 = mem[0],zero\n    0x100003f7f <+26>: movl   $0xdeadbeef, -0x4(%rbp)   ; imm = 0xDEADBEEF\n```", "```\n(lldb) **stepi**\n`--snip--`\nhello_debugger`main:\n->  0x100003f77 <+18>: movsd  0x181(%rip), %xmm0        ; dbl, xmm0 = mem[0],zero\n`--snip--`\n(lldb) **exp -- $eax**\n(unsigned int) $0 = ❶ 2271560481\n(lldb) **exp -f x -- $eax**\n(unsigned int) $1 = ❷ 0x87654321\n(lldb) **exp -f d -- $eax**\n(unsigned int) $2 = ❸ -2023406815\n```", "```\n(lldb) **stepi**\n`--snip--`\nhello_debugger`main:\n->  0x100003f7f <+26>: movl   $0xdeadbeef, -0x4(%rbp)   ; imm = 0\n`--snip--`\n(lldb) **exp -f float64[] -- $xmm0**\n(unsigned char __attribute__((ext_vector_type(16)))) $3 = ( ❶ 3.5, 0)\n```", "```\n(lldb) **exp -f d -- integer**\n(void *) $4 = 100\n(lldb) **exp -f f -- dbl**\n(void *) $5 = 3.5\n```", "```\n(lldb) **exp -f x -- $eax + 0x10**\n(unsigned int) $6 = 0x87654331\n```", "```\n(lldb) **exp -- (int) f()**\n(int) $7 = 1\n```", "```\n(lldb) **stepi**\n`--snip--`\nhello_debugger`main:\n->  0x100003f86 <+33>: movl   $0x0, -0x8(%rbp)\n`--snip--`\n(lldb) **exp -f x -- *(int *)($rbp - 4)**\n(int) $8 = 0xdeadbeef\n```", "```\n(lldb) **memory read -f x -s 4 -c 1 '$rbp - 4'**\n0x3040bb93c: 0xdeadbeef\n```", "```\n movl    $0, -8(%rbp)\n    movl    $-1, -12(%rbp)\n    movl    $0xfeedface, -16(%rbp)\n```", "```\n(lldb) **stepi -c 3**\n`--snip--`\nhello_debugger`main:\n->  0x100003f9b <+54>: movl   $0x19, %ecx\n`--snip--`\n(lldb) **memory read -f x -s 4 -c 6 -l 1 $rsp**\n0x3040bb930: ❶ 0xfeedface\n0x3040bb934: 0xffffffff\n0x3040bb938: 0x00000000\n0x3040bb93c: 0xdeadbeef\n0x3040bb940: ❷ 0x040bba50\n0x3040bb944: 0x00000003\n```", "```\n(lldb) **memory read -f x -s 8 -c 3 -l 1 $rsp**\n0x3040bb930: 0xfffffffffeedface\n0x3040bb938: 0xdeadbeef00000000\n0x3040bb940: ❶ 0x00000003040bba50\n```", "```\n(lldb) **memory read -f A -s 8 -c 4 -l 1 $rsp**\n0x3040bb930: 0xfffffffffeedface\n0x3040bb938: 0xdeadbeef00000000\n0x3040bb940: 0x00000003040bba50\n0x3040bb948: ❶ 0x0000000200012310 dyld`start + 2432\n```", "```\n(lldb) **disassemble -n main**\nhello_debugger`main:\n `--snip--`\n  ❶ 0x100003fa6 <+65>:  jne    0x100003fa0               ; <+59>\n `--snip--`\n```", "```\n(lldb) **break set -a** `**MEMORY_ADDRESS**` **-c '$ecx == 0'**\n```", "```\n(lldb) **continue**\n`--snip--`\nhello_debugger`main:\n->  0x100003fa6 <+65>:  jne    0x100003fa0               ; <+59>\n`--snip--`\n(lldb) **exp -- $ecx**\n(unsigned int) $9 = 0\n```", "```\n(lldb) **break list**\n`--snip--`\n4: address = hello_debugger[0x0000000100003fa6], locations = 1, resolved = 1, hit count = 0\nCondition: $ecx == 0 ❶\n\n  4.1: where = ❷ hello_debugger`main + 65, address = 0x0000000100003fa6, resolved, hit count\n = 0\n```", "```\n(lldb) **stepi**\n`--snip--`\nhello_debugger`main:\n->  0x100003fa8 <+67>:  movl   $0x0, %eax\n`--snip--`\n```", "```\n(lldb) **help run**\n     Launch the executable in the debugger\n`--snip--`\n```"]