- en: '**11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11'
- en: SMS FRAUD**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: SMS 欺诈**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Imagine that a TV program asks viewers to contribute $25 to a relief organization
    by texting a code to a designated phone number. If you send such a code, the charge
    will be added to your phone bill, then transferred to the charitable organization.
    You’ll find SMS messages like these used for a number of legitimate purposes,
    such as to respond to a political poll or guess the winner of a football game.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设某个电视节目邀请观众通过发送代码到指定电话号码，向救援组织捐款 25 美元。如果你发送了这样的代码，费用将会加到你的电话账单上，然后转交给慈善组织。你会发现这种类型的
    SMS 消息在许多合法的场合中被使用，例如回应政治民调或猜测足球比赛的赢家。
- en: Often, however, malicious apps can send codes to premium services without the
    user’s consent. The victim won’t know that this is happening until they receive
    their phone bill at the end of the month and discover the mysterious charges.
    We refer to this type of abuse as *SMS fraud*. SMS fraud malware focuses on making
    unauthorized charges to the user’s account but doesn’t include other malicious
    activity that relies on text messages, such as spyware or banking trojan behavior.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，恶意应用往往可以在未经用户同意的情况下向高收费服务发送代码。受害者直到月底收到电话账单时才会知道发生了这种事情，并发现账单上有不明费用。我们将这种滥用行为称为
    *SMS 欺诈*。SMS 欺诈恶意软件的重点是对用户账户进行未经授权的收费，但不包括其他依赖短信的恶意活动，如间谍软件或银行木马行为。
- en: In this chapter, we use the Extra-Trees classifier to evaluate the features
    useful for detecting Android SMS fraud apps. [Chapter 2](ch02.xhtml) introduced
    numerous such families, including BeeKeeper, Camera, Joker, RuFraud, RuPlay, Taicliphot,
    Wallpaper, and WallySMS. Additionally, our tests included Moundial, a smaller
    SMS fraud family previously unknown to the public that targeted Spanish Android
    users around 2014.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Extra-Trees 分类器来评估用于检测 Android SMS 欺诈应用的特征。[第 2 章](ch02.xhtml)介绍了多个此类家族，包括
    BeeKeeper、Camera、Joker、RuFraud、RuPlay、Taicliphot、Wallpaper 和 WallySMS。此外，我们的测试还包括
    Moundial，一个之前未公开的小型 SMS 欺诈家族，曾在 2014 年左右针对西班牙 Android 用户。
- en: '**SMS Fraud vs. Goodware**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**SMS 欺诈与好应用**'
- en: 'If you take a look at the 20 most significant features for separating Android
    goodware from apps engaging in SMS fraud ([Figure 11-1](ch11.xhtml#ch11fig1)),
    you should notice something interesting: although 11 of these features are permission-related,
    none involve SMS permissions. Perhaps this is because various legitimate apps
    might use such permissions to, for example, allow messaging from within the app.
    We’ll discuss other possibilities in “[The Absence of SMS Permissions](ch11.xhtml#ch11lev1sec2)”
    on [page 270](ch11.xhtml#ch11lev1sec2).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看区分 Android 好应用和参与 SMS 欺诈的应用的 20 个最重要特征（见[图 11-1](ch11.xhtml#ch11fig1)），你应该会注意到一个有趣的现象：尽管这些特征中有
    11 个与权限相关，但没有涉及 SMS 权限。也许这是因为各种合法的应用可能会使用这些权限，例如允许应用内发送短信。我们将在 “[缺失的 SMS 权限](ch11.xhtml#ch11lev1sec2)”
    （第 270 页）中讨论其他可能性。
- en: Like ransomware and rooting malware, SMS fraud apps invoke the `org.apache.http.com.scheme`
    and `org.apache.http.com` APIs more often than goodware. On the other hand, goodware
    generally makes more calls to many Android APIs, such as `android.content.res`,
    `android.view`, `android.media.session`, `android.view.accessibility`, and `android.os`.
    The one exception is the Wi-Fi API (`android.net.wifi`), which provides classes
    for Wi-Fi connectivity. We are not sure why SMS fraud apps use this more than
    goodware. It may simply be an artifact of previous malware developed by the same
    developers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与勒索软件和 Root 恶意软件类似，SMS 欺诈应用比好应用更频繁地调用 `org.apache.http.com.scheme` 和 `org.apache.http.com`
    API。另一方面，好应用通常会调用更多 Android API，如 `android.content.res`、`android.view`、`android.media.session`、`android.view.accessibility`
    和 `android.os`。唯一的例外是 Wi-Fi API（`android.net.wifi`），它提供 Wi-Fi 连接的类。我们不确定为什么 SMS
    欺诈应用比好应用更频繁地使用它。这可能只是之前由相同开发者开发的恶意软件的产物。
- en: '***Non-SMS Permissions***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***非 SMS 权限***'
- en: We’ve described many of the significant permissions in previous chapters. Some
    of these don’t appear to serve any purpose. For example, `MOUNT_UNMOUNT_FILESYSTEMS`
    and `INSTALL_PACKAGES` are privileged permissions, and SMS fraud apps tend to
    declare these but never use them. These apps may also request the `READ_LOGS`
    permission, though this permission doesn’t enable malicious functionality for
    unprivileged applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中描述了许多重要的权限。其中有些权限似乎没有任何用途。例如，`MOUNT_UNMOUNT_FILESYSTEMS` 和 `INSTALL_PACKAGES`
    是特权权限，而短信欺诈应用通常声明这些权限，但从未使用它们。这些应用也可能请求 `READ_LOGS` 权限，尽管这个权限并不会为没有特权的应用启用恶意功能。
- en: Other permissions can enable an app to perform tasks common to many forms of
    malware. For example, the `KILL_BACKGROUND_PROCESSES` and `RESTART_PACKAGES` permissions,
    the latter of which was deprecated in Android 4.0.3 (Ice Cream Sandwich), may
    be used to kill undesirable processes as part of a defense strategy. Also, the
    `RECEIVE_BOOT_COMPLETED` permission provides the easiest way for malware to persist
    by automatically restarting after a phone reboot.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其他权限可以使应用程序执行许多恶意软件常见的任务。例如，`KILL_BACKGROUND_PROCESSES` 和 `RESTART_PACKAGES`
    权限，后者在 Android 4.0.3（冰淇淋三明治）中已被弃用，可能被用来杀死不需要的进程，作为防御策略的一部分。此外，`RECEIVE_BOOT_COMPLETED`
    权限是恶意软件保持持久性的最简单方式，它可以在手机重启后自动重启。
- en: The remaining permissions have clear uses specific to SMS fraud. The `READ_PHONE_STATE`
    permission allows the app to read configuration settings for the phone’s telephony
    stack, for example to find out the device’s phone number or mobile carrier. As
    premium short codes are carrier-specific, malware needs this information to target
    the right mobile carrier. We see that the probability of this permission being
    requested by apps engaged in SMS fraud is over 80 percent, more than double the
    probability of goodware requesting it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其余权限有明显的特定于短信欺诈的用途。`READ_PHONE_STATE` 权限允许应用程序读取电话的配置设置，例如获取设备的电话号码或移动运营商。由于高级短码是运营商特定的，恶意软件需要这些信息来瞄准正确的移动运营商。我们看到，从事短信欺诈的应用请求此权限的概率超过
    80%，是良性软件请求此权限概率的两倍多。
- en: '![Image](../images/ch11fig01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/ch11fig01.jpg)'
- en: '*Figure 11-1: Top 20 features that best distinguish Android SMS fraud malware
    from goodware using the Extra-Trees classifier*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-1：使用 Extra-Trees 分类器区分 Android 短信欺诈恶意软件与良性软件的前 20 大特征*'
- en: In [Chapter 10](ch10.xhtml), we noted that apps can use the `ACCESS_WIFI_STATE`
    permission to access the Android `WifiManager` and get the state of the device’s
    Wi-Fi connection. SMS fraud happens over the telephony stack rather than the Wi-Fi
    stack; even so, multiple SMS fraud families attempt to understand the device’s
    Wi-Fi state. This may be because these apps want to have the Wi-Fi stack as a
    backup option. The probability of this permission being requested by SMS fraud
    apps is almost exactly twice that of its being requested by goodware.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 10 章](ch10.xhtml)中，我们提到过应用程序可以使用 `ACCESS_WIFI_STATE` 权限访问 Android 的 `WifiManager`
    并获取设备的 Wi-Fi 连接状态。短信欺诈通过电话堆栈而不是 Wi-Fi 堆栈进行；即便如此，多个短信欺诈家族也会尝试了解设备的 Wi-Fi 状态。这可能是因为这些应用希望将
    Wi-Fi 堆栈作为备用选项。请求此权限的短信欺诈应用的概率几乎是良性软件请求此权限概率的两倍。
- en: Apps use the `GET_TASKS` permission to identify the processes running on the
    device. Almost 70 percent of apps engaging in SMS fraud request this permission,
    compared to less than than 20 percent of goodware. Malicious apps may seek this
    permission for a number of reasons, such as to see whether there is an antivirus
    engine running.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用 `GET_TASKS` 权限来识别设备上正在运行的进程。约有 70% 从事短信欺诈的应用请求此权限，而良性软件请求此权限的比例不到 20%。恶意应用可能出于多种原因请求此权限，例如查看是否有杀毒引擎在运行。
- en: The `SYSTEM_ALERT_WINDOW` permission is used to display notification windows,
    presumably to inform the user of legitimate issues. However, SMS fraud apps may
    use this capability to obscure the screen. For instance, if the compromised device’s
    mobile carrier sends a request to authenticate a potential SMS fraud transaction,
    this permission may enable the malware to obscure the window while it responds
    to the incoming text. The probability of SMS fraud apps requesting this permission
    is four to five times higher than the probability of goodware doing so.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`SYSTEM_ALERT_WINDOW` 权限用于显示通知窗口，显然是为了通知用户合法问题。然而，短信欺诈应用可能利用此功能遮挡屏幕。例如，如果被感染设备的移动运营商发送请求以验证潜在的短信欺诈交易，此权限可能使恶意软件在响应来电短信时遮挡窗口。短信欺诈应用请求此权限的概率是良性软件的四到五倍。'
- en: '***The Absence of SMS Permissions***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缺少短信权限***'
- en: The absence of SMS-related permissions in the top 20 features list may have
    surprised you. Surely, an SMS fraud app needs to write and send SMS messages in
    order to carry out its malicious work. If we look at the top 50 features, we’ll
    find the `WRITE_SMS` permission in position 33, suggesting that this permission
    is indeed somewhat important for distinguishing SMS fraud apps from goodware.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前 20 个特征列表中缺少与 SMS 相关的权限可能会让你感到惊讶。显然，SMS 欺诈应用需要写入并发送 SMS 消息来执行其恶意操作。如果我们查看前
    50 个特征，我们会发现 `WRITE_SMS` 权限排在第 33 位，表明该权限对于区分 SMS 欺诈应用与良性应用确实有一定的重要性。
- en: Still, the scarcity of other SMS-related permissions is puzzling. Because different
    classifiers identify the important features in different ways, we therefore checked
    whether other classifiers would consider these permissions more relevant. [Figure
    11-2](ch11.xhtml#ch11fig2) shows the top 20 features generated by the random forest
    classifier.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，其他与 SMS 相关的权限的稀缺性仍然令人困惑。由于不同的分类器以不同的方式识别重要特征，因此我们检查了其他分类器是否会认为这些权限更相关。[图
    11-2](ch11.xhtml#ch11fig2)显示了由随机森林分类器生成的前 20 个特征。
- en: As you can see, this classifier uses very different features from the Extra-Trees
    classifier to separate goodware from SMS fraud apps. In fact, it ranks `SEND_SMS`
    as the most important feature! The probability of apps engaging in SMS fraud requesting
    this permission is over eight times that of goodware requesting it, according
    to this model. The `RECEIVE_SMS`, `WRITE_SMS`, and `READ_SMS` permissions all
    also appear in the list of top 20 features, with SMS fraud apps requesting all
    of them far more frequently than goodware.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个分类器使用了与 Extra-Trees 分类器截然不同的特征来区分良性应用和 SMS 欺诈应用。实际上，它将 `SEND_SMS`
    排名为最重要的特征！根据该模型，参与 SMS 欺诈的应用请求此权限的概率是良性应用的八倍以上。`RECEIVE_SMS`、`WRITE_SMS` 和 `READ_SMS`
    权限也都出现在前 20 个特征列表中，SMS 欺诈应用请求这些权限的频率远高于良性应用。
- en: We also looked at the top features suggested by the XGBoost classifier, shown
    in [Figure 11-3](ch11.xhtml#ch11fig3). Here too, we saw a different set of features
    identified as important, and `SEND_SMS` and `RECEIVE_SMS` appear in the top 20.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还查看了由 XGBoost 分类器建议的主要特征，如[图 11-3](ch11.xhtml#ch11fig3)所示。在这里，我们也看到了一组不同的特征被识别为重要，`SEND_SMS`
    和 `RECEIVE_SMS` 出现在前 20 名之内。
- en: '![Image](../images/ch11fig02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/ch11fig02.jpg)'
- en: '*Figure 11-2: Top 20 features that best distinguish Android SMS fraud malware
    from goodware using the random forest classifier*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-2：使用随机森林分类器区分 Android SMS 欺诈恶意软件和良性应用的前 20 个特征*'
- en: '![Image](../images/ch11fig03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/ch11fig03.jpg)'
- en: '*Figure 11-3: Top 20 features that best distinguish Android SMS fraud malware
    from goodware using the XGBoost classifier*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-3：使用 XGBoost 分类器区分 Android SMS 欺诈恶意软件和良性应用的前 20 个特征*'
- en: As these results indicate, different machine learning methods may identify different
    features as being the most important. For example, one method might consider every
    feature from the total set of features and measure the value of each by calculating
    the drop in predictive performance of a machine learning algorithm when that feature
    is removed. The greater the drop, the more important the feature is. Other methods
    might use well-known statistical models, such as mutual information or principal
    component analysis (PCA). In addition to the statistical methods used, the design
    and structure of the classifiers themselves influence the identification of different
    sets of prominent features.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这些结果所表明的，不同的机器学习方法可能会识别出不同的特征作为最重要的特征。例如，一种方法可能会考虑所有特征集合中的每个特征，通过计算去除某个特征后机器学习算法的预测性能下降程度来衡量每个特征的价值。下降幅度越大，特征就越重要。其他方法可能会使用知名的统计模型，如互信息或主成分分析（PCA）。除了所使用的统计方法外，分类器本身的设计和结构也会影响不同特征集合的识别。
- en: Lastly, we constructed a decision tree for separating SMS fraud apps from goodware.
    You can see the first three levels of the decision tree in [Figure 11-4](ch11.xhtml#ch11fig4).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们构建了一个决策树，用于区分 SMS 欺诈应用和良性应用。你可以在[图 11-4](ch11.xhtml#ch11fig4)中看到决策树的前三个层级。
- en: '![Image](../images/ch11fig04.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/ch11fig04.jpg)'
- en: '*Figure 11-4: A decision tree with a depth of three for distinguishing Android
    SMS fraud malware from goodware*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-4：用于区分 Android SMS 欺诈恶意软件和良性应用的深度为三的决策树*'
- en: This decision tree branches to the left child of a node when the condition stated
    in the node is true; otherwise, it branches to the right. The `SEND_SMS` permission
    is at level two in the tree, immediately below the root, attesting to the importance
    that this type of classifier places on it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该决策树在节点条件成立时会分支到节点的左子节点，否则分支到右子节点。`SEND_SMS`权限位于树的第二层，紧接根节点，表明此类分类器非常重视该权限。
- en: The right child of this node checks the number of times that classes in the
    *android.content.res* package are called in an app’s source code. This package
    contains classes used to access various files and media, as well as parameters
    that configure the device. If the number of calls is smaller than or equal to
    82.0 and the app requests the `SEND_SMS` permission, then there is a probability
    of 1106/1108 (almost 100 percent) of the app being an SMS fraud app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该节点的右子节点检查在应用程序源代码中调用*android.content.res*包中类的次数。该包包含用于访问各种文件和媒体的类，以及配置设备的参数。如果调用次数小于或等于82次，并且应用程序请求`SEND_SMS`权限，则该应用程序为短信欺诈应用的概率为1106/1108（几乎100%）。
- en: 'Interestingly, two other branches in this decision tree do not depend at all
    on the `SEND_SMS` permission being used, which may explain why the initial set
    of top 20 features generated by the Extra-Trees classifier didn’t identify any
    SMS-related permissions. One of the paths checks the following: that there are
    fewer than 82 calls to classes in the *android.content.res* package, that the
    app does not request the `SEND_SMS` permission, and that there are more than 1.5
    calls to classes in *org.apache.http.conn.scheme*. If all of these conditions
    are met, there is a 100 percent probability of the app being SMS fraud malware.
    The other path checks whether there are more than 82 calls to classes in *android.content.res*
    and more than 5.5 calls to classes in *org.apache.http.conn.scheme*, which also
    results in a 100 percent probability of the app being SMS fraud.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，决策树中的其他两个分支完全不依赖于是否使用`SEND_SMS`权限，这可能解释了为什么由Extra-Trees分类器生成的初始前20个特征没有识别出任何与短信相关的权限。一个路径检查以下条件：在*android.content.res*包中的类的调用次数少于82次，应用程序没有请求`SEND_SMS`权限，并且在*org.apache.http.conn.scheme*包中的类的调用次数超过1.5次。如果所有这些条件都满足，则该应用程序为短信欺诈恶意软件的概率为100%。另一个路径检查是否在*android.content.res*包中的类的调用次数超过82次，并且在*org.apache.http.conn.scheme*包中的类的调用次数超过5.5次，这也导致该应用程序为短信欺诈的概率为100%。
- en: 'The results described in this section teach us a valuable lesson about machine
    learning for malware analysis: be sure to look at different classifiers for clues
    about what to examine manually in the code. Looking at the results generated by
    just one classifier, even one with high performance, may lead to skewed inferences
    about the importance of particular app elements.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述的结果教给我们一个关于恶意软件分析中机器学习的宝贵经验：确保查看不同的分类器，以便找到手动检查代码中需要关注的线索。仅查看一个分类器的结果，即使该分类器具有高性能，也可能导致对特定应用程序元素重要性的偏差推论。
- en: '***Prediction Efficacy***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预测效能***'
- en: '[Table 11-1](ch11.xhtml#ch11tab1) shows the performance of various machine
    learning classifiers at predicting whether an app is engaged in SMS fraud or is
    goodware, given different sets and combinations of basic and advanced features.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[表11-1](ch11.xhtml#ch11tab1)展示了不同机器学习分类器在预测应用程序是否涉及短信欺诈或是否为良性软件时，基于不同的基本和高级特征集及组合的表现。'
- en: '**Table 11-1:** Evaluation of Android SMS Fraud Malware vs. Goodware'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**表11-1：** Android短信欺诈恶意软件与良性软件的评估'
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **特征集** | **最佳分类器** | **AUC** | **精确度** | **召回率** | **F1分数** | **假阳性率** |
    **假阴性率** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| API package | GBDT | 0.9862 | 0.9483 | 0.9161 | 0.9319 | 0.0517 | 0.0293
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| API包 | GBDT | 0.9862 | 0.9483 | 0.9161 | 0.9319 | 0.0517 | 0.0293 |'
- en: '| Static (S | RF | 0.9792 | 0.9780 | 0.9208 | 0.9485 | 0.0220 | 0.0275 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 静态 (S) | RF | 0.9792 | 0.9780 | 0.9208 | 0.9485 | 0.0220 | 0.0275 |'
- en: '| Dynamic (S) | MLP | 0.9056 | 0.8972 | 0.5759 | 0.7015 | 0.1028 | 0.1332 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 动态 (S) | MLP | 0.9056 | 0.8972 | 0.5759 | 0.7015 | 0.1028 | 0.1332 |'
- en: '| S + D | XGBoost | 0.9810 | 0.9819 | 0.9208 | 0.9504 | 0.0181 | 0.0274 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| S + D | XGBoost | 0.9810 | 0.9819 | 0.9208 | 0.9504 | 0.0181 | 0.0274 |'
- en: '| API + S + D | XGBoost | 0.9975 | 0.9837 | 0.9642 | 0.9738 | 0.0163 | 0.0126
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D | XGBoost | 0.9975 | 0.9837 | 0.9642 | 0.9738 | 0.0163 | 0.0126
    |'
- en: '| TSG | XGBoost | 0.9872 | 0.9463 | 0.9142 | 0.9300 | 0.0537 | 0.0300 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| TSG | XGBoost | 0.9872 | 0.9463 | 0.9142 | 0.9300 | 0.0537 | 0.0300 |'
- en: '| LM | RF | 0.8737 | 0.6654 | 0.6748 | 0.6701 | 0.3346 | 0.1157 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| LM | RF | 0.8737 | 0.6654 | 0.6748 | 0.6701 | 0.3346 | 0.1157 |'
- en: '| FC | SVM | 0.8833 | 0.9127 | 0.5024 | 0.6480 | 0.0873 | 0.1519 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| FC | SVM | 0.8833 | 0.9127 | 0.5024 | 0.6480 | 0.0873 | 0.1519 |'
- en: '| CG | RF | 0.8519 | 0.9000 | 0.6532 | 0.7570 | 0.1000 | 0.1119 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| CG | RF | 0.8519 | 0.9000 | 0.6532 | 0.7570 | 0.1000 | 0.1119 |'
- en: '| API + S + D + TSG | XGBoost | 0.9457 | 0.8845 | 0.8803 | 0.8824 | 0.1155
    | 0.1199 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + TSG | XGBoost | 0.9457 | 0.8845 | 0.8803 | 0.8824 | 0.1155
    | 0.1199 |'
- en: '| API + S + D + LM | RF | 0.9975 | 0.9827 | 0.9661 | 0.9743 | 0.0173 | 0.0119
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + LM | RF | 0.9975 | 0.9827 | 0.9661 | 0.9743 | 0.0173 | 0.0119
    |'
- en: '| API + S + D + FC | GBDT | 0.9974 | 0.9837 | 0.9651 | 0.9743 | 0.0163 | 0.0123
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + FC | GBDT | 0.9974 | 0.9837 | 0.9651 | 0.9743 | 0.0163 | 0.0123
    |'
- en: '| API + S + D + CG | XGBoost | 0.9975 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + CG | XGBoost | 0.9975 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
- en: '| All features | XGBoost | 0.9974 | 0.9827 | 0.9642 | 0.9734 | 0.0173 | 0.0126
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 所有特征 | XGBoost | 0.9974 | 0.9827 | 0.9642 | 0.9734 | 0.0173 | 0.0126 |'
- en: '| Best late fusion | XGBoost | 0.9973 | 0.9809 | 0.9670 | **0.9739** | 0.0191
    | 0.0116 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 最佳晚期融合 | XGBoost | 0.9973 | 0.9809 | 0.9670 | **0.9739** | 0.0191 | 0.0116
    |'
- en: As these results show, using the late fusion approach, machine learning techniques
    are able to generate excellent results, with a precision of over 98 percent and
    a recall of over 96 percent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这些结果所示，采用晚期融合方法，机器学习技术能够生成优秀的结果，精度超过 98%，召回率超过 96%。
- en: '**SMS Fraud vs. Other Malware**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**短信欺诈与其他恶意软件**'
- en: '[Figure 11-5](ch11.xhtml#ch11fig5) shows the 20 most important features for
    distinguishing SMS fraud apps from other forms of malware, according to the Extra-Trees
    classifier. As you can see, SMS-related permissions play an important role here,
    so we’ll focus on those.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-5](ch11.xhtml#ch11fig5) 显示了根据 Extra-Trees 分类器区分短信欺诈应用与其他形式恶意软件的 20 个最重要特征。正如你所看到的，短信相关权限在这里发挥了重要作用，因此我们将重点关注这些权限。'
- en: '***Permission-Related Features***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与权限相关的特征***'
- en: Although the Extra-Trees classifier does not rely on SMS-related permissions
    for distinguishing SMS fraud malware from goodware, it does find them useful for
    distinguishing this type of malware from other forms. Around 70 percent of SMS
    fraud apps seek the `SEND_SMS`, `READ_SMS`, and `RECEIVE_SMS` permissions, compared
    to less than 20 percent of other malware. Likewise, 50 percent of SMS fraud apps
    seek the `WRITE_SMS` permission, compared to about 20 percent of other malware.
    You might be wondering why some SMS fraud apps don’t need these permissions. The
    reason is that certain of these apps trick the user into sending premium SMS messages
    themselves. This doesn’t require the `SEND_SMS` permission; the app opens the
    default SMS app and hopes that the user will click the Send button on their own.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Extra-Trees 分类器在区分短信欺诈恶意软件与良性软件时并不依赖短信相关权限，但它确实发现这些权限在区分这种类型的恶意软件与其他形式的恶意软件时很有用。约
    70% 的短信欺诈应用请求 `SEND_SMS`、`READ_SMS` 和 `RECEIVE_SMS` 权限，而其他恶意软件的请求比例不到 20%。同样，50%
    的短信欺诈应用请求 `WRITE_SMS` 权限，而其他恶意软件的请求比例约为 20%。你可能会想，为什么有些短信欺诈应用不需要这些权限？原因是某些应用通过欺骗用户自己发送高额短信。这样并不需要
    `SEND_SMS` 权限；应用会打开默认的短信应用并希望用户自己点击发送按钮。
- en: On a related note, we see that SMS fraud apps are more than twice as likely
    as other types of malware to request the `CALL_PHONE` permission (over 40 percent
    do, compared to less than 20 percent of other malware). One explanation for this
    difference could be that some SMS fraud families also dabble in other forms of
    telephony-related fraud. For example, the RuPlay family contains code to redirect
    outgoing calls to a phone number provided by the malware developers, while the
    BeeKeeper family contains code to both redirect outgoing calls and make new phone
    calls to these numbers. Redirecting outgoing calls also requires the `PROCESS_OUTGOING_CALLS`
    permission, which enables apps to learn about outgoing calls in the first place.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点相关的内容是，我们发现短信欺诈应用请求 `CALL_PHONE` 权限的概率是其他类型恶意软件的两倍以上（超过 40% 的短信欺诈恶意软件请求该权限，而其他恶意软件的请求率不到
    20%）。这种差异的一个解释可能是一些短信欺诈家族也涉及其他形式的电话相关欺诈。例如，RuPlay 家族包含将外拨电话重定向到恶意软件开发者提供的电话号码的代码，而
    BeeKeeper 家族则包含将外拨电话重定向并拨打这些号码的新电话的代码。重定向外拨电话还需要 `PROCESS_OUTGOING_CALLS` 权限，这个权限使得应用能够首先了解外拨电话。
- en: '![Image](../images/ch11fig05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/ch11fig05.jpg)'
- en: '*Figure 11-5: Top 20 features that best distinguish Android SMS fraud malware
    from other malware using the Extra-Trees classifier*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-5：使用 Extra-Trees 分类器区分 Android 短信欺诈恶意软件与其他恶意软件的前 20 个特征*'
- en: Also of note is that SMS fraud apps access the `READ_LOGS`, `ACCESS_WIFI_STATE`,
    and `RESTART_PACKAGES` permissions less frequently than other malware. However,
    like ransomware, they invoke the functions `org.apache.http.conn` and `org.apache.http.conn.schema`
    more frequently than other forms of malware. The same is also true for `org.apache.http.params`
    as well as some Android APIs, such as those from the packages *android.app*, *android.net*,
    *android.content*, and *android.content.pm*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另请注意，SMS 欺诈应用程序访问 `READ_LOGS`、`ACCESS_WIFI_STATE` 和 `RESTART_PACKAGES` 权限的频率低于其他恶意软件。然而，像勒索软件一样，它们调用
    `org.apache.http.conn` 和 `org.apache.http.conn.schema` 函数的频率高于其他类型的恶意软件。对于 `org.apache.http.params`
    以及一些 Android API（例如 *android.app*、*android.net*、*android.content* 和 *android.content.pm*
    包中的 API），情况也是如此。
- en: '***Prediction Efficacy***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预测效能***'
- en: '[Table 11-2](ch11.xhtml#ch11tab2) shows how our machine learning approaches
    perform at distinguishing between apps engaging in SMS fraud and other forms of
    malicious apps.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 11-2](ch11.xhtml#ch11tab2)展示了我们的机器学习方法在区分从事 SMS 欺诈的应用与其他恶意应用方面的表现。'
- en: '**Table 11-2:** Metrics for Evaluating Android SMS Fraud Malware vs. Other
    Malware'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**表格 11-2：** 用于评估 Android SMS 欺诈恶意软件与其他恶意软件的指标'
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **特征集** | **最佳分类器** | **AUC** | **精确度** | **召回率** | **F1值** | **FPR** | **FNR**
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| API package | XGBoost | 0.8075 | 0.8135 | 0.7921 | 0.8027 | 0.1865 | 0.2043
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| API 包 | XGBoost | 0.8075 | 0.8135 | 0.7921 | 0.8027 | 0.1865 | 0.2043 |'
- en: '| Static (S) | XGBoost | 0.7739 | 0.7652 | 0.7926 | 0.7787 | 0.2348 | 0.2165
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 静态 (S) | XGBoost | 0.7739 | 0.7652 | 0.7926 | 0.7787 | 0.2348 | 0.2165 |'
- en: '| Dynamic (D) | RF | 0.6756 | 0.6395 | 0.6739 | 0.6563 | 0.3605 | 0.3470 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 动态 (D) | RF | 0.6756 | 0.6395 | 0.6739 | 0.6563 | 0.3605 | 0.3470 |'
- en: '| S + D | GBDT | 0.7949 | 0.7977 | 0.7827 | 0.7901 | 0.2023 | 0.2151 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| S + D | GBDT | 0.7949 | 0.7977 | 0.7827 | 0.7901 | 0.2023 | 0.2151 |'
- en: '| API + S + D | GBDT | 0.8209 | 0.8088 | 0.8172 | 0.8129 | 0.1912 | 0.1856
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D | GBDT | 0.8209 | 0.8088 | 0.8172 | 0.8129 | 0.1912 | 0.1856
    |'
- en: '| TSG | RF | 0.7097 | 0.7110 | 0.7097 | 0.7104 | 0.2890 | 0.2917 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| TSG | RF | 0.7097 | 0.7110 | 0.7097 | 0.7104 | 0.2890 | 0.2917 |'
- en: '| LM | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| LM | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
- en: '| FC | SVM | 0.5459 | 0.5222 | 0.6211 | 0.5674 | 0.4778 | 0.4713 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| FC | SVM | 0.5459 | 0.5222 | 0.6211 | 0.5674 | 0.4778 | 0.4713 |'
- en: '| CG | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| CG | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
- en: '| API + S + D + TSG | GBDT | 0.9180 | 0.8619 | 0.8351 | 0.8483 | 0.1381 | 0.1610
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + TSG | GBDT | 0.9180 | 0.8619 | 0.8351 | 0.8483 | 0.1381 | 0.1610
    |'
- en: '| API + S + D + LM | XGBoost | 0.8718 | 0.8385 | 0.7667 | 0.8010 | 0.1615 |
    0.2166 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + LM | XGBoost | 0.8718 | 0.8385 | 0.7667 | 0.8010 | 0.1615 |
    0.2166 |'
- en: '| API + S + D + FC | GBDT | 0.8791 | 0.8388 | 0.7653 | 0.8004 | 0.1612 | 0.2171
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + FC | GBDT | 0.8791 | 0.8388 | 0.7653 | 0.8004 | 0.1612 | 0.2171
    |'
- en: '| API + S + D + CG | GBDT | 0.8983 | 0.8688 | 0.7912 | 0.8282 | 0.1312 | 0.1932
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + CG | GBDT | 0.8983 | 0.8688 | 0.7912 | 0.8282 | 0.1312 | 0.1932
    |'
- en: '| All features | XGBoost | 0.9168 | 0.8635 | 0.8285 | 0.8456 | 0.1365 | 0.1659
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 所有特征 | XGBoost | 0.9168 | 0.8635 | 0.8285 | 0.8456 | 0.1365 | 0.1659 |'
- en: '| Best late fusion | XGBoost | 0.9377 | 0.9273 | 0.9075 | **0.9173** | 0.0727
    | 0.0750 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 最佳晚期融合 | XGBoost | 0.9377 | 0.9273 | 0.9075 | **0.9173** | 0.0727 | 0.0750
    |'
- en: Not surprisingly, predictive accuracy decreases when separating SMS fraud apps
    from other malware. Precision drops to under 93 percent, while recall drops to
    just below 92 percent. Nevertheless, these are still strong results.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，当将 SMS 欺诈应用与其他恶意软件区分开来时，预测准确率会下降。精确度降至 93% 以下，而召回率降至 92% 以下。尽管如此，这些结果仍然很强。
- en: '**BeeKeeper: A Case Study**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**BeeKeeper: 一个案例研究**'
- en: Let’s take a look at the BeeKeeper SMS fraud malware *angrybirds.app* (v16,
    51fe). Widely distributed around 2013, the malware targeted the Russian Beeline
    carrier. [Listing 11-1](ch11.xhtml#ch11lis1) shows the list of permissions requested
    by the app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 BeeKeeper SMS 欺诈恶意软件 *angrybirds.app*（v16，51fe）。该恶意软件在2013年左右广泛传播，目标是俄罗斯
    Beeline 运营商。[列表 11-1](ch11.xhtml#ch11lis1)显示了该应用请求的权限列表。
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 11-1: All permissions requested by the BeeKeeper SMS fraud malware*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-1：BeeKeeper SMS 欺诈恶意软件请求的所有权限*'
- en: You can see that it requests permissions like `SEND_SMS`, which is necessary
    for sending the text messages that perpetrate SMS fraud, and `RECEIVE_SMS`, which
    the malware uses to receive command-and-control messages over SMS when a network
    connection to its internet-based command-and-control server is unavailable. The
    `CALL_PHONE` and `PROCESS_OUTGOING_CALLS` permissions are also noteworthy. BeeKeeper
    uses these to make phone calls to numbers received from its command-and-control
    server and redirect outgoing calls to other numbers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它请求了如 `SEND_SMS` 这样的权限，这是发送实施 SMS 欺诈的短信所必需的，还有 `RECEIVE_SMS` 权限，恶意软件利用该权限在无法连接到基于互联网的命令与控制服务器时，通过
    SMS 接收指令和控制消息。`CALL_PHONE` 和 `PROCESS_OUTGOING_CALLS` 权限也值得注意。BeeKeeper 使用这些权限拨打从其命令与控制服务器接收到的号码，并将外拨电话重定向到其他号码。
- en: '[Listing 11-2](ch11.xhtml#ch11lis2) shows one of the several code sections
    involved in sending SMS fraud messages.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 11-2](ch11.xhtml#ch11lis2) 展示了涉及发送 SMS 欺诈信息的几个代码段之一。'
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 11-2: A heavily obfuscated code snippet showing the BeeKeeper SMS
    fraud malware sending SMS messages*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-2：一个高度混淆的代码片段，展示了 BeeKeeper SMS 欺诈恶意软件发送短信*'
- en: You can see the app extracting the compromised device’s IMEI and IMSI numbers,
    its phone number, and its country. A very long encoded string argument passed
    to the `decript` method (which we’ve shortened here for brevity) is found inside
    an `if` statement whose condition is always false. We cannot be sure why the malware’s
    author made this choice; perhaps they wanted to prevent it from executing during
    testing, which they did by setting the `if` condition to false, and then never
    turned it back on. Lastly, the app acquires subscription information and executes
    the `sendSms` function.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到该应用提取了受感染设备的 IMEI 和 IMSI 号码、电话号码以及国家信息。一个非常长的编码字符串参数被传递给 `decript` 方法（为了简洁起见，我们在这里进行了简化），并且位于一个
    `if` 语句中，且其条件始终为假。我们无法确定恶意软件作者为何做出这样的选择；也许他们是希望在测试期间避免执行这一部分代码，方法是将 `if` 条件设置为假，但之后从未恢复其状态。最后，该应用获取订阅信息并执行
    `sendSms` 函数。
- en: '**Predictions for SMS Fraud Samples**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**SMS 欺诈样本的预测**'
- en: '[Table 11-3](ch11.xhtml#ch11tab3) shows how our machine learning classifiers
    performed on 10 important SMS fraud samples.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 11-3](ch11.xhtml#ch11tab3) 展示了我们的机器学习分类器在 10 个重要的 SMS 欺诈样本上的表现。'
- en: '**Table 11-3:** Performance of Machine Learning Classifiers on SMS Fraud Families'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 11-3：** 机器学习分类器在 SMS 欺诈家族上的表现'
- en: '| **Sample name** | **Distinguished from goodware** | **Distinguished from
    other malware** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **样本名称** | **与良性软件的区别** | **与其他恶意软件的区别** |'
- en: '| --- | --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| BeeKeeper | Yes | Yes |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| BeeKeeper | 是 | 是 |'
- en: '| Camera | Yes | No |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| Camera | 是 | 否 |'
- en: '| HDC Bookmark | Yes | Yes |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| HDC Bookmark | 是 | 是 |'
- en: '| Joker | Yes | No |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| Joker | 是 | 否 |'
- en: '| Moundial | Yes | Yes |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| Moundial | 是 | 是 |'
- en: '| RuFraud | Yes | Yes |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| RuFraud | 是 | 是 |'
- en: '| RuPlay | Yes | Yes |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| RuPlay | 是 | 是 |'
- en: '| TaiClipHot | Yes | Yes |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| TaiClipHot | 是 | 是 |'
- en: '| Wallpaper | Yes | Yes |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| Wallpaper | 是 | 是 |'
- en: '| WallySMS | Yes | Yes |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| WallySMS | 是 | 是 |'
- en: As you can see, in every case, they (that is, our late fusion ensemble) correctly
    classified the samples as SMS fraud apps rather than goodware. However, there
    were two prediction errors when we used the classifiers to determine whether the
    samples were SMS fraud apps or another form of malware. Importantly, one of these
    errors occurred when classifying Joker, a malware family likely created by a large
    criminal syndicate that has taken extensive steps to evade detection. The malware’s
    many variants incorporate one evasion strategy after another in a cat-and-mouse
    game that has been going on since 2016, leading to increasingly complex anti-analysis
    methods.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在每种情况下，它们（也就是我们的晚期融合集成模型）都正确地将样本分类为 SMS 欺诈应用，而不是良性软件。然而，当我们使用分类器来判断样本是否为
    SMS 欺诈应用或其他形式的恶意软件时，出现了两个预测错误。重要的是，这些错误中有一个发生在分类 Joker 时，Joker 是一个可能由大型犯罪集团创建的恶意软件家族，该集团已采取广泛的措施来规避检测。该恶意软件的多个变种采用了一种接一种的规避策略，进行着一场自
    2016 年以来的猫鼠游戏，导致了越来越复杂的反分析方法。
- en: '**Up Next**'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接下来**'
- en: As you’ve seen in this chapter, machine learning models provided with a combination
    of features are able to successfully predict whether an app is goodware or an
    SMS fraud app. Permissions play a major role in these apps’ behavior and are also
    significant factors that distinguish SMS fraud apps from other Android malware.
    However, you’ve also seen that no single feature discussed since [Chapter 7](ch07.xhtml)
    can, on its own, identify a particular kind of malware.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章中所看到的，提供了一组特征的机器学习模型能够成功预测一个应用程序是良性软件还是短信诈骗应用。权限在这些应用程序的行为中起着重要作用，也是区分短信诈骗应用和其他安卓恶意软件的重要因素。然而，你也看到了，自[第七章](ch07.xhtml)以来讨论的没有任何单一特征能够单独识别某一种恶意软件。
- en: 'To maximize detection effectiveness, we recommend using these machine learning
    methods in conjunction with the manual analysis techniques described in [Part
    II](part2.xhtml). Use the machine learning models as a triage system, similar
    to the process employed in a hospital emergency room: analysts should first examine
    apps flagged as highly likely to be malicious before specialists take a deeper
    look.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化检测效果，我们建议将这些机器学习方法与[第二部分](part2.xhtml)中描述的手动分析技术结合使用。将机器学习模型作为一个分诊系统，类似于医院急诊室的处理流程：分析师应首先检查被标记为极有可能是恶意的应用程序，然后专家再进行更深入的检查。
- en: This is the last malware category chapter. In the next and final chapter, we
    will share our thoughts on the future of Android malware and the future of malware
    detection with machine learning.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后一个恶意软件类别的章节。在下一个也是最后一章，我们将分享我们对安卓恶意软件的未来以及利用机器学习进行恶意软件检测的未来展望。
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[*OceanofPDF.com*](https://oceanofpdf.com)'
