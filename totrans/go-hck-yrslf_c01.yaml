- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security Through Obscurity
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll start learning how to think like a hacker to find weaknesses
    in security measures. You’ll discover a simple hack for revealing passwords hidden
    in a web browser. This hack works because web browsers protect passwords using
    *security through obscurity*.
  prefs: []
  type: TYPE_NORMAL
- en: Security through obscurity is a technique that attempts to keep something safe
    by hiding it. In the physical world, hiding your house key under the welcome mat
    on your front porch is an example of security through obscurity. Your house may
    *feel* secure, but that security breaks down as soon as someone thinks to look
    under the mat.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding something to keep it safe isn’t necessarily a bad approach, unless it’s
    the *only* security measure you’ve taken. Unfortunately, security through obscurity
    often fails, especially when it’s applied to our computers. For example, many
    users “hide” their passwords in a text document or Excel spreadsheet on their
    computer or, worse, on a sticky note under their keyboard or in a desk drawer.
    These passwords are even easier to find than the one you’ll hack in this chapter.
    Similarly, some software developers hardcode obscured passwords and other secret
    values into their applications, but a skilled hacker can often find and decode
    those values.
  prefs: []
  type: TYPE_NORMAL
- en: As you’ll see in this chapter, if obscurity is your only security, all that
    stands between you and a motivated intruder is a little of their time and energy
    spent searching for the way in.
  prefs: []
  type: TYPE_NORMAL
- en: How Browsers “Secure” Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you enter your password to log in to an online service, such as an email
    or a social media account, your web browser usually hides the password with dots
    or asterisks. That way, someone looking over your shoulder can’t read it. If you
    tell your browser to save your password and you come back to the site later, those
    dots or asterisks will appear in the password field automatically when the browser
    fills in your stored password for you.
  prefs: []
  type: TYPE_NORMAL
- en: These dots or asterisks are a great example of security through obscurity. Your
    browser isn’t encrypting your password or protecting it in any other special way.
    It’s just obscuring the characters in the password field to protect your password
    from casual snoopers. This technique isn’t actually secure at all. In fact, a
    hacker needs just a few seconds on your keyboard to view the password.
  prefs: []
  type: TYPE_NORMAL
- en: Revealing an Obscured Password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To reveal a password obscured by your browser, we’ll use the browser’s Inspect
    tool. This tool lets you view and temporarily edit a web page’s *source code*,
    the code that tells your browser how to display the web page. We’ll change the
    piece of the source code that makes the password show up as dots or asterisks.
    When we’re done, the password will display as regular text instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This isn’t the sort of hack that could take down a nation-state or compromise
    millions of people’s private data in one fell swoop. Rather, this hack illustrates
    one of the guiding principles of hacking: using an existing tool—in this case,
    a browser’s Inspect tool—in a creative way to accomplish a particular goal—revealing
    a hidden password. At the same time, this hack demonstrates the risk of storing
    passwords in a browser in the event an attacker gets physical access to your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try out the hack, using the Twitter login page as an example. We’ll enter
    a fake username and password, launch the browser’s Inspect tool, and update the
    source code to expose the password.
  prefs: []
  type: TYPE_NORMAL
- en: Open Google Chrome and go to [https://twitter.com/login/](https://twitter.com/login/).
    This hack will also work in other browsers, but we’ll use Chrome for simplicity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your name in the username field and type `Notmyrealpassword!` into the
    password field. *Don’t* enter your real password. The password will be obscured
    by dots, as shown in [Figure 1-1](#figure1-1).![f01001](image_fi/502000c01/f01001.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1-1: Web browsers usually obscure passwords with dots or asterisks.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click (or CONTROL-click on a Mac) the password field and select **Inspect**,
    as shown in [Figure 1-2](#figure1-2). The Inspect tool, which will look like an
    assortment of windows showing code, should open in your browser. Since you right-clicked
    the password field to open the Inspect tool, the browser should already be highlighting
    the part of the code that creates the password field in the login page.![f01002](image_fi/502000c01/f01002.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1-2: Inspecting the password code'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find `type="password"` in the highlighted code and double-click the word `password`
    to select it, as shown in [Figure 1-3](#figure1-3). This piece of code is how
    the browser identifies the password field. The browser knows that any text in
    a field with type `password` should be obscured.![f01003](image_fi/502000c01/f01003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1-3: Finding `type="password"` in the Inspect tool'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With `password` highlighted, press the spacebar to replace `password` with a
    space (`type=" "`), as shown in [Figure 1-4](#figure1-4). We’ve now changed (or
    hacked) the code for the password field so that the browser no longer knows it’s
    supposed to be a password-type field. This should reveal any text in the password
    field!![f01004](image_fi/502000c01/f01004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1-4: Replacing the word *password* in `type="password"`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press ENTER to display the updated code in the browser. You should now see the
    password you entered as regular text in the browser window, as shown in [Figure
    1-5](#figure1-5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This hack worked because the `<input>` tag that lets web developers create password
    fields is insecure—and it has been for a quarter of a century. In the 1990s, when
    early web developers added the `<input>` tag to *HyperText Markup Language (HTML)*,
    the language that makes web pages display in web browsers, their only security
    feature was replacing password characters with dots or asterisks by using the
    extra code `type="password"`. However, since regular text boxes also use the `<input>`
    tag, we can use the Inspect tool to change a password input into a regular text
    input just by changing `type="password"` to `type=" "`.
  prefs: []
  type: TYPE_NORMAL
- en: '![f01005](image_fi/502000c01/f01005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-5: The password is now visible.'
  prefs: []
  type: TYPE_NORMAL
- en: Using and Misusing This Hack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The hack we just carried out has practical, ethical applications. Because passwords
    stored in a browser are autofilled but obscured on a website’s login screen, you
    can use this simple hack to unmask a password you’ve forgotten. This is especially
    useful if you store your passwords on one machine, like your home computer, but
    periodically have to log in from other machines, like your work computer, a family
    member’s computer, or your mobile device. If you can’t remember your password
    when you try to log in on another computer, you can unmask the stored password
    on your home computer to look it up rather than reset your password.
  prefs: []
  type: TYPE_NORMAL
- en: This hack can be used ethically in other ways as well. For example, if an employee
    leaves a company unexpectedly, an ethical hacker with the permission of the company’s
    owner can use this hack to recover passwords to important online accounts the
    employee might have been responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: If you practice it enough times, you can easily perform this hack in under 5
    seconds. However, that also means that if you ever store a password in a public
    computer, anyone with physical access to that computer needs only 5 seconds to
    steal it. A black hat hacker can walk into a hotel lobby or public library almost
    anywhere in the world, sit down at a computer, check the browser’s history for
    recently visited websites, and see if any potential victims saved their passwords
    when logging in to their private accounts.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t even have to save your password in the browser for someone to reveal
    it. If you’re in a public place and someone distracts you from your computer while
    you’re entering your password into a website, they can use this hack to steal
    your password. They can even repair the `type="password"` code and close the Inspect
    tool to cover their tracks! If you’ve used that same password for multiple accounts,
    the attacker will now be able to access all those other accounts too.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting Your Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hack we’ve discussed, when used maliciously, poses a clear risk to the
    security of your passwords. However, there are some simple ways you can protect
    yourself. For one, this hack is possible only if the hacker has physical access
    to the stored passwords, so the key to preventing an attack is either not storing
    passwords in your browser at all or limiting the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Where you store passwords Store a password in a browser only on a computer or
    device you own and keep with you, never on a public computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which passwords you store Never store your email password, because an attacker
    can usually discover or reset all your other passwords with your email account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who has access to your computer Keep your computer with you or stored in a safe
    place, and don’t leave it open if you have to step away, even for a minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you must connect to a private account from a public computer, limit the information
    stored in the browser by using Incognito mode (CTRL-SHIFT-N) in Chrome or opening
    a new Private Window in Firefox (CTRL-SHIFT-P) or Safari (SHIFT-⌘-N). *Remember
    to both log out and close the browser completely when you finish your session.*
    Even if you log out or use Incognito mode, shared computers are risky, because
    malware can record your keystrokes or other information. (In fact, we’ll capture
    keystrokes using a virus we create in Chapter 6.) Only log in to accounts from
    a public computer if it’s absolutely necessary. Also, think about changing your
    passwords when you get back to your own computer.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using your personal computer in a public place, be sure to log out
    or lock the screen if you walk away—or better yet, keep your computer with you.
    Set your lock screen or screensaver to turn on after only a few minutes to limit
    the amount of time your computer is vulnerable, in case you forget to lock it
    yourself. Use a strong password or passphrase (try four or more words) for logging
    in to your computer, rather than something obvious like *password123*, so others
    can’t easily unlock your computer if it’s left unattended.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond these measures, you should take advantage of other password security
    tools, such as two-factor authentication and a password manager like KeePass,
    Dashlane, LastPass, or similar. We’ll discuss these tools in Chapter 11.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting yourself from computer attacks takes a few smart precautions, but
    it’s important to know how to balance convenience and security. Storing all your
    passwords for everything in your browser seems convenient because you never have
    to type them in, but it also means everyone with access to that computer can steal
    your passwords and your accounts. We have to find the right balance between convenience
    and security, both in the physical world and online.
  prefs: []
  type: TYPE_NORMAL
- en: The Takeaway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you saw that security through obscurity is easily defeated
    and thus not very secure at all. You learned how to reveal a password entered
    into a browser in seconds, using only a few steps. You also learned the importance
    of never storing a password on a public or shared computer. In addition, you know
    now to physically protect your computer from people you don’t know or trust—if
    someone can touch your keyboard, they can access your sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: The hack discussed in this chapter was an example of a physical access hack—the
    attacker needs physical access to your computer to execute it. In the next chapter,
    you’ll find out about other physical access hacks that allow hackers to obtain
    files from your hard drive, without needing to know your login information.
  prefs: []
  type: TYPE_NORMAL
