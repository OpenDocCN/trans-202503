- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 13 WORKING WITH DIRECTORIES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Batch is an ideal tool for interrogating Windows directories. What files or
    types of files are in a directory? Are some directories filling up? Where’s a
    lost file? You can answer such questions and many more with some Batch code.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to create directories, delete directories,
    and retrieve a plethora of information about existing directories. Before long,
    you’ll be able to quickly generate a report detailing the contents of a directory,
    including filenames, subdirectories, and all the contents of any subdirectories.
    The information can include the size, last modified date, and attributes of all
    files, or even just select files. Eventually, you’ll learn how to process these
    files and directories one by one in a bat file, but I’ll start by sharing how
    to retrieve this useful data. I’ll also explore how to easily determine the existence
    of a specific file or file mask.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you’ll learn how to map local and network directories to drive letters.
    Nearly anyone who works on a Windows computer can alleviate some day-to-day drudgery
    and become more efficient with a few tips from this chapter coded into a simple
    bat file.
  prefs: []
  type: TYPE_NORMAL
- en: Directory Basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *directory* is a mapped location on a computer’s disk drive that can house
    files and other directories or subdirectories. On a Windows computer, a directory
    is represented by a folder; in fact, the terms *directory* and *folder* are often
    used interchangeably. In Windows Explorer, you can create and delete subdirectories
    and files in a directory with just a few mouse clicks. You can do the same with
    a bat file, maybe more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Directories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create a directory, Batch uses the md and mkdir commands. Both stand for
    *make directory*, and they’re actually the same command (Batch synonyms).
  prefs: []
  type: TYPE_NORMAL
- en: 'The md command accepts no options, and its only argument is the directory to
    be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This useful yet simple command accepts multiple directories to be created, but
    when you use a single command for each directory, the return code of each command
    clearly tells you which directories were and were not successfully created. The
    md command works with or without the trailing slash, but I recommend using it,
    for no other reason than its presence makes the argument look like a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting Directories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The counterpart to the md command is the rd command, for *remove directory*,
    which deletes a directory and any files that might be in it. It also has a Batch
    synonym, rmdir, and it has only two options, both of which I always use: /Q invokes
    *quiet* mode, and /S deletes any *subdirectories* and their contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command also accepts one-to-many directories as arguments, with or without
    a trailing slash. If there are no subdirectories, the command works with or without
    the /S option, but if there’s one or more subdirectories, nothing at all is deleted
    without the option. I haven’t yet been able to conceptualize what it means to
    delete a directory but not its subdirectories, so I always use the /S option.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Directory Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Batch has two commands for retrieving detailed information about directories
    and the files they contain, one far more useful than the other. I’ll start with
    the indispensable one.
  prefs: []
  type: TYPE_NORMAL
- en: The dir Command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One immensely helpful tool is the dir command, which is short for *directory*.
    Many will use it at the command prompt to display information to the console.
    When used alone in a bat file, that information is simply dumped to stdout, which
    usually means it’s subsumed by everything else contained in stdout, so it isn’t
    all that useful. However, you’ll typically use the dir in one of two fashions.
  prefs: []
  type: TYPE_NORMAL
- en: First, with what you learned in [Chapter 12](chapter12.xhtml), you can redirect
    the output of the command to a file to be read by a program, a human, or eventually
    a bat file. Second, and even more impressive, I’ll show how to feed the dir command
    into a for command, skipping the step of creating the file. That’ll come in [Part
    II](part2.xhtml), but before you use dir in a for command, you need to understand
    the complexities of the dir command itself.
  prefs: []
  type: TYPE_NORMAL
- en: Without Options
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The simplest dir command accepts a single argument: a directory or folder.
    The double quotes are optional if the path has no embedded spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For the purpose of demonstration, assume that this directory holds electronic
    copies of some important personal documents and a couple of subdirectories with
    other important stuff. The result of the command might be the nicely formatted
    report written to stdout shown in [Listing 13-1](#Lis13-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 13-1: Sample output of an optionless dir command'
  prefs: []
  type: TYPE_NORMAL
- en: After three header lines, the first two <DIR> entries signify that this is a
    subdirectory and not a root folder associated with a drive letter; these two lines
    don’t appear for the dir C:\ command. More interesting, all of the files in this
    folder are clearly shown, each with its last modified date and time along with
    the file size. Subdirectories are also clearly delineated.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the files and subdirectories are intermingled, sorted alphabetically
    by default, but as you’ll soon see, this command is extremely customizable with
    its options, giving you much control over this output.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even list multiple directories in a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command displays all the files and subdirectories under the first folder,
    followed by similar information for the second folders under another heading:
    Directory of C:\Batch.'
  prefs: []
  type: TYPE_NORMAL
- en: Some Useful Options
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The dir command has no shortage of useful options; a couple options even have
    options of their own. I’ll discuss the ones I’ve used often, but as always, find
    the full list in the help, dir /?.
  prefs: []
  type: TYPE_NORMAL
- en: 'The /O option controls the sort *order*, but it works a little differently
    from most options you’ve seen at this point. Additional characters define the
    sort order. For instance, /OG groups the directories before the files, and a dash
    reverses the sort order so that /O-G groups the files before the directories.
    (Painfully, G represents *group directories first*.) The option /OEN orders by
    *extension* and then by *name*, while /O-E-N reverses the order. Some may find
    it *odious*, but /ODS sorts by modified date and time followed by file size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The *attributes* option, /A, limits what’s displayed. The /AH option lists only
    hidden files, while /A-H omits hidden files from the list; /AD shows only directories,
    while /A-D doesn’t display directories. There really should be an option for files
    only, but the no directories option accomplishes the task as only Batch can.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the file sizes are displayed with commas, which is great for readability
    (for humans), but if we want to do any arithmetic on these numbers, the /-C option
    removes the commas. Quite often, the coder wants to produce a simple list of filenames
    without any clutter. The /B option, which stands for *bare*, does the job nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting a few of these options together, the following command skips the directories
    (/A-D), orders by size from smallest to largest (/OS), and shows only the filenames
    sans their respective paths (/B):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This command without any options produced the report in [Listing 13-1](#Lis13-1).
    With these options, the result is far more succinct, just a simple list of filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice from [Listing 13-1](#Lis13-1) that the passport is the smallest file
    and the birth certificate is the largest, thus showing that the files are still
    ordered by size even though their byte counts aren’t displayed. The succinct output
    might look like a downgrade; true, it isn’t as informative for humans, but in
    [Part II](part2.xhtml) this will be ideal data to feed into a for command that’ll
    process one file at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful option is /S, which stands for *subdirectory*. It essentially
    runs a dir command on a directory, and then it runs it again on all of its subdirectories,
    returning a well-formatted report with subheadings for each. The dir C:\ /S command
    provides a report on every folder on your computer, but it won’t be quick, and
    the result will likely be longer than this book. When used in conjunction with
    /B, each bare filename is prepended with its path—which might seem like a contradiction
    but not after you consider that each file could be in any number of directories.
  prefs: []
  type: TYPE_NORMAL
- en: Default Set of Options
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If you’re planning to run multiple dir commands, all with the same options,
    those options don’t need to be repeated for every command. Instead, you can load
    one or more options into the dircmd pseudo-environment variable. Once it’s set,
    all subsequent dir commands will use the options in the dircmd variable by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code executes both dir commands showing bare filenames
    (/B), no directories (/A-D), and sorted by extension (/OE):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can override one or more of the options in the dircmd variable for a particular
    dir command. Assume that the next dir command follows the previous code where
    dircmd was set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This still uses the options for the bare format of files only, but the sort
    order is reversed.
  prefs: []
  type: TYPE_NORMAL
- en: At any point, you can turn this feature off by setting dircmd to null or nothing
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: The where Command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The where command is similar to the dir command; it searches one or more directories
    to find *where* a file exists. If you’re shrugging your shoulders as you read
    this asking, “Doesn’t the dir command do that and a whole lot more?” my answer
    would most definitely be in the affirmative. Most anything you can do with where,
    you can do with dir, only better.
  prefs: []
  type: TYPE_NORMAL
- en: However, the where command performs one task far more efficiently than the dir
    command ever could. With the /Q option, the where command returns an exit code
    indicating success or failure in lieu of a list of files found, making it easy
    to determine whether a particular file exists or whether at least one file matching
    a file mask is present. (The /Q option stands for *quiet* mode like some others
    you’ve seen, but quiet for this command means something slightly different. For
    the others, a prompt is suppressed, but here the output is suppressed.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command looks for at least one file starting with the text FindMe,
    case-insensitive, in the folder *C:\Batch\* and sets errorlevel based on the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The return code will be 0 if at least one file fits the mask, 1 if not, or 2
    if the syntax is incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely, there appears to be a problem with the path and file mask;
    there’s what looks to be an extraneous colon between the two. The dir command
    rightly accepts a path and filename (or mask) together as one argument. The where
    command treats them as separate arguments delimited by a colon. This does allow
    you to enter multiple semicolon-delimited paths with a single filename or mask,
    but that’s of little consolation. To make matters even more confusing, the colon
    is dropped in favor of a space when using the /R option—which stands for *recursive*,
    meaning that it also searches subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: I’m begrudgingly including this command. The syntax is just plain wrong, but
    it does have one worthwhile function. Think of it as an if exist command with
    a return code. Use it for this narrow task, but otherwise stick with the dir.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping Drive Letters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Batch has two very useful commands for mapping drive letters. One maps local
    paths to drive letters, and the other maps network paths and shares to drive letters.
    If you’re a noncoder—first off, I’m giving you a slow clap, congrats on getting
    to the 13th chapter—but more to the point, if this sounds like something that
    only coders can use, that isn’t the case.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping paths is a great tool if you often work in various specific paths on
    your computer or network throughout the day. Navigating to them might take some
    time, especially if these paths are several folders deep. Another challenge, especially
    if you work from home, is that you probably won’t be able to see the network paths
    until you connect to a virtual private network (VPN). To make all of this easier,
    write a short bat file and run it each morning, perhaps after connecting to the
    network, and you can access these paths with ease throughout the day. After the
    mapping is done, access each path by clicking a drive letter in Windows Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: The subst Command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The subst command maps a local directory, or any folder on your Windows computer,
    to a drive letter. The command name is short for *substitute* because after using
    it, you can substitute a drive letter for a directory. (No, it isn’t used for
    substringing.) The following command maps *Z:\* to the path shown, although it’ll
    fail if the path doesn’t exist or if the drive letter is already mapped to another
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After this command executes, you’ll find *Z:\* in Windows Explorer as an alias
    of the *C:\ParentFolder\ChildFolder\GrandchildFolder\* path. Now the bat file
    can access anything in that path by invoking only the drive letter. For example,
    after the previous command executes, the following command creates an empty file
    in the *GrandchildFolder\* directory, with an economy of typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The subst command with neither arguments nor options displays all folders currently
    mapped by earlier subst commands. If a certain other folder had already been mapped
    prior to the earlier subst command, the succinct command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'might generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The mapping of *Z:\* will now be in effect on the machine, even to other processes
    (bats and humans alike) until the machine is logged off or unless the following
    command is run to *delete* or disconnect the mapping via the /D option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This command maps only local directories; it doesn’t map directories on other
    computers, but there’s another command for that.
  prefs: []
  type: TYPE_NORMAL
- en: The net use Command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The net use command maps network directories and shares as the subst command
    maps local directories. The following command maps *Y:\* to a share on a remote
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now use the drive letter *Y:\* to access this path on another machine,
    again by both bats and humans, until the mapping is deleted or the machine is
    shut down. Like the subst command, net use has an option to disconnect or delete
    the mapping, but it’s more verbose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The creators of the /D and /DELETE options were at least subconsciously honoring
    the famous quote, “a foolish consistency is the hobgoblin of little minds.” Ralph
    Waldo Emerson might disapprove, but in a nod to foolish consistency, I’ve capitalized
    the verbose option as I have the others because that’s my convention, but not
    without reservations. My primary driver behind this convention is to minimize
    capitalizations, but when an option, which is usually a single character, grows
    to six characters, it begs to be lowercase. Do what feels right to you.
  prefs: []
  type: TYPE_NORMAL
- en: Much like the subst command, the command with no additional arguments, net use,
    produces the complete list of directories and drives mapped by earlier net use
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*I need to head off some hate mail here. This is actually the net command with
    use being its first argument. The command has more than a dozen other first arguments—for
    instance, share creates a file share. But due to the popularity of use, coders
    commonly refer to the net use command. In fact, the help, net use /?, details
    information on it like any other command.*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create and delete directories. I detailed
    the all-important dir command, which you’ll see again before long, and the where
    command, which you’ll not see again in this book because of reasons stated earlier.
    You now can pull up an incredible amount of information on a directory and all
    of its contents, and in [Part II](part2.xhtml), I’ll demonstrate how to enumerate
    through this data so that you can perform a task on each file or directory. You
    also learned how to map local and network directories, a skill that’s incredibly
    useful for anyone, not just coders, who works often on a Windows computer.
  prefs: []
  type: TYPE_NORMAL
- en: Changing gears, I’ll next delve into the concept of escaping. To some this might
    be the most confusing title in the book; what’s escaping, what’s being escaped,
    and what are we trying to escape? Those questions and more will be answered in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
