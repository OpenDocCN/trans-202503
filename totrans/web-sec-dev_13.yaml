- en: '**11**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11**'
- en: '**PERMISSIONS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: 'Users on your website will usually have different levels of permissions. In
    a content management system, for instance, some users are administrators who have
    the ability to edit the site’s content, while most users can only view and interact
    with the content. Social media sites have a more complex web of permissions: users
    may opt to share only certain content with friends or to keep their profile locked.
    For webmail sites, each user should be able to access only their own email! It’s
    important that you correctly and uniformly enforce these types of permissions
    across your site, or your users will lose trust in you.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网站上的用户通常会拥有不同级别的权限。例如，在内容管理系统中，一些用户是管理员，拥有编辑站点内容的权限，而大多数用户只能查看和互动内容。社交媒体网站的权限更加复杂：用户可以选择只与朋友分享某些内容，或将个人资料设置为私密。对于网页邮件网站，每个用户应只能访问自己的电子邮件！重要的是，您需要在站点上正确且统一地执行这些权限，否则用户将失去对您的信任。
- en: Facebook suffered a disastrous failure in user permissions in September 2018,
    when hackers exploited a bug in its video uploading tool to generate access tokens
    for the site. Up to 50 million user accounts on the site were compromised. Hackers
    stole private profile details like users’ names, emails, and phone numbers. Facebook
    patched the bug, issued a security advisory, and did an apology tour via the press.
    However, this came at the end of a year that contained a lot of unfavorable stories
    about Facebook’s business practices, and the company’s share price took a battering.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook在2018年9月遭遇了一次灾难性的用户权限失败，当时黑客利用其视频上传工具中的漏洞生成了访问令牌。该站点最多有5000万个用户帐户受到影响。黑客窃取了用户的私人资料，如用户名、电子邮件和电话号码。Facebook修复了该漏洞，发布了安全公告，并通过媒体进行道歉。然而，这一事件发生在包含许多关于Facebook商业行为不利报道的一年末，公司股价也受到了重创。
- en: The Facebook hack was an example of *privilege escalation*, whereby a malicious
    user usurps the permissions of another user. The process of securing your site
    so the correct privileges are applied to each user is called implementing *access
    control*. This chapter covers both concepts and presents one common method hackers
    use to exploit insufficient access control, called *directory traversal*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook的黑客攻击是一个*特权升级*的例子，其中恶意用户篡夺了其他用户的权限。确保您的站点安全，并为每个用户正确应用权限的过程称为实施*访问控制*。本章涵盖了这两个概念，并介绍了一种黑客常用的、利用访问控制不足的方法，称为*目录遍历*。
- en: '**Privilege Escalation**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**特权升级**'
- en: 'Security experts divide privilege escalation attacks into two categories: vertical
    and horizontal escalation.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 安全专家将特权升级攻击分为两类：垂直升级和水平升级。
- en: In *vertical escalation*, an attacker gets access to an account with broader
    permissions than their own. If an attacker can deploy a *web shell* on your server—an
    executable script that takes elements of the HTTP request and runs them on the
    command line—one of their first aims will be to escalate their way to *root privilege*,
    so they can perform any actions they wish on the server. Ordinarily, commands
    sent to the web shell will be executed under the same operating system account
    that the web server is running, which generally has limited network and disk access.
    Hackers have found a lot of ways to perform vertical escalation attacks on operating
    systems in an attempt to get root access—which allows them to infect the whole
    server from a web shell.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在*垂直升级*中，攻击者获得比自己权限更广泛的帐户访问权限。如果攻击者能够在您的服务器上部署*web shell*（一个可执行脚本，它获取HTTP请求的元素并在命令行上运行），他们的首要目标之一将是升级到*root权限*，以便在服务器上执行任何他们想做的操作。通常，发送到web
    shell的命令将在与web服务器运行相同的操作系统帐户下执行，该帐户通常具有有限的网络和磁盘访问权限。黑客已经找到了许多在操作系统上执行垂直升级攻击的方法，试图获得root权限——这使他们可以通过web
    shell感染整个服务器。
- en: 'In *horizontal escalation*, an attacker accesses another account with similar
    privileges as their own. In the last couple of chapters, we’ve discussed common
    ways of performing this type of attack: guessing passwords, hijacking sessions,
    or maliciously crafting HTTP request data. The September 2018 Facebook hack was
    an example of horizontal escalation, caused by an API that issued access tokens
    without correctly verifying the user’s permissions.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在*横向升级*攻击中，攻击者访问另一个与自己权限相似的账户。在前几章中，我们讨论了执行这种类型攻击的常见方法：猜测密码、劫持会话或恶意构造HTTP请求数据。2018年9月的Facebook黑客事件就是一个横向升级的例子，由于API在没有正确验证用户权限的情况下发放了访问令牌。
- en: To secure your site from escalation attacks, you need to securely implement
    access control for all sensitive resources. Let’s discuss how.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护你的站点免受升级攻击，你需要为所有敏感资源安全地实施访问控制。让我们来讨论一下如何做到这一点。
- en: '**Access Control**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**访问控制**'
- en: 'Your access control strategy should cover three key aspects:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的访问控制策略应涵盖三个关键方面：
- en: '**Authentication** Correctly identifying a user when they return to the site'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证** 在用户返回站点时正确识别用户'
- en: '**Authorization** Deciding which actions a user should and shouldn’t be able
    to perform after they’ve identified themselves'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**授权** 在用户确认身份后，决定哪些操作是他们应该或不应该执行的'
- en: '**Permission checking** Evaluating authorization at the point in time when
    a user attempts to perform an action'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限检查** 在用户尝试执行某个操作时，评估其授权情况'
- en: '[Chapters 9](ch09.xhtml#ch09) and [10](ch10.xhtml#ch10) covered authentication
    in detail; you saw how securing login functionality and session management allows
    you to reliably determine which user is making HTTP requests. However, from there,
    you still need to determine which actions each user can perform, and this is a
    more open-ended problem.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.xhtml#ch09)和[第10章](ch10.xhtml#ch10)详细讨论了身份验证；你了解了如何通过保护登录功能和会话管理来可靠地判断是哪个用户发出了HTTP请求。然而，在此之后，你仍然需要确定每个用户可以执行哪些操作，而这就是一个更开放性的问题。'
- en: 'A good access control strategy consists of three stages: designing an authorization
    model, implementing the access control, and testing the access control. After
    you’ve done that, you can also add audit trails and make sure you haven’t missed
    common oversights. Let’s go through each of these in detail.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的访问控制策略包括三个阶段：设计授权模型、实现访问控制和测试访问控制。完成这些后，你还可以添加审计追踪，确保没有遗漏常见的疏忽。让我们详细了解每个阶段。
- en: '***Designing an Authorization Model***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***设计授权模型***'
- en: There are several common ways to model authorization rules in a software application.
    When you design your authorization model, it’s important to document how you’ll
    apply your chosen model to your users. Without an agreed-upon set of rules, it’s
    hard to define what a “correct” implementation looks like.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件应用中，有几种常见的方式来建模授权规则。当你设计授权模型时，重要的是记录你将如何将所选模型应用到你的用户。没有一套公认的规则，难以定义“正确”的实现方式。
- en: With that in mind, let’s look at some common ways to model authorization rules.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，让我们看看一些常见的授权规则建模方式。
- en: '**Access Control Lists**'
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**访问控制列表**'
- en: '*Access control lists (ACLs)* are a simple way of modeling authorization that
    attach against each object in your system a list of permissions, specifying the
    actions that each user or account can perform on that object. The canonical example
    of an ACL-based model is the Linux filesystem, which can individually grant each
    user read, write, or execute permissions on each file and directory. Most SQL
    databases also implement ACL-based authorization—the account you use to connect
    to the database determines which tables you can read or update, or whether you
    can change table structures.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*访问控制列表（ACLs）* 是一种简单的授权建模方式，它将一个权限列表附加到系统中的每个对象上，指定每个用户或账户可以在该对象上执行的操作。基于ACL模型的典型示例是Linux文件系统，它可以单独授予每个用户对每个文件和目录的读、写或执行权限。大多数SQL数据库也实现了基于ACL的授权——你用来连接数据库的账户决定了你可以读取或更新哪些表，或者是否可以更改表结构。'
- en: '**Whitelists and Blacklists**'
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**白名单和黑名单**'
- en: A simpler way to model authorization is to use a whitelist or blacklist. A *whitelist*
    describes the users or accounts that can access a particular resource, and bans
    all other users. A *blacklist* explicitly describes the users or accounts that
    are banned from accessing a resource, implying that the resource should be made
    accessible to any other user or account. Spam filters frequently use whitelists
    and blacklists to distinguish email addresses that the email application should
    send directly to the spam folder or that it should never junk.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更简单的授权建模方式是使用白名单或黑名单。*白名单*描述了可以访问特定资源的用户或账户，并禁止所有其他用户。*黑名单*明确描述了被禁止访问某个资源的用户或账户，这意味着该资源应该对任何其他用户或账户开放。垃圾邮件过滤器通常使用白名单和黑名单来区分电子邮件地址，决定电子邮件应用是否应该直接将其发送到垃圾邮件文件夹，或永远不予处理。
- en: '**Role-Based Access Control**'
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**'
- en: Probably the most comprehensive authorization model is *role-based access control
    (RBAC)*, which grants users *roles*, or adds users to *groups* that it has granted
    specific roles. *Policies* in the system define how each role can interact with
    specific *subjects*—resources within the computing system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最全面的授权模型可能是*基于角色的访问控制（RBAC）*，它授予用户*角色*，或者将用户添加到已授予特定角色的*组*中。系统中的*策略*定义了每个角色如何与特定的*对象*——计算系统中的资源——进行交互。
- en: A simple RBAC-system might designate certain users as administrators by adding
    a user to the Administrators group, which in turn grants them the Administrator
    role. A policy would then permit users or groups with the Administrator role to
    edit particular pieces of content of your site.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的RBAC系统可能通过将某些用户添加到管理员组中来指定其为管理员，这样就会赋予他们管理员角色。然后，一个策略会允许具有管理员角色的用户或组编辑你网站上的特定内容。
- en: The Amazon Web Services *identity and access management (IAM)* system is an
    example of a comprehensive role-based system, as is Microsoft’s Active Directory.
    Role-based access control is powerful but often prone to complexity. Policies
    can contradict each other, creating conflicts that developers need to resolve,
    and users can belong to many groups with overlapping concerns. In such cases,
    it can sometimes be hard to see why a system is making certain access control
    decisions, or prioritizing certain rules in a particular set of circumstances.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊网络服务的*身份与访问管理（IAM）*系统是一个综合角色基础系统的例子，微软的Active Directory也是如此。基于角色的访问控制非常强大，但常常容易变得复杂。策略可能互相矛盾，导致开发者需要解决的冲突，而且用户可能属于多个重叠关注点的组。在这种情况下，有时很难看清为什么系统会做出某些访问控制决策，或者为什么在特定情况下优先考虑某些规则。
- en: '**Ownership-Based Access Control**'
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**基于所有权的访问控制**'
- en: 'In the age of social media, it has become common to organize access control
    rules around the idea of *ownership*, whereby each user has full control over
    the photos they upload or the posts they create. Social media users are, in essence,
    administrators of their own content: they can create, upload, delete, and control
    visibility on their own posts, comments, photos, and stories. They can tag other
    users in content such as photos, though those other users may have to approve
    those tags before the tags are made public. On a social media site, each type
    of content has an implied privacy level: commenting on each other’s posts is usually
    done in public, but direct messages are private (though someone should try explaining
    that to my grandmother).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交媒体时代，围绕*所有权*组织访问控制规则变得越来越普遍，其中每个用户对他们上传的照片或创建的帖子拥有完全控制权。社交媒体用户本质上是自己内容的管理员：他们可以创建、上传、删除并控制自己帖子、评论、照片和故事的可见性。他们可以在照片等内容中标记其他用户，尽管这些其他用户可能需要在标签公开之前批准这些标签。在社交媒体网站上，每种类型的内容都有隐含的隐私级别：互相评论通常是在公开场合进行的，而直接消息则是私密的（尽管你应该尝试向我祖母解释这一点）。
- en: '***Implementing Access Control***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***实现访问控制***'
- en: After you’ve chosen your authorization model and defined the access rules for
    your site, you’ll need to implement them in code. You should attempt to centralize
    access control decisions in your codebase, which makes it easier to validate them
    against your design documents during code reviews. You don’t necessarily need
    to have all access decisions flow through one code path, but it’s important to
    have a standard method of evaluating access control decisions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了授权模型并定义了站点的访问规则后，你需要在代码中实现它们。你应当尝试将访问控制决策集中化到代码库中，这样在代码审查时就能更轻松地根据设计文档验证它们。你不一定需要让所有访问决策都流经同一代码路径，但有一个标准的访问控制决策评估方法是很重要的。
- en: 'There are many ways of implementing authorization rules: using function or
    method decorators (which tag functions with certain permission levels), URL checking
    (for example, prefixing sensitive paths with */admin*), or inserting inline assertions
    in the code. Some implementations will defer to access control decisions from
    a dedicated permission component or in-house API. [Listing 11-1](ch11.xhtml#ch11list1)
    shows an example of adding permission checking to Python functions.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实现授权规则有很多方法：使用函数或方法装饰器（给函数打上特定权限级别的标签）、URL 检查（例如，将敏感路径前缀设置为*/admin*），或在代码中插入内联断言。有些实现会将访问控制决策委托给专门的权限组件或内部
    API。[示例 11-1](ch11.xhtml#ch11list1)展示了如何在 Python 函数中添加权限检查。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 11-1: Checking permissions using the django web server in Python*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 11-1：在 Python 中使用 django 网络服务器检查权限*'
- en: The web server requires that the user is logged in ❶ and has permissions to
    publish content ❷ before permitting them to publish a post.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在允许用户发布帖子之前，网络服务器要求用户已登录 ❶ 且具有发布内容的权限 ❷。
- en: '[Listing 11-2](ch11.xhtml#ch11list2) shows how to check permissions inline
    in Ruby, using the `pundit` library.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-2](ch11.xhtml#ch11list2)展示了如何在 Ruby 中使用 `pundit` 库内联检查权限。'
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 11-2: Checking permissions by using the pundit library in Ruby*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 11-2：使用 Ruby 中的 pundit 库检查权限*'
- en: The method call ❶ asks the library whether the currently logged-in user has
    permission to update the social media post described by the `@post` object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 方法调用 ❶ 会询问库当前登录的用户是否有权限更新由 `@post` 对象描述的社交媒体帖子。
- en: Whatever method you use to implement permission checking, be sure to make access
    control decisions based on properly vetted identity data. Don’t rely on anything
    in the HTTP request besides the session cookie to infer which user is accessing
    a resource and what permissions they have! A malicious user can tamper with anything
    else in the request in order to commit privilege escalation attacks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么方法实现权限检查，务必确保基于经过适当审查的身份数据做出访问控制决策。不要依赖 HTTP 请求中除了会话 cookie 之外的任何内容来推断哪个用户正在访问某个资源以及他们具有什么权限！恶意用户可以篡改请求中的其他内容，从而进行特权升级攻击。
- en: '***Testing Access Control***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***测试访问控制***'
- en: It’s important to test your access control system critically. Make sure your
    testing procedures genuinely attempt to find holes in your access control scheme;
    if you treat it like an attacker would, you’ll be better prepared when your first
    real attack occurs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 彻底测试访问控制系统非常重要。确保你的测试程序确实尝试找到访问控制方案中的漏洞；如果你像攻击者一样对待它，当你首次遇到真实攻击时，你会更好地准备。
- en: Write unit tests that make assertions about who can access certain resources
    and, more importantly, who *shouldn’t* be able to access them. Get in the habit
    of writing new unit tests describing access control rules as you add features
    to your site. This is especially important if your site has administrative interfaces,
    since they’re a common backdoor that attackers exploit when hacking websites.
    [Listing 11-3](ch11.xhtml#ch11list3) shows a simple unit test in Ruby that asserts
    that users must be logged in before performing a sensitive action.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试，声明谁可以访问特定资源，更重要的是，谁*不应该*能够访问这些资源。养成在向站点添加新功能时编写描述访问控制规则的单元测试的习惯。如果你的站点有管理界面，这一点尤其重要，因为它们是攻击者在黑客攻击网站时常利用的后门。[示例
    11-3](ch11.xhtml#ch11list3)展示了一个简单的 Ruby 单元测试，声明用户必须登录才能执行敏感操作。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 11-3: A Ruby unit test that checks if an unauthorized user is redirected
    to the login page if they attempt to publish a post*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 11-3：一个 Ruby 单元测试，检查未授权用户在尝试发布帖子时是否会被重定向到登录页面*'
- en: Finally, if you have the time and budget, consider employing an external team
    to perform penetration testing. The team can probe for missing or erroneous access
    control rules that an attacker can abuse.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你有时间和预算，考虑聘请一个外部团队进行渗透测试。该团队可以探测是否存在缺失或错误的访问控制规则，攻击者可能会利用这些漏洞。
- en: '***Adding Audit Trails***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加审计轨迹***'
- en: 'Because your code will be identifying users and testing their authorization
    levels as they access resources, you should add audit trails to help with troubleshooting
    and forensic analysis. *Audit trails* are log files or database entries that are
    recorded whenever a user performs an action. Simply adding logging statements
    as users navigate your site (`14:32:06 2019-02-05: User [example@gmail.com](mailto:example@gmail.com)
    logged in`) can help you diagnose any problems as they occur at runtime, and provide
    vital evidence in the event that you do get hacked.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '因为你的代码将在用户访问资源时识别用户并测试他们的授权级别，所以你应该添加审计轨迹以帮助故障排除和取证分析。*审计轨迹* 是在用户执行操作时记录的日志文件或数据库条目。简单地在用户浏览你的网站时添加日志语句（例如：`14:32:06
    2019-02-05: 用户 [example@gmail.com](mailto:example@gmail.com) 登录`）可以帮助你诊断运行时发生的问题，并在遭受攻击时提供关键证据。'
- en: '***Avoiding Common Oversights***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***避免常见疏忽***'
- en: A common oversight you see on many websites is that that they omit access control
    for resources that aren’t designed to be discoverable. It’s easy to assume that
    pages on your site that aren’t linked to from elsewhere will be hidden from hackers,
    because those pages won’t be highlighted as hackers crawl your site. This isn’t
    true.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你在许多网站上看到的一个常见疏忽是，网站没有对不打算被发现的资源进行访问控制。人们容易认为你网站上没有被其他地方链接到的页面会对黑客隐藏，因为这些页面在黑客爬取你的网站时不会被突出显示。但事实并非如此。
- en: Hacking tools can quickly enumerate private URLs that feature opaque IDs, like
    *http://example.com/item?id=423242*, and it’s even easier to access private URLs
    with a guessable structure like *http://example.com/profiles/user/bob*. Relying
    on an attacker being unable to guess a URL is called *security through obscurity*
    and is considered a risk.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客工具可以快速枚举具有不透明 ID 的私人 URL，例如 *http://example.com/item?id=423242*，而且更容易访问结构可以猜测的私人
    URL，例如 *http://example.com/profiles/user/bob*。依赖攻击者无法猜测 URL 的方式被称为 *安全通过模糊*，这种方式被视为一种风险。
- en: Securing sensitive resources is particularly important for sites designed to
    *embargo* resources, making them accessible at a certain point in time. Financial
    reporting sites often operate under this constraint. Publicly traded companies
    are required to make quarterly or semiannual financial reports available to all
    investors simultaneously, from previously agreed-upon reporting channels.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 保护敏感资源对于那些设计为 *禁止* 资源的站点尤其重要，这些资源必须在特定时间点才可访问。财务报告网站通常在这种限制下运作。上市公司必须在事先约定的报告渠道内，向所有投资者同时发布季度或半年财务报告。
- en: Some websites upload these reports early (say, to URLs with the form */reports/<company-name>/<month-year>*),
    and cheating investors have been known to check these URLs ahead of time in order
    to access reports before the rest of the market. Financial watchdogs have charged
    companies large fines for improper disclosure due to broken access logic! Make
    sure your access control rules account for any timing requirements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站会提前上传这些报告（例如，上传到格式为 */reports/<company-name>/<month-year>* 的 URL），有些欺诈性投资者已经知道会提前查看这些
    URL，以便在市场其他人查看之前就能访问到报告。金融监管机构曾因访问逻辑错误而对公司处以巨额罚款！确保你的访问控制规则考虑到任何时间要求。
- en: Every sensitive resource on your site requires access control. If your site
    allows users to download files, hackers may try to access files that they should
    not be permitted to download, using a hacking method called directory traversal.
    Let’s see how.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 网站上的每个敏感资源都需要访问控制。如果你的网站允许用户下载文件，黑客可能会尝试访问他们不应被允许下载的文件，使用一种被称为目录遍历的黑客方法。让我们来看一下如何操作。
- en: '**Directory Traversal**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**目录遍历**'
- en: If any of your website’s URLs contain parameters describing paths to files,
    attackers can use directory traversal to bypass your access control rules. In
    a *directory traversal* attack, an attacker manipulates the URL parameters in
    order to access sensitive files that you never intended to be accessible. Directory
    traversal attacks usually involve replacing a URL parameter with a relative filepath
    that uses the *../* syntax to “climb out” of the hosting directory. Let’s break
    down how this works.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网站的 URL 中包含描述文件路径的参数，攻击者可能会利用目录遍历绕过你的访问控制规则。在*目录遍历*攻击中，攻击者操控 URL 参数，以访问你本不希望被访问的敏感文件。目录遍历攻击通常涉及将
    URL 参数替换为相对文件路径，该路径使用*../*语法“爬出”当前目录。让我们分解一下这一过程是如何运作的。
- en: '***Filepaths and Relative Filepaths***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文件路径和相对文件路径***'
- en: In most filesystems, the location of each file can be described by a *filepath*.
    For instance, the filepath */tmp/logs/web.log* on Linux describes the location
    of the file *web.log* by enumerating the *directories* (in this case, the *logs*
    directory within the top-level *tmp* directory) that contain the file, joined
    by a *path separator* character (*/*).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数文件系统中，每个文件的位置可以通过*文件路径*来描述。例如，在 Linux 上，文件路径*/tmp/logs/web.log*通过列举包含文件的*目录*（在此案例中，是顶级*tmp*目录中的*logs*目录），并由*路径分隔符*字符（*/*）连接。
- en: A *relative filepath* is a filepath that begins with the period (.) character,
    denoting it as being in the current directory; the relative path *./web.log* describes
    the location of the file *web.log* as being in the current directory. What’s considered
    the “current” directory depends on the context under which the path is being evaluated.
    From a command line prompt, for instance, the current directory is the one the
    user most recently navigated to.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*相对文件路径*是一个以点（.）字符开头的文件路径，表示它位于当前目录；相对路径*./web.log*表示文件*web.log*位于当前目录。什么被视为“当前”目录取决于路径评估的上下文。例如，在命令行提示符下，当前目录是用户最近导航到的目录。'
- en: 'Relative paths also use the *..* syntax to reference the containing or *parent*
    directory. Using the *..* syntax twice would reference the parent directory of
    the parent directory of the current directory. For instance, the filesystem interprets
    the path *../../etc/passwd* as a request to go up two directories, find a directory
    called *etc*, and then return the *passwd* file within that directory. Using a
    relative path is similar to describing a relative: your uncle is your grandparent’s
    son, so to find him, go back two generations in your family tree and then look
    for a male child.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 相对路径同样使用*..*语法来引用包含当前目录的*父*目录。使用*..*语法两次，表示引用当前目录的父目录的父目录。例如，文件系统将路径*../../etc/passwd*解释为要求向上移动两个目录，找到一个名为*etc*的目录，然后返回该目录中的*passwd*文件。使用相对路径类似于描述亲戚：你的叔叔是你祖父母的儿子，因此要找到他，就得在你的家谱中回溯两代，然后寻找一位男性后代。
- en: If your server-side code allows an attacker to pass and evaluate relative filepaths
    in place of filenames, they can probe your filesystem for interesting-looking
    files, breaking access control. The relative path syntax lets the attacker read
    files outside the web server’s home directory, letting them probe for directories
    that commonly hold password or configuration information and read the data contained
    within them. Let’s look at an example of such an attack.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的服务器端代码允许攻击者传递并评估相对文件路径来替代文件名，他们可以探查你的文件系统，寻找看起来有趣的文件，从而破坏访问控制。相对路径语法让攻击者可以读取网页服务器主目录之外的文件，进而探查常存储密码或配置文件的目录，并读取其中的数据。让我们来看一个这样的攻击示例。
- en: '***Anatomy of a Directory Traversal Attack***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***目录遍历攻击的结构***'
- en: Imagine you have a website that hosts restaurant menus stored as PDFs on your
    server’s filesystem. Your site invites users to download each PDF by clicking
    a link that references a filename, as shown in [Figure 11-1](ch11.xhtml#ch11fig1).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个网站，托管着存储在服务器文件系统中的餐厅菜单 PDF 文件。你的站点邀请用户通过点击一个引用文件名的链接来下载每个 PDF，如[图 11-1](ch11.xhtml#ch11fig1)所示。
- en: '![image](Images/11fig01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/11fig01.jpg)'
- en: '*Figure 11-1: A website that allows files to be downloaded*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-1：一个允许下载文件的网站*'
- en: If the filename parameter isn’t securely interpreted, an attacker can swap in
    a relative path in place of the menu filename in the URL, and get access to user
    account information on your server, as shown in [Figure 11-2](ch11.xhtml#ch11fig2).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件名参数没有被安全地解释，攻击者可以在URL中用相对路径替代菜单文件名，从而访问服务器上的用户账户信息，如[图11-2](ch11.xhtml#ch11fig2)所示。
- en: '![image](Images/11fig02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/11fig02.jpg)'
- en: '*Figure 11-2: Using a directory traversal attack to access a Unix file holding
    account information*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11-2：使用目录遍历攻击访问包含账户信息的Unix文件*'
- en: In this instance, the hacker has replaced the name of the menu in the `menu`
    parameter with a relative path (*../../../../etc/passwd*) in order to download
    a sensitive file. Reading the *passwd* file tells the attacker which user accounts
    exist on the underlying Linux operating system, revealing sensitive system information
    that will help the attacker hack the server. You certainly don’t want an attacker
    to be able to read this kind of information! Let’s look at ways to defuse directory
    traversal.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，黑客将`menu`参数中的菜单名称替换为相对路径（*../../../../etc/passwd*），以便下载一个敏感文件。读取*passwd*文件会告诉攻击者在底层Linux操作系统中存在哪些用户账户，揭示出敏感的系统信息，帮助攻击者入侵服务器。你当然不希望攻击者能够读取这种信息！让我们来看看如何化解目录遍历攻击。
- en: '***Mitigation 1: Trust Your Web Server***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缓解措施 1：信任你的Web服务器***'
- en: To protect yourself against directory traversal attacks, first familiarize yourself
    with how your web server resolves static content URLs. Almost all websites will
    transform URLs into filepaths in some fashion—often when the server answers requests
    for static content such as JavaScript files, images, or stylesheets. If you find
    yourself serving more-exotic types of static files (for example, restaurant menus),
    try to use the web server’s built-in URL resolution logic rather than writing
    your own. Your web server’s URL static hosting capabilities are generally battle-tested
    and secured against directory traversal attacks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护自己免受目录遍历攻击，首先要了解你的Web服务器如何解析静态内容URL。几乎所有网站都会以某种方式将URL转换为文件路径——通常在服务器响应静态内容请求时，如JavaScript文件、图片或样式表。如果你发现自己需要提供一些更为特殊类型的静态文件（例如，餐厅菜单），尝试使用Web服务器的内建URL解析逻辑，而不是自己编写。你的Web服务器的静态托管功能通常已经经过严格测试，并能有效防范目录遍历攻击。
- en: '***Mitigation 2: Use a Hosting Service***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缓解措施 2：使用托管服务***'
- en: If you serve files that aren’t part of your codebase, perhaps because users
    or site administrators upload them, you should strongly consider hosting them
    in a content delivery network, in cloud storage, or in a content management system.
    These software types not only mitigate file upload vulnerabilities, as discussed
    in [Chapter 6](ch06.xhtml#ch06), but also defuse directory traversal attacks by
    allowing you to refer to files either by secure URLs or opaque file identifiers.
    Of these alternatives, CDNs typically allow for less fine-grained permissions
    (say, if certain files need to be available to only certain users) but are also
    typically easiest to integrate with.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供的文件不是你代码库的一部分，可能是因为用户或网站管理员上传了它们，你应该强烈考虑将这些文件托管在内容分发网络、云存储或内容管理系统中。这些软件类型不仅可以缓解文件上传漏洞，如[第6章](ch06.xhtml#ch06)所讨论的那样，还能通过允许你使用安全的URL或不透明的文件标识符来引用文件，从而化解目录遍历攻击。在这些替代方案中，CDN通常允许的权限较粗粒度（例如，如果某些文件只需对特定用户可用），但通常也是最容易集成的。
- en: '***Mitigation 3: Use Indirect File References***'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缓解措施 3：使用间接文件引用***'
- en: 'If you write your own code to serve files from a local disk, the most secure
    way of defusing directory traversal attacks is via *indirection*: you assign each
    file an *opaque ID* that corresponds to a filepath, and then have all URLs reference
    each file by that ID. This requires you to keep some sort of registry that pairs
    each file ID to a path, say, within a database.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写自己的代码从本地磁盘提供文件，那么化解目录遍历攻击最安全的方法是通过*间接性*：你为每个文件分配一个*不透明ID*，该ID对应一个文件路径，然后让所有URL通过该ID引用每个文件。这需要你保持某种注册表，将每个文件ID与路径配对，比如保存在数据库中。
- en: '***Mitigation 4: Sanitize File References***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缓解措施 4：清理文件引用***'
- en: 'Finally, if you do end up using direct file references in your URLs—perhaps
    because you inherit a legacy codebase and lack the time or resources necessary
    to refactor the way files are stored—you need to secure your site code to ensure
    that arbitrary paths can’t be passed in place of filenames. The most secure approach
    is simply banning any file reference that includes path separator characters,
    including *encoded* separator characters. (Note that Windows- and Unix-based operating
    systems use different path separators: *\* and */*, respectively.)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您确实在 URL 中使用直接的文件引用——也许是因为您继承了遗留代码库，且没有足够的时间或资源来重构文件存储方式——那么您需要确保对站点代码进行安全处理，以确保无法传递任意路径来替代文件名。最安全的方法是简单地禁止任何包含路径分隔符字符的文件引用，包括*编码过的*分隔符字符。（请注意，基于
    Windows 和 Unix 的操作系统使用不同的路径分隔符：分别是 *\* 和 */*。）
- en: 'Another approach is to validate filenames against a *regular expression (regex)*
    to filter out anything that looks like path syntax. All modern web programming
    languages contain some sort of regex implementation, so it’s easy to test an incoming
    filename parameter against a “safe” expression. Be careful with this technique,
    though: hackers continuously research new and obscure ways to encode pathnames,
    because directory traversal attacks are so common. If possible, try to use a third-party
    library to sanitize filenames. [Listing 11-4](ch11.xhtml#ch11list4) shows some
    logic in the Ruby Sinatra gem that sanitizes path parameters.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用*正则表达式（regex）*验证文件名，以过滤掉任何看起来像路径语法的内容。所有现代 Web 编程语言都包含某种类型的正则表达式实现，因此可以轻松地将传入的文件名参数与“安全”的表达式进行匹配。但要小心这种技术：黑客不断研究新的、晦涩的路径编码方式，因为目录遍历攻击非常普遍。如果可能，尝试使用第三方库来清理文件名。[清单
    11-4](ch11.xhtml#ch11list4) 展示了 Ruby Sinatra gem 中清理路径参数的逻辑。
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 11-4: Logic for sanitizing path parameters in the Sinatra Ruby gem*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 11-4：在 Sinatra Ruby gem 中清理路径参数的逻辑*'
- en: First the code standardizes any obscure character encodings it identifies ❶.
    Then it splits the path into separate components ❷. Finally, it reconstitutes
    the path by using a standard separator ❸, ensuring that the leading character
    is a slash.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，代码标准化它识别出的任何模糊字符编码 ❶。然后，它将路径拆分为单独的组件 ❷。最后，它使用标准分隔符 ❸ 重新构建路径，确保开头字符为斜杠。
- en: The complexity illustrated in [Listing 11-4](ch11.xhtml#ch11list4) is necessary
    because relative paths can be encoded in various ways during a directory traversal
    attack. [Listing 11-5](ch11.xhtml#ch11list5) shows eight ways the parent directory
    syntax can be encoded on different operating systems.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 11-4](ch11.xhtml#ch11list4) 中所示的复杂性是必要的，因为在目录遍历攻击中，相对路径可以以多种方式进行编码。[清单
    11-5](ch11.xhtml#ch11list5) 展示了在不同操作系统上，父目录语法的八种编码方式。'
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 11-5: Relative paths can be encoded in many ways for different operating
    systems. Gulp.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 11-5：相对路径在不同操作系统中可以通过多种方式进行编码。Gulp。*'
- en: '**Summary**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Users on your website will usually have different levels of permissions, so
    you need to implement access control rules that are evaluated when a user attempts
    to access a resource. Access control rules need to be clearly documented, comprehensively
    implemented, and aggressively tested. Development timelines should include sufficient
    padding to allow the team to evaluate the security implications of all new code
    changes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您网站的用户通常会有不同的权限级别，因此需要实现访问控制规则，在用户尝试访问资源时进行评估。访问控制规则需要清晰记录、全面实现，并进行严格测试。开发时间表应包括足够的缓冲时间，以便团队评估所有新代码更改的安全影响。
- en: Static resources that are referred to by filename are vulnerable to directory
    traversal attacks, a common method of overcoming access control rules. Directory
    traversal attacks can be thwarted by using your web server’s existing method of
    serving static files, serving static files from a secure third-party system, or
    referencing static files via indirection. If you’re forced to use filenames, make
    sure to sanitize any HTTP parameters that are used to construct filepaths.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过文件名引用的静态资源容易受到目录遍历攻击，这是克服访问控制规则的一种常见方法。可以通过使用您的 Web 服务器现有的静态文件提供方法，或从安全的第三方系统提供静态文件，或者通过间接方式引用静态文件来防止目录遍历攻击。如果您必须使用文件名，请确保清理用于构建文件路径的任何
    HTTP 参数。
- en: In the next chapter, you’ll look at some ways your website may be advertising
    the technology stack you are using, which will give hackers an idea of how to
    attack it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解一些可能暴露您网站使用的技术栈的方法，这会给黑客提供攻击的思路。
