- en: Chapter 54. POSIX Shared Memory
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第54章. POSIX 共享内存
- en: 'In previous chapters, we looked at two techniques that allow unrelated processes
    to share memory regions in order to perform IPC: System V shared memory ([Chapter 48](ch48.html
    "Chapter 48. System V Shared Memory")) and shared file mappings ([Shared File
    Mappings](ch49.html#shared_file_mappings "Shared File Mappings")). Both of these
    techniques have potential drawbacks:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了两种允许不相关进程共享内存区域以进行进程间通信（IPC）的方法：System V 共享内存（[第48章](ch48.html
    "第48章. System V 共享内存")）和共享文件映射（[共享文件映射](ch49.html#shared_file_mappings "共享文件映射")）。这两种方法都有潜在的缺点：
- en: The System V shared memory model, which uses keys and identifiers, is not consistent
    with the standard UNIX I/O model, which uses filenames and descriptors. This difference
    means that we require an entirely new set of system calls and commands for working
    with System V shared memory segments.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System V 共享内存模型使用键值和标识符，这与标准 UNIX I/O 模型使用文件名和描述符不同。这种差异意味着我们需要一整套新的系统调用和命令来处理
    System V 共享内存段。
- en: Using a shared file mapping for IPC requires the creation of a disk file, even
    if we are not interested in having a persistent backing store for the shared region.
    Aside from the inconvenience of needing to create the file, this technique incurs
    some file I/O overhead.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用共享文件映射进行 IPC 需要创建一个磁盘文件，即使我们不打算为共享区域提供持久的存储支持。除了需要创建文件的不便外，这种方法还会带来一定的文件 I/O
    开销。
- en: 'Because of these drawbacks, POSIX.1b defined a new shared memory API: POSIX
    shared memory, which is the subject of this chapter.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些缺点，POSIX.1b 定义了一个新的共享内存 API：POSIX 共享内存，这也是本章的主题。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: POSIX talks about shared memory *objects*, while System V talks about shared
    memory *segments*. These differences in terminology are historical—both terms
    are used for referring to regions of memory shared between processes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX 讨论共享内存 *对象*，而 System V 讨论共享内存 *段*。这些术语的差异是历史性的——这两个术语都用来指代进程间共享的内存区域。
- en: Overview
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: POSIX shared memory allows to us to share a mapped region between unrelated
    processes without needing to create a corresponding mapped file. POSIX shared
    memory is supported on Linux since kernel 2.4.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX 共享内存允许我们在不需要创建相应映射文件的情况下，在不相关的进程之间共享映射区域。POSIX 共享内存在 Linux 2.4 内核及以后版本得到支持。
- en: 'SUSv3 doesn’t specify any of the details of how POSIX shared memory is to be
    implemented. In particular, there is no requirement for the use of a (real or
    virtual) file system to identify shared memory objects, although many UNIX implementations
    do employ a file system for this purpose. Some UNIX implementations create the
    names for shared memory objects as files in a special location in the standard
    file system. Linux uses a dedicated *tmpfs* file system ([A Virtual Memory File
    System: *tmpfs*](ch14.html#a_virtual_memory_file_system_colon_tmpfs "A Virtual
    Memory File System: tmpfs")) mounted under the directory `/dev/shm`. This file
    system has kernel persistence--the shared memory objects that it contains will
    persist even if no process currently has them open, but they will be lost if the
    system is shut down.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 并未指定如何实现 POSIX 共享内存的具体细节。特别是，并没有要求使用（真实或虚拟的）文件系统来标识共享内存对象，尽管许多 UNIX 实现确实为此目的使用了文件系统。一些
    UNIX 实现将共享内存对象的名称创建为标准文件系统中特殊位置的文件。Linux 使用专门的 *tmpfs* 文件系统（[虚拟内存文件系统：*tmpfs*](ch14.html#a_virtual_memory_file_system_colon_tmpfs
    "虚拟内存文件系统：tmpfs")），该文件系统挂载在目录 `/dev/shm` 下。该文件系统具有内核持久性——其中包含的共享内存对象即使没有进程当前打开，也会保持存在，但如果系统关机，它们会丢失。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The total amount of memory in all POSIX shared memory regions on the system
    is limited by the size of the underlying *tmpfs* file system. This file system
    is typically mounted at boot time with some default size (e.g., 256 MB). If necessary,
    the superuser can change the size of the file system by remounting it using the
    command *mount -o remount,size=<num-bytes>*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上所有 POSIX 共享内存区域的总内存量受到底层 *tmpfs* 文件系统大小的限制。这个文件系统通常在启动时以某个默认大小（例如，256 MB）挂载。如果需要，超级用户可以通过使用命令
    *mount -o remount,size=<num-bytes>* 重新挂载文件系统来更改其大小。
- en: 'To use a POSIX shared memory object, we perform two steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 POSIX 共享内存对象，我们需要执行两个步骤：
- en: Use the *shm_open()* function to open an object with a specified name. (We described
    the rules governing the naming of POSIX shared memory objects in Section 51.1.)
    The *shm_open()* function is analogous to the *open()* system call. It either
    creates a new shared memory object or opens an existing object. As its function
    result, *shm_open()* returns a file descriptor referring to the object.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*shm_open()*函数以指定名称打开一个对象。（我们在第51.1节中描述了POSIX共享内存对象命名的规则。）*shm_open()*函数类似于*open()*系统调用。它可以创建一个新的共享内存对象，或者打开一个现有的对象。作为其函数结果，*shm_open()*返回一个文件描述符，指向该对象。
- en: Pass the file descriptor obtained in the previous step in a call to *mmap()*
    that specifies `MAP_SHARED` in the *flags* argument. This maps the shared memory
    object into the process’s virtual address space. As with other uses of *mmap()*,
    once we have mapped the object, we can close the file descriptor without affecting
    the mapping. However, we may need to keep the file descriptor open for subsequent
    use in calls to *fstat()* and *ftruncate()* (see [Creating Shared Memory Objects](ch54.html#creating_shared_memory_objects
    "Creating Shared Memory Objects")).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将在前一步中获得的文件描述符传递给调用*mmap()*，并在*flags*参数中指定`MAP_SHARED`。这会将共享内存对象映射到进程的虚拟地址空间。与其他使用*mmap()*的情况一样，一旦我们映射了该对象，就可以关闭文件描述符而不影响映射。然而，我们可能需要保持文件描述符打开，以便在后续调用*fstat()*和*ftruncate()*时使用（参见[创建共享内存对象](ch54.html#creating_shared_memory_objects
    "创建共享内存对象")）。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The relationship between *shm_open()* and *mmap()* for POSIX shared memory is
    analogous to that between *shmget()* and *shmat()* for System V shared memory.
    The origin of the two-step process (*shm_open()* plus *mmap()*) for using POSIX
    shared memory objects instead of the use of a single function that performs both
    tasks is historical. When the POSIX committee added this feature, the *mmap()*
    call already existed ([Stevens, 1999]). In effect, all that we are doing is replacing
    calls to *open()* with calls to *shm_open()*, with the difference that using *shm_open()*
    doesn’t require the creation of a file in a disk-based file system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于POSIX共享内存，*shm_open()*与*mmap()*的关系类似于System V共享内存中*shmget()*与*shmat()*的关系。使用POSIX共享内存对象的两步过程（*shm_open()*加*mmap()*）的起源是历史性的。当POSIX委员会添加这一功能时，*mmap()*调用已经存在（[Stevens,
    1999]）。实际上，我们所做的只是用*shm_open()*替换对*open()*的调用，不同之处在于使用*shm_open()*不需要在基于磁盘的文件系统中创建文件。
- en: Since a shared memory object is referred to using a file descriptor, we can
    usefully employ various file descriptor system calls already defined in the UNIX
    system (e.g., *ftruncate()*), rather than needing new special-purpose system calls
    (as is required for System V shared memory).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于共享内存对象是通过文件描述符引用的，我们可以有效地利用UNIX系统中已经定义的各种文件描述符系统调用（例如，*ftruncate()*），而无需新的专用系统调用（这对于System
    V共享内存是必需的）。
- en: Creating Shared Memory Objects
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建共享内存对象
- en: The *shm_open()* function creates and opens a new shared memory object or opens
    an existing object. The arguments to *shm_open()* are analogous to those for *open()*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*shm_open()*函数创建并打开一个新的共享内存对象，或者打开一个现有的对象。*shm_open()*的参数类似于*open()*的参数。'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns file descriptor on success, or -1 on error
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回文件描述符，出错时返回-1
- en: The *name* argument identifies the shared memory object to be created or opened.
    The *oflag* argument is a mask of bits that modify the behavior of the call. The
    values that can be included in this mask are summarized in [Table 54-1](ch54.html#bit_values_for_the_shm_underscore_open_o
    "Table 54-1. Bit values for the shm_open() oflag argument").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*name*参数标识要创建或打开的共享内存对象。*oflag*参数是一个位掩码，用于修改调用的行为。可以包括在此掩码中的值总结在[表54-1](ch54.html#bit_values_for_the_shm_underscore_open_o
    "表 54-1. shm_open() oflag 参数的位值")中。'
- en: Table 54-1. Bit values for the *shm_open() oflag* argument
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 表 54-1. *shm_open()* oflag参数的位值
- en: '| Flag | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 描述 |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `O_CREAT` | Create object if it doesn’t already exist |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `O_CREAT` | 如果对象尚不存在，则创建对象 |'
- en: '| `O_EXCL` | With `O_CREAT`, create object exclusively |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `O_EXCL` | 与`O_CREAT`一起使用，独占创建对象 |'
- en: '| `O_RDONLY` | Open for read-only access |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `O_RDONLY` | 以只读方式打开 |'
- en: '| `O_RDWR` | Open for read-write access |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `O_RDWR` | 以读写方式打开 |'
- en: '| `O_TRUNC` | Truncate object to zero length |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `O_TRUNC` | 将对象截断为零长度 |'
- en: One of the purposes of the *oflag* argument is to determine whether we are opening
    an existing shared memory object or creating and opening a new object. If *oflag*
    doesn’t include `O_CREAT`, we are opening an existing object. If O_CREAT is specified,
    then the object is created if it doesn’t already exist. Specifying `O_EXCL` in
    conjunction with `O_CREAT` is a request to ensure that the caller is the creator
    of the object; if the object already exists, an error results (`EEXIST`).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*oflag* 参数的一个目的，是确定我们是打开一个已存在的共享内存对象，还是创建并打开一个新对象。如果 *oflag* 不包含 `O_CREAT`，则我们是在打开一个现有的对象。如果指定了
    `O_CREAT`，则如果对象不存在，则会创建该对象。将 `O_EXCL` 与 `O_CREAT` 一起指定，表示请求确保调用者是该对象的创建者；如果对象已经存在，将会发生错误（`EEXIST`）。'
- en: The *oflag* argument also indicates the kind of access that the calling process
    will make to the shared memory object, by specifying exactly one of the values
    `O_RDONLY` or `O_RDWR`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*oflag* 参数还通过指定 `O_RDONLY` 或 `O_RDWR` 中的一个值，指示调用进程将如何访问共享内存对象。'
- en: The remaining flag value, `O_TRUNC`, causes a successful open of an existing
    shared memory object to truncate the object to a length of zero.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的标志值 `O_TRUNC` 会使成功打开一个现有的共享内存对象时，将该对象的长度截断为零。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Linux, truncation occurs even on a read-only open. However, SUSv3 says that
    results of using `O_TRUNC` with a read-only open is undefined, so we can’t portably
    rely on a specific behavior in this case.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，即使是只读打开，截断操作也会发生。然而，SUSv3 指出，在只读打开时使用 `O_TRUNC` 的结果是未定义的，因此我们无法在此情况下依赖特定的行为。
- en: 'When a new shared memory object is created, its ownership and group ownership
    are taken from the effective user and group IDs of the process calling *shm_open()*,
    and the object permissions are set according to the value supplied in the *mode*
    bit-mask argument. The bit values for *mode* are the same as for files ([Table 15-4](ch15.html#constants_for_file_permission_bits
    "Table 15-4. Constants for file permission bits"), in [Permissions on Regular
    Files](ch15.html#permissions_on_regular_files "Permissions on Regular Files")).
    As with the *open()* system call, the permissions mask in *mode* is masked against
    the process umask ([The Process File Mode Creation Mask: *umask()*](ch15.html#the_process_file_mode_creation_mask_colo
    "The Process File Mode Creation Mask: umask()")). Unlike *open()*, the *mode*
    argument is always required for a call to *shm_open()*; if we are not creating
    a new object, this argument should be specified as 0.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的共享内存对象时，它的所有权和组所有权来自调用 *shm_open()* 的进程的有效用户和组ID，并且对象的权限根据 *mode* 位掩码参数中提供的值来设置。*mode*
    的位值与文件的位值相同（[表 15-4](ch15.html#constants_for_file_permission_bits "表 15-4. 文件权限位常量")，在[常规文件权限](ch15.html#permissions_on_regular_files
    "常规文件权限")中）。与 *open()* 系统调用一样，*mode* 中的权限掩码会根据进程的 umask 进行屏蔽（[进程文件模式创建掩码：*umask()*](ch15.html#the_process_file_mode_creation_mask_colo
    "进程文件模式创建掩码：umask()")）。与 *open()* 不同，调用 *shm_open()* 时始终需要 *mode* 参数；如果我们不是创建新对象，则该参数应指定为
    0。
- en: The close-on-exec flag (`FD_CLOEXEC`, [File Descriptors and *exec()*](ch27.html#file_descriptors_and_exec_open_parenthes
    "File Descriptors and exec()")) is set on the file descriptor returned by *shm_open()*,
    so that the file descriptor is automatically closed if the process performs an
    *exec()*. (This is consistent with the fact that mappings are unmapped when an
    *exec()* is performed.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭时执行标志（`FD_CLOEXEC`，[文件描述符和 *exec()*](ch27.html#file_descriptors_and_exec_open_parenthes
    "文件描述符和 exec()")）会在 *shm_open()* 返回的文件描述符上设置，因此当进程执行 *exec()* 时，文件描述符会被自动关闭。（这与映射在执行
    *exec()* 时被解除映射是一致的。）
- en: 'When a new shared memory object is created, it initially has zero length. This
    means that, after creating a new shared memory object, we normally call *ftruncate()*
    ([Truncating a File: *truncate()* and *ftruncate()*](ch05.html#truncating_a_file_colon_truncate_open_pa
    "Truncating a File: truncate() and ftruncate()")) to set the size of the object
    before calling *mmap()*. Following the *mmap()* call, we may also use *ftruncate()*
    to expand or shrink the shared memory object as desired, bearing in mind the points
    discussed in [Boundary Cases](ch49.html#boundary_cases "Boundary Cases").'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的共享内存对象时，它最初的长度为零。这意味着，在创建新的共享内存对象后，我们通常会调用 *ftruncate()* （[截断文件：*truncate()*
    和 *ftruncate()*](ch05.html#truncating_a_file_colon_truncate_open_pa "截断文件：truncate()
    和 ftruncate()")）来设置对象的大小，然后再调用 *mmap()*。在调用 *mmap()* 后，我们还可以使用 *ftruncate()* 来扩展或缩小共享内存对象，具体操作需要参考[边界情况](ch49.html#boundary_cases
    "边界情况")中讨论的内容。
- en: When a shared memory object is extended, the newly added bytes are automatically
    initialized to 0.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当共享内存对象被扩展时，新增加的字节会自动初始化为0。
- en: 'At any point, we can apply *fstat()* ([Retrieving File Information: *stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "Retrieving File Information: stat()")) to the file descriptor returned by *shm_open()*
    in order to obtain a *stat* structure whose fields contain information about the
    shared memory object, including its size *(st_size)*, permissions *(st_mode)*,
    owner *(st_uid)*, and group *(st_gid)*. (These are the only fields that SUSv3
    requires *fstat()* to set in the *stat* structure, although Linux also returns
    meaningful information in the time fields, as well as various other less useful
    information in the remaining fields.)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，我们都可以对由*shm_open()*返回的文件描述符应用*fstat()*（[检索文件信息：*stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "检索文件信息：stat()")），以获取一个*stat*结构，其中的字段包含共享内存对象的信息，包括其大小*(st_size)*、权限*(st_mode)*、所有者*(st_uid)*和组*(st_gid)*。（这些是SUSv3要求*fstat()*在*stat*结构中设置的唯一字段，尽管Linux还会在时间字段中返回有意义的信息，以及在其余字段中返回一些其他不太有用的信息。）
- en: The permissions and ownership of a shared memory object can be changed using
    *fchmod()* and *fchown()*, respectively.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以分别使用*fchmod()*和*fchown()*来更改共享内存对象的权限和所有权。
- en: Example program
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 54-1](ch54.html#creating_a_posix_shared_memory_object "Example 54-1. Creating
    a POSIX shared memory object") provides a simple example of the use of *shm_open()*,
    *ftruncate()*, and *mmap()*. This program creates a shared memory object whose
    size is specified by a command-line argument, and maps the object into the process’s
    virtual address space. (The mapping step is redundant, since we don’t actually
    do anything with the shared memory, but it serves to demonstrate the use of *mmap()*.)
    The program permits the use of command-line options to select flags (`O_CREAT`
    and `O_EXCL`) for the *shm_open()* call.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 54-1](ch54.html#creating_a_posix_shared_memory_object "示例 54-1. 创建POSIX共享内存对象")提供了一个简单的示例，展示了如何使用*shm_open()*、*ftruncate()*和*mmap()*。该程序创建一个大小由命令行参数指定的共享内存对象，并将该对象映射到进程的虚拟地址空间中。（映射步骤是多余的，因为我们实际上并未对共享内存执行任何操作，但它有助于演示如何使用*mmap()*。）该程序允许使用命令行选项选择*shm_open()*调用的标志（`O_CREAT`和`O_EXCL`）。'
- en: 'In the following example, we use this program to create a 10,000-byte shared
    memory object, and then use *ls* to show this object in `/dev/shm`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用该程序创建一个10,000字节的共享内存对象，然后使用*ls*命令显示该对象在`/dev/shm`中的内容：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Example 54-1. Creating a POSIX shared memory object
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 54-1。创建POSIX共享内存对象
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using Shared Memory Objects
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用共享内存对象
- en: '[Example 54-2](ch54.html#copying_data_into_a_posix_shared_memory "Example 54-2. Copying
    data into a POSIX shared memory object") and [Example 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "Example 54-3. Copying data from a POSIX shared memory object") demonstrate the
    use of a shared memory object to transfer data from one process to another. The
    program in [Example 54-2](ch54.html#copying_data_into_a_posix_shared_memory "Example 54-2. Copying
    data into a POSIX shared memory object") copies the string contained in its second
    command-line argument into the existing shared memory object named in its first
    command-line argument. Before mapping the object and performing the copy, the
    program uses *ftruncate()* to resize the shared memory object to be the same length
    as the string that is to be copied.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 54-2](ch54.html#copying_data_into_a_posix_shared_memory "示例 54-2. 将数据复制到POSIX共享内存对象")和[示例 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "示例 54-3. 从POSIX共享内存对象复制数据")演示了如何使用共享内存对象将数据从一个进程传输到另一个进程。[示例 54-2](ch54.html#copying_data_into_a_posix_shared_memory
    "示例 54-2. 将数据复制到POSIX共享内存对象")中的程序将第二个命令行参数中包含的字符串复制到第一个命令行参数指定的现有共享内存对象中。在映射该对象并执行复制操作之前，程序使用*ftruncate()*将共享内存对象的大小调整为与要复制的字符串长度相同。'
- en: Example 54-2. Copying data into a POSIX shared memory object
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 54-2。将数据复制到POSIX共享内存对象
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The program in [Example 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "Example 54-3. Copying data from a POSIX shared memory object") displays the string
    in the existing shared memory object named in its command-line argument on standard
    output. After calling *shm_open()*, the program uses *fstat()* to determine the
    size of the shared memory and uses that size in the call to *mmap()* that maps
    the object and in the *write()* call that prints the string.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 54-3](ch54.html#copying_data_from_a_posix_shared_memory "示例 54-3. 从POSIX共享内存对象中复制数据")中的程序会在标准输出上显示其命令行参数中指定的现有共享内存对象中的字符串。在调用*shm_open()*之后，程序使用*fstat()*来确定共享内存的大小，并使用该大小在调用*mmap()*时映射对象，并在*write()*调用中打印字符串。'
- en: Example 54-3. Copying data from a POSIX shared memory object
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 54-3. 从POSIX共享内存对象中复制数据
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following shell session demonstrates the use of the programs in [Example 54-2](ch54.html#copying_data_into_a_posix_shared_memory
    "Example 54-2. Copying data into a POSIX shared memory object") and [Example 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "Example 54-3. Copying data from a POSIX shared memory object"). We first create
    a zero-length shared memory object using the program in [Example 54-1](ch54.html#creating_a_posix_shared_memory_object
    "Example 54-1. Creating a POSIX shared memory object").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 shell 会话演示了[示例 54-2](ch54.html#copying_data_into_a_posix_shared_memory "示例
    54-2. 将数据复制到POSIX共享内存对象")和[示例 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "示例 54-3. 从POSIX共享内存对象中复制数据")中的程序的使用。我们首先使用[示例 54-1](ch54.html#creating_a_posix_shared_memory_object
    "示例 54-1. 创建POSIX共享内存对象")中的程序创建一个零长度的共享内存对象。
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then use the program in [Example 54-2](ch54.html#copying_data_into_a_posix_shared_memory
    "Example 54-2. Copying data into a POSIX shared memory object") to copy a string
    into the shared memory object:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用[示例 54-2](ch54.html#copying_data_into_a_posix_shared_memory "示例 54-2.
    将数据复制到POSIX共享内存对象")中的程序将字符串复制到共享内存对象中：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the output, we can see that the program resized the shared memory object
    so that it is large enough to hold the specified string.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中我们可以看到，程序调整了共享内存对象的大小，使其足够大以容纳指定的字符串。
- en: 'Finally, we use the program in [Example 54-3](ch54.html#copying_data_from_a_posix_shared_memory
    "Example 54-3. Copying data from a POSIX shared memory object") to display the
    string in the shared memory object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用[示例 54-3](ch54.html#copying_data_from_a_posix_shared_memory "示例 54-3.
    从POSIX共享内存对象中复制数据")中的程序显示共享内存对象中的字符串：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Applications must typically use some synchronization technique to allow processes
    to coordinate their access to shared memory. In the example shell session shown
    here, the coordination was provided by the user running the programs one after
    the other. Typically, applications would instead use a synchronization primitive
    (e.g., semaphores) to coordinate access to a shared memory object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常需要使用某种同步技术来允许进程协调对共享内存的访问。在这里显示的示例 shell 会话中，协调是由用户一个接一个地运行程序提供的。通常，应用程序会使用同步原语（例如信号量）来协调对共享内存对象的访问。
- en: Removing Shared Memory Objects
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除共享内存对象
- en: SUSv3 requires that POSIX shared memory objects have at least kernel persistence;
    that is, they continue to exist until they are explicitly removed or the system
    is rebooted. When a shared memory object is no longer required, it should be removed
    using *shm_unlink()*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3要求POSIX共享内存对象至少具有内核持久性；也就是说，它们会一直存在，直到被显式删除或系统重启。当共享内存对象不再需要时，应使用*shm_unlink()*进行删除。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or -1 on error
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，出错时返回-1
- en: The *shm_unlink()* function removes the shared memory object specified by *name*.
    Removing a shared memory object doesn’t affect existing mappings of the object
    (which will remain in effect until the corresponding processes call *munmap()*
    or terminate), but prevents further *shm_open()* calls from opening the object.
    Once all processes have unmapped the object, the object is removed, and its contents
    are lost.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*shm_unlink()*函数移除由*name*指定的共享内存对象。删除共享内存对象不会影响对象的现有映射（映射会继续有效，直到相应的进程调用*munmap()*或终止），但会防止进一步的*shm_open()*调用打开该对象。一旦所有进程都取消映射该对象，该对象就会被删除，并且其内容会丢失。'
- en: The program in [Example 54-4](ch54.html#using_shm_underscore_unlink_open_parenth
    "Example 54-4. Using shm_unlink() to unlink a POSIX shared memory object") uses
    *shm_unlink()* to remove the shared memory object specified in the program’s command-line
    argument.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例54-4](ch54.html#using_shm_underscore_unlink_open_parenth "示例54-4. 使用shm_unlink()解除链接一个POSIX共享内存对象")中的程序使用*shm_unlink()*来移除程序命令行参数中指定的共享内存对象。'
- en: Example 54-4. Using *shm_unlink()* to unlink a POSIX shared memory object
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 54-4. 使用*shm_unlink()*解除链接一个POSIX共享内存对象
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Comparisons Between Shared Memory APIs
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享内存API之间的比较
- en: 'By now, we have considered a number of different techniques for sharing memory
    regions between unrelated processes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经考虑了多种不同的技术，用于在无关进程之间共享内存区域：
- en: System V shared memory ([Chapter 48](ch48.html "Chapter 48. System V Shared
    Memory"));
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System V共享内存（[第48章](ch48.html "第48章. System V共享内存")）；
- en: shared file mappings ([Shared File Mappings](ch49.html#shared_file_mappings
    "Shared File Mappings")); and
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享文件映射（[共享文件映射](ch49.html#shared_file_mappings "共享文件映射")）；以及
- en: POSIX shared memory objects (the subject of this chapter).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX共享内存对象（本章的主题）。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Many of the points that we make in this section are also relevant for shared
    anonymous mappings ([Anonymous Mappings](ch49.html#anonymous_mappings "Anonymous
    Mappings")), which are used for sharing memory between processes that are related
    via *fork()*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中提到的许多观点同样适用于共享匿名映射（[匿名映射](ch49.html#anonymous_mappings "匿名映射")），这些映射用于在通过*fork()*相关的进程之间共享内存。
- en: 'A number of points apply to all of these techniques:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多点适用于所有这些技术：
- en: They provide fast IPC, and applications typically must use a semaphore (or other
    synchronization primitive) to synchronize access to the shared region.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供快速的进程间通信（IPC），而且应用程序通常必须使用信号量（或其他同步原语）来同步对共享区域的访问。
- en: Once the shared memory region has been mapped into the process’s virtual address
    space, it looks just like any other part of the process’s memory space.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦共享内存区域被映射到进程的虚拟地址空间中，它就像进程内存空间中的任何其他部分一样。
- en: The system places the shared memory regions within the process virtual address
    space in a similar manner. We outlined this placement while describing System
    V shared memory in Section 48.5\. The Linux-specific `/proc/`*PID*`/maps` file
    lists information about all types of shared memory regions.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统以类似的方式将共享内存区域放置在进程的虚拟地址空间中。在第48.5节中描述System V共享内存时我们概述了这种放置方式。Linux特定的`/proc/`*PID*`/maps`文件列出了所有类型共享内存区域的信息。
- en: Assuming that we don’t attempt to map a shared memory region at a fixed address,
    we should ensure that all references to locations in the region are calculated
    as offsets (rather than pointers), since the region may be located at different
    virtual addresses within different processes ([Storing Pointers in Shared Memory](ch48.html#storing_pointers_in_shared_memory
    "Storing Pointers in Shared Memory")).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我们不尝试在固定地址映射共享内存区域，我们应该确保对该区域位置的所有引用都是以偏移量计算的（而不是指针），因为该区域可能在不同进程中位于不同的虚拟地址（[在共享内存中存储指针](ch48.html#storing_pointers_in_shared_memory
    "在共享内存中存储指针")）。
- en: The functions described in [Chapter 50](ch50.html "Chapter 50. Virtual Memory
    Operations") that operate on regions of virtual memory can be applied to shared
    memory regions created using any of these techniques.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第50章](ch50.html "第50章. 虚拟内存操作")中描述的对虚拟内存区域操作的函数可以应用于使用这些技术创建的共享内存区域。
- en: 'There are also a few notable differences between the techniques for shared
    memory:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些共享内存技术之间也有一些显著的区别：
- en: The fact that the contents of a shared file mapping are synchronized with the
    underlying mapped file means that the data stored in a shared memory region can
    persist across system restarts.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享文件映射的内容与底层映射文件同步，这意味着存储在共享内存区域中的数据可以在系统重启后持续存在。
- en: System V and POSIX shared memory use different mechanisms to identify and refer
    to a shared memory object. System V uses its own scheme of keys and identifiers,
    which doesn’t fit with the standard UNIX I/O model and requires separate system
    calls (e.g., *shmctl()*) and commands (*ipcs* and *ipcrm*). By contrast, POSIX
    shared memory employs names and file descriptors, and consequently shared memory
    objects can be examined and manipulated using a variety of existing UNIX system
    calls (e.g., *fstat()* and *fchmod()*).
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System V 和 POSIX 共享内存使用不同的机制来标识和引用共享内存对象。System V 使用自己的一套密钥和标识符，这与标准 UNIX I/O
    模型不兼容，并且需要单独的系统调用（例如 *shmctl()*）和命令（*ipcs* 和 *ipcrm*）。相比之下，POSIX 共享内存使用名称和文件描述符，因此可以使用多种现有的
    UNIX 系统调用（例如 *fstat()* 和 *fchmod()*）来检查和操作共享内存对象。
- en: The size of a System V shared memory segment is fixed at the time of creation
    (via *shmget()*). By contrast, for a mapping backed by a file or by a POSIX shared
    memory object, we can use *ftruncate()* to adjust the size of the underlying object,
    and then re-create the mapping using *munmap()* and *mmap()* (or the Linux-specific
    *mremap()*).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System V 共享内存段的大小在创建时是固定的（通过 *shmget()*）。相比之下，对于由文件或 POSIX 共享内存对象支持的映射，我们可以使用
    *ftruncate()* 来调整底层对象的大小，然后通过 *munmap()* 和 *mmap()*（或 Linux 特有的 *mremap()*）重新创建映射。
- en: Historically, System V shared memory was more widely available than *mmap()*
    and POSIX shared memory, although most UNIX implementations now provide all of
    these techniques.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史上，System V 共享内存比 *mmap()* 和 POSIX 共享内存更为广泛，但现在大多数 UNIX 实现都提供了所有这些技术。
- en: With the exception of the final point regarding portability, the differences
    listed above are advantages in favor of shared file mappings and POSIX shared
    memory objects. Thus, in new applications, one of these interfaces may be preferable
    to System V shared memory. Which one we choose depends on whether or not we require
    a persistent backing store. Shared file mappings provide such a store; POSIX shared
    memory objects allow us to avoid the overhead of using a disk file when a backing
    store is not required.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最后一个关于可移植性的点外，上述列出的差异是有利于共享文件映射和 POSIX 共享内存对象的优势。因此，在新的应用程序中，可能会选择这些接口而非 System
    V 共享内存。我们选择哪个，取决于是否需要持久化的后端存储。共享文件映射提供了这种存储；POSIX 共享内存对象则可以避免在不需要后端存储时使用磁盘文件的开销。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: A POSIX shared memory object is used to share a region of memory between unrelated
    processes without creating an underlying disk file. To do this, we replace the
    call to *open()* that normally precedes *mmap()* with a call to *shm_open()*.
    The *shm_open()* call creates a file in a memory-based file system, and we can
    employ traditional file descriptor system calls to perform various operations
    on this virtual file. In particular, *ftruncate()* must be used to set the size
    of the shared memory object, since initially it has a length of zero.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX 共享内存对象用于在不创建底层磁盘文件的情况下，在不相关进程之间共享内存区域。为此，我们用 *shm_open()* 替代通常在 *mmap()*
    之前调用的 *open()*。*shm_open()* 调用会在基于内存的文件系统中创建一个文件，并且我们可以使用传统的文件描述符系统调用来对这个虚拟文件执行各种操作。特别是，必须使用
    *ftruncate()* 来设置共享内存对象的大小，因为它最初的长度为零。
- en: 'We have now described three techniques for sharing memory regions between unrelated
    processes: System V shared memory, shared file mappings, and POSIX shared memory
    objects. There are several similarities between the three techniques. There are
    also some important differences, and, except for the issue of portability, these
    differences favor shared file mappings and POSIX shared memory objects.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经描述了三种在不相关进程之间共享内存区域的技术：System V 共享内存、共享文件映射和 POSIX 共享内存对象。这三种技术有一些相似之处，也存在一些重要的差异，除非涉及可移植性问题，否则这些差异更有利于共享文件映射和
    POSIX 共享内存对象。
- en: Exercise
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Rewrite the programs in [Example 48-2](ch48.html#transfer_blocks_of_data_from_stdin_to_a
    "Example 48-2. Transfer blocks of data from stdin to a System V shared memory
    segment") (`svshm_xfr_writer.c`) and [Example 48-3](ch48.html#transfer_blocks_of_data_from_a_system_v
    "Example 48-3. Transfer blocks of data from a System V shared memory segment to
    stdout") (`svshm_xfr_reader.c`) to use POSIX shared memory objects instead of
    System V shared memory.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 [示例 48-2](ch48.html#transfer_blocks_of_data_from_stdin_to_a "示例 48-2. 从 stdin
    向 System V 共享内存段传输数据块") (`svshm_xfr_writer.c`) 和 [示例 48-3](ch48.html#transfer_blocks_of_data_from_a_system_v
    "示例 48-3. 从 System V 共享内存段向 stdout 传输数据块") (`svshm_xfr_reader.c`) 中的程序重写，使用 POSIX
    共享内存对象替代 System V 共享内存。
