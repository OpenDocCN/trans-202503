- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Coaching Your Coders
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 培养你的编程学员
- en: Unlike direct instruction and in-class scripted exercises, a primary feature
    of PBL is student flexibility in choosing their project focus along with independence
    and personal responsibility for developing it. In PBL the teacher takes the role
    of facilitator and coach, allowing students autonomy in forging their own learning
    paths, but always at the ready to provide support when needed. Providing support
    to many different ­projects, several of which will fall outside your areas of
    expertise, can present a significant challenge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接授课和课堂脚本化练习不同，项目式学习（PBL）的一个主要特点是学生可以灵活选择自己的项目重点，并且具备独立性和个人责任感来推进项目。在PBL中，教师充当的是促进者和教练的角色，允许学生在制定自己学习路径时拥有自主权，但始终随时准备提供必要的支持。为多个不同的项目提供支持，其中一些可能超出你的专业领域，这会带来相当大的挑战。
- en: To provide this support, it’s important to be familiar with generalized, adaptable
    troubleshooting techniques as well as the common pitfalls software development
    is prone to. In this chapter, we’ll review how to mentor your students to work
    through technical and personal challenges, and educate them on habits of mind
    that will alleviate stress and improve tenacity. With these techniques, you’ll
    provide your students with toolkits for troubleshooting their code, staying productive,
    and keeping a healthy mind-set when facing adversity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供这种支持，熟悉通用的、可适应的故障排除技巧以及软件开发中常见的陷阱非常重要。在本章中，我们将回顾如何指导学生克服技术和个人挑战，并教育他们培养应对压力、提升毅力的思维习惯。通过这些技巧，你将为学生提供故障排除工具包，帮助他们在编程中保持高效，保持健康的心态，在面对困难时不放弃。
- en: Technical Challenges
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术挑战
- en: Programming is complex, and a great deal of time writing software is spent on
    researching how to accomplish specific tasks and troubleshooting when code doesn’t
    behave the way we want it to. Most of the problems students run into will be technical
    in nature. Educators should coach students through troubleshooting their code
    and finding answers in such a way that students will eventually learn how to work
    through technical issues independently, in preparation for when you won’t be around
    to provide them with tech support.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是复杂的，写软件时，很多时间都花在研究如何完成特定任务以及调试代码，尤其是当代码没有按照预期运行时。大多数学生遇到的问题将具有技术性质。教育工作者应指导学生通过调试代码并寻找解决方案，以一种方式帮助他们最终学会如何独立处理技术问题，准备好在你无法提供技术支持时能够自主解决问题。
- en: When providing any technical support, the first step is to ask the student,
    “What have you tried?” It’s important to set an expectation that students should
    first show they’ve thoroughly engaged the problem by giving an overview of what
    they’ve tried and demonstrating at least some understanding of the issue. This
    will later be expected of students when they seek help in online forums. Forum
    members often ask users requesting help to “show your work” to better understand
    the context of the issue or where the misunderstanding resides.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供任何技术支持时，第一步是问学生：“你尝试过什么？”设置一个期望很重要，学生应首先展示他们已经充分投入问题，并概述他们所尝试过的解决方法，至少展示出对问题的部分理解。这也是学生在在线论坛寻求帮助时的要求。论坛成员通常会要求求助者“展示你的工作”，以便更好地理解问题的背景或误解所在。
- en: Having the student articulate the problem in detail also introduces them to
    what developers sometimes refer to as the *teaching technique* of troubleshooting.
    This technique was popularized by physicist Richard Feynman. He believed the best
    way to deeply understand an issue is to prepare to teach it to someone else. Using
    this technique, the developer explains or “teaches” their problem to someone who
    listens quietly and nods their head encouragingly. The developer explains what
    the code is meant to do step-by-step so the listener will understand. This exercise
    often results in an “Aha!” moment, where the problem becomes obvious to the developer
    without the listener needing to say anything. The technique is so effective it’s
    rumored that one university kept a teddy bear at their help desk, and students
    had to first explain their problem to the stuffed animal before they could talk
    to a human.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让学生详细阐述问题，也让他们接触到开发人员有时称之为*教学技巧*的故障排除方法。这一技巧是由物理学家理查德·费曼推广的。他认为，深入理解一个问题的最佳方式是准备好将其教给别人。运用这一技巧，开发者向一个安静倾听并鼓励点头的人解释或“教”他们的问题。开发者逐步解释代码应该做什么，以便听者理解。这个过程通常会产生“啊哈！”时刻，问题对开发者来说变得显而易见，而听者无需说什么。这一技巧非常有效，据传闻，有一所大学在其帮助台放了一只泰迪熊，学生必须先向这只毛绒玩具解释他们的问题，然后才能与人类工作人员交谈。
- en: Once the student demonstrates how they thoroughly investigated the problem,
    you’ll have the background information needed to begin assisting them. There are
    two main categories of issues programmers tend to have. One is that they wrote
    code that isn’t doing what they want it to do. The other is that they don’t know
    how to program something in their code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦学生展示了他们如何彻底调查问题，你就会获得开始协助他们所需的背景信息。程序员常见的两个主要问题类别是：一种是他们写的代码没有按预期运行，另一种是他们不知道如何在代码中实现某个功能。
- en: Figure 9-1 provides a flowchart of the troubleshooting process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1提供了故障排除流程图。
- en: '![](image/CitC09_01_Troubleshooting.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC09_01_Troubleshooting.png)'
- en: 'Figure 9-1: Troubleshooting flowchart'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1：故障排除流程图
- en: This is an iterative process that shows where to investigate and how to prioritize
    tasks. It’s a rough guideline, and you’ll find developers will customize it according
    to their personal styles and levels of expertise in the professional world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代过程，展示了应该调查的地方以及如何优先处理任务。这只是一个粗略的指南，开发者通常会根据他们的个人风格和专业领域的经验进行调整。
- en: As we covered earlier, your role in providing support begins with the student
    showing their work. Once the student demonstrates they’ve properly engaged the
    problem and can explain it using Feynman’s teaching technique, how we proceed
    depends on the kind of problem challenging the student. One path will be for existing
    code that doesn’t work as expected, and another path will be for when a student
    doesn’t know how to accomplish a task in code. In the next section, we’ll follow
    the branch for when a student’s code isn’t working as expected and prioritize
    the places to look when trying to understand why.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，你在提供支持时的角色始于学生展示他们的工作。一旦学生展示了他们已正确地参与问题并能用费曼的教学技巧解释问题，接下来的步骤取决于学生面临的具体问题类型。一个路径是处理现有代码无法按预期运行的问题，另一个路径是学生不知道如何在代码中完成某个任务。接下来的部分，我们将跟踪当学生的代码无法按预期工作时的路径，并优先考虑在尝试理解问题时应查看的地方。
- en: Troubleshooting Existing Code
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除现有代码
- en: In the Chapter 7 sample exercise where students evaluated multiple approaches
    to implementing a palindrome function, we noted that there aren’t always clear
    right and wrong ways to solve a problem. Similarly, when trying to understand
    code and why it might not be working the way we intended, determining the best
    approach to take can depend on the specific situation. Like coding styles, debugging
    styles can be a matter of personal preference.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章的示例练习中，学生们评估了多种实现回文函数的方法，我们注意到并非总是存在明确的对与错的解决方式。同样，在尝试理解代码以及为什么它可能没有按照我们预期的方式工作时，确定最佳的解决方法往往取决于具体情况。就像编码风格一样，调试风格也可能是个人偏好的问题。
- en: As a best practice, students should understand that coding and debugging are
    iterative processes. Programmers should remember to *code a bit, test a bit (CABTAB)*.
    If you write 100 lines of code before executing them, potentially that’s 100 lines
    of bugs. Conversely, if you write two or three lines of code and test them, you’ll
    have a much smaller portion to debug. When we follow CABTAB, if something goes
    wrong, we know that the first question to ask is “What did you last change?” Most
    likely, that’s where we’ll find the bug.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，学生应该理解编程和调试是一个迭代的过程。程序员应该记住 *编写一点，测试一点（CABTAB）*。如果在执行之前编写了 100 行代码，可能就有
    100 行错误。相反，如果只编写两三行代码并进行测试，那么调试的内容就会小得多。当我们遵循 CABTAB 时，如果出了问题，第一个要问的问题是“你最后修改了什么？”
    很可能，这就是我们找到错误的地方。
- en: Again, personal preferences and experience come into play when debugging. How
    much is a “bit” of code? For a beginner programmer, it could be a few lines. For
    a veteran programmer, they might feel confident writing a few hundred lines of
    code before debugging. Confidence increases as programmers become more comfortable
    with the many troubleshooting tools available to them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，个人偏好和经验在调试过程中也起着作用。多少是“少量”代码？对于初学者来说，可能是几行代码。对于经验丰富的程序员，他们可能在调试之前就写下几百行代码也没问题。随着程序员对许多可用的故障排除工具越来越熟悉，他们的信心也会增加。
- en: For JavaScript programming, the web developer tools are the first place to go
    when code isn’t working right. Start by checking the web console. If any bugs
    are breaking the code execution in the browser, the related error messages will
    appear in the console. For example, if you enter the code in Listing 9-1 in a
    web page and load it, it will produce an error on the second line and fail to
    execute the console.log() instruction.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript 编程，当代码无法正常运行时，Web 开发者工具是首先要查看的地方。首先检查 Web 控制台。如果有任何错误导致浏览器中的代码执行失败，相关的错误信息将显示在控制台中。例如，如果你在网页中输入清单
    9-1 中的代码并加载它，它将在第二行产生错误，并无法执行 `console.log()` 指令。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 9-1: Code that results in an error'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-1：会导致错误的代码
- en: 'Figure 9-2 shows what this error looks like in the console. In this case, it
    reads Uncaught TypeError: Cannot read property ''replace'' of undefined at index
    .html:5. The index.html:5 part of the message is where the error occurs in the
    code, in this case line 5 of the *.html* page, so we know where to start looking.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '图 9-2 显示了在控制台中错误的样子。在这种情况下，错误信息为 "Uncaught TypeError: Cannot read property
    ''replace'' of undefined at index .html:5"。其中，index.html:5 是错误发生的代码位置，在这种情况下是
    *.html* 页面上的第 5 行，因此我们知道从这里开始查找。'
- en: '![](image/CitC09_02_Console.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC09_02_Console.png)'
- en: 'Figure 9-2: Example web console error'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-2：示例 Web 控制台错误
- en: If an error displays in the web console, it also provides a line number in the
    code where we can start looking. If the student doesn’t understand the error,
    have them copy and paste it into a search engine to see the results. But first
    make sure they strip out any variable and function names specific to their code
    to avoid confusing the search. They’ll almost certainly find lots of other programmers
    who at one time ran into the same issue and many others who are more than happy
    to explain what the error means in a variety of ways.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Web 控制台中显示错误，它还会提供代码中的行号，告诉我们从哪里开始查找。如果学生不理解错误，可以让他们将错误信息复制并粘贴到搜索引擎中查看结果。但首先要确保他们去掉代码中任何特定的变量和函数名称，以避免搜索时的混淆。他们几乎肯定会找到很多曾经遇到过相同问题的其他程序员，并且有许多人愿意以各种方式解释该错误的含义。
- en: 'In the Listing 9-1 example, the issue is with the variable myString. replace().
    This is a built-in JavaScript function we can execute from a string, like ''bot''.replace(''o'',''i'')
    to change “bot” to “bit.” Because we haven’t assigned a string value to myString,
    it’s “undefined.” Similarly, if we changed the first line in this code to var
    myString = 123; and refreshed the browser, we would get the error Uncaught TypeError:
    myString.replace is not a function at index.html:5. Because 123 is an integer
    variable type, it doesn’t have a .replace() function. These kinds of variable
    assignment errors are very common in JavaScript programming because of how it
    handles variables compared to other languages.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '在列表 9-1 示例中，问题出在变量 myString 的 replace() 函数上。这是一个 JavaScript 内置函数，我们可以从字符串中执行，比如
    ''bot''.replace(''o'',''i'') 来将 “bot” 改为 “bit”。因为我们没有给 myString 赋值，它是 “undefined”。类似地，如果我们将这段代码的第一行改为
    var myString = 123; 并刷新浏览器，我们会得到错误 Uncaught TypeError: myString.replace is not
    a function at index.html:5。因为 123 是一个整数变量类型，它没有 .replace() 函数。这类变量赋值错误在 JavaScript
    编程中非常常见，因为它与其他语言在变量处理上的不同。'
- en: Different programming languages will have different rules concerning variable
    assignment and scope. JavaScript is a *dynamically typed* language, meaning a
    variable’s type is checked at the time the code is run. So your variable can be
    null at one point in the code, an integer later on, and a string even later. Although
    JavaScript allows this behavior, it’s a good practice to keep variable types static
    throughout the application for simplicity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的编程语言对于变量赋值和作用域有不同的规则。JavaScript 是一种 *动态类型* 语言，意味着变量的类型在代码运行时才会被检查。因此，你的变量在代码的某一点可能是
    null，稍后可能是整数，甚至再晚些时候可能是字符串。尽管 JavaScript 允许这种行为，但为了简化代码，保持变量类型的静态性在整个应用中是一个好习惯。
- en: If the web console is error free, but the code is not doing what is intended,
    direct the student to the debugging options in the web development tools, as discussed
    in Chapter 7\. Navigate through the code step-by-step as it executes, making sure
    each variable holds the expected value and each step goes where it’s intended.
    Often, students will find a mixed-up Boolean condition, such as an and operator
    where an or operator should be, a loop that runs too long or too short, or the
    wrong value assigned to a variable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网页控制台没有错误，但代码没有按预期执行，请引导学生查看第 7 章中讨论的网页开发工具中的调试选项。逐步执行代码，确保每个变量都保持预期的值，每一步都走在正确的方向。通常，学生会发现混乱的布尔条件，例如应该使用
    or 操作符的地方使用了 and 操作符，或者循环执行得太长或太短，或者变量被赋值错误。
- en: Sometimes stepping through the code with the debugger is unfeasible. Consider
    the minimax algorithm in “Recursion ” on page 114, where the program uses recursion
    to explore every one of the 255,168 potential tic-tac-toe games. It could take
    days to step through so many iterations. If the student does find an issue, they’ll
    be so buried in the process or stack they won’t understand why it’s happening.
    In such cases, it might be more convenient to have them add *logging* to their
    code to output specific information to the web console as the code executes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，使用调试器逐步执行代码是不可行的。考虑第 114 页 “递归” 中的 minimax 算法，程序使用递归来探索 255,168 种潜在的井字棋游戏。逐步执行这么多迭代可能需要几天时间。如果学生确实发现了问题，他们可能会被堆栈或过程淹没，无法理解问题发生的原因。在这种情况下，让他们在代码中添加
    *日志记录* 以输出特定信息到网页控制台，在代码执行时查看，可能会更加方便。
- en: The jumpingJacks() function in Listing 9-2 uses recursion to animate a stick
    figure, setting the animation to the jump frame on each odd number value for i,
    and includes logging to track the variable values as the code executes. Run this
    code in the web console to see each step in action.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-2 中的 jumpingJacks() 函数使用递归来动画化一个火柴人形象，在 i 的每个奇数值时将动画设置为跳跃帧，并包含日志记录以跟踪变量值随着代码执行的变化。可以在网页控制台中运行此代码，查看每个步骤的执行情况。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 9-2: Recursive function animating a jumping character'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-2：递归函数，动画化跳跃角色
- en: This code will execute forever or until the computer runs out of memory. The
    ­console.log(i + " = " + i%2) function outputs the value of i and the output of
    i%2, which returns the remainder of i divided by 2\. As a result, we can simultaneously
    watch the code run in the browser window and watch the console.log() values out­putted
    to the web console.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会一直执行，直到计算机内存耗尽。console.log(i + " = " + i%2) 函数输出 i 的值以及 i%2 的输出结果，i%2 返回
    i 除以 2 的余数。结果是，我们可以同时在浏览器窗口中看到代码运行的过程，并看到输出到网页控制台的 console.log() 值。
- en: Another way to output values is the JavaScript alert() function. Replacing the
    console.log() call in Listing 9-2 with alert(i + " = " + i%2) will display a pop-up
    message in the browser with each iteration, pausing the code execution until the
    user clicks **OK**. This is very similar to using a breakpoint in the debugger.
    In fact, before developers had web development tools, they made heavy use of the
    alert() function to debug their code as it ran.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Although not a tool available to client-side JavaScript, note that many software
    applications use *log files* to monitor their applications. These text files log
    application errors, events, and the time they occurred. Similar to console.log()
    calls in JavaScript, the software writes various error messages and application
    details to a text file so the programmer can monitor the software’s operations.
    As a result, if a user experiences a problem after the application is deployed,
    the programmer can review the log for information on what might have happened.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the debugging process, the student developer shouldn’t hesitate to
    run web searches on any new function or error message they encounter. The acts
    of coding and troubleshooting will constantly expand their debugging knowledge.
    They’ll gradually gain a deeper understanding of the system and become fluent
    in tackling common bugs and behaviors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: All of these methods, from looking at the last change students made to reviewing
    the web console, using various techniques for debugging, and searching the web,
    are different ways of looking at a problem. Usually, using these approaches will
    be enough to figure out most issues, especially because they’re the same issues
    other developers have encountered and sought help on many times online.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: But what do you do when the student has hit a wall and simply can’t solve the
    problem, even with your help? As a last resort, you can submit a question to an
    online forum like *Stack Overflow* ([*https://stackoverflow.com**/*](https://stackoverflow.com/))
    and start a conversation with the community for help. We’ll explore web searching
    and community forums in more detail in the next section on approaches for when
    a student doesn’t know how to accomplish a specific task.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Another effective idea is to take a break from debugging the problem. Walking
    away from a challenging problem doesn’t mean you stop thinking about it. The problem
    will likely continue to run as a background process in the student’s mind. Often,
    IT professionals will hit upon solutions or new areas to investigate when they’ve
    taken a break from it. This can be difficult to do when you’re working under a
    deadline, so the break could also mean having students focus their efforts on
    a different part of the software.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Now that students know how to troubleshoot code they’ve already written, in
    the next section we’ll explore strategies for when a student doesn’t know how
    to code a solution at the outset.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Finding How to Solve a Problem
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second kind of problem developers run into is figuring how to do a task
    in code. Beginner coders will lack the robust cognitive toolkit of programming
    techniques and solutions from which they can tackle different kinds of problems.
    Part of the problem is that inexperienced programmers might not know which tasks
    are hard to do in code and which are easy. Distinguishing between computationally
    complex and simple problems is itself a complex problem.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员遇到的第二种问题是如何在代码中完成某项任务。初学者往往缺乏强大的认知工具包，无法运用编程技术和解决方案来应对不同类型的问题。问题的一部分在于，不熟练的程序员可能不知道哪些任务在代码中是困难的，哪些是简单的。区分计算上复杂和简单的问题本身就是一个复杂的问题。
- en: As with debugging code, the first step is to have the student explain their
    understanding of the problem and the solutions they’ve researched to solve it.
    Then ask whether the student can decompose the problem further. If the problem
    is too complex to solve, breaking it down into smaller, more specific problems
    and solving those one by one might break the impasse and help the student make
    progress.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与调试代码类似，第一步是让学生解释他们对问题的理解以及他们为解决问题所研究的方案。然后询问学生是否可以进一步分解问题。如果问题太复杂，无法解决，将其分解为更小、更具体的问题并逐个解决，可能会突破僵局并帮助学生取得进展。
- en: As an example, let’s revisit the “Mandala Factor Finder” exercise in Chapter
    1\. Suppose we want to reproduce such a computational artifact in code. Figure
    9-3 shows what this might look like.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，让我们重新审视第一章中的“曼陀罗因子查找器”练习。假设我们想要用代码重现这样的计算性工件。图9-3展示了它可能的样子。
- en: '![](image/CitC09_03_NumberMandala.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC09_03_NumberMandala.png)'
- en: 'Figure 9-3: A number mandala drawn using code'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-3：用代码绘制的数字曼陀罗
- en: If a student researches how to draw this specific figure, they won’t find any
    information. Producing this drawing with code requires solving multiple problems.
    But if they break down the elements of this image into individual problems, they
    can solve each of them and iteratively create this image.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果学生研究如何绘制这个特定的图形，他们将找不到相关信息。用代码生成这个图形需要解决多个问题。但是，如果他们将这个图像的元素分解为独立的问题，他们就可以逐个解决这些问题，并迭代地创建这个图像。
- en: For example, the first problem we might want to solve is how to draw numbers
    on an HTML canvas element. The first 12 numbers are positioned at the same points
    as on a clock face. If the student can find someone online who has drawn a clock
    face, they can adapt that code to position their numbers. As the numbers go around
    in circles, they follow a spiraling line. Students can then find code to draw
    a spiral and adapt that to position the numbers so they radiate outward. In addition,
    this mandala shows prime numbers in boldface, so a function to identify primes
    is necessary as well.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能想要解决的第一个问题是如何在HTML画布元素上绘制数字。前12个数字的位置与时钟面上的位置相同。如果学生能找到一个已经绘制了时钟面的在线代码，他们可以修改那个代码来定位数字。随着数字围绕圆圈旋转，它们沿着一个螺旋线分布。学生们可以找到绘制螺旋的代码，并将其调整以使数字向外辐射。此外，这个曼陀罗图示中将质数用粗体显示，因此也需要一个识别质数的函数。
- en: 'For each of these smaller problems, the student would find numerous examples
    and approaches to solve them. But to find those examples, they might need some
    guidance on web searching. Here are a few tips for students to find what they
    need using a search engine:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些更小的问题，学生将找到大量的示例和解决方案。但为了找到这些示例，他们可能需要一些关于如何用搜索引擎查找资料的指导。以下是一些帮助学生用搜索引擎找到所需资料的技巧：
- en: '**Include the programming language in your query** If your question involves
    JavaScript, add the word “JavaScript” to your query (for example, “how do I set
    text to lowercase in JavaScript”). If your question involves styling, include
    “css” in your query (for example, “how do I make purple text with css”).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**在提问时包括编程语言** 如果你的问题涉及JavaScript， 在问题中加入“JavaScript”一词（例如，“如何在JavaScript中将文本转换为小写”）。如果问题涉及样式设置，包含“css”在查询中（例如，“如何用css设置紫色文本”）。'
- en: '**Use natural language** Using natural language is the difference between searching
    for “JavaScript replace” and “how do I replace dashes in a string with JavaScript.”
    The first query will point you to a technical document about the JavaScript replace()
    function. The second query will point you to friendly, easy-to-understand results
    with code you can likely copy and paste right into your project from a forum where
    someone was trying to solve the same problem.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用自然语言** 使用自然语言的区别在于搜索“JavaScript replace”和“如何用JavaScript替换字符串中的破折号”。第一个查询会把你引导到关于JavaScript
    replace()函数的技术文档。而第二个查询则会把你带到友好、易于理解的结果，可能包含你可以直接复制粘贴到项目中的代码，这些代码可能来自于一个论坛，其他人在试图解决同样的问题。'
- en: '**Refactor your query** If a search failed to turn up what you need, review
    the suggestions that did come up. See what kind of results appear, and then refactor
    the query to more clearly define what you’re looking for.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**重构你的查询** 如果搜索没有找到你需要的信息，请回顾出现的建议，看看有哪些结果出现，然后重新构建查询，更清晰地定义你在寻找什么。'
- en: Many of the search results will be from coding forums. In Chapter 7, we completed
    an exercise where students evaluated different programming solutions to the palindrome
    function to practice talking about code and articulating why they preferred some
    solutions instead of others. In the forums, they’ll see that many programmers
    have these same debates. Students will benefit from reading these discussions
    as examples of how to talk about code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多搜索结果来自编程论坛。在第七章中，我们做了一个练习，让学生们评估不同的回文函数编程解决方案，练习如何讨论代码，并阐述为什么他们更喜欢某些解决方案而不是其他解决方案。在这些论坛中，学生们将看到许多程序员也在进行相同的辩论。学生们通过阅读这些讨论，将受益于如何谈论代码的示范。
- en: Online Forums
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在线论坛
- en: Online forums are collaborative discussion sites, and when a student can’t figure
    out answers to problems after exhausting other avenues, they might need to turn
    to these helpful communities. Posting to a forum should be the last step for two
    reasons. First, it can sometimes take a while for other users to answer the post.
    Second, when the student posts their question, they need to show that they’ve
    thoroughly researched the issue by providing a detailed explanation of the problem,
    what they’ve tried, how they understand it, and possibly an MWE. Posting the question
    online should come after thoroughly working through all other options.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在线论坛是一个协作讨论网站，当学生在尝试其他途径后仍无法解决问题时，他们可能需要求助于这些有帮助的社区。发布问题到论坛应该是最后的步骤，原因有二。首先，有时其他用户需要一些时间才能回复帖子。其次，当学生发布问题时，他们需要通过提供问题的详细描述、自己尝试过的方法、理解的方式以及可能的最小可重复示例（MWE）来展示他们已经彻底研究过这个问题。在尝试其他所有方法后再发布问题到论坛。
- en: In addition to seeking help, your students might also reap the benefits of providing
    help on these online forums as extra credit or as a class activity using anonymized
    classroom accounts. We’ll explore this topic in the next chapter on community
    building at your school.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了寻求帮助，学生们还可以通过在这些在线论坛上提供帮助，获得额外学分或作为课堂活动，使用匿名课堂账户参与。我们将在下一章讨论如何在学校中建立社区。
- en: For a deeper dive into problem-solving techniques in programming, I highly recommend
    *Think Like a Programmer* by V. Anton Spraul (No Starch Press, 2012). In this
    book, the author provides many kinds of troubleshooting techniques, from generalized
    strategies for solving puzzles to specific ways of troubleshooting arrays, recursion,
    and other kinds of data structures and controls. Spraul introduces educators to
    many ideas and methods they can pass along to their beginner coders in the classroom.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解编程中的问题解决技巧，我强烈推荐V. Anton Spraul的《像程序员一样思考》（No Starch Press，2012年）。在这本书中，作者提供了多种故障排除技巧，从解决难题的一般性策略，到排查数组、递归以及其他数据结构和控制方法的具体方式。Spraul为教育者们介绍了许多思路和方法，可以传授给他们的初学者学生。
- en: Beyond technical challenges, students can face many personal challenges. In
    the next section, we’ll look at a few common challenges software developers talk
    about online; you can make your students aware of and provide practical strategies
    for coping with them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了技术挑战，学生们还可能面临许多个人挑战。在接下来的部分，我们将探讨一些软件开发者在网上讨论的常见挑战；你可以让学生们了解这些挑战，并为应对这些挑战提供实际的策略。
- en: Personal Challenges
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个人挑战
- en: In the professional world, IT personnel can face many personal difficulties
    that impact their productivity or burden them with additional stress. It’s important
    to know the difference between an issue for which you can provide coaching and
    those you should refer to a professional counselor. Here we’ll cover a few common
    challenges that even professional coders experience and some practical coping
    mechanisms they use to stay productive. Coaching coders to recognize personal
    challenges so they can stay on task will benefit them greatly in their professional
    lives.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业领域，IT人员可能会面临许多个人困难，这些困难会影响他们的生产力或给他们带来额外的压力。了解哪些问题可以提供辅导，哪些问题应该转交给专业咨询师非常重要。在这里，我们将讨论一些即使是专业程序员也会遇到的常见挑战，以及他们用来保持高效的一些实际应对机制。指导程序员认识到个人挑战，从而保持专注，将对他们的职业生涯大有裨益。
- en: Difficulty Staying Focused
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 难以保持专注
- en: 'For the younger generations, there is a deleterious myth of the *digital native*
    in education. The idea is that because students grew up with technology, they’re
    inherently more proficient with it than older generations and better at using
    computing systems for productivity and learning. One dimension of this stereotype
    is that digital natives are expert multitaskers: they can text, chat, listen to
    music, and play video games simultaneously. But research shows that everyone,
    even digital natives, are more error prone and less efficient when they try to
    multitask. Multitasking is harmful to learning.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于年轻一代而言，教育中存在一种有害的*数字原住民*神话。这个观点认为，由于学生在科技环境中成长，他们天生比老一代人更擅长使用技术，并且在利用计算机系统进行生产力和学习方面更为高效。这种刻板印象的一个方面是，数字原住民是专家级的多任务处理者：他们可以同时发短信、聊天、听音乐和玩视频游戏。但研究表明，任何人，即使是数字原住民，在尝试多任务时都会更容易出错，效率也会降低。多任务处理对学习有害。
- en: This is especially true in programming. Coding is like reading or studying.
    It requires deep focus. You can’t code and watch a video at the same time. You
    can’t code and check your email every few minutes. Doing so breaks your train
    of thought, and it takes time to rebuild in your mind the complex system you are
    coding.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这在编程中尤为明显。编码就像阅读或学习，它需要高度的专注。你不能一边编码一边看视频；你也不能每隔几分钟就检查一次邮件。这样做会打断你的思路，重新构建你在脑海中所编写的复杂系统需要时间。
- en: That said, it’s important to recognize how hard it is to stay focused with so
    much easy entertainment at our fingertips. It’s hard to power through debugging
    a complex function when we’re just a few clicks away from chatting on social media,
    streaming videos, and playing online games. It’s easy to tumble down a rabbit
    hole of distractions only to later climb out and realize how much time we’ve wasted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，认识到在指尖轻松获得娱乐内容的环境下保持专注是多么困难也很重要。当我们只需几次点击就能进入社交媒体聊天、观看视频或玩在线游戏时，想要坚持进行复杂函数的调试就变得尤为困难。我们很容易陷入干扰的漩涡，直到后来才意识到浪费了多少时间。
- en: Students need a metacognitive awareness of how they’re spending their time and
    attention. They need to be mindful of their distractions and focus. If they recognize
    how they’re being distracted, they can implement coping mechanisms to regain their
    attention.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 学生需要具备对自己时间和注意力的元认知意识。他们需要意识到自己的分心点和专注力。如果他们能意识到自己是如何分心的，就可以实施应对机制来重新获得注意力。
- en: One popular strategy for productivity is the *Pomodoro Technique*, where you
    set a timer on your desk and commit to focus on a specific task in 25-minute sprints.
    If you think of other tasks or items you need to follow up on during the sprint,
    you jot them down on a piece of paper and refocus on the main task at hand. After
    each sprint, you take a five-minute break, check email, access social media, or
    read an online article. Every four sprints, you can take a 15- to 30-minute break.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一种流行的提高生产力的策略是*番茄工作法*，你可以在桌上设置一个计时器，承诺集中精力完成一个特定的任务，每次持续25分钟。如果你在这段时间内想到其他任务或待办事项，可以把它们写下来，重新专注于当前的主要任务。每完成一个工作周期后，你可以休息五分钟，查看邮件、访问社交媒体或阅读一篇在线文章。每四个工作周期后，你可以休息15到30分钟。
- en: 'The technique is highly effective in that it only demands focus for short sprints
    and offers the reward of a well-earned break at the end of each sprint. It’s also
    effective for the way it promotes *flow*: students might find themselves immersed
    in a coding task the same way they become immersed in a game or social media,
    losing track of time with their singular focus. The technique also gamifies focus
    as the students keep track of how many sprints they complete in a day and try
    to beat their records. Many phone apps with timers and sprint-logging features
    are available to help them use this technique.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Another option for improving focus is to install productivity software. Some
    of these programs allow you to configure how much time you can spend on specific
    sites per day or between certain times of day and block access to those sites
    when the time limit is up. Students might find it quite revealing to learn just
    how much time they spend on their distractions when they try to restrain their
    access to them. Along these lines, it’s also a best practice to have content-blocking
    software running on your school’s network to prevent students from accessing sites
    that are time wasters or otherwise inappropriate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Complexity Challenges
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another common productivity challenge is *analysis paralysis*, where developers
    become so overwhelmed with a task or project’s complexity they don’t know where
    to start. As mentioned earlier, decomposing the project into a subset of easier-to-solve
    problems is the best way to start mitigating this challenge. But it’s important
    to realize when this overwhelming feeling of project complexity comes from the
    project scope.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: As stated in the previous chapter, it’s essential to recognize and rein in student-led
    projects that are so ambitious the student might despair at the amount of work
    to which they’ve committed. In the creative world, the concept of *idea debt*
    is where the artist spends all their time envisioning an amazing finished product,
    perhaps an epic novel or film, but never commits to the effort of making it a
    reality. Similarly, in the professional world, there are times when an organization
    envisions a comprehensive, feature-rich software solution that meets every imaginable
    need but fails to build it due to the exorbitant cost and scope to create it.
    Projects can also fall prey to *scope creep*, where a solution starts out simple
    but becomes unmanageable as the organization dreams up more and more features
    to add to it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: One strategy for tackling idea debt and scope creep is to scale back the project
    to a bare minimum implementation or *minimum viable product*. Try to determine
    how the student can just get to a proof of concept. Let’s say the student wants
    to construct a 20-question game to guess a species to teach biological taxonomies.
    This is a potentially hefty task for a single person to configure from scratch
    with 8.7 million species in the world. As the student realizes this, they might
    become overwhelmed and despondent. Instead, have them start with just the domains
    and kingdoms. Once this smaller project is accomplished, they can better estimate
    the scope and effort required to expand the game into phylum, class, order, family,
    genus, and even species. By doing so, they achieve a short-term win, and the project
    can grow organically as the student iteratively expands the scope.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 解决创意负债和范围蔓延的一种策略是将项目缩小到最基本的实现或*最小可行产品*。尝试找出学生如何能完成一个概念验证。假设学生想要制作一个20个问题的游戏，用来猜测一个物种，从而教授生物分类学。对于一个人来说，这可能是一个庞大的任务，因为全世界有870万种物种。当学生意识到这一点时，他们可能会感到不知所措并感到沮丧。相反，可以让他们从领域和界开始。一旦这个较小的项目完成，他们就能更好地估算将游戏扩展到门、纲、目、科、属甚至种所需的范围和努力。通过这样做，他们能够取得短期的胜利，并且随着学生逐步扩展项目的范围，项目也能自然地成长。
- en: Analysis paralysis is like writer’s block, and just as the best cure for writer’s
    block is to write something, the cure for analysis paralysis is simply to start
    coding. Narrowing and simplifying the project scope can make it easier for the
    student to start coding. Once they start coding, the process starts to flow more
    easily as they begin tackling one small task after another.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 分析瘫痪就像写作障碍，而解决写作障碍的最好方法是写点什么，分析瘫痪的解药也同样简单，那就是开始编程。缩小并简化项目范围可以让学生更容易开始编程。一旦他们开始编程，随着他们逐一解决一个个小任务，整个过程也会变得更加流畅。
- en: Resource Challenges
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源挑战
- en: Today, the computer is the encyclopedia set, cable TV, VCR, vinyl record collection,
    video game console, and every other media we once had to budget into our lives
    all rolled into one. Because of this easy access to so many digital resources,
    personal computers have great potential as social equalizers. Unfortunately, access
    to computers and high-speed internet connections is not evenly distributed. As
    a result, there are digital haves and have-nots in schools and communities around
    the world.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，计算机已将百科全书、电视、有线电视、录像机、黑胶唱片收藏、视频游戏主机以及我们曾经需要在生活中预算的所有其他媒体都融为一体。正因如此，个人计算机作为社会平等化的工具，拥有巨大的潜力。不幸的是，计算机和高速互联网连接的获取并不均衡。因此，全球的学校和社区中出现了数字资源的有与没有之分。
- en: For your classroom, the strategies and exercises covered throughout this book
    are meant to involve students in computational thinking and coding at minimal
    financial cost. When teaching computer science concepts to young children, we
    don’t even need to use computers; instead, we can use games to teach them. When
    introducing coding, we don’t need to install new software on the school computers.
    Instead, we can use the tools built into the web browser and in online environments
    so students on any computer with access to the web can continue their projects
    at home or at the public library.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的课堂，本书中涵盖的策略和练习旨在以最低的经济成本让学生参与到计算思维和编程中。当我们向孩子们教授计算机科学概念时，我们甚至不需要使用计算机；相反，我们可以通过游戏来教他们。当我们介绍编程时，也不需要在学校的计算机上安装新软件。我们可以利用内置于网页浏览器和在线环境中的工具，这样无论学生使用任何能够上网的计算机，都能在家或公共图书馆继续他们的项目。
- en: But when your students leave the classroom, their computer access is beyond
    your control. A student who can continue working on their software project after
    school on a home computer will have a significant advantage over a student who
    can’t. Be aware of the programming environments students can access at home and
    direct them to places like libraries that provide public access to the internet.
    If possible, extended access to computers at your school could provide a valuable
    resource for students to continue pursuing their programming passions. Equitable
    access to information technology is a moral issue that demands inventiveness and
    persistent advocacy to address.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Imposter Syndrome
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many professional programmers experience a persistent feeling that they lack
    the skills and expertise of their peers. Even after graduating college and spending
    years or decades coding, many see themselves as lacking sufficient technical skills
    and fear being revealed as a phony. This very common and natural way of thinking
    is known as *imposter syndrome*, and it can cause developers a lot of stress.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Many students can fall prey to this self-perception and feeling that they don’t
    belong in programming. Students with resource challenges might be more prone to
    these feelings of inadequacy if they see their peers who grew up with computers
    in the household exhibiting a natural familiarity with them. The concern for these
    students is that the increased feelings of stress that come with imposter syndrome
    could cause them to abandon computer science. This result is especially disturbing
    today because the field is seeking more engagement with underprivileged groups
    and the unique perspectives they bring to the field.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: As the coach, your praise means a lot to your students. Make sure you find ways
    to encourage them and promote their self-confidence. Recognize that computer science
    is an intimidating subject and openly acknowledge that with your students. That’s
    why several coping mechanisms are explained in this chapter to address the many
    ways to handle this complexity.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Another coping mechanism is to recognize that our feelings of inadequacy likely
    stem from a rational humility. In psychology, a phenomenon known as the *Dunning-Kruger
    Effect* is where the more a person knows about a complex subject, the more they
    doubt their expertise on it. Conversely, the less a person knows about a subject,
    the more confident they feel talking about it. We should try to be like the self-questioning
    expert rather than the overly confident novice.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3 covered the extensive complexity that took centuries of innovation
    to amass into our modern computers, so no one can hope to know it all. Approaching
    the subject of computer science with a humble awareness of this complexity should
    promote sensitivity and respect when interacting with our peers. Remember that
    we question ourselves when we know enough about a subject to know how much we
    don’t know.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: So, instead of reacting to feelings of inadequacy, we coach students to cultivate
    a healthy sense of humility. It’s often better to coach students on beneficial
    mental habits instead of simply reacting to problems as they arise.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Cultivate Healthy Metacognition
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this chapter, we’ve covered ways to respond when students encounter
    challenges. In this section, we’ll touch on two specific areas of *metacognition*
    (thinking about our thinking) you can coach them on that will improve how students
    respond to challenges.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Growth Mind-Set
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A growing body of recent research is finding that teaching students the *growth
    mind-set*, that their brains are plastic and can grow stronger through hard work,
    improves their resilience. This contrasts with the *fixed mind-set*, the idea
    that some people are born smarter or that individual intellectual ability is ultimately
    limited. Depending on their mind-set, students can have very different responses
    to the challenges they face.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: When students who have a fixed mind-set fail, they believe it’s because they’re
    innately flawed and lack the intelligence to overcome the obstacles they encounter.
    In contrast, students with a growth mind-set understand the scientific fact that
    intelligence is malleable and that they can grow smarter if they work harder.
    When these students fail, they recognize the failure as a learning opportunity.
    The fixed mind-set student responds to stress with fatalism, whereas the growth
    mind-set student responds to stress as a natural temporary challenge to work through.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: A common metaphor for the growth mind-set is to think of the brain as a muscle
    that responds to stress by growing stronger. Just as anyone can grow stronger
    by lifting weights or run faster by jogging daily, we can get smarter through
    mental challenges. Making sure student minds are open to improvement means making
    them aware that intelligence and talent are fluid attributes we can enhance when
    we face and overcome our challenges. In this way, we strive to be smarter today
    than we were yesterday.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Along these same lines, there is evidence that students whose personal goal
    is to master the subject matter in computer science, as opposed to those who want
    to get better grades than their peers, will get better grades in a computer science
    class. Encouraging self-improvement and striving for mastery in understanding
    computer ­science concepts will increase students’ likelihood for success academically
    in addition to their self-improvement.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Resilience
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your students understand that they’re capable of growth, you can begin
    coaching them to start growing. Growth requires tenacity to progressively overcome
    problems and challenges. As noted in Chapter 2, software development requires
    tenacity to work through the inevitable challenges we’ll face.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: A draft report from the Department of Education Office of Educational Technology
    identifies “grit,” “academic tenacity,” “agency,” “academic perseverance,” and
    “persistence” as terms used by prominent scholars to describe the exertion of
    will to achieve goals and the tenacity to persist when facing adversity and setbacks.
    This stick-to-itiveness can be more important than cognitive factors for student
    academic performance. Being resilient can be more significant than being talented.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Research suggests that willpower is a limited resource that can be depleted
    in the short term. But it also suggests that willpower, like other mental attributes,
    works like a muscle that can grow through challenges to go longer and stronger.
    Coach your students on this fact to improve their perseverance. Remind them that
    if they’re feeling frustrated, it means they’re about to learn something.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: A Sense of Wonder
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we’ve reviewed many strategies to help students not lose hope
    when they face obstacles. One very important aspect for supporting your students
    is providing an enjoyable learning environment that cultivates a deep appreciation
    of the subject matter. Computer science has many awe-inspiring elements to it,
    and we can lose sight of the wonder when we’re down in the weeds solving problems.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Set the stage at the beginning of each class with a provoking question, impressive
    demonstration, or cutting-edge development in the field. Find ways to give your
    students “wow” moments. Take time to refresh your excitement for the subject and
    share your enthusiasm with students. Nothing promotes flow and tenacity better
    than cultivating a passion for programming.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter covered many strategies and techniques for supporting your students
    through the various challenges they’ll inevitably encounter when coding and learning
    computer science. Most commonly, students will need help with technical issues.
    In these situations, you should set the expectation that they must first work
    on the problem independently before you guide them through the process of debugging
    code and helping them find answers online. Students should also participate in
    online forums, once again showing their work, to seek help and observe how their
    fellow programmers talk about code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: We also covered some of the personal challenges your students might face and
    practical strategies for coping with issues, such as problems focusing, tackling
    complexity, limited resources, and feelings of inadequacy. These are the same
    personal issues that afflict professional developers. So when coaching your students
    to cope with them, you’re prepping them for handling common workplace stresses.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we explored ways of thinking that you can proactively encourage in
    your students to respond to challenges in a healthy way. By reminding your students
    that they’re capable of growth through challenges, students will respond with
    more persistence to overcome the obstacles they encounter. As the educator, you
    should also be mindful to refresh your own love of computer science and communicate
    your appreciation of it to your students to increase their interest and engagement
    with the subject.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探索了你可以积极鼓励学生们采用的一种思维方式，以便他们能够以健康的方式应对挑战。通过提醒学生们他们可以通过挑战实现成长，学生们将更有毅力去克服他们遇到的障碍。作为教育者，你也应该时刻提醒自己，保持对计算机科学的热爱，并将这种热情传递给你的学生，以增加他们对这一学科的兴趣和参与度。
- en: In the next chapter, we move from using techniques for supporting students individually
    to creating a supportive environment through community-building efforts you can
    lead in your school involving computer science. These exercises, projects, and
    programs will bring visibility to your program while simultaneously delivering
    important educational experiences and support services to your students.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从单独支持学生的技巧转向通过社区建设的努力来创建一个支持性环境，这些努力你可以在涉及计算机科学的学校中主导。这些练习、项目和程序将提高你的项目的可见性，同时为你的学生提供重要的教育经验和支持服务。
