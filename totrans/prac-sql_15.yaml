- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analyzing Spatial Data with PostGIS
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: We now turn to *spatial data*, defined as information about the location, shape,
    and attributes of objects—points, lines, or polygons, for example—within a geographical
    space. In this chapter, you’ll learn how to construct and query spatial data using
    SQL, and you’ll be introduced to the PostGIS extension for PostgreSQL that enables
    support for spatial data types and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial data has become a critical piece of our world’s data ecosystem. A phone
    app can find nearby coffee shops because it queries a spatial database, asking
    it to return a list of shops within a certain distance of your location. Governments
    use spatial data to track the footprints of residential and business parcels;
    epidemiologists use it to visualize the spread of diseases.
  prefs: []
  type: TYPE_NORMAL
- en: For our exercises, we’ll analyze the location of farmers’ markets across the
    United States as well as roads and waterways in Santa Fe, New Mexico. You’ll learn
    how to construct and query spatial data types and incorporate map projections
    and grid systems. You’ll receive tools to glean information from spatial data,
    similar to how you’ve analyzed numbers and text.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by setting up PostGIS. All code and data for the exercises are available
    with the book’s resources at [https://nostarch.com/practical-sql-2nd-edition/](https://nostarch.com/practical-sql-2nd-edition/).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling PostGIS and Creating a Spatial Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PostGIS is a free, open source project created by the Canadian geospatial company
    Refractions Research and maintained by an international team of developers under
    the Open Source Geospatial Foundation (OSGeo). The GIS portion of its name refers
    to *geographic information system*, defined as a system that allows for storing,
    editing, analyzing, and displaying spatial data. You’ll find documentation and
    updates at [https://postgis.net/](https://postgis.net/).
  prefs: []
  type: TYPE_NORMAL
- en: If you installed PostgreSQL following the steps for Windows, macOS, or the Ubuntu
    flavor of Linux in Chapter 1, PostGIS should be on your machine. If you installed
    PostgreSQL some other way on Windows or macOS or if you’re on another Linux distribution,
    follow the installation instructions at [https://postgis.net/install/](https://postgis.net/install/).
  prefs: []
  type: TYPE_NORMAL
- en: To enable PostGIS on your `analysis` database, open pgAdmin’s Query Tool and
    run the statement in [Listing 15-1](#listing15-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 15-1: Loading the PostGIS extension'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see the message `CREATE EXTENSION`, advising that your database has been
    updated to include spatial data types and analysis functions. Run `SELECT postgis_full_version();`
    to display the version number of PostGIS along with the versions of its installed
    components. The version won’t match your installed PostgreSQL version, and that’s
    okay.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Building Blocks of Spatial Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you learn to query spatial data, let’s look at how it’s described in
    GIS and related data formats. This is important background, but if you want to
    dive straight into queries, you can skip to “Understanding PostGIS Data Types”
    later in the chapter and return here afterward.
  prefs: []
  type: TYPE_NORMAL
- en: A point on a grid is the smallest building block of spatial data. The grid might
    be marked with x- and y-axes, or longitude and latitude if we’re using a map.
    A grid could be flat with two dimensions, or it could describe a three-dimensional
    space such as a cube. In some data formats, such as the JavaScript-based *GeoJSON*,
    a point may have attributes in addition to its location. We could describe a grocery
    store with a point containing its longitude and latitude as well as attributes
    for the store’s name and hours of operation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Two-Dimensional Geometries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Open Geospatial Consortium (OGC) and International Organization for Standardization
    (ISO) have created a *simple features access* model that describes standards for
    building and querying two- and three-dimensional shapes, sometimes referred to
    as *geometries*. PostGIS supports the standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the more common features, starting with points and building
    in complexity:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Point**'
  prefs: []
  type: TYPE_NORMAL
- en: A single location in a two- or three-dimensional plane. On maps, a Point is
    usually a dot marking a longitude and latitude.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**LineString**'
  prefs: []
  type: TYPE_NORMAL
- en: Two or more Points, each connected by straight lines. A LineString can represent
    features such as a road, biking trail, or stream.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Polygon**'
  prefs: []
  type: TYPE_NORMAL
- en: A two-dimensional shape with three or more straight sides, each constructed
    from a LineString. On maps, Polygons represent objects such as nations, states,
    buildings, and bodies of water. A Polygon can have one or more interior Polygons
    that act as holes inside the larger Polygon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MultiPoint**'
  prefs: []
  type: TYPE_NORMAL
- en: A set of Points. A single MultiPoint object could represent multiple locations
    of a retailer with each store’s latitude and longitude.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MultiLineString**'
  prefs: []
  type: TYPE_NORMAL
- en: A set of LineStrings. An example is a road that has several noncontinuous segments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MultiPolygon**'
  prefs: []
  type: TYPE_NORMAL
- en: A set of Polygons. A parcel of land that’s divided into parts by a road could
    be grouped in one MultiPolygon object instead of separate polygons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 15-1](#figure15-1) shows an example of each feature. PostGIS enables
    functions to build, edit, and analyze these objects. These functions take a variety
    of inputs depending on their purpose, including latitude and longitude, specialized
    text and binary formats, and simple features. Some functions also take an optional
    *spatial reference system identifier (SRID)* that specifies the grid on which
    to place the objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '![f15001](Images/f15001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-1: Visual examples of geometries'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll explain the SRID shortly, but first, let’s look at examples of an input
    used by PostGIS functions called *well-known text (WKT)*—a text-based format that
    represents a geometry.
  prefs: []
  type: TYPE_NORMAL
- en: Well-Known Text Formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The OGC standard’s WKT format specifies a geometry type and its coordinates
    inside one or more sets of parentheses. The number of coordinates and parentheses
    varies depending on the type of geometry. [Table 15-1](#table15-1) shows examples
    of frequently used geometry types and their WKT formats. Longitude/latitude pairs
    are shown for the coordinates, but you might encounter grid systems that use other
    measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 15-1: Well-Known Text Formats for Geometries'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Geometry** | **Format** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Point | `POINT (-74.9 42.7)` | A coordinate pair marking a point at −74.9
    longitude and 42.7 latitude. |'
  prefs: []
  type: TYPE_TB
- en: '| LineString | `LINESTRING (-74.9 42.7, -75.1 42.7)` | A straight line with
    endpoints marked by two coordinate pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| Polygon | `POLYGON ((-74.9 42.7, -75.1 42.7, -75.1 42.6, -74.9 42.7))` |
    A triangle outlined by three different pairs of coordinates. Although listed twice,
    the first and last pair are the same coordinates where we close the shape. |'
  prefs: []
  type: TYPE_TB
- en: '| MultiPoint | `MULTIPOINT (-74.9 42.7, -75.1 42.7)` | Two Points, one for
    each pair of coordinates. |'
  prefs: []
  type: TYPE_TB
- en: '| MultiLineString | `MULTILINESTRING ((-76.27 43.1, -76.06 43.08), (-76.2 43.3,
    -76.2 43.4, -76.4 43.1))` | Two LineStrings. The first has two points; the second
    has three. |'
  prefs: []
  type: TYPE_TB
- en: '| MultiPolygon | `MULTIPOLYGON (((-74.92 42.7, -75.06 42.71, -75.07 42.64,
    -74.92 42.7), (-75.0 42.66, -75.0 42.64, -74.98 42.64, -74.98 42.66, -75.0 42.66)))`
    | Two Polygons. The first is a triangle, and the second is a rectangle. |'
  prefs: []
  type: TYPE_TB
- en: These examples create simple shapes, as you’ll see when we construct them using
    PostGIS later in the chapter. In practice, complex geometries will comprise thousands
    of coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Projections and Coordinate Systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Representing Earth’s spherical surface on a two-dimensional map is not easy.
    Imagine peeling the outer layer of Earth from the globe and trying to spread it
    on a table while keeping all pieces of the continents and oceans connected. Inevitably,
    you’d have to stretch some parts of the map. That’s what happens when cartographers
    create a map *projection* with its own *projected coordinate system*. A projection
    is simply a flattened representation of the globe with its own two-dimensional
    coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: Some projections represent the entire world; others are specific to regions
    or purposes. The *Mercator projection* has properties useful for navigation; Google
    Maps and other online maps use a variant of called *Web Mercator*. The math behind
    its transformation distorts land areas close to the North and South Poles, making
    them appear much larger than reality. The US Census Bureau uses the *Albers projection*,
    which minimizes distortion and is the one you see on TV in the United States as
    votes are tallied on election night.
  prefs: []
  type: TYPE_NORMAL
- en: Projections are derived from *geographic coordinate systems*, which define the
    grid of latitude, longitude, and height of any point on the globe along with factors
    including Earth’s shape. Whenever you obtain geographic data, it’s critical to
    know the coordinate systems it references so you provide the correct information
    when writing queries. Often, user documentation will name the coordinate system.
    Next, let’s look at how to specify the coordinate system in PostGIS.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial Reference System Identifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using PostGIS (and many GIS applications), you specify the coordinate system
    via its unique SRID. When you enabled the PostGIS extension at the beginning of
    this chapter, the process created the table ``spatial_ref_sys, which contains
    SRIDs as its primary key. The table also contains the column `srtext`, which includes
    a WKT representation of the spatial reference system plus other metadata.``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
