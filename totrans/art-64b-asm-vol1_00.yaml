- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This book is the culmination of 30 years’ work. The very earliest versions of
    this book were notes I copied for my students at Cal Poly Pomona and UC Riverside
    under the title “How to Program the IBM PC Using 8088 Assembly Language.” I had
    lots of input from students and a good friend of mine, Mary Philips, that softened
    the edges a bit. Bill Pollock rescued that early version from obscurity on the
    internet, and with the help of Karol Jurado, the first edition of *The Art of
    Assembly Language* became a reality in 2003.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是30年工作的结晶。这本书的最早版本是我为我的Cal Poly Pomona和UC Riverside的学生复印的笔记，标题为“如何使用8088汇编语言编程IBM
    PC”。我得到了许多学生的反馈，以及我一个好朋友Mary Philips的建议，这些帮助稍微润色了一下内容。Bill Pollock将那个早期版本从互联网的遗忘角落拯救了出来，在Karol
    Jurado的帮助下，*《汇编语言的艺术》*的第一版在2003年得以问世。
- en: Thousands of readers (and suggestions) later, along with input from Bill Pollock,
    Alison Peterson, Ansel Staton, Riley Hoffman, Megan Dunchak, Linda Recktenwald,
    Susan Glinert Stevens, and Nancy Bell at No Starch Press (and a technical review
    by Nathan Baker), the second edition of this book arrived in 2010.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数千名读者（以及他们的建议），以及Bill Pollock、Alison Peterson、Ansel Staton、Riley Hoffman、Megan
    Dunchak、Linda Recktenwald、Susan Glinert Stevens和Nancy Bell（来自No Starch Press）的贡献，以及Nathan
    Baker的技术审查，促成了这本书的第二版在2010年问世。
- en: Ten years later, *The Art of Assembly Language* (or *AoA* as I refer to it)
    was losing popularity because it was tied to the 35-year-old 32-bit design of
    the Intel x86\. Today, someone who was going to learn 80x86 assembly language
    would want to learn 64-bit assembly on the newer x86-64 CPUs. So in early 2020,
    I began the process of translating the old 32-bit *AoA* (based on the use of the
    High-Level Assembler, or HLA) to 64 bits by using the Microsoft Macro Assembler
    (MASM).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 十年后，*《汇编语言的艺术》*（或者我称之为*AoA*）因其依赖于已经35年的32位Intel x86设计而逐渐失去人气。今天，如果有人想学习80x86汇编语言，他们会想要在更新的x86-64
    CPU上学习64位汇编。因此，在2020年初，我开始了将旧版32位*AoA*（基于使用高级汇编器，或HLA）转向64位的过程，采用了Microsoft Macro
    Assembler（MASM）。
- en: When I first started the project, I thought I’d translate a few HLA programs
    to MASM, tweak a little text, and wind up with *The Art of 64-Bit Assembly* with
    minimal effort. I was wrong. Between the folks at No Starch Press wanting to push
    the envelope on readability and understanding, and the incredible job Tony Tribelli
    has done in his technical review of every line of text and code in this book,
    this project turned out to be as much work as writing a new book from scratch.
    That’s okay; I think you’ll really appreciate the work that has gone into this
    book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次开始这个项目时，我以为只需要将几个HLA程序翻译成MASM，稍微修改一些文本，就能轻松完成*64位汇编的艺术*的翻译工作。我错了。由于No Starch
    Press希望在可读性和理解上做出突破，并且Tony Tribelli在对本书每一行文本和代码进行技术审查时做出了令人难以置信的工作，这个项目变得像从头开始写一本新书一样繁重。没关系，我认为你会真正感激这本书中所付出的努力。
- en: A Note About the Source Code in This Book
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本书中的源代码说明
- en: 'A considerable amount of x86-64 assembly language (and C/C++) source code is
    presented throughout this book. Typically, source code comes in three flavors:
    code snippets, single assembly language procedures or functions, and full-blown
    programs.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中展示了大量的x86-64汇编语言（以及C/C++）源代码。通常，源代码有三种形式：代码片段、单一的汇编语言过程或函数，以及完整的程序。
- en: '*Code snippets* are fragments of a program; they are not stand-alone, and you
    cannot compile (assemble) them using MASM (or a C++ compiler in the case of C/C++
    source code). Code snippets exist to make a point or provide a small example of
    a programming technique. Here is a typical example of a code snippet you will
    find in this book:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码片段*是程序的片段；它们不是独立的，不能使用MASM（或在C/C++源代码的情况下使用C++编译器）进行编译（汇编）。代码片段的目的是阐明某个要点或提供编程技巧的小示例。以下是你将在本书中找到的一个典型代码片段示例：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The vertical ellipsis (. . .) denotes arbitrary code that could appear in its
    place (not all snippets use the ellipsis, but it’s worthwhile to point this out).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直省略号（. . .）表示可以在其位置出现的任意代码（并非所有的代码片段都使用省略号，但指出这一点是有意义的）。
- en: '*Assembly language procedures* are also not stand-alone code. While you can
    assemble many assembly language procedures appearing in this book (by simply copying
    the code straight out of the book into an editor and then running MASM on the
    resulting text file), they will not execute on their own. Code snippets and assembly
    language procedures differ in one major way: procedures appear as part of the
    downloadable source files for this book (at [https://artofasm.randallhyde.com/](https://artofasm.randallhyde.com/)).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*汇编语言过程*也不是独立的代码。尽管你可以组装本书中出现的许多汇编语言过程（只需将代码从书中复制到编辑器中，然后运行 MASM 来处理生成的文本文件），但它们不会自行执行。代码片段和汇编语言过程有一个主要的不同点：过程作为本书的可下载源文件的一部分出现（在
    [https://artofasm.randallhyde.com/](https://artofasm.randallhyde.com/)）。'
- en: '*Full-blown programs*, which you can compile and execute, are labeled as *listings*
    in this book. They have a listing number/identifier of the form “Listing *C*-*N*,”
    where *C* is the chapter number and *N* is a sequentially increasing listing number,
    starting at 1 for each chapter. Here is an example of a program listing that appears
    in this book:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*完整程序*，你可以编译并执行，在本书中被标记为*列表*。它们有一个列表编号/标识符，形式为“Listing *C*-*N*”，其中*C*是章节号，*N*是一个按顺序递增的列表编号，每个章节从1开始。以下是本书中出现的一个程序列表示例：'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 1: A MASM program that the C++ program in Listing 1-2 calls'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 1：一个由 Listing 1-2 中的 C++ 程序调用的 MASM 程序
- en: 'Like procedures, all listings are available in electronic form at my website:
    [https://artofasm.randallhyde.com/](https://artofasm.randallhyde.com/). This link
    will take you to the page containing all the source files and other support information
    for this book (such as errata, electronic chapters, and other useful information).
    A few chapters attach listing numbers to procedures and macros, which are not
    full programs, for legibility purposes. A couple of listings demonstrate MASM
    syntax errors or are otherwise unrunnable. The source code still appears in the
    electronic distribution under that listing name.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 像过程一样，所有列表都可以在我的网站上以电子形式获取：[https://artofasm.randallhyde.com/](https://artofasm.randallhyde.com/)。这个链接将引导你到包含本书所有源文件和其他支持信息的页面（如勘误表、电子章节以及其他有用信息）。有几个章节将列表编号附加到过程和宏，这些并非完整的程序，仅为提高可读性。有一些列表演示了
    MASM 语法错误或无法运行。源代码仍然会以该列表名的形式出现在电子版分发中。
- en: 'Typically, this book follows executable listings with a build command and sample
    output. Here is a typical example (user input is given in a boldface font):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，本书在可执行的列表之后会给出构建命令和示例输出。以下是一个典型的示例（用户输入以粗体显示）：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Most of the programs in this text run from a Windows *command line* (that is,
    inside the *cmd.exe* application). By default, this book assumes you’re running
    the programs from the root directory on the C: drive. Therefore, every build command
    and sample output typically has the text prefix `C:\>` before any command you
    would type from the keyboard on the command line. However, you can run the programs
    from any drive or directory.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '本书中的大多数程序从 Windows *命令行* 运行（即在 *cmd.exe* 应用程序中）。默认情况下，本书假设你是从 C: 驱动器的根目录运行程序。因此，每个构建命令和示例输出通常都会有
    `C:\>` 作为命令行中你输入的命令的前缀。然而，你也可以从任何驱动器或目录运行程序。'
- en: If you are completely unfamiliar with the Windows command line, please take
    a little time to learn about the Windows command line interpreter (CLI). You can
    start the CLI by executing the *cmd.exe* program from the Windows `run` command.
    As you’re going to be running the CLI frequently while reading this book, I recommend
    creating a shortcut to *cmd.exe* on your desktop. In Appendix C, I describe how
    to create this shortcut to automatically set up the environment variables you
    will need to easily run MASM (and the Microsoft Visual C++ compiler). Appendix
    D provides a quick introduction to the Windows CLI for those who are unfamiliar
    with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Windows 命令行完全陌生，请花些时间了解 Windows 命令行解释器（CLI）。你可以通过在 Windows 的 `运行` 命令中执行
    *cmd.exe* 程序来启动 CLI。由于在阅读本书时你将频繁使用 CLI，我建议在桌面上创建一个 *cmd.exe* 的快捷方式。在附录 C 中，我描述了如何创建该快捷方式，以便自动设置你需要的环境变量，轻松运行
    MASM（以及 Microsoft Visual C++ 编译器）。附录 D 为那些不熟悉 CLI 的人提供了一个 Windows CLI 的快速入门。
