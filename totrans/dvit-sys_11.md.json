["```\nfloat averageMat_v1(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [i][j]\n\n            total += mat[i][j];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\nfloat averageMat_v2(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [j][i]\n\n            total += mat[j][i];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\n/* Sum up the elements in an integer array of length len. */\n\nint sum_array(int *array, int len) {\n\n    int i;\n\n    int sum = 0;\n\n    for (i = 0; i < len; i++) {\n\n        sum += array[i];\n\n    }\n\n    return sum;\n\n}\n```", "```\nfloat averageMat_v1(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [i][j]\n\n            total += mat[i][j];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\nfloat averageMat_v2(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [j][i]\n\n            total += mat[j][i];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\n#include <stdio.h>\n\n#include <stdlib.h>\n\n#include <sys/time.h>\n\n#include <time.h>\n\nint **genRandomMatrix(int n, int max) {\n\n    int i, j;\n\n    int **mat = malloc(n * sizeof(int *));\n\n    for (i = 0; i < n; i++) {\n\n        mat[i] = malloc(n * sizeof(int));\n\n        for (j = 0; j < n; j++) {\n\n            mat[i][j] = 1 + rand() % max;\n\n        }\n\n    }\n\n    return mat;\n\n}\n\nvoid free_all(int **mat, int n) {\n\n    int i;\n\n    for (i = 0; i < n; i++) {\n\n        free(mat[i]);\n\n    }\n\n    free(mat);\n\n}\n\nint main(int argc, char **argv) {\n\n    int i, n;\n\n    int **matrix;\n\n    if (argc != 2) {\n\n        fprintf(stderr, \"usage: %s <n>\\n\", argv[0]);\n\n        fprintf(stderr, \"where <n> is the dimension of the matrix\\n\");\n\n        return 1;\n\n    }\n\n    n = strtol(argv[1], NULL, 10);\n\n    srand(time(NULL));\n\n    matrix = genRandomMatrix(n, 100);\n\n    free_all(matrix, n);\n\n    return 0;\n\n}\n```", "```\nfloat averageMat_v1(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [i][j]\n\n            total += mat[i][j];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\nfloat averageMat_v2(int **mat, int n) {\n\n    int i, j, total = 0;\n\n    for (i = 0; i < n; i++) {\n\n        for (j = 0; j < n; j++) {\n\n            // Note indexing: [j][i]\n\n            total += mat[j][i];\n\n        }\n\n    }\n\n    return (float) total / (n * n);\n\n}\n```", "```\nint main(int argc, char** argv) {\n\n   /* Validate command line parameters. */\n\n   if (argc != 2) {\n\n       fprintf(stderr, \"usage: %s <n>\\n\", argv[0]);\n\n fprintf(stderr, \"where <n> is the dimension of the matrix\\n\");\n\n       return 1;\n\n   }\n\n   /* Declare and initialize variables. */\n\n   int i;\n\n   float res;\n\n   double timer;\n\n   int n = strtol(argv[1], NULL, 10);\n\n   srand(time(NULL));\n\n   struct timeval tstart, tend;\n\n   int ** matrix = genRandomMatrix(n, 100);\n\n   /* Time version 1\\. */\n\n   gettimeofday(&tstart, NULL);\n\n   res = averageMat_v1(matrix, n);\n\n   gettimeofday(&tend, NULL);\n\n   timer = tend.tv_sec - tstart.tv_sec + (tend.tv_usec - tstart.tv_usec)/1.e6;\n\n   printf(\"v1 average is: %.2f; time is %g\\n\", res, timer);\n\n   /* Time version 2\\. */\n\n   gettimeofday(&tstart, NULL);\n\n   res = averageMat_v2(matrix, n);\n\n   gettimeofday(&tend, NULL);\n\n   timer = tend.tv_sec - tstart.tv_sec + (tend.tv_usec - tstart.tv_usec)/1.e6;\n\n   printf(\"v2 average is: %.2f; time is %g\\n\", res, timer);\n\n   /* Clean up. */\n\n   free_all(matrix, n);\n\n   return 0;\n\n}\n```", "```\n$ gcc -o cachex cachex.c\n\n$ ./cachex 5000\n\nv1 average is: 50.49; time is 0.053641\n\nv2 average is: 50.49; time is 0.247644\n```", "```\n$ valgrind --tool=cachegrind ./cachex 1000\n```", "```\n==28657== Cachegrind, a cache and branch-prediction profiler\n\n==28657== Copyright (C) 2002-2015, and GNU GPL'd by Nicholas Nethercote et al.\n\n==28657== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n\n==28657== Command: ./cachex 1000\n\n==28657==\n\n--28657-- warning: L3 cache found, using its data for the LL simulation.\n\naverage is: 50.49; time is 0.080304\n\naverage is: 50.49; time is 0.09733\n\n==28657==\n\n==28657== I   refs:      122,626,329\n\n==28657== I1  misses:          1,070\n\n==28657== LLi misses:          1,053\n\n==28657== I1  miss rate:        0.00%\n\n==28657== LLi miss rate:        0.00%\n\n==28657==\n\n==28657== D   refs:       75,292,076  (56,205,598 rd   + 19,086,478 wr)\n\n==28657== D1  misses:      1,192,118  ( 1,129,099 rd   +     63,019 wr)\n\n==28657== LLd misses:         64,399  (     1,543 rd   +     62,856 wr)\n\n==28657== D1  miss rate:         1.6% (       2.0%     +        0.3%  )\n\n==28657== LLd miss rate:         0.1% (       0.0%     +        0.3%  )\n\n==28657==\n\n==28657== LL refs:         1,193,188  ( 1,130,169 rd   +     63,019 wr)\n\n==28657== LL misses:          65,452  (     2,596 rd   +     62,856 wr)\n\n==28657== LL miss rate:          0.0% (       0.0%     +        0.3%  )\n```", "```\n$ cg_annotate cachegrind.out.28657\n\nI1 cache:         32768 B, 64 B, 8-way associative\n\nD1 cache:         32768 B, 64 B, 8-way associative\n\nLL cache:         8388608 B, 64 B, 16-way associative\n\nCommand:          ./cachex 1000\n\nData file:        cachegrind.out.28657\n\nEvents recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\n\nEvents shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\n\nEvent sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\n\nThresholds:       0.1 100 100 100 100 100 100 100 100\n\nInclude dirs:\n\nUser annotated:\n\nAuto-annotation:  off\n\n ----------------------------------------------------------------------------\n\n         Ir  I1mr  ILmr         Dr      D1mr  DLmr         Dw   D1mw   DLmw\n\n ----------------------------------------------------------------------------\n\n122,626,329 1,070 1,053 56,205,598 1,129,099 1,543 19,086,478 63,019 62,856  PROG TOTALS\n\n ----------------------------------------------------------------------------\n\n        Ir I1mr ILmr         Dr      D1mr DLmr        Dw   D1mw   DLmw  file:function\n\n ----------------------------------------------------------------------------\n\n14,009,017    3    3  9,005,008    62,688    0     1,004      0      0  averageMat_v1\n\n14,009,017    0    0  9,005,008 1,062,996    0     1,004      0      0  averageMat_v2\n```", "```\n$ lscpu\n\n...\n\nCPU(s):                          12\n\nThread(s) per core:              2\n\nCore(s) per socket:              6\n\nSocket(s):                       1\n\n...\n\nL1d cache:                       192 KiB\n\nL1i cache:                       384 KiB\n\nL2 cache:                        3 MiB\n\nL3 cache:                        16 MiB\n```", "```\n$ ls /sys/devices/system/cpu/cpu0/cache\n\nindex0/  index1/  index2/  index3/\n```", "```\n$ cat /sys/devices/system/cpu/cpu0/cache/index*/type\n\nData\n\nInstruction\n\nUnified\n\nUnified\n\n$ cat /sys/devices/system/cpu/cpu0/cache/index*/level\n\n1\n\n1\n\n2\n\n3\n\n$ cat /sys/devices/system/cpu/cpu0/cache/index*/shared_cpu_list\n\n0,6\n\n0,6\n\n0,6\n\n0-11\n```"]