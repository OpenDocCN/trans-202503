- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Views
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll learn how to create and use views. *Views* are virtual
    tables based on the output of a query you write to customize the display of your
    result set. Each time you select from a view, MySQL reruns the query that you
    defined the view with, returning the latest results as a table-like structure
    with rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Views are useful in situations where you want to simplify a complex query or
    hide sensitive or irrelevant data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You create a view using the `create view` syntax. Let’s look at an example
    with the following `course` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you create a view named `v_course_beginner` that selects all columns with
    a `course_level` of `beginner` from the `course` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this statement creates the view and saves it in your MySQL database.
    Now you can query the `v_course_beginner` view at any time, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since you defined the view by selecting `*` (the wildcard character) from the
    `course` table, it has the same column names as the table.
  prefs: []
  type: TYPE_NORMAL
- en: The `v_course_beginner` view should be used by beginner students, so you selected
    only courses from the table with a `course_level` of `beginner`, hiding the advanced
    courses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a second view for advanced students that includes just advanced
    courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting from the `v_course_advanced` view displays the advanced courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you defined the `v_course_advanced` view, you provided MySQL with a query
    that selects data from the `course` table. MySQL runs this query each time the
    view is used, meaning that the view is always up to date with the latest rows
    from the `course` table. In this example, any new advanced courses added to the
    `course` table will be shown each time you select from the `v_course_advanced`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: This approach allows you to maintain your courses in the `course` table and
    provide different views of the data to beginner and advanced students.
  prefs: []
  type: TYPE_NORMAL
- en: Using Views to Hide Column Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `course` table example, you created views that displayed certain rows
    from the table and hid others. You can also create views that display different
    *columns*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example of using views to hide sensitive column data. You have
    two tables, `company` and `complaint`, that help track complaints for local companies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `company` table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the `complaint` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll start by writing a query to select information about each company and
    a count of its received complaints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the results of this query in a view called `v_complaint`, simply
    add the `create view` syntax as the first line of the original query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, the next time you want to get a list of companies with a count of complaints,
    you can simply type `select * from v_complaint` instead of rewriting the entire
    query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you’ll create another view that hides the owner information. You’ll name
    the view `v_complaint_public`, and you’ll let all users of your database access
    the view. This view will show the company name and number of complaints, but not
    the owner’s name or phone number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can query the view like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is an example of using a view to hide data stored in columns. While the
    owners’ contact information is in your database, you are withholding it by not
    selecting those columns in your `v_complaint_public` view.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created your views, you can use them as if they were tables. For
    example, you can join views to tables, join views to other views, and use views
    in subqueries.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting, Updating, and Deleting from Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 9](c09.xhtml) you learned how to insert, update, and delete rows
    from tables. In some cases, it’s also possible to modify rows using a view. For
    example, the `v_course_beginner` view is based on the `course` table. You can
    update that view using the following `update` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This `update` statement updates the `course_name` column in the `v_course_beginner`
    view’s underlying `course` table. MySQL is able to perform the update because
    the view and the table are so similar; for every row in the `v_course_beginner`
    view, there is one row in the `course` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try to update the `v_complaint` view with a similar query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You receive the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: MySQL doesn’t allow you to update the `v_complaint` view, because it was created
    using multiple tables and the `count()` aggregate function. It’s a more complex
    view than the `v_course_beginner` view. The rules about which views allow rows
    to be updated, inserted, or deleted are fairly complicated. For this reason, I
    recommend changing data directly from tables and avoiding using views for this
    purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Dropping a View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove a view, use the `drop view` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: While the view is removed from the database, the underlying table still exists.
  prefs: []
  type: TYPE_NORMAL
- en: Indexes and Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can’t add indexes to views to speed up your queries, but MySQL can use any
    indexes on the underlying tables. For example, the following query
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: can take advantage of an index on the `company_name` column of the `company`
    table, since the `v_complaint` view is built on the `company` table.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you saw how to use views to provide a custom representation
    of your data. In the next chapter, you’ll learn how to write functions and procedures
    and add logic to them to perform certain tasks based on your data values.
  prefs: []
  type: TYPE_NORMAL
