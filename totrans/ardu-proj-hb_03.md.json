["```\ntimeHigh = period / 2 = 1 / (2 * toneFrequency)\n```", "```\n   // Melody (cleft) 2005 D. Cuartielles for K3\n\n   int speakerPin = 9; // Pin connected to the piezo\n➊ int length = 15; // Number of notes\n➋ char notes[] = \"ccggaagffeeddc \"; // A space represents a rest\n➌ int beats[] = { 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 4 };\n➍ int tempo = 300;\n void playTone(int tone, int duration) {\n     for (long i = 0; i < duration * 1000L; i += tone * 2) {\n       digitalWrite(speakerPin, HIGH);\n       delayMicroseconds(tone);\n       digitalWrite(speakerPin, LOW);\n       delayMicroseconds(tone);\n     }\n   }\n\n   // Set timeHigh value to specific notes\n   void playNote(char note, int duration) {\n     char names[] = { 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C' };\n     int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 };\n     for (int i = 0; i < 8; i++) { // Play tone that corresponds\n                                   // to note name\n       if (names[i] == note) {\n         playTone(tones[i], duration);\n       }\n     }\n   }\n\n   void setup() {\n     pinMode(speakerPin, OUTPUT); // Set speakerPin as output\n   }\n\n   // Play the tune\n   void loop() {\n     for (int i = 0; i < length; i++) {\n       if (notes[i] == ' ') {\n         delay(beats[i] * tempo); // Rest\n       }\n       else {\n         playNote(notes[i], beats[i] * tempo);\n       }\n       delay(tempo / 2); // Pause between notes\n     }\n   }\n```", "```\n// Used with kind permission from Abdullah Alhazmy www.Alhazmy13.net\n\n#include <Tone.h>\nTone speakerpin;\nint starttune[] = {NOTE_C4, NOTE_F4, NOTE_C4, NOTE_F4, NOTE_C4,\n                   NOTE_F4, NOTE_C4, NOTE_F4, NOTE_G4, NOTE_F4,\n                   NOTE_E4, NOTE_F4, NOTE_G4};\nint duration2[] = {100, 200, 100, 200, 100, 400, 100, 100, 100, 100,\n                   200, 100, 500};\nint note[] = {NOTE_C4, NOTE_C4, NOTE_G4, NOTE_C5, NOTE_G4, NOTE_C5};\nint duration[] = {100, 100, 100, 300, 100, 300};\nboolean button[] = {2, 3, 4, 5}; // Pins connected to\n                                 // pushbutton inputs\nboolean ledpin[] = {8, 9, 10, 11}; // Pins connected to LEDs\nint turn = 0;         // Turn counter\nint buttonstate = 0;  // Check pushbutton state\nint randomArray[100]; // Array that can store up to 100 inputs\nint inputArray[100];\n\nvoid setup() {\n  Serial.begin(9600);\n  speakerpin.begin(12); // Pin connected to piezo buzzer\n  for (int x = 0; x < 4; x++) {\n    pinMode(ledpin[x], OUTPUT); // Set LED pins as output\n  }\n  for (int x = 0; x < 4; x++) {\n    pinMode(button[x], INPUT); // Set pushbutton pins as inputs\n    digitalWrite(button[x], HIGH); // Enable internal pullup;\n                                   // pushbuttons start in high\n                                   // position; logic reversed\n  }\n  // Generate \"more randomness\" with randomArray for the output\n  // function so pattern is different each time\n  randomSeed(analogRead(0));\n  for (int thisNote = 0; thisNote < 13; thisNote ++) {\n    speakerpin.play(starttune[thisNote]); // Play the next note\n    if (thisNote == 0 || thisNote == 2 || thisNote == 4 ||\n        thisNote == 6) { // Hold the note\n      digitalWrite(ledpin[0], HIGH);\n    }\n    if (thisNote == 1 || thisNote == 3 || thisNote == 5 ||\n        thisNote == 7 || thisNote == 9 || thisNote == 11) {\n      digitalWrite(ledpin[1], HIGH);\n    }\n    if (thisNote == 8 || thisNote == 12) {\n      digitalWrite(ledpin[2], HIGH);\n    }\n    if (thisNote == 10) {\n      digitalWrite(ledpin[3], HIGH);\n    }\n    delay(duration2[thisNote]);\n    speakerpin.stop(); // Stop for the next note\n    digitalWrite(ledpin[0], LOW);\n    digitalWrite(ledpin[1], LOW);\n    digitalWrite(ledpin[2], LOW);\n    digitalWrite(ledpin[3], LOW);\n    delay(25);\n  }\n  delay(1000);\n}\n\nvoid loop() {\n  // Generate the array to be matched by the player\n  for (int y = 0; y <= 99; y++) {\n    digitalWrite(ledpin[0], HIGH);\n    digitalWrite(ledpin[1], HIGH);\n    digitalWrite(ledpin[2], HIGH);\n    digitalWrite(ledpin[3], HIGH);\n    // Play the next note\n    for (int thisNote = 0; thisNote < 6; thisNote ++) {\n      speakerpin.play(note[thisNote]); // Hold the note\n      delay(duration[thisNote]);       // Stop for the next note\n      speakerpin.stop();\n      delay(25);\n    }\n    digitalWrite(ledpin[0], LOW);\n    digitalWrite(ledpin[1], LOW);\n    digitalWrite(ledpin[2], LOW);\n    digitalWrite(ledpin[3], LOW);\n    delay(1000);\n    // Limited by the turn variable\n    for (int y = turn; y <= turn; y++) {\n      Serial.println(\"\");\n      Serial.print(\"Turn: \");\n      Serial.print(y);\n      Serial.println(\"\");\n      randomArray[y] = random(1, 5); // Assign a random number (1-4)\n      // Light LEDs in random order\n      for (int x = 0; x <= turn; x++) {\n        Serial.print(randomArray[x]);\n        for (int y = 0; y < 4; y++) {\n          if (randomArray[x] == 1 && ledpin[y] == 8) {\n            digitalWrite(ledpin[y], HIGH);\n            speakerpin.play(NOTE_G3, 100);\n            delay(400);\n            digitalWrite(ledpin[y], LOW);\n            delay(100);\n          }\n          if (randomArray[x] == 2 && ledpin[y] == 9) {\n            digitalWrite(ledpin[y], HIGH);\n            speakerpin.play(NOTE_A3, 100);\n            delay(400);\n            digitalWrite(ledpin[y], LOW);\n            delay(100);\n          }\n          if (randomArray[x] == 3 && ledpin[y] == 10) {\n            digitalWrite(ledpin[y], HIGH);\n            speakerpin.play(NOTE_B3, 100);\n            delay(400);\n            digitalWrite(ledpin[y], LOW);\n            delay(100);\n          }\n          if (randomArray[x] == 4 && ledpin[y] == 11) {\n            digitalWrite(ledpin[y], HIGH);\n            speakerpin.play(NOTE_C4, 100);\n            delay(400);\n            digitalWrite(ledpin[y], LOW);\n            delay(100);\n          }\n        }\n      }\n    }\n    input();\n  }\n}\n\n// Check whether input matches the pattern\nvoid input() {\n  for (int x = 0; x <= turn;) {\n    for (int y = 0; y < 4; y++) {\n      buttonstate = digitalRead(button[y]); // Check for button push\n      if (buttonstate == LOW && button[y] == 2) {\n        digitalWrite(ledpin[0], HIGH);\n        speakerpin.play(NOTE_G3, 100);\n        delay(200);\n        digitalWrite(ledpin[0], LOW);\n        inputArray[x] = 1;\n        delay(250);\n        Serial.print(\" \");\n        Serial.print(1);\n        // Check if value of user input matches the generated array\n        if (inputArray[x] != randomArray[x]) {\n          fail(); // If not, fail function is called\n        }\n        x++;\n      }\n      if (buttonstate == LOW && button[y] == 3) {\n        digitalWrite(ledpin[1], HIGH);\n        speakerpin.play(NOTE_A3, 100);\n        delay(200);\n        digitalWrite(ledpin[1], LOW);\n        inputArray[x] = 2;\n        delay(250);\n        Serial.print(\" \");\n        Serial.print(2);\n        if (inputArray[x] != randomArray[x]) {\n          fail();\n        }\n        x++;\n      }\n      if (buttonstate == LOW && button[y] == 4) {\n        digitalWrite(ledpin[2], HIGH);\n        speakerpin.play(NOTE_B3, 100);\n        delay(200);\n        digitalWrite(ledpin[2], LOW);\n        inputArray[x] = 3;\n        delay(250);\n        Serial.print(\" \");\n        Serial.print(3);\n        if (inputArray[x] != randomArray[x]) {\n          fail();\n        }\n        x++;\n      }\n      if (buttonstate == LOW && button[y] == 5) {\n        digitalWrite(ledpin[3], HIGH);\n        speakerpin.play(NOTE_C4, 100);\n        delay(200);\n        digitalWrite(ledpin[3], LOW);\n        inputArray[x] = 4;\n        delay(250);\n        Serial.print(\" \");\n        Serial.print(4);\n        if (inputArray[x] != randomArray[x]) {\n          fail();\n        }\n        x++;\n      }\n    }\n  }\n  delay(500);\n  turn++; // Increment turn count\n}\n\n// Function used if player fails to match the sequence\nvoid fail() {\n  for (int y = 0; y <= 2; y++) { // Flash lights to indicate failure\n    digitalWrite(ledpin[0], HIGH);\n    digitalWrite(ledpin[1], HIGH);\n    digitalWrite(ledpin[2], HIGH);\n    digitalWrite(ledpin[3], HIGH);\n    speakerpin.play(NOTE_G3, 300);\n    delay(200);\n    digitalWrite(ledpin[0], LOW);\n    digitalWrite(ledpin[1], LOW);\n    digitalWrite(ledpin[2], LOW);\n    digitalWrite(ledpin[3], LOW);\n    speakerpin.play(NOTE_C3, 300);\n    delay(200);\n  }\n  delay(500);\n  turn = -1; // Reset turn value to start the game again\n}\n```", "```\nconst int quietKnock = 10;\nconst int loudKnock = 100;\n```", "```\nconst int quietKnock = 10;\nconst int loudKnock = 100;\n```", "```\n/* Created 18 September 2012 by Scott Fitzgerald\n   Thanks to Federico Vanzati for improvements\n   http://arduino.cc/starterKit\n   This example code is part of the public domain.\n*/\n\n#include <Servo.h>\nServo servo9; // Pin connected to servo mpo\n\nconst int piezo = A0;    // Pin connected to piezo\nconst int switchPin = 2; // Pin connected to servo\nconst int yellowLed = 3; // Pin connected to yellow LED\nconst int greenLed = 4;  // Pin connected to green LED\nconst int redLed = 5;    // Pin connected to red LED\n\nint knockVal;   // Value for the knock strength\nint switchVal;\n\nconst int quietKnock = 10; // Set min value that will be accepted\nconst int loudKnock = 100; // Set max value that will be accepted\nboolean locked = false;    // A true or false variable\nint numberOfKnocks = 0;    // Value for number of knocks\n\nvoid setup() {\n  servo9.attach(9);\n  pinMode(yellowLed, OUTPUT);   // Set LED pins as outputs\n  pinMode(greenLed, OUTPUT);\n  pinMode(redLed, OUTPUT);\n  pinMode(switchPin, INPUT);    // Set servo pin as input\n  Serial.begin(9600);\n  digitalWrite(greenLed, HIGH); // Green LED is lit when the\n                                // sequence is correct\n  servo9.write(0);\n  Serial.println(\"The box is unlocked!\");\n}\n\nvoid loop() {\n  if (locked == false) {\n    switchVal = digitalRead(switchPin);\n    if (switchVal == HIGH) {\n      locked = true;\n      digitalWrite(greenLed, LOW);\n      digitalWrite(redLed, HIGH);\n      servo9.write(90);\n      Serial.println(\"The box is locked!\");\n      delay(1000);\n    }\n  }\n  if (locked == true) {\n    knockVal = analogRead(piezo); // Knock value is read by analog pin\n    if (numberOfKnocks < 3 && knockVal > 0) {\n      if (checkForKnock(knockVal) == true) { // Check for correct\n                                             // number of knocks\n        numberOfKnocks++;\n      }\n      Serial.print(3 - numberOfKnocks);\n      Serial.println(\" more knocks to go\");\n    }\n    if (numberOfKnocks >= 3) { // If 3 valid knocks are detected,\n                               // the servo moves\n      locked = false;\n      servo9.write(0);\n      delay(20);\n      digitalWrite(greenLed, HIGH);\n      digitalWrite(redLed, LOW);\n      Serial.println(\"The box is unlocked!\");\n    }\n  }\n}\n\nboolean checkForKnock(int value) { // Checks knock value\n  if (value > quietKnock && value < loudKnock) { // Value needs to be\n                                                 // between these\n    digitalWrite(yellowLed, HIGH);\n    delay(50);\n    digitalWrite(yellowLed, LOW);\n    Serial.print(\"Valid knock of value \");\n    Serial.println(value);\n    return true;\n  }\n  else { // If value is false then send this to the IDE serial\n    Serial.print(\"Bad knock value \");\n    Serial.println(value);\n    return false;\n  }\n}\n```"]