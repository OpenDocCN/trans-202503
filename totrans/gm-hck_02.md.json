["```\n// do this in some loop\nhealth = readMemory(game, HEALTH_LOCATION)\nif (health < 500)\n    pressButton(HEAL_BUTTON)\n```", "```\nlist<int> chain = {start, offset1, offset2[, ...]}\n```", "```\n   int readPointerChain(chain) {\n➊      ret = read(chain[0])\n       for i = 1, chain.len - 1, 1 {\n           offset = chain[i]\n           ret = read(ret + offset)\n       }\n       return ret\n   }\n```", "```\nlist<int> chain = {0xDEADBEEF, 0xAB, 0x10, 0xCC}\nvalue = readPointerPath(chain)\n// the function call unrolls to this\nret = read(0xDEADBEEF) //chain[0]\nret = read(ret + 0xAB)\nret = read(ret + 0x10)\nret = read(ret + 0xCC)\nint value = ret\n```", "```\n   list<int> pointerScan(target, maxAdd, maxDepth) {\n➊    for address = BASE, 0x7FFFFFF, 4 {\n           ret = rScan(address, target, maxAdd, maxDepth, 1)\n           if (ret.len > 0) {\n               ret.pushFront(address)\n               return ret\n           }\n      }\n      return {}\n   }\n   list<int> rScan(address, target, maxAdd, maxDepth, curDepth) {\n➋      for offset = 0, maxAdd, 4 {\n            value = read(address + offset)\n➌          if (value == target)\n                return list<int>(offset)\n        }\n➍      if (curDepth < maxDepth) {\n            curDepth++\n➎          for offset = 0, maxAdd, 4 {\n                ret = rScan(address + offset, target, maxAdd, maxDepth, curDepth) \n➏              if (ret.len > 0) {\n                    ret.pushFront(offset)\n➐                  return ret\n                }\n            }\n        }\n        return {}\n   }\n```", "```\n➊ BASEADDRESS = getAddress(\"Game.exe\")\n➋ function LocatePacketCreation(packetType)\n➌     for address = BASEADDRESS, (BASEADDRESS + 0x2ffffff) do\n           local push = readBytes(address, 1, false)\n           local type = readInteger(address + 1)\n           local call = readInteger(address + 5)\n➍         if (push == 0x68 and type == packetType and call == 0xE8) then\n               return address\n           end\n       end\n       return 0\n   end\n   FUNCTIONHEADER = { 0xCC, 0x55, 0x8B, 0xEC, 0x6A }\n➎ function LocateFunctionHead(checkAddress)\n       if (checkAddress == 0) then return 0 end \n➏     for address = checkAddress, (checkAddress - 0x1fff), -1 do\n           local match = true\n           local checkheader = readBytes(address, #FUNCTIONHEADER, true)\n➐         for i, v in ipairs(FUNCTIONHEADER) do\n               if (v ~= checkheader[i]) then\n                   match = false\n                   break\n               end\n           end\n➑         if (match) then return address + 1 end\n       end\n       return 0\n   end\n\n➒ local funcAddress = LocateFunctionHead(LocatePacketCreation(0x64))\n   if (funcAddress ~= 0) then\n       print(string.format(\"0x%x\",funcAddress))\n   else\n       print(\"Not found!\")\n   end\n```", "```\nPUSH type   ; Data is: 0x68 [4byte type]\nCALL offset ; Data is: 0xE8 [4byte offset]\n```", "```\nINT3         ; 0xCC\nPUSH EBP     ; 0x55\nMOV EBP, ESP ; 0x8B 0xEC\nPUSH [-1]    ; 0x6A 0xFF\n```", "```\nINT3          ; LocateFunctionHead back-tracked to here\nPUSH EBP      ;   and returned this address\nMOV EBP, ESP\nPUSH [-1]\n--snip--\nPUSH [0x64]   ; LocatePacketCreation returned this address\nCALL [something]\n```", "```\n   BASEADDRESS = getAddress(\"Game.exe\")\n➊ function findString(str)\n       local len = string.len(str)\n➋     local chunkSize = 4096\n➌     local chunkStep = chunkSize - len\n       print(\"Found '\" .. str .. \"' at:\")\n➍     for address = BASEADDRESS, (BASEADDRESS + 0x2ffffff), chunkStep do\n           local chunk = readBytes(address, chunkSize, true)\n            if (not chunk) then break end\n➎         for c = 0, chunkSize-len do \n➏             checkForString(address , chunk, c, str, len)\n           end\n       end\n   end\n   function checkForString(address, chunk, start, str, len)\n       for i = 1, len do\n           if (chunk[start+i] ~= string.byte(str, i)) then\n               return false\n           end\n       end\n➐     print(string.format(\"\\t0x%x\", address + start))\n   end\n\n➑ findString(\"hello\")\n➒ findString(\"world\")\n```"]