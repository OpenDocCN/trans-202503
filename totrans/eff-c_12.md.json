["```\n__declspec(deprecated)\n__attribute__((warn_unused_result))\nint func(const char *str)__attribute__((nonnull(1)));\n```", "```\n[[deprecated, nodiscard]]\nint func(\n  const char *str [[gnu::nonnull]]\n);\n```", "```\nvoid func() {\n  static const int size = 12;\n  int array[size]; // might be a VLA\n}\n```", "```\nvoid func() {\n  static constexpr int Size = 12;\n  int Array[Size]; // never a VLA\n}\n```", "```\nenum E : unsigned short {\n  Valid = 0, // has type unsigned short\n  NotValid = 0x1FFFF // error, too big\n};\n\n// can forward declare with fixed type\nenum F : int;\n```", "```\n// has underlying type unsigned long\nenum G {\n  BiggerThanInt = 0xFFFF'FFFF'0000L,\n};\n```", "```\nconst auto l = 0L; // l is const long\nauto huh = \"test\"; // huh is char *, not char[5] or const char *\nvoid func();\nauto f = func; // f is void (*)()\nauto x = (struct S){  // x is struct S\n  1, 2, 3.0\n};\n#define swap(a, b) \\\n  do {auto t = (a); (a) = (b); (b) = t;} \\\n  while (0)\n```", "```\nint f();\nint f(a, b) int a, b; {return 0;}\n```", "```\nunsigned char buffer[] = {\n#embed \"/dev/urandom\" limit(32) // embeds 32 chars from /dev/urandom\n};\nstruct FileObject {\n  unsigned int MagicNumber;\n  unsigned _BitInt(8) RGBA[4];\n  struct Point {\n    unsigned int x, y;\n  } UpperLeft, LowerRight;\n} Obj = {\n#if __has_embed(SomeFile.bin) == __STDC_EMBED_FOUND__\n// embeds contents of file as struct\n// initialization elements\n#embed \"SomeFile.bin\"\n#endif\n};\n```", "```\nunsigned int add(\n  unsigned int L, unsigned int R)\n{\n  unsigned int LC = L & 0xF;\n  unsigned int RC = R & 0xF;\n  unsigned int Res = LC + RC;\n  return Res & 0xF;\n}\n```", "```\nunsigned _BitInt(4) add(\n  unsigned _BitInt(4) L,\n  unsigned _BitInt(4) R)\n{\n  return L + R;\n}\n```", "```\n#include <stdckdint.h> // new header\n\nbool ckd_add(Type1 *Result, Type2 L, Type3 R);\nbool ckd_sub(Type1 *Result, Type2 L, Type3 R);\nbool ckd_mul(Type1 *Result, Type2 L, Type3 R);\n```", "```\n#include <stdlib.h>\nenum Color {Red, Green, Blue};\nint func(enum Color C) {\n  switch (C) {\n    case Red: return do_red();\n    case Green: return do_green();\n    case Blue: return do_blue();\n  }\n  unreachable(); // unhandled value\n}\n```", "```\n#include <stdbit.h>\nvoid func(uint32_t V) {\n  int N = stdc_leading_zeros(V);\n  // use the leading zero count N\n}\n```", "```\nvoid func(uint32_t V) {\n  int N = 32;\n  unsigned R;\n  R = V >> 16;\n  if (R != 0) {N --= 16; V = R;}\n  R = V >> 8;\n  if (R != 0) {N --= 8; V = R;}\n  R = V >> 4;\n  if (R != 0) {N --= 4; V = R;}\n  R = V >> 2;\n  if (R != 0) {N --= 2; V = R;}\n  R = V >> 1;\n  if (R != 0) N -= 2;\n  else        N -= V;\n  // use the leading zero count N\n}\n```"]