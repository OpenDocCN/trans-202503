["```\n#include \"rdwrn.h\"\n\nssize_t `readn`(int *fd*, void **buffer*, size_t *count*);\n```", "```\nssize_t `writen`(int fd, void **buffer*, size_t *count*);\n```", "```\n`sockets/rdwrn.c`\n#include <unistd.h>\n#include <errno.h>\n#include \"rdwrn.h\"                      /* Declares readn() and writen() */\n\nssize_t\nreadn(int fd, void *buffer, size_t n)\n{\n    ssize_t numRead;                    /* # of bytes fetched by last read() */\n    size_t totRead;                     /* Total # of bytes read so far */\n    char *buf;\n\n    buf = buffer;                       /* No pointer arithmetic on \"void *\" */\n    for (totRead = 0; totRead < n; ) {\n        numRead = read(fd, buf, n - totRead);\n\n        if (numRead == 0)               /* EOF */\n            return totRead;             /* May be 0 if this is first read() */\n        if (numRead == -1) {\n            if (errno == EINTR)\n                continue;               /* Interrupted --> restart read() */\n            else\n                return -1;              /* Some other error */\n        }\n        totRead += numRead;\n        buf += numRead;\n    }\n    return totRead;                     /* Must be 'n' bytes if we get here */\n}\n\nssize_t\nwriten(int fd, const void *buffer, size_t n)\n{\n    ssize_t numWritten;                 /* # of bytes written by last write() */\n    size_t totWritten;                  /* Total # of bytes written so far */\n    const char *buf;\n\n    buf = buffer;                       /* No pointer arithmetic on \"void *\" */\n    for (totWritten = 0; totWritten < n; ) {\n        numWritten = write(fd, buf, n - totWritten);\n\n        if (numWritten <= 0) {\n            if (numWritten == -1 && errno == EINTR)\n                continue;               /* Interrupted --> restart write() */\n            else\n                return -1;              /* Some other error */\n        }\n        totWritten += numWritten;\n        buf += numWritten;\n    }\n    return totWritten;                  /* Must be 'n' bytes if we get here */\n}\n      `sockets/rdwrn.c`\n```", "```\n#include <sys/socket.h>\n\nint `shutdown`(int *sockfd*, int *how*);\n```", "```\nfd2 = dup(sockfd);\nclose(sockfd);\n```", "```\nfd2 = dup(sockfd);\nshutdown(sockfd, SHUT_RDWR);\n```", "```\n$ `cat > tell-tale-heart.txt`                           *Create a file for testing*\n`It is impossible to say how the idea entered my brain;`\n`but once conceived, it haunted me day and night.`\n*Type Control-D*\n$ `./is_echo_cl tekapo < tell-tale-heart.txt`\nIt is impossible to say how the idea entered my brain;\nbut once conceived, it haunted me day and night.\n```", "```\n`sockets/is_echo_cl.c`\n#include \"inet_sockets.h\"\n#include \"tlpi_hdr.h\"\n\n#define BUF_SIZE 100\n\nint\nmain(int argc, char *argv[])\n{\n    int sfd;\n    ssize_t numRead;\n    char buf[BUF_SIZE];\n\n    if (argc != 2 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s host\\n\", argv[0]);\n\n    sfd = inetConnect(argv[1], \"echo\", SOCK_STREAM);\n    if (sfd == -1)\n        errExit(\"inetConnect\");\n\n    switch (fork()) {\n    case -1:\n        errExit(\"fork\");\n\n    case 0:             /* Child: read server's response, echo on stdout */\n        for (;;) {\n            numRead = read(sfd, buf, BUF_SIZE);\n            if (numRead <= 0)           /* Exit on EOF or error */\n                break;\n            printf(\"%.*s\", (int) numRead, buf);\n        }\n        exit(EXIT_SUCCESS);\n\n    default:            /* Parent: write contents of stdin to socket */\n        for (;;) {\n            numRead = read(STDIN_FILENO, buf, BUF_SIZE);\n            if (numRead <= 0)           /* Exit loop on EOF or error */\n                break;\n            if (write(sfd, buf, numRead) != numRead)\n                fatal(\"write() failed\");\n        }\n\n        /* Close writing channel, so server sees EOF */\n\n        if (shutdown(sfd, SHUT_WR) == -1)\n            errExit(\"shutdown\");\n        exit(EXIT_SUCCESS);\n    }\n}\n      `sockets/is_echo_cl.c`\n```", "```\n#include <sys/socket.h>\n\nssize_t `recv`(int *sockfd*, void **buffer*, size_t *length*, int *flags*);\n```", "```\nssize_t `send`(int *sockfd*, const void **buffer*, size_t *length*, int *flags*);\n```", "```\nwhile ((n = read(diskfilefd, buf, BUZ_SIZE)) > 0)\n    write(sockfd, buf, n);\n```", "```\n#include <sys/sendfile.h>\n\nssize_t `sendfile`(int *out_fd*, int *in_fd*, off_t **offset*, size_t *count*);\n```", "```\nint optval;\n\n/* Enable TCP_CORK option on 'sockfd' - subsequent TCP output is corked\n   until this option is disabled. */\n\noptval = 1;\nsetsockopt(sockfd, IPPROTO_TCP, TCP_CORK, &optval, sizeof(optval));\n\nwrite(sockfd, ...);                     /* Write HTTP headers */\nsendfile(sockfd, ...);                  /* Send page data */\n\n/* Disable TCP_CORK option on 'sockfd' - corked output is now transmitted\n   in a single TCP segment. */\n\noptval = 0\nsetsockopt(sockfd, IPPROTO_TCP, TCP_CORK, &optval, sizeof(optval));\n```", "```\n#include <sys/socket.h>\n\nint `getsockname`(int *sockfd*, struct sockaddr **addr*, socklen_t **addrlen*);\nint `getpeername`(int *sockfd*, struct sockaddr **addr*, socklen_t **addrlen*);\n```", "```\n$ `./socknames 55555 &`\ngetsockname(connFd):   (localhost, 32835)\ngetsockname(acceptFd): (localhost, 55555)\ngetpeername(connFd):   (localhost, 55555)\ngetpeername(acceptFd): (localhost, 32835)\n[1] 8171\n$ `netstat -a | egrep '(Address|55555)'`\nProto Recv-Q Send-Q Local Address    Foreign Address  State\ntcp        0      0 *:55555          *:*              LISTEN\ntcp        0      0 localhost:32835  localhost:55555  ESTABLISHED\ntcp        0      0 localhost:55555  localhost:32835  ESTABLISHED\n```", "```\n`sockets/socknames.c`\n#include \"inet_sockets.h\"               /* Declares our socket functions */\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int listenFd, acceptFd, connFd;\n    socklen_t len;                      /* Size of socket address buffer */\n    void *addr;                         /* Buffer for socket address */\n    char addrStr[IS_ADDR_STR_LEN];\n\n    if (argc != 2 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s service\\n\", argv[0]);\n\n    listenFd = inetListen(argv[1], 5, &len);\n    if (listenFd == -1)\n        errExit(\"inetListen\");\n\n    connFd = inetConnect(NULL, argv[1], SOCK_STREAM);\n    if (connFd == -1)\n        errExit(\"inetConnect\");\n\n    acceptFd = accept(listenFd, NULL, NULL);\n    if (acceptFd == -1)\n        errExit(\"accept\");\n\n    addr = malloc(len);\n    if (addr == NULL)\n        errExit(\"malloc\");\n\n    if (getsockname(connFd, addr, &len) == -1)\n        errExit(\"getsockname\");\n    printf(\"getsockname(connFd):   %s\\n\",\n            inetAddressStr(addr, len, addrStr, IS_ADDR_STR_LEN));\n    if (getsockname(acceptFd, addr, &len) == -1)\n        errExit(\"getsockname\");\n    printf(\"getsockname(acceptFd): %s\\n\",\n            inetAddressStr(addr, len, addrStr, IS_ADDR_STR_LEN));\n\n    if (getpeername(connFd, addr, &len) == -1)\n        errExit(\"getpeername\");\n    printf(\"getpeername(connFd):   %s\\n\",\n            inetAddressStr(addr, len, addrStr, IS_ADDR_STR_LEN));\n    if (getpeername(acceptFd, addr, &len) == -1)\n        errExit(\"getpeername\");\n    printf(\"getpeername(acceptFd): %s\\n\",\n            inetAddressStr(addr, len, addrStr, IS_ADDR_STR_LEN));\n\n    sleep(30);                          /* Give us time to run netstat(8) */\n    exit(EXIT_SUCCESS);\n}\n     `sockets/socknames.c`\n```", "```\n$ `netstat -a --inet`\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address    Foreign Address  State\ntcp        0      0 *:50000          *:*              LISTEN\ntcp        0      0 *:55000          *:*              LISTEN\ntcp        0      0 localhost:smtp   *:*              LISTEN\ntcp        0      0 localhost:32776  localhost:58000  TIME_WAIT\ntcp    34767      0 localhost:55000  localhost:32773  ESTABLISHED\ntcp        0 115680 localhost:32773  localhost:55000  ESTABLISHED\nudp        0      0 localhost:61000  localhost:60000  ESTABLISHED\nudp      684      0 *:60000          *:*\n```", "```\n*src* > *dst*: *flags data-seqno ack window urg* <*options*>\n```", "```\n$ `tcpdump -t -N 'port 55555'`\nIP pukaki.60391 > tekapo.55555: S 3412991013:3412991013(0) win 5840\nIP tekapo.55555 > pukaki.60391: S 1149562427:1149562427(0) ack 3412991014 win 5792\nIP pukaki.60391 > tekapo.55555: . ack 1 win 5840\n```", "```\nIP pukaki.60391 > tekapo.55555: P 1:17(16) ack 1 win 5840\nIP tekapo.55555 > pukaki.60391: . ack 17 win 1448\nIP tekapo.55555 > pukaki.60391: P 1:5(4) ack 17 win 1448\nIP pukaki.60391 > tekapo.55555: . ack 5 win 5840\nIP pukaki.60391 > tekapo.55555: P 17:49(32) ack 5 win 5840\nIP tekapo.55555 > pukaki.60391: . ack 49 win 1448\nIP tekapo.55555 > pukaki.60391: P 5:9(4) ack 49 win 1448\nIP pukaki.60391 > tekapo.55555: . ack 9 win 5840\n```", "```\nIP pukaki.60391 > tekapo.55555: F 49:49(0) ack 9 win 5840\nIP tekapo.55555 > pukaki.60391: . ack 50 win 1448\nIP tekapo.55555 > pukaki.60391: F 9:9(0) ack 50 win 1448\nIP pukaki.60391 > tekapo.55555: . ack 10 win 5840\n```", "```\n#include <sys/socket.h>\n\nint `getsockopt`(int *sockfd*, int *level*, int *optname*, void **optval*,\n               socklen_t **optlen*);\nint `setsockopt`(int *sockfd*, int *level*, int *optname*, const void **optval*,\n               socklen_t *optlen*);\n```", "```\nint optval;\nsocklen_t optlen;\n\noptlen = sizeof(optval);\nif (getsockopt(sfd, SOL_SOCKET, SO_TYPE, &optval, &optlen) == -1)\n    errExit(\"getsockopt\");\n```", "```\n{ local-IP-address, local-port, foreign-IP-address, foreign-port }\n```", "```\nint sockfd, optval;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1)\n        errExit(\"socket\");\n\n    optval = 1;\n    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &optval,\n            sizeof(optval)) == -1)\n        errExit(\"socket\");\n\n    if (bind(sockfd, &addr, addrlen) == -1)\n        errExit(\"bind\");\n    if (listen(sockfd, backlog) == -1)\n        errExit(\"listen\");\n```", "```\n    2 * RTT + SPT\n    ```", "```\n    RTT + SPT\n    ```", "```\nsocket(AF_INET, SOCK_STREAM, IPPROTO_SCTP);\n```", "```\n    $ `./is_shell_cl` ``*`server-host`*```", "```*`some-shell-command`*```"]