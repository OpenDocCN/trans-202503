- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: CARRIAGE RETURN LINE FEED INJECTION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回车换行符注入**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Some vulnerabilities allow users to input encoded characters that have special
    meanings in HTML and HTTP responses. Normally, applications sanitize these characters
    when they are included in user input to prevent attackers from maliciously manipulating
    HTTP messages, but in some cases, applications either forget to sanitize input
    or fail to do so properly. When this happens, servers, proxies, and browsers may
    interpret the special characters as code and alter the original HTTP message,
    allowing attackers to manipulate an application’s behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些漏洞允许用户输入在HTML和HTTP响应中具有特殊含义的编码字符。通常，应用程序会对这些字符进行清理，以防止攻击者恶意篡改HTTP消息，但在某些情况下，应用程序要么忘记清理输入，要么未能正确清理。当这种情况发生时，服务器、代理和浏览器可能会将特殊字符解释为代码，并改变原始HTTP消息，从而允许攻击者操控应用程序的行为。
- en: Two examples of encoded characters are `%0D` and `%0A`, which represent `\n`
    (a carriage return) and `\r` (a line feed). These encoded characters are commonly
    referred to as *carriage return line feeds (CRLFs)*. Servers and browsers rely
    on CRLF characters to identify sections of HTTP messages, such as headers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编码字符的两个示例是`%0D`和`%0A`，分别表示`\n`（回车）和`\r`（换行符）。这些编码字符通常被称为*回车换行符（CRLF）*。服务器和浏览器依赖CRLF字符来识别HTTP消息的各个部分，例如头部。
- en: 'A *carriage return line feed injection (CRLF injection)* vulnerability occurs
    when an application doesn’t sanitize user input or does so improperly. If attackers
    can inject CRLF characters into HTTP messages, they can achieve the two types
    of attacks we’ll discuss in this chapter: HTTP request smuggling and HTTP response
    splitting attacks. Additionally, you can usually chain a CRLF injection with another
    vulnerability to demonstrate a greater impact in a bug report, as I’ll demonstrate
    later in the chapter. For the purpose of this book, we’ll only provide examples
    of how to exploit a CRLF injection to achieve HTTP request smuggling.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*回车换行注入（CRLF注入）*漏洞发生在应用程序未能清理用户输入或清理不当的情况下。如果攻击者能够将CRLF字符注入到HTTP消息中，他们可以实现我们将在本章讨论的两种攻击：HTTP请求走私和HTTP响应分割攻击。此外，通常你可以将CRLF注入与其他漏洞链式利用，在漏洞报告中展示更大的影响，正如我在本章后面将演示的那样。出于本书的目的，我们将仅提供如何利用CRLF注入实现HTTP请求走私的示例。'
- en: '**HTTP Request Smuggling**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HTTP请求走私**'
- en: '*HTTP request smuggling* occurs when an attacker exploits a CRLF injection
    vulnerability to append a second HTTP request to the initial, legitimate request.
    Because the application does not anticipate the injected CRLF, it initially treats
    the two requests as a single request. The request is passed through the receiving
    server (typically a proxy or firewall), processed, and then sent on to another
    server, such as an application server that performs the actions on behalf of the
    site. This type of vulnerability can result in cache poisoning, firewall evasion,
    request hijacking, or HTTP response splitting.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTTP请求走私*发生在攻击者利用CRLF注入漏洞将第二个HTTP请求附加到最初的合法请求时。由于应用程序没有预料到注入的CRLF，它最初将这两个请求当作一个请求处理。该请求会通过接收服务器（通常是代理或防火墙）传递，处理后再发送到另一个服务器，例如执行站点操作的应用程序服务器。这种类型的漏洞可能导致缓存中毒、防火墙绕过、请求劫持或HTTP响应分割。'
- en: In *cache poisoning*, an attacker can change entries in an application’s cache
    and serve malicious pages instead of a proper page. *Firewall evasion* occurs
    when a request is crafted using CRLFs to avoid security checks. In a *request-hijacking*
    situation, an attacker can steal `httponly` cookies and HTTP authentication information
    with no interaction between the attacker and client. These attacks work because
    servers interpret CRLF characters as indicators of where HTTP headers start, so
    if they see another header, they interpret it as the start of a new HTTP request.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在*缓存中毒*中，攻击者可以修改应用程序缓存中的条目，提供恶意页面而不是正确的页面。在*防火墙绕过*中，攻击者通过使用CRLF字符构造请求以绕过安全检查。在*请求劫持*情况下，攻击者可以在攻击者与客户端之间没有任何交互的情况下窃取`httponly`
    cookies和HTTP认证信息。这些攻击之所以有效，是因为服务器将CRLF字符解释为HTTP头开始的标志，因此，如果它们看到另一个头部，它们会将其解释为新HTTP请求的开始。
- en: '*HTTP response splitting*, which we’ll focus on in the rest of this chapter,
    allows an attacker to split a single HTTP response by injecting new headers that
    browsers interpret. An attacker can exploit a split HTTP response using one of
    two methods depending on the nature of the vulnerability. Using the first method,
    an attacker uses CRLF characters to complete the initial server response and insert
    additional headers to generate a new HTTP response. However, sometimes an attacker
    can only modify a response and not inject a completely new HTTP response. For
    example, they can only inject a limited number of characters. This leads to the
    second method of exploiting response splitting, inserting new HTTP response headers,
    such as a `Location` header. Injecting a `Location` header would allow an attacker
    to chain the CRLF vulnerability with a redirect, sending a target to a malicious
    website, or cross-site scripting (XSS), an attack we’ll cover in [Chapter 7](ch07.xhtml#ch07).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTTP 响应拆分*，本章接下来的内容将重点讨论，它允许攻击者通过注入新的浏览器可以解析的头部，来拆分单个 HTTP 响应。攻击者可以根据漏洞的性质，使用两种方法之一来利用响应拆分。第一种方法中，攻击者使用
    CRLF 字符完成初始服务器响应，并插入额外的头部，生成新的 HTTP 响应。然而，有时攻击者只能修改响应，而无法注入完全新的 HTTP 响应。例如，他们可能只能注入有限数量的字符。这导致了第二种利用响应拆分的方法，即插入新的
    HTTP 响应头，例如 `Location` 头。注入 `Location` 头将允许攻击者将 CRLF 漏洞与重定向结合，发送目标到恶意网站，或者跨站脚本攻击（XSS），这是我们将在[第7章](ch07.xhtml#ch07)中讨论的攻击。'
- en: '**v.shopify.com Response Splitting**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**v.shopify.com 响应拆分**'
- en: '**Difficulty:** Medium'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *v.shopify.com/last_shop?<YOURSITE>.myshopify.com*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *v.shopify.com/last_shop?<YOURSITE>.myshopify.com*'
- en: '**Source:** *[https://hackerone.com/reports/106427/](https://hackerone.com/reports/106427/)*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/106427/](https://hackerone.com/reports/106427/)*'
- en: '**Date reported:** December 22, 2015'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年12月22日'
- en: '**Bounty paid:** $500'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖金支付：** $500'
- en: 'In December 2015, HackerOne user krankopwnz reported that Shopify wasn’t validating
    the shop parameter passed into the URL *v.shopify.com/last_shop?<YOURSITE>.myshopify.com*.
    Shopify sent a `GET` request to this URL in order to set a cookie that recorded
    the last store a user had logged in to. As a result, an attacker could include
    the CRLF characters `%0d%0a` (capitalization doesn’t matter to encoding) in the
    URL as part of the `last_shop` parameter. When these characters were submitted,
    Shopify would use the full `last_shop` parameter to generate new headers in the
    HTTP response. Here is the malicious code krankopwnz injected as part of a shop
    name to test whether this exploit would work:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年12月，HackerOne 用户 krankopwnz 报告称，Shopify 未验证传递到 URL 中的 shop 参数 *v.shopify.com/last_shop?<YOURSITE>.myshopify.com*。Shopify
    向该 URL 发送了一个 `GET` 请求，以设置记录用户最后一次登录的商店的 cookie。因此，攻击者可以在 URL 中将 CRLF 字符 `%0d%0a`（编码时大小写无关）作为
    `last_shop` 参数的一部分进行注入。当这些字符被提交时，Shopify 会使用完整的 `last_shop` 参数生成新的 HTTP 响应头。以下是
    krankopwnz 为测试该漏洞是否有效而注入的恶意代码，作为商店名称的一部分：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because Shopify used the unsanitized `last_shop` parameter to set a cookie in
    the HTTP response, the response included content that the browser interpreted
    as two responses. The `%20` characters represent encoded spaces, which are decoded
    when the response is received.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Shopify 使用未经清理的 `last_shop` 参数在 HTTP 响应中设置了 cookie，响应中包含了浏览器将其解释为两个响应的内容。`%20`
    字符代表编码后的空格，在响应接收时会被解码。
- en: 'The response received by the browser was decoded to:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器接收到的响应被解码为：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first part of the response would appear after the original HTTP headers.
    The content length of the original response is declared as `0` ➊, which tells
    the browser no content is in the response body. Next, a CRLF starts a new line
    and new headers. The text sets up the new header information to tell the browser
    there is a second response that is HTML and that its length is `19`. Then the
    header information gives the browser HTML to render at ➋. When a malicious attacker
    uses the injected HTTP header, a variety of vulnerabilities are possible; these
    include XSS, which we will cover in [Chapter 7](ch07.xhtml#ch07).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 响应的第一部分将在原始 HTTP 头之后出现。原始响应的内容长度被声明为`0` ➊，这告诉浏览器响应体中没有内容。接下来，一个 CRLF 开始了新的一行和新的头部。文本设置了新的头部信息，告诉浏览器有第二个响应，它是
    HTML 格式的，并且其长度为`19`。然后，头部信息向浏览器提供了渲染 HTML 的内容 ➋。当恶意攻击者使用注入的 HTTP 头时，可能会出现各种漏洞，包括
    XSS（跨站脚本攻击），我们将在[第7章](ch07.xhtml#ch07)中讨论。
- en: '***Takeaways***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重点总结***'
- en: Be on the lookout for opportunities where a site accepts input that it uses
    as part of its return headers, particularly when it’s setting cookies. If you
    see this behavior on a site, try submitting `%0D%0A` (or just `%0A%20` in Internet
    Explorer) to check whether the site is properly protecting against CRLF injections.
    If it isn’t, test to see whether you’re able to add new headers or an entire additional
    HTTP response. This vulnerability is best exploited when it occurs with little
    user interaction, such as in a `GET` request.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 留意那些接受输入并将其作为返回头部的一部分使用的站点，特别是当它们设置cookie时。如果你在一个站点上发现这种行为，尝试提交`%0D%0A`（或者在Internet
    Explorer中仅使用`%0A%20`）来检查该站点是否正确防护了CRLF注入。如果没有，测试是否能够添加新的头部或整个HTTP响应。当这种漏洞发生时，通常用户交互很少，例如在`GET`请求中，最容易被利用。
- en: '**Twitter HTTP Response Splitting**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Twitter HTTP响应分割**'
- en: '**Difficulty:** High'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 高'
- en: '**URL:** *https://twitter.com/i/safety/report_story/*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *https://twitter.com/i/safety/report_story/*'
- en: '**Source:** *[https://hackerone.com/reports/52042/](https://hackerone.com/reports/52042/)*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/52042/](https://hackerone.com/reports/52042/)*'
- en: '**Date reported:** March 15, 2015'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年3月15日'
- en: '**Bounty paid:** $3,500'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付悬赏：** $3,500'
- en: When you’re looking for vulnerabilities, remember to think outside the box and
    submit encoded values to see how a site handles the input. In some cases, sites
    will protect against CRLF injection by using a blacklist. In other words, the
    site will check for any blacklisted characters in inputs, then respond accordingly
    by removing those characters or not allowing the HTTP request to be made. However,
    an attacker can sometimes circumvent a blacklist by using character encoding.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找漏洞时，记得要跳出常规思维，提交编码值以查看站点如何处理输入。在某些情况下，站点会通过使用黑名单来防止CRLF注入。换句话说，站点会检查输入中的任何黑名单字符，然后相应地删除这些字符或不允许HTTP请求被发送。然而，攻击者有时可以通过使用字符编码绕过黑名单。
- en: In March 2015, FileDescriptor manipulated how Twitter handled character encoding
    to find a vulnerability that allowed him to set a cookie through an HTTP request.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年3月，FileDescriptor通过操控Twitter处理字符编码的方式，发现了一个漏洞，使他能够通过HTTP请求设置一个cookie。
- en: The HTTP request that FileDescriptor tested included a `reported_tweet_id` parameter
    when sent to *https://twitter.com/i/safety/report_story/* (a Twitter relic that
    allowed users to report inappropriate ads). When responding, Twitter would also
    return a cookie that included the parameter submitted with the HTTP request. During
    his tests, FileDescriptor noted that the CR and LF characters were blacklisted
    and sanitized. Twitter would replace any LFs with a space and send back an HTTP
    400 (Bad Request Error) when it received any CRs, thus protecting against CRLF
    injections. But FileDescriptor knew of a Firefox bug that incorrectly decoded
    cookies and potentially could allow users to inject malicious payloads to a website.
    The knowledge of this bug led him to test whether a similar bug could exist on
    Twitter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: FileDescriptor测试的HTTP请求包含了一个`reported_tweet_id`参数，当发送到*https://twitter.com/i/safety/report_story/*（一个允许用户报告不当广告的Twitter遗留页面）时。响应时，Twitter还会返回一个包含HTTP请求提交参数的cookie。在他的测试中，FileDescriptor注意到CR和LF字符被列入黑名单并进行了清理。Twitter会将任何LF字符替换为空格，并在收到任何CR时返回HTTP
    400（错误请求），从而防止CRLF注入。但FileDescriptor知道一个Firefox漏洞，错误地解码了cookie，可能允许用户向网站注入恶意载荷。了解这个漏洞后，他测试了Twitter上是否也存在类似的漏洞。
- en: In the Firefox bug, Firefox would strip any Unicode characters in cookies outside
    of the ASCII character range. However, Unicode characters can consist of multiple
    bytes. If certain bytes in a multibyte character were stripped, the remaining
    bytes could result in malicious characters being rendered on a web page.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox漏洞中，Firefox会剥离cookie中所有超出ASCII字符范围的Unicode字符。然而，Unicode字符可以由多个字节组成。如果多字节字符中的某些字节被剥离，剩余的字节可能导致恶意字符在网页上被渲染。
- en: Inspired by the Firefox bug, FileDescriptor tested whether an attacker could
    sneak a malicious character through Twitter’s blacklist using the same multibyte
    character technique. So FileDescriptor found a Unicode character whose encoding
    ended with `%0A` (a LF) but whose other bytes were not included in the HTTP character
    set. He used the Unicode character ![Image](../images/f0053-01.jpg), which is
    hex encoded as U+560A (`56 0A`). But when this character is used in a URL, it
    is URL encoded with UTF-8 as `%E5%98%8A`. These three bytes, `%E3`, `%98`, `%8A`,
    circumvented Twitter’s blacklist because they are not malicious characters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 受 Firefox 漏洞的启发，FileDescriptor 测试了攻击者是否能够通过 Twitter 的黑名单，利用相同的多字节字符技术悄悄传递恶意字符。因此，FileDescriptor
    找到了一种 Unicode 字符，其编码以 `%0A`（换行符 LF）结尾，但其其他字节不包含在 HTTP 字符集内。他使用了 Unicode 字符 ![Image](../images/f0053-01.jpg)，该字符的十六进制编码为
    U+560A（`56 0A`）。但当此字符用于 URL 中时，它会被 UTF-8 编码为 `%E5%98%8A`。这三个字节 `%E3`、`%98`、`%8A`
    绕过了 Twitter 的黑名单，因为它们不是恶意字符。
- en: When FileDescriptor submitted this value, he found that Twitter wouldn’t sanitize
    the URL-encoded character but would still decode the UTF-8 `%E5%98%8A` value back
    to its Unicode value `56 0A`. Twitter would drop the `56` as an invalid character,
    leaving the line feed characters `0A` untouched. In addition, he found that the
    character ![Image](../images/f0053-02.jpg) (which is encoded to `56 0D`) could
    be used to insert the necessary carriage return (`%0D`) into the HTTP response
    as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当 FileDescriptor 提交这个值时，他发现 Twitter 不会清理 URL 编码字符，但会将 UTF-8 编码的 `%E5%98%8A`
    解码回其 Unicode 值 `56 0A`。Twitter 会丢弃 `56` 作为无效字符，留下换行符 `0A` 不变。此外，他还发现字符 ![Image](../images/f0053-02.jpg)（它编码为
    `56 0D`）也可以用来将必要的回车符 (`%0D`) 插入 HTTP 响应中。
- en: 'Once he confirmed that the method worked, FileDescriptor passed the value `%E5%98%8A%E5%98%8DSet-Cookie:%20test`
    into Twitter’s URL parameter. Twitter would decode the characters, strip the out-of-range
    characters, and leave `%0A` and `%0D` in the HTTP request, resulting in the value
    `%0A%0DSet-Cookie:%20test`. The CRLF would split the HTTP response into two so
    the second response would consist of just the `Set-Cookie: test` value, which
    is the HTTP header used to set cookies.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦他确认该方法有效，FileDescriptor 将值 `%E5%98%8A%E5%98%8DSet-Cookie:%20test` 传入 Twitter
    的 URL 参数。Twitter 会解码字符，去除超出范围的字符，并保留 `%0A` 和 `%0D` 在 HTTP 请求中，最终结果为值 `%0A%0DSet-Cookie:%20test`。CRLF
    会将 HTTP 响应分成两部分，因此第二个响应仅包含 `Set-Cookie: test` 值，这是用于设置 cookie 的 HTTP 头部。'
- en: 'CRLF attacks can be even more dangerous when they allow for XSS attacks. While
    the details of exploiting XSS aren’t important for this example, it should be
    noted that FileDescriptor went further with this proof of concept. He demonstrated
    to Twitter how this CRLF vulnerability could be exploited to execute malicious
    JavaScript with the following URL:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CRLF 攻击在允许 XSS 攻击时可能更加危险。虽然利用 XSS 的细节在这个例子中并不重要，但应该注意到，FileDescriptor 在这个概念验证的基础上进一步展开了。他向
    Twitter 演示了如何利用这个 CRLF 漏洞执行恶意 JavaScript，使用以下 URL：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The important details are the 3-byte values peppered throughout: `%E5%98%8A`,
    `%E5%98%8D`, `%E5%98%BC`, and `%E5%98%BE`. After character stripping, these values
    are decoded to `%0A`, `%0D`, `%3C`, and `%3E`, respectively, all of which are
    HTML special characters. The byte `%3C` is the left angle bracket (`<`), and `%3E`
    is the right angle bracket (`>`).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的细节是分布在各处的 3 字节值：`%E5%98%8A`、`%E5%98%8D`、`%E5%98%BC` 和 `%E5%98%BE`。经过字符去除后，这些值分别解码为
    `%0A`、`%0D`、`%3C` 和 `%3E`，它们都是 HTML 特殊字符。字节 `%3C` 是左尖括号 (`<`)，而 `%3E` 是右尖括号 (`>`)。
- en: 'The other characters in the URL are included in the HTTP response as written.
    Therefore, when the encoded byte characters are decoded with line breaks, the
    header looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: URL 中的其他字符按原样包含在 HTTP 响应中。因此，当这些编码的字节字符经过解码并带有换行符时，头部显示如下：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The payload is decoded to inject the header `content-type text/html`, which
    tells the browser the response will contain HTML. The `Location` header uses a
    `<svg>` tag to execute the JavaScript code `alert(innerHTML)`. The alert creates
    an alert box that contains the contents of the web page using the DOM `innerHTML`
    property (the `innerHTML` property returns the HTML of a given element). In this
    case, the alert would include the logged-in user’s session and authentication
    cookies, demonstrating that an attacker could steal these values. Stealing the
    authentication cookie would have allowed an attacker to log into a target’s account,
    which explains why FileDescriptor was awarded a $3,500 bounty for finding this
    vulnerability.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 负载被解码后，注入了`content-type text/html`头部，这告诉浏览器响应将包含HTML。`Location`头使用`<svg>`标签执行JavaScript代码`alert(innerHTML)`。该警告框会创建一个包含网页内容的弹窗，使用DOM的`innerHTML`属性（`innerHTML`属性返回给定元素的HTML）。在这种情况下，警告框将包含已登录用户的会话和认证Cookie，表明攻击者可以窃取这些值。窃取认证Cookie可以让攻击者登录目标账户，这也解释了为什么FileDescriptor因发现此漏洞而获得了3500美元的赏金。
- en: '***Takeaways***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: If a server is somehow sanitizing the characters `%0D%0A`, think about how the
    website might be doing that and whether you can circumvent its efforts, such as
    through double encoding. You can test whether the site is mishandling extra values
    by passing multibyte characters and determining whether they are decoded into
    other characters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器以某种方式清理字符`%0D%0A`，请考虑网站可能是如何进行清理的，并思考是否能绕过它的努力，比如通过双重编码。你可以通过传递多字节字符并确定它们是否被解码为其他字符，来测试网站是否错误处理了额外的值。
- en: '**Summary**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: CRLF vulnerabilities allow attackers to manipulate HTTP responses by altering
    their headers. Exploiting CRLF vulnerabilities can lead to cache poisoning, firewall
    evasion, request hijacking, or HTTP response splitting. Because a CRLF vulnerability
    is caused by a site reflecting back the unsanitized user input `%0D%0A` in its
    headers, it’s important to monitor and review all HTTP responses when hacking.
    Additionally, if you do find input you can control being returned in HTTP headers,
    but the characters `%0D%0A` are being sanitized, try including multibyte-encoded
    input as FileDescriptor did to determine how the site handles decoding it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CRLF漏洞允许攻击者通过修改HTTP响应头来操控它们。利用CRLF漏洞可能导致缓存投毒、防火墙绕过、请求劫持或HTTP响应拆分。由于CRLF漏洞是由网站在其头部反射未经清理的用户输入`%0D%0A`引起的，因此在进行黑客攻击时，监控和审查所有HTTP响应非常重要。此外，如果你发现你可以控制的输入被返回到HTTP头中，但字符`%0D%0A`正在被清理，尝试像FileDescriptor那样包含多字节编码的输入，以确定网站如何处理解码过程。
