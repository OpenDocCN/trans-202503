["```\nThread(s) per core:              2\nCore(s) per socket:              2\nSocket(s):                       1\n```", "```\nThreads.nthreads()\n```", "```\njulia> using BenchmarkTools, Folds\n\njulia> f(x) = sum([exp(1/i^2) for i in 1:x]);\n\njulia> time_serial = @belapsed map(f, 100_000:105_000)\n13.989536582\n\njulia> time_parallel = @belapsed Folds.map(f, 100_000:105_000)\n7.606663313\n\njulia> time_parallel / time_serial\n0.5437394776026614\n\njulia> Threads.nthreads()\n2\n```", "```\njulia> time_serial = @belapsed map(f, 1:41)\n2.4464e-5\n\njulia> time_parallel = @belapsed Folds.map(f, 1:41)\n2.5466e-5\n```", "```\njulia> f(x) = sum([exp(1/i^2) for i in 1:x]);\n\njulia> time_serial = @belapsed for x in 100_000:105_000\n           r = f(x)\n       end\n13.933373843\n\njulia> time_parallel = @belapsed Threads.@threads for x in 100_000:105_000\n           r = f(x)\n       end\n7.507556971\n```", "```\nfunction sumf_serial(n)\n    s = 0.0\n    for x in 1:n\n        s += f(x)\n    end\n    s\nend\n\nfunction sumf_parallel(n)\n    s = 0.0\n    Threads.@threads for x in 1:n\n        s += f(x)\n    end\n    s\nend\n\njulia> sumf_serial(1000)\n502900.5422006599\n\njulia> sumf_parallel(1000)\n376606.37463883933\n\njulia> sumf_parallel(1000)\n376453.03112871706\n```", "```\nfunction sumf_parallel_locked(n)\n    s = Threads.Atomic{Float64}(0);\n    Threads.@threads for x in 1:n\n        Threads.atomic_add!(s, f(x))\n    end\n    s[]\nend\n\njulia> sumf_parallel_locked(1000)\n502900.5422006605\n```", "```\nfunction sumf_serial_reversed(n)\n    s = 0.0\n    for x in n:-1:1\n        s += f(x)\n    end\n    s\nend\n\njulia> sumf_serial_reversed(1000)\n502900.5422006606\n```", "```\nfunction sumf_parallel2(n)\n    s = zeros(Threads.nthreads())\n    Threads.@threads for x in 1:n\n     ➊ s[Threads.threadid()] += f(x)\n    end\n    sum(s)\nend\n\njulia> sumf_parallel2(1000)\n502900.5422006605\n```", "```\nfunction sumf_atomic(f)\n    s = Threads.Atomic{Float64}(0.0);\n ➊ @sync for x in 100_000:105_000\n        Threads.@spawn Threads.atomic_add!(s, f(x))\n    end\nreturn s\nend\n\njulia> @belapsed s = sumf_atomic(f)\n8.101242794\n\njulia> s = sumf_atomic(f);\n\njulia> s[]\n5.126145395914207e8\n```", "```\nThreads.@threads for i in 1:N\n    something\nend\n```", "```\n@sync for i in 1:N\n    Threads.@spawn something\nend\n```", "```\nW = zeros(5);\n\nfor i in 1:5\n    Threads.@spawn (sleep(1); W[i] = i)\nend\nprintln(W)\n```", "```\n[0.0, 0.0, 0.0, 0.0, 0.0]\n```", "```\nW = zeros(5);\n\n@sync for i in 1:5\n    Threads.@spawn (sleep(1); W[i] = i)\nend\nprintln(W)\n```", "```\n[1.0, 2.0, 3.0, 4.0, 5.0]\n```", "```\nW = zeros(5);\n\njobs = Vector{Any}(undef, 5);\n\nfor i in 1:5\n    jobs[i] = Threads.@spawn (sleep(i); W[i] = i)\nend\nwait(jobs[2])\nprintln(W)\n```", "```\n[1.0, 2.0, 0.0, 0.0, 0.0]\n```", "```\nW = zeros(5);\n\njobs = Vector{Any}(undef, 5);\n\nfor i in 1:5\n    jobs[i] = Threads.@spawn (sleep(i); W[i] = i)\nend\njob2 = fetch(jobs[2])\nprintln(W)\nprintln(job2)\n```", "```\n[1.0, 2.0, 0.0, 0.0, 0.0]\n2\n```", "```\nfunction task_timer(n)\n    push!(times, (n, time()))\n    map(f, 100_000:102_000)\n    push!(times, (n, time()))\nend\n\nfunction task_yield_timer(n)\n    push!(times, (n, time()))\n    map(f, 100_000:101_000)\n    yield()\n    map(f, 101_000:102_000)\n    push!(times, (n, time()))\nend\n```", "```\ntimes = []\n@sync for n in 1:3\n    Threads.@spawn task_timer(n)\nend\ntimes_noyield = times[:]\n\ntimes = []\n@sync for n in 1:3\n    Threads.@spawn task_yield_timer(n)\nend\ntimes_yield = times[:]\n```", "```\n➊ julia> @everywhere f(x) = sum([exp(1/i^2) for i in 1:x]);\n\n   julia> time_serial = @belapsed map(f, 100_000:105_000)\n   13.934491874\n\n   julia> time_mp = @belapsed pmap(f, 100_000:105_000)\n   7.944081133\n```", "```\nn*host:port\n```", "```\n2*tc\n2*pluton:86\n```", "```\njulia -p2 --machine-file=machines\n```", "```\njulia> pmap(_ -> run(`hostname`), 1:6)\n      From worker 4:    tc\n      From worker 3:    sp3\n      From worker 2:    sp3\n      From worker 5:    pluton\n      From worker 6:    pluton\n      From worker 7:    tc\n6-element Vector{Base.Process}:\n Process(`hostname`, ProcessExited(0))\n Process(`hostname`, ProcessExited(0))\n Process(`hostname`, ProcessExited(0))\n Process(`hostname`, ProcessExited(0))\n Process(`hostname`, ProcessExited(0))\n Process(`hostname`, ProcessExited(0))\n```", "```\njulia> workers()\n6-element Vector{Int64}:\n 2\n 3\n 4\n 5\n 6\n 7\n```", "```\njulia> @belapsed pmap(f, 100_000:105_000)\n5.255985404\n```", "```\nfor p in 2:7\n    @spawnat p @info \"Process $(myid()) is running on $(readchomp(`hostname`))\"\nend\n```", "```\nFrom worker 3:    [ Info: Process 3 is running on sp3\nFrom worker 2:    [ Info: Process 2 is running on sp3\nFrom worker 4:    [ Info: Process 4 is running on tc\nFrom worker 7:    [ Info: Process 7 is running on tc\nFrom worker 5:    [ Info: Process 5 is running on pluton\nFrom worker 6:    [ Info: Process 6 is running on pluton\n```", "```\n@sync for x in 100_000:105_000\n    @spawnat :any r = f(x)\nend\n```", "```\njulia> @belapsed @sync @distributed for x in 100_000:105_000\n           r = f(x)\n       end\n3.668112229\n```", "```\njulia> @distributed (+) for x in 100_000:105_000\n           r = f(x)\n       end\n 5.126145395914206e8\n```", "```\nsum(pmap(f, 100_000:105_000))\n```", "```\njulia> @belapsed pmap(f, 100_000:105_000; batch_size=1000)\n4.370967232\n\njulia> @belapsed pmap(f, 100_000:105_000; batch_size=2501)\n3.746921853\n```"]