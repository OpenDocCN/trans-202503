["```\nset GOROOT=/path/to/go\n```", "```\nGOPATH=$HOME/gocode\n```", "```\n$ go version\ngo version go1.11.5 linux/amd64\n```", "```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"Hello, Black Hat Gophers!\")\n}\n```", "```\n$ ./hello\nHello, Black Hat Gophers!\n```", "```\n$ go build -ldflags \"-w -s\"\n```", "```\n$ GOOS=\"linux\" GOARCH=\"amd64\" go build hello.go\n$ ls\nhello  hello.go\n$ file hello\nhello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\n```", "```\n$ go doc fmt.Println\nfunc Println(a ...interface{}) (n int, err error)\n    Println formats using the default formats for its operands and writes to\n    standard output. Spaces are always added between operands and a newline\n    is appended. It returns the number of bytes written and any write error\n    encountered.\n```", "```\n   package main\n\n   import (\n   \"fmt\"\n   \"net/http\"\n\n❶ \"github.com/stacktitan/ldapauth\"\n   )\n```", "```\n   $ tree src/github.com/stacktitan/\n❶ src/github.com/stacktitan/\n   └── ldapauth\n       ├── LICENSE\n       ├── README.md\n       └── ldap_auth.go\n```", "```\nvar x = \"Hello World\"\nz := int(42)\n```", "```\nvar s = make([]string, 0)\nvar m = make(map[string]string)\ns = append(s, \"some string\")\nm[\"some key\"] = \"some value\"\n```", "```\n❶ var count = int(42)\n❷ ptr := &count\n❸ fmt.Println(*ptr)\n❹ *ptr = 100\n❺ fmt.Println(count)\n```", "```\n❶ type Person struct {\n    ❷ Name string\n    ❸ Age int\n   }\n❹ func (p *Person) SayHello() {\n       fmt.Println(\"Hello,\", p.Name❺)\n   }\n   func main() {\n       var guy =  new❻(Person)\n    ❼ guy.Name = \"Dave\"\n    ❽ guy.SayHello()\n   }\n```", "```\n❶ type Friend interface {\n    ❷ SayHello()\n   }\n```", "```\nfunc Greet❶ (f Friend❷) {\n    f.SayHello()\n}\n```", "```\nfunc main() {\n    var guy = new(Person)\n    guy.Name = \"Dave\"\n    Greet(guy)\n}\n```", "```\n❶ type Dog struct {}\n   func (d *Dog) SayHello()❷ {\n       fmt.Println(\"Woof woof\")\n   }\n   func main() {\n       var guy = new(Person)\n       guy.Name = \"Dave\"\n    ❸ Greet(guy)\n       var dog = new(Dog)\n    ❹ Greet(dog)\n   }\n```", "```\nif x == 1 {\n    fmt.Println(\"X is equal to 1\")\n} else {\n    fmt.Println(\"X is not equal to 1\")\n}\n```", "```\nswitch x❶ {\n    case \"foo\"❷:\n        fmt.Println(\"Found foo\")\n    case \"bar\"❸:\n        fmt.Println(\"Found bar\")\n    default❹:\n        fmt.Println(\"Default case\")\n}\n```", "```\nfunc foo(i❶ interface{}) {\n    switch v := i.(type)❷ {\n    case int:\n        fmt.Println(\"I'm an integer!\")\n    case string:\n        fmt.Println(\"I'm a string!\")\n    default:\n        fmt.Println(\"Unknown type!\")\n    }\n}\n```", "```\nfor i := 0; i < 10; i++ {\n    fmt.Println(i)\n}\n```", "```\n❶ nums := []int{2,4,6,8}\n   for idx❷, val❸ := range❹ nums {\n       fmt.Println(idx, val)\n   }\n```", "```\n❶ func f() {\n       fmt.Println(\"f function\")\n   }\n\n   func main() {\n    ❷ go f()\n       time.Sleep(1 * time.Second)\n       fmt.Println(\"main function\")\n   }\n```", "```\n❶ func strlen(s string, c chan int) {\n    ❷ c <- len(s)\n   }\n\n   func main() {\n    ❸ c := make(chan int)\n    ❹ go strlen(\"Salutations\", c)\n       go strlen(\"World\", c)\n    ❺ x, y := <-c, <-c\n       fmt.Println(x, y, x+y)\n   }\n```", "```\n5 11 16\n```", "```\ntype error interface {\n    Error() string\n}\n```", "```\n❶ type MyError string\n   func (e MyError) Error() string❷ {\n       return string(e)\n   }\n```", "```\nfunc foo() error {\n    return errors.New(\"Some Error Occurred\")\n}\nfunc main() {\n    if err := foo()❶;err != nil❷ {\n        // Handle the error\n    }\n}\n```", "```\n❶ type Foo struct {\n       Bar string\n       Baz string\n   }\n\n   func main() {\n    ❷ f := Foo{\"Joe Junior\", \"Hello Shabado\"}\n       b, _❸ := json.Marshal❹(f❺)\n    ❻ fmt.Println(string(b))\n       json.Unmarshal(b❼, &f❽)\n   }\n```", "```\n{\"Bar\":\"Joe Junior\",\"Baz\":\"Hello Shabado\"}\n```", "```\ntype Foo struct {\n    Bar     string    `xml:\"id,attr\"`\n    Baz     string    `xml:\"parent>child\"`\n}\n```", "```\n<Foo id=\"Joe Junior\"><parent><child>Hello Shabado</child></parent></Foo>\n```"]