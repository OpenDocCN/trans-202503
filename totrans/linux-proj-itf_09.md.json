["```\n$ `su`\n\nPassword:\n# `ls -l prog`\n\n-rwxr-xr-x    1 root     root       302585 Jun 26 15:05 prog\n# `chmod u+s prog`                        *Turn on set-user-ID permission bit*\n\n# `chmod g+s prog`\n                        *Turn on set-group-ID permission bit*\n```", "```\n# `ls -l prog`\n\n-rwsr-sr-x    1 root     root       302585 Jun 26 15:05 prog\n```", "```\n$ `su`\n\nPassword:\n# `chown root check_password`             *Make this program owned by root*\n\n# `chmod u+s check_password`              *With the set-user-ID bit enabled*\n# `ls -l check_password`\n\n-rwsr-xr-x    1 root   users    18150 Oct 28 10:49 check_password\n# `exit`\n\n$ `whoami`                                *This is an unprivileged login*\n\nmtk\n$ `./check_password`                      *But we can now access the shadow*\n\nUsername: `avr`                           *password file using this program*\n\nPassword:\nSuccessfully authenticated: UID=1001\n```", "```\nreal=1000 effective=0 saved=0\n```", "```\n#include <unistd.h>\n\nuid_t `getuid`(void);\n```", "```\nuid_t `geteuid`(void);\n```", "```\ngid_t `getgid`(void);\n```", "```\ngid_t `getegid`(void);\n```", "```\n#include <unistd.h>\n\nint `setuid`(uid_t *uid*);\nint `setgid`(gid_t *gid*);\n```", "```\nif (setuid(getuid()) == -1)\n    errExit(\"setuid\");\n```", "```\n#include <unistd.h>\n\nint `seteuid`(uid_t *euid*);\nint `setegid`(gid_t *egid*);\n```", "```\neuid = geteuid();               /* Save initial effective user ID (which\n                                   is same as saved set-user-ID) */\nif (seteuid(getuid()) == -1)    /* Drop privileges */\n    errExit(\"seteuid\");\nif (seteuid(euid) == -1)        /* Regain privileges */\n    errExit(\"seteuid\");\n```", "```\n#include <unistd.h>\n\nint `setreuid`(uid_t *ruid*, uid_t *euid*);\nint `setregid`(gid_t *rgid*, gid_t *egid*);\n```", "```\nsetreuid(getuid(), getuid());\n```", "```\n#define _GNU_SOURCE\n#include <unistd.h>\n\nint `getresuid`(uid_t **ruid*, uid_t **euid*, uid_t **suid*);\nint `getresgid`(gid_t **rgid*, gid_t **egid*, gid_t **sgid*);\n```", "```\n#define _GNU_SOURCE\n#include <unistd.h>\n\nint `setresuid`(uid_t *ruid*, uid_t *euid*, uid_t *suid*);\nint `setresgid`(gid_t *rgid*, gid_t *egid*, gid_t *sgid*);\n```", "```\nsetresuid(-1, x, -1);\n```", "```\n#include <sys/fsuid.h>\n\nint `setfsuid`(uid_t *fsuid*);\n```", "```\nint `setfsgid`(gid_t *fsgid*);\n```", "```\n#include <unistd.h>\n\nint `getgroups`(int *gidsetsize*, gid_t *grouplist*[]);\n```", "```\ngid_t grouplist[NGROUPS_MAX + 1];\n```", "```\n#define _BSD_SOURCE\n#include <grp.h>\n\nint `setgroups`(size_t *gidsetsize*, const gid_t **grouplist*);\nint `initgroups`(const char **user*, gid_t *group*);\n```", "```\n`proccred/idshow.c`\n#define _GNU_SOURCE\n#include <unistd.h>\n#include <sys/fsuid.h>\n#include <limits.h>\n#include \"ugid_functions.h\"   /* userNameFromId() & groupNameFromId() */\n#include \"tlpi_hdr.h\"\n\n#define SG_SIZE (NGROUPS_MAX + 1)\n\nint\nmain(int argc, char *argv[])\n{\n    uid_t ruid, euid, suid, fsuid;\n    gid_t rgid, egid, sgid, fsgid;\n    gid_t suppGroups[SG_SIZE];\n    int numGroups, j;\n    char *p;\n\n    if (getresuid(&ruid, &euid, &suid) == -1)\n        errExit(\"getresuid\");\n    if (getresgid(&rgid, &egid, &sgid) == -1)\n        errExit(\"getresgid\");\n\n    /* Attempts to change the file-system IDs are always ignored\n       for unprivileged processes, but even so, the following\n       calls return the current file-system IDs */\n\n    fsuid = setfsuid(0);\n    fsgid = setfsgid(0);\n\n    printf(\"UID: \");\n    p = userNameFromId(ruid);\n    printf(\"real=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) ruid);\n    p = userNameFromId(euid);\n    printf(\"eff=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) euid);\n    p = userNameFromId(suid);\n    printf(\"saved=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) suid);\n    p = userNameFromId(fsuid);\n    printf(\"fs=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) fsuid);\n    printf(\"\\n\");\n\n    printf(\"GID: \");\n    p = groupNameFromId(rgid);\n    printf(\"real=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) rgid);\n    p = groupNameFromId(egid);\n    printf(\"eff=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) egid);\n    p = groupNameFromId(sgid);\n    printf(\"saved=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) sgid);\n    p = groupNameFromId(fsgid);\n    printf(\"fs=%s (%ld); \", (p == NULL) ? \"???\" : p, (long) fsgid);\n    printf(\"\\n\");\n\n    numGroups = getgroups(SG_SIZE, suppGroups);\n    if (numGroups == -1)\n        errExit(\"getgroups\");\n\n    printf(\"Supplementary groups (%d): \", numGroups);\n    for (j = 0; j < numGroups; j++) {\n        p = groupNameFromId(suppGroups[j]);\n        printf(\"%s (%ld) \", (p == NULL) ? \"???\" : p, (long) suppGroups[j]);\n    }\n    printf(\"\\n\");\n\n    exit(EXIT_SUCCESS);\n}\n     `proccred/idshow.c`\n```", "```\n    real=0 effective=1000 saved=1000 file-system=1000\n    ```", "```\n    real=X effective=Y saved=Y\n    ```", "```\n    real=X effective=0 saved=0\n    ```"]