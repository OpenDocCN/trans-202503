["```\n\n      // Project 16 - Testing the USART\n\n      #include <avr/io.h>\n\n      ❶ #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      ❷ void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data type to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      ❸ void USARTSendByte(uint8_t u8Data)\n\n      {\n\n      // Wait while previous byte sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = u8Data;\n\n      }\n\n      ❹ void HelloWorld(void)\n\n      {\n\n      USARTSendByte(72);  // H\n\n      USARTSendByte(101); // e\n\n      USARTSendByte(108); // l\n\n      USARTSendByte(108); // l\n\n      USARTSendByte(111); // o\n\n      USARTSendByte(32);  // space\n\n      USARTSendByte(119); // w\n\n      USARTSendByte(111); // o\n\n      USARTSendByte(114); // r\n\n      USARTSendByte(108); // l\n\n      USARTSendByte(100); // d\n\n      USARTSendByte(32);  // space\n\n      }\n\n      int main(void)\n\n      {\n\n      // Initialize USART0\n\n      ❺ USARTInit();\n\n      while(1)\n\n      {\n\n      HelloWorld();\n\n      }\n\n      }\n\n```", "```\n\n      char i[\n      `x` \n      ] = \"\"\n\n```", "```\n\n      // Project 17 - Sending Text with the USART\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(unsigned char u8Data)\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = u8Data;\n\n      }\n\n      ❶ void sendString(char myString[])\n\n      {\n\n      uint8_t a = 0;\n\n      while (myString[a])\n\n      {\n\n      USARTSendByte(myString[a]);\n\n      a++;\n\n      }\n\n      }\n\n      int main(void)\n\n      {\n\n      ❷ char z[15] = \"Hello, world\\r\\n\"; // Make sure you use \" instead of ”\n\n      // Initialize USART\n\n      USARTInit();\n\n      while(1)\n\n      {\n\n      sendString(z);\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n```", "```\n\n      `main.c:42:2: error: stray '\\342' in program` \n\n```", "```\n\n      // Project 18 - Sending Numbers with the USART\n\n      #include <avr/io.h>\n\n      #include <stdlib.h>\n\n      #include <stdio.h>\n\n      #include <util/delay.h>\n\n      #include <string.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(unsigned char u8Data) // Send a byte to the USART\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = u8Data;\n\n      }\n\n      void sendString(char myString[])\n\n      {\n\n      uint8_t a = 0;\n\n      while (myString[a])\n\n      {\n\n      USARTSendByte(myString[a]);\n\n      a++;\n\n      }\n\n      }\n\n      int main(void)\n\n      {\n\n      char a[10] = \"Float - \";\n\n      char b[10] = \"Integer - \";\n\n      char t[10] = \"\";                      // For our dtostrf test\n\n      char newline[4] = \"\\r\\n\";\n\n      int16_t  i = -32767;\n\n      float j = -12345.67;\n\n      // Initialize USART\n\n      USARTInit();\n\n      while(1)\n\n      {\n\n      ❶ dtostrf(j,12,2,t);\n\n      sendString(a);                     // \"Float - \"\n\n      sendString(t);                     // Send float\n\n      sendString(newline);\n\n      _delay_ms(1000);\n\n      ❷ dtostrf((float)i,12,0,t);\n\n      sendString(b);                     // \"Integer - \"\n\n      printf(t);                         // Send integer\n\n      sendString(newline);\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n```", "```\n\n      dtostrf(float j, w, d, char t[]);\n\n```", "```\n\n      // Project 19 - Creating a Temperature Data Logger\n\n      #include <avr/io.h>\n\n      #include <stdlib.h>\n\n      #include <stdio.h>\n\n      #include <math.h>\n\n      #include <util/delay.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      ❶ void startADC()         // Set up the ADC\n\n      {\n\n      ADMUX =  0b01000101; // Set ADC pin to 28\n\n      ADCSRA = 0b10000011; // Set prescaler speed for 1 MHz\n\n      }\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(unsigned char u8Data)\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = u8Data;\n\n      }\n\n      void sendString(char myString[])\n\n      {\n\n      uint8_t a = 0;\n\n      while (myString[a])\n\n      {\n\n      USARTSendByte(myString[a]);\n\n      a++;\n\n      }\n\n      }\n\n      int main(void)\n\n      {\n\n      float temperature;\n\n      float voltage;\n\n      uint8_t ADCvalue;\n\n      char t[10] = \"\";                  // Will hold temperature for sending via USART\n\n      char a[14] = \"Temperature: \";     // Make sure you have \" instead of ”\n\n      char b[14] = \" degrees C \";       // Make sure you have \" instead of ”\n\n      char newline[4] = \"\\r\\n\";\n\n      DDRD = 0b00000000; // Set PORTD to inputs\n\n      startADC();\n\n      USARTInit();\n\n      while(1)\n\n      {\n\n      // Get reading from TMP36 via ADC\n\n      ADCSRA |= (1 << ADSC);         // Start ADC measurement\n\n      while (ADCSRA & (1 << ADSC) ); // Wait until conversion is complete\n\n      _delay_ms(10);\n\n      ❷ // Get value from ADC register, place in ADCvalue\n\n      ADCvalue = ADC;\n\n      ❸ // Convert reading to temperature value (Celsius)\n\n      voltage = (ADC * 5);\n\n      voltage = voltage / 1024;\n\n      temperature = ((voltage - 0.5) * 100);\n\n      ❹ // Send temperature to PC via USART\n\n      sendString(a);\n\n      dtostrf(temperature,6,2,t);\n\n      sendString(t);\n\n      sendString(b);\n\n      sendString(newline);\n\n      _delay_ms(1000);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n      // Project 20 - Receiving Data from Your Computer\n\n      #include <avr/io.h>\n\n      #include <stdlib.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(uint8_t sentByte)\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = sentByte;\n\n      }\n\n      ❶ uint8_t USARTReceiveByte()\n\n      // Receives a byte of data from the computer into the USART register\n\n      {\n\n      // Wait for byte from computer\n\n      while(!(UCSR0A&(1<<RXC0))){};\n\n      // Return byte\n\n      return UDR0;\n\n      }\n\n      int main(void)\n\n      {\n\n      uint8_t tempByte;\n\n      // Initialize USART0\n\n      USARTInit();\n\n      while(1)\n\n      {\n\n      // Receive data from PC via USART\n\n      ❷ tempByte = USARTReceiveByte();\n\n      // Send same data back to PC via USART\n\n      ❸ USARTSendByte(tempByte);\n\n      }\n\n      }\n\n```", "```\n\n      warning: 'answer' may be used uninitialized in this function\n\n```", "```\n\n      // Project 21 - Building a Four-Function Calculator\n\n      #include <avr/io.h>\n\n      #include <stdlib.h>\n\n      #include <stdio.h>\n\n      #include <string.h>\n\n      #include <math.h>\n\n      #include <util/delay.h>\n\n      #define USART_BAUDRATE 4800\n\n      #define UBRR_VALUE 12\n\n      void USARTInit(void)\n\n      {\n\n      // Set baud rate registers\n\n      UBRR0H = (uint8_t)(UBRR_VALUE>>8);\n\n      UBRR0L = (uint8_t)UBRR_VALUE;\n\n      // Set data frame format to 8 data bits, no parity, 1 stop bit\n\n      UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);\n\n      // Enable transmission and reception\n\n      UCSR0B |= (1<<RXEN0)|(1<<TXEN0);\n\n      }\n\n      void USARTSendByte(uint8_t sentByte)\n\n      {\n\n      // Wait while previous byte is sent\n\n      while(!(UCSR0A&(1<<UDRE0))){};\n\n      // Transmit data\n\n      UDR0 = sentByte;\n\n      }\n\n      void sendString(char myString[])\n\n      {\n\n      uint8_t a = 0;\n\n      while (myString[a])\n\n      {\n\n      USARTSendByte(myString[a]);\n\n      a++;\n\n      }\n\n      }\n\n      uint8_t USARTReceiveByte()\n\n      // Receives a byte of data from the computer into the USART register\n\n      {\n\n      // Wait for byte from computer\n\n      while(!(UCSR0A&(1<<RXC0))){};\n\n      // Return byte\n\n      return UDR0;\n\n      }\n\n      int main(void)\n\n      {\n\n      uint8_t digit1;\n\n      uint8_t digit2;\n\n      uint8_t operator;\n\n      float answer=0;\n\n      float d1=0;\n\n      float d2=0;\n\n      ❶ char a[26] = \"Enter command (e.g. 5*2) \";\n\n      char b[11] = \"Answer is \";\n\n      char answerString[20] = \"\"; // Holds answer\n\n      char newline[4] = \"\\r\\n\";\n\n      USARTInit();\n\n      while(1)\n\n      {\n\n      sendString(newline);\n\n      sendString(a);\n\n      ❷ digit1 = USARTReceiveByte();\n\n      ❸ USARTSendByte(digit1);\n\n      ❹ switch (digit1)          // Convert ASCII code of digit1 to actual number\n\n      {\n\n      case 48 : digit1 = 0; break;\n\n      case 49 : digit1 = 1; break;\n\n      case 50 : digit1 = 2; break;\n\n      case 51 : digit1 = 3; break;\n\n      case 52 : digit1 = 4; break;\n\n      case 53 : digit1 = 5; break;\n\n      case 54 : digit1 = 6; break;\n\n      case 55 : digit1 = 7; break;\n\n      case 56 : digit1 = 8; break;\n\n      case 57 : digit1 = 9; break;\n\n      }\n\n      ❺ operator = USARTReceiveByte();\n\n      ❻ USARTSendByte(operator);\n\n      ❼ digit2 = USARTReceiveByte();\n\n      ❽ USARTSendByte(digit2);\n\n      ❾ switch (digit2)          // Convert ASCII code of digit2 to actual number\n\n      {\n\n      case 48 : digit2 = 0; break;\n\n      case 49 : digit2 = 1; break;\n\n      case 50 : digit2 = 2; break;\n\n      case 51 : digit2 = 3; break;\n\n      case 52 : digit2 = 4; break;\n\n      case 53 : digit2 = 5; break;\n\n      case 54 : digit2 = 6; break;\n\n      case 55 : digit2 = 7; break;\n\n      case 56 : digit2 = 8; break;\n\n      case 57 : digit2 = 9; break;\n\n      }\n\n      sendString(newline);\n\n      // Convert entered numbers into float variables\n\n      d1 = digit1;\n\n      d2 = digit2;\n\n      // Calculate result\n\n      switch (operator)\n\n      {\n\n      case 43 : answer = d1 + d2; break; // Add\n\n      case 45 : answer = d1 - d2; break; // Subtract\n\n      case 42 : answer = d1 * d2; break; // Multiply\n\n      case 47 : answer = d1 / d2; break; // Divide\n\n      }\n\n      // Send result to PC via USART\n\n      ⓿ sendString(b);\n\n      dtostrf(answer,6,2,answerString);\n\n      sendString(answerString);\n\n      sendString(newline);\n\n      _delay_ms(1000);\n\n      }\n\n      return 0;\n\n      }\n\n```"]