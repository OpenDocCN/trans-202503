["```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>SVG</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n </head>\n  <body>\n  ❶ <svg width=\"600\" height=\"600\"></svg>\n\n    <script src=\"script.js\"></script>\n  </body>\n</html> \n```", "```\n`--snip--`\n <body>\n    <svg width=\"600\" height=\"600\">\n    ❶ <rect width=\"95\" height=\"20\" x=\"5\" y=\"5\"\n        stroke=\"red\" fill=\"none\"></rect>\n    ❷ <text x=\"10\" y=\"20\" font-family=\"sans-serif\">Hello, SVG!</text>\n    </svg>\n\n<script src=\"script.js\"></script>\n`--snip--` \n```", "```\n`--snip--`\n<svg width=\"600\" height=\"600\">\n❶ <g font-family=\"sans-serif\" fill=\"blue\">\n    <text x=\"0\" y=\"20\">Always</text>\n    <text x=\"0\" y=\"40\">Be</text>\n    <text x=\"0\" y=\"60\">Coding</text>\n  </g>\n</svg>\n`--snip--` \n```", "```\n`--snip--`\n <g transform=\"translate(100, 50)\" font-family=\"sans-serif\" fill=\"blue\">\n`--snip--` \n```", "```\n`--snip--`\n  <g transform=\"translate(100, 50) scale(2, 3) \"font-family=\"sans-serif\" fill=\"blue\">\n`--snip--` \n```", "```\n`--snip--`\n<svg width=\"600\" height=\"600\">\n❶ <circle fill=\"#faa0a0\" r=\"100\" cx=\"124\" cy=\"130\"></circle>\n\n❷ <g stroke=\"#944e30\" stroke-width=\"3\">\n    <rect width=\"8\" height=\"100\" x=\"120\" y=\"90\" fill=\"#e1704d\"></rect>\n    <circle fill=\"#acd270\" r=\"18\" cx=\"124\" cy=\"150\"></circle>\n    <circle fill=\"#fdfce2\" r=\"18\" cx=\"124\" cy=\"120\"></circle>\n    <circle fill=\"#f8c9dc\" r=\"18\" cx=\"124\" cy=\"90\"></circle>\n  </g>\n</svg>\n`--snip--` \n```", "```\n`--snip--`\n<svg width=\"600\" height=\"600\">\n  <path fill=\"#e44d26\" d=\"M 0 0 H 182 L 165 185 L 90 206 L 17 185 Z\"/>\n  <path fill=\"#f16529\" d=\"M 91 15 H 165 L 151 173 L 91 190 Z\"/>\n</svg>\n`--snip--` \n```", "```\nM 0 0 H 182 L 165 185 L 90 206 L 17 185 Z\n```", "```\nm 0 0 h 182 l -17 185 l -75 21 l -73 -21 z\n```", "```\nm0 0h182l-17 185-75 21-73-21z\n```", "```\n`--snip--`\n<svg width=\"600\" height=\"600\">\n <path fill=\"#e44d26\" d=\"M 0 0 H 182 L 165 185 L 90 206 L 17 185 Z\"/>\n <path fill=\"#f16529\" d=\"M 91 15 H 165 L 151 173 L 91 190 Z\"/>\n  <path fill=\"#ebebeb\" d=\"m 34 38 h 57 v 23 h -32 l 2 24 h 30 v 23 h -51 z\"/>\n  <path fill=\"#ebebeb\" d=\"m 41 118 h 23 l 2 18 l 25 7 v 24 l -47 -13 z\"/>\n  <path fill=\"#fff\" d=\"m 148 38 h -57 v 23 h 55 z\"/>\n  <path fill=\"#fff\" d=\"m 143 85 h -52 v 23 h 28 l -3 30 l -25 5 v 24 l 47 -13 z\"/>\n</svg>\n`--snip--` \n```", "```\n`--snip--`\n<svg width=\"600\" height=\"600\">\n  <circle class=\"boring\" r=\"40\" cx=\"50\" cy=\"50\"></circle>\n  <rect class=\"boring\" x=\"120\" y=\"10\" width=\"80\" height=\"80\"></rect>\n  <path class=\"boring\" d=\"M 230 90 l 40 -80 l 40 80 z\"></path>\"\n\n  <circle class=\"fun\" r=\"40\" cx=\"50\" cy=\"180\"></circle>\n  <rect class=\"fun\" x=\"120\" y=\"140\" width=\"80\" height=\"80\"></rect>\n  <path class=\"fun\" d=\"M 230 220 l 40 -80 l 40 80 z\"></path>\"\n</svg>\n`--snip--` \n```", "```\n.boring {\n  fill: none;\n  stroke: black;\n  stroke-width: 3px;\n}\n\n.fun {\n  fill: hotpink;\n  stroke: greenyellow;\n  stroke-width: 5px;\n  stroke-dasharray: 10,5;\n  stroke-linejoin: round;\n} \n```", "```\n`--snip--`\n.fun:hover {\n  fill: greenyellow;\n  stroke: hotpink;\n} \n```", "```\ndocument.querySelectorAll(\".fun\").forEach(element => {\n  console.log(element);\n}); \n```", "```\ndocument.querySelectorAll(\".fun\").forEach(element => {\n❶ element.setAttribute(\"data-offset\", 0);\n\n❷ element.addEventListener(\"click\", event => {\n  ❸ let offset = Number(event.target.getAttribute(\"data-offset\"));\n\n    if (event.shiftKey) {\n      offset -=5;\n    } else {\n      offset +=5;\n    }\n\n  ❹ event.target.setAttribute(\"data-offset\", offset);\n  ❺ event.target.setAttribute(\"transform\", `translate(${offset}, 0)`);\n  });\n}); \n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Data</title>\n  </head>\n  <body>\n  ❶ <svg width=\"600\" height=\"600\">\n      <circle cx=\"50\" cy=\"50\" r=\"10\"></circle>\n      <circle cx=\"100\" cy=\"50\" r=\"10\"></circle>\n      <circle cx=\"150\" cy=\"50\" r=\"10\"></circle>\n    </svg>\n\n  ❷ <script src=\"https://unpkg.com/d3@7.4.4/dist/d3.js\"></script>\n    <script src=\"script.js\"></script>\n  </body>\n</html> \n```", "```\nd3.selectAll(\"circle\").attr(\"fill\", \"hotpink\");\n```", "```\nd3\n  .selectAll(\"circle\")\n  .attr(\"fill\", \"hotpink\")\n❶ .attr(\"r\", (d, i) => 10 + i * 5); \n```", "```\n`--snip--`\nd3\n  .select(\"body\")\n  .insert(\"h1\", \"svg\")\n  .text(\"Hello, D3!\"); \n```", "```\nlet numbers = [3, 2, 1];\n\nd3\n  .selectAll(\"circle\")\n❶ .data(numbers)\n  .attr(\"r\", (d, i) => d * 5); \n```", "```\n**$0**\n<circle cx=\"50\" cy=\"50\" r=\"15\"></circle> \n```", "```\n**$0.__data__**\n3 \n```", "```\n❶ let numbers = [3, 2, 1, 2, 3];\n\nd3\n❷ .select(\"svg\")\n .selectAll(\"circle\")\n .data(numbers)\n❸ .join(\"circle\")\n  .attr(\"r\", (d, i) => d * 5); \n```", "```\nlet numbers = [3, 2, 1, 2, 3];\n\nd3\n .select(\"svg\")\n .selectAll(\"circle\")\n .data(numbers)\n .join(\"circle\")\n  .attr(\"cx\", (d, i) => (i + 1) * 50)\n  .attr(\"cy\", 50)\n .attr(\"r\", (d, i) => d * 5); \n```", "```\n`--snip--`\n <body>\n    <svg width=\"600\" height=\"600\"></svg>\n\n <script src=\"https://unpkg.com/d3@7.4.4/dist/d3.js\"></script>\n <script src=\"script.js\"></script>\n </body>\n</html> \n```", "```\n`--snip--`\n <body>\n    <div>\n      <button id=\"prepend\">Prepend</button>\n      <button id=\"append\">Append</button>\n      <button id=\"drop\">Drop</button>\n    </div>\n\n <svg width=\"600\" height=\"600\"></svg>\n`--snip--` \n```", "```\nlet numbers = [3, 2, 1];\n\n❶ function update(data) {\n  d3\n    .select(\"svg\")\n    .selectAll(\"circle\")\n  ❷ .data(data)\n    .join(\"circle\")\n    .attr(\"cx\", (d, i) => (i + 1) * 50)\n    .attr(\"cy\", 50)\n .attr(\"r\", (d, i) => d * 5);\n}\n\n❸ update(numbers); \n```", "```\n`--snip--`\nupdate(numbers);\n\n❶ function getRandomNumber() {\n  return 1 + Math.random() * 4;\n}\n\n❷ d3.select(\"#append\").on(\"click\", () => {\n  numbers.push(getRandomNumber());\n  update(numbers);\n});\n\n❸ d3.select(\"#prepend\").on(\"click\", () => {\n  numbers.unshift(getRandomNumber());\n  update(numbers);\n});\n\n❹ d3.select(\"#drop\").on(\"click\", () => {\n  numbers.pop();\n  update(numbers);\n}); \n```", "```\n`--snip--`\nfunction update(data) {\n d3\n .select(\"svg\")\n .selectAll(\"circle\")\n .data(data)\n    .join(\"circle\")\n    .transition()\n    .duration(500)\n .attr(\"cx\", (d, i) => (i + 1) * 50)\n .attr(\"cy\", 50)\n .attr(\"r\", (d, i) => d * 5);\n}\n`--snip--` \n```", "```\n`--snip--`\n .selectAll(\"circle\")\n  .data(data, d => d)\n .join(\"circle\")\n`--snip--` \n```", "```\n`--snip--`\n .data(data, d => d)\n  .join(\n    enter => enter.append(\"circle\"),\n    update => update,\n    exit => exit.remove()\n  )\n .transition()\n`--snip--` \n```", "```\n`--snip--`\nfunction update(data) {\n d3\n .select(\"svg\")\n .selectAll(\"circle\")\n .data(data, d => d)\n .join(\n      enter => enter\n      ❶ .append(\"circle\")\n        .attr(\"cx\", (d, i) => (i + 1) * 50)\n        .attr(\"cy\", 50)\n        .transition()\n        .duration(500)\n      ❷ .attr(\"r\", (d, i) => d * 5),\n      update => update\n        .transition()\n        .duration(500)\n      ❸ .attr(\"cx\", (d, i) => (i + 1) * 50),\n      exit => exit\n        .transition()\n        .duration(500)\n      ❹ .attr(\"r\", 0)\n      ❺ .remove()\n    );\n}\n\nupdate(numbers); \n`--snip--` \n```", "```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Character Frequency</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <div>\n    ❶ <textarea rows=\"5\" cols=\"70\"></textarea>\n    </div>\n <script src=\"https://unpkg.com/d3@7.4.4/dist/d3.js\"></script>\n    <script src=\"script.js\"></script>\n  </body>\n</html> \n```", "```\nconst width = 600;\nconst height = 600;\n\n// Add an svg element to the page\nlet svg = d3\n  .select(\"body\")\n  .append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height); \n```", "```\n`--snip--`\nd3.select(\"textarea\").on(❶ \"input\", e => {\n❷ let frequencies = {};\n\n❸ e.target.value.split(\" \").forEach(char => {\n    let currentCount = frequencies[char] || 0;\n frequencies[char] = currentCount + 1;\n  });\n\n  console.log(frequencies);\n}); \n```", "```\n{\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n```", "```\n[\n  {\"char\": \"e\", \"count\": 1},\n  {\"char\": \"h\", \"count\": 1},\n  {\"char\": \"l\", \"count\": 2},\n  {\"char\": \"o\", \"count\": 1}\n] \n```", "```\n`--snip--`\n frequencies[char] = currentCount + 1;\n });\n\n❶ let data = Object.entries(frequencies).map(pair => {\n    return {char: pair[0], count: pair[1]};\n  });\n\n❷ data.sort((a, b) => d3.ascending(a.char, b.char));\n\n  console.log(data);\n}); \n```", "```\n`--snip--`\n// Add an svg element to the page\nlet svg = d3\n .select(\"body\")\n .append(\"svg\")\n .attr(\"width\", width)\n .attr(\"height\", height);\n\n❶ function update(data) {\n  svg\n    .selectAll(\"rect\")\n    .data(data)\n  ❷ .join(\"rect\")\n    .attr(\"width\", (d, i) => d.count * 5)\n    .attr(\"height\", 10)\n    .attr(\"x\", 20)\n .attr(\"y\", (d, i) => i * 20);\n}\n\nd3.select(\"textarea\").on(\"input\", e => {\n--snip--\n\n data.sort((a, b) => d3.ascending(a.char, b.char));\n\n❸ update(data);\n}); \n```", "```\n[\n  {\"char\": \"a\", \"count\": 1},\n  {\"char\": \"b\", \"count\": 1},\n  {\"char\": \"c\", \"count\": 2}\n] \n```", "```\n`--snip--`\n// Add an svg element to the page\nlet svg = d3\n .select(\"body\")\n .append(\"svg\")\n .attr(\"width\", width)\n .attr(\"height\", height);\n\nlet margin = {top: 20, right: 10, bottom: 20, left: 50};\n\nfunction update(data) {\n❶ let xScale = d3.scaleLinear()\n    .domain([0, d3.max(data, d => d.count)])\n    .range([margin.left, width - margin.right]);\n\n svg\n .selectAll(\"rect\")\n .data(data)\n .join(\"rect\")\n  ❷ .attr(\"width\", (d, i) => xScale(d.count) - xScale(0))\n .attr(\"height\", 10)\n  ❸ .attr(\"x\", xScale(0))\n .attr(\"y\", (d, i) => i * 20);\n}\n`--snip--` \n```", "```\n`--snip--`\nfunction update(data) {\n let xScale = d3.scaleLinear()\n .domain([0, d3.max(data, d => d.count)])\n .range([margin.left, width - margin.right]);\n\n❶ let yScale = d3.scaleBand()\n    .domain(data.map(d => d.char))\n    .range([margin.top, height - margin.bottom])\n    .padding(0.5);\n\n svg\n .selectAll(\"rect\")\n .data(data)\n .join(\"rect\")\n .attr(\"width\", (d, i) => xScale(d.count) - xScale(0))\n  ❷ .attr(\"height\", yScale.bandwidth())\n .attr(\"x\", xScale(0))\n  ❸ .attr(\"y\", (d, i) => yScale(d.char));\n}\n`--snip--` \n```", "```\n`--snip--`\nlet margin = {top: 20, right: 10, bottom: 20, left: 50};\n\n// Top axis container\n❶ let topContainer = svg\n  .append(\"g\")\n  .attr(\"id\", \"top\")\n  .attr(\"transform\", ❷ `translate(0, ${margin.top})`);\n\n// Left axis container\n❸ let leftContainer = svg\n  .append(\"g\")\n  .attr(\"id\", \"left\")\n  .attr(\"transform\", ❹ `translate(${margin.left}, 0)`);\n\nfunction update(data) {\n`--snip--` \n```", "```\n`--snip--`\n let yScale = d3.scaleBand()\n .domain(data.map(d => d.char))\n .range([margin.top, height - margin.bottom])\n .padding(0.5);\n\n  let topAxis = d3.axisTop(xScale);\n\n  let leftAxis = d3.axisLeft(yScale);\n\n  topContainer\n    .call(topAxis);\n\n  leftContainer\n    .call(leftAxis);\n\n  svg\n .selectAll(\"rect\")\n .data(data)\n .join(\"rect\")\n`--snip--` \n```", "```\n`--snip--`\n let xScale = d3.scaleLinear()\n .domain([0, d3.max(data, d => d.count)])\n    .range([margin.left, width - margin.right])\n    .nice();\n`--snip--` \n```", "```\n`--snip--`\n let yScale = d3.scaleBand()\n .domain(data.map(d => d.char))\n .range([margin.top, height - margin.bottom])\n .padding(0.5);\n\n❶ let topAxisTicks = xScale.ticks()\n    .filter(tick => Number.isInteger(tick));\n\n  let topAxis = d3.axisTop(xScale)\n  ❷ .tickValues(topAxisTicks)\n  ❸ .tickFormat(d3.format(\"d\"));\n\n let leftAxis = d3.axisLeft(yScale); \n`--snip--` \n```", "```\n**/^hi/.test(\"hi there\");**\ntrue\n**/****^hi/.test(\"Chicken\");**\nfalse \n```", "```\n**/****^hi$/.test(\"hi\");**\ntrue\n**/^hi$/.test(\"him\");**\nfalse \n```", "```\n**/^[A-Z][a-z]$/.test(\"Hi\");**\ntrue\n**/^[A-Z][a-z]$/.test(\"iH\");**\nfalse\n**/^[A-Z][a-z]$/.test(\"Hip\");**\nfalse \n```", "```\n`--snip--`\n// Left axis container\nlet leftContainer = svg\n .append(\"g\")\n .attr(\"id\", \"left\")\n .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nfunction getClass(char) {\n  if (/^[a-z]$/.test(char)) {\n    return \"lower\";\n  } else if (/^[A-Z]$/.test(char)) {\n    return \"upper\";\n  } else if (/^[0-9]$/.test(char)) {\n    return \"number\";\n  } else {\n    return \"other\";\n  }\n}\n\nfunction update(data) {\n`--snip--` \n```", "```\n`--snip--`\n svg\n .selectAll(\"rect\")\n .data(data)\n .join(\"rect\")\n .attr(\"width\", (d, i) => xScale(d.count) – xScale(0))\n .attr(\"height\", yScale.bandwidth())\n .attr(\"x\", xScale(0))\n .attr(\"y\", (d, i) => yScale(d.char))\n    .attr(\"class\", (d, i) => getClass(d.char));\n}\n`--snip--` \n```", "```\n.lower {\n  fill: purple;\n}\n\n.upper {\n  fill: orangered;\n}\n\n.number {\n  fill: green;\n}\n\n.other {\n  fill: #555;\n} \n```", "```\n`--snip--`\nfunction standardizeSpace(char) {\n❶ if (char.trim() == \" \") {\n    return \"<space>\";\n  } else {\n    return char;\n  }\n}\n\nd3.select(\"textarea\").on(\"input\", e => {\n let frequencies = {};\n\n  e.target.value.split(\" \").forEach(char => {\n  ❷ let standardized = standardizeSpace(char);\n    let currentCount = frequencies[standardized] || 0;\n    frequencies[standardized] = currentCount + 1;\n });\n`--snip--` \n```", "```\n`--snip--`\nlet leftAxis = d3.axisLeft(yScale);\n\ntopContainer\n  .transition()\n .call(topAxis);\n\nleftContainer\n  .transition()\n .call(leftAxis);\n`--snip--` \n```", "```\n`--snip--`\n leftContainer\n .transition()\n .call(leftAxis);\n\n svg\n .selectAll(\"rect\")\n  ❶ .data(data, d => d.char)\n    .join(\n    ❷ enter => enter\n        .append(\"rect\")\n        .attr(\"x\", xScale(0))\n        .attr(\"y\", (d, i) => yScale(d.char))\n        .attr(\"class\", d => getClass(d.char))\n        .transition()\n        .attr(\"width\", d => xScale(d.count) - xScale(0))\n        .attr(\"height\", yScale.bandwidth()),\n    ❸ update => update\n        .transition()\n        .attr(\"width\", d => xScale(d.count) - xScale(0))\n .attr(\"height\", yScale.bandwidth())\n        .attr(\"y\", (d, i) => yScale(d.char)),\n    ❹ exit => exit\n        .transition()\n        .attr(\"width\", 0)\n        .attr(\"height\", 0)\n        .remove()\n    );\n}\n`--snip--` \n```"]