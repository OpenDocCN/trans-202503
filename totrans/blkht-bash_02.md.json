["```\nif [[`condition`]]; then\n  # Do something if the condition is met.\nelse\n  # Do something if the condition is not met.\nfi \n```", "```\n#!/bin/bash\nFILENAME=\"flow_control_with_if.txt\"\n\nif [[-f \"${FILENAME}\"]]; then\n echo \"${FILENAME} already exists.\"\n  exit 1\nelse\n  touch \"${FILENAME}\"\nfi \n```", "```\n#!/bin/bash\nFILENAME=\"flow_control_with_if.txt\"\n\nif [[! -f \"${FILENAME}\"]]; then\n  touch \"${FILENAME}\"\nfi \n```", "```\n#!/bin/bash\nVARIABLE_ONE=\"nostarch\"\nVARIABLE_TWO=\"nostarch\"\n\nif [[\"${VARIABLE_ONE}\" == \"${VARIABLE_TWO}\"]]; then\n  echo \"They are equal!\"\nelse\n  echo \"They are not equal!\"\nfi \n```", "```\n#!/bin/bash\nVARIABLE_ONE=\"10\"\nVARIABLE_TWO=\"20\"\n\nif [[\"${VARIABLE_ONE}\" -gt \"${VARIABLE_TWO}\"]]; then\n  echo \"${VARIABLE_ONE} is greater than ${VARIABLE_TWO}.\"\nelse\n  echo \"${VARIABLE_ONE} is less than ${VARIABLE_TWO}.\"\nfi \n```", "```\n#!/bin/bash\n\necho \"Hello World!\" > file.txt\n\nif [[-f \"file.txt\"]] && [[-s \"file.txt\"]]; then\n  echo \"The file exists and its size is greater than zero.\"\nfi \n```", "```\n#!/bin/bash\nDIR_NAME=\"dir_test\"\n\nmkdir \"${DIR_NAME}\"\n\nif [[-f \"${DIR_NAME}\"]] || [[-d \"${DIR_NAME}\"]]; then\n echo \"${DIR_NAME} is either a file or a directory.\"\nfi \n```", "```\nif `command`; then\n  # `command` was successful.\nfi\n\nif ! `command`; then\n  # `command` was unsuccessful.\nfi \n```", "```\n$ **if touch test123; then**\n **echo \"OK: file created\"**\n **fi**\n\nOK: file created \n```", "```\n#!/bin/bash\nUSER_INPUT=\"${1}\"\n\n❶ if [[-z \"${USER_INPUT}\"]]; then\n  echo \"You must provide an argument!\"\n  exit 1\nfi\n❷ if [[-f \"${USER_INPUT}\"]]; then\n  echo \"${USER_INPUT} is a file.\"\n❸ elif [[-d \"${USER_INPUT}\"]]; then\n  echo \"${USER_INPUT} is a directory.\"\nelse\n❹ echo \"${USER_INPUT} is not a file or a directory.\"\nfi \n```", "```\n#!/bin/bash\n\nsay_name(){\n  echo \"Black Hat Bash\"\n} \n```", "```\nsay_name\n```", "```\n#!/bin/bash\n\n# This function checks if the current user ID equals zero.\n❶ check_if_root(){\n❷ if [[\"${EUID}\" -eq \"0\"]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nif check_if_root; then\n  echo \"User is root!\"\nelse\n  echo \"User is not root!\"\nfi \n```", "```\n#!/bin/bash\n\nprint_args(){\n echo \"first: ${1}, second: ${2}, third: ${3}\"\n}\n\n❶ print_args No Starch Press \n```", "```\n$ **chmod u+x function_with_args.sh**\n$ **./function_with_args.sh**\n\nfirst: No, second: Starch, third: Press \n```", "```\nwhile `some_condition`; do\n  # Run commands while the condition is true.\ndone \n```", "```\n#!/bin/bash\n\nwhile true; do\n  echo \"Looping...\"\n  sleep 2\ndone \n```", "```\n$ **chmod u+x basic_while.sh**\n$ **./basic_while.sh**\n\nLooping...\nLooping...\n`--snip--` \n```", "```\n#!/bin/bash\n❶ SIGNAL_TO_STOP_FILE=\"stoploop\"\n\n❷ while [[! -f \"${SIGNAL_TO_STOP_FILE}\"]]; do\n  echo \"The file ${SIGNAL_TO_STOP_FILE} does not yet exist...\"\n  echo \"Checking again in 2 seconds...\"\n  sleep 2\ndone\n\n❸ echo \"File was found! Exiting...\" \n```", "```\n$ **chmod u+x while_loop.sh**\n$ **./while_loop.sh**\n\nThe file stoploop does not yet exist...\nChecking again in 2 seconds...\n`--snip--` \n```", "```\n$ **touch stoploop**\n```", "```\nFile was found! Exiting...\n```", "```\nuntil `some_condition`; do\n  # Run some commands until the condition is no longer false.\ndone \n```", "```\n#!/bin/bash\nFILE=\"output.txt\"\n\ntouch \"${FILE}\"\nuntil [[-s \"${FILE}\"]]; do\n  echo \"${FILE} is empty...\"\n  echo \"Checking again in 2 seconds...\"\n  sleep 2\ndone\n\necho \"${FILE} appears to have some content in it!\" \n```", "```\n$ **chmod u+x until_loop.sh**\n$ **./until_loop.sh**\n\noutput.txt is empty...\nChecking again in 2 seconds...\n`--snip--` \n```", "```\n$ **du -sb output.txt**\n0       output.txt \n```", "```\n$ **echo \"until_loop_will_now_stop!\" > output.txt**\n```", "```\noutput.txt appears to have some content in it!\n```", "```\nfor `variable_name` in `LIST`; do\n  # Run some commands for each item in the sequence.\ndone \n```", "```\n#!/bin/bash\n\nfor index in $(seq 1 10); do\n  echo \"${index}\"\ndone \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10 \n```", "```\n#!/bin/bash\n\nfor ip_address in \"$@\"; do\n  echo \"Taking some action on IP address ${ip_address}\"\ndone \n```", "```\n$ **chmod u+x for_loop_arguments.sh**\n$ **./for_loop_arguments.sh 10.0.0.1 10.0.0.2 192.168.1.1 192.168.1.2**\n\nTaking some action on IP address 10.0.0.1\nTaking some action on IP address 10.0.0.2\n`--snip--` \n```", "```\n#!/bin/bash\n\nfor file in $(ls .); do\n  echo \"File: ${file}\"\ndone \n```", "```\n#!/bin/bash\n\nwhile true; do\n  echo \"in the loop\"\n  break\ndone\n\necho \"This code block will be reached.\" \n```", "```\n$ **touch example_file1 example_file2 example_file3**\n```", "```\n#!/bin/bash\n\n❶ for file in example_file*; do\n  if [[\"${file}\" == \"example_file1\"]]; then\n    echo \"Skipping the first file\"\n  ❷ continue\n  fi\n\n  echo \"${RANDOM}\" > \"${file}\"\ndone \n```", "```\n$ **chmod u+x for_loop_continue.sh**\n$ **./for_loop_continue.sh**\n\nSkipping the first file \n```", "```\ncase `EXPRESSION` in\n  `PATTERN1`)\n    # Do something if the first condition is met.\n  ;;\n  `PATTERN2`)\n    # Do something if the second condition is met.\n  ;;\nesac \n```", "```\n#!/bin/bash\nIP_ADDRESS=\"${1}\"\n\ncase ${IP_ADDRESS} in\n  192.168.*)\n    echo \"Network is 192.168.x.x\"\n  ;;\n  10.0.*)\n    echo \"Network is 10.0.x.x\"\n  ;;\n  *)\n echo \"Could not identify the network\"\n  ;;\nesac \n```", "```\n$ **chmod u+x case_ip_address_check.sh**\n$ **./case_ip_address_check.sh 192.168.12.55**\nNetwork is 192.168.x.x\n\n$ **./case_ip_address_check.sh 212.199.2.2**\nCould not identify the network \n```", "```\n$ **grep \"35.237.4.214\" log.txt**\n```", "```\n$ **grep \"35.237.4.214\\|13.66.139.0\" log.txt**\n```", "```\n$ **grep -e \"35.237.4.214\" -e \"13.66.139.0\" log.txt**\n```", "```\n$ **ps | grep TTY**\n```", "```\n$ **ps | grep -i tty**\n```", "```\n$ **grep -v \"35.237.4.214\" log.txt**\n```", "```\n$ **grep -o \"35.237.4.214\" log.txt**\n```", "```\n$ **awk '{print $1}' log.txt**\n```", "```\n$ **awk '{print $1,$2,$3}' log.txt**\n```", "```\n$ **awk '{print $1,$NF}' log.txt**\n```", "```\n$ **awk -F',' '{print $1}' example_csv.txt**\n```", "```\n$ **awk 'NR < 10' log.txt**\n```", "```\n$ **grep \"42.236.10.117\" log.txt | awk '{print $7}'**\n```", "```\n$ **sed 's/Mozilla/Godzilla/g' log.txt**\n```", "```\n$ **sed 's/Mozilla/Godzilla/g' log.txt > newlog.txt**\n```", "```\n$ **sed 's/ //g' log.txt**\n```", "```\n$ **sed '1d' log.txt**\n```", "```\n$ **sed '$d' log.txt**\n```", "```\n$ **sed '5,7d' log.txt**\n```", "```\n$ **sed -n '2,15 p' log.txt**\n```", "```\n$ **sed -i '1d' log.txt**\n```", "```\n$ **sleep 100 &**\n```", "```\n$ **ps -ef | grep sleep**\n\nuser    1827    1752 cons0    19:02:29 /usr/bin/sleep \n```", "```\n$ **jobs**\n\n[1]+  Running                 sleep 100 & \n```", "```\n$ **fg %1**\n\nsleep 100 \n```", "```\n[1]+  Stopped                 sleep 100\n```", "```\n$ **bg %1**\n\n[1]+ sleep 100 & \n```", "```\n$ **nohup ./my_script.sh &**\n```", "```\n$ **echo $PATH**\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \n```", "```\nnmap -vv -T4 -p- -sV --max-retries 5 localhost\n```", "```\n$ **alias quicknmap=\"nmap -vv -T4 -p- -sV --max-retries 5 localhost\"**\n```", "```\n$ **quicknmap**\nStarting Nmap (https://nmap.org) at 02-21 22:32 EST\n`--snip--`\nPORT    STATE SERVICE\n631/tcp open  ipp \n```", "```\n$ **alias helloworld=\"bash ~/scripts/helloworld.sh\"**\n```", "```\nVULN_HOST=1.0.0.22\nVULN_ROUTER=10.0.0.254\n\nalias quicknmap=\"nmap -vv -T4 -p- -sV --max-retries 5 localhost\" \n```", "```\n$ **source ~/.bashrc**\n\n$ **echo ${VULN_HOST}**\n10.0.0.22\n\n$ **echo ${VULN_ROUTER}**\n10.0.0.254 \n```", "```\nsource ~/.pentest.sh\n```", "```\n. ~/.pentest.sh\n```", "```\n#!/bin/bash\n\nFILENAME=$(date +%m_%d_%Y_%H:%M:%S).log\n\nif [[! -d ~/sessions]]; then\n  mkdir ~/sessions\nfi\n\n# Starting a script session\nif [[-z $SCRIPT]]; then\n  export SCRIPT=\"/home/kali/sessions/${FILENAME}\"\n  script -q -f \"${SCRIPT}\"\nfi \n```"]