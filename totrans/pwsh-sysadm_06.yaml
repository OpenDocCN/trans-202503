- en: '5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '5'
- en: ERROR HANDLING
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Images](../images/common.jpg)'
- en: You’ve seen how to use variables and control flow structures to write flexible
    code that can respond to the imperfections of the real world—servers that aren’t
    up when they should be, files that are in the wrong place, and the like. Some
    of these things you know to expect and can handle accordingly. But you’ll never
    be able to anticipate every error. There’s always something that will break your
    code. The best you can do is write code that breaks responsibly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到如何使用变量和控制流结构编写灵活的代码，以应对现实世界中的不完美——比如服务器未按预期启动、文件放错了位置等。有些情况是你预料到的，并且可以相应地处理。但你永远无法预测每一个错误，总有些东西会导致代码崩溃。你能做的最好的事情，就是编写能够负责任地崩溃的代码。
- en: That’s the basic premise behind *error handling*, the techniques that developers
    use to ensure that their code expects and takes care of—or *handles*—errors. In
    this chapter, you’ll learn a few of the most basic error-handling techniques.
    First, you’ll drill down into errors themselves, looking at the difference between
    terminating and nonterminating errors. Then, you’ll learn how to use the `try/catch/finally`
    construct, and last, you’ll examine PowerShell’s automatic error variables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是*错误处理*的基本前提，开发者使用这些技术确保他们的代码能预见并处理——或者*处理*——错误。在本章中，你将学习一些最基本的错误处理技术。首先，你将深入了解错误本身，看看终止性错误和非终止性错误的区别。然后，你将学习如何使用`try/catch/finally`结构，最后，你将了解PowerShell的自动错误变量。
- en: Working with Exceptions and Errors
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理异常和错误
- en: In [Chapter 4](ch04.xhtml#ch4), you looked at control flow and how to introduce
    different paths of execution into your code. When your code encounters a problem,
    it disrupts the normal flow; we call this flow-disrupting event an *exception*.
    Mistakes such as dividing by zero, trying to access an element outside the bounds
    of an array, or trying to open a missing file will all cause PowerShell to *throw*
    an exception.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml#ch4)中，你已经了解了控制流以及如何将不同的执行路径引入你的代码。当你的代码遇到问题时，它会打乱正常的执行流程；我们将这种打乱流程的事件称为*异常*。像除以零、尝试访问数组范围外的元素或尝试打开缺失的文件等错误，都会导致PowerShell*抛出*异常。
- en: 'Once an exception is thrown, if you do nothing to stop it, it will be wrapped
    with additional information and sent to the user as an *error*. PowerShell has
    two types of errors. The first is a *terminating error*: any error that stops
    execution of the code. For example, say you have a script called *Get-Files.ps1*
    that finds a list of files in a certain folder and then performs the same action
    for each of those files. If the script can’t find the folder—someone has moved
    it or named it something unexpected—you’ll want to return a terminating error,
    as the code cannot do anything without access to all the files. But what happens
    if only one of the files is corrupted?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦异常被抛出，如果你什么都不做来阻止它，它将被附加额外信息，并作为*错误*发送给用户。PowerShell有两种类型的错误。第一种是*终止性错误*：任何会停止代码执行的错误。例如，假设你有一个名为*Get-Files.ps1*的脚本，它查找某个文件夹中的文件列表，然后对这些文件执行相同的操作。如果脚本找不到该文件夹——有人将其移动或重命名——你会希望返回一个终止性错误，因为代码在没有访问所有文件的情况下无法执行。但如果只有其中一个文件损坏了，怎么办呢？
- en: When you try to access the corrupted file, you’ll get another exception. But
    because you’re performing the same independent action on each file, there’s no
    reason that one broken file should stop the rest from running. In that case, you’ll
    write code that treats the exception caused by the single broken file as a *nonterminating
    error*, one not severe enough to halt the rest of the code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试访问损坏的文件时，你会遇到另一个异常。但是因为你在每个文件上执行的是相同的独立操作，所以没有理由让一个损坏的文件阻止其余文件的运行。在这种情况下，你会编写代码，将由单个损坏文件引发的异常视为*非终止性错误*，即错误并不严重到足以停止其余代码的执行。
- en: The general error-handling behavior for nonterminating errors is to output a
    useful error message and proceed with the rest of the program. You can see this
    in several of PowerShell’s built-in commands. For example, say you want to check
    the status of the Windows services `bits`, `foo`, and `lanmanserver`. You could
    use a single `Get-Service` command to check them all at the same time, as in [Listing
    5-1](ch05.xhtml#ch5list1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 非终止性错误的一般错误处理行为是输出有用的错误信息，并继续执行程序的其余部分。你可以在PowerShell的几个内置命令中看到这一点。例如，假设你想检查Windows服务`bits`、`foo`和`lanmanserver`的状态。你可以使用一个`Get-Service`命令同时检查它们，如[清单5-1](ch05.xhtml#ch5list1)所示。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 5-1: A nonterminating error*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单5-1：一个非终止性错误*'
- en: Of course, there is no `foo` service, and PowerShell tells you as much. But
    notice that PowerShell gets the status for the other services; it doesn’t stop
    executing when it runs into that error. This nonterminating error can be converted
    to a terminating error to prevent execution of the rest of the code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，根本没有`foo`服务，PowerShell也会告诉你这一点。但请注意，PowerShell会获取其他服务的状态；它在遇到这个错误时并不会停止执行。这个非终止性错误可以转换为终止性错误，以防止代码的其余部分执行。
- en: It’s important to understand that the decision to turn an exception into a nonterminating
    error or a terminating error is made by a developer. Often, as in [Listing 5-1](ch05.xhtml#ch5list1),
    this decision will be made for you by whoever wrote the cmdlet you’re using. In
    many cases, if the cmdlet encounters an exception, it will return a nonterminating
    error, writing error output to the console and allowing your script to continue
    executing. In the next section, you’ll see a few ways to turn nonterminating errors
    into terminating errors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，决定将异常转为非终止性错误还是终止性错误是由开发者做出的。通常，如[清单 5-1](ch05.xhtml#ch5list1)中所示，这个决定是由编写你使用的cmdlet的人做出的。在许多情况下，如果cmdlet遇到异常，它会返回一个非终止性错误，将错误输出写入控制台，并允许你的脚本继续执行。在下一节中，你将看到几种将非终止性错误转换为终止性错误的方法。
- en: Handling Nonterminating Errors
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理非终止性错误
- en: Let’s say you want to write a simple script that will go into a folder that
    you know contains several text files and prints out the first line of every text
    file. If the folder doesn’t exist, you want the script to end immediately and
    report the error; otherwise, if you encounter any other errors, you want the script
    to keep running and report the error.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想编写一个简单的脚本，进入一个你知道包含多个文本文件的文件夹，并打印出每个文本文件的第一行。如果文件夹不存在，你希望脚本立即结束并报告错误；否则，如果遇到其他任何错误，你希望脚本继续运行并报告错误。
- en: You’ll start by writing a script that should return a terminating error. [Listing
    5-2](ch05.xhtml#ch5list2) shows a first attempt at this code. (Though I could’ve
    condensed the code into something more succinct, for teaching purposes, I’ve tried
    to make each step here as clear as possible.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你将开始编写一个脚本，应该返回一个终止性错误。[清单 5-2](ch05.xhtml#ch5list2)展示了这个代码的首次尝试。（虽然我本可以将代码简化为更简洁的形式，但为了教学目的，我尽力让每个步骤尽可能清晰。）
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 5-2: A first attempt at our* Get-Files.ps1 *script*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-2：我们* Get-Files.ps1 *脚本的首次尝试*'
- en: 'Here, you use `Get-ChildItem` to return all the files contained inside the
    path you pass it—in this case, a bogus folder. If you run this script, you should
    get output like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用`Get-ChildItem`返回路径中包含的所有文件——在这种情况下，是一个虚假的文件夹。如果你运行这个脚本，你应该得到如下输出：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, two things happen: PowerShell returns an error, which specifies
    the type of exception encountered (`ItemNotFoundException`), and the call to `Write-Host`
    runs. This means that the error you get is nonterminating.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，会发生两件事：PowerShell 返回一个错误，指定遇到的异常类型（`ItemNotFoundException`），并且调用`Write-Host`也会运行。这意味着你得到的错误是非终止性的。
- en: 'To turn this error into a terminating error, you’ll use the `ErrorAction` parameter.
    This is a *common parameter*, meaning that it’s built into every PowerShell cmdlet.
    The `ErrorAction` parameter determines what action to take if the cmdlet in question
    encounters a nonterminating error. This parameter has five main options:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此错误转化为终止性错误，你将使用`ErrorAction`参数。这是一个*常见参数*，意味着它内置于每个PowerShell cmdlet中。`ErrorAction`参数决定了当cmdlet遇到非终止性错误时应该采取什么行动。该参数有五个主要选项：
- en: '**Continue** Outputs the error message and continues to execute the cmdlet.
    This is the default value.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**继续** 输出错误消息并继续执行cmdlet。这是默认值。'
- en: '**Ignore** Continues to execute the cmdlet without outputting an error or recording
    it in the `$Error` variable.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**忽略** 继续执行cmdlet，且不输出错误或将其记录在`$Error`变量中。'
- en: '**Inquire** Outputs the error message and prompts the user for input before
    continuing.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**询问** 输出错误消息并提示用户输入，然后继续执行。'
- en: '**SilentlyContinue** Continues to execute the cmdlet without outputting an
    error, but records it in the `$Error` variable.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**静默继续** 继续执行cmdlet而不输出错误，但将其记录在`$Error`变量中。'
- en: '**Stop** Outputs the error message and stops the cmdlet from executing.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**停止** 输出错误消息并停止cmdlet的执行。'
- en: You’ll look more at the `$Error` variable later in the chapter. For now, you
    want to pass `Stop` to `Get-ChildItem`. Update your script and run the code again.
    You should get the same output without `This shouldn't run.`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章稍后进一步了解`$Error`变量。现在，你想要将`Stop`传递给`Get-ChildItem`。更新你的脚本并再次运行代码。你应该会得到相同的输出，但没有`This
    shouldn't run.`（这不该运行）。
- en: The `ErrorAction` parameter is useful for controlling error behavior on a case-by-case
    basis. To change how PowerShell handles all nonterminating errors, you can use
    the `$ErrorActionPreference` variable, an automatic variable that controls the
    default nonterminating error behavior. By default, `$ErrorActionPreference` is
    set to `Continue`. Note that the `ErrorAction` parameter overrides the value of
    `$ErrorActionPreference`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ErrorAction`参数对于按情况控制错误行为非常有用。要更改 PowerShell 如何处理所有非终止性错误，可以使用`$ErrorActionPreference`变量，这是一个自动变量，用于控制默认的非终止性错误行为。默认情况下，`$ErrorActionPreference`设置为`Continue`。请注意，`ErrorAction`参数会覆盖`$ErrorActionPreference`的值。'
- en: In general, I consider the best practice is to always set `$ErrorAction``Preference`
    to `Stop` to remove the concept of nonterminating errors altogether. This allows
    you to catch all types of exceptions, and spare yourself the work of knowing in
    advance which errors are terminating and which are nonterminating. You can accomplish
    the same task by using the `ErrorAction` parameter on each command to get more
    granular with defining which commands return terminating errors, but I’d rather
    set the rule once and forget it than have to remember to add the `ErrorAction`
    parameter to every command I call.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，我认为最佳实践是始终将`$ErrorActionPreference`设置为`Stop`，以彻底去除非终止性错误的概念。这样可以让你捕获所有类型的异常，并避免事先知道哪些错误是终止性的，哪些是非终止性的。你也可以通过在每个命令上使用`ErrorAction`参数来更细致地定义哪些命令会返回终止性错误，但我更愿意一次性设置规则并忘记它，而不是每次调用命令时都要记得添加`ErrorAction`参数。
- en: Now let’s look at how to handle terminating errors by using the `try/catch/finally`
    construct.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用`try/catch/finally`结构来处理终止性错误。
- en: Handling Terminating Errors
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理终止性错误
- en: To prevent terminating errors from stopping a program, you need to *catch* them.
    You do so with the `try/catch/finally` construct. [Listing 5-3](ch05.xhtml#ch5list3)
    shows the syntax.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止终止性错误停止程序，你需要*捕获*它们。你可以使用`try/catch/finally`结构来实现。[列表 5-3](ch05.xhtml#ch5list3)展示了语法。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 5-3: Syntax for the try/catch/finally construct*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-3：try/catch/finally 结构的语法*'
- en: Using `try/catch/finally` essentially sets up an error-handling safety net.
    The `try` block contains the original code you want to run; if a terminating error
    happens, PowerShell will redirect flow to the code in the `catch` block. Regardless
    of whether the code in `catch` runs, the code in `finally` will always run—note
    that the `finally` block is optional, unlike `try` or `catch`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`try/catch/finally`基本上设置了一个错误处理的安全网。`try`块包含你想要运行的原始代码；如果发生终止性错误，PowerShell会将流程重定向到`catch`块中的代码。无论`catch`块中的代码是否运行，`finally`块中的代码都会始终运行——请注意，`finally`块是可选的，不像`try`或`catch`。
- en: To get a better sense of what `try/catch/finally` can and can’t do, let’s revisit
    our *Get-Files.ps1* script. You’ll use a `try/catch` statement to provide a cleaner
    error message, as in [Listing 5-4](ch05.xhtml#ch5list4).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解`try/catch/finally`能做什么和不能做什么，我们来重新审视一下我们的*Get-Files.ps1*脚本。你将使用`try/catch`语句来提供更清晰的错误信息，如[列表
    5-4](ch05.xhtml#ch5list4)所示。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 5-4: Using a try/catch statement to handle terminating errors*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-4：使用 try/catch 语句来处理终止性错误*'
- en: When a terminating error is caught in the `catch` block, the error object is
    stored in the `$_` variable. In this example, you use `$_.Exception.Message` to
    return just the exception message. In this case, the code should return something
    like `Cannot find path 'C:\ bogusFolder' because it does not exist`. Error objects
    also contain other information, including the type of exception that was thrown,
    a stack trace that shows the execution history of the code that occurred before
    the exception was thrown, and more. However, for now, the most useful piece of
    information for you is the `Message` property, as this typically contains the
    basic information you need in order to see what happened in your code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当捕获到终止错误时，错误对象会存储在`$_`变量中。在此示例中，你使用`$_.Exception.Message`来仅返回异常消息。在这种情况下，代码应该返回类似`无法找到路径
    'C:\ bogusFolder'，因为该路径不存在`的内容。错误对象还包含其他信息，包括抛出异常的类型、显示异常抛出前代码执行历史的堆栈跟踪等。然而，现在最有用的信息是`Message`属性，因为它通常包含你需要查看代码发生了什么的基本信息。
- en: By now, your code should work as you expect. By passing `Stop` into `ErrorAction`,
    you ensure that a missing folder will return a terminating error and catch the
    error. But what will happen if you encounter an error when you try to use `Get-Content`
    to access the file?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的代码应该按预期工作。通过将`Stop`传递给`ErrorAction`，你确保缺少文件夹时将返回终止错误并捕获该错误。但是，如果在尝试使用`Get-Content`访问文件时遇到错误会发生什么呢？
- en: 'As an experiment, try running the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实验，尝试运行以下代码：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should get an error message from PowerShell, not the custom one you wrote
    in the `catch` block. This is because `Get-Content` returns a nonterminating error
    when an item is not found—and `try/catch` can find only terminating errors. This
    means that the code in [Listing 5-4](ch05.xhtml#ch5list4) will work as intended—any
    errors accessing the files themselves will not halt execution of the program,
    and will simply return to the console.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从PowerShell收到错误信息，而不是你在`catch`块中编写的自定义错误。这是因为`Get-Content`在找不到项时返回的是非终止错误，而`try/catch`只能捕获终止错误。这意味着[清单5-4](ch05.xhtml#ch5list4)中的代码将按预期工作——任何访问文件本身时出现的错误不会停止程序的执行，而是会返回控制台。
- en: Notice that you have not used a `finally` block in this code. The `finally`
    block is a great place to put code that performs necessary cleanup tasks such
    as disconnecting open database connections, cleaning up PowerShell remoting sessions,
    and so on. Here, nothing of that sort is necessary.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你在这段代码中没有使用`finally`块。`finally`块是执行必要清理任务（例如断开数据库连接、清理PowerShell远程会话等）的一好地方。在这里，没有必要进行这样的操作。
- en: Exploring the $Error Automatic Variable
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索`$Error`自动变量
- en: Throughout this chapter, you’ve forced PowerShell to return a lot of errors.
    Terminating or nonterminating, each one has been stored in a PowerShell automatic
    variable called `$Error`. The `$Error` variable is a built-in variable that stores
    an array of all the errors returned in the current PowerShell session, ordered
    by the time they appear.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已强制PowerShell返回了许多错误。无论是终止错误还是非终止错误，每个错误都被存储在名为`$Error`的PowerShell自动变量中，按出现的时间顺序排列。
- en: To demonstrate the `$Error` variable, let’s go to the console and run a command
    that you know will return a nonterminating error ([Listing 5-5](ch05.xhtml#ch5list5)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`$Error`变量，让我们打开控制台并运行一个你知道会返回非终止错误的命令（[清单5-5](ch05.xhtml#ch5list5)）。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 5-5: Example error*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单5-5：示例错误*'
- en: Now, in the same PowerShell session, examine the `$Error` variable ([Listing
    5-6](ch05.xhtml#ch5list6)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在相同的PowerShell会话中，检查`$Error`变量（[清单5-6](ch05.xhtml#ch5list6)）。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 5-6: The $Error variable*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单5-6：`$Error`变量*'
- en: Unless you’re working in a brand-new session, chances are you see a long list
    of errors. To access a specific one, you can use index notation just as you would
    with any other array. The errors in `$Error` are added to the front of the array,
    so `$Error[0]` is the most recent, `$Error[1]` the second most recent, and so
    forth.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你正在处理一个全新的会话，否则很可能你会看到一长串错误。要访问特定的错误，你可以像访问任何其他数组一样使用索引符号。`$Error`中的错误会被添加到数组的前面，因此`$Error[0]`是最新的，`$Error[1]`是第二新，依此类推。
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: Error handling in PowerShell is a massive topic, and this chapter covered only
    the basics. If you’d like to dive deeper, check out the `about_try_catch_finally`
    help topic by running `Get-Help about_try_catch_finally`. Another great resource
    is the *Big Book of PowerShell Error Handling* by Dave Wyatt from the DevOps Collective
    ([*https://leanpub.com/thebigbookofpowershellerrorhandling*](https://leanpub.com/thebigbookofpowershellerrorhandling)*/*).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell中的错误处理是一个庞大的主题，本章仅涵盖了基础知识。如果你想深入了解，可以通过运行`Get-Help about_try_catch_finally`来查看`about_try_catch_finally`帮助文档。另一个很好的资源是由Dave
    Wyatt在DevOps Collective编写的*PowerShell错误处理大全*（[https://leanpub.com/thebigbookofpowershellerrorhandling](https://leanpub.com/thebigbookofpowershellerrorhandling)*/*）。
- en: The main takeaways here are understanding the difference between terminating
    and nonterminating errors, the uses of the `try/catch` statement, and the various
    `ErrorAction` options that will help you build the skills you need to handle any
    errors your code might throw at you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要要点是理解终止错误和非终止错误之间的区别，`try/catch`语句的使用，以及各种`ErrorAction`选项，这些都将帮助你构建应对代码可能抛出的任何错误所需的技能。
- en: So far, you’ve been doing everything in a single block of code. In the next
    chapter, you’ll see how to organize your code into discrete, executable units
    called *functions*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直是在一个代码块中完成所有操作。在下一章中，你将看到如何将代码组织成独立的、可执行的单元，称为*函数*。
