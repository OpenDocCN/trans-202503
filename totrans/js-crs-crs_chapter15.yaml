- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">15</samp> <samp class="SANS_Dogma_OT_Bold_B_11">VISUALIZING
    DATA FROM THE GITHUB SEARCH API</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.png)'
  prefs: []
  type: TYPE_IMG
- en: In this final project, you’ll build an application that reads data from a public
    API and uses D3 to build an interactive bar chart based on that data. We’ll be
    reading data from the GitHub Search API. This API allows you to search for data
    on GitHub, a service that hosts Git repositories (Git is a popular version control
    system for keeping track of software project source code). The API uses the HTTPS
    protocol and returns JSON-formatted data based on a search query you encode into
    a URL.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t used GitHub before, go to [*https://<wbr>github<wbr>.com*](https://github.com)
    to see what it looks like. At the top of the page, you’ll see a search box that
    you can use to search for public, *open source* repositories (that is, repositories
    whose source code is available to anyone to read and use). Instead of using that
    search box manually, the GitHub Search API lets us perform searches programmatically—for
    example, with JavaScript. The API can search for various items on GitHub, such
    as repositories, users, and issues. We’ll be using the repository search feature
    to find top JavaScript repositories. Then we’ll draw a D3 bar chart ranking the
    repositories by popularity. The viewer will be able to learn more about each repository
    by hovering over its bar. We’ll also add some interactivity by allowing the viewer
    to hide or show repositories based on their software license.
  prefs: []
  type: TYPE_NORMAL
- en: This project will give you experience working with real-world data from a JSON
    API. A huge amount of programming boils down to making requests to third-party
    APIs and then doing some work with the returned data, as you’ll practice here.
    You’ll also put everything you learned about D3 in [Chapter 14](chapter14.xhtml)
    to work, building up a more interesting, interactive chart, and you’ll learn some
    techniques for creating richer visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get started, create a new directory called *github*, and add empty *style.css*
    and *script.js* files. Then make an *index.html* file and add the code in [Listing
    15-1](#Lis15-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-1: An</samp> <samp
    class="SANS_Futura_Std_Book_11">index.html</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    for our GitHub Search API visualization</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This is the same basic HTML file we used in [Chapter 14](chapter14.xhtml). It
    gives us access to D3 through a script element linking to a copy of the library
    on [*https://<wbr>unpkg<wbr>.com*](https://unpkg.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Fetching Data</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let’s try getting some data from the GitHub Search API. To do this, we
    need to format our request for data as part of a URL. Visiting that URL retrieves
    the data. The whole URL, including the search query we’ll be using, looks like
    this (note that it’s been broken onto two lines here to fit the page):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Rather than type out the URL manually, however, we’ll build it up using JavaScript,
    which will make it easier to understand and modify.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL has two parts: a base URL, which gives us access to the API, and a
    query string, where we specify what data we want. These two parts are separated
    by a question mark (?). The query string contains pairs of keys and values that
    are used to send information to the API about the query we’re making. Each key
    and value is joined by an equal sign (=), and each key-value pair is separated
    by an ampersand (&). In this URL, the keys are q (search query), per_page (number
    of results per page), and sort (how to sort the results). The keys and values
    in query strings are allowed to contain only a limited set of characters: a–z,
    A–Z, 0–9, hyphen (-), period (.), underscore (_), tilde (~), and a limited set
    of other special characters. All other characters must be represented using the
    *URL encoding* system, which is where all the percent (%) characters in the URL
    come from. For example, a colon (:) is encoded as %3A and a space is encoded as
    %20.'
  prefs: []
  type: TYPE_NORMAL
- en: To simplify things, we’ll write a function that takes an object with the unencoded
    query string parameters and converts it to a properly formatted and encoded URL.
    Add the code in [Listing 15-2](#Lis15-2) to *script.js*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-2: Creating the
    URL</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The code to create the URL lives in the getUrl function. This function first
    sets the base URL (the part of the URL before the query string) ❶. Then, to build
    the query string, we start by creating a params object ❷, with the search query
    q using GitHub’s search query format. Specifically, we’re searching for repositories
    whose language is JavaScript that have over 10,000 stars (users on GitHub can
    “star” repositories to save them for later, so the number of stars is a rough
    measure of popularity). You can try out this query in the search box on [*https://<wbr>github<wbr>.com*](https://github.com)
    if you want.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we map over the key-value pairs in params, creating a string for each
    pair with the format "key=value" ❸. The keys don’t need to be URL-encoded—unquoted
    object keys don’t contain any special characters, so they’re already valid in
    URLs—but we encode the values using the built-in function encodeURIComponent,
    which replaces any disallowed characters with their percent-encoded versions.
    We then join the strings together, separating them with the & character, and build
    and return the final URL by combining the base URL, the ? character, and the query
    string ❹. We end the script by calling our getUrl function and logging the result
    to the console.
  prefs: []
  type: TYPE_NORMAL
- en: When you load the page and open the console, you should see the URL shown earlier
    printed there. If you copy that URL and paste it into your browser’s address bar,
    you should see a bunch of JSON data. If not, make sure the URL matches the URL
    on the previous page, and check your code if it doesn’t. If the URL looks correct
    and you’re not getting data, or you’re getting an error message, it’s possible
    that GitHub has changed the way its API works. See the upcoming box “Authenticated
    vs. Unauthenticated APIs” for guidance on what to do in this case.
  prefs: []
  type: TYPE_NORMAL
- en: To bring the JSON data into your application you can use D3’s json helper method,
    which fetches JSON from a given URL. Update the end of *script.js* as shown in
    [Listing 15-3](#Lis15-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-3: Fetching JSON
    data</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a bunch of data from an API may take a little time, so the d3.json
    method returns a Promise, a type of object that represents something that will
    be available in the future. The then method takes a function that will be called
    when the data is ready. D3 converts the JSON response string into a JavaScript
    object, so data will be an object. Here, we just log it to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you reload the page, after waiting a few seconds you should see the data
    in the console. Take a moment to inspect it. You should see three top-level properties:
    incomplete_results, items, and total_count. The incomplete _results property will
    be true if the query took too long and the API was able to return only partial
    results; otherwise, it will be false. The total_count property gives the total
    number of results for this search query (this is the total number of results the
    search found, of which only the first 20 are returned). The items array contains
    the results of the current call; it should contain 20 items. Each item is an object
    with some information about a particular repository, including its name, description,
    and various other details. Several of the fields are themselves GitHub API URLs
    that can be called to get additional information about the repository. For example,
    languages_url is an API URL that tells you what programming languages are used
    in the repository, broken down by the number of lines of code per language.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, we’ll be using several fields from each item: full_name, stargazers_count,
    html_url, and license. The full_name field holds the name of the repository owner
    and the name of the repository joined with a forward slash: for example, "facebook/react".
    The stargazers_count field gives the number of times the repository has been starred
    by users. The html_url field holds the repository’s URL on GitHub. Finally, license
    has data about which software license the repository uses.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Open source code owners use software licenses to tell other users what they
    can and can’t do with their code. For example, some licenses are very restrictive,
    stating that the code can’t be used in an application whose code isn’t itself
    open source. Others are much more permissive, allowing you to do whatever you
    want with the code.*'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Basic Visualization</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the data, we’ll create a basic bar chart showing how many stars
    each repository in the dataset has received. To do this, we’ll create the required
    SVG elements, draw the axes, and draw the bars themselves. Later we’ll improve
    on this basic chart, making it more informative, stylish, and interactive.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Creating the Elements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create our chart, we first have to create the svg element that will hold
    it and the two g elements for the axes. In this case, the axes will be on the
    bottom and left sides. Add the code in [Listing 15-4](#Lis15-4) to the start of
    *script.js*, before the getUrl function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-4: Setting up the
    elements</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Much like we did for the character frequency chart in [Chapter 14](chapter14.xhtml),
    we append an svg element to the page ❶ and set its width and height. We then create
    a margin object ❷ and append the g elements for containing the bottom ❸ and left
    ❹ axes, which we position based on the margins.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Drawing the Axes</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the elements created, we can make a start on the update function, which
    will draw the visualization. First, we’ll create the scales based on the data
    and draw the axes. Make the changes to *script.js* shown in [Listing 15-5](#Lis15-5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-5: Drawing the axes</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The update function takes the items array from the API response. Our bar chart
    will have a vertical bar for each repository, so we create the horizontal xScale
    using the scaleBand helper to evenly space the bars ❶. The domain is the full_name
    from each repository. Each repository’s full name is unique, so this will result
    in 20 bands. The vertical yScale is used to visualize the number of stars that
    each repository has, so its domain goes from zero to the max stargazers_count
    ❷. We use nice here to round the top of the scale to the next tick value. After
    creating the scales, we create the axis generators ❸ and then use those generators
    to draw the axes to the containers ❹, as we did for the character frequencies
    project.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do here is call our update function from inside the d3.json
    callback, passing the items array ❺. We’re able to go straight from fetching the
    data to calling update because the GitHub Search API conveniently returns the
    data in the format we need for rendering. There’s no need to do any processing
    of the data like we did in the character frequencies example, where the source
    data was just a string and we needed a sorted array of objects describing each
    character and its count.
  prefs: []
  type: TYPE_NORMAL
- en: When you reload *index.html* you should now see the axes, as shown in [Figure
    15-1](chapter15.xhtml#fig15-1). We’ll fix the bottom axis labels shortly; they’re
    a mess right now because D3 is trying to render the full name of each repository.
    Also, your left axis scale may go higher than the 200,000 shown in the figure,
    depending on how many stars the most popular JavaScript project has when you run
    this code. At the time of this writing, facebook/react had the most stars of any
    JavaScript project on GitHub, at around 196,000.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-1: The axes</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Given that we’re working with such large numbers here (and getting larger every
    day), we can increase readability by using SI prefixes like *k* for 1,000\. This
    is easy to do in D3 with the right number format. While we make that change, we’ll
    also remove the ticks from the bottom axis. See [Listing 15-6](#Lis15-6) for these
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-6: Cleaning up the
    scales</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: For the bottom axis, we’re updating the tick values to be an empty list ❶, which
    effectively removes the ticks. For the left axis, we’re adding a tick format using
    the format specifier "~s" ❷, which will, for example, render the number 200,000
    as 200k and 1,000,000 as 1M. [Figure 15-2](chapter15.xhtml#fig15-2) shows how
    the updated axes should now look.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-2: The axes after
    some cleanup</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The numbers in the left axis are now easier to read at a glance, and the bottom
    axis is no longer a jumble of text.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Drawing the Bars</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that the axes are drawn, we need to draw the bars themselves. Add the code
    in [Listing 15-7](#Lis15-7) to the end of the update function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-7: Drawing the bars</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: As in the character frequencies project, we’re drawing a bunch of rect elements.
    The key function ❶ extracts the full_name property, which we’re using here as
    the unique identifier for each repository. For now, we’re using the simple join
    technique, without separate handling for entering, updating, and exiting elements
    (that will come later).
  prefs: []
  type: TYPE_NORMAL
- en: The x attribute is set based on looking up the full_name in xScale, and the
    width is based on the bandwidth method on xScale. The y and height attributes
    are a bit trickier this time and require some explanation. If you look back at
    the definition of yScale in [Listing 15-5](#Lis15-5), you’ll see that the domain
    is [0, d3.max(items, d => d.stargazers_count)] and the range is [height - margin
    .bottom, margin.top]. With the values we’ve set, that range expands to [380, 20].
    The range goes from high to low, meaning that high values in the domain map to
    lower values in the range, and vice versa. This is because y values in computer
    graphics count down from the top of the screen, but in our graph we want y values
    to count up from the bottom of the graph. The other thing that makes this tricky
    is that SVG rectangles are drawn from the top-left corner, which will likely be
    different for each bar, so we need to set a variable height that makes all the
    bars hit the bottom axis.
  prefs: []
  type: TYPE_NORMAL
- en: Because of all this, we set the y attribute of the bar to yScale(d.stargazers
    _count) ❷, which gives the vertical position of the top of the bar. To calculate
    the height of the bar, we use yScale(0) - yScale(d.stargazers_count) ❸. Calling
    yScale(0) gives the vertical position of the bottom of the bar (all the bars should
    have their base at 0 in the domain), so subtracting the position of the top of
    the bar from the position of the bottom of the bar gives the height of the bar.
    We need to end up with a positive height, so we have to subtract the smaller number
    from the larger number. The top of the bar is a smaller number in the display
    range, even though it’s a larger number in the domain. [Figure 15-3](chapter15.xhtml#fig15-3)
    shows how the bars should look, though keep in mind that your bar heights may
    be different based on how the data evolves.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-3: Drawing the bars
    as rect elements</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: As you look at the bars, remember that each bar is drawn from its top-left corner,
    and that the heights are calculated such that the bottoms of all the bars align.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Improving the Visualization</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now have a basic visualization up and running, but it isn’t terribly informative.
    In this section, we’ll implement some improvements to make the visualization more
    meaningful. We’ll create a way to see more information about each repository.
    We’ll also color-code the bars to show each repository’s license type, and make
    sure the axes are properly labeled.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Showing Repository
    Info</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The current graph doesn’t give any way of identifying which repository each
    bar represents. There are various ways to solve this (for example, vertically
    or diagonally oriented tick labels, or some kind of *tooltip*, a text field that
    pops up when a bar is hovered), but for this project we’ll add a permanent sidebar
    that shows more information about a bar when you hover over it. First, we’ll add
    the HTML for the sidebar to *index.html*, as shown in [Listing 15-8](#Lis15-8).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-8: Adding the sidebar
    HTML to</samp> <samp class="SANS_Futura_Std_Book_11">index.html</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Here we set up a div called info with the elements that we’ll need to display
    the repository information. It’s nested inside another div called sidebar. This
    outer div may seem superfluous now, but later we’ll add another div element to
    the sidebar, so we’ll need the parent div element to contain the two sidebar div
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: The info div will show the repository name, its license type, and its number
    of stars. We use span elements to wrap parts of the text. A span is a container
    element like a div, but unlike div elements, which create a new block, span is
    an inline element, so it can enclose part of a line of text without making a new
    line. Later, we’ll update the content of the value spans when you hover over a
    bar to show the relevant information about that bar.
  prefs: []
  type: TYPE_NORMAL
- en: One of the span elements contains an a element ❶, which creates a hyperlink
    to another page or website. The URL of the link is specified with an href attribute,
    which we’ll set dynamically later. The target="_blank" attribute instructs the
    browser to open the link in a new tab or window.
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar looks a bit ugly at this stage, so let’s add some CSS. Add the code
    in [Listing 15-9](#Lis15-9) to *style.css*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-9: Styling the sidebar</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project we’re using a CSS technique called *flexbox* ❶, which is a
    relatively recent addition to the CSS specification. Flexbox makes it much easier
    to define layouts, especially those that will work flexibly across a variety of
    screen and viewport sizes. Flexbox layouts have two main components: the *flex
    container* and the *flex items*. The flex container is a parent element that defines
    how its child flex items (the direct children of the container) are sized and
    how they flow. In our case, the flex container is the body element, and the flex
    items are the svg element and the #sidebar element. By default, the items are
    arranged left to right (meaning that the #sidebar element will appear on the left
    of the screen, followed by the svg element to its right). The declaration align-items:
    flex-start; means that the items will be aligned to the top of the parent container.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you want to learn more about flexbox, check out* [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).'
  prefs: []
  type: TYPE_NORMAL
- en: Currently the svg element is being appended to the body element, meaning that
    it comes after the sidebar, but for layout reasons we want it to come before.
    To do that, we’ll need to switch from the append method to the insert method when
    we create the svg element, since the latter allows us to specify an element to
    insert before. The *script.js* change for this is shown in [Listing 15-10](#Lis15-10).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-10: Inserting the
    svg element before the sidebar</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now the sidebar will appear to the right of the graph, as the svg element now
    appears before the sidebar in the flex container.
  prefs: []
  type: TYPE_NORMAL
- en: Before we write the code for displaying the details about a repository in the
    sidebar, we need a function for getting the name of the repository’s license.
    Accessing the other pieces of information will be straightforward, but not all
    repositories have a license, so our function has to handle the case where no license
    data is available. [Listing 15-11](#Lis15-11) shows the new getLicense function,
    which you can insert into *script.js* just before the update function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-11: The getLicense
    function</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If a repository has a license, the license name will be available as d.license.name,
    but if it doesn’t have a license, d.license will be undefined. We test for this
    situation using the ?. operator, called the *optional chaining operator* ❶. Like
    the regular . operator, ?. attempts to take the object specified to the left of
    the operator and access the method or property specified to the right of the operator.
    Unlike the regular . operator, however, ?. will return undefined if the object
    to the left of the operator is null or undefined. Thus, if d.license is undefined
    (meaning the repository doesn’t have a license), our license variable will be
    set to undefined, but if d.license is an object (meaning the repository has a
    license), then license will be set to d.license.name. If license ends up undefined
    ❷, our getLicense function returns the string "No License". Otherwise, the value
    of license is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add the code that will update the sidebar when the bars are hovered
    over. We’ll do this by adding a mouseover event handler to the rect elements.
    Update *script.js* with the code in [Listing 15-12](#Lis15-12). This code goes
    at the end of the update function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-12: Updating the
    sidebar on hover</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'D3 event handlers are called with two arguments: the event object (e) and the
    datum bound to the element that the event was triggered on (d). The first thing
    we do in the handler is select the #info element, because all the elements we
    want to modify are children of that element. We then update the a element inside
    the .value element inside the .repo element ❶ (refer back to [Listing 15-8](#Lis15-8)
    or look at *index.html* to remind yourself of the HTML structure). We’re setting
    both the text content of this element and the href attribute. This has the effect
    of making a link to the repository, with the full name of the repository as the
    link text. We similarly set the text of the .value .license element to whatever
    getLicense returns for this datum and the text of the .stars .value element to
    the number of stars.'
  prefs: []
  type: TYPE_NORMAL
- en: Reload the page and try hovering over some of the bars. You should see something
    like [Figure 15-4](chapter15.xhtml#fig15-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-4: The sidebar showing
    details about one of the repositories</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: For each bar you hover over, the details for that repository should show up
    in the new sidebar. If you click the repository name, your browser should open
    up a new tab and take you to the repository’s GitHub page.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Color-Coding the
    Bars</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In order to convey some additional information visually, we’re going to color-code
    the bars based on the license types. D3 lets you create scales whose inputs (the
    domain) are values and whose outputs (the range) are colors. You’ll see how to
    do that in [Listing 15-13](#Lis15-13).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-13: Creating a color
    scale for the licenses</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to collect all the unique license names. To do this, we map over
    the items, calling our getLicense function for each one ❶. This gives an array
    of the license names. In the same line, we pass the resulting array to the Set
    constructor. In programming terms, a *set* is a collection of unique items, so
    the Set constructor can take an array of items and filter out any duplicates.
    In JavaScript, sets maintain their order, like arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'The d3.scaleOrdinal helper ❷ creates a scale with discrete inputs and discrete
    outputs. Here, the inputs are the unique license names and the outputs are color
    names. For the scale’s range, we’re using d3.schemeCategory10, which is an array
    of 10 hex color strings. You can check it out in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Each license in the set will map to one of these colors, index-wise. If there
    are more than 10 licenses, the colors will wrap around to the beginning again
    (the eleventh and twelfth licenses will use the same colors as the first and second
    ones).
  prefs: []
  type: TYPE_NORMAL
- en: Next we have to set the color of the bar based on its license and the color
    scale. [Listing 15-14](#Lis15-14) shows how to make that change near the end of
    the update function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-14: Setting the
    fill color of the rect</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We have to call our getLicense function on d to get the license name (because
    it could be "No License"), before passing the license name to the colorScale.
    This gives us the color value for setting the fill attribute of the rect.
  prefs: []
  type: TYPE_NORMAL
- en: With color-coding like this, you really need a key so users know what each color
    means. We’ll create that key as another box in the sidebar, beneath the repository
    info box. It will include squares of color alongside the corresponding license
    names. First, we’ll need some more HTML. Update *index.html* with the changes
    in [Listing 15-15](#Lis15-15).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-15: Adding the div
    and heading for the license key</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Here we’re creating another div called key inside the sidebar div and giving
    it a heading. We’ll create the other elements for the key using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Next comes the CSS for styling these new elements and the children we’ll be
    adding with JavaScript. Add the code in [Listing 15-16](#Lis15-16) to the end
    of *style.css*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-16: Styling the
    key</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The font size for the h1 element here is set to 1.5em, which means 1.5 times
    the font size of the parent element. This ensures that this heading will be 1.5
    times bigger than the rest of the text. The #key .color ruleset is used to style
    the squares of color that will appear as part of the key. These will be div elements,
    but display: inline-block means that they’ll act like a cross between an inline
    element (like a span), in that they won’t force a new line, and a block element
    (like a div), in that they’ll be able to have fixed dimensions and margins. (Inline
    elements are unable to have a width and height because they’re sized based on
    their content, and in this case the squares have no content.)'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add the JavaScript that will generate the key. This will entail a
    new data join at the end of the update function, to join the licenses to the elements
    used to render them. Update *script.js* with the changes in [Listing 15-17](#Lis15-17).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-17: Generating the
    key</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we’re using the #key element as the container for our new join, and we’re
    joining in a bunch of p elements to bind to each license datum. We’re using the
    advanced join technique, but just with an enter function; we don’t need custom
    behavior for updating or exiting items. (We can’t use the regular join technique
    here because then the element appends would happen every time update is called.)
    First we create the p element for each new datum ❶, then we append a div element
    where we’ll display the square of color to the p element ❷. Adding the color class
    to the div means that it will have the styling from [Listing 15-16](#Lis15-16).
    To give it the right color, we use the style method ❸, which sets an inline CSS
    style on the element. We set the color to the appropriate value for the datum
    using colorScale. Finally, we add a span element to the p element for holding
    the actual name of the license ❹.'
  prefs: []
  type: TYPE_NORMAL
- en: Reload the page and you should see something like [Figure 15-5](chapter15.xhtml#fig15-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-5: Color-coded bars
    with a key</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Our visualization now has a full key showing the license that each color maps
    to, making the colors much more meaningful.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Labeling the Left
    Axis</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s implied that our graph’s left axis shows the number of stars each repository
    has, but that isn’t explicitly stated in the chart. To fix this, we’ll add a text
    element to label the left axis. The code for this is in [Listing 15-18](#Lis15-18).
    Add this code right before the getLicense function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-18: Adding a left
    axis label</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to calculate where to draw the label. Its vertical position should
    be in the middle of the chart. We calculate the height of the chart based on the
    total height and the two margins, then calculate the midpoint based on adding
    the top margin and half the height of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we append a text element with the word *Stars* to the svg element. We
    set the font earlier in *style.css* by applying a font-family to the body element.
    Setting the text-anchor attribute to middle ❶ causes the text to be centered around
    its calculated position. We also specify two transformations ❷: a translate followed
    by a rotate. The translate moves the center of the label to the correct position,
    and the rotate turns it 90 degrees counterclockwise (or 270 degrees clockwise).'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Interactivity</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our visualization is already somewhat interactive in the sense that hovering
    over a bar shows details about that repository in the sidebar. It would be fun
    to add another interactive element that allows the user to filter the data. For
    example, now that we have a key listing the different license types, we could
    use it to selectively show or hide repositories with those licenses. We’ll implement
    this interactive feature now, while also adding animation to smooth out the changes
    to the graph.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Filtering the Data
    by License</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To let the user filter the data by license type, we’re going to add a checkbox
    to each of the items in the key. We’ll then use those checkboxes to determine
    which repositories to (temporarily) exclude from the graph. This will require
    keeping track of the licenses we want to hide and removing any repositories that
    use those licenses before rendering.
  prefs: []
  type: TYPE_NORMAL
- en: First we’ll add the checkboxes. Change *script.js* as shown in [Listing 15-19](#Lis15-19)
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-19: Adding checkboxes</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In HTML, a checkbox is an input element with a type attribute value of checkbox.
    In the code, we add one of these at the start of each p element in the key. The
    checked attribute determines whether the checkbox is checked or not; we set them
    to be checked by default, so all the repositories will be shown when the visualization
    first loads. The title attribute gives a tooltip with helper text if you hover
    over the element.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create a mechanism for keeping track of which licenses should
    be hidden. The code for this is in [Listing 15-20](#Lis15-20).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-20: Keeping track
    of the hidden licenses</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new empty Set called hiddenLicenses, just before the update
    function ❶. We’re using Set here to make it easier to add or remove licenses—with
    an array it’s trickier to remove a specific element. Then, after the code that
    renders the key, we create a change event handler for the checkboxes ❷. Whenever
    a checkbox changes from checked to unchecked or vice versa, this handler will
    run. In the handler, e is the change event and d is the bound datum (even though
    the license is bound to the p element, the children, like this checkbox, also
    inherit the datum). We use e.target.checked to determine whether, after the change,
    the checkbox is checked or not. If it is, then we know the datum should be removed
    from the hiddenLicenses set, using the delete method on the set ❸. Conversely,
    if the checkbox is now unchecked we add that datum to hiddenLicenses, using the
    add method on the set ❹.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, with the hiddenLicenses set modified, we log the set to the console
    and call the update function again ❺, with the same items it was called with originally.
    When you reload the page, you won’t see any new behavior because we’re not actually
    updating the graph yet, but if you open the console you’ll see how the hiddenLicenses
    set changes as you check and uncheck the various checkboxes. The hiddenLicenses
    set should always correspond to the unchecked licenses in the key.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to determine which repositories to show when there are hidden licenses.
    To do that, we’ll create a new array called filtered at the top of the update
    method. It will be a version of the items array with the repositories with hidden
    licenses removed. The code for this change is in [Listing 15-21](#Lis15-21).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-21: Determining
    the repositories with hidden licenses</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To filter the list of items, for each item we check to see if its license name
    is in the hiddenLicenses set, using the set’s has method. If the name isn’t included
    the set, then it will be in the filtered list. Otherwise, it’s filtered out.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to switch to using the filtered array rather than the items
    array for rendering. The new graph will be rendering only the filtered data, so
    we need to change the scales and the bar drawing code to work with filtered. On
    the other hand, we shouldn’t filter the licenses set because it’s needed to maintain
    a consistent color scheme and to render the key, regardless of whether certain
    licenses are currently hidden in the bar chart. [Listing 15-22](#Lis15-22) shows
    all the places in the update function that need to be changed to use filtered
    instead of items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-22: Replacing items
    with filtered</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">for rendering
    the bar chart</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We update the code for creating the bottom ❶ and left axis ❷ scales, as well
    as the code for drawing the bars ❸, changing items to filtered in each case. Refresh
    the page and deselect some of the licenses in the key. You should now see the
    corresponding bars disappear from the bar chart. The changes are rendered because,
    as you saw in [Listing 15-20](#Lis15-20), we’re calling update from the change
    event handler for the checkboxes.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Animating the Changes</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the icing on the cake, let’s add some animations. These will make it easier
    to see changes to the bars as licenses are shown or hidden, and also just make
    the visualization look cooler. We’re going to animate two parts of the graph:
    the left axis and the bars. To do this, make the changes shown in [Listing 15-23](#Lis15-23).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-23: Adding animations</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Animating the left axis is straightforward: we just call transition on the
    axis’s container before the axis is drawn to it ❶, and the left axis will transition
    anytime the scale changes (which will happen only if the biggest bar is hidden
    or unhidden, which changes the upper bound of the domain).'
  prefs: []
  type: TYPE_NORMAL
- en: To animate the bars, we follow the standard practice of switching to the advanced
    join technique and adding transitions for entering, updating, and exiting elements.
    Entering elements start out with all their attributes set and an opacity of 0
    (meaning that they are 100 percent transparent) ❷. We then call transition and
    animate up to 100 percent opaque ❸, which has the effect of fading in entering
    elements. Updating elements remain the same color and opacity, but their position
    and dimensions can change, so we animate all of these ❹. This has the effect of
    stretching and sliding these updated elements to their new size and position.
    Exiting elements do the opposite of entering elements and fade out, which we achieve
    by transitioning their opacity back to 0 ❺. Remember that we also have to call
    remove on any exiting elements after the transition is complete ❻.
  prefs: []
  type: TYPE_NORMAL
- en: Reload the page and try hiding and unhiding various licenses. The first license
    in the key should always correspond to the repository with the most stars (because
    the repositories are ordered that way and we extract the license names from the
    repositories in order), so if you want to see the left axis resize, you’ll need
    to turn off that license. You should see the repositories with that license fade
    out and the other repositories expand to fill the space and the recomputed scale.
    [Figure 15-6](chapter15.xhtml#fig15-6)(a) shows the chart with all the licenses
    shown, and [Figure 15-6](chapter15.xhtml#fig15-6)(b) shows the chart with the
    MIT license (at the time of writing, the most popular license in the dataset)
    hidden.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure_15-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-6: The final chart
    showing all licenses (a) and with the top license hidden (b)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Try showing and hiding different licenses to get a feel for how the animations
    work. Is there anything you would change about them? How else might you make the
    visualization more interesting?
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Complete Code</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’d like to see what the full *script.js* file should look like, you can
    find the complete code in [Listing 15-24](#Lis15-24).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-24: The full</samp>
    <samp class="SANS_Futura_Std_Book_11">script.js</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    for this project</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this final project, you created a pretty complex interactive chart using
    live data fetched from the GitHub Search API. You now have the tools you need
    to create your own custom charts using D3\. We’ve touched on only a small part
    of what this library offers, however; it has support for many different kinds
    of visualizations, like trees, cartographic maps, and other more esoteric layouts.
    Each of these visualization types has the same basis in SVG, data binding, joins,
    scales, and transitions, so what you’ve learned here will set you up well if you
    decide to explore data visualization with JavaScript further. The D3 website,
    [*https://<wbr>d3js<wbr>.org*](https://d3js.org), is an excellent starting point
    for further research.
  prefs: []
  type: TYPE_NORMAL
