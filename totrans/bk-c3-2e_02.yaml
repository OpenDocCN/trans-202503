- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**MEDIA QUERIES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**媒体查询**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/common-01.jpg)'
- en: Back when the World Wide Web was something you only accessed via a browser on
    your desktop or laptop, writing CSS was fairly straightforward. Although you had
    to consider cross-browser and cross-platform issues, at least you knew with reasonable
    certainty that everyone was using fundamentally similar devices to view your website.
    Over the last few years, however, we’ve seen an explosion of new devices for accessing
    the Web—from game consoles to mobile devices such as smartphones and tablets.
    Presenting your content to everybody in the same way no longer makes sense when
    they could be viewing your website on a widescreen desktop monitor or a narrow
    handheld screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在万维网仅能通过桌面或笔记本电脑上的浏览器访问的时代，编写CSS相对简单。尽管你必须考虑跨浏览器和跨平台的问题，但至少你可以合理地确定每个人使用的是功能上相似的设备来查看你的网站。然而，在过去的几年里，我们见证了访问网络的新设备爆炸式增长——从游戏主机到智能手机和平板电脑等移动设备。当用户可能通过宽屏桌面显示器或窄小的手持屏幕查看你的网站时，以相同方式展示内容已不再合理。
- en: 'CSS has had a way to serve different styles to different media types for quite
    some time, using the `media` attribute of the `link` element:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS已经有了一种方法，通过`link`元素的`media`属性为不同的媒体类型提供不同的样式：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But this approach has a number of flaws—not least of which is that using it
    is like wielding a pretty blunt instrument when the screen in question can be
    between 3.5 inches and 32 inches in size. The list of types is too broad, and
    many aren’t supported by the devices they’re aimed at—for example, I don’t know
    of a single web-enabled television that responds to the `tv` type. Unsurprisingly,
    given this, the W3C has begun to deprecate the use of media types.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法存在一些缺陷——其中之一就是，当屏幕尺寸介于3.5英寸到32英寸之间时，使用这种方法就像拿着一把相当钝的工具。类型列表过于宽泛，许多设备无法支持其目标类型——例如，我不知道有哪一款支持`tv`类型的网络电视。正因如此，W3C已经开始逐步弃用媒体类型的使用。
- en: The CSS3 solution to this problem is to use *media queries*, defined in the
    Media Queries Module (*[http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)*).
    These queries extend the media types by providing a query syntax that lets you
    serve far more specific styles to your user’s device, giving users a tailored
    experience. This description may sound quite dry, but this feature is actually
    one of the most revolutionary in the entire CSS3 specification. Media queries
    give you the freedom to make websites that are truly device- independent, offering
    your users the best possible experience no matter how they choose to visit your
    site.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的CSS3方法是使用*媒体查询*，它在媒体查询模块中有所定义（*[http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)*）。这些查询通过提供查询语法来扩展媒体类型，使你能够为用户的设备提供更加具体的样式，给用户带来量身定制的体验。这个描述可能听起来相当枯燥，但这个特性实际上是整个CSS3规范中最具革命性的一项。媒体查询让你能够自由地制作真正独立于设备的网站，无论用户如何访问你的网站，都能为他们提供最佳的体验。
- en: The Media Queries Module has W3C Recommendation status, so it is considered
    a standard. The module is already well implemented in all major browsers, including
    Internet Explorer from version 9.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询模块已经获得了W3C推荐状态，因此被视为标准。该模块在所有主流浏览器中得到了良好的实现，包括从版本9开始的Internet Explorer。
- en: '**The Advantages of Media Queries**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**媒体查询的优势**'
- en: As a quick demonstration of the power and flexibility of media queries, I’ll
    show an example of how websites can be optimized for mobile browsers without requiring
    a great deal of extra development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为媒体查询强大灵活性的快速展示，我将展示一个如何优化网站以适应移动浏览器的示例，而不需要额外大量开发。
- en: 'People visiting your site on a mobile device may well struggle to use it: The
    text may appear too small, and zooming in means a lot of scrolling to find navigational
    elements; those navigational elements may involve drop-down functionality that
    is triggered by hovering over them, an action that often doesn’t exist on mobile
    devices; large images may take a long time to download over a weak data connection
    and use a substantial portion of a user’s monthly bandwidth allowance. Some sites
    plan for this by providing mobile-friendly versions, but these generally involve
    a lot of development work. A subdomain has to be set up with style sheets and
    HTML templates that differ from the parent site; images have to be resized to
    better fit small screens; and a script has to be created to detect whether a mobile
    browser is being used and to redirect to the mobile site accordingly. This approach
    can cause problems: Your script has to be kept up to date with all mobile browser
    versions, and maintenance often involves duplication to keep both mobile and desktop
    versions in sync.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 访问你网站的用户在移动设备上可能会遇到使用困难：文本可能显示得太小，放大后需要大量滚动才能找到导航元素；这些导航元素可能涉及下拉功能，通常需要通过鼠标悬停来触发，而这种操作在移动设备上常常不存在；大图像可能在弱数据连接下需要较长时间下载，并且会占用用户每月带宽的较大一部分。一些网站通过提供适配移动设备的版本来应对这些问题，但这通常需要大量开发工作。必须设置一个子域名，并为其提供与母站不同的样式表和HTML模板；图像需要调整大小以更好地适应小屏幕；还必须创建一个脚本来检测是否正在使用移动浏览器，并据此重定向到移动站点。这种方法可能会引发问题：你的脚本必须与所有移动浏览器版本保持同步，维护时往往需要复制工作，以确保移动版和桌面版同步更新。
- en: Media queries address many of these issues. For a start, they detect devices
    based on their attributes, so no browser-sniffing scripts are required. They allow
    you to target style sheets directly for a device’s capabilities, so if a device
    with a small screen is detected, CSS rules will be tailored to that screen size,
    removing extraneous elements, serving smaller images, and making text clearer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询解决了许多问题。首先，它们基于设备的属性来检测设备，因此不需要使用浏览器嗅探脚本。它们允许你直接根据设备的功能来指定样式表，因此如果检测到一个小屏幕设备，CSS规则将针对该屏幕大小进行调整，移除多余的元素，提供更小的图片，并使文本更加清晰。
- en: For example, take a look at the technology website The Next Web (*[http://thenextweb.com/](http://thenextweb.com/)*),
    as shown in [Figure 2-1](ch02.html#ch02fig1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看技术网站The Next Web (*[http://thenextweb.com/](http://thenextweb.com/)*)，如[图
    2-1](ch02.html#ch02fig1)所示。
- en: '![Image](graphics/f02-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f02-01.jpg)'
- en: '*Figure 2-1: The Next Web website viewed in a desktop browser and a mobile
    browser (inset)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：The Next Web 网站在桌面浏览器和移动浏览器（内嵌图）中的显示效果*'
- en: When viewed in a desktop browser, the site features a long horizontal top navigation,
    related content on the left of the page, and main content laid out in a grid.
    Through the power of media queries, when you view the same site in a narrower
    browser—such as an iPhone would use—the navigation is more compact with sharing
    options hidden away, the related content has been moved off screen, and the main
    content on the page is moved into a single column, which is ideal for scrolling
    down.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当在桌面浏览器中查看时，网站具有长的水平顶部导航栏，页面左侧是相关内容，主要内容则以网格布局显示。通过媒体查询的强大功能，当你在一个更窄的浏览器中查看同一网站时——例如iPhone使用的浏览器——导航栏变得更紧凑，分享选项被隐藏，相关内容被移出了屏幕，页面上的主要内容则移入了单列布局，这对于向下滚动来说是理想的。
- en: Of course, the Web now appears on more than just desktop and smartphone devices,
    and we really need to be working toward the common goal of websites optimized
    for any device. See “Responsive Web Design” on [page 10](ch02.html#page_10) for
    more on this.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，现在不仅仅是桌面和智能手机设备在浏览网页，我们真的需要朝着一个共同目标努力——即使网站能够在任何设备上进行优化。有关此方面的更多信息，请参见[第
    10 页](ch02.html#page_10)中的“响应式网页设计”。
- en: And if you want to see what other people have been doing with media queries,
    you’ll find a great gallery online at *[http://www.mediaqueri.es/](http://www.mediaqueri.es/)*,
    which showcases some of the better examples of what’s possible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看看其他人如何使用媒体查询，你可以在网上找到一个很棒的画廊，地址是 *[http://www.mediaqueri.es/](http://www.mediaqueri.es/)*，它展示了一些媒体查询的优秀应用案例。
- en: '**Syntax**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**语法**'
- en: 'A media query sets a parameter (or series of parameters) that enables associated
    style rules if the device used to view the page has properties that match that
    parameter. You can use media queries in three ways, all of which match the different
    ways that CSS can be applied to a document. The first is to call an external style
    sheet using the `link` element:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询设置了一个参数（或一系列参数），当用于查看页面的设备具有匹配该参数的属性时，相关的样式规则将被启用。你可以通过三种方式使用媒体查询，所有这些方法都与
    CSS 应用于文档的不同方式相对应。第一种方式是使用 `link` 元素来调用外部样式表：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**RESPONSIVE WEB DESIGN**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应式网页设计**'
- en: 'In 2010, Ethan Marcotte wrote an article titled “Responsive Web Design” (*[http://www.alistapart.com/articles/responsive-web-design/](http://www.alistapart.com/articles/responsive-web-design/)*),
    in which he cleverly consolidated contemporary thinking on making websites that
    adapt to the devices used to view them through the power of media queries. Here
    is what he said:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2010年，Ethan Marcotte 写了一篇名为“响应式网页设计”的文章（* [http://www.alistapart.com/articles/responsive-web-design/](http://www.alistapart.com/articles/responsive-web-design/)*），在文中他巧妙地整合了当代的思考，提出了通过媒体查询的力量，让网站能够适应不同设备的使用需求。以下是他所说的内容：
- en: Now more than ever, we’re designing work meant to be viewed along a gradient
    of different experiences. Responsive web design offers us a way forward, finally
    allowing us to “design for the ebb and flow of things.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，比以往任何时候都更加重要的是，我们正在设计那些旨在适应不同体验梯度的作品。响应式网页设计为我们提供了一条前进的道路，最终让我们能够“为事物的潮起潮落设计”。
- en: Since then, responsive design has fast become the norm; the majority of developers
    think this way, and more sites every year are launched or relaunched using responsive
    design methods. This sort of design is not without its challenges—designing fluid,
    responsive sites especially has had to be reconsidered, as most design tools are
    simply not up to the job—but we can safely say we’re on the path to creating a
    Web that can be consumed by anyone, anywhere, in a way that’s been carefully considered
    to work with any device.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，响应式设计迅速成为了主流；大多数开发者都采用这种思路，每年都会有越来越多的网站使用或重新推出响应式设计方法。虽然这种设计并非没有挑战——特别是设计流式、响应式网站时必须重新思考，因为大多数设计工具无法胜任这一任务——但我们可以肯定地说，我们正在朝着打造一个任何人、任何地方都能访问的网络前进，而且这种设计已经经过精心考虑，能够与任何设备兼容。
- en: 'The second is to call an external style sheet using the `@import` directive:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用 `@import` 指令来调用外部样式表：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The third is to use media queries in an embedded style element or in the style
    sheet itself with the extended `@media` rule:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方式是使用媒体查询在嵌入式样式元素中或在样式表本身中，通过扩展的 `@media` 规则进行：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This method is the one I’ll use throughout the rest of this chapter, as it’s
    clearer for demonstration purposes. Which method you use largely depends on your
    own preference and the demands of your existing stylesheet structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是我在本章余下部分将使用的方法，因为它在演示时更为清晰。你选择哪种方法主要取决于你个人的偏好和现有样式表结构的需求。
- en: 'Now that I’ve introduced the declaration methods, let’s explore the syntax.
    You should already be familiar with the `media` attribute—it declares the media
    types that the styles are applied to, just as in the HTML `link` tag:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经介绍了声明方法，接下来我们来探讨一下语法。你应该已经熟悉 `media` 属性——它声明了样式应用的媒体类型，就像 HTML 中的 `link`
    标签一样：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The most common media type values are `screen` and `print`, and as with the
    current syntax, you can use a comma-separated list to choose multiple media queries
    (although that’s becoming less necessary as the other media types become deprecated).
    If omitted, the media type defaults to `all`, so if you’re writing rules that
    will apply to all media types you won’t need to specify them in the media query
    constructor; that being the case, these examples are functionally identical:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的媒体类型值是 `screen` 和 `print`，和当前的语法一样，你可以使用逗号分隔的列表来选择多个媒体查询（尽管随着其他媒体类型逐渐被淘汰，这种做法变得不太必要）。如果省略，媒体类型默认为
    `all`，因此如果你编写的规则适用于所有媒体类型，你就不需要在媒体查询构造函数中指定它们；在这种情况下，这些示例在功能上是相同的：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**NOTE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*To make the code examples in the rest of this book more concise, I’ll omit
    the media type where not essential.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了使本书其余部分的代码示例更加简洁，我会省略那些不重要的媒体类型。*'
- en: 'The first new attribute for the `@media` rule is `*logic*`. This optional keyword
    can have the value of either `only` or `not`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`@media` 规则的第一个新属性是 `*logic*`。这个可选关键字的值可以是 `only` 或 `not`：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `only` value is mainly useful if you want to hide the rule from older browsers
    that don’t support the syntax; for browsers that do support it, `only` is effectively
    ignored. The `not` value is used to negate the query; you use `not` to apply the
    styles if the parameters you set are *not* met.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`only`值主要在你想隐藏规则以防止旧浏览器不支持该语法时使用；对于支持该语法的浏览器，`only`会被有效地忽略。`not`值用于否定查询；如果你设置的参数*不*满足条件，你就使用`not`来应用样式。'
- en: If you use `*logic*` or `*media*` in your query, you also need to use the `and`
    operator, as in the previous examples, to combine them with the required `*expression*`
    attribute. This attribute is used to set parameters that offer functionality beyond
    the media type. These parameters are known as *media features*, and they’re critical
    to the power of media queries. That being the case, let’s explore them in detail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在查询中使用了`*逻辑*`或`*媒体*`，还需要像前面的示例一样使用`and`运算符，将它们与所需的`*表达式*`属性结合使用。这个属性用于设置提供超越媒体类型功能的参数。这些参数被称为*媒体特性*，它们是媒体查询功能强大的关键。既然如此，让我们详细探讨一下它们。
- en: '**Media Features**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**媒体特性**'
- en: '*Media features* are information about the device that’s being used to display
    the web page: its dimensions, resolution, and so on. This information is used
    to evaluate an `*expression*`, the result of which determines which style rules
    are applied. That `*expression*` could be, for example, “apply these styles only
    on devices that have a screen wider than 480 pixels” or “only on devices that
    are orientated horizontally.”'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*媒体特性*是关于用于显示网页的设备的信息：它的尺寸、分辨率等等。这些信息用于评估`*表达式*`，其结果决定应用哪些样式规则。这个`*表达式*`可以是，例如，“仅在宽度超过480像素的设备上应用这些样式”或“仅在设备横屏时应用这些样式”。'
- en: 'In media queries, most media feature expressions require that a value be supplied:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在媒体查询中，大多数媒体特性表达式都要求提供一个值：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This value is needed to construct the example expressions I just mentioned.
    In a few cases, however, you can leave out the value and just test the existence
    of the media feature itself against the expression:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值是构建我刚才提到的示例表达式所需要的。然而，在一些情况下，你可以省略值，只需测试媒体特性本身是否存在于表达式中：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Expressions will become clearer as I talk through the different media features
    and explain when values are required or optional.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我逐步讲解不同的媒体特性并解释何时需要或可选值，表达式会变得更加清晰。
- en: With the syntax covered, let’s meet some of the more prominent media features.
    The ones I introduce next are the most applicable to color display screens used
    for accessing the Web and are the ones you’re most likely to use on a day-to-day
    basis. Other media features are available, but you’re more likely to use them
    for alternative devices such as TVs or fixed-grid terminals (if they’re supported
    on those devices at all).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了语法之后，让我们来认识一些更重要的媒体特性。接下来我介绍的这些是最适用于用于访问网页的彩色显示屏的特性，也是你日常使用中最可能用到的。其他媒体特性也有，但你更可能在替代设备（如电视或固定网格终端）上使用它们（前提是这些设备上支持这些特性）。
- en: '***Width and Height***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***宽度和高度***'
- en: 'The `width` media feature describes the width of the rendering viewport of
    the specified media type, which, in practice, usually means the current width
    of the browser (including the scroll bar) for desktop operating systems. The basic
    syntax requires a length value:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`媒体特性描述了指定媒体类型的渲染视口的宽度，实际上通常指的是桌面操作系统中当前浏览器的宽度（包括滚动条）。基本语法要求一个长度值：'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this case, the rules are applied only to browsers that are set to be exactly
    600px wide, which is probably far too specific. `width` also accepts one of two
    prefixes, `max-` and `min-`, which allows you to test for a minimum or maximum
    width:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，规则仅应用于宽度恰好为600px的浏览器，这可能过于具体。`width`还接受两个前缀中的一个，`max-`和`min-`，这使得你可以测试最小或最大宽度：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first query applies the rules in browsers that are no wider than 480px,
    and the second in browsers that are at least 640px wide.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询适用于宽度不超过480px的浏览器，第二个适用于宽度至少为640px的浏览器。
- en: 'Let’s look at a practical example. Here, I’ll take advantage of browser window
    sizes by providing a decorative header for wider windows (some rules have been
    left out for clarity):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个实际的例子。在这里，我将利用浏览器窗口的尺寸为更宽的窗口提供一个装饰性的标题（为清晰起见，一些规则被省略了）：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This media query tests for browser viewports that are at least 400px wide and
    applies a background image to the `h1` element when that is the case.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个媒体查询测试的是至少 400px 宽的浏览器视口，并在这种情况下将背景图片应用于 `h1` 元素。
- en: If my browser window is at least 400px wide, I see the image; if I resize it
    to be narrower, only a text header is shown. You can see this example illustrated
    in [Figure 2-2](ch02.html#ch02fig2).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我的浏览器窗口宽度至少为 400px，我就能看到图片；如果我将窗口缩小，则只会显示文本标题。你可以在[图 2-2](ch02.html#ch02fig2)中看到这个例子。
- en: '![Image](graphics/f02-02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f02-02.jpg)'
- en: '*Figure 2-2: Different style rules applied with the* `*width*` *media feature,
    displayed in a desktop browser and mobile (inset)*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：在桌面浏览器和移动端（插图）中应用不同的样式规则，使用 `*width*` 媒体特性*'
- en: 'The `height` media feature works in the same way, except it targets browsers
    based on their height instead of width. The syntax is the same as `width` and
    also permits using `max-` and `min-` prefixes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`height` 媒体特性与 `width` 相同，只不过它是根据浏览器的高度而不是宽度进行判定。其语法与 `width` 相同，也允许使用 `max-`
    和 `min-` 前缀：'
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because of the prevalence of vertical scrolling, however, `height` is used much
    less frequently than `width`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于垂直滚动的普遍性，`height` 的使用频率远低于 `width`。
- en: '***Pixel Ratio***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***像素比***'
- en: In general, the CSS pixel unit (px) is a measurement of a single pixel on the
    computer screen—if your browser viewport is 1024 pixels wide and you give an element
    a width of 1024px, you expect it to fill the horizontal length of the viewport.
    Many new devices, however, especially smartphones and tablets, have super-high
    resolution screens, which would make an element with a width of 1024 pixels seem
    quite small and hard to read when displayed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，CSS 像素单位（px）是计算机屏幕上单个像素的测量单位——如果你的浏览器视口宽度为 1024 像素，并且你给元素设置宽度为 1024px，那么你期望它能够填满视口的水平长度。然而，许多新设备，尤其是智能手机和平板电脑，拥有超高分辨率的屏幕，这会导致一个宽度为
    1024 像素的元素在显示时看起来非常小，并且难以阅读。
- en: To get around this, these newer devices often have a notional CSS pixel, separate
    from the physical pixels of the device, allowing for zooming in and out of the
    content and for high graphical fidelity on the small screen. The ratio of physical
    pixels to CSS pixels is known as the *device pixel ratio (DPR)*. The iPhone 5S,
    for example, has a DPR of 2, which means that one CSS pixel is equal to 4 physical
    pixels—2 horizontally and 2 vertically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一问题，这些较新的设备通常拥有一个虚拟的 CSS 像素，独立于设备的物理像素，使得可以对内容进行放大和缩小，并且在小屏幕上保持高图形清晰度。物理像素与
    CSS 像素的比率被称为*设备像素比（DPR）*。例如，iPhone 5S 的 DPR 为 2，这意味着一个 CSS 像素等于 4 个物理像素——水平和垂直各
    2 个。
- en: You can see this illustrated in [Figure 2-3](ch02.html#ch02fig3). The example
    on the left shows one CSS pixel on a “normal” screen with a 1:1 pixel ratio. The
    example in the middle shows the same CSS pixel on a screen with a DPR of 2, like
    the iPhone; there are 4 physical pixels in the same space. Finally, the example
    on the right shows how this would appear on a screen with a DPR of 3, like the
    Nexus 5; now there are 9 physical pixels in the space of a single CSS pixel.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 2-3](ch02.html#ch02fig3)中看到这一点。左边的例子展示了在一个“正常”屏幕上的 CSS 像素，像素比为 1:1。中间的例子展示了在一个具有
    DPR 为 2 的屏幕上的相同 CSS 像素，类似于 iPhone；在同一空间内有 4 个物理像素。最后，右边的例子展示了在一个 DPR 为 3 的屏幕上的效果，类似于
    Nexus 5；现在在一个 CSS 像素的空间内有 9 个物理像素。
- en: '![Image](graphics/f02-03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f02-03.jpg)'
- en: '*Figure 2-3: A CSS pixel with a 1:1 pixel ratio (left), a DPR of 2 (middle),
    and 3 (right)*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-3：一个像素比为 1:1 的 CSS 像素（左），DPR 为 2（中），和 3（右）*'
- en: What that means in practice is that, although the iPhone 5S (for example) has
    a physical resolution of 640×1136, it has a CSS resolution of 320×568—exactly
    half the dimensions, as every CSS pixel is equivalent to two physical pixels,
    both horizontally and vertically (although only when the device is in “mobile
    mode”; see “[Device Width and Height](ch02.html#ch02leve1sec18)” on [page 15](ch02.html#page_15)
    for an explanation of this).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着，虽然 iPhone 5S（例如）具有 640×1136 的物理分辨率，但它的 CSS 分辨率为 320×568——正好是物理分辨率的一半，因为每个
    CSS 像素等于两个物理像素，水平和垂直方向上都是如此（但仅在设备处于“移动模式”时有效；关于这一点，请参见 [“设备宽度和高度”](ch02.html#ch02leve1sec18)
    在 [第 15 页](ch02.html#page_15) 的解释）。
- en: 'Although this high DPR makes scalable content—such as text and vector graphics—sharp
    and clear, bitmap images can suffer badly from a loss of quality when viewed on
    high resolution screens. To get around this problem, a new media feature, called
    `resolution`, is available that lets you target devices based on their DPR:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种高 DPR 使得可缩放内容（例如文本和矢量图形）在高分辨率屏幕上清晰锐利，但位图图像在高分辨率屏幕上查看时可能会因质量丧失而受到严重影响。为了解决这个问题，可以使用一种新的媒体特性
    `resolution`，它允许你根据设备的 DPR 来进行目标定位：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The value of `resolution` is a number with a unit of resolution: *dots per
    inch (DPI)*, *dots per centimeter (DPCM)*, or, most pertinently to us, *dots per
    pixel (DPPX)*. The DPPX unit maps to the DPR of the device, so to apply a rule
    to devices that have a DPR value of 1.5, you use this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolution` 的值是一个分辨率单位的数字：*每英寸点数（DPI）*、*每厘米点数（DPCM）*，或者最适合我们的 *每像素点数（DPPX）*。DPPX
    单位映射到设备的 DPR，因此要应用一个规则到 DPR 值为 1.5 的设备，你可以使用如下规则：'
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with the other media features, you can also detect maximum and minimum pixel
    ratios:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他媒体特性一样，你还可以检测最大和最小像素比：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This flexibility makes serving higher-resolution background images to browsers
    with higher pixel density easier, as you can see in this code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性使得为具有更高像素密度的浏览器提供更高分辨率的背景图像变得更加容易，正如你在这段代码中所看到的：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first rule (➊) means browsers on devices with a “standard” (or low-resolution)
    pixel ratio will use the standard image (*image-lores.png*), whereas devices with
    a DPR of at least 1.5 will use the high-resolution image (*image-hires.png*) instead
    (➋). Note the use of the unfamiliar `background-size` property here (➌); this
    property should be used with high-resolution images to ensure they aren’t displayed
    larger than the element they are applied to (I introduce `background-size` fully
    in [Chapter 8](ch08.html#ch08)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则（➊）意味着，具有“标准”（或低分辨率）像素比的设备上的浏览器将使用标准图像（*image-lores.png*），而至少具有 1.5 DPR
    的设备将使用高分辨率图像（*image-hires.png*）（➋）。注意这里使用了不太常见的 `background-size` 属性（➌）；此属性应与高分辨率图像一起使用，以确保它们不会显示得比应用它们的元素更大（我在[第
    8 章](ch08.html#ch08)中详细介绍了 `background-size`）。
- en: 'Chrome, Firefox, and Internet Explorer 10+ all support the `resolution` media
    feature, although IE unfortunately hasn’t implemented the DPPX value; to accommodate
    IE, you should use DPI, multiplying the required DPR by 96 (the DPI value of a
    standard screen). Here’s an example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome、Firefox 和 Internet Explorer 10 以上版本都支持 `resolution` 媒体特性，尽管 IE 不幸没有实现
    DPPX 值；为了兼容 IE，你应该使用 DPI，将所需的 DPR 值乘以 96（标准屏幕的 DPI 值）。这里有一个示例：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Safari doesn’t support `resolution`, instead using a proprietary media feature
    called `-webkit-device-pixel-ratio` (along with `max-` and `min-` variants), which
    takes as a value a single, unitless number that is the targeted DPR. So to accommodate
    all modern browsers, use this rule:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Safari 不支持 `resolution`，而是使用一个名为 `-webkit-device-pixel-ratio` 的专有媒体特性（同时有 `max-`
    和 `min-` 变体），它的值是一个没有单位的数字，表示目标 DPR。因此，为了兼容所有现代浏览器，可以使用以下规则：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `resolution` rule was implemented in the WebKit engine at the end of 2012,
    so I’m disappointed to not see it released in Safari at the time of writing, almost
    two years later. Hopefully this oversight will be rectified in the near future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolution` 规则是在 2012 年底由 WebKit 引擎实现的，因此我对它在撰写本文时（近两年后）仍未在 Safari 中发布感到失望。希望这个疏忽能够尽快得到纠正。'
- en: '***Device Width and Height***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***设备宽度和高度***'
- en: The `width` and `height` media features are related to the dimensions of the
    browser viewport, but that viewport isn’t always as big as the screen it’s displayed
    on. If you need to target the physical screen size rather than the viewport size,
    you can use the `device-width` and `device-height` properties and their related
    `min-` and `max-` variants. You won’t use these too often, but to explain why,
    I need to digress.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`width` 和 `height` 媒体特性与浏览器视口的尺寸有关，但该视口并不总是与显示它的屏幕一样大。如果你需要针对物理屏幕大小而不是视口大小，可以使用
    `device-width` 和 `device-height` 属性以及它们相关的 `min-` 和 `max-` 变体。你不会太常用到这些，但为了说明原因，我需要稍作偏离。'
- en: 'In the previous section, I explained the difference between CSS pixels and
    physical pixels. The `width` media feature is measured in CSS pixels, and `device-width`,
    in physical pixels. To make content readable and “natural sized” on a small screen,
    both dimensions need to match. You do this by adding the *viewport meta tag* into
    the head of the document, like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我解释了 CSS 像素和物理像素之间的区别。`width` 媒体特性是以 CSS 像素为单位测量的，而 `device-width` 以物理像素为单位。为了让内容在小屏幕上可读并呈现“自然大小”，两个维度需要匹配。你可以通过将
    *viewport meta 标签* 添加到文档的头部来实现，像这样：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When the viewport meta tag with these values is present in the `head` of a page,
    mobile browsers go into “mobile mode,” in which the viewport is sized to ideal
    dimensions for that device. The result is that content is displayed at a more
    appropriate size for the device.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面的`head`部分存在带有这些值的视口元标签时，移动浏览器会进入“移动模式”，此时视口的大小会调整为适合该设备的理想尺寸。结果是，内容以更合适的尺寸显示在设备上。
- en: '**NOTE**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For a more in-depth explanation of mobile viewports and pixels, see Dutch
    developer* *PPK’s “A Pixel Is Not a Pixel Is Not a Pixel”* ([http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html](http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html)).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关移动视口和像素的更深入解释，请参阅荷兰开发者* *PPK的《像素不是像素》*（[http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html](http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html)）。'
- en: The viewport of a browser on a mobile device tends to be as large as the screen
    itself, so the two are basically equivalent; and on desktop browsers, you will
    most likely want to make your content relative to the width of the viewport rather
    than that of the screen. For these reasons, the `device-width` media feature becomes
    less useful than `width`, and you probably won’t use it too much in practice.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备浏览器的视口通常和屏幕本身一样大，因此它们基本上是等效的；而在桌面浏览器上，你通常希望使内容相对于视口的宽度，而不是屏幕的宽度进行调整。由于这些原因，`device-width`媒体特性相比`width`变得不那么有用了，实际上你可能不会经常使用它。
- en: The viewport meta tag is being standardized in CSS as the `@viewport` rule;
    see “[Device Adaptation](ch19.html#ch19leve1sec268)” on [page 252](ch19.html#page_252)
    for a brief walkthrough.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 视口元标签正在被CSS标准化为`@viewport`规则；请参阅[第252页](ch19.html#page_252)的“[设备适配](ch19.html#ch19leve1sec268)”简要介绍。
- en: '***Orientation***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***方向***'
- en: 'If you’re less concerned with the actual dimensions of the viewing device but
    want to optimize your pages for either horizontal (like a typical desktop/laptop
    web browser) or vertical (like a mobile phone or ebook reader) viewing, the media
    feature you need is `orientation`. Here is its syntax:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太关心查看设备的实际尺寸，但希望优化页面以适应横向（如典型的桌面/笔记本浏览器）或纵向（如手机或电子书阅读器）的查看方式，你需要使用的媒体特性是`orientation`。其语法如下：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`*value*` can be one of two keyword options: `landscape` or `portrait`. The
    `landscape` value applies when the width of your browser is greater than its height,
    and the `portrait` value applies when the opposite is true. Although `orientation`
    can certainly be applied to desktop browsers, you’ll find it most useful when
    dealing with handheld devices that the user can easily rotate, such as smartphones
    and tablets.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`*value*`可以是两个关键字选项之一：`landscape`或`portrait`。当浏览器的宽度大于高度时，使用`landscape`值；当高度大于宽度时，使用`portrait`值。尽管`orientation`当然也可以应用于桌面浏览器，但你会发现它在处理用户可以轻松旋转的手持设备时最为有用，例如智能手机和平板电脑。'
- en: 'For example, you can use `orientation` to display a navigation menu horizontally
    or vertically, depending on the visitor’s browser orientation. The code looks
    like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用`orientation`根据访问者浏览器的方向来横向或纵向显示导航菜单。代码如下：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: By default, the `li` elements have a float value of `left`, making them stack
    horizontally across the page. If the same page is viewed in a `portrait` orientation—either
    by resizing the browser to be taller than it is wide or by viewing the page in
    a device with a portrait orientation—the float is removed and the `li` elements
    stack vertically instead. You can see the result in [Figure 2-4](ch02.html#ch02fig4).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`li`元素的浮动值是`left`，使它们在页面上横向排列。如果相同的页面在`portrait`方向下查看——无论是通过将浏览器调整为比宽度更高，还是通过在设备上查看页面时设备处于纵向模式——浮动将被移除，`li`元素将垂直堆叠。你可以在[图2-4](ch02.html#ch02fig4)中看到这个结果。
- en: '![Image](graphics/f02-04.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f02-04.jpg)'
- en: '*Figure 2-4: The* `*orientation*` *media feature in use on a mobile browser:*
    `*portrait*` *(left) and* `*landscape*` *(right)*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：在移动浏览器中使用的`*orientation*`媒体特性：*`*portrait*`*（左）和`*landscape*`*（右）*'
- en: As only two values are possible for the `orientation` feature, if you apply
    differentiating rules using one value, then the other tacitly becomes the opposite.
    In this example, I only used the `portrait` value, so, by default, all of the
    rules outside of that function apply to the `landscape` orientation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`orientation`特性只有两个值，如果你使用一个值应用区分规则，那么另一个值自然就成为了对立面。在这个示例中，我只使用了`portrait`值，因此，默认情况下，所有不在该功能内的规则适用于`landscape`方向。
- en: '***Aspect Ratio***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***纵横比***'
- en: 'You can also create queries that apply when a certain width-to-height ratio
    is met. Use `aspect-ratio` to test the browser’s aspect ratio or `device-aspect-ratio`
    to test the device’s aspect ratio. Here is the syntax for these two features:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建查询，当达到特定的宽高比时应用这些查询。使用`aspect-ratio`来测试浏览器的宽高比，或者使用`device-aspect-ratio`来测试设备的宽高比。以下是这两个特性的语法：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `*horizontal*` and `*vertical*` values are positive integers that represent
    the ratio of the width and height (respectively) of the viewing device’s screen,
    so a square display would be 1/1 and a cinematic widescreen display would be 16/9.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`*horizontal*` 和 `*vertical*` 值是正整数，表示显示设备屏幕宽度和高度的比例，因此一个方形显示屏的比例是1/1，而一个影院宽屏显示屏的比例是16/9。'
- en: '**NOTE**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Some devices—notably the iPhone—always report the aspect ratio of the device
    in portrait orientation, even when being viewed in landscape.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些设备——尤其是iPhone——总是报告设备的竖屏方向的宽高比，即使在横屏显示时也是如此。*'
- en: 'Selecting by aspect ratio is potentially fraught with caveats. For example,
    some device manufacturers define widescreen as 16/9, some as 16/10, and others
    as 15/10\. And a device may not have the exact stated aspect ratio; the iPhone
    5S, for example, claims to have a 16/9 aspect ratio but actually reports as having
    the slightly larger 40/71 ratio (the portrait orientation). Using the `max-` and
    `min-` variations of `aspect-ratio` and `device-aspect-ratio` to apply the rules
    may be preferable. Consider this code in which the rules in the query are applied
    to any element that has an aspect ratio of greater than 16/9:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按比例选择可能存在一些陷阱。例如，一些设备制造商将宽屏定义为16/9，一些定义为16/10，还有一些定义为15/10。并且设备可能没有准确的声明的比例；例如，iPhone
    5S宣称其比例为16/9，但实际上显示的是稍大的40/71比例（竖屏方向）。使用`max-`和`min-`变体的`aspect-ratio`和`device-aspect-ratio`来应用规则可能更为可取。考虑以下代码，在其中查询的规则应用于任何具有大于16/9的宽高比的元素：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Multiple Media Features**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**多个媒体特性**'
- en: 'You can chain multiple queries together on the same media type by adding expressions
    with the `and` operator:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过添加带有 `and` 操作符的表达式，将多个查询链在同一媒体类型上：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This syntax tests that both expressions are matched before applying the selected
    rules. For example, to test for a narrow screen on a device with an aspect ratio
    no greater than 15/10, you use this query:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该语法测试这两个表达式是否匹配，然后再应用选定的规则。例如，要测试一个宽高比不大于15/10的设备上的窄屏，你可以使用此查询：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also use a conditional “or” expression by adding extra queries in a
    comma-separated list:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在以逗号分隔的列表中添加额外的查询，使用条件“或”表达式：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This applies rules when any of the stated cases is true; in the following example,
    the rules are applied to a screen in landscape orientation or to a printed document
    in portrait orientation:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何声明的情况为真时，应用这些规则；在以下示例中，规则应用于横屏方向的屏幕或竖屏方向的打印文档：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can also, of course, create any combination of these syntaxes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还可以创建这些语法的任何组合。
- en: '**Mobile-First Web Development**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**移动优先网页开发**'
- en: The common best-practice method of building websites today uses a method known
    as *mobile-first development*, where we start developing for smaller screens before
    adding larger assets and more complexity for users accessing the site on larger
    devices.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当今构建网站的常见最佳实践方法是采用一种被称为*移动优先开发*的方法，在这种方法中，我们首先为较小的屏幕开发，然后再为访问网站的较大设备的用户添加更大的资源和更多的复杂性。
- en: 'The reason this method was adopted is because of the way that some browsers
    load page assets, such as images, that are included in style sheets. Problems
    arose because some early adopters of media queries would, for example, apply large
    background images to elements and then write rules to hide them from mobile devices:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法的原因是因为某些浏览器加载页面资源（例如样式表中包含的图像）方式的问题。问题出现的原因是，一些早期采用媒体查询的开发者会，例如，给元素应用较大的背景图像，然后写规则将其从移动设备上隐藏：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: But those background images, despite being hidden, were still downloaded by
    the browser and held in the cache even though they weren’t displayed. This method
    increases the page’s load time and consumes bandwidth allowances—neither of which
    is good for mobile device users without wireless connections.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些背景图像，尽管被隐藏，仍然被浏览器下载并保存在缓存中，即使它们没有显示出来。这种方法增加了页面的加载时间，并消耗带宽配额——这些对于没有无线连接的移动设备用户来说都不好。
- en: 'The mobile-first way to create your pages is to first make a basic style sheet,
    which is applied to all browsers, including mobile, and to then progressively
    add assets and features for users with larger screens, loaded using a media query
    with the `min-width` feature:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先的页面创建方式是首先制定一个基础样式表，这个样式表会应用于所有浏览器，包括移动设备，然后逐步为具有更大屏幕的用户添加资源和功能，通过使用带有`min-width`特性的媒体查询来加载这些内容：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This change means the background image in question never gets loaded on devices
    with smaller screens. This approach can be extrapolated to loading entire style
    sheets:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化意味着背景图像在小屏幕设备上永远不会被加载。这种方法可以推广到加载整个样式表：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When the style sheets are separated in this way, some browsers will optimize
    the way the style sheets are loaded; in Chrome, for example, as the file *desktop.css*
    doesn’t apply to devices with a screen width of less than 600px, its loading is
    delayed until after more high-priority assets have been downloaded—a quite useful
    optimization.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当样式表以这种方式分开时，某些浏览器会优化样式表的加载方式；例如，在Chrome中，由于文件*desktop.css*不适用于屏幕宽度小于600px的设备，其加载会被延迟，直到其他更高优先级的资源被下载完成——这是一种非常有用的优化。
- en: This mobile-first approach works for the great majority of browsers from the
    past few years; any really old browsers will get the basic style sheet instead,
    which is probably better for them as they won’t be able to cope with the advanced
    features I’ll be teaching you throughout the rest of this book.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种移动优先的方法适用于过去几年中的绝大多数浏览器；对于一些非常老旧的浏览器，它们将只能获取基本样式表，这对它们来说可能更好，因为它们无法处理我将在本书的其余部分教授的高级功能。
- en: '**Summary**'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Their syntax may be simple, but media queries have the capacity to be extraordinarily
    powerful. With the mobile web explosion of recent years, designers and developers
    are beginning to realize they have the power to tailor their content to the user
    without employing the old techniques of browser sniffing or separate (and completely
    different) mobile versions of their sites.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的语法可能很简单，但媒体查询具有非凡的强大功能。随着近几年移动互联网的爆发，设计师和开发者们开始意识到，他们可以在不使用传统的浏览器探测或为移动设备创建完全不同的版本的情况下，根据用户需求量身定制内容。
- en: The rise of the responsive web design movement in the past few years has been
    fueled by the power of media queries, and in just a short space of time, they’ve
    become one of the most powerful tools at a web developer’s disposal. With careful
    consideration and clever use of media queries, you can create websites that scale
    perfectly for users, however they access the Web.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计运动在过去几年中的崛起得益于媒体查询的强大功能，在短短的时间里，它们已成为网页开发者手中最强大的工具之一。通过仔细考虑和巧妙使用媒体查询，你可以创建完美适应用户需求的网页，无论用户通过何种方式访问互联网。
- en: '**Media Queries: Browser Support**'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**媒体查询：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| Media queries | Yes | Yes | Yes | Yes |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 媒体查询 | 是 | 是 | 是 | 是 |'
