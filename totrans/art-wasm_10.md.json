["```\n(module\n  (import \"js\" \"log_f64\" (func $log_f64(param i32 f64)))\n\n  (func $distance (export \"distance\")\n    (param $x1 f64) (param $y1 f64) (param $x2 f64) (param $y2 f64)\n    (result f64)\n    (local $x_dist f64)\n    (local $y_dist f64)\n\n    local.get $x1\n    local.get $x2\n    f64.sub             ;; $x1 - $x2\n    local.tee $x_dist   ;; $x_dist = $x1 - $x2\n    local.get $x_dist\n    f64.mul             ;; $x_dist * $x_dist on stack\n\n    local.get $y1\n    local.get $y2\n  1 f64.add             ;; should be $y1 - $y2\n    local.tee $y_dist   ;; $y_dist = $y1 - $y2\n    local.get $y_dist\n    f64.mul             ;; $y_dist * $y_dist on stack\n    f64.add             ;; $x_dist * $x_dist + $y_dist * $y_dist on stack\n\n    f64.sqrt            ;; take the square root of x squared plus y squared\n  )\n)\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n  1 X1: <input type=\"number\" id=\"x1\" value=\"0\">\n  2 Y1: <input type=\"number\" id=\"y1\" value=\"0\">\n  3 X2: <input type=\"number\" id=\"x2\" value=\"4\">\n  4 Y2: <input type=\"number\" id=\"y2\" value=\"3\">\n    <br><br>\n  5 DISTANCE: <span id=\"dist_out\">??</span>\n    <script>\n      var distance = null;\n      let importObject = {\n        js: {\n        6 log_f64: function(message_index, value) {\n            console.log(`message #${message_index} value=${value}`);\n          }\n        }\n      };\n\n      ( async () => {\n        let obj = await WebAssembly.instantiateStreaming(\n                            fetch('pythagoras.wasm'), importObject );\n        distance = obj.instance.exports.distance;\n })();\n\n      7 function set_distance() {\n        8 let dist_out = document.getElementById('dist_out');\n          let x1 = document.getElementById('x1');\n          let x2 = document.getElementById('x2');\n          let y1 = document.getElementById('y1');\n          let y2 = document.getElementById('y2');\n\n        9 let dist = distance(x1.value, y1.value, x2.value, y2.value);\n          dist_out.innerHTML = dist;\n      }\n    </script>\n    <br>\n    <br>\n  a <button onmousedown=\"set_distance()\">Find Distance</button>\n</body>\n</html>\n```", "```\n...\n(func $distance (export \"distance\")\n  (param $x1 f64) (param $y1 f64) (param $x2 f64) (param $y2 f64) (result f64)\n  (local $x_dist f64)\n  (local $y_dist f64)\n  (local $temp_f64 f64)\n\n  local.get $x1\n  local.get $x2\n  f64.sub             ;; $x1 - $x2\n\n  local.tee $x_dist   ;; $x_dist = $x1 - $x2\n\n1 (call $log_f64 (i32.const 1) (local.get $x_dist))\n\n  local.get $x_dist\n  f64.mul             ;; $x_dist * $x_dist on stack\n\n2 local.tee $temp_f64 ;; used to hold top of the stack without changing it\n3 (call $log_f64 (i32.const 2) (local.get $temp_f64))\n\n  local.get $y1\n  local.get $y2\n  f64.add             ;; should be $y1 - $y2\n  local.tee $y_dist   ;; $y_dist = $y1 - $y2\n\n4 (call $log_f64 (i32.const 3) (local.get $y_dist))\n\n  local.get $y_dist\n  f64.mul             ;; $y_dist * $y_dist on stack\n\n5 local.tee $temp_f64 ;; used to hold top of the stack without changing it\n6 (call $log_f64 (i32.const 4) (local.get $temp_f64))\n\n  f64.add             ;; $x_dist * $x_dist + $y_dist * $y_dist on stack\n\n7 local.tee $temp_f64 ;; used to hold top of the stack without changing it\n8 (call $log_f64 (i32.const 5) (local.get $temp_f64))\n\n  f64.sqrt            ;; take the square root of x squared plus y squared\n\n9 local.tee $temp_f64 ;; used to hold top of the stack without changing it\na (call $log_f64 (i32.const 6) (local.get $temp_f64))\n)\n...\n```", "```\nlog_f64: function(message_index, value) {\n  console.log(`message #${message_index} value=${value}`);\n}\n```", "```\nlog_f64: function(message_index, value) {\n  switch( message_index ) {\n    case 1:\n      console.log(`$x_dist=${value}`);\n      break;\n case 2:\n      console.log(`$x_dist*$x_dist=${value}`);\n      break;\n     case 3:\n       console.log(`$y_dist=${value}`);\n       break;\n     case 4:\n       console.log(`$y_dist*$y_dist=${value}`);\n       break;\n     case 5:\n       console.log(`$y_dist*$y_dist + $x_dist*$x_dist=${value}`);\n       break;\n     case 6:\n       console.log(`dist=${value}`);\n       break;\n     default:\n       console.log(`message #${message_index} value=${value}`);\n     }\n   }\n```", "```\nlog_f64: function(message_index, value) {\n  switch( message_index ) {\n    case 1:\n    1 alert(`$x_dist=${value}`);\n      break;\n```", "```\n(module\n\n1 (import \"js\" \"log_stack_trace\" (func $log_stack_trace (param i32)))\n\n2 (func $call_level_1 (param $level i32)\n    local.get $level\n    call $log_stack_trace\n  )\n\n3 (func $call_level_2 (param $level i32)\n    local.get $level\n    call $call_level_1\n  )\n\n4 (func $call_level_3 (param $level i32)\n    local.get $level\n    call $call_level_2\n  )\n\n5 (func $call_stack_trace (export \"call_stack_trace\")\n 6 (call $log_stack_trace (i32.const 0))\n    (call $call_level_1 (i32.const 1))\n    (call $call_level_2 (i32.const 2))\n    (call $call_level_3 (i32.const 3)) \n  )\n)\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n    <h1>Stack Trace</h1>\n    <script>\n      let importObject = {\n        js: {\n          1 log_stack_trace: function( level ) {\n                console.trace(`level=${level}`);\n          }\n        }\n      };\n\n      ( async () => {\n        let obj =\n          await WebAssembly.instantiateStreaming( fetch('stack_trace.wasm'),\n                                                  importObject );\n       obj.instance.exports.call_stack_trace();\n\n      })();\n    </script>\n</body>\n</html>\n```", "```\n(module\n  (func $distance (export \"distance\")\n    (param $x1 f64) (param $y1 f64) (param $x2 f64) (param $y2 f64)\n    (result f64)\n    (local $x_dist f64)\n    (local $y_dist f64)\n\n    local.get $x1\n    local.get $x2\n    f64.sub             ;; $x1 - $x2\n    local.tee $x_dist   ;; $x_dist = $x1 - $x2    local.get $x_dist\n    f64.mul             ;; $x_dist * $x_dist on stack\n    local.get $y1\n    local.get $y2\n   f64.add             ;; Should be $y1 - $y2    local.tee $y_dist   ;; $y_dist = $y1 - $y2\n    local.get $y_dist\n    f64.mul             ;; $y_dist * $y_dist on stack\n    f64.add             ;; $x_dist * $x_dist + $y_dist * $y_dist on stack\n    f64.sqrt            ;; take the square root of x squared plus y squared\n  )\n)\n```", "```\n...\n<script>\n  var distance = null;\n\n  ( async () => {\n    let obj = await WebAssembly.instantiateStreaming( fetch(**'debugger.wasm'**) );\n\n    distance = obj.instance.exports.distance;\n\n  })();\n  function set_distance() {\n    let dist_out = document.getElementById('dist_out');\n    let x1 = document.getElementById('x1');\n    let x2 = document.getElementById('x2');\n    let y1 = document.getElementById('y1');\n let y2 = document.getElementById('y2');\n\n    let dist = distance(x1.value, y1.value, x2.value, y2.value);\n    dist_out.innerHTML = dist;\n  }\n</script>\n...\n```", "```\n(module\n\n  (type $type0 (func (param f64 f64 f64 f64) (result f64)))\n  (export \"distance\" (func $func0))\n1 (func $func0\n    (param 2$var0 f64)(param 3$var1 f64)(param 4$var2 f64)(param 5$var3 f64)\n    (result f64)\n    (local 6$var4 f64) (local 7$var5 f64)\n    local.get $var0\n local.get $var2\n    f64.sub\n    local.tee $var4\n    local.get $var4\n    f64.mul\n    local.get $var1\n    local.get $var3\n    f64.add\n    local.tee $var5\n    local.get $var5\n    f64.mul\n    f64.add\n    f64.sqrt\n  )\n)\n```", "```\n1 func (param f64 f64 f64 f64) (result f64)\n2 (local f64 f64)\n  local.get 0\n  local.get 2\n  f64.sub\n  local.tee 4\n  local.get 4\n  f64.mul\n  local.get 1\n  local.get 3\n  f64.add\n  local.tee 5\n  local.get 5\n  f64.mul\n  f64.add\n  f64.sqrt\nend\n```"]