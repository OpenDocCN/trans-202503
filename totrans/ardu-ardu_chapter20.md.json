["```\n// Project #58 - ESP32 GPIO remote control over Telegram\n\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <UniversalTelegramBot.h>\n#include <ArduinoJson.h>\n\n// Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`wifiname`\";\nconst char* password = \"`password`\";\n\n// Enter your Telegram bot token and chat ID:\n#define botToken \"token\"\n#define chatID \"chatID\"\n\n❶ #define LED1 17\n#define LED2 16\n#define LED3 27\n#define LED4 14\n\nWiFiClientSecure client;\nUniversalTelegramBot bot(botToken, client);\n\n❷ int bot_delay = 1000;\nunsigned long lastRun=0;\n\nvoid processMessages(int numNewMessages)\n{\n    Serial.println(\"Handling New Message\");\n    Serial.println(String(numNewMessages));\n\n    for (int i = 0; i < numNewMessages; i++)\n    {\n        // Chat ID of the requester:\n ❸ String chat_id = String(bot.messages[i].chat_id);\n        if (chat_id != chatID)\n        {\n            bot.sendMessage(chat_id, \"Unauthorized user\", \" \");\n            continue;\n        }\n\n        // Print the received message:\n        String user_text = bot.messages[i].text;\n        Serial.println(user_text);\n\n      ❹ String your_name = bot.messages[i].from_name;\n\n      ❺ if (user_text == \"/start\")\n        {\n            String startMessage = \"Hello, \" + your_name + \".\\n\";\n            startMessage += \"Choose from the following commands:\\n\";\n            startMessage += \"(replace x with LED number 1~4)\\n\";\n            startMessage += \"Send /xon to turn LEDx ON \\n\";\n            startMessage += \"Send /xoff to turn LEDx ON \\n\";\n            startMessage += \"Send /alloff to turn all LEDs off \\n\";\n            startMessage += \"Send /status to check LED states \\n\";\n          ❻ bot.sendMessage(chat_id, startMessage, \" \");\n        }\n\n      ❼ if (user_text == \"/1on\")\n        {\n            bot.sendMessage(chat_id, \"LED 1 turned on\", \" \");\n            digitalWrite(LED1, HIGH);\n        }\n\n        if (user_text == \"/1off\")\n        {\n            bot.sendMessage(chat_id, \"LED 1 turned off\", \" \");\n            digitalWrite(LED1, LOW);\n        }\n\n        if (user_text == \"/2on\")\n        {\n            bot.sendMessage(chat_id, \"LED 2 turned on\", \" \");\n            digitalWrite(LED2, HIGH);\n        }\n\n        if (user_text == \"/2off\")\n        {\n            bot.sendMessage(chat_id, \"LED 2 turned off\", \" \");\n            digitalWrite(LED2, LOW);\n        }\n\n        if (user_text == \"/3on\")\n        {\n            bot.sendMessage(chat_id, \"LED 3 turned on\", \" \");\n            digitalWrite(LED3, HIGH);\n        }\n\n if (user_text == \"/3off\")\n        {\n            bot.sendMessage(chat_id, \"LED 3 turned off\", \" \");\n            digitalWrite(LED3, LOW);\n        }\n\n        if (user_text == \"/4on\")\n        {\n            bot.sendMessage(chat_id, \"LED 4 turned on\", \" \");\n            digitalWrite(LED4, HIGH);\n        }\n\n        if (user_text == \"/4off\")\n        {\n            bot.sendMessage(chat_id, \"LED 4 turned off\", \" \");\n            digitalWrite(LED4, LOW);\n        }\n\n        if (user_text == \"/alloff\")\n        {\n            bot.sendMessage(chat_id, \"Turning all LEDs off\", \" \");\n            digitalWrite(LED1, LOW);\n            digitalWrite(LED2, LOW);\n            digitalWrite(LED3, LOW);\n            digitalWrite(LED4, LOW);\n        }\n\n        if (user_text == \"/status\")\n        {\n            if (digitalRead(LED1))\n            {\n                bot.sendMessage(chat_id, \"LED1 is on\", \" \");\n            } else\n            {\n                bot.sendMessage(chat_id, \"LED1 is off\", \" \");\n            }\n            if (digitalRead(LED2))\n            {\n                bot.sendMessage(chat_id, \"LED2 is on\", \" \");\n            } else\n            {\n                bot.sendMessage(chat_id, \"LED2 is off\", \" \");\n            }\n            if (digitalRead(LED3))\n            {\n                bot.sendMessage(chat_id, \"LED3 is on\", \" \");\n            } else\n            {\n                bot.sendMessage(chat_id, \"LED3 is off\", \" \");\n            }\n            if (digitalRead(LED4))\n            {\n                bot.sendMessage(chat_id, \"LED4 is on\", \" \");\n            } else\n {\n                bot.sendMessage(chat_id, \"LED4 is off\", \" \");\n            }\n        }\n    }\n}\n\nvoid setup()\n{\n    Serial.begin(115200);\n\n    pinMode(LED1, OUTPUT);\n    pinMode(LED2, OUTPUT);\n    pinMode(LED3, OUTPUT);\n    pinMode(LED4, OUTPUT);\n\n    digitalWrite(LED1, LOW);\n    digitalWrite(LED2, LOW);\n    digitalWrite(LED3, LOW);\n    digitalWrite(LED4, LOW);\n\n    // Connect to Wi-Fi\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n\n    // Add root certificate for api.telegram.org\n    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(1000);\n        Serial.println(\"Connecting to Wi-Fi…\");\n    }\n    Serial.println(WiFi.localIP()); // Display IP address used by ESP32\n}\n\nvoid loop()\n{\n    if (millis() > lastRun + bot_delay)\n    {\n        int numNewMessages = bot.getUpdates(bot.last_message_received + 1);\n        while (numNewMessages)\n        {\n            Serial.println(\"Received message\");\n            processMessages(numNewMessages);\n            numNewMessages = bot.getUpdates(bot.last_message_received + 1);\n        }\n        lastRun = millis();\n    }\n} \n```", "```\n// Project #59 - ESP32 remote data retrieval via Telegram\n\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <UniversalTelegramBot.h>\n#include <ArduinoJson.h>\n❶ #include <Adafruit_BMP085.h>\n\nAdafruit_BMP085 bmp;\n\n// Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`wifiname`\";\nconst char* password = \"`password`\";\n\n// Enter your Telegram bot token and chatID:\n#define botToken \"token\"\n#define chatID \"chatID\"\n\nWiFiClientSecure client;\nUniversalTelegramBot bot(botToken, client);\n\n// Checks for new messages every 1 second:\nint bot_delay = 1000;\nunsigned long lastRun=0;\n\nvoid processMessages(int numNewMessages)\n{\n    String welcome; // Used for assembling messages to send\n    Serial.println(\"Handling New Message\");\n    Serial.println(String(numNewMessages));\n\n    for (int i = 0; i < numNewMessages; i++)\n    {\n        // Chat ID of the requester:\n        String chat_id = String(bot.messages[i].chat_id);\n        if (chat_id != chatID)\n        {\n            bot.sendMessage(chat_id, \"Unauthorized user\", \" \");\n            continue;\n        }\n\n        // Print the received message:\n        String user_text = bot.messages[i].text;\n        Serial.println(user_text);\n\n        String your_name = bot.messages[i].from_name;\n\n      ❷ if (user_text == \"/start\")\n        {\n            welcome = \"Hello, \" + your_name + \".\\n\";\n            welcome += \"Choose from the following commands:\\n\\n\";\n            welcome += \"Send /temp for temperature\\n\";\n            welcome += \"Send /pressure for air pressure\\n\";\n welcome += \"Send /altitude for altitude\\n\";\n            bot.sendMessage(chat_id, welcome, \" \");\n        }\n\n      ❸ if (user_text == \"/temp\")\n        {\n            // get BMP180 temperature\n            welcome = \"Temperature (C): \";\n            welcome += String(bmp.readTemperature());\n            bot.sendMessage(chat_id, welcome, \" \");\n        }\n\n      ❹ if (user_text == \"/pressure\")\n        {\n            // Get BMP180 air pressure, convert to hPa:\n            welcome = \"Air pressure (hPa): \";\n            welcome += String(bmp.readSealevelPressure() / 100);\n            bot.sendMessage(chat_id, welcome, \" \");\n        }\n\n      ❺ if (user_text == \"/altitude\")\n        {\n            // Get BMP180 altitude:\n            welcome = \"Altitude (m): \";\n            welcome += String(bmp.readAltitude());\n            bot.sendMessage(chat_id, welcome, \" \");\n        }\n    }\n}\n\nvoid setup()\n{\n  ❻ bmp.begin();\n    Serial.begin(115200);\n\n    // Connect to Wi-Fi:\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n\n    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);\n    // Add root certificate for api.telegram.org:\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(1000);\n        Serial.println(\"Connecting to Wi-Fi…\");\n    }\n    // Print ESP32 Local IP Address:\n    Serial.println(WiFi.localIP());\n}\n\nvoid loop()\n{\n    if (millis() > lastRun + bot_delay)\n    {\n        int numNewMessages = bot.getUpdates(bot.last_message_received + 1);\n        while (numNewMessages)\n {\n            Serial.println(\"Received message\");\n            processMessages(numNewMessages);\n            numNewMessages = bot.getUpdates(bot.last_message_received + 1);\n        }\n        lastRun = millis();\n    }\n} \n```", "```\n// Project #60 - Automating data transmission over Telegram\n\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <UniversalTelegramBot.h>\n#include <ArduinoJson.h>\n#include <Adafruit_BMP085.h>\n\nAdafruit_BMP085 bmp;\n\n// Enter your Wi-Fi network SSID and password:\nconst char* ssid = \"`wifiname`\";\nconst char* password = \"`password`\";\n\n// Enter your Telegram bot token and chatID:\n#define botToken \"token\"\n#define chatID \"chat ID\"\n\nWiFiClientSecure client;\nUniversalTelegramBot bot(botToken, client);\n\nvoid setup()\n{\n    bmp.begin();\n    Serial.begin(115200);\n\n    // Connect to Wi-Fi:\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n\n    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);\n    // Add root certificate for api.telegram.org:\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(1000);\n        Serial.println(\"Connecting to Wi-Fi…\");\n    }\n    // Print ESP32 Local IP Address:\n    Serial.println(WiFi.localIP());\n}\n\nvoid loop()\n{\n    String messageOut; // Used for assembling messages to send\n  ❶ messageOut = \"Temperature (C): \";\n  ❷ messageOut += String(bmp.readTemperature());\n    bot.sendMessage(chatID, messageOut, \" \");\n    delay(5000);\n} \n```"]