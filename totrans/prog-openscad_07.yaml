- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Designing Big Projects
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计大型项目
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll extend the lessons you’ve learned so far to build a
    complex design with OpenSCAD. Specifically, you’ll employ an iterative design
    cycle to plan and complete a larger project. First, you’ll apply *computational
    thinking* to analyze and plan your design. Then, you’ll apply the popular *walking*
    *skeleton* approach to evolve a low-fidelity prototype from a basic, abstract
    design into a highly detailed final design. Using this method, you’ll connect
    all the project’s major components before fleshing out each component’s individual
    details. As a final step, you’ll fill in the smaller details to finish the project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将扩展迄今为止学到的知识，使用 OpenSCAD 构建一个复杂设计。具体来说，你将采用迭代设计周期来规划并完成一个更大的项目。首先，你将应用*计算思维*来分析和规划你的设计。然后，你将应用流行的*步进*
    *骨架*方法，从一个基础的抽象设计演变出一个低保真原型，最终转化为一个高度详细的最终设计。使用这种方法，你将首先连接项目的所有主要组件，然后再详细构建每个组件的个别细节。最后一步是填充较小的细节以完成项目。
- en: The Design Cycle
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计周期
- en: 'The *design cycle* is a common methodology with four sequential stages to help
    develop solutions to complex design projects:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*设计周期*是一种常见的工作方法，包含四个连续的阶段，帮助开发复杂设计项目的解决方案：'
- en: '**Investigate**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**调查**'
- en: Understand what you’re trying to accomplish. What important considerations or
    constraints might affect your solution? What do you need in order to accomplish
    your goals? Can you picture what you’re trying to build?
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 明确你想要实现的目标。有哪些重要的考虑因素或限制条件可能会影响你的解决方案？你需要什么才能实现目标？你能想象你要建造的东西吗？
- en: '**Plan**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**计划**'
- en: Divide the process for building your solution into a series of steps. Because
    you’re designing with OpenSCAD (a programming language), you can apply computational
    thinking concepts (*decomposition*, *abstraction*, *finding patterns*, and *algorithms*)
    at this stage of the design cycle to identify the best approach to accomplish
    your goals.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建解决方案的过程划分为一系列步骤。由于你是使用 OpenSCAD（一种编程语言）进行设计，因此可以在设计周期的这一阶段应用计算思维概念（*分解*、*抽象*、*发现模式*和*算法*），以确定实现目标的最佳方法。
- en: '**Create**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建**'
- en: Follow your plan. Creation often reveals new problems, so it’s better to build
    big-picture solutions before focusing on the details. Using a walking skeleton
    approach to develop a complex design can help make it easier to repeat the Create
    stage several times. Each repetition of the Create stage (called a design *iteration*)
    adds more detail to the overall design, allowing you to focus on the most important
    structural details first.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遵循你的计划。创作过程中通常会暴露出新的问题，因此最好先构建大致的解决方案，再集中关注细节。采用步进骨架方法开发复杂设计有助于更轻松地多次重复创建阶段。每次重复的创建阶段（称为设计*迭代*）都会为整体设计增加更多细节，使你能够首先专注于最重要的结构细节。
- en: '**Evaluate**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**评估**'
- en: Compare each iteration of the Create stage (what you’ve actually built) with
    the original problem (what you intended to build). Identify areas of concern and
    then repeat any step of the design cycle as needed.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建阶段的每次迭代（你实际构建的内容）与原始问题（你打算构建的内容）进行比较。识别关注点，然后根据需要重复设计周期的任何步骤。
- en: Keep in mind that the stages of the design cycle are more like a looping cycle.
    You will probably revisit stages several times throughout the process until you
    are satisfied with your final design.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，设计周期的各个阶段更像是一个循环过程。在整个过程中，你可能会多次回到这些阶段，直到对最终设计满意为止。
- en: Leaning Tower of Pisa Model
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比萨斜塔模型
- en: Let’s follow the design cycle to create a model of Italy’s famous Leaning Tower
    of Pisa ([Figure 7-1](#figure7-1)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照设计周期来创建意大利著名的比萨斜塔模型（[图 7-1](#figure7-1)）。
- en: The focus of this project is to combine the design process with computational
    thinking, so we’ll create a recognizable likeness of this famous building, rather
    than an architecturally accurate scale model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的重点是将设计过程与计算思维相结合，因此我们将创建一个可识别的比萨斜塔模型，而不是一个建筑学上精确的比例模型。
- en: '![f07001](image_fi/279547c07/f07001.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![f07001](image_fi/279547c07/f07001.png)'
- en: 'Figure 7-1: The Leaning Tower of Pisa (photo by Svetlana Tikhonova, covered
    by the CC0 1.0 Universal [CC0 1.0] Public Domain Dedication license; replicated
    in Figures 7-2 to 7-4)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-1：比萨斜塔（照片由 Svetlana Tikhonova 提供，依据 CC0 1.0 Universal [CC0 1.0] 公共领域献让许可；在图
    7-2 至 7-4 中复制）
- en: 'Step 1: Investigate—Define Multiple Views'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：调查——定义多个视角
- en: The first step is to search for photos of the Leaning Tower of Pisa to help
    visualize the final design. We collected images showing different views to provide
    a sense of what the building looks like from every angle, including front, back,
    left, right, and top. We (unsurprisingly) couldn’t find a photo of the bottom
    view, but we looked for photos that clearly show how the tower interacts with
    the ground.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是寻找比萨斜塔的照片，帮助可视化最终设计。我们收集了展示不同视角的图片，以便从各个角度了解这座建筑的样子，包括正面、背面、左侧、右侧和顶部。我们（毫不意外）没有找到底部视图的照片，但我们寻找了能够清楚展示塔楼与地面接触的照片。
- en: The *Investigate* step of the design cycle is important even if you want to
    build something of your own invention. If you can’t find an exact picture of what
    you want to build, look for something similar. If you don’t have any luck, sketch
    a rough draft of your intended design by hand. Visualizing your design *before*
    you code it will save you much time and frustration. The idea is to draw a map
    of your development process before typing a single line of code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 设计周期中的*调查*步骤非常重要，即使你想要建造一些自己发明的东西。如果你找不到你想要建造的确切图片，可以寻找类似的东西。如果运气不好，手工草绘出你预期设计的粗略草图。*在*编码之前可视化你的设计，将为你节省大量的时间和挫折。关键是，在敲下第一行代码之前，先绘制出你的开发过程图。
- en: 'Step 2: Plan—Apply Computational Thinking'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：规划——应用计算思维
- en: 'With a firm understanding of what the Leaning Tower of Pisa looks like, you’ll
    analyze the building to identify where you can apply the principles of *computational
    thinking*: decomposition, patterns, abstraction, and algorithms. Applying these
    principles when creating designs with OpenSCAD (or any other programming language
    for that matter) will help you work smarter, not harder, and will allow the computer
    to do the tedious work for you.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对比萨斜塔外观有清晰的了解，你将分析这座建筑，找出可以应用*计算思维*原理的地方：分解、模式、抽象和算法。在使用OpenSCAD（或任何其他编程语言）创建设计时，应用这些原理将帮助你更聪明地工作，而不是更辛苦地工作，并使计算机为你完成繁琐的任务。
- en: Decomposition
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分解
- en: '*Decomposition* is the process of breaking a large, complex problem into smaller,
    easier-to-describe subproblems, which helps you recognize when to create modules
    and separate files for a large project. One way to decompose the Leaning Tower
    of Pisa is to divide the building into three distinct sections (bottom, middle,
    and top), all of which are “leaning” at the same angle. You then can break those
    three sections into smaller subcomponents, like columns, levels, fences, and archways
    ([Figure 7-2](#figure7-2)).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*分解*是将一个庞大、复杂的问题拆解成更小、更易描述的子问题的过程，这有助于你在大型项目中识别何时创建模块并将文件分开。分解比萨斜塔的一种方法是将建筑物分为三个不同的部分（底部、中部和顶部），它们都以相同的角度“倾斜”。然后，你可以将这三个部分分解成更小的子组件，如柱子、层级、围栏和拱门（[图
    7-2](#figure7-2)）。'
- en: '![f07002](image_fi/279547c07/f07002.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![f07002](image_fi/279547c07/f07002.png)'
- en: 'Figure 7-2: Using basic decomposition to break the tower into smaller components'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-2：使用基本的分解方法将塔楼分解为更小的组件
- en: Patterns
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模式
- en: Finding *patterns* in a design is a bit like decomposition, because the goal
    is to break a complex design into smaller, more manageable pieces. However, the
    objective with patterns is to summarize the process by which elements repeat ([Figure
    7-3](#figure7-3)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计中寻找*模式*有点像分解，因为目标是将一个复杂的设计分解成更小、更易于管理的部分。然而，模式的目标是总结元素如何重复出现的过程（[图 7-3](#figure7-3)）。
- en: '![f07003](image_fi/279547c07/f07003.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![f07003](image_fi/279547c07/f07003.png)'
- en: 'Figure 7-3: Patterns of repeating shapes'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-3：重复形状的模式
- en: For instance, the middle section of the Leaning Tower of Pisa is composed of
    essentially the same group of shapes repeated six times. Each of those “levels”
    also includes repeated arches/columns around its outside circumference. In fact,
    both the bottom and the top sections also contain repeated arches/columns (although
    at different sizes and intervals from the middle section). Additionally, the top
    section has two fences with repeated posts, as well as a repeated archway shape
    in numerous sizes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，比萨斜塔的中间部分基本上是由相同的形状组重复六次组成的。每个“层级”也都包括围绕其外周重复的拱门/柱子。事实上，底部和顶部部分也包含重复的拱门/柱子（尽管与中间部分的大小和间隔不同）。此外，顶部部分有两道围栏，重复的柱子，以及多种尺寸的重复拱门形状。
- en: Abstraction
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 抽象
- en: '*Abstraction* is the process of summarizing smaller details with higher-level
    descriptions in order to communicate big-picture information. Rendering each section
    of the Leaning Tower of Pisa as a cylinder is a general abstraction that omits
    a lot of detail ([Figure 7-4](#figure7-4)).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象*是通过高层次的描述总结较小细节的过程，以便传达全局信息。将比萨斜塔的每个部分表示为一个圆柱体是一种通用的抽象，省略了许多细节（[图 7-4](#figure7-4)）。'
- en: '![f07004](image_fi/279547c07/f07004.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f07004](image_fi/279547c07/f07004.png)'
- en: 'Figure 7-4: Diagram of the Leaning Tower of Pisa abstracted as three cylinders'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-4：比萨斜塔抽象为三个圆柱体的示意图
- en: Abstracting the three sections as cylinders allows you to focus on larger elements
    (like the angle of the tower’s lean and each section’s proportional sizing) before
    considering the smaller, less consequential features.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将三个部分抽象为圆柱体使你能够在考虑较小且不太重要的特征之前，专注于更大的元素（如塔的倾斜角度和每个部分的比例大小）。
- en: Algorithms
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 算法
- en: Because so much repetition exists within the Leaning Tower of Pisa’s architecture,
    our design *algorithm* for creating the tower requires numerous loops. For instance,
    the columns around the tower’s perimeter involve a loop that repeatedly increments
    the angle of rotation. The looping columns occur in all three sections (bottom,
    middle, and top), although each section contains different numbers of repeating
    columns of various sizes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比萨斜塔的建筑中存在大量重复，创建塔的设计*算法*需要多个循环。例如，塔周围的柱子涉及一个不断递增旋转角度的循环。循环的柱子出现在三个部分（底部、中部和顶部）中，尽管每个部分包含不同数量的重复柱子，并且大小各异。
- en: The multiple use cases for the different sizes of columns around the tower’s
    perimeter suggest that a parameterized column module would be an appropriate algorithmic
    choice; incorporating parameters in the module allows you to reuse the same basic
    code for each section of the tower. In fact, the design for this project provides
    many opportunities to use modules in your code. Each of the basic components you
    identify during a project’s Decomposition and Patterns analysis will likely be
    a candidate for a module. In this case, you can create modules for the top section,
    middle section, bottom section, level, column, archway, and fence.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 比萨斜塔周围不同大小的柱子的多个使用案例表明，使用参数化柱模块是一个合适的算法选择；在模块中包含参数可以让你为塔的每个部分重用相同的基本代码。事实上，这个项目的设计提供了许多机会来在你的代码中使用模块。在项目的分解和模式分析过程中，你确定的每个基本组件都可能成为模块的候选项。在这种情况下，你可以为顶部部分、中部部分、底部部分、层级、柱子、拱门和围栏创建模块。
- en: 'Step 3: Create—Use a Walking Skeleton Approach'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：创建—使用行走骨架方法
- en: The goals of the first two steps of the design cycle are understanding what
    you want to build and creating a well-defined strategy for breaking a large, complex
    project into a collection of manageable pieces. In step 3, you start coding by
    using the walking skeleton development process, allowing you to evolve the design
    from rough building blocks into a final highly detailed finished piece. You’ll
    use this approach to create several versions of the tower, making incremental
    improvements with each design iteration ([Figure 7-5](#figure7-5)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设计周期的前两步目标是理解你想要构建的内容，并为将一个大型复杂项目拆解成一系列可管理的部分创建明确的策略。在第 3 步中，你通过使用行走骨架开发过程开始编码，使你能够将设计从粗略的构建块演变为最终的高度详细完成品。你将使用这种方法创建塔的多个版本，在每次设计迭代中进行逐步改进（[图
    7-5](#figure7-5)）。
- en: '![f07005](image_fi/279547c07/f07005.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![f07005](image_fi/279547c07/f07005.png)'
- en: 'Figure 7-5: Using the walking skeleton approach for the evolution of the Leaning
    Tower of Pisa'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-5：使用行走骨架方法演化比萨斜塔
- en: The first versions of the top, middle, and bottom sections in [Figure 7-5](#figure7-5)
    are rough abstractions of the final, detailed versions of those same sections.
    The design’s main pieces are connected first as an architectural skeleton, then
    fleshed out over time in an evolutionary process—hence the name, *walking skeleton*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-5](#figure7-5)中顶部、中部和底部的初始版本是最终详细版本的粗略抽象。这些设计的主要部分首先作为建筑骨架连接，然后在一个演变的过程中逐渐完善——因此称之为*行走骨架*。'
- en: 'Step 4: Evaluate—Decide Which Design Process Steps to Repeat'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：评估—决定哪些设计过程步骤需要重复
- en: The “final” step of the design cycle is more of a question than anything else.
    Does your design accomplish what you intended? Based on the answer, decide which
    steps of the design process you need to revisit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设计周期的“最终”步骤更多的是一个问题而不是其他。你的设计是否达到了预期的效果？根据答案，决定需要重新审视设计过程中的哪些步骤。
- en: To answer that question for the tower example, you’ll visually compare the rendered
    OpenSCAD model of the tower with a photograph of the real Leaning Tower of Pisa.
    In fact, you’ll apply the Evaluate step after each iteration of the walking skeleton
    to determine which features to add for the next iteration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解答塔楼示例中的问题，你将通过将渲染的 OpenSCAD 模型与真实的比萨斜塔照片进行对比。事实上，你将在每次步态骨架迭代后应用评估步骤，以决定下一次迭代要添加哪些特征。
- en: 'Walking Skeleton: Building the Leaning Tower of Pisa'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步态骨架：构建比萨斜塔
- en: For the remainder of this chapter, you’ll build several versions of the Leaning
    Tower of Pisa in a series of design iterations to demonstrate the walking skeleton
    development process. Each version will add more details, so you’ll compare each
    iteration with the reference photo and reconsider your plan and algorithms as
    you go. This approach allows you to apply the design cycle to each iteration without
    having to worry too much about the way the code is organized or connected.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的剩余部分，你将通过一系列设计迭代构建比萨斜塔的多个版本，以展示步态骨架开发过程。每个版本都会增加更多细节，因此你需要将每个迭代与参考照片进行对比，并在过程中重新考虑你的计划和算法。这个方法让你可以将设计周期应用到每个迭代中，而无需过多担心代码的组织或连接方式。
- en: 'Iteration 1: Connecting the Tower’s Basic Building Blocks'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代 1：连接塔楼的基本构建块
- en: 'The goal for the first version of the tower design is to create and connect
    the building’s three sections: top, middle, and bottom. You’ll also include a
    platform for stability (the tower is leaning, after all).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个版本塔楼设计的目标是创建并连接建筑的三个部分：顶部、中部和底部。你还需要加入一个平台以保证稳定性（毕竟塔楼是倾斜的）。
- en: Decomposing the building’s overall design into smaller pieces provides the setup
    to evolve the design in stages, as you’ll be able to edit the tower’s various
    sections independently. Initially, you’ll generate only basic cylinders as big-picture
    approximations of each section’s design, because the first stage of a walking
    skeleton focuses solely on connecting the project’s separate building blocks ([Figure
    7-6](#figure7-6)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将建筑的整体设计分解为更小的部分，为逐步发展设计提供了基础，因为你可以独立编辑塔楼的各个部分。最初，你将只生成基本的圆柱体，作为每个部分设计的大致近似，因为步态骨架的第一阶段仅专注于连接项目的各个构建块（[图
    7-6](#figure7-6)）。
- en: '![f07006](image_fi/279547c07/f07006.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f07006](image_fi/279547c07/f07006.png)'
- en: 'Figure 7-6: An abstract tower with three sections'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-6：一个具有三个部分的抽象塔
- en: Although you could use a series of modules contained within one very large file,
    you’ll instead separate these sections into stand-alone files (*bottom.scad*,
    *middle.scad*, and *top.scad*) and create one connector file (*tower.scad*). Having
    the code in separate files allows you to create, find, and edit relevant modules
    for each section easily. You could also use this multi-file approach to collaborate
    with others, so each person could focus on a different file simultaneously.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用一个包含多个模块的非常大的文件，但你将把这些部分分离到独立的文件中（*bottom.scad*、*middle.scad* 和 *top.scad*），并创建一个连接文件（*tower.scad*）。将代码分布在多个文件中可以让你轻松创建、查找和编辑每个部分相关的模块。你还可以使用这种多文件方法与他人合作，每个人可以同时专注于不同的文件。
- en: The trickiest part of this first step is considering how the different components
    of the design interact with each other. Usually, this means identifying the crucial
    information each piece of the design needs in order to be drawn. For instance,
    to draw an abstract, cylinder-based representation of each section, you need,
    at minimum, a height and radius for that section. The main project file (*tower.scad*)
    will communicate that information to each section via module parameters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步中最棘手的部分是考虑设计中不同组件之间如何相互作用。通常，这意味着需要识别每个设计部分绘制所需的关键信息。例如，为了绘制每个部分的抽象圆柱形表示，你至少需要该部分的高度和半径。主要项目文件（*tower.scad*）将通过模块参数把这些信息传递给每个部分。
- en: Because the top, middle, and bottom sections all use a cylinder as an abstract
    representation of the final design, creating those files first is relatively easy.
    The code for each section looks very similar at this stage of the design, which
    is another advantage of abstraction. You don’t need to worry about small details
    at the moment, so you can copy and paste code in the three files with only minimal
    changes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于顶部、中部和底部部分都使用圆柱体作为最终设计的抽象表示，因此首先创建这些文件相对容易。在设计的这个阶段，每个部分的代码看起来非常相似，这也是抽象的另一个优点。你不需要担心小细节，所以你可以在这三个文件中复制粘贴代码，仅进行最小的修改。
- en: 'The *bottom.scad* file defines a cylinder to create a simple version of the
    tower’s lowest section:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*bottom.scad* 文件定义了一个圆柱体来创建塔的最低部分的简单版本：'
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The *tower.scad* file communicates the dimensions for the bottom section to
    the `bottom_section` module via the `width` and `height` parameters 1.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*tower.scad* 文件通过 `width` 和 `height` 参数将底部部分的尺寸传递给 `bottom_section` 模块 1。'
- en: 'Next, the *middle.scad* file defines a starting version of the middle section:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，*middle.scad* 文件定义了中部部分的初步版本：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, the *tower.scad* file communicates the width and height to the `middle_section`
    module via the `width` and `height` parameters 1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，*tower.scad* 文件通过 `width` 和 `height` 参数将宽度和高度传递给 `middle_section` 模块 1。
- en: 'Similarly, the *top.scad* file defines a basic cylinder to represent the tower’s
    top section:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，*top.scad* 文件定义了一个基本的圆柱体来表示塔的顶部部分：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As with the bottom and middle sections, the *tower.scad* file uses parameters
    to supply needed dimensions to the `top_section` module 1. The order and number
    of parameters in each of the three modules is the same. This is a deliberate choice
    to simplify the design’s architecture. As the complexity of the design increases,
    this consistent interface between *top.scad*, *bottom.scad*, *middle.scad*, and
    *tower.scad* will make adjusting the proportions of each section easier. The decision
    to think of each cylinder’s measurements in terms of the structure’s radius rather
    than its diameter 2 was also deliberate (though somewhat arbitrary). At this stage,
    using width as the cylinder’s diameter would also make sense.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与底部和中部部分一样，*tower.scad* 文件使用参数为 `top_section` 模块提供所需的尺寸 1。三个模块中的参数顺序和数量是相同的。这是一个故意的选择，用以简化设计架构。随着设计复杂性的增加，*top.scad*、*bottom.scad*、*middle.scad*
    和 *tower.scad* 之间的一致接口将使得调整每个部分的比例变得更容易。将每个圆柱体的测量值看作结构的半径而非直径 2 也是一个故意的决定（尽管有些任意）。在这一阶段，将宽度作为圆柱体的直径也可以理解。
- en: 'Next we create *tower.scad*, which provides the necessary dimensions and connects
    the tower’s three sections with the platform:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建 *tower.scad*，它提供了必要的尺寸并将塔的三个部分与平台连接起来：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first section of the *tower.scad* file links to the three files described
    previously that define the tower’s top, middle, and bottom sections 1. The next
    section defines variables to help organize the tower’s important characteristics
    2.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*tower.scad* 文件的第一部分链接到前面描述的三个文件，这些文件定义了塔的顶部、中部和底部部分 1。接下来的部分定义了变量，用于帮助组织塔的重要特性
    2。'
- en: Since the design includes not only the tower but also a platform for stability,
    you create variables to organize the overall tower’s height and width (`tower_height`
    and `tower_width`), the height of each section of the tower (`bottom_height`,
    `middle_height`, and  `top_height`), the height and width of the platform (`base_height`
    and `base_width`), and the overall angle of the “lean” of the tower (`lean_angle`).
    You initially set the `tower_height` variable to an arbitrary value, and then
    use it as part of the definition for most of the other variables. For instance,
    the height of the bottom section is 20 percent of the `tower_height` variable,
    so if you want to change the size of the entire design, you need to change only
    the `tower_height` variable’s value.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设计不仅包括塔，还包括一个平台来保证稳定性，你创建了变量来组织整体塔的高度和宽度（`tower_height` 和 `tower_width`），塔各部分的高度（`bottom_height`、`middle_height`
    和 `top_height`），平台的高度和宽度（`base_height` 和 `base_width`），以及塔的整体“倾斜”角度（`lean_angle`）。你最初将
    `tower_height` 变量设置为一个任意值，然后将其作为大多数其他变量定义的一部分。例如，底部部分的高度是 `tower_height` 变量的20%，因此如果你想改变整个设计的尺寸，只需改变
    `tower_height` 变量的值。
- en: Next, you use a relatively small number of segments (20) to approximate curved
    shapes to speed up the rendering of the initial designs 3. The last design iteration
    increases the number of segments to 100 in order to generate smoother curved surfaces
    in the final design.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您使用相对较少的段数（20）来近似曲线形状，以加速初始设计的渲染过程3。最后的设计迭代将段数增加到100，以便在最终设计中生成更平滑的曲面。
- en: To avoid duplicating the same rotate operation for all three sections, you use
    a single operation to apply a consistent angle of rotation to each of the three
    sections 4. Each section is called via the appropriate module, with parameters
    to adjust its width and height. The `translate` operation moves the middle and
    top sections along the z-axis 5.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免对所有三个部分重复相同的旋转操作，您使用一个操作将一致的旋转角度应用于三个部分4。每个部分通过相应的模块调用，并调整其宽度和高度的参数。`translate`操作将中部和顶部部分沿z轴移动5。
- en: Finally, you draw the platform as a simple cuboid 6. You also apply different
    colors to the ground and each section to signify basic proportionality.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将平台绘制为一个简单的长方体6。您还为地面和每个部分应用不同的颜色，以表示基本的比例关系。
- en: From this point on, you won’t need to make major changes to the *tower.scad*
    file. Your initial efforts to size and place each section correctly will form
    the architectural “skeleton” of the tower design, while your next design iterations
    will fill in missing details for the tower’s top, middle, and bottom sections.
    The only changes you might need to make to this file in the future would involve
    adjusting parameters to tweak proportionality as your design evolves, or changing
    `$fn` to increase the rendered model’s smoothness. You’d simply swap out numerical
    values rather than write new code statements to make those changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，您不再需要对*tower.scad*文件进行重大更改。您最初对每个部分进行正确尺寸设置和定位的努力将构成塔楼设计的建筑“骨架”，而接下来的设计迭代将填补塔楼顶部、中部和底部部分的缺失细节。未来您可能需要对该文件进行的唯一更改是调整参数，以便在设计演变时微调比例，或者更改`$fn`以提高渲染模型的平滑度。您只需替换数值，而不是编写新的代码语句来进行这些更改。
- en: 'Iteration 2: Finding Repetition in the Middle Section'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代2：在中间部分寻找重复
- en: Let’s take a closer look at the tower’s middle section (*middle.scad*) for the
    second iteration and apply some computational thinking techniques from the planning
    stage—namely, decomposition and finding patterns. In the middle section, the same
    collection of shapes (or levels) repeats vertically six times ([Figure 7-7](#figure7-7)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看塔楼的中部部分（*middle.scad*）第二次迭代，并运用一些来自规划阶段的计算思维技巧——即分解和寻找模式。在中部部分，相同的形状集合（或层级）垂直重复六次（[图7-7](#figure7-7)）。
- en: '![f07007](image_fi/279547c07/f07007.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![f07007](image_fi/279547c07/f07007.png)'
- en: 'Figure 7-7: Abstract Leaning Tower of Pisa with a looping middle section'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-7：带有循环中间部分的抽象比萨斜塔
- en: '[Figure 7-8](#figure7-8) shows just one of those repeated level shapes.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-8](#figure7-8)显示了其中一个重复的层级形状。'
- en: '![f07008](image_fi/279547c07/f07008.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![f07008](image_fi/279547c07/f07008.png)'
- en: 'Figure 7-8: A single level shape'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-8：单个层级形状
- en: 'To create these repeated levels, you need to make the following changes to
    the *middle.scad* file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这些重复的层级，您需要对*middle.scad*文件进行以下更改：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These changes add more detail to the middle section so it’s no longer an abstract
    cylinder. The `level` module 2 organizes all the shapes that construct each floor
    of the middle section, and a `for` loop 1 creates a new `level` shape repeatedly
    for each of the six floors in the section. Each level of this section now includes
    a lip that extends to the full radius of the tower, an overhang that provides
    a ceiling for columns, and an inner structure to house stairs, doors, and so forth.
    You create several variables to relate the size of each level feature (`lip_height`,
    `inner_radius`, `overhang_height`, and `overhang_radius`) to the `level` module
    parameters (`level_radius` and `level_height`) 3.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改为中间部分增加了更多的细节，使其不再是一个抽象的圆柱体。`level`模块2组织了构成中间部分每一层的所有形状，`for`循环1为该部分的六层每一层重复创建一个新的`level`形状。现在，每一层都包括一个延伸到塔全半径的唇缘，一个为柱子提供天花板的悬挑结构，以及一个用于容纳楼梯、门等的内部结构。您创建了几个变量，将每一层特征的大小（`lip_height`、`inner_radius`、`overhang_height`和`overhang_radius`）与`level`模块参数（`level_radius`和`level_height`）相关联3。
- en: With this repeating `level` module, you can simultaneously update all six floors
    at once by making a change in exactly one place. For instance, if you want to
    make each level’s lip a little thicker or change the overhang radius to provide
    more room for columns, you can make a single, simple change to the `level` module
    definition. Because you are adding detail to only the `middle_section` module
    in this phase of our walking skeleton approach, *middle.scad* is the only file
    you needed to update for the second iteration of the tower design.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个重复的`level`模块，您可以通过在一个地方进行修改，立即同时更新所有六层。例如，如果您想让每一层的边缘稍微厚一点，或者改变悬挑半径以提供更多的柱子空间，您只需对`level`模块定义进行一次简单的修改。因为在我们步进式构建的过程中，您只是在这一阶段对`middle_section`模块添加细节，所以*middle.scad*是您需要更新的唯一文件，用于塔楼设计的第二次迭代。
- en: To see these new changes reflected in the overall design ([Figure 7-7](#figure7-7)),
    save *middle.scad*, and then preview the entire design in *tower.scad*. In addition
    to making your design changes permanent, saving the *middle.scad* file lets OpenSCAD
    know you want other files to use the updated code. If you want to see the `middle_section`
    or `level` shapes in isolation, create the shape at the top of *middle.scad* and
    then preview that file. You can include a statement to draw a `middle_section`
    or `level` shape in *middle.scad* without worrying that the shape will also automatically
    show up in other files. Connecting another file with *middle.scad* with a `use`
    directive simply means that module definitions from *middle.scad* will be accessible
    in *tower.scad*. No drawn shapes from *middle.scad* will be shown unless the connected
    file uses a module from *middle.scad*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整体设计中看到这些新变化的反映（[图7-7](#figure7-7)），保存*middle.scad*文件，然后在*tower.scad*中预览整个设计。除了使您的设计更改永久生效，保存*middle.scad*文件还可以让OpenSCAD知道您希望其他文件使用更新后的代码。如果您希望单独查看`middle_section`或`level`形状，可以在*middle.scad*顶部创建该形状并预览该文件。您可以在*middle.scad*中包括一个语句来绘制`middle_section`或`level`形状，而不用担心这些形状会自动显示在其他文件中。通过`use`指令连接另一个文件与*middle.scad*，意味着来自*middle.scad*的模块定义将在*tower.scad*中可用。除非连接的文件使用了*middle.scad*中的某个模块，否则*middle.scad*中的任何绘制形状都不会显示。
- en: 'Iteration 3: Adding More Details to the Middle Section'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三次迭代：为中间部分添加更多细节
- en: The next pattern to consider in your computational thinking is the repetition
    of columns and arches along each floor’s perimeter in the middle section ([Figure
    7-9](#figure7-9)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算思维中，接下来要考虑的模式是沿每一层的周围重复柱子和拱门（[图7-9](#figure7-9)）。
- en: '![f07009](image_fi/279547c07/f07009.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![f07009](image_fi/279547c07/f07009.png)'
- en: 'Figure 7-9: A level with repeated columns'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-9：带有重复柱子的楼层
- en: To apply these new patterns to the design, you create a `column` shape and repeat
    that new shape along the circumference of the `level` module. This means you need
    to modify the *middle.scad* file again, as that’s where the `level` module is
    defined. To create a `column` shape, you also define a `column` module in a new
    *column.scad* file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些新模式应用到设计中，您需要创建一个`column`形状，并沿着`level`模块的圆周重复该形状。这意味着您需要再次修改*middle.scad*文件，因为`level`模块定义就在那个文件中。为了创建一个`column`形状，您还需要在新的*column.scad*文件中定义一个`column`模块。
- en: In the design cycle’s planning phase, you noticed that columns and arches repeat
    around the circumference of each of the tower’s three sections. Because you need
    to include column shapes in multiple files, defining the column module in a separate
    file makes it easier for different sections to use that new shape definition.
    Columns and arches repeat in different patterns in each section, and they also
    vary in their ornamentation. That’s why at this initial stage, you’ll focus on
    creating an abstract column with basic components ([Figure 7-10](#figure7-10)).
    You can then update this basic definition of a column in a later design iteration.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计周期的规划阶段，您注意到柱子和拱门在塔楼的三个部分的周围重复出现。由于您需要在多个文件中包含柱子形状，在一个单独的文件中定义柱子模块，使得不同部分更容易使用该新形状定义。柱子和拱门在每个部分中以不同的模式重复，它们的装饰性也有所不同。因此，在这个初步阶段，您将专注于创建一个具有基本组件的抽象柱子（[图7-10](#figure7-10)）。然后，您可以在后续设计迭代中更新这个基本的柱子定义。
- en: '![f07010](image_fi/279547c07/f07010.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![f07010](image_fi/279547c07/f07010.png)'
- en: 'Figure 7-10: An abstract column'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-10：一个抽象柱子
- en: 'Creating a `column` module in a separate file called *column.scad* makes it
    easier to share and evolve your use of columns in the future as needed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个单独的文件*column.scad*中创建`column`模块，可以在未来根据需要更轻松地共享和发展您的柱子使用方式：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with other modules, you include two parameters (`col_width` and `col_height`)
    in the `column` module 1 to provide the necessary information to create a column
    shape. Based on the column height and column width, variables are created (`col_radius`
    and `orn_height`) to describe the column’s radius and the ornamentation’s height
    included at both the top and bottom of a column 2. While it may seem to make the
    module definition more complicated, defining and using these variables rather
    than placing repeated arithmetic calculations as module parameters or inside operations
    reduces the number of possibilities for error, groups all of the design assumptions
    at the top of the module, and makes it easier to update all uses of a measurement.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他模块一样，你在`column`模块 1 中包含了两个参数（`col_width`和`col_height`），提供了创建柱形所需的信息。根据柱子的高度和宽度，创建了变量（`col_radius`和`orn_height`），用来描述柱子的半径以及柱子顶部和底部装饰的高度
    2。虽然这样定义模块可能会使模块的定义变得更复杂，但定义并使用这些变量，而不是将重复的算术运算作为模块参数或操作内部的一部分，可以减少出错的可能性，将所有设计假设集中在模块的顶部，并且更容易更新所有涉及的测量值。
- en: 'To invoke this new `column` module, you then modify the `level` module in *middle.scad*
    to draw repeating columns and arches around the circumference of each level:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用这个新的`column`模块，你接下来需要修改*middle.scad*中的`level`模块，在每一层的圆周上绘制重复的柱子和拱门：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Comparing this updated version of *middle.scad* with the version from your second
    design iteration reveals three major additions to the `level` module. First, *column.scad*
    is connected to this file 1 with a `use` directive so that you can use the new
    `column` module to draw column shapes in this file. Next, variables are defined
    to describe the number of columns per level (`num_cols`), the angle at which the
    columns should be repeated along the circumference of the tower (`angle_size`),
    the width and height of each column (`col_width` and `col_height`), and the depth
    of the arch connecting every two columns that will be carved away from the overhang
    of each level (`arch_depth`) 2.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个更新版本的*middle.scad*与第二次设计迭代中的版本进行比较，揭示了`level`模块中的三大新增内容。首先，*column.scad*通过`use`指令与此文件
    1 连接，以便你可以在该文件中使用新的`column`模块来绘制柱子形状。接下来，定义了描述每层柱子数量（`num_cols`）、柱子沿塔圆周重复的角度（`angle_size`）、每个柱子的宽度和高度（`col_width`和`col_height`）以及从每层悬挑雕刻的拱门深度（`arch_depth`）的变量
    2。
- en: After creating the overhang, you include a `for` loop within a difference operation
    to carve away arches between the location of each column 3. A final `for` loop
    repeats columns along the level’s circumference 4. You could combine these two
    loops into a single `for` loop that uses an `if` statement; however, the loops
    are separated here to make the logic clearer.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建悬挑后，你在差异操作中包含了一个`for`循环，用来在每个柱子位置之间雕刻出拱门 3。一个最终的`for`循环在层的圆周上重复绘制柱子 4。你也可以将这两个循环合并成一个单一的`for`循环，并使用`if`语句；然而，为了让逻辑更加清晰，这里将它们分开。
- en: As before, to see these new changes reflected in the overall design, save both
    *middle.scad* and *column.scad*; then preview the entire tower design in *tower.scad*.
    To see only the middle section without the rest of the tower, include a statement
    to draw a `middle_section` shape at the top of *middle.scad*; then preview the
    design in *middle.scad*. You can also easily see only a column shape by including
    a statement to draw a `column` shape at the top of *column.scad* and then previewing
    the design in that file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，为了在整体设计中看到这些新的变化，保存*middle.scad*和*column.scad*；然后在*tower.scad*中预览整个塔的设计。如果只想查看没有其他塔身部分的中部部分，在*middle.scad*的顶部添加一个语句来绘制`middle_section`形状；然后在*middle.scad*中预览设计。你还可以通过在*column.scad*的顶部添加一个语句来绘制`column`形状，然后在该文件中预览设计，这样也能轻松查看单独的柱子形状。
- en: After using a relatively small amount of code to add a large number of repeating
    columns and arches to the middle section, that section of the tower ([Figure 7-11](#figure7-11))
    is now more recognizably similar to our reference photo of the Leaning Tower of
    Pisa ([Figure 7-1](#figure7-1)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用相对较少的代码向中部部分添加大量重复的柱子和拱门后，塔的这一部分（[图 7-11](#figure7-11)）现在与我们参考的比萨斜塔照片（[图
    7-1](#figure7-1)）更加相似。
- en: However, as you can see in [Figure 7-11](#figure7-11), the top and bottom sections
    are still abstract simplifications. Applying the design cycle’s Evaluate step
    after each iteration of the walking skeleton helps identify missing details that
    might offer the most noticeable improvements to a design. After this iteration,
    you should once again consult the reference photo ([Figure 7-1](#figure7-1)) to
    decide which section of the tower now most needs improvement.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你在 [图 7-11](#figure7-11) 中看到的，顶部和底部部分仍然是抽象的简化设计。在每次迭代后的设计周期评估步骤有助于识别缺失的细节，这些细节可能为设计提供最显著的改进。完成这一迭代后，你应该再次参考照片（[图
    7-1](#figure7-1)），决定塔楼的哪一部分现在最需要改进。
- en: '![f07011](image_fi/279547c07/f07011.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![f07011](image_fi/279547c07/f07011.png)'
- en: 'Figure 7-11: Leaning Tower of Pisa with modularized columns'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-11：比萨斜塔带有模块化柱子
- en: 'Iteration 4: Adding Details to the Top Section'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代 4：为顶部部分添加细节
- en: The top of the tower is missing fences, repeating columns, and archways (windows
    and doors), so the next iteration focuses on adding those details. You’ll add
    two fences to the top section, as well as alternating archways of different sizes
    and heights ([Figure 7-12](#figure7-12)), so you’ll modify *top.scad* by adding
    a `fence` module and an `archway` module. You’ll draw the `archway` module in
    different sizes to create the doors and windows shown in the top section of our
    reference photograph ([Figure 7-1](#figure7-1)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 塔楼顶部缺少围栏、重复的柱子和拱门（窗户和门），因此下一次迭代将集中在添加这些细节。你将为顶部部分添加两个围栏，并且会添加不同大小和高度交替的拱门（[图
    7-12](#figure7-12)），因此你将通过添加 `fence` 模块和 `archway` 模块来修改 *top.scad*。你将以不同的尺寸绘制
    `archway` 模块，创建我们参考照片顶部部分中显示的门和窗户（[图 7-1](#figure7-1)）。
- en: '![f07012](image_fi/279547c07/f07012.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![f07012](image_fi/279547c07/f07012.png)'
- en: 'Figure 7-12: Fenced-in top section with alternating archways of different sizes'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-12：带有不同大小交替拱门的围栏顶部部分
- en: 'This updated version of the *top.scad* file adds the fence and archway details
    to the tower’s top section:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的 *top.scad* 文件将围栏和拱门的细节添加到塔楼的顶部部分：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As with the other module definitions, you begin by defining variables to describe
    the top section’s various features 1. You base the number of windows on the number
    of doors (`num_doors`), but otherwise, you deliberately choose variable names
    that are self-documenting. A `for` loop contained within a `difference` operation
    subtracts repeated windows and doors from the top section’s inner structure 2.
    Windows and doors have similar shapes, so you define a single `archway` module
    that lets you vary the size of window and door shapes with the `height`, `width`,
    and `depth` parameters 6.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他模块定义一样，你首先定义变量来描述顶部部分的各种特征 1。窗户的数量基于门的数量（`num_doors`），但其他部分，你刻意选择了自文档化的变量名。一个包含在
    `difference` 操作中的 `for` 循环从顶部部分的内部结构中减去重复的窗户和门 2。窗户和门形状相似，因此你定义了一个单独的 `archway`
    模块，通过 `height`、`width` 和 `depth` 参数来改变窗户和门形状的大小 6。
- en: The `top_section` module ends by drawing two fence shapes 3. These fences are
    basically the same shape but different sizes, so you define a `fence` module to
    construct them 4. You also include a `ring` module to make it easier to create
    various fencing rings 5. This definition of a `ring` module is transferred from
    a previous Design Time activity (see Chapter 5). Reusing modules from prior projects
    can save a lot of time and effort.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_section` 模块通过绘制两个围栏形状来结束 3。这些围栏基本相同，但尺寸不同，因此你定义了一个 `fence` 模块来构建它们 4。你还包含了一个
    `ring` 模块，以便更容易创建各种围栏环 5。`ring` 模块的定义是从之前的设计活动中转移过来的（见第 5 章）。重复使用以前项目中的模块可以节省大量时间和精力。'
- en: To simplify the project’s organization, you include the `fence`, `ring`, and
    `archway` modules only in the *top.scad* file since no other section contains
    those shapes. As with previous design iterations, save your updates to *top.scad*;
    then preview the design to see those changes in other files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化项目的组织，你只在 *top.scad* 文件中包含了 `fence`、`ring` 和 `archway` 模块，因为其他部分没有这些形状。与之前的设计迭代一样，保存你对
    *top.scad* 的更新；然后预览设计，以便查看这些更改在其他文件中的效果。
- en: The `top_section` module now produces a more detailed version of the top of
    the tower ([Figure 7-13](#figure7-13)).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_section` 模块现在生成了塔楼顶部的更详细版本（[图 7-13](#figure7-13)）。'
- en: '![f07013](image_fi/279547c07/f07013.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![f07013](image_fi/279547c07/f07013.png)'
- en: 'Figure 7-13: Fenced-in top section with alternating archways, detail view'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-13：带有交替拱门的围栏顶部部分，详细视图
- en: Comparing this design iteration with the tower’s reference photo ([Figure 7-1](#figure7-1)),
    your evaluation suggests that the bottom section now needs the most attention.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个设计迭代与塔楼的参考照片进行比较（见[图7-1](#figure7-1)），你的评估表明底部部分现在需要最多的关注。
- en: 'Iteration 5: Adding Details to the Bottom Section'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代5：为底部部分添加细节
- en: 'This update modifies the *bottom.scad* file to include the major missing features
    (columns and arches):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此更新修改了*bottom.scad*文件，加入了主要缺失的特征（柱子和拱门）：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You first include *column.scad* in order to access the `column` module 1. This
    allows you to use a `for` loop to draw columns around the bottom section’s perimeter
    2. Columns in the bottom section are bigger than those in the middle section,
    so parameters for drawing a column are set accordingly. You add the arches next,
    also with a `for` loop 3.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先引入了*column.scad*，以便访问`column`模块 1。这允许你使用`for`循环在底部部分的周围绘制柱子 2。底部部分的柱子比中间部分的柱子要大，因此绘制柱子的参数进行了相应的调整。接着你添加了拱门，同样使用`for`循环
    3。
- en: Save *bottom.scad* and then preview the design to reveal new details in the
    tower’s bottom section ([Figure 7-14](#figure7-14)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 保存*bottom.scad*文件，然后预览设计，查看塔楼底部部分的新细节（见[图7-14](#figure7-14)）。
- en: '![f07014](image_fi/279547c07/f07014.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![f07014](image_fi/279547c07/f07014.png)'
- en: 'Figure 7-14: Tower with the updated bottom section'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-14：更新后的底部部分塔楼
- en: The tower is now visually similar to the actual Leaning Tower of Pisa. You can
    apply the Evaluate stage one more time, but adding more details might not produce
    much benefit if you intend to make a small 3D print of the model.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，塔楼在视觉上已经非常接近实际的比萨斜塔。你可以再次进行评估阶段，但如果你打算制作一个小型的3D打印模型，添加更多细节可能不会带来太大好处。
- en: Final Evaluation of the Design Cycle
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计周期的最终评估
- en: At this stage, the tower looks very similar to the Leaning Tower of Pisa.Making
    a slight modification to `$fn` in *tower.scad* increases the design’s smoothness,
    providing an even closer likeness ([Figure 7-15](#figure7-15)).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，塔楼看起来非常类似于比萨斜塔。对*tower.scad*中的`$fn`进行轻微修改，可以增加设计的平滑度，使其与真实比萨斜塔更加相似（见[图7-15](#figure7-15)）。
- en: '![f07015](image_fi/279547c07/f07015.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![f07015](image_fi/279547c07/f07015.png)'
- en: 'Figure 7-15: Smoother tower with `$``fn``=100` instead of `$``fn``=20`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-15：使用`$fn=100`而不是`$fn=20`的更平滑塔楼
- en: 'You left the smallest details for last, which is a deliberate feature of the
    walking skeleton approach to project development. Every design iteration focuses
    on one major area, specifically chosen to provide the most noticeable improvement
    to the overall tower design. As mentioned previously, because you plan to 3D-print
    this model, you omit especially small details, but could have included the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你把最小的细节留到最后，这是“行走骨架”开发方法的一个故意特点。每次设计迭代都集中在一个主要领域，特别选择该领域来提供最明显的整体塔楼设计改进。如前所述，由于你打算3D打印这个模型，你省略了特别小的细节，但本可以包括以下内容：
- en: The missing columns and arches from the top section.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部部分缺失的柱子和拱门。
- en: The missing rectangular doorways from the middle and bottom sections.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间和底部部分缺失的矩形门口。
- en: The different ornamentation of columns and arches in each section.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个部分的柱子和拱门的不同装饰。
- en: Columns are not basic cylinders, so you could have given the top of a column
    a smaller radius than the bottom.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柱子不是简单的圆柱形，你本可以将柱子的顶部半径设为比底部小。
- en: We mention these missing features as potential exercises for readers who want
    to continue doing design iterations of this model. Larger 3D prints potentially
    could reveal those smaller design features.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到这些缺失的特征，作为想要继续进行此模型设计迭代的读者的潜在练习。更大的3D打印可能会揭示出这些较小的设计特征。
- en: Design Organization Overview
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计组织概览
- en: For your first design iteration, you split the building into three low-fidelity
    sections, each having a separate *.scad* file. This way, all you needed to do
    was preview only one file (*tower.scad*), because that file connected together
    the three other files. [Figure 7-16](#figure7-16) shows the initial project’s
    organization, which reduced the amount of code in any one file, making it easier
    to find and modify specific parts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的第一次设计迭代中，你将建筑分为三个低保真度的部分，每个部分都有一个单独的*.scad*文件。这样，你只需要预览一个文件（*tower.scad*），因为该文件将三个文件连接在一起。[图7-16](#figure7-16)展示了初始项目的组织结构，这样可以减少每个文件中的代码量，便于查找和修改特定部分。
- en: '![f07016](image_fi/279547c07/f07016.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![f07016](image_fi/279547c07/f07016.png)'
- en: 'Figure 7-16: Initial architecture for the Leaning Tower of Pisa project'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-16：比萨斜塔项目的初步架构
- en: Throughout the design process, you used decomposition to find opportunities
    to break larger components of the tower into smaller pieces. After your last iteration,
    the project organization evolved to contain many modules and an additional file
    ([Figure 7-17](#figure7-17)). This final project organization illustrates the
    main principle of the walking skeleton approach to development. Your initial project
    organization focused on connecting big pieces of the project, while your final
    organization reveals all of the smaller details you added incrementally during
    each iteration.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个设计过程中，你使用了分解技术来寻找将塔的更大组件拆分成更小部分的机会。在你最后一次迭代后，项目的组织结构发展成包含许多模块和一个额外文件的形式（[图
    7-17](#figure7-17)）。这个最终的项目组织展示了“走动骨架”开发方法的主要原则。你的初始项目组织侧重于连接项目的大块部分，而最终的组织结构则展示了你在每次迭代中逐步增加的小细节。
- en: The organization and development process described here is only one way to build
    this project. Aside from organizing the project into a different collection of
    separate *.scad* files (or even one massive *.scad* file), you could have created
    a different set of modules to decompose the tower into smaller building blocks.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述的组织和开发过程只是构建此项目的一种方式。除了将项目组织成不同集合的独立*.scad*文件（甚至是一个巨大的*.scad*文件）外，你还可以创建不同的模块集，将塔分解为更小的构建块。
- en: We also missed several opportunities to reduce the need for repeating code by
    including additional `if` statements or `for` loops. For instance, you could have
    created a separate `column_ring` module to “factor out” the inclusion of columns
    and arches around the tower’s circumference. With careful use of `if` statements
    and parameters, you could have used the `column_ring` module to draw both the
    columns and arches in all three sections, greatly simplifying the code required
    in the `top_section`, `middle_section`, and `bottom_section` modules.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也错过了几个通过加入额外的`if`语句或`for`循环来减少重复代码的机会。例如，你本可以创建一个单独的`column_ring`模块，以“提取”塔周围的柱子和拱门的包含内容。通过谨慎使用`if`语句和参数，你可以利用`column_ring`模块绘制三部分中的柱子和拱门，从而大大简化`top_section`、`middle_section`和`bottom_section`模块中所需的代码。
- en: '![f07017](image_fi/279547c07/f07017.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![f07017](image_fi/279547c07/f07017.png)'
- en: 'Figure 7-17: Final architecture for the Leaning Tower of Pisa'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-17：比萨斜塔的最终架构
- en: A design can evolve over time without major changes to the overall project’s
    organization. You don’t need to know all the modules or files you’ll need to create
    at the beginning of a project; you can make those decisions as you gain a better
    understanding of what you’re building. Each time you apply the Evaluate stage
    of the design cycle, you have an opportunity to reconsider which changes to make
    to your design.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 设计可以随着时间的推移演变，而不会对整体项目的组织结构造成重大变化。你不需要在项目开始时就知道所有需要创建的模块或文件；你可以在对自己正在构建的内容有更好理解后再做决定。每次应用设计周期的评估阶段时，你都有机会重新考虑需要对设计做出的更改。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced the benefits of deliberately following the design cycle
    when building a complex project. You applied computational thinking to guide the
    planning phase and a walking skeleton approach to combine the Build and Evaluate
    stages into a looping procedure. You connected the design’s most important features
    first and then incrementally developed each component’s major features. Only during
    the final stages of development did you consider the smaller, more nuanced details.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在构建复杂项目时，故意遵循设计周期的好处。你应用了计算思维来指导规划阶段，并采用了“走动骨架”方法将构建和评估阶段结合成一个循环过程。你首先连接了设计中最重要的特性，然后逐步开发每个组件的主要特性。直到开发的最后阶段，你才考虑更小、更细致的细节。
- en: 'To recap, keep these concepts in mind when designing a complex project:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在设计复杂项目时，请牢记以下概念：
- en: Draw a sketch of the project you want to build, and label it with patterns,
    abstractions, and decompositions to help you understand how to organize your code.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 画出你想要构建的项目草图，并用模式、抽象和分解来标注它，帮助你理解如何组织代码。
- en: Describing the minimum information needed to draw a new shape can help guide
    you to understand which parameters might be necessary for a new module.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述绘制新形状所需的最少信息可以帮助你理解新模块可能需要哪些参数。
- en: Using self-documenting naming conventions will help organize your code by revealing
    the purpose of each new variable or module.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自文档化的命名约定将有助于通过揭示每个新变量或模块的目的来组织你的代码。
- en: Use color to help organize different pieces of an evolving design.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色来帮助组织不断发展的设计中的不同部分。
- en: Make sure to save individual files when you make any changes, so other files
    can use the newest version of that file.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行任何更改时，请确保保存单独的文件，这样其他文件才能使用该文件的最新版本。
- en: Connect your project’s most important pieces first, even if those pieces are
    big-picture abstractions.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先连接项目中最重要的部分，即使这些部分是大致的抽象概念。
- en: Design a project’s smallest details in the final stages of your walking skeleton
    development approach.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在步态框架开发方法的最后阶段，设计项目的最小细节。
- en: The design cycle and walking skeleton development model are common approaches,
    and you can find abundant material online for further reading. We encourage you
    to explore these concepts further as you create new designs with OpenSCAD.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 设计周期和步态框架开发模型是常见的方法，您可以在线找到大量资料供进一步阅读。在使用OpenSCAD创建新设计时，我们鼓励您进一步探索这些概念。
