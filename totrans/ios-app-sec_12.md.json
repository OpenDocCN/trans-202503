["```\n   - (BOOL)webView:(UIWebView*)webView shouldStartLoadWithRequest:(NSURLRequest*)\n        request\n    navigationType:(UIWebViewNavigationType)navigationType {\n\n       NSURL *url = [request URL];\n\n➊     if ([[url scheme] isEqualToString:@\"https\"]) {\n\n           if ([url host] != nil) {\n               NSString *goodHost = @\"happy.fluffy.bunnies.com\";\n\n➋             if ([[url host] isEqualToString:goodHost]) {\n                   return YES;\n               }\n           }\n       }\n       return NO;\n   }\n```", "```\n[webView stringByEvaluatingJavaScriptFromString:@\"var elem =\n    document.createElement('script');\"\n        \"elem.type = 'text/javascript';\"\n        \"elem.text = 'aUselessFunc(name) {\"\n        \"       alert('Ohai!'+name);\"\n        \"};\"\n        \"document.getElementById('head').appendChild(elem);\"];\n[webView stringByEvaluatingJavaScriptFromString:@\"aUselessFunc('Mitch');\"];\n```", "```\n   JSContext *context = [[JSContext alloc] init];\n➊ context[@\"shasum\"] = ^(NSString *data, NSString *salt) {\n       const char *cSalt = [salt cStringUsingEncoding:NSUTF8StringEncoding];\n       const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];\n       unsigned char digest[CC_SHA256_DIGEST_LENGTH];\n       CCHmac(kCCHmacAlgSHA256, cSalt, strlen(cSalt), cData, strlen(cData),\n        digest);\n       NSMutableString *hash = [NSMutableString stringWithCapacity:\n        CC_SHA256_DIGEST_LENGTH];\n       for (int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {\n           [hash appendFormat:@\"%02x\", digest[i]];\n       }\n       return hash;\n   };\n```", "```\nvar password = document.getElementById('password');\nvar salt = document.getElementById('salt');\nvar pwhash = shasum(password, salt);\n```", "```\n@protocol UserExports <JSExport>\n\n//exported variables\n@property NSString *name;\n@property NSString *address;\n\n//exported functions\n- (NSString *) updateUser:(NSDictionary *)info;\n@end\n```", "```\n@interface User : NSObject <UserExports> ➊\n\n// non-exported variable\n@property NSString *password;\n\n// non-exported method declaration\n- (BOOL) resetPassword;\n@end\n```", "```\n➊ JSContext *context = [[JSContext alloc] init];\n➋ User *user= [[User alloc] init];\n   [user setName:@\"Winston Furchill\"];\n   [user setValue:24011965];\n   [user setHiddenName:@\"Enigma\"];\n➌ context[@\"user\"] = user;\n➍ JSValue val = [context evaluateScript:@\"user.value\"];\n➎ JSValue val = [context evaluateScript:@\"user.hiddenName\"];\n   NSLog(@\"value: %d\", [val toInt32]); // => 23011965\n   NSLog(@\"hiddenName: %@\", [val toString]); // => undefined\n```", "```\nself.context[@\"newInstance\"] = ^(NSString *className) {\n    Class clazz = NSClassFromString(className);\n    id inst = [clazz alloc];\n    return inst;\n};\n\n[self.context evaluateScript:@\"var u = newInstance('User');\"];\nJSValue *val = self.context[@\"u\"];\nUser *user = [val toObject];\nNSLog(@\"%@\", [user class]); // => User\n```", "```\n- (void)webViewDidFinishLoad:(UIWebView *)webView {\n      JSContext *context = [webView valueForKeyPath:@\"documentView.webView.\n     mainFrame.javaScriptContext\"];\n\n      context[@\"document\"][@\"cookie\"] = @\"hello, I'm messing with cookies\";\n    }\n```", "```\n   + (BOOL)canInitWithRequest:(NSURLRequest*)theRequest {\n       NSURL* theUrl = [theRequest URL];\n       CDVViewController* viewController = viewControllerForRequest(theRequest);\n\n       if ([[theUrl absoluteString] hasPrefix:kCDVAssetsLibraryPrefixs]) {\n           return YES;\n       } else if (viewController != nil) {\n➊          if ([[theUrl path] isEqualToString:@\"/!gap_exec\"]) {\n➋              NSString* queuedCommandsJSON = [theRequest valueForHTTPHeaderField:@\"\n        cmds\"];\n               NSString* requestId = [theRequest valueForHTTPHeaderField:@\"rc\"];\n               if (requestId == nil) {\n                   NSLog(@\"!cordova request missing rc header\");\n                   return NO;\n               }\n               BOOL hasCmds = [queuedCommandsJSON length] > 0;\n               if (hasCmds) {\n                   SEL sel = @selector(enqueCommandBatch:);\n➌                 [viewController.commandQueue performSelectorOnMainThread:sel\n       withObject:queuedCommandsJSON waitUntilDone:NO];\n```", "```\n<script type=\"text/javascript\">\n    var exec = cordova.require('cordova/exec');\n    function callback(msg) {\n        console.log(msg);\n    }\n    exec(callback, callback, \"File\", \"readAsText\", [\"/private/var/mobile/Library/\n     Preferences/com.apple.MobileSMS.plist\", \"UTF-8\",\n        0, 2048]);\n</script>\n```", "```\nCGRect webFrame = CGRectMake(0, 0, width, height);\nWKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];\nWKWebView *webView =[[WKWebView alloc] initWithFrame:webFrame\n                                       configuration:conf];\nNSURL *url = [NSURL URLWithString:@\"http://www.nostarch.com\"];\nNSURLRequest *request = [NSURLRequest requestWithURL:url];\n[webView loadRequest:request];\n```", "```\n   CGRect webFrame = CGRectMake(0, 0, width, height);\n➊ NSString *src = @\"alert('Welcome to my WKWebView!')\";\n➋ WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];\n➌ WKUserScript *script = [[WKUserScript alloc] initWithSource:src\n           injectionTime:WKUserScriptInjectionTimeAtDocumentStart\n        forMainFrameOnly:YES];\n➍ WKUserContentController *controller = [[WKUserContentController alloc] init];\n➎ [conf setUserContentController:controller];\n➏ [controller addUserScript:script];\n➐ WKWebView *webView =[[WKWebView alloc] initWithFrame:webFrame\n                                              configuration:conf];\n```", "```\n   @interface ViewController ()\n   @property (strong, nonatomic) WKWebView *webView;\n\n   @end\n\n   @implementation ViewController\n\n   - (void)viewDidLoad {\n       [super viewDidLoad];\n\n➊     WKPreferences *pref = [[WKPreferences alloc] init];\n       [pref setJavaScriptEnabled:NO];\n       [pref setJavaScriptCanOpenWindowsAutomatically:NO];\n\n➋     WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];\n       [conf setPreferences:pref];\n\n➌     NSURL *myURL = [NSURL URLWithString:@\"https://people.mozilla.org/~mkelly/\n       mixed_test.html\"];\n\n➍     _webView = [[WKWebView alloc] initWithFrame:[[self view] frame]\n                                     configuration:conf];\n\n       [_webView setNavigationDelegate:self];\n➎     [_webView loadRequest:[NSURLRequest requestWithURL:myURL]];\n       [[self view] addSubview:_webView];\n   }\n\n➏ - (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation\n   {\n       if (![webView hasOnlySecureContent]) {\n\n           NSString *title = @\"Ack! Mixed content!\";\n           NSString *message = @\"Not all content on this page was loaded securely.\";\n           UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title\n                                                            message:message\n                                                           delegate:self\n                                                  cancelButtonTitle:@\"OK\"\n                                                  otherButtonTitles:nil];\n           [alert show];\n       }\n   }\n```"]