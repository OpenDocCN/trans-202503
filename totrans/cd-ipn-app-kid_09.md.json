["```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n BirthdayCake {\n\n}\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge = 8\n\n  ➋\n let\n birthdayName = \"Jude\"\n\n  ➌\n var\n feeds = 20\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n  ➊\n let\n birthdayAge: Int\n\n  ➋\n let\n birthdayName: String\n\n    var feeds = 20\n\n   ➌\n init\n () {\n\n      ➍\n birthdayAge\n = 6\n\n      ➎\n birthdayName\n = \"Dagmar\"\n\n      ➏\n print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init() {\n\n        --*snip*\n --\n\n    }\n\n  ➊\n init\n (age: Int\n , name: String\n ) {\n\n      ➋\n birthdayAge\n = age\n\n      ➌\n birthdayName\n = name\n\n        print\n (\"\n \\(\n birthdayName\n )'s cake is ready!\"\n )\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n    --*snip*\n --\n\n}\n\nlet\n twinsCake = BirthdayCake\n (age: 11\n , name: \"Colin and Brenna\"\n )\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n    init(age: Int, name: String) {\n\n        --*snip*\n --\n\n    }\n\n    ➊\n func\n message(➋\n shouldIncludeAge: Bool\n ) -> ➌\n String\n {\n\n       if\n shouldIncludeAge {\n\n           return\n \"Happy\n \\(\n birthdayAge\n ) Birthday\n \\(\n birthdayName\n )!\"\n\n       }\n\n       return\n \"Happy Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass BirthdayCake {\n\n --*snip*\n --\n\n}\n\nmessage(shouldIncludeAge: false\n )\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    --*snip*\n --\n\n}\n\nfunc\n ordinalAge() -> String\n {\n\n  ➊\n var\n suffix = \"th\"\n\n  ➋\n let\n remainder = birthdayAge\n % 10\n\n  ➌\n switch\n remainder {\n\n    case\n 1\n :\n\n        if\n birthdayAge\n != 11\n {\n\n            suffix = \"st\"\n\n        }\n\n    case\n 2\n :\n\n        if\n birthdayAge\n != 12\n {\n\n            suffix = \"nd\"\n\n        }\n\n    case\n 3\n :\n\n        if\n birthdayAge\n != 13\n {\n\n            suffix = \"rd\"\n\n        }\n\n      ➍\n default\n :\n\n        break\n\n    }\n\n  ➎\n return\n \"\n \\(\n birthdayAge\n )\"\n + suffix\n\n}\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nfunc message(shouldIncludeAge: Bool) -> String {\n\n    if shouldIncludeAge {\n\n        return\n \"Happy\n \\(\n ordinalAge\n ()) Birthday\n \\(\n birthdayName\n )!\"\n\n    }\n\n    return \"Happy Birthday \\(birthdayName)!\"\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass RocketShip {\n\n var destination: String\n\n    init\n (➊\n someDestination: String\n ) {\n\n        destination\n = someDestination\n\n    }\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n FarmAnimal {\n\n    var\n name = \"farm animal\"\n\n    var\n numberOfLegs = 4\n\n    func\n sayHello() -> String\n {\n\n      ➊\n return\n \"Hello I'm a farm animal!\"\n\n    }\n\n    func\n description() {\n\n      ➋\n print\n (\"I'm a\n \\(\n name\n ) and I have\n \\(\n numberOfLegs\n ) legs.\"\n )\n\n    }\n\n}\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  class FarmAnimal {\n\n      --*snip*\n --\n\n  }\n\n➊\n class\n Sheep: FarmAnimal\n {\n\n    ➋\n override init\n () {\n\n        ➌\n super\n .init\n ()\n\n        ➍\n name\n = \"sheep\"\n\n      }\n\n    ➎\n override func\n sayHello() -> String\n {\n\n          return\n \"Baa Baa\"\n\n      }\n\n      override\n func\n description() {\n\n        ➏\n super\n .description\n ()\n\n        ➐\n print\n (\"I provide wool to make blankets.\"\n )\n\n      }\n\n}\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nI'm a sheep and I have 4 legs.\n\nI provide wool to make blankets.\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Sheep: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nclass\n Chicken: FarmAnimal\n {\n\n  ➊\n var\n numberOfEggs = 0\n\n    override\n init\n () {\n\n        super\n .init\n ()\n\n        name\n = \"chicken\"\n\n      ➋\n numberOfLegs\n = 2\n\n    }\n\n    override\n func\n sayHello() -> String\n {\n\n        return\n \"Bok Bok\"\n\n    }\n\n    override\n func\n description() {\n\n        super\n .description\n ()\n\n        print\n (\"I lay eggs.\"\n )\n\n        if\n numberOfEggs\n == 1\n {\n\n            print\n (\"I have one egg for you now.\"\n )\n\n        } else\n if\n numberOfEggs\n > 0\n {\n\n            print\n (\"I have\n \\(\n numberOfEggs\n ) eggs for you now.\"\n )\n\n        }\n\n    }\n\n  ➌\n func\n layAnEgg() {\n\n       numberOfEggs\n += 1\n\n    }\n\n  ➍\n func\n giveUpEggs() -> Int\n {\n\n       let\n eggs = numberOfEggs\n\n       numberOfEggs\n = 0\n\n       return\n eggs\n\n    }\n\n}\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass Chicken: FarmAnimal {\n\n    --*snip*\n --\n\n}\n\nlet\n chicken1 = Chicken\n ()\n\nchicken1\n .layAnEgg\n ()\n\nlet\n chicken2 = Chicken\n ()\n\nchicken2\n .layAnEgg\n ()\n\nchicken2\n .layAnEgg\n ()\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nlet chicken2 = Chicken()\n\nchicken2.layAnEgg()\n\nchicken2.layAnEgg()\n\nlet\n animals = [Sheep\n (), chicken1\n , chicken2\n , Sheep\n (), Chicken\n (), \n\n    Sheep\n (), Pig\n ()]\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nlet animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n    Sheep(), Pig()]\n\nfor\n animal in\n animals\n {\n\n  ➊\n if\n animal is\n Sheep\n {\n\n         print\n (\"This is what my sheep says:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➋\n } else\n if\n animal is\n Chicken\n {\n\n         print\n (\"My chickens say:\n \\(\n animal.sayHello\n ())\"\n )\n\n  ➌\n } else if\n animal is\n Pig\n {\n\n         print\n (\"And here is my pig:\n \\(\n animal.sayHello\n ())\"\n )\n\n    }\n\n}\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nMy chickens say: Bok Bok\n\nThis is what my sheep says: Baa Baa\n\nAnd here is my pig: Oink\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n    animal.layAnEgg\n () // error FarmAnimal has no member layAnEgg\n\n} else if animal is Pig {\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n} else if animal is Chicken {\n\n    print(\"My chickens say: \\(animal.sayHello())\")\n\n  ➊\n let\n chicken = animal as\n ! Chicken\n\n    chicken.layAnEgg\n ()\n\n    chicken.description\n ()\n\n} else if animal is Pig {\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n  let animals = [Sheep(), chicken1, chicken2, Sheep(), Chicken(), ![](Image00184.jpg)\n\n      Sheep(), Pig()]\n\n➊\n var\n gatheredEggs = 0\n\n  for\n animal in\n animals\n {\n\n    ➋\n if let\n chicken = animal as\n ? Chicken\n {\n\n          chicken.layAnEgg\n ()\n\n          print\n (\"Picking up\n \\(\n chicken.numberOfEggs\n ) eggs.\"\n )\n\n       ➌\n gatheredEggs\n += chicken.giveUpEggs\n ()\n\n      }\n\n  }\n\n➍\n print\n (\"I gathered\n \\(\n gatheredEggs\n ) eggs today!\"\n )\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\n➊\n struct\n Couch {\n\n      var\n numberOfCushions = 3\n\n      func\n description() -> String\n {\n\n          return\n \"This couch has\n \\(\n numberOfCushions\n ) cushions.\"\n\n      }\n\n  }\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```", "```\nclass\n Couch {\n\n    var numberOfCushions = 3\n\n    --*snip*\n --\n\n}\n\n```"]