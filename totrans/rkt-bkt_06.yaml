- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: EVOLUTION OF THE BOOTKIT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 引导程序的演变**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: This chapter introduces you to the *bootkit*, a malicious program that infects
    the early stages of the system startup process, before the operating system is
    fully loaded. Bootkits have made an impressive comeback after their use diminished
    due to changes in the PC boot process. Modern bootkits use variations on old stealth
    and persistence approaches from these early bootkits to remain active on a target
    system for as long as possible without the system user’s knowledge.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向你介绍*引导程序*，这是一种在操作系统完全加载之前，感染系统启动过程早期阶段的恶意程序。随着PC引导过程的变化，引导程序的使用有所减少，但它们已经令人印象深刻地卷土重来。现代引导程序使用早期引导程序的隐蔽性和持久性技巧的变种，以尽可能长时间地在目标系统中保持活动状态，而不被系统用户察觉。
- en: In this chapter, we take a look at the earliest bootkits; trace the fluctuating
    popularity of bootkits, including their spectacular comeback in recent years;
    and discuss modern boot-infecting malware.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将带你了解最早的引导程序；追踪引导程序的流行变化，包括近年来它们的壮丽回归；并讨论现代引导感染恶意软件。
- en: '**The First Bootkits**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**第一个引导程序**'
- en: The history of bootkit infections dates back to before the IBM PC hit the shelves.
    The title of “first bootkit” is usually bestowed upon Creeper, a self-replicating
    program discovered around 1971\. Creeper ran under the TENEX networked operating
    system on VAX PDP-10s. The first known antivirus was a program called Reaper designed
    to remove Creeper infections. In this section, we’ll look at early examples of
    bootkits from Creeper onward.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 引导程序感染的历史可以追溯到IBM PC上市之前。“第一个引导程序”这个称号通常被授予Creeper，它是一个自我复制的程序，约在1971年被发现。Creeper在VAX
    PDP-10上的TENEX网络操作系统下运行。第一个已知的杀毒软件是名为Reaper的程序，用于清除Creeper的感染。在本节中，我们将从Creeper开始，回顾引导程序的早期示例。
- en: '***Boot Sector Infectors***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***引导扇区感染者***'
- en: '*Boot sector infectors (BSIs)* were among the earliest bootkits. They were
    first discovered in the days of MS-DOS, the nongraphical operating system that
    preceded Windows, when the PC BIOS’s default behavior was to attempt to boot from
    whatever disk it found in the floppy drive. As their name suggests, these malicious
    programs infected the boot sectors of floppy diskettes; the boot sectors were
    located in the first physical sector of the disk.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*引导扇区感染者（BSI）*是最早的引导程序之一。它们首次出现在MS-DOS时代，这是Windows之前的非图形操作系统，当时PC BIOS的默认行为是尝试从软驱中找到任何磁盘并启动其中的代码。正如其名称所示，这些恶意程序感染了软盘的引导扇区；引导扇区位于磁盘的第一个物理扇区。'
- en: At bootup, the BIOS would look for a bootable diskette in drive A and run whatever
    code it found in the boot sector. If an infected diskette was left in the drive,
    it would infect the system with a BSI even if the disk wasn’t bootable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，BIOS会查找驱动器A中的可启动软盘，并运行它在引导扇区中找到的代码。如果感染的软盘留在驱动器中，即使该磁盘不可启动，它也会用BSI感染系统。
- en: Although some BSIs infected both the diskette and the operating system files,
    most BSIs were *pure*, meaning they were hardware specific, with no OS component.
    Pure BSIs relied solely on BIOS-provided interrupts to communicate with the hardware
    and infect disk drives. This meant an infected floppy would attempt to infect
    IBM-compatible PCs regardless of the OS being run.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些BSI感染了软盘和操作系统文件，但大多数BSI是*纯粹的*，意味着它们是硬件特定的，没有操作系统组件。纯粹的BSI仅依赖BIOS提供的中断来与硬件通信并感染磁盘驱动器。这意味着感染的软盘会尝试感染IBM兼容的PC，无论运行的是什么操作系统。
- en: '***Elk Cloner and Load Runner***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Elk Cloner 和 Load Runner***'
- en: BSI viral software first targeted the Apple II microcomputer, whose operating
    system was usually entirely contained within the diskettes. Credit for the first
    virus to infect the Apple II goes to Rich Skrenta, whose Elk Cloner virus (1982–1983)^([1](footnotes.xhtml#ch04fn1))
    used an infection method, employed by BSIs, though it preceded PC boot sector
    viruses by several years.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: BSI病毒软件最早的目标是Apple II微型计算机，它的操作系统通常完全包含在软盘中。首个感染Apple II的病毒归功于Rich Skrenta，他的Elk
    Cloner病毒（1982-1983）^([1](footnotes.xhtml#ch04fn1))采用了BSI使用的感染方法，尽管它比PC引导扇区病毒早了好几年。
- en: 'Elk Cloner essentially injected itself onto the loaded Apple OS in order to
    modify it. The virus then resided in RAM and infected other floppies by intercepting
    disk accesses and overwriting their system boot sectors with its code. At every
    50th bootup, it displayed the following message (sometimes generously described
    as a poem):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Elk Cloner本质上是将自身注入到加载的Apple OS中，以便进行修改。病毒随后驻留在RAM中，并通过拦截磁盘访问并用其代码覆盖系统引导扇区来感染其他软盘。在每次第50次启动时，它会显示以下消息（有时被慷慨地描述为一首诗）：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next known malware to affect Apple II was Load Runner, first seen in 1989\.
    Load Runner would trap the Apple reset command triggered by the key combination
    CONTROL-COMMAND-RESET and take it as a cue to write itself to the current diskette,
    allowing it to survive a reset. This was one of the earliest methods of malware
    persistence, and it foreshadowed more sophisticated attempts to remain on a system
    undetected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个已知的影响Apple II的恶意软件是Load Runner，首次出现在1989年。Load Runner会拦截由键盘组合CONTROL-COMMAND-RESET触发的Apple重置命令，并以此为信号将自身写入当前软盘，从而使其在重置后依然存在。这是恶意软件持久性的最早方法之一，并预示着更复杂的保持隐匿的攻击方式的到来。
- en: '***The Brain Virus***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***大脑病毒***'
- en: The year 1986 saw the appearance of the first PC virus, Brain. The original
    version of Brain affected only 360KB diskettes. A fairly bulky BSI, Brain infected
    the very first boot sector of a diskette with its loader. The virus stored its
    main body and the original boot sector in the available sectors on the diskette.
    Brain marked these sectors (that is, sectors with the original boot code and the
    main body) “bad” so that the OS wouldn’t overwrite the space.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1986年，首个PC病毒——Brain出现。Brain的原始版本仅影响360KB的软盘。作为一种相当庞大的BSI，Brain将其加载程序感染了软盘的第一个引导扇区。病毒将其主体和原始引导扇区存储在软盘的可用扇区中。Brain将这些扇区（即包含原始引导代码和主体的扇区）标记为“坏”扇区，以防操作系统覆盖这些空间。
- en: 'Some of Brain’s methods have also been adopted in modern bootkits. For one,
    Brain stored its code in a hidden area, which modern bootkits typically do. Second,
    it marked the infected sectors as bad to protect the code from the housekeeping
    done by the OS. Third, it used stealth: if the virus was active when an infected
    sector was accessed, it would hook the disk interrupt handler to ensure that the
    system displayed the legitimate boot code sector instead. We’ll explore each of
    these bootkit features in more detail over the next few chapters.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Brain的一些方法如今也被现代引导木马所采用。首先，Brain将其代码存储在隐藏区域，这也是现代引导木马的常见做法。其次，它将感染的扇区标记为坏扇区，以保护代码不被操作系统的常规清理覆盖。第三，它使用了隐身技术：如果病毒在感染的扇区被访问时仍然处于活动状态，它会钩住磁盘中断处理程序，确保系统显示合法的引导代码扇区。我们将在接下来的几章中更详细地探讨这些引导木马特性。
- en: '**The Evolution of Bootkits**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**引导木马的演变**'
- en: In this section, we’ll look at how the use of BSIs declined as operating systems
    evolved. Then we’ll examine how Microsoft’s Kernel-Mode Code Signing Policy rendered
    previous methods ineffective, prompting attackers to create new infection methods,
    and how the rise of a security standard called *Secure Boot* presented new obstacles
    for modern bootkits.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将探讨随着操作系统的发展，BSI的使用如何逐渐减少。然后我们将研究微软的内核模式代码签名策略如何使得以前的方法失效，迫使攻击者创造新的感染方法，以及一种名为*安全启动*的安全标准如何为现代引导木马带来新的障碍。
- en: '***The End of the BSI Era***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***BSI时代的结束***'
- en: As operating systems became more sophisticated, pure BSIs began to confront
    some challenges. Newer versions of operating systems replaced the BIOS-provided
    interrupts used to communicate with disks that had OS-specific drivers. As a result,
    once the OS was booted, the BSIs could no longer access BIOS interrupts and so
    could not infect other disks in the system. An attempt to execute a BIOS interrupt
    on such systems could lead to unpredictable behavior.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着操作系统变得更加复杂，纯粹的BSI（引导程序接口）开始面临一些挑战。操作系统的新版本取代了用于与具有操作系统特定驱动程序的磁盘进行通信的BIOS提供的中断。因此，一旦操作系统启动，BSI便无法再访问BIOS中断，从而无法感染系统中的其他磁盘。在这种系统上尝试执行BIOS中断可能会导致不可预测的行为。
- en: As more systems implemented a BIOS that could boot from hard drives rather than
    disks, infected floppies became less effective, and the rate of BSI infection
    began to decline. The introduction and increasing popularity of Microsoft Windows,
    along with the rapid decline of floppy disk use, dealt the death blow to old-school
    BSIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 随着更多系统实现了可以从硬盘而非磁盘启动的BIOS，感染的软盘变得不那么有效，BSI感染的传播速度开始下降。微软Windows的推出和软盘使用的急剧下降为传统BSI的终结敲响了丧钟。
- en: '***The Kernel-Mode Code Signing Policy***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内核模式代码签名策略***'
- en: Bootkit technology had to undergo major revision with the introduction of Microsoft’s
    Kernel-Mode Code Signing Policy in Windows Vista and later 64-bit versions of
    Windows, which turned the tables on attackers by incorporating a new requirement
    for kernel-mode drivers. From Vista onward, every system required a valid digital
    signature in order to execute; unsigned malicious kernel-mode drivers simply wouldn’t
    load. Finding themselves unable to inject their code into the kernel once the
    OS was fully loaded, attackers had to look for ways to bypass integrity checks
    in modern computer systems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微软在Windows Vista及以后的64位版本Windows中引入内核模式代码签名策略，引导病毒技术也必须进行重大修订，这一策略通过引入对内核模式驱动程序的新要求，使攻击者的局面发生了逆转。从Vista开始，每个系统都需要有效的数字签名才能执行；没有签名的恶意内核模式驱动程序根本无法加载。攻击者发现自己无法在操作系统完全加载后将代码注入内核，因此不得不寻找绕过现代计算机系统完整性检查的方法。
- en: We can divide all known tricks for bypassing Microsoft’s digital signature checks
    into four groups, as shown in [Figure 4-1](ch04.xhtml#ch04fig01).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将所有已知的绕过微软数字签名检查的技巧分为四组，如[图4-1](ch04.xhtml#ch04fig01)所示。
- en: '![image](../images/04fig01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/04fig01.jpg)'
- en: '*Figure 4-1: Techniques for bypassing the Kernel-Mode Code Signing Policy*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-1：绕过内核模式代码签名策略的技术*'
- en: The first group operates entirely within user mode and relies on built-in Microsoft
    Windows methods for legitimately disabling the signing policy in order to debug
    and test drivers. The OS provides an interface for temporarily disabling driver
    image authentication or enabling test signing by using a custom certificate to
    verify the digital signature of the drivers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组完全在用户模式下运行，并依赖内建的微软Windows方法，合法地禁用签名策略，以便调试和测试驱动程序。操作系统提供了一个接口，用于通过使用自定义证书验证驱动程序的数字签名，暂时禁用驱动程序映像认证或启用测试签名。
- en: The second group attempts to exploit a vulnerability in the system kernel or
    a legitimate third-party driver with a valid digital signature, which allows the
    malware to penetrate into kernel mode.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二组试图利用系统内核或合法的第三方驱动程序中的漏洞，这些驱动程序具有有效的数字签名，从而使恶意软件能够渗透到内核模式中。
- en: The third group targets the OS bootloader in order to modify the OS kernel and
    disable the Kernel-Mode Code Signing Policy. The newer bootkits take this approach.
    They execute before any OS component is loaded so they can tamper with the OS
    kernel to disable security checks. We’ll discuss this method in detail in the
    next chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第三组的目标是操作系统引导加载程序，目的是修改操作系统内核并禁用内核模式代码签名策略。较新的引导病毒采用了这种方法。它们在任何操作系统组件加载之前执行，因此可以篡改操作系统内核以禁用安全检查。我们将在下一章详细讨论这一方法。
- en: The fourth group aims to compromise system firmware. As with the third group,
    its goal is to execute on the target system before the OS kernel does in order
    to disable security checks. The only major difference is that these attacks target
    firmware rather than bootloader components.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第四组的目标是攻破系统固件。与第三组类似，它的目标是在操作系统内核启动之前在目标系统上执行，以禁用安全检查。唯一的主要区别是这些攻击针对的是固件而非引导加载程序组件。
- en: In practice, the third method—compromising the boot process—is the most common,
    because it allows for a more persistent attack. As a result, attackers returned
    to their old BSI tricks to create modern bootkits. The need to bypass integrity
    checks in modern computer systems has heavily influenced bootkit development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，第三种方法——破坏引导过程——是最常见的，因为它能够实现更持久的攻击。因此，攻击者又回到了他们的旧BSI技巧，创造了现代的引导病毒。绕过现代计算机系统中的完整性检查的需求，极大地影响了引导病毒的发展。
- en: '***The Rise of Secure Boot***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安全引导的兴起***'
- en: Today, computers increasingly ship with functional Secure Boot protection. Secure
    Boot is a security standard designed to ensure the integrity of the components
    involved in the boot process. We’ll look at it more closely in [Chapter 17](ch17.xhtml#ch17).
    Faced with Secure Boot, the malware landscape had to change again; instead of
    targeting the boot process, more modern malware attempts to target system firmware.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，计算机越来越多地配备功能完善的安全引导保护。安全引导是一种安全标准，旨在确保引导过程中涉及的组件的完整性。我们将在[第17章](ch17.xhtml#ch17)中详细了解它。面对安全引导，恶意软件的态势不得不再次改变；它们不再针对引导过程，而是更多地尝试攻击系统固件。
- en: Just as Microsoft’s Kernel-Mode Code Signing Policy eradicated kernel-mode rootkits
    and initiated a new era of bootkits, Secure Boot is currently creating obstacles
    for modern bootkits. We see modern malware attacking the BIOS more often. We’ll
    discuss this type of threat in [Chapter 15](ch15.xhtml#ch15).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就像微软的内核模式代码签名策略消除了内核模式根套件并开启了引导病毒的新时代一样，安全启动（Secure Boot）目前正在对现代引导病毒构成障碍。我们看到现代恶意软件更频繁地攻击BIOS。我们将在[第15章](ch15.xhtml#ch15)讨论这一类型的威胁。
- en: '**Modern Bootkits**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**现代引导病毒**'
- en: With bootkits, as in other fields of computer security, *proofs of concept (PoCs)*
    and real malware samples tend to evolve together. A PoC in this circumstance is
    malware developed by security researchers for the purpose of proving that threats
    are real (as opposed to the malware developed by cybercriminals, whose goals are
    nefarious).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于引导病毒，像计算机安全领域的其他领域一样，*概念验证（PoC）*和实际恶意软件样本通常是共同演化的。在这种情况下，PoC是安全研究人员为证明威胁确实存在而开发的恶意软件（与网络犯罪分子开发的恶意软件不同，后者的目标是非法的）。
- en: The first modern bootkit is generally considered to be eEye’s PoC BootRoot,
    presented at the 2005 Black Hat conference in Las Vegas. The BootRoot code, written
    by Derek Soeder and Ryan Permeh, was a *Network Driver Interface Specification
    (NDIS)* backdoor. It demonstrated for the first time that the original bootkit
    concept could be used as a model for attacking modern operating systems.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个现代引导病毒通常被认为是eEye的PoC BootRoot，它在2005年Las Vegas的Black Hat大会上展示。BootRoot的代码是由Derek
    Soeder和Ryan Permeh编写的，属于*网络驱动接口规范（NDIS）*后门。它首次展示了原始引导病毒概念可以作为攻击现代操作系统的模型。
- en: But while the eEye presentation was an important step toward the development
    of bootkit malware, it took two years before a new malicious sample with bootkit
    functionality was detected in the wild. That distinction went to Mebroot, in 2007\.
    One of the most sophisticated threats at the time, Mebroot posed a serious challenge
    to antivirus companies because it used new stealth techniques to survive after
    reboot.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管eEye的演讲是引导病毒恶意软件发展的一个重要步骤，但过了两年，才在野外检测到一个具有引导病毒功能的新恶意样本。这一荣誉属于Mebroot，它出现在2007年。Mebroot当时是最复杂的威胁之一，它使用了新的隐蔽技术，在重启后仍能生存下来，对杀毒公司构成了严重挑战。
- en: The detection of Mebroot coincided with the release of two important PoC bootkits,
    Vbootkit and Stoned, at the Black Hat conference that same year. The Vbootkit
    code showed that it was possible to attack Microsoft’s Windows Vista kernel by
    modifying the boot sector. (The authors of Vbootkit released its code as an open
    source project.) The Stoned bootkit, which also attacked the Vista kernel, was
    named after the very successful Stoned BSI created decades earlier.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Mebroot的检测恰逢两种重要PoC引导病毒——Vbootkit和Stoned——在同一年Black Hat大会上发布。Vbootkit的代码展示了通过修改引导扇区来攻击微软的Windows
    Vista内核是可能的。（Vbootkit的作者将其代码作为开源项目发布。）Stoned引导病毒也是攻击Vista内核的，它的名字来源于数十年前非常成功的Stoned
    BSI。
- en: The release of both PoCs was instrumental in showing the security industry what
    sort of bootkits to look out for. Had the researchers hesitated to publish their
    results, malware authors would have succeeded in preempting a system’s ability
    to detect the new bootkit malware. On the other hand, as it often happens, malware
    authors reused approaches from PoCs presented by security researchers, and new
    in-the-wild malware emerged shortly after the PoC presentation. [Figure 4-2](ch04.xhtml#ch04fig02)
    and [Table 4-1](ch04.xhtml#ch04tab01) illustrate this co-evolution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 两个PoC的发布对于向安全行业展示需要注意的引导病毒（bootkit）类型起到了重要作用。如果研究人员犹豫不决，没有发布他们的结果，恶意软件作者将有可能成功地预先阻止系统检测到新的引导病毒恶意软件。另一方面，正如常常发生的那样，恶意软件作者会重复利用安全研究人员展示的PoC中的方法，并且在PoC展示后不久就会出现新的实际恶意软件。[图
    4-2](ch04.xhtml#ch04fig02) 和 [表 4-1](ch04.xhtml#ch04tab01) 展示了这种共同进化的过程。
- en: '![image](../images/04fig02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/04fig02.jpg)'
- en: '*Figure 4-2: Bootkit resurrection timeline*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-2：引导病毒复兴时间线*'
- en: '**Table 4-1:** Evolution of Proof-of-Concept Bootkits vs. Real-World Bootkit
    Threats'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-1：PoC引导病毒与实际引导病毒威胁的演化**'
- en: '| **Proof-of-concept bootkit evolution** | **Bootkit threat evolution** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **PoC引导病毒演化** | **引导病毒威胁演化** |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **eEye BootRoot (2005)**The first ^([1](ch04.xhtml#ch04tn1)) MBR-based bootkit
    for Microsoft Windows operating systems | **Mebroot (2007)**The first well-known
    modern MBR-based bootkit (we’ll cover MBR-based bootkits in detail in [Chapter
    7](ch07.xhtml#ch07)) for Microsoft Windows operating systems in the wild |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **eEye BootRoot (2005)** 第一个^([1](ch04.xhtml#ch04tn1)) 基于MBR的引导病毒，针对Microsoft
    Windows操作系统 | **Mebroot (2007)** 第一个广为人知的现代基于MBR的引导病毒（我们将在[第7章](ch07.xhtml#ch07)详细讨论基于MBR的引导病毒）
    |'
- en: '| **Vbootkit (2007)**The first bootkit to abuse Microsoft Windows Vista | **Mebratix
    (2008)**The other malware family based on MBR infection |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **Vbootkit (2007)** 第一个滥用Microsoft Windows Vista的引导病毒 | **Mebratix (2008)**
    另一种基于MBR感染的恶意软件家族 |'
- en: '| **Vbootkit 2 x64 (2009)**The first bootkit to bypass the digital signature
    checks on Microsoft Windows 7 | **Mebroot v2 (2009)**The evolved version of Mebroot
    malware |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **Vbootkit 2 x64 (2009)** 第一个绕过Microsoft Windows 7数字签名检查的引导病毒 | **Mebroot
    v2 (2009)** Mebroot恶意软件的进化版本 |'
- en: '| **Stoned (2009)**Another example of MBR-based bootkit infection | **Olmarik
    (TDL4) (2010/11)**The first 64-bit bootkit in the wild |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **Stoned (2009)** 另一个基于MBR的引导病毒感染示例 | **Olmarik (TDL4) (2010/11)** 第一个64位引导病毒
    |'
- en: '| **Stoned x64 (2011)**MBR-based bootkit supporting the infection of 64-bit
    operating systems | **Olmasco (TDL4 modification) (2011)**The first VBR-based
    bootkit infection |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **Stoned x64 (2011)** 支持64位操作系统感染的基于MBR的引导病毒 | **Olmasco (TDL4修改版) (2011)**
    第一个基于VBR的引导病毒感染 |'
- en: '| **Evil Core** ^([3](ch04.xhtml#ch04tn3)) **(2011)**A concept bootkit that
    used SMP (symmetric multiprocessing) for booting into protected mode | **Rovnix
    (2011)**An evolved VBR-based infection with polymorphic code |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **Evil Core** ^([3](ch04.xhtml#ch04tn3)) **(2011)** 使用SMP（对称多处理）引导到受保护模式的概念引导病毒
    | **Rovnix (2011)** 一种进化版基于VBR的感染，具有变形代码 |'
- en: '| **DeepBoot** ^([4](ch04.xhtml#ch04tn4)) **(2011)**A bootkit that used interesting
    tricks to switch from real mode to protected mode | **Mebromi (2011)**The first
    exploration of the concept of BIOS kits seen in the wild |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **DeepBoot** ^([4](ch04.xhtml#ch04tn4)) **(2011)** 使用有趣技巧从实模式切换到受保护模式的引导病毒
    | **Mebromi (2011)** 第一次在野外出现的BIOS引导病毒概念探索 |'
- en: '| **VGA** ^([5](ch04.xhtml#ch04tn5)) **(2012)**A VGA-based bootkit concept
    | **Gapz** ^([6](ch04.xhtml#ch04tn6)) **(2012)**The next evolution of VBR infection
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **VGA** ^([5](ch04.xhtml#ch04tn5)) **(2012)** 基于VGA的引导病毒概念 | **Gapz** ^([6](ch04.xhtml#ch04tn6))
    **(2012)** VBR感染的下一个进化 |'
- en: '| **DreamBoot** ^([7](ch04.xhtml#ch04tn7)) **(2013)**The first public concept
    of a UEFI bootkit | **OldBoot** ^([8](ch04.xhtml#ch04tn8)) **(2014)**The first
    bootkit for the Android OS in the wild |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **DreamBoot** ^([7](ch04.xhtml#ch04tn7)) **(2013)** 第一个公开的UEFI引导病毒概念 | **OldBoot**
    ^([8](ch04.xhtml#ch04tn8)) **(2014)** 第一个针对Android操作系统的引导病毒 |'
- en: '[1](ch04.xhtml#ch04tn1a). When we refer to a bootkit as being “the first” of
    anything, note that we mean the first *to our knowledge*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](ch04.xhtml#ch04tn1a). 当我们提到某个引导病毒是“第一个”时，请注意，我们指的是“在我们所知的范围内第一个”。'
- en: 2. Nitin Kumar and Vitin Kumar, “VBootkit 2.0—Attacking Windows 7 via Boot Sectors,”
    HiTB 2009, *[http://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2%20-%20Vipin%20and%20Nitin%20Kumar%20-%20vbootkit%202.0.pdf](http://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2%20-%20Vipin%20and%20Nitin%20Kumar%20-%20vbootkit%202.0.pdf)*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2. Nitin Kumar 和 Vitin Kumar, “VBootkit 2.0—通过引导扇区攻击Windows 7,” HiTB 2009, *[http://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2%20-%20Vipin%20and%20Nitin%20Kumar%20-%20vbootkit%202.0.pdf](http://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2%20-%20Vipin%20and%20Nitin%20Kumar%20-%20vbootkit%202.0.pdf)*。
- en: '[3](ch04.xhtml#ch04tn3a). Wolfgang Ettlinger and Stefan Viehböck, “Evil Core
    Bootkit,” NinjaCon 2011, *http://downloads.ninjacon.net/downloads/proceedings/2011/Ettlinger_Viehboeck-Evil_Core_Bootkit.pdf*.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[3](ch04.xhtml#ch04tn3a). Wolfgang Ettlinger 和 Stefan Viehböck, “Evil Core
    引导病毒,” NinjaCon 2011, *http://downloads.ninjacon.net/downloads/proceedings/2011/Ettlinger_Viehboeck-Evil_Core_Bootkit.pdf*。'
- en: '[4](ch04.xhtml#ch04tn4a). Nicolás A. Economou and Andrés Lopez Luksenberg,
    “DeepBoot,” Ekoparty 2011, *[http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf](http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf)*.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[4](ch04.xhtml#ch04tn4a). Nicolás A. Economou 和 Andrés Lopez Luksenberg, “DeepBoot,”
    Ekoparty 2011, *[http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf](http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf)*。'
- en: '[5](ch04.xhtml#ch04tn5a). Diego Juarez and Nicolás A. Economou,“VGA Persistent
    Rootkit,” Ekoparty 2012, *https://www.secureauth.com/labs/publications/vga-persistent-rootkit/*.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[5](ch04.xhtml#ch04tn5a). Diego Juarez 和 Nicolás A. Economou，“VGA持久根病毒”，Ekoparty
    2012, *https://www.secureauth.com/labs/publications/vga-persistent-rootkit/*。'
- en: '[6](ch04.xhtml#ch04tn6a). Eugene Rodionov and Aleksandr Matrosov, “Mind the
    Gapz: The Most Complex Bootkit Ever Analyzed?” spring 2013, *[http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf](http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf)*.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[6](ch04.xhtml#ch04tn6a). Eugene Rodionov 和 Aleksandr Matrosov，"Mind the Gapz:
    The Most Complex Bootkit Ever Analyzed?" 2013年春， *[http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf](http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf)*。'
- en: '[7](ch04.xhtml#ch04tn7a). Sébastien Kaczmarek, “UEFI and Dreamboot,” HiTB 2013,
    *[https://conference.hitb.org/hitbsecconf2013ams/materials/D2T1%20-%20Sebastien%20Kaczmarek%20-%20Dreamboot%20UEFI%20Bootkit.pdf](https://conference.hitb.org/hitbsecconf2013ams/materials/D2T1%20-%20Sebastien%20Kaczmarek%20-%20Dreamboot%20UEFI%20Bootkit.pdf)*.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[7](ch04.xhtml#ch04tn7a). Sébastien Kaczmarek，"UEFI 和 Dreamboot"，HiTB 2013，
    *[https://conference.hitb.org/hitbsecconf2013ams/materials/D2T1%20-%20Sebastien%20Kaczmarek%20-%20Dreamboot%20UEFI%20Bootkit.pdf](https://conference.hitb.org/hitbsecconf2013ams/materials/D2T1%20-%20Sebastien%20Kaczmarek%20-%20Dreamboot%20UEFI%20Bootkit.pdf)*。'
- en: '[8](ch04.xhtml#ch04tn8a). Zihang Xiao, Qing Dong, Hao Zhang, and Xuxian Jiang,
    “Oldboot: The First Bootkit on Android,” *[http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/](http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/)*.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[8](ch04.xhtml#ch04tn8a). Zihang Xiao, Qing Dong, Hao Zhang 和 Xuxian Jiang，"Oldboot:
    The First Bootkit on Android"， *[http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/](http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/)*。'
- en: We’ll go over the techniques used by these bootkits in later chapters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中详细讲解这些引导木马使用的技术。
- en: '**Conclusion**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This chapter has discussed the history and evolution of boot compromises, giving
    you a general sense of bootkit technology. In [Chapter 5](ch05.xhtml#ch05), we’ll
    go deeper into the Kernel-Mode Code Signing Policy and explore ways to bypass
    this technology via bootkit infection, focusing on the TDSS rootkit. The evolution
    of TDSS (also known as TDL3) and the TDL4 bootkit neatly exemplifies the shift
    from kernel-mode rootkits to bootkits as a way for malware to persist undetected
    for longer on a compromised system.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了引导木马的历史和演变，帮助你对引导木马技术有了一个大致的了解。在[第5章](ch05.xhtml#ch05)，我们将深入探讨内核模式代码签名策略，并探索通过引导木马感染绕过这一技术的方法，重点讲解TDSS根木马。TDSS（也称为TDL3）和TDL4引导木马的演变清晰地展示了从内核模式根木马到引导木马的转变，作为恶意软件在受感染系统中长时间未被察觉地持续存在的一种方式。
