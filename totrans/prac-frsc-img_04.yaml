- en: '**3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**FORENSIC IMAGE FORMATS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This chapter provides an overview of the various acquisition tools, evidence
    containers, and forensic image formats commonly used today. Forensic image formats
    and evidence containers are the structures that store the forensically acquired
    image together with additional case data, such as the time and duration of the
    acquisition, how the image was acquired, size, errors, hashes, and so on. Additional
    features of forensic formats typically include compressed files and encryption.
    This chapter demonstrates command line forensic tasks using several forensic formats.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find an informative introductory paper describing various forensic formats
    on the Digital Forensic Research Workshop (DFRWS) website at *[http://www.dfrws.org/CDESF/survey-dfrws-cdesf-diskimg-01.pdf](http://www.dfrws.org/CDESF/survey-dfrws-cdesf-diskimg-01.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can identify the commonly used forensic formats described in this chapter
    by using the Sleuth Kit command `img_stat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In addition to these formats, this chapter introduces an ad hoc method using
    SquashFS as a practical forensic container for use with standard forensic tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*An important concept regarding forensic images is that they do not copy files;
    they copy disk sectors, from sector 0 to the last accessible sector on the disk.
    The raw image size will always equal the full disk size independent of the number
    of files residing on the disk’s filesystem.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raw Images**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Raw images are not a format per se but a chunk of raw data imaged from an evidence
    source. Raw images contain no additional metadata aside from the information about
    the image file itself (name, size, timestamps, and other information in the image’s
    own inode).
  prefs: []
  type: TYPE_NORMAL
- en: 'Extracting a raw image is technically straightforward: it is simply the transfer
    of a sequence of bytes from a source device to a destination file. This is normally
    done without any transformation or translation.'
  prefs: []
  type: TYPE_NORMAL
- en: Disk block copying tools, such as dd and variants, are most commonly used to
    extract raw images. These are discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: '***Traditional dd***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create raw images, the simplest tool available, as well as the oldest, is
    the original Unix dd utility. It was not designed for evidence collection, but
    its simple byte-by-byte transfer is useful for imaging disk devices, because it
    makes a complete low-level copy of individual sectors of a disk (preserving the
    filesystem structure, files, directories, and metadata). However, features such
    as logging, error handling, and hashing are either inadequate or nonexistent;
    dd can be used when a better alternative isn’t available. The Computer Forensic
    Tool Testing (CFTT) Project has tested several standard dd versions. You’ll find
    the test results on the CFTT website at *[http://www.cftt.nist.gov/disk_imaging.htm](http://www.cftt.nist.gov/disk_imaging.htm)*.
  prefs: []
  type: TYPE_NORMAL
- en: The dd utility was created in the 1970s on early UNIX systems for byte-order
    conversion and block copying. It was initially developed to convert EBCDIC-encoded
    data from the mainframe world into ASCII encoding, which was preferable in the
    UNIX environment. The program simply takes blocks of data from a source, optionally
    performs a conversion or transformation, and then places the blocks in a specified
    destination (on another device or in a file). Modern versions of dd have enhancements
    that make it useful for performing forensic acquisition of data from devices,
    such as disks and tapes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Forensic dd Variants***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Because the original dd tool was not designed for use in a forensic context,
    certain features are missing. Subsequently, tools based on dd were developed to
    include desired forensic features, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: • Cryptographic hashing
  prefs: []
  type: TYPE_NORMAL
- en: • Improved error handling
  prefs: []
  type: TYPE_NORMAL
- en: • Logging
  prefs: []
  type: TYPE_NORMAL
- en: • Performance enhancements
  prefs: []
  type: TYPE_NORMAL
- en: • Verification checking
  prefs: []
  type: TYPE_NORMAL
- en: • Progress monitoring (forensic imaging can take many hours)
  prefs: []
  type: TYPE_NORMAL
- en: The two most commonly used variants of the dd utility are dcfldd, created by
    Nicholas Harbour at the US Department of Defense Computer Forensics Lab (DCFL)
    in 2002, and dc3dd, created in 2007 by Jesse Kornblum while he was at the US Department
    of Defense Cyber Crime Center (DC3).
  prefs: []
  type: TYPE_NORMAL
- en: The dcfldd tool is based on GNU dd and included additional features, such as
    hashing, improved logging, and splitting output files, among others. Although
    there have been no updates since 2006, the tool is still used today. Alexandre
    Dulaunoy created a patched version of dcfldd that included some Debian bug fixes,
    which you’ll find at *[https://github.com/adulau/](https://github.com/adulau/)*.
  prefs: []
  type: TYPE_NORMAL
- en: The more recent dc3dd tool is implemented as a patch and can more easily follow
    code changes to GNU dd. The tool is currently maintained, and recent updates have
    been made. It includes similar forensic features as dcfldd and implements improved
    logging and error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Both dcfldd and dc3dd originated from traditional dd and have similar features.
    Although neither tool has built-in support for writing to forensic formats (FTK,
    Encase, AFF), compression, or image encryption, you can use command piping and
    redirection for these tasks. Examples of both tools are shown throughout this
    book. Test reports from CFTT exist for dcfldd and dc3dd.
  prefs: []
  type: TYPE_NORMAL
- en: '***Data Recovery Tools***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Several data recovery tools are worth mentioning because of their robust error
    handling and aggressive recovery methods. Although these tools were not written
    with forensics in mind, they can be useful in situations where all other forensic
    tools have failed to recover data from severely damaged media.
  prefs: []
  type: TYPE_NORMAL
- en: GNU ddrescue and dd_rescue have similar names but are different tools, developed
    independently. As of this writing, both tools were under active development, each
    with different useful features. Although they both reference dd in their names,
    neither tool uses the `dd` command syntax.
  prefs: []
  type: TYPE_NORMAL
- en: GNU ddrescue was created in 2004 by Antonio Diaz Diaz and is packaged under
    Debian using the package name *gddrescue*. It uses aggressive and persistent methods
    to attempt the recovery of bad areas of a disk.
  prefs: []
  type: TYPE_NORMAL
- en: The dd_rescue tool was created in 1999 by Kurt Garloff and has an elaborate
    plugin system that supports compression, encryption, hashing, and other plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Other similar storage media recovery tools include myrescue and safecopy. Some
    of these tools will be demonstrated in [Chapters 6](ch06.xhtml#ch06) and [7](ch07.xhtml#ch07).
  prefs: []
  type: TYPE_NORMAL
- en: '**Forensic Formats**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several issues with raw images have led to the creation of forensic file formats.
    When imaging storage media as evidence, there is metadata about the investigation,
    the investigator, the drive details, logs/timestamps, cryptographic hashes, and
    so on. In addition to metadata, there is often a need to compress or encrypt an
    acquired image. Specialized forensic formats facilitate the implementation of
    these features, and the most common formats are described here.
  prefs: []
  type: TYPE_NORMAL
- en: Forensic file formats are sometimes called *evidence containers*. Some research
    work has also outlined the concept of digital evidence bags.^([1](footnote.xhtml#fn14))
    Tools to perform acquisition into forensic formats are demonstrated in [Chapter
    6](ch06.xhtml#ch06).
  prefs: []
  type: TYPE_NORMAL
- en: '***EnCase EWF***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Guidance Software, one of the oldest forensic software companies, produces its
    flagship EnCase forensic software suite, which uses the Expert Witness Format
    (EWF). The EWF format supports metadata, compression, encryption, hashing, split
    files, and more. A reverse engineered, open source library and tools, libewf was
    created in 2006 by Joachim Metz and support can be compiled into Sleuth Kit.
  prefs: []
  type: TYPE_NORMAL
- en: '***FTK SMART***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: AccessData’s FTK SMART format is a direct competitor to EnCase EWF. It’s a proprietary
    format that also includes metadata, compression, encryption, hashing, split files,
    and more. The command line ftkimager tool (which is free but not open source)
    is available from AccessData and is demonstrated in [Chapters 6](ch06.xhtml#ch06)
    and [7](ch07.xhtml#ch07).
  prefs: []
  type: TYPE_NORMAL
- en: '***AFF***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Advanced Forensic Format (AFF) was created by Simson Garfinkel as an open,
    peer-reviewed, published format. It includes all the expected features of a forensic
    format and also includes additional encryption and signing features using standard
    X.509 certificates. The AFFlib software package contains a number of tools for
    converting and managing the AFF format.
  prefs: []
  type: TYPE_NORMAL
- en: AFF version 3 is separately maintained at *[http://github.com/sshock/AFFLIBv3/](http://github.com/sshock/AFFLIBv3/)*.
    In 2009, a paper on AFF version 4 was published.^([2](footnote.xhtml#fn15)) The
    Current AFF version 4 website can be found at *[http://www.aff4.org/](http://www.aff4.org/)*.
    The Advanced Forensic Format 4 Working Group (AFF4 WG) was announced in summer
    2016 with the first meeting held at the DFRWS conference in Seattle.
  prefs: []
  type: TYPE_NORMAL
- en: '**SquashFS as a Forensic Evidence Container**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout this book, I’ll demonstrate a technique for creating a hybrid forensic
    container that combines simple raw imaging and allows storage of supporting case
    information in a similar way as more advanced forensic formats. The technique
    uses SquashFS as a forensic evidence container together with a small shell script,
    sfsimage, which manages various aspects of the container. This method creates
    a compressed image combined with imaging logs, information about the disk device,
    and any other information (photographs, chain of custody forms, and so on) into
    a single package. The files are contained in a read-only SquashFS filesystem,
    which you can access without any special forensic tools.
  prefs: []
  type: TYPE_NORMAL
- en: '***SquashFS Background***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: SquashFS is a highly compressed, read-only filesystem written for Linux. It
    was created by Phillip Lougher in 2002 and was merged into the Linux kernel tree
    in 2009, starting with kernel version 2.6.29.
  prefs: []
  type: TYPE_NORMAL
- en: 'SquashFS was designed more for use with bootable CDs and embedded systems,
    but it has a number of features that make it attractive as a forensic evidence
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: • SquashFS is a highly compressed filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: • It is read-only; items can be added but not removed or modified.
  prefs: []
  type: TYPE_NORMAL
- en: • It stores investigator’s uid/gid and creation timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: • It supports very large file sizes (theoretically up to 16EiB).
  prefs: []
  type: TYPE_NORMAL
- en: • It is included in the Linux kernel and trivial to mount as a read-only filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: • The filesystem is an open standard (tools exist for Windows, OS X).
  prefs: []
  type: TYPE_NORMAL
- en: • The mksquashfs tool uses all available CPUs to create a container.
  prefs: []
  type: TYPE_NORMAL
- en: The use of SquashFS as a forensic evidence container is a practical alternative
    to using other forensic formats, because it facilitates the management of compressed
    raw images acquired with dd. The sfsimage tool, described next, provides the functionality
    you need to manage SquashFS forensic evidence containers.
  prefs: []
  type: TYPE_NORMAL
- en: '***SquashFS Forensic Evidence Containers***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Modern Linux kernels include support for SquashFS filesystems by default. No
    additional kernel modules or recompiling are necessary to mount and access a SquashFS
    filesystem. However, to create a file, append a file, or list the contents of
    a SquashFS file, the squashfs-tools package is required.^([3](footnote.xhtml#fn16))
    Additional forensic software packages for imaging (dcfldd, dc3dd, ewfacquire)
    may be required, depending on your preferred imaging tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'My sfsimage shell script is available at *[http://digitalforensics.ch/sfsimage/](http://digitalforensics.ch/sfsimage/)*.
    Running sfsimage without any options provides you with some help text that describes
    its usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure sfsimage, you can edit the script or create separate *sfsimage.conf*
    files for the script to use. The *config* file is documented with comments and
    examples, and it allows you to define the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: • Preferred imaging/acquisition command (`dd`, `dcfldd`, `dc3dd`, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: • Preferred command to query a device (`hdparm`, `tableu-parm`, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: • Default directory to mount the evidence container (the current working directory
    is the default)
  prefs: []
  type: TYPE_NORMAL
- en: • How to manage privileged commands (`sudo`, `su`, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: • Permissions and uid/gid of created files
  prefs: []
  type: TYPE_NORMAL
- en: The sfsimage script uses **.sfs* as the naming convention for SquashFS forensic
    evidence containers. The sfsimage(1) manual page is included with the script and
    provides more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'To image a disk into a SquashFS forensic evidence container, run sfsimage using
    the `-i` flag, the disk device, and the name of the evidence container. An evidence
    container will be created with the image and initial metadata about the device
    just imaged. In this example, sfsimage is configured to use dc3dd as the imaging
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, a SquashFS container is created, and a regular raw image is produced within
    it. Additional logs and information are also created or can be added separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add additional evidence to a container using sfsimage with the `-a`
    flag. For example, if you need to add a photograph of the physical disk to the
    forensic evidence container previously made, the following command will perform
    the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the contents of a SquashFS forensic evidence container, run the sfsimage
    script with the `-l` flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command output shows the contents of the **.sfs* container (without mounting
    it). Also shown are the correct times when the files were created or added. The
    error log, hash log, and sfsimage log contain documentation about activity and
    errors. The *photo.jpg* is the photograph that was subsequently added to the container.
  prefs: []
  type: TYPE_NORMAL
- en: By mounting the **.sfs* file, you can access an acquired image and added metadata
    files in the SquashFS container. The contents become accessible as a regular part
    of the filesystem. Because the SquashFS filesystem is read-only, there is no danger
    of the contents being modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the **.sfs* file is mounted with the `-m` flag, and
    regular forensic tools (sleuthkit mmls in this example) are used on the acquired
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the mounted **.sfs* container (by default) appears as a **.sfs.d*
    directory. Once mounted, you can access the files inside the directory by using
    regular OS tools or forensic tools or even by exporting the files as a shared
    drive over a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the **.sfs.d* mount is no longer needed, unmount it with the `-u` flag
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Running `sfsimage -m` without a mount point will list all mounted SquashFS containers.
    You can also mount multiple containers on a single system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disk image file sizes have always been difficult to work with in a forensic
    setting. Large disk sizes create space issues and logistical hurdles. Practical
    compression methods such as SquashFS help manage this problem. To illustrate the
    practicality of having a compressed filesystem, sfsimage was used to image an
    8TB subject disk (*bonkers*) on an investigator system containing only 2TB of
    disk space. The entire acquisition took more than 16 hours, and the resulting
    compressed SquashFS file was only 1TB. The mounted SquashFS file provides access
    to the full 8TB as a raw image file. The image is compressed on the fly without
    needing any temporary files. The file sizes of the **.sfs* file and the image
    file are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The use of SquashFS is a practical and effective solution for using raw files
    in a compressed way and offers an alternative forensic evidence container.
  prefs: []
  type: TYPE_NORMAL
- en: '**Closing Thoughts**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter introduced you to various forensic image formats. I provided a
    short overview and history of different tools that can be used to forensically
    acquire a drive. You also learned about the SquashFS filesystem and the sfsimage
    script used to create and manage SquashFS forensic evidence containers. The tools
    and formats presented in this chapter will be used in examples throughout the
    rest of the book.
  prefs: []
  type: TYPE_NORMAL
