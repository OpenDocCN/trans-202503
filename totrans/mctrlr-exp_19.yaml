- en: '**19  PIC Ultraviolet Unlock**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of constraints to designing with Microchip’s PIC microcontrollers,
    but they were very convenient in the early Nineties. It was something like the
    Arduino of its day, used in both hobby projects and commercial products. Available
    in mask ROM, (E)PROM, EEPROM, and flash memory variants, it is still being used
    today. There are many ways to unlock these chips, but in this chapter we’ll focus
    on using ultraviolet light to clear the fuse bits while somehow protecting the
    main program memory that we would like to read.
  prefs: []
  type: TYPE_NORMAL
- en: Before EEPROM and flash memory devices were available, developers would purchase
    chips with a quartz crystal window like the one in [Figure 19.1](ch19.xhtml#ch19fig1),
    called the EPROM variant. The single E means that this is an erasable programmable
    read only memory device, while the double E would denote an electrically erasable
    device. Electrically, you can *clear* bits from one to zero. To *erase* bits from
    zero to one, you would bathe them under an ultraviolet lamp for fifteen or twenty
    minutes, after which the chip can be written with a new program.
  prefs: []
  type: TYPE_NORMAL
- en: The exact same die would be sold in standard, opaque packaging as a PROM or
    OTP (one time programmable) variant. These come pre-erased, but having no window,
    they cannot be conveniently erased for a new program. As we saw in [Chapter 18](ch18.xhtml#ch18),
    we can use red fuming nitric acid (RFNA) to open our own hole in the casing without
    damaging the die or the bonding wires. That’s the basis of all these attacks,
    and the trick usually lies in erasing one part while preserving another.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: UV Erasable PIC16C74'
  prefs: []
  type: TYPE_NORMAL
- en: Protection is controlled by the configuration bits, informally called fuses.
    These bits control code protection (CP), the watchdog timer (WDTE), and the oscillator
    (FOSC). On a PIC, they are implemented with the same floating gate technology
    that produces EPROM, but it is important to understand that the configuration
    bits are not placed inside of the program memory. They are elsewhere on the die.
  prefs: []
  type: TYPE_NORMAL
- en: Early chips such as the PIC16C56 in [Figure 19.2](ch19.xhtml#ch19fig2) are the
    easiest to break because their configuration bits are erased along with program
    memory by design. After decapsulating the chip by the RFNA drip method, simply
    paint over program memory with red nail polish and bake it in an EPROM eraser
    until the device becomes readable. You don’t strictly need to know where the configuration
    bits are, as only the more recognizable program memory needs to be protected by
    the mask.
  prefs: []
  type: TYPE_NORMAL
- en: In the PIC16C56, EPROM memory is the dark rectangle near the right side of the
    left photo that’s covered with a drop of nail polish in the right photo. This
    particular sample came from a Parallax BASIC Stamp, whose firmware I was able
    to read after 151 seconds in an ultraviolet sanitizer box. A USB hub inside the
    sanitizer makes it convenient to read the chip as soon as its fuses have been
    erased, with a shell script giving me a read at the very instant that the chip
    unlocks. The transition period took three seconds, after which every read was
    consistently the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0181-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.2: PIC16C56, Bare and Masked with Nail Polish'
  prefs: []
  type: TYPE_NORMAL
- en: '|  PIC16C620  | PIC16C621 | PIC16C622 | PIC16C62A |'
  prefs: []
  type: TYPE_TB
- en: '| PIC16C63 | PIC16C64A | PIC16C65A |  |'
  prefs: []
  type: TYPE_TB
- en: '| PIC16C710 | PIC16C711 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| PIC16C72 | PIC16C73A | PIC16C74A |  |'
  prefs: []
  type: TYPE_TB
- en: '| PIC16C83 | PIC16C84A | PIC16C923 | PIC16C924 |'
  prefs: []
  type: TYPE_TB
- en: '| PIC17C42A | PIC17C43 | PIC17C44 |  |'
  prefs: []
  type: TYPE_TB
- en: 'Table 19.1: Earliest PICs with Fuse Protection'
  prefs: []
  type: TYPE_NORMAL
- en: Bit corruption can be a problem, in that imperfect masking will erase the bits
    that are uncovered. Zeroes are reliably zeroes after a dump, but ones are sometimes
    ambiguous, in that they might be corrupted zeroes. Caps0ff (2017a) notes a trick
    to help measure this corruption. The PIC16 allows a 7-bit XNOR of the two halves
    of each 14-bit instruction to be read, even when the chip is locked. By first
    dumping all of the checksums, then unlocking the chip and finally dumping code,
    the author was able to identify the damaged words.^([1](footnotes.xhtml#ch19fn1))
  prefs: []
  type: TYPE_NORMAL
- en: UV erasure of fuses became a concern for Microchip, and by 1996 the devices
    in [Table 19.1](ch19.xhtml#ch19tab1) had defenses against the technique, first
    with covers that block ultraviolet light and later with additional, redundant
    fuses. Tarnovsky (2008) documents this in the specific case of the PIC16C558,
    where some of the configuration bits have a shield in the top metal layer for
    protection. Two of these bits control the code protection, and they run through
    an AND gate to ensure that both bits must be erased to unlock the device. Rather
    than work around this optically, Tarnovsky uses a laser cutter to bridge the outputs
    of the AND gate to VDD.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve discussed devices with EPROM or EEPROM memory. The same technique
    works against more recent devices with flash memory, as in Huang (2007), where
    Bunnie unlocks a PIC18F1320\. He used ultraviolet light at a very sharp angle
    to get under the metal, erasing the protection fuses. Electrical tape masked the
    code memory to prevent it from being erased.
  prefs: []
  type: TYPE_NORMAL
- en: Caps0ff (2017b) repeats this attack against a PIC16C74 and confirms a few details.
    First, the angle of the light striking the chip must be *very* acute for devices
    that include a cover above the fuse bits. At a 90*^°* angle from the surface to
    the light source there was no effect, and even at 45*^°* not much seemed to happen,
    but very sharp angles of incidence and longer bake times resulted in a successful
    unlock.^([2](footnotes.xhtml#ch19fn2)) He uses red nail polish instead of the
    electrical tape in Bunnie’s example. Afraid that tape might damage the bond wires,
    I strongly prefer the nail polish method in my own lab.
  prefs: []
  type: TYPE_NORMAL
- en: One further complication is that UV might scatter underneath the mask to reach
    the fuse. Perhaps that’s why the acute angle works, scattering the light beneath
    the fuse shields in the top metal layer. When this happens, it can damage some
    bits of the code memory, requiring tedious reverse engineering to figure out which
    ones ought to have been zeroes.
  prefs: []
  type: TYPE_NORMAL
- en: Before attacking a real target, it’s a good idea to locate the fuse (or fuses)
    in a test chip that has nothing important inside.
  prefs: []
  type: TYPE_NORMAL
- en: Schaffer (2018a) describes two attempts to unlock the Intel 8752 microcontroller
    with ultraviolet light, one successful and one failure. Like the PIC16, this device’s
    fuse bit is a floating gate transistor away from the main memory region. The failed
    attempt has a slightly larger mask, and the fuse is expected to be in this region.
    Whenever you fail to unlock a chip, save photos of each attempt and combine them
    to get an idea of where the fuses might be.
  prefs: []
  type: TYPE_NORMAL
- en: Schaffer (2018b) describes an unlock of the Altera EP900 EPLD, an early ancestor
    of the modern CPLD. The protection bit for this chip is stored in the main EPROM
    memory along with the bitstream. This bit was found on a sample chip by selectively
    masking all but one corner until eventually the test chip unlocked under ultraviolet
    light.
  prefs: []
  type: TYPE_NORMAL
- en: Skorobogatov (2005) resets the fuses of a PIC16F84 with a microscope’s built-in
    halogen illuminator, focused at maximum power and high magnification on the unshielded
    fuses. The halogen bulb does emit ultraviolet light, but it’s not clear from the
    description whether the mechanism is that some fraction of UV passes through the
    glass lenses or that other portions of light also have some effect of UV erasure.
    In a casual test, 24 hours of exposure at high magnification did not flip any
    bits of a PIC16 on my desktop microscope.
  prefs: []
  type: TYPE_NORMAL
- en: Skorobogatov also describes success in using this technique against the CY7C63001A
    chip used in USB dongles. Where fuses are located away from the main EEPROM, he
    suggests that they often use similar structure. The shape of a memory cell in
    the main EEPROM will also be the shape of fuse cells elsewhere on the die, and
    this can be used to find them.
  prefs: []
  type: TYPE_NORMAL
