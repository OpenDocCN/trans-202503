- en: '**19  PIC Ultraviolet Unlock**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**19  紫外线解锁PIC**'
- en: There are a lot of constraints to designing with Microchip’s PIC microcontrollers,
    but they were very convenient in the early Nineties. It was something like the
    Arduino of its day, used in both hobby projects and commercial products. Available
    in mask ROM, (E)PROM, EEPROM, and flash memory variants, it is still being used
    today. There are many ways to unlock these chips, but in this chapter we’ll focus
    on using ultraviolet light to clear the fuse bits while somehow protecting the
    main program memory that we would like to read.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Microchip的PIC微控制器设计有很多限制，但在90年代初期它们非常方便。它们有点像那个时代的Arduino，既用于业余项目，也用于商业产品。它提供了掩模ROM、（E）PROM、EEPROM和闪存变体，至今仍在使用。有很多方法可以解锁这些芯片，但在本章中，我们将重点介绍如何利用紫外线光清除保险丝位，同时保护我们希望读取的主要程序内存。
- en: Before EEPROM and flash memory devices were available, developers would purchase
    chips with a quartz crystal window like the one in [Figure 19.1](ch19.xhtml#ch19fig1),
    called the EPROM variant. The single E means that this is an erasable programmable
    read only memory device, while the double E would denote an electrically erasable
    device. Electrically, you can *clear* bits from one to zero. To *erase* bits from
    zero to one, you would bathe them under an ultraviolet lamp for fifteen or twenty
    minutes, after which the chip can be written with a new program.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在EEPROM和闪存设备普及之前，开发人员会购买带有石英晶体窗口的芯片，就像[图19.1](ch19.xhtml#ch19fig1)中所示的EPROM变体。这单个字母E表示这是可擦除的可编程只读存储器设备，而双字母E表示这是一种电擦除设备。从电气上讲，你可以将位从1清除为0。要将位从0擦除为1，则需要将其暴露在紫外线灯下15到20分钟，之后该芯片即可写入新程序。
- en: The exact same die would be sold in standard, opaque packaging as a PROM or
    OTP (one time programmable) variant. These come pre-erased, but having no window,
    they cannot be conveniently erased for a new program. As we saw in [Chapter 18](ch18.xhtml#ch18),
    we can use red fuming nitric acid (RFNA) to open our own hole in the casing without
    damaging the die or the bonding wires. That’s the basis of all these attacks,
    and the trick usually lies in erasing one part while preserving another.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的芯片将以标准的不透明包装形式作为 PROM 或 OTP（一次性可编程）变体出售。这些芯片出厂时已经擦除，但由于没有窗口，无法方便地擦除以进行新程序写入。如我们在[第18章](ch18.xhtml#ch18)中所见，我们可以使用红色烟雾硝酸（RFNA）在不损坏芯片或连接线的情况下打开外壳上的孔。这就是所有这些攻击的基础，技巧通常在于擦除某一部分，同时保护另一部分。
- en: '![Image](../images/f0180-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0180-01.jpg)'
- en: 'Figure 19.1: UV Erasable PIC16C74'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1：紫外线可擦除的PIC16C74
- en: Protection is controlled by the configuration bits, informally called fuses.
    These bits control code protection (CP), the watchdog timer (WDTE), and the oscillator
    (FOSC). On a PIC, they are implemented with the same floating gate technology
    that produces EPROM, but it is important to understand that the configuration
    bits are not placed inside of the program memory. They are elsewhere on the die.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 保护由配置位控制，通常被称为保险丝。这些位控制代码保护（CP）、看门狗定时器（WDTE）和振荡器（FOSC）。在PIC中，它们是通过与生产EPROM相同的浮动栅极技术实现的，但需要理解的是，配置位并不位于程序内存中。它们位于芯片的其他地方。
- en: Early chips such as the PIC16C56 in [Figure 19.2](ch19.xhtml#ch19fig2) are the
    easiest to break because their configuration bits are erased along with program
    memory by design. After decapsulating the chip by the RFNA drip method, simply
    paint over program memory with red nail polish and bake it in an EPROM eraser
    until the device becomes readable. You don’t strictly need to know where the configuration
    bits are, as only the more recognizable program memory needs to be protected by
    the mask.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的芯片，如[图19.2](ch19.xhtml#ch19fig2)中的PIC16C56，是最容易破解的，因为它们的配置位与程序内存一起被设计为可以擦除。通过RFNA滴水法去除封装后，只需用红色指甲油涂抹程序内存，并将其放入EPROM擦除器中加热，直到设备变得可读取。严格来说，你不需要知道配置位的具体位置，因为只需保护那些更容易识别的程序内存即可。
- en: In the PIC16C56, EPROM memory is the dark rectangle near the right side of the
    left photo that’s covered with a drop of nail polish in the right photo. This
    particular sample came from a Parallax BASIC Stamp, whose firmware I was able
    to read after 151 seconds in an ultraviolet sanitizer box. A USB hub inside the
    sanitizer makes it convenient to read the chip as soon as its fuses have been
    erased, with a shell script giving me a read at the very instant that the chip
    unlocks. The transition period took three seconds, after which every read was
    consistently the same.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在PIC16C56中，EPROM内存位于左图右侧靠近的深色矩形区域，在右图中被一滴指甲油覆盖。这款样品来自Parallax BASIC Stamp，我能够在紫外线消毒箱中经过151秒后读取其固件。消毒箱内部的USB集线器使得在熔丝被擦除后，读取芯片变得方便，而一个Shell脚本则让我在芯片解锁的瞬间就能读取数据。过渡期持续了三秒钟，之后每次读取的结果都一致。
- en: '![Image](../images/f0181-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0181-01.jpg)'
- en: 'Figure 19.2: PIC16C56, Bare and Masked with Nail Polish'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2：PIC16C56，裸片与涂了指甲油的对比
- en: '|  PIC16C620  | PIC16C621 | PIC16C622 | PIC16C62A |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| PIC16C620  | PIC16C621 | PIC16C622 | PIC16C62A |'
- en: '| PIC16C63 | PIC16C64A | PIC16C65A |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| PIC16C63 | PIC16C64A | PIC16C65A |  |'
- en: '| PIC16C710 | PIC16C711 |  |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| PIC16C710 | PIC16C711 |  |  |'
- en: '| PIC16C72 | PIC16C73A | PIC16C74A |  |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| PIC16C72 | PIC16C73A | PIC16C74A |  |'
- en: '| PIC16C83 | PIC16C84A | PIC16C923 | PIC16C924 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| PIC16C83 | PIC16C84A | PIC16C923 | PIC16C924 |'
- en: '| PIC17C42A | PIC17C43 | PIC17C44 |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| PIC17C42A | PIC17C43 | PIC17C44 |  |'
- en: 'Table 19.1: Earliest PICs with Fuse Protection'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 表19.1：最早的带有熔丝保护的PIC
- en: Bit corruption can be a problem, in that imperfect masking will erase the bits
    that are uncovered. Zeroes are reliably zeroes after a dump, but ones are sometimes
    ambiguous, in that they might be corrupted zeroes. Caps0ff (2017a) notes a trick
    to help measure this corruption. The PIC16 allows a 7-bit XNOR of the two halves
    of each 14-bit instruction to be read, even when the chip is locked. By first
    dumping all of the checksums, then unlocking the chip and finally dumping code,
    the author was able to identify the damaged words.^([1](footnotes.xhtml#ch19fn1))
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 位数据损坏可能会成为一个问题，因为不完美的遮蔽会擦除未被遮盖的位。零始终可靠为零，但一有时会变得模糊，因为它们可能是被损坏的零。Caps0ff（2017a）指出了一种方法来帮助测量这种损坏。PIC16允许读取每个14位指令的两个半部分的7位XNOR，即使芯片被锁定。通过先转储所有校验和，然后解锁芯片，最后转储代码，作者能够识别损坏的数据字。^([1](footnotes.xhtml#ch19fn1))
- en: UV erasure of fuses became a concern for Microchip, and by 1996 the devices
    in [Table 19.1](ch19.xhtml#ch19tab1) had defenses against the technique, first
    with covers that block ultraviolet light and later with additional, redundant
    fuses. Tarnovsky (2008) documents this in the specific case of the PIC16C558,
    where some of the configuration bits have a shield in the top metal layer for
    protection. Two of these bits control the code protection, and they run through
    an AND gate to ensure that both bits must be erased to unlock the device. Rather
    than work around this optically, Tarnovsky uses a laser cutter to bridge the outputs
    of the AND gate to VDD.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 紫外线擦除熔丝的问题引起了Microchip的关注，到1996年，[表19.1](ch19.xhtml#ch19tab1)中的设备已经有了针对这种技术的防护，首先是使用遮挡紫外线的外壳，后来则增加了额外的冗余熔丝。Tarnovsky（2008）记录了这种情况，特别是在PIC16C558的例子中，其中一些配置位在顶部金属层有一个保护屏蔽。这两个配置位控制着代码保护，并通过与门确保两个位都必须擦除才能解锁设备。Tarnovsky并没有通过光学方法绕过这一保护，而是使用激光切割机将与门的输出桥接到VDD。
- en: So far, we’ve discussed devices with EPROM or EEPROM memory. The same technique
    works against more recent devices with flash memory, as in Huang (2007), where
    Bunnie unlocks a PIC18F1320\. He used ultraviolet light at a very sharp angle
    to get under the metal, erasing the protection fuses. Electrical tape masked the
    code memory to prevent it from being erased.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了带有EPROM或EEPROM内存的设备。同样的技术也适用于更现代的带有闪存内存的设备，例如黄（2007）中，Bunnie解锁了一个PIC18F1320。他使用紫外线光以非常锐的角度照射金属下方，擦除保护熔丝。电工胶带遮盖了代码内存，以防止其被擦除。
- en: Caps0ff (2017b) repeats this attack against a PIC16C74 and confirms a few details.
    First, the angle of the light striking the chip must be *very* acute for devices
    that include a cover above the fuse bits. At a 90*^°* angle from the surface to
    the light source there was no effect, and even at 45*^°* not much seemed to happen,
    but very sharp angles of incidence and longer bake times resulted in a successful
    unlock.^([2](footnotes.xhtml#ch19fn2)) He uses red nail polish instead of the
    electrical tape in Bunnie’s example. Afraid that tape might damage the bond wires,
    I strongly prefer the nail polish method in my own lab.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Caps0ff（2017b）对PIC16C74进行了重复攻击，并确认了一些细节。首先，对于包含保险丝位上方罩壳的设备，光照射芯片的角度必须是*非常*锐角的。从表面到光源的90*^°*角度没有效果，即使是45*^°*角度也似乎没有太大变化，但非常锐的入射角和更长时间的照射确实成功解锁了芯片。^([2](footnotes.xhtml#ch19fn2))他使用了红色指甲油代替了Bunnie例子中的电工胶带。由于担心胶带可能会损坏连接线，我个人实验室更倾向使用指甲油方法。
- en: One further complication is that UV might scatter underneath the mask to reach
    the fuse. Perhaps that’s why the acute angle works, scattering the light beneath
    the fuse shields in the top metal layer. When this happens, it can damage some
    bits of the code memory, requiring tedious reverse engineering to figure out which
    ones ought to have been zeroes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个复杂因素是，紫外线可能会在面罩下方散射，最终到达保险丝。这也许就是为什么锐角有效的原因，它能够将光散射到保险丝遮蔽层下方的顶部金属层。当这种情况发生时，可能会损坏一些代码存储器中的位，需要繁琐的逆向工程来找出哪些位本应是零。
- en: Before attacking a real target, it’s a good idea to locate the fuse (or fuses)
    in a test chip that has nothing important inside.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击真正的目标之前，最好先在一个没有重要内容的测试芯片上定位保险丝（或多个保险丝）。
- en: Schaffer (2018a) describes two attempts to unlock the Intel 8752 microcontroller
    with ultraviolet light, one successful and one failure. Like the PIC16, this device’s
    fuse bit is a floating gate transistor away from the main memory region. The failed
    attempt has a slightly larger mask, and the fuse is expected to be in this region.
    Whenever you fail to unlock a chip, save photos of each attempt and combine them
    to get an idea of where the fuses might be.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Schaffer（2018a）描述了两次尝试使用紫外线解锁Intel 8752微控制器，一次成功，一次失败。像PIC16一样，这个设备的保险丝位是一个漂浮栅极晶体管，位于主存储区外。失败的尝试使用了一个稍微大一点的面罩，预计保险丝位应位于该区域。每当解锁芯片失败时，保存每次尝试的照片并将它们合成，以便了解保险丝可能的位置。
- en: Schaffer (2018b) describes an unlock of the Altera EP900 EPLD, an early ancestor
    of the modern CPLD. The protection bit for this chip is stored in the main EPROM
    memory along with the bitstream. This bit was found on a sample chip by selectively
    masking all but one corner until eventually the test chip unlocked under ultraviolet
    light.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Schaffer（2018b）描述了Altera EP900 EPLD的解锁过程，这是一种现代CPLD的早期祖先。这个芯片的保护位存储在主EPROM内存中，与比特流一起存储。通过有选择地遮罩所有角落，直到最终测试芯片在紫外线照射下解锁，找到了这个位。
- en: Skorobogatov (2005) resets the fuses of a PIC16F84 with a microscope’s built-in
    halogen illuminator, focused at maximum power and high magnification on the unshielded
    fuses. The halogen bulb does emit ultraviolet light, but it’s not clear from the
    description whether the mechanism is that some fraction of UV passes through the
    glass lenses or that other portions of light also have some effect of UV erasure.
    In a casual test, 24 hours of exposure at high magnification did not flip any
    bits of a PIC16 on my desktop microscope.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Skorobogatov（2005）使用显微镜内置的卤素照明装置重置PIC16F84的保险丝，聚焦在最大功率和高倍率下，照射在未遮蔽的保险丝上。卤素灯泡确实会发出紫外线，但从描述中不清楚机制是部分紫外线穿过玻璃镜头，还是其他部分的光也有紫外擦除的效果。在一次简单的测试中，使用桌面显微镜高倍率暴露24小时并没有改变我的PIC16位。
- en: Skorobogatov also describes success in using this technique against the CY7C63001A
    chip used in USB dongles. Where fuses are located away from the main EEPROM, he
    suggests that they often use similar structure. The shape of a memory cell in
    the main EEPROM will also be the shape of fuse cells elsewhere on the die, and
    this can be used to find them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Skorobogatov还描述了在对USB加密狗中使用的CY7C63001A芯片进行紫外线攻击时的成功经验。对于保险丝位位于主EEPROM之外的情况，他建议它们通常使用类似的结构。主EEPROM中的存储单元形状也将是芯片上其他位置保险丝单元的形状，这可以帮助找到它们。
