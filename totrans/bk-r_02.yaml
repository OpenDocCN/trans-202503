- en: '**1**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**GETTING STARTED**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: R provides a wonderfully flexible programming environment favored by the many
    researchers who do some form of data analysis as part of their work. In this chapter,
    I’ll lay the groundwork for learning and using R, and I’ll cover the basics of
    installing R and certain other things useful to know before you begin.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.1 Obtaining and Installing R from CRAN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: R is available for Windows, OS X, and Linux/Unix platforms. You can find the
    main collection of R resources online at the Comprehensive R Archive Network (CRAN).
    If you go to the R project website at *[http://www.r-project.org/](http://www.r-project.org/)*,
    you can navigate to your local CRAN mirror and download the installer relevant
    to your operating system. [Section A.1](app01.xhtml#app01lev1sec96) provides step-by-step
    instructions for installing the base distribution of R.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2 Opening R for the First Time**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: R is an interpreted language that’s strictly case- and character-sensitive,
    which means that you enter instructions that follow the specific syntactic rules
    of the language into a console or command-line interface. The software then interprets
    and executes your code and returns any results.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*R is what’s known as a* high-level *programming language.* Level *refers to
    the level of abstraction away from the fundamental details of computer execution.
    That is, a* low-level *language will require you to do things such as manually
    manage the machine’s memory allotments, but with a high-level language like R,
    you’re fortunately spared these technicalities.*'
  prefs: []
  type: TYPE_NORMAL
- en: When you open the base R application, you’re presented with the R console; [Figure
    1-1](ch01.xhtml#ch1fig1) shows a Windows instance, and the left image of [Figure
    1-2](ch01.xhtml#ch1fig2) shows an example in OS X. This represents R’s naturally
    incorporated *graphical user interface (GUI)* and is the typical way base R is
    used.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-1: The R GUI application (default configuration) in Windows*'
  prefs: []
  type: TYPE_NORMAL
- en: The functional, “no-frills” appearance of the interpreter, which in my experience
    has struck fear into the heart of many an undergraduate, stays true to the very
    nature of the software—a blank statistical canvas that can be used for any number
    of tasks. Note that OS X versions use separate windows for the console and editor,
    though the default behavior in Windows is to contain these panes in one overall
    R window (you can change this in the GUI preferences if desired; see [Section
    1.2.1](ch01.xhtml#ch01lev2sec06)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-2: The base R GUI console pane (left) and a newly opened instance
    of the built-in editor (right) in OS X*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*As I’ve just done, in some parts of the book I’ll refer specifically to the
    R GUI functionality in Windows and OS X, given these are the two platforms most
    often used by beginners. As well as Linux/Unix implementations, it’s possible
    to run R from a terminal or shell or, indeed, in the alternative* batch *mode.
    The vast majority of the code in this book is functional in all settings.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.1 Console and Editor Panes***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are two main window types used for programming R code and viewing output.
    The console or command-line interpreter that you’ve just seen is where all execution
    takes place and where all textual and numeric output is provided. You may use
    the R console directly for calculations or plotting. You would typically use the
    console directly only for short, one-line commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the R *prompt* that indicates R is ready and awaiting a command
    is a `>` symbol, after which a text cursor appears. To avoid confusion with the
    mathematical symbol for “greater than,” >, some authors (including me) prefer
    to modify this. A typical choice is `R>`, which you can set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With the cursor placed at the prompt, you can use the keyboard up arrow (↑)
    and down arrow (↓) to scroll through any previously executed commands; this is
    useful when making small tweaks to earlier commands.
  prefs: []
  type: TYPE_NORMAL
- en: For longer chunks of code and function authoring, it’s more convenient to first
    write your commands in an *editor* and execute them in the console only when you’re
    done. There is a built-in R code editor for this purpose. The R *scripts* you
    write in the code editor are essentially just plain-text files with a *.R* extension.
  prefs: []
  type: TYPE_NORMAL
- en: You can open a new instance of the editor using the R GUI menus (for example,
    File → New script in Windows or File → New Document in OS X).
  prefs: []
  type: TYPE_NORMAL
- en: The built-in editor features useful keystroke shortcuts (for example, CTRL-R
    in Windows or ![image](../images/common-02.jpg)-RETURN in OS X), which automatically
    send lines to the console. You can send the line upon which the cursor sits, a
    highlighted line, a highlighted part of a line, or a highlighted chunk of code.
    It’s common to have multiple editor panes open at once when working with multiple
    R script files; keystroke code submissions simply operate with respect to the
    currently selected editor.
  prefs: []
  type: TYPE_NORMAL
- en: Aesthetics such as coloring and character spacing of both the console and editor
    can be tailored to a certain extent depending on operating system; you simply
    need to access the relevant GUI preferences. [Figure 1-3](ch01.xhtml#ch1fig3)
    shows the R GUI preferences in Windows (Edit → GUI preferences...) and OS X (R
    → Preferences...). A nice feature of the OS X version of R in particular is the
    code-coloring and bracket-matching features of the editor, which can improve the
    authoring and readability of large sections of code.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-3: The R GUI preferences in Windows (left) and OS X (right)*'
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.2 Comments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In R, you can annotate your code with *comments*. Just preface the line with
    a hash mark (`#`), and anything that comes thereafter will be ignored by the interpreter.
    For example, executing the following in the console does nothing but return you
    to the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Comments can also appear after valid commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you’re writing large or complicated chunks of code in the editor, this kind
    of annotation can be helpful to others (and indeed yourself!) who want to understand
    what your code is doing.
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.3 Working Directory***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An active R session always has a *working directory* associated with it. Unless
    you explicitly specify a file path when saving or importing data files, R will
    use this working directory by default. To check the location of the working directory,
    use the `getwd` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: File paths are always enclosed in double quotation marks, and R uses forward
    slashes, not backslashes, when specifying folder locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the default working directory using the function `setwd` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may provide your file path relative to the current working directory or
    fully (in other words, from a system root drive). Either way, it’s important to
    remember the case-sensitive nature of R; you must match the naming and punctuation
    of any folder names exactly or an error will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: That said, if you’re happy specifying a full and correct file path each time
    you read or write a file (there are further details in [Chapter 8](ch08.xhtml#ch08)),
    then the files of interest can reside anywhere on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.4 Installing and Loading R Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The base installation of R comes ready with a plethora of built-in commands
    for numeric calculations, common statistical analyses, and plotting and visualization.
    These commands can be used right from the outset and needn’t be loaded or imported
    in any way. I’ll refer to these functions as *built-in* or *ready-to-use* in this
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Slightly more specialized techniques and data sets are contained within *packages*
    (also referred to as *libraries*) of code. Using contributed packages is common,
    and you’ll be doing so throughout this book, so it’s important to get comfortable
    with installing and loading the required libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[Section A.2](app01.xhtml#app01lev1sec97) covers the relevant details concerning
    package download and installation from CRAN, but I’ll provide a brief overview
    here.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are a small number of recommended packages that are included with the
    base distribution of R (listed in [Section A.2.2](app01.xhtml#app01lev2sec274)).
    They don’t need to be installed separately, but to use them, you do need to load
    them by calling `library`. One package you’ll use in this book is named `MASS`
    ([Venables and Ripley, 2002](ref.xhtml#ref69)). To load it (or any other installed
    package) and gain access to its functions and data sets, simply execute `library`
    at the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that calling `library` provides access to a package’s functionality only
    for the running R session. When you close R and reopen a fresh instance, you’ll
    need to reload any packages you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There are thousands of contributed packages not included with the typical R
    installation; to make them loadable in R, you must first download and install
    them from a repository (usually CRAN). The easiest way to do this is by using
    the `install.packages` function directly at the R prompt (for this you need an
    Internet connection).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, one such package is `ks` ([Duong, 2007](ref.xhtml#ref20)), which
    you’ll use in [Chapter 26](ch26.xhtml#ch26). Executing the following will attempt
    to connect to your local CRAN mirror and download and install `ks`, as well as
    several packages upon which it relies (called *dependencies*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The console will show running output as the procedure completes.
  prefs: []
  type: TYPE_NORMAL
- en: You need to install a package only once; thereafter it will be available for
    your R installation. You can then load your installed package (like `ks`) in any
    newly opened instance of R with a call to `library`, just as you did for `MASS`.
  prefs: []
  type: TYPE_NORMAL
- en: '[Section A.2.3](app01.xhtml#app01lev2sec275) offers more detail on package
    installation.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The maintainers of contributed packages periodically provide version updates
    to fix bugs and add functionality. Every so often, you might want to check for
    updates to your collection of installed packages.
  prefs: []
  type: TYPE_NORMAL
- en: From the R prompt, a simple execution of the following will attempt to connect
    to your set package repository (defaulting to CRAN), looking for versions of all
    your installed packages that are later than those you currently have.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[Section A.3](app01.xhtml#app01lev1sec98) offers more details about updating
    packages and [Section A.4](app01.xhtml#app01lev1sec99) discusses alternate CRAN
    mirrors and repositories.'
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.5 Help Files and Function Documentation***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: R comes with a suite of *help files* that you can use to search for particular
    functionality, to seek information on precisely how to use a given function and
    specify its *arguments* (in other words, the values or objects you supply to the
    function when you execute it), to clarify the role of arguments in the operations,
    to learn about the form of any returned objects, to provide possible examples
    of using the function, and to get details on how you may cite any software or
    data sets.
  prefs: []
  type: TYPE_NORMAL
- en: To access the help file for a given command or other object, use the `help`
    function at the console prompt or use the convenient shortcut `?`. For example,
    consider the ready-to-use arithmetic mean function, `mean`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This brings up the file in the top image of [Figure 1-4](ch01.xhtml#ch1fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-4: The R help file for the function* `mean` *(top) and the results
    of a help search for the string* `"mean"` *(bottom) in OS X*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re unsure of the precise name of the desired function, you can search
    the documentation across all installed packages using a character string (a statement
    in double quotes) passed to `help.search`, or you can use `??` as a shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This search brings up a list of functions, with their host packages and descriptions,
    whose help files contain the string of interest, as shown in the bottom image
    of [Figure 1-4](ch01.xhtml#ch1fig4) (the highlighted entry is that of the arithmetic
    mean).
  prefs: []
  type: TYPE_NORMAL
- en: 'All help files follow the general format shown in the top image of [Figure
    1-4](ch01.xhtml#ch1fig4); the length and level of detail in the file typically
    reflect the complexity of the operations carried out by the function. Most help
    files include the first three items listed here; the others are common but optional:'
  prefs: []
  type: TYPE_NORMAL
- en: • The *Description* section provides a short statement about the operations
    carried out.
  prefs: []
  type: TYPE_NORMAL
- en: • The *Usage* section specifies the form of the function in terms of how it
    should be passed to the R console, including the natural order of the arguments
    and any default values (these are the arguments that are shown being set using
    `=`).
  prefs: []
  type: TYPE_NORMAL
- en: • In the *Arguments* section, more detail is given about what each argument
    does as well as the possible values that they’re allowed to take on.
  prefs: []
  type: TYPE_NORMAL
- en: • The nature of the object that’s returned by the function (if anything) is
    specified under *Value*.
  prefs: []
  type: TYPE_NORMAL
- en: • The *References* section provides relevant citations for the command or the
    methodology behind the function.
  prefs: []
  type: TYPE_NORMAL
- en: • The help files for related functions are linked under *See Also*.
  prefs: []
  type: TYPE_NORMAL
- en: • *Examples* provides executable code that you can copy and paste into the console,
    demonstrating the function in action.
  prefs: []
  type: TYPE_NORMAL
- en: There are several more possible fields in a help file—functions with longer
    explanations often contain a *Details* section after the *Arguments* section.
    Common traps or mistakes made when calling the function are usually placed in
    a *Warnings* section, and additional information can be placed in *Notes*.
  prefs: []
  type: TYPE_NORMAL
- en: Although they might seem quite technical when you’re first starting out, I encourage
    you to keep looking at help files—even if you already know how a function works,
    getting comfortable with the layout and interpretation of function documentation
    is an important part of becoming a skilled R user.
  prefs: []
  type: TYPE_NORMAL
- en: '***1.2.6 Third-Party Editors***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The popularity of R has led to the development of several third-party code editors,
    or compatible plug-ins for existing code-editing software, which can enhance the
    experience of coding in R.
  prefs: []
  type: TYPE_NORMAL
- en: One noteworthy contribution is RStudio ([RStudio Team, 2015](ref.xhtml#ref56)).
    This is an integrated development environment (IDE) available free for Windows,
    OS X, and Linux/Unix platforms at *[http://www.rstudio.com/](http://www.rstudio.com/)*.
  prefs: []
  type: TYPE_NORMAL
- en: RStudio includes a direct-submission code editor; separate point-and-click panes
    for things such as file, object, and project management; and the creation of markup
    documents incorporating R code. [Appendix B](app02.xhtml#app02) discusses RStudio
    and its capabilities in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Use of any third-party editor, including RStudio, is by and large a personal
    choice. In this book, I simply assume use of the typical base R GUI application.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.3 Saving Work and Exiting R**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, you’ve spent a few hours coding in R, and it’s time to go home? When saving
    work in R, you need to pay attention to two things: any R objects that have been
    created (and stored) in the active session and any R script files written in an
    editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '***1.3.1 Workspaces***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use the GUI menu items (for example, under File in Windows and under
    Workspace in OS X) to save and load *workspace image* files. An R workspace image
    contains all the information held in the R session at the time of exit and is
    saved as a *.RData* file. This will include all objects you’ve created and stored
    (in other words, *assigned*) within the session (you’ll see how to do this in
    [Chapter 2](ch02.xhtml#ch02)), including those that may have been loaded from
    a previous workspace file.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, loading a stored *.RData* file allows you to “pick up from where
    you left off.” At any point in an R session, you can execute `ls()` at the prompt,
    which lists all objects, variables, and user-defined functions currently present
    in the active workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use the R commands `save.image` and `load` at the console
    for handling workspace *.RData* files—both of these functions contain a `file`
    argument to which you pass the folder location and name of the target *.RData*
    file (see the corresponding help files `?save.image` and `?load` for further information
    on the use of these).
  prefs: []
  type: TYPE_NORMAL
- en: Note that saving a workspace image in this way doesn’t retain the functionality
    of any contributed packages that were loaded in the previously active R session.
    As mentioned in [Section 1.2.4](ch01.xhtml#ch01lev2sec09), you’ll need to use
    `library` to load any packages required for your work for each new instance of
    R.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quickest way to exit the software is to enter `q()` at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Simply exiting the console will bring up a dialog asking if you’d like to save
    the workspace image. In this case, choosing to save doesn’t open a file browser
    to name your file but creates (or overwrites) a “no-name” file as one with a *.RData*
    extension in your working directory (refer to [Section 1.2.3](ch01.xhtml#ch01lev2sec08)).
  prefs: []
  type: TYPE_NORMAL
- en: If an unnamed *.RData* file exists in the default working directory when a new
    instance of R is opened, the program will automatically load that default workspace—if
    that has happened, you’ll be notified in the console’s welcoming text.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Alongside the* .RData *file, R will automatically save a file containing a
    line-by-line history of all the commands executed in the console for the associated
    workspace in the same directory. It’s this history file that allows you to scroll
    through the previously executed commands using the keyboard directional arrows,
    as noted earlier.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***1.3.2 Scripts***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For tasks requiring anything more than a handful of commands, you’ll usually
    want to work in the built-in code editor. Saving your R scripts is therefore at
    least as important as saving a workspace, if not more so.
  prefs: []
  type: TYPE_NORMAL
- en: You save editor scripts as plain-text files with a *.R* extension (noted in
    [Section 1.2.1](ch01.xhtml#ch01lev2sec06)); this allows your operating system
    to associate these files with the R software by default. To save a script from
    the built-in editor, ensure the editor is selected and navigate to File → Save
    (or press CTRL-S in Windows or ![image](../images/common-02.jpg)-S in OS X). To
    open a previously saved script, select File → Open script... (CTRL-O) in Windows
    or File → Open Document... (![image](../images/common-02.jpg)-O) in OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Often, you won’t really need to save a workspace *.RData* file if your script
    files are saved. Once any required commands in a saved script are reexecuted in
    a new R console, the objects created previously (in other words, those contained
    within a saved *.RData* file) are simply created once more. This can be useful
    if you’re working on multiple problems at one time because it can be easy to mistakenly
    overwrite an object when relying solely on the stand-alone default workspace.
    Keeping your collection of R scripts separate is therefore a simple way to separate
    several projects without needing to worry about overwriting anything important
    that may have been stored previously.
  prefs: []
  type: TYPE_NORMAL
- en: R also provides a number of ways to write individual objects, such as data sets
    and image files of plots, to disk, which you’ll look at in [Chapter 8](ch08.xhtml#ch08).
  prefs: []
  type: TYPE_NORMAL
- en: '**1.4 Conventions**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few conventions that I’ll follow in the book in terms of the presentation
    of code and math.
  prefs: []
  type: TYPE_NORMAL
- en: '***1.4.1 Coding***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As mentioned, when you code with R, you execute the code in the console, possibly
    after writing the script in the editor first. The following points are important
    to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '• R code that’s entered directly into the console for execution is shown preceded
    by the `R>` prompt and followed by any output displayed in the console. For example,
    this simple division of 14 by 6 from [Section 2.1.1](ch02.xhtml#ch02lev2sec17)
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: R> 14/6
  prefs: []
  type: TYPE_NORMAL
- en: '[1] 2.333333'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to copy and paste console-executed code directly from the text of
    the book, you’ll need to omit the `R>` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '• For code that should be written in the editor before it’s executed in the
    console, I’ll indicate as such in the text, and the code will be presented *without*
    the prompt. The following example comes from [Section 10.2.1](ch10.xhtml#ch10lev2sec92):'
  prefs: []
  type: TYPE_NORMAL
- en: for(myitem in 5:7){
  prefs: []
  type: TYPE_NORMAL
- en: cat("--BRACED AREA BEGINS--\n")
  prefs: []
  type: TYPE_NORMAL
- en: cat("the current item is",myitem,"\n")
  prefs: []
  type: TYPE_NORMAL
- en: cat("--BRACED AREA ENDS--\n\n")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: My preferred coding style for actually arranging and indenting chunks like this
    will become clearer as you progress through [Part II](part02.xhtml#part02).
  prefs: []
  type: TYPE_NORMAL
- en: '• There will occasionally be long lines of code (either executed directly in
    the console or written in the editor), which, for the sake of print, will be split
    and indented at an appropriate place to fit on the page. For example, take this
    line from [Section 6.2.2](ch06.xhtml#ch06lev2sec60):'
  prefs: []
  type: TYPE_NORMAL
- en: R> ordfac.vec <- factor(x=c("Small","Large","Large","Regular","Small"),
  prefs: []
  type: TYPE_NORMAL
- en: levels=c("Small","Regular","Large"),
  prefs: []
  type: TYPE_NORMAL
- en: ordered=TRUE)
  prefs: []
  type: TYPE_NORMAL
- en: Although this can be written out as a single line when using R, you can also
    break the line at a comma (in this case, the comma splits the arguments to the
    `factor` function). The broken line will be indented to the level of the opening
    parenthesis of the relevant command. Both forms—single line or split—will work
    as is when executed in R.
  prefs: []
  type: TYPE_NORMAL
- en: • Lastly, in a couple of places when the console output is lengthy and not essential
    to your understanding of the immediate content, it’ll be suppressed for the sake
    of print. I’ll say as much in the text, and you’ll see the designation `--snip`--
    in the affected chunk of code.
  prefs: []
  type: TYPE_NORMAL
- en: '***1.4.2 Math and Equation References***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Mathematics and equations that appear in this book (mainly in [Parts III](ch03.xhtml#ch03)
    and [IV](ch04.xhtml#ch04)) will be kept to a minimum, but in certain sections
    it’s sometimes necessary to go into a little mathematical detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important equations will be presented on their own lines as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/e1-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Equations will be numbered in parentheses, and references to equations in the
    text will use these parenthesized numbers and may or may not be preceded by *Equation*.
    For example, you’ll see equations referred to in both of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: • As per [Equation (1.1)](ch01.xhtml#ch1eq1), *y* = 8 when *x* = 2.
  prefs: []
  type: TYPE_NORMAL
- en: • Inversion of (1.1) yields *x* = *y*/4.
  prefs: []
  type: TYPE_NORMAL
- en: 'When numeric results are rounded to a certain level, they’ll be noted as such
    according to the number of *decimal places*, abbreviated to *d.p.* Here are some
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: • The famous geometric value pi is given as *π* = 3.1416 (rounded to 4 d.p.).
  prefs: []
  type: TYPE_NORMAL
- en: • Setting *x* = 1.467 in (1.1) results in *y* = 5.87 (2 d.p.).
  prefs: []
  type: TYPE_NORMAL
- en: '***1.4.3 Exercises***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Exercise questions in the chapters appear in a rounded box:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 1.1**'
  prefs: []
  type: TYPE_NORMAL
- en: Say the word *cat* aloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using nothing but your brain, find the solution to 1 + 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These exercises are optional. If you choose to tackle them, they are intended
    to be completed as and when they appear in the text to help you practice and understand
    the specific content and code in the sections that immediately precede them.
  prefs: []
  type: TYPE_NORMAL
- en: All the data sets you’ll use in this book for coding and plotting examples are
    available either as built-in R objects or as part of one of the contributed packages
    you’ll install. These packages will be noted in the relevant text (for a short
    list of them, see [Section A.2.3](app01.xhtml#app01lev2sec275)).
  prefs: []
  type: TYPE_NORMAL
- en: For your convenience, all code examples in this book, as well as complete suggested
    solutions to *all* practice exercises, are freely available as runnable *.R* script
    files on the book’s web page at *[https://www.nostarch.com/bookofr/](https://www.nostarch.com/bookofr/)*.
  prefs: []
  type: TYPE_NORMAL
- en: You should think of these solutions (and any accompanying commentary) as “suggested”
    because there are often multiple ways to perform a certain task in R, which may
    not necessarily be any better or worse than those supplied.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Code in This Chapter**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `options` | Set various R options | [Section 1.2.1](ch01.xhtml#ch01lev2sec06),
    [p. 5](ch01.xhtml#page_5) |'
  prefs: []
  type: TYPE_TB
- en: '| `#` | A comment (ignored by interpreter) | [Section 1.2.2](ch01.xhtml#ch01lev2sec07),
    [p. 6](ch01.xhtml#page_6) |'
  prefs: []
  type: TYPE_TB
- en: '| `getwd` | Print current working directory | [Section 1.2.3](ch01.xhtml#ch01lev2sec08),
    [p. 7](ch01.xhtml#page_7) |'
  prefs: []
  type: TYPE_TB
- en: '| `setwd` | Set current working directory | [Section 1.2.3](ch01.xhtml#ch01lev2sec08),
    [p. 7](ch01.xhtml#page_7) |'
  prefs: []
  type: TYPE_TB
- en: '| `library` | Load an installed package | [Section 1.2.4](ch01.xhtml#ch01lev2sec09),
    [p. 7](ch01.xhtml#page_7) |'
  prefs: []
  type: TYPE_TB
- en: '| `install.packages` | Download and install package | [Section 1.2.4](ch01.xhtml#ch01lev2sec09),
    [p. 8](ch01.xhtml#page_8) |'
  prefs: []
  type: TYPE_TB
- en: '| `update.packages` | Update installed packages | [Section 1.2.4](ch01.xhtml#ch01lev2sec09),
    [p. 8](ch01.xhtml#page_8) |'
  prefs: []
  type: TYPE_TB
- en: '| `help` or `?` | Function/object help file | [Section 1.2.5](ch01.xhtml#ch01lev2sec10),
    [p. 9](ch01.xhtml#page_9) |'
  prefs: []
  type: TYPE_TB
- en: '| `help.search` or `??` | Search help files | [Section 1.2.5](ch01.xhtml#ch01lev2sec10),
    [p. 10](ch01.xhtml#page_10) |'
  prefs: []
  type: TYPE_TB
- en: '| `q` | Quit R | [Section 1.3.1](ch01.xhtml#ch01lev2sec12), [p. 12](ch01.xhtml#page_12)
    |'
  prefs: []
  type: TYPE_TB
