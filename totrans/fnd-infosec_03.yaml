- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: AUTHORIZATION AND ACCESS CONTROLS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 授权与访问控制
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: 'After you’ve received a party’s claim of identity and established whether that
    claim is valid, as discussed in [Chapter 2](ch02.xhtml), you have to decide whether
    to allow the party access to your resources. You can achieve this with two main
    concepts: authorization and access control. *Authorization* is the process of
    determining exactly what an authenticated party can do. You typically implement
    authorization using *access controls*, which are the tools and systems you use
    to deny or allow access.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在你接收到一方的身份声明并确认该声明是否有效后，正如在[第2章](ch02.xhtml)中讨论的那样，你必须决定是否允许该方访问你的资源。你可以通过两个主要概念来实现这一点：授权和访问控制。*授权*是确定一个经过身份验证的方可以做什么的过程。你通常会使用*访问控制*来实施授权，它们是你用来拒绝或允许访问的工具和系统。
- en: You can base access controls on physical attributes, sets of rules, lists of
    individuals or systems, or other, more complex factors. When it comes to logical
    resources, you’ll probably find simple access controls implemented in everyday
    applications and operating systems and elaborate, multilevel configurations in
    military or government environments. In this chapter, you’ll learn about access
    controls in more detail and look at some ways of implementing them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据物理属性、规则集、个人或系统列表，或其他更复杂的因素来设定访问控制。对于逻辑资源，你可能会发现简单的访问控制已在日常应用程序和操作系统中实现，而在军事或政府环境中，则会有更加复杂的多层次配置。在本章中，你将更详细地了解访问控制，并学习一些实现方法。
- en: What Are Access Controls?
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是访问控制？
- en: Although the term *access controls* may sound technical, like it belongs only
    in high-security computing facilities, we all deal with access controls daily.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然*访问控制*这个术语听起来可能很技术化，似乎只属于高安全性的计算设施，但我们每天都在处理访问控制。
- en: When you lock or unlock the doors of your house, you’re using a form of physical
    access control, based on your keys. (Your keys are something you have, as discussed
    in [Chapter 2](ch02.xhtml); in this case, they function as methods of both authentication
    and authorization.)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你锁定或解锁你家门时，你正在使用一种基于钥匙的物理访问控制。（正如在[第2章](ch02.xhtml)中讨论的那样，你的钥匙是你拥有的物品；在这种情况下，它们作为身份验证和授权的方式起作用。）
- en: When you start your car, you’re also likely to use a key. For some newer cars,
    your key may even include an extra layer of security with radio-frequency identification
    (RFID) tags, which are certificate-like identifiers stored on the key.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你启动汽车时，你也很可能会使用钥匙。对于一些较新的汽车，你的钥匙可能还会包含一个额外的安全层，利用射频识别（RFID）标签，这些标签是储存在钥匙上的类似证书的标识符。
- en: Upon reaching your place of employment, you might use a badge (again, something
    you have) to enter the building.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你到达工作地点时，你可能会使用一个徽章（再次，是你拥有的物品）进入大楼。
- en: When you sit down in front of your computer at work and enter your password
    (something you know), you’re authenticating yourself and using a logical access
    control system to access the resources for which you’ve been given permission.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你坐在工作前的计算机前并输入密码（你知道的东西）时，你正在进行身份验证，并使用逻辑访问控制系统来访问你被授权使用的资源。
- en: Most of us regularly encounter multiple implementations like these while working,
    going to school, and performing the other activities that make up our day.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人在工作、上学以及进行日常活动时，都会经常遇到类似的实现方式。
- en: 'You’ll probably want to use access controls to carry out four basic tasks:
    allowing access, denying access, limiting access, and revoking access. We can
    describe most access control issues or situations using these four actions.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望使用访问控制来执行四个基本任务：允许访问、拒绝访问、限制访问和撤销访问。我们可以通过这四个动作来描述大多数访问控制问题或情况。
- en: '*Allowing access* is giving a party access to a given resource. For example,
    you might want to give a user access to a file, or you may want to give an entire
    group of people access to all the files in a given directory. You might also allow
    someone physical access to a resource by giving your employees a key or badge
    to your facility.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*允许访问*是指授予一方对特定资源的访问权限。例如，你可能想要给用户访问某个文件的权限，或者你可能想要允许一整个团队访问某个目录中的所有文件。你还可能通过给员工发放钥匙或徽章来允许他们对某个资源的物理访问。'
- en: '*Denying access* is the opposite of granting access. When you deny access,
    you are preventing a given party from accessing the resource in question. You
    might deny access to a person attempting to log onto a machine based on the time
    of day, or you might block unauthorized individuals from entering the lobby of
    your building beyond business hours. Many access control systems are set to deny
    by default.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*拒绝访问*是授予访问权限的反面。当你拒绝访问时，你是在阻止某方访问相关资源。你可能会基于时间来拒绝一个人尝试登录计算机的请求，或者你可能会阻止未经授权的人员在非工作时间进入大楼的大厅。许多访问控制系统默认设置为拒绝访问。'
- en: '*Limiting access* is allowing only some degree of access to your resources.
    In a physical security scheme, you might have a master key that can open any door
    in the building, an intermediate key that can open only a few doors, and a low-level
    key that can open only one door. You might also implement limited access when
    you’re using applications that may be exposed to attack-prone environments, like
    web browsers used on the internet.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*限制访问*是仅允许对你的资源进行一定程度的访问。在物理安全方案中，你可能有一把可以打开建筑内任何门的主钥匙，一把只能打开少数几扇门的中级钥匙，以及一把只能打开一扇门的低级钥匙。当你使用可能暴露于攻击风险环境中的应用程序时，例如用于互联网的网页浏览器，你也可能会实现有限访问。'
- en: One way to limit access is by running sensitive applications in *sandboxes*,
    which are isolated environments containing a set of resources for a given purpose
    ([Figure 3-1](#ch3fig1)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 限制访问的一种方式是通过在*沙盒*中运行敏感应用程序，沙盒是为特定目的包含一组资源的隔离环境（[图 3-1](#ch3fig1)）。
- en: '![Image](../images/03fig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig01.jpg)'
- en: '*Figure 3-1: A sandbox is an isolated environment that protects a set of resources.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：沙盒是一个隔离的环境，保护一组资源。*'
- en: We use sandboxes to prevent their contents from accessing files, memory, and
    other system resources with which they shouldn’t be interacting. Sandboxes can
    be useful for containing things that you can’t trust, such as code from public
    websites. One example of a sandbox is the Java Virtual Machine (JVM) used to run
    programs written in the Java programming language. The JVM is specifically constructed
    to protect users against potentially malicious downloaded software.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用沙盒来防止其内容访问文件、内存和其他不应互动的系统资源。沙盒对于隔离你无法信任的内容非常有用，比如来自公共网站的代码。沙盒的一个例子是用于运行Java编程语言编写程序的Java虚拟机（JVM）。JVM专门构建以保护用户免受潜在恶意下载软件的攻击。
- en: '*Revoking access* is taking access away from a party after you’ve granted it.
    Being able to revoke access is vital to the security of your system. If you were,
    for instance, to fire an employee, you’d want to revoke any accesses they might
    have, including access to their email account, your virtual private network (VPN),
    and your facility. When you’re working with computer resources, it may be particularly
    important to be able to revoke access to a given resource quickly.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*撤销访问*是指在你授予某方访问权限后，收回该权限。能够撤销访问权限对系统的安全至关重要。例如，如果你解雇了一名员工，你会希望撤销他们可能拥有的任何访问权限，包括访问他们的电子邮件帐户、你的虚拟私人网络（VPN）和你的设施。当你处理计算机资源时，能够快速撤销对特定资源的访问可能尤其重要。'
- en: Implementing Access Controls
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施访问控制
- en: The two main methods of implementing access controls are with access control
    lists and capabilities. Both of these methods have strengths and weaknesses, as
    well as different ways of carrying out the four basic tasks we covered earlier.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实施访问控制的两种主要方法是使用访问控制列表和能力。这两种方法各有优缺点，并且在执行我们之前提到的四个基本任务时有不同的方式。
- en: '*Access Control Lists*'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*访问控制列表*'
- en: '*Access control lists* (ACLs), often pronounced “ackles,” are lists containing
    information about what kind of access certain parties are allowed to have to a
    given system. We often see ACLs implemented as part of application software or
    operating systems and in the firmware of some hardware appliances, such as network
    infrastructure devices. We may even see ACL concepts extend into the physical
    world, through software systems that control physical resources, such as badge
    readers for door control systems. According to the ACL in [Figure 3-2](#ch3fig2),
    Alice is allowed access to the resource, while Bob is specifically denied access.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*访问控制列表*（ACLs），通常读作“ackles”，是包含有关某些方在给定系统中可以访问权限类型的信息的列表。我们通常会看到ACL作为应用软件或操作系统的一部分实现，也可能在一些硬件设备的固件中看到它们的应用，例如网络基础设施设备。我们甚至可以看到ACL的概念扩展到物理世界，通过控制物理资源的软件系统，比如门禁控制系统的刷卡器。根据[图3-2](#ch3fig2)中的ACL，Alice被允许访问该资源，而Bob则被明确拒绝访问。'
- en: '![Image](../images/03fig02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig02.jpg)'
- en: '*Figure 3-2: A simple access control list*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-2：一个简单的访问控制列表*'
- en: This may seem like a simple concept, but in larger implementations, ACLs can
    become quite complex. Organizations commonly use ACLs to control access in the
    file systems on which their operating systems run and to control the flow of traffic
    in the networks to which their systems are attached. You’ll learn about these
    two types of ACLs in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是个简单的概念，但在更大的实现中，ACL可能变得相当复杂。组织通常使用ACL来控制其操作系统运行的文件系统中的访问权限，并控制其系统连接的网络中的流量。你将在本章中了解这两种类型的ACL。
- en: File System ACLs
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 文件系统ACL
- en: 'The ACLs in most file systems will have three types of permissions (the authorizations
    that allow access to specific resources in a specific manner): *read*, which allows
    a user to access the contents of a file or directory; *write*, which allows a
    user to write to a file or directory; and *execute*, which allows a user to execute
    the contents of the file if that file contains either a program or a script capable
    of running on the system in question.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数文件系统中的ACL将有三种类型的权限（允许以特定方式访问特定资源的授权）：*读取*，允许用户访问文件或目录的内容；*写入*，允许用户写入文件或目录；*执行*，允许用户执行文件的内容，如果该文件包含能够在该系统上运行的程序或脚本。
- en: 'A file or directory may also have multiple ACLs attached to it. In UNIX-like
    operating systems, for instance, a given file might have separate access lists
    for specific users or groups. The system might give a certain individual user
    (like a specific developer) specific read, write, and execute permissions; a certain
    group of users (like the entire developer group) different read, write, and execute
    permissions; and any other authenticated users a third set of read, write, and
    execute permissions. On Linux-based operating systems, you can view these three
    sets of permissions by issuing the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个文件或目录也可以附加多个ACL。在类UNIX操作系统中，例如，给定的文件可能有针对特定用户或组的单独访问列表。系统可能会为某个特定用户（比如某个开发人员）提供特定的读取、写入和执行权限；为某个用户组（例如整个开发人员组）提供不同的读取、写入和执行权限；为任何其他经过身份验证的用户提供第三组读取、写入和执行权限。在基于Linux的操作系统中，你可以通过执行以下命令查看这三组权限：
- en: ls -la
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ls -la
- en: '[Figure 3-3](#ch3fig3) shows these permissions displayed in the system.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-3](#ch3fig3)显示了系统中显示的这些权限。'
- en: '![Image](../images/03fig03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig03.jpg)'
- en: '*Figure 3-3: File permissions on a UNIX-like operating system*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-3：类UNIX操作系统上的文件权限*'
- en: 'Each line in [Figure 3-3](#ch3fig3) represents the permissions for an individual
    file. The permissions for the first file, *ucf.conf*, are displayed as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-3](#ch3fig3)中的每一行代表一个单独文件的权限。第一个文件*ucf.conf*的权限如下所示：'
- en: '- r w - r - - r - -'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '- r w - r - - r - -'
- en: 'This may seem a bit cryptic. To interpret the permissions, it’ll help to divide
    them into the following sections:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些晦涩。为了理解这些权限，帮助将它们分成以下几个部分：
- en: '- | r w - | r - - | r - -'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '- | r w - | r - - | r - -'
- en: 'The first character generally represents the file type: `-` represents a regular
    file, and `d` represents a directory. The second segment represents the *user*
    who owns the file’s permissions and is set to `r w -`, meaning that the user can
    read and write to the file but not execute it.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符通常表示文件类型：`-`表示普通文件，`d`表示目录。第二部分表示拥有文件权限的*用户*，并设置为`r w -`，意味着用户可以读取和写入文件，但不能执行它。
- en: The third segment, the *group* permissions, is set to `r - -`, meaning that
    members of the group that was given ownership of the file can read it but not
    write or execute it. The last segment, *other*, is also set to `r - -`, meaning
    that anyone who is not the user who owns the file or in the group that owns the
    file can also read it but not write or execute it. In Linux, the user permissions
    apply to a single user only, and the group permissions apply to a single group.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个部分，*组*权限，被设置为`r - -`，这意味着被授予文件所有权的组成员可以读取文件，但不能写入或执行它。最后一个部分，*其他*，也被设置为`r
    - -`，这意味着任何既不是文件所有者也不是文件所有组成员的人，也可以读取文件，但不能写入或执行它。在Linux中，用户权限只适用于单个用户，而组权限则适用于单个组。
- en: By using sets of file permissions, you can control access to the operating systems
    and applications that use your file system. Most file systems use systems that
    are similar to the one described for assigning permissions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用文件权限集，你可以控制访问使用你文件系统的操作系统和应用程序。大多数文件系统使用类似于描述的系统来分配权限。
- en: Network ACLs
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 网络访问控制列表
- en: If you look at the variety of activities that take place on networks, both private
    and public, you’ll notice ACLs regulating the activity. In network ACLs, you typically
    filter access based on identifiers used for network transactions, such as Internet
    Protocol (IP) addresses, Media Access Control addresses, and ports. You can see
    such ACLs at work in network infrastructure such as routers, switches, and firewall
    devices, as well as in software firewalls, websites like Facebook and Google,
    email, and other forms of software.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看网络上发生的各种活动，无论是私有的还是公共的，你会注意到ACL在调节这些活动。在网络ACL中，你通常基于用于网络事务的标识符来过滤访问，例如互联网协议（IP）地址、媒体访问控制（MAC）地址和端口。你可以在网络基础设施中看到这些ACL的应用，例如路由器、交换机和防火墙设备，也可以在软件防火墙、Facebook、Google等网站、电子邮件和其他软件形式中看到。
- en: Permissions in network ACLs tend to be binary in nature; rather than read, write,
    and execute, they generally either allow or deny some activity. Instead of users,
    network ACLs typically grant permissions to traffic. For example, when you set
    up the ACL, you use your chosen identifier or identifiers to dictate which traffic
    you’re referring to and whether the traffic is allowed. It’s best to rely on multiple
    identifiers to filter traffic, for reasons that will become clear shortly.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 网络访问控制列表（ACL）中的权限通常是二进制的；它们通常不是读、写和执行权限，而是允许或拒绝某些活动。与用户不同，网络ACL通常将权限授予流量。例如，在设置ACL时，你使用选择的标识符来指明你指的是什么流量以及该流量是否被允许。最好依赖多个标识符来过滤流量，原因稍后会解释。
- en: '*Media Access Control* address filtering is one of the simplest forms of network-oriented
    ACLs. Media Access Control addresses are unique identifiers hard-coded into each
    network interface in a given system.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*媒体访问控制* 地址过滤是最简单的网络面向ACL之一。媒体访问控制地址是硬编码到每个系统中网络接口的唯一标识符。'
- en: Unfortunately, the software settings in most operating systems can override
    a network interface’s Media Access Control address. Changing this address is easy,
    so it’s not a good choice for a unique identifier of a device on the network.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，大多数操作系统中的软件设置可以覆盖网络接口的媒体访问控制地址（MAC 地址）。更改这个地址很容易，因此它不是用作网络中设备唯一标识符的一个好选择。
- en: You could use *IP addresses* instead. Theoretically, an IP address is a unique
    address assigned to each device on any network that uses the Internet Protocol
    for communication. You can filter based on individual addresses or an entire range
    of IP addresses. For instance, you could allow the IP addresses 10.0.0.2 through
    10.0.0.10 to pass traffic but deny any traffic from 10.0.0.11 and higher. Unfortunately,
    like Media Access Control addresses, you can falsify IP addresses, and they’re
    not unique to a network interface. Additionally, IP addresses issued by internet
    service providers are subject to frequent change, so making IP addresses the sole
    basis for filtering is a shaky prospect at best.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以改用 *IP 地址*。理论上，IP 地址是分配给任何使用互联网协议进行通信的网络中每个设备的唯一地址。你可以基于单个地址或整个IP地址范围进行过滤。例如，你可以允许10.0.0.2到10.0.0.10之间的IP地址通过流量，但拒绝10.0.0.11及以上的任何流量。不幸的是，像媒体访问控制地址一样，你可以伪造IP地址，而且它们并不唯一指向某个网络接口。此外，由互联网服务提供商发放的IP地址经常变化，因此仅以IP地址作为过滤的唯一依据是一个不太可靠的选择。
- en: '**BLACK HOLES**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**黑洞**'
- en: Some organizations, such as those that operate web servers, mail servers, and
    other services exposed to the internet, apply large-scale filtering to block out
    known attacks, spammers, and other undesirable traffic. Such filtering might include
    dropping traffic from individual IP addresses, ranges of IP addresses, or the
    entire IP spaces of large organizations, internet service providers, or even entire
    countries. This practice is commonly called *blackholing*, because from the user’s
    perspective, any traffic sent to filtered destinations appears to have vanished
    into a black hole.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织，比如运营 web 服务器、邮件服务器和其他暴露在互联网上的服务的组织，会进行大规模过滤，以阻挡已知的攻击、垃圾邮件发送者和其他不良流量。这种过滤可能包括丢弃来自单个
    IP 地址、IP 地址范围或大型组织、互联网服务提供商，甚至整个国家的 IP 空间的流量。这种做法通常被称为*黑洞*，因为从用户的角度来看，发送到被过滤目的地的任何流量似乎已经消失在了黑洞中。
- en: A third way of filtering traffic is by the *port* used to communicate over the
    network. The network port is a numerical designation for one side of a connection
    between two devices, and we use them to identify the application to which traffic
    should be routed. Many common services and applications use specific ports. For
    instance, FTP uses ports 20 and 21 to transfer files, Internet Message Access
    Protocol (IMAP) uses port 143 for managing email, and Secure Shell (SSH) uses
    port 22 to manage remote connections to systems. There are many more examples,
    since there are 65,535 ports in all.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤流量的第三种方式是根据用于网络通信的*端口*。网络端口是连接两个设备的一方的数字标识，我们使用它们来识别流量应路由到的应用程序。许多常见的服务和应用程序使用特定的端口。例如，FTP
    使用 20 和 21 端口传输文件，互联网邮件访问协议（IMAP）使用 143 端口管理电子邮件，安全外壳（SSH）使用 22 端口管理远程连接到系统。还有很多其他例子，因为总共有
    65,535 个端口。
- en: You can control the use of many applications over the network by allowing or
    denying traffic originating from or sent to any ports that you care to manage.
    However, like Media Access Control and IP addresses, the specific ports used for
    applications are conventions, not absolute rules. You can, with relative ease,
    change the ports that applications use to entirely different ones.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过允许或拒绝来自任何你希望管理的端口的流量，来控制许多应用程序在网络上的使用。然而，像媒体访问控制地址和 IP 地址一样，应用程序使用的特定端口是约定，而非绝对规则。你可以相对轻松地将应用程序使用的端口更改为完全不同的端口。
- en: As you just saw, if you use any single attribute to construct a network ACL,
    you’ll likely encounter a variety of issues. If you’re using IP addresses, your
    attribute might not necessarily be unique. If you’re using Media Access Control
    addresses, your attribute will be easy to alter, and if you use ports, you’re
    banking on conventions rather than rules.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚才看到的，如果你仅使用单一属性来构建网络 ACL，你很可能会遇到各种问题。如果你使用的是 IP 地址，你的属性可能不一定是唯一的。如果你使用的是媒体访问控制地址，你的属性很容易被篡改，而如果你使用端口，你则依赖于约定而非规则。
- en: When you combine several attributes, you begin to arrive at a more secure technique.
    For example, it’s common to use both an IP address and a port, a combination typically
    called a *socket*. Using sockets, you can allow or deny network traffic from one
    or more IP addresses with one or more applications on your network in a workable
    fashion.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你结合多个属性时，你将开始采用更安全的技术。例如，常见的做法是同时使用 IP 地址和端口，这种组合通常被称为*套接字*。使用套接字，你可以以一种可行的方式，允许或拒绝来自一个或多个
    IP 地址的流量，以及网络中一个或多个应用程序的流量。
- en: You can also construct ACLs to filter based on a wide variety of other criteria.
    In some cases, you want to allow or deny traffic based on more specific information,
    such as the content of an individual packet or a related series of packets. Using
    such techniques, you could, for example, filter out traffic related to networks
    used to illegally share copyrighted material.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以构建 ACL 以基于各种其他标准进行过滤。在某些情况下，你可能希望基于更具体的信息来允许或拒绝流量，比如单个数据包的内容或一系列相关数据包。使用这种技术，你可以，例如，过滤掉与非法共享版权材料相关的网络流量。
- en: Weaknesses of ACL Systems
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: ACL 系统的弱点
- en: Systems that use ACLs to manage permissions are vulnerable to a type of attack
    called the *confused deputy problem*. This problem occurs when the software with
    access to a resource (the deputy) has a greater level of permission to access
    the resource than the user who is controlling the software. If you can trick the
    software into misusing its greater level of authority, you can potentially carry
    out an attack.[¹](notes.xhtml#ch03fn1)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ACL（访问控制列表）管理权限的系统容易受到一种被称为*混淆代理问题*的攻击。这种问题发生在具有访问资源权限的软件（代理）拥有比控制该软件的用户更高的访问权限时。如果你能够欺骗软件误用其更高的权限，就可能实施攻击。[¹](notes.xhtml#ch03fn1)
- en: Several attacks take practical advantage of the confused deputy problem. These
    often involve tricking the user into taking some action when they really think
    they are doing something else entirely. Many of these attacks are *client-side*
    attacks, which take advantage of weaknesses in applications running on the user’s
    computer. These attacks might be code sent through the web browser and executed
    on the local machine, malformed PDF files, or images and videos with attack code
    embedded. In the past several years, software vendors have become increasingly
    aware of such attacks and have begun building defensive measures into their software,
    but new attacks appear on a regular basis. Two of the more common attacks that
    exploit the confused deputy problem are cross-site request forgery (CSRF) and
    clickjacking.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种攻击实际利用了混淆代理问题。这些攻击通常涉及欺骗用户去执行某些操作，而用户实际上认为自己在做完全不同的事情。许多此类攻击是*客户端*攻击，利用了运行在用户计算机上的应用程序中的弱点。这些攻击可能是通过网页浏览器发送并在本地计算机上执行的代码、格式错误的
    PDF 文件，或嵌入攻击代码的图片和视频。近年来，软件供应商越来越意识到此类攻击，并开始在软件中构建防御措施，但新的攻击仍然不断出现。利用混淆代理问题的两种常见攻击是跨站请求伪造（CSRF）和点击劫持。
- en: '*CSRF* is an attack that misuses the authority of the browser on the user’s
    computer. If the attacker knows of, or can guess, a website that has already authenticated
    the user—perhaps a common site such as [Amazon.com](http://Amazon.com)—the attacker
    can embed a link in a web page or HTML-based email, generally to an image hosted
    from a site controlled by the attacker. When the target’s browser attempts to
    retrieve the image in the link, it also executes the additional commands the attacker
    has embedded in it, often in a fashion completely invisible to the target.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*CSRF* 是一种滥用浏览器在用户计算机上的权限的攻击。如果攻击者知道或能够猜到一个已经验证过用户身份的网站——比如一个常见网站，如[Amazon.com](http://Amazon.com)——他们可以在网页或基于
    HTML 的电子邮件中嵌入一个链接，通常指向由攻击者控制的站点托管的图像。当目标的浏览器尝试检索该链接中的图像时，它也会执行攻击者嵌入的附加命令，通常这种行为对于目标是完全不可见的。'
- en: In the example in [Figure 3-4](#ch3fig4), the attacker has embedded a request
    to transfer funds from an account at BankCo to the attacker’s offshore account.
    As the BankCo server sees the request as coming from an authenticated and authorized
    user, it proceeds with the transfer. In this case, the confused deputy is the
    bank server.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 3-4](#ch3fig4)的示例中，攻击者嵌入了一个请求，将资金从 BankCo 的账户转移到攻击者的离岸账户。由于 BankCo 服务器将请求视为来自已验证和授权的用户，因此它继续执行转账。在这种情况下，混淆代理是银行服务器。
- en: '![Image](../images/03fig04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig04.jpg)'
- en: '*Figure 3-4: An example of a CSRF attack*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-4：CSRF 攻击示例*'
- en: '*Clickjacking*, also known as *user interface redressing*, is a particularly
    sneaky and effective client-side attack that takes advantage of some of the page
    rendering features that are available in newer web browsers. To carry out a clickjacking
    attack, the attacker must legitimately control or have taken control of some portion
    of a website. The attacker constructs or modifies the site by placing an invisible
    layer over something the client would normally click. This causes the client to
    execute a command that’s different than the one they think they’re performing.
    You can use clickjacking to trick the client into making purchases, changing permissions
    in their applications or operating systems, or performing other unwanted activities.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*点击劫持*（也称为*用户界面伪装*）是一种特别狡猾且有效的客户端攻击，它利用了现代网页浏览器中某些页面渲染功能。为了实施点击劫持攻击，攻击者必须合法地控制或已经控制了网站的某部分。攻击者通过在客户端通常会点击的内容上方放置一个不可见的层来构造或修改网站。这会导致客户端执行与他们认为自己正在执行的操作不同的命令。你可以使用点击劫持欺骗客户端进行购物、改变应用程序或操作系统的权限，或执行其他不希望的操作。'
- en: '*Capabilities*'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*功能*'
- en: Whereas ACLs define permissions based on a given resource, an identity, and
    a set of permissions, all generally held in a file of some sort, you can also
    define permissions based on a user’s *token*, or key, otherwise known as a *capability*.
    Although the token isn’t a physical object in most cases, you can think of it
    as the badge you might use to open the door of a building. The building has one
    door, and many people have a token that will open it, but each person has a different
    level of access. One person might be able to access the building only during business
    hours on weekdays, while another person may have permission to enter the building
    at any time of day on any day of the week.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与ACL（访问控制列表）基于给定资源、身份和一组权限来定义权限不同，你也可以基于用户的*令牌*或密钥来定义权限，这也被称为*能力*。尽管在大多数情况下令牌不是物理对象，但你可以将其看作是你用来开门的门禁卡。大楼只有一扇门，许多人拥有能够打开它的令牌，但每个人的访问级别不同。一个人可能只能在工作日的工作时间进入大楼，而另一个人则可能有权限在任何一天、任何时间进入大楼。
- en: In capability-based systems, the right to access a resource is based entirely
    on possession of the token, rather than *who* possesses it. If you were to give
    your badge to someone else, he would be able to use it to access the building
    with whatever set of permissions you have. When it comes to logical assets, applications
    can share their token with other applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于能力的系统中，访问资源的权限完全依赖于拥有令牌，而不是*谁*拥有它。如果你把你的门禁卡给别人，他就能使用它以你拥有的权限进入大楼。当涉及到逻辑资产时，应用程序可以与其他应用程序共享它们的令牌。
- en: If you were to use capabilities instead of ACLs to manage permissions, you could
    protect against confused deputy attack. Neither of the attacks you learned about
    earlier, CSRF and clickjacking, would be possible, because the attacker wouldn’t
    be able to misuse the authority of the user unless they had access to the user’s
    token.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用能力而不是ACL来管理权限，你就可以防范混淆代理攻击。你之前学习的CSRF和点击劫持攻击都不可能发生，因为攻击者无法滥用用户的权限，除非他们能够访问用户的令牌。
- en: Access Control Models
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问控制模型
- en: An *access control model* is a way of determining who should be allowed access
    to what resources. There are quite a few different access control models out there.
    The most common ones, covered here, include discretionary access control, mandatory
    access control, rule-based access control, role-based access control, attribute-based
    access control, and multilevel access control.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*访问控制模型*是确定谁应该被允许访问哪些资源的一种方法。现存有多种不同的访问控制模型。这里讨论的最常见的几种包括自主访问控制、强制访问控制、基于规则的访问控制、基于角色的访问控制、基于属性的访问控制和多级访问控制。'
- en: '*Discretionary Access Control*'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*自主访问控制*'
- en: In the *discretionary access control* (DAC) model, the owner of the resource
    determines who gets access to it and exactly what level of access they can have.
    You can see DAC implemented in most operating systems; if you decide to create
    a network share in a Microsoft operating system, for instance, you’re in charge
    of people’s access to it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在*自主访问控制*（DAC）模型中，资源的拥有者决定谁可以访问该资源以及他们可以拥有什么级别的访问权限。你可以在大多数操作系统中看到DAC的实现；例如，如果你决定在微软操作系统中创建一个网络共享，你就负责管理他人对它的访问。
- en: '*Mandatory Access Control*'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*强制访问控制*'
- en: In the *mandatory access control* (MAC) model, the owner of the resource doesn’t
    get to decide who gets to access it. Instead, a separate group or individual has
    the authority to set access to resources. You can often find MAC implemented in
    government organizations, where access to a given resource is largely dictated
    by the sensitivity label applied to it (secret or top secret, for example), by
    the level of sensitive information the individual is allowed to access (perhaps
    only secret), and by whether the individual actually has a need to access the
    resource (a concept called the *principle of least privilege*, discussed in the
    box).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在*强制访问控制*（MAC）模型中，资源的拥有者无法决定谁可以访问该资源。相反，另一个独立的团体或个人有权设置对资源的访问权限。你通常可以在政府组织中找到MAC的实现，其中对特定资源的访问在很大程度上取决于应用于该资源的敏感性标签（例如，机密或绝密）、个人允许访问的敏感信息的级别（可能只有机密级别），以及个人是否确实有必要访问该资源（这一概念称为*最小权限原则*，在框中讨论）。
- en: '**THE PRINCIPLE OF LEAST PRIVILEGE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小权限原则**'
- en: The principle of least privilege dictates that you should give a party only
    the bare minimum level of access it needs to perform its functionality. For example,
    someone working in an organization’s sales department should not need access to
    data in the organization’s internal human resources system to do their job. Violation
    of the principle of least privilege is at the heart of many of the security problems
    we face today.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最小权限原则规定，应该只给予一个方所需的最低访问权限，以执行其功能。例如，在一个组织的销售部门工作的人，不需要访问组织内部人力资源系统中的数据来完成工作。违反最小权限原则是我们今天面临的许多安全问题的根源。
- en: One of the more common ways the principle of least privilege gets improperly
    implemented is in the permissions given to operating system user accounts. In
    Microsoft operating systems in particular, you’ll often find that casual users,
    who are performing tasks such as creating documents in word processors and exchanging
    emails, are configured with administrative access, allowing them to carry out
    any task that the operating system allows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最小权限原则实施不当的常见方式之一是操作系统用户账户的权限设置。尤其在微软操作系统中，你经常会发现，执行诸如在文字处理软件中创建文档和交换电子邮件等任务的普通用户，配置了管理员访问权限，这使得他们能够执行操作系统允许的任何任务。
- en: Because of this, whenever the over-privileged user opens an email attachment
    containing malware or encounters a website that pushes attack code to the client
    computer, these attacks have free rein on the system. The attacker can simply
    turn off anti-malware tools, install any additional attack tools they care to,
    and proceed with completely compromising the system.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每当权限过高的用户打开包含恶意软件的电子邮件附件，或者访问一个向客户端计算机推送攻击代码的网站时，这些攻击就能在系统中自由肆虐。攻击者可以轻松关闭反恶意软件工具，安装任何他们想要的攻击工具，并继续完全破坏系统。
- en: '*Rule-Based Access Control*'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*基于规则的访问控制*'
- en: '*Rule-based access control* allows access according to a set of rules defined
    by the system administrator. If the rule is matched, access to the resource will
    be granted or denied accordingly.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于规则的访问控制*允许根据系统管理员定义的一组规则来进行访问控制。如果规则匹配，则会相应地授予或拒绝对资源的访问。'
- en: A good example of rule-based access control is an ACL used by a router. You
    might see a rule specifying that traffic coming from source A to destination B
    on port C is allowed. Any other traffic between the two devices would be denied.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 基于规则的访问控制的一个好例子是路由器使用的访问控制列表（ACL）。你可能会看到一条规则，指定来自源A到目标B、端口C上的流量是允许的。其他任何设备之间的流量都会被拒绝。
- en: '*Role-Based Access Control*'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*基于角色的访问控制*'
- en: The *role-based access control* (RBAC) model allows access based on the role
    of the individual being granted access. For example, if you have an employee whose
    only role is to enter data into an application, RBAC would mandate that you allow
    the employee access to only that application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于角色的访问控制*（RBAC）模型允许根据授予访问权限的个人角色来进行访问控制。例如，如果你有一个员工，他的唯一职责是向应用程序中输入数据，RBAC将要求你仅允许该员工访问该应用程序。'
- en: If you have an employee with a more complex role—customer service for an online
    retailer, perhaps—the employee’s role might require him to have access to information
    about customers’ payment status and information, shipping status, previous orders,
    and returns. In this case, RBAC would grant him considerably more access. You
    can see RBAC implemented in many large-scale applications that are oriented around
    sales or customer service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个角色更复杂的员工——比如一家在线零售商的客户服务人员——该员工的角色可能要求他访问有关客户支付状态和信息、发货状态、历史订单和退货的信息。在这种情况下，RBAC将授予他更多的访问权限。你可以在许多大型应用程序中看到RBAC的实现，这些应用程序主要面向销售或客户服务。
- en: '*Attribute-Based Access Control*'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*基于属性的访问控制*'
- en: '*Attribute-based access control* (ABAC) is based on the specific attributes
    of a person, resource, or environment. You can often find it implemented on infrastructure
    systems, such as those in network or telecommunications environments.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于属性的访问控制*（ABAC）基于个人、资源或环境的特定属性。你经常可以在基础设施系统中看到它的实施，例如网络或电信环境中的系统。'
- en: '*Subject attributes* belong to an individual. We could choose any number of
    attributes, such as height in the classic “you must be this tall to ride” access
    control in amusement park rides. Another common example of subject attributes
    are *CAPTCHAs*, or “completely automated public Turing tests to tell humans and
    computers apart” ([Figure 3-5](#ch3fig5)).[²](notes.xhtml#ch03fn2) CAPTCHAs control
    access based on whether the party on the other end can pass a test that is (in
    theory) too difficult for a machine to complete.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-5: A CAPTCHA, designed to prove that the user is human*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '*Resource attributes* belong to a resource, such as an operating system or
    application. You’ll often see access controlled by resource attributes, although
    usually this is for technical reasons rather than security reasons; some software
    runs only on a particular operating system, and some websites work only with certain
    browsers. You might apply this type of access control as a security measure by
    requiring someone to use specific software or protocols for communication.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: You can use *environmental attributes* to enable access controls based on environmental
    conditions. People commonly use time to control access to physical and logical
    resources. Access controls on buildings often allow access only during business
    hours. Many VPN connections have time limits that force the user to reconnect
    every 24 hours to prevent users from keeping a connection running after their
    authorization for using it has been removed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '*Multilevel Access Control*'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Multilevel access control* models combine several of the access control models
    discussed in this section. They’re used when the simpler access control models
    aren’t considered robust enough to protect the information to which you’re controlling
    access. Military and government organizations, which handle data of a sensitive
    nature, often use multilevel access control models to control access to a variety
    of data, from nuclear secrets to protected health information. You’ll learn about
    a few of these models now.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: The Bell–LaPadula Model
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *Bell–LaPadula* model implements a combination of discretionary and mandatory
    access controls (DAC and MAC) and is primarily concerned with the confidentiality
    of the resource in question—in other words, making sure unauthorized people can’t
    read it. Generally, in cases where you see these two models implemented together,
    MAC takes precedence over DAC, and DAC works within the accesses allowed by the
    MAC permissions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have a resource that is classified as secret and a user
    who has a secret level of clearance; under a mandatory access model, the user
    would have access to the resource. However, you might also have an additional
    layer of DAC under the MAC access so that if the resource owner has not given
    the user access, they would not be able to access it, despite the MAC permissions.
    In Bell–LaPadula, two security properties define how information can flow to and
    from the resource.[³](notes.xhtml#ch03fn3)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**The Simple Security Property** The level of access granted to an individual
    must be at least as high as the classification of the resource in order for the
    individual to access it. In other words, an individual cannot read a resource
    classified at a higher level, but they can read resources at a lower level.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '**The * Property (or Star Property)** Anyone accessing a resource can only
    write (or copy) its contents to another resource classified at the same level
    or higher.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: You can summarize these properties as “no read up” and “no write down,” respectively,
    as shown in [Figure 3-6](#ch3fig6).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig06.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: The Bell–LaPadula model*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: In short, this means that when you’re handling classified information, you can’t
    read any higher than your clearance level, and you can’t write classified data
    down to any lower level.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: The Biba Model
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *Biba* model of access control is primarily concerned with protecting the
    integrity of data, even at the expense of confidentiality. That means it’s more
    important to keep people from altering the data than from viewing it. Biba has
    two security rules that are the exact opposite of those discussed in the Bell–LaPadula
    model.[⁴](notes.xhtml#ch03fn4)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**The Simple Integrity Axiom** The level of access granted to an individual
    must be no lower than the classification of the resource. In other words, access
    to one level does not grant access to lower levels.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '**The * Integrity Axiom (or Star Integrity Axiom)** Anyone accessing a resource
    can only write its contents to a resource classified at the same level or lower.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: We can summarize these rules as “no read down” and “no write up,” respectively,
    as shown in [Figure 3-7](#ch3fig7). This means that assets that are of high integrity
    (meaning they shouldn’t be altered) and assets that are of low integrity are kept
    strictly apart.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-7: The Biba model*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: This may seem completely counterintuitive when it comes to protecting information.
    However, these principles protect integrity by ensuring that your resource can
    be written to only by those with a high level of access and that those with a
    high level of access do not access a resource with a lower classification. Consider
    an organization that performs both a low-integrity process that collects (potentially
    malicious) PDF uploads from users and a high-integrity process that scans document
    inputs from highly classified systems. In the Biba model, the upload process wouldn’t
    be able to send data to the scanning process, so it wouldn’t be able to corrupt
    the classified input; on top of this, the scanning process would be unable to
    access the low-level data, even if it was directed to.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The Brewer and Nash Model
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *Brewer and Nash* model, also known as the *Chinese Wall* model, is an access
    control model designed to prevent conflicts of interest. Brewer and Nash is commonly
    used in industries that handle sensitive data, such as the financial, medical,
    or legal industries. This model considers three main resource classes.[⁵](notes.xhtml#ch03fn5)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '*Objects*: Resources, such as files or information, pertaining to a single
    organization'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Company groups*: All objects pertaining to an organization'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conflict classes*: All groups of objects concerning competing parties'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A commercial law firm that represents companies in a certain industry might
    have files that pertain to various competing individuals and companies. Since
    an individual lawyer at the firm accesses files for different clients, the lawyer
    could potentially access confidential data that would generate a conflict of interest.
    In the Brewer and Nash model, the level of access to resources and case materials
    that the lawyer is allowed would dynamically change based on the materials previously
    accessed ([Figure 3-8](#ch3fig8)).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-8: Brewer and Nash model*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: In this example, after the lawyer views Client A’s case materials, the lawyer
    would no longer be able to access information pertaining to Client B or any other
    parties competing with the current client, resolving any conflicts of interest.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Physical Access Controls
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far you’ve seen logical examples to illustrate the access control concepts
    discussed in this chapter, but many of these methods apply to physical security,
    as well. Let’s go over some examples of those now.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Physical access controls are often concerned with controlling the movement of
    individuals and vehicles. Access controls for individuals typically regulate their
    movement in and out of buildings or facilities, often using badges that open a
    facility’s doors (something you have, from [Chapter 2](ch02.xhtml)). Door control
    systems that make use of badges frequently use ACLs in the software that runs
    them to permit or deny access for certain doors and times of day.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: One of the more common security issues with regulating people’s access into
    buildings is *tailgating*, which occurs when you authenticate your physical access
    control measure, such as a badge, and another person follows directly behind you
    without also being authenticated. Tailgating can cause a variety of issues, including
    creating an inaccurate representation of who is in the building in the case of
    emergencies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We can attempt to solve tailgating in a variety of ways, including implementing
    a policy that forbids it, posting a guard in the area, or simply (but expensively)
    installing a physical access control solution that allows only one person to pass
    through at a time, such as a turnstile. All of these are reasonable solutions,
    but, depending on the environment in question, they may or may not be effective.
    You’ll often find that a combination of several solutions works better than any
    single one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: A much more complex example of a physical access control is the security system
    in use at many airports. After the terrorist attacks of September 11, 2001, in
    the United States, the level of security at airports increased. Once you’ve entered
    the airport security system, you are required to present a boarding pass and identification
    (something you have, times two). You typically pass through several steps to ensure
    that you’re not carrying any dangerous devices—a form of attribute-based access
    control. You then proceed to your gate and, once again, present your boarding
    pass before stepping on the airplane. Such processes may differ slightly depending
    on the country, but they’re generally the same from an access control perspective.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Physical access control for vehicles often revolves around keeping said vehicles
    from moving through unauthorized areas, typically using various simple barriers,
    including Jersey barriers ([Figure 3-9](#ch3fig9)), bollards, one-way spike strips,
    and fences. You may also see more complex installations that include staffed or
    unstaffed rising barriers, automated gates or doors, and other similar controls.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig09.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-9: A Jersey barrier*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, a huge number of other physical access controls and methods.
    Additionally, when referring to physical access control devices, or access controls
    in general, the line between an authentication device and an access control device
    often becomes rather blurry, or overlaps entirely. For example, a key for a physical
    lock could be considered identification, authentication, and authorization, all
    the while being a component of a physical access control. Often these terms are
    used inaccurately or inappropriately, even within the security field, which does
    not help matters.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Authorization is a key step in the process of allowing parties to access resources—in
    other words, the identification, authentication, and authorization process. You
    implement authorization by using access controls. Typically, you use one of two
    access control methods: access control lists or capabilities. Although capabilities
    can provide safeguards against confused deputy attacks, they’re not implemented
    as often as they should be.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: When putting together an access control system, you use an access control model
    that outlines who should be given access to what resources. In our daily lives,
    we often encounter simpler access control models, such as discretionary access
    control, mandatory access control, role-based access control, and attribute-based
    access control. Environments that handle more sensitive data, such as those involved
    in the government, military, medical, or legal industry, typically use multilevel
    access control models, including Bell–LaPadula, Biba, and Brewer and Nash.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will discuss auditing and accountability, which is how you
    keep track of the activities that have taken place after you’ve gone through the
    process of identification, authentication, and authorization.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Discuss the difference between authorization and access control.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the Brewer and Nash model protect against?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does access control based on the Media Access Control address of the systems
    on our network not represent strong security?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which should take place first, authorization or authentication?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the differences between the MAC and DAC models of access control?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Bell–LaPadula and Biba multilevel access control models both have a primary
    security focus. Can these two models be used together?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have a file containing sensitive data on a Linux operating system, would
    setting the permissions to `rw-rw-rw-` cause a potential security issue? If so,
    which portions of the CIA triad might be affected?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which access control model could you use to prevent users from logging into
    their accounts after business hours?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how the confused deputy problem could allow users to carry out activities
    for which they are not authorized.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the differences between access control lists and capabilities?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
