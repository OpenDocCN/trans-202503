- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Strings in WebAssembly
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly中的字符串
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: This chapter discusses how to handle strings in WAT because WebAssembly doesn’t
    have a built-in string data type as high-level languages do. To represent string
    data in WebAssembly, you must set linear memory to ASCII or Unicode character
    values. You need to know where you’re setting your data in linear memory and how
    many bytes the string will use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论如何在WAT中处理字符串，因为WebAssembly不像高级语言那样具有内建的字符串数据类型。要在WebAssembly中表示字符串数据，您必须将线性内存设置为ASCII或Unicode字符值。您需要知道将数据存储在何处以及字符串将使用多少字节。
- en: 'In this chapter, we’ll look at the ASCII and Unicode character formats before
    we explore the relationship between string objects and how to store them in linear
    memory. You’ll learn how JavaScript can retrieve the strings from linear memory
    and output them to the command line. Once you know how to pass string data from
    WebAssembly to JavaScript, we’ll cover two popular methods for string management:
    null-terminated strings and length-prefixed strings, discussing the pros and cons
    of each technique. You’ll learn how to copy a string from one location in linear
    memory to another using a byte-by-byte copy and a 64-bit copy. Then you’ll convert
    integer data into number strings in decimal, hexadecimal, and binary formats.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将先介绍ASCII和Unicode字符格式，然后探讨字符串对象之间的关系，以及如何在线性内存中存储它们。您将学习如何让JavaScript从线性内存中获取字符串并将其输出到命令行。一旦您知道如何将字符串数据从WebAssembly传递到JavaScript，我们将介绍两种流行的字符串管理方法：空终止字符串和长度前缀字符串，讨论每种技术的优缺点。您将学习如何通过逐字节复制和64位复制将字符串从线性内存中的一个位置复制到另一个位置。然后，您将学习如何将整数数据转换为十进制、十六进制和二进制格式的数字字符串。
- en: ASCII and Unicode
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASCII和Unicode
- en: When working with strings in WebAssembly, you need to know which character set
    you’re using, because different sets look different in linear memory. *American
    Standard Code for Information Interchange (ASCII)* is a 7-bit character encoding
    system that supports up to 128 characters with an 8th bit that might be used for
    error checking or is simply set to 0\. The ASCII character set works well if your
    code is only supporting the English language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在WebAssembly中处理字符串时，您需要知道您使用的是哪种字符集，因为不同的字符集在线性内存中的表现不同。*美国信息交换标准代码（ASCII）*
    是一种7位字符编码系统，支持最多128个字符，其中第8位可能用于错误检查，或者简单地设置为0。ASCII字符集在仅支持英语的代码中效果良好。
- en: '*Unicode Transformation Format (UTF)* comes in 7-bit, 8-bit, 16-bit, and 32-bit
    flavors, which are called UTF-7, UTF-8, UTF-16, and UTF-32\. UTF-7 and ASCII are
    identical. UTF-8 incorporates UTF-7 and allows for some additional Latin, Middle
    Eastern, and Asian characters by creating a flexible length format that allows
    for additional bytes when the starting byte of the format falls outside of the
    ASCII character set. UTF-16 is also a flexible length character set where most
    characters take up two bytes. Because some codes expand the number of bytes a
    character uses to four, UTF-16 supports more than 1.1 million characters. UTF-32
    is a fixed 32-bit character set that supports more than 4 billion characters.
    In this book, we’ll work exclusively with the ASCII/UTF-7 character set because
    it’s simple to read and understand.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Unicode转换格式（UTF）* 有7位、8位、16位和32位几种类型，分别称为UTF-7、UTF-8、UTF-16和UTF-32。UTF-7和ASCII是相同的。UTF-8包含了UTF-7，并通过创建灵活的长度格式来支持一些额外的拉丁字母、中东和亚洲字符，当格式的起始字节超出ASCII字符集时，可以通过增加字节来适应。UTF-16也是一种灵活长度的字符集，其中大多数字符占用两个字节。由于某些编码会将字符所占字节数扩展到四个字节，UTF-16支持超过110万个字符。UTF-32是一个固定的32位字符集，支持超过40亿个字符。在本书中，我们将专门使用ASCII/UTF-7字符集，因为它简单易读且易于理解。'
- en: Strings in Linear Memory
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性内存中的字符串
- en: 'The only way to pass a string from WebAssembly to JavaScript is to create an
    array of character data inside a memory `buffer` object like we did in Chapter
    2 with the hello world app. You can then pass a 32-bit integer into JavaScript
    that represents the location of that character data in the memory buffer. The
    only problem with this scheme is that it doesn’t tell JavaScript where the data
    ends. The C language manages this by using a null-terminating byte: a byte with
    a value of 0 (not a character 0) tells the program that the string ends in the
    previous byte. We’ll look at three ways to pass strings between WAT and JavaScript,
    including null-termination, and then look at how to copy strings.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串从WebAssembly传递到JavaScript的唯一方法是像我们在第2章的hello world应用中那样，在内存`buffer`对象中创建一个字符数据数组。然后，你可以将一个32位整数传递给JavaScript，该整数表示该字符数据在内存缓冲区中的位置。这个方案的唯一问题是它没有告诉JavaScript数据的结束位置。C语言通过使用空终止字节来管理这一点：值为0的字节（不是字符0）告诉程序字符串在前一个字节处结束。我们将探讨三种在WAT和JavaScript之间传递字符串的方法，包括空终止，并进一步讨论如何复制字符串。
- en: Passing the String Length to JavaScript
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将字符串长度传递给JavaScript
- en: The most obvious way to work with strings is to pass a string position and a
    string length to JavaScript so JavaScript can extract the string from linear memory
    and can know when it ends. Create a new WAT file named *strings.wat* and add the
    code in [Listing 5-1](#listing5-1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与字符串交互的最明显方式是将字符串位置和字符串长度传递给JavaScript，这样JavaScript就可以从线性内存中提取字符串，并且能够知道它的结束位置。创建一个名为*strings.wat*的新WAT文件，并添加[列表5-1](#listing5-1)中的代码。
- en: '**strings.wat(part 1 of 11)**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第1部分，共11部分）**'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: Passing strings from WebAssembly to JavaScript'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-1：将字符串从WebAssembly传递到JavaScript
- en: This module imports a JavaScript function we’ll create called `"str_pos_len"`
    1, which finds a string in the memory buffer using a combination of the string’s
    position and its location in linear memory. We also need to import a memory buffer
    we’ll declare in JavaScript 2.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块导入了我们将创建的一个JavaScript函数`"str_pos_len"` 1，该函数通过结合字符串的位置和它在线性内存中的位置，来在内存缓冲区中查找字符串。我们还需要导入我们将在JavaScript中声明的内存缓冲区
    2。
- en: 'Next, we define two strings in memory: `"Know the length of this string"` 3
    and `"Also know the length of this string"` 4. The two strings specify that we
    need to know the length of those strings because they’re just character arrays
    in linear memory and we need to indicate where they begin and end. The first string
    has 30 characters and the second has 35\. Later, in the `"main"` 5 function, we
    call `$str_pos_len` twice. The first time 6, we pass in the position of the first
    string in memory `(i32.const` `256)` followed by the length of that string `(i32.const
    30)`. This tells the JavaScript we’ll write in a moment to extract 30 bytes starting
    at memory position 256 into a string and display it to the console. The second
    time we call `$str_pos_len` 7, we pass in the position of the second string in
    memory `(i32.const 384)` followed by the length of that string `(i32.const` `35)`.
    The JavaScript then displays the second string to the console. Compile the WebAssembly
    module using the command in [Listing 5-2](#listing5-2).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在内存中定义了两个字符串：`"Know the length of this string"` 3和`"Also know the length
    of this string"` 4。这两个字符串表明我们需要知道这些字符串的长度，因为它们仅仅是线性内存中的字符数组，我们需要标明它们的起始和结束位置。第一个字符串有30个字符，第二个字符串有35个字符。稍后，在`"main"`
    5函数中，我们调用`$str_pos_len`两次。第一次 6，我们传入第一个字符串在内存中的位置`(i32.const` `256)`，接着是该字符串的长度`(i32.const
    30)`。这告诉我们稍后写的JavaScript从内存位置256开始提取30个字节并将其显示到控制台。第二次调用`$str_pos_len` 7时，我们传入第二个字符串在内存中的位置`(i32.const
    384)`，接着是该字符串的长度`(i32.const` `35)`。然后，JavaScript将第二个字符串显示到控制台。使用[列表5-2](#listing5-2)中的命令编译WebAssembly模块。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 5-2: Compiling *strings.wat*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-2：编译*strings.wat*
- en: Once you’ve compiled your WebAssembly module, create a JavaScript file named
    *strings.js* and enter the code in [Listing 5-3](#listing5-3).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编译WebAssembly模块后，创建一个名为*strings.js*的JavaScript文件，并输入[列表5-3](#listing5-3)中的代码。
- en: '**strings.js(part 1 of 3)**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.js（第1部分，共3部分）**'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 5-3: JavaScript that calls the WebAssembly string function'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-3：调用WebAssembly字符串函数的JavaScript代码
- en: Inside the `importObject` we define `str_pos_len` 1, which takes the position
    of the string in memory and its length. It uses the position of the length to
    retrieve an array of bytes 2 of the length provided. We use a `TextDecoder` to
    convert that byte array into a string 3. Then we call `console.log` 4 to display
    the string. When you run the JavaScript, you should see the message in [Listing
    5-4](#listing5-4).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`importObject`内部，我们定义了`str_pos_len` 1，它获取字符串在内存中的位置及其长度。它使用长度的位置来检索一个字节数组 2，该数组的长度是指定的。我们使用`TextDecoder`将字节数组转换为字符串
    3。然后我们调用`console.log` 4来显示字符串。当你运行JavaScript时，你应该能在[清单5-4](#listing5-4)中看到这个信息。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 5-4: String length output'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 清单5-4：字符串长度输出
- en: Next, we’ll discuss null-terminated strings, which is a method for tracking
    string length that languages such as C/C++ use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论空字符终止字符串，这是一种用于跟踪字符串长度的方法，C/C++等语言使用它。
- en: Null-Terminated Strings
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空字符终止字符串
- en: The second method of passing strings is *null-terminated*(or *zero-terminated*)
    strings. Null-termination is a method for defining string length used by the C
    programming language. In a null-terminated string, you place a value of 0 as the
    last character in the array. The benefit of null-terminated strings is that you
    don’t have to know the string’s length as you’re using it. The downside is that
    this requires more computation when processing strings because your program needs
    to take the time to locate the terminating null byte. Let’s open the *strings.wat*
    file and add the code in [Listing 5-5](#listing5-5) for our null-terminated strings.
    First, we need to add an import of a `null_str` function that we’ll define later
    in the JavaScript.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传递字符串的第二种方法是*空字符终止*（或*零终止*）字符串。空字符终止是一种由C编程语言使用的定义字符串长度的方法。在空字符终止的字符串中，你将值为0的字符作为数组中的最后一个字符。空字符终止字符串的优点是，你在使用它时不需要知道字符串的长度。缺点是，这需要在处理字符串时进行更多计算，因为你的程序需要花时间查找终止的空字节。我们来打开*strings.wat*文件，并添加[清单5-5](#listing5-5)中的代码来处理我们的空字符终止字符串。首先，我们需要添加一个`null_str`函数的导入，这个函数我们稍后将在JavaScript中定义。
- en: '**strings.wat(part 2 of 11)**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第2部分，共11部分）**'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 5-5: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to import
    the `null_str` function'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 清单5-5：修改*strings.wat*（来自[清单5-1](#listing5-1)）以导入`null_str`函数
- en: Notice that unlike `str_pos_len` 1, the `null_str` 2 function only requires
    one `i32` parameter, because the code working with it only needs to know where
    the string begins in linear memory. It’s up to the code to figure out where that
    null byte is located to manipulate it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`str_pos_len` 1不同，`null_str` 2函数只需要一个`i32`参数，因为与它一起工作的代码只需要知道字符串在线性内存中的起始位置。至于代码如何找到空字符的位置并操作它，则由代码自行决定。
- en: Next, between the `import` statement that defines the buffer and the `(data``)`
    expression that defines the earlier strings, in [Listing 5-6](#listing5-6) we
    add two more data expressions that define null-terminated strings.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在定义缓冲区的`import`语句与定义早期字符串的`(data)`表达式之间，在[清单5-6](#listing5-6)中，我们添加了另外两个数据表达式，定义了空字符终止的字符串。
- en: '**strings.wat(part 3 of 11)**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第3部分，共11部分）**'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 5-6: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to add
    null-terminated string data'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 清单5-6：修改*strings.wat*（来自[清单5-1](#listing5-1)），以添加空字符终止的字符串数据
- en: The first data defines the string `"null terminating string\00"`1. Notice the
    last three characters `\00`. The `\` character is the escape character in WAT.
    If you follow an escape character with two hexadecimal digits, it defines a numeric
    byte with the value you specify. That means that `\00` represents a single byte
    with a value of `0`. The second data expression creates the string `"another null
    terminating string\00"` 2, which is also null-terminated and ending with `\00`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个数据定义了字符串`"null terminating string\00"`1。请注意最后三个字符`\00`。`\`字符是WAT中的转义字符。如果你在转义字符后面跟上两个十六进制数字，它将定义一个你指定值的数字字节。这意味着`\00`表示一个值为`0`的字节。第二个数据表达式创建了字符串`"another
    null terminating string\00"` 2，它也是空字符终止的，并以`\00`结尾。
- en: In [Listing 5-7](#listing5-7), we add two lines in the beginning of the `main`
    function to call the imported `$null_str` JavaScript function, passing it the
    location in linear memory of the null-terminated strings.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单5-7](#listing5-7)中，我们在`main`函数的开头添加了两行代码，调用导入的`$null_str` JavaScript函数，并将空字符终止字符串在线性内存中的位置传递给它。
- en: '**strings.wat (part 4 of 11)**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第4部分，共11部分）**'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 5-7: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to call
    the `null_str` function'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 清单5-7：修改*strings.wat*（来自[清单5-1](#listing5-1)）以调用`null_str`函数
- en: We pass in a value of `0` 1, which is the location in memory where we defined
    the string `"null terminating string\00"`. Then we pass in the value `128` 2,
    where we defined the string `"another null terminating string\00"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传入值`0` 1，它是我们定义字符串`"null terminating string\00"`的内存位置。然后，我们传入值`128` 2，这是我们定义字符串`"another
    null terminating string\00"`的内存位置。
- en: Once you’ve made those changes in your WAT file, open *strings.js* to add some
    more code. First, add a new function to the `env` object nested in `importObject`,
    as shown in [Listing 5-8](#listing5-8).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在WAT文件中做出这些更改，打开*strings.js*以添加更多代码。首先，向`importObject`中嵌套的`env`对象中添加一个新函数，如[列表
    5-8](#listing5-8)所示。
- en: '**strings.js (part 2 of 3)**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.js（第 2 部分，共 3 部分）**'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 5-8: The `null_str` function added to `importObject` in *strings.js*
    from [Listing 5-3](#listing5-3)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-8：从[列表 5-3](#listing5-3)开始，添加到`importObject`中的`null_str`函数，在*strings.js*中
- en: The code starts by defining the maximum possible length of the string in the
    variable `max_mem` 1. To find the string that’s null terminated, we decode a chunk
    of linear memory with the maximum string length into one long string, and then
    use JavaScript’s split function to get the null-terminated string. Inside the
    `env` object, we add another function called `null_str` 2 that takes a single
    `str_pos` parameter. JavaScript then needs to extract an array of bytes from the
    memory buffer starting at the position specified by the `str_pos` parameter passed
    into the function. We cannot search through the memory buffer until we convert
    it into a string. But before converting it to a string, we need to convert it
    into an array of bytes 3. Then we create a `TextDecoder` object to decode those
    bytes into one long string 4.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先通过定义变量`max_mem` 1来设置字符串的最大可能长度。为了找到以空字符终止的字符串，我们将一块线性内存（最大字符串长度）解码为一个长字符串，然后使用JavaScript的split函数来获取空字符终止的字符串。在`env`对象中，我们添加了一个名为`null_str`
    2的函数，它接受一个`str_pos`参数。然后，JavaScript需要从内存缓冲区中提取字节数组，起始位置由传入函数的`str_pos`参数指定。在将内存缓冲区转化为字符串之前，我们不能直接在其上进行搜索。转换为字符串之前，首先需要将其转换为字节数组
    3。然后，我们创建一个`TextDecoder`对象，将这些字节解码为一个长字符串 4。
- en: We split the string into an array using the null byte `"\0"` 5. Splitting on
    the null byte creates an array of strings that terminate in the null byte. Only
    the first item in the array is an actual string we defined. We’re using the split
    as a quick and dirty way to take the string out of linear memory. We then set
    `log_string` to the first string in the array. We call the JavaScript `console.log`
    function 6, passing it `log_string` to display that string to the console. Because
    we’re calling it with two different strings from WebAssembly, we should now have
    the four messages in [Listing 5-9](#listing5-9) logged to the console.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用空字节`"\0"` 5将字符串拆分为一个数组。以空字节拆分会创建一个以空字节终止的字符串数组。数组中的第一个元素才是我们定义的实际字符串。我们使用split作为一种简单的快速方法，将字符串从线性内存中提取出来。然后我们将`log_string`设置为数组中的第一个字符串。我们调用JavaScript的`console.log`函数
    6，并将`log_string`传递给它，以便将该字符串显示到控制台。因为我们使用了来自WebAssembly的两个不同的字符串，所以我们应该能在控制台上看到[列表
    5-9](#listing5-9)中的四条消息。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 5-9: Output from null-terminating strings'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-9：空字符终止字符串的输出
- en: Length-Prefixed Strings
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长度前缀字符串
- en: A third way to store a string in memory is to include the length of the string
    at the beginning of the string data. A string created with this method is called
    a *length-prefixed string* and can improve processing performance. The way we’re
    prefixing limits the strings to a maximum length of 255 because a single byte
    of data can only hold a number between 0 and 255.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 存储字符串的第三种方法是将字符串的长度放在字符串数据的开头。用这种方法创建的字符串称为*长度前缀字符串*，它可以提高处理性能。我们当前的前缀方式将字符串限制为最大长度255，因为一个字节的数据只能容纳0到255之间的数字。
- en: Let’s start by modifying the current *strings.wat* file, as shown in [Listing
    5-10](#listing5-10), to add a new import line for the `len_prefix` function we’ll
    define later in the JavaScript.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从修改当前的*strings.wat*文件开始，如[列表 5-10](#listing5-10)所示，添加一行新的导入语句，用于导入稍后在JavaScript中定义的`len_prefix`函数。
- en: '**strings.wat (part 5 of 11)**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第 5 部分，共 11 部分）**'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 5-10: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to add
    the `len_prefix` function import'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-10：修改*strings.wat*，从[列表 5-1](#listing5-1)开始，添加`len_prefix`函数导入
- en: The `len_prefix` 1 function will take the first byte of the string to find the
    length.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`len_prefix` 1函数将读取字符串的第一个字节来找出长度。'
- en: Next, we add two new strings that begin with a hexadecimal number indicating
    their length. Add the code in [Listing 5-11](#listing5-11) to *strings.wat*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加两个新的字符串，它们以十六进制数表示其长度。将[列表 5-11](#listing5-11)中的代码添加到 *strings.wat*。
- en: '**strings.wat (part 6 of 11)**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第 6 部分，共 11 部分）**'
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 5-11: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to add
    length-prefixed string data'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-11：修改 *strings.wat*，参照[列表 5-1](#listing5-1)，以添加长度前缀的字符串数据
- en: The first string, `"\16length-prefixed string"`, has 22 characters, so we prefix
    it with `\16` because 22 in decimal is 16 in hexadecimal 1. The second string,
    `"\1eanother length-prefixed string"`, is 30 characters long, so we prefix it
    with a hexadecimal `\1e` 2.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符串，`"\16length-prefixed string"`，包含 22 个字符，因此我们用 `\16` 作为前缀，因为 22 的十进制数在十六进制中是
    16。第二个字符串，`"\1eanother length-prefixed string"`，包含 30 个字符，因此我们用十六进制的 `\1e` 作为前缀。
- en: Next, we need to add two calls to the imported `$len_prefix` function with the
    two memory locations where we just created the strings. The `"main"` function
    should now look like the code in [Listing 5-12](#listing5-12).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为刚刚创建的两个字符串所在的内存位置添加两次调用 `len_prefix` 函数。`"main"` 函数现在应该像[列表 5-12](#listing5-12)中的代码那样。
- en: '**strings.wat (part 7 of 11)**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第 7 部分，共 11 部分）**'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 5-12: Modifying *strings.wat* from [Listing 5-1](#listing5-1) to add
    calls to the `$len_prefix` function'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-12：修改 *strings.wat*，参照[列表 5-1](#listing5-1)，以添加对 `$len_prefix` 函数的调用
- en: The first call to `$len_prefix` 1 passes it the location of the data string
    `"\16length-prefixed string"` at memory location `512`. The second call 2 passes
    the location of the second length-prefixed string `"\1eanother length-prefixed
    string"` at memory location `640`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用 `$len_prefix` 1 时，将数据字符串 `"\16length-prefixed string"` 的内存位置 `512` 传入。第二次调用
    2 时，将第二个长度前缀字符串 `"\1eanother length-prefixed string"` 的内存位置 `640` 传入。
- en: Before we can run this, we need to add a new function to our JavaScript `importObject`.
    Open *strings.js* and add the `len_prefix` function to the `importObject`, as
    shown in [Listing 5-13](#listing5-13).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行之前，我们需要为我们的 JavaScript `importObject` 添加一个新函数。打开 *strings.js*，并将 `len_prefix`
    函数添加到 `importObject`，如[列表 5-13](#listing5-13)所示。
- en: '**strings.js (part 3 of 3)**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.js（第 3 部分，共 3 部分）**'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 5-13: Add the `len_prefix` function to `importObject` in *strings.js*
    from [Listing 5-3](#listing5-3)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-13：将 `len_prefix` 函数添加到 *strings.js* 中的 `importObject`，参照[列表 5-3](#listing5-3)
- en: The new `len_prefix` 1 function takes in a string position and then takes the
    first byte from the position as a number in the constant `str_len` 2. It uses
    the value in `str_len` to copy the proper number of `bytes` 3 from linear memory
    so it can decode them into the `log_string` 4 it will log to the console.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `len_prefix` 1 函数接受一个字符串位置，然后从该位置取出第一个字节，作为常量 `str_len` 2 中的数字。它使用 `str_len`
    中的值，从线性内存中复制适当数量的 `bytes` 3，以便将其解码为 `log_string` 4，然后记录到控制台中。
- en: Now that we have our WAT and JavaScript, we can compile the WAT module using
    `wat2wasm`, as shown in [Listing 5-14](#listing5-14).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 WAT 和 JavaScript，可以使用 `wat2wasm` 编译 WAT 模块，如[列表 5-14](#listing5-14)所示。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 5-14: Compile *strings.wat*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-14：编译 *strings.wat*
- en: Then we can run our JavaScript file using `node`, as shown in [Listing 5-15](#listing5-15).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用 `node` 运行我们的 JavaScript 文件，如[列表 5-15](#listing5-15)所示。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 5-15: Run *strings.js* using `node`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-15：使用 `node` 运行 *strings.js*
- en: You should see the output in [Listing 5-16](#listing5-16).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到[列表 5-16](#listing5-16)中的输出。
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 5-16: Output from *strings.js*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-16：*strings.js* 的输出
- en: In the next section, you’ll learn how to copy strings using WAT.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何使用 WAT 复制字符串。
- en: Copying Strings
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制字符串
- en: The simplest way to copy a string from one location in linear memory to another
    is to loop over every byte of data, load it, and then store it in the new location.
    However, this method is slow. A more efficient method is to copy the strings eight
    bytes at a time using 64-bit integer loads and stores. Unfortunately, not all
    strings are multiples of eight bytes. To cover all cases as efficiently as possible,
    we’ll need a combination of a byte-by-byte copy and a faster 64-bit copy.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 复制字符串从线性内存中的一个位置到另一个位置的最简单方法是逐字节循环，加载每个字节的数据，然后将其存储到新位置。然而，这种方法比较慢。一种更高效的方法是使用
    64 位整数加载和存储，每次复制八个字节。不幸的是，并非所有字符串的长度都是八个字节的倍数。为了尽可能高效地处理所有情况，我们需要结合逐字节复制和更快速的
    64 位复制方法。
- en: Byte-by-Byte Copy
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字节逐一复制
- en: 'We’ll first write a function that does a slower byte-by-byte copy: it takes
    as parameters a source memory location, a destination memory location, and the
    length of the string we want to copy.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写一个做较慢逐字节复制的函数：它接收源内存位置、目标内存位置以及要复制的字符串长度作为参数。
- en: Let’s continue to add code to our *strings.wat* file. In [Listing 5-17](#listing5-17),
    we add the function `$byte_copy` to the *strings.wat* file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续向*strings.wat*文件中添加代码。在[列表 5-17](#listing5-17)中，我们将函数`$byte_copy`添加到*strings.wat*文件中。
- en: '**strings.wat (part 8 of 11)**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第 8 部分，共 11 部分）**'
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 5-17: A slow byte-by-byte method of copying strings added to *strings.wat*
    ([Listing 5-1](#listing5-1))'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-17：将逐字节复制字符串的慢速方法添加到*strings.wat*中（见[列表 5-1](#listing5-1)）
- en: This `$byte_copy` function copies the block of memory from `$source` 1 to `$source`
    + `$len` 2 into the memory location `$dest` 3 to `$dest` + `len` one byte at a
    time. This loop loads a byte from `$source` using the `(i32.load8_u``)` expression
    4. It then stores that byte in the `$dest` location using the `i32.store8` command
    5. Then we increment the destination location 6 in the `$dest` variable 7 and
    we increment the `$source` 8 variable to make those variables point to the next
    bytes in memory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`$byte_copy`函数将从`$source` 1 到 `$source` + `$len` 2 的内存块复制到内存位置`$dest` 3 到
    `$dest` + `len`，每次复制一个字节。这个循环使用表达式`(i32.load8_u``)`从`$source`加载一个字节 4。然后，它使用命令`i32.store8`将该字节存储到`$dest`位置
    5。接着，我们在`$dest`变量 7 中递增目标位置 6，并且将`$source` 8 变量递增，使这两个变量指向内存中的下一个字节。
- en: 64-Bit Copy
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 64 位复制
- en: Copying a string byte-by-byte is slower than it needs to be, whereas a 64-bit
    integer is eight bytes long, and copying eight bytes at a time is significantly
    faster than copying a single byte at a time. We’ll write another function similar
    to `$byte_copy` that copies the data significantly faster by doing it eight bytes
    at a time. Unfortunately, not all strings have lengths that are multiples of eight.
    If a string has a length of 43 characters, we can copy the first 40 bytes using
    five separate eight-byte copies, but for the last three bytes, we’ll need to go
    back to the byte-by-byte copy method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 逐字节复制字符串比实际需要的慢，而 64 位整数有 8 字节长，一次复制 8 字节比逐字节复制要显著更快。我们将编写另一个函数，类似于`$byte_copy`，通过一次复制
    8 字节来显著加快数据复制速度。不幸的是，并不是所有的字符串长度都是 8 的倍数。如果字符串的长度为 43 个字符，我们可以通过五次 8 字节的复制来复制前
    40 个字节，但对于最后的 3 个字节，我们仍需要回到逐字节复制的方法。
- en: It’s important to note that these byte copies don’t prevent out of bounds memory
    access. The code will attempt to copy data to or from somewhere it shouldn’t.
    However, if you try to access data outside the bounds of linear memory, the WebAssembly
    security model will cause the read or write to fail, halting the code’s execution.
    As stated earlier, these functions weren’t intended to be general purpose, but
    instead are for demonstrating the different ways you can copy strings.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这些字节复制不会阻止越界内存访问。代码将尝试从不该读取或写入的地方复制数据。然而，如果你尝试访问线性内存之外的数据，WebAssembly
    的安全模型会导致读取或写入失败，从而停止代码执行。如前所述，这些函数并非用于通用目的，而是用来演示不同的字符串复制方式。
- en: Add the 64-bit copy function `$byte_copy_i64` in [Listing 5-18](#listing5-18)
    to your *strings.wat* file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将 64 位复制函数`$byte_copy_i64`添加到*strings.wat*文件中（见[列表 5-18](#listing5-18)）。
- en: '**strings.wat (part 9 of 11)**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat（第 9 部分，共 11 部分）**'
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 5-18: A faster method of copying strings added to *strings.wat* ([Listing
    5-2](#listing5-2))'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-18：将更快的复制字符串方法添加到*strings.wat*中（见[列表 5-2](#listing5-2)）
- en: The load and store functions are `(i64.load``)` and `(i64.store``)`1, which
    load and store 64 bits (8 bytes) at a time. This method runs four to five times
    faster than loading and storing a single byte at a time (on x64 architecture).
    The other significant difference is that `$dest` 2 and `$source` 3 are incremented
    by `8` instead of `1`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和存储函数分别是`(i64.load``)`和`(i64.store``)`1，它们每次加载和存储 64 位（8 字节）数据。这种方法比逐字节加载和存储单个字节快四到五倍（在
    x64 架构上）。另一个显著的区别是，`$dest` 2 和 `$source` 3 每次增加`8`，而不是`1`。
- en: Combination Copy Function
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 组合复制函数
- en: As mentioned earlier, not all strings are multiples of eight. Therefore, we’ll
    define a new, improved function in [Listing 5-19](#listing5-19) that copies eight
    bytes at a time using the `$byte_copy_i64` function and then copies the remaining
    bytes using `$byte_copy`, which copies a single byte at a time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，并非所有字符串的长度都是 8 的倍数。因此，我们将在[列表 5-19](#listing5-19)中定义一个新的改进函数，该函数使用`$byte_copy_i64`函数一次复制
    8 字节，然后使用`$byte_copy`函数复制剩余的字节，后者一次复制一个字节。
- en: '**strings.wat (part 10 of 11)**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat (第 10 部分，共 11 部分)**'
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 5-19: Copy eight bytes at a time when possible and a single byte at
    a time when not.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-19：在可能的情况下每次复制八个字节，否则每次复制一个字节。
- en: As stated earlier, the `$string_copy` function must combine the eight-byte and
    single-byte copy functions to copy the string as quickly as possible. The `$len`
    parameter is the entire length of the string in bytes. The local variable `$len_less_singles`
    1 is the number of bytes that can be copied with the 64-bit copy. We get this
    number by masking off the last three bits. The `$singles` variable is the remaining
    three bits that aren’t in the multiples of eight and is set by performing a bitwise
    `(i32.and``)` expression 2 (hurray for bit masking) between `$len` and `7` (binary
    111). The last three bits of the length indicate the number of remaining bytes
    if we used an eight-byte copy for the majority of the bytes. As an example, using
    an `i32.and` expression on the `$len` of `190` and `7` looks like [Figure 5-1](#figure5-1).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`$string_copy` 函数必须结合八字节和单字节复制函数，以尽可能快速地复制字符串。`$len` 参数是字符串的总长度（以字节为单位）。局部变量
    `$len_less_singles` 1 是可以用 64 位复制复制的字节数。我们通过屏蔽掉最后三位来获取这个数值。`$singles` 变量是剩余的三位，不在八的倍数范围内，通过执行按位
    `(i32.and)` 表达式 2（为位掩码欢呼）在 `$len` 和 `7`（二进制 111）之间设置。长度的最后三位表示如果我们大多数字节使用八字节复制，剩余字节的数量。举个例子，对
    `$len` 为 190 和 7 使用 `i32.and` 表达式，结果如图 [Figure 5-1](#figure5-1) 所示。
- en: '![f05001](Images/f05001.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](Images/f05001.png)'
- en: 'Figure 5-1: Using binary AND to mask out all but the last three bits'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：使用二进制与运算（AND）屏蔽掉除了最后三位之外的所有位
- en: As you can see, calling `i32.and` passing the values 190 and 7 results in the
    binary 110, which is 6 in decimal. The `i32.and` expression sets all but the last
    three bits of our `$len` parameter to 0.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，调用 `i32.and` 并传入 190 和 7 的值，结果为二进制 110，即十进制 6。`i32.and` 表达式将 `$len` 参数的最后三位之外的所有位都设置为
    0。
- en: 'If the number of `$singles` isn’t zero 3, the code first copies the individual
    bytes that cannot be copied using the 64-bit copy. The `if` block sets `$len_less_singles`
    4 to `$len` - `$singles`: that is the number of bytes that must be copied individually.
    The local variable `$start_source_byte` 5 is set to `$source+$len_less_singles`,
    setting it to the starting byte of the byte-by-byte copy 7.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$singles` 的值不为零 3，代码首先复制那些无法使用 64 位复制的单独字节。`if` 块将 `$len_less_singles` 4
    设置为 `$len` - `$singles`：即必须单独复制的字节数。局部变量 `$start_source_byte` 5 被设置为 `$source+$len_less_singles`，将其设置为逐字节复制的起始字节
    7。
- en: Then the variable `$start_dest_byte` 6 is set to `$dest+$len_less_singles`,
    which sets it to the destination location for the byte-by-byte copy. The branch
    then calls `$byte_copy` to copy those remaining single bytes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，变量 `$start_dest_byte` 6 被设置为 `$dest+$len_less_singles`，它设置为逐字节复制的目标位置。接下来，分支调用
    `$byte_copy` 来复制这些剩余的单字节。
- en: After the `if` block, the code must copy the bytes that it can with the 64-bit
    copy function `(call` `$byte_copy_i64)`a. We determine the number of bytes to
    copy with this function by using a bitwise `(i32.and``)` 9 expression of the length
    in `$len` with the 32-bit constant value `0xff_ff_ff_f8` 8. The value `0xff_ff_ff_f8`
    in binary is all 1s except the last three bits, which are set to 0\. Using the
    bitwise AND zeros out the last three bits of the length, which makes the length
    a multiple of eight.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `if` 块之后，代码必须使用 64 位复制函数 `(call` `$byte_copy_i64)`a 复制它可以复制的字节。我们通过使用按位 `(i32.and)`
    9 表达式，将 `$len` 中的长度与 32 位常量值 `0xff_ff_ff_f8` 8 进行运算，来确定要复制的字节数。值 `0xff_ff_ff_f8`
    的二进制表示是除最后三位外全为 1，最后三位为 0。使用按位与运算将长度的最后三位清零，从而使长度成为八的倍数。
- en: Now that we have a string copy function, let’s change the `main` function to
    test it. Change the `main` function so it contains only the code in [Listing 5-20](#listing5-20).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了字符串复制函数，接下来让我们修改 `main` 函数来测试它。将 `main` 函数修改为只包含 [列表 5-20](#listing5-20)
    中的代码。
- en: '**strings.wat (part 11 of 11)**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.wat (第 11 部分，共 11 部分)**'
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 5-20: New version of the `main` function for *strings.wat* ([Listing
    5-2](#listing5-2))'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-20：*strings.wat* 的 `main` 函数的新版本（[列表 5-2](#listing5-2)）
- en: We removed the code that printed the null-terminated strings and the length-prefixed
    strings to the console. We keep the two lines that print the string at linear
    memory location `256` 1, `"Know the length of this string"`, and the string at
    memory location `384` 2, `"Also know the length of this string"`. Leaving these
    lines in will print the original value for the strings to the console before the
    copy.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们删除了打印空终止字符串和长度前缀字符串到控制台的代码。我们保留了打印位于线性内存地址`256`的字符串1，`"Know the length of
    this string"`，以及位于内存地址`384`的字符串2，`"Also know the length of this string"`。保留这些行会在复制之前将原始字符串值打印到控制台。
- en: 'The call to `$string_copy` 3 copies 30 bytes from the first string to the second
    string. Then we print the second string location with the original string length.
    This will print `"Know the length of this stringtring"` 4 to the console, which
    looks wrong because it ends with the word `stringtring`. The reason the last word
    doesn’t end with `string` and has an additional five characters is that we needed
    to change the length to that of the string we copied from. If we’d been copying
    a null-terminated string or a length-prefixed string, this wouldn’t have been
    a problem, because the null-byte or prefix would keep track of the length for
    us: but in this case, we need to know that the new length is `30`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`$string_copy` 3将30个字节从第一个字符串复制到第二个字符串。然后我们打印第二个字符串的位置及其原始字符串长度。这样会将`"Know
    the length of this stringtring"` 4打印到控制台，看起来是错误的，因为它以`stringtring`这个词结尾。最后一个词没有以`string`结尾并且多出了五个字符的原因是我们需要将长度更改为我们复制的字符串的长度。如果我们复制的是空终止字符串或长度前缀字符串，这不会是问题，因为空字节或前缀会帮助我们追踪长度：但在这种情况下，我们需要知道新长度是`30`。
- en: When we call `$str_pos_len` passing in `384` as the index and `30` as the length
    5, it will properly print `"Know the length of this string"` to the console. We
    can recompile *strings.wat* using the command in [Listing 5-21](#listing5-21).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`$str_pos_len`，传入`384`作为索引和`30`作为长度 5时，它会正确地将`"Know the length of this
    string"`打印到控制台。我们可以使用[清单 5-21](#listing5-21)中的命令重新编译*strings.wat*。
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 5-21: Compiling *strings.wat*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-21：编译*strings.wat*
- en: Run *strings.js* from the command line to see the output in [Listing 5-22](#listing5-22).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行*strings.js*以查看[清单 5-22](#listing5-22)中的输出。
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Listing 5-22: Output from *strings.js* after adding a call to `$string_copy`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-22：在添加对`$string_copy`的调用后，*strings.js*的输出
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
