- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: The Cheater’s Dice Roller by John Baichtal
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·贝奇塔尔的《作弊者的掷骰器》
- en: In this project, you’ll build a digital dice roller with a twist.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个带有小惊喜的数字掷骰器。
- en: '![image](../images/f0065-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0065-01.jpg)'
- en: Do you suffer from polyhedral dice elbow from playing too much *Dungeons & Dragons*
    or other tabletop role-playing games? (I’m talking about the dice with lots of
    different shapes. A player might strain a ligament throwing those dice so often!)
    Or maybe you just want the convenience of generating your die rolls electronically?
    Either way, this dice roller is the solution, and then some.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否因为玩太多*龙与地下城*或其他桌面角色扮演游戏而患上了“多面骰肘”？（我说的就是那些有许多不同形状的骰子。玩家扔这些骰子太多次可能会拉伤韧带！）或者你只是想享受用电子方式生成骰子结果的便捷？无论哪种情况，这个掷骰器都能为你提供解决方案，甚至更多。
- en: 'You have the option to switch between a D&D standard 20-sided die and the two
    10-sided dice of *Warhammer Fantasy Roleplay* and other systems, though I’ll show
    you how to customize this to any two-digit variety. However, this is no ordinary
    dice roller: built-in cheats set it apart. I’ll show you how to trigger a high
    roll or a low roll without any of your hapless gaming friends ever knowing, using
    nothing but magnets, sensors, and some sleight of hand.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在标准的20面D&D骰子和两颗10面骰子之间切换，适用于《战锤奇幻角色扮演》和其他系统，虽然我会教你如何将其定制成任何两位数的组合。然而，这不仅仅是一个普通的掷骰器：内置的作弊功能使它与众不同。我会教你如何在不让任何不知情的游戏伙伴察觉的情况下，利用磁铁、传感器和一些巧妙的手法，触发高掷或低掷骰子的结果。
- en: I built the project enclosure as a medieval castle made out of laser-cut wood.
    The last section of this chapter will talk more about the idea behind my enclosure
    and ways to make your own.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我将项目外壳做成了一个中世纪城堡的形状，使用激光切割木材制作。本章的最后部分将进一步讨论我的外壳设计理念以及如何制作你自己的外壳。
- en: '**GET THE PARTS**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取部件**'
- en: Grab the following parts to build your dice roller. I ordered most of the parts
    from Adafruit and SparkFun.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 获取以下部件来构建你的掷骰器。我大多数部件是从Adafruit和SparkFun订购的。
- en: '**Components**'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**组件**'
- en: '**NOTE**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*See “[Getting Started with the Arduino and the Arduino IDE](intro.xhtml#lev17)”
    on [page 15](intro.xhtml#page_15) for setup instructions.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*请参见 “[开始使用Arduino和Arduino IDE](intro.xhtml#lev17)” 章节中的 [第15页](intro.xhtml#page_15)，了解设置说明。*'
- en: Arduino Uno (Adafruit P/N 50 or SparkFun P/N 11021)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno（Adafruit P/N 50 或 SparkFun P/N 11021）
- en: USB A-B cable (Adafruit P/N 62)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB A-B 数据线（Adafruit P/N 62）
- en: Two 8 × 8 LED matrices with I²C backpacks (Adafruit P/N 872)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个8 × 8 LED矩阵，带I²C背包（Adafruit P/N 872）
- en: Two reed switches (SparkFun P/N 8642)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个簧片开关（SparkFun P/N 8642）
- en: Large push button (for example, SparkFun P/N 9336)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型按钮（例如，SparkFun P/N 9336）
- en: Double-throw switch (Adafruit P/N 805)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双投掷开关（Adafruit P/N 805）
- en: Wall wart or 9 V battery clip (Adafruit P/N 63 or Adafruit P/N 80)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 墙插式电源适配器或9V电池夹（Adafruit P/N 63 或 Adafruit P/N 80）
- en: Piezo buzzer (Adafruit P/N 1739)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜂鸣器（Adafruit P/N 1739）
- en: 10 kΩ resistors (SparkFun P/N 10969 is a good multipack)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 kΩ电阻（SparkFun P/N 10969 是一个不错的多件套）
- en: Magnet, powerful enough to trigger the sensor reliably (for example, Adafruit
    P/N 9)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 足够强大的磁铁，用来可靠地触发传感器（例如，Adafruit P/N 9）
- en: (Optional) Breadboard (SparkFun P/N 12002)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）面包板（SparkFun P/N 12002）
- en: '**NOTE**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Power the project with either a 9 V wall wart (such as Adafruit P/N 63) or
    a 9 V jack adapter (such as Adafruit P/N 80) plugged into the power jack on the
    Arduino.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*为项目供电，可以选择9V墙插式电源适配器（如Adafruit P/N 63）或9V插头适配器（如Adafruit P/N 80），然后插入Arduino上的电源插口。*'
- en: '**Tools**'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**工具**'
- en: Laser cutter or saw (such as a jigsaw or band saw)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激光切割机或锯子（如曲线锯或带锯）
- en: Soldering iron
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 焊接铁
- en: Solder
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 焊锡
- en: Wire snips and pliers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电线剪和钳子
- en: Wire
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电线
- en: Hot glue gun
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热熔胶枪
- en: Wood glue
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 木工胶水
- en: Spray paint
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 喷漆
- en: '**INTRODUCING THE LED MATRIX**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍LED矩阵**'
- en: We’re using 8 × 8 LED matrices to display the results of the dice throws. Every
    pixel of an LED matrix is independent, and you selectively trigger them, lighting
    up or dimming each LED to make a pattern. The simplest way to do this is to store
    the status of each pixel in an array. For instance, [Figure 3-1](ch03.xhtml#ch03fig1)
    shows an array of LEDs selectively lit to make a smiley face.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用8 × 8 LED矩阵来显示骰子投掷的结果。LED矩阵的每个像素都是独立的，你可以选择性地触发它们，点亮或调暗每个LED来形成图案。最简单的方式是将每个像素的状态存储在数组中。例如，[图3-1](ch03.xhtml#ch03fig1)展示了一个选择性点亮的LED数组，形成了一个笑脸。
- en: '![image](../images/f0067-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0067-01.jpg)'
- en: '**FIGURE 3-1:** Use arrays to store smiles.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-1：** 使用数组存储笑脸图案。'
- en: You can control your LED matrix with code on an Arduino. The Arduino sketch
    looks at the array to see the status of each LED, lighting or turning them off
    every time the sketch loops.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Arduino 上的代码控制 LED 矩阵。Arduino 草图查看数组以查看每个 LED 的状态，在每次草图循环时点亮或关闭它们。
- en: 'The following code snippet gives you a sense of how it works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段可以让你了解它是如何工作的：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each line represents a row on the matrix, and each digit represents one LED.
    When the LED value is set to `1`, it’s lit. When it’s set to `0`, it’s unlit.
    You can design any graphic you want with this method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行代表矩阵上的一行，每个数字代表一个 LED。当 LED 的值设置为 `1` 时，它会亮起；当设置为 `0` 时，它会熄灭。你可以用这种方法设计任何你想要的图形。
- en: However, typing this out for every design can be tedious, so there’s a convenient
    database of shapes controlled by an Arduino library for the matrix used in this
    project. The library stores functions that draw letters and numbers, as well as
    basic shapes like squares and circles, so you don’t need to design these shapes
    from scratch. In “[Code It](ch03.xhtml#lev60)” on [page 71](ch03.xhtml#page_71),
    I’ll explain how the sketch interacts with the library to draw those default shapes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每次为每个设计手动输入这些内容可能会很繁琐，因此有一个方便的数据库，其中包含由 Arduino 库控制的矩阵形状，这些形状用于本项目中的矩阵。该库存储了绘制字母和数字的函数，以及基础形状，如方形和圆形，因此你不需要从头开始设计这些形状。在[第
    71 页](ch03.xhtml#page_71)的 “[代码实现](ch03.xhtml#lev60)” 中，我将解释草图如何与库交互来绘制这些默认形状。
- en: '**NOTE**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you need instructions on soldering, see the appendix.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你需要焊接说明，请参见附录。*'
- en: '**BUILD IT**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建它**'
- en: 'Follow these steps to build a dice roller that can secretly do your bidding:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建一个骰子滚动器，可以秘密地执行你的命令：
- en: '**Solder the matrices to their boards.** The matrices come with mini control
    boards known as *backpacks* that manage the complexity of running 64 LEDs with
    just a few wires. You need to solder these backpacks to your matrices: add the
    matrix to the backpack with the IC (*integrated circuit*, also known as a *microchip*)
    on the underside and solder the pins in place in the holes. The end result should
    look like [Figure 3-2](ch03.xhtml#ch03fig2). There is no up or down to the matrix,
    as long as you add it to the correct side of the board. If you need more guidance,
    refer to the page for this product (P/N 872) on *[http://www.adafruit.com/](http://www.adafruit.com/)*.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将矩阵焊接到它们的板子上。** 矩阵配有被称为 *背包* 的迷你控制板，这些控制板通过仅用少数几根电线来管理 64 个 LED 的复杂性。你需要将这些背包焊接到矩阵上：将矩阵添加到背包上，IC（*集成电路*，也称为
    *微芯片*）位于底部，然后将引脚焊接到孔中。最终效果应如下所示：[图 3-2](ch03.xhtml#ch03fig2)。矩阵没有上下之分，只要你将它添加到板子的正确一面即可。如果你需要更多指导，请参考该产品（P/N
    872）在 *[http://www.adafruit.com/](http://www.adafruit.com/)* 上的页面。'
- en: '![image](../images/f0068-01.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0068-01.jpg)'
- en: '**FIGURE 3-2:** Solder in one or two of these jumpers to change the matrix’s
    I²C address.'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 3-2：** 焊接一个或两个跳线来更改矩阵的 I²C 地址。'
- en: '**Solder in pins or wires.** There are four pins that connect the matrix to
    the rest of the project. If you plan to use the matrices with a breadboard, solder
    in the accompanying header pins. If you want to use wires instead, leave them
    off.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**焊接引脚或电线。** 有四个引脚将矩阵与项目的其余部分连接。如果你计划将矩阵与面包板一起使用，请焊接随附的头引脚。如果你打算使用电线代替，引脚可以不焊接。'
- en: '**Solder board pin A1.** Of particular importance are the two A0 and A1 solder
    pads, seen in [Figure 3-2](ch03.xhtml#ch03fig2), which allow you to daisy-chain
    up to four matrices by selectively soldering the pads. This is known as “changing
    the I²C address.” If you solder none of the pads, the I²C address for that matrix
    defaults to 0x70\. Soldering A0 sets the value to 0x71, soldering A1 sets it to
    0x72, and soldering both A0 and A1 identifies the matrix as 0x73\. Giving each
    matrix its own address allows us to talk to one matrix without the other responding
    even though they share wires. You need to add solder to just one of these pins
    on one board, so add solder to pin A1.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**焊接板引脚 A1。** 特别重要的是两个 A0 和 A1 焊盘，见于[图 3-2](ch03.xhtml#ch03fig2)，它们允许你通过选择性地焊接焊盘来将最多四个矩阵串联在一起。这被称为“更改
    I²C 地址”。如果不焊接任何焊盘，则该矩阵的 I²C 地址默认为 0x70。焊接 A0 将地址设置为 0x71，焊接 A1 将地址设置为 0x72，焊接
    A0 和 A1 两个焊盘则将地址设置为 0x73。为每个矩阵分配独立的地址，可以让我们在共享电线的情况下与某个矩阵通信，而不会干扰其他矩阵。你只需要在一个板子上的引脚上加焊，因此请在引脚
    A1 上加焊。'
- en: '**Connect the matrices to the Arduino.** Add your matrices to a breadboard
    and connect the power and ground rails to 5V and GND, respectively, and then connect
    both power rails at either side of the board, as shown in [Figure 3-3](ch03.xhtml#ch03fig3).
    Connect power and ground of the first matrix to power and ground on the board,
    then connect up the ground and power pins of both matrices so they are both powered.
    You’ll also need to connect the data and clock wires. Connect pins A4 and A5 on
    the Arduino to the D and C pins, respectively, on one backpack, and with another
    pair of wires connect D and C of the first matrix to D and C of the second matrix.
    In [Figure 3-3](ch03.xhtml#ch03fig3) the data and clock wires are yellow and green,
    respectively.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接矩阵到Arduino。** 将矩阵放置在面包板上，并分别将电源和接地轨道连接到5V和GND，然后将面包板两侧的电源轨道连接，如[图3-3](ch03.xhtml#ch03fig3)所示。将第一个矩阵的电源和接地引脚分别连接到板上的电源和接地引脚，然后连接两个矩阵的电源和接地引脚，使它们都能获得电源。还需要连接数据线和时钟线。将Arduino的A4和A5引脚分别连接到第一个背包的D和C引脚，另外用一对电线将第一个矩阵的D和C引脚连接到第二个矩阵的D和C引脚。在[图3-3](ch03.xhtml#ch03fig3)中，数据线和时钟线分别是黄色和绿色的。'
- en: '![image](../images/f0069-01.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0069-01.jpg)'
- en: '**FIGURE 3-3:** Attach the matrices.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-3：** 连接矩阵。'
- en: Depending on your project, you may need to connect the matrices with wires rather
    than plugging them into the breadboard in order to make them fit. If this is the
    case, you can still attach the matrices as shown in [Figure 3-3](ch03.xhtml#ch03fig3).
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据你的项目需求，你可能需要用电线连接矩阵，而不是将它们插入面包板，以便它们能适配。如果是这种情况，仍然可以像[图3-3](ch03.xhtml#ch03fig3)所示那样连接矩阵。
- en: '**Attach the double-throw switch.** Next, connect the double-throw switch,
    as shown in [Figure 3-4](ch03.xhtml#ch03fig4), with the middle lead connected
    to 5V (pink wire) and the left and right leads connected to digital pins 10 and
    11 on the Arduino, respectively (brown wires). Also connect the left and right
    leads of the switch to ground via 10 kΩ resistors, shown in white in [Figure 3-4](ch03.xhtml#ch03fig4).
    This switch will determine whether this is in D&D d20 mode or Warhammer d100 mode:
    the Arduino can check the position of the switch by scanning pins 10 and 11.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接双刀开关。** 接下来，按照[图3-4](ch03.xhtml#ch03fig4)所示连接双刀开关，中间的引线连接到5V（粉色线），左侧和右侧的引线分别连接到Arduino的数字引脚10和11（棕色线）。同时，将开关的左右引线通过10
    kΩ电阻接地，如[图3-4](ch03.xhtml#ch03fig4)所示。这种开关将决定是使用D&D d20模式还是Warhammer d100模式：Arduino可以通过扫描10号和11号引脚来检查开关的位置。'
- en: '![image](../images/f0070-01.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0070-01.jpg)'
- en: '**FIGURE 3-4:** Adding the double-throw switch'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-4：** 添加双刀开关'
- en: '**Connect the reed switches.** The reed switches come next. As shown in [Figure
    3-5](ch03.xhtml#ch03fig5), connect the switches to pins 5 and 6 on the Arduino
    (purple wires) with the other leads going to ground (gray wires).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接簧片开关。** 接下来是连接簧片开关。如[图3-5](ch03.xhtml#ch03fig5)所示，将开关连接到Arduino的5号和6号引脚（紫色线），另一个引线连接到地（灰色线）。'
- en: '![image](../images/f0070-02.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0070-02.jpg)'
- en: '**FIGURE 3-5:** The reed switches tell the Arduino when a magnet is near.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-5：** 簧片开关告诉Arduino何时有磁铁靠近。'
- en: '**Add the reset button.** The reset button isn’t for starting over when you
    mess up; it’s really your roll button. The project software dictates that the
    dice roll once and then stop, and you must cycle the power or reset the Arduino
    in order to reroll. [Figure 3-6](ch03.xhtml#ch03fig6) shows the button installed.
    Connect one lead to Reset on the Arduino’s power bus (orange wire) and the other
    to GND (pink), soldering in wires to the button’s leads as needed. When the button
    is pressed, the Arduino restarts and automatically reruns the dice roller program.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加重置按钮。** 重置按钮并不是用来在出错时重新开始的；它实际上是你的掷骰子按钮。项目软件规定骰子掷一次然后停止，你必须断电或重置Arduino才能重新掷骰子。[图3-6](ch03.xhtml#ch03fig6)显示了按钮的安装位置。将一个引线连接到Arduino电源总线上的Reset引脚（橙色线），另一个引线连接到GND（粉色线），根据需要将电线焊接到按钮的引脚上。当按钮被按下时，Arduino会重新启动并自动重新运行骰子滚动程序。'
- en: '![image](../images/f0071-01.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0071-01.jpg)'
- en: '**FIGURE 3-6:** Adding a button to reset the Arduino'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-6：** 添加一个按钮来重置Arduino'
- en: '**Install the buzzer.** The buzzer completes the project. It makes a sound
    to signal the completed die roll. The buzzer I included in the parts list features
    breadboard-friendly leads and is attached as shown in [Figure 3-7](ch03.xhtml#ch03fig7):
    connect the positive lead to pin 9 on the Arduino and the negative lead to GND.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装蜂鸣器。**蜂鸣器完成了整个项目。它会发出声音来表示骰子投掷已完成。我在零件列表中包含的蜂鸣器具有适合面包板的引线，并且如[图3-7](ch03.xhtml#ch03fig7)所示进行连接：将正极引线连接到Arduino的9号引脚，负极引线连接到GND。'
- en: '![image](../images/f0071-02.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0071-02.jpg)'
- en: '**FIGURE 3-7:** Wiring up the buzzer'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-7：**蜂鸣器接线'
- en: Now it’s time to add code!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候添加代码了！
- en: '**CODE IT**'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写代码**'
- en: Now that the electronics are assembled, it’s time to test the project by uploading
    code to the Arduino.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在电子组件已经组装好，是时候通过将代码上传到Arduino来测试项目了。
- en: The LEDBackpack library does most of the heavy lifting in this script. The backpack’s
    library has code for the full alphabet, as well as to draw shapes like lines,
    circles, and squares. You’ll need to download the library from the Adafruit product
    page (*[https://learn.adafruit.com/adafruit-led-backpack/0-8-8x8-matrix](https://learn.adafruit.com/adafruit-led-backpack/0-8-8x8-matrix)*)
    and save it to your Arduino libraries folder before you can make use of it. The
    product page also includes tutorials and tons of information if you want to learn
    more.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: LEDBackpack库在此脚本中完成了大部分繁重工作。背包的库包含完整字母表的代码，并且可以绘制诸如线条、圆形和方形等形状。你需要从Adafruit产品页面下载此库（*
    [https://learn.adafruit.com/adafruit-led-backpack/0-8-8x8-matrix](https://learn.adafruit.com/adafruit-led-backpack/0-8-8x8-matrix)
    *），并将其保存到你的Arduino库文件夹中，才能使用它。如果你想了解更多，还可以访问该页面，里面有教程和大量信息。
- en: The code for the project is also in the book’s resources, so open that in the
    Arduino IDE now and let’s go through the code section by section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的代码也包含在本书的资源中，所以现在打开Arduino IDE并让我们逐节查看代码。
- en: The first part of the code consists of references to three libraries used in
    the sketch.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一部分包含对示例中使用的三个库的引用。
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, the backpacks are formally initialized:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，背包正式初始化：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We name the backpacks `matrix1` and `matrix2`. We then enable serial communications
    for debugging purposes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将背包命名为`matrix1`和`matrix2`。然后我们启用串口通信，以便进行调试：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This allows us to communicate with the Serial Monitor. Next, we initialize
    some pins:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们可以与串口监视器进行通信。接下来，我们初始化一些引脚：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The pins interacting with the double-throw switch, the buzzer, and the reed
    switches are initialized. In the latter case the pins are initialized so as to
    use the Arduino’s built-in resistors, ensuring no false positives trigger the
    cheat mode.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与双投掷开关、蜂鸣器和簧片开关交互的引脚已初始化。在后一种情况下，已初始化引脚以使用Arduino的内置电阻器，确保不会出现误触发作弊模式的情况。
- en: 'This line seeds the random number:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行初始化随机数：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By taking a reading from pin A0, we seed the random number we’ll use as our
    dice throw. Then we need to start up the matrices:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过读取A0引脚的值，我们初始化将用作骰子投掷的随机数。接下来，我们需要启动矩阵：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This lets the Arduino know to power up the matrices, and makes sure all of
    the LEDs begin as off. These are the pin declarations for the switches:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这让Arduino知道启动矩阵，并确保所有LED从关闭状态开始。这是开关的引脚声明：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Remember we have two settings for different types of dice. This is the number
    generation functionality for the d100 dice:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们有两种不同类型骰子的设置。这是d100骰子的数字生成功能：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ll use the throw switch to switch between d100 mode and D&D dice mode. Here,
    if the switch is set for d100, the Arduino rolls two random numbers, each between
    0 and 9\. Then it prints them to the Serial Monitor—but doesn’t print them to
    the matrices yet.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用投掷开关在d100模式和D&D骰子模式之间切换。在此模式下，如果开关设置为d100，Arduino将投掷两个随机数，每个数值在0到9之间。然后它将这些数字打印到串口监视器，但尚未打印到矩阵上。
- en: We then need to listen to the reed switches to see if they have been tripped
    by a magnet using two `if` statements—this is our cheat.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们需要监听簧片开关，看看它们是否被磁铁触发，通过两个`if`语句来实现——这就是我们的作弊方式。
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If a reed switch is tripped, the random value rolled up is superseded by either
    a maximum or minimum roll, depending which reed switch has been tripped. The two
    numbers are written to `matrix1` and `matrix2`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果簧片开关被触发，产生的随机值将被一个最大值或最小值所替代，具体取决于触发了哪个簧片开关。两个数字将被写入`matrix1`和`matrix2`：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we have the random number generator for the d20:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有d20的随机数生成器：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the switch is set to d20, the classic D&D die, the Arduino generates a random
    number between 0 and 19, adds 1, then sends the result to the Serial Monitor.
    The following series of `if` statements allows the sketch to supersede the rolled
    number with the cheats if a reed switch is tripped:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开关设置为d20，即经典的D&D骰子，Arduino将生成一个0到19之间的随机数，增加1，然后将结果发送到串口监视器。以下一系列的`if`语句允许草图在触发簧片开关时，用作弊手段覆盖掷出的数字：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Whatever the outcome, the number rolled needs to be displayed on the matrices:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 无论结果如何，掷出的数字需要在矩阵上显示：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This displays the result. The program runs once and then stops.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这会显示结果。程序运行一次后停止。
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Because we only want the code to run once, there is no need for a loop and it
    goes unused! The sketch is complete.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们只需要代码运行一次，所以不需要使用循环，它也就没有被使用！草图完成。
- en: '**ASSEMBLE IT**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**组装它**'
- en: Next, you’ll need a box of some sort that will enclose your project. You can
    approach this step in a few different ways.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要一个盒子来封装你的项目。你可以有几种不同的方式来处理这一步。
- en: '**Laser-Cut Your Own Enclosure**'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**激光切割你自己的外壳**'
- en: My first suggestion for anything usually involves designing and creating it
    yourself. My design resembles a small castle (see [Figure 3-8](ch03.xhtml#ch03fig8)),
    and this not only gets you in the mood for swordplay and magic spells, but also
    helps disguise the way you trigger the reed switches to swing the game your way.
    (More on that last bit after this section.) Here I’ll show you how I went about
    building my castle enclosure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一个建议通常是设计并自己动手制作。我的设计像一个小城堡（见[图3-8](ch03.xhtml#ch03fig8)），这不仅让你感受到剑斗和魔法咒语的氛围，而且还能帮助掩盖你触发簧片开关、改变游戏结果的方法。（关于最后一点，我会在这一部分之后详细说明。）在这里，我将展示我如何制作我的城堡外壳。
- en: '![image](../images/f0076-01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0076-01.jpg)'
- en: '**FIGURE 3-8:** My castle-slash-dice roller, ready for action'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-8：** 我的城堡骰子掷骰器，准备就绪'
- en: '**Design the case.** Design your case, using either a vector art program like
    Inkscape (*[https://inkscape.org/](https://inkscape.org/)*) or an online tool
    like MakerCase (*[http://www.makercase.com/](http://www.makercase.com/)*) that
    designs the case for you. You can also download my castle design in the book’s
    resources (*[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*)
    and re-create or modify it as you see fit. [Figure 3-9](ch03.xhtml#ch03fig9) shows
    my case in Inkscape. Cut it out of quarter-inch plywood or the equivalent—I used
    a double-layer of eighth-inch plywood.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计外壳。** 使用像Inkscape (*[https://inkscape.org/](https://inkscape.org/))* 这样的矢量图形程序，或者像MakerCase
    (*[http://www.makercase.com/](http://www.makercase.com/))* 这样的在线工具来设计你的外壳。你还可以下载我在书中提供的城堡设计资源
    (*[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/))*，并根据需要重新创建或修改它。[图3-9](ch03.xhtml#ch03fig9)显示了我在Inkscape中设计的外壳。你可以用四分之一英寸的胶合板或等效材料来切割——我使用了双层的八分之一英寸胶合板。'
- en: '**Output the design.** Cut out the design on a CNC router or laser cutter.
    [Figure 3-10](ch03.xhtml#ch03fig10) shows my design fresh from the laser cutter.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输出设计。** 在CNC路由器或激光切割机上切割设计。[图3-10](ch03.xhtml#ch03fig10)展示了我从激光切割机中取出的设计。'
- en: '![image](../images/f0077-01.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0077-01.jpg)'
- en: '**FIGURE 3-9:** I designed my castle design in Inkscape with help from *[makercase.com](http://makercase.com)*.'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-9：** 我在Inkscape中设计了我的城堡设计，并借助了*[makercase.com](http://makercase.com)*。'
- en: '![image](../images/f0077-02.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0077-02.jpg)'
- en: '**FIGURE 3-10:** My design, freshly lasered'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-10：** 我的设计，刚刚激光切割完成'
- en: '**Assemble the castle.** Clean up and assemble the castle, as shown in [Figure
    3-11](ch03.xhtml#ch03fig11). Few designs come out of the machine ready to assemble,
    so you should plan to work on the cut parts with files and sandpaper to get them
    to fit together. When you’re ready, glue the parts together.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**组装城堡。** 清理并组装城堡，如[图3-11](ch03.xhtml#ch03fig11)所示。很少有设计能够直接从机器上出来就能组装，因此你应该计划使用锉刀和砂纸处理切割部件，以使它们能够合适地拼接。当你准备好时，将部件粘合在一起。'
- en: '![image](../images/f0077-03.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0077-03.jpg)'
- en: '**FIGURE 3-11:** Assemble the lasered parts.'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-11：** 组装激光切割的部件。'
- en: '**Paint and decorate the castle.** Paint the castle, as shown in [Figure 3-12](ch03.xhtml#ch03fig12).
    I suggest glossy spray paint to ward off dirt and fingerprints. Another good source
    of paint (given the subject matter) is your local hobby store, which doubtlessly
    offers innumerable shades of “dungeon gray” and “slime green” for adding details.
    What’s a proper dice roller without bloodstains and moss?'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**涂装并装饰城堡。** 涂装城堡，正如[图 3-12](ch03.xhtml#ch03fig12)所示。我建议使用光面喷漆，以防止污垢和指纹。另一个不错的涂料来源是当地的爱好商店，那里肯定有各种各样的“地下城灰”和“史莱姆绿”，可以用于增加细节。没有血迹和苔藓，怎么能算是一个合适的骰子滚筒呢？'
- en: '![image](../images/f0078-01.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0078-01.jpg)'
- en: '**FIGURE 3-12:** A coat of silver paint adds sparkle to the castle.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 3-12：** 一层银色涂料为城堡增添了光彩。'
- en: '**Add electronics.** Place your project inside the enclosure, making sure the
    button is accessible. The arcade button has a deep footprint and may interfere
    with the Arduino’s placement. You also need to be mindful of the placement of
    the reed switches. Be sure to test the switches’ placement with a magnet before
    securing them to determine where you need to place the magnet so they can sense
    it.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加电子元件。** 将你的项目放入外壳中，确保按钮可以触及。街机按钮体积较大，可能会影响Arduino的位置。你还需要注意簧片开关的位置。在固定它们之前，务必用磁铁测试开关的位置，确定磁铁需要放置的位置，以便开关能够感应到它。'
- en: '**Alternate Enclosures**'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**替代外壳**'
- en: 'If you don’t have access to a laser or mill, you’ll have to find something
    else to contain your project. Here are a couple of suggestions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有激光切割机或铣床，那么就需要找到其他方法来容纳你的项目。这里有几个建议：
- en: '**Repurpose another box.** Simply find a sturdy box the right size to hold
    the components, and put them inside. Cut holes so the button, switch, and matrices
    can be installed.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新利用另一个盒子。** 只需找到一个结实的合适大小的盒子来放置组件，并把它们放进去。切出孔洞，以便安装按钮、开关和矩阵。'
- en: '**Buy an enclosure.** You can also find a plethora of inexpensive project boxes
    on the web. One of my favorite sources is Jameco Electronics (*[https://www.jameco.com/](https://www.jameco.com/)*),
    which offers different sizes and levels of durability. As with the repurposed
    box, you’ll need to be aware of how much space the project’s guts will take up.
    An 8 × 6 × 3 project box like Jameco P/N 18869 does the trick.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购买外壳。** 你还可以在网上找到许多便宜的项目盒子。我最喜欢的来源之一是Jameco Electronics（*[https://www.jameco.com/](https://www.jameco.com/)*），它提供不同尺寸和耐用性的盒子。和重新利用的盒子一样，你需要注意项目内部的空间占用。像Jameco
    P/N 18869这种8×6×3的项目盒就能完美适用。'
- en: '**Build one out of LEGO bricks.** Chances are, you already have a great enclosure
    in your house, kept in a bucket in the basement next to the holiday boxes. I’m
    talking about LEGO! Simply build a box the right size, leaving holes for the switch,
    button, LED matrices, and power cord.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用乐高积木搭建一个外壳。** 你家里很可能已经有一个合适的外壳，放在地下室的桶里，旁边堆着节日箱子。我说的就是乐高！只需搭建一个合适大小的盒子，留出按钮、开关、LED矩阵和电源线的位置。'
- en: '**USE IT**'
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用它**'
- en: Simply power the dice roller by plugging your wall wart or 9 V power adapter
    into the power jack, and press the button every time you want to roll a die, using
    the magnet on either reed switch depending on your diabolical goals.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 只需通过将墙壁适配器或9V电源适配器插入电源插孔，给骰子滚筒供电，然后每次想掷骰子时按下按钮，根据你的邪恶目标使用磁铁靠近任一簧片开关。
- en: I disguised my magnet by taking a gaming figure with a hollow plastic base and
    hot-gluing the magnet into the base, as shown in [Figure 3-13](ch03.xhtml#ch03fig13).
    The reed switches are positioned close to the top of the castle, and to trigger
    them you simply place the magnetized figure next to the battlements along with
    some innocuous figures. During the course of the game you move the figures around
    the “castle,” making sure to move the triggering figure to the correct spot as
    needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过将一个底部有空心塑料基座的游戏人物伪装成磁铁，使用热熔胶将磁铁粘在基座上，正如[图 3-13](ch03.xhtml#ch03fig13)所示。簧片开关被放置在城堡顶部附近，触发它们时，只需将带有磁铁的人物放置在城堡的城垛旁，并与一些无害的人物一起摆放。在游戏过程中，你可以将人物移到“城堡”周围，根据需要将触发人物移到正确的位置。
- en: '![image](../images/f0079-01.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0079-01.jpg)'
- en: '**FIGURE 3-13:** Hot-glue a magnet to the base of a gaming figure and use it
    to trigger your dice roller.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-13：** 将磁铁用热熔胶粘在游戏人物的底座上，并用它触发骰子滚筒。'
- en: '**SUMMARY**'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: When you complete the hardware and software portion of this project, it should
    look something like the photo on page 65, or a variation thereof with your own
    imaginative design.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成这个项目的硬件和软件部分时，它应该看起来像第65页的照片，或者是你自己富有创意的设计的变体。
- en: Hopefully, you’re also wrestling with the morals of hoodwinking your gaming
    associates. Good luck with this project!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你也在为欺骗你的游戏伙伴的道德问题而挣扎。祝你这个项目顺利！
