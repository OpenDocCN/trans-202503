["```\n$ **npm install --save-dev jest @types/jest**\n```", "```\n \"scripts\": {\n      \"dev\": \"next dev\",\n      \"build\": \"next build\",\n      \"start\": \"next start\",\n      \"lint\": \"next lint\"**,**\n  **\"test\": \"jest\"**\n  }, \n```", "```\n$ **npm install --save-dev ts-jest**\n```", "```\nimport {sum} from \"../helpers/sum\";\n\ndescribe(\"the sum function\", () => {\n\n}); \n```", "```\nconst sum = () => {};\nexport {sum}; \n```", "```\nimport {sum} from \"../helpers/sum\";\n\ndescribe(\"the sum function\", () => {\n    **test(\"two plus two is four\", () => {**\n **let first =** **2;**\n **let second = 2;**\n **let expectation = 4;**\n    });\n\n    **test(\"minus eight plus four is minus four\", () => {**\n **let first = -8;**\n **let second =** **4;**\n **let expectation = -4;**\n    });\n}); \n```", "```\nimport {sum} from \"../helpers/sum\";\n\ndescribe(\"the sum function\", () => {\n\n    test(\"two plus two is four\", () => {\n        let first = 2;\n        let second = 2;\n        let expectation = 4;\n **let result = sum(first, second);**\n    });\n\n    test(\"minus eight plus four is minus four\", () => {\n        let first = -8;\n        let second = 4;\n        let expectation = -4;\n **let result = sum(first, second);**\n    });\n\n}); \n```", "```\nimport {sum} from \"../helpers/sum\";\n\ndescribe(\"the sum function\", () => {\n\n    test(\"two plus two is four\", () => {\n        let first = 2;\n        let second = 2;\n        let expectation = 4;\n        let result = sum(first, second);\n **expect(result).toBe(expectation);**\n    });\n\n    test(\"minus eight plus four is minus four\", () => {\n        let first = -8;\n        let second = 4;\n        let expectation = -4;\n        let result = sum(first, second);\n **expect(result).toBe(expectation);**\n    });\n\n}); \n```", "```\nFAIL  __tests__/sum.test.ts\n  • Test suite failed to run\n`--snip--`\nTest Suites: 2 failed, 2 total\nTests:       0 total\nSnapshots:   0 total \n```", "```\nconst sum = (a: number, b: number) => {};\n\nexport {sum}; \n```", "```\nFAIL  __tests__/sum.test.ts (5.151 s)\n  the sum function\n    × two plus two is four (6 ms)\n    × minus eight plus four is minus four (1 ms)\n\n  • the sum function › two plus two is four\n    Expected: 4\n    Received: undefined\n\n  • the sum function › minus eight plus four is minus four\n    Expected: -4\n    Received: undefined\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 2 total\nSnapshots:   0 total\nTime:        5.328 s, estimated 11 s \n```", "```\nconst sum = (a: number, b: number): number => a + b;\n\nexport {sum}; \n```", "```\nPASS  __tests__/sum.test.ts (8.045 s)\n  the sum function\n    ✓ two plus two is four (2 ms)\n    ✓ minus eight plus four is minus four (2 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        8.291 s \n```", "```\nimport {sum} from \"../helpers/sum\";\n\ndescribe(\"the sum function\", () => {\n\n    test(\"two plus two is four\", () => {\n **expect(sum([2, 2])).toBe(4);**\n    });\n\n    test(\"**minus eight** plus **four** is **minus four**\", () => {\n        expect(sum([**-8**, **4**])).toBe(**-4**);\n    });\n\n    test(\"**two** plus **two** plus **minus four** is **zero**\", () => {\n        expect(sum([**2**, **2**, **-4**])).toBe(0);\n    });\n\n}); \n```", "```\nconst sum = (data: number[]): number => {\n    return data[0] + data[1];\n};\n\nexport {sum}; \n```", "```\nFAIL  __tests__/sum.test.ts (7.804 s)\n  the sum function\n    ✓ two plus two is four (7 ms)\n    ✓ minus eight plus four is minus four (1 ms)\n    ✕ two plus two plus minus four is zero (9 ms)\n\n  • the sum function › two plus two plus minus four is zero\n    Expected: 0\n    Received: 4\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 2 passed, 3 total\nSnapshots:   0 total\nTime:        8.057 s, estimated 9 s \n```", "```\nconst sum = (data: number[]): number => {\n    return data.reduce((a, b) => a + b);\n};\n\nexport {sum}; \n```", "```\nPASS  __tests__/sum.test.ts (7.422 s)\n  the sum function\n    ✓ two plus two is four (2 ms)\n    ✓ minus eight plus four is minus four\n    ✓ two plus two plus minus four is zero\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        7.613 s \n```", "```\n \"scripts\": {\n      \"dev\": \"next dev\",\n      \"build\": \"next build\",\n      \"start\": \"next start\",\n      \"lint\": \"next lint\"**,**\n  **\"test\": \"jest --coverage\"**\n  }, \n```", "```\nPASS  __tests__/sum.test.ts (7.324 s)\n  the sum function\n    ✓ two plus two is four (2 ms)\n    ✓ minus eight plus four is minus four\n    ✓ two plus two plus minus four is zero (1 ms)\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |\n  sum.ts  |     100 |      100 |     100 |     100 |\n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        7.687 s, estimated 8 s \n```", "```\nimport {fibonacci} from \"../helpers/fibonacci\";\n\ndescribe(\"the fibonacci sequence\", () => {\n\n    test(\"with a length of 0 is \", () => {\n        expect(fibonacci(0)).toBe(\" \");\n    });\n\n    test(\"with a length of 5 is '0, 1, 1, 2, 3' \", () => {\n        expect(fibonacci(5)).toBe(\"0, 1, 1, 2, 3\");\n    });\n\n}); \n```", "```\nimport {sum} from \"./sum\";\n\nconst fibonacci = (length: number): string => {\n    const sequence: number[] = [];\n    for (let i = 0; i < length; i++) {\n        if (i < 2) {\n            sequence.push(sum([0, i]));\n        } else {\n            sequence.push(sum([sequence[i - 1], sequence[i - 2]]));\n        }\n    }\n    return sequence.join(\", \");\n};\n\nexport {fibonacci}; \n```", "```\nimport {fibonacci} from \"../helpers/fibonacci\";\n\n**jest.mock(\"../helpers/sum\");**\n\ndescribe(\"the fibonacci sequence\", () => {\n    test(\"with a length of 0 is \", () => {\n        expect(fibonacci(0)).toBe(\" \");\n    });\n    test(\"with a length of 5 is '0, 1, 1, 2, 3' \", () => {\n        expect(fibonacci(5)).toBe(\"0, 1, 1, 2, 3\");\n    });\n\n}); \n```", "```\nconst sum = (data: number[]): number => 999;\n\nexport {sum}; \n```", "```\nconst sum = (data: number[]): number => {\n    return data[0] + data[1];\n}\nexport {sum}; \n```", "```\ntype resultMap = {\n    [key: string]: number;\n}\n\nconst results : resultMap= {\n    \"0 + 0\": 0,\n    \"0 + 1\": 1,\n    \"1 + 0\": 1,\n    \"1 + 1\": 2,\n    \"2 + 1\": 3\n};\n\nconst sum = (data: number[]): number => {\n    return results[data.join(\"+\")];\n}\n\nexport {sum}; \n```", "```\n/**\n * @jest-environment node\n */\n\nimport dbConnect from \"../../middleware/db-connect\";\nimport mongoose from \"mongoose\";\nimport {MongoMemoryServer} from \"mongodb-memory-server\";\n\ndescribe(\"dbConnect \", () => {\n\n    let connection: any;\n\n    afterEach(async () => {\n        jest.clearAllMocks();\n        await connection.stop();\n        await mongoose.disconnect();\n    });\n\n    afterAll(async () => {\n        jest.restoreAllMocks();\n    });\n\n    test(\"calls MongoMemoryServer.create()\", async () => {\n        const spy = jest.spyOn(MongoMemoryServer, \"create\");\n        connection = await dbConnect();\n        expect(spy).toHaveBeenCalled();\n    });\n\n    test(\"calls mongoose.disconnect()\", async () => {\n        const spy = jest.spyOn(mongoose, \"disconnect\");\n        connection = await dbConnect();\n        expect(spy).toHaveBeenCalled();\n    });\n\n    test(\"calls mongoose.connect()\", async () => {\n        const spy = jest.spyOn(mongoose, \"connect\");\n        connection = await dbConnect();\n        const MONGO_URI = connection.getUri();\n        expect(spy).toHaveBeenCalledWith(MONGO_URI, {dbName: \"Weather\"});\n    });\n\n}); \n```", "```\nimport {WeatherInterface} from \"../interface\";\n\ntype param = {\n    [key: string]: string;\n};\n\nconst WeatherModel = {\n    create: jest.fn((newData: WeatherInterface) => Promise.resolve(true)),\n    findOne: jest.fn(({zip: paramZip}: param) => Promise.resolve(true)),\n    updateOne: jest.fn(({zip: paramZip}: param, newData: WeatherInterface) =>\n        Promise.resolve(true)\n    ),\n    deleteOne: jest.fn(({zip: paramZip}: param) => Promise.resolve(true))\n};\nexport default WeatherModel; \n```", "```\n/**\n * @jest-environment node\n */\nimport {WeatherInterface} from \"../../../mongoose/weather/interface\";\nimport {\n    findByZip,\n    storeDocument,\n    updateByZip,\n    deleteByZip,\n} from \"../../../mongoose/weather/services\";\n\nimport WeatherModel from \"../../../mongoose/weather/model\";\njest.mock(\"../../../mongoose/weather/model\");\n\ndescribe(\"the weather services\", () => {\n\n    let doc: WeatherInterface = {\n        zip: \"test\",\n        weather: \"weather\",\n        tempC: \"00\",\n        tempF: \"01\",\n        friends: []\n    };\n\n afterEach(async () => {\n        jest.clearAllMocks();\n    });\n\n    afterAll(async () => {\n        jest.restoreAllMocks();\n    });\n\n    describe(\"API storeDocument\", () => {\n        test(\"returns true\", async () => {\n            const result = await storeDocument(doc);\n            expect(result).toBeTruthy();\n        });\n        test(\"passes the document to Model.create()\", async () => {\n            const spy = jest.spyOn(WeatherModel, \"create\");\n            await storeDocument(doc);\n            expect(spy).toHaveBeenCalledWith(doc);\n        });\n    });\n\n    describe(\"API findByZip\", () => {\n        test(\"returns true\", async () => {\n            const result = await findByZip(doc.zip);\n            expect(result).toBeTruthy();\n        });\n        test(\"passes the zip code to Model.findOne()\", async () => {\n            const spy = jest.spyOn(WeatherModel, \"findOne\");\n            await findByZip(doc.zip);\n            expect(spy).toHaveBeenCalledWith({zip: doc.zip});\n        });\n    });\n\n    describe(\"API updateByZip\", () => {\n        test(\"returns true\", async () => {\n            const result = await updateByZip(doc.zip, doc);\n            expect(result).toBeTruthy();\n        });\n        test(\"passes the zip code and the new data to Model.updateOne()\", async () => {\n            const spy = jest.spyOn(WeatherModel, \"updateOne\");\n            const result = await updateByZip(doc.zip, doc);\n            expect(spy).toHaveBeenCalledWith({zip: doc.zip}, doc);\n        });\n    });\n\n    describe(\"API deleteByZip\", () => {\n        test(\"returns true\", async () => {\n            const result = await deleteByZip(doc.zip);\n            expect(result).toBeTruthy();\n        });\n        test(\"passes the zip code Model.deleteOne()\", async () => {\n            const spy = jest.spyOn(WeatherModel, \"deleteOne\");\n            const result = await deleteByZip(doc.zip);\n            expect(spy).toHaveBeenCalledWith({zip: doc.zip});\n        });\n    });\n\n}); \n```", "```\nPASS  __tests__/mongoose/weather/services.test.ts\nPASS  __tests__/middleware/dbconnect.test.ts (7.193 s)\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Lines\n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   83.63 |      100 |   88.23 |   82.35 |\n middleware         |     100 |      100 |     100 |     100 |\n  db-connect.test.ts|     100 |      100 |     100 |     100 |\n mongoose/weather.  |   77.41 |      100 |     100 |   75.86 |\n  services.test.ts  |   70.83 |      100 |     100 |   70.83 |8,20-22,33-35,43-45\n--------------------|---------|----------|---------|---------|------------------- \n```", "```\n/**\n * @jest-environment node\n */\n\ndescribe(\"The API /v1/weather/[zipcode]\", () => {\n    test(\"returns the correct data for the zipcode 96815\", async () => {\n        const zip = \"96815\";\n        let response = await fetch(`http://localhost:3000/api/v1/weather/${zip}`);\n        let body = await response.json();\n        expect(body.zip).toEqual(zip);\n    });\n});\n\nexport {}; \n```", "```\n$ **npm install --save-dev jest-environment-jsdom**\n$ **npm install --save-dev @testing-library/react @testing-library/jest-dom**\n$ **npm install --save-dev @types/react-test-renderer react-test-renderer** \n```", "```\nconst nextJest = require(\"next/jest\");\nconst createJestConfig = nextJest({});\n\nmodule.exports = createJestConfig(nextJest({})); \n```", "```\n/**\n * @jest-environment node\n */\n\nimport {act, create} from \"react-test-renderer\";\nimport PageComponentWeather from \"../../../pages/components/weather\";\n\ndescribe(\"PageComponentWeather\", () => {\n    test(\"renders correctly\", async () => {\n        let component: any;\n        await act(async () => {\n            component =\n                await create(<PageComponentWeather></PageComponentWeather>);\n        });\n        expect(component.toJSON()).toMatchSnapshot();\n    });\n}); \n```", "```\nPASS  __tests__/mongoose/weather/services.test.ts\nPASS  __tests__/pages/api/v1/weather/zipcode.e2e.test.ts\nPASS  __tests__/middleware/dbconnect.test.ts (7.193 s)\nPASS  __tests__/pages/components/weather.snapshot.test.tsx\n\n---------------------|---------|----------|---------|---------|-------------------\nFile                 | % Stmts | % Branch | % Funcs | % Lines | Uncovered Lines\n---------------------|---------|----------|---------|---------|-------------------\nAll files            |   83.63 |      100 |   88.23 |   82.35 |\n middleware          |     100 |      100 |     100 |     100 |\n  db-connect.test.ts |     100 |      100 |     100 |     100 |\n mongoose/weather    |   77.41 |      100 |     100 |   75.86 |\n  services.test.ts   |   70.83 |      100 |     100 |   70.83 |8,20-22,33-35,43-45\n pages/api/v1/       |         |          |         |         |\n  weather            |         |          |         |         |\n    [zipcode].ts     |     100 |      100 |     100 |     100 |\n pages/components    |   81.81 |      100 |      60 |      80 |\n  weather.tsx        |   81.81 |      100 |      60 |      80 |8,12\n---------------------|---------|----------|---------|---------|-------------------\nSnapshot Summary\n › 1 snapshot written from 1 test suite. \n```", "```\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`PageComponentWeather renders correctly 1`] = `\n<h1\n    data-testid=\"h1\"\n    onClick={[Function]}\n>\n    The weather is\n    sunny\n    , and the counter shows\n    0\n</h1>\n`; \n```", "```\n/**\n * @jest-environment node\n */\n\nimport {act, create} from \"react-test-renderer\";\nimport PageComponentWeather from \"../../../pages/components/weather\";\n\ndescribe(\"PageComponentWeather\", () => {\n    test(\"renders correctly\", async () => {\n        let component: any;\n        await act(async () => {\n            component = await create(<PageComponentWeather></PageComponentWeather>);\n        });\n        expect(component.toJSON()).toMatchSnapshot();\n    });\n\n    test(\"clicks the h1 element and updates the state\", async () => {\n        let component: any;\n        await act(async () => {\n            component = await create(<PageComponentWeather></PageComponentWeather>);\n            component.root.findByType(\"h1\").props.onClick();\n        });\n        expect(component.toJSON()).toMatchSnapshot();\n    });\n\n}); \n```", "```\nFAIL  __tests__/pages/components/weather.snapshot.test.tsx\n  • PageComponentWeather › renders correctly\n`--snip--`\n › 1 snapshot failed.\n`--snip--`\nSnapshot Summary\n › 1 snapshot failed from 1 test suite.\n› Inspect your code changes or run `npm test -- -u` to update them. \n```"]