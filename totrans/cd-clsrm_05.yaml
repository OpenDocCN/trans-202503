- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Diving into Web Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入网页开发
- en: In this chapter, we’ll learn about a development environment built into every
    web browser that students can jump right into and use to begin executing code
    within moments. This tool requires no development environment setup and no need
    to install new software, and will deeply engage students with software code using
    a single keystroke. Just like when learning a foreign language, the quickest way
    to learn code is to immerse ourselves in it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习每个网页浏览器中内置的开发环境，学生可以直接进入并开始执行代码，不需要任何开发环境的设置，也不需要安装新软件，而且通过一个按键就能深度参与软件代码。就像学习外语一样，学习编程最快的方法就是沉浸其中。
- en: Developing in the Web Browser
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网页浏览器中开发
- en: We’ll jump right into web development. To get the most from this chapter, it’s
    best to follow along with the steps provided. These are the same steps your students
    will follow in class over several lessons. As you move through the steps, think
    about how you might tailor the content to your students’ specific needs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接进入网页开发。为了从本章中获得最大收获，最好跟随提供的步骤进行操作。这些步骤与学生在课堂上学习时所遵循的步骤相同。通过这些步骤时，思考如何根据学生的具体需求调整内容。
- en: For simplicity, this book uses the Google Chrome browser running on the Windows
    operating system. But every web browser now has *web development tools* that are
    very similar to one another, and the steps outlined here should be available in
    other browsers and operating systems. The only potential roadblock you might encounter
    is your organization’s computer policies. If you’re using a school computer, access
    to the web development tools might be disabled as a group policy, but personal
    computers will allow you to access them. Work with your organization’s technical
    support department to access these valuable tools if they’re blocked within your
    organization.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简便，本书使用的是运行在 Windows 操作系统上的 Google Chrome 浏览器。但现在每个网页浏览器都有非常相似的*网页开发工具*，在其他浏览器和操作系统中也应该可以使用这里概述的步骤。唯一可能遇到的障碍是你所在组织的计算机政策。如果你使用的是学校的计算机，可能会因为集团策略而禁用访问网页开发工具，但个人计算机应该可以访问它们。如果这些工具在你的组织内被屏蔽，向组织的技术支持部门寻求帮助以访问这些有价值的工具。
- en: Open your web browser and navigate to any web page. This book uses Wikipedia,
    but any site should work. Press **F12**. A new window opens, which looks similar
    to Figure 5-1\. In this screenshot, the tools are docked to the browser for illustrative
    purposes, but making them free-floating is often a more convenient option.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的网页浏览器，导航到任何网页。本书使用的是 Wikipedia，但任何网站都可以。按下 **F12** 键。一个新窗口会打开，界面看起来类似于图
    5-1。在这个截图中，工具被停靠在浏览器上以作说明，但将它们设为浮动窗口通常是更方便的选择。
- en: '![](image/CitC05_01_WebDevelopmentTools_labeled_new.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC05_01_WebDevelopmentTools_labeled_new.png)'
- en: 'Figure 5-1: Web development tools'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：网页开发工具
- en: Figure 5-1 shows four main areas. At the top of the figure is the browser window
    ❶, which is the web page we’re analyzing. Below the browser window are the *elements*
    of the page ❷, the markup language from which the page is rendered—a type of source
    code. The elements currently selected have various properties ❸. At the bottom
    of the figure is the *console* ❹, which displays information useful to the web
    developer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1 显示了四个主要区域。图的顶部是浏览器窗口 ❶，这是我们正在分析的网页。浏览器窗口下方是页面的*元素* ❷，即渲染页面的标记语言——一种源代码。当前选中的元素具有各种属性
    ❸。图的底部是*控制台* ❹，显示对网页开发者有用的信息。
- en: Before going any further, take a few moments to have students reflect on what
    they think about this interface. Ask them how they feel when confronted with this
    screen. Do they feel frustrated? Intimidated? Excited? How would they learn about
    this software on their own? Would they click around and play with it? Is there
    built-in help? If so, how does that feature compare to search engine results about
    it? Have students examine their thinking at this time and document it in a few
    sentences so they can empathize with the users who will one day be confronted
    with software the students might create.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，花点时间让学生思考他们对这个界面的看法。问问他们在面对这个界面时的感受。是感到沮丧吗？害怕吗？兴奋吗？他们会如何自己了解这个软件？他们会点击四周尝试吗？是否有内置帮助功能？如果有，跟搜索引擎中的相关信息相比，这个功能如何？让学生现在就检查他们的想法，并用几句话记录下来，以便他们能够与那些将来可能面对他们所创建的软件的用户产生共鸣。
- en: In a sense, you’ve just thrown your students into a pool’s deep end. As mentioned
    earlier, these complex panels are known as web development tools, and they’re
    the same tools software engineers use when writing and debugging web applications.
    With these tools, your students are accessing the client-side code that makes
    up the web page. Work with them to analyze it, step through it, and even manipulate
    it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，你刚刚把学生们丢进了游泳池的深水区。如前所述，这些复杂的面板被称为网页开发工具，它们是软件工程师在编写和调试网页应用程序时使用的工具。通过这些工具，你的学生正在访问构成网页的客户端代码。和他们一起分析代码，逐步了解，甚至操作它。
- en: These powerful tools are built into every web browser, and as intimidating as
    they appear, whatever your students do will be completely safe. Students will
    only be experimenting with the code on their local computers. They’ll have the
    freedom to click around, explore different menu options, and try to break features
    as much as they like. Just as board games provide a magic circle for experimenting
    with ideas, web development tools provide a safe space for experimenting with
    code. Give your students some time to just explore and play with this browser
    feature on their own before moving on to more directed content. So many wow factors
    exist in these tools. Allowing students the excitement of self-discovery and time
    to share with their peers can improve their engagement going forward. It’s also
    exciting for the teacher to see their students leaning forward into the content
    on their own.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些强大的工具被内置在每个网页浏览器中，虽然它们看起来可能令人害怕，但无论你的学生做什么都完全安全。学生们只会在他们的本地计算机上进行代码实验。他们将有自由点击、探索不同的菜单选项，并尽可能多地尝试破坏功能。就像棋盘游戏为实验提供了一个魔法圈一样，网页开发工具也为代码实验提供了一个安全的空间。在继续进行更有针对性的内容之前，给你的学生一些时间，让他们自己探索并玩弄这个浏览器功能。这些工具中有许多令人惊叹的因素。允许学生们自行发现的兴奋感，以及与同伴分享的时间，可以提高他们未来的参与感。看到学生们主动投入到内容中的时候，对教师来说也是一种兴奋的体验。
- en: Document Object Model Inspector
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档对象模型检查器
- en: Once your students have explored the interface and learned about it on their
    own, provide a more formal lesson on how to use the web development tools. Specifically,
    they will learn about the *Document Object Model (DOM)* for web pages, which is
    the hierarchy of elements with which they may interact. To facilitate this, we
    will introduce them to the *DOM Inspector* within the web development tools, which
    will allow them to navigate and manipulate these elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的学生探索过界面并自行学习了它，提供一个关于如何使用网页开发工具的正式课程。具体来说，他们将学习网页的*文档对象模型 (DOM)*，这是他们可能与之交互的元素层级结构。为了方便这一过程，我们将向他们介绍网页开发工具中的*DOM检查器*，它将允许他们浏览和操作这些元素。
- en: We’ll begin by launching the DOM Inspector. If necessary, undock this suite
    of tools and move the window over to one side of the desktop and the browser to
    the other side so you can see both windows at once. In the elements panel, move
    your mouse over the *hypertext markup language (HTML)*, which describes the web
    page’s structure. HTML is composed of *tags* that define a web document’s elements.
    Each element on a page has an opening and closing tag. For example, in the markup
    <p>This is a paragraph.</p> , the <p> is the opening paragraph tag, the </p> is
    the closing tag, and This is a ­paragraph. is the inner HTML content of the element.
    Many different tags define elements in a web page, including <video></video>,
    <blockquote></blockquote>, and <table></table, to name a few.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从启动DOM检查器开始。如果需要，可以将这套工具分离出来，将窗口移到桌面的一侧，将浏览器放到另一侧，这样你就可以同时看到两个窗口。在元素面板中，将鼠标悬停在*超文本标记语言
    (HTML)* 上，它描述了网页的结构。HTML由*标签*组成，用于定义网页文档的元素。页面上的每个元素都有一个开标签和闭标签。例如，在标记 <p>这是一个段落。</p>
    中，<p>是开段落标签，</p>是闭标签，"这是一个段落。" 是元素的内部HTML内容。许多不同的标签定义网页中的元素，包括 <video></video>、<blockquote></blockquote>
    和 <table></table> 等。
- en: Parts of the web page will become highlighted as you move the mouse up and down
    the HTML. What you’re seeing is which HTML elements refer to which objects on
    the web page. For example, hovering the mouse over an h1 tag will usually highlight
    the title of the page. Alternatively, if you right-click a specific part of the
    page in the browser window, a pop-up menu will appear. Select **Inspect** or **Inspect
    Element** from the menu and the web development tools will highlight the part
    of the source code referring to that part of the page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 HTML 中上下移动鼠标时，网页的部分内容会被高亮显示。你所看到的是哪些 HTML 元素对应网页上的哪些对象。例如，将鼠标悬停在 h1 标签上，通常会高亮显示页面的标题。或者，如果你右键点击浏览器窗口中特定的页面部分，弹出菜单会出现。选择**检查**或**检查元素**，网页开发工具会高亮显示源代码中与该页面部分相关的代码。
- en: The DOM consists of many nested nodes organized hierarchically in a tree structure.
    In the elements panel, you can click the arrows to the left of nodes to expand
    them and see their contents or collapse them for a simpler view. Figure 5-2 provides
    a high-level view of this document hierarchy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 由许多嵌套的节点组成，这些节点按树形结构层次组织。在元素面板中，你可以点击节点左侧的箭头展开它们，查看其内容，或者将其折叠以简化视图。图 5-2
    提供了这个文档层次结构的高层次视图。
- en: '![](image/CitC05_02_DOMheirarchy_new.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC05_02_DOMheirarchy_new.png)'
- en: 'Figure 5-2: DOM hierarchy'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：DOM 层次结构
- en: All web pages use this organizational structure. Starting with the root <html>
    node, the document branches into the <head> node where the document properties
    like title, search terms, and programming code reside. The document also branches
    into the <body> node where the web page content like text, images, and videos
    resides. Show your students the tree structure in Figure 5-2\. Then show them
    the sample markup in Listing 5-1 to see how the tree looks in an actual script.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网页都使用这种组织结构。从根节点<html>开始，文档分支到<head>节点，其中包含文档属性，如标题、搜索词和编程代码。文档还分支到<body>节点，其中包含网页内容，如文本、图片和视频。向学生展示图
    5-2 中的树状结构，然后展示列表 5-1 中的示例标记，看看树在实际脚本中的表现。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: Basic HTML structure'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-1：基本的 HTML 结构
- en: In this very elementary example, the script is indented deeper for each level
    the tree descends. Have your students explore how elements are nested in various
    websites to find and become familiar with these basic DOM elements. Understanding
    the DOM as a tree structure can provide your students with a map for navigating
    the HTML and will be especially useful when they’re writing code that manipulates
    it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个非常基础的示例中，脚本每下降一层树，缩进就会增加。让你的学生探索如何在各种网站中查找和熟悉这些基本的 DOM 元素。理解 DOM 作为树形结构，可以为学生提供导航
    HTML 的地图，尤其是在他们编写操控 HTML 的代码时会特别有用。
- en: But the real wow factor is the DOM Inspector. Try inspecting the headline of
    the Wikipedia article and then double-click the text in the elements panel. It
    should become editable (if not, try right-clicking the text and selecting **Edit**
    or **Edit as HTML** from the options). Make some changes to the text and then
    look at your browser to see your handiwork. In Figure 5-3, the Wikipedia article’s
    h1 tag is edited to a mnemonic for remembering biological taxonomies. You can
    see the edit in the elements panel and the result in the browser window.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但真正让人惊叹的是 DOM 检查器。试着检查 Wikipedia 文章的标题，然后在元素面板中双击文本。它应该变得可以编辑（如果不能，试着右键点击文本，并从选项中选择**编辑**或**以
    HTML 编辑**）。对文本进行一些更改，然后查看浏览器窗口，看看你所做的更改。在图 5-3 中，Wikipedia 文章的 h1 标签被编辑成记忆生物分类法的助记符。你可以在元素面板中看到编辑内容，在浏览器窗口中看到结果。
- en: This is a playful *hack*—a clever technical trick that should impress your students.
    You haven’t edited the actual website on the server, only its presentation in
    your client browser. If you want to see the web page as it still appears to everyone
    else on the web, simply refresh the page to wipe away your changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的*技巧*—一个巧妙的技术手段，应该能给你的学生留下深刻印象。你并没有编辑服务器上实际的网站内容，只是修改了客户端浏览器中的显示。如果你想查看网页在其他人眼中的样子，只需刷新页面，就会清除你所做的更改。
- en: '![](image/CitC05_03_DOMmanipulation.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC05_03_DOMmanipulation.png)'
- en: 'Figure 5-3: DOM manipulation'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：DOM 操控
- en: Now look at the properties panel where the current tab should read **Styles**.
    This panel displays the *Cascading Style Sheet (CSS)* definitions for whatever
    you’ve selected in the elements panel. CSS describes how elements in the DOM should
    appear, using attributes such as font-family, font-size, color, alignment, and
    so forth.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查看属性面板，当前选项卡应该显示**Styles**。此面板显示你在元素面板中选定的内容的*Cascading Style Sheet (CSS)*定义。CSS描述了DOM中元素的显示方式，使用字体族、字体大小、颜色、对齐等属性。
- en: 'As with the elements panel, you can edit these CSS definitions and see how
    the edits affect the page’s appearance. For example, when you scroll through the
    many definitions in the Styles tab, you’ll likely find one labeled background-color
    followed by a value like #000000, black, or rgb(0,0,0). Change that value to something
    else, such as red, blue, or even lemonchiffon. The DOM Inspector will give you
    suggestions, as shown in Figure 5-4.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与元素面板类似，你可以编辑这些CSS定义并查看编辑如何影响页面的外观。例如，当你浏览样式标签中的许多定义时，你可能会找到一个标记为background-color的定义，后面跟着像#000000、black或rgb(0,0,0)这样的值。将该值改为其他内容，例如红色、蓝色，甚至是lemonchiffon。DOM检查器会给你一些建议，如图5-4所示。
- en: '![](image/CitC05_04_ColorSugesstions.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC05_04_ColorSugesstions.png)'
- en: 'Figure 5-4: Suggested valid color values in the Styles tab'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-4：样式标签中建议的有效颜色值
- en: If there is no background-color attribute, you can scroll down to travel up
    the node hierarchy until you find the html, body definition. Like the color suggestions,
    the DOM Inspector will also give you attribute suggestions so you can add a new
    background definition. Tinker with the styles on a few pages to become familiar
    with some of the many available styling options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有background-color属性，你可以向下滚动并向上浏览节点层级，直到找到html、body的定义。像颜色建议一样，DOM检查器也会给你属性建议，以便你可以添加新的背景定义。你可以在几个页面上调整样式，熟悉一些可用的样式选项。
- en: 'The elements panel displays the web page’s DOM: the document’s content in HTML.
    The CSS on the Styles tab defines how that content is laid out and appears. The
    content and styling are separated or *decoupled*. Decoupling the style from the
    content makes the content easier for developers to maintain and easier for machines,
    such as search engine web crawlers, to read. Once you and your students feel comfortable
    with the DOM’s content and design aspects, you can move on to programming code
    to begin manipulating the DOM in more dynamic ways.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 元素面板显示了网页的DOM：文档的HTML内容。样式标签中的CSS定义了这些内容的布局和显示方式。内容和样式是分离的或*解耦*的。将样式与内容解耦，使得内容更容易为开发人员维护，并且更容易被机器读取，比如搜索引擎的网页爬虫。一旦你和你的学生对DOM的内容和设计方面感到熟悉，你就可以开始使用编程代码以更动态的方式操作DOM。
- en: The Console
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台
- en: Although playing with the DOM Inspector is fun for learning about and manipulating
    websites, you’re only minimally engaging with programming concepts and computational
    thinking. HTML and CSS aren’t programming languages. They’re *markup languages*,
    syntax that defines and structures data that the browser reads and translates
    into a website. But we need to understand the structure and rules of this medium
    before we can start manipulating it with programming code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用DOM检查器进行网站学习和操作很有趣，但你仅仅是与编程概念和计算思维进行最小程度的互动。HTML和CSS并不是编程语言，它们是*标记语言*，一种定义和结构化数据的语法，浏览器读取并将其转换为网站。但在我们开始用编程代码操作它之前，我们需要理解这种媒介的结构和规则。
- en: Let’s look at the web development tools in the *console*. This area of the tool
    is where the browser will report errors and information about the web page. It
    might report errors in the website code or inform the developer that a feature
    referenced in the web page script is being phased out, or *deprecated*, in a future
    release.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看*console*中的网页开发工具。这个工具区域是浏览器报告关于网页的错误和信息的地方。它可能会报告网站代码中的错误，或通知开发者网页脚本中引用的某个功能将在未来版本中被淘汰或*废弃*。
- en: The console also provides instant access to a simple coding environment. Here
    we can run simple lines of code with inputs and see their outputs. Web developers
    use this feature to check the values of variables or other states as they run
    in the page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台还提供了即时访问一个简单的编码环境。在这里，我们可以运行简单的代码行并查看它们的输出。Web开发人员使用此功能来检查在页面上运行时变量或其他状态的值。
- en: In your console, enter the highly cryptic code in Listing 5-2 and press enter
    to execute it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中，输入列表5-2中的高度加密代码并按回车键执行。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 5-2: A JavaScript one-liner for the FizzBuzz game'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-2：FizzBuzz 游戏的 JavaScript 单行代码
- en: This is very dense code, but if you entered it correctly, the console should
    output the numbers 1 through 100, replacing each number divisible by three with
    “Fizz,” numbers divisible by five with “Buzz,” and numbers divisible by three
    and five with “FizzBuzz.” This models the classic classroom game **FizzBuzz**
    in which students sit in a circle and count upward, replacing numbers divisible
    by three and five with the words “Fizz” and “Buzz” respectively.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码非常简洁，但如果你正确输入它，控制台应该会输出从 1 到 100 的数字，将每个能被 3 整除的数字替换为“Fizz”，能被 5 整除的数字替换为“Buzz”，同时能被
    3 和 5 整除的数字替换为“FizzBuzz”。这模拟了经典的课堂游戏 **FizzBuzz**，学生们坐成一圈从 1 开始计数，将能被 3 和 5 整除的数字分别替换为“Fizz”和“Buzz”。
- en: Programming *FizzBuzz* from scratch is also a common interview question. The
    example in Listing 5-2 uses multiple syntax tricks to condense the program into
    a single line to impress interviewers, and we use it for ease of execution in
    the web console, but the code is unreadable as a result. Other programmers who
    encounter this code would have a hard time deciphering what it does. Listing 5-3
    shows what this code might look like in a more readable format.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始编写 *FizzBuzz* 程序也是一个常见的面试问题。清单 5-2 中的示例使用了多个语法技巧，将程序压缩成一行代码来给面试官留下深刻印象，并且我们在网页控制台中使用它，便于执行，但因此代码变得难以阅读。其他程序员遇到这段代码时，可能会很难理解它的功能。清单
    5-3 展示了这段代码在更易读的格式下的样子。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 5-3: FizzBuzz in a more human-friendly format'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-3：更易人理解格式的 FizzBuzz
- en: To execute the code in Listing 5-3, first type it into a text editor, like Notepad
    or TextEdit, and then copy and paste it into the console. By doing so, you can
    save your code snippets to a text file where you can modify and extend them later.
    Using this technique, you can also execute the code samples provided in Chapter
    4, such as the *Snakes and Ladders* example.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行清单 5-3 中的代码，首先在文本编辑器中输入它，比如 Notepad 或 TextEdit，然后将其复制并粘贴到控制台中。通过这样做，你可以将代码片段保存到文本文件中，以便稍后进行修改和扩展。使用这种技巧，你还可以执行第
    4 章中提供的代码示例，比如 *Snakes and Ladders* 示例。
- en: With the console, students can instantly begin experimenting with a core programming
    language in web development. JavaScript is a safe language, which means working
    with JavaScript in the web development tools is entirely done on the client side.
    Client-side code executes in the browser, not the server hosting the JavaScript
    code. Running in the client browser, JavaScript can’t execute any malicious operations.
    It can’t write or erase files, or otherwise harm the client.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制台，学生可以立即开始在网页开发中实验一门核心编程语言。JavaScript 是一种安全的语言，这意味着在网页开发工具中使用 JavaScript
    完全是在客户端完成的。客户端代码在浏览器中执行，而不是托管 JavaScript 代码的服务器上。JavaScript 在客户端浏览器中运行，不能执行任何恶意操作。它无法写入或删除文件，或以其他方式伤害客户端。
- en: 'Being a primarily client-side programming language, JavaScript has many functions
    that relate to the DOM and allow you to reference nodes in the DOM’s tree structure.
    When students know that the document root node branches off into the head and
    body nodes, they can reference these nodes in JavaScript by using document.head
    and document.body. From either of these nodes, they can reference nodes and properties
    further down the chain. For example, try executing the code in Listing 5-3\. The
    innerHTML portion references the content between the two <body> tags:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种主要的客户端编程语言，JavaScript 具有许多与 DOM 相关的功能，可以让你引用 DOM 树结构中的节点。当学生知道文档根节点分支到头部和主体节点时，他们可以通过使用
    document.head 和 document.body 在 JavaScript 中引用这些节点。从这些节点开始，他们可以引用链条中更下层的节点和属性。例如，尝试执行清单
    5-3 中的代码。innerHTML 部分引用了两个<body>标签之间的内容：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 5-3: A line of code that replaces a web page'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-3：一行替换网页的代码
- en: When you press enter after entering this line of code to execute it, the entire
    web page you’re viewing vanishes. In its place, students will simply see the words
    “Hello, World!” You might get some surprised reactions when your students see
    what they too can do.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在输入完这行代码后按下回车键执行时，你正在查看的整个网页将消失。取而代之的是，学生们会看到“Hello, World!”这几个字。当你的学生看到他们也能做到这一点时，可能会引起一些惊讶的反应。
- en: 'With JavaScript code, you can modify the content of the page programmatically.
    Listing 5-4 provides another example. The document.body.style portion allows you
    to modify the body node’s CSS properties. This line of code changes the body background
    color to blue if you execute it in the console:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 代码，你可以以编程方式修改页面的内容。清单 5-4 提供了另一个例子。document.body.style 部分允许你修改
    body 节点的 CSS 属性。如果你在控制台执行这行代码，它将把页面背景色修改为蓝色：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 5-4: A line of code that changes the body background color'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-4：一行代码，改变页面背景色
- en: 'Notice the capitalization that Listing 5-3 and Listing 5-4 use. Specifically,
    note that innerHTML and backgroundColor are defined in *camel-case capitalization*:
    the first letter of each word is capitalized so the variable name has humps like
    a camel’s back. JavaScript is a case-sensitive language, so it will treat a variable
    named camelCase and a variable named CamelCase as two different variables. Capitalization
    is important, so if your code isn’t working, check to make sure you have this
    right.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意清单 5-3 和清单 5-4 中使用的大小写方式。特别是要注意 innerHTML 和 backgroundColor 的命名遵循 *驼峰式大小写*：每个单词的首字母都大写，因此变量名看起来就像骆驼的背部一样起伏不平。JavaScript
    是一种区分大小写的语言，因此它会把一个名为 camelCase 的变量和一个名为 CamelCase 的变量当作两个不同的变量来处理。大小写非常重要，如果你的代码无法正常工作，检查一下是否正确使用了大小写。
- en: As your students enter code into the console, they’ll see lists of suggestions
    for nodes and functions they can access at each point in the chain. This feature
    is known as *intelligent code completion* and is available in many coding environments.
    These suggestions help you quickly write syntactically correct code. If you type
    document.body.on in the console, code completion will provide you with a list
    of *event listeners*. These listeners are functions that trigger when the user
    interacts with the page in specific ways pertaining to the node, such as those
    in Figure 5-7.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的学生在控制台输入代码时，他们会看到一系列可供访问的节点和函数建议。这一功能被称为 *智能代码补全*，在许多编码环境中都有提供。这些建议帮助你快速编写语法正确的代码。如果你在控制台输入
    document.body.on，代码补全会提供一份 *事件监听器* 的列表。这些监听器是当用户以特定方式与页面交互时触发的函数，相关的例子可以参见图 5-7。
- en: '![](image/CitC05_07_IntelligentCodeCompletion.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC05_07_IntelligentCodeCompletion.png)'
- en: 'Figure 5-7: Intelligent code completion'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-7：智能代码补全
- en: With the line of code in Listing 5-5, you can set an event listener on the body
    so an alert message pops up when the user clicks anywhere on the page.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用清单 5-5 中的代码行，你可以在页面的 body 上设置事件监听器，以便当用户点击页面的任何地方时，弹出一个提示消息。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 5-5: Set an alert message to pop up when the user clicks the page.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-5：设置一个提示消息，当用户点击页面时弹出。
- en: If you sequentially execute the code in Listings 5-3, 5-4, and 5-5, you should
    be able to erase almost any website and replace it with a blue page that displays
    Hello, World! and pops up an alert showing THAT TICKLES! whenever the user clicks
    it. This is a good place to draw your students’ attention back to the elements
    panel in the web development tools. There they’ll find that the changes they’ve
    made programmatically are reflected in the HTML, the **Styles** tab, and the **Event
    Listeners** tab. The tools reflect the current state of the page. If students
    right-click the page and select **View Source** or **View Page Source**, they’ll
    see the markup and code of the page’s initial state before it was modified. It’s
    best to make students aware of this so they know that what they see in the web
    development tools is often not the web page’s initial source code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你依次执行清单 5-3、5-4 和 5-5 中的代码，你应该能够删除几乎任何网站，并将其替换为一个蓝色页面，页面上显示 "Hello, World!"，并且每当用户点击页面时，会弹出一个提示框显示“那真让人高兴！”。这是一个很好的时机，可以把学生的注意力引回到网页开发工具中的元素面板。在那里，他们会发现自己以编程方式所做的更改反映在了
    HTML、**样式**选项卡和 **事件监听器**选项卡中。这些工具显示的是页面的当前状态。如果学生右键单击页面并选择 **查看源代码** 或 **查看页面源代码**，他们将看到页面在被修改之前的初始状态的标记和代码。最好让学生意识到这一点，这样他们就知道，在网页开发工具中看到的内容往往不是网页的初始源代码。
- en: Once your students understand how to execute code in the console, let them explore
    on their own. What would they like to see happen on a web page? It’s tricky to
    execute sophisticated code in the console, so remind them to keep the scope simple.
    Some examples they can find online might include *How do I change a web page’s
    background to a random color on click? How do I make text blink on and off when
    the user hovers over it? How do I make the page automatically scroll?* Your students
    will quickly find that almost any question they can think of has already been
    asked by one of the other seven billion humans on the planet and answered by many
    of those helpful humans.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的学生理解了如何在控制台中执行代码，让他们自行探索。他们想在网页上看到什么效果？在控制台中执行复杂的代码是有难度的，所以提醒他们保持范围简单。他们可以在线找到的一些例子可能包括*如何在点击时将网页背景更改为随机颜色？如何在用户悬停时让文本闪烁？如何让页面自动滚动？*你的学生很快会发现，几乎任何他们能想到的问题，地球上其他七十亿人中总有人已经问过，并且得到了很多有帮助的人们的答案。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we threw our students into a mind-boggling deluge of information
    available in any web browser and had them dive into engaging with what they find
    there. The web development tools have a definitive wow factor that gets students
    sitting up in their chairs and engaging with the content. After you introduce
    your students to these powerful tools, hopefully many of them will rush home to
    excitedly show their friends and family what they’ve discovered. They’ll have
    the power to do so because this identical environment is available on their home
    and library computers, and this is how it should be.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们让学生接触了任何网页浏览器中都能找到的令人眼花缭乱的信息洪流，并让他们深入与这些内容互动。网页开发工具具有一种显著的震撼效果，能够让学生坐直身子，专注于内容。在你向学生介绍这些强大的工具后，希望他们中的许多人会迫不及待地回家，兴奋地向朋友和家人展示他们所发现的内容。他们能做到这一点，是因为这个相同的环境可以在他们的家里和图书馆的计算机上使用，这也是它应该具备的特点。
- en: 'But often, programming classes take a more roundabout approach. In a 2002 essay
    titled “A Mathematician’s Lament,” math teacher Paul Lockhart speculates on a
    world in which we teach music the way we teach math to make students competitive
    in an “increasingly sound-filled world.” He describes the arduous, meaningless
    exercises children in this dystopia go through at all grade levels: students memorizing
    algorithms and getting graded on the correctness of their musical notation, and
    stressed-out parents hiring tutors for their children who are bored with it and
    spend their music sessions staring out the window humming tunes to themselves
    instead of learning music. When the students get to college, they’re finally allowed
    to play and listen to actual music, and appreciate what all those years of busywork
    were leading up to, but only if they major in music.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但编程课常常采取一种更迂回的方式。在2002年一篇名为《数学家的哀叹》的文章中，数学老师保罗·洛克哈特设想了一个世界，在这个世界中，我们像教授数学一样教授音乐，以使学生在“日益充斥声音的世界”中具备竞争力。他描述了在这个反乌托邦世界中，孩子们在所有年级所经历的艰苦且毫无意义的练习：学生们背诵算法，并根据他们的乐谱正确性进行评分，焦虑的父母为他们雇佣家教，而孩子们对此感到厌倦，在音乐课上只是盯着窗外，哼着曲子，而不是学习音乐。当学生们进入大学时，他们终于可以演奏和聆听真正的音乐，并且理解那些多年来的繁重工作究竟是为了什么，但只有他们主修音乐专业时才能做到。
- en: A programming class that spends the first hour getting students to output a
    single "Hello, World!" in code is a soul-crushingly tedious way to teach coding.
    The more rapidly we can get students hacking and immediately rewarding them with
    outputs from the code they input, the more engaged they’ll become and the faster
    they’ll rise to the challenges of this new environment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个编程班如果在第一小时让学生输出一条“Hello, World!”的代码，那是一种让人筋疲力尽、乏味的教学方式。我们能越快让学生进行编程并立即通过他们输入的代码看到反馈输出，他们就会越投入，越快适应这个新环境的挑战。
- en: Only when students have had an opportunity to thoroughly enjoy coding as a playground
    of instant rewards can we begin to guide their newfound skills into more formal
    computational artifacts. JavaScript allows students to implement variables and
    the various control structures we learned about in the previous chapter into algorithms
    and functions. But students will need an environment where they can save their
    work, return to it, and iteratively enhance it if they want to take full advantage
    of these programming elements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当学生有机会充分体验编程作为一个即时奖励的游乐场时，我们才能开始引导他们将新获得的技能转化为更正式的计算艺术品。JavaScript 使学生能够将变量和我们在上一章学习的各种控制结构实现到算法和函数中。但是，学生需要一个能够保存工作、返回并迭代提升的环境，才能充分利用这些编程元素。
- en: In the next chapter, we’ll learn about some readily available development environments
    where your students can graduate from temporary modifications to existing websites
    and start crafting web applications of their own to share with their peers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解一些现成的开发环境，在这些环境中，你的学生可以从对现有网站的临时修改中毕业，开始制作自己的网页应用，并与同伴分享。
