- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: LED Numeric Displays and Matrices
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LED数字显示和矩阵
- en: In this chapter, you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将
- en: Use MAX7219-based numeric LED displays
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于MAX7219的数字LED显示
- en: Build your own digital stopwatch timer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自建数字秒表计时器
- en: Use MAX7219-based LED matrix modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于MAX7219的LED矩阵模块
- en: Build a scrolling text LED display
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建滚动文本LED显示
- en: Although LED numeric displays (such as those found in contemporary digital alarm
    clocks) may not be on the bleeding edge of display technology, they are easy to
    read and—more importantly—easy to use with our Arduino boards.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管LED数字显示器（例如现代数字闹钟中使用的那种）可能不是最前沿的显示技术，但它们易于阅读，而且——更重要的是——与我们的Arduino板兼容，使用起来非常简单。
- en: 'You learned how to use one- and two-digit LED numeric displays in Chapter 6.
    However, using more than two digits at a time can become messy—there’s a lot more
    wiring, more control ICs, and so on to take care of. Fortunately, there’s a popular
    IC that can control up to 64 LEDs (eight digits of a numeric display) with only
    three control wires from our Arduino: the MAX7219 LED driver IC from Maxim Integrated.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您在第6章中已经学习了如何使用一位和两位数字的LED显示器。然而，同时使用超过两位数字可能会变得杂乱无章——需要更多的接线、更复杂的控制IC等。幸运的是，有一种流行的集成电路（IC）可以通过三根控制线从我们的Arduino控制最多64个LED（八位数字显示器）：MAX7219
    LED驱动IC，来自Maxim Integrated公司。
- en: The MAX7219 is available in both a through-hole package type, which means it
    has metal legs that can fit into a circuit board or a solderless breadboard ([Figure
    8-1](#figure8-1)), and a surface-mount package type ([Figure 8-2](#figure8-2)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MAX7219有穿孔封装类型，这意味着它具有金属引脚，可以插入电路板或无焊接面包板（如[图8-1](#figure8-1)所示），也有表面贴装封装类型（如[图8-2](#figure8-2)所示）。
- en: '![f08001](image_fi/500587c08/f08001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f08001](image_fi/500587c08/f08001.png)'
- en: 'Figure 8-1: The MAX7219 in a through-hole package type'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-1：MAX7219的穿孔封装类型
- en: '![f08002](image_fi/500587c08/f08002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f08002](image_fi/500587c08/f08002.png)'
- en: 'Figure 8-2: The MAX7219 in a surface-mount package type'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：MAX7219的表面贴装封装类型
- en: In this chapter, you’ll learn how to use the MAX7219 to control up to eight
    numeric LED digits. You’ll also learn how to use the MAX7219 to control interesting
    LED matrix modules that allow for scrolling text displays.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用MAX7219控制最多八个数字LED。您还将学习如何使用MAX7219控制有趣的LED矩阵模块，这些模块支持滚动文本显示。
- en: LED Numeric Displays
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LED数字显示
- en: LED numeric displays that use the MAX7219 come in many shapes and sizes, usually
    with four to eight digits fitted to the module. For our examples, we’re using
    an eight-digit module, which is easily available and great value for the money
    (see [Figure 8-3](#figure8-3)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MAX7219的LED数字显示有很多形状和尺寸，通常模块上装有四到八位数字。对于我们的示例，我们使用的是一个八位数字模块，价格实惠且性价比高（见[图8-3](#figure8-3)）。
- en: '![f08003](image_fi/500587c08/f08003.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![f08003](image_fi/500587c08/f08003.png)'
- en: 'Figure 8-3: The eight-digit LED module'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：八位数字LED模块
- en: These modules have the surface-mount version of the MAX7219, shown in [Figure
    8-2](#figure8-2), on the back. The modules usually include some inline header
    pins to allow for attaching control wires. If you haven’t already done so, solder
    these to your module, as shown in [Figure 8-4](#figure8-4).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块的背面有MAX7219的表面贴装版本，如[图8-2](#figure8-2)所示。模块通常包含一些内联的插头引脚，以便连接控制线。如果您还没有这样做，请将它们焊接到模块上，如[图8-4](#figure8-4)所示。
- en: '![f08004](image_fi/500587c08/f08004.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![f08004](image_fi/500587c08/f08004.png)'
- en: 'Figure 8-4: Inline header pins connected to an eight-digit LED module'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：内联插头引脚连接到八位数字LED模块
- en: Before you can use the numeric display, you’ll need to connect five wires to
    both the display and the Arduino. This is easily done by connecting male-to-female
    jumper wires to the header pins that you soldered to the board. Make the connections
    as shown in [Table 8-1](#table8-1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用数字显示器之前，您需要将五根线连接到显示器和Arduino。这可以通过将公对母跳线连接到您已焊接到板上的插头引脚来轻松完成。按照[表8-1](#table8-1)中所示的方式进行连接。
- en: 'Table 8-1: Connections Between the Display Module and Arduino'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表8-1：显示模块与Arduino之间的连接
- en: '| **Module pin label** | **Arduino pin** | **Module pin function** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **模块引脚标签** | **Arduino引脚** | **模块引脚功能** |'
- en: '| --- | --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Vcc | 5V | Power (+) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Vcc | 5V | 电源（+） |'
- en: '| GND | GND | Power (−) or ground |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND | 电源（−）或地面 |'
- en: '| DIN | D12 | Data in |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| DIN | D12 | 数据输入 |'
- en: '| CS | D10 | Chip select |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| CS | D10 | 芯片选择 |'
- en: '| CLK | D11 | Clock signal |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| CLK | D11 | 时钟信号 |'
- en: Installing the Library
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装库
- en: There are several Arduino libraries for the MAX7219\. These libraries vary according
    to the configuration of the display module used. We will use the LedControl library.
    You will need to download the library ZIP file from *https://github.com/wayoda/LedControl/*.
    Click **Clone or Download** and then **Download ZIP**, as shown in [Figure 8-5](#figure8-5).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种Arduino库可以用于MAX7219。这些库根据使用的显示模块配置不同而有所不同。我们将使用LedControl库。你需要从*https://github.com/wayoda/LedControl/*下载库的ZIP文件。点击**克隆或下载**，然后点击**下载ZIP**，如[图8-5](#figure8-5)所示。
- en: '![f08005](image_fi/500587c08/f08005.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f08005](image_fi/500587c08/f08005.png)'
- en: 'Figure 8-5: Downloading the LedControl library'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-5：下载LedControl库
- en: Once you have the ZIP file, install it as described in Chapter 7. Next, to use
    the display module, we will first examine a demonstration sketch that uses the
    required functions. Enter and upload the basic sketch shown in [Listing 8-1](#listing8-1).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了ZIP文件，按照第7章的描述进行安装。接下来，为了使用显示模块，我们将首先检查一个示例程序，使用所需的函数。输入并上传[清单8-1](#listing8-1)中显示的基本示例。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 8-1: Display module demonstration sketch'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-1：显示模块演示示例
- en: 'Let’s take a look at how the sketch in [Listing 8-1](#listing8-1) works. At
    1, we include the necessary code to load the library for the display module. The
    `LedControl()` function has four parameters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看[清单 8-1](#listing8-1)中的示例是如何工作的。在第1步，我们包含了用于加载显示模块库的必要代码。`LedControl()`函数有四个参数：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first three say which digital pins are connected (see [Table 8-1](#table8-1)),
    and the fourth parameter is the number of display modules connected to the Arduino—in
    this case one. (You can daisy-chain more than one module.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个参数指定了连接的数字引脚（见[表8-1](#table8-1)），第四个参数是连接到Arduino的显示模块数量——在此例中为一个。（你可以串联多个模块。）
- en: 'At 2, we have three functions that control aspects of the display. The first
    one turns the display on or off:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2步，我们有三个函数来控制显示的各个方面。第一个函数用来开启或关闭显示：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first parameter is the display. We use 0 because only one display is connected.
    If you have connected multiple displays, the second is display 1, the third is
    display 2, and so on. The second parameter specifies whether the display is on
    or off: `false` for on, `true` for off.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是显示器。我们使用0，因为只连接了一个显示器。如果你连接了多个显示器，第二个参数是显示器1，第三个是显示器2，依此类推。第二个参数指定显示器的开关状态：`false`表示开启，`true`表示关闭。
- en: 'The second function is used to set the brightness of the LEDs in the display:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数用于设置显示器中LED的亮度：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first parameter is the display number. The second is the brightness, which
    can be between 0 and 15 inclusive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是显示器编号。第二个是亮度，范围从0到15（包含）。
- en: 'The third function simply turns all the LEDs off:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个函数简单地将所有LED关闭：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is great for clearing previously displayed data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于清除之前显示的数据非常有用。
- en: 'At 3, we display a digit on the screen using `setDigit()`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步，我们使用`setDigit()`在屏幕上显示一个数字：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first parameter is the display number. The second is the physical position
    of the digit on the display; for an eight-digit display, this value ranges from
    7 (the leftmost digit) to 0 (the rightmost digit). The third parameter is the
    actual number to display (0 to 9). If you use 10 to 16, you can display the letters
    A to F, as we’ve done at 5. Finally, the fourth parameter controls the decimal
    point: `true` for on and `false` for off.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是显示器编号。第二个是数字在显示器上的物理位置；对于一个八位数显示器，这个值从7（最左边的数字）到0（最右边的数字）。第三个参数是要显示的实际数字（0到9）。如果使用10到16，你可以显示字母A到F，就像我们在第5步中做的那样。最后，第四个参数控制小数点：`true`表示开启，`false`表示关闭。
- en: 'You can also write the characters A to F, H, L, P, dash, period, and underscore
    using `setChar()`, as at 4:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`setChar()`写入字符A到F、H、L、P、破折号、句点和下划线，如第4步所示：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The parameters are the same, except you enclose the character with single quotes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 参数相同，唯一不同的是你用单引号括起来字符。
- en: Now that we’ve been through all the commands for showing numbers and characters
    on the display, let’s put them into action.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了所有用于在显示器上显示数字和字符的命令，接下来让我们将它们付诸实践。
- en: 'Project #26: Digital Stopwatch'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#26：数字秒表
- en: You learned about timing in Project 24 in Chapter 7, and you’ve just learned
    how to use a display module, so now you can combine these concepts to create a
    digital stopwatch. While not accurate to Olympic timing levels, this is a fun
    and useful project. Your stopwatch will be able to display milliseconds, seconds,
    minutes, and up to nine hours.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你在第7章的项目24中学习了定时方法，现在你刚刚学会了如何使用显示模块，因此你可以将这些概念结合起来创建一个数字秒表。虽然它的准确性无法与奥林匹克计时水平相媲美，但这是一个有趣且实用的项目。你的秒表将能够显示毫秒、秒、分钟以及最多九个小时。
- en: 'You will need to connect the ProtoShield (or equivalent circuit) as described
    in Chapter 7 and to the numeric display used earlier in this chapter. Then just
    upload the following sketch:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要连接ProtoShield（或等效电路），正如第7章中所描述的，并与本章早些时候使用的数字显示连接。然后只需上传以下草图：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A moment after the sketch has been uploaded, the display will start counting
    up, as shown in [Figure 8-6](#figure8-6).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图上传后的短短一会儿，显示器将开始计数，如[图8-6](#figure8-6)所示。
- en: '![f08006](image_fi/500587c08/f08006.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![f08006](image_fi/500587c08/f08006.png)'
- en: 'Figure 8-6: The stopwatch at work'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-6：秒表工作中的样子
- en: Just as we did in Project 24, in this sketch we use `millis()` to track the
    elapsed time. We have put the time calculation and display in the function `void
    displayResultLED()` 1.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在项目24中所做的那样，在这个草图中，我们使用`millis()`来追踪经过的时间。我们将时间计算和显示放在了`void displayResultLED()`函数中1。
- en: 'At 2, you can see how the elapsed time in milliseconds is broken down into
    hours, minutes, seconds, and milliseconds. Then, each digit of the display from
    left to right is filled with the corresponding time values, starting with hours
    3. The stopwatch controls are simple: when the user presses the button connected
    to digital input 2, the counter is reset to zero by making the starting time equal
    to the current value returned by `millis()` 4. When the button connected to digital
    input 3 is pressed 5, the display is frozen; this functionality is ideal for taking
    a lap reading. Note, however, that the counting continues and the display resumes
    after about five seconds.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在图2中，你可以看到毫秒数是如何被拆分为小时、分钟、秒和毫秒的。然后，显示器的每一位数字从左到右填充相应的时间值，从小时3开始。秒表的控制非常简单：当用户按下连接到数字输入2的按钮时，计数器会通过将起始时间设置为`millis()`函数当前返回的值来重置为零4。当按下连接到数字输入3的按钮时，显示会被冻结5；这个功能非常适合用于记录圈速。然而请注意，计时仍会继续，显示在大约五秒后会恢复。
- en: This project can easily be changed to display data in a simpler format—such
    as hours, minutes, and seconds—or to be used for longer periods, such as up to
    24 hours. But for now, let’s move on to a more complex project involving LED matrix
    display boards.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目可以很容易地修改为以更简单的格式显示数据——比如小时、分钟和秒——或者用于更长的时间段，例如最多24小时。但现在，让我们继续进行一个更复杂的项目，涉及LED矩阵显示板。
- en: 'Project #27: Using LED Matrix Modules'
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #27：使用LED矩阵模块'
- en: The MAX7219 can control up to 64 LEDs. These displayed numbers in the last project.
    Here, we’ll use modules that arrange the LEDs in an 8 × 8 matrix form that is
    ideal for more interesting applications, such as displaying fixed or scrolling
    text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: MAX7219可以控制最多64个LED。在上一个项目中，我们展示了这些数字。这里，我们将使用以8 × 8矩阵形式排列LED的模块，这种形式非常适合更有趣的应用，比如显示固定或滚动的文本。
- en: LED matrix modules are generally sold either as individual units or in sets
    of four; both are shown in [Figure 8-7](#figure8-7).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: LED矩阵模块通常以单独单元或四个一组的形式出售；两种形式如[图8-7](#figure8-7)所示。
- en: You may also see these advertised as kits; however, the cost savings is negligible,
    so save time with the preassembled versions. The LED displays fit onto the socketed
    pins on the module, as shown in [Figure 8-8](#figure8-8), allowing you to change
    colors easily.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些也可能作为套件出售；然而，节省的成本微乎其微，因此建议选择预组装版本来节省时间。LED显示器可以插入模块上的插座引脚，如[图8-8](#figure8-8)所示，使得更换颜色变得容易。
- en: '![f08007](image_fi/500587c08/f08007.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f08007](image_fi/500587c08/f08007.png)'
- en: 'Figure 8-7: LED matrix modules'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-7：LED矩阵模块
- en: '![f08008](image_fi/500587c08/f08008.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f08008](image_fi/500587c08/f08008.png)'
- en: 'Figure 8-8: A removable LED matrix'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-8：可拆卸的LED矩阵
- en: Take care when inserting the LED matrix into the module, as some LED matrices
    have pins that get bent easily. Experience has shown that you still need to solder
    inline header pins to the matrix modules. However, these pins are generally included
    with the module and fit neatly, as shown in [Figure 8-9](#figure8-9).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在将LED矩阵插入模块时要小心，因为有些LED矩阵的引脚容易弯曲。经验表明，你仍然需要将直排针焊接到矩阵模块上。不过，这些引脚通常会随模块一起提供，并且如[图8-9](#figure8-9)所示，能够整齐地适配。
- en: '![f08009](image_fi/500587c08/f08009.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![f08009](image_fi/500587c08/f08009.png)'
- en: 'Figure 8-9: Inline header pins connected to a matrix module'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-9：与矩阵模块连接的内联头引脚
- en: Once again, before you can use the matrix modules, you’ll need to connect five
    wires to both the module and the Arduino, just as you did with the numeric display.
    Make the connections as shown in [Table 8-2](#table8-2).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在使用矩阵模块之前，你需要像连接数字显示器那样，将五根线连接到模块和Arduino。按照[表8-2](#table8-2)所示进行连接。
- en: 'Table 8-2: Connections Between the Matrix Module and Arduino'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表8-2：矩阵模块与Arduino之间的连接
- en: '| **Module pin label** | **Arduino pin** | **Module pin function** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **模块引脚标签** | **Arduino引脚** | **模块引脚功能** |'
- en: '| --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Vcc | 5V | Power (+) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| Vcc | 5V | 电源（+） |'
- en: '| GND | GND | Power (−) or ground |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND | 电源（−）或地 |'
- en: '| DIN | D11 | Data in |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| DIN | D11 | 数据输入 |'
- en: '| CS | D9 | Chip select |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| CS | D9 | 芯片选择 |'
- en: '| CLK | D13 | Clock signal |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| CLK | D13 | 时钟信号 |'
- en: Installing the Library
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装库
- en: You’ll use a different library for these modules than for the MAX7219\. To get
    the library, visit [https://github.com/bartoszbielawski/LEDMatrixDriver/](https://github.com/bartoszbielawski/LEDMatrixDriver/)
    and click **Clone or Download**, then **Download ZIP**, as shown in [Figure 8-10](#figure8-10).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为这些模块使用与MAX7219不同的库。要获取该库，请访问[https://github.com/bartoszbielawski/LEDMatrixDriver/](https://github.com/bartoszbielawski/LEDMatrixDriver/)，点击**克隆或下载**，然后选择**下载ZIP**，如[图8-10](#figure8-10)所示。
- en: '![f08010](image_fi/500587c08/f08010.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![f08010](image_fi/500587c08/f08010.png)'
- en: 'Figure 8-10: Downloading the LEDMatrixDriver library'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-10：下载LEDMatrixDriver库
- en: After you have downloaded the ZIP file, install it as described in Chapter 7.
    Enter and upload the sketch that follows. (At this point, I’d like to remind you
    that all the code in this book can be downloaded from [https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/).)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下载ZIP文件后，按照第7章的描述进行安装。接着输入并上传以下草图。（在此，我想提醒一下，书中所有的代码都可以从[https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/)下载。）
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A moment or two after the sketch has uploaded, you should see text scrolling
    from right to left across your LED display modules.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后过一会儿，你应该能看到文字从右到左滚动显示在LED显示模块上。
- en: 'Now let’s dig in to see how this sketch works. There’s a lot of code, but don’t
    let that put you off. Starting at 1, we call the required functions to use the
    library and set up the displays. At 2, an array of characters contains the text
    to show on the display modules. You can change this later if you’d like. You can
    also adjust the speed of scrolling by altering the value at 3: the smaller the
    number, the faster the scroll speed.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入了解一下这个草图是如何工作的。代码量很大，但不要因此感到害怕。从1开始，我们调用所需的函数来使用库并设置显示器。在2处，一个字符数组包含了要显示在显示模块上的文本。你可以稍后修改它。如果需要，你还可以通过改变3处的数值来调整滚动速度：数字越小，滚动速度越快。
- en: 'At 4, we have two functions. This function turns the display on or off:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在4处，我们有两个函数。这个函数用于开关显示：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And this one sets the brightness of the LEDs in the display module:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置了显示模块中LED的亮度：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `setIntensity()` function takes values between 0 (dim) and 9 (bright).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`setIntensity()`函数的值介于0（暗）和9（亮）之间。'
- en: The font used by the display is defined in the huge array at 5. We’ll return
    to that in the next section. Finally, the functions `drawstring()` 6 and `scrollText()`
    7 are required for display operation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 显示器使用的字体定义在5处的一个巨大数组中。我们将在下一节中详细介绍它。最后，`drawstring()` 6和`scrollText()` 7函数是显示操作所必需的。
- en: Editing the Display Font
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑显示字体
- en: You can easily specify which characters are usable in the display by changing
    the data in the `byte font` array 5. First, recall that each matrix module is
    made up of eight rows of eight LEDs. This means you have 64 LEDs available for
    any character you create.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改`byte font`数组5中的数据，轻松指定哪些字符可以在显示中使用。首先，回顾一下，每个矩阵模块由八行八个LED组成。这意味着你有64个LED可用于创建任何字符。
- en: 'Each row of LEDs is defined by a hexadecimal number, and eight of these hexadecimal
    numbers represent a character. For example, the letter N is defined by:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行LED由一个十六进制数定义，八个这样的十六进制数代表一个字符。例如，字母N由以下方式定义：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To visualize the character, we convert the hexadecimal numbers to binary. For
    example, our letter N converted from hexadecimal to binary is:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示字符，我们将十六进制数字转换为二进制。例如，我们的字母N从十六进制转换为二进制如下：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can see how the 1s represent the character against a field of 0s, with
    the 1s being LEDs turned on and the 0s being LEDs turned off. So, to create your
    own characters, just reverse the process. For example, a nice smiley face can
    be represented as:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到1表示字符与0的场域，其中1代表点亮的LED，0代表熄灭的LED。因此，要创建自己的字符，只需反转这一过程。例如，一个漂亮的笑脸可以表示为：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This would be represented in the array as:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在数组中表示为：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can either replace an existing line in the `font` array with your new data
    or add your data to the end of the array as another element. If you add another
    line, you need to increase the first parameter in the `byte` declaration so that
    the first parameter equals the number of defined characters (in this case, 96):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用新的数据替换`font`数组中现有的某一行，或者将数据作为另一个元素添加到数组末尾。如果添加另一行，你需要增加`byte`声明中的第一个参数，使其等于已定义字符的数量（在本例中为96）：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You’re probably wondering by now how to refer to your custom character in the
    sketch. The display library uses the character order in the ASCII chart, which
    can be found at [https://www.arduino.cc/en/Reference/ASCIIchart/](https://www.arduino.cc/en/Reference/ASCIIchart/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能在想如何在草图中引用你的自定义字符。显示库使用的是ASCII图表中的字符顺序，可以在[https://www.arduino.cc/en/Reference/ASCIIchart/](https://www.arduino.cc/en/Reference/ASCIIchart/)找到。
- en: 'If you add another character after the last one in the sketch (which is Z by
    default), the next character in the table is [. Thus, to scroll three smiley faces
    across the display, you would set the line with text to display to:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在草图中的最后一个字符（默认是Z）后添加另一个字符，则下一个字符表中的字符是[。因此，要在显示器上滚动三个笑脸，你需要将显示文本的行设置为：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: An example of this output can be seen in [Figure 8-11](#figure8-11).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这种输出的示例可以在[图 8-11](#figure8-11)中看到。
- en: '![f08011](image_fi/500587c08/f08011.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![f08011](image_fi/500587c08/f08011.png)'
- en: 'Figure 8-11: Using custom characters to display smiley faces'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-11：使用自定义字符显示笑脸
- en: Looking Ahead
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: 'Now that you know how to use them, working with LED numeric and matrix displays
    will be a cinch. However, there are more types of displays, so turn to the next
    chapter to learn about another one: liquid crystal displays.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用它们了，操作LED数字和矩阵显示器将变得轻松。 However, 还有更多种类的显示器，接下来翻到下一章了解另一种：液晶显示器。
