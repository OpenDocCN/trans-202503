["```\nint main(int argc, const char* argv[]) {\n    ...\n    if((YES == [NSProcessInfo.processInfo.arguments containsObject:@\"-h\"]) ||\n        (YES == [NSProcessInfo.processInfo.arguments containsObject:@\"-help\"])) {\n        usage();\n        goto bail;\n    }\n\n    if(YES == [NSProcessInfo.processInfo.arguments containsObject:@\"-whosthere\"]) {\n        ...\n        cmdlineScan();\n    }\n    ...\n} \n```", "```\n@interface PluginBase : NSObject\n    @property(retain, nonatomic)NSString* name;\n    @property(retain, nonatomic)NSString* icon;\n    @property(retain, nonatomic)NSString* description;\n\n    @property(retain, nonatomic)NSMutableArray* allItems;\n    @property(retain, nonatomic)NSMutableArray* flaggedItems;\n    @property(retain, nonatomic)NSMutableArray* unknownItems;\n\n    @property(copy, nonatomic) void (^callback)(ItemBase*);\n    ....\n@end \n```", "```\n-(void)scan;\n-(void)reset;\n-(void)processItem:(ItemBase*)item; \n```", "```\n@implementation PluginBase\n...\n-(void)scan {\n    @throw [NSException exceptionWithName:kExceptName\n    reason:[NSString stringWithFormat:kErrFormat, NSStringFromSelector(_cmd),\n    [self class]] userInfo:nil];\n}\n@end \n```", "```\n-(void)processItem:(ItemBase*)item {\n    ...\n    @synchronized(self.allItems) {\n        [self.allItems addObject:item];\n    }\n} \n```", "```\nstatic NSString* const SUPPORTED_PLUGINS[] = {@\"AuthorizationPlugins\",\n@\"BrowserExtensions\", @\"BTM\", @\"CronJobs\", @\"DirectoryServicesPlugins\",\n@\"DockTiles\", @\"EventRules\", @\"Extensions\", @\"Kexts\", @\"LaunchItems\",\n@\"DylibInserts\", @\"DylibProxies\", @\"LoginItems\", @\"LogInOutHooks\",\n@\"PeriodicScripts\", @\"QuicklookPlugins\", @\"SpotlightImporters\",\n@\"StartupScripts\", @\"SystemExtensions\"};\n\nPluginBase* pluginObj = nil;\n\nfor(NSUInteger i = 0; i < sizeof(SUPPORTED_PLUGINS)/sizeof(SUPPORTED_PLUGINS[0]); i++) {\n    pluginObj = [[NSClassFromString(SUPPORTED_PLUGINS[i]) alloc] init]; ❶\n    ...\n} \n```", "```\n@interface ItemBase : NSObject\n    @property(nonatomic, retain)PluginBase* plugin;\n\n    @property BOOL isTrusted;\n    @property(retain, nonatomic)NSString* name;\n    @property(retain, nonatomic)NSString* path;\n    @property(nonatomic, retain)NSDictionary* attributes;\n\n    -(id)initWithParams:(NSDictionary*)params;\n    -(NSString*)pathForFinder;\n    -(NSString*)toJSON;\n\n@end \n```", "```\nNSMutableString* output = [NSMutableString string];\n...\nfor(NSUInteger i = 0; i < sizeof(SUPPORTED_PLUGINS)/sizeof(SUPPORTED_PLUGINS[0]); i++) {\n    ...\n    [plugin scan];\n\n    for(ItemBase* item in plugin.allItems) {\n        ...\n [output appendFormat:@\"{%@},\", [item toJSON]];\n    }\n    ...\n} \n```", "```\n@implementation File\n-(NSString*)toJSON {\n    NSData* jsonData = nil;\n\n    jsonData =\n    [NSJSONSerialization dataWithJSONObject:self.signingInfo options:kNilOptions error:NULL]; ❶\n\n    NSString* fileSigs =\n    [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n\n    jsonData =\n    [NSJSONSerialization dataWithJSONObject:self.hashes options:kNilOptions error:NULL]; ❷\n\n    NSString* fileHashes = [[NSString alloc] initWithData:jsonData encoding:\n    NSUTF8StringEncoding];\n    ...\n} \n```", "```\nNSString* vtDetectionRatio = [NSString stringWithFormat:@\"%lu/%lu\",\n(unsigned long)[self.vtInfo[VT_RESULTS_POSITIVES] unsignedIntegerValue],\n(unsigned long)[self.vtInfo[VT_RESULTS_TOTAL] unsignedIntegerValue]]; \n```", "```\nNSString* json = [NSString stringWithFormat:@\"\\\"name\\\": \\\"%@\\\", \\\"path\\\":\n\\\"%@\\\", \\\"plist\\\": \\\"%@\\\", \\\"hashes\\\": %@, \\\"signature(s)\\\": %@, \\\"VT\ndetection\\\": \\\"%@\\\"\", self.name, self.path, filePlist, fileHashes,\nfileSigs, vtDetectionRatio]; \n```", "```\n% **KnockKnock.app/Contents/MacOS/KnockKnock -whosthere -pretty**\n{\n    \"path\" : \"\\/Users\\/User\\/.local\\/softwareupdate\",\n    \"hashes\" : {\n        \"md5\" : \"9DC9D317A9B63599BBC1CEBA6437226E\",\n        \"sha1\" : \"EE0678E58868EBD6603CC2E06A134680D2012C1B\"\n    },\n    \"VT detection\" : \"35\\/76\",\n    \"name\" : \"softwareupdate\",\n    \"plist\" : \"\\/Library\\/LaunchDaemons\\/com.apple.softwareupdate.plist\",\n    \"signature(s)\" : {\n        \"signatureStatus\" : -67062\n    }\n} \n```", "```\n#import \"dumpBTM.h\"\n\n-(void)scan {\n    ...\n    if(@available(macOS 13, *)) {\n        NSDictionary* contents = parseBTM(nil);\n        ...\n    }\n} \n```", "```\nNSMutableDictionary* parameters = [NSMutableDictionary dictionary];\n\nparameters[KEY_RESULT_PATH] = item[KEY_BTM_ITEM_EXE_PATH];\n\nif(nil != item[KEY_BTM_ITEM_PLIST_PATH]) {\n    parameters[KEY_RESULT_PLIST] = item[KEY_BTM_ITEM_PLIST_PATH];\n}\n\nFile* fileObj = [[File alloc] initWithParams:parameters]; \n```", "```\n% **KnockKnock.app/Contents/MacOS/KnockKnock -whosthere -pretty**\n...\n\"Background Managed Tasks\" : [\n    {\n        \"path\" : \"\\/Users\\/User\\/Library\\/Final_Presentation.app\\/Contents\\/MacOS\\/usrnode\",\n        \"hashes\" : {\n            \"md5\" : \"C68A856EC8F4529147CE9FD3A77D7865\",\n            \"sha1\" : \"758F10BD7C69BD2C0B38FD7D523A816DB4ADDD90\"\n        },\n        \"VT detection\" : \"41\\/75\",\n        \"name\" : \"usrnode\",\n        \"plist\" : \"n\\/a\",\n        \"signature(s)\" : {\n            \"signatureStatus\" : -2147409652\n        }\n    }\n] \n```", "```\n-(NSArray*)getInstalledBrowsers {\n    NSMutableArray* browsers = [NSMutableArray array];\n  ❶ CFArrayRef browserIDs = LSCopyAllHandlersForURLScheme(CFSTR(\"https\"));\n\n    for(NSString* browserID in (__bridge NSArray *)browserIDs) {\n        CFURLRef browserURL = NULL;\n      ❷ LSFindApplicationForInfo(kLSUnknownCreator,\n        (__bridge CFStringRef)(browserID), NULL, NULL, &browserURL);\n\n        [browsers addObject:[(__bridge NSURL *)browserURL path]];\n        ...\n    }\n    ...\n    return browsers;\n} \n```", "```\n#define PRODUCT_URL @\"https://objective-see.org/products/knockknock.html\"\n\nNSMutableArray* browsers = [NSMutableArray array];\nif(@available(macOS 12.0, *)) {\n    for(NSURL* browser in [NSWorkspace.sharedWorkspace URLsForApplicationsToOpenURL:\n    [NSURL URLWithString:PRODUCT_URL]]) {\n        [browsers addObject:browser.path];\n    }\n} \n```", "```\nNSArray* installedBrowsers = [self getInstalledBrowsers];\n\nfor(NSString* installedBrowser in installedBrowsers) {\n    if(NSNotFound != [installedBrowser rangeOfString:@\"Safari.app\"].location) {\n        [self scanExtensionsSafari:installedBrowser];\n    }\n    ...\n} \n```", "```\nfor(NSString* match in @[@\"com.apple.Safari.extension\", @\"com.apple.Safari.content-blocker\"]) {\n    NSData* taskOutput = execTask(PLUGIN_KIT, @[@\"-mAvv\", @\"-p\", match]);\n    ...\n} \n```", "```\n% **pluginkit -mAvv -p com.apple.Safari.extension**\n...\norg.adblockplus.adblockplussafarimac.AdblockPlusSafariToolbar\nPath = /Applications/Adblock Plus.app/Contents/PlugIns/Adblock Plus Toolbar.appex\nUUID = 87C62A05-974F-4E6C-81EE-304D4548DA60\nSDK = com.apple.Safari.extension\nParent Bundle = /Applications/Adblock Plus.app\nDisplay Name = ABP Control Panel\nShort Name = $(PRODUCT_NAME)\nParent Name = Adblock Plus\nPlatform = macOS \n```", "```\n-(void)parseSafariExtensions:(NSData*)extensions browserPath:(NSString*)browserPath {\n    NSMutableDictionary* extensionInfo = [NSMutableDictionary dictionary];\n\n    extensionInfo[KEY_RESULT_PLUGIN] = self;\n    extensionInfo[KEY_EXTENSION_BROWSER] = browserPath;\n\n    for(NSString* line in\n    [[[NSString alloc] initWithData:extensions encoding:NSUTF8StringEncoding]\n    componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]]) {\n        NSArray* components = [[line stringByTrimmingCharactersInSet:\n        [NSCharacterSet whitespaceCharacterSet]] componentsSeparatedByString:@\"=\"];\n        // key and value set to first and last component\n\n        if(YES == [key isEqualToString:@\"Display Name\"]) {\n            extensionInfo[KEY_RESULT_NAME] = value;\n        } else if(YES == [key isEqualToString:@\"Path\"]) {\n            extensionInfo[KEY_RESULT_PATH] = value;\n        } else if(YES == [key isEqualToString:@\"UUID\"]) {\n            extensionInfo[KEY_EXTENSION_ID] = value;\n        }\n        ...\n    }\n} \n```", "```\ndetails = [NSDictionary dictionaryWithContentsOfFile:\n[NSString stringWithFormat:@\"%@/Contents/Info.plist\",\nextensionInfo[KEY_RESULT_PATH]]][@\"NSHumanReadableDescription\"];\n\nextensionInfo[KEY_EXTENSION_DETAILS] = details;\n\nExtension* extensionObj = [[Extension alloc] initWithParams:extensionInfo]; \n```", "```\n<key>LSEnvironment</key>\n<dict>\n  <key>DYLD_INSERT_LIBRARIES</key>\n  <string>/Applications/Safari.app/Contents/Resources/UnHackMeBuild</string>\n</dict>\n... \n```", "```\n% **system_profiler SPApplicationsDataType -xml**\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n...\n<plist version=\"1.0\">\n<array>\n    <dict>\n    ...\n    <key>_items</key>\n    <array>\n        <dict>\n             <key>_name</key>\n             <string>KnockKnock</string>\n             <key>arch_kind</key>\n             <string>arch_arm_i64</string>\n             ...\n             <key>path</key>\n             <string>/Applications/KnockKnock.app</string>\n             <key>signed_by</key>\n             <array>\n                <string>Developer ID Application: Objective-See, LLC (VBG97UB4TA)</string>\n                <string>Developer ID Certification Authority</string>\n                <string>Apple Root CA</string>\n             </array>\n             <key>version</key>\n             <string>2.5.0</string>\n        </dict>\n        ... \n```", "```\n-(void)enumerateApplications {\n    NSData* taskOutput = execTask(SYSTEM_PROFILER, @[@\"SPApplicationsDataType\", @\"-xml\"]); ❶\n\n    NSArray* serializedOutput =\n    [NSPropertyListSerialization propertyListWithData:taskOutput\n    options:kNilOptions format:NULL error:NULL]; ❷\n\n    self.applications = serializedOutput[0][@\"_items\"]; ❸\n} \n```", "```\n-(void)scanApplications {\n    ...\n    for(NSDictionary* installedApp in sharedItemEnumerator.applications) { ❶\n        NSBundle* appBundle = [NSBundle bundleWithPath:installedApp[@\"path\"]]; ❷\n        NSURL* appPlist = appBundle.infoDictionary[@\"CFBundleInfoPlistURL\"]; ❸\n        NSDictionary* enviroVars = appBundle.infoDictionary[@\"LSEnvironment\"]; ❹\n\n        if((nil == enviroVars) ||\n            (nil == enviroVars[@\"DYLD_INSERT_LIBRARIES\"])) {\n            continue;\n        }\n\n        NSString* dylibPath = enviroVars[@\"DYLD_INSERT_LIBRARIES\"]; ❺\n\n        File* fileObj = [[File alloc] initWithParams:\n        @{KEY_RESULT_PLUGIN:self, KEY_RESULT_PATH:dylibPath, KEY_RESULT_PLIST:appPlist.path}];\n\n        [super processItem:fileObj];\n    }\n} \n```", "```\n<key>DYLD_INSERT_LIBRARIES</key>\n<string>/Applications/Safari.app/Contents/Resources/UnHackMeBuild</string> \n```", "```\n% **file \"/Applications/Signal.app/Contents/Frameworks/Electron**\n**Framework.framework/Electron Framework\"**\nMach-O 64-bit dynamically linked shared library arm64 \n```", "```\n% **ls -l /System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/**\n**32023/Libraries/lib/clang/32023.26/lib/darwin/libair_rt_iosmac.rtlib**\n-rwxr-xr-x  1 root  wheel  140328 Oct 19 21:35\n\n% **file /System/Library/PrivateFrameworks/GPUCompiler.framework/Versions/**\n**32023/Libraries/lib/clang/32023.26/lib/darwin/libair_rt_iosmac.rtlib**\ncurrent ar archive \n```", "```\nBOOL isBinary(NSString* file) {\n    static dispatch_once_t once;\n    static NSMutableArray* supportedArchitectures = nil;\n\n    dispatch_once(&once, ^ {\n        supportedArchitectures = ❶\n        [@[[NSNumber numberWithInt:kCFBundleExecutableArchitectureI386],\n        [NSNumber numberWithInt:kCFBundleExecutableArchitectureX86_64]] mutableCopy];\n\n        if(@available(macOS 11, *)) { ❷\n            [supportedArchitectures addObject:\n            [NSNumber numberWithInt:kCFBundleExecutableArchitectureARM64]];\n        }\n    });\n\n    CFArrayRef architectures = CFBundleCopyExecutableArchitecturesForURL( ❸\n    (__bridge CFURLRef)[NSURL fileURLWithPath:file]);\n\n    NSNumber* matchedArchitecture = [(__bridge NSArray*)architectures\n    firstObjectCommonWithArray:supportedArchitectures]; ❹\n    ...\n    return nil != matchedArchitecture;\n} \n```", "```\n-(NSMutableArray*)enumLinkedDylibs:(NSArray*)runningProcs {\n    NSMutableArray* dylibs = [NSMutableArray array];\n\n    for(NSString* runningProc in runningProcs) { ❶\n        MachO* machoParser = [[MachO alloc] init]; ❷\n        [machoParser parse:runningProc classify:NO];\n\n        [dylibs addObjectsFromArray:machoParser.binaryInfo[KEY_LC_LOAD_DYLIBS]]; ❸\n        [dylibs addObjectsFromArray:machoParser.binaryInfo[KEY_LC_LOAD_WEAK_DYLIBS]];\n    }\n    ...\n    return [[NSSet setWithArray:dylibs] allObjects]; ❹\n} \n```", "```\n-(NSMutableArray*)findProxies:(NSMutableArray*)dylibs {\n    NSMutableArray* proxies = [NSMutableArray array];\n\n    for(NSString* dylib in dylibs) {\n      ❶ MachO* machoParser = [[MachO alloc] init];\n        [machoParser parse:dylib classify:NO];\n\n      ❷ if(MH_DYLIB != [[machoParser.binaryInfo[KEY_MACHO_HEADERS]\n        firstObject][KEY_HEADER_BINARY_TYPE] intValue]) {\n            continue;\n        }\n\n      ❸ if([machoParser.binaryInfo[KEY_LC_REEXPORT_DYLIBS] count]) {\n            [proxies addObject:dylib];\n        }\n    }\n    return proxies;\n} \n```"]