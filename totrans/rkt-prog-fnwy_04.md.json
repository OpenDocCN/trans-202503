["```\n> (require plot)\n```", "```\n(plot (function sin #:color \"Blue\")\n      #:x-min (* -2 pi) #:x-max (* 2 pi)\n      #:title \"The Sine Function\")\n```", "```\n(plot (list\n       (axes) ; can also use (axis x y) to specify location\n       (function sin #:color \"Blue\" #:label \"sin\" #:style 'dot)\n       (function cos 0 (* 2 pi) #:color \"red\"  #:label \"cos\"))\n      #:x-min (* -2 pi) #:x-max (* 2 pi)\n      #:y-min -2 #:y-max 2\n      #:title \"Sine and Cosine\" \n      #:x-label \"X\" \n      #:y-label #f) ; suppress y-axis label\n```", "```\n(plot (list (axes)\n            (function sin #:color \"Blue\" #:label \"sin\" #:style 'dot)\n            (inverse sqr -2 2 #:color \"red\" #:label \"x^2\" #:width 2))\n      #:x-min (* -2 pi) #:x-max (* 2 pi)\n      #:y-min -2 #:y-max 2\n      #:title \"Sine and Square\" \n      #:x-label \"X\" \n      #:y-label #f\n      #:legend-anchor 'bottom-left)\n```", "```\n   #lang at-exp racket\n   (require infix plot)\n\n   (define r 30)\n   (define off (+ 5 (* 2 r)))\n\n   ; algebraic half-circles\n➊ (define (c1 x) @${ sqrt[r^2 - x^2]})\n➋ (define (c2 x) @${-sqrt[r^2 - x^2]})\n\n   ; parametric circle\n➌ (define (cp t) @${vector[off + r*cos[t], r*sin[t]]})\n\n   (plot (list\n          (axes)\n          (function c1 (- r) r #:color \"blue\" #:label \"c1\")\n          (function c2 (- r) r #:style 'dot #:label \"c2\")\n     ➍ (parametric cp 0 (* 2 pi) #:color \"red\" #:label \"cp\" #:width 2))\n         #:x-min (- r)\n         #:x-max (+ off r)\n         #:y-min (- r)\n         #:y-max (+ off r)\n         #:legend-anchor 'top-right)\n```", "```\n#lang at-exp racket\n(require infix plot)\n\n(define r 30)\n\n(define (cycloid t) @${vector[r*(t - sin[t]),  r*(1-cos[t])]})\n\n(plot (list\n       (axes)\n       (parametric cycloid 0 (* 2 pi)\n                   #:color \"red\"\n                   #:samples 1000))\n      #:x-min 0\n      #:x-max (* r 2 pi)\n      #:y-min 0\n      #:y-max (* r 2 pi))\n```", "```\n#lang at-exp racket\n(require infix plot)\n\n(define r 20)\n(define R (* r 3))\n\n(define (hypocycloid phi)\n  @${vector[\n    (R-r)*cos[phi] + r*cos[(R-r)/r * phi],\n    (R-r)*sin[phi] - r*sin[(R-r)/r * phi]]})\n\n(plot (list\n       (parametric (λ (t) @${vector[R*cos[t], R*sin[t]]})\n                   0 (* r 2 pi)\n                   #:color \"black\"\n                   #:width 2)\n       (parametric hypocycloid\n                   0 (* r 2 pi)\n                   #:color \"red\"\n                   #:width 2))\n      #:x-min (- -10 R ) #:x-max (+ 10 R )\n      #:y-min (- -10 R ) #:y-max (+ 10 R )\n      #:x-label #f #:y-label #f\n      )\n```", "```\n#lang racket\n(require plot)\n\n(parameterize ([plot-width    250]\n               [plot-height   250]\n               [plot-x-label  #f]\n               [plot-y-label  #f])\n\n  (define lim 30)\n  (plot (list\n         (points '(#(0 0))\n                 #:size 300\n                 #:sym 'fullcircle1\n                 #:color \"black\"\n                 #:fill-color \"yellow\")\n         (points '(#(-5 5) #(5 5))\n                 #:size 10\n                 #:fill-color \"black\")\n         (points '(#(0 -5))\n                 #:size 30\n                 #:sym 'fullcircle1\n                 #:color \"black\"\n                 #:fill-color \"black\"))\n        #:x-min (- lim) #:x-max (+ lim)\n        #:y-min (- lim) #:y-max (+ lim)))\n```", "```\n#lang racket\n(require plot)\n\n(define pts (for/list ([i (in-range 0 6)]) (vector i (sqr i))))\n\n(plot (list\n       (lines pts\n               #:width 2\n               #:color \"green\")\n       (points pts\n               #:sym 'fulldiamond\n               #:color \"red\"\n               #:fill-color \"red\"))\n      #:x-min -0.5 #:x-max 5.5\n      #:y-min -0.5 #:y-max 26)\n```", "```\n(parameterize\n    ([plot-width 150]\n     [plot-height 150]\n     [plot-tick-size 0]\n     [plot-font-size 0]\n     [plot-x-label  #f]\n     [plot-y-label  #f])\n\n  (list (plot (polar (λ (θ) 1) 0 (* 2 pi))\n              #:x-min -1 #:x-max 1\n              #:y-min -1 #:y-max 1)\n        (plot (polar (λ (θ) θ) 0 (* 2.5 pi))\n              #:x-min -8 #:x-max 8\n              #:y-min -8 #:y-max 8)\n        ))\n```", "```\n#lang at-exp racket\n(require infix plot)\n\n(parameterize\n    ([plot-width 200]\n     [plot-height 200]\n     [plot-tick-size 0]\n     [plot-font-size 0]\n     [plot-x-label  #f]\n     [plot-y-label  #f])\n\n  (plot (list\n         (polar-axes #:number 8)\n         (polar (λ (t) @${sin[2*t]})  0 (* 2 pi)\n         #:x-min -1 #:x-max 1\n         #:y-min -1 #:y-max 1))))\n```", "```\n(parameterize\n     ([plot-width 200]\n     [plot-height 200]\n     [plot-tick-size 0]\n     [plot-font-size 0]\n     [plot-x-label  #f]\n     [plot-y-label  #f])\n\n  (define (rose k)\n    (plot (polar (λ (t) @${sin[k*t]})  0 (* 4 pi)\n                 #:x-min -1 #:x-max 1\n                 #:y-min -1 #:y-max 1)))\n  (for/list ([k '(1 1.5 2 2.5 3 4 5)]) (rose k)))\n```", "```\n(define ϕ (/ (add1 (sqrt 5)) 2))\n(define π pi)\n(plot (polar (λ (θ) (expt ϕ (* θ (/ 2 π))))\n             0 (* 4 pi)\n             #:x-min -20 #:x-max 50\n             #:y-min -40 #:y-max 30\n             #:color \"red\")\n      #:title \"Golden Spiral\"\n      #:x-label #f ; suppress axis labels\n      #:y-label #f)\n```", "```\n> (require racket/draw)\n```", "```\n> (define drawing (make-bitmap 50 50)) ; a 50x50 bitmap\n```", "```\n> (define dc (new bitmap-dc% [bitmap drawing]))\n```", "```\n> (send dc set-pen \"black\" 2 'solid)\n> (send dc set-pen (new pen% [color \"black\"] [width 2] [style 'solid]))\n```", "```\n> (define cyan (make-object color% 0 255 255))\n> (send dc set-pen cyan 2 'solid)\n```", "```\n> (define cyan (make-color 0 255 255))\n> (send dc set-pen cyan 2 'solid)\n```", "```\n> (send dc set-brush \"blue\" 'cross-hatch)\n> (send dc set-brush (new brush% [color \"red\"] [style 'solid]))\n```", "```\n(send dc set-brush (make-brush #:color \"red\" #:style 'solid))\n```", "```\n> (send dc draw-line 10 10 30 25)\n```", "```\n> (print drawing)\n```", "```\n> (send dc draw-rectangle 0 0 50 25)\n```", "```\n> (send dc draw-ellipse 10 10 30 25)\n```", "```\n> (print drawing)\n```", "```\n> (send dc draw-text \"Hello, World!\" 10 10)\n```", "```\n#lang racket\n\n(require racket/draw)\n\n(define drawing (make-bitmap 200 100)) ; a 200x100 bitmap\n(define dc (new bitmap-dc% [bitmap drawing]))\n\n; background\n(send dc set-brush (new brush% [color \"yellow\"]))\n(send dc draw-rectangle 0 0 200 100)\n\n; antenna\n(send dc draw-line 160 5 160 50)\n(send dc set-brush (new brush% [color \"gray\"]))\n(send dc draw-rectangle 155 45 10 5)\n\n; body\n(send dc set-pen \"black\" 2 'solid)\n(send dc set-brush (new brush% [color \"gray\"]))\n(send dc draw-rectangle 60 20 80 30)\n\n(send dc set-brush (new brush% [color \"red\"]))\n(define c (make-object color% 0 255 255))\n(send dc set-pen c 2 'solid)\n(send dc draw-rectangle 20 50 160 30)\n\n; wheels\n(send dc set-pen \"black\" 2 'solid)\n(send dc set-brush (new brush% [color \"blue\"]))\n(send dc draw-ellipse  40 60 40 40)\n(send dc draw-ellipse 120 60 40 40)\n\n(send dc draw-text \"This is a car?\" 5 1)\n\n(print drawing)\n```", "```\n   > (define mset {mutable-set 5 1/2 7 12 1/2})\n   > mset\n   (mutable-set 5 1/2 7 12)\n\n   > (set-member? mset 7)\n   #t\n\n   > (set-member? mset 9)\n   #f\n\n➊ > (set-add mset 9)\n   . . set-add:\n     expected: (not/c set-mutable?)\n     given mutable set: (mutable-set 5 1/2 7 12)\n     argument position: 1st\n\n   > (set-add! mset 9)\n   > mset\n   (mutable-set 5 1/2 7 9 12)\n\n➋ > (set-add! mset 7)\n   > mset\n   (mutable-set 5 1/2 7 9 12)\n\n   > (define iset (set 3 8 9 7 4))\n\n   > iset\n   (set 9 3 7 4 8)\n\n   > (set-add iset 2)\n   (set 9 3 7 2 4 8)\n\n   > (set-add iset 3) ; note, no change in output\n   (set 9 3 7 2 4 8)\n\n➌ > (set-add! iset 2)\n   . . set-add!:\n     expected: set-mutable?\n     given immutable set: (set 9 3 7 4 8)\n     argument position: 1st\n```", "```\n#lang racket\n#lang racket\n(require racket/draw)\n\n(define WIDTH 150)\n(define HEIGHT 100)\n\n(define venn (make-bitmap WIDTH HEIGHT))\n(define dc (new bitmap-dc% [bitmap venn]))\n\n(send dc scale 1.0 -1.0)\n(send dc translate (/ WIDTH 2) (/ HEIGHT -2))\n(send dc set-smoothing 'smoothed) \n(send dc set-pen \"black\" 2 'solid)\n\n(define IN-BRUSH (new brush% [color \"green\"]))\n(define OUT-BRUSH (new brush% [color (make-object color% 220 220 220)]))\n```", "```\n(define (rect x y w h b)\n  (let ([x (- x (/ w 2))]\n        [y (- y (/ h 2))])\n    (send dc set-brush b)\n    (send dc draw-rectangle x y w h)))\n\n(define (circle x y r b)\n  (let ([x (- x r)]\n        [y (- y r)])\n    (send dc set-brush b)\n    (send dc draw-ellipse x y (* 2 r) (* 2 r))))\n```", "```\n(define (universe b) (rect 0 0 (- WIDTH 10) (- HEIGHT 10) b))\n```", "```\n> (universe OUT-BRUSH)\n> (circle 0 0 30 IN-BRUSH)\n> venn\n```", "```\n> (send dc erase)\n> (universe IN-BRUSH)\n> (circle 0 0 30 OUT-BRUSH) \n> venn\n```", "```\n(define (piscis x y r b)\n  (let* ([y (- y r)]\n         [2r (* 2 r)]\n         [yi (sqrt (- (sqr r) (sqr x)))] ; y-intersection\n         [π pi]\n      ➊ [ϕ (asin (/ yi r))]\n      ➋ [θ (- π ϕ)]\n      ➌ [path (new dc-path%)])\n    (send dc set-brush b)\n ➍ (send path move-to 0 (- yi))\n ➎ (send path arc (- x r)     y 2r 2r  θ    (+ π  ϕ))\n ➏ (send path arc (- (- x) r) y 2r 2r (- ϕ) ϕ)\n ➐ (send dc draw-path path)))\n```", "```\n(define SET-BRUSH (new brush% [color (make-object color% 220 255 220)]))\n\n(define (venn-bin b1 b2 b3)\n  (universe OUT-BRUSH)\n  (circle (- CIRCLE-OFF) 0 30 b1)\n  (circle CIRCLE-OFF 0 30 b3)\n  (piscis CIRCLE-OFF 0 30 b2)\n  (print venn))\n```", "```\n> (venn-bin IN-BRUSH IN-BRUSH IN-BRUSH)\n```", "```\n> (define A (set 2 4 6 8 10 12 14 16 18))\n> (define B (set 3 6 9 12 15 18))\n```", "```\n> (set-union A B)\n(set 9 18 14 3 16 2 6 10 15 4 8 12)\n```", "```\n(venn-bin SET-BRUSH IN-BRUSH SET-BRUSH)\n```", "```\n> (set-intersect A B)\n(set 18 6 12)\n```", "```\n(venn-bin IN-BRUSH SET-BRUSH SET-BRUSH)\n```", "```\n> (set-subtract A B)\n(set 14 16 2 10 4 8)\n```", "```\n(venn-bin SET-BRUSH IN-BRUSH SET-BRUSH)\n```", "```\n> (set-symmetric-difference A B)\n(set 9 14 3 16 2 10 15 4 8)\n```", "```\n> (subset? (set 2 4 6 8) (set 1 2 3 4 5 6 7 8 9 10))\n#t\n\n> (subset? (set 2 4 6 8) (set 3 4 5 6 7 8 9 10))\n#f\n```", "```\n> (subset? (set 2 4 6 8) (set 2 4 6 8))\n#t\n\n> (proper-subset? (set 2 4 6 8) (set 2 4 6 8))\n#f\n```", "```\n> (define (cart-prod A B)\n    (list->set\n     (for*/list ([a A]\n                 [b B])\n       (list a b))))\n```", "```\n> (define (cart-prod A B)\n    (for*/set ([a A]\n               [b B])\n      (list a b)))\n```", "```\n> (define A (set 'a 'b 'c))\n> (define B (set 1 2 3))\n\n> (cart-prod A B)\n(set '(a 1) '(c 3) '(c 1) '(c 2) '(a 2) '(a 3) '(b 2) '(b 3) '(b 1))\n```", "```\n#lang racket\n(require racket/draw)\n\n(define WIDTH 600)  ; width of drawing area\n(define HEIGHT 400) ; height of drawing area\n(define UNIT 6) ; pixels in unit-width square\n(define OFFSET-X 140) ; starting x offset\n(define OFFSET-Y 75) ; starting y offset\n(define START-X (- (/ WIDTH 2)  UNIT OFFSET-X))\n(define START-Y (- (/ HEIGHT 2) UNIT OFFSET-Y))\n```", "```\n(define tiling (make-bitmap WIDTH HEIGHT)) \n(define dc (new bitmap-dc% [bitmap tiling]))\n\n(define TILE-PEN   (new pen% [color \"black\"] [width 1] [style 'solid]))\n(send dc set-pen TILE-PEN)\n\n(define TILE-BRUSH (new brush% [color \"yellow\"] [style 'solid]))\n(send dc set-brush TILE-BRUSH)\n```", "```\n  ; function to compute F(n)\n  (define (F n)\n    (define (f a b cnt)\n      (if (= cnt 0) b\n          (f (+ a b) a (- cnt 1))))\n    (f 1 0 n))\n\n  ; function to draw the tiling\n  (define (draw-n n)\n ➊ (let* ([fn (F n)]\n       ➋ [sn (* UNIT fn)]\n       ➌ [fn1 (F (sub1 n))]\n       ➍ [sn1 (* UNIT fn1)]\n          [n-mod-4 (remainder n 4)])\n     (cond [(< n 2) #f] ; do nothing tiles already drawn\n           [(= n 2) (values (+ UNIT START-X) START-Y START-X START-Y)]\n           [else\n         ➎ (let-values ([(x1 y1 x2 y2) (draw-n (sub1 n))])\n              (let-values ([(x y)\n                            (case n-mod-4\n                           ➏ [(0) (values (- x1 sn) y1)]\n                              [(1) (values x1 (+ y1 sn1))]\n                              [(2) (values (+ x1 sn1) y2)]\n                           ➐ [(3) (values x2 (- y1 sn))])])\n              ➑ (draw-tile x y sn)\n              ➒ (values x y x1 y1)))])))\n```", "```\n(define (draw-tiles n)\n  (draw-tile START-X START-Y UNIT)\n  (draw-tile (+ UNIT START-X) START-Y UNIT)\n  (draw-n n)\n  (print tiling))\n```", "```\n(define SPIRAL-PEN (new pen% [color \"red\"] [width 2] [style 'solid]))\n(define TRANS-BRUSH (new brush% [style 'transparent]))\n```", "```\n; define angle constants\n(define 0d 0)\n(define 90d (/ pi 2))\n(define 180d pi)\n(define 270d (* 3 (/ pi 2)))\n(define 360d (* 2 pi))\n```", "```\n(define (arc x y r a)\n  (let-values ([(d) (values (* 2 r))]\n               [(start stop x y)\n                (case a\n               ➊ [(0) (values  90d 180d x       y  )]\n                  [(1) (values 180d 270d x       (- y r)  )]\n                  [(2) (values 270d 360d (- x r) (- y r) )]\n                  [(3) (values   0d  90d (- x r) y)])])\n    (send dc set-pen SPIRAL-PEN)\n    (send dc set-brush TRANS-BRUSH)\n    (send dc draw-arc x y d d start stop)\n    (send dc set-pen TILE-PEN)\n    (send dc set-brush TILE-BRUSH)))\n```", "```\n(arc x y sn n-mod-4)\n```", "```\n#lang racket\n(require racket/draw)\n\n; overall dimensions of drawing area\n(define WIDTH 300)\n(define HEIGHT 110)\n(define BOTTOM-MARGIN 20)\n\n(define RADIUS 8) ; ball radius\n(define DIAMETER (* 2 RADIUS))\n(define DELTA-Y (- (* DIAMETER (sin (/ pi 3)))))\n\n(define BOARD-THICKNESS 10)\n(define BOARD-Y (- HEIGHT BOARD-THICKNESS BOTTOM-MARGIN))\n\n; location to start drawing pile numbers\n(define TEXT-X (+ 5 (* RADIUS 5)))\n(define TEXT-Y (- HEIGHT BOTTOM-MARGIN))\n\n; x, y location to start drawing balls\n(define START-X 20)\n(define START-Y (- BOARD-Y RADIUS))\n\n(define BALL-BRUSH (new brush% [color \"red\"]))\n(define BACKGROUND-BRUSH (new brush% [color \"yellow\"]))\n(define BOARD-BRUSH (new brush% [color \"brown\"]))\n```", "```\n(define (draw-ball x y) ; draw ball with center at (x,y)\n  (send dc draw-ellipse (- x RADIUS) (- y RADIUS) DIAMETER DIAMETER))\n\n(define (draw-pile n start-x)\n  {let ([rem n]\n        [x start-x]\n        [y START-Y])\n    (define (draw-row x y n max)\n       (when (and (> rem 0) (<= n max))\n         (set! rem (sub1 rem))\n         (draw-ball x y)\n         (draw-row (+ x DIAMETER) y (add1 n) max)))\n    (for ([r (in-range 5 0 -1)])\n      (draw-row x y 1 r)\n      (set! x (+ x RADIUS))\n      (set! y (+ y DELTA-Y)))})\n```", "```\n(define pile (make-vector 3 15))\n\n(define (draw-game)\n  (send dc set-pen \"black\" 2 'solid)\n  (send dc set-brush BACKGROUND-BRUSH)\n  (send dc draw-rectangle 0 0 WIDTH HEIGHT)\n  (send dc set-brush BOARD-BRUSH)\n  (send dc draw-rectangle 0 BOARD-Y WIDTH BOARD-THICKNESS)\n  (send dc set-brush BALL-BRUSH)\n\n  (draw-pile (vector-ref pile 0) START-X)\n  (send dc draw-text \"0\" TEXT-X TEXT-Y)\n\n  (draw-pile (vector-ref pile 1) (+ START-X (* 6 DIAMETER)))\n  (send dc draw-text \"1\" (+ TEXT-X (* 6 DIAMETER)) TEXT-Y)\n\n  (draw-pile (vector-ref pile 2) (+ START-X (* 12 DIAMETER)))\n  (send dc draw-text \"2\" (+ TEXT-X (* 12 DIAMETER)) TEXT-Y)\n\n  (print drawing) ; display the board\n)\n(draw-game)\n```", "```\n> (printf \"~b\" 13)\n1101\n\n> (printf \"~b\" 9)\n1001\n\n> (printf \"~b\" (bitwise-xor 13 9))\n0100\n```", "```\n➊ (define nim-sum bitwise-xor)\n\n➋ (define (random-pile) ; select a random pile that has balls\n     (let ([i (random 3)])\n       (if (> (vector-ref pile i) 0) i (random-pile))))\n\n   (define (find-move)\n     (let* ([balls (vector->list pile)]\n         ➌ [s (apply nim-sum balls)])\n    ➍ (if (= 0 s)\n           (let ([i (random-pile)]) (values i 1)) ; stall\n        ➎ (let ([n (list->vector (map (λ (b) (nim-sum s b)) balls))])\n          ➏ (define (test? i) (< (vector-ref n i) (vector-ref pile i)))\n             (define (move i) (values i  (- (vector-ref pile i) (vector-ref n i))))  \n          ➐ (cond [(test? 0) (move 0)]\n             [(test? 1) (move 1)]\n             [(test? 2) (move 2)])))))\n```", "```\n(define (apply-move p n) ; remove n balls from pile p\n  (vector-set! pile p (- (vector-ref pile p) n)))\n\n(define (game-over?)\n  (for/and ([i (in-range 3)]) (= 0 (vector-ref pile i))))\n\n(define (valid-move? p n)\n  (cond [(not (<= 0 p 2)) #f]\n        [(< n 0) #f]\n        [else (>= (vector-ref pile p) n)]))\n```", "```\n(define (move p n)\n  (if (not (valid-move? p n))\n    (printf\"\\n Invalid move.\\n\\n\")\n    (begin (apply-move p n)\n           (if (game-over?)\n             (printf \"\\nYou win!\")\n             (let-values ([(p n) (find-move)])\n             (draw-game)\n             (printf \"\\n\\nComputer removes ~a balls from pile ~a.\\n\" n p)\n             (apply-move p n)\n             (draw-game)\n             (when (game-over?)\n               (printf \"\\nComputer wins!\")))))))\n```", "```\n> (move 1 5)\n```", "```\n(define (init)\n  (for ([i (in-range 3)]) (vector-set! pile i (random 10 16)))\n  (newline)\n  (draw-game)\n  (newline))\n```"]