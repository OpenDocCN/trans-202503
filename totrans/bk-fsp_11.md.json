["```\nopen System\nopen System.Threading.Tasks\n\nParallel.For(0, 100, printfn \"%i\")\n```", "```\nParallel.For(0, 100, fun n -> lock Console.Out (fun () -> printfn \"%i\" n))\n```", "```\nParallel.For(0, 100, (sprintf \"%i\") >> Console.WriteLine)\n```", "```\nopen System.Collections.Concurrent\nopen System.Threading.Tasks\n\nlet shortCircuitExample shortCircuit =\n  let bag = ConcurrentBag<_>()\n  Parallel.For(\n    0,\n    999999,\n  ① fun i s -> if i < 10000 then bag.Add i else shortCircuit s) |> ignore\n  (bag, bag.Count)\n```", "```\nshortCircuitExample (fun s -> s.Stop()) |> printfn \"%A\"\nshortCircuitExample (fun s -> s.Break()) |> printfn \"%A\"\n```", "```\nopen System\nopen System.Threading.Tasks\n\nlet parallelForWithCancellation (wait : int) =\n  use tokenSource = new ① System.Threading.CancellationTokenSource(wait)\n\n  try\n    Parallel.For(\n      0,\n      Int32.MaxValue,\n    ② ParallelOptions(③ CancellationToken = ④ tokenSource.Token),\n      fun (i : int) -> Console.WriteLine i\n    ) |> ignore\n  with\n  | :? ⑤ OperationCanceledException -> printfn \"Cancelled!\"\n  | ex -> printfn \"%O\" ex\n```", "```\nopen System\nopen System.Threading.Tasks\n\nParallel.Invoke(\n  (fun () -> printfn \"Task 1\"),\n  (fun () -> Task.Delay(100).Wait()\n             printfn \"Task 2\"),\n  (fun () -> printfn \"Task 3\")\n)\n\nprintfn \"Done\"\n```", "```\nopen System.Threading.Tasks\n\nlet t = new Task(fun () -> printfn \"Manual Task\")\n```", "```\nt.Start()\n```", "```\nopen System.Threading.Tasks\n\nlet t = Task.Factory.StartNew(fun () -> printfn \"Factory Task\")\n```", "```\nlet t = Task.Factory.StartNew(fun () -> System.Random().Next())\n```", "```\n**t.Result** |> printfn \"Result: %i\"\n```", "```\nlet randomWait (delayMs : int) (msg : string) =\n  fun () -> (System.Random().Next delayMs |> Task.Delay).Wait()\n            Console.WriteLine msg\n```", "```\nlet waitTask = Task.Factory.StartNew(randomWait 1000 \"Task Finished\")\n**waitTask.Wait()**\nprintfn \"Done Waiting\"\n```", "```\nTask.WaitAny(\n    Task.Factory.StartNew(randomWait 2000 \"Task 0 Finished\"),\n    Task.Factory.StartNew(randomWait 2000 \"Task 1 Finished\"),\n    Task.Factory.StartNew(randomWait 2000 \"Task 2 Finished\"))\nConsole.WriteLine \"Done Waiting\"\n```", "```\nlet antecedent =\n  new Task<string>(\n    fun () ->\n      Console.WriteLine(\"Started antecedent\")\n      System.Threading.Thread.Sleep(1000)\n      Console.WriteLine(\"Completed antecedent\")\n      \"Job's done\")\n```", "```\nlet continuation =\n  antecedent.ContinueWith(\n    fun ① (a : Task<string>) ->\n      Console.WriteLine(\"Started continuation\")\n      Console.WriteLine(\"Antecedent status: {0}\", a.Status)\n      Console.WriteLine(\"Antecedent result: {0}\", a.Result)\n      Console.WriteLine(\"Completed continuation\"))\n```", "```\nantecedent.Start()\nConsole.WriteLine(\"Waiting for continuation\")\ncontinuation.Wait()\nConsole.WriteLine(\"Done\")\n```", "```\nWaiting for continuation\nStarted antecedent\nCompleted antecedent\nStarted continuation\nAntecedent status: RanToCompletion\nCompleted continuation\nDone\n```", "```\nlet antecedents =\n  [|\n    new Task(\n        fun () ->\n          Console.WriteLine(\"Started first antecedent\")\n          System.Threading.Thread.Sleep(1000)\n          Console.WriteLine(\"Completed first antecedent\"))\n    new Task(\n        fun () ->\n          Console.WriteLine(\"Started second antecedent\")\n          System.Threading.Thread.Sleep(1250)\n          Console.WriteLine(\"Completed second antecedent\"))\n    new Task(\n        fun () ->\n          Console.WriteLine(\"Started third antecedent\")\n          System.Threading.Thread.Sleep(1000)\n          Console.WriteLine(\"Completed third antecedent\"))\n  |]\n\nlet continuation =\n  ① Task.Factory.ContinueWhenAll(\n    antecedents,\n    fun ② (a : Task array) ->\n      Console.WriteLine(\"Started continuation\")\n      for x in a do Console.WriteLine(\"Antecedent status: {0}\", x.Status)\n      Console.WriteLine(\"Completed continuation\"))\n\nfor a in antecedents do a.Start()\n\nConsole.WriteLine(\"Waiting for continuation\")\ncontinuation.Wait()\nConsole.WriteLine(\"Done\")\n```", "```\nlet taskWithCancellation (cancelDelay : int) (taskDelay : int) =\n① use tokenSource = new System.Threading.CancellationTokenSource(cancelDelay)\n② let token = tokenSource.Token\n\n  try\n    let t =\n      Task.Factory.StartNew(\n        (fun () ->\n         ③ token.ThrowIfCancellationRequested()\n          printfn \"passed cancellation check; waiting\"\n          System.Threading.Thread.Sleep taskDelay\n         ④ token.ThrowIfCancellationRequested()),\n         token)\n      ⑤ t.Wait()\n  with\n  | ex -> printfn \"%O\" ex\n  printfn \"Done\"\n```", "```\ntry\n  raise (AggregateException(\n          NotSupportedException(),\n          ArgumentException(),\n          AggregateException(\n            ArgumentNullException(),\n            NotImplementedException())))\nwith\n| :? AggregateException as ex ->\n      ex.Handle(\n        ① Func<_, _>(\n          function\n          ② | :? AggregateException as ex1 ->\n               ③ ex1.Handle(\n                 Func<_, _>(\n                   function\n                   | :? NotImplementedException as ex2 -> printfn \"%O\" ex2; true\n                   | _ -> true))\n               true\n           | _ -> true))\n```", "```\ntry\n  raise (AggregateException(\n          NotSupportedException(),\n          ArgumentException(),\n          AggregateException(\n            ArgumentNullException(),\n            NotImplementedException())))\nwith\n| :? AggregateException as ex ->\n      ex.**Flatten()**.Handle(\n        Func<_, _>(\n          function\n          | :? NotImplementedException as ex2 -> printfn \"%O\" ex2; true\n          | _ -> true))\n```", "```\nopen System\nopen System.IO\nopen System.Net\n\ntype StreamReader with\n  member x.AsyncReadToEnd () =\n    async { do! Async.SwitchToNewThread()\n            let content = x.ReadToEnd()\n            do! Async.SwitchToThreadPool()\n            return content }\n\nlet getPage (uri : Uri) =\n  async {\n\n  let req = WebRequest.Create uri\n  use! response = req.AsyncGetResponse()\n  use stream = response.GetResponseStream()\n  use reader = new StreamReader(stream)\n  return! reader.AsyncReadToEnd()\n}\n```", "```\nasync {\n  let! content = Uri \"http://nostarch.com\" |> getPage\n  content.Substring(0, 50) |> printfn \"%s\" }\n|> Async.Start\n```", "```\nAsync.StartWithContinuations(\n  ① getPage(Uri \"http://nostarch.com\"),\n  ② (fun c -> c.Substring(0, 50) |> printfn \"%s...\"),\n  ③ (printfn \"Exception: %O\"),\n  ④ (fun _ -> printfn \"Cancelled\")\n)\n```", "```\nlet html =\n  Uri \"http://nostarch.com\"\n  |> getPage\n  |> Async.RunSynchronously\n```", "```\nopen System.Text.RegularExpressions\n\n[| getPage(Uri \"http://nostarch.com\")\n   getPage(Uri \"http://microsoft.com\")\n   getPage(Uri \"http://fsharp.org\") |]\n|> Async.Parallel\n|> Async.RunSynchronously\n|> Seq.iter (fun c -> let sample = c.Substring(0, 50)\n                      Regex.Replace(sample, @\"[\\r\\n]| {2,}\", \"\")\n                      |> printfn \"%s...\")\n```", "```\n① Async.StartWithContinuations(\n    getPage(Uri \"http://nostarch.com\"),\n    (fun c -> c.Substring(0, 50) |> printfn \"%s...\"),\n    (printfn \"Exception: %O\"),\n    (fun _ -> printfn \"Cancelled\")\n  )\n\n② Async.CancelDefaultToken()\n```", "```\nlet displayPartialPage uri =\n  Async.TryCancelled(\n    async {\n      let! c = getPage uri\n      Regex.Replace(c.Substring(0, 50), @\"[\\r\\n]| {2,}\", \"\")\n      |> sprintf \"[%O] %s...\" uri\n      |> Console.WriteLine },\n    (sprintf \"[%O] Cancelled: %O\" uri >> Console.WriteLine))\n\nAsync.Start(displayPartialPage (Uri \"http://nostarch.com\"))\n\nAsync.CancelDefaultToken()\n```", "```\n[| Uri \"http://nostarch.com\"\n   Uri \"http://microsoft.com\"\n   Uri \"http://fsharp.org\" |]\n|> Array.iter (fun u -> Async.Start(displayPartialPage u))\n\nAsync.CancelDefaultToken()\n```", "```\n  open System.Threading\n\n  let tokens =\n    [| Uri \"http://nostarch.com\"\n       Uri \"http://didacticcode.com\"\n       Uri \"http://fsharp.org\" |]\n    |> Array.map (fun u -> ① let ts = new CancellationTokenSource()\n                           Async.Start(displayPartialPage u, ② ts.Token)\n                           ts)\n③ tokens.[0].Cancel()\n④ tokens.[1].Cancel()\n```", "```\nlet getPageSafe uri =\n  async {\n    try\n      let! content = getPage uri\n      return Some content\n    with\n    | :? NotSupportedException as ex ->\n      Console.WriteLine \"Caught NotSupportedException\"\n      return None\n    | :? OutOfMemoryException as ex ->\n      Console.WriteLine \"Caught OutOfMemoryException\"\n      return None\n    | ex ->\n      ex |> sprintf \"Caught general exception: %O\" |> Console.WriteLine\n      return None }\n```", "```\nUri \"http://nostarch.com\"\n|> getPage\n|> Async.Catch\n|> Async.RunSynchronously\n|> function\n   | Choice1Of2 result -> Some result\n   | Choice2Of2 ex ->\n      match ex with\n      | :? NotSupportedException ->\n        Console.WriteLine \"Caught NotSupportedException\"\n      | :? OutOfMemoryException ->\n        Console.WriteLine \"Caught OutOfMemoryException\"\n      | ex ->\n        ex.Message |> sprintf \"Exception: %s\" |> Console.WriteLine\n      None\n```", "```\nUri \"http://nostarch.com\"\n|> getPage\n|> Async.StartAsTask\n|> (fun t -> ① t.Result.Substring(0, 50))\n|> printfn \"%s\"\n```", "```\n// C#\n// using System.Threading.Tasks\n\nprivate static ① async Task<string> GetPageAsync(string uri)\n{\n    using (var client = new System.Net.WebClient())\n    {\n      return ② await client.DownloadStringTaskAsync(uri);\n    }\n}\n\nstatic void Main()\n{\n    var result = GetPageAsync(\"http://nostarch.com\").Result;\n    Console.WriteLine(\"{0}\", result.Substring(0, 50));\n    Console.ReadLine();\n}\n```", "```\n// F#\nopen System.Threading.Tasks\n\nlet getPageAsync (uri : string) =\n  async {\n    use client = new System.Net.WebClient()\n  ① return! Async.AwaitTask (client.DownloadStringTaskAsync uri)\n  }\n\nasync {\n② let! result = getPageAsync \"http://nostarch.com\"\n  result.Substring(0, 50) |> printfn \"%s\"\n} |> Async.Start\n```", "```\ntype Agent<'T> = MailboxProcessor<'T>\n```", "```\ntype Message = | Message of obj\n\nlet echoAgent =\n① Agent<Message>.Start(\n    fun inbox ->\n    ② let rec loop () =\n        async {\n          let! (Message(content)) =  ③ inbox.Receive()\n          printfn \"%O\" content\n        ④ return! loop()}\n    ⑤ loop())\n```", "```\n> **Message \"nuqneH\" |> echoAgent.Post;;**\nnuqneH\n> **Message 123 |> echoAgent.Post;;**\n123\n> **Message [ 1; 2; 3 ] |> echoAgent.Post;;**\n[1; 2; 3]\n```", "```\nlet echoAgent2 =\n  Agent<Message>.Start(fun inbox ->\n    let rec loop () =\n      inbox.Scan(fun (Message(x)) ->\n       match x with\n       | ① :? string\n       | ② :? int ->\n         Some (async { printfn \"%O\" x\n                       return! loop() })\n       | _ -> printfn \"<not handled>\"; None)\n   loop())\n```", "```\n> **Message \"nuqneH\" |> echoAgent2.Post;;**\nnuqneH\n> **Message 123 |> echoAgent2.Post;;**\n123\n> **Message [ 1; 2; 3 ] |> echoAgent2.Post;;**\n<not handled>\n```", "```\n① type ReplyMessage = | ReplyMessage of obj * AsyncReplyChannel<obj>\n\n  let echoAgent3 =\n    Agent.Start(fun inbox ->\n      let rec loop () =\n        async {\n          let! ② (ReplyMessage(m, c)) = inbox.Receive()\n          ③ c.Reply m\n          return! loop()\n      }\n    loop())\n```", "```\nechoAgent3.PostAndReply(fun c -> ReplyMessage(\"hello\", c))\n|> printfn \"Response: %O\"\n```", "```\ntype Operation =\n| Add of float\n| Subtract of float\n| Multiply of float\n| Divide of float\n| Clear\n| Current of AsyncReplyChannel<float>\n```", "```\nlet calcAgent =\n  Agent.Start(fun inbox ->\n   let rec loop total =\n     async {\n       let! msg = inbox.Receive()\n       let newValue =\n         match msg with\n         | Add x -> total + x\n         | Subtract x -> total - x\n         | Multiply x -> total * x\n         | Divide x -> total / x\n         | Clear -> 0.0\n         | Current channel ->\n           channel.Reply total\n           total\n       return! loop newValue }\n   loop 0.0)\n```", "```\n[ Add 10.0\n  Subtract 5.0\n  Multiply 10.0\n  Divide 2.0 ]\n|> List.iter (calcAgent.Post)\n\ncalcAgent.PostAndReply(Current) |> printfn \"Result: %f\"\ncalcAgent.Post(Clear)\ncalcAgent.PostAndReply(Current) |> printfn \"Result: %f\"\n```", "```\nResult: 25.000000\nResult: 0.000000\n```"]