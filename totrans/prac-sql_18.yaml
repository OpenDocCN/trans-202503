- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using PostgreSQL from the Command Line
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll learn how to work with PostgreSQL from the *command
    line*, a text-based interface where you enter names of programs or other commands
    to perform tasks, such as editing files or listing the contents of a file directory.
  prefs: []
  type: TYPE_NORMAL
- en: The command line—also called a *command line interface*, a *console*, a *shell*,
    or the *terminal*—existed long before computers had a graphical user interface
    (GUI) with menus, icons, and buttons you could click for navigation. Back in college,
    to edit a file, I had to enter commands into a terminal connected to an IBM mainframe
    computer. Working that way felt mysterious, as though I’d attained new powers—and
    I had! Today, even in a GUI world, familiarity with the command line is essential
    for a programmer moving toward expert-level skills. Perhaps that’s why when a
    movie wants to convey that a character really knows what they’re doing on a computer,
    they’re shown typing cryptic, text-only commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we learn about this text-only world, pay attention to these advantages of
    mastering working from the command line instead of a GUI, such as pgAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: You can often work faster by entering short commands instead of clicking through
    layers of menu items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You gain access to functions that only the command line provides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If command line access is all you have to work with (for example, when you’ve
    connected to a remote computer), you can still get work done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll use `psql`, a command-line tool included with PostgreSQL that lets you
    run queries, manage database objects, and interact with the computer’s operating
    system via text command. You’ll learn how to set up and access your computer’s
    command line and then launch `psql`. Along the way, we’ll cover general command
    line syntax and additional commands for database tasks. Patience is key: even
    experienced experts often resort to documentation to recall the available command
    line options.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the Command Line for psql
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, we’ll access the command line on our operating system and, if needed,
    set an environment variable called `PATH` that tells our system where to find
    `psql`. *Environment variables* hold parameters that specify system or application
    configurations, such as where to store temporary files; they also allow you to
    enable or disable options. The `PATH` environment variable stores the names of
    one or more directories containing executable programs, and in this instance will
    tell the command line interface the location of `psql`, avoiding the hassle of
    having to enter its full directory path each time you launch it.
  prefs: []
  type: TYPE_NORMAL
- en: Windows psql Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, you’ll run `psql` within the *Command Prompt*, the application that
    provides that system’s command line interface. Before we do that, we need to tell
    Command Prompt where to find *psql.exe*—the full name of the `psql` application
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Adding psql and Utilities to the Windows PATH
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following steps assume that you installed PostgreSQL according to the instructions
    described in “Windows Installation” in Chapter 1. (If you installed PostgreSQL
    another way, use the Windows File Explorer to search your C: drive to find the
    directory that holds *psql.exe*, and then replace *C:\Program Files\PostgreSQL\*x*\bin*
    in the following steps with your own path.)'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Windows Control Panel by clicking the **Search** icon on the Windows
    taskbar, entering **Control Panel**, and then clicking the **Control Panel** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Control Panel app, enter **Environment** in the search box. In the
    list of search results displayed, click **Edit the System Environment Variables**.
    A System Properties dialog should appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the System Properties dialog, on the Advanced tab, click **Environment Variables**.
    The dialog that opens should have two sections: User variables and System variables.
    In the User variables section, if you don’t see a `PATH` variable, continue to
    step a to create a new one. If you do see an existing `PATH` variable, continue
    to step b to modify it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don’t see `PATH` in the User variables section, click **New** to open
    a New User Variable dialog, shown in [Figure 18-1](#figure18-1).![f18001](Images/f18001.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18-1: Creating a new `PATH` environment variable in Windows 10'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Variable name box, enter **PATH**. In the Variable value box, enter **C:\Program
    Files\PostgreSQL\*****x*****\bin**, where *x* is the version of PostgreSQL you’re
    using. (Instead of typing, you can click **Browse Directory** and navigate to
    the directory in the Browse For Folder dialog.) When you’ve either entered the
    path manually or browsed to it, click **OK** in all dialogs to close them.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do see an existing `PATH` variable in the User variables section, highlight
    it and click **Edit**. In the list of variables that displays, click **New** and
    enter **C:\Program Files\PostgreSQL\*****x*****\bin**, where *x* is the version
    of PostgreSQL you’re using. (Instead of typing, you can click **Browse Directory**
    and navigate to the directory in the Browse For Folder dialog.) The result should
    look like the highlighted line in [Figure 18-2](#figure18-2). When you’re finished,
    click **OK** in all dialogs to close them.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now when you launch Command Prompt, the `PATH` should include the directory.
    Note that any time you make changes to the `PATH`, you must close and reopen Command
    Prompt for the changes to take effect. Next, let’s set up Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![f18002](Images/f18002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-2: Editing existing `PATH` environment variables in Windows 10'
  prefs: []
  type: TYPE_NORMAL
- en: Launching and Configuring Windows Command Prompt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Command Prompt is an executable file named *cmd.exe*. To launch it, select **Start**▶**Windows
    System**▶**Command Prompt** or enter **cmd** into the search bar. When the application
    opens, you should see a window with a black background that displays version and
    copyright information along with a prompt showing your current directory. On my
    Windows 10 system, Command Prompt opens to my default user directory and displays
    `C:\Users\adeba>`, as shown in [Figure 18-3](#figure18-3).
  prefs: []
  type: TYPE_NORMAL
- en: 'This line is known as the *prompt*, and it shows the current working directory.
    For me, this is my C: drive, which is typically the main hard drive on a Windows
    system, and the `\Users\adeba` directory on that drive. The greater-than sign
    `>` indicates the area where you enter your commands.'
  prefs: []
  type: TYPE_NORMAL
- en: '![f18003](Images/f18003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-3: My Command Prompt in Windows 10'
  prefs: []
  type: TYPE_NORMAL
- en: You can customize the font and colors plus access other settings by clicking
    the Command Prompt icon at the left of its window bar and selecting **Properties**
    from the menu. To make Command Prompt more suited for query output, I recommend
    setting the window size (on the Layout tab) to a width of at least 80 and a height
    of 25\. For the font, the official PostgreSQL documentation recommends using Lucida
    Console to properly display all the characters.
  prefs: []
  type: TYPE_NORMAL
- en: Entering Instructions on Windows Command Prompt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’re ready to enter instructions in Command Prompt. Enter **help** at
    the prompt, and press enter on your keyboard to see a list of available Windows
    system commands. You can view information about a command by including its name
    after `help`. For example, enter `help time` to display information about using
    the `time` command to set or view the system time.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the full workings of Command Prompt is an enormous topic beyond the
    scope of this book; however, I encourage you to try some of the commands in [Table
    18-1](#table18-1), which contains useful frequently used commands that aren’t
    actually necessary for the exercises in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 18-1: Useful Windows Commands'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Function** | **Example** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cd` | Change directory | `cd C:\my-stuff` | Changes to the *my-stuff* directory
    on the C: drive |'
  prefs: []
  type: TYPE_TB
- en: '| `copy` | Copy a file | `copy C:\my-stuff\song.mp3 C:\Music\song_favorite.mp3`
    | Copies the *song.mp3* file from *my-stuff* to a new file called *song_favorite.mp3*
    in the *Music* directory |'
  prefs: []
  type: TYPE_TB
- en: '| `del` | Delete | `del *.jpg` | Deletes all files with a *.jpg* extension
    in the current directory (asterisk wildcard) |'
  prefs: []
  type: TYPE_TB
- en: '| `dir` | List directory contents | `dir /p` | Shows directory contents one
    screen at a time (using the `/p` option) |'
  prefs: []
  type: TYPE_TB
- en: '| `findstr` | Find strings in text files matching a regular expression | `findstr
    "peach" *.txt` | Searches for the text *peach* in all *.txt* files in the current
    directory |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir` | Make a new directory | `makedir C:\my-stuff\Salad` | Creates a
    *Salad* directory inside the *my-stuff* directory |'
  prefs: []
  type: TYPE_TB
- en: '| `move` | Move a file | `move C:\my-stuff\song.mp3 C:\Music\` | Moves the
    file *song.mp3* to the *C:\Music* directory |'
  prefs: []
  type: TYPE_TB
- en: With your Command Prompt open and configured, you’re ready to roll. Skip ahead
    to the section “Working with psql.”
  prefs: []
  type: TYPE_NORMAL
- en: macOS psql Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On macOS, you’ll run `psql` within Terminal, the application that provides access
    to that system’s command line via one of several *shell* programs such as `bash`
    or `zsh`. Shell programs on Unix- or Linux-based systems, including macOS, provide
    not only the command prompt where users enter instructions, but also their own
    programming language for automating tasks. For example, you can use `bash` commands
    to write a program to log in to a remote computer, transfer files, and log out.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the Postgres.app setup instructions for macOS in Chapter 1—including
    running the commands at your Terminal—you shouldn’t need additional configuration
    to use `psql` and associated commands. Instead, we’ll proceed to launching Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Launching and Configuring the macOS Terminal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Launch Terminal by navigating to **Applications**▶**Utilities**▶**Terminal**.
    When it opens, you should see a window that displays the date and time of your
    last login followed by a prompt that includes your computer name, current working
    directory, and username. On my Mac, which is set to the `bash` shell, the prompt
    displays as `ad:~ anthony$` and ends with a dollar sign (`$`), as shown in [Figure
    18-4](#figure18-4).
  prefs: []
  type: TYPE_NORMAL
- en: The tilde (`~`) represents the system’s home directory, which is `/Users/anthony`.
    Terminal doesn’t display the full directory path, but you can see that information
    at any time by entering the `pwd` command (short for *print working directory*)
    and pressing ENTER on your keyboard. The area after the dollar sign is where you
    enter commands.
  prefs: []
  type: TYPE_NORMAL
- en: If your Mac is set to another shell such as `zsh`, your prompt may look different.
    With `zsh`, for example, the prompt ends with a percent sign. The particular shell
    you’re using does not make a difference for these exercises.
  prefs: []
  type: TYPE_NORMAL
- en: '![f18004](Images/f18004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-4: Terminal command line in macOS'
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve never used Terminal, its default black-and-white color scheme might
    seem boring. You can change fonts, colors, and other settings by selecting **Terminal**▶**Preferences**.
    To make Terminal bigger to better fit the query output display, I recommend setting
    the window size (on the Window tab under Profiles) to a width of at least 80 columns
    and a height of 25 rows. My preferred font (on the Text tab) is Monaco 14, but
    experiment to find one you like.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the full workings of Terminal and related commands is an enormous
    topic beyond the scope of this book, but take some time to try several commands.
    [Table 18-2](#table18-2) lists some useful commonly used commands that aren’t
    actually necessary for the exercises in this chapter. Enter `man` (short for *manual*)
    followed by a command name to get help on any command. For example, you can use
    `man ls` to find out how to use the `ls` command to list directory contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 18-2: Useful Terminal Commands'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Function** | **Example** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cd` | Change directory | `cd /Users/pparker/my-stuff/`  | Changes to the
    *my-stuff* directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cp` | Copy files | `cp song.mp3 song_backup.mp3` | Copies the file *song.mp3*
    to *song_backup.mp3* in the current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `grep` | Find strings in a text file matching a regular expression | `grep
    ''us_counties_2010'' *.sql` | Finds all lines in files with a *.sql* extension
    that have the text *us_counties_2010* |'
  prefs: []
  type: TYPE_TB
- en: '| `ls` | List directory contents | `ls -al` | Lists all files and directories
    (including hidden) in “long” format |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir` | Make a new directory | `mkdir resumes` | Makes a directory named
    *resumes* under the current working directory |'
  prefs: []
  type: TYPE_TB
- en: '| `mv` | Move a file | `mv song.mp3 /Users/pparker/songs` | Moves the file
    *song.mp3* from the current directory to a */songs* directory under a user directory
    |'
  prefs: []
  type: TYPE_TB
- en: '| `rm` | Remove (delete) files | `rm *.jpg` | Deletes all files with a *.jpg*
    extension in the current directory (asterisk wildcard) |'
  prefs: []
  type: TYPE_TB
- en: With your Terminal open and configured, you’re ready to roll. Skip ahead to
    the section “Working with psql.”
  prefs: []
  type: TYPE_NORMAL
- en: Linux psql Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall from “Linux Installation” in Chapter 1 that methods for installing PostgreSQL
    vary according to your Linux distribution. Nevertheless, `psql` is part of the
    standard PostgreSQL install, and you probably already ran `psql` commands as part
    of the installation process via your distribution’s command line terminal application.
    Even if you didn’t, standard Linux installations of PostgreSQL will automatically
    add `psql` to your `PATH`, so you should be able to access it.
  prefs: []
  type: TYPE_NORMAL
- en: Launch a terminal application and proceed to the next section, “Working with
    psql.” On some distributions, such as Ubuntu, you can open a terminal by pressing
    ctrl-alt-T. Also note that the Mac Terminal commands in [Table 18-2](#table18-2)
    apply to Linux as well and may be useful to you.
  prefs: []
  type: TYPE_NORMAL
- en: Working with psql
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve identified your command line interface and set it up to recognize
    the location of `psql`, let’s launch `psql` and connect to a database on your
    local installation of PostgreSQL. Then we’ll explore executing queries and special
    commands for retrieving database information.
  prefs: []
  type: TYPE_NORMAL
- en: Launching psql and Connecting to a Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Regardless of the operating system you’re using, you start `psql` in the same
    way. Open your command line interface (Command Prompt on Windows, Terminal on
    macOS or Linux). To launch `psql` and connect to a database, we use the following
    pattern at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Following the `psql` application name, we provide the database name after a
    `-d` database argument and a username after the `-U` username argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the database name, we’ll use `analysis`, which is where we created our
    tables and other objects for the book’s exercises. For username, we’ll use `postgres`,
    which is the default user created during installation. So, to connect to the `analysis`
    database on your local server, enter this at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you can connect to a database on a remote server by specifying the
    `–h` argument followed by the hostname. For example, you would use the following
    line if you were connecting to a database named `analysis` on a server called
    `example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Either way, if you set a password during installation, you should receive a
    password prompt when `psql` launches. If so, enter your password. After `psql`
    connects to the database, you should then see a prompt that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first line lists the version number of `psql` and the server you’re
    connected to. Your version will vary depending on when you installed PostgreSQL.
    The prompt where you’ll enter commands is `analysis=#`, which refers to the name
    of the database, followed by an equal sign (`=`) and a hash mark (`#`). The hash
    mark indicates that you’re logged in with *superuser* privileges, which give you
    unlimited ability to access and create objects and set up accounts and security.
    If you’re logged in as a user without superuser privileges, the last character
    of the prompt will be a greater-than sign (`>`). As you can see, the user account
    you logged in with here (`postgres`) is a superuser.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on Windows systems, you may see a warning message after launching `psql`
    about the console code page differing from the Windows code page. This is related
    to a mismatch in character sets between Command Prompt and the rest of the Windows
    system. For the exercises in this book, you can safely ignore that warning. If
    you prefer, you can eliminate it on a per-session basis by entering the command
    `cmd.exe /c chcp 1252` in your Windows Command Prompt before launching `psql`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Help or Exiting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the `psql` prompt, you can get help for both `psql` and general SQL with
    a set of *meta-commands*, detailed in [Table 18-3](#table18-3). Meta-commands,
    which begin with a backslash (`\`), go beyond offering help—we’ll cover several
    that return information about the database, let you adjust settings, or process
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 18-3: Help Commands Within `psql`'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Displays** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `\?` | Commands available within `psql`, such as `\dt` to list tables. |'
  prefs: []
  type: TYPE_TB
- en: '| `\? options` | Options for use with the `psql` command, such as `-U` to specify
    username. |'
  prefs: []
  type: TYPE_TB
- en: '| `\? variables` | Variables for use with `psql`, such as `VERSION` for the
    current `psql` version. |'
  prefs: []
  type: TYPE_TB
- en: '| `\h` | List of SQL commands. Add a command name to see detailed help for
    it (for example, `\h INSERT`). |'
  prefs: []
  type: TYPE_TB
- en: Even experienced users often need a refresher on commands and options, so having
    the details in the `psql` application is handy. To exit `psql`, use the meta-command
    `\q` (for *quit*).
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Database Connection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When working with SQL, it’s not unusual to be working with multiple databases,
    so you need a way to switch between databases. You can do this easily at the `psql`
    prompt using the `\c` meta-command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, while connected to your `analysis` database, at the `psql` prompt
    enter the following command to create a database named `test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to connect to the new `test` database you just created, enter `\c` followed
    by the name of the database at the `psql` prompt (and provide your PostgreSQL
    password if asked):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The application should respond with the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The prompt will show you which database you’re connected to. To log in as a
    different user—for example, using a username the macOS installation created—you
    could add that username after the database name. On my Mac, the syntax looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The response would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To reduce clutter, you can remove the `test` database you created. First, use
    `\c` to disconnect from `test` and connect to the `analysis` database (we can
    remove a database only if no one is connected to it). Once you’ve connected to
    `analysis`, enter `DROP DATABASE test;` at the `psql` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Password File
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’d rather not see a password prompt when starting `psql`, you can set
    up a file to store database connection information that includes the server name,
    your username, and password. On startup, `psql` will read the file and bypass
    the password prompt if the file contains an entry that matches the database connection
    and username.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows 10, the file must be named *pgpass.conf* and must reside in the
    following directory: C:\Users\YourUsername*\AppData\Roaming\postgresql\*. You
    may need to create the `postgresql` directory. On macOS and Linux, the file must
    be named *.pgpass* and must reside in your user home directory. The documentation
    at [https://www.postgresql.org/docs/current/libpq-pgpass.html](https://www.postgresql.org/docs/current/libpq-pgpass.html)
    notes that on macOS and Linux, you may need to set file permissions after creating
    the file by running `chmod 0600 ~/.pgpass` at the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the file using a text editor and save it with the correct name and location
    for your system. Inside, you’ll need to add a line for each database connection
    in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to set up a connection for the `analysis` database and `postgres`
    username, enter this line, substituting your password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can substitute an asterisk in any of the first four parameters to serve
    as a wildcard. For example, to supply a password for any local database with the
    `postgres` username, substitute an asterisk for the database name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Saving your password will save you some typing, but be mindful of best practices
    regarding security. Always secure your computer with a strong password and/or
    physical security key, and don’t create a password file on any public or shared
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Running SQL Queries on psql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve configured `psql` and connected to a database, so now let’s run some SQL
    queries. We’ll start with a single-line query and then run a multiple-line query.
  prefs: []
  type: TYPE_NORMAL
- en: You enter SQL into `psql` directly at the prompt. For example, to see a few
    rows from the 2019 census table we’ve used throughout the book, enter a query
    at the prompt, as shown in [Listing 18-1](#listing18-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-1: Entering a single-line query in `psql`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press enter to execute the query, and `psql` should display the following results
    in your terminal in text including the number of rows returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Below the result, you can see the `analysis=#` prompt again, ready for further
    input. You can use the up and down arrows on your keyboard to scroll through recent
    queries and press enter to execute them again, avoiding having to retype them.
  prefs: []
  type: TYPE_NORMAL
- en: Entering a Multiline Query
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’re not limited to single-line queries. If you have a query that spans multiple
    lines, you can enter lines one at a time, pressing enter after each, and `psql`
    knows not execute the query until you provide a semicolon. Let’s reenter the query
    in [Listing 18-1](#listing18-1) over multiple lines, shown in [Listing 18-2](#listing18-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-2: Entering a multiline query in `psql`'
  prefs: []
  type: TYPE_NORMAL
- en: Note that when your query extends past one line, the symbol between the database
    name and the hash mark changes from an equal sign to a hyphen. This multiline
    query executes only when you press enter after the final line, which ends with
    a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Open Parentheses in the psql Prompt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another helpful feature of `psql` is that it shows when you haven’t closed a
    pair of parentheses. [Listing 18-3](#listing18-3) shows this in action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-3: Showing open parentheses in the `psql` prompt'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you create a simple table called `wineries` that has two columns. After
    entering the first line of the `CREATE TABLE` statement and an open parenthesis
    (`(`), the prompt then changes from `analysis=#` to `analysis(#` to include an
    open parenthesis. This reminds you an open parenthesis needs closing. The prompt
    maintains that configuration until you add the closing parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Queries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To modify the most recent query you’ve executed in `psql`, you can edit it using
    the `\e` or `\edit` meta-command. Enter `\e` to open the last-executed query in
    a text editor. The editor `psql` uses by default depends on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, `psql` will open Notepad, a simple GUI text editor. Edit your query,
    save it by choosing **File**▶**Save**, and then exit Notepad using **File**▶**Exit**.
    When Notepad closes, `psql` should execute your revised query.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS and Linux, `psql` uses a command line application called `vim`, which
    is a favorite among programmers but can seem inscrutable for beginners. Check
    out a helpful `vim` cheat sheet at [https://vim.rtorr.com/](https://vim.rtorr.com/).
    For now, you can use the following steps to make simple edits:'
  prefs: []
  type: TYPE_NORMAL
- en: When `vim` opens the query in your terminal, press I to activate insert mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your edits to the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press esc and then SHIFT-: to display a colon command prompt at the bottom
    left of the `vim` screen, which is where you enter commands to control `vim`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `wq` (for *write*, *quit*) and press enter to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now when `vim` exits, the `psql` prompt should execute your revised query. Press
    the up-arrow key to see the revised text.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating and Formatting Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The query you ran in Listings 18-1 and 18-2 returned only one column and a handful
    of rows, so its output was contained nicely in your command line interface. But
    for queries with more columns or rows, the output can fill more than one screen,
    making it difficult to navigate. Fortunately, you have several ways to customize
    the display style of the output using the `\pset` meta-command.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Paging of Results
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One way to adjust the output format is to specify how `psql` handles scrolling
    through lengthy query results, known as *paging*. By default, if your results
    return more rows than will fit on one screen, `psql` will display the first screen’s
    worth of rows and then let you scroll through the rest. For example, [Listing
    18-4](#listing18-4) shows what happens at the `psql` prompt when we remove the
    `LIMIT` clause from the query in [Listing 18-1](#listing18-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-4: A query with scrolling results'
  prefs: []
  type: TYPE_NORMAL
- en: Recall that this table has 3,142 rows. [Listing 18-4](#listing18-4) shows only
    the first 12 on the current screen (the number of visible rows depends on your
    terminal configuration). On Windows, the indicator `-- More --` tells you that
    additional results are available, and you can press enter to scroll through them.
    On macOS and Linux, the indicator will be a colon. Scrolling through a few thousand
    rows will take a while. Press q to exit the results and return to the `psql` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bypass manual scrolling and have all your results immediately display, you
    can change the `pager` setting using the `\pset pager` meta-command. Run that
    command at your `psql` prompt, and it should return the message `Pager usage is
    off`. Now when you rerun the query in [Listing 18-3](#listing18-3) with the `pager`
    setting turned off, you should see results like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You’re immediately taken to the end of the results without having to scroll.
    To turn paging back on, run `\pset pager` again.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting the Results Grid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You also can use `\pset` with the following options to format the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '**border int**'
  prefs: []
  type: TYPE_NORMAL
- en: Use this option to specify whether the results grid has no border (`0`), internal
    lines dividing columns (`1`), or lines around all cells (`2`). For example, `\pset
    border 2` sets lines around all cells.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**format unaligned**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the option `\pset format unaligned` to display the results in lines separated
    by a delimiter rather than in columns, similar to what you would see in a CSV
    file. The separator defaults to a pipe symbol (`|`). You can set a different separator
    using the `fieldsep` command. For example, to set a comma as the separator, run
    `\pset fieldsep ','`. To revert to a column view, run `\pset format aligned`.
    You can use the `psql` meta-command `\a` to toggle between aligned and unaligned
    views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**footer**'
  prefs: []
  type: TYPE_NORMAL
- en: Use this option to toggle the results footer, which displays the result row
    count, on or off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**null**'
  prefs: []
  type: TYPE_NORMAL
- en: Use this option to set how `psql` displays `NULL` values. By default, they show
    as blanks. You can run `\pset null '(null)'` to replace blanks with `(null)` when
    the column value is `NULL`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can explore additional options in the PostgreSQL documentation at [https://www.postgresql.org/docs/current/app-psql.html](https://www.postgresql.org/docs/current/app-psql.html).
    In addition, it’s possible to set up a *.psqlrc* file on macOS or Linux or a *psqlrc.conf*
    file on Windows to hold your configuration preferences and load them each time
    `psql` starts. A good example is provided at [https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/](https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/).
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Expanded Results
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sometimes, it’s helpful to view results arranged not in the typical table style
    of rows and columns, but instead in a vertical list. This is useful when the number
    of columns is too big to fit on-screen in the normal horizontal results grid and
    also for scanning values in columns row by row. In `psql`, you can switch to a
    vertical list view using the `\x` (for *expanded*) meta-command. The best way
    to understand the difference between normal and expanded view is by looking at
    an example. [Listing 18-5](#listing18-5) shows the normal display you see when
    querying the `grades` table in Chapter 17 using `psql`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-5: Normal display of the `grades` table query'
  prefs: []
  type: TYPE_NORMAL
- en: To change to the expanded view, enter `\x` at the `psql` prompt, which should
    display the message `Expanded display is on`. Then, when you run the same query
    again, you should see the expanded results, as shown in [Listing 18-6](#listing18-6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 18-6: Expanded display of the `grades` table query'
  prefs: []
  type: TYPE_NORMAL
- en: The results appear in vertical blocks separated by record numbers. Depending
    on your needs and the type of data you’re working with, this format might be easier
    to read. You can revert to column display by entering `\x` again at the `psql`
    prompt. In addition, setting `\x auto` will make PostgreSQL automatically display
    the results in a table or expanded view based on the size of the output.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore how to use `psql` to dig into database information.
  prefs: []
  type: TYPE_NORMAL
- en: Meta-Commands for Database Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can have `psql` display details about databases, tables, and other objects
    via a particular set of meta-commands. To see how these work, we’ll explore the
    meta-command that displays the tables in your database, including how to append
    a plus sign (`+`) to the command to expand the output and add an optional pattern
    to filter the output.
  prefs: []
  type: TYPE_NORMAL
- en: To see a list of tables, you can enter `\dt` ``at the `psql` prompt. Here’s
    a snippet of the output on my system:``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
