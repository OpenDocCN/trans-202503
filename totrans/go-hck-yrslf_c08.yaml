- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Hacking
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Hacking an individual computer might yield a handful of usernames, passwords,
    and other data. But hacking a web server could give an attacker *millions* of
    usernames and passwords to test on banking sites, email servers, and more.
  prefs: []
  type: TYPE_NORMAL
- en: A 2019 attack on Quest Diagnostics through a flaw in its web payment page exposed
    12 million patients’ records. In 2017, the credit bureau Equifax failed to protect
    150 million people’s credit information, including birth dates, Social Security
    numbers, and addresses. A hack against Marriott in 2018 compromised 500 million
    travelers’ data, including credit card numbers and passport data. The largest
    data breach to date—the 2013 attack on web search engine and email platform Yahoo!—exposed
    all 3 *billion* users’ accounts, including email addresses and passwords.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll see how malicious hackers attack web applications with
    only a web browser and a few lines of code. You’ll also learn some common ways
    security professionals defend against web attacks, safeguarding millions (perhaps
    billions!) of people’s data from cybercriminals.
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploitable VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to practice web hacking safely and ethically, so we’ll set up a web
    server in our virtual hacking lab. The creators of Metasploit also created an
    intentionally vulnerable web server, called Metasploitable, for training purposes.
    We’re going to use a version of that server that I’ve customized for you. Let’s
    add it to your virtual hacking lab:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/)
    and click the link to download the *Metasploitable2-gohack.ova* file to your host
    computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the downloaded file to open it in VirtualBox. The Import Virtual
    Appliance window will open, as shown in [Figure 8-1](#figure8-1). Click **Import**.![f08001](image_fi/502000c08/f08001.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-1: Importing the *Metasploitable2-**gohack**.ova* file into VirtualBox'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the Metasploitable2 VM in the VirtualBox VM Manager and click **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Network** tab and make sure the Enable Network Adapter box is checked
    and shows Attached to: NAT Network and Name: PublicNAT, just as for our other
    VMs. The correct settings are shown in [Figure 8-2](#figure8-2).![f08002](image_fi/502000c08/f08002.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-2: Making sure the Metasploitable VM is connected to the PublicNAT
    network'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **OK** to save these network settings. Your new Metasploitable VM is now
    ready to run!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Metasploitable in VirtualBox Manager and click **Start**. Because Metasploitable
    is a web server, not a desktop computer, it uses a text-based interface instead
    of a graphical user interface. If the interface is too small to read, go to the
    VM’s menu bar and select **View**▶**Virtual Screen 1**▶**Scale to 200%** (or another
    value that fits your screen).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the username `msfadmin` and password `msfadmin`. The password won’t show
    up as you type in the terminal window on Metasploitable, but if you enter it correctly,
    the prompt will change from the login to a shell prompt like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Metasploitable will respond with its IP address (`10.0.9.8` in my case):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Take note of the IP address 1. You’ll need it to surf to the Metasploitable
    VM’s web server from your other virtual machines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Web Hacking from a Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web hacking is very common because it’s rewarding for attackers (remember, a
    successful attack against a web server can yield *millions* of users’ information
    at once), web servers are always on and connected to the internet, and the attacker
    needs only a web browser to do it. To see how it works, we’ll hack the Metasploitable
    server from the Edge browser in our Windows 10 VM.
  prefs: []
  type: TYPE_NORMAL
- en: Start your Windows 10 VM in VirtualBox Manager. Log in with the credentials
    `IEUser` and `Passw0rd!`. Open the Edge browser (it’s the blue *e* swirl icon
    on the taskbar) and enter your Metasploitable VM’s IP address into the address
    bar. You’ll see the Metasploitable 2 home page shown in [Figure 8-3](#figure8-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f08003](image_fi/502000c08/f08003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-3: From your Windows 10 VM, enter your Metasploitable VM’s IP address
    to see this home page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploitable 2 contains five vulnerable web applications, but we’ll focus
    on just one of them: DVWA, or Darn Vulnerable Web App. This intentionally vulnerable
    open source web application was built to help web developers and security professionals
    learn basic hacks, as well as how to protect a web application from them. DVWA
    has different vulnerability levels so users can try hacking applications with
    varying degrees of security. We’ll set the security level to low, to simulate
    a web application with no added security.'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **DVWA** link on the Metasploitable 2 home page. You’ll see the app’s
    login screen, shown in [Figure 8-4](#figure8-4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `admin` as the username and `password` as the password to access DVWA.![f08004](image_fi/502000c08/f08004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-4: The DVWA login screen with our credentials'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **DVWA Security** on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Script Security section, set the security level to **low** and click
    **Submit**, as shown in [Figure 8-5](#figure8-5).![f08005](image_fi/502000c08/f08005.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-5: Setting the DVWA script security level to low'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we’re ready to try out two kinds of web attacks on DVWA: cross-site scripting
    attacks and SQL injection attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Launching Cross-Site Scripting Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a *cross-site scripting (XSS) attack*, a hacker enters malicious code into
    a web page through a field intended for regular text input, such as a login form
    or a search field. XSS attacks are also known as *code injection* attacks, because
    hackers are able to enter, or *inject*, their own code into the web application.
    We’ll use two web languages—JavaScript and HyperText Markup Language (HTML)—to
    inject a script into DVWA.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test a web application for XSS vulnerabilities, you need only a single JavaScript
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The command pops up an alert box reading “You’ve been hacked!” To inject it
    into a web page, we wrap the JavaScript code in the proper HTML tags, `<script>`
    and `</script>`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The HTML `<script>` tag tells a web page that a *script* (a short piece of code),
    usually in JavaScript, is beginning. The `</script>` tag is called a closing tag,
    and it lets the web page know the script code is finished.
  prefs: []
  type: TYPE_NORMAL
- en: Reflected Cross-Site Scripting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *reflected XSS attack* takes advantage of pages that display, or *reflect*,
    a user’s input directly back to them on the web page, like an order form that
    asks for your name and address and then displays them to you to confirm that you
    typed them correctly. Attackers use reflected cross-site scripting to inject malicious
    HTML or JavaScript code into an unprotected web application. Let’s try it out!
  prefs: []
  type: TYPE_NORMAL
- en: 'In DVWA on your Windows 10 VM, click **XSS reflected** on the left to open
    the Vulnerability: Reflected Cross Site Scripting (XSS) web page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This page is designed to reflect your input into the What’s your name? text
    field by displaying it to you, after the word *Hello*. For example, if you enter
    the name `Bryson`, the page will respond with `Hello Bryson`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Instead of your name, enter the HTML/JavaScript command from the previous section
    into the name text field, as shown in [Figure 8-6](#figure8-6):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![f08006](image_fi/502000c08/f08006.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8-6: Attacking the reflected XSS page by entering HTML and JavaScript
    into the text box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Submit**, and the web page will reload, popping up the message “You’ve
    been hacked!” as shown in [Figure 8-7](#figure8-7).![f08007](image_fi/502000c08/f08007.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-7: The vulnerable web page pops up a message saying we’ve been hacked!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By combining a single line of HTML and JavaScript and entering it into an unprotected
    text box in DVWA, we injected our code into the web page. A malicious attacker
    could use the same technique to convince a user that their computer is really
    under attack and get them to call a toll-free number for “technical support.”
    In this common scam, criminals rent a call center to take worried victims’ credit
    card information and charge them for fake computer services.
  prefs: []
  type: TYPE_NORMAL
- en: Stored Cross-Site Scripting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most websites use databases to store user input or information that changes
    often, such as product information or customer data. If an attacker injects malicious
    code into a web form tied to a database, that malicious code gets stored in the
    database and becomes a permanent part of the web page. This type of attack, called
    a *stored XSS attack*, ensures that the malicious code will run every time someone
    views the affected web page. By contrast, our reflected XSS attack didn’t permanently
    change the web page since our injected code wasn’t saved to a database. We’ll
    try out a stored XSS attack now.
  prefs: []
  type: TYPE_NORMAL
- en: Click **XSS stored** in the DVWA menu at the left. You’ll see a guestbook-like
    application that allows a user to save their name and a short message to the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of signing the guestbook with your name and a nice message, enter just
    your name. Then, in the Message text box, enter the XSS attack code that we want
    to store in this page’s database, `<script>alert("You've been hacked!");</script>`,
    as shown in [Figure 8-8](#figure8-8).![f08008](image_fi/502000c08/f08008.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-8: Storing our malicious script in the XSS stored page in DVWA'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Sign Guestbook**, and you’ll see the alert pop up, as shown in [Figure
    8-9](#figure8-9).![f08009](image_fi/502000c08/f08009.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-9: Our JavaScript alert will tell every visitor, “You’ve been hacked!”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unlike in the reflected attack, this alert will pop up every time someone visits
    the Stored Cross Site Scripting (XSS) guestbook page. You’ve used a database-driven
    web page to permanently store a malicious script in the DVWA website.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript can do much more than pop up an alert message, though. Let’s change
    the browser’s `window.location` to redirect users to a completely different website:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the XSS stored web page again and click **OK** to close the alert message
    pop-up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, after entering your name as usual, enter the following code into
    the Message text box, as shown in [Figure 8-10](#figure8-10):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![f08010alt](image_fi/502000c08/f08010alt.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8-10: Entering a more malicious script that will redirect the user to
    a completely different web page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Sign Guestbook**, and you’ll see the alert pop-up we injected before.
    But as soon as you close the alert, you’ll be taken to [https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/).
    You can’t go back to the DVWA XSS stored page because every time you reload the
    page, it redirects to the *Go H*ck Yourself* web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve permanently hijacked the XSS stored page so that every visitor will be
    redirected to this book’s website instead. An attacker could do the same, or worse,
    to an unprotected web application in your employer’s website, your favorite online
    game or social media app, or even your local government website. To restore the
    site’s original functionality, the site administrator would have to access the
    database and delete the stored XSS code entirely.
  prefs: []
  type: TYPE_NORMAL
- en: To reset the database in DVWA to delete the malicious code we entered, click
    **Setup** in the DVWA menu on the left, as shown in [Figure 8-11](#figure8-11).
    Then click **Create / Reset Database**, and DVWA will reset the database to its
    original state.
  prefs: []
  type: TYPE_NORMAL
- en: '![f08011](image_fi/502000c08/f08011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-11: Clearing your stored XSS hacks'
  prefs: []
  type: TYPE_NORMAL
- en: Launching SQL Injection Attacks on Databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Injecting malicious code *into* a website was scary, but how do hackers take
    sensitive data *from* a website? In this section, you’ll learn how web hackers
    use Structured Query Language (SQL) injection attacks to steal information directly
    from a website’s database. SQL is the language used to access most databases,
    and a *SQL injection* *(SQLi)* involves inserting malicious SQL code into a web
    application to trick the application’s database into revealing private information.
  prefs: []
  type: TYPE_NORMAL
- en: Databases contain *tables*, which look like spreadsheets of columns and rows.
    The columns are for different *fields* or pieces of information, like first name,
    last name, username, password, email address, and so on. The rows are for individual
    *records*. For example, each user in a table of users would occupy a separate
    row.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we access a database, we use a SQL *query*, like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This query requests the `password` field from the `users` table from the row
    or rows where the `username` field is `Bryson`. We can modify the query slightly
    to ask for *all* users’ passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: By adding an `OR` condition to the query, we’ve asked the database to select
    all the passwords from the `users` table. At every row, SQL will ask whether `username`
    equals `'Bryson'` or whether `1` equals `'1'` for that row. If either of these
    conditions is true, SQL will return the password for that row. Because one of
    the conditions is *always* true (1 is always equal to 1), the database will return
    *every* password in the `users` table.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s inject some SQL queries into DVWA to steal information from the website’s
    database.
  prefs: []
  type: TYPE_NORMAL
- en: In your Windows 10 VM’s Edge browser, make sure DVWA Script Security is set
    to low (as shown in [Figure 8-5](#figure8-5) on page 95).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **SQL Injection** in the DVWA menu on the left. You’ll see a user lookup
    page like the one in [Figure 8-12](#figure8-12).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normally, entering a User ID (such as 1) into the text box and clicking Submit
    reveals that particular user’s information. However, we’ll hack the form to show
    all the users.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the SQL Injection page if you’ve tried looking up a user. Then enter
    `'' OR 1=''1` into the User ID: text box, as shown in [Figure 8-12](#figure8-12).![f08012](image_fi/502000c08/f08012.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8-12: Attacking the database by injecting SQL code into a vulnerable
    database search form'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Submit**, and you should see a listing of all users’ first names and
    last names (surnames), as shown in [Figure 8-13](#figure8-13).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let’s extract all the DVWA usernames and passwords. Reload the SQL Injection
    page and enter the following SQL code into the search box under User ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![f08013](image_fi/502000c08/f08013.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8-13: We’ve revealed all five users’ first and last names!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `union` command in SQL joins two query statements to access multiple tables
    at the same time. In this case, we’re combining the user ID lookup for first and
    last names with a query that will return usernames and passwords from the `users`
    table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Submit**, and you’ll see all five users’ usernames and passwords in
    place of their first and last names, as shown in [Figure 8-14](#figure8-14). All
    the passwords are in hashed form, but as you learned in Chapter 7, tools like
    Hashes.com or John the Ripper make short work of most password hashes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f08014](image_fi/502000c08/f08014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-14: We’ve stolen all the usernames and password hashes from DVWA using
    a SQL injection attack!'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a hacker armed with a few short lines of JavaScript or SQL can
    damage a web application, redirect users to a malicious site, steal data, or worse.
    Fortunately, ethical hackers can help website owners defend against these attacks,
    tremendously improving the security of everyone’s online data.
  prefs: []
  type: TYPE_NORMAL
- en: Securing Web Applications from XSS, SQLi, and More
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DVWA shows both how to hack *and* how to secure web applications. In the bottom-right
    corner of every vulnerable page, there’s a View Source button that shows the page’s
    code. We’ll compare the source code of the low-security page with that of pages
    with higher security levels to learn how to protect against injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on the SQL Injection page with DVWA’s Script Security set to low, click
    **View Source** to see the source code for the user lookup application, including
    these two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This web application is written in PHP, a popular web programming language.
    The first line of code gets the user’s input from a form field named `'id'` and
    stores it in a variable called `$id`. Then, it creates a SQL query using the user’s
    input. The user’s unmodified input becomes part of the code—this is a dangerous
    programming mistake, and it’s what allowed us to hack into the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **DVWA Security** on the left, change the Script Security level to **medium**,
    and click **Submit**. Click **SQL Injection** to return to the user lookup application
    and then click **View Source** again. (If you have trouble switching security
    levels, close the Edge browser, reopen it, and log back in to DVWA.) This time,
    you’ll see a new line of code inserted between the two just listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This line reformats the user’s input to add *escape characters* (like the backslash
    `\`) before any special characters the user typed, such as the single quote `'`
    we used in the `' OR 1='1` hack. Adding a backslash before a single quote tells
    the database to treat the single quote like it’s a part of the text, not part
    of a command. The `mysql_real_escape_string()` command makes the form safer by
    changing the single quote and other potentially malicious characters into their
    harmless escape sequence forms (`\'`) so that the database doesn’t treat them
    like code, but a motivated attacker could still get around this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the DVWA Security page and change the Script Security level to **high**.
    Then return to the SQL Injection page and click **View Source** one last time.
    Look for this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The high-security code uses the `stripslashes()` command to remove backslashes
    from the user’s text and `is_numeric()` to make sure you entered a number. Using
    `is_numeric()` is an example of form field *validation*: the command `is_numeric()`
    checks that the user’s submission is in an acceptable, expected format—in this
    case a numeric ID—and proceeds only if it is.'
  prefs: []
  type: TYPE_NORMAL
- en: View the source of some of the other pages at low, medium, and high security
    to discover other layers of commands that web developers use to protect their
    apps. For example, the secure version of the XSS-reflected page includes `htmlspecialchars()`
    to protect against HTML and JavaScript injection. To prevent user input from breaking
    the website or database code, the added commands in the higher-security versions
    of the source code *sanitize* the input, or remove potentially malicious code
    symbols (like the single quote, backslash, and angle bracket characters) from
    it, before that input is used on the site or in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The Takeaway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you learned that web servers are online and available to hackers
    around the globe 24/7\. Moreover, a single unprotected web form can expose millions
    of users’ data to an attacker. You built an intentionally vulnerable web server,
    the Metasploitable VM, in your virtual hacking lab, and you used the DVWA web
    application to train yourself to test websites for two types of code injection:
    cross-site scripting (XSS) and SQL injection (SQLi).'
  prefs: []
  type: TYPE_NORMAL
- en: You used reflected and stored malicious JavaScript code to make a web page pop
    up an alert message and redirect the browser to a different website. You viewed
    the first and last names of all users in a database-driven web application using
    SQL, and then you learned how an attacker could steal usernames and password hashes
    from a web database. With the password-cracking tools we used in Chapter 7, an
    attacker could steal millions of usernames and passwords with very little skill
    or effort.
  prefs: []
  type: TYPE_NORMAL
- en: With so much at stake, securing web applications from attacks is an important
    role for ethical hackers. It takes multiple layers of security to adequately protect
    web applications. You learned about several functions in the popular web-programming
    language PHP that sanitize user input by removing special code-related characters,
    protecting the server and database. You also saw an example of form field validation,
    checking a text field to make sure that a user entered an acceptable value.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you get to add one more set of skills to your ethical hacking
    toolbelt—mobile device hacking! You’ll learn how to keep yourself and your loved
    ones safe from the increasing number of mobile attacks.
  prefs: []
  type: TYPE_NORMAL
