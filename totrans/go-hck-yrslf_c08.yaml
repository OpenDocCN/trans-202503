- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Web Hacking
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网页黑客攻击
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Hacking an individual computer might yield a handful of usernames, passwords,
    and other data. But hacking a web server could give an attacker *millions* of
    usernames and passwords to test on banking sites, email servers, and more.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击一台单独的计算机可能会获得少量的用户名、密码和其他数据。但攻击一台网页服务器则可能让攻击者获得 *数百万* 个用户名和密码，从而可以在银行网站、电子邮件服务器等进行测试。
- en: A 2019 attack on Quest Diagnostics through a flaw in its web payment page exposed
    12 million patients’ records. In 2017, the credit bureau Equifax failed to protect
    150 million people’s credit information, including birth dates, Social Security
    numbers, and addresses. A hack against Marriott in 2018 compromised 500 million
    travelers’ data, including credit card numbers and passport data. The largest
    data breach to date—the 2013 attack on web search engine and email platform Yahoo!—exposed
    all 3 *billion* users’ accounts, including email addresses and passwords.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 2019 年，Quest Diagnostics 由于其网页支付页面的漏洞遭到攻击，泄露了 1200 万患者的记录。2017 年，信用局 Equifax
    未能保护 1.5 亿人的信用信息，包括出生日期、社会安全号码和地址。2018 年，万豪酒店遭到黑客攻击，导致 5 亿名旅客的数据泄露，包括信用卡号和护照信息。目前为止，最大的数据泄露事件是
    2013 年对搜索引擎和电子邮件平台 Yahoo! 的攻击，泄露了 30 *亿*用户的账户信息，包括电子邮件地址和密码。
- en: In this chapter, you’ll see how malicious hackers attack web applications with
    only a web browser and a few lines of code. You’ll also learn some common ways
    security professionals defend against web attacks, safeguarding millions (perhaps
    billions!) of people’s data from cybercriminals.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将看到恶意黑客如何仅通过网页浏览器和几行代码攻击网页应用程序。你还将学习一些安全专家如何防范网页攻击的常见方法，保护数百万（甚至数十亿！）人的数据免受网络犯罪分子的侵害。
- en: The Metasploitable VM
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploitable 虚拟机
- en: 'We want to practice web hacking safely and ethically, so we’ll set up a web
    server in our virtual hacking lab. The creators of Metasploit also created an
    intentionally vulnerable web server, called Metasploitable, for training purposes.
    We’re going to use a version of that server that I’ve customized for you. Let’s
    add it to your virtual hacking lab:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望安全、道德地进行网页黑客攻击练习，因此我们将在虚拟黑客实验室中搭建一个网页服务器。Metasploit 的创建者还专门为训练目的创建了一个故意存在漏洞的网页服务器，称为
    Metasploitable。我们将使用我为你定制的该服务器版本。现在，让我们将它添加到你的虚拟黑客实验室中：
- en: Go to [https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/)
    and click the link to download the *Metasploitable2-gohack.ova* file to your host
    computer.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/)并点击链接下载
    *Metasploitable2-gohack.ova* 文件到你的主机计算机。
- en: Double-click the downloaded file to open it in VirtualBox. The Import Virtual
    Appliance window will open, as shown in [Figure 8-1](#figure8-1). Click **Import**.![f08001](image_fi/502000c08/f08001.png)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击下载的文件，在 VirtualBox 中打开。将出现导入虚拟设备窗口，如[图 8-1](#figure8-1)所示。点击**导入**。![f08001](image_fi/502000c08/f08001.png)
- en: 'Figure 8-1: Importing the *Metasploitable2-**gohack**.ova* file into VirtualBox'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-1：将 *Metasploitable2-**gohack**.ova* 文件导入到 VirtualBox
- en: Select the Metasploitable2 VM in the VirtualBox VM Manager and click **Settings**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VirtualBox 虚拟机管理器中选择 Metasploitable2 虚拟机并点击**设置**。
- en: 'Go to the **Network** tab and make sure the Enable Network Adapter box is checked
    and shows Attached to: NAT Network and Name: PublicNAT, just as for our other
    VMs. The correct settings are shown in [Figure 8-2](#figure8-2).![f08002](image_fi/502000c08/f08002.png)'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**网络**标签，确保勾选了启用网络适配器框，并且显示为“连接到：NAT 网络”和“名称：PublicNAT”，就像我们的其他虚拟机一样。正确的设置如[图
    8-2](#figure8-2)所示。![f08002](image_fi/502000c08/f08002.png)
- en: 'Figure 8-2: Making sure the Metasploitable VM is connected to the PublicNAT
    network'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-2：确保 Metasploitable 虚拟机连接到 PublicNAT 网络
- en: Click **OK** to save these network settings. Your new Metasploitable VM is now
    ready to run!
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**保存这些网络设置。你的新 Metasploitable 虚拟机现在已经准备好运行！
- en: Select Metasploitable in VirtualBox Manager and click **Start**. Because Metasploitable
    is a web server, not a desktop computer, it uses a text-based interface instead
    of a graphical user interface. If the interface is too small to read, go to the
    VM’s menu bar and select **View**▶**Virtual Screen 1**▶**Scale to 200%** (or another
    value that fits your screen).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VirtualBox 管理器中选择 Metasploitable，点击**启动**。由于 Metasploitable 是一台网页服务器，而不是桌面计算机，因此它使用基于文本的界面而非图形用户界面。如果界面太小而无法读取，请前往虚拟机的菜单栏，选择**视图**▶**虚拟屏幕
    1**▶**缩放到 200%**（或适合你屏幕的其他值）。
- en: 'Enter the username `msfadmin` and password `msfadmin`. The password won’t show
    up as you type in the terminal window on Metasploitable, but if you enter it correctly,
    the prompt will change from the login to a shell prompt like this one:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户名`msfadmin`和密码`msfadmin`。在Metasploitable的终端窗口中，密码在输入时不会显示，但如果输入正确，提示符会从登录界面切换到如下所示的shell提示符：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Enter this command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Metasploitable will respond with its IP address (`10.0.9.8` in my case):'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Metasploitable将返回其IP地址（在我的情况下是`10.0.9.8`）：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Take note of the IP address 1. You’ll need it to surf to the Metasploitable
    VM’s web server from your other virtual machines.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记下IP地址1。你将需要它从其他虚拟机访问Metasploitable虚拟机的网页服务器。
- en: Web Hacking from a Browser
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从浏览器进行网页攻击
- en: Web hacking is very common because it’s rewarding for attackers (remember, a
    successful attack against a web server can yield *millions* of users’ information
    at once), web servers are always on and connected to the internet, and the attacker
    needs only a web browser to do it. To see how it works, we’ll hack the Metasploitable
    server from the Edge browser in our Windows 10 VM.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网络攻击非常常见，因为它对攻击者来说具有回报（记住，对一个网页服务器的成功攻击可以一次性获取*数百万*用户的信息），网页服务器始终在线并连接到互联网，而攻击者只需要一个网页浏览器即可进行攻击。为了了解其工作原理，我们将在Windows
    10虚拟机的Edge浏览器中攻击Metasploitable服务器。
- en: Start your Windows 10 VM in VirtualBox Manager. Log in with the credentials
    `IEUser` and `Passw0rd!`. Open the Edge browser (it’s the blue *e* swirl icon
    on the taskbar) and enter your Metasploitable VM’s IP address into the address
    bar. You’ll see the Metasploitable 2 home page shown in [Figure 8-3](#figure8-3).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在VirtualBox管理器中启动你的Windows 10虚拟机。使用凭证`IEUser`和`Passw0rd!`登录。打开Edge浏览器（它是任务栏上的蓝色*e*漩涡图标），并在地址栏中输入你的Metasploitable虚拟机的IP地址。你将看到Metasploitable
    2的主页，如[图8-3](#figure8-3)所示。
- en: '![f08003](image_fi/502000c08/f08003.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![f08003](image_fi/502000c08/f08003.png)'
- en: 'Figure 8-3: From your Windows 10 VM, enter your Metasploitable VM’s IP address
    to see this home page.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：在Windows 10虚拟机中输入Metasploitable虚拟机的IP地址，查看此主页。
- en: 'Metasploitable 2 contains five vulnerable web applications, but we’ll focus
    on just one of them: DVWA, or Darn Vulnerable Web App. This intentionally vulnerable
    open source web application was built to help web developers and security professionals
    learn basic hacks, as well as how to protect a web application from them. DVWA
    has different vulnerability levels so users can try hacking applications with
    varying degrees of security. We’ll set the security level to low, to simulate
    a web application with no added security.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable 2包含五个易受攻击的网页应用程序，但我们只关注其中一个：DVWA，或者叫做Darn Vulnerable Web App（极其脆弱的网页应用）。这个故意存在漏洞的开源网页应用程序是为了帮助网页开发人员和安全专业人员学习基本的黑客技术，以及如何保护网页应用免受这些攻击。DVWA有不同的漏洞级别，用户可以在不同的安全程度下尝试攻击应用程序。我们将安全级别设置为低，以模拟没有额外安全保护的网页应用程序。
- en: Click the **DVWA** link on the Metasploitable 2 home page. You’ll see the app’s
    login screen, shown in [Figure 8-4](#figure8-4).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Metasploitable 2主页上的**DVWA**链接。你将看到应用程序的登录界面，如[图8-4](#figure8-4)所示。
- en: Enter `admin` as the username and `password` as the password to access DVWA.![f08004](image_fi/502000c08/f08004.png)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户名`admin`和密码`password`以访问DVWA。![f08004](image_fi/502000c08/f08004.png)
- en: 'Figure 8-4: The DVWA login screen with our credentials'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8-4：使用我们的凭证登录DVWA界面
- en: Click **DVWA Security** on the left.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的**DVWA安全性**。
- en: Under the Script Security section, set the security level to **low** and click
    **Submit**, as shown in [Figure 8-5](#figure8-5).![f08005](image_fi/502000c08/f08005.png)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本安全部分，将安全级别设置为**低**并点击**提交**，如[图8-5](#figure8-5)所示。![f08005](image_fi/502000c08/f08005.png)
- en: 'Figure 8-5: Setting the DVWA script security level to low'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8-5：将DVWA脚本安全级别设置为低
- en: 'Now we’re ready to try out two kinds of web attacks on DVWA: cross-site scripting
    attacks and SQL injection attacks.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备在DVWA上尝试两种网络攻击：跨站脚本攻击和SQL注入攻击。
- en: Launching Cross-Site Scripting Attacks
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发起跨站脚本攻击
- en: In a *cross-site scripting (XSS) attack*, a hacker enters malicious code into
    a web page through a field intended for regular text input, such as a login form
    or a search field. XSS attacks are also known as *code injection* attacks, because
    hackers are able to enter, or *inject*, their own code into the web application.
    We’ll use two web languages—JavaScript and HyperText Markup Language (HTML)—to
    inject a script into DVWA.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*跨站脚本（XSS）攻击*中，黑客通过一个本应接受普通文本输入的字段（如登录表单或搜索框）将恶意代码注入网页。XSS攻击也被称为*代码注入*攻击，因为黑客能够将他们自己的代码“注入”到网页应用程序中。我们将使用两种网页语言——JavaScript和超文本标记语言（HTML）——来注入脚本到DVWA中。
- en: 'To test a web application for XSS vulnerabilities, you need only a single JavaScript
    command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试一个Web应用程序的XSS漏洞，只需要一个简单的JavaScript命令：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command pops up an alert box reading “You’ve been hacked!” To inject it
    into a web page, we wrap the JavaScript code in the proper HTML tags, `<script>`
    and `</script>`, like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令弹出一个警告框，显示“你已被黑客攻击！”为了将其注入网页，我们需要将JavaScript代码包裹在正确的HTML标签中，即`<script>`和`</script>`，如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The HTML `<script>` tag tells a web page that a *script* (a short piece of code),
    usually in JavaScript, is beginning. The `</script>` tag is called a closing tag,
    and it lets the web page know the script code is finished.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: HTML中的`<script>`标签告诉网页，*脚本*（一段简短的代码），通常是JavaScript，开始了。`</script>`标签称为结束标签，它让网页知道脚本代码已经结束。
- en: Reflected Cross-Site Scripting
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 反射型跨站脚本（XSS）
- en: A *reflected XSS attack* takes advantage of pages that display, or *reflect*,
    a user’s input directly back to them on the web page, like an order form that
    asks for your name and address and then displays them to you to confirm that you
    typed them correctly. Attackers use reflected cross-site scripting to inject malicious
    HTML or JavaScript code into an unprotected web application. Let’s try it out!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*反射型XSS攻击*利用那些直接将用户输入反射回网页的页面，例如一个要求输入姓名和地址并在页面上显示以确认输入是否正确的订单表单。攻击者利用反射型跨站脚本将恶意HTML或JavaScript代码注入到未加保护的Web应用程序中。让我们来试一下！'
- en: 'In DVWA on your Windows 10 VM, click **XSS reflected** on the left to open
    the Vulnerability: Reflected Cross Site Scripting (XSS) web page.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在你Windows 10虚拟机中的DVWA里，点击左侧的**反射型XSS**，打开漏洞页面：反射型跨站脚本（XSS）。 '
- en: This page is designed to reflect your input into the What’s your name? text
    field by displaying it to you, after the word *Hello*. For example, if you enter
    the name `Bryson`, the page will respond with `Hello Bryson`.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本页面的设计目的是将你在“你叫什么名字？”文本框中的输入反射回页面，显示在*Hello*字样后面。例如，如果你输入名字`Bryson`，页面将显示`Hello
    Bryson`。
- en: 'Instead of your name, enter the HTML/JavaScript command from the previous section
    into the name text field, as shown in [Figure 8-6](#figure8-6):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要输入你的名字，而是将上一节中的HTML/JavaScript命令输入到名字文本框中，如[图8-6](#figure8-6)所示：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![f08006](image_fi/502000c08/f08006.png)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f08006](image_fi/502000c08/f08006.png)'
- en: 'Figure 8-6: Attacking the reflected XSS page by entering HTML and JavaScript
    into the text box'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8-6：通过将HTML和JavaScript输入到文本框中攻击反射型XSS页面
- en: Click **Submit**, and the web page will reload, popping up the message “You’ve
    been hacked!” as shown in [Figure 8-7](#figure8-7).![f08007](image_fi/502000c08/f08007.png)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**，网页将重新加载，弹出“你已被黑客攻击！”的消息，如[图8-7](#figure8-7)所示。![f08007](image_fi/502000c08/f08007.png)
- en: 'Figure 8-7: The vulnerable web page pops up a message saying we’ve been hacked!'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8-7：受影响的网页弹出一条消息，表示我们已被黑客攻击！
- en: By combining a single line of HTML and JavaScript and entering it into an unprotected
    text box in DVWA, we injected our code into the web page. A malicious attacker
    could use the same technique to convince a user that their computer is really
    under attack and get them to call a toll-free number for “technical support.”
    In this common scam, criminals rent a call center to take worried victims’ credit
    card information and charge them for fake computer services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一行HTML和JavaScript结合起来并输入到DVWA中未加保护的文本框里，我们将代码注入到网页中。恶意攻击者可以使用相同的技术，欺骗用户相信他们的计算机真的遭到攻击，并让他们拨打一个免费的“技术支持”电话。在这种常见的骗局中，犯罪分子租用一个呼叫中心，获取焦虑受害者的信用卡信息，并收取虚假的计算机服务费用。
- en: Stored Cross-Site Scripting
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 存储型跨站脚本（XSS）
- en: Most websites use databases to store user input or information that changes
    often, such as product information or customer data. If an attacker injects malicious
    code into a web form tied to a database, that malicious code gets stored in the
    database and becomes a permanent part of the web page. This type of attack, called
    a *stored XSS attack*, ensures that the malicious code will run every time someone
    views the affected web page. By contrast, our reflected XSS attack didn’t permanently
    change the web page since our injected code wasn’t saved to a database. We’ll
    try out a stored XSS attack now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站使用数据库存储用户输入或经常变化的信息，如产品信息或客户数据。如果攻击者将恶意代码注入到与数据库关联的网页表单中，这段恶意代码就会存储在数据库里，成为网页的永久一部分。这种类型的攻击被称为*存储型XSS攻击*，它确保每次有人访问受影响的网页时，恶意代码都会运行。相比之下，我们的反射型XSS攻击并未永久改变网页，因为我们的注入代码并没有被保存到数据库中。接下来我们将尝试一个存储型XSS攻击。
- en: Click **XSS stored** in the DVWA menu at the left. You’ll see a guestbook-like
    application that allows a user to save their name and a short message to the page.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧 DVWA 菜单中的**XSS 存储**。你将看到一个类似留言簿的应用程序，允许用户在页面上保存自己的姓名和短消息。
- en: Instead of signing the guestbook with your name and a nice message, enter just
    your name. Then, in the Message text box, enter the XSS attack code that we want
    to store in this page’s database, `<script>alert("You've been hacked!");</script>`,
    as shown in [Figure 8-8](#figure8-8).![f08008](image_fi/502000c08/f08008.png)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要用你的名字和一条友好的留言来签名留言簿，而是仅输入你的姓名。然后，在消息文本框中输入我们希望存储在此页面数据库中的 XSS 攻击代码，`<script>alert("你已被黑客攻击！");</script>`，如[图
    8-8](#figure8-8)所示。![f08008](image_fi/502000c08/f08008.png)
- en: 'Figure 8-8: Storing our malicious script in the XSS stored page in DVWA'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-8：在 DVWA 中将我们的恶意脚本存储到 XSS 存储页面
- en: Click **Sign Guestbook**, and you’ll see the alert pop up, as shown in [Figure
    8-9](#figure8-9).![f08009](image_fi/502000c08/f08009.png)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**签名留言簿**，你将看到警报弹出，如[图 8-9](#figure8-9)所示。![f08009](image_fi/502000c08/f08009.png)
- en: 'Figure 8-9: Our JavaScript alert will tell every visitor, “You’ve been hacked!”'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-9：我们的 JavaScript 警报会告诉每个访问者：“你被黑客攻击了！”
- en: Unlike in the reflected attack, this alert will pop up every time someone visits
    the Stored Cross Site Scripting (XSS) guestbook page. You’ve used a database-driven
    web page to permanently store a malicious script in the DVWA website.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与反射型攻击不同，每当有人访问存储型跨站脚本（XSS）留言簿页面时，这个警报都会弹出。你已经利用数据库驱动的网页，在 DVWA 网站上永久存储了恶意脚本。
- en: 'JavaScript can do much more than pop up an alert message, though. Let’s change
    the browser’s `window.location` to redirect users to a completely different website:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，JavaScript 的功能远不止弹出警报消息。我们可以更改浏览器的`window.location`，将用户重定向到一个完全不同的网站：
- en: Load the XSS stored web page again and click **OK** to close the alert message
    pop-up.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 XSS 存储的网页并点击**确定**关闭警报消息弹窗。
- en: 'This time, after entering your name as usual, enter the following code into
    the Message text box, as shown in [Figure 8-10](#figure8-10):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，像往常一样输入你的姓名，然后在消息文本框中输入以下代码，如[图 8-10](#figure8-10)所示：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![f08010alt](image_fi/502000c08/f08010alt.png)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f08010alt](image_fi/502000c08/f08010alt.png)'
- en: 'Figure 8-10: Entering a more malicious script that will redirect the user to
    a completely different web page'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-10：输入一个更恶意的脚本，将用户重定向到一个完全不同的网页
- en: Click **Sign Guestbook**, and you’ll see the alert pop-up we injected before.
    But as soon as you close the alert, you’ll be taken to [https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/).
    You can’t go back to the DVWA XSS stored page because every time you reload the
    page, it redirects to the *Go H*ck Yourself* web page.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**签名留言簿**，你将看到我们之前注入的警报弹窗。但当你关闭警报后，你将被重定向到[https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/)。你无法返回
    DVWA XSS 存储页面，因为每次重新加载页面时，它都会重定向到*Go H*ck Yourself* 网站。
- en: We’ve permanently hijacked the XSS stored page so that every visitor will be
    redirected to this book’s website instead. An attacker could do the same, or worse,
    to an unprotected web application in your employer’s website, your favorite online
    game or social media app, or even your local government website. To restore the
    site’s original functionality, the site administrator would have to access the
    database and delete the stored XSS code entirely.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经永久劫持了 XSS 存储页面，让每个访问者都会被重定向到这个书籍网站。攻击者也可以做同样的事情，甚至更糟，针对你公司网站的未保护网页、你最喜欢的在线游戏或社交媒体应用，甚至是你当地政府的网站。要恢复网站的原始功能，站点管理员需要访问数据库并完全删除存储的
    XSS 代码。
- en: To reset the database in DVWA to delete the malicious code we entered, click
    **Setup** in the DVWA menu on the left, as shown in [Figure 8-11](#figure8-11).
    Then click **Create / Reset Database**, and DVWA will reset the database to its
    original state.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要重置 DVWA 数据库以删除我们输入的恶意代码，点击左侧 DVWA 菜单中的**设置**，如[图 8-11](#figure8-11)所示。然后点击**创建/重置数据库**，DVWA
    会将数据库重置为初始状态。
- en: '![f08011](image_fi/502000c08/f08011.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f08011](image_fi/502000c08/f08011.png)'
- en: 'Figure 8-11: Clearing your stored XSS hacks'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-11：清除你存储的 XSS 攻击
- en: Launching SQL Injection Attacks on Databases
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数据库发起 SQL 注入攻击
- en: Injecting malicious code *into* a website was scary, but how do hackers take
    sensitive data *from* a website? In this section, you’ll learn how web hackers
    use Structured Query Language (SQL) injection attacks to steal information directly
    from a website’s database. SQL is the language used to access most databases,
    and a *SQL injection* *(SQLi)* involves inserting malicious SQL code into a web
    application to trick the application’s database into revealing private information.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 向网站注入恶意代码*是*可怕的，但黑客是如何从网站中获取敏感数据*的*呢？在本节中，你将学习到网页黑客如何使用结构化查询语言（SQL）注入攻击，直接从网站的数据库中窃取信息。SQL
    是用来访问大多数数据库的语言，*SQL 注入*（*SQLi*）涉及将恶意 SQL 代码插入到网页应用程序中，以欺骗应用程序的数据库，泄露私人信息。
- en: Databases contain *tables*, which look like spreadsheets of columns and rows.
    The columns are for different *fields* or pieces of information, like first name,
    last name, username, password, email address, and so on. The rows are for individual
    *records*. For example, each user in a table of users would occupy a separate
    row.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库包含*表格*，这些表格看起来像是由列和行组成的电子表格。列是用于不同*字段*或信息片段的，比如名字、姓氏、用户名、密码、电子邮件地址等等。行则表示单独的*记录*。例如，用户表中的每个用户都会占据一行。
- en: 'When we access a database, we use a SQL *query*, like this one:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问数据库时，我们使用类似这样的 SQL *查询*：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This query requests the `password` field from the `users` table from the row
    or rows where the `username` field is `Bryson`. We can modify the query slightly
    to ask for *all* users’ passwords:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询请求从`users`表中获取`password`字段，并根据`username`字段为`Bryson`的行进行筛选。我们可以稍微修改查询，要求获取*所有*用户的密码：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By adding an `OR` condition to the query, we’ve asked the database to select
    all the passwords from the `users` table. At every row, SQL will ask whether `username`
    equals `'Bryson'` or whether `1` equals `'1'` for that row. If either of these
    conditions is true, SQL will return the password for that row. Because one of
    the conditions is *always* true (1 is always equal to 1), the database will return
    *every* password in the `users` table.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在查询中添加`OR`条件，我们要求数据库从`users`表中选择所有的密码。在每一行，SQL 都会检查`username`是否等于`'Bryson'`，或者该行的`1`是否等于`'1'`。如果这两个条件中有一个为真，SQL
    就会返回该行的密码。因为其中一个条件*总是*为真（1 总是等于 1），所以数据库将返回`users`表中的*所有*密码。
- en: Let’s inject some SQL queries into DVWA to steal information from the website’s
    database.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 DVWA 注入一些 SQL 查询，从网站的数据库中窃取信息。
- en: In your Windows 10 VM’s Edge browser, make sure DVWA Script Security is set
    to low (as shown in [Figure 8-5](#figure8-5) on page 95).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Windows 10 虚拟机的 Edge 浏览器中，确保 DVWA 脚本安全设置为低（如[图 8-5](#figure8-5)第 95 页所示）。
- en: Click **SQL Injection** in the DVWA menu on the left. You’ll see a user lookup
    page like the one in [Figure 8-12](#figure8-12).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧 DVWA 菜单中的**SQL 注入**。你将看到一个像[图 8-12](#figure8-12)中的用户查找页面。
- en: Normally, entering a User ID (such as 1) into the text box and clicking Submit
    reveals that particular user’s information. However, we’ll hack the form to show
    all the users.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，输入一个用户 ID（例如 1）到文本框并点击提交，会显示该用户的信息。然而，我们将破解表单以显示所有用户的信息。
- en: 'Reload the SQL Injection page if you’ve tried looking up a user. Then enter
    `'' OR 1=''1` into the User ID: text box, as shown in [Figure 8-12](#figure8-12).![f08012](image_fi/502000c08/f08012.png)'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试查找用户，重新加载 SQL 注入页面。然后在用户 ID：文本框中输入`' OR 1='1`，如[图 8-12](#figure8-12)所示。![f08012](image_fi/502000c08/f08012.png)
- en: 'Figure 8-12: Attacking the database by injecting SQL code into a vulnerable
    database search form'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-12：通过向易受攻击的数据库搜索表单注入 SQL 代码攻击数据库
- en: Click **Submit**, and you should see a listing of all users’ first names and
    last names (surnames), as shown in [Figure 8-13](#figure8-13).
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**，你应该能看到所有用户的名字和姓氏（姓氏）的列表，如[图 8-13](#figure8-13)所示。
- en: 'Now let’s extract all the DVWA usernames and passwords. Reload the SQL Injection
    page and enter the following SQL code into the search box under User ID:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们提取所有 DVWA 的用户名和密码。重新加载 SQL 注入页面，然后在用户 ID 下方的搜索框中输入以下 SQL 代码：
- en: '[PRE9]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![f08013](image_fi/502000c08/f08013.png)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f08013](image_fi/502000c08/f08013.png)'
- en: 'Figure 8-13: We’ve revealed all five users’ first and last names!'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8-13：我们已经显示了所有五个用户的名字和姓氏！
- en: The `union` command in SQL joins two query statements to access multiple tables
    at the same time. In this case, we’re combining the user ID lookup for first and
    last names with a query that will return usernames and passwords from the `users`
    table.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 中的`union`命令将两个查询语句结合在一起，以同时访问多个表。在这种情况下，我们将用户 ID 查找（包括名字和姓氏）与一个查询结合，该查询将从`users`表中返回用户名和密码。
- en: Click **Submit**, and you’ll see all five users’ usernames and passwords in
    place of their first and last names, as shown in [Figure 8-14](#figure8-14). All
    the passwords are in hashed form, but as you learned in Chapter 7, tools like
    Hashes.com or John the Ripper make short work of most password hashes.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**，你将看到五个用户的用户名和密码取代了他们的名字，如[图8-14](#figure8-14)所示。所有密码都是哈希形式，但正如你在第七章学到的那样，像Hashes.com或John
    the Ripper这样的工具能够轻松破解大多数密码哈希。
- en: '![f08014](image_fi/502000c08/f08014.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![f08014](image_fi/502000c08/f08014.png)'
- en: 'Figure 8-14: We’ve stolen all the usernames and password hashes from DVWA using
    a SQL injection attack!'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-14：我们通过SQL注入攻击从DVWA中窃取了所有用户名和密码哈希！
- en: As you can see, a hacker armed with a few short lines of JavaScript or SQL can
    damage a web application, redirect users to a malicious site, steal data, or worse.
    Fortunately, ethical hackers can help website owners defend against these attacks,
    tremendously improving the security of everyone’s online data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，黑客利用几行简单的JavaScript或SQL代码就可以破坏Web应用程序、将用户重定向到恶意网站、窃取数据，甚至更糟。幸运的是，伦理黑客可以帮助网站所有者防御这些攻击，极大地提高每个人在线数据的安全性。
- en: Securing Web Applications from XSS, SQLi, and More
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护Web应用程序免受XSS、SQL注入等攻击
- en: DVWA shows both how to hack *and* how to secure web applications. In the bottom-right
    corner of every vulnerable page, there’s a View Source button that shows the page’s
    code. We’ll compare the source code of the low-security page with that of pages
    with higher security levels to learn how to protect against injection attacks.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: DVWA展示了如何进行*黑客攻击*和如何保护Web应用程序。在每个易受攻击页面的右下角，有一个“查看源代码”按钮，可以查看页面的代码。我们将比较低安全页面与高安全页面的源代码，学习如何防御注入攻击。
- en: 'Still on the SQL Injection page with DVWA’s Script Security set to low, click
    **View Source** to see the source code for the user lookup application, including
    these two lines of code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然处于DVWA的SQL注入页面，且脚本安全设置为低，点击**查看源代码**以查看用户查询应用程序的源代码，其中包括以下两行代码：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This web application is written in PHP, a popular web programming language.
    The first line of code gets the user’s input from a form field named `'id'` and
    stores it in a variable called `$id`. Then, it creates a SQL query using the user’s
    input. The user’s unmodified input becomes part of the code—this is a dangerous
    programming mistake, and it’s what allowed us to hack into the database.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Web应用程序是用PHP编写的，这是一种流行的Web编程语言。第一行代码从名为`'id'`的表单字段中获取用户输入，并将其存储在名为`$id`的变量中。然后，它使用用户输入创建SQL查询。用户未修改的输入成为代码的一部分——这是一个危险的编程错误，也是我们能够攻破数据库的原因。
- en: 'Click **DVWA Security** on the left, change the Script Security level to **medium**,
    and click **Submit**. Click **SQL Injection** to return to the user lookup application
    and then click **View Source** again. (If you have trouble switching security
    levels, close the Edge browser, reopen it, and log back in to DVWA.) This time,
    you’ll see a new line of code inserted between the two just listed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左侧的**DVWA安全性**，将脚本安全级别更改为**中**，然后点击**提交**。点击**SQL注入**返回用户查询应用程序，再次点击**查看源代码**。（如果你切换安全级别时遇到困难，可以关闭Edge浏览器，重新打开并重新登录DVWA。）这时，你会看到一行新代码插入在前面提到的两行代码之间：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This line reformats the user’s input to add *escape characters* (like the backslash
    `\`) before any special characters the user typed, such as the single quote `'`
    we used in the `' OR 1='1` hack. Adding a backslash before a single quote tells
    the database to treat the single quote like it’s a part of the text, not part
    of a command. The `mysql_real_escape_string()` command makes the form safer by
    changing the single quote and other potentially malicious characters into their
    harmless escape sequence forms (`\'`) so that the database doesn’t treat them
    like code, but a motivated attacker could still get around this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行将用户的输入重新格式化，在用户输入的任何特殊字符前添加*转义字符*（如反斜杠`\`），例如我们在`' OR 1='1`攻击中使用的单引号`'`。在单引号前添加反斜杠告诉数据库将单引号视为文本的一部分，而不是命令的一部分。`mysql_real_escape_string()`命令通过将单引号和其他潜在恶意字符转换为无害的转义序列（`\'`）来使表单更安全，这样数据库就不会将它们当作代码处理，但有动机的攻击者仍然可以绕过这一点。
- en: 'Go back to the DVWA Security page and change the Script Security level to **high**.
    Then return to the SQL Injection page and click **View Source** one last time.
    Look for this code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回DVWA安全页面，将脚本安全级别更改为**高**。然后返回SQL注入页面，再次点击**查看源代码**。寻找以下代码：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The high-security code uses the `stripslashes()` command to remove backslashes
    from the user’s text and `is_numeric()` to make sure you entered a number. Using
    `is_numeric()` is an example of form field *validation*: the command `is_numeric()`
    checks that the user’s submission is in an acceptable, expected format—in this
    case a numeric ID—and proceeds only if it is.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 高安全性代码使用`stripslashes()`命令从用户的文本中去除反斜杠，并使用`is_numeric()`确保你输入的是数字。使用`is_numeric()`是表单字段*验证*的一个例子：该命令`is_numeric()`检查用户提交的数据是否符合可接受的格式——在这个例子中是数字ID——只有符合条件时才会继续执行。
- en: View the source of some of the other pages at low, medium, and high security
    to discover other layers of commands that web developers use to protect their
    apps. For example, the secure version of the XSS-reflected page includes `htmlspecialchars()`
    to protect against HTML and JavaScript injection. To prevent user input from breaking
    the website or database code, the added commands in the higher-security versions
    of the source code *sanitize* the input, or remove potentially malicious code
    symbols (like the single quote, backslash, and angle bracket characters) from
    it, before that input is used on the site or in the database.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 查看其他页面（低、中、高安全级别）的源代码，发现网页开发人员用来保护应用的其他安全命令层级。例如，XSS反射页面的安全版本包含`htmlspecialchars()`，以防止HTML和JavaScript注入。为了防止用户输入破坏网站或数据库的代码，高安全版本的源代码中添加的命令*清理*了输入，或者在这些输入被用到网站或数据库中之前，去除了潜在的恶意代码符号（如单引号、反斜杠和尖括号字符）。
- en: The Takeaway
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收获总结
- en: 'In this chapter, you learned that web servers are online and available to hackers
    around the globe 24/7\. Moreover, a single unprotected web form can expose millions
    of users’ data to an attacker. You built an intentionally vulnerable web server,
    the Metasploitable VM, in your virtual hacking lab, and you used the DVWA web
    application to train yourself to test websites for two types of code injection:
    cross-site scripting (XSS) and SQL injection (SQLi).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到，网络服务器是全天候在线的，黑客可以随时访问全球的服务器。此外，一个没有保护的网页表单可能会使数百万用户的数据暴露给攻击者。你在虚拟黑客实验室中构建了一个故意存在漏洞的网络服务器——Metasploitable虚拟机，并使用DVWA网页应用程序进行训练，测试网站的两种代码注入：跨站脚本攻击（XSS）和SQL注入（SQLi）。
- en: You used reflected and stored malicious JavaScript code to make a web page pop
    up an alert message and redirect the browser to a different website. You viewed
    the first and last names of all users in a database-driven web application using
    SQL, and then you learned how an attacker could steal usernames and password hashes
    from a web database. With the password-cracking tools we used in Chapter 7, an
    attacker could steal millions of usernames and passwords with very little skill
    or effort.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用了反射和存储的恶意JavaScript代码，使网页弹出警告信息，并将浏览器重定向到不同的网站。你通过SQL查看了数据库驱动的网页应用程序中所有用户的姓名，并了解了攻击者如何从网络数据库窃取用户名和密码哈希值。通过我们在第七章使用的密码破解工具，攻击者可以轻松窃取数百万个用户名和密码，几乎不需要任何技巧或努力。
- en: With so much at stake, securing web applications from attacks is an important
    role for ethical hackers. It takes multiple layers of security to adequately protect
    web applications. You learned about several functions in the popular web-programming
    language PHP that sanitize user input by removing special code-related characters,
    protecting the server and database. You also saw an example of form field validation,
    checking a text field to make sure that a user entered an acceptable value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于风险巨大，保护网络应用免受攻击是道德黑客的一个重要职责。需要多个安全层级来充分保护网络应用。你了解了流行的网页编程语言PHP中的多个函数，这些函数通过去除与代码相关的特殊字符来清理用户输入，从而保护服务器和数据库。你还看到了一个表单字段验证的例子，检查文本字段以确保用户输入了可接受的值。
- en: In the next chapter, you get to add one more set of skills to your ethical hacking
    toolbelt—mobile device hacking! You’ll learn how to keep yourself and your loved
    ones safe from the increasing number of mobile attacks.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将掌握一项新的技能——移动设备黑客技术！你将学习如何保护自己和亲人免受日益增多的移动攻击。
