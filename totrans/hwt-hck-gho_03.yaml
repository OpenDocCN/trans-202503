- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Return of Command and Control
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 命令与控制的回归
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'Let’s build an attacking infrastructure by starting with the basic tooling
    of any attacker: the Command and Control (C2) server. We’ll look at three frameworks
    and test each on a virtual machine we’ll use as the target. First, we’ll look
    at how command and control used to be done, to see how we got where we are today.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从攻击者的基本工具开始构建攻击基础设施：命令与控制（C2）服务器。我们将研究三个框架，并在我们用作目标的虚拟机上测试每个框架。首先，我们将看看过去是如何进行命令与控制的，了解我们是如何走到今天这一步的。
- en: Command and Control Legacy
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令与控制遗产
- en: For the better part of the last decade, the undefeated champion of C2 frameworks—the
    one that offered the widest and most diverse array of exploits, stagers, and reverse
    shells—was the infamous Metasploit framework ([https://www.metasploit.com/](https://www.metasploit.com/)).
    Perform a quick search for a pentesting or hacking tutorial, and I bet the first
    link will refer you to a post describing how to set up a meterpreter—the name
    of the custom payload used by Metasploit—on a Linux machine to achieve full control.
    Of course, the article will fail to mention that the default settings of the tool
    have been flagged by every security product since 2007, but let’s not be too cynical.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年中，C2 框架的不败冠军——提供最广泛和最具多样化的漏洞、阶段器和反向 shell 的框架——是臭名昭著的 Metasploit 框架（[https://www.metasploit.com/](https://www.metasploit.com/)）。执行一次快速搜索，寻找渗透测试或黑客教程，我敢打赌第一个链接会指向一篇描述如何在
    Linux 主机上设置 Metasploit 的自定义载荷（Meterpreter）以实现完全控制的文章。当然，文章不会提到，自 2007 年以来，这个工具的默认设置已经被每个安全产品标记为潜在威胁，但我们还是不要过于愤世嫉俗。
- en: 'Metasploit is by far my first choice when taking control of a Linux box with
    no pesky antivirus software to crash the party. The connection is very stable,
    the framework has a lot of modules, and contrary to what many improvised tutorials
    seem to suggest, you can—and, in fact, *should*—customize every tiny bit of the
    executable template used to build the stager and the exploits. Metasploit works
    less well for Windows: it lacks a lot of post-exploit modules that are readily
    available in other frameworks, and the techniques employed by the meterpreter
    are first on the checklist of every antivirus software out there.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要控制一台没有麻烦的 antivirus 软件的 Linux 主机时，Metasploit 毫无疑问是我的首选。连接非常稳定，框架拥有很多模块，与许多即兴教程似乎暗示的相反，你完全可以——而且实际上
    *应该*——自定义每一个用来构建阶段器和利用工具的可执行模板。Metasploit 对 Windows 的效果较差：它缺乏其他框架中 readily 可用的许多后渗透模块，而且
    meterpreter 所使用的技术是每个 antivirus 软件的检查清单上首位的目标。
- en: 'Windows being a different beast, I used to prefer the Empire framework ([https://github.com/EmpireProject/Empire/](https://github.com/EmpireProject/Empire/)),
    which provides an exhaustive list of modules, exploits, and lateral movement techniques
    specifically designed for Active Directory. Sadly, Empire is no longer maintained
    by the original team, known by their Twitter handles: [@harmj0y](http://www.twitter.com/@harmj0y),
    [@sixdub](http://www.twitter.com/@sixdub), [@enigma0x3](http://www.twitter.com/@enigma0x3),
    [@rvrsh3ll](http://www.twitter.com/@rvrsh3ll), [@killswitch_gui](http://www.twitter.com/@killswitch_gui),
    and [@xorrior](http://www.twitter.com/@xorrior). They kickstarted a real revolution
    in the Windows hacking community and deserve our most sincere appreciation. Luckily,
    to the thrill of us all, Empire was brought back to life by the BC Security folks,
    who released version 3.0 in December 2019\. I understand the reasoning behind
    the decision to cease maintaining Empire: the whole framework came into existence
    based on the premise that PowerShell allowed attackers to sail unhindered in a
    Windows environment, free from sleazy preventions such as antivirus software and
    monitoring. With this assumption challenged by Windows 10 features like PowerShell
    block logging and AMSI, it made sense to discontinue the project in favor of a
    newer generation of attacks, like using C# (for instance, SharpSploit: [https://github.com/cobbr/SharpSploit/](https://github.com/cobbr/SharpSploit/)).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Windows是一个不同的“怪物”，我以前更喜欢Empire框架（[https://github.com/EmpireProject/Empire/](https://github.com/EmpireProject/Empire/)），它提供了一个详尽的模块、漏洞利用和横向移动技术的清单，专门针对Active
    Directory设计。遗憾的是，Empire不再由原团队维护，原团队成员的Twitter账号分别是：[@harmj0y](http://www.twitter.com/@harmj0y)、[@sixdub](http://www.twitter.com/@sixdub)、[@enigma0x3](http://www.twitter.com/@enigma0x3)、[@rvrsh3ll](http://www.twitter.com/@rvrsh3ll)、[@killswitch_gui](http://www.twitter.com/@killswitch_gui)
    和 [@xorrior](http://www.twitter.com/@xorrior)。他们在Windows黑客社区掀起了一场真正的革命，值得我们最真诚的感谢。幸运的是，令我们所有人激动的是，Empire由BC
    Security团队重新带回了生命，他们在2019年12月发布了3.0版本。我理解停止维护Empire的决策背后的原因：这个框架的出现是基于PowerShell允许攻击者在Windows环境中畅行无阻的前提，免受像杀毒软件和监控程序这种低级防范的影响。然而，Windows
    10引入的PowerShell阻止日志记录和AMSI等新功能挑战了这一假设，因此停止该项目，转而支持像使用C#这样的新一代攻击（例如，SharpSploit：[https://github.com/cobbr/SharpSploit/](https://github.com/cobbr/SharpSploit/)）是有道理的。
- en: The Search for a New C2
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找新的C2
- en: With the Empire project less of an option, I started looking for potential replacements.
    I was afraid of having to fall back on Cobalt Strike, as have 99 percent of consulting
    firms masquerading phishing campaigns as red team jobs. I have nothing against
    the tool—it’s awesome, provides great modularity, and deserves the success it
    has achieved. It’s just tiring and frustrating to see so many phony companies
    riding the wave of the red team business just because they bought a $3,500 Cobalt
    Strike license.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Empire项目不再是一个选择，我开始寻找潜在的替代品。我担心不得不回到Cobalt Strike，正如99%的咨询公司那样，将钓鱼攻击伪装成红队任务。我对这款工具没有任何反感——它很棒，提供了很好的模块化，并且配得上它所取得的成功。只是看到那么多伪公司仅仅因为购买了一个$3,500的Cobalt
    Strike许可证，就趁着红队业务的热潮大肆宣传，实在让人感到疲惫和沮丧。
- en: I was pleasantly surprised, however, to discover that so many open source C2
    frameworks had hatched in the vacuum left by Empire. Here’s a brief look at some
    interesting ones that caught my attention. I will go rather quickly over many
    advanced concepts that are not that relevant to our present scenario, and will
    demonstrate a payload execution with each. If you do not fully understand how
    some payloads work, don’t worry. We will circle back to the ones we need later
    on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我感到非常惊讶的是，竟然有这么多开源C2框架在Empire留下的空白中应运而生。下面是一些引起我注意的有趣框架的简要介绍。我会快速浏览一些与我们当前场景关系不大的高级概念，并演示每个框架的有效载荷执行。如果你不完全理解某些有效载荷是如何工作的，不用担心。稍后我们会重新回到需要了解的部分。
- en: Merlin
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Merlin
- en: Merlin ([https://github.com/Ne0nd0g/merlin/](https://github.com/Ne0nd0g/merlin/))
    is a C2 framework written, as it seems most popular tools are these days, in Golang.
    It can run on Linux, Windows, and basically any other platform supported by the
    Go runtime. The agent launched on the target machine can be a regular executable,
    like a DLL file or even a JavaScript file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Merlin（[https://github.com/Ne0nd0g/merlin/](https://github.com/Ne0nd0g/merlin/)）是一个C2框架，正如现在大多数流行工具一样，它是用Golang编写的。它可以在Linux、Windows以及几乎所有Go运行时支持的平台上运行。在目标机器上启动的代理可以是一个普通的可执行文件，比如DLL文件，甚至是一个JavaScript文件。
- en: To get started with Merlin, first install the Golang environment. This will
    allow you to customize the executable agent and add post-exploitation modules—which
    is, of course, heavily encouraged.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Merlin，首先需要安装Golang环境。这将允许你自定义可执行代理并添加后期利用模块——当然，这是非常鼓励的。
- en: 'Install Golang and Merlin with the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装Golang和Merlin：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The real novelty of Merlin is that it relies on HTTP/2 to communicate with its
    backend server. HTTP/2, as opposed to HTTP/1.x, is a binary protocol that supports
    many performance-enhancing features, like stream multiplexing, server push, and
    so forth (a great free resource that discusses HTTP/2 in depth can be found at
    [https://daniel.haxx.se/http2/http2-v1.12.pdf](https://daniel.haxx.se/http2/http2-v1.12.pdf)).
    Even if a security device does catch and decrypt the C2 traffic, it might fail
    to parse the compressed HTTP/2 traffic and just forward it untouched.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Merlin的真正创新之处在于它依赖HTTP/2与其后端服务器通信。与HTTP/1.x不同，HTTP/2是一种二进制协议，支持许多提升性能的特性，比如流复用、服务器推送等等（有一个很好的免费资源详细讨论了HTTP/2，地址是[https://daniel.haxx.se/http2/http2-v1.12.pdf](https://daniel.haxx.se/http2/http2-v1.12.pdf)）。即便一个安全设备捕获并解密了C2流量，它也可能无法解析压缩后的HTTP/2流量，最终只是将其原封不动地转发。
- en: 'If we compile a standard agent out of the box, it will be immediately busted
    by any regular antivirus agent doing simple string lookups for general conspicuous
    terms, so we need to make some adjustments. We’ll rename suspicious functions
    like `ExecuteShell` and remove references to the original package name, `github.com/Ne0nd0g/merlin`.
    We’ll use a classic `find` command to hunt for source code files containing these
    strings and pipe them into `xargs`, which will call `sed` to replace these suspicious
    terms with arbitrary words:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们直接编译一个标准代理，它会立刻被任何常规的防病毒软件通过简单的字符串查找给识别出来，尤其是查找常见的显眼术语。因此我们需要做一些调整。我们会重命名像`ExecuteShell`这样的可疑函数，并删除原始包名`github.com/Ne0nd0g/merlin`的引用。我们将使用经典的`find`命令来查找包含这些字符串的源代码文件，并将其输出传递给`xargs`，后者会调用`sed`来替换这些可疑术语为任意单词：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This crude string replacement bypasses 90 percent of antivirus solutions, including
    Windows Defender. Keep tweaking it and then testing it against a tool like VirusTotal
    ([https://www.virustotal.com/gui/](https://www.virustotal.com/gui/)) until you
    pass all tests.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种粗暴的字符串替换可以绕过90%的防病毒解决方案，包括Windows Defender。不断调整并将其与像VirusTotal这样的平台（[https://www.virustotal.com/gui/](https://www.virustotal.com/gui/)）进行测试，直到你通过所有测试。
- en: 'Now let’s compile an agent in the *output* folder that we will later drop on
    a Windows test machine:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在*output*文件夹中编译一个代理，稍后我们会将其放到Windows测试机上：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once executed on a machine, *merlinAgent-Windows-x64.exe* should connect back
    to our Merlin server and allow complete takeover of the target.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在机器上执行，*merlinAgent-Windows-x64.exe*应该会连接回我们的Merlin服务器，并允许完全控制目标。
- en: 'We fire up the Merlin C2 server using the `go run` command and instruct it
    to listen on all network interfaces with the `-i 0.0.0.0` option:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`go run`命令启动Merlin C2服务器，并通过`-i 0.0.0.0`选项指示它监听所有网络接口：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And here is what you should see on your attack server:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你应该在攻击服务器上看到的内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The agent works like a charm. Now we can dump credentials on the target machine,
    hunt for files, move to other machines, launch a keylogger, and so forth.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理工作得非常顺利。现在我们可以在目标机器上丢弃凭证，搜索文件，移动到其他机器，启动键盘记录器，等等。
- en: Merlin is still a project in its infancy, so you will experience bugs and inconsistencies,
    most of them due to the instability of the HTTP/2 library in Golang. It’s not
    called “beta” for nothing, after all, but the effort behind this project is absolutely
    amazing. If you’ve ever wanted to get involved in Golang, this could be your chance.
    The framework has just shy of 50 post-exploitation modules, from credential harvesters
    to modules for compiling and executing C# in memory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Merlin仍然是一个处于初期阶段的项目，因此你会遇到一些bug和不一致的情况，主要是由于Golang中的HTTP/2库不稳定。毕竟它不是随便叫做“beta”版本的，但这个项目背后的努力绝对令人惊叹。如果你曾经想参与Golang的开发，或许这是一个机会。这个框架目前有接近50个后期利用模块，从凭证收集器到用于内存中编译和执行C#的模块应有尽有。
- en: Koadic
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Koadic
- en: 'The Koadic framework by zerosum0x0 ([https://github.com/zerosum0x0/koadic/](https://github.com/zerosum0x0/koadic/))
    has gained popularity since its introduction at DEF CON 25\. Koadic focuses solely
    on Windows targets, but its main selling point is that it implements all sorts
    of trendy and nifty execution tricks: `regsvr32` (a Microsoft utility to register
    DLLs in the Windows Registry so they can be called by other programs; it can be
    used to trick DLLs like *srcobj.dll* into executing commands), `mshta` (a Microsoft
    utility that executes HTML Applications, or HTAs), XSL style sheets, you name
    it. Install Koadic with the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Koadic 框架由 zerosum0x0 开发（[https://github.com/zerosum0x0/koadic/](https://github.com/zerosum0x0/koadic/)），自
    DEF CON 25 发布以来，已获得广泛关注。Koadic 完全专注于 Windows 目标，但其主要卖点是它实现了各种时髦且巧妙的执行技巧：`regsvr32`（一个
    Microsoft 工具，用于在 Windows 注册表中注册 DLL，以便其他程序调用；它可用于欺骗像*srcobj.dll*这样的 DLL 执行命令）、`mshta`（一个
    Microsoft 工具，用于执行 HTML 应用程序或 HTA）、XSL 样式表等等。用以下命令安装 Koadic：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then launch it with the following (I’ve also included the start of the `help`
    output):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令启动它（我还包括了`help`输出的开始部分）：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s experiment with a *stager*—a small piece of code dropped on the target
    machine to initiate a connection back to the server and load additional payloads
    (usually stored in memory). A stager has a small footprint, so should an antimalware
    tool flag our agent, we can easily tweak the agent without rewriting our payloads.
    One of Koadic’s included stagers delivers its payload through an ActiveX object
    embedded in an XML style sheet, also called *XSLT* ([https://www.w3.org/Style/XSL/](https://www.w3.org/Style/XSL/)).
    Its evil formatting XSLT sheet can be fed to the native `wmic` utility, which
    will promptly execute the embedded JavaScript while rendering the output of the
    `os get` command. Execute the following in Koadic to spawn the stager trigger:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试验一个*stager*——一段小代码，会被放置在目标机器上，启动连接到服务器并加载其他有效载荷（通常存储在内存中）。一个 stager 占用的空间很小，因此如果反恶意软件工具标记了我们的代理，我们可以轻松调整代理，而不必重写我们的有效载荷。Koadic
    附带的一个 stager 通过嵌入在 XML 样式表中的 ActiveX 对象传递其有效载荷，也称为*XSLT*（[https://www.w3.org/Style/XSL/](https://www.w3.org/Style/XSL/)）。它那恶意格式化的
    XSLT 样式表可以输入到本地的 `wmic` 工具中，该工具将迅速执行嵌入的 JavaScript，并呈现 `os get` 命令的输出。在 Koadic
    中执行以下命令以触发 stager：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However, the preceding trigger command is easily caught by Windows Defender,
    so we have to tweak it a bit—for instance, by renaming *wmic.exe* to something
    innocuous like *dolly.exe*, as shown next. Depending on the Windows version of
    the victim machine, you may also need to alter the style sheet produced by Koadic
    to evade detection. Again, simple string replacement should do it (so much for
    machine learning in the AV world):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前面的触发命令很容易被 Windows Defender 捕获，所以我们需要稍微修改一下——例如，将*wmic.exe*重命名为一些无害的名称，如*dolly.exe*，如下面所示。根据受害者机器的
    Windows 版本，你可能还需要修改 Koadic 生成的样式表以规避检测。同样，简单的字符串替换就可以做到（AV 领域的机器学习也不过如此）：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Koadic refers to target machines as “zombies.” When we check for a zombie on
    our server, we should see details of the target machine:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Koadic 将目标机器称为“僵尸”。当我们在服务器上检查僵尸时，应该能看到目标机器的详细信息：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We refer to a zombie by its ID to get its basic system information:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过僵尸的 ID 来获取其基本系统信息：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we can choose any of the available implants with the command `use implant/`,
    from dumping passwords with Mimikatz to pivoting to other machines. If you’re
    familiar with Empire, then you will feel right at home with Koadic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以选择任何可用的植入物，使用命令`use implant/`，从用 Mimikatz 提取密码到跳转到其他机器。如果你熟悉 Empire，那么你会觉得
    Koadic 很容易上手。
- en: 'The only caveat is that, as with most current Windows C2 frameworks, you should
    customize and sanitize all payloads carefully before deploying them in the field.
    Open source C2 frameworks are just that: frameworks. They take care of the boring
    stuff like agent communication and encryption and provide extensible plug-ins
    and code templates, but every native exploit or execution technique they ship
    is likely tainted and should be surgically changed to evade antivirus and endpoint
    detection and response (EDR) solutions.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要注意的是，和大多数当前的 Windows C2 框架一样，在将所有有效载荷部署到现场之前，你应该仔细定制并清理它们。开源的 C2 框架就是框架：它们处理一些枯燥的任务，比如代理通信和加密，并提供可扩展的插件和代码模板，但它们每个本地的漏洞或执行技巧都可能是被污染的，应该进行手术般的修改，以规避杀毒软件和端点检测与响应（EDR）解决方案。
- en: For this sanitization, sometimes a crude string replacement will do; other times,
    we need to recompile the code or snip out some bits. Do not expect any of these
    frameworks to flawlessly work from scratch on a brand-new and hardened Windows
    10 system. Take the time to investigate the execution technique and make it fit
    your own narrative.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种清理，有时简单的字符串替换就能解决问题；有时，我们需要重新编译代码或剪切一些部分。不要期望这些框架能够在全新的、硬化的Windows 10系统上完美运行。花时间研究执行技术，并使其适应你自己的需求。
- en: SILENTTRINITY
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SILENTTRINITY
- en: 'The last C2 framework I would like to cover is my personal favorite: SILENTTRINITY
    ([https://github.com/byt3bl33d3r/SILENTTRINITY](https://github.com/byt3bl33d3r/SILENTTRINITY)).
    It takes such an original approach that I think you should momentarily pause reading
    this book and go watch Marcello Salvati’s talk “IronPython . . . OMFG” about the
    .NET environment on YouTube.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我想介绍的最后一个C2框架是我个人最喜欢的：SILENTTRINITY（[https://github.com/byt3bl33d3r/SILENTTRINITY](https://github.com/byt3bl33d3r/SILENTTRINITY)）。它采取了一种非常独特的方法，我认为你应该暂时停止阅读这本书，去YouTube观看Marcello
    Salvati的演讲“IronPython……OMFG”，内容涉及.NET环境。
- en: 'To sum it up somewhat crudely, PowerShell and C# code produce intermediary
    assembly code to be executed by the .NET framework. Yet, there are many other
    languages that can do the same job: F#, IronPython, . . . and Boo-Lang! Yes, it
    is a real language; look it up. It’s as if a Python lover and a Microsoft fanatic
    were locked in a cell and forced to cooperate with each other to save humanity
    from impending Hollywoodian doom.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地总结一下，PowerShell和C#代码会生成中间汇编代码，由.NET框架执行。然而，还有许多其他语言也能完成同样的工作：F#、IronPython……以及Boo-Lang！是的，它是一个真实的语言，查查吧。就像一个Python爱好者和一个微软迷被关在一个房间里，迫使他们合作，拯救人类免于即将到来的好莱坞式灾难。
- en: While every security vendor is busy looking for PowerShell scripts and weird
    command lines, SILENTTRINITY is peacefully gliding over the clouds using Boo-Lang
    to interact with Windows internal services and dropping perfectly safe-looking
    evil bombshells.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个安全供应商都在忙着寻找PowerShell脚本和奇怪的命令行，但SILENTTRINITY却在云端悠闲地滑行，使用Boo-Lang与Windows内部服务交互，并投下看起来完全安全的恶意炸弹：
- en: 'The tool’s serverside requires Python 3.7, so make sure to have Python properly
    working before installing it; then proceed to download and launch the SILENTTRINITY
    team server:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的服务器端需要Python 3.7，因此在安装之前，请确保Python正常工作；然后继续下载并启动SILENTTRINITY团队服务器：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Instead of running as a local stand-alone program, SILENTTRINITY launches a
    server that listens on port 5000, allowing multiple members to connect, define
    their listeners, generate payloads, and so on, which is very useful in team operations.
    You need to leave the server running in the first terminal and then open a second
    to connect to the team server and configure a listener on port 443:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: SILENTTRINITY不是作为本地独立程序运行，而是启动一个监听在5000端口的服务器，允许多个成员连接、定义监听器、生成有效载荷等，这在团队操作中非常有用。你需要在第一个终端中保持服务器运行，然后打开第二个终端连接到团队服务器，并在443端口配置监听器：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you are connected, the next logical step is to generate a payload to execute
    on the target. We opt for a .NET task containing inline C# code that we can compile
    and run on the fly using a .NET utility called MSBuild:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接成功，接下来的逻辑步骤是生成一个有效载荷以在目标上执行。我们选择一个包含内联C#代码的.NET任务，通过一个名为MSBuild的.NET工具，可以在运行时编译和执行：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we take a closer look at the *stager.xml* file, we can see it embeds a base64-encoded
    version of an executable called *naga.exe* (*SILENTTRINITY/core/teamserver/data/naga.exe*),
    which connects back to the listener we set up and then downloads a ZIP file containing
    Boo-Lang DLLs and a script to bootstrap the environment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细查看*stager.xml*文件，可以看到它嵌入了一个名为*naga.exe*（*SILENTTRINITY/core/teamserver/data/naga.exe*）的可执行文件的base64编码版本，该文件连接到我们设置的监听器，然后下载一个包含Boo-Lang
    DLL和脚本的ZIP文件，用于启动环境。
- en: 'Once we compile and run this payload on the fly using MSBuild, we will have
    a full Boo environment running on the target’s machine, ready to execute whatever
    shady payload we send its way:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用MSBuild在运行时编译并执行此有效载荷，就会在目标机器上运行完整的Boo环境，准备执行任何我们发送的恶意有效载荷：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice how, unlike with the other two frameworks, we did not bother customizing
    the payload to evade Windows Defender. It just works . . . for now!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与其他两个框架不同，我们没有费心定制有效载荷以躲避Windows Defender。它就这样工作……暂时！
- en: 'We can deliver any of the current 69 post-exploitation modules, from loading
    an arbitrary assembly (.NET executable) in memory to regular Active Directory
    reconnaissance and credential dumping:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以交付当前的69个后期利用模块，涵盖从在内存中加载任意程序集（.NET可执行文件）到常规的Active Directory侦察和凭证转储等功能：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The project is still very young, yet it displays tremendous potential. If you
    are a complete beginner, though, you may suffer from the lack of documentation
    and explicit error handling. The tool is still in active development, so that’s
    hardly a surprise. I would suggest you first explore more accessible projects
    like Empire before using and contributing to SILENTTRINITY. And why not? It sure
    is a hell of a project!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目仍然非常年轻，但显示出巨大的潜力。如果你是完全的新手，可能会因为缺乏文档和明确的错误处理而遇到困难。不过，这个工具仍在积极开发中，因此这也不足为奇。我建议你先探索一些更易上手的项目，比如Empire，然后再使用和贡献给SILENTTRINITY。为什么不呢？这无疑是一个非常棒的项目！
- en: 'There are many more frameworks that came to life during the last couple of
    years that are all worth checking out: Covenant, Faction C2, and so on. I strongly
    encourage you to spin up a couple of virtual machines, play with them, and choose
    whichever one you feel most comfortable with.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 近几年涌现出了许多值得关注的框架，比如Covenant、Faction C2等等。我强烈建议你启动几个虚拟机，进行尝试，并选择一个你最舒服的框架。
- en: Resources
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: Find more information on the `regsvr32` Microsoft utility at [http://bit.ly/2QPJ6o9](http://bit.ly/2QPJ6o9)
    and [https://www.drdobbs.com/scriptlets/199101569](https://www.drdobbs.com/scriptlets/199101569).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://bit.ly/2QPJ6o9](http://bit.ly/2QPJ6o9)和[https://www.drdobbs.com/scriptlets/199101569](https://www.drdobbs.com/scriptlets/199101569)上查找更多关于`regsvr32`微软工具的信息。
- en: 'Look at Emeric Nasi’s blog post “Hacking around HTA files” for more on `mshta`:
    [https://blog.sevagas.com/](https://blog.sevagas.com/).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Emeric Nasi的博客文章“`mshta`文件的黑客技巧”了解更多关于`mshta`的信息：[https://blog.sevagas.com/](https://blog.sevagas.com/)。
- en: 'See Antonio Parata’s paper “.NET Instrumentation via MSIL Bytecode Injection”
    for more information on assemblies in the .NET framework: [http://bit.ly/2IL2I8g](http://bit.ly/2IL2I8g).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Antonio Parata的论文“.NET框架中的MSIL字节码注入”以了解更多关于.NET框架中程序集的信息：[http://bit.ly/2IL2I8g](http://bit.ly/2IL2I8g)。
