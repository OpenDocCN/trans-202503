- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Return of Command and Control
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s build an attacking infrastructure by starting with the basic tooling
    of any attacker: the Command and Control (C2) server. We’ll look at three frameworks
    and test each on a virtual machine we’ll use as the target. First, we’ll look
    at how command and control used to be done, to see how we got where we are today.'
  prefs: []
  type: TYPE_NORMAL
- en: Command and Control Legacy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the better part of the last decade, the undefeated champion of C2 frameworks—the
    one that offered the widest and most diverse array of exploits, stagers, and reverse
    shells—was the infamous Metasploit framework ([https://www.metasploit.com/](https://www.metasploit.com/)).
    Perform a quick search for a pentesting or hacking tutorial, and I bet the first
    link will refer you to a post describing how to set up a meterpreter—the name
    of the custom payload used by Metasploit—on a Linux machine to achieve full control.
    Of course, the article will fail to mention that the default settings of the tool
    have been flagged by every security product since 2007, but let’s not be too cynical.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit is by far my first choice when taking control of a Linux box with
    no pesky antivirus software to crash the party. The connection is very stable,
    the framework has a lot of modules, and contrary to what many improvised tutorials
    seem to suggest, you can—and, in fact, *should*—customize every tiny bit of the
    executable template used to build the stager and the exploits. Metasploit works
    less well for Windows: it lacks a lot of post-exploit modules that are readily
    available in other frameworks, and the techniques employed by the meterpreter
    are first on the checklist of every antivirus software out there.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows being a different beast, I used to prefer the Empire framework ([https://github.com/EmpireProject/Empire/](https://github.com/EmpireProject/Empire/)),
    which provides an exhaustive list of modules, exploits, and lateral movement techniques
    specifically designed for Active Directory. Sadly, Empire is no longer maintained
    by the original team, known by their Twitter handles: [@harmj0y](http://www.twitter.com/@harmj0y),
    [@sixdub](http://www.twitter.com/@sixdub), [@enigma0x3](http://www.twitter.com/@enigma0x3),
    [@rvrsh3ll](http://www.twitter.com/@rvrsh3ll), [@killswitch_gui](http://www.twitter.com/@killswitch_gui),
    and [@xorrior](http://www.twitter.com/@xorrior). They kickstarted a real revolution
    in the Windows hacking community and deserve our most sincere appreciation. Luckily,
    to the thrill of us all, Empire was brought back to life by the BC Security folks,
    who released version 3.0 in December 2019\. I understand the reasoning behind
    the decision to cease maintaining Empire: the whole framework came into existence
    based on the premise that PowerShell allowed attackers to sail unhindered in a
    Windows environment, free from sleazy preventions such as antivirus software and
    monitoring. With this assumption challenged by Windows 10 features like PowerShell
    block logging and AMSI, it made sense to discontinue the project in favor of a
    newer generation of attacks, like using C# (for instance, SharpSploit: [https://github.com/cobbr/SharpSploit/](https://github.com/cobbr/SharpSploit/)).'
  prefs: []
  type: TYPE_NORMAL
- en: The Search for a New C2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the Empire project less of an option, I started looking for potential replacements.
    I was afraid of having to fall back on Cobalt Strike, as have 99 percent of consulting
    firms masquerading phishing campaigns as red team jobs. I have nothing against
    the tool—it’s awesome, provides great modularity, and deserves the success it
    has achieved. It’s just tiring and frustrating to see so many phony companies
    riding the wave of the red team business just because they bought a $3,500 Cobalt
    Strike license.
  prefs: []
  type: TYPE_NORMAL
- en: I was pleasantly surprised, however, to discover that so many open source C2
    frameworks had hatched in the vacuum left by Empire. Here’s a brief look at some
    interesting ones that caught my attention. I will go rather quickly over many
    advanced concepts that are not that relevant to our present scenario, and will
    demonstrate a payload execution with each. If you do not fully understand how
    some payloads work, don’t worry. We will circle back to the ones we need later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Merlin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Merlin ([https://github.com/Ne0nd0g/merlin/](https://github.com/Ne0nd0g/merlin/))
    is a C2 framework written, as it seems most popular tools are these days, in Golang.
    It can run on Linux, Windows, and basically any other platform supported by the
    Go runtime. The agent launched on the target machine can be a regular executable,
    like a DLL file or even a JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with Merlin, first install the Golang environment. This will
    allow you to customize the executable agent and add post-exploitation modules—which
    is, of course, heavily encouraged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Golang and Merlin with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The real novelty of Merlin is that it relies on HTTP/2 to communicate with its
    backend server. HTTP/2, as opposed to HTTP/1.x, is a binary protocol that supports
    many performance-enhancing features, like stream multiplexing, server push, and
    so forth (a great free resource that discusses HTTP/2 in depth can be found at
    [https://daniel.haxx.se/http2/http2-v1.12.pdf](https://daniel.haxx.se/http2/http2-v1.12.pdf)).
    Even if a security device does catch and decrypt the C2 traffic, it might fail
    to parse the compressed HTTP/2 traffic and just forward it untouched.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we compile a standard agent out of the box, it will be immediately busted
    by any regular antivirus agent doing simple string lookups for general conspicuous
    terms, so we need to make some adjustments. We’ll rename suspicious functions
    like `ExecuteShell` and remove references to the original package name, `github.com/Ne0nd0g/merlin`.
    We’ll use a classic `find` command to hunt for source code files containing these
    strings and pipe them into `xargs`, which will call `sed` to replace these suspicious
    terms with arbitrary words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This crude string replacement bypasses 90 percent of antivirus solutions, including
    Windows Defender. Keep tweaking it and then testing it against a tool like VirusTotal
    ([https://www.virustotal.com/gui/](https://www.virustotal.com/gui/)) until you
    pass all tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s compile an agent in the *output* folder that we will later drop on
    a Windows test machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once executed on a machine, *merlinAgent-Windows-x64.exe* should connect back
    to our Merlin server and allow complete takeover of the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'We fire up the Merlin C2 server using the `go run` command and instruct it
    to listen on all network interfaces with the `-i 0.0.0.0` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is what you should see on your attack server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The agent works like a charm. Now we can dump credentials on the target machine,
    hunt for files, move to other machines, launch a keylogger, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: Merlin is still a project in its infancy, so you will experience bugs and inconsistencies,
    most of them due to the instability of the HTTP/2 library in Golang. It’s not
    called “beta” for nothing, after all, but the effort behind this project is absolutely
    amazing. If you’ve ever wanted to get involved in Golang, this could be your chance.
    The framework has just shy of 50 post-exploitation modules, from credential harvesters
    to modules for compiling and executing C# in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Koadic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Koadic framework by zerosum0x0 ([https://github.com/zerosum0x0/koadic/](https://github.com/zerosum0x0/koadic/))
    has gained popularity since its introduction at DEF CON 25\. Koadic focuses solely
    on Windows targets, but its main selling point is that it implements all sorts
    of trendy and nifty execution tricks: `regsvr32` (a Microsoft utility to register
    DLLs in the Windows Registry so they can be called by other programs; it can be
    used to trick DLLs like *srcobj.dll* into executing commands), `mshta` (a Microsoft
    utility that executes HTML Applications, or HTAs), XSL style sheets, you name
    it. Install Koadic with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then launch it with the following (I’ve also included the start of the `help`
    output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s experiment with a *stager*—a small piece of code dropped on the target
    machine to initiate a connection back to the server and load additional payloads
    (usually stored in memory). A stager has a small footprint, so should an antimalware
    tool flag our agent, we can easily tweak the agent without rewriting our payloads.
    One of Koadic’s included stagers delivers its payload through an ActiveX object
    embedded in an XML style sheet, also called *XSLT* ([https://www.w3.org/Style/XSL/](https://www.w3.org/Style/XSL/)).
    Its evil formatting XSLT sheet can be fed to the native `wmic` utility, which
    will promptly execute the embedded JavaScript while rendering the output of the
    `os get` command. Execute the following in Koadic to spawn the stager trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the preceding trigger command is easily caught by Windows Defender,
    so we have to tweak it a bit—for instance, by renaming *wmic.exe* to something
    innocuous like *dolly.exe*, as shown next. Depending on the Windows version of
    the victim machine, you may also need to alter the style sheet produced by Koadic
    to evade detection. Again, simple string replacement should do it (so much for
    machine learning in the AV world):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Koadic refers to target machines as “zombies.” When we check for a zombie on
    our server, we should see details of the target machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We refer to a zombie by its ID to get its basic system information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can choose any of the available implants with the command `use implant/`,
    from dumping passwords with Mimikatz to pivoting to other machines. If you’re
    familiar with Empire, then you will feel right at home with Koadic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only caveat is that, as with most current Windows C2 frameworks, you should
    customize and sanitize all payloads carefully before deploying them in the field.
    Open source C2 frameworks are just that: frameworks. They take care of the boring
    stuff like agent communication and encryption and provide extensible plug-ins
    and code templates, but every native exploit or execution technique they ship
    is likely tainted and should be surgically changed to evade antivirus and endpoint
    detection and response (EDR) solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: For this sanitization, sometimes a crude string replacement will do; other times,
    we need to recompile the code or snip out some bits. Do not expect any of these
    frameworks to flawlessly work from scratch on a brand-new and hardened Windows
    10 system. Take the time to investigate the execution technique and make it fit
    your own narrative.
  prefs: []
  type: TYPE_NORMAL
- en: SILENTTRINITY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last C2 framework I would like to cover is my personal favorite: SILENTTRINITY
    ([https://github.com/byt3bl33d3r/SILENTTRINITY](https://github.com/byt3bl33d3r/SILENTTRINITY)).
    It takes such an original approach that I think you should momentarily pause reading
    this book and go watch Marcello Salvati’s talk “IronPython . . . OMFG” about the
    .NET environment on YouTube.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum it up somewhat crudely, PowerShell and C# code produce intermediary
    assembly code to be executed by the .NET framework. Yet, there are many other
    languages that can do the same job: F#, IronPython, . . . and Boo-Lang! Yes, it
    is a real language; look it up. It’s as if a Python lover and a Microsoft fanatic
    were locked in a cell and forced to cooperate with each other to save humanity
    from impending Hollywoodian doom.'
  prefs: []
  type: TYPE_NORMAL
- en: While every security vendor is busy looking for PowerShell scripts and weird
    command lines, SILENTTRINITY is peacefully gliding over the clouds using Boo-Lang
    to interact with Windows internal services and dropping perfectly safe-looking
    evil bombshells.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool’s serverside requires Python 3.7, so make sure to have Python properly
    working before installing it; then proceed to download and launch the SILENTTRINITY
    team server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of running as a local stand-alone program, SILENTTRINITY launches a
    server that listens on port 5000, allowing multiple members to connect, define
    their listeners, generate payloads, and so on, which is very useful in team operations.
    You need to leave the server running in the first terminal and then open a second
    to connect to the team server and configure a listener on port 443:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are connected, the next logical step is to generate a payload to execute
    on the target. We opt for a .NET task containing inline C# code that we can compile
    and run on the fly using a .NET utility called MSBuild:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If we take a closer look at the *stager.xml* file, we can see it embeds a base64-encoded
    version of an executable called *naga.exe* (*SILENTTRINITY/core/teamserver/data/naga.exe*),
    which connects back to the listener we set up and then downloads a ZIP file containing
    Boo-Lang DLLs and a script to bootstrap the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we compile and run this payload on the fly using MSBuild, we will have
    a full Boo environment running on the target’s machine, ready to execute whatever
    shady payload we send its way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice how, unlike with the other two frameworks, we did not bother customizing
    the payload to evade Windows Defender. It just works . . . for now!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can deliver any of the current 69 post-exploitation modules, from loading
    an arbitrary assembly (.NET executable) in memory to regular Active Directory
    reconnaissance and credential dumping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The project is still very young, yet it displays tremendous potential. If you
    are a complete beginner, though, you may suffer from the lack of documentation
    and explicit error handling. The tool is still in active development, so that’s
    hardly a surprise. I would suggest you first explore more accessible projects
    like Empire before using and contributing to SILENTTRINITY. And why not? It sure
    is a hell of a project!
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many more frameworks that came to life during the last couple of
    years that are all worth checking out: Covenant, Faction C2, and so on. I strongly
    encourage you to spin up a couple of virtual machines, play with them, and choose
    whichever one you feel most comfortable with.'
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information on the `regsvr32` Microsoft utility at [http://bit.ly/2QPJ6o9](http://bit.ly/2QPJ6o9)
    and [https://www.drdobbs.com/scriptlets/199101569](https://www.drdobbs.com/scriptlets/199101569).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Look at Emeric Nasi’s blog post “Hacking around HTA files” for more on `mshta`:
    [https://blog.sevagas.com/](https://blog.sevagas.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See Antonio Parata’s paper “.NET Instrumentation via MSIL Bytecode Injection”
    for more information on assemblies in the .NET framework: [http://bit.ly/2IL2I8g](http://bit.ly/2IL2I8g).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
