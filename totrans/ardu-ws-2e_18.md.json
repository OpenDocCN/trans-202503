["```\n#include <Wire.h> \n```", "```\nWire.begin();\n```", "```\n    Wire.beginTransmission(`address`); \n    ```", "```\n    Wire.write(`data`);\n    ```", "```\n    Wire.endTransmission();\n    ```", "```\nWire.requestFrom(`address`,`x`);\n```", "```\nincoming = Wire.read(); // incoming is the variable receiving the byte of data\n```", "```\n// Project 54 - Using an External EEPROM1 #include <Wire.h> \n#define chip1 0x50\nbyte d=0;\nvoid setup()\n{2   Serial.begin(9600);   Wire.begin(); \n}\nvoid writeData(int device, unsigned int address, byte data) \n// writes a byte of data 'data' to the EEPROM at I2C address 'device'\n// in memory location 'address'\n{3   Wire.beginTransmission(device);  Wire.write((byte)(address >> 8));   // left part of pointer address Wire.write((byte)(address & 0xFF)); // and the right Wire.write(data); Wire.endTransmission(); delay(10);\n}4 byte readData(int device, unsigned int address) \n// reads a byte of data from memory location 'address' \n// in chip at I2C address 'device' \n{ byte result;  // returned value Wire.beginTransmission(device); Wire.write((byte)(address >> 8));   // left part of pointer address Wire.write((byte)(address & 0xFF)); // and the right Wire.endTransmission();5   Wire.requestFrom(device,1);  result = Wire.read(); return result; // and return it as a result of the function readData\n}\nvoid loop()\n{ Serial.println(\"Writing data...\"); for (int a=0; a<20; a++) { writeData(chip1,a,a); } Serial.println(\"Reading data...\"); for (int a=0; a<20; a++) { Serial.print(\"EEPROM position \"); Serial.print(a); Serial.print(\" holds \"); d=readData(chip1,a); Serial.println(d, DEC); }\n}\n```", "```\n// Project 55 - Using a Port Expander IC\n#include \"Wire.h\"\n#define mcp23017 0x20\nvoid setup()\n{1   Wire.begin();     // activate I2C bus // set up MCP23017  // set I/O pins to outputs Wire.beginTransmission(mcp23017); Wire.write(0x00); // IODIRA register Wire.write(0x00); // set all of bank A to outputs Wire.write(0x00); // set all of bank B to outputs2   Wire.endTransmission(); \n}\nvoid loop()\n{ Wire.beginTransmission(mcp23017); Wire.write(0x12); 3     Wire.write(255);    // bank A4     Wire.write(255);    // bank B Wire.endTransmission(); delay(1000);  Wire.beginTransmission(mcp23017); Wire.write(0x12);  Wire.write(0);      // bank A Wire.write(0);      // bank B Wire.endTransmission(); delay(1000);\n}\n```", "```\n#include \"SPI.h\" \n```", "```\npinMode(10, OUTPUT);\ndigitalWrite(10, HIGH);\n```", "```\nSPI.begin(); \n```", "```\nSPI.setBitOrder(`order`);\n```", "```\nSPI.transfer*(byte)*;\n```", "```\n// Project 56 - Using a Digital Rheostat1 #include \"SPI.h\" // necessary library\nint ss=10;       // using digital pin 10 for SPI secondary select\nint del=200;     // used for delaying the steps between LED brightness values\nvoid setup()\n{2   SPI.begin();   pinMode(ss, OUTPUT);    // we use this for the SS pin digitalWrite(ss, HIGH); // the SS pin is active low, so set it up high first3   SPI.setBitOrder(MSBFIRST);   // our MCP4162 requires data to be sent MSB (most significant byte) first\n}4 void setValue(int value) \n{ digitalWrite(ss, LOW); SPI.transfer(0);     // send the command byte SPI.transfer(value); // send the value (0 to 255) digitalWrite(ss, HIGH);\n}\nvoid loop()\n{5   for (int a=0; a<256; a++)   { setValue(a); delay(del); }6   for (int a=255; a>=0; a--)  { setValue(a); delay(del); }\n}\n```"]