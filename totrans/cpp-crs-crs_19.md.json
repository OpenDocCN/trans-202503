["```\n#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nint main() {\n  bitset<8> s{ \"01110011\" };\n  string str(\"Crying zeros and I'm hearing \");\n  size_t num{ 111 };\n  cout << s; ➊\n  cout << '\\n'; ➋\n  cout << str; ➌\n  cout << num; ➍\n  cout << \"s\\n\"; ➎\n}\n-----------------------------------------------------------------------\n01110011 ➊➋\nCrying zeros and I'm hearing 111s ➌➍➎\n```", "```\nostream& operator<<(ostream&, char);\n```", "```\n#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nint main() {\n  bitset<8> s{ \"01110011\" };\n  string str(\"Crying zeros and I'm hearing \");\n  size_t num{ 111 };\n  cout << s << '\\n' << str << num << \"s\\n\"; ➊\n}\n-----------------------------------------------------------------------\n01110011\nCrying zeros and I'm hearing 111s ➊\n```", "```\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n  double x, y;\n  cout << \"X: \";\n  cin >> x; ➊\n  cout << \"Y: \";\n  cin >> y; ➋\n\n  string op;\n  cout << \"Operation: \";\n  cin >> op; ➌\n  if (op == \"+\") {\n    cout << x + y; ➍\n  } else if (op == \"-\") {\n    cout << x - y; ➎\n  } else if (op == \"*\") {\n    cout << x * y; ➏\n  } else if (op == \"/\") {\n cout << x / y; ➐\n  } else {\n    cout << \"Unknown operation \" << op; ➑\n  }\n}\n```", "```\nX: 3959 ➊\nY: 6.283185 ➋\nOperation: * ➌\n24875.1 ➍\n```", "```\n#include <iostream>\n#include <string>\n\nint main() {\n  std::string word; ➊\n  size_t count{}; ➋\n  while (std::cin >> word) ➌\n    count++; ➍\n  std::cout << \"Discovered \" << count << \" words.\\n\"; ➎\n}\n```", "```\n$ listing_16_5.exe ➊\nSize matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And well\nyou should not. For my ally is the Force, and a powerful ally it is. Life\ncreates it, makes it grow. Its energy surrounds us and binds us. Luminous\nbeings are we, not this crude matter. You must feel the Force around you;\nhere, between you, me, the tree, the rock, everywhere, yes. ➋\n^Z ➌\nDiscovered 70 words. ➍\n```", "```\n$ cat yoda.txt➊ |➋ ./listing_15_4➌\nDiscovered 70 words.\n```", "```\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n  cin.exceptions(istream::badbit); ➊\n  string word;\n  size_t count{};\n  try { ➋\n    while(cin >> word) ➌\n      count++;\n    cout << \"Discovered \" << count << \" words.\\n\"; ➍\n  } catch (const std::exception& e) { ➎\n    cerr << \"Error occurred reading from stdin: \" << e.what(); ➏\n  }\n}\n```", "```\ncout << \"Discovered \" << count << \" words.\" << endl;\n```", "```\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\nint main() {\n  cout << \"Gotham needs its \" << boolalpha << true << \" hero.\"; ➊\n  cout << \"\\nMark it \" << noboolalpha << false << \"!\"; ➋\n  cout << \"\\nThere are \" << 69 << \",\" << oct << 105 << \" leaves in here.\"; ➌\n  cout << \"\\nYabba \" << hex << 3669732608 << \"!\"; ➍\n  cout << \"\\nAvogadro's number: \" << scientific << 6.0221415e-23; ➎\n  cout << \"\\nthe Hogwarts platform: \" << fixed << setprecision(2) << 9.750123; ➏\n  cout << \"\\nAlways eliminate \" << 3735929054; ➐\n  cout << setw(4) << \"\\n\"\n       << 0x1 << \"\\n\"\n       << 0x10 << \"\\n\"\n       << 0x100 << \"\\n\"\n       << 0x1000 << endl; ➑\n}\n-----------------------------------------------------------------------\nGotham needs its true hero. ➊\nMark it 0! ➋\nThere are 69,151 leaves in here. ➌\nYabba dabbad00! ➍\nAvogadro's Number: 6.022142e-23 ➎\nthe Hogwarts platform: 9.75 ➏\nAlways eliminate deadc0de ➐\n1\n10\n100\n1000 ➑\n```", "```\nostream&➊ operator<<(ostream&➋ s, const YourType& m ➌);\n```", "```\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\nostream& operator<<(ostream& s, vector<T> v) { ➊\n  s << \"Size: \" << v.size()\n    << \"\\nCapacity: \" << v.capacity()\n    << \"\\nElements:\\n\"; ➋\n  for (const auto& element : v)\n    s << \"\\t\" << element << \"\\n\"; ➌\n  return s; ➍\n}\n\nint main() {\n  const vector<string> characters {\n    \"Bobby Shaftoe\",\n    \"Lawrence Waterhouse\",\n    \"Gunter Bischoff\",\n    \"Earl Comstock\"\n  }; ➎\n  cout << characters << endl; ➏\n\n  const vector<bool> bits { true, false, true, false }; ➐\n  cout << boolalpha << bits << endl; ➑\n}\n-----------------------------------------------------------------------\nSize: 4\nCapacity: 4\nElements: ➋\n Bobby Shaftoe ➌\n Lawrence Waterhouse ➌\n Gunter Bischoff ➌\n Earl Comstock ➌\n\nSize: 4\nCapacity: 32\nElements: ➋\n true ➌\n false ➌\n true ➌\n false ➌\n```", "```\nistream&➊ operator>>(istream&➋ s, YourType& m ➌);\n```", "```\n#include <iostream>\n#include <deque>\n\nusing namespace std;\n\ntemplate <typename T>\nistream& operator>>(istream& s, deque<T>& t) { ➊\n  T element; ➋\n  while (s >> element) ➌\n    t.emplace_back(move(element)); ➍\n  return s; ➎\n}\n\nint main() {\n  cout << \"Give me numbers: \"; ➏\n  deque<int> numbers;\n  cin >> numbers; ➐\n  int sum{};\n  cout << \"Cumulative sum:\\n\";\n  for(const auto& element : numbers) {\n    sum += element;\n    cout << sum << \"\\n\"; ➑\n  }\n}\n-----------------------------------------------------------------------\nGive me numbers: ➏ 1 2 3 4 5 ➐\nCumulative sum:\n1  ➑\n3  ➑\n6  ➑\n10 ➑\n15 ➑\n```", "```\nusing ostringstream = basic_ostringstream<char>;\nusing wostringstream = basic_ostringstream<wchar_t>;\n```", "```\n#include <string>\n#include <sstream>\n\nTEST_CASE(\"ostringstream produces strings with str\") {\n  std::ostringstream ss; ➊\n  ss << \"By Grabthar's hammer, \";\n  ss << \"by the suns of Worvan. \";\n\n  ss << \"You shall be avenged.\"; ➋\n  const auto lazarus = ss.str(); ➌\n\n  ss.str(\"I am Groot.\"); ➍\n  const auto groot = ss.str(); ➎\n\n  REQUIRE(lazarus == \"By Grabthar's hammer, by the suns\"\n                     \" of Worvan. You shall be avenged.\");\n  REQUIRE(groot == \"I am Groot.\");\n}\n```", "```\nusing istringstream = basic_istringstream<char>;\nusing wistringstream = basic_istringstream<wchar_t>;\n```", "```\nTEST_CASE(\"istringstream supports construction from a string\") {\n  std::string numbers(\"1 2.23606 2\"); ➊\n  std::istringstream ss{ numbers }; ➋\n  int a;\n  float b, c, d;\n  ss >> a; ➌\n  ss >> b; ➍\n  ss >> c;\n  REQUIRE(a == 1);\n  REQUIRE(b == Approx(2.23606));\n  REQUIRE(c == Approx(2));\n  REQUIRE_FALSE(ss >> d); ➎\n}\n```", "```\nusing stringstream = basic_stringstream<char>;\nusing wstringstream = basic_stringstream<wchar_t>;\n```", "```\nTEST_CASE(\"stringstream supports all string stream operations\") {\n  std::stringstream ss;\n  ss << \"Zed's DEAD\"; ➊\n\n  std::string who;\n  ss >> who; ➋\n  int what;\n  ss >> std::hex >> what; ➌\n\n  REQUIRE(who == \"Zed's\");\n  REQUIRE(what == 0xdead);\n}\n```", "```\nusing ofstream = basic_ofstream<char>;\nusing wofstream = basic_ofstream<wchar_t>;\n```", "```\n#include <fstream>\n\nusing namespace std;\n\nint main() {\n  ofstream file{ \"lunchtime.txt\", ios::out|ios::app }; ➊\n  file << \"Time is an illusion.\" << endl; ➋\n  file << \"Lunch time, \" << 2 << \"x so.\" << endl; ➌\n}\n-----------------------------------------------------------------------\nlunchtime.txt:\nTime is an illusion. ➋\nLunch time, 2x so. ➌\n```", "```\nTime is an illusion.\nLunch time, 2x so.\nTime is an illusion.\nLunch time, 2x so.\n```", "```\nusing ifstream = basic_ifstream<char>;\nusing wifstream = basic_ifstream<wchar_t>;\n```", "```\n-54\n203\n9000\n0\n99\n-789\n400\n```", "```\n#include <iostream>\n#include <fstream>\n#include <limits>\n\nusing namespace std;\n\nint main() {\n  ifstream file{ \"numbers.txt\" }; ➊\n  auto maximum = numeric_limits<int>::min(); ➋\n  int value;\n  while (file >> value) ➌\n    maximum = maximum < value ? value : maximum; ➍\n  cout << \"Maximum found was \" << maximum << endl; ➎\n}\n-----------------------------------------------------------------------\nMaximum found was 9000 ➎\n```", "```\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nifstream➊ open(const char* path➋, ios_base::openmode mode = ios_base::in➌) {\n  ifstream file{ path, mode }; ➍\n  if(!file.is_open()) { ➎\n    string err{ \"Unable to open file \" };\n    err.append(path);\n    throw runtime_error{ err }; ➏\n  }\n  file.exceptions(ifstream::badbit);\n  return file; ➐\n}\n```", "```\ncout << my_ifstream.rdbuf()\n```", "```\n#include <iostream>\n#include <iterator>\n\nusing namespace std;\n\nint main() {\n  ostreambuf_iterator<char> itr{ cout }; ➊\n  *itr = 'H'; ➋\n  ++itr; ➌\n  *itr = 'i'; ➍\n}\n-----------------------------------------------------------------------\nH➋i➍\n```", "```\n#include <iostream>\n#include <iterator>\n#include <string>\n\nusing namespace std;\n\nint main() {\n  istreambuf_iterator<char> cin_itr{ cin.rdbuf() } ➊, end{} ➋;\n  cout << \"What is your name? \"; ➌\n  const string name{ cin_itr, end }; ➍\n  cout << \"\\nGoodbye, \" << name; ➎\n}\n-----------------------------------------------------------------------\nWhat is your name? ➌josh ➍\nGoodbye, josh➎\n```", "```\nThe problem with introspection is that it has no end.\n```", "```\n#include <fstream>\n#include <exception>\n#include <iostream>\n\nusing namespace std;\n\nifstream open(const char* path, ios_base::openmode mode = ios_base::in) { ➊\n--snip--\n}\n\nint main() {\n  try {\n    auto intro = open(\"introspection.txt\"); ➋\n    cout << \"Contents: \" << intro.rdbuf() << endl; ➌\n    intro.seekg(0); ➍\n    cout << \"Contents after seekg(0): \" << intro.rdbuf() << endl; ➎\n    intro.seekg(-4, ios_base::end); ➏\n    cout << \"tellg() after seekg(-4, ios_base::end): \"\n                                                    << intro.tellg() << endl; ➐\n    cout << \"Contents after seekg(-4, ios_base::end): \"\n                                                    << intro.rdbuf() << endl; ➑\n  }\n  catch (const exception& e) {\n    cerr << e.what();\n  }\n}\n-----------------------------------------------------------------------\nContents: The problem with introspection is that it has no end. ➌\nContents after seekg(0): The problem with introspection is that it has no end. ➎\ntellg() after seekg(-4, ios_base::end): 49 ➐\nContents after seekg(-4, ios_base::end): end. ➑\n```"]