- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Tools for Analyzing and Debugging I²C Transmissions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 传输分析与调试工具
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: When designing I²C hardware and writing software to work with I²C hardware,
    you will often discover that software-based debuggers and `printf` statements
    are insufficient for quickly tracking down problems in the hardware and software.
    If you’re going to program I²C devices regularly, you will want to invest in some
    proper hardware tools to reduce debugging and testing effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计 I²C 硬件和编写与 I²C 硬件配合使用的软件时，你通常会发现，基于软件的调试器和 `printf` 语句不足以快速定位硬件和软件中的问题。如果你打算定期编程
    I²C 设备，你会希望投资一些合适的硬件工具，以减少调试和测试的工作量。
- en: This chapter discusses several of those tools, including multimeters, oscilloscopes,
    logic analyzers, bus monitors, and protocol analyzers. Although such tools cost
    money, using them will reduce the time you spend debugging code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了其中几种工具，包括万用表、示波器、逻辑分析仪、总线监视器和协议分析仪。尽管这些工具需要花费一定的金钱，但使用它们能够减少调试代码时的时间消耗。
- en: 4.1 Generic Hardware Testing and Debugging Tools
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1 通用硬件测试与调试工具
- en: 'If you’re working with hardware devices (generic, not just I²C), there are
    a few tools you should have available in your tool chest:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在处理硬件设备（通用硬件，而不仅仅是 I²C）时，有几个工具你应该在工具箱中准备好：
- en: A digital multimeter (DMM)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字万用表（DMM）
- en: An oscilloscope
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示波器
- en: 5-V, 3.3-V, and variable power supplies (0 V to 10 V, at the very least)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5V、3.3V 和可调电源（至少 0V 到 10V）
- en: The DMM comes in handy for checking the power supply pins on I²C devices, as
    well as any other DC signals. Most DMMs are worthless for measuring signals on
    pins whose voltage is changing, such as the SDA and SCL lines, because the DMM
    will average the voltage over a relatively long time frame, producing an inaccurate
    picture if the signal is not stable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: DMM 在检查 I²C 设备上的电源引脚以及其他直流信号时非常有用。大多数 DMM 在测量电压变化的引脚上的信号时毫无价值，例如 SDA 和 SCL 线，因为
    DMM 会对电压进行相对较长时间的平均处理，如果信号不稳定，这将导致测量结果不准确。
- en: DMMs are also useful for measuring the pullup resistance on the I²C lines. In
    theory, you should be able to read the color codes or SMT resistor codes and figure
    out the resistance on the bus. However, if multiple pullups are scattered around
    the system, the resistor might be lower than what you expect. A quick ohm check
    between Vcc and the SDA or SCL lines could prove handy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DMM 还可以用来测量 I²C 线上的上拉电阻。理论上，你应该能通过读取颜色代码或 SMT 电阻代码来计算总线上的电阻。然而，如果多个上拉电阻分布在系统各处，电阻可能比你预期的要小。快速测量
    Vcc 与 SDA 或 SCL 线之间的电阻可能会很有用。
- en: Some DMMs have a capacitance meter built into them. These are rarely good enough
    to measure the bus capacitance. Unless you have a *really expensive* DMM, don’t
    even bother trying to make such a measurement. The capacitance is usually too
    low for your average meter. On the other hand, capacitance meters that can handle
    low capacitances, and that might give you an idea of how bad the bus capacitance
    is in your system, are available for as little as $100\. Fortunately, you can
    observe the signals with an oscilloscope and determine if there is too much bus
    capacitance, so a capacitance meter isn’t necessary. It’s not worth buying one
    if you don’t already have one and can’t justify the purchase for other reasons.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 DMM 内置了电容表，但这些功能通常不足以测量总线电容。除非你有一台*非常昂贵*的 DMM，否则不要尝试进行这种测量。电容通常太低，普通的万用表无法测量。另一方面，有些电容表能够处理低电容，并且能给你一个关于系统总线电容如何的估计，价格也从
    $100 起。幸运的是，你可以使用示波器观察信号，并确定是否存在过多的总线电容，因此电容表并不是必需的。如果你没有电容表，也无法为其他原因证明购买的必要性，那就不值得购买一个。
- en: In theory, an oscilloscope isn’t absolutely necessary for debugging I²C signals,
    but it’s still a useful device for quickly determining whether signals are active
    and what the voltage levels are on those signals. As just noted, however, one
    useful reason for having an oscilloscope is that it allows you to monitor the
    analog condition of the signals appearing on the I²C bus. You can easily see if
    the voltage levels are reasonable—that is, not too high—and whether you’re getting
    huge voltage drops. An oscilloscope will also let you determine whether the bus
    capacitance has gotten out of control by showing you the rise times of the SCL
    and SDA signals. If it’s taking too long for these signals to rise, the devices
    on the bus might not register those signals as a logic 1\. For example, [Figure
    4-1](#figure4-1) shows the SCL line in a reasonable system. This image is on a
    100-kHz system with a Teensy 3.2 acting as the controller and an Adafruit ADS1115
    as the peripheral. It was wired together on a “wireless” breadboard (which are
    famous for having a high capacitance).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-1: Oscilloscope image of the SCL line'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 4-2](#figure4-2) shows a really bad version of the clock signal, with
    a very slow rise time. In this particular case I attached a 470-pF capacitor across
    the SCL and Gnd lines to simulate an excessive bus capacitance. As you can see,
    the signal suffers considerable degradation. By the time the signal has risen
    enough to register as high, around 2 µsec have passed. This doesn’t leave the
    device that is putting a bit on the SDA line much time to do its job. These types
    of issues are most easily spotted using an oscilloscope, so oscilloscopes are
    handy to have around.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04002.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2: Oscilloscope image of the SCL line with high bus capacitance'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: A “decent” oscilloscope, one that is good enough for debugging I²C signals,
    will probably cost you around $300 to $600\. Of course, a good, brand-name oscilloscope
    will cost you several thousand dollars. However, such devices are probably overkill
    for observing I²C bus signals. Unless you have other projects requiring the speed
    and features of such devices—or you really want to impress your friends—you can
    stick with one of the “advanced hobbyist” devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Some really cheap devices (sub-$100 to around $200) use a low-end LCD display
    or connect to your computer. They might work for someone on an extreme budget,
    but at some point or another you’ll wind up buying a real oscilloscope if you
    actually use it regularly. As they say: “buy once, cry once.”'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Logic Analyzers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without question, the most important tool you should obtain when working with
    I²C hardware and software is a logic analyzer. Like oscilloscopes, logic analyzers
    come in all different shapes and sizes, with widely varying feature lists, and
    ranging in price from less than $30 to thousands of dollars.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'At the low end are two interesting devices that, despite their low price, are
    actually quite useful: the I²C Driver and the Bus Pirate. These two devices are
    probably more correctly called *bus monitors* or *bus drivers* rather than logic
    analyzers. While they have some of the features of an actual logic analyzer, the
    software support attached to these (open hardware or open software) projects isn’t
    quite up to par with that you would find on true logic analyzers.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: In the $300 to $500 range, things start to get more interesting. Total Phase
    offers several different I²C and SPI debugging modules. These devices connect
    to a PC (Windows, Linux, or macOS), and software running on those machines allows
    you to capture and manipulate the I²C data. (See “For More Information” at the
    end of this chapter for links to the Total Phase and other debugging modules this
    section describes.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting device, from Analog Devices (the IC manufacturer, which
    makes several I²C ICs), is the ADALM2000 Active Learning Module. This device is
    intended for student laboratories and supports a wide range of measurement and
    control options, I²C monitoring among them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: If you really want to spend some money, the BusPro-I from Corelis is a professional-level
    I²C bus analyzer available for around $1,700\. Corelis also has an advanced version
    (at greater cost, no doubt) that can emulate I²C controller and peripheral devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'The devices I’ve described up to this point have been tools that were largely
    built for I²C and SPI measurement. For the most part, these devices are simple
    versions of what is known as a logic analyzer. A *logic analyzer* is similar to
    an oscilloscope insofar as it takes a sequence of readings over time and displays
    the state of those readings (typically on some sort of LCD display, which is either
    built into the logic analyzer or on a PC to which the logic analyzer connects).
    There are a couple of major differences between oscilloscopes and logic analyzers,
    however:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Logic analyzers are inherently *digital* devices, whereas oscilloscopes are
    *analog* devices.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logic analyzers tend to store data and display it after the fact, whereas oscilloscopes
    tend to be more real time.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logic analyzers often interpret the digital information they record according
    to some protocol (such as the I²C protocol), whereas oscilloscopes tend to display
    just raw analog data.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logic analyzers tend to capture many pieces (bits) of data simultaneously (often
    4 to 16 channels), whereas oscilloscopes are generally limited to 1 to 4 channels.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all of these differences are absolute; for example, some storage oscilloscopes
    can also store data, and certain logic analyzers can display their data and analysis
    in real time. It is even possible to get a logic analyzer and oscilloscope built
    into the same box. For example, the Siglent SDS1104X-E is a 100-MHz scope with
    a 4-channel logic analyzer, and the Owon MSO8102T and Rigol MSO1104Z-S offer 16
    channels along with oscilloscope functionality.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you’re spending someone else’s money, you can get some really
    fancy logic analyzers from Tektronix, Keysight Technologies, NCI Logic Analyzers,
    National Instruments, and other high-end professional instrumentation companies.
    However, if you don’t need gigahertz sampling rates, scores of input channels,
    and a fancy name, or if you’re having to foot the bill for this device from your
    own pocket, then you’ll probably need to look at something a little lower end.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In the $100 to $1,000 range, a wide variety of decent logic analyzers that are
    USB-based and connect to a PC are available; see “For More Information” for details.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, you’ll want to ask the following questions when looking for a logic
    analyzer:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Does it support the protocols you’re interested in (I²C for the time being,
    but you’ll probably use it to debug SPI, CAN, and other bus protocols, too)?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the software high quality, and does it run on your development machine?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it well documented?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there ongoing support (for example, software updates)?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I own a Saleae Logic 8 and can vouch for the fact that it is a high-quality
    unit with great support. That is not to say that these other units I’ve listed
    aren’t also excellent (I don’t know, I’ve never used them) or that some other
    unit not listed here would also work out well for you. However, the Saleae units
    have been well-received by the engineering community. Perhaps the only complaint
    is that they are a bit pricey ($400 to $1,000), but that’s the price associated
    with high-quality hardware and software.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The remainder of this chapter will concentrate on three of the devices mentioned
    to this point: the I²C Driver, the Bus Pirate, and the Saleae Logic 8.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 The I²C Driver
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The I²C Driver is a small board with a small-format color LCD display. It has
    three sets of I²C probes coming off the board; I’m not sure why it has more than
    one set, as the connectors all have the same signals and are wired together. It
    has a micro-USB port to connect to a Linux, Mac, or Windows PC.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'When the unit comes up, it displays any I²C activity on the little LCD display.
    While this is pretty, it’s not all that useful: I²C data transfer may be slow
    compared to other protocols, but it is still much faster than you can see on a
    display in real time.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The real functionality lies in the software that runs on the PC at the other
    end of the USB cable. Excamera Labs, the outfit that developed the I²C Driver,
    supplies some Python code to support the I²C Driver. The software is crude and
    bare bones but about what you can expect for $30.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'The main Python software provides an interface like a command line (within
    Python). You perform various activities by manually calling Python functions.
    For example, if you want to do a bus scan to see what peripheral devices respond
    on the bus, enter the command `i2c.scan()` after the Python `>` prompt. The `i2c.scan()`
    function call displays something like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where `--` indicates that a device did not respond at the particular I²C address
    and a hexadecimal numeric value (48 being the only example here that corresponds
    to a responsive device address). In this case, I have a single Adafruit ADS1115
    ADC breakout board configured for address 0x48 installed on the I²C bus.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The I²C Driver Python software provides many additional commands you can execute
    or call from Python code you write. The call `help(i2cdriver)` displays the Python
    application programming interface (API). Some useful commands you can execute
    directly include the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`setspeed(speed)` Argument is 100 or 400 (corresponding to 100 kHz or 400 kHz,
    respectively)'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`setpullups(bitmask)` Argument is a 6-bit value specifying pullup values for
    the three I²C connectors (2 bits each, for SCL and SDA) on the I²C Driver'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`reset()` Sends a bus reset (general call address)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scan()` Scans the bus and displays addresses that respond'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`monitor(flag)` Turns on monitor mode if `flag` is true (nonzero); turns it
    off if `flag` is false (0)'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getstatus()` Displays status information'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are also commands for starting an I²C bus transaction, writing data to
    the bus, reading data from the bus, and sending a stop command. However, those
    are operations you’d normally do within a Python program.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The I²C Driver software also has a GUI application that brings up the window
    shown in [Figure 4-3](#figure4-3). Click the **Monitor mode** button to activate
    monitor mode on the I²C Driver’s built-in LCD. Click the button again to turn
    monitor mode off. While not in monitor mode, select one of the addresses (if there
    is a device attached at that address) and read or write data to that device using
    the edit boxes at the bottom of the window.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04003.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-3: I²C Driver GUI display on a Mac'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'While there is activity on the I²C bus, click the **Capture mode** button to
    redirect I²C to a comma-separated values (*.csv*) file. Here’s a small sample
    of the data from one such file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While the I²C Driver was capturing data on the bus, I had a Teensy 3.2 talking
    to an Adafruit ADS1115 breakout board. Sadly, all the numbers this program displays
    are in decimal format, rather than the more useful hexadecimal format. The value
    72[10] is 0x48—the address of the ADS1115.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: It would be easy enough to write some software to parse each of these lines
    and display the data in a more appropriate fashion. Unfortunately, timing information
    is missing from this display. However, it’s open source software, so feel free
    to go in and modify it if you would like a different output.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most interesting use of the I²C Driver capture mode is for generating
    test result data. You can run some tests with your I²C software for a controller
    or peripheral, capture the output, and then compare the output against known data
    or run the output through a filter program that examines it for correctness. This
    way of generating test results is a useful tool for semi-automating complex test
    procedures.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Because the I²C Driver also lets you read and write data to an I²C peripheral,
    it’s also useful for checking the operation of a peripheral device you’ve created.
    You can manually write bytes to the device, read the response from the device,
    and verify the results are what you expect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Although the I²C Driver is not the be-all and end-all of I²C debugging tools,
    it’s an interesting tool. Furthermore, it provides a USB interface to the I²C
    bus, which you can program from your PC; see their website for details (link provided
    in “For More Information”). For less than $30, having this device in your toolbox
    is a no-brainer.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 The Bus Pirate
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Bus Pirate is another open-hardware, less-than-$30 device you can use to
    analyze signals on the I²C bus. Whereas the I²C Driver is basically a USB-to-I²C
    device with a display bolted to it, the Bus Pirate is actually a small microcontroller
    (a PIC) that is programmed to read and write various digital I/O pins. Using bit-banging
    software, it emulates (slowly) the I²C protocol. Because it’s open hardware and
    software, is low cost, and has been around forever, the Bus Pirate has gained
    a tremendous following for people who want low-cost hardware hacking, analyzing,
    or testing capabilities.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: The Bus Pirate is different from most of the other devices mentioned in this
    chapter because it doesn’t really have any PC-related software. The Bus Pirate
    looks like a serial device (USB-to-serial), so you operate the Bus Pirate using
    a serial terminal emulation program. You enter commands into the terminal and
    the Bus Pirate responds appropriately. In operation, this is similar to the command-line
    mode of the I²C Driver.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Most of the Bus Pirate commands are single character inputs. The most important
    command for you to know is the `?` command. This is the help command that displays
    a list of all the commands to the terminal.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Bus Pirate comes up in a special *Hi-Z* (high-impedance) mode,
    which basically turns all the outputs off to prevent any damage to the Bus Pirate
    or to any device connected to the Bus Pirate. You switch to a new mode by pressing
    **M**. This will present you with a menu to select the new operation mode (such
    as I²C mode). If you select I²C, it will ask you to input a bus frequency.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Once the Bus Pirate is running in I²C mode, you can write data to the bus, read
    data from the bus, or monitor data on the bus (similar to the I²C Driver). See
    the Bus Pirate documentation for more details (link provided in “For More Information”).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 The Saleae Logic Analyzers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the I²C Driver and Bus Pirate are useful devices for certain types
    of I²C monitoring, testing, and debugging, they aren’t true logic analyzers. They
    aren’t great at monitoring and displaying I²C information in near real time. Furthermore,
    although both devices can monitor—and to a certain extent, capture—data on the
    bus, they’re nearly useless for timing analysis like, for example, verifying each
    bit happens within a certain amount of time. This is where a real logic analyzer
    excels.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The Saleae Logic 8, Logic 8 Pro, and Logic 16 Pro devices are fully featured
    logic analyzers with 8 or 16 channels. The Logic 8 unit operates at 100 million
    samples per second (Msps), and the Logic 8 Pro or Logic 16 Pro units operate at
    500 Msps. Generally, you want your logic analyzer to run five to ten times faster
    than the fastest signal you need to capture, so the Logic 8 (100 Msps) is easily
    good for signals in the 10 MHz to 20 MHz range. This certainly covers all I²C
    frequencies.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: The devices themselves provide 8 or 16 probes to connect to your circuitry.
    For standard I²C measurements, you really need to connect only two of these probes,
    plus a ground wire. Having additional channels is useful because they let you
    check the status of other pins in your system during an I²C transmission. For
    example, if you’re sending data to a GPIO expander, you can connect some of the
    probes to input or output pins to see their levels change before, during, and
    after the I²C transmissions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The Logic software that runs on a PC looks something like that appearing in
    [Figure 4-4](#figure4-4) (macOS version). The left side of the screen defines
    the signals; you can specify the names appearing here. The middle section of the
    screen displays the timing and protocol information, and the right side of the
    screen lets you choose the protocols to decode.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04004.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-4: Logic software running on macOS'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the **Start** button on the left side of the window initiates a capture
    operation. You can specify how much data to capture; I have my personal copy set
    up to capture data for two seconds. [Figure 4-5](#figure4-5) shows a typical data
    capture. As usual for this chapter, the logic analyzer is capturing the communication
    between a Teensy 3.2 and an ADS1115.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04005.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5: Logic software timing display'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Logic has been programmed to analyze an I²C data stream. As such, it displays
    the address byte and R/W command and each data byte passing on the bus. It’s not
    clear in this black-and-white image, but the display also marks the start and
    stop conditions with green and red dots on the data waveforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: I’ve shrunk this timing diagram so you can see a complete I²C transmission.
    However, Logic allows you to expand or shrink the timing diagram so you can adjust
    the level of detail. [Figure 4-6](#figure4-6) shows the expansion of the first
    (address) byte transmission from [Figure 4-5](#figure4-5).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04006.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-6: A timing expansion in Logic'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Another nice feature in Logic is that you can move the cursor over a section
    of one of the timing signals and get timing information. [Figure 4-7](#figure4-7)
    shows what happened when I moved the cursor over one of the SCL clock pulses.
    Logic responded by displaying the width of the pulse and the frequency (5.12 µsec
    and 96.9 kHz). I made considerable use of this feature when working on the software-based
    I²C controller and peripheral implementations in the previous chapter. This is
    how I fine-tuned the delays to get the software I²C emulation running close to
    100 kHz.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c04/f04007.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-7: Extracting timing information from Logic'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Logic also lets you set cursors within the timing diagrams so you can measure
    the time between any two arbitrary points, not just the width of some signal pulse.
    This comes in handy, for example, when measuring the time of a whole transmission
    rather than a single bit of a transmission.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: At just under $400, the least expensive Saleae unit isn’t super cheap, but having
    one of these devices is a sound investment if you’re going to be debugging lots
    of I²C code and hardware.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 A Final Comment on I²C Monitors and Logic Analyzers
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because this is *The Book of I*^(*2*)*C*, the discussion of the analyzers in
    this chapter has centered on their use for debugging and analyzing I²C signals.
    In fact, most of the devices in this chapter support several other protocols as
    well, including SPI, CANBUS, MIDI, DMX, 1-Wire, and just about any typical protocol
    you can imagine. (The I²C Driver is the exception to this; it supports only I²C
    monitoring.) Therefore, the purchase of a device such as the Saleae Logic 8 is
    actually a good investment because you can use it for testing and debugging all
    kinds of hardware, not just I²C signals.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 Chapter Summary
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing software to work with I²C devices invariably requires testing and debugging
    said software. Such work is much easier accomplished using hardware testing and
    debugging tools. This chapter discussed several types of devices you can use for
    this purpose, including oscilloscopes, logic analyzers, and bus sniffers. It highlighted
    several commercially available options, including the I²C Driver, the Bus Pirate,
    and the Salae Logic Analyer. It also mentioned various combination oscilloscope
    and logic analyzer options and concluded by noting that these devices are useful
    for debugging other protocols, not just I²C devices, which makes them more universally
    applicable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
