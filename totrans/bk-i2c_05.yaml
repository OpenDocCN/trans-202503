- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Tools for Analyzing and Debugging I²C Transmissions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 传输分析与调试工具
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: When designing I²C hardware and writing software to work with I²C hardware,
    you will often discover that software-based debuggers and `printf` statements
    are insufficient for quickly tracking down problems in the hardware and software.
    If you’re going to program I²C devices regularly, you will want to invest in some
    proper hardware tools to reduce debugging and testing effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计 I²C 硬件和编写与 I²C 硬件配合使用的软件时，你通常会发现，基于软件的调试器和 `printf` 语句不足以快速定位硬件和软件中的问题。如果你打算定期编程
    I²C 设备，你会希望投资一些合适的硬件工具，以减少调试和测试的工作量。
- en: This chapter discusses several of those tools, including multimeters, oscilloscopes,
    logic analyzers, bus monitors, and protocol analyzers. Although such tools cost
    money, using them will reduce the time you spend debugging code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了其中几种工具，包括万用表、示波器、逻辑分析仪、总线监视器和协议分析仪。尽管这些工具需要花费一定的金钱，但使用它们能够减少调试代码时的时间消耗。
- en: 4.1 Generic Hardware Testing and Debugging Tools
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1 通用硬件测试与调试工具
- en: 'If you’re working with hardware devices (generic, not just I²C), there are
    a few tools you should have available in your tool chest:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在处理硬件设备（通用硬件，而不仅仅是 I²C）时，有几个工具你应该在工具箱中准备好：
- en: A digital multimeter (DMM)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字万用表（DMM）
- en: An oscilloscope
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示波器
- en: 5-V, 3.3-V, and variable power supplies (0 V to 10 V, at the very least)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5V、3.3V 和可调电源（至少 0V 到 10V）
- en: The DMM comes in handy for checking the power supply pins on I²C devices, as
    well as any other DC signals. Most DMMs are worthless for measuring signals on
    pins whose voltage is changing, such as the SDA and SCL lines, because the DMM
    will average the voltage over a relatively long time frame, producing an inaccurate
    picture if the signal is not stable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: DMM 在检查 I²C 设备上的电源引脚以及其他直流信号时非常有用。大多数 DMM 在测量电压变化的引脚上的信号时毫无价值，例如 SDA 和 SCL 线，因为
    DMM 会对电压进行相对较长时间的平均处理，如果信号不稳定，这将导致测量结果不准确。
- en: DMMs are also useful for measuring the pullup resistance on the I²C lines. In
    theory, you should be able to read the color codes or SMT resistor codes and figure
    out the resistance on the bus. However, if multiple pullups are scattered around
    the system, the resistor might be lower than what you expect. A quick ohm check
    between Vcc and the SDA or SCL lines could prove handy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DMM 还可以用来测量 I²C 线上的上拉电阻。理论上，你应该能通过读取颜色代码或 SMT 电阻代码来计算总线上的电阻。然而，如果多个上拉电阻分布在系统各处，电阻可能比你预期的要小。快速测量
    Vcc 与 SDA 或 SCL 线之间的电阻可能会很有用。
- en: Some DMMs have a capacitance meter built into them. These are rarely good enough
    to measure the bus capacitance. Unless you have a *really expensive* DMM, don’t
    even bother trying to make such a measurement. The capacitance is usually too
    low for your average meter. On the other hand, capacitance meters that can handle
    low capacitances, and that might give you an idea of how bad the bus capacitance
    is in your system, are available for as little as $100\. Fortunately, you can
    observe the signals with an oscilloscope and determine if there is too much bus
    capacitance, so a capacitance meter isn’t necessary. It’s not worth buying one
    if you don’t already have one and can’t justify the purchase for other reasons.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 DMM 内置了电容表，但这些功能通常不足以测量总线电容。除非你有一台*非常昂贵*的 DMM，否则不要尝试进行这种测量。电容通常太低，普通的万用表无法测量。另一方面，有些电容表能够处理低电容，并且能给你一个关于系统总线电容如何的估计，价格也从
    $100 起。幸运的是，你可以使用示波器观察信号，并确定是否存在过多的总线电容，因此电容表并不是必需的。如果你没有电容表，也无法为其他原因证明购买的必要性，那就不值得购买一个。
- en: In theory, an oscilloscope isn’t absolutely necessary for debugging I²C signals,
    but it’s still a useful device for quickly determining whether signals are active
    and what the voltage levels are on those signals. As just noted, however, one
    useful reason for having an oscilloscope is that it allows you to monitor the
    analog condition of the signals appearing on the I²C bus. You can easily see if
    the voltage levels are reasonable—that is, not too high—and whether you’re getting
    huge voltage drops. An oscilloscope will also let you determine whether the bus
    capacitance has gotten out of control by showing you the rise times of the SCL
    and SDA signals. If it’s taking too long for these signals to rise, the devices
    on the bus might not register those signals as a logic 1\. For example, [Figure
    4-1](#figure4-1) shows the SCL line in a reasonable system. This image is on a
    100-kHz system with a Teensy 3.2 acting as the controller and an Adafruit ADS1115
    as the peripheral. It was wired together on a “wireless” breadboard (which are
    famous for having a high capacitance).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上讲，示波器并非调试I²C信号时绝对必要的工具，但它仍然是一个有用的设备，可以快速判断信号是否处于活动状态以及这些信号的电压水平。如前所述，拥有示波器的一个有用理由是它可以让你监控I²C总线上信号的模拟状态。你可以很容易地判断电压水平是否合理——即，不是过高——以及是否出现了巨大的电压下降。示波器还可以帮助你确定总线电容是否已经失控，通过显示SCL和SDA信号的上升时间。如果这些信号的上升时间过长，总线上的设备可能无法将这些信号识别为逻辑1。例如，[图4-1](#figure4-1)展示了一个合理系统中的SCL线。此图像来源于一个100kHz的系统，其中Teensy
    3.2作为控制器，Adafruit ADS1115作为外设。它们通过一个“无线”面包板（该面包板以电容高而著称）连接在一起。
- en: '![](image_fi/502468c04/f04001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04001.png)'
- en: 'Figure 4-1: Oscilloscope image of the SCL line'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1：示波器显示SCL线图像
- en: '[Figure 4-2](#figure4-2) shows a really bad version of the clock signal, with
    a very slow rise time. In this particular case I attached a 470-pF capacitor across
    the SCL and Gnd lines to simulate an excessive bus capacitance. As you can see,
    the signal suffers considerable degradation. By the time the signal has risen
    enough to register as high, around 2 µsec have passed. This doesn’t leave the
    device that is putting a bit on the SDA line much time to do its job. These types
    of issues are most easily spotted using an oscilloscope, so oscilloscopes are
    handy to have around.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-2](#figure4-2)展示了一个非常糟糕的时钟信号版本，具有非常慢的上升时间。在这个特定的例子中，我在SCL和Gnd线路之间连接了一个470pF的电容，以模拟过度的总线电容。如你所见，信号遭受了严重的衰减。当信号已经上升到足够高以被识别为高电平时，已经过去了大约2微秒。这并没有给在SDA线上放置比特的设备留出太多的时间来完成它的工作。使用示波器可以最容易地发现这些类型的问题，所以示波器确实是一个很有用的工具。'
- en: '![](image_fi/502468c04/f04002.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04002.png)'
- en: 'Figure 4-2: Oscilloscope image of the SCL line with high bus capacitance'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-2：示波器显示高总线电容下的SCL线图像
- en: A “decent” oscilloscope, one that is good enough for debugging I²C signals,
    will probably cost you around $300 to $600\. Of course, a good, brand-name oscilloscope
    will cost you several thousand dollars. However, such devices are probably overkill
    for observing I²C bus signals. Unless you have other projects requiring the speed
    and features of such devices—or you really want to impress your friends—you can
    stick with one of the “advanced hobbyist” devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一台“体面”的示波器，足够用于调试I²C信号，可能会花费你大约300到600美元。当然，一台品牌良好的示波器价格可能会达到几千美元。然而，这类设备对于观察I²C总线信号来说，可能有些过于奢侈。除非你有其他项目需要这种设备的速度和功能，或者你真的想让朋友们印象深刻，否则你完全可以选择一台“高级爱好者”级别的设备。
- en: 'Some really cheap devices (sub-$100 to around $200) use a low-end LCD display
    or connect to your computer. They might work for someone on an extreme budget,
    but at some point or another you’ll wind up buying a real oscilloscope if you
    actually use it regularly. As they say: “buy once, cry once.”'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些非常便宜的设备（价格低于100美元到大约200美元）使用低端LCD显示屏或通过连接电脑来工作。它们可能适合预算极为紧张的人，但如果你经常使用它，你最终还是会买一台真正的示波器。正如人们常说的：“一次购买，一次哭泣。”
- en: 4.2 Logic Analyzers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2 逻辑分析仪
- en: Without question, the most important tool you should obtain when working with
    I²C hardware and software is a logic analyzer. Like oscilloscopes, logic analyzers
    come in all different shapes and sizes, with widely varying feature lists, and
    ranging in price from less than $30 to thousands of dollars.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，处理I²C硬件和软件时，你最需要获得的工具就是逻辑分析仪。像示波器一样，逻辑分析仪也有各种形状和尺寸，功能列表差异巨大，价格从不到30美元到几千美元不等。
- en: 'At the low end are two interesting devices that, despite their low price, are
    actually quite useful: the I²C Driver and the Bus Pirate. These two devices are
    probably more correctly called *bus monitors* or *bus drivers* rather than logic
    analyzers. While they have some of the features of an actual logic analyzer, the
    software support attached to these (open hardware or open software) projects isn’t
    quite up to par with that you would find on true logic analyzers.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在低端市场上，有两种有趣的设备，尽管它们价格低廉，但实际上相当有用：I²C 驱动器和总线海盗。这两种设备可能更准确地称为*总线监控器*或*总线驱动器*，而不是逻辑分析仪。虽然它们具有一些实际逻辑分析仪的功能，但与这些（开放硬件或开放软件）项目相关的软件支持，远不如真正的逻辑分析仪。
- en: In the $300 to $500 range, things start to get more interesting. Total Phase
    offers several different I²C and SPI debugging modules. These devices connect
    to a PC (Windows, Linux, or macOS), and software running on those machines allows
    you to capture and manipulate the I²C data. (See “For More Information” at the
    end of this chapter for links to the Total Phase and other debugging modules this
    section describes.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 $300 到 $500 的价格范围内，事情开始变得更有趣。Total Phase 提供几种不同的 I²C 和 SPI 调试模块。这些设备可以连接到
    PC（Windows、Linux 或 macOS），并且运行在这些机器上的软件允许你捕获并操作 I²C 数据。（请参阅本章结尾的“更多信息”部分，了解 Total
    Phase 和其他调试模块的链接。）
- en: Another interesting device, from Analog Devices (the IC manufacturer, which
    makes several I²C ICs), is the ADALM2000 Active Learning Module. This device is
    intended for student laboratories and supports a wide range of measurement and
    control options, I²C monitoring among them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有趣的设备来自模拟设备公司（这家集成电路制造商生产多种 I²C 集成电路），它是 ADALM2000 活动学习模块。这款设备是为学生实验室设计的，支持多种测量和控制选项，其中包括
    I²C 监控。
- en: If you really want to spend some money, the BusPro-I from Corelis is a professional-level
    I²C bus analyzer available for around $1,700\. Corelis also has an advanced version
    (at greater cost, no doubt) that can emulate I²C controller and peripheral devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想花钱，可以考虑 Corelis 的 BusPro-I，它是一个专业级的 I²C 总线分析仪，价格大约为 $1,700。Corelis 还有一个更高级的版本（无疑价格更高），可以模拟
    I²C 控制器和外设设备。
- en: 'The devices I’ve described up to this point have been tools that were largely
    built for I²C and SPI measurement. For the most part, these devices are simple
    versions of what is known as a logic analyzer. A *logic analyzer* is similar to
    an oscilloscope insofar as it takes a sequence of readings over time and displays
    the state of those readings (typically on some sort of LCD display, which is either
    built into the logic analyzer or on a PC to which the logic analyzer connects).
    There are a couple of major differences between oscilloscopes and logic analyzers,
    however:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我描述的设备主要是为 I²C 和 SPI 测量而设计的工具。从某种程度上说，这些设备是所谓逻辑分析仪的简化版。*逻辑分析仪*类似于示波器，因为它会随着时间的推移进行一系列读数，并显示这些读数的状态（通常是在某种
    LCD 显示器上，这个显示器可能内置于逻辑分析仪中，也可能是在与逻辑分析仪连接的 PC 上）。不过，示波器和逻辑分析仪之间还是有一些主要区别的：
- en: Logic analyzers are inherently *digital* devices, whereas oscilloscopes are
    *analog* devices.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪本质上是*数字*设备，而示波器则是*模拟*设备。
- en: Logic analyzers tend to store data and display it after the fact, whereas oscilloscopes
    tend to be more real time.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪通常会存储数据并在事后显示，而示波器则更倾向于实时显示。
- en: Logic analyzers often interpret the digital information they record according
    to some protocol (such as the I²C protocol), whereas oscilloscopes tend to display
    just raw analog data.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪通常根据某种协议（例如 I²C 协议）解释它们记录的数字信息，而示波器则倾向于显示原始的模拟数据。
- en: Logic analyzers tend to capture many pieces (bits) of data simultaneously (often
    4 to 16 channels), whereas oscilloscopes are generally limited to 1 to 4 channels.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪倾向于同时捕获多个数据位（通常是 4 到 16 个通道），而示波器一般限制为 1 到 4 个通道。
- en: Not all of these differences are absolute; for example, some storage oscilloscopes
    can also store data, and certain logic analyzers can display their data and analysis
    in real time. It is even possible to get a logic analyzer and oscilloscope built
    into the same box. For example, the Siglent SDS1104X-E is a 100-MHz scope with
    a 4-channel logic analyzer, and the Owon MSO8102T and Rigol MSO1104Z-S offer 16
    channels along with oscilloscope functionality.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异并非绝对；例如，一些存储示波器也可以存储数据，而某些逻辑分析仪可以实时显示它们的数据和分析结果。甚至有可能将逻辑分析仪和示波器集成到同一个设备中。例如，Siglent
    SDS1104X-E是一款100 MHz示波器，带有4通道逻辑分析仪，而Owon MSO8102T和Rigol MSO1104Z-S则提供16个通道以及示波器功能。
- en: Of course, if you’re spending someone else’s money, you can get some really
    fancy logic analyzers from Tektronix, Keysight Technologies, NCI Logic Analyzers,
    National Instruments, and other high-end professional instrumentation companies.
    However, if you don’t need gigahertz sampling rates, scores of input channels,
    and a fancy name, or if you’re having to foot the bill for this device from your
    own pocket, then you’ll probably need to look at something a little lower end.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你是在花别人的钱，你可以从Tektronix、Keysight Technologies、NCI Logic Analyzers、National
    Instruments以及其他高端专业仪器公司购买一些非常精密的逻辑分析仪。然而，如果你不需要千兆赫采样率、多个输入通道和一个华丽的名字，或者如果你需要自己支付这个设备的费用，那么你可能需要考虑一些低端的设备。
- en: In the $100 to $1,000 range, a wide variety of decent logic analyzers that are
    USB-based and connect to a PC are available; see “For More Information” for details.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在100美元到1000美元的范围内，有许多USB接口、可以连接到PC的不错的逻辑分析仪；详情请见“更多信息”。
- en: 'Ultimately, you’ll want to ask the following questions when looking for a logic
    analyzer:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，当你寻找逻辑分析仪时，你会想问以下问题：
- en: Does it support the protocols you’re interested in (I²C for the time being,
    but you’ll probably use it to debug SPI, CAN, and other bus protocols, too)?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是否支持你感兴趣的协议（暂时是I²C，但你可能还会用它来调试SPI、CAN和其他总线协议）？
- en: Is the software high quality, and does it run on your development machine?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件是否高质量，并且它是否能在你的开发机器上运行？
- en: Is it well documented?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的文档是否完备？
- en: Is there ongoing support (for example, software updates)?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有持续的支持（例如，软件更新）？
- en: I own a Saleae Logic 8 and can vouch for the fact that it is a high-quality
    unit with great support. That is not to say that these other units I’ve listed
    aren’t also excellent (I don’t know, I’ve never used them) or that some other
    unit not listed here would also work out well for you. However, the Saleae units
    have been well-received by the engineering community. Perhaps the only complaint
    is that they are a bit pricey ($400 to $1,000), but that’s the price associated
    with high-quality hardware and software.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我拥有一台Saleae Logic 8，并且可以证明它是一款高质量的设备，且有很好的支持。并不是说我列出的其他设备也不好（我不知道，我从未使用过它们），或者某些未列出的设备也能为你带来良好的体验。然而，Saleae的设备在工程界得到了很好的评价。或许唯一的抱怨是它们有点贵（400美元到1000美元），但这就是高质量硬件和软件的价格。
- en: 'The remainder of this chapter will concentrate on three of the devices mentioned
    to this point: the I²C Driver, the Bus Pirate, and the Saleae Logic 8.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将集中讨论前面提到的三种设备：I²C驱动器、Bus Pirate和Saleae Logic 8。
- en: 4.3 The I²C Driver
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.3 I²C驱动器
- en: The I²C Driver is a small board with a small-format color LCD display. It has
    three sets of I²C probes coming off the board; I’m not sure why it has more than
    one set, as the connectors all have the same signals and are wired together. It
    has a micro-USB port to connect to a Linux, Mac, or Windows PC.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: I²C驱动器是一个小型板子，带有一个小格式的彩色LCD显示屏。它有三组I²C探针从板子上引出；我不确定为什么有不止一组探针，因为这些连接器都有相同的信号并且是连在一起的。它有一个micro-USB端口，可以连接到Linux、Mac或Windows
    PC。
- en: 'When the unit comes up, it displays any I²C activity on the little LCD display.
    While this is pretty, it’s not all that useful: I²C data transfer may be slow
    compared to other protocols, but it is still much faster than you can see on a
    display in real time.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备启动时，它会在小型LCD显示屏上显示任何I²C活动。虽然这看起来很漂亮，但实际上并不十分有用：I²C的数据传输相较于其他协议可能较慢，但仍然比你在实时显示器上看到的要快得多。
- en: The real functionality lies in the software that runs on the PC at the other
    end of the USB cable. Excamera Labs, the outfit that developed the I²C Driver,
    supplies some Python code to support the I²C Driver. The software is crude and
    bare bones but about what you can expect for $30.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实际功能在于运行在 USB 电缆另一端 PC 上的软件。开发 I²C 驱动程序的 Excamera Labs 提供了一些 Python 代码来支持 I²C
    驱动程序。该软件很简陋，功能基础，但也算是 30 美元能期待的水平。
- en: 'The main Python software provides an interface like a command line (within
    Python). You perform various activities by manually calling Python functions.
    For example, if you want to do a bus scan to see what peripheral devices respond
    on the bus, enter the command `i2c.scan()` after the Python `>` prompt. The `i2c.scan()`
    function call displays something like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 Python 软件提供了类似命令行的接口（在 Python 内）。你可以通过手动调用 Python 函数来执行各种操作。例如，如果你想进行总线扫描，以查看哪些外围设备在总线上响应，可以在
    Python `>` 提示符下输入命令 `i2c.scan()`。调用 `i2c.scan()` 函数后，会显示类似以下内容：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where `--` indicates that a device did not respond at the particular I²C address
    and a hexadecimal numeric value (48 being the only example here that corresponds
    to a responsive device address). In this case, I have a single Adafruit ADS1115
    ADC breakout board configured for address 0x48 installed on the I²C bus.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`--` 表示设备在特定的 I²C 地址没有响应，而十六进制数字值（这里唯一对应响应设备地址的是 48）。在此案例中，我有一个配置为地址 0x48
    的 Adafruit ADS1115 ADC 分离板，安装在 I²C 总线上。
- en: 'The I²C Driver Python software provides many additional commands you can execute
    or call from Python code you write. The call `help(i2cdriver)` displays the Python
    application programming interface (API). Some useful commands you can execute
    directly include the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 驱动程序的 Python 软件提供了许多额外的命令，你可以在自己编写的 Python 代码中执行或调用。调用 `help(i2cdriver)`
    会显示 Python 应用程序编程接口（API）。一些可以直接执行的有用命令包括：
- en: '`setspeed(speed)` Argument is 100 or 400 (corresponding to 100 kHz or 400 kHz,
    respectively)'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setspeed(speed)` 参数为 100 或 400（分别对应 100 kHz 或 400 kHz）'
- en: '`setpullups(bitmask)` Argument is a 6-bit value specifying pullup values for
    the three I²C connectors (2 bits each, for SCL and SDA) on the I²C Driver'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setpullups(bitmask)` 参数是一个 6 位值，指定 I²C 驱动程序上三个 I²C 连接器（每个 SCL 和 SDA 各 2 位）的上拉电阻值。'
- en: '`reset()` Sends a bus reset (general call address)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`reset()` 发送总线重置（通用调用地址）'
- en: '`scan()` Scans the bus and displays addresses that respond'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scan()` 扫描总线并显示响应的地址'
- en: '`monitor(flag)` Turns on monitor mode if `flag` is true (nonzero); turns it
    off if `flag` is false (0)'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`monitor(flag)` 如果 `flag` 为真（非零），则开启监视模式；如果 `flag` 为假（0），则关闭监视模式。'
- en: '`getstatus()` Displays status information'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getstatus()` 显示状态信息'
- en: There are also commands for starting an I²C bus transaction, writing data to
    the bus, reading data from the bus, and sending a stop command. However, those
    are operations you’d normally do within a Python program.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些命令用于启动 I²C 总线事务、向总线写入数据、从总线读取数据以及发送停止命令。然而，这些操作通常是在 Python 程序中进行的。
- en: The I²C Driver software also has a GUI application that brings up the window
    shown in [Figure 4-3](#figure4-3). Click the **Monitor mode** button to activate
    monitor mode on the I²C Driver’s built-in LCD. Click the button again to turn
    monitor mode off. While not in monitor mode, select one of the addresses (if there
    is a device attached at that address) and read or write data to that device using
    the edit boxes at the bottom of the window.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 驱动程序软件还有一个 GUI 应用程序，可以打开 [图 4-3](#figure4-3) 所示的窗口。点击 **监视模式** 按钮以激活 I²C
    驱动程序内置 LCD 的监视模式。再次点击按钮可以关闭监视模式。当不在监视模式时，选择一个地址（如果该地址有设备连接），并使用窗口底部的编辑框读取或写入该设备的数据。
- en: '![](image_fi/502468c04/f04003.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04003.png)'
- en: 'Figure 4-3: I²C Driver GUI display on a Mac'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-3：Mac 上的 I²C 驱动程序 GUI 显示
- en: 'While there is activity on the I²C bus, click the **Capture mode** button to
    redirect I²C to a comma-separated values (*.csv*) file. Here’s a small sample
    of the data from one such file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当 I²C 总线有活动时，点击 **捕获模式** 按钮，将 I²C 数据重定向到逗号分隔值 (*.csv*) 文件中。以下是该文件中数据的一个小样本：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While the I²C Driver was capturing data on the bus, I had a Teensy 3.2 talking
    to an Adafruit ADS1115 breakout board. Sadly, all the numbers this program displays
    are in decimal format, rather than the more useful hexadecimal format. The value
    72[10] is 0x48—the address of the ADS1115.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当 I²C 驱动程序在总线上捕获数据时，我让一块 Teensy 3.2 与 Adafruit ADS1115 分离板进行通信。可惜的是，该程序显示的所有数字都是十进制格式，而不是更有用的十六进制格式。值
    72[10] 是 0x48——即 ADS1115 的地址。
- en: It would be easy enough to write some software to parse each of these lines
    and display the data in a more appropriate fashion. Unfortunately, timing information
    is missing from this display. However, it’s open source software, so feel free
    to go in and modify it if you would like a different output.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一些软件来解析这些行并以更合适的方式显示数据其实很容易。不幸的是，这个显示中缺少了时序信息。然而，它是开源软件，因此如果你希望不同的输出，可以随意进去修改。
- en: Perhaps the most interesting use of the I²C Driver capture mode is for generating
    test result data. You can run some tests with your I²C software for a controller
    or peripheral, capture the output, and then compare the output against known data
    or run the output through a filter program that examines it for correctness. This
    way of generating test results is a useful tool for semi-automating complex test
    procedures.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: I²C Driver捕获模式最有趣的用途之一是生成测试结果数据。你可以使用你的I²C软件对控制器或外设运行一些测试，捕获输出，然后将输出与已知数据进行比较，或者将输出通过过滤程序检查其正确性。这种生成测试结果的方式是半自动化复杂测试过程的有用工具。
- en: Because the I²C Driver also lets you read and write data to an I²C peripheral,
    it’s also useful for checking the operation of a peripheral device you’ve created.
    You can manually write bytes to the device, read the response from the device,
    and verify the results are what you expect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因为I²C Driver还允许你读写I²C外设的数据，所以它也对检查你创建的外设的操作非常有用。你可以手动向设备写入字节，读取设备的响应，并验证结果是否符合预期。
- en: Although the I²C Driver is not the be-all and end-all of I²C debugging tools,
    it’s an interesting tool. Furthermore, it provides a USB interface to the I²C
    bus, which you can program from your PC; see their website for details (link provided
    in “For More Information”). For less than $30, having this device in your toolbox
    is a no-brainer.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管I²C Driver并不是I²C调试工具的终极之选，但它仍然是一个有趣的工具。此外，它提供了一个USB接口到I²C总线，你可以从PC进行编程；详情请参见他们的网站（链接见《更多信息》）。不到$30，将这个设备放入你的工具箱中是一个明智的选择。
- en: 4.4 The Bus Pirate
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.4 Bus Pirate
- en: The Bus Pirate is another open-hardware, less-than-$30 device you can use to
    analyze signals on the I²C bus. Whereas the I²C Driver is basically a USB-to-I²C
    device with a display bolted to it, the Bus Pirate is actually a small microcontroller
    (a PIC) that is programmed to read and write various digital I/O pins. Using bit-banging
    software, it emulates (slowly) the I²C protocol. Because it’s open hardware and
    software, is low cost, and has been around forever, the Bus Pirate has gained
    a tremendous following for people who want low-cost hardware hacking, analyzing,
    or testing capabilities.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Bus Pirate是另一个开源硬件、价格低于$30的设备，你可以用来分析I²C总线上的信号。而I²C Driver基本上是一个USB转I²C设备，附带显示屏，Bus
    Pirate实际上是一个小型微控制器（PIC），被编程用于读取和写入各种数字I/O引脚。通过位编程软件，它慢慢地模拟I²C协议。由于它是开源硬件和软件、成本低且已有很长时间，Bus
    Pirate吸引了大量希望进行低成本硬件黑客、分析或测试的用户。
- en: The Bus Pirate is different from most of the other devices mentioned in this
    chapter because it doesn’t really have any PC-related software. The Bus Pirate
    looks like a serial device (USB-to-serial), so you operate the Bus Pirate using
    a serial terminal emulation program. You enter commands into the terminal and
    the Bus Pirate responds appropriately. In operation, this is similar to the command-line
    mode of the I²C Driver.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Bus Pirate与本章提到的大多数设备不同，因为它实际上并没有任何与PC相关的软件。Bus Pirate看起来像一个串行设备（USB转串行），所以你需要使用串行终端仿真程序来操作Bus
    Pirate。你在终端中输入命令，Bus Pirate会做出相应的反馈。在操作中，这与I²C驱动程序的命令行模式类似。
- en: Most of the Bus Pirate commands are single character inputs. The most important
    command for you to know is the `?` command. This is the help command that displays
    a list of all the commands to the terminal.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Bus Pirate命令是单字符输入。你需要知道的最重要的命令是`?`命令。这是帮助命令，它会在终端上显示所有命令的列表。
- en: By default, the Bus Pirate comes up in a special *Hi-Z* (high-impedance) mode,
    which basically turns all the outputs off to prevent any damage to the Bus Pirate
    or to any device connected to the Bus Pirate. You switch to a new mode by pressing
    **M**. This will present you with a menu to select the new operation mode (such
    as I²C mode). If you select I²C, it will ask you to input a bus frequency.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bus Pirate以特殊的*Hi-Z*（高阻抗）模式启动，这基本上关闭了所有输出，以防止对Bus Pirate或连接到Bus Pirate的任何设备造成损坏。你可以通过按**M**切换到新的模式。这将显示一个菜单，供你选择新的操作模式（例如I²C模式）。如果你选择I²C，它会要求你输入总线频率。
- en: Once the Bus Pirate is running in I²C mode, you can write data to the bus, read
    data from the bus, or monitor data on the bus (similar to the I²C Driver). See
    the Bus Pirate documentation for more details (link provided in “For More Information”).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Bus Pirate 进入 I²C 模式，你可以向总线写入数据、从总线读取数据，或监控总线上的数据（类似于 I²C 驱动程序）。更多详细信息请参见
    Bus Pirate 文档（链接见“更多信息”部分）。
- en: 4.5 The Saleae Logic Analyzers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.5 Saleae 逻辑分析仪
- en: Although the I²C Driver and Bus Pirate are useful devices for certain types
    of I²C monitoring, testing, and debugging, they aren’t true logic analyzers. They
    aren’t great at monitoring and displaying I²C information in near real time. Furthermore,
    although both devices can monitor—and to a certain extent, capture—data on the
    bus, they’re nearly useless for timing analysis like, for example, verifying each
    bit happens within a certain amount of time. This is where a real logic analyzer
    excels.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 I²C 驱动程序和 Bus Pirate 是用于某些类型 I²C 监控、测试和调试的有用设备，但它们并不是真正的逻辑分析仪。它们在实时监控和显示
    I²C 信息方面并不出色。此外，尽管这两种设备可以监控—并在某种程度上捕捉—总线上的数据，但它们几乎在时间分析方面毫无用处，例如，验证每个比特是否在特定时间内发生。这正是一个真正的逻辑分析仪的强项。
- en: The Saleae Logic 8, Logic 8 Pro, and Logic 16 Pro devices are fully featured
    logic analyzers with 8 or 16 channels. The Logic 8 unit operates at 100 million
    samples per second (Msps), and the Logic 8 Pro or Logic 16 Pro units operate at
    500 Msps. Generally, you want your logic analyzer to run five to ten times faster
    than the fastest signal you need to capture, so the Logic 8 (100 Msps) is easily
    good for signals in the 10 MHz to 20 MHz range. This certainly covers all I²C
    frequencies.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Saleae Logic 8、Logic 8 Pro 和 Logic 16 Pro 设备是功能齐全的逻辑分析仪，提供 8 或 16 个通道。Logic
    8 设备的采样率为每秒 1 亿次采样（Msps），而 Logic 8 Pro 或 Logic 16 Pro 的采样率为 500 Msps。通常，你希望逻辑分析仪的速度是你需要捕捉的最快信号的
    5 到 10 倍，因此 Logic 8（100 Msps）足以处理 10 MHz 到 20 MHz 范围内的信号。这肯定覆盖了所有 I²C 的频率。
- en: The devices themselves provide 8 or 16 probes to connect to your circuitry.
    For standard I²C measurements, you really need to connect only two of these probes,
    plus a ground wire. Having additional channels is useful because they let you
    check the status of other pins in your system during an I²C transmission. For
    example, if you’re sending data to a GPIO expander, you can connect some of the
    probes to input or output pins to see their levels change before, during, and
    after the I²C transmissions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 设备本身提供 8 或 16 个探针，供你连接到电路。对于标准的 I²C 测量，你实际上只需要连接其中两个探针，以及一根接地线。额外的通道很有用，因为它们可以让你在
    I²C 传输过程中检查系统中其他引脚的状态。例如，如果你正在向 GPIO 扩展器发送数据，可以将一些探针连接到输入或输出引脚，以查看在 I²C 传输前、传输中和传输后的电平变化。
- en: The Logic software that runs on a PC looks something like that appearing in
    [Figure 4-4](#figure4-4) (macOS version). The left side of the screen defines
    the signals; you can specify the names appearing here. The middle section of the
    screen displays the timing and protocol information, and the right side of the
    screen lets you choose the protocols to decode.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PC 上运行的 Logic 软件看起来像 [图 4-4](#figure4-4) 中所示（macOS 版本）。屏幕的左侧定义了信号，你可以指定这里显示的名称。屏幕的中间部分显示时序和协议信息，右侧部分让你选择要解码的协议。
- en: '![](image_fi/502468c04/f04004.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04004.png)'
- en: 'Figure 4-4: Logic software running on macOS'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-4：在 macOS 上运行的 Logic 软件
- en: Clicking the **Start** button on the left side of the window initiates a capture
    operation. You can specify how much data to capture; I have my personal copy set
    up to capture data for two seconds. [Figure 4-5](#figure4-5) shows a typical data
    capture. As usual for this chapter, the logic analyzer is capturing the communication
    between a Teensy 3.2 and an ADS1115.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 点击窗口左侧的 **Start** 按钮开始捕获操作。你可以指定捕获的数据量；我个人的设置是捕获两秒钟的数据。[图 4-5](#figure4-5) 显示了典型的数据捕获情况。像本章中的其他内容一样，逻辑分析仪正在捕获
    Teensy 3.2 和 ADS1115 之间的通信。
- en: '![](image_fi/502468c04/f04005.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04005.png)'
- en: 'Figure 4-5: Logic software timing display'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-5：Logic 软件时序显示
- en: Logic has been programmed to analyze an I²C data stream. As such, it displays
    the address byte and R/W command and each data byte passing on the bus. It’s not
    clear in this black-and-white image, but the display also marks the start and
    stop conditions with green and red dots on the data waveforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Logic 已编程以分析 I²C 数据流。因此，它显示总线上的地址字节、读写命令以及每个数据字节。尽管在这幅黑白图像中不清楚，但显示屏也会用绿色和红色的点标记数据波形的开始和停止条件。
- en: I’ve shrunk this timing diagram so you can see a complete I²C transmission.
    However, Logic allows you to expand or shrink the timing diagram so you can adjust
    the level of detail. [Figure 4-6](#figure4-6) shows the expansion of the first
    (address) byte transmission from [Figure 4-5](#figure4-5).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这个时序图缩小了，这样你就可以看到完整的 I²C 传输。不过，Logic 允许你扩大或缩小时序图，以便你调整详细程度。[图 4-6](#figure4-6)展示了从[图
    4-5](#figure4-5)中扩展的第一个（地址）字节传输。
- en: '![](image_fi/502468c04/f04006.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04006.png)'
- en: 'Figure 4-6: A timing expansion in Logic'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-6：Logic 中的时序扩展
- en: Another nice feature in Logic is that you can move the cursor over a section
    of one of the timing signals and get timing information. [Figure 4-7](#figure4-7)
    shows what happened when I moved the cursor over one of the SCL clock pulses.
    Logic responded by displaying the width of the pulse and the frequency (5.12 µsec
    and 96.9 kHz). I made considerable use of this feature when working on the software-based
    I²C controller and peripheral implementations in the previous chapter. This is
    how I fine-tuned the delays to get the software I²C emulation running close to
    100 kHz.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Logic 中的另一个不错的功能是，你可以将光标移动到某个时序信号的某一部分，并获得时序信息。[图 4-7](#figure4-7)显示了当我将光标移动到
    SCL 时钟脉冲上时发生的情况。Logic 通过显示脉冲宽度和频率（5.12 µsec 和 96.9 kHz）做出了响应。在前一章编写基于软件的 I²C 控制器和外设实现时，我大量使用了这个功能。这就是我如何微调延迟，以使软件
    I²C 仿真运行接近 100 kHz。
- en: '![](image_fi/502468c04/f04007.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c04/f04007.png)'
- en: 'Figure 4-7: Extracting timing information from Logic'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：从 Logic 中提取时序信息
- en: Logic also lets you set cursors within the timing diagrams so you can measure
    the time between any two arbitrary points, not just the width of some signal pulse.
    This comes in handy, for example, when measuring the time of a whole transmission
    rather than a single bit of a transmission.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Logic 还允许你在时序图中设置光标，从而可以测量任意两点之间的时间，而不仅仅是某个信号脉冲的宽度。例如，当测量整个传输的时间，而不是单个传输位的时间时，这个功能非常有用。
- en: At just under $400, the least expensive Saleae unit isn’t super cheap, but having
    one of these devices is a sound investment if you’re going to be debugging lots
    of I²C code and hardware.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 售价不到 400 美元，最便宜的 Saleae 单元并不是超级便宜，但如果你要调试大量 I²C 代码和硬件，拥有这样一个设备是一个明智的投资。
- en: 4.6 A Final Comment on I²C Monitors and Logic Analyzers
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.6 关于 I²C 监视器和逻辑分析仪的最终评论
- en: Because this is *The Book of I*^(*2*)*C*, the discussion of the analyzers in
    this chapter has centered on their use for debugging and analyzing I²C signals.
    In fact, most of the devices in this chapter support several other protocols as
    well, including SPI, CANBUS, MIDI, DMX, 1-Wire, and just about any typical protocol
    you can imagine. (The I²C Driver is the exception to this; it supports only I²C
    monitoring.) Therefore, the purchase of a device such as the Saleae Logic 8 is
    actually a good investment because you can use it for testing and debugging all
    kinds of hardware, not just I²C signals.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是*《I²C 之书》*^(*2*)*，本章对分析仪的讨论集中在其用于调试和分析 I²C 信号上。事实上，本章中的大多数设备还支持几种其他协议，包括
    SPI、CANBUS、MIDI、DMX、1-Wire 以及几乎所有你能想象到的典型协议。（I²C 驱动程序是这个例外，它仅支持 I²C 监控。）因此，购买像
    Saleae Logic 8 这样的设备实际上是一个不错的投资，因为你不仅可以用它来测试和调试 I²C 信号，还可以用于测试和调试各种硬件。
- en: 4.7 Chapter Summary
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.7 本章总结
- en: Writing software to work with I²C devices invariably requires testing and debugging
    said software. Such work is much easier accomplished using hardware testing and
    debugging tools. This chapter discussed several types of devices you can use for
    this purpose, including oscilloscopes, logic analyzers, and bus sniffers. It highlighted
    several commercially available options, including the I²C Driver, the Bus Pirate,
    and the Salae Logic Analyer. It also mentioned various combination oscilloscope
    and logic analyzer options and concluded by noting that these devices are useful
    for debugging other protocols, not just I²C devices, which makes them more universally
    applicable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与 I²C 设备配合使用的软件不可避免地需要测试和调试这些软件。这种工作使用硬件测试和调试工具会更容易完成。本章讨论了几种可以用于此目的的设备，包括示波器、逻辑分析仪和总线嗅探器。还介绍了几种市面上可用的选项，包括
    I²C 驱动程序、总线海盗和 Salae Logic 分析仪。并提到了各种组合示波器和逻辑分析仪选项，最后指出，这些设备不仅对调试 I²C 设备有用，还适用于其他协议，这使得它们具有更广泛的适用性。
