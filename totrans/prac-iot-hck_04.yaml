- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: A Security Testing Methodology
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试方法论
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Where do you start when you want to test an IoT system for vulnerabilities?
    If the attack surface is small enough, as in the case of a single web portal that
    controls a surveillance camera, planning a security test might be simple. Even
    then, however, if the testing team doesn’t follow a set methodology, they might
    miss critical points of the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要测试物联网系统的漏洞时，应该从哪里开始呢？如果攻击面足够小，比如只有一个控制监控摄像头的单一网页门户，那么规划安全测试可能会很简单。然而，即便如此，如果测试团队没有遵循一定的方法论，他们也可能会忽略应用中的关键点。
- en: This chapter provides you with a rigorous list of steps to follow when penetration
    testing. To do so, we’ll divide the IoT attack surface into conceptual layers,
    as shown in [Figure 3-1](#figure3-1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了在渗透测试时应遵循的一系列严格步骤。为此，我们将物联网攻击面分为多个概念层次，如[图3-1](#figure3-1)所示。
- en: '![f03001](Images/f03001.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![f03001](Images/f03001.png)'
- en: 'Figure 3-1: The conceptual layers to test in a security assessment'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-1：安全评估中需要测试的概念层
- en: You’ll need a robust assessment methodology like this one when testing IoT systems
    because they often consist of many interacting components. Let’s use the case
    of a pacemaker connected to a home monitoring device. The monitoring device can
    send patient data to a cloud portal through a 4G connection so the clinicians
    can check for heart-rate anomalies. Clinicians can also configure the pacemaker
    using a programmer that relies on a near-field communication (NFC) wand and proprietary
    wireless protocol. This system has many parts, each with a potentially substantial
    attack surface, which a blind, unorganized security assessment would most likely
    fail to map successfully. To make the assessment successful, we’ll walk through
    passive reconnaissance, and then discuss methods of testing the physical, network,
    web application, host, mobile application, and cloud layers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试物联网系统时，你需要一个强大的评估方法论，因为它们通常由许多相互作用的组件组成。我们以一个连接到家庭监控设备的心脏起搏器为例。该监控设备可以通过4G连接将患者数据发送到云门户，以便临床医生检查心率异常。临床医生还可以使用编程器配置起搏器，编程器依赖于近场通信（NFC）设备和专有无线协议。这个系统有很多部分，每个部分都可能具有潜在的巨大攻击面，一个盲目、无序的安全评估很可能无法成功绘制出这些攻击面。为了使评估成功，我们将介绍被动侦察，并随后讨论测试物理层、网络层、Web应用层、主机层、移动应用层和云层的方法。
- en: Passive Reconnaissance
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 被动侦察
- en: '*Passive reconnaissance,* also commonly referred to as *open source intelligence
    (OSINT)*, is the process of collecting data about targets without communicating
    directly with the systems. It’s one of the initial steps for any assessment; you
    should always perform it to get the lay of the land. For example, you might download
    and examine device manuals and chipset datasheets, browse online forums and social
    media, or interview users and technical personnel for information. You could also
    gather internal hostnames from TLS certificates released as a result of *Certificate
    Transparency*, a standard that requires Certificate Authorities to publish the
    certificates they issue in a public log record.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*被动侦察*，也常被称为*开放源代码情报（OSINT）*，是指在不与系统直接通信的情况下收集目标数据的过程。它是任何评估的初步步骤之一；你应该始终执行这一步骤，以便了解大致情况。例如，你可能会下载并检查设备手册和芯片数据手册，浏览在线论坛和社交媒体，或采访用户和技术人员以获取信息。你还可以从由于*证书透明性*标准发布的TLS证书中收集内部主机名，证书透明性要求证书授权机构将其颁发的证书发布在公共日志记录中。'
- en: Manuals and Documents
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 手册和文档
- en: 'System manuals can provide a trove of information about the inner workings
    of devices. You can usually find them on the device vendor’s official website.
    If that fails, try advanced Google searches for PDF documents containing the device
    name: for example, by searching for the device and adding “inurl:pdf” in the query.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 系统手册可以提供关于设备内部工作原理的大量信息。你通常可以在设备供应商的官方网站上找到这些手册。如果这失败了，可以尝试通过Google的高级搜索查找包含设备名称的PDF文档，例如，在查询中添加“inurl:pdf”来查找相关文件。
- en: It’s surprising how much important information you can find in manuals. Our
    experience shows they can reveal default usernames and passwords that often still
    remain in production environments, detailed specifications of the system and its
    components, network and architecture diagrams, and troubleshooting sections that
    help identify weak spots.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，你可以在手册中找到如此多的重要信息。我们的经验表明，它们可以揭示默认的用户名和密码，这些信息通常仍然存在于生产环境中，系统及其组件的详细规格，网络和架构图，以及有助于识别薄弱环节的故障排除部分。
- en: If you’ve identified certain chipsets installed on the hardware, it’s also worthwhile
    to look for the relevant *datasheets* (manuals for electronic components), because
    they might lay out the chipset pins used for debugging (such as the JTAG debug
    interfaces discussed in Chapter 7).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经确定了硬件上安装的某些芯片组，查找相关的*数据手册*（电子元件的手册）也是值得的，因为它们可能会列出用于调试的芯片组引脚（例如第7章中讨论的JTAG调试接口）。
- en: Another useful resource, for devices that use radio communication, is the FCC
    ID online database at [https://fccid.io/](https://fccid.io/). An *FCC ID* is a
    unique identifier assigned to a device registered with the United States Federal
    Communications Commission. All wireless emitting devices sold in the United States
    must have an FCC ID. By searching for a specific device’s FCC ID, you can find
    details on the wireless operating frequency (such as its strength), internal photos
    of the device, user manuals, and more. The FCC ID is usually engraved on the case
    of the electronic component or device ([Figure 3-2](#figure3-2)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的资源是针对使用无线电通信的设备，FCC ID在线数据库[https://fccid.io/](https://fccid.io/)。*FCC
    ID*是分配给在美国联邦通信委员会注册的设备的唯一标识符。所有在美国销售的无线发射设备必须拥有FCC ID。通过搜索特定设备的FCC ID，你可以找到有关无线操作频率（例如其强度）、设备内部照片、用户手册等信息。FCC
    ID通常会刻印在电子组件或设备的外壳上（[图3-2](#figure3-2)）。
- en: '![f03002](Images/f03002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f03002](Images/f03002.png)'
- en: 'Figure 3-2: The FCC ID shown on the RFM95C chip of the CatWAN USB stick, which
    we’ll use in Chapter 13 for LoRa hacking'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-2：显示在CatWAN USB加密狗RFM95C芯片上的FCC ID，我们将在第13章中使用它进行LoRa黑客攻击。
- en: Patents
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 专利
- en: Patents can provide information about the inner workings of certain devices.
    Try searching for a vendor name at [https://patents.google.com/](https://patents.google.com/)
    and see what comes up. For example, the keywords “medtronic bluetooth” should
    pull up a patent for a communication protocol between implantable medical devices
    (IMDs) published in 2004\.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 专利可以提供关于某些设备内部工作原理的信息。尝试在[https://patents.google.com/](https://patents.google.com/)搜索供应商名称，看看会出现什么。例如，使用“medtronic
    bluetooth”关键词应该会找到一项2004年发布的关于可植入医疗设备（IMDs）之间通信协议的专利。
- en: The patents will almost always contain flow diagrams that could help you when
    assessing the communication channel between the device and other systems. In [Figure
    3-3](#figure3-3), a simple flow diagram for the same IMD shows a critical attack
    vector.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 专利几乎总是包含流程图，这些图可以帮助你评估设备与其他系统之间的通信通道。在[图3-3](#figure3-3)中，针对同一IMD的一个简单流程图展示了一个关键的攻击路径。
- en: Notice that arrows enter and leave the IMD column. The remote system’s “Patient
    action & advise” action can initiate a connection to the device. When you follow
    the chain of arrows, notice that the action can also update the device’s programming
    to change settings that could harm the patient. For this reason, the remote system
    creates risks of remote compromise, either through an insecure mobile app or the
    actual remote system (usually implemented on the cloud).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，箭头进入和离开IMD列。远程系统的“患者操作与建议”动作可以启动与设备的连接。当你沿着箭头链条跟踪时，会注意到该操作也可以更新设备的编程，以更改可能会危及患者的设置。因此，远程系统带来了远程入侵的风险，无论是通过不安全的移动应用程序还是实际的远程系统（通常在云端实现）。
- en: '![f03003](Images/f03003.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f03003](Images/f03003.png)'
- en: 'Figure 3-3: The flow diagram from the Medtronic patent shows that bidirectional
    communication can occur between the device and a remote system through a mobile
    phone. This highlights an important attack vector.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-3：来自Medtronic专利的流程图显示，设备和远程系统之间可以通过手机进行双向通信。这突出了一个重要的攻击路径。
- en: User Knowledge
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户知识
- en: It’s amazing how much public information you can find on social media, online
    forums, and chat rooms. You can even use Amazon and eBay reviews as a knowledge
    source. Look for users complaining about certain device functions; buggy behavior
    can sometimes indicate an underlying vulnerability. For example, you might find
    a user complaining about the device crashing after triggering a set of conditions.
    This is a good lead to investigate, because it can point to a logic bug or a memory
    corruption vulnerability resulting from specific input to the device. In addition,
    many users post detailed product reviews with specifications and disassembly photos.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，您可以在社交媒体、在线论坛和聊天室中找到如此多的公开信息。您甚至可以利用亚马逊和 eBay 的评论作为知识来源。留意那些抱怨某个设备功能的用户；出现错误的行为有时可能表明潜在的漏洞。例如，您可能会发现有用户抱怨设备在触发一组条件后崩溃。这是一个值得调查的线索，因为它可能指向逻辑错误或由于特定输入导致的内存损坏漏洞。此外，许多用户会发布详细的产品评论，包括规格和拆解照片。
- en: Also, check profiles or posts on LinkedIn and Twitter. Engineers and IT personnel
    working for the IoT system’s manufacturer might expose juicy tidbits of technical
    information. For example, if the person posts that they have a strong background
    on a specific CPU architecture, it’s very likely that many of the manufacturer’s
    devices are built using that architecture. If another employee rants about (or
    praises, although this happens less often) a specific framework, there’s a considerable
    chance the company uses that framework to develop software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，检查 LinkedIn 和 Twitter 上的个人资料或帖子。为物联网系统制造商工作的工程师和 IT 人员可能会泄露一些技术信息的有趣片段。例如，如果某人发布说他们在某个特定的
    CPU 架构方面有丰富的背景经验，那么该制造商的许多设备很可能都使用这种架构。如果另一个员工对某个特定框架进行抱怨（或赞扬，尽管这种情况较少发生），那么公司使用该框架开发软件的可能性也很大。
- en: In general, each IoT industry will have its own set of experts that you can
    consult for useful information. For instance, if you were assessing a power plant,
    asking the operators or technicians about their workflows could prove valuable
    for determining potential attack vectors. In the medical world, nurses are usually
    the sysadmins and main operators of IoT systems. Hence, they typically have ample
    knowledge about the device’s ins and outs, and you should consult with them if
    possible.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，每个物联网行业都会有一套专家，您可以向他们咨询有用的信息。例如，如果您正在评估一个电厂，询问操作员或技术人员他们的工作流程可能对确定潜在的攻击向量非常有价值。在医疗领域，护士通常是物联网系统的系统管理员和主要操作员。因此，他们通常对设备的内外情况有着丰富的了解，如果可能的话，您应该咨询他们。
- en: The Physical or Hardware Layer
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理层或硬件层
- en: One of the most important attack vectors in an IoT device is the hardware. If
    attackers can get ahold of a system’s hardware components, they’re frequently
    able to gain elevated privileges, because the system almost always implicitly
    trusts anyone who has physical access. In other words, if a dedicated adversary
    has physical access to your systems, you can pretty much consider the game over.
    Assume that the most motivated threat actors, such as nation state–funded ones
    with virtually infinite time and resources, will have a physical copy of the device
    available to them. Even for special-purpose systems, such as large ultrasound
    machines, adversaries can get the hardware from online marketplaces, companies
    that dispose of devices insecurely, or even theft. They don’t even need the exact
    version of the device. Often, vulnerabilities span many generations of a system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备中最重要的攻击向量之一就是硬件。如果攻击者能够获得系统的硬件组件，他们通常能够获得提升的权限，因为系统几乎总是会隐性地信任任何拥有物理访问权限的人。换句话说，如果一个专门的对手有物理访问您系统的权限，那么几乎可以认为游戏已经结束。假设最有动机的威胁行为者，比如由国家资助、拥有几乎无限时间和资源的对手，会有设备的物理副本可用。即使是专用系统，例如大型超声波机器，攻击者也可以通过在线市场、那些不安全处置设备的公司，甚至通过盗窃来获得硬件。他们甚至不需要设备的确切版本。通常，漏洞跨越了系统的多个代际。
- en: An assessment of the hardware layer should include testing for peripheral interfaces,
    the boot environment, physical locks, tamper protection, firmware, debug ports,
    and physical robustness.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件层的评估应包括对外设接口、启动环境、物理锁、篡改保护、固件、调试端口和物理鲁棒性的测试。
- en: Peripheral Interfaces
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外设接口
- en: '*Peripheral interfaces* are physical communication ports that allow you to
    connect external devices, such as keyboards, hard disks, and network cards. Check
    whether any active USB ports or PC card slots are enabled and whether they’re
    bootable. We’ve gained administrative access to a large variety of x86 systems
    by booting our own operating system on the device, mounting the unencrypted filesystem,
    extracting crackable hashes or passwords, and installing our own software on the
    filesystem to override technical security controls. You could also extract hard
    disks and read from or write to them even without access to bootable USB ports,
    although this technique is less convenient. Note that tampering with the hardware
    to extract the disks might damage the components.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*外围接口* 是允许您连接外部设备（如键盘、硬盘和网卡）的物理通信端口。检查是否启用了任何活动的 USB 端口或 PC 卡槽，以及它们是否支持启动。我们通过在设备上启动自己的操作系统，挂载未加密的文件系统，提取可破解的哈希值或密码，并在文件系统上安装自己的软件以覆盖技术安全控制，从而获得了对多种
    x86 系统的管理访问权限。您还可以提取硬盘并读取或写入它们，即使没有访问可启动的 USB 端口，尽管这种技术不太方便。请注意，篡改硬件以提取硬盘可能会损坏组件。'
- en: 'USB ports can be attack vectors for another reason: some, mostly Windows-based
    devices have a *kiosk mode*, which restricts the user interface. Consider the
    ATM machine you use to withdraw cash; even though in the backend it might run
    on the Windows XP embedded operating system, the user sees only a restricted graphical
    interface with a specific set of options. Imagine what you could do if you could
    attach a USB keyboard to an exposed port on the device. Using specific key combinations,
    such as Ctrl-Alt-Delete or the Windows key, you might be able to escape the kiosk
    mode and gain direct access to the rest of the system.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: USB 端口可能会成为攻击向量的另一个原因：一些设备，特别是基于 Windows 的设备，具有 *亭台模式*，该模式限制了用户界面。想象一下您用来提取现金的
    ATM 机；即使在后台它可能运行的是 Windows XP 嵌入式操作系统，用户看到的也只是一个有限的图形界面，提供一组特定选项。试想，如果您能将 USB
    键盘连接到设备的暴露端口上，您能做些什么？使用特定的键盘组合，例如 Ctrl-Alt-Delete 或 Windows 键，您可能能够逃脱亭台模式，直接访问系统的其余部分。
- en: Boot Environment
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动环境
- en: For systems using a conventional BIOS (typically x86 and x64 platforms), check
    whether the BIOS and boot loader are password-protected and what the preferred
    boot order is. If the system boots removable media first, you can boot your own
    operating system without having to make any changes to the BIOS settings. Also,
    check whether the system enables and prioritizes *Preboot Execution Environment
    (PXE)*, a specification that allows clients to boot through the network using
    a combination of DHCP and TFTP. This leaves room for attackers to set up rogue
    network boot servers. Even if the boot sequence is securely configured and all
    settings are password-protected, you can normally still reset the BIOS to its
    default, clean, and unprotected settings (such as by temporarily removing the
    BIOS battery). If the system has Unified Extensible Firmware Interface (UEFI)
    Secure Boot, assess its implementation as well. *UEFI Secure Boot* is a security
    standard that validates that the boot software hasn’t been tampered with (by rootkits,
    for example). It does so by checking the signature of the UEFI firmware drivers
    and the operating system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用传统 BIOS 的系统（通常是 x86 和 x64 平台），检查 BIOS 和启动加载程序是否受密码保护，以及首选的启动顺序是什么。如果系统首先从可移动介质启动，您可以无需更改
    BIOS 设置即可启动自己的操作系统。此外，检查系统是否启用并优先考虑 *预启动执行环境（PXE）*，这是一种允许客户端通过网络启动的规范，利用 DHCP
    和 TFTP 的组合。这为攻击者设置恶意网络启动服务器提供了空间。即使启动顺序已经安全配置并且所有设置都受到密码保护，您通常仍然可以通过将 BIOS 电池临时移除，来重置
    BIOS 到默认的、干净且未保护的设置。如果系统具有统一可扩展固件接口（UEFI）安全启动，评估其实施情况。*UEFI 安全启动* 是一种安全标准，用于验证启动软件是否未被篡改（例如，未被
    rootkit 攻击）。它通过检查 UEFI 固件驱动程序和操作系统的签名来实现这一点。
- en: You might also encounter Trusted Execution Environment (TEE) technologies, such
    as TrustZone in Arm platforms or Qualcomm Technologies’ secure boot feature, which
    verify secure boot images.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可能遇到可信执行环境（TEE）技术，例如 Arm 平台中的 TrustZone 或高通技术的安全启动功能，它们验证安全启动镜像。
- en: Locks
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锁定
- en: Check whether the device is protected by some kind of lock, and if it is, how
    easy it is to pick the lock. Also, check whether there’s a universal key for all
    locks or a separate one for every device. In our assessments, we’ve seen cases
    where all devices by the same manufacturer used the same key, rendering the lock
    useless, because anyone in the world could easily have a copy of the key. For
    example, we found that a single key could unlock an entire product line of cabinets
    that gave physical access to a drug infusion pump’s system configuration.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备是否受到某种锁的保护，如果是，检查锁是否容易被打开。同时，检查是否有适用于所有锁的通用钥匙，还是每个设备都有独立的钥匙。在我们的评估中，我们曾见到过同一制造商的所有设备都使用相同的钥匙，这使得锁变得毫无用处，因为世界上任何人都可以轻易获得这把钥匙。例如，我们发现一把钥匙可以打开整个产品线的柜子，进而获得药物输注泵系统配置的物理访问权限。
- en: To assess locks, you’ll need a lockpicking tool set in addition to knowledge
    of the type of target lock in use. For example, a tumbler lock opens differently
    than an electric-powered lock, which might fail to open or close if power is off.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估锁，你需要一个开锁工具集，并且了解所用目标锁的类型。例如， tumbler 锁与电动锁的开启方式不同，如果电源关闭，电动锁可能无法打开或关闭。
- en: Tamper Protection and Detection
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 篡改保护与检测
- en: Check whether the device is tamper-resistant and tamper-evident. For example,
    one way to make a device tamper-evident is to use a label with perforated tape
    that permanently displays some kind of message after it’s opened. Other tamper
    protections include effuses, tamper clips, special enclosings sealed with epoxy,
    or physical fuses that can erase sensitive contents if a device is disassembled.
    Tamper detection mechanisms send an alert or create a log file on the device upon
    sensing an attempt to compromise the device’s integrity. It’s especially important
    to check for tamper protection and detection when conducting a penetration test
    of IoT systems within an enterprise. Many threats come from the inside, caused
    by employees, contractors, or even former employees, so having tamper protection
    can help identify any purposefully altered device. An attacker would have trouble
    disassembling a tamper-resistant device.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备是否具有防篡改和篡改检测功能。例如，一种使设备篡改可见的方法是使用带有穿孔胶带的标签，打开后永久显示某种信息。其他防篡改保护措施包括熔丝、防篡改夹、封胶的特殊外壳或物理熔丝，当设备被拆解时可以擦除敏感内容。篡改检测机制会在检测到试图破坏设备完整性的行为时发出警报或创建日志文件。在对企业内部的物联网系统进行渗透测试时，检查篡改保护和检测尤其重要。许多威胁来自内部，由员工、承包商甚至前员工造成，因此，拥有篡改保护可以帮助识别任何故意被篡改的设备。攻击者将很难拆解防篡改设备。
- en: Firmware
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固件
- en: We’ll cover firmware security in detail in Chapter 9, so we won’t expand on
    it here. But keep in mind that accessing firmware without permission can have
    legal consequences. This matters if you plan to publish security research that
    involves accessing the firmware or reverse engineering the executables found in
    it. Refer to “IoT Hacking Laws” on page 12 for information about navigating this
    legal environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第9章详细讨论固件安全，因此这里不再展开。但请记住，未经许可访问固件可能会带来法律后果。如果你计划发布涉及访问固件或逆向工程固件中可执行文件的安全研究，这一点尤为重要。有关如何应对这一法律环境的信息，请参见第12页的“物联网黑客法律”。
- en: Debug Interfaces
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试接口
- en: Check for *debug, services, or test point**interfaces* that the manufacturer
    might have used to simplify development, manufacturing, and debugging. You’ll
    commonly find these interfaces in embedded devices, and you can exploit them to
    gain immediate root access. We wouldn’t have fully understood many of the devices
    we’ve tested without first opening a root shell on the systems by interfacing
    with debug ports, because there was no other way to access and inspect the live
    system. Doing so might first require some familiarity with the inner workings
    of the communication protocols these debug interfaces use, but the end result
    is usually well worth it. The most common types of debug interfaces include UART,
    JTAG, SPI, and I2C. We’ll discuss these interfaces in Chapters 7 and 8\.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 检查制造商可能用于简化开发、制造和调试的*调试、服务或测试点**接口*。你通常可以在嵌入式设备中找到这些接口，并可以利用它们来获得即时的root访问权限。如果没有通过调试端口与系统交互打开root
    shell，我们可能就无法完全理解我们测试过的许多设备，因为没有其他方法可以访问和检查实时系统。这样做可能首先需要对这些调试接口使用的通信协议的内部工作有所了解，但最终的结果通常是值得的。最常见的调试接口类型包括UART、JTAG、SPI和I2C。我们将在第7章和第8章中讨论这些接口。
- en: Physical Robustness
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物理稳健性
- en: Test for any limitations posed by the hardware’s physical characteristics. For
    example, assess the system for *battery drain attacks*, which occur when an attacker
    overloads the device and causes it to run out of battery in a short period of
    time, effectively causing a denial of service. Consider how dangerous this is
    when done to an implantable pacemaker on which a patient’s life relies. Another
    type of test in this category is *glitching attacks,* intentional hardware faults
    introduced to undermine security during sensitive operations. In one of our most
    surprising successes, we made the booting process of an embedded system drop a
    root shell when we performed a glitching attack on its printed circuit board (PCB).
    Additionally, try side-channel attacks like *differential power analysis*, which
    tries to measure the power consumption of a cryptographic operation to derive
    secrets.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 测试硬件物理特性可能带来的任何限制。例如，评估系统是否存在*电池耗尽攻击*，即攻击者过度负载设备，导致设备在短时间内耗尽电池，从而有效地造成拒绝服务。考虑到当这种攻击发生在植入式心脏起搏器上时的危险性，患者的生命就依赖于该设备。此类测试的另一种类型是*故障攻击*，即故意引入硬件故障，以破坏在敏感操作中的安全性。在我们最令人惊讶的成功之一中，当我们对嵌入式系统的印刷电路板（PCB）进行故障攻击时，使其启动过程掉入了一个根Shell。此外，还可以尝试侧信道攻击，如*差分功率分析*，通过测量加密操作的功耗来推导出机密信息。
- en: Examining the device’s physical characteristics can also help you make educated
    guesses about the robustness of other security features. For example, a tiny device
    with a long battery life might have weak forms of encryption in its network communication.
    The reason is that the processing power required for stronger encryption would
    drain the battery faster and the battery has a limited capacity due to the device’s
    size.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备的物理特性也可以帮助你对其他安全特性的强度做出合理的猜测。例如，一个电池寿命长的小型设备可能在其网络通信中使用较弱的加密形式。原因是，强加密所需的处理能力会更快地消耗电池，而由于设备的体积限制，电池的容量也有限。
- en: The Network Layer
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络层
- en: 'The *network layer*, which includes all components that directly or indirectly
    communicate through standard network communication paths, is usually the largest
    attack vector. So, we’ll break it into smaller parts: reconnaissance, network
    protocol and service attacks, and wireless protocol testing.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*网络层*包括所有直接或间接通过标准网络通信路径进行通信的组件，通常是最大的攻击向量。因此，我们将其拆分为更小的部分：侦察、网络协议与服务攻击、无线协议测试。'
- en: Although many of the other testing activities covered in this chapter involve
    the network, we’ve given those activities their own sections when necessary. For
    example, web application assessment has its own section because of its complexity
    and the sheer amount of testing activities involved.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章涵盖的许多其他测试活动涉及网络，但我们在必要时为这些活动单独划分了章节。例如，web应用评估就有自己的章节，因为它涉及的复杂性和大量的测试活动。
- en: Reconnaissance
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 侦察
- en: We’ve already discussed steps you can take to perform passive reconnaissance
    on IoT devices generally. In this section, we outline active and passive reconnaissance
    for networks specifically, one of the first steps for any network attack. Passive
    reconnaissance might include listening on the network for useful data, whereas
    *active reconnaissance* (reconnaissance that requires interacting with the target)requires
    querying devices directly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了执行物联网设备被动侦察的一些步骤。在本节中，我们具体概述了网络的主动与被动侦察，这是任何网络攻击的第一步。被动侦察可能包括在网络上监听有用数据，而*主动侦察*（需要与目标交互的侦察）则需要直接查询设备。
- en: For a test on a single IoT device, the process is relatively simple, because
    there’s only one IP address to scan. But for a large ecosystem, such as a smart
    home or health care environment with medical devices, network reconnaissance can
    be more complicated. We’ll cover host discovery, service version detection, operating
    system identification, and topology mapping.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对单个物联网设备的测试过程相对简单，因为只有一个IP地址需要扫描。但是，对于一个大型生态系统，如智能家居或带有医疗设备的医疗环境，网络侦察可能会更复杂。我们将涵盖主机发现、服务版本检测、操作系统识别和拓扑映射。
- en: Host Discovery
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机发现
- en: '*Host discovery* is determining which systems are live on the network by probing
    them using a variety of techniques. These techniques include sending Internet
    Control Message Protocol (ICMP) echo-request packets, conducting TCP/UDP scans
    of common ports, listening for broadcast traffic on the network, or conducting
    ARP request scans if the hosts are on the same L2 segment. (L2 refers to the layer
    2 of the OSI model of computer networking. It is the data link layer and is responsible
    for transferring data between nodes on the same network segment across the physical
    layer. Ethernet is a common data link protocol.) For complex IoT systems, such
    as servers managing surveillance cameras that span many different network segments,
    it’s important to not rely on any one particular technique. Rather, leverage a
    diverse set to increase the chances of bypassing firewalls or strict VLAN (Virtual
    Local Area Network) configurations.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*主机发现*是通过使用多种技术探测网络上的哪些系统处于活动状态。这些技术包括发送互联网控制消息协议（ICMP）回显请求数据包，进行常见端口的TCP/UDP扫描，监听网络上的广播流量，或者如果主机位于同一L2段，则进行ARP请求扫描。（L2指的是计算机网络的OSI模型中的第二层，它是数据链路层，负责通过物理层在同一网络段上的节点之间传输数据。以太网是一种常见的数据链路协议。）对于复杂的物联网系统，例如管理跨多个网络段的监控摄像头的服务器，重要的是不要依赖某一种特定的技术。相反，应该利用多种技术组合，以增加绕过防火墙或严格VLAN（虚拟局域网）配置的机会。'
- en: This step might be the most useful in cases where you’re conducting a penetration
    test of IoT systems in which you don’t know the IP addresses of the tested systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进行物联网系统渗透测试时，如果你不知道测试系统的IP地址，这一步可能是最有用的。
- en: Service Version Detection
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务版本检测
- en: After you’ve identified live hosts, determine all the listening services on
    them. Begin with TCP and UDP port-scanning. Then conduct a combination of *banner
    grabbing* (connecting to a network service and reading the initial information
    it sends back as a response) and probing with service fingerprinting tools, such
    as Amap or Nmap’s `-sV` option. Be aware that some services, especially on medical
    devices, are particularly prone to breaking with even simple probing. We’ve seen
    IoT systems crash and reboot simply because we scanned them with Nmap’s version
    detection functionality. This scan sends specially crafted packets to elicit responses
    from certain types of services that otherwise don’t send any information when
    you connect to them. Apparently, those same packets can make some sensitive devices
    unstable because the devices lack robust input sanitization on their network services,
    leading to memory corruption and then crashes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在识别出活动主机后，需要确定它们上面所有的监听服务。从TCP和UDP端口扫描开始。然后，进行*横幅抓取*（连接到网络服务并读取其初始返回信息）和使用服务指纹识别工具进行探测，如Amap或Nmap的`-sV`选项。需要注意的是，一些服务，尤其是医疗设备上的服务，容易在简单的探测下崩溃。我们曾见过物联网系统仅仅因为我们使用Nmap的版本检测功能扫描它们而崩溃并重启。该扫描通过发送特别构造的数据包，以引发某些类型服务的响应，这些服务在你连接时通常不会发送任何信息。显然，这些数据包可能使一些敏感设备不稳定，因为这些设备在其网络服务上缺乏强大的输入清理功能，导致内存损坏和随之而来的崩溃。
- en: Operating System Identification
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 操作系统识别
- en: You’ll need to determine the exact operating system running on each of the tested
    hosts so you can develop exploits for them later. At the very least, identify
    the architecture (for example, x86, x64, or ARM). Ideally, you’d identify the
    operating system’s exact service pack level (for Windows) and kernel version (for
    Linux or Unix-based systems in general).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确定每个测试主机上运行的操作系统，以便稍后为其开发漏洞利用程序。至少要识别架构（例如，x86、x64或ARM）。理想情况下，你还需要识别操作系统的精确服务包级别（对于Windows）和内核版本（对于Linux或Unix系统）。
- en: You can identify an operating systemthrough the network by analyzing the host’s
    responses to specially crafted TCP, UDP, and ICMP packets, a process called *fingerprinting*.
    These responses will vary because of minor differences in the implementation of
    the TCP/IP network stack in different operating systems. For example, certain
    older Windows systems respond to a `FIN` probe against an open port with a `FIN/ACK`
    packet; others respond with an `RST`, and still others don’t respond at all. By
    statistically analyzing such responses, you can create a profile for each operating
    system version, and then use these profiles to identify them in the wild. (For
    more information, visit the Nmap documentation’s “TCIP/IP Fingerprinting Methods
    Supported by Nmap” page.)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过分析主机对特制的TCP、UDP和ICMP数据包的响应，来识别操作系统，这一过程称为*指纹识别*。这些响应会有所不同，因为不同操作系统在TCP/IP网络栈的实现上存在细微差异。例如，某些较旧的Windows系统对开放端口的`FIN`探测响应`FIN/ACK`数据包；其他系统响应`RST`，还有一些根本不响应。通过对这些响应进行统计分析，你可以为每个操作系统版本创建一个配置文件，然后使用这些配置文件在实际环境中进行识别。（欲了解更多信息，请访问Nmap文档中的“TCIP/IP指纹识别方法”页面。）
- en: Service scanning can also help you perform operating system fingerprinting,
    because many services expose system information in their banner announcements.
    Nmap is a great tool for both jobs. But be aware that for some sensitive IoT devices,
    operating system fingerprinting can be intrusive and can cause crashes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 服务扫描还可以帮助你进行操作系统指纹识别，因为许多服务在其横幅公告中公开了系统信息。Nmap是进行这两项工作的优秀工具。但需要注意，对于某些敏感的物联网设备，操作系统指纹识别可能具有侵入性，且可能导致崩溃。
- en: Topology Mapping
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 拓扑映射
- en: '*Topology mapping* models the connections between different systems in a network.
    This step applies when you have to test an entire ecosystem of devices and systems,
    some of which might be connected through routers and firewalls and aren’t necessarily
    on the same L3 segment. (L3 refers to the layer 3 of the OSI model of computer
    networking. It is the network layer and is responsible for packet forwarding and
    routing. Layer 3 comes into play when data is transferred through routers.) Creating
    a network map of the tested assets becomes useful for threat modeling: it helps
    you see how an attack that exploits a chain of vulnerabilities in different hosts
    can lead to a critical asset compromise. [Figure 3-4](#figure3-4) shows a high-level
    topology diagram.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*拓扑映射*模拟了网络中不同系统之间的连接。当你需要测试整个设备和系统生态时，这一步非常适用，其中一些设备可能通过路由器和防火墙连接，而不一定处于同一L3段。（L3指的是OSI计算机网络模型中的第三层，即网络层，负责数据包转发和路由。当数据通过路由器传输时，L3层就会发挥作用。）创建被测试资产的网络图对于威胁建模非常有用：它帮助你理解攻击如何通过利用不同主机中的一连串漏洞，导致关键资产的泄露。[图3-4](#figure3-4)展示了一个高层次的拓扑图。'
- en: '![f03004](Images/f03004.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f03004](Images/f03004.png)'
- en: 'Figure 3-4: A simple topology diagram of a home network that includes a home
    monitoring device for a patient with an IMD'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-4：一个简单的家庭网络拓扑图，包含了一个病人使用IMD的家庭监控设备
- en: This abstract network map shows a patient who has an IMD communicating with
    a home monitoring device. The home device in turn relies on the local Wi-Fi connection
    to send diagnostic data to the cloud where a physician can monitor them periodically
    to detect any anomalies.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个抽象的网络图展示了一个使用IMD的病人与家庭监控设备的通信。家庭设备依赖于本地Wi-Fi连接，将诊断数据发送到云端，医生可以定期监控这些数据，以便检测任何异常情况。
- en: Network Protocol and Service Attacks
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络协议和服务攻击
- en: 'Network protocol and service attacks consist of the following stages: vulnerability
    scanning, network traffic analysis, protocol reverse engineering, and protocol
    or service exploitation. Although you can carry out vulnerability scanning independently
    of the other stages, the rest depend on one another.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 网络协议和服务攻击包括以下几个阶段：漏洞扫描、网络流量分析、协议逆向工程和协议或服务利用。虽然你可以独立进行漏洞扫描，但其他阶段是相互依赖的。
- en: Vulnerability Scanning
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 漏洞扫描
- en: Start by checking databases, such as the National Vulnerability Database (NVD)
    or VulnDB for any known vulnerabilities in the exposed network services. Sometimes
    the system is so out-of-date that an automated vulnerability scanning tool will
    fill pages and pages of reports. You might even be able to exploit certain vulnerabilities
    remotely with no authentication. For due diligence, run at least one scanning
    tool to quickly identify low-hanging fruit. If you find a serious vulnerability,
    such as remote code execution, you might be able to get a shell on the device,
    which will help you with the rest of the assessment. Make sure you always scan
    in a controlled environment and closely monitor it in the event that unforeseen
    downtime occurs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查数据库，如国家漏洞数据库（NVD）或VulnDB，查看暴露的网络服务中是否存在已知的漏洞。有时，系统非常过时，以至于自动化的漏洞扫描工具会生成大量的报告页面。你甚至可能能够在没有认证的情况下远程利用某些漏洞。为尽职调查起见，至少运行一个扫描工具，以快速识别简单的漏洞。如果你发现了严重的漏洞，比如远程代码执行，你可能能够获取设备的shell，这将有助于你进行后续的评估。确保你始终在受控环境中扫描，并密切监控，以防发生无法预见的停机。
- en: Network Traffic Analysis
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络流量分析
- en: Early in the security assessment process, leave a traffic-capturing tool like
    Wireshark or tcpdump running for a period of time to get an idea of the communication
    protocols in use. If the IoT system involves different interacting components,
    such as a surveillance camera with its server or a drug infusion pump with an
    EHR system, you should be able to capture any network traffic traveling between
    them. Known attacks, such as ARP cache poisoning, will usually do the trick on
    the same L3 segment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全评估的早期阶段，运行一个流量捕获工具，如Wireshark或tcpdump，持续一段时间，以了解正在使用的通信协议。如果物联网系统涉及不同的交互组件，例如与其服务器相连的监控摄像头，或与电子健康记录系统（EHR）连接的药物输注泵，你应该能够捕获它们之间传输的任何网络流量。已知攻击，如ARP缓存中毒，通常可以在相同的L3段上奏效。
- en: Ideally, you’ll also run these traffic-capturing tools directly on the devices
    to capture potential interprocess communication (IPC) traffic on the localhost.
    You might have more difficulty running these network tools on embedded devices,
    which won’t usually have these tools already installed, because there’s no straightforward
    process to set them up. But we’ve often succeeded in cross-compiling and installing
    tools like tcpdump on even very restrictive devices, such as pacemaker home monitoring
    systems. We’ll demonstrate this in Chapter 6.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你还应将这些流量捕获工具直接运行在设备上，以捕获本地主机上的潜在进程间通信（IPC）流量。你可能会在嵌入式设备上运行这些网络工具时遇到更多困难，因为这些设备通常没有预装这些工具，而且没有简单的流程可以设置它们。不过，我们通常能够成功地交叉编译并安装像tcpdump这样的工具，即使是在非常受限的设备上，例如起搏器家庭监测系统。我们将在第六章中展示这一点。
- en: After you’ve captured a representative sample of network traffic, you can begin
    analyzing it. Determine whether there are insecure communication channels, like
    cleartext protocols; known vulnerable protocols, like the Universal Plug and Play
    (UPnP) set of networking protocols; and proprietary protocols that need further
    examination or reverse engineering (discussed in the following section).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获了具有代表性的网络流量样本后，你可以开始分析它。确定是否存在不安全的通信通道，例如明文协议；已知的易受攻击协议，例如通用即插即用（UPnP）网络协议集；以及需要进一步检查或逆向工程的专有协议（在下一节中讨论）。
- en: Reverse Engineering Protocols
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逆向工程协议
- en: You should reverse engineer any propriety communication protocols you discover.
    Creating new protocols is always a double-edged sword; some systems do indeed
    require their own protocol stack for their performance, functionality, or even
    security. But designing and implementing a robust protocol is usually a very complicated
    task. Many of the IoT systems we’ve seen leverage TCP or UDP and build on top
    of them, often using some variant of XML, JSON, or other structured language.
    In complex cases, we’ve encountered proprietary wireless protocols about which
    there is little to no public information available, such as those found in implantable
    pacemakers. In these cases, it might be easier to examine the protocols from a
    different angle. For example, try to debug the system services that communicate
    with the driver layer that is responsible for transmitting the radio signal. This
    way, you won’t necessarily have to analyze the proprietary wireless protocol.
    Instead, you might be able to figure out how it works by understanding the layer
    just above it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该对发现的任何专有通信协议进行逆向工程。创建新的协议总是一个双刃剑；确实有一些系统需要它们自己的协议栈来提高性能、功能，甚至安全性。但是设计和实现一个强健的协议通常是一个非常复杂的任务。我们见过的许多物联网系统都利用了TCP或UDP，并在其之上构建，通常使用某种变体的XML、JSON或其他结构化语言。在复杂的情况下，我们遇到了几乎没有公开信息的专有无线协议，类似于可植入起搏器中使用的协议。在这种情况下，从另一个角度来检查协议可能会更容易。例如，尝试调试与负责传输无线信号的驱动层通信的系统服务。这样，你不一定需要分析专有的无线协议。相反，你可能能够通过理解它上面一层的工作原理来弄明白它是如何工作的。
- en: For example, we used this technique when assessing a pacemaker. To do so, we
    leveraged tools, such as strace, that attached to the processes communicating
    with the driver layer. By analyzing logs and *pcap* files, we identified the underlying
    communication channel without having to conduct radio-signal analysis or other
    time-consuming methods, like Fourier transforms, on the proprietary wireless channel.
    *Fourier transforms* decompose signals into their constituent frequencies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在评估起搏器时，我们使用了这种技术。为此，我们利用了诸如strace等工具，这些工具附加到与驱动层通信的进程上。通过分析日志和*pcap*文件，我们在不进行无线信号分析或其他耗时方法（如傅里叶变换）的情况下，识别出了底层通信通道。*傅里叶变换*将信号分解成其组成频率。
- en: Protocol or Service Exploitation
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 协议或服务利用
- en: As the last step in a network attack, you should actually exploit the protocol
    or listening service by writing a proof-of-concept program that abuses it. Crucially,
    you’ll have to determine the exact conditions required for exploitability. Is
    the exploit reproducible 100 percent of the time? Does it require the system to
    be in a certain state first? Does a firewall rule prevent ingress or egress communication?
    Is the system usable after you’ve successfully exploited it? Make sure you come
    up with solid answers to these questions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网络攻击的最后一步，实际上你应该通过编写一个证明概念程序来利用该协议或监听服务。关键是，你需要确定可利用的确切条件。这个漏洞能否每次都能复现？是否需要系统先处于某种状态？防火墙规则是否会阻止数据进出通信？成功利用后系统是否仍可使用？确保你能给出这些问题的确切答案。
- en: Wireless Protocol Testing
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无线协议测试
- en: We’re dedicating an entire section of this chapter to wireless protocol testing
    because of the prevalence of short, medium, and long-range radio communication
    protocols in IoT ecosystems. This layer can coincide with what other literature
    describes as the *Perception Layer*, which includes sensing technologies like
    Radio-Frequency Identification (RFID), Global Positioning System (GPS), and Near-Field
    Communication (NFC).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们专门为无线协议测试分配了本章的一个完整部分，因为在物联网生态系统中，短程、中程和长程无线通信协议的普及。这个层次可以与其他文献中描述的*感知层*相重合，感知层包括像射频识别（RFID）、全球定位系统（GPS）和近场通信（NFC）等传感技术。
- en: The process of analyzing these technologies overlaps with the Network Layer’s
    “Network Traffic Analysis” and the “Reverse Engineering Protocols” activities
    earlier in this chapter. Analyzing and attacking wireless protocols usually requires
    specialized equipment, including certain injection-capable Wi-Fi chipsets, like
    Atheros; Bluetooth dongles, such as the Ubertooth; and Software Defined Radio
    tools, like HackRF or LimeSDR.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 分析这些技术的过程与本章早期的“网络层‘网络流量分析’”和“逆向工程协议”活动有交集。分析和攻击无线协议通常需要专门的设备，包括某些支持注入的Wi-Fi芯片组，如Atheros；蓝牙适配器，如Ubertooth；以及软件定义无线电工具，如HackRF或LimeSDR。
- en: In this stage, you’ll test for certain attacks pertaining to the specific wireless
    protocol in use. For example, if any IoT components use Wi-Fi, test for things
    like association attacks, any use of Wired Equivalent Privacy (WEP) (which would
    be a red flag, because it’s easily crackable), and insecure Wi-Fi Protected Access
    (WPA/WPA2) implementations with weak credentials. WPA3 might soon belong in this
    category. We’ll walk through the most important attacks against these protocols
    in Chapters 10 through 13\. For custom protocols, you’d test for a lack of authentication
    (including a lack of mutual authentication) and a lack of encryption and integrity
    checking, all of which we’ve unfortunately witnessed quite often, even in critical
    infrastructure devices.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，你将测试与特定无线协议相关的攻击。例如，如果任何 IoT 组件使用 Wi-Fi，测试时需要关注关联攻击、任何使用有线等效隐私（WEP）的情况（这是一个红旗，因为它很容易破解）以及使用不安全的
    Wi-Fi 保护访问（WPA/WPA2）实现并带有弱凭据的情况。WPA3 很快可能也会属于这一类别。在第 10 至第 13 章中，我们将介绍这些协议的最重要攻击。对于自定义协议，你需要测试是否存在认证缺失（包括缺乏互相认证）以及缺乏加密和完整性校验，而这些问题我们不幸地经常在关键基础设施设备中看到。
- en: Web Application Assessment
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 应用评估
- en: Web applications, including those used in IoT systems, provide one of the easiest
    network entry points, because they’re often externally accessible and riddled
    with a multitude of vulnerabilities. Assessing web applications is a vast topic,
    and a huge number of resources already exist to guide you through it. So, we’ll
    focus on techniques that specifically apply to web applications encountered in
    IoT devices. The truth is that they don’t differ significantly from almost any
    other web app in existence, but those found on embedded devices often notoriously
    lack secure software development life cycles, leading to obvious and known vulnerabilities.
    Resources for web application testing include *The Web Application Hacker’s Handbook*
    and all OWASP projects, such as its Top 10 list, the Application Security Verification
    Standard (ASVS) project, and the OWASP Testing Guide.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用，包括用于 IoT 系统的应用，是最容易的网络入口点之一，因为它们通常是外部可访问的，并且充满了各种漏洞。评估 Web 应用是一个广泛的话题，已有大量资源可以帮助你完成这项工作。因此，我们将专注于适用于
    IoT 设备中遇到的 Web 应用的技术。事实上，它们与几乎任何其他现有 Web 应用并无显著区别，但嵌入式设备中的 Web 应用通常缺乏安全的软件开发生命周期，导致明显且已知的漏洞。Web
    应用测试的资源包括*《Web 应用黑客手册》*以及所有 OWASP 项目，如其 Top 10 列表、应用安全验证标准（ASVS）项目和 OWASP 测试指南。
- en: Application Mapping
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用映射
- en: To map a web app, begin by exploring the website’s visible, hidden, and default
    content. Identify data entry points and hidden fields, and enumerate all parameters.
    Automated *spidering tools* (data mining software that crawls websites one page
    at a time) can help speed up the process, but you should always browse manually
    as well. You can leverage an intercepting proxy for *passive spidering* (monitoring
    the web content as you manually browse) as well as *active spidering* (actively
    crawling the site using previously discovered URLs and AJAX requests embedded
    in JavaScript as starting points).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要映射一个 Web 应用，首先需要探索网站的可见内容、隐藏内容和默认内容。识别数据输入点和隐藏字段，并列举所有参数。自动化的*蜘蛛工具*（逐页爬取网站的数据挖掘软件）可以帮助加速这个过程，但你也应该始终手动浏览。此外，你可以利用拦截代理进行*被动爬取*（在手动浏览时监控网页内容）以及*主动爬取*（使用先前发现的
    URL 和嵌入 JavaScript 的 AJAX 请求作为起点，主动爬取网站）。
- en: You can discover *hidden content*, or web app endpoints that you can’t usually
    reach via accessible hyperlinks, by trying common file or directory names and
    extensions. Note that this can be very noisy, because all these requests will
    generate a lot of network traffic. For instance, a medium-sized list of common
    directory and filenames for the DirBuster web crawling tool has 220,560 entries.
    This means that if you use it, it will send at least 220,560 HTTP requests to
    the target in the hope of discovering hidden URLs. But don’t overlook this step,
    especially when the assessment takes place in a controlled environment. We’ve
    often found some very interesting, often unauthenticated, web app endpoints in
    IoT devices. For example, we once uncovered a hidden URL on a popular surveillance
    camera model that allowed you to take pictures completely unauthenticated—essentially
    allowing an attacker to remotely monitor whatever the camera was pointing at!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to identify entry points where the web application can receive
    user data. Most vulnerabilities in web applications occur because the application
    receives untrusted input from unauthenticated remote actors. You can use these
    entry points later for fuzzing (an automated way of providing invalid random data
    as input) and to test for injection.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Client-Side Controls
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be able to exploit *client-side controls*, which are anything that
    gets processed by browser, thick, or mobile apps. Client-side controls might include
    hidden fields, cookies, and Java applets. They could also be JavaScript, AJAX,
    ASP.NET ViewState, ActiveX, Flash, or Silverlight objects. For example, we’ve
    seen numerous web applications on embedded devices perform user authentication
    on the client side, which an attacker can always bypass, because the user can
    control everything that happens on the client side. The devices used JavaScript
    or *.jar*, *.swf* , and *.xap* files that attackers could decompile and modify
    to do their bidding.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Look for vulnerabilities in the app’s authentication mechanism. It’s common
    knowledge that a huge number of IoT systems come with weak preconfigured credentials
    and that users often leave these credentials unchanged. You can discover these
    credentials by referencing manuals or other online resources, or simply by guessing.
    When testing IoT systems, we’ve seen credentials ranging from the popular admin/admin,
    to a/a (yes, username: a, password: a), to simply no authentication. To crack
    nondefault passwords, perform dictionary attacks against all authentication endpoints.
    A *dictionary attack* uses automated tools to guess a password by testing the
    most common words from dictionaries or leaked lists of common passwords. Almost
    every security assessment report we’ve written includes “lack of brute-force protection”
    as a finding, because IoT embedded devices often have limited hardware resources
    and might not be able to keep state like a SaaS application would.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Also, test for the insecure transmission of credentials (which commonly includes
    default HTTP access with no redirection to HTTPS); examine any “forgot password”
    and “remember me” functionality; perform *username enumeration* (guessing and
    listing valid users); and look for *fail-open* conditions in which authentication
    fails but, due to some exception, the app provides open access.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，测试凭证的安全传输（通常包括未重定向到 HTTPS 的默认 HTTP 访问）；检查任何“忘记密码”和“记住我”功能；执行*用户名枚举*（猜测并列出有效用户）；并寻找*故障开放*条件，在这种情况下，身份验证失败，但由于某些异常，应用程序提供开放访问。
- en: Session Management
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会话管理
- en: '*Web application sessions* are sequences of HTTP transactions associated with
    a single user. Session management, or the process of keeping track of those HTTP
    transactions, can get complicated, so inspect those processes for flaws. Check
    for the use of predictable tokens, the unsafe transmission of tokens, and disclosure
    of tokens in logs. You might also find insufficient session expirations, session-fixation
    vulnerabilities, and *Cross-Site Request Forgery (CSRF) attacks* in which you
    can manipulate authenticated users to perform unwanted actions.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*Web 应用会话*是与单个用户关联的一系列 HTTP 事务。会话管理，即跟踪这些 HTTP 事务的过程，可能会变得复杂，因此需要检查这些过程中的缺陷。检查是否使用了可预测的令牌、不安全的令牌传输以及在日志中泄露令牌。你还可能会发现会话过期不足、会话固定漏洞，以及*跨站请求伪造（CSRF）攻击*，你可以操纵已认证用户执行不需要的操作。'
- en: Access Controls and Authorization
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问控制与授权
- en: Next, check that the site properly enforces access controls. *User-level segregation*,
    or the practice of giving users with different privileges access to different
    data or functionality, is a common feature of IoT devices. It’s also known as
    *role-based access control* (*RBAC*). This is especially true of complex medical
    devices. For example, in an EHR system, the clinician account will have more privileged
    access than the nurse account, which might have read-only access. Similarly, camera
    systems will have at least an administrator account whose rights include the ability
    to change configuration settings and a less privileged view-only account meant
    to allow device operators to view the camera feed. But the systems need to have
    proper access controls in place for this to work. We’ve seen systems where you
    could request a privileged action from a nonprivileged account just by knowing
    the right URL or HTTP request, also known as *forced browsing*. If the system
    supports multiple accounts, test all privilege boundaries. For example, can a
    guest account access web app functionality that only an admin should use? Can
    a guest account access an admin API governed by another authorization framework?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查网站是否正确执行访问控制。*用户级别隔离*，即根据不同权限为用户提供访问不同数据或功能的权限，是物联网设备的常见特性。它也被称为*基于角色的访问控制*（*RBAC*）。这在复杂的医疗设备中尤其如此。例如，在电子健康记录（EHR）系统中，临床医生账户将拥有比护士账户更高的权限，后者可能只有只读权限。同样，摄像头系统将至少有一个管理员账户，其权限包括更改配置设置的能力，以及一个较低权限的只读账户，旨在允许设备操作员查看摄像头画面。但是，系统需要有适当的访问控制才能使其正常工作。我们曾见过这样的系统，只需知道正确的
    URL 或 HTTP 请求，就可以从非特权账户请求特权操作，这也被称为*强制浏览*。如果系统支持多个账户，请测试所有权限边界。例如，访客账户是否可以访问仅管理员应使用的
    Web 应用功能？访客账户是否可以访问由另一个授权框架管理的管理员 API？
- en: Input Validation
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入验证
- en: Make sure the application is properly validating and sanitizing user input for
    all data entry points. This activity is critical, given that the most popular
    type of web app vulnerability is injection, in which users can submit their own
    code as user input to an application (see OWASP’s Top 10 list of vulnerabilities).
    Testing an application’s input validation can be a very lengthy process. The reason
    is that it includes testing for all types of injection attacks, including SQL
    injection, Cross-Site Scripting (XSS), operating system command injection, and
    XML External Entity (XXE) injection.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确保应用程序在所有数据输入点上都正确验证并清理用户输入。鉴于最常见的 Web 应用漏洞是注入攻击，其中用户可以将自己的代码作为用户输入提交到应用程序（请参阅
    OWASP 的十大漏洞列表），此活动至关重要。测试应用程序的输入验证可能是一个非常漫长的过程。原因是它包括测试所有类型的注入攻击，包括 SQL 注入、跨站脚本攻击（XSS）、操作系统命令注入和
    XML 外部实体（XXE）注入。
- en: Logic Flaws
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑缺陷
- en: Check for vulnerabilities due to logic flaws. This task is especially important
    when the web app has multistage processes in which one action has to follow another.
    If performing these actions out of order causes the app to enter unintentional
    and undesirable states, the app has a logic flaw. Often, discovering logic flaws
    is a manual process that requires context about the application and the industry
    for which it’s developed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 检查由于逻辑漏洞而导致的漏洞。当Web应用程序具有多阶段过程时，一个操作必须跟随另一个操作，这个任务尤其重要。如果按错误顺序执行这些操作导致应用程序进入不小心且不希望的状态，则说明应用程序存在逻辑漏洞。通常，发现逻辑漏洞是一个手动过程，需要了解应用程序及其开发所面向的行业背景。
- en: Application Server
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用服务器
- en: Check that the server hosting the application is secure. Having a secure web
    application hosted on an insecure application server defeats the purpose of securing
    the actual app. To test the server’s security, use vulnerability scanners to check
    for application server bugs and public vulnerabilities. Also, check for deserialization
    attacks and test the robustness of any web application firewalls. Additionally,
    test for server misconfigurations, like directory listings, default content, and
    risky HTTP methods. You might also assess the robustness of SSL/TLS, checking
    for weak ciphers, self-signed certificates, and other common vulnerabilities.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 检查托管应用程序的服务器是否安全。如果将一个安全的Web应用程序托管在不安全的应用程序服务器上，那么保护实际应用程序的目的就无法实现。为了测试服务器的安全性，可以使用漏洞扫描器检查应用程序服务器的错误和公开漏洞。同时，检查是否存在反序列化攻击，测试任何Web应用程序防火墙的强度。此外，还需要测试服务器配置错误，如目录列表、默认内容和危险的HTTP方法。你还可以评估SSL/TLS的强度，检查弱加密算法、自签名证书及其他常见漏洞。
- en: Host Configuration Review
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机配置审查
- en: The process of *host configuration review* assesses the system from the inside
    after you’ve gained local access. For example, you could perform this review from
    a local user account on the Windows server component of an IoT system. Once inside,
    evaluate a variety of technical aspects, including user accounts, remote support
    connections, filesystem access controls, exposed network services, insecure server
    configurations, and more.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*主机配置审查*过程是从获得本地访问权限后，评估系统内部的过程。例如，你可以从物联网系统的Windows服务器组件中的本地用户账户进行此审查。进入系统后，评估各种技术方面，包括用户账户、远程支持连接、文件系统访问控制、暴露的网络服务、不安全的服务器配置等。'
- en: User Accounts
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户账户
- en: Test how securely configured user accounts are in the system. This step includes
    testing for the existence of default user accounts and examining the robustness
    of account policies. Such policies include *password history* (whether and when
    you can reuse old passwords), *password expiration* (how often the system forces
    users to change their passwords), and *lockout mechanisms* (how many wrong attempts
    the user has to provide credentials until they’re locked out of their account).
    If the IoT device belongs to an enterprise network, take into account the company’s
    security policies to ensure that the accounts are consistent. For example, if
    the organizational security policy requires users to change their passwords every
    six months, check that all accounts comply with the policy. Ideally, if the system
    allows you to integrate accounts with the company’s Active Directory or LDAP services,
    the company should be able to enforce these policies in a centralized way through
    the server.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试系统中用户账户的安全配置情况。这个步骤包括测试默认用户账户的存在性，并检查账户策略的强度。此类策略包括*密码历史*（是否以及何时可以重用旧密码）、*密码过期*（系统强制用户更改密码的频率）、以及*锁定机制*（用户输入错误凭证的次数，超过后账户将被锁定）。如果物联网设备属于企业网络，考虑公司的安全政策，确保账户一致性。例如，如果公司安全政策要求用户每六个月更改一次密码，检查所有账户是否符合该政策。理想情况下，如果系统允许你将账户与公司的Active
    Directory或LDAP服务集成，公司应该能够通过服务器以集中方式强制执行这些政策。
- en: This testing step might sound mundane, but it’s one of the most important. Attackers
    very often abuse weakly configured user accounts that aren’t managed in a centralized
    way and thus end up being overlooked. In our assessments, we frequently find local
    user accounts that have a nonexpiring password identical to the username.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试步骤可能听起来很平凡，但它却是最重要的步骤之一。攻击者往往会利用那些配置较弱、没有集中管理的用户账户，从而被忽视。在我们的评估中，我们经常发现本地用户账户的密码没有过期，并且与用户名相同。
- en: Password Strength
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码强度
- en: 'Test the security of the passwords on user accounts. Password strength is important
    because attackers can guess weak credentials using automated tools. Check whether
    password complexity requirements are enforced through either group or local policies
    on Windows and the Pluggable Authentication Modules (PAM) on Linux-based systems,
    with one caveat: authentication requirements shouldn’t impact business workflow.
    Consider the following scenario: a surgical system enforces a password complexity
    of 16 characters and locks users out of the account after three wrong attempts.
    This is a recipe for disaster when the surgeon or nurse has an emergency situation
    and there’s no other way to authenticate to the system. In cases where even seconds
    matter and patients’ lives are at stake, you must ensure that security doesn’t
    interfere in a negative way.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用户账户密码的安全性。密码强度很重要，因为攻击者可以通过自动化工具猜测弱密码。检查是否通过 Windows 的组策略或本地策略、以及基于 Linux
    的系统中的可插拔认证模块（PAM）强制密码复杂度要求，需注意：认证要求不应影响业务流程。考虑以下场景：一个外科系统要求密码复杂度为 16 个字符，并在用户三次输入错误密码后将其锁定。如果外科医生或护士遇到紧急情况，而没有其他方式认证进入系统，这将导致灾难。在这种情况下，时间甚至是秒的差距，患者生命处于危险之中，必须确保安全措施不会带来负面影响。
- en: Account Privileges
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 账户权限
- en: Check that accounts and services are configured with the *principle of least
    privilege,* in other words, that they’re able to access only the resources they
    need and no more than that. We commonly see poorly configured software without
    fine-grained privilege separation. For example, often the main process doesn’t
    drop its elevated privileges when it no longer needs them, or the system lets
    different processes all run under the same account. These processes normally need
    access to only a limited set of resources, so they end up overprivileged; once
    compromised, they provide an attacker with full control of the system. We also
    frequently find simple logging services running with SYSTEM or root privileges.
    The high-risk finding “Services with Excessive Privileges” appears in almost every
    security assessment report we write.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 检查账户和服务是否遵循*最小权限原则*，换句话说，它们仅能访问所需的资源，而不会多于此。我们常见到软件配置不当，缺乏精细的权限分离。例如，通常主进程在不再需要时不会降低其提升的权限，或者系统让不同进程都以同一个账户运行。这些进程通常只需要访问一小部分资源，因此它们会拥有过多权限；一旦被攻击者入侵，就能完全控制系统。我们还经常发现一些简单的日志服务在
    SYSTEM 或 root 权限下运行。高风险问题“权限过多的服务”几乎出现在我们编写的每一份安全评估报告中。
- en: In Windows systems specifically, you can solve this problem using *managed service
    accounts*, which let you isolate domain accounts used by critical applications
    and automate their credential management. On Linux systems, using security mechanisms
    like *capabilities*, *seccomp* (which whitelists system calls), *SELinux*, and
    *AppArmor* can help limit process privileges and harden the operating systems.
    In addition, solutions like Kerberos, OpenLDAP, and FreeIPA can help with account
    management.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 系统中，您可以使用*托管服务账户*来解决这个问题，这使得您能够隔离关键应用程序使用的域账户，并自动化其凭证管理。在 Linux 系统中，使用安全机制，如*能力（capabilities）*、*seccomp*（它白名单化系统调用）、*SELinux*
    和 *AppArmor* 可以帮助限制进程权限并加强操作系统的安全性。此外，像 Kerberos、OpenLDAP 和 FreeIPA 这样的解决方案也可以帮助进行账户管理。
- en: Patch Levels
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 补丁级别
- en: Check that the operating system, applications, and all third-party libraries
    are up-to-date and have an update process. Patches are important, complicated,
    and largely misunderstood. Testing for outdated software might seem like a routine
    task (which you can usually automate using vulnerability scanning tools), but
    almost nowhere will you find a fully up-to-date ecosystem. To detect open source
    components with known vulnerabilities, leverage *software composition analysis*
    tools that automatically inspect third-party code for missing patches. To detect
    missing operating system patches, you can rely on authenticated vulnerability
    scans or even check for them manually. Don’t forget to check whether the vendors
    still support the Windows or Linux kernel version of the IoT device; you’ll frequently
    find they don’t.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 检查操作系统、应用程序和所有第三方库是否是最新的，并且有更新流程。补丁非常重要，复杂且常常被误解。检查过时的软件可能看起来像是一项常规任务（通常你可以通过使用漏洞扫描工具来自动化此过程），但几乎没有地方能够找到一个完全更新的生态系统。为了检测具有已知漏洞的开源组件，可以利用*软件组成分析*工具，这些工具会自动检查第三方代码中缺失的补丁。为了检测操作系统补丁的缺失，你可以依赖认证漏洞扫描，甚至手动检查它们。不要忘记检查供应商是否仍然支持物联网设备的Windows或Linux内核版本；你会经常发现它们不再支持。
- en: Patching system components is one of the banes of the information security industry,
    and the IoT world especially. One of the main reasons is that embedded devices
    are harder to patch by nature because they often rely on complex firmware that
    is set in stone. Another reason is that patching certain systems, like ATM machines,
    on a regular basis can be prohibitively expensive because of the cost of *downtime*—the
    time in which customers can’t access the system—and the amount of work involved.
    For more special-purpose systems like medical devices, the vendor must first perform
    rigorous testing before releasing any new patch. You don’t want the blood analyzer
    to accidentally show a positive result for hepatitis because of a floating-point
    error caused by the latest update, do you? And how about patching an implantable
    pacemaker? The update should involve a life-or-death situation (literally) to
    justify calling all patients to the doctor’s office to “patch them up.”
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁系统组件是信息安全行业的一大痛点，尤其是在物联网领域。其主要原因之一是，嵌入式设备天生更难以补丁，因为它们通常依赖于固定的复杂固件。另一个原因是，定期为某些系统（如ATM机）打补丁可能会变得极为昂贵，因为*停机时间*——客户无法访问系统的时间——以及所需的工作量。对于一些特殊用途的系统，如医疗设备，供应商必须首先进行严格的测试，才能发布任何新的补丁。你不想因为最新更新引起的浮动点错误，导致血液分析仪错误地显示肝炎阳性结果，对吧？那么给植入式起搏器打补丁又如何呢？更新应该涉及到生死攸关的情况（字面意思），才能证明有必要召集所有患者到医生办公室进行“修补”。
- en: In our assessments, we often see third-party software used without patches,
    even though core components might be up-to-date. Common examples of this on Windows
    include Java, Adobe, and even Wireshark. In Linux devices, it’s common to find
    outdated versions of OpenSSL. Sometimes the software installed has absolutely
    no reason to be there, and it’s best to remove it instead of trying to establish
    a patching process for it. Why would you need Adobe Flash installed on the server
    that interfaces with an ultrasound machine?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的评估中，我们经常看到使用未打补丁的第三方软件，尽管核心组件可能是最新的。在Windows上常见的例子包括Java、Adobe，甚至Wireshark。在Linux设备上，常见的是发现过时的OpenSSL版本。有时安装的软件完全没有必要存在，最好是将其删除，而不是试图为其建立补丁流程。为什么服务器上需要安装Adobe
    Flash来与超声波设备接口呢？
- en: Remote Maintenance
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程维护
- en: Check the security of the remote maintenance and support connection for the
    device. Often, rather than sending a device to the vendor for patches, an organization
    will call the device vendor and have its technical staff remotely connect to the
    system. Attackers can sometimes exploit these features as backdoors that allow
    administrative access. Most of these remote connection methods are insecure. Consider
    the Target breach, where attackers infiltrated the store’s main network via a
    third-party HVAC company.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备远程维护和支持连接的安全性。通常，组织不会将设备发送到供应商处进行补丁更新，而是直接联系设备供应商，让其技术人员远程连接到系统。攻击者有时会利用这些功能作为后门，从而获得管理访问权限。大多数远程连接方式并不安全。可以参考Target数据泄露事件，攻击者通过一个第三方空调公司渗透进了商店的主网络。
- en: Vendors might patch devices remotely because there is usually no good way to
    have IoT devices in your network patched on time. Because some are sensitive and
    complex devices, the company staff can’t just surreptitiously start installing
    patches on them; there’s always a chance of them breaking during the process.
    And what happens if the device malfunctions while there’s an urgent need to use
    it (as in the case of a CT scanner at a hospital or a critical temperature sensor
    in a power plant)?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to assess not only the remote support software (ideally by reverse
    engineering its binaries) and its communication channel, but also the established
    process for remote maintenance. Does the facility use a 24/7 connection? Is there
    two-factor authentication when the vendor connects? Is there logging?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem Access Controls
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check that the principle of least privilege, mentioned earlier in this chapter,
    applies to key files and directories. Often, low-privileged users can read and
    write crucial directories and files (like service executables), allowing for easy
    privilege escalation attacks. Do nonadmin users really need to have write access
    on *C:\Program Files*? Do any users need to have access to */root*? We once assessed
    an embedded device with more than five different startup scripts that were writeable
    by nonroot users, allowing an attacker with local access to essentially run their
    own programs as root and gain complete control of the system.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Data Encryption
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check that sensitive data is encrypted. Begin by identifying the most sensitive
    data, such as *Protected Health Information (PHI)* or *Personally Identifiable
    Information (PII)*. PHI includes any records about health status, provision, or
    payment of health care, whereas PII is any data that could potentially identify
    a specific individual. Make sure this data is encrypted at rest by inspecting
    the system configuration for cryptographic primitives. If someone managed to steal
    the device’s disk, could they read that data? Is there full-disk encryption, database
    encryption, or any kind of encryption at rest, and how cryptographically secure
    is it?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Server Misconfiguration
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Misconfigured services can be insecure services. For example, you can still
    find FTP servers that have guest user access enabled by default, allowing attackers
    to anonymously connect and read or write to specific folders. We once found an
    Oracle Enterprise Manager, running as SYSTEM and accessible remotely with default
    credentials, that allowed attackers to execute operating system commands by abusing
    stored Java procedures. This vulnerability enabled attackers to completely compromise
    the system through the network.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Mobile Application and Cloud Testing
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test the security of any mobile application associated with the IoT system.
    These days, developers often want to create Android and iOS apps for everything,
    even pacemakers! You can learn more about mobile app security testing in Chapter
    14\. In addition, consult the OWASP Mobile Top 10 list, Mobile Security Testing
    Guide, and Mobile Application Security Verification Standard.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: In a recent assessment, we discovered that an app sent PHI to the cloud, unbeknownst
    to the physician or nurse operating the device. Although this isn’t a technical
    vulnerability, it’s still an important confidentiality violation that stakeholders
    should know about.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Also, assess the security posture of any cloud component associated with an
    IoT system. Examine the interaction between the cloud and IoT components. Pay
    particular attention to the backend APIs and implementations in cloud platforms,
    including but not limited to AWS, Azure, and Google Cloud Platform. You’ll commonly
    find *Insecure Direct Object References* (*IDOR*) vulnerabilities, which allow
    anyone who knows the right URL to access sensitive data. For example, AWS sometimes
    lets an attacker access S3 buckets using the URL associated with the data objects
    the bucket contains.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Many of the tasks involved in cloud testing will overlap with mobile and web
    app assessments. In the former case, the reason is that the client using these
    APIs is usually an Android or iOS app. In the latter case, the reason is that
    many cloud components are basically web services. You could also inspect any remote
    maintenance and support connections to the cloud, as mentioned in “Host Configuration
    Review” on page 50.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve encountered a range of cloud-related vulnerabilities: hardcoded cloud
    tokens, API keys found embedded in mobile apps and firmware binaries, a lack of
    TLS-certificate pinning, and the exposure of intranet services (such as an unauthenticated
    Redis caching server or the metadata service) to the public due to misconfigurations.
    Be aware that you need permission from the cloud services’ owner to perform any
    cloud testing.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several of us have served in the military’s cyber defense departments. There
    we learned that doing due diligence is one of the most important aspects of information
    security. Following a security testing methodology is important to avoid neglecting
    some obvious cases. It’s easy to miss low-hanging fruit simply because they seem
    too simple or obvious.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: This chapter outlined a testing methodology for performing security assessments
    of IoT systems. We walked through passive reconnaissance, and then described and
    broke down the physical, network, web application, host, mobile application, and
    cloud layers into smaller segments.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Note that the conceptual layers covered in this chapter are in no way absolute;
    there’s often a lot of overlap between two or more layers. For example, a battery
    exhaustion attack could be part of an assessment of the physical layer, because
    the battery is hardware. But it could also be part of the network layer, because
    an attacker could conduct the attack through the component’s wireless network
    protocol. The list of components to assess isn’t exhaustive, either, which is
    why we refer you to additional resources when applicable.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本章涉及的概念层次并非绝对的；不同层次之间通常会有很大的重叠。例如，电池耗尽攻击可以作为物理层评估的一部分，因为电池是硬件。但它也可以作为网络层的一部分，因为攻击者可能通过组件的无线网络协议进行攻击。评估组件的列表也并不详尽，这也是为什么我们在适用时会推荐额外资源的原因。
