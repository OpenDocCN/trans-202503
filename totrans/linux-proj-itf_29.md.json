["```\npthread_t *thread;\nint s;\n\ns = pthread_create(&thread, NULL, func, &arg);\nif (s != 0)\n    errExitEN(s, \"pthread_create\");\n```", "```\n#include <pthread.h>\n\nint `pthread_create`(pthread_t **thread*, const pthread_attr_t **attr*,\n                   void *(**start*)(void *), void **arg*);\n```", "```\ninclude <pthread.h>\n\nvoid `pthread_exit`(void **retval*);\n```", "```\ninclude <pthread.h>\n\npthread_t `pthread_self`(void);\n```", "```\ninclude <pthread.h>\n\nint `pthread_equal`(pthread_t *t1*, pthread_t *t2*);\n```", "```\nif (pthread_equal(tid, pthread_self())\n    printf(\"tid matches self\\n\");\n```", "```\npthread_t thr;\n\nprintf(\"Thread ID = %ld\\n\", (long) thr);        /* WRONG! */\n```", "```\ninclude <pthread.h>\n\nint `pthread_join`(pthread_t *thread*, void ***retval*);\n```", "```\n`threads/simple_thread.c`\n#include <pthread.h>\n#include \"tlpi_hdr.h\"\n\nstatic void *\nthreadFunc(void *arg)\n{\n    char *s = (char *) arg;\n\n    printf(\"%s\", s);\n\n    return (void *) strlen(s);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    pthread_t t1;\n    void *res;\n    int s;\n\n    s = pthread_create(&t1, NULL, threadFunc, \"Hello world\\n\");\n    if (s != 0)\n        errExitEN(s, \"pthread_create\");\n\n    printf(\"Message from main()\\n\");\n    s = pthread_join(t1, &res);\n    if (s != 0)\n        errExitEN(s, \"pthread_join\");\n\n    printf(\"Thread returned %ld\\n\", (long) res);\n\n    exit(EXIT_SUCCESS);\n}\n      `threads/simple_thread.c`\n```", "```\n$ `./simple_thread`\nMessage from main()\nHello world\nThread returned 12\n```", "```\n#include <pthread.h>\n\nint `pthread_detach`(pthread_t *thread*);\n```", "```\npthread_detach(pthread_self());\n```", "```\n*from* `threads/detached_attrib.c`\n    pthread_t thr;\n    pthread_attr_t attr;\n    int s;\n\n    s = pthread_attr_init(&attr);               /* Assigns default values */\n    if (s != 0)\n        errExitEN(s, \"pthread_attr_init\");\n\n    s = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);\n    if (s != 0)\n        errExitEN(s, \"pthread_attr_setdetachstate\");\n\n    s = pthread_create(&thr, &attr, threadFunc, (void *) 1);\n    if (s != 0)\n        errExitEN(s, \"pthread_create\");\n\n    s = pthread_attr_destroy(&attr);            /* No longer needed */\n    if (s != 0)\n        errExitEN(s, \"pthread_attr_destroy\");\n     *from* `threads/detached_attrib.c`\n```", "```\n    pthread_join(pthread_self(), NULL);\n    ```", "```\n    static void *\n    threadFunc(void *arg)\n    {\n        struct someStruct *pbuf = (struct someStruct *) arg;\n\n        /* Do some work with structure pointed to by 'pbuf' */\n    }\n\n    int\n    main(int argc, char *argv[])\n    {\n        struct someStruct buf;\n\n        pthread_create(&thr, NULL, threadFunc, (void *) &buf);\n        pthread_exit(NULL);\n    }\n    ```"]