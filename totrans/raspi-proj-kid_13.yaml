- en: '13'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MIRROR, MIRROR: THE SOCIAL MEDIA STATUS MIRROR'
  prefs: []
  type: TYPE_NORMAL
- en: IN THIS CHAPTER, YOU’LL CREATE A SOCIAL MEDIA STATUS MIRROR, A MODERN-DAY TWIST
    ON THE CLASSIC “MIRROR, MIRROR ON THE WALL” FROM THE *SNOW WHITE* FAIRYTALE. IMAGINE
    THAT YOU’RE GETTING READY TO GO OUT AND WANT TO KNOW WHAT YOUR FRIENDS ARE POSTING
    ONLINE. OR MAYBE YOUR FAVORITE TEAM IS PLAYING, AND YOU WANT TO FOLLOW ALL THE
    ACTION WHILE YOU GET READY IN THE MORNING.
  prefs: []
  type: TYPE_NORMAL
- en: The social media status mirror can help in either situation. All you have to
    do is enter a keyword in the Python program. Then, whenever a tweet containing
    the keyword appears in your social media timeline, an array of LEDs will flash
    several times before the mirror reads you the tweet. The LEDs inform you of incoming
    messages. If you set your personal Twitter handle as the keyword, the mirror will
    read out any tweet that mentions you and tell you the name of the user who wrote
    the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: You can customize the project by choosing a colored set of LEDs or even animal-,
    car-, or fruit-shaped LEDs. Or, instead of attaching the LEDs to a mirror, as
    shown in [Figure 13-1](ch13.xhtml#ch13fig01), you could attach them to a picture,
    notice board, bookcase, or window frame. I recommend using the Raspberry Pi Zero
    for this project, because it’s small and discreet, making it easy to hide. It
    also has built-in Wi-Fi, which you’ll need to stream data from your Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-1** Create your social media status mirror.'
  prefs: []
  type: TYPE_NORMAL
- en: WHAT YOU’LL NEED
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few items you’ll need to complete the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero W (recommended)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set of battery-powered LEDs (3.3V maximum)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB battery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPN (Negative-Positive-Negative) transistor (a 2N 2222)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1K ohm resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soldering iron and solder, or alligator clips, or aluminum foil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mirror (or any other object you want to attach the lights to)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small breadboard (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll need to think about the type of speaker you’ll use. You could use a simple
    portable speaker with the standard audio jack and cable. But then you can’t use
    the Raspberry Pi Zero, although that’s not an issue unless you have a small mirror
    that can’t mount a larger Pi board. Another option is to use a Bluetooth-enabled
    speaker, similar to the setup in [Chapter 10](ch10.xhtml#ch10). The Pi Zero W
    is Bluetooth enabled, which means you can stream audio directly to a speaker.
  prefs: []
  type: TYPE_NORMAL
- en: PREPARING THE EQUIPMENT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project has a few parts, so before you start coding it, you’ll set up your
    speaker, teach the Raspberry Pi to read text out loud via the speaker, wire the
    status LEDs, and connect your Pi to Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Speaker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To connect a speaker to the project, you have two options. If you’re *not* using
    the Pi Zero, you can use the built-in audio jack. Connect your speaker via a standard
    3.5 mm jack cable to the back headphone jack on the Raspberry Pi, which is located
    next to the HDMI port. Plug in your Raspberry Pi and boot it up; then return to
    the desktop. Locate the audio icon at the top of the desktop and right-click it.
    Select **Analog** from the audio output drop-down menu. Now all audio will be
    played through your speaker.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using a Bluetooth speaker, turn on the Bluetooth software on your
    Pi by clicking the Bluetooth icon at the top right of the screen. Then turn on
    your Bluetooth speaker. Click the Bluetooth icon again, and select **Add a Device**
    from the drop-down menu. The Raspberry Pi will attempt to locate all Bluetooth-enabled
    devices, including your speaker. Make sure you enable the Bluetooth settings on
    your speaker to make it discoverable.
  prefs: []
  type: TYPE_NORMAL
- en: When found, the speaker will appear in the pop-up window. Select it from the
    list and click **Pair** to establish a connection between your Raspberry Pi and
    the Bluetooth speaker.
  prefs: []
  type: TYPE_NORMAL
- en: Once the connection is confirmed, click the audio icon and select your Bluetooth
    speaker from the drop-down menu. The two devices will attempt to pair and establish
    a connection again. Once the speaker has been set up, your Raspberry Pi should
    always automatically locate and connect to this speaker.
  prefs: []
  type: TYPE_NORMAL
- en: Teaching the Pi to Read Text Out Loud
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For the Raspberry Pi to read your tweets aloud, you need to create a text-to-speech
    program. This program converts written text into audio and then plays it. You
    can use the program to read any type of text, including text messages, emails,
    or weather updates. So you could easily adapt this project to read other information
    to you as you get ready!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal window and install `espeak` by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open Python and start a new program. Enter the following code and save
    it as *espeak_test.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to replace the message between the quotation marks with your own message.
    Save the program and run it. You should now have a talking Raspberry Pi—well,
    a Raspberry Pi with a text-to-speech program. Experiment and add your own messages.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the LEDs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll set up the LEDs and write a program to control them. Your set of
    battery-powered LEDs should be in a loop with the battery pack attached, as shown
    in [Figure 13-2](ch13.xhtml#ch13fig02). The LEDs will be powered by the battery
    pack, and you will use the Raspberry Pi as a switch that will open and close the
    circuit, turning the LEDs off and on. Ensure that the batteries you use provide
    no more than 3V, which is two AA or AAA batteries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-2** Battery-powered LEDs'
  prefs: []
  type: TYPE_NORMAL
- en: To prepare the battery-powered LEDs, use a pair of scissors to cut through the
    ground wire. You can identify the ground wire by tracing the wires back to the
    battery pack and finding the wire connected to the negative terminal (the one
    where the flat side of the battery fits), as shown in [Figure 13-3](ch13.xhtml#ch13fig03).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-3** Finding the ground wire'
  prefs: []
  type: TYPE_NORMAL
- en: Leave a couple of inches of wire still attached to the battery pack. Strip the
    insulation from both of the ends so a little of the wire is exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Using a single female-to-male jumper wire, attach or solder one of the female
    ends to one of the ends of the stripped wire. Attach a second female-to-male jumper
    wire to the end of the other stripped wire. The battery pack should look something
    like [Figure 13-4](ch13.xhtml#ch13fig04).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-4** Attach one jumper wire to each of the wire ends that have been
    cut.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you don’t have access to a soldering iron, you can attach an alligator
    clip to the end of the wire and then clamp the other end onto the jumper wire.
    Or, you can wrap the ends of the wires in aluminum foil.*'
  prefs: []
  type: TYPE_NORMAL
- en: Using the NPN Transistor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The NPN transistor acts as a switch to cut the current from the batteries to
    the LEDs. Without the transistor, the LEDs will still receive some current from
    the battery pack, which means that the LEDs will glow slightly even when they
    are supposed to be off. The NPN transistor has three legs: the *emitter* on the
    left, the *base* in the middle, and the *collector* on the right. [Figure 13-5](ch13.xhtml#ch13fig05)
    shows the transistor from the front, which is its flat side.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-5** NPN transistor'
  prefs: []
  type: TYPE_NORMAL
- en: To set up the circuit, you’ll connect the ground wire from the batteries to
    the emitter and then connect the other part of the ground wire (which you created
    by cutting the ground wire in half) to the collector. You’ll use the Raspberry
    Pi GPIO to turn on the base, allowing you to flip the switch in the transistor
    and turn the LEDs on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Circuit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Attach the two ends of the jumper wires to the NPN by connecting the left wire
    to the left emitter leg of the NPN transistor and the right wire to the right
    collector leg of the NPN transistor ([Figure 13-6](ch13.xhtml#ch13fig06)). The
    NPN transistor acts as a switch by controlling the current that passes through
    the circuit. By stopping the current flow, the NPN transistor breaks the circuit,
    so the current from the battery pack can’t reach the LEDs and they go out, as
    though you turned them off. Attach the 1K ohm resistor to the middle base leg
    of the transistor. You need the resistor to avoid damaging the Raspberry Pi GPIO
    pin when the transistor is operating.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-6** Setting up the circuit'
  prefs: []
  type: TYPE_NORMAL
- en: Use a female-to-female wire to connect the other end of the resistor to pin
    GPIO 3, which is the pin that provides the current to close the circuit. Then
    use a male-to-female wire to connect the left emitter leg of the transistor to
    a ground pin on the Raspberry Pi. Conveniently, there is one directly to the right
    of GPIO 3, physical pin 6.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the LEDs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open your Python editor and enter the test program in [Listing 13-1](ch13.xhtml#ch13ex01).
    This code is similar to the program you used in [Chapter 3](ch03.xhtml#ch03) when
    creating the hot glue night-light. It tells the program which GPIO pin the wire
    is attached to and then turns on that pin. This creates a circuit via the GND
    pin, allowing the batteries to power the LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**LISTING 13-1** Creating a circuit to light the LEDs'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and run the program, and turn on the battery pack. The LEDs on the wire
    will flash on and then off once per second. If the lights stay on permanently,
    swap the two wires: attach the GPIO 3 wire to a GND pin and the GND wire to GPIO
    3.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve gotten the LEDs to work properly, you’re ready to begin creating
    your social media status mirror. But don’t attach the LEDs to your mirror, picture,
    or shelf yet. Instead, you’ll test the project by using your monitor to observe
    the tweets streaming in and the actions the program takes in response.
  prefs: []
  type: TYPE_NORMAL
- en: SETTING UP YOUR TWITTER DEVELOPER ACCOUNT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To access Twitter from your Raspberry Pi with Python, you’ll need to sign up
    and register for a developer account and then create an app. Then you can generate
    unique keys and tokens, which you’ll use in your program code to authorize communication
    between your Raspberry Pi and Twitter. These keys and tokens identify you as a
    user, enabling you to stream your timeline and post tweets by using Python code.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure you have a working Twitter account. You can use an existing
    account, but if you don’t have an account, sign up for one at [*https://www.twitter.com/*](https://www.twitter.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve set up your account, head over to [*https://developer.twitter.com/*](https://developer.twitter.com/)
    and click **Apply** at the top right of the page ([Figure 13-7](ch13.xhtml#ch13fig07)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-7** The Twitter Developer website'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should then be presented with a page containing a number of APIs: these
    are a selection of programming codes and functions that enable you to interact
    with Twitter.'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Standard APIs** and click **Apply for a developer account** ([Figure
    13-8](ch13.xhtml#ch13fig08)). This account is free and perfect for the mirror
    hack requirements. You’ll be asked to enter your Twitter username and password
    to create an account. If already have a developer account and are returning to
    create your own version of the hack, you can click **Sign in** instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-8** Select the **Standard APIs** option.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll begin the process of validating your developer account. The first
    stage requires you to enter a valid mobile phone number. This is purely a security
    feature so Twitter can send you confirmation texts to authorize the account. Click
    **Add a valid phone number** ([Figure 13-9](ch13.xhtml#ch13fig09)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-9** Add a valid phone number.'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the appropriate details for your region, enter your phone number, and
    click **Next** ([Figure 13-10](ch13.xhtml#ch13fig10)). A verification code should
    be sent to your phone via a text message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-10** Enter your details.'
  prefs: []
  type: TYPE_NORMAL
- en: When you receive the text, open it. Then enter the confirmation code into the
    verification phone number window shown in [Figure 13-11](ch13.xhtml#ch13fig11),
    and click **Verify**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-11** Enter the code that you receive on your phone.'
  prefs: []
  type: TYPE_NORMAL
- en: On completion, you should see a message stating your phone number is now verified
    ([Figure 13-12](ch13.xhtml#ch13fig12)). Click **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-12** Twitter verifies your phone number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second stage of the verification asks you to select whom you’re requesting
    access for ([Figure 13-13](ch13.xhtml#ch13fig13)): select the second option, **I
    am requesting access for my own personal use**. Then add a name for your account,
    which will be your developer account’s username. You can use your own name—for
    example, Dan’s Twitter—or use your Twitter account name. Select your primary country
    of operation, which must be where you’re located and where you’re running your
    mirror hack. Then click **Continue**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-13** Name your developer account.'
  prefs: []
  type: TYPE_NORMAL
- en: In the third stage, Twitter will request information about the use of your project.
  prefs: []
  type: TYPE_NORMAL
- en: In the first *What use case(s) are you interested in?* question ([Figure 13-14](ch13.xhtml#ch13fig14)),
    select **Chatbots and automation**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-14** Select the areas you’re interested in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should then be prompted to answer further questions about the purpose of
    what you’re building. Here are the four questions you need to answer:'
  prefs: []
  type: TYPE_NORMAL
- en: What are you using the Twitter API for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you intend to analyze tweets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would you like to retweet content?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How will the data be displayed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web page displays a simple guide that includes advice and some example responses,
    which you can use to create your own answers.
  prefs: []
  type: TYPE_NORMAL
- en: You need to write at least 300 characters when answering these questions. This
    sounds like a lot, but if you use the model responses, it’s easy to achieve the
    required number. A useful reminder is displayed in red under the box that disappears
    when you’ve written the total number of required characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the example I added:'
  prefs: []
  type: TYPE_NORMAL
- en: I’m using Twitter’s APIs to collect tweets and mentions from my timeline and
    then read them out.
  prefs: []
  type: TYPE_NORMAL
- en: The build does not analyze the tweets.
  prefs: []
  type: TYPE_NORMAL
- en: The build will not tweet, retweet, like, or interact with other users or their
    content. It will only stream tweets that contain my username from my timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Tweets will be converted from text to speech and read out.
  prefs: []
  type: TYPE_NORMAL
- en: You can add more details and customize your answers for your version of the
    hack.
  prefs: []
  type: TYPE_NORMAL
- en: Under the question *Will your product, service, or analysis make Twitter content
    or derived information available to a government entity?*, select **No**, and
    then click **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth stage, you’ll be presented with the terms and conditions ([Figure
    13-15](ch13.xhtml#ch13fig15)), which you can read if you want to. Then scroll
    to the bottom of the page, select the box to accept the terms, and click **Submit
    application**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-15** Confirm that you accept the terms and conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: You should receive a verification email from the Twitter Developer team. Open
    this email and click **Confirm your email**. Well done! You’ve completed the application
    process and should be redirected to the API developer page.
  prefs: []
  type: TYPE_NORMAL
- en: SETTING UP YOUR TWITTER APP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once your developer account is set up and verified, you can create your app.
    For this, you’ll add a few details about your project and then generate a set
    of unique, random codes called *keys*. You’ll use the keys in the Python program
    to enable you to connect to your Twitter account and manage your tweets. Begin
    by selecting the **Create an app** option ([Figure 13-16](ch13.xhtml#ch13fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-16** Getting started'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a new app:** The next page of the website shows you any existing Twitter
    apps you’ve already created and presents you with the option of creating a new
    app. Click the **Create an app** button ([Figure 13-17](ch13.xhtml#ch13fig17)).![Image](../images/13fig17.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 13-17** Creating a new app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Register the details of your new app:** Enter the app’s name (for example,
    *mirror* or *social media mirror*). You’ll use this name to identify your project
    the next time you log in. In the next box, enter a short description of the project
    to let others know what your app does ([Figure 13-18](ch13.xhtml#ch13fig18)).![Image](../images/13fig18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 13-18** Adding details for your app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ll also need to enter a website address. If you have your own website, enter
    its address here. If you don’t, you can enter your Twitter account’s web address,
    which is usually *[https://www.twitter.com/your_user_name/](https://www.twitter.com/your_user_name/)*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure the Enable sign in with Twitter option is deselected, and skip the
    other URL and website prompts. Also, leave the Callback URLs entry blank and agree
    to the Developer Agreement by selecting the box. Click the **Create your Twitter
    application** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the last box, enter a short summary of how you’ll use the app. I added a
    short description of what the social media status mirror hack does. Then click
    **Create**. You should be presented with two further options; select **Permissions**
    first ([Figure 13-19](ch13.xhtml#ch13fig19)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/13fig19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 13-19** Select the access permissions that you require.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ll need to select the type of access that your app requires. *Read only*
    enables you to read tweets from your timeline, and *Read and write* enables you
    to read and send your own tweets. Select the **Read and write** option, although
    it might already be set by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating the Access Keys and Tokens
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The final option window presents you with your API keys and access tokens ([Figure
    13-20](ch13.xhtml#ch13fig20)). These enable your Raspberry Pi to interact with
    Twitter through Python. Record the following keys and tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumer key** Identifies you and your app as a unique user'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumer secret** Use this like a password'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access token** A code you’ll use in your program later'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access token secret** Used with your access token to authorize a connection
    with your Twitter app'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-20** Generate your keys and tokens.'
  prefs: []
  type: TYPE_NORMAL
- en: To create the access token and access token secret, click **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important that you keep these keys and tokens secure. If you forget your
    access token or token secret, or they become compromised, you can click **Regenerate**
    to create a new token and API key set. Remember that you’ll need to use these
    in your Python program code, so note them down somewhere safe.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now completed the setup procedures for the Twitter app. You’re ready
    to send your first tweet by using your Raspberry Pi. Keep in mind that you can
    use your credentials for other projects too.
  prefs: []
  type: TYPE_NORMAL
- en: PROGRAMMING YOUR RASPBERRY PI WITH THE APP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you start coding your main program, you’ll create a few test programs
    so you can learn how to send and read tweets by using the Raspberry Pi. This is
    a useful skill that you can use and adapt for other projects in the future! It’s
    also a simple and quick method to test that the configuration is working.
  prefs: []
  type: TYPE_NORMAL
- en: Sending Your First Tweet
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To send your first tweet, you’ll need to use a new Python library called `tweepy`,
    which enables your program to communicate with Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Install** **`tweepy`:** Boot your Raspberry Pi and open the terminal window.
    Then enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Send a tweet:** You’ll create a Python program to post a tweet from your
    Raspberry Pi to your Twitter timeline. The tweet will appear on your public timeline
    immediately, so be aware of what you send. Open your Python editor, start a new
    file and save it as *Sending.py*, and enter the code in [Listing 13-2](ch13.xhtml#ch13ex02).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**LISTING 13-2** Writing and posting a tweet by using a Raspberry Pi'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the program by importing the `sys` and `subprocess` modules, which is
    a package for working with URLs. Also, import `urllib`, which is a module of URLs,
    or website addresses. This Python module lets you send data to and from your Twitter
    account via a specific URL for your app. Then import `time` and `tweepy` ❶.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, enter your consumer key ❷, consumer secret ❸, access token ❹, and access
    token secret ❺. At ❻, ❼, and ❽, authorize your Twitter account, your app, and
    the Raspberry Pi, respectively. This grants you access to your Twitter account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the function `api.update_status()` ❾ to post your message; type the message
    between the quotation marks. Then print a confirmation that the tweet has been
    sent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Run the program:** Before running the program, make sure you’ve entered your
    own message; then press **F5** to save and execute the code. The tweet will post,
    so check your Twitter timeline.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**(Optional) Change the Twitter Handle:** If you want to use another user’s
    Twitter handle to send them a mention, just add their Twitter handle in the parentheses,
    before your message; for example, `api.update_status(''@dan_aldred, Tweet sent
    from my Pi'').` It’s really that easy. You can’t post the same tweet twice because
    Twitter will consider this spam. When you run this program again, ensure that
    you change the message on line ❾.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reading Tweets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To read messages and mentions from your Twitter timeline, you’ll download the
    latest tweets from the Twitter users you follow and print them in the Python console
    window. Return to your previous program, *Sending.py*, and save it with a new
    filename of *Timeline.py*. Update the file so it matches the code in [Listing
    13-3](ch13.xhtml#ch13ex03).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**LISTING 13-3** Reading tweets from your Twitter timeline'
  prefs: []
  type: TYPE_NORMAL
- en: The first section of the program, which is identical to the start of the previous
    program, *Sending.py*, controls the authentication and authorization to Twitter.
    You don’t need to adjust these lines unless you’ve changed your key and token
    details.
  prefs: []
  type: TYPE_NORMAL
- en: You delete all the lines of code that appear after `api = tweepy.API(auth)`.
    (Don’t worry about losing your *Sending.py* program, because you’ve saved it under
    a different name.) Add the code at ❶, which pulls all the tweets from your public
    timeline and stores them in a variable named `public_tweets`. Next, use a `for`
    loop ❷ to cycle through each of the tweets.
  prefs: []
  type: TYPE_NORMAL
- en: Then use the `try` and `except` method, which tries to run the next part of
    the program ❸ and, if it can’t, runs the `except` code at ❼ and ❽. The reason
    is that sometimes tweets contain symbols and characters that the Python code can’t
    interpret, like emojis. Without the code at ❸ and ❼, your program would crash
    and return a message saying it can’t display the text. With the exception, you
    give your code something to do other than crash.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, print each tweet ❹. Add a short delay ❺ to give you time to
    read each post. You might want to make this delay longer than 2 seconds (say,
    5 seconds).
  prefs: []
  type: TYPE_NORMAL
- en: Skip a line before printing the next tweet ❻. This makes reading each tweet
    a little easier. It also makes the presentation neater, so you don’t have an overwhelming
    sea of text. Then add the `except` statement at ❼ and a message to inform you
    that it can’t display the tweet ❽. Save the file as *Timeline.py* and run the
    program as before. You now have a Python Twitter timeline reader ([Figure 13-21](ch13.xhtml#ch13fig21))!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-21** Printing tweets from your timeline'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming Tweets Automatically
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When running the *Timeline.py* program, you might have noticed that it downloads
    only the first 20 tweets from your timeline. It also prints only tweets that were
    posted before you started running the program: it won’t automatically download
    any new tweets received while running the program. This isn’t very useful if you
    want to retrieve your tweets in real time or check for a keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: One solution is to use a `while` loop that requests the tweets from your timeline
    every 20 seconds or so. But the problem with this is that Twitter limits your
    number of downloads, because it wants to block spam bots. Each time you request
    and download the data, Twitter logs that information. If you request data too
    many times per hour, your program might time out, and you’ll have wait a while
    before you can request your timeline data again.
  prefs: []
  type: TYPE_NORMAL
- en: 'A better solution is to create a class to stream the tweets. This significantly
    reduces the number of requests, so Twitter won’t time out your program. This method
    also allows you to stream the tweets as they’re posted to your timeline. Each
    time a new tweet arrives while the program is running, Python prints it to the
    shell window. Let’s create a class now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stream tweets with a class:** Open *Timeline.py* and save it as *Stream_Tweets.py*.
    Edit the file so it matches the code in [Listing 13-4](ch13.xhtml#ch13ex04).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**LISTING 13-4** Using a class to stream tweets'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As with the previous programs, begin by importing the required modules, as well
    as your keys and tokens, to authenticate and authorize your Twitter account and
    app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then create a new class called `Social_Media_Mirror_StreamListener`, which uses
    the streaming features of the Python `tweepy` library ❶. Create a function that
    streams the tweets and checks for your trigger word ❷. The code `status.text`
    retrieves all the tweets on your timeline. Store these in the variable `tweet_to_check`
    ❸.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, check for your trigger word by using `.find()`. Combine this with the
    `tweet_to_check` variable to search for your trigger word in each streamed tweet.
    Replace the trigger word *`@Dan_Aldred`* in my example with your own Twitter handle,
    a keyword, or a hashtag that will be the indicator to turn on the LEDs. The program
    then checks for your keyword and, if it finds it, returns the numerical position
    of your keyword in the tweet. If the keyword isn’t present in the tweet, the program
    returns a value of -1 and stores it in the `does_the_tweet_contain_key_word` variable
    ❹. You print the positional value of the keyword at ❺. If the keyword is contained
    within the tweet, a value of 0 or greater is returned to the variable on line
    ❹.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Search for the keyword:** The following section of the program checks the
    tweets for the keyword. Add the code in [Listing 13-5](ch13.xhtml#ch13ex05) to
    your program.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**LISTING 13-5** Checking the stream of tweets for your keyword'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First, check the incoming tweet for your trigger word by seeing whether the
    trigger word’s placement value is equal to or greater than 0 ❶. If it is greater
    than or equal to 0, the trigger word is somewhere in the tweet. For example, if
    the value is 0, the word is at the very start of the tweet. If the value is 7,
    the keyword is found at position 7 in the tweet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, grab the Twitter handle of the user who included your trigger word ❷ and
    print it ❸.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the final program, you’ll also use the keywords as triggers to turn on the
    LED lights. That would normally happen at this point in the program, but because
    you haven’t added the code for the LEDs yet, you’ll just add a test statement
    indicating this ❹.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then you add a response for cases when the trigger word isn’t found in the tweet.
    The response occurs if the value is -1\. If that happens, you add a notification
    that the lights are off ❺ ❻ before a short pause of 1 second ❼. This completes
    the main function of the streaming program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Start the streaming:** The final step is to start the streaming. Add the
    code in [Listing 13-6](ch13.xhtml#ch13ex06).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**LISTING 13-6** Starting the streaming'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a variable called `myStreamListener` to combine and hold the details
    of your authorization to the Twitter app and the `Social_Media_Mirror_StreamListener()`
    function you coded in the previous steps ❶. Then combine these functions to authenticate
    your credentials and deploy the stream ❷.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To stream the timeline for the correct Twitter account, you need to add the
    ID number of the Twitter account ❸. You find this number by opening *[https://tweeterid.com/](https://tweeterid.com/)*
    and entering the account name you want to track ([Figure 13-22](ch13.xhtml#ch13fig22)).
    Place the ID number it returns in line ❸. You can add your own account to ensure
    that you pick up mentions and messages that are sent to you; you can also search
    for your favorite celebrity accounts, friends and family, or the hashtag for a
    trending event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/13fig22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-22** Finding out the ID number of Twitter accounts'
  prefs: []
  type: TYPE_NORMAL
- en: Save and run your *Stream_Tweets.py* program. You can test it by mentioning
    your keyword in a tweet (or getting a friend to do it). Experiment with different
    placements of the keyword to see how the program responds. Then move on to the
    final section of code, where we’ll combine this program with the LEDs and audio
    to complete the social media status mirror.
  prefs: []
  type: TYPE_NORMAL
- en: THE FINAL PROGRAM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To complete the project, you’ll combine the code for streaming the tweets that
    contain your keyword with the code to flash the LEDs and read the tweets out loud.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Final Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Start a new program file and save it as *Social_Media_Mirror.py*. This code
    combines the code you used in [Listings 13-4](ch13.xhtml#ch13ex04) and [13-5](ch13.xhtml#ch13ex05)
    to complete the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**LISTING 13-7** Starting the final program'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `espeak()` function ❶, which you use to read the tweets aloud. Then
    import the `LED` class from the `gpiozero` library ❷. You use this to turn the
    GPIO pin on or off, controlling the battery power to the LEDs. Assign pin GPIO
    3 to the LED ❸. Use this pin to turn the lights on and off. Next, turn off the
    LED ❹ so the light won’t turn on every time the program resets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Main Program Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll add the main program code *Social_Media_Mirror.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**LISTING 13-8** Adding code to make the LEDs flash'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the code at ❶ again to turn off the LED, and then add the `try` and `except`
    method ❷ (as you did in [Listing 13-3](ch13.xhtml#ch13ex03)) to prevent your program
    from crashing if the tweet contains unknown characters, symbols, or usually emojis
    that cannot be displayed as text. Next, flash the lights by turning on the LEDs,
    waiting a few seconds, and then turning them off. The code at ❸ is merely an example
    and makes the lights flash faster until they stay on. You can adapt this code
    to suit your own preferences: make them stay lit for 5 seconds or flash them only
    a single time. In the program in [Listing 13-8](ch13.xhtml#ch13ex08), the LEDs
    stay on while the message is read aloud. Change values in `time.sleep()` ❸ to
    change the pattern of the LEDs. For example, `time.sleep(10)` will keep the LEDs
    on for 10 seconds and then turn them off.'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `espeak.synth()` function to read the name of the Twitter user who sent
    you a tweet containing your Twitter name ❹. Combine this code with the word `said`
    ❺ so when the program reads a tweet (by me, for example), it starts by announcing,
    “@Dan_Aldred said.” Add a small delay at ❻. Then make the program read the tweet
    ❼ before adding a final delay ❽ and turning off the LEDs ❾. Turning off the lights
    indicates that the message has been received and relayed.
  prefs: []
  type: TYPE_NORMAL
- en: If you receive a tweet that doesn’t contain your keyword, flash the LEDs once
    to indicate that there’s been a new post to your timeline but not a specific message
    of interest ❿. Then add the final line of code that authorizes your Twitter credentials
    and streams, in real time, the tweets from your Twitter timeline. Your program
    checks them for the keyword and responds in the set manner.
  prefs: []
  type: TYPE_NORMAL
- en: Add the end lines of the program in [Listing 13-9](ch13.xhtml#ch13ex09) to begin
    the streaming and complete the main program code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**LISTING 13-9** Ending the program'
  prefs: []
  type: TYPE_NORMAL
- en: Save the *Social_Media_Mirror.py* code and run it. To test it, load your Twitter
    feed on another device and mention your Twitter username or keyword in a tweet.
    Watch the LEDs light up when you get a new message, and then listen as the message
    is read to you. Contact your friends and get them to try it too.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can also replace your Twitter ID with the ID of your favorite
    Twitter account or users. Use the website *[https://tweeterid.com/](https://tweeterid.com/)*
    to look up the ID number. You can also replace the ID code with keywords like
    *No Starch*. When you’re testing your program, remember that if you send a duplicate
    of the same message, Twitter will consider this spam, so ensure that you change
    your test word.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically Starting the Twitter Stream
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you’re happy with the project, you can set the program to automatically
    run when you power up the Raspberry Pi. You do this by configuring a *crontab*
    file, as you did for other projects in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and enter the following command to open the cron console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The console will present you with three methods of editing the *crontab* file.
    Select option 2 and press ENTER to open the *crontab* file with the nano text
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll to the bottom of the text in the crontab file and locate the blank space.
    Then add the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The command states that every time the Raspberry Pi reboots, it should run Python
    in superuser mode, open the *home/pi/* folder, and execute your program. Replace
    the *name_of_your_program.py* with the name that you saved your program as.
  prefs: []
  type: TYPE_NORMAL
- en: The `&` at the end of the line of code tells your program to run in the background,
    so you can do other tasks with your Raspberry Pi at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have checked the command details and are confident that they’re correct,
    press CTRL-X to save and exit the *crontab* file. Now each time you turn on or
    reboot your Raspberry Pi, the *crontab* file will run, starting the *Social_Media_Mirror.py*
    program, and your social media status mirror will be ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to stop the program from automatically running, open the *crontab*
    file again from the terminal by entering this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then delete the line of code that you added. Save the file and reboot.
  prefs: []
  type: TYPE_NORMAL
- en: PUTTING IT ALL TOGETHER
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that all the hardware is working, you can add the LEDs to the mirror—or
    to any other object you’ve chosen. (You could also make a social media shelf.)
    Make sure your speaker and LEDs are attached, and then attach the battery pack
    to the back of the mirror ([Figure 13-23](ch13.xhtml#ch13fig23)). You could glue
    it to the back of the frame or use double-sided tape. Remember to leave the battery
    door facing outward so you can change the batteries if required. Then hang your
    mirror and wait for your messages to come through.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/13fig23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 13-23** Attach the Pi and battery pack to the back of your mirror.'
  prefs: []
  type: TYPE_NORMAL
- en: WRAPPING UP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To develop your project further, try one or more of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the LED flashing pattern by altering the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a music or fanfare MP3 file that plays before each tweet is read out loud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the project with the glue light in [Chapter 3](ch03.xhtml#ch03) or wire
    another set of LEDs that respond to a particular second trigger word.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
