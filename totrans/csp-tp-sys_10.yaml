- en: <samp class="SANS_Dogma_OT_Bold_B_11">APPENDIX</samp> <samp class="SANS_Dogma_OT_Bold_B_11">FURTHER
    READING</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 1</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplified equations for projectile motion used in the examples are explained
    on Wikipedia at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Projectile<wbr>_motion*](https://en.wikipedia.org/wiki/Projectile_motion).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frances Buontempo’s *Genetic Algorithms and Machine Learning for Programmers*
    (Pragmatic Bookshelf, 2019) has a whole section on ballistics. This chapter’s
    initial example was taken from that book and then abused for didactic reasons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find out more about the problem of primitive obsession, and its antidotes,
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Primitive Obsession” wiki page, [*https://<wbr>wiki<wbr>.c2<wbr>.com<wbr>/<wbr>?PrimitiveObsession*](https://wiki.c2.com/?PrimitiveObsession)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring Guru website, [*https://<wbr>refactoring<wbr>.guru<wbr>/smells<wbr>/primitive<wbr>-obsession*](https://refactoring.guru/smells/primitive-obsession)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fit wiki page, [*http://<wbr>fit<wbr>.c2<wbr>.com<wbr>/wiki<wbr>.cgi<wbr>?WholeValue*](http://fit.c2.com/wiki.cgi?WholeValue)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “The CHECKS Pattern Language of Information Integrity,” by Ward Cunningham,
    [*http://<wbr>c2<wbr>.com<wbr>/ppr<wbr>/checks<wbr>.xhtml*](http://c2.com/ppr/checks.xhtml)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Quantity pattern is described in Martin Fowler’s *Analysis Patterns: Reusable
    Object Models* (Addison-Wesley Professional, 1996). The Primitive Obsession code
    smell is identified in his book *Refactoring: Improving the Design of Existing
    Code* (Addison-Wesley Professional, 2018).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mixing up the units of values in calculations can have serious consequences;
    see “When NASA Lost a Spacecraft Due to a Metric Math Mistake” by Ajay Harish:
    [*https://<wbr>www<wbr>.simscale<wbr>.com<wbr>/blog<wbr>/2017<wbr>/12<wbr>/nasa<wbr>-mars<wbr>-climate<wbr>-orbiter<wbr>-metric<wbr>/*](https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevlin Henney’s book *97 Things Every Programmer Should Know* (O’Reilly, 2010)
    has lots of good advice on this general subject and many others. Representing
    domain concepts in the code is nicely captured by Dan North in Chapter 11, and
    by Einar Landre in Chapter 65.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Henney also looks at Value Object, Whole Value, Class Factory Method, and other
    patterns for values in “Patterns in Java,” which applies equally well to C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/value<wbr>-added<wbr>-43542768*](https://www.slideshare.net/Kevlin/value-added-43542768).
    Also see his paper “Factory and Disposal Methods: A Complementary and Symmetric
    Pair of Patterns,” from the 2003 VikingPLoP (Pattern Languages of Programs) conference,
    at [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/238075361*](https://www.researchgate.net/publication/238075361).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It has long been recognized that keeping objects simple helps in creating programs
    that are understandable. The single responsibility principle—the *S* in SOLID—is
    perhaps the most well-known guidance on this: [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/SOLID*](https://en.wikipedia.org/wiki/SOLID).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, the benefits of separate responsibilities were recognized in the 1970s,
    if not earlier, when Edsger Dijkstra wrote about separating concerns:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “The Effective Arrangement of Logical Systems,” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD05xx<wbr>/EWD562<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD562.xhtml)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “On the Role of Scientific Thought,” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD04xx<wbr>/EWD447<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.xhtml)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 2</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Common Type System is summarized in the following Microsoft documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/#the<wbr>-common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/#the-common-type-system)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/base<wbr>-types<wbr>/common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/standard/base-types/common-type-system)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation for the language rules around struct types is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/structs*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/structs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on the behavior of <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Threading.Monitor</samp>
    with respect to lock objects can be found at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.threading<wbr>.monitor<wbr>?view<wbr>=net<wbr>-6<wbr>.0#Lock*](https://docs.microsoft.com/en-us/dotnet/api/system.threading.monitor?view=net-6.0#Lock).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specific overload resolution rules regarding optional parameters are explained
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/named<wbr>-and<wbr>-optional<wbr>-arguments#overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#overload-resolution).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Lippert explains *why* initializers for read-only fields and constructors
    run in the order they do at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/why<wbr>-do<wbr>-initializers<wbr>-run<wbr>-in<wbr>-the<wbr>-opposite<wbr>-order<wbr>-as<wbr>-constructors<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lippert has written extensively on the subject of value types in C#, including
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “The Truth About Value Types,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-truth<wbr>-about<wbr>-value<wbr>-types*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-truth-about-value-types)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “The Stack Is an Implementation Detail, Part One,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-one)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “The Stack Is an Implementation Detail, Part Two,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-two*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-two)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nullable reference types are documented by Microsoft at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/nullable<wbr>-references*](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, Jon Skeet blogs about his early experiences with nullable reference
    types at [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2018<wbr>/04<wbr>/21<wbr>/first<wbr>-steps<wbr>-with<wbr>-nullable<wbr>-reference<wbr>-types<wbr>/*](https://codeblog.jonskeet.uk/2018/04/21/first-steps-with-nullable-reference-types/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tony Hoare made his famous apology for the <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>
    reference at the QCon conference in 2009\. The abstract is available at [*https://<wbr>qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/presentation<wbr>/Null%2bReferences<wbr>_%2bThe%2bBillion%2bDollar%2bMistake<wbr>.xhtml*](https://qconlondon.com/london-2009/qconlondon.com/london-2009/presentation/Null%2bReferences_%2bThe%2bBillion%2bDollar%2bMistake.xhtml).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 3</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The C# Language Specification describes the variable categories at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rules regarding definite assignment are also described in the C# Language
    Reference at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables#94<wbr>-definite<wbr>-assignment*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables#94-definite-assignment).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Skeet looks at parameter passing by reference and by value in his blog at
    [*https://<wbr>jonskeet<wbr>.uk<wbr>/csharp<wbr>/parameters<wbr>.xhtml*](https://jonskeet.uk/csharp/parameters.xhtml).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third edition of *C# in Depth* by Jon Skeet (Manning, 2014) has a detailed
    analysis of closures in Chapters 5 and 16.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Closures are not new to C#, but their behavior has changed in some ways; capturing
    a loop variable is one example. Eric Lippert’s blog has a good article on the
    rationale behind the *old* (pre–C# v5) behavior of capturing loop variables in
    function objects: [*https://<wbr>ericlippert<wbr>.com<wbr>/2009<wbr>/11<wbr>/12<wbr>/closing<wbr>-over<wbr>-the<wbr>-loop<wbr>-variable<wbr>-considered<wbr>-harmful<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2009/11/12/closing-over-the-loop-variable-considered-harmful-part-one/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of several C# features for efficient code, including read-only structs
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> parameters, is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/write<wbr>-safe<wbr>-efficient<wbr>-code*](https://docs.microsoft.com/en-us/dotnet/csharp/write-safe-efficient-code).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C# Programming Guide describes ref returns and ref locals at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/ref<wbr>-returns*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although ref returns and ref locals weren’t introduced until C# v7.0, the idea
    has been around much longer, as Eric Lippert explains at [*https://<wbr>ericlippert<wbr>.com<wbr>/2011<wbr>/06<wbr>/23<wbr>/ref<wbr>-returns<wbr>-and<wbr>-ref<wbr>-locals<wbr>/*](https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vladimir Sadov examines the rules around whether a ref local is safe to return
    at [*http://<wbr>mustoverride<wbr>.com<wbr>/safe<wbr>-to<wbr>-return<wbr>/*](http://mustoverride.com/safe-to-return/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operation of the garbage collector is a complex topic, but a good starting
    point is the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/garbage<wbr>-collection<wbr>/fundamentals*](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Hunter also describes garbage collection in his blog at [*https://<wbr>www<wbr>.red<wbr>-gate<wbr>.com<wbr>/simple<wbr>-talk<wbr>/development<wbr>/dotnet<wbr>-development<wbr>/understanding<wbr>-garbage<wbr>-collection<wbr>-in<wbr>-net<wbr>/*](https://www.red-gate.com/simple-talk/development/dotnet-development/understanding-garbage-collection-in-net/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation on value tuple support from C# v7.0 onward is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/value<wbr>-tuples*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 4</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eric Lippert has written extensively about value types and touches on modifying
    returned values at [*https://<wbr>ericlippert<wbr>.com<wbr>/2008<wbr>/05<wbr>/14<wbr>/mutating<wbr>-readonly<wbr>-structs<wbr>/*](https://ericlippert.com/2008/05/14/mutating-readonly-structs/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lippert examines the construction of value types and the use of an intermediate
    temporary instance in this post: [*https://<wbr>ericlippert<wbr>.com<wbr>/2010<wbr>/10<wbr>/11<wbr>/debunking<wbr>-another<wbr>-myth<wbr>-about<wbr>-value<wbr>-types<wbr>/*](https://ericlippert.com/2010/10/11/debunking-another-myth-about-value-types/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C# Language Specification on object creation can be read online at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117152<wbr>-object<wbr>-creation<wbr>-expressions*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117152-object-creation-expressions).
    Object initializers are covered at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117153<wbr>-object<wbr>-initializers*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117153-object-initializers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation on casts, including a link to user-defined conversion
    methods, is at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/casting<wbr>-and<wbr>-type<wbr>-conversions#implicit<wbr>-conversions*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#implicit-conversions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Skeet investigates read-only fields in his blog at [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2014<wbr>/07<wbr>/16<wbr>/micro<wbr>-optimization<wbr>-the<wbr>-surprising<wbr>-inefficiency<wbr>-of<wbr>-readonly<wbr>-fields<wbr>/*](https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation for <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    parameters ([*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/in<wbr>-parameter<wbr>-modifier*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier))
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> return values
    and locals ([*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/ref#reference<wbr>-return<wbr>-values*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values))
    has good information on the caveats and rules for correctly using them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sergey Tepliakov’s blog has some enlightening articles on <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> performance
    too, at [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/the<wbr>-in<wbr>-modifier<wbr>-and<wbr>-the<wbr>-readonly<wbr>-structs<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/the-in-modifier-and-the-readonly-structs-in-c/)
    and [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-traps<wbr>-of<wbr>-ref<wbr>-locals<wbr>-and<wbr>-ref<wbr>-returns<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-traps-of-ref-locals-and-ref-returns-in-c/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quote from Donald Knuth is from his ACM Turing Award lecture in 1974\. He
    went on to say—much more famously—that “premature optimization is the root of
    all evil.” The full text is available at [*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/1283920<wbr>.1283929*](https://dl.acm.org/doi/10.1145/1283920.1283929).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 5</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Eric Lippert’s blog post on the subject of <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>
    is enlightening: [*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/07<wbr>/25<wbr>/what<wbr>-is<wbr>-the<wbr>-type<wbr>-of<wbr>-the<wbr>-null<wbr>-literal<wbr>/*](https://ericlippert.com/2013/07/25/what-is-the-type-of-the-null-literal/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String interning is documented by Microsoft at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.string<wbr>.intern<wbr>?view<wbr>=net<wbr>-5<wbr>.0*](https://docs.microsoft.com/en-us/dotnet/api/system.string.intern?view=net-5.0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variety of articles address floating-point representation and the pitfalls
    that can arise. Frances Buontempo gives an overview with examples and further
    references for those who want to dig deeper in her *Overload* article “Floating
    Point Fun and Frolics” at [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/17<wbr>/91<wbr>/buontempo<wbr>_1558*](https://accu.org/journals/overload/17/91/buontempo_1558).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Richard Harris has written extensively about floating-point comparisons and
    arithmetic. This series of *Overload* articles examines the common alternatives
    to IEEE-754 floating-point:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “You’re Going To Have To Think!,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/99<wbr>/harris<wbr>_1702*](https://accu.org/journals/overload/18/99/harris_1702)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “Why Fixed Point Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/100<wbr>/harris<wbr>_1717*](https://accu.org/journals/overload/18/100/harris_1717)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “Why Rationals Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/101<wbr>/harris<wbr>_1986*](https://accu.org/journals/overload/19/101/harris_1986)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “Why Computer Algebra Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/102<wbr>/harris<wbr>_1979*](https://accu.org/journals/overload/19/102/harris_1979)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “Why Interval Arithmetic Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/103<wbr>/harris<wbr>_1974*](https://accu.org/journals/overload/19/103/harris_1974)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A comparison of C#’s floating-point types can be found in the Microsoft documentation
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/types#floating<wbr>-point<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#floating-point-types).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation gives an overview of the constant pattern at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#constant<wbr>-pattern*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#constant-pattern).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The declaration pattern is described in the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#declaration<wbr>-and<wbr>-type<wbr>-patterns*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#declaration-and-type-patterns).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nullable value type operator overloads are described in the C# Language Specification,
    which has a short remark about <samp class="SANS_TheSansMonoCd_W5Regular_11">operator==</samp>,
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/nullable<wbr>-value<wbr>-types#lifted<wbr>-operators*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#lifted-operators).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C# Language Specification also has a section on nullable reference types
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/nullable<wbr>-reference<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lippert has a great series of blogs about nullable value types starting here:
    [*https://<wbr>ericlippert<wbr>.com<wbr>/2012<wbr>/12<wbr>/20<wbr>/nullable<wbr>-micro<wbr>-optimizations<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lippert examines the concept of lifted operators at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/what<wbr>-exactly<wbr>-does<wbr>-lifted<wbr>-mean*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/what-exactly-does-lifted-mean).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*MSDN Magazine* looks at why value tuples aren’t immutable at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/msdn<wbr>-magazine<wbr>/2018<wbr>/june<wbr>/csharp<wbr>-tuple<wbr>-trouble<wbr>-why<wbr>-csharp<wbr>-tuples<wbr>-get<wbr>-to<wbr>-break<wbr>-the<wbr>-guidelines*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 6</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For an in-depth look at value types in modeling complex systems, see Dirk Bäumer
    et al., “Values in Object Systems,” *Ubilab Technical Report*, [*https://<wbr>riehle<wbr>.org<wbr>/computer<wbr>-science<wbr>/research<wbr>/1998<wbr>/ubilab<wbr>-tr<wbr>-1998<wbr>-10<wbr>-1<wbr>.pdf*](https://riehle.org/computer-science/research/1998/ubilab-tr-1998-10-1.pdf).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevlin Henney covers the taxonomy of object types and offers other valuable
    insights regarding object comparisons in C++ and C# at [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/objects<wbr>-of<wbr>-value*](https://www.slideshare.net/Kevlin/objects-of-value).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Fowler describes the anemic domain model at [*https://<wbr>www<wbr>.martinfowler<wbr>.com<wbr>/bliki<wbr>/AnemicDomainModel<wbr>.xhtml*](https://www.martinfowler.com/bliki/AnemicDomainModel.xhtml).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fowler describes aliasing an object causing bugs at [*https://<wbr>www<wbr>.martinfowler<wbr>.com<wbr>/bliki<wbr>/AliasingBug<wbr>.xhtml*](https://www.martinfowler.com/bliki/AliasingBug.xhtml).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Aliasing is not a new idea, either, as you can see in Eric S. Raymond’s The
    Jargon File: [*http://<wbr>www<wbr>.catb<wbr>.org<wbr>/jargon<wbr>/html<wbr>/A<wbr>/aliasing<wbr>-bug<wbr>.xhtml*](http://www.catb.org/jargon/html/A/aliasing-bug.xhtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scott Stanchfield’s article on the perils of using a language that has no concept
    of pass-by value is quite old and focused on the Java of the era, but still enlightening:
    [*http://<wbr>www<wbr>.javadude<wbr>.com<wbr>/articles<wbr>/passbyvalue<wbr>.htm*](http://www.javadude.com/articles/passbyvalue.htm).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contract for <samp class="SANS_TheSansMonoCd_W5Regular_11">IComparable</samp>
    implementations is described in the Microsoft documentation at [*https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers*](https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Henney looks at some patterns for value types, including symmetry, in this
    conference paper: [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/244405850<wbr>_The<wbr>_Good<wbr>_the<wbr>_Bad<wbr>_and<wbr>_the<wbr>_Koyaanisqatsi<wbr>_Consideration<wbr>_of<wbr>_Some<wbr>_Patterns<wbr>_for<wbr>_Value<wbr>_Objects*](https://www.researchgate.net/publication/244405850_The_Good_the_Bad_and_the_Koyaanisqatsi_Consideration_of_Some_Patterns_for_Value_Objects).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scott Meyers wrote seminal books that will be recognized instantly by C++ programmers
    everywhere, but he has much to say that’s relevant to programmers in any language.
    In particular, *Effective C*++, 3rd edition (Addison-Wesley, 2005), and *More
    Effective C*++ (Addison-Wesley, 1996) look at making interfaces easy to use correctly
    and hard to use incorrectly, as well as the benefits of moving functions outside
    of the class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intransitive or non-transitive dice are a fun way to explore and challenge the
    idea of less-than and intrinsic ordering; see the Rosetta Code site at [*https://<wbr>rosettacode<wbr>.org<wbr>/wiki<wbr>/Non<wbr>-transitive<wbr>_dice*](https://rosettacode.org/wiki/Non-transitive_dice).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 7</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the Microsoft Developer Network (MSDN) advice on overriding the <samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp>
    method for values, see [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/statements<wbr>-expressions<wbr>-operators<wbr>/how<wbr>-to<wbr>-define<wbr>-value<wbr>-equality<wbr>-for<wbr>-a<wbr>-type*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This 2005 *MSDN Magazine* article on the internals of how the CLR manages object
    instances, although clearly out-of-date now, is still enlightening: [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/msdn<wbr>-magazine<wbr>/2005<wbr>/may<wbr>/net<wbr>-framework<wbr>-internals<wbr>-how<wbr>-the<wbr>-clr<wbr>-creates<wbr>-runtime<wbr>-objects*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2005/may/net-framework-internals-how-the-clr-creates-runtime-objects).
    For a more recent analysis by Adam Sitnik, see [*https://<wbr>adamsitnik<wbr>.com<wbr>/Value<wbr>-Types<wbr>-vs<wbr>-Reference<wbr>-Types<wbr>/*](https://adamsitnik.com/Value-Types-vs-Reference-Types/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a detailed analysis of the kinds of polymorphism, see “On Understanding
    Types, Data Abstraction, and Polymorphism” by Luca Cardelli and Peter Wegner in
    *Computing Surveys*, [*http://<wbr>lucacardelli<wbr>.name<wbr>/Papers<wbr>/OnUnderstanding<wbr>.A4<wbr>.pdf*](http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a formal definition of subtyping, see “A Behavioral Notion of Subtyping”
    by Barbara H. Liskov and Jeannette M. Wing, *ACM Transactions on Programming Languages
    and Systems*, [*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/197320<wbr>.197383*](https://dl.acm.org/doi/10.1145/197320.197383).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eric Lippert discusses the Liskov substitutability principle more generally
    in a series of articles starting here: [*https://<wbr>ericlippert<wbr>.com<wbr>/2015<wbr>/04<wbr>/27<wbr>/wizards<wbr>-and<wbr>-warriors<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lippert argues that all equality can be derived simply from a conforming implementation
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">CompareTo</samp> at [*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=2425867*](https://www.informit.com/articles/article.aspx?p=2425867).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This article by Kevlin Henney on strings and value types is based on the C++
    string, but many of the observations are relevant to C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/highly<wbr>-strung*](https://www.slideshare.net/Kevlin/highly-strung).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The term *seam* is usually attributed to Michael Feathers from his book *Working
    Effectively with Legacy Code* (Pearson, 2004). The relevant chapter is available
    online at [*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=359417&seqNum<wbr>=2*](https://www.informit.com/articles/article.aspx?p=359417&seqNum=2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mock objects have been a feature of object-oriented unit testing for a long
    time, and Wikipedia has a good overview at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Mock<wbr>_object*](https://en.wikipedia.org/wiki/Mock_object).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gerard Meszaros describes the more general concept of a test double in his book
    *xUnit Test Patterns* (Addison-Wesley, 2007) and online at [*http://<wbr>xunitpatterns<wbr>.com<wbr>/Test%20Double<wbr>.xhtml*](http://xunitpatterns.com/Test%20Double.xhtml).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Henney makes a case against the term *reuse* at [*https://<wbr>kevlinhenney<wbr>.medium<wbr>.com<wbr>/simplicity<wbr>-before<wbr>-generality<wbr>-use<wbr>-before<wbr>-reuse<wbr>-722a8f967eb9*](https://kevlinhenney.medium.com/simplicity-before-generality-use-before-reuse-722a8f967eb9).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a summary of C# v8.0 ranges that includes the related specification for
    a generalized <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp> operator,
    see the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/proposals<wbr>/csharp<wbr>-8<wbr>.0<wbr>/ranges*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The calculation for relative luminance was lifted approximately from the International
    Telecommunication Union Radiocommunication Sector (ITU-R) recommendation on Wikipedia
    at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Luma<wbr>_(video)*](https://en.wikipedia.org/wiki/Luma_(video),
    but it’s used in this chapter only to demonstrate implicit conversions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C# has a few ways to represent conversions between types. Lippert’s description
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">is</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">as</samp>
    is at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/is<wbr>-is<wbr>-as<wbr>-or<wbr>-is<wbr>-as<wbr>-is*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/is-is-as-or-is-as-is)
    and [*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/05<wbr>/30<wbr>/what<wbr>-the<wbr>-meaning<wbr>-of<wbr>-is<wbr>-is<wbr>/*](https://ericlippert.com/2013/05/30/what-the-meaning-of-is-is/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These articles by Henney are targeted at C++ programmers, but the principles
    are broadly applicable in any object-oriented language, including C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/promoting<wbr>-polymorphism*](https://www.slideshare.net/Kevlin/promoting-polymorphism)
    and [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/substitutability*](https://www.slideshare.net/Kevlin/substitutability).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rules for overload resolution can be found in the C# Language Specification
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#1164<wbr>-overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#1164-overload-resolution).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Skeet has blogged about overloading at [*https://<wbr>csharpindepth<wbr>.com<wbr>/articles<wbr>/Overloading*](https://csharpindepth.com/articles/Overloading).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lippert looks at some interesting gotchas with respect to overload resolution
    at [*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/05<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2006/04/05/odious-ambiguous-overloads-part-one/)
    and [*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/06<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-two<wbr>/*](https://ericlippert.com/2006/04/06/odious-ambiguous-overloads-part-two/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a high-level description of record types in C# v9.0, see the Microsoft
    documentation: [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/whats<wbr>-new<wbr>/csharp<wbr>-9#record<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#record-types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type builders are a variation on the Factory pattern. See Erich Gamma et al.,
    *Design Patterns: Elements of Reusable Object-Oriented Software* (Addison-Wesley,
    1995).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Henney describes mutable companions and other value object patterns in his
    paper “The Good, the Bad, and the Koyaanisqatsi: Consideration of Some Patterns
    for Value Objects,” from the 2003 VikingPLoP (Pattern Languages of Programs) conference,
    at [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/244405850*](https://www.researchgate.net/publication/244405850).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 8</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One example of an intentionally slow algorithm is the bogosort, which is sometimes
    used as a simple way to deliberately keep a CPU busy; Wikipedia has details at
    [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Bogosort*](https://en.wikipedia.org/wiki/Bogosort).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One popular library to benchmark code for performance measurement is BenchmarkDotNet,
    described at [*https://<wbr>benchmarkdotnet<wbr>.org*](https://benchmarkdotnet.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Joe Duffy’s blog about performance and optimization is now more than a decade
    old but still thought-provoking, and the principles remain relevant: [*http://<wbr>joeduffyblog<wbr>.com<wbr>/2010<wbr>/09<wbr>/06<wbr>/the<wbr>-premature<wbr>-optimization<wbr>-is<wbr>-evil<wbr>-myth<wbr>/*](http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft documentation for the <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp>
    override of <samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp> is at
    [*https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0*](https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sergey Tepliakov’s blog has a wealth of information on why overriding <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp> is so important, and some
    good advice and interesting background on <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType.GetHashCode</samp>:
    [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-implications<wbr>-of<wbr>-default<wbr>-struct<wbr>-equality<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-implications-of-default-struct-equality-in-c/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the .NET 6 implementation of the default <samp class="SANS_TheSansMonoCd_W5Regular_11">GetHashCode</samp>
    method, see [*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/vm<wbr>/comutilnative<wbr>.cpp#L1878*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/vm/comutilnative.cpp#L1878).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default equality for structs is defined in <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp>
    at [*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/System<wbr>.Private<wbr>.CoreLib<wbr>/src<wbr>/System<wbr>/ValueType<wbr>.cs#L21*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/System.Private.CoreLib/src/System/ValueType.cs#L21).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Niklaus Wirth’s documentation for Project Oberon can be found at [*https://<wbr>people<wbr>.inf<wbr>.ethz<wbr>.ch<wbr>/wirth<wbr>/ProjectOberon<wbr>/PO<wbr>.System<wbr>.pdf*](https://people.inf.ethz.ch/wirth/ProjectOberon/PO.System.pdf).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
