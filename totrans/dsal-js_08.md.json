["```\nconst wrongWayToSort = (inputData) => [];\n```", "```\nconst a = [22, 9, 60, 12, 4, 56];\na.sort();\nconsole.log(a); // 12 22 4 56 60 9\n```", "```\nconst a = [22, 9, 60, 12, 4, 56];\na.sort(**(a, b) => a - b**);\nconsole.log(a); // 4 9 12 22 56 60\n```", "```\n❶ const people = [\n  {d: 22, m: 9, y: 60, n: \"alpha\"},\n  {d: 12, m: 4, y: 56, n: \"bravo\"},\n  {d: 22, m: 3, y: 56, n: \"hotel\"},\n  {d: 9,  m: 1, y: 60, n: \"foxtrot\"},\n  {d: 22, m: 4, y: 56, n: \"echo\"},\n  {d: 22, m: 3, y: 56, n: \"delta\"},\n  {d: 22, m: 3, y: 56, n: \"india\"},\n  {d: 14, m: 1, y: 34, n: \"charlie\"},\n  {d: 9,  m:12, y: 40, n: \"golf\"}\n];\n\nconst dateNameCompare = (a, b) => {\n❷ if (a.y !== b.y) {\n    return a.y - b.y;\n❸} else if (a.m !== b.m) {\n    return a.m - b.m;\n❹} else if (a.d !== b.d) {\n    return a.d - b.d;\n❺} else if (a.n < b.n) {\n return -1;\n  } else if (a.n > b.n) {\n    return 1;\n  } else {\n ❻ return 0;\n  }\n};\n```", "```\nconsole.log(people.sort(dateNameCompare));\n\n[\n  {d: 14, m: 1, y: 34, n: 'charlie'},\n  {d: 9,  m:12, y: 40, n: 'golf'},\n  {d: 22, m: 3, y: 56, n: 'delta'},\n  {d: 22, m: 3, y: 56, n: 'hotel'},\n  {d: 22, m: 3, y: 56, n: 'india'},\n  {d: 12, m: 4, y: 56, n: 'bravo'},\n  {d: 22, m: 4, y: 56, n: 'echo'},\n  {d:  9, m: 1, y: 60, n: 'foxtrot'},\n  {d: 22, m: 9, y: 60, n: 'alpha'}\n]\n```", "```\n❶ const bubbleSort = (arr, from = 0, to = arr.length - 1) => {\n❷ for (let j = to; j > from; j--) {\n  ❸ for (let i = from; i < j; i++) {\n    ❹ if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n      }\n    }\n  }\n  return arr;\n};\n```", "```\n❶ const shuttleSort = (arr, from = 0, to = arr.length - 1) => {\n❷ let f = from;\n  let t = to;\n\n❸ while (f < t) {\n  ❹ for (let i = f; i <= t - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n      }\n    }\n  ❺ t--;\n\n  ❻ for (let i = t - 1; i >= f; i--) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n      }\n    }\n ❼ f++;\n  }\n\n  return arr;\n};\n```", "```\nconst selectionSort = (arr, from = 0, to = arr.length - 1) => {\n❶ for (let i = from; i < to; i++) {\n  ❷ let m = i;\n  ❸ for (let j = i + 1; j <= to; j++) {\n    ❹ if (arr[m] > arr[j]) {\n        m = j;\n      }\n    }\n  ❺ if (m !== i) {\n      [arr[i], arr[m]] = [arr[m], arr[i]];\n    }\n  }\n\n  return arr;\n};\n```", "```\nconst insertionSort = (arr, from = 0, to = arr.length - 1) => {\n❶ for (let i = from + 1; i <= to; i++) {\n  ❷ for (let j = i; j > from && arr[j - 1] > arr[j]; j--) {\n    ❸ [arr[j - 1], arr[j]] = [arr[j], arr[j – 1]];\n    }\n  }\n  return arr;\n};\n```", "```\nconst insertionSort = (arr, from = 0, to = arr.length - 1) => {\n❶ for (let i = from + 1; i <= to; i++) {\n  ❷ const temp = arr[i];\n  ❸ let j;\n    for (j = i; j > from && arr[j - 1] > temp; j--) {\n      arr[j] = arr[j - 1];\n    }\n  ❹ arr[j] = temp;\n  }\n  return arr;\n};\n```", "```\nconst combSort = (arr, from = 0, to = arr.length - 1) => {\n❶ const SHRINK_FACTOR = 1.3;\n\n  let gap = to - from + 1;\n  for (;;) {\n  ❷ gap = Math.floor(gap / SHRINK_FACTOR);\n  ❸ if (gap === 1) {\n      return bubbleSort(arr, from, to);\n    }\n  ❹ for (let i = from; i <= to - gap; i++) {\n      if (arr[i] > arr[i + gap]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n      }\n    }\n  }\n};\n```", "```\nconst shellSort = (arr, from = 0, to = arr.length - 1) => {\n❶ const gaps = [1]; // Knuth, 1973\n  while (gaps[0] < (to - from) / 3) {\n    gaps.unshift(gaps[0] * 3 + 1);\n  }\n\n❷ gaps.forEach((gap) => {\n  ❸ for (let i = from + gap; i <= to; i++) {\n      const temp = arr[i];\n      let j;\n ❹ for (j = i; j >= from + gap && arr[j - gap] > temp; j -= gap) {\n        arr[j] = arr[j - gap];\n      }\n      arr[j] = temp;\n    }\n  });\n\n  return arr;\n};\n```", "```\nconst quickSort = (arr, left = 0, right = arr.length - 1) => {\n❶ if (left < right) {\n  ❷ const pivot = arr[right];\n\n  ❸ let p = left;\n    for (let j = left; j < right; j++) {\n      if (pivot > arr[j]) {\n        [arr[p], arr[j]] = [arr[j], arr[p]];\n        p++;\n      }\n    }\n  ❹ [arr[p], arr[right]] = [arr[right], arr[p]];\n\n    // Recursively sort the two partitions\n  ❺ quickSort(arr, left, p – 1);\n    quickSort(arr, p + 1, right);\n  }\n\n  return arr;\n};\n```", "```\n❶ const iPivot = Math.floor(left + (right + 1 - left) * Math.random());\n❷ if (iPivot !== right) {\n  [arr[iPivot], arr[right]] = [arr[right], arr[iPivot]];\n}\n```", "```\nconst middle = Math.floor((left + right) / 2);\nif (arr[left] > arr[middle]) {\n  [arr[left], arr[middle]] = [arr[middle], arr[left]];\n}\nif (arr[left] > arr[right]) {\n  [arr[left], arr[right]] = [arr[right], arr[left]];\n}\nif (arr[right] > arr[middle]) {\n  [arr[right], arr[middle]] = [arr[middle], arr[right]];\n}\n```", "```\n**const CUTOFF = 7;**\n\nconst quickSort = (arr, left = 0, right = arr.length - 1) => {\n  if (left < right) {\n **if (right - left < CUTOFF) {**\n **insertionSort(arr, left, right);**\n    } else {\n      //\n      // quicksort as before\n      //\n    }\n  }\n\n  return arr;\n};\n```", "```\nconst dualPivot = (arr, left = 0, right = arr.length - 1) => {\n  if (left < right) {\n    if (right - left < CUTOFF) {\n      insertionSort(arr, left, right);\n    } else {\n      // Choose outermost elements as pivots.\n    ❶ if (arr[left] > arr[right]) {\n        [arr[left], arr[right]] = [arr[right], arr[left]];\n      }\n      const pivotLeft = arr[left];\n      const pivotRight = arr[right];\n\n      let ll = left + 1;\n      let rr = right - 1;\n    ❷ for (let mm = ll; mm <= rr; mm++) {\n      ❸ if (pivotLeft > arr[mm]) {\n          [arr[mm], arr[ll]] = [arr[ll], arr[mm]];\n          ll++;\n      ❹} else if (arr[mm] > pivotRight) {\n          while (arr[rr] > pivotRight && mm < rr) {\n            rr--;\n          }\n          [arr[mm], arr[rr]] = [arr[rr], arr[mm]];\n          rr--;\n\n          if (pivotLeft > arr[mm]) {\n            [arr[mm], arr[ll]] = [arr[ll], arr[mm]];\n            ll++;\n          }\n        }\n      }\n    ❺ ll--;\n      rr++;\n      [arr[left], arr[ll]] = [arr[ll], arr[left]];\n      [arr[right], arr[rr]] = [arr[rr], arr[right]];\n\n    ❻ dualPivot(arr, left, ll - 1);\n      dualPivot(arr, ll + 1, rr - 1);\n      dualPivot(arr, rr + 1, right);\n    }\n  }\n\n  return arr;\n};\n```", "```\nconst mergesort = (arr, left = 0, right = arr.length - 1) => {\n❶ if (right > left) {\n  ❷ const split = Math.floor((left + right) / 2);\n\n  ❸ const arrL = mergesort(arr.slice(left, split + 1));\n    const arrR = mergesort(arr.slice(split + 1, right + 1));\n\n  ❹ let ll = 0;\n    let rr = 0;\n    for (let i = left; i <= right; i++) {\n      if (\n        ll !== arrL.length &&\n        (rr === arrR.length || !arrR[ll] > arrL[rr])\n      ) {\n        arr[i] = arrL[ll];\n        ll++;\n      } else {\n        arr[i] = arrR[rr];\n        rr++;\n      }\n    }\n  }\n\n  return arr;\n};\n```", "```\nconst bitmapSort = (arr, from = 0, to = arr.length - 1) => {\n❶ const copy = arr.slice(from, to + 1);\n❷ const minKey = Math.min(...copy);\n  const maxKey = Math.max(...copy);\n\n❸ const bitmap = new Array(maxKey - minKey + 1).fill(false);\n❹ copy.forEach((v) => {\n  ❺ if (bitmap[v - minKey]) {\n      throw new Error(\"Cannot sort... duplicate values\");\n  ❻} else {\n      bitmap[v - minKey] = true;\n    }\n  });\n\n❼ let k = from;\n  bitmap.forEach((v, i) => {\n  ❽ if (v) {\n      arr[k] = i + minKey;\n      k++;\n    }\n  });\n\n  return arr;\n};\n```", "```\nconst countingSort = (arr, from = 0, to = arr.length - 1) => {\n❶ const copy = arr.slice(from, to + 1);\n  const minKey = Math.min(...copy);\n  const maxKey = Math.max(...copy);\n\n❷ const count = new Array(maxKey - minKey + 1).fill(0);\n❸ copy.forEach((v) => count[v – minKey]++);\n\n❹ const place = new Array(maxKey - minKey + 1).fill(0);\n❺ place.forEach((v, i) => {\n    place[i] = i === 0 ? from : place[i - 1] + count[i - 1];\n  });\n\n❻ copy.forEach((v) => {\n    arr[place[v - minKey]] = v;\n ❼ place[v – minKey]++;\n  });\n\n  return arr;\n};\n```", "```\nconst sleepSort = (arr) =>\n  arr.forEach((v) => setTimeout(() => console.log(v), v * 1000));\n```", "```\nfor (let i = left; i <= right; i++) {\n  if (ll !== arrL.length && (rr === arrR.length || **!arrR[ll] > arrL[rr]**)) {\n    ...\n  } else {\n    ...\n  }\n}\n```", "```\nconst buckets = Array(10).fill(0).map(() => []);\n```", "```\nconst buckets = Array(10).fill([])\n```", "```\nconst buckets = Array(10).map(() => [])\n```"]