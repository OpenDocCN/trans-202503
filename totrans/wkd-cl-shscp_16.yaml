- en: '**15**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**DAYS AND DATES**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It’s tricky to calculate date math, whether you’re trying to figure out if a
    given year was a leap year, how many days remain until Christmas, or how many
    days you’ve been alive. This is where there’s a chasm between the Unix-based systems,
    like OS X, and Linux systems with their GNU foundations. David MacKenzie’s rewrite
    of the `date` utility for the GNU version of Linux is dramatically superior in
    its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using OS X or another system where `date --version` generates an
    error message, you can download a set of core utilities that will give you GNU
    `date` as a new command line option (probably installing it as `gdate`). For OS
    X, you can use the `brew` package manager (not installed by default, but easy
    to install for future use):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you have GNU `date` installed, calculating, say, whether a given year is
    a leap year can be handled by the program itself, rather than you having to mess
    with rules about years divisible by 4 but not 100 and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In other words, if the last day of the year is the 366th day of the year, it
    must be a leap year.
  prefs: []
  type: TYPE_NORMAL
- en: Another quality that makes GNU `date` superior is its ability to go far back
    in time. The standard Unix date command was built with a “time zero” or epoch
    date of January 1, 1970, at precisely 00:00:00 UTC. Want to know about something
    that happened in 1965? Tough luck. Fortunately, with the three nifty scripts in
    this chapter, you can harness the advantages of GNU `date`.
  prefs: []
  type: TYPE_NORMAL
- en: '**#99 Finding the Day of a Specific Date in the Past**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Quick: On what day of the week were you born? On what day of the week did Neil
    Armstrong and Buzz Aldrin first walk on the moon? The script in [Listing 15-1](ch15.xhtml#ch15ex1)
    helps you quickly answer these classic questions and neatly demonstrates how powerful
    GNU `date` is.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-1: The* `*dayinpast*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You know how we’ve been extolling GNU `date`? Here’s why. This entire script
    boils down to a single invocation at ➊.
  prefs: []
  type: TYPE_NORMAL
- en: Crazy easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'If that version of `date` isn’t available, the script uses `ncal` ➋, a variation
    of the simple `cal` program that presents the specified month in a curious—but
    helpful!—format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With this information available, pinpointing the day of the week is a simple
    matter of finding the line with the matching day of the month and then translating
    the two-letter day abbreviation into a proper name.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Neil Armstrong and Buzz Aldrin landed at Tranquility Base on July 20, 1969,
    and [Listing 15-2](ch15.xhtml#ch15ex2) shows this was a Sunday.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-2: Running the* `*dayinpast*` *script with the date Armstrong and
    Aldrin landed on the moon*'
  prefs: []
  type: TYPE_NORMAL
- en: 'D-Day, the Allied mass landing at Normandy, was June 6, 1944:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s one more, the date of the US Declaration of Independence on July
    4, 1776:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'All the scripts in this chapter use the same `*month day year*` input format,
    but it would be nice to let users specify something more familiar, like `*month*/*day*/
    *year*`. Luckily, it’s not hard to do, and [Script #3](ch01.xhtml#ch01lev1sec04)
    on [page 17](ch01.xhtml#page_17) is an excellent place to start.'
  prefs: []
  type: TYPE_NORMAL
- en: '**#100 Calculating Days Between Dates**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How many days have you been alive? How many days have passed since your parents
    met? There are a lot of questions of this nature related to elapsed time, and
    the answers are generally difficult to calculate. Again, however, GNU `date` makes
    life easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[Script #100](ch15.xhtml#ch15lev1sec02) and [Script #101](ch15.xhtml#ch15lev1sec03)
    are both based on the concept of calculating the number of days between two dates
    by figuring out the difference in days for the start year and the end year as
    well as the number of days in each intervening year. You can use this approach
    to calculate how many days ago a date in the past was (this script) and how many
    days remain until some future date ([Script #101](ch15.xhtml#ch15lev1sec03)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 15-3](ch15.xhtml#ch15ex3) is pretty complicated. Ready?'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-3: The* `*daysago*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a long script, but what’s going on isn’t too complicated. The leap year
    function ➊ is straightforward enough—we just check if the year has 366 days or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an interesting test to ensure that the GNU version of `date` is available
    ➋ before the script proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: The redirection throws away any error messages or output, and the return code
    is checked to see whether it’s nonzero, which would indicate an error parsing
    the `--version` parameter. On OS X, for instance, `date` is minimal and does not
    have `--version` or many other niceties.
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s just basic date math. `%j` returns the day of the year, so it makes
    calculating days left in the current year straightforward ➌. The count of days
    in intervening years is done in the `while` loop, where the progression is tracked
    with the `tempyear` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, how many days into the current year are we? That’s easily done at ➍.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then it’s just a matter of summing up the days to get the result!
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s look at those historical dates again in [Listing 15-4](ch15.xhtml#ch15ex4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-4: Running the* `*daysago*` *script with various dates*'
  prefs: []
  type: TYPE_NORMAL
- en: 'These were all run on ... Well, let’s let `date` tell us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are additional error conditions that the script isn’t catching, notably
    the edge cases when the date in the past is just a few days ago or even a few
    days in the future. What happens, and how can you fix it? (Tip: look at [Script
    #101](ch15.xhtml#ch15lev1sec03) to see additional tests you can apply to this
    script.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**#101 Calculating Days Until a Specified Date**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The logical partner of [Script #100](ch15.xhtml#ch15lev1sec02), `daysago`,
    is another script, `daysuntil`. This script essentially performs the same calculation
    but modifies the logic to count days left in the current year, days in intervening
    years, and days before the specified date in the target year, as shown in [Listing
    15-5](ch15.xhtml#ch15ex5).'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-5: The* `*daysuntil*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we’ve said, there’s a lot of overlap between the `daysago` script and this
    script, enough that you could probably combine them into one script and have conditionals
    test whether the user is requesting a date in the past or a date in the future.
    Most of the math here is simply the inverse of the math in the `daysago` script,
    looking ahead into the future instead of back into the past.
  prefs: []
  type: TYPE_NORMAL
- en: This script is a bit cleaner, however, because it considers a lot more error
    conditions before invoking the actual calculations. Take, for example, our favorite
    test at ➊.
  prefs: []
  type: TYPE_NORMAL
- en: If someone tries to trick the script by specifying today’s date, this conditional
    will catch that and return “zero days” as its calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many days until January 1, 2020? [Listing 15-6](ch15.xhtml#ch15ex6) gives
    us the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 15-6: Running the* `*daysuntil*` *script with the first day of 2020*'
  prefs: []
  type: TYPE_NORMAL
- en: How many until Christmas 2025?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Preparing for the tricentennial in the United States? Here’s how many days
    you have left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, given the following, odds are good we won’t be here for the third
    millennium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In [Script #99](ch15.xhtml#ch15lev1sec01) on [page 330](ch15.xhtml#page_330),
    we were able to determine what day of the week a given date fell on. Combining
    this functionality with that of the `daysago` and `daysuntil` scripts to get all
    the relevant information at once would be very useful.'
  prefs: []
  type: TYPE_NORMAL
