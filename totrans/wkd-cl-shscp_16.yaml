- en: '**15**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**15**'
- en: '**DAYS AND DATES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**日期与星期**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: It’s tricky to calculate date math, whether you’re trying to figure out if a
    given year was a leap year, how many days remain until Christmas, or how many
    days you’ve been alive. This is where there’s a chasm between the Unix-based systems,
    like OS X, and Linux systems with their GNU foundations. David MacKenzie’s rewrite
    of the `date` utility for the GNU version of Linux is dramatically superior in
    its capabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算日期数学是棘手的，无论是要确定某一年是否为闰年，距离圣诞节还有多少天，还是你已经活了多少天。在这一点上，Unix 系统（如 OS X）和基于 GNU
    的 Linux 系统之间存在巨大差距。David MacKenzie 为 GNU 版本的 Linux 重写的 `date` 工具在功能上远远优于其他工具。
- en: 'If you are using OS X or another system where `date --version` generates an
    error message, you can download a set of core utilities that will give you GNU
    `date` as a new command line option (probably installing it as `gdate`). For OS
    X, you can use the `brew` package manager (not installed by default, but easy
    to install for future use):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 OS X 或其他系统，其中 `date --version` 会生成错误信息，你可以下载一组核心工具，它们会提供 GNU `date`
    作为新的命令行选项（可能会以 `gdate` 安装）。对于 OS X，你可以使用 `brew` 包管理器（默认未安装，但可以轻松安装，以备未来使用）：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have GNU `date` installed, calculating, say, whether a given year is
    a leap year can be handled by the program itself, rather than you having to mess
    with rules about years divisible by 4 but not 100 and so on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 GNU `date`，例如计算某一年是否为闰年，可以由程序自动处理，而不需要你去操作那些关于能被 4 整除但不能被 100 整除等复杂规则。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In other words, if the last day of the year is the 366th day of the year, it
    must be a leap year.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果一年中的最后一天是第 366 天，那一定是闰年。
- en: Another quality that makes GNU `date` superior is its ability to go far back
    in time. The standard Unix date command was built with a “time zero” or epoch
    date of January 1, 1970, at precisely 00:00:00 UTC. Want to know about something
    that happened in 1965? Tough luck. Fortunately, with the three nifty scripts in
    this chapter, you can harness the advantages of GNU `date`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使 GNU `date` 优越的特点是它能够回溯很久以前的时间。标准的 Unix `date` 命令是以 1970 年 1 月 1 日 00:00:00
    UTC 作为“时间零”或纪元日期构建的。如果你想了解 1965 年发生的事情？那可难了。幸运的是，借助本章的三个巧妙脚本，你可以利用 GNU `date`
    的优势。
- en: '**#99 Finding the Day of a Specific Date in the Past**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#99 查找过去特定日期的星期几**'
- en: 'Quick: On what day of the week were you born? On what day of the week did Neil
    Armstrong and Buzz Aldrin first walk on the moon? The script in [Listing 15-1](ch15.xhtml#ch15ex1)
    helps you quickly answer these classic questions and neatly demonstrates how powerful
    GNU `date` is.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 快问：你出生那天是星期几？尼尔·阿姆斯特朗和巴兹·奥尔德林第一次登上月球时是星期几？[清单 15-1](ch15.xhtml#ch15ex1)中的脚本可以帮助你快速回答这些经典问题，并展示
    GNU `date` 的强大功能。
- en: '***The Code***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 15-1: The* `*dayinpast*` *script*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 15-1：* `*dayinpast*` *脚本*'
- en: '***How It Works***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: You know how we’ve been extolling GNU `date`? Here’s why. This entire script
    boils down to a single invocation at ➊.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道我们一直在推崇 GNU `date` 吧？这就是原因。这个脚本最终只需要在 ➊ 处执行一次。
- en: Crazy easy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简单得不可思议。
- en: 'If that version of `date` isn’t available, the script uses `ncal` ➋, a variation
    of the simple `cal` program that presents the specified month in a curious—but
    helpful!—format:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该版本的 `date` 不可用，脚本会使用 `ncal` ➋，这是一个简单的 `cal` 程序的变体，以一种独特但有用的格式呈现指定月份的日历：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this information available, pinpointing the day of the week is a simple
    matter of finding the line with the matching day of the month and then translating
    the two-letter day abbreviation into a proper name.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，确定星期几变得非常简单，只需找到对应日期的行，并将两字母的星期缩写翻译成完整的名称。
- en: '***Running the Script***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Neil Armstrong and Buzz Aldrin landed at Tranquility Base on July 20, 1969,
    and [Listing 15-2](ch15.xhtml#ch15ex2) shows this was a Sunday.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尼尔·阿姆斯特朗和巴兹·奥尔德林于 1969 年 7 月 20 日登陆宁静海基地，[清单 15-2](ch15.xhtml#ch15ex2)显示那天是星期天。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 15-2: Running the* `*dayinpast*` *script with the date Armstrong and
    Aldrin landed on the moon*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 15-2：运行* `*dayinpast*` *脚本，日期为阿姆斯特朗和奥尔德林登月的日期*'
- en: 'D-Day, the Allied mass landing at Normandy, was June 6, 1944:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 诺曼底盟军大规模登陆的 D 日是 1944 年 6 月 6 日：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here’s one more, the date of the US Declaration of Independence on July
    4, 1776:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个，美国独立宣言签署的日期是 1776 年 7 月 4 日：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '***Hacking the Script***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: 'All the scripts in this chapter use the same `*month day year*` input format,
    but it would be nice to let users specify something more familiar, like `*month*/*day*/
    *year*`. Luckily, it’s not hard to do, and [Script #3](ch01.xhtml#ch01lev1sec04)
    on [page 17](ch01.xhtml#page_17) is an excellent place to start.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '本章中的所有脚本都使用相同的 `*month day year*` 输入格式，但如果能让用户指定更熟悉的格式，比如 `*month*/*day*/ *year*`，那会更好。幸运的是，这并不难实现，且[脚本
    #3](ch01.xhtml#ch01lev1sec04)在[第 17 页](ch01.xhtml#page_17)是一个很好的起点。'
- en: '**#100 Calculating Days Between Dates**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#100 计算两个日期之间的天数**'
- en: How many days have you been alive? How many days have passed since your parents
    met? There are a lot of questions of this nature related to elapsed time, and
    the answers are generally difficult to calculate. Again, however, GNU `date` makes
    life easier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经活了多少天？自从你父母相遇以来已经过了多少天？有很多类似的问题与经过的时间有关，而答案通常很难计算。然而，GNU `date` 使得这件事变得更简单。
- en: '[Script #100](ch15.xhtml#ch15lev1sec02) and [Script #101](ch15.xhtml#ch15lev1sec03)
    are both based on the concept of calculating the number of days between two dates
    by figuring out the difference in days for the start year and the end year as
    well as the number of days in each intervening year. You can use this approach
    to calculate how many days ago a date in the past was (this script) and how many
    days remain until some future date ([Script #101](ch15.xhtml#ch15lev1sec03)).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[脚本 #100](ch15.xhtml#ch15lev1sec02)和[脚本 #101](ch15.xhtml#ch15lev1sec03)都基于通过计算起始年和结束年之间的天数差异以及每个年份中间的天数来计算两个日期之间的天数的概念。你可以使用这种方法来计算某个过去的日期距离现在有多少天（这个脚本），以及某个未来的日期还有多少天（[脚本
    #101](ch15.xhtml#ch15lev1sec03)）。'
- en: '[Listing 15-3](ch15.xhtml#ch15ex3) is pretty complicated. Ready?'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-3](ch15.xhtml#ch15ex3)相当复杂。准备好了吗？'
- en: '***The Code***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 15-3: The* `*daysago*` *script*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 15-3：* `*daysago*` *脚本*'
- en: '***How It Works***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: This is a long script, but what’s going on isn’t too complicated. The leap year
    function ➊ is straightforward enough—we just check if the year has 366 days or
    not.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个长脚本，但其原理并不复杂。闰年函数 ➊ 很简单——我们只需检查该年份是否有 366 天。
- en: There’s an interesting test to ensure that the GNU version of `date` is available
    ➋ before the script proceeds.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个有趣的测试，确保在脚本继续之前，GNU 版本的 `date` 是可用的 ➋。
- en: The redirection throws away any error messages or output, and the return code
    is checked to see whether it’s nonzero, which would indicate an error parsing
    the `--version` parameter. On OS X, for instance, `date` is minimal and does not
    have `--version` or many other niceties.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向会丢弃任何错误信息或输出，返回码会被检查以确定是否为非零值，如果是非零值，则表示解析`--version`参数时出错。例如，在 OS X 上，`date`
    命令是最简化的，并没有`--version`或许多其他功能。
- en: Now it’s just basic date math. `%j` returns the day of the year, so it makes
    calculating days left in the current year straightforward ➌. The count of days
    in intervening years is done in the `while` loop, where the progression is tracked
    with the `tempyear` variable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只是基础的日期计算。`%j` 返回年份中的第几天，因此它使得计算当前年份剩余的天数变得非常简单 ➌。介于两年之间的天数在 `while` 循环中计算，其中进度通过
    `tempyear` 变量来跟踪。
- en: Finally, how many days into the current year are we? That’s easily done at ➍.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当前年份已经过去了多少天？这在 ➍ 很容易算出来。
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then it’s just a matter of summing up the days to get the result!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需将天数相加就能得到结果！
- en: '***Running the Script***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Let’s look at those historical dates again in [Listing 15-4](ch15.xhtml#ch15ex4).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下[示例 15-4](ch15.xhtml#ch15ex4)中的那些历史日期。
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 15-4: Running the* `*daysago*` *script with various dates*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 15-4：使用不同日期运行* `*daysago*` *脚本*'
- en: 'These were all run on ... Well, let’s let `date` tell us:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是运行在... 好吧，让我们让 `date` 来告诉我们：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '***Hacking the Script***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: 'There are additional error conditions that the script isn’t catching, notably
    the edge cases when the date in the past is just a few days ago or even a few
    days in the future. What happens, and how can you fix it? (Tip: look at [Script
    #101](ch15.xhtml#ch15lev1sec03) to see additional tests you can apply to this
    script.)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '脚本没有捕捉到一些额外的错误情况，特别是在过去的日期距离现在只有几天，甚至是未来几天的边界情况。会发生什么？你怎么修复它？（提示：看看[脚本 #101](ch15.xhtml#ch15lev1sec03)，了解你可以对这个脚本应用的更多测试。）'
- en: '**#101 Calculating Days Until a Specified Date**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#101 计算直到指定日期的天数**'
- en: 'The logical partner of [Script #100](ch15.xhtml#ch15lev1sec02), `daysago`,
    is another script, `daysuntil`. This script essentially performs the same calculation
    but modifies the logic to count days left in the current year, days in intervening
    years, and days before the specified date in the target year, as shown in [Listing
    15-5](ch15.xhtml#ch15ex5).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[脚本 #100](ch15.xhtml#ch15lev1sec02)的逻辑伙伴`daysago`是另一个脚本`daysuntil`。这个脚本本质上执行相同的计算，但修改了逻辑，以计算当前年份剩余的天数、跨年年份的天数以及目标年份指定日期之前的天数，正如[列表
    15-5](ch15.xhtml#ch15ex5)所示。'
- en: '***The Code***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 15-5: The* `*daysuntil*` *script*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-5：*`*daysuntil*`* 脚本*'
- en: '***How It Works***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: As we’ve said, there’s a lot of overlap between the `daysago` script and this
    script, enough that you could probably combine them into one script and have conditionals
    test whether the user is requesting a date in the past or a date in the future.
    Most of the math here is simply the inverse of the math in the `daysago` script,
    looking ahead into the future instead of back into the past.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所说，`daysago` 脚本和这个脚本之间有很多重叠，足以让你将它们合并为一个脚本，并通过条件判断来测试用户请求的是过去的日期还是未来的日期。这里的大部分数学运算实际上是`daysago`脚本中的数学运算的逆操作，是向未来看而不是向过去看。
- en: This script is a bit cleaner, however, because it considers a lot more error
    conditions before invoking the actual calculations. Take, for example, our favorite
    test at ➊.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个脚本稍微干净一些，因为它在执行实际计算之前考虑了更多的错误条件。例如，我们最喜欢的测试，见 ➊。
- en: If someone tries to trick the script by specifying today’s date, this conditional
    will catch that and return “zero days” as its calculation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人试图通过指定今天的日期来欺骗脚本，这个条件判断会捕捉到这一点并返回“零天”作为计算结果。
- en: '***Running the Script***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: How many days until January 1, 2020? [Listing 15-6](ch15.xhtml#ch15ex6) gives
    us the answer.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 离 2020 年 1 月 1 日还有多少天？[列表 15-6](ch15.xhtml#ch15ex6)给出了答案。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 15-6: Running the* `*daysuntil*` *script with the first day of 2020*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-6：运行*`*daysuntil*`* 脚本，使用 2020 年的第一天*'
- en: How many until Christmas 2025?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 离 2025 年圣诞节还有多少天？
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Preparing for the tricentennial in the United States? Here’s how many days
    you have left:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 准备迎接美国的三百周年纪念了吗？这里是你剩余的天数：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, given the following, odds are good we won’t be here for the third
    millennium:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，考虑到以下情况，我们很可能不会活到第三个千年：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '***Hacking the Script***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***黑客脚本***'
- en: 'In [Script #99](ch15.xhtml#ch15lev1sec01) on [page 330](ch15.xhtml#page_330),
    we were able to determine what day of the week a given date fell on. Combining
    this functionality with that of the `daysago` and `daysuntil` scripts to get all
    the relevant information at once would be very useful.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '在[脚本 #99](ch15.xhtml#ch15lev1sec01)中，我们能够确定给定日期是星期几。将这个功能与`daysago`和`daysuntil`脚本的功能结合在一起，一次性获取所有相关信息将非常有用。'
