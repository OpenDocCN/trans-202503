- en: —19—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Binary Search Trees for Suspects
  prefs: []
  type: TYPE_NORMAL
- en: Frank limped back into his office to find Socks waiting. The young wizard sat
    in Frank’s chair, spinning idly. Frank glared until Socks realized his mistake.
    He mumbled an apology and jumped out of the chair.
  prefs: []
  type: TYPE_NORMAL
- en: “What did you find?” Frank asked.
  prefs: []
  type: TYPE_NORMAL
- en: Socks shrugged. “Nothing useful.”
  prefs: []
  type: TYPE_NORMAL
- en: “Nothing?” Frank prompted.
  prefs: []
  type: TYPE_NORMAL
- en: “None of the wizards had heard of any new leagues,” Socks added quickly. “The
    last wizarding league formed was the League of Magical Confectioners. They formed
    last year in response to the influx of subpar mints. Do you remember those grainy
    tablets restaurants served? They tasted like mint for the first few minutes but
    left an aftertaste of pine needles for the next six hours. It was like they were
    meant to be a prank. The League of Magical Confectioners fixed the mint situation,
    and then branched out into chocolates and toffees. The league now has six candy
    shops and four carts—”
  prefs: []
  type: TYPE_NORMAL
- en: “Nothing else?” Frank interrupted.
  prefs: []
  type: TYPE_NORMAL
- en: Socks shook his head. “I also asked about clubs and associations,” he offered.
    “The only new one was the Babbageville Wizards Bowling Association, and they lasted
    less than a month. Apparently there just aren’t that many wizards in Babbageville
    who like to bowl.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank sighed. He hadn’t expected much from Socks’s investigation, but the complete
    lack of news still managed to disappoint him.
  prefs: []
  type: TYPE_NORMAL
- en: “How about you?” Socks asked.
  prefs: []
  type: TYPE_NORMAL
- en: “Yeah,” replied Frank. “I got a new lead.”
  prefs: []
  type: TYPE_NORMAL
- en: “Really? What is it?”
  prefs: []
  type: TYPE_NORMAL
- en: Before Frank could answer, Officer Notation banged noisily into the office carrying
    an absurdly large stack of books. She made it to Frank’s desk and dropped the
    stack. The desk sagged under the weight.
  prefs: []
  type: TYPE_NORMAL
- en: “All the transfer and assignment ledgers for the past year,” she panted. “Now
    can you tell me why I dragged these here?”
  prefs: []
  type: TYPE_NORMAL
- en: “We need to find a transfer,” said Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “I figured that,” said Notation. “But if you’d told me which transfer, I could
    have just looked it up there.”
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t know which transfer,” explained Frank. It was half true. Even if he
    had known, he would have still asked Notation to bring up all the records. He
    needed to be there during the search. He needed to make sure no one was missed.
  prefs: []
  type: TYPE_NORMAL
- en: “Okay,” said Notation. “What are we looking for?”
  prefs: []
  type: TYPE_NORMAL
- en: “We’ll start with any suspicious transfer between 50 and 70 days ago,” said
    Frank. Those were the approximate dates of the pages that had been torn from the
    ledger in the prison. “It’s a range search. We want to find all the transfers
    in a range of dates.”
  prefs: []
  type: TYPE_NORMAL
- en: Notation groaned. “These requests are sorted by the original location of the
    requesting officer and then by officer name. They aren’t indexed by the date of
    the request. We’ll have to go through every request. It’ll take hours.”
  prefs: []
  type: TYPE_NORMAL
- en: “No, it won’t,” Frank assured her. “Because we’re going to use magic.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks looked up in surprise. “Magic?” he asked. “I don’t know any range search
    spells.”
  prefs: []
  type: TYPE_NORMAL
- en: “You know binary search trees,” responded Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “I’m an expert on binary search trees,” agreed Socks, “but I don’t see how that
    helps.”
  prefs: []
  type: TYPE_NORMAL
- en: “We can build a binary search tree of transfer requests, with each node’s value
    equal to how long ago the transfer occurred. Then we can do a range search on
    the tree.”
  prefs: []
  type: TYPE_NORMAL
- en: “Range search on the tree?” asked Socks.
  prefs: []
  type: TYPE_NORMAL
- en: “Why bother with a tree?” asked Notation. “If we’re just doing one search, it’ll
    take longer to build the tree than to scan through the data.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank shrugged. “My guess is that we’ll ultimately want to do more than one
    search. If Socks builds the tree with magic, we can search it a bunch of times.”
  prefs: []
  type: TYPE_NORMAL
- en: “But I don’t know how to do a range search,” Socks protested.
  prefs: []
  type: TYPE_NORMAL
- en: “Build the tree and I’ll show you.”
  prefs: []
  type: TYPE_NORMAL
- en: “Okay,” said Socks. “This’ll take a little while; I’m only used to working with
    buttons. Real, physical buttons. I’ve never had to organize facts before. Facts
    seem like they’ll be squishy. I’ll need to modify the spell.”
  prefs: []
  type: TYPE_NORMAL
- en: As Socks hunched over Frank’s desk and scrawled out a modified spell on a piece
    of parchment, Notation confronted Frank. “What’s going on?” she asked.
  prefs: []
  type: TYPE_NORMAL
- en: “Nothing,” Frank said.
  prefs: []
  type: TYPE_NORMAL
- en: “Oh, come off it,” Notation snapped. “Ever since the prison, you’ve been holding
    something back. Why are we looking at transfer requests? How come you never mentioned
    them before? What did you find?”
  prefs: []
  type: TYPE_NORMAL
- en: “As I said, it’s a hunch.”
  prefs: []
  type: TYPE_NORMAL
- en: “I don’t buy it. You aren’t telling me something.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank didn’t answer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0154-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Got it,” called Socks. “I think so, at least. We’ll see in a minute.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks turned to the stack of ledgers and began muttering an incantation. He
    waved his arms dramatically but entirely unnecessarily over the paper. With a
    flash, a large binary search tree appeared in the air with each node in the tree
    representing the number of days since that transfer date. The nodes hung in the
    air, connected by electric blue lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0154-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Now we range search,” said Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “I told you, I don’t—” started Socks, but Frank waved him off.
  prefs: []
  type: TYPE_NORMAL
- en: “We’ll use a modified depth-first search,” Frank explained. “Start at the top
    node, the root node, and explore down the tree.”
  prefs: []
  type: TYPE_NORMAL
- en: “Explore how?” asked Socks.
  prefs: []
  type: TYPE_NORMAL
- en: “At each node, you follow three steps. First, you check if the node itself falls
    into the range. If it does, like 55 days here, then we’ll save it to our list
    of results. Otherwise, we ignore it.”
  prefs: []
  type: TYPE_NORMAL
- en: “Hold on a second,” said Socks. “I’ll make the nodes in our list glow a different
    color. What about dark green?”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0155-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Sure. Whatever,” Frank replied. “After we check the current node, we check
    whether we need to explore either child node. We recursively explore the left
    and right subtrees if, and only if, they could have nodes in the correct range.”
  prefs: []
  type: TYPE_NORMAL
- en: “Recursively explore?” asked Socks.
  prefs: []
  type: TYPE_NORMAL
- en: Frank waited for Notation to jump in with one of her formal definitions, but
    she remained stubbornly silent. He sighed and explained, “*Recursively* just means
    we apply the same algorithm to subproblems. In this case, we apply the same search
    to each of the child nodes. We treat them the same way we do the root node.
  prefs: []
  type: TYPE_NORMAL
- en: “Just check whether we need to explore the children, and, if so, apply the same
    steps. We’ll use a simple test and compare the *current* node’s value with our
    range. If the current node’s value is *less* than the *lower* end of the range,
    we know everything in the left subtree would fall below our range and we can skip
    that subtree. Alternatively, if the current node’s value is *greater* than the
    *lower* end of our range, we will need to continue our search on the left child.
  prefs: []
  type: TYPE_NORMAL
- en: “The same logic applies to the right subtree. If the current node’s value is
    *greater* than the *higher* end of our range, we can skip the right subtree. Otherwise,
    we repeat our search on the right child.
  prefs: []
  type: TYPE_NORMAL
- en: “In this case, our range is 50 to 70, and as the left child can have values
    up to 55, nodes in that subtree could fall within our range, so we need to explore
    the left child. The right child can have values above 55, which also overlaps
    our range, so we need to explore that as well. Start with the left child.
  prefs: []
  type: TYPE_NORMAL
- en: “Now we have 22 days,” continued Frank. “We don’t put it on our list. And because
    everything in the left subtree has to be less than 22, we don’t need to explore
    down that path either.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “We call this *pruning* the exploration,” added Notation. “Because it’s like
    cutting off the branch of a tree.”
  prefs: []
  type: TYPE_NORMAL
- en: When Frank looked over, she scowled as she remembered she wasn’t talking to
    him and fell silent.
  prefs: []
  type: TYPE_NORMAL
- en: “So we only explore the right child,” said Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Recursively!” added Socks with all too much glee.
  prefs: []
  type: TYPE_NORMAL
- en: “Yes, recursively,” agreed Frank dryly. “Now we get 38\. Again, it doesn’t go
    on the list, and we can skip the left branch.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0157-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “But we need to recursively explore the right branch,” said Socks, who was thoroughly
    enjoying the new algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Frank nodded.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0157-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next node had no children. It was a dead end.
  prefs: []
  type: TYPE_NORMAL
- en: “Now what?” asked Socks.
  prefs: []
  type: TYPE_NORMAL
- en: “Same thing as in a depth-first search,” said Frank. “We backtrack and take
    unexplored paths until we’ve searched the whole tree. In this case, we’ve already
    pruned a lot of paths, so we need to backtrack to the root.”
  prefs: []
  type: TYPE_NORMAL
- en: The search progressed down the root’s right subtree. New matches were added
    to the result list, incompatible paths were pruned, and compatible paths were
    explored recursively.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0158-01.jpg)![image](../images/f0159-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By the end, they had identified a handful of transfers that fell within the
    target range. Frank studied the list intently, looking for anything suspicious.
  prefs: []
  type: TYPE_NORMAL
- en: “Nothing,” he growled in disbelief. “There’s nothing here.”
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: BINARY SEARCH TREES**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: 'The range search algorithm on a binary search tree is similar to the search
    for a single value. The algorithm starts at the top node and recursively explores
    down the tree. At each node, it makes decisions based on three questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Should this node be added to the results?** The current value should be added
    to the results if, and only if, it falls within the range.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Should the left subtree be explored?** The algorithm should recursively explore
    the left subtree if there is a left child and the value of the current node is
    *greater than* the smallest value in the range. In that case, there *could* be
    a node in the left subtree that falls within the range.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Should the right subtree be explored?** The algorithm should recursively
    explore the right subtree if there is a right child and the value of the current
    node is *less than* the largest value in the range. In that case, there *could*
    be a node in the right subtree that falls within the range.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The advantage of using a binary search tree for range search is that you may
    be able to save computation by pruning out large amounts of the search space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following binary tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0161-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are searching for all values within the range [8, 20], you need to visit
    and evaluate only 7 of the 25 nodes (visited nodes are shaded):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0161-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, if you are searching within the range [70, 80], you need to visit
    and evaluate only 6 of the 25 nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0161-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It’s important to note that visiting a node doesn’t necessarily mean that it
    will appear in the result list. Both of the example searches still have to visit
    nodes that fall outside the range, because those nodes’ subtrees could contain
    values within the range.
  prefs: []
  type: TYPE_NORMAL
- en: As with a search for a single value, using a binary search tree for range search
    is efficient only if you’re conducting multiple searches. Constructing a binary
    search tree is more expensive than doing a linear scan through the data. However,
    the cost of building a tree can be spread out over many searches to make the average
    cost per search lower.
  prefs: []
  type: TYPE_NORMAL
