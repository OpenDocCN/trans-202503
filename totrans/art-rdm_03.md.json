["```\n> python3 sim_pi.py 10000 pcg64\npi = 3.16120000\n```", "```\n> python3 sim_pi.py 1_000_000 pcg64\npi = 3.14157600\n```", "```\n> python3 sim_pi.py 100_000_000 pcg64\npi = 3.14180732\n```", "```\n> python3 sim_pi.py 100_000_000 mt19937\npi = 3.14151340\n> python3 sim_pi.py 100_000_000 urandom\npi = 3.14148696\n> python3 sim_pi.py 100_000_000 rdrand\npi = 3.14139680\n> python3 sim_pi.py 100_000_000 minstd\npi = 3.14156084\n> python3 sim_pi.py 100_000_000 RandomDotOrg.bin\npi = 3.14161204\n```", "```\n> python3 sim_pi_quasi.py 10000 2 3\npi = 3.14480000\n> python3 sim_pi_quasi.py 100000 2 3\npi = 3.14208000\n> python3 sim_pi_quasi.py 1_000_000 2 3\npi = 3.14157200\n```", "```\n> python3 sim_pi_quasi.py 10_000_000 2 3\npi = 3.14159680\n```", "```\nimport sys\nfrom RE import *\n def Simulate(N, rng):\n    v = rng.random(2*N)\n    x = v[::2]\n    y = v[1::2]\n    d = x*x + y*y\n    inside = len(np.where(d <= 1.0)[0])\n    return 4.0*inside/N\n\nN = int(sys.argv[1])\nkind = sys.argv[2]\nrng = RE(kind=kind)\npi = Simulate(N, rng)\nprint(\"pi = %0.8f\" % pi)\n```", "```\n> python3 birthday.py 11 minstd\n11 people in the room, probability of at least 1 match = 0.140430\n```", "```\n> python3 birthday.py 11 minstd 11.npy\n11 people in the room, probability of at least 1 match = 0.142610\n > python3\n>>> import numpy as np\n>>> d = np.load(\"11.npy\")\n>>> d\narray([85739, 13462,   663,   125,    10,     0,     0,     1])\n```", "```\nimport sys\nimport numpy as np\nfrom RE import *\n\ndef Simulate(rng, M):\n    matches = []\n    for n in range(100_000):\n        match = 0\n        bdays = rng.random(M)\n        for i in range(M-1):\n            for j in range(i+1,M):\n                if (bdays[i] == bdays[j]):\n                    match += 1\n        matches.append(match)\n matches = np.array(matches)\n    return np.bincount(matches)\n\npeople = int(sys.argv[1])\nrng = RE(kind=sys.argv[2], low=0, high=365, mode=\"int\")\nmatches = Simulate(rng, people)\nprob = matches[1:].sum() / matches.sum()\nprint(\"%d people in the room, probability of at least 1 match = %0.6f\" % (people, prob))\nif (len(sys.argv) == 4):\n    np.save(sys.argv[3], matches)\n```", "```\n> python3 darwin_static.py 500 60 0.01 4 minstd darwin_static.png 73939133\n```", "```\n> python3 darwin_slow.py 500 60 0.01 4 0.01 mt19937 darwin_slow.png 66\n```", "```\n> python3 darwin_catastrophic.py 500 60 0.01 4 0.01 pcg64 darwin_catastrophic.png 12345\n```", "```\n> python3 darwin_drift.py 500 60 0.01 4 0.2 pcg64 darwin_drift 1337\n```", "```\nPopulation mean = 4.562900\nSub-population means:\n  3.60, 4.42, 4.52, 4.82, 4.36, 5.40, 4.72, 4.54, 4.24, 4.28,\n  4.76, 4.66, 4.98, 4.90, 4.50, 4.50, 5.10, 4.44, 4.30, 4.62\n```", "```\n❶ ngen = int(sys.argv[1])\n   advantage = int(sys.argv[2])\n   mutation = float(sys.argv[3])\n   good = float(sys.argv[4])\n   kind = sys.argv[5]\n   oname = sys.argv[6]\n   if (len(sys.argv) == 8):\n       seed = int(sys.argv[7])\n       rng = RE(kind=kind, seed=seed)\n   else:\n       rng = RE(kind=kind)\n\n❷ npop = 384\n   pop = np.zeros((npop, 6))\n   for i in range(npop):\n    ❸ pop[i,:] = (16*rng.random(6)).astype(\"uint8\")\n   environment = (16*rng.random(6)).astype(\"uint8\")\n   hpop = np.zeros((ngen,npop,6))\n   henv = np.zeros((ngen,6))\n\n❹ for g in range(ngen):\n    ❺ fitness = np.zeros(npop)\n       for i in range(npop): d = np.sqrt(((pop[i]-environment)**2).sum())\n           if (d < good):\n               d = good\n           fitness[i] = d\n\n    ❻ idx = np.argsort(fitness)\n       pop = pop[idx]\n       fitness = fitness[idx]\n\n    ❼ hpop[g,:,:] = pop\n       henv[g,:] = environment\n       print(\"%6d: fitness = %0.8f\" % (g, fitness.mean()))\n\n    ❽ nxt = []\n       for i in range(npop):\n           nxt.append(Mate(pop,fitness,advantage))\n       pop = np.array(nxt)\n```", "```\ndef Mate(pop, fitness, advantage):\n    a = advantage / 1000\n    i = int(len(pop)*np.random.beta(1,1+a))\n    j = i\n    while (j == i):\n        j = int(len(pop)*np.random.beta(1,1+a))\n    c = int(6*rng.random())\n    org = np.hstack((pop[i][:c], pop[j][c:]))\n\n    if (rng.random() < mutation):\n        c = int(6*rng.random())\n        org[c] = int(16*rng.random())\n    return org\n```", "```\nif (rng.random() < eprob):\n    offset = 2*rng.random(6)-1\n    environment = environment + offset\n    environment = np.maximum(0,np.minimum(15,environment))\n    environment = (environment + 0.5).astype(\"uint8\")\n```", "```\nif (rng.random() < eprob):\n    environment = (16*rng.random(6)).astype(\"uint8\")\n```", "```\n> python3 bertrand0.py 500 b0.png mt19937 359\nProbability is approximately 154/500 = 0.3080000\n```"]