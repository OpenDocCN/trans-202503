- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">14</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    THE FRONTEND</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll build the frontend using React components and Next.js
    pages, discussed in [Chapters 4](chapter4.xhtml) and [5](chapter5.xhtml). By the
    end, you’ll have an initial version of the app to which you can add OAuth authentication.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Overview of the User Interface</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our application will consist of three Next.js pages. The *start page* will
    show the list of locations retrieved from the database. Each item in the list
    will link to its respective *location detail page*, whose URL we’ll construct
    using the location’s ID, like this: */location/:location_id*. The third page is
    the user’s *wish list page*. It resembles the start page and follows the same
    dynamic URL pattern as the location detail page, except it supplies the user’s
    ID instead of the location’s. This page shows only the locations already added
    to the wish list.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: We must also consider what rendering strategy to use for each page. Because
    the content of the start page never changes, we’ll use static site generation
    (SSG) to render the HTML on build time. Because the detail page and wish list
    page will change based on the user’s actions, we’ll use static site rendering
    (SSR) to regenerate them upon every request.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, all three pages should have headers containing the logo and a link to
    the start page. When we add the OAuth data in the next chapter, we’ll show the
    user’s name, a link to the user’s wish list, and the sign-in/sign-out button in
    the header as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we need to create the following React components:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The locations list component, which will use the locations list item component
    to render the list of locations on the start page. Later, we’ll use these same
    components to implement the list of locations on a user’s wish list page.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overall layout component, header component, and logo component, which define
    the global layout of each page.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The authentication element component, which lets users log in or out in the
    header.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A universal button component we’ll use for different tasks.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin with the components necessary for the start page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Start Page</samp>
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll begin by crafting the smallest parts of the user interface and then use
    these to build the more complex components and pages. On the start page, we need
    the layout component, the locations list component, and the locations list item
    component, which is the smallest building block, so we’ll start there.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Create the *components* folder in the application’s root directory, next to
    the *middleware* folder. This is where we’ll place all our React components, in
    their own folders.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The List Item</samp>
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The locations list item component represents a single item in a list of locations.
    Create the *locations-list-item* folder and add two files, *index.tsx* and *index.module.css*,
    following the pattern we discussed in [Chapter 5](chapter5.xhtml). Then add the
    code in [Listing 14-1](chapter14.xhtml#Lis14-1) to *index.module.css*. We’ll use
    this CSS to style the component.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 14-1: The components/locations-list-item/index.module.css file'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The CSS module uses dark letters on a white background. In addition, it adds
    a simple hover effect, causing the background to turn blue and the font color
    white when a user hovers over it. We remove the list marker and set the margin
    and padding accordingly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Now add the code from [Listing 14-2](chapter14.xhtml#Lis14-2) to the *index.tsx*
    file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 14-2: The components/locations-list-item/index.tsx file'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: You should be familiar with this file’s structure from [Chapter 5](chapter5.xhtml).
    First we import the *next/link* component, which we need to create a link to the
    detail page, the styles we just added, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationType</samp>
    from the Mongoose schema.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: We then define the <samp class="SANS_TheSansMonoCd_W5Regular_11">PropsInterface</samp>,
    a private interface used for the component’s properties object. The component
    has the usual <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp> parameter
    whose structure defines the <samp class="SANS_TheSansMonoCd_W5Regular_11">PropsInterface</samp>
    and returns a JSX element. These props hold the data in the <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp>
    property, which we pass to the component through its <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp>
    attribute. Finally, we define the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationsListItem</samp>
    component and store it in a constant that we export at the end of the file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: In the component itself, we have a list item that contains a Next.js <samp class="SANS_TheSansMonoCd_W5Regular_11">Link</samp>
    element linking to the location’s detail page. These links use a dynamic URL pattern
    that incorporates the respective location’s ID, so we create the link target to
    match */location/:location_id*. In addition, we render the location’s <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cuisine</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">borough</samp>
    values to the component. Keep in mind that until we create the page for the route
    */location/:location_id*, clicking those links will result in a *404* error page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Locations List</samp>
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the list item component, we’ll build the locations list. This component
    will loop through an array of locations and display them on the start page and
    wish list page. Create the *components/locations-list* folder and then add the
    files *index.tsx* and *index.module.css* to them. Copy the code in [Listing 14-3](chapter14.xhtml#Lis14-3)
    to the *index.module.css* file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 14-3: The components/locations-list/index.module.css file'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: The styles for the locations list component are simple; we remove the margin
    and padding from the component’s root element. We create the component itself
    in [Listing 14-4](chapter14.xhtml#Lis14-4), which you should copy to *index.tsx*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 14-4: The components/locations-list/index.tsx file'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: We import the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationsListItem</samp>
    we just implemented, along with the module’s styles and the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationType</samp>
    from Mongoose’s schema. We then define the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">PropsInterface</samp>
    to describe the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp>
    object. In the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationsList</samp>
    component, we use the array <samp class="SANS_TheSansMonoCd_W5Regular_11">map</samp>
    function to iterate over the <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp>
    objects, rendering a <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationsListItem</samp>
    component for each array item and using the <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp>
    attribute to pass the location details to the components. React requires that
    each item rendered in a loop have a unique ID. We use the location IDs for this
    purpose.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: We can now create the start page and pass all available locations to this component.
    Later, we’ll use the same component for the wish list page to return the locations
    on the user’s wish list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Page</samp>
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At this point, we have the components we need for the start page, which is a
    basic Next.js page. Save this page’s global styles in *styles/globals.css* and
    its code in *pages/index.tsx*. [Listing 14-5](chapter14.xhtml#Lis14-5) contains
    the styles. Delete all other files from the *styles* directory. Those are default
    styles we don’t need for the application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 14-5: The styles/globals.css file'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: We set a few global styles, such as the default font family, and change the
    box model to the more intuitive <samp class="SANS_TheSansMonoCd_W5Regular_11">border-box</samp>
    for all elements. By using a <samp class="SANS_TheSansMonoCd_W5Regular_11">border-box</samp>
    instead of a <samp class="SANS_TheSansMonoCd_W5Regular_11">content-box</samp>,
    an element adopts whatever width we assign to it with the <samp class="SANS_TheSansMonoCd_W5Regular_11">width</samp>
    property. Otherwise, the <samp class="SANS_TheSansMonoCd_W5Regular_11">width</samp>
    property would define only the width of the content, and we’d need to add the
    border and padding to calculate the actual dimensions of the element on the page.
    We set the font families to the defaults for each operating system to ensure readability.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Now replace the existing content of the *pages/index.tsx* file with the code
    in [Listing 14-6](chapter14.xhtml#Lis14-6).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 14-6: The pages/index.tsx file'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: We implemented the Next.js page, similar to the structure discussed in [Chapter
    5](chapter5.xhtml). First we import all dependencies; then we create the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">NextPage</samp> and store it in a constant
    that we export at the end of the file ❶.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The Next.js page’s <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp>
    object, the page properties, contains the data we return from the <samp class="SANS_TheSansMonoCd_W5Regular_11">getStaticProps</samp>
    function ❺, discussed in [Chapter 5](chapter5.xhtml). In this asynchronous function,
    we connect to the database ❸. As soon as the connection is ready, we call the
    service method to retrieve all locations ❹ and then pass them as a JSON string
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">NextPage</samp> in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data.locations</samp> property of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp> object. Next.js calls
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">getStaticProps</samp> function
    on build time and generates the HTML for this page only once. We can use this
    rendering method because the list of available locations never changes; it is
    static.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Then we retrieve the locations from the page properties ❷, parse the JSON string
    back to an array, and store the page title in a variable. We type the <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp>
    constant explicitly because TSC cannot easily infer the type. Then we construct
    the JSX. In the first step, we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">next/head</samp>
    component to set the page-specific metadata. Then we call the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationList</samp>
    component we previously implemented with the <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp>
    array in the <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> attribute.
    By doing so, the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationList</samp>
    component renders all locations as an overview list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们从页面属性 ❷ 中获取位置数据，解析 JSON 字符串为数组，并将页面标题存储在一个变量中。我们显式地输入 <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp>
    常量，因为 TSC 无法轻易推断其类型。接着我们构建 JSX。在第一步中，我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">next/head</samp>
    组件设置页面特定的元数据。然后，我们调用之前实现的 <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationList</samp>
    组件，并将 <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> 数组作为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> 属性传入。通过这样做，<samp class="SANS_TheSansMonoCd_W5Regular_11">LocationList</samp>
    组件将所有位置呈现为概览列表。
- en: As soon as you save the file, you should see, in the Docker command line, that
    Next.js recompiles the application. Open the web application at *http://localhost:3000*
    in your browser to see a list of locations similar to [Figure 14-1](chapter14.xhtml#fig14-1).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你保存文件，你应该能够在 Docker 命令行中看到 Next.js 正在重新编译应用程序。打开浏览器中的网页应用程序 *http://localhost:3000*，你会看到类似于
    [图 14-1](chapter14.xhtml#fig14-1) 的位置列表。
- en: '![](../images/Figure14-1.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure14-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_BI_11">Figure 14-1: The start page
    showing all available locations</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_BI_11">图 14-1：显示所有可用位置的开始页面</samp>
- en: Now we’ll move on to styling the frontend and adding basic global components,
    such as the application’s header with the Food Finder logo.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将开始为前端进行样式设计，并添加一些基础的全局组件，比如带有 Food Finder 标志的应用程序头部。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Global Layout Components</samp>
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">全局布局组件</samp>
- en: Now it’s time to create the three global components. These include the overall
    layout component, which we’ll use to format the start and wish list page content,
    a *sticky* header (which is always visible, “sticking” to the browser’s upper
    edge), and the Food Finder logo to go in the header. Again, we’ll start with the
    smallest units and then use those as building blocks for the overall components.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建三个全局组件了。这些组件包括整体布局组件，我们将用它来格式化开始页和愿望清单页的内容，一个 *粘性* 头部（它始终可见，“粘”在浏览器的顶部边缘），以及放在头部的
    Food Finder 标志。我们将从最小的单元开始，然后使用这些单元作为整体组件的构建模块。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Logo</samp>
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">标志</samp>
- en: The smallest component, the logo, is nothing more than a <samp class="SANS_TheSansMonoCd_W5Regular_11">next/image</samp>
    component wrapped in a <samp class="SANS_TheSansMonoCd_W5Regular_11">next/link</samp>
    element; when users click the logo image, they’ll be redirected to the start page.
    Add a *header* folder to the *components* folder, then add a *logo* folder to
    the *header* folder and create two files there, *index.tsx* and *index.module.css*,
    into which you should paste the code in [Listing 14-7](chapter14.xhtml#Lis14-7).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最小的组件，标志，只不过是一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">next/image</samp>
    组件，外面包裹着一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">next/link</samp> 元素；当用户点击标志图像时，他们将被重定向到开始页面。添加一个
    *header* 文件夹到 *components* 文件夹中，然后在 *header* 文件夹里添加一个 *logo* 文件夹，并在其中创建两个文件，*index.tsx*
    和 *index.module.css*，将 [清单 14-7](chapter14.xhtml#Lis14-7) 中的代码粘贴到这两个文件中。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 14-7: The components/header/logo/index.module.css file'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 14-7：components/header/logo/index.module.css 文件
- en: These basic styles for the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">root</samp>
    element set the image’s dimensions. We use a *mobile-first design pattern* by
    initially defining the styles to use on smaller screens and then, using a standard
    CSS media query, modifying them for screens bigger than 600px. We’ll use a bigger
    image on bigger screens.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基本样式用于组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">根</samp> 元素，设置图像的尺寸。我们使用
    *移动优先设计模式*，首先定义用于小屏幕的样式，然后通过标准的 CSS 媒体查询，修改大于 600px 屏幕的样式。我们将在更大的屏幕上使用更大的图像。
- en: Now let’s create the logo component. Create an *assets* subfolder in the Next.js
    *public* folder and place the *logo.svg* file extracted from *assets.zip* into
    it. Then add the code in [Listing 14-8](chapter14.xhtml#Lis14-8) to the logo’s
    *index.tsx* file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 14-8: The components/header/logo/index.tsx file'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: As usual, we import the dependencies and then create an exported constant that
    contains the JSX code. We don’t pass any data to it through attributes or child
    elements; hence, we don’t need to define the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp>
    object here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: We use a basic <samp class="SANS_TheSansMonoCd_W5Regular_11">next/image</samp>
    inside a <samp class="SANS_TheSansMonoCd_W5Regular_11">next/link</samp> element
    to link back to the start page and set the <samp class="SANS_TheSansMonoCd_W5Regular_11">next/image</samp>’s
    attributes to fill the available space defined in the CSS file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Header</samp>
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The header component will wrap the logo component we just created. Create the
    *index.tsx* file and *index.module.css* file in the *header* folder, then add
    the code in [Listing 14-9](chapter14.xhtml#Lis14-9) to the CSS file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 14-9: The components/header/index.module.css file'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the CSS definitions <samp class="SANS_TheSansMonoCd_W5Regular_11">position:
    sticky</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">top: 0</samp>
    to stick the header to the upper edge of the browser. Now the header will automatically
    stay there even when users scroll down the page; the page’s content should scroll
    below the header because we set the header’s <samp class="SANS_TheSansMonoCd_W5Regular_11">z-index</samp>,
    placing the header in front of the other elements. You can think of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">z-index</samp> as determining which floor
    of a building an element is on.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 14-10](chapter14.xhtml#Lis14-10) shows the code for the header component.
    Copy it into the component’s *index.tsx* file.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 14-10: The components/header/index.tsx file'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: We define a basic component that displays the logo. Then we wrap the imported
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Logo</samp> component in an element
    with a global <samp class="SANS_TheSansMonoCd_W5Regular_11">layout-grid</samp>
    class, which we’ll define in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Layout</samp>
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Currently, we have one Next.js page (the start page) and a header component.
    The easiest way to add the header to the page would be to import it into the Next.js
    page and place it directly into the JSX. However, we’ll add two more pages to
    the app, the wish list page and the location detail page, so we want to avoid
    importing the header three times.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: To streamline the overall app design, Next.js provides the concept of a *layout*,
    which is really just another component, and we can use it to add the header component
    as a sibling element to a page’s content. Let’s create a new layout component.
    First, to create this component’s CSS file, add *layout.css* to the *styles* folder
    and paste the code in [Listing 14-11](chapter14.xhtml#Lis14-11) into it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 14-11: The styles/layout.css file'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: We use the mobile-first pattern once again to define a basic grid wrapper, setting
    the global padding and maximum width for the content area. We set the wrapper’s
    left and right <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp>s to
    <samp class="SANS_TheSansMonoCd_W5Regular_11">auto</samp>, which centers the container,
    because the margins take up all available space between the fixed-width wrapper
    and the window’s edges.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: We use <samp class="SANS_TheSansMonoCd_W5Regular_11">flexbox</samp> to set the
    direction of the wrapper’s direct child elements to <samp class="SANS_TheSansMonoCd_W5Regular_11">column</samp>,
    displaying them one on top of the next. Because the logo and all other upcoming
    header elements are direct children of an element with the <samp class="SANS_TheSansMonoCd_W5Regular_11">layout-grid</samp>
    class, they are affected by the <samp class="SANS_TheSansMonoCd_W5Regular_11">flexbox</samp>
    layout. In contrast, the location items aren’t direct siblings. Hence, they won’t
    change their direction when switching between screen sizes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Then we use a media query to adjust the styles for screens whose width is greater
    than 600px. Here we increase the padding and change the layout order of the direct
    child elements. Instead of using <samp class="SANS_TheSansMonoCd_W5Regular_11">column</samp>,
    we set it to <samp class="SANS_TheSansMonoCd_W5Regular_11">row</samp>, and immediately
    we display the elements next to one another.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Because this is a global styles file and not a CSS module, Next.js won’t automatically
    scope the class names. Hence, we prefix them with <samp class="SANS_TheSansMonoCd_W5Regular_11">layout-</samp>
    and don’t import the styles into the component before using them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Now create a *layout* folder inside the *components* folder and add the *index.tsx*
    file to it with the component code in [Listing 14-12](chapter14.xhtml#Lis14-12).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 14-12: The components/layout/index.tsx file'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: In the layout component, we define a private interface and the component with
    the usual structure. Inside the component, we add the <samp class="SANS_TheSansMonoCd_W5Regular_11">Header</samp>
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> element that
    uses the global layout styles and acts as a wrapper for the <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    elements we’ll pass to this component in the *_app.tsx* file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Open the *_app.tsx* file and modify it as shown in [Listing 14-13](chapter14.xhtml#Lis14-13).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 14-13: The pages/_app.tsx file'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: First we add *layout.css* as a global style. As for the layout, we have only
    one <samp class="SANS_TheSansMonoCd_W5Regular_11">layout</samp> component we’ll
    use for all pages, and we import it here. Then we wrap our application, the pages,
    with the layout and pass the current page in the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    property.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Now all our Next.js pages will follow the same structure: they’ll have the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Header</samp> component next to
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> element containing
    the page’s content. One advantage of following this pattern is that the component’s
    state will be preserved across page changes and React component re-rendering.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Once Next.js has recompiled the application, try reloading the application at
    *http://localhost:3000* in your browser. It should look like [Figure 14-2](chapter14.xhtml#fig14-2).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure14-2.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_BI_11">Figure 14-2: The start page
    with the header and layout component</samp>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the header, and the new layout component centers the content.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Location Details Page</samp>
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our application now has a start page with a header and a list of all available
    locations. The list items link to their particular location’s detail page because
    we added a <samp class="SANS_TheSansMonoCd_W5Regular_11">next/link</samp> component
    to them, but those pages don’t exist yet. If you click one of the links, you’ll
    get a *404* error. To display the location details pages, we first need to implement
    the component that lists a particular location’s details and then create a new
    Next.js page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Component</samp>
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s start with the details component. Create the *location-details* folder
    in the *components* directory and add the *index.module.css* and *index.tsx* files
    to it. Then add the code from [Listing 14-14](chapter14.xhtml#Lis14-14) to the
    CSS module.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 14-14: The components/locations-details/index.module.css file'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: The styles for the component are basic. We remove the default margin and padding,
    as well as the list styles, and then add a custom margin at the end of each list
    item and root element.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: To implement the location details component, add the code from [Listing 14-15](chapter14.xhtml#Lis14-15)
    to the *index.tsx* file in the *components/locations-details* folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 14-15: The components/locations-details/index.tsx file'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The locations detail component is structurally similar to the locations list
    item. Both take an object containing the location’s data and add a specific set
    of properties to the returned JSX element. The main difference is in the JSX structure
    we create. Otherwise, we follow the known pattern, importing the required styles
    and type, defining the component’s <samp class="SANS_TheSansMonoCd_W5Regular_11">props</samp>
    interface using the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationType</samp>,
    and then returning a JSX element with the location details.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Page</samp>
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We mentioned in “Overview of the User Interface” on page 215 that a location’s
    detail page should be available at the dynamic URL *location/:location"ePub-I">location*
    folder in the *pages* directory and add the *[locationId].tsx* file containing
    the code in [Listing 14-16](chapter14.xhtml#Lis14-16).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 14-16: The pages/location/[locationId].tsx file'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The start page and location detail page look fairly similar. The only visual
    difference is the page’s title, which we construct with the location’s name ❶,
    and instead of the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationsList</samp>
    component, we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">LocationDetail</samp>
    component with a single location object ❷.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: From a functional perspective, however, the pages are not similar. Unlike the
    start page, which uses SSG, the location detail page uses SSR with <samp class="SANS_TheSansMonoCd_W5Regular_11">getServerSideProp</samp>
    ❸. This is because as soon as we add the wish list functionality and implement
    the Add To/Remove button, the page’s content should change along with a user’s
    action. Hence, we need to regenerate the HTML on each request. We discussed the
    differences between SSR and SSG in depth in [Chapter 5](chapter5.xhtml).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: We use the page’s <samp class="SANS_TheSansMonoCd_W5Regular_11">context</samp>
    and its <samp class="SANS_TheSansMonoCd_W5Regular_11">query</samp> property to
    get the location ID from the dynamic URL ❹. Then we use the ID to get the matching
    location from the database. As before, we use the service directly instead of
    calling the publicly exposed API, as Next.js runs both <samp class="SANS_TheSansMonoCd_W5Regular_11">get...Prop</samp>
    functions on the server side and can directly access the services in our application’s
    middleware.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: We also implement two exit scenarios. First, if there is no result, we throw
    an error to step into the <samp class="SANS_TheSansMonoCd_W5Regular_11">catch</samp>
    block ❺, and by doing so, redirect the user to the *404 Not Found* error page.
    Otherwise, we store the first location from the results in the location property
    ❻ and pass it to the Next.js page function we export in the last line.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve successfully built the frontend for the Food Finder application. At this
    point, you’ve implemented a full-stack web application that reads data from a
    MongoDB database and renders the results as React user interface components in
    Next.js. Next, we’ll add an OAuth authentication flow with GitHub so that users
    can log in with their GitHub account and store a personalized wish list.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
