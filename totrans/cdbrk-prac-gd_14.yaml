- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dictionary codes and book ciphers
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/g14001.png)'
  prefs: []
  type: TYPE_IMG
- en: In 1918, toward the end of World War I, a German radio station sent the following
    message to a recipient in Mexico:^([1](b06.xhtml#c14-endnote-1))
  prefs: []
  type: TYPE_NORMAL
- en: '`49138 27141 51336 02062 49140 41345`'
  prefs: []
  type: TYPE_NORMAL
- en: '`42635 02306 12201 15726 27918 30348`'
  prefs: []
  type: TYPE_NORMAL
- en: '`53825 46020 40429 37112 48001 38219`'
  prefs: []
  type: TYPE_NORMAL
- en: '`50015 43827 50015 04628 01315 55331`'
  prefs: []
  type: TYPE_NORMAL
- en: '`20514 37803 19707 33104 33951 29240`'
  prefs: []
  type: TYPE_NORMAL
- en: '`02062 42749 33951 40252 38608 14913`'
  prefs: []
  type: TYPE_NORMAL
- en: '`33446 16329 55936 24909 27143 01158`'
  prefs: []
  type: TYPE_NORMAL
- en: '`42635 04306 09501 49713 55927 50112`'
  prefs: []
  type: TYPE_NORMAL
- en: '`13747 24255 27143 02803 24909 15742`'
  prefs: []
  type: TYPE_NORMAL
- en: '`49513 22810 16733 41362 24909 17256`'
  prefs: []
  type: TYPE_NORMAL
- en: '`19707 49419 39408 19801 34011 06336`'
  prefs: []
  type: TYPE_NORMAL
- en: '`15726 47239 29901 37013 42635 19707`'
  prefs: []
  type: TYPE_NORMAL
- en: '`42022 30334 06733 04156 39501 03237`'
  prefs: []
  type: TYPE_NORMAL
- en: '`14521 37320 13503 42635 33951 29901`'
  prefs: []
  type: TYPE_NORMAL
- en: '`49117 46633 02062 16636 19707 01426`'
  prefs: []
  type: TYPE_NORMAL
- en: '`11511 42635 11239 04156 02914 12201`'
  prefs: []
  type: TYPE_NORMAL
- en: '`23145 55331 49423 03455 12201 30205`'
  prefs: []
  type: TYPE_NORMAL
- en: '`33951 30219 50015 04156 43827 06420`'
  prefs: []
  type: TYPE_NORMAL
- en: '`23309 19707 33104 42635 00308 29240`'
  prefs: []
  type: TYPE_NORMAL
- en: '`05732 54628 01355 39338 02914 12201`'
  prefs: []
  type: TYPE_NORMAL
- en: '`06420 11511 24909 27142 33951 49223`'
  prefs: []
  type: TYPE_NORMAL
- en: '`49618 42022 42635 17212 55320 15726`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12201 06420 38219 21060 46633 37406`'
  prefs: []
  type: TYPE_NORMAL
- en: '`43644 33558 22527`'
  prefs: []
  type: TYPE_NORMAL
- en: A US listening post recorded the message and forwarded it to MI-8, the US wartime
    codebreaking unit, for analysis. Herbert Yardley, MI-8’s famous lead, soon guessed
    that this cryptogram had been created with a so-called dictionary code.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the analysis of this message as an example in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How dictionary codes and book ciphers work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *dictionary code*, which typically uses a commercially available dictionary,
    records the page and position of a word in the book as its ciphertext representation.
    This chapter’s first example used the English-French half of *Clifton’s Nouveau
    Dictionnaire Français*, according to Yardley’s report. The five-digit group `43827`,
    for instance, stood for the twenty-seventh word listed on page 438 of this dictionary.
    (As we discussed in [Chapter 7](c07.xhtml), a dictionary code is not a cipher
    because it encrypts words, not letters.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list explains the five-letter groups in the cryptogram’s first
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`49138` (p. 491, 38th word): `TELEGRAM`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`27141` (p. 271, 41st word): `JANUARY`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`51336` (p. 513, 36th word): `TWO`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`02062` (p. 20, 62nd word): `AND`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`49140` (p. 491, 40th word): `TELEGRAPHIC`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`41345` (p. 413, 45th word): `REPORT`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Thus, the plaintext starts as follows: `TELEGRAM` `[FROM] JANUARY TWO AND TELEGRAPHIC
    REPORT [FROM] S. ANTHONY DELMAR VIA SPAIN RECEIVED.`'
  prefs: []
  type: TYPE_NORMAL
- en: A similar encryption scheme can be defined with any other book, such as a novel.
    We call these *book ciphers*. As it is usually quite difficult to find a particular
    word in a novel (unless it is a common expression like `THE`, `AND`, or `IF`),
    a book cipher usually references single letters instead of whole words, which
    is why it is a cipher, not a code.
  prefs: []
  type: TYPE_NORMAL
- en: A prominent user of a book cipher was Nicholas Trist (1800–1874), a US diplomat
    sent to Mexico by President James K. Polk in 1848, toward the end of the Mexican-American
    War. Trist negotiated a treaty with the Mexican government, which resulted in
    the annexation of a great deal of territory that became all or part of ten modern
    states.^([2](b06.xhtml#c14-endnote-2))
  prefs: []
  type: TYPE_NORMAL
- en: In order to protect letters sent to and from Washington, Trist needed an encryption
    system. He devised two of them, both book ciphers. See the “Success stories” section
    of this chapter for the sleuthing that was needed to find the correct book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following text is (partially) encrypted in his first cipher:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sir,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`In my last I said, “I consider the probabilities of an early peace very strong.”
    The enclosed will be found to corroborate this belief. 1,2,3,10—15,13,4,1—39,26,11,31—44,75,121,31—/47,1,6,16/7,3,15,20,24,27,28,29/,,8,1,9/,,9,1/,,2,5/,,1,1/,,1,16,29/69,2,1/,,
    6,7/,,2,3,2/,,6,4,6,10,8/ under date July 29: 5,33,25,4—30,105,44,45,58—from a
    foreign merchant to this correspondent here . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The book Trist used was an 1827 textbook for learning Spanish: *True Principles
    of the Spanish Language* by José Borras. Trist probably thought that a book of
    this kind in the possession of an American traveler in Mexico would not raise
    suspicion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each number group in Trist’s first cipher, separated by commas, represents
    one or more letters taken from *True Principles of the Spanish Language* in the
    following way: page, line, letter, letter . . . This means that the group `1,2,3,10`
    encodes two letters, while the group `7,3,15,20,24,27,28,29` encodes six.'
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, `47,1,6,16` encodes two letters. If we know that the first line on
    page 47 is . . .
  prefs: []
  type: TYPE_NORMAL
- en: '`TABLE TWENTY-FIFTH – The fly and the bull`'
  prefs: []
  type: TYPE_NORMAL
- en: . . . then we can conclude that the numbers `47,1,6,16` stand for the letters
    `T` and `H` (the spaces and the dash are not counted). If a number group starts
    with two missing numbers (as in `,,2,3,2`), then the page and line number from
    the previous group are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many other book ciphers have existed in the course of history. We even mentioned
    one in [Chapter 6](c06.xhtml): the system used to encrypt the second Beale cryptogram,
    where the “book” was the Declaration of Independence. Instead of identifying each
    letter with three numbers (page, line, and position), Beale’s cipher recorded
    only the position of words. This means that the first word in the Declaration
    of Independence is number `1`, the second word is number `2`, and so on. To encode
    the plaintext, only the first letter of the word is used.'
  prefs: []
  type: TYPE_NORMAL
- en: Nicholas Trist devised a second cipher based on the same concept as Beale’s
    and using the same book as his other cipher. In a letter, he mentioned “`a short
    note` `[sent] to` `121,13,1,2,17,5,9,20`.” We can decrypt these eight letters,
    encrypted in his second cipher, by looking at the first page of the book ([Figure
    14-1](#figure14-1)). If you attempt this, you’ll see that the expression `121,13,1,2,17,5,9,20`
    decrypts to `MR THNTON`. This probably refers to a Mr. Thornton. (Trist seems
    to have omitted two letters of the name.)
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/f14001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-1: The first page of the book Nicholas Trist used for his book ciphers,
    *True Principles of the Spanish Language*'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary codes and book ciphers were quite popular in the early years of the
    United States. During the American Revolution, Benedict Arnold, a traitor, encrypted
    a number of letters in a book cipher using Sir William Blackstone’s *Commentaries
    on the Laws of England*.^([3](b06.xhtml#c14-endnote-3)) As the book cipher proved
    cumbersome, he soon switched to a dictionary code based on *Nathan* *Bailey’s
    Dictionary*.
  prefs: []
  type: TYPE_NORMAL
- en: Alexander Hamilton, one of the Founders of the United States and the hero of
    the eponymous Broadway musical by Lin-Manuel Miranda, was given a description
    of a dictionary code by his father-in-law, Philip Schuyler, whose system was based
    on the 1777 edition of *Entick’s Spelling Dictionary*.^([4](b06.xhtml#c14-endnote-4))
    History has not recorded whether Hamilton ever used this code, but we do know
    that both the English and the US militaries employed this dictionary for the purposes
    of encryption. British generals Charles Cornwallis and Henry Clinton used it during
    the Revolutionary War, and a record suggests that US Vice President Aaron Burr,
    who killed Hamilton for unrelated reasons in a famous duel in 1804, used the 1805
    version of that same dictionary in his own correspondence.^([5](b06.xhtml#c14-endnote-5))
  prefs: []
  type: TYPE_NORMAL
- en: How to detect a dictionary code or book cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Detecting a dictionary code can be quite simple. For instance, look at the World
    War II–era message shown in [Figure 14-2](#figure14-2).^([6](b06.xhtml#c14-endnote-6))
    This is an English translation of a German telegram.^([7](b06.xhtml#c14-endnote-7))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/f14002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-2: This (translated) telegram from World War II includes two dictionary
    code expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: The numbers `244`, `1345`, and `4992` are probably codegroups from an unidentified
    codebook and are not relevant here.
  prefs: []
  type: TYPE_NORMAL
- en: Of note, this cryptogram contains the expressions `264/6` and `112/3`. The most
    popular encryption methods that produce expressions using this slash format are
    dictionary codes and book ciphers. If this suspicion is correct, `264` in `264/6`
    probably stands for the page, while `6` represents the position of a word or letter.
    In fact, the two expressions were taken from the *Langenscheidt’s Lilliput Dictionary
    English–German*; `264/6` stands for `PIER` and `112/3` for `DECEMBER`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is no visible separation between the page number and the word position,
    detecting a dictionary code or a book cipher is a little more difficult. Such
    a system can, for instance, easily be confused with a code or nomenclator (see
    [Chapter 7](c07.xhtml)). In those cases, here is some helpful information: typically,
    there are fewer than one hundred words on a dictionary page and usually even fewer
    than fifty. So, if a cryptogram contains digit groups in the form `XXXYY`, one
    should check whether `YY` is smaller than fifty in every instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the code may be a reversed system such as `YY-XXX` or some other
    scrambled method. Also, if the number is greater than fifty, a book cipher, where
    larger numbers of words fit on one page, might have been used. For example, the
    Beale system counted the hundreds of words in the Declaration of Independence
    from beginning to end.
  prefs: []
  type: TYPE_NORMAL
- en: How to break a dictionary code or book cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking a dictionary code or book cipher can be very difficult. If the code
    is used properly, and if the cryptanalyst does not know the book, it may even
    be impossible. However, the book can sometimes be found. Also, as is always the
    case in cryptography, the codebreaker can profit from mistakes the encipherer
    has made.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the book or dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most obvious way to break a dictionary code or a book cipher is to find
    the book it is based on. We have already seen an example (probably fictional)
    in [Chapter 6](c06.xhtml): according to the Beale pamphlet, a man deciphered the
    second Beale cryptogram after identifying that it had used the Declaration of
    Independence for encryption.'
  prefs: []
  type: TYPE_NORMAL
- en: Another (definitely fictitious) case occurs in the 1915 Sherlock Holmes novel
    *The Valley of Fear* by Arthur Conan Doyle. In this novel, Holmes receives an
    encrypted message from a certain Fred Porlock and suspects that he is dealing
    with a book-cipher cryptogram. He concludes that the book used is widely available,
    large (with at least 534 pages), and printed in two columns per page. Most almanacs
    meet these conditions exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Holmes first tries the latest edition of *Whitaker’s Almanack*, which he had
    received only a few days earlier, to no avail. He then tries the previous edition
    of the same book—and it works. With this almanac, Holmes is able to decipher the
    message and uncover a warning that “some devilry” is intended. Of course, in the
    end, he solves the case.
  prefs: []
  type: TYPE_NORMAL
- en: Reconstructing the dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In his 1922 book *Cryptography*, Swiss cryptologist André Langie reports on
    the following cryptogram he was asked to solve:^([8](b06.xhtml#c14-endnote-8))
  prefs: []
  type: TYPE_NORMAL
- en: '`5761 3922 7642 0001 9219 6448 6016 4570 4368 7159`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 8576 1378 2799 6018 4212 3940 0644 7262 8686`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7670 4049 3261 4176 6638 4833 4827 0001 3696 6062`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 2137 4049 2485 7948 0300 9712 0300 4212 9576`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2475 8576 8337 0702 9185`'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen, the message consists of forty-five four-digit numbers. At first
    glance, it doesn’t look like a dictionary code, as separating the four-digit numbers
    into “page” numbers and “word” numbers doesn’t make sense unless the dictionary
    used has about a hundred pages with about a hundred entries per page, which is
    not very likely.
  prefs: []
  type: TYPE_NORMAL
- en: But what if the sender of the message numbered the entries of a dictionary from
    beginning to end, without including the page number? This option becomes much
    more likely when we consider that the number `0001` appears twice in this text.
    The first entry in an English dictionary is usually the article *A*. As *A* is
    a common word, it is plausible that it appears twice in a text of this length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume that we may be dealing with a dictionary cipher of this kind.
    Here is a sorted list of the four-digit numbers appearing in the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0001, 0001, 0300, 0300, 0644, 0702, 1378, 2137, 2475, 2485, 2799, 3261, 3696,
    3922, 3940, 4049, 4049, 4176, 4212, 4212, 4368, 4570, 4827, 4833, 5761, 6016,
    6018, 6062, 6448, 6638, 7159, 7262, 7642, 7670, 7948, 8337, 8576, 8576, 8686,
    8686, 8686, 9185, 9219, 9576, 9712`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with `0001`, we see that other groupings are repeated as well: `0300`,
    `4049`, `4212`, `8576`, and `8686`.'
  prefs: []
  type: TYPE_NORMAL
- en: The following table might be helpful. It shows how words with starting letters
    *A* through *Z* are distributed in a dictionary containing the 10,000 most frequent
    English words.^([9](b06.xhtml#c14-endnote-9)) Along with the words’ starting positions,
    this table shows how, for some letters, there are significantly fewer pages of
    entries than for others.
  prefs: []
  type: TYPE_NORMAL
- en: '`A 0001 – 0643`'
  prefs: []
  type: TYPE_NORMAL
- en: '`B 0644 – 1178`'
  prefs: []
  type: TYPE_NORMAL
- en: '`C 1179 – 2160`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D 2161 – 2755`'
  prefs: []
  type: TYPE_NORMAL
- en: '`E 2756 – 3177`'
  prefs: []
  type: TYPE_NORMAL
- en: '`F 3178 – 3599`'
  prefs: []
  type: TYPE_NORMAL
- en: '`G 3600 – 3926`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H 3927 – 4295`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I 4296 – 4717`'
  prefs: []
  type: TYPE_NORMAL
- en: '`J 4718 – 4800`'
  prefs: []
  type: TYPE_NORMAL
- en: '`K 4801 – 4877`'
  prefs: []
  type: TYPE_NORMAL
- en: '`L 4878 – 5216`'
  prefs: []
  type: TYPE_NORMAL
- en: '`M 5217 – 5710`'
  prefs: []
  type: TYPE_NORMAL
- en: '`N 5711 – 5871`'
  prefs: []
  type: TYPE_NORMAL
- en: '`O 5872 – 6109`'
  prefs: []
  type: TYPE_NORMAL
- en: '`P 6110 – 6960`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Q 6961 – 7019`'
  prefs: []
  type: TYPE_NORMAL
- en: '`R 7020 – 7513`'
  prefs: []
  type: TYPE_NORMAL
- en: '`S 7514 – 8715`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T 8716 – 9298`'
  prefs: []
  type: TYPE_NORMAL
- en: '`U 9299 – 9453`'
  prefs: []
  type: TYPE_NORMAL
- en: '`V 9454 – 9637`'
  prefs: []
  type: TYPE_NORMAL
- en: '`W 9638 – 9929`'
  prefs: []
  type: TYPE_NORMAL
- en: '`X 9930 – 9941`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Y 9442 – 9971`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Z 9972 – 10000`'
  prefs: []
  type: TYPE_NORMAL
- en: Now look at group `0300`, which appears twice in the cryptogram. If we are correct
    about the encryption system used, it is very likely that this word starts with
    an `A` and that the second letter is located somewhere in the middle of the alphabet.
    `AND` is a good candidate.
  prefs: []
  type: TYPE_NORMAL
- en: The number `8686` appears three times in the cryptogram, which makes it the
    most frequent digit group in this ciphertext. Close to it is `8576`, which appears
    twice. According to the table we created, the words at these locations should
    start with `S`. But are there two common English words starting with `S` so close
    to each other in the alphabet? `STILL` and `SUCH` might be candidates, but further
    inspection shows that these are not good matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, let’s assume that the letter distribution in the dictionary used by
    the message’s author differs a little from the one in our table. Perhaps looking
    at words starting with `T` will work. In fact, there are two words that seem to
    fit: `THE` and `TO`. This guess is confirmed by the fact that the sequence `8686
    8576` appears in the ciphertext, and `TO THE` is a common word pair.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on our guesses, we can sketch the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`5761 3922 7642 0001 9219 6448 6016 4570 4368 7159`'
  prefs: []
  type: TYPE_NORMAL
- en: '`A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 8576 1378 2799 6018 4212 3940 0644 7262 8686`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TO``THE``TO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7670 4049 3261 4176 6638 4833 4827 0001 3696 6062`'
  prefs: []
  type: TYPE_NORMAL
- en: '`A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 2137 4049 2485 7948 0300 9712 0300 4212 9576`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TO``AND``AND`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2475 8576 8337 0702 9185`'
  prefs: []
  type: TYPE_NORMAL
- en: '`THE`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to try to guess all other starting letters based on the distribution
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`5761 3922 7642 0001 9219 6448 6016 4570 4368 7159`'
  prefs: []
  type: TYPE_NORMAL
- en: '`N G S A T P O I I R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 8576 1378 2799 6018 4212 3940 0644 7262 8686`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TO THE C E O H H B R TO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7670 4049 3261 4176 6638 4833 4827 0001 3696 6062`'
  prefs: []
  type: TYPE_NORMAL
- en: '`S H F H P K K A G O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8686 2137 4049 2485 7948 0300 9712 0300 4212 9576`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TO C H D S AND W AND H Y`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2475 8576 8337 0702 9185`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D THE S B T`'
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, it gets difficult from here. We need to guess more words, but we
    only know the (probable) initial letter of each one.
  prefs: []
  type: TYPE_NORMAL
- en: To make things a little easier, let’s assume that we know a small part of the
    plaintext (i.e., a crib). Say that we have been told that this message is military
    in nature and that it contains information about an enemy offensive. In fact,
    the numbers `2799` and `6018` in the second line might stand for `ENEMY OFFENSIVE`.
    If this is the case, `1378`, which stands between `TO THE` and `ENEMY OFFENSIVE`,
    might be `COMING`. The number `6016` in the first line is pretty close to `6018`
    (`OFFENSIVE`). The most likely decryption is `OF`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second-highest number, `9576`, is probably a `W` word, perhaps `WERE` or
    `WILL`. It is followed by `2475`, a D word, which is itself followed by `THE`.
    What can it be? Alphabetically, it occurs somewhere between `COMING` (`1378`)
    and `ENEMY` (`2799`). The interval between these two is `1421`, and the difference
    between `1378` and `2475` is `1097`, roughly three-fourths of the interval. This
    leads us to the *Dis* and *Dos*. There is another number in the text occupying
    about the same dictionary position: `2485`. Either `2475` or `2485` might be `DO`.
    Suppose we assign `DO` to `2485` and look for a word closely preceding it that
    suits our context. A dictionary file shows us `DIVULGE` and `DIVIDE`. The numbers
    `0300` through `8576` may therefore stand for `AND YOU AND I WILL DIVIDE THE`.'
  prefs: []
  type: TYPE_NORMAL
- en: To solve the rest of the cryptogram, we can use similar guesses. We will certainly
    make a false step occasionally, but every word established strengthens our foothold.
    The more words we guess, the easier it will be to find further ones. Here’s the
    plaintext we finally receive. (The first word is not known but is probably a name
    starting with `M`.)
  prefs: []
  type: TYPE_NORMAL
- en: '`???? HAS SECURED A VALUABLE PIECE OF INFORMATION IN REGARD TO THE COMING ENEMY
    OFFENSIVE. I HAVE BEEN REQUESTED TO SEND HIM FIVE HUNDRED POUNDS. IT IS A GOOD
    OPPORTUNITY TO DENOUNCE HIM. DO SO, AND YOU AND I WILL DIVIDE THE SUM BETWEEN
    US.`'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking a dictionary code in this way is certainly not easy. However, as will
    be shown in the “Success stories” section of this chapter, it is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Treating a book cipher like a simple substitution cipher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on its construction, a book cipher can also be regarded as a simple
    substitution cipher, homophonic cipher, or nomenclator. This means that we can
    solve certain book cipher cryptograms using the techniques for breaking encryptions
    of each of those types. As an example, look at the handwritten dedication we found
    in a used copy of the esteemed Martin Gardner’s 1972 book *Codes, Ciphers and
    Secret Writing*, which is a very basic introduction to cryptology (see [Figure
    14-3](#figure14-3)).^([10](b06.xhtml#c14-endnote-10))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/f14003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-3: A dedication encrypted using a book cipher'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a transcript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1-11,1-9,1-4,1-4,1-12 78-3,3-3,1-8,1-5,1-11,5-1,1-9,1-12`'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple ways to solve this cryptogram, but if we look at it as nothing
    more than a simple substitution cipher, we could use the following strategy. First,
    let’s replace each hyphenated two-number group with a letter, going from left
    to right and introducing a new letter each time we encounter a new number pair.
    That would transcribe this cryptogram as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABCCD EFGHAIBD`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the many words that match the pattern `ABCCD` is `HAPPY`. (A quick way
    to find such word-pattern matches is with a program such as CrypTool 2.) If we
    then replace the letters accordingly, it gives us the following second word: `****H*AY`.
    It’s not very hard from there to guess that the plaintext is `HAPPY BIRTHDAY`.'
  prefs: []
  type: TYPE_NORMAL
- en: As another way of solving it (perhaps the method originally intended), if we
    look at the first paragraph of Gardner’s *Codes, Ciphers and Secret Writing* .
    . .
  prefs: []
  type: TYPE_NORMAL
- en: '`Cryptography, the writing and deciphering of messages . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: . . . we see that we are dealing with a book cipher. Here, `1-11` stands for
    the eleventh letter of the first word, `H`; `1-9` for the ninth letter of the
    first word, `A`; and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Success stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FIDES ads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Between 1862 and 1866, a series of twenty-three advertisements was published
    in the London paper *The Times*. Each ad started with the word `FIDES`, and most
    were at least partially encrypted.^([11](b06.xhtml#c14-endnote-11)) Here are a
    few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1862-10-31`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FIDES (Thought).—No myth, but a neighbouring town, where I shall be detained
    a little time. I shall be in for a few hours on Monday, and must take my chance
    of meeting you between 2 and 3 o’clock. Perhaps I may hear from you meantime.
    Direct to P.O.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1864-06-22`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FIDES.–DOCUMENTS will AWAIT your ARRIVAL at No. 3\. on and after Tuesday next.
    Both of your letters to hand. (58.62) (171.53) (248.74) (152.79) (223.84) (25.21)
    (222.64) (132.74). James gone to Egypt instead.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1864-07-21`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FIDES.–(218.57) (106.11) (8.93) (17.61) (223.64) (146.7) (244.53) (224.21)
    (20) (192.5) (160.19) (99.39) (No. 8) (251.70) (1) (223.64) (58.89) (151.79) (226.69)
    (8.93) (40.12) (149.9) (248.101) (167.12) (252.35) (12.31) (135.100) (149.9) (145.76)
    (225.53) (212.25) (20) (241.6) (222.22) (78.45) (12.31) (66.28) (252.33) (158.33)
    (6.65) (20) (2) (11.50) (142.37) (223.87) (12.31) (142.37) (105.33) (142.37) (157.20)
    (58.62) (133.89) (250.86).`'
  prefs: []
  type: TYPE_NORMAL
- en: Our source for the `FIDES` cryptograms is, of course, the wonderful 2005 book
    *The Agony Column Codes & Ciphers* by Jean Palmer (a pen name of Tony Gaffney),
    which we have referenced many times in previous chapters.^([12](b06.xhtml#c14-endnote-12))
    Gaffney solved most of the encrypted ads listed in his book himself; however,
    he hadn’t yet found a solution to the `FIDES` cryptograms when his book was published
    in 2005.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few years later, Gaffney once again tried to solve the `FIDES` cryptograms,
    this time assuming that he was dealing with a dictionary code, in which case,
    an expression like `146.7` stood for the seventh word on page 146\. Based on frequency
    analysis and cribs provided by the cleartext part of the advertisements, Gaffney
    was able to make some guesses. However, in order to completely solve the mystery,
    he needed to find the dictionary used. After many hours of searching the British
    Library, he had looked through no fewer than forty-eight English dictionaries
    from the nineteenth century. The forty-ninth proved to be the one that fit: *Johnson’s
    Pocket Dictionary of the English Language*, published in 1862.'
  prefs: []
  type: TYPE_NORMAL
- en: From there, it became clear exactly how the code worked. The first number of
    each pair turned out to be the page number plus one. The second number was the
    word number counted from the bottom of the page, starting from the right-hand
    column and then continuing down the left-hand one. In addition, `1` represented
    `I` and `2` represented `YOU`; `20` stood for a comma or a period.
  prefs: []
  type: TYPE_NORMAL
- en: The advertisement dated “1864-06-22” decrypts to `DARLING PRECIOUS WEARY OAF
    THOU BETTER THAN LIFE`. Some of these words might have made sense only to the
    people involved! The complete decryptions are available in Klaus’s 2014 blog post.^([13](b06.xhtml#c14-endnote-13))
  prefs: []
  type: TYPE_NORMAL
- en: Nicholas Trist’s key book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier in this chapter, we mentioned that US diplomat Nicholas Trist used two
    book ciphers to communicate with the US government during his stay in Mexico.^([14](b06.xhtml#c14-endnote-14))
    Crypto-historian Ralph E. Weber described these ciphers in his 1979 book *United
    States Diplomatic Codes and Ciphers*, but he couldn’t decipher all of Trist’s
    messages, as he didn’t know the book Trist had used.^([15](b06.xhtml#c14-endnote-15))
    All he knew was that both of Trist’s ciphers were based on the same book.
  prefs: []
  type: TYPE_NORMAL
- en: A few years later, when cryptologist Stephen M. Matyas read Weber’s book, he
    decided to try to solve the mystery.^([16](b06.xhtml#c14-endnote-16)) Matyas observed
    that Trist mentioned a few facts about his key book in a letter, describing it
    as a small volume containing the dedication “To the British Nation.” He also mentioned
    that it was divided into at least two parts and was written by a person in Washington
    who had been sent to Spain as consul. In addition, Weber found out that the book’s
    text began with the words, “The study of foreign languages . . .”
  prefs: []
  type: TYPE_NORMAL
- en: To identify the author of Trist’s key book, Matyas compiled a list of all people
    who had been sent from Washington to Spain or a Spanish colony as a consul. The
    final list contained approximately fifty people, many of whom, surprisingly, had
    published books. After some research, Matyas identified a man named José Borras
    as the most promising candidate. Borras, a US consul in Barcelona, had published
    a book titled *True Principles of the Spanish Language* in 1827\. This book fit
    with the description, especially because it dealt with a foreign language.
  prefs: []
  type: TYPE_NORMAL
- en: Matyas managed to locate a copy of the book in the Newberry Library in Chicago,
    and it did indeed contain the dedication and starting words he was looking for.
    With a bit more work, the mystery was solved, and Nicholas Trist’s correspondence
    could be deciphered. For examples, see the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How William Friedman broke a Hindu conspiracy encryption
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During World War I, Hindu groups in India began a rebellion against their British
    colonizers, and certain members of these groups operated from the United States
    to deliver arms and logistical support. The US authorities treated the Hindu conspirators
    as criminals violating weapons laws and planning a revolution against the British,
    who were considered friendly.
  prefs: []
  type: TYPE_NORMAL
- en: In 1917, a Scotland Yard representative in the United States forwarded to William
    Friedman a stack of encrypted correspondence that had been intercepted from Hindu
    conspirators. At the time, Friedman’s codebreaking career had just begun.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the letters, the representative provided Friedman with a list of
    suspects, the names of whom he could use as cribs. Unfortunately, neither the
    correspondence nor the suspects’ names have ever been published. The only available
    information about this story (as far as we know) comes from a 1920 report by Friedman
    himself^([17](b06.xhtml#c14-endnote-17)) and a short treatise contained in the
    1996 edition of David Kahn’s book *The Codebreakers*.^([18](b06.xhtml#c14-endnote-18))
    Neither of these provides much information about the content of the encrypted
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: According to Friedman’s report, the encrypted letters consisted of a series
    of numbers in groups of three, such as `7-11-3`, `8-5-6`, and `3-9-15`. After
    preliminary study, Friedman concluded that he was dealing with a book cipher.
    Each figure group seemed to refer to a page, line, and letter position in a certain
    book. For instance, `7-11-3` represented the third letter in line 11 on page 7.
  prefs: []
  type: TYPE_NORMAL
- en: Friedman had no idea which book the conspirators might have used. However, he
    realized that they had not applied their encryption method properly, as only the
    more important parts of the messages were encrypted. The parts left in cleartext
    provided Friedman with helpful hints regarding what the message was about. The
    ciphertext was also presented with word breaks, revealing the lengths of the words,
    and the senders chose the same number groupings to represent certain letters again
    and again, although it would have been more secure to refer to different pages,
    lines, and positions to encode the same character.
  prefs: []
  type: TYPE_NORMAL
- en: Another poor technique used by the conspirators was consecutive sequences, such
    as `7-11-3`, `7-11-4`, `7-11-5`, and `7-11-6`, which revealed that a certain word
    or word part appeared in both the plaintext and the book. For example, the conspirators
    might have encrypted the plaintext word `APPLE` using the word `APPLE` in the
    key book, meaning the ciphertext numbers would have all been consecutive. Moreover,
    the senders often preferred the first appearance of a letter in a line, so frequent
    letters typically received low numbers while the rare ones were represented by
    higher numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'After considerable study, Friedman finally found a passage in one of the encrypted
    messages that appeared to represent the name of one of the suspects. We don’t
    know what this name was, but in his description of the incident, Kahn provides
    another example of a text fragment that Friedman could have guessed. Look at the
    following two encrypted words (each on a different line):'
  prefs: []
  type: TYPE_NORMAL
- en: '![83-1-2 83-1-11 83-1-25 83-1-1 83-1-8 83-1-13 83-1-18 83-1-3 83-1-1 83-1-6[line
    break]83-1-3 83-1-6](image_fi/502727c14/two-line-equation.png)'
  prefs: []
  type: TYPE_IMG
- en: If we number each letter based on its order of appearance, then the letters
    in these two words form the pattern `1234567849 89`. Note that the characters
    `4`, `8`, and `9` are repeated; with modern cryptanalytic tools, this pattern
    could be solved quite quickly. Friedman noticed that the third character in the
    sequence, which appears in the ciphertext as `83-1-25`, has a higher number than
    the other characters, indicating that it was probably the twenty-fifth letter
    of a line in the book. Friedman suspected that this was a rare letter; otherwise,
    the position number would have been lower. Through a mixture of persistence, intuition,
    and luck, he was able to determine that the letter was `V` and that these two
    words were `REVOLUTION IN`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Friedman later wrote:'
  prefs: []
  type: TYPE_NORMAL
- en: From this, fragment by fragment, the plaintext of the messages was constructed,
    and not only the plaintext of the message, but we could state with reasonable
    certainty that on page so-and-so of the unknown book used, line so-and-so of that
    page, appeared the word “Germany.” In another page and line, “government,” and
    elsewhere, “constitution” and the like. From such evidence as that, we deduced
    that the subject matter of this unknown book was political economy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As the trial of the conspirators grew near, the Department of Justice told Friedman
    that they would find it helpful to know the title of the key book in order to
    convince the jury that the messages had been correctly decrypted. Friedman and
    his team consulted book dealers throughout the United States and England, asking
    for a book about political economy that contained certain words at certain positions.
    When the trial opened, however, the book had not been identified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Friedman prepared to explain the cipher in court without referencing the book
    used—and then, while staying in a Chicago hotel, waiting for his testimony to
    be scheduled, he happened to walk past McClurg’s, Chicago’s biggest bookstore.
    Rummaging through the political economy section, he found himself holding the
    book he’d been searching for: *Germany and the Germans*, by Price Collier (1913).
    The mystery was solved just in time.'
  prefs: []
  type: TYPE_NORMAL
- en: When Friedman double-checked his work against the book, he found out that over
    95% of his results were correct. Our sources don’t mention how Friedman’s testimony
    was received, but we know that quite a few of the Hindu conspirators were found
    guilty. This was the first major codebreaking success of Friedman’s career. Many
    others would follow.
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary code message sent to Robert E. Lee
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 14-4](#figure14-4) shows an encrypted note sent to Civil War general
    Robert E. Lee in 1862.^([19](b06.xhtml#c14-endnote-19)) (We found it on the Civil
    War Day by Day website created by the Louis Round Wilson Special Collections Library
    at the University of North Carolina, Chapel Hill,^([20](b06.xhtml#c14-endnote-20))
    and on Satoshi Tomokiyo’s Cryptiana website.^([21](b06.xhtml#c14-endnote-21)))The
    encrypted part of this message consists of units, each of which is composed of
    a number, a letter (`L`, `M`, or `R`), and another number.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/f14004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-4: This message sent to Robert E. Lee is encrypted with a dictionary
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a transcript of the encrypted note provided by crypto-hobbyists David
    Allen Wilson and Thomas Bosbach:'
  prefs: []
  type: TYPE_NORMAL
- en: '`31\. August 2017`'
  prefs: []
  type: TYPE_NORMAL
- en: '`General R.E. Lee April 8th 1862`'
  prefs: []
  type: TYPE_NORMAL
- en: '`There are 45 R 1 here for 174 R 16 40 M 10\. 228 L 33\. More to 108 L 13\.
    250 R 18 of them, 153 R 22 239 L 29\. Will 157 R 17\. Can not the government 195
    R 11 45 R 1 for the 176 M 23 250 R 18? I hope enough for 174 R 16 40 M 10 will
    56 L 26 to-Morrow.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`J.E. Johnston`'
  prefs: []
  type: TYPE_NORMAL
- en: The most likely explanation for this pattern is that the ciphertext passages
    are encrypted using a dictionary code, with the first number of each unit standing
    for the page, the letter for the column (left, middle, or right), and the second
    number for the line. The book, maybe an English dictionary, has at least 250 pages
    and thirty-three lines per page.
  prefs: []
  type: TYPE_NORMAL
- en: Above some of the units, somebody has already written what appears to be proposed
    plaintext representations. For instance, `45 R 1` is decrypted to `ARMS`, while
    `228 L 33` allegedly stands for `ROUTE`. Are these decryptions correct? If so,
    why did the author only decrypt some of the words? Does that second sentence,
    starting with `ROUTE MORE TO`, even make sense? And is it plausible that the word
    `ARMS` is listed on page 45 of a 250-page dictionary, which might only have a
    few pages of words starting with the letter *A*? It is possible that the cipher
    involves additional tricks, like adding a number to the page number, but the encryption
    systems popular during the Civil War are generally not known to be so sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Klaus didn’t know the answers to these questions when he introduced this encrypted
    message on his *Cipherbrain* blog in 2017\. Several readers searched for a dictionary
    that could make sense of the ciphertext sections. This search was simplified by
    the requirements, as there weren’t too many English dictionaries published around
    the 1860s with three columns per page and about 250 pages. Finally, a reader nicknamed
    Davidsch found it: the *Noah Webster, William Greenleaf Webster Dictionary* from
    1857\. It immediately became clear that the alleged plaintext representations
    noted above some of the ciphertext units were wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the dictionary, blog reader Thomas Bosbach soon provided the following
    decryption of the message (the plaintext decryptions are in parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: '`There are 45R1 (cars) here for 174R16 (one) 40M10 (brigade). 228L33 (six)
    more to 108L13 (follow). 250R18 (three) of them, 153R22 (long-) 239L29 (street)
    will 157R17 (march). Can not the government 195R11 (procure) 45R1 (cars) for the
    176M23 (other) 250R18 (three)? I hope enough for 174R14 (one) 40M10 (brigade)
    will 56L26 (come) to-morrow.`'
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dan Brown’s book cipher challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the lower-right corner of the back cover of Dan Brown’s bestselling 2003
    novel *The Da Vinci Code*, a darkly printed circular pattern can be seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c14/g14002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s a transcript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`20 11 11 68 • 1 10 11 61 15 • 5 8 73 11 •`'
  prefs: []
  type: TYPE_NORMAL
- en: Each number refers to the first letter in the respective chapter of the novel.
    (For those readers who do not have the book, we provide this information at [https://codebreaking-guide.com/challenges/](https://codebreaking-guide.com/challenges/).)
    When rearranged correctly, the letters spell out a Latin sentence representing
    a motto of the United States.
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary code challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 2018, Klaus introduced a dictionary code challenge on his blog.^([22](b06.xhtml#c14-endnote-22))
    To create his dictionary, he first looked for a text file containing the 10,000
    most popular words, acronyms, and initialisms of the English language, and then
    he made a few changes (adding words such as “ZZTOP,” deleting a few others, and
    so on) in order to foil any codebreaker trying to guess which file he had used.
    Next, he sorted the words alphabetically in a spreadsheet. The resulting list
    became his codebook, with each word referenced by its position in the list. Here
    are the start and the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0001: A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0002: AAA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0003: AAAA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0004: AACHEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0005: AARON`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0006: AATEAM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0007: AB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0008: ABANDONED`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0009: ABC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0010: ABERDEEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`. . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9992: ZONING`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9993: ZOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9994: ZOOM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9995: ZOOPHILIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9996: ZOPE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9997: ZSHOP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9998: ZSHOPS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9999: ZUT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`10000: ZZTOP`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The word list contains not only full words and abbreviations but also the twenty-six
    letters of the alphabet. These are treated as ordinary words, which means, for
    instance, that `E` comes between `DYNAMICS` and `EACH`. If a word one wants to
    encrypt does not appear on the dictionary list, it can be encoded letter by letter.
    Using this codebook, Klaus encrypted a plaintext consisting of about seventy words,
    which resulted in the following ciphertext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`8456 0619 8928 6116 9216 5992 9061 1263 0001 5326 2272 2827 5884 1142 8993
    4906 8322 6163 8928 6841 6694 3564 8928 7658 6323 8928 1142 0212 0016 6207 4906
    8785 0001 5069 0371 9647 0307 8928 9652 0212 8192 4316 5602 9967 9804 7254 0001
    5385 4424 8928 1449 6163 4714 8949 4692 0001 8515 2212 6205 8928 7278 8131 6163
    4714 9967 9804 3458 0001 9861 1390 2012 0001 2546 8926 9804 4139 9967 9061 2365
    8928 5992 5589`'
  prefs: []
  type: TYPE_NORMAL
- en: Blog reader Norbert Biermann solved this challenge on the same day. Can you
    do it, too?
  prefs: []
  type: TYPE_NORMAL
- en: Unsolved cryptograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two encrypted newspaper advertisements from 1873
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 1873, two encrypted newspaper ads were published in London’s *Daily Telegraph*.^([23](b06.xhtml#c14-endnote-23))^,
    ^([24](b06.xhtml#c14-endnote-24)) They are reproduced here. (Note that `TOUJOURS
    BLEU` is French for `ALWAYS BLUE`.)
  prefs: []
  type: TYPE_NORMAL
- en: '`1873-02-07`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TOUJOURS BLEU.–7.64\. 13,141\. 24.24\. 18,299\. 1,317 8,481X–1,274\. 32,561
    29,375 13,127 28,801\. 32,561\. 21,8 21,221X 28,59\. 39,629\. 28,59 39,629 29,544
    25,138 29,219 7,64X–29,219 17,77 6,582 1,384 16,243 29,219 19,367 8,226 18,176
    33,383X–36,547\. 8,39 2,379 2,4 27,609 32,561 9,324 21,367 9,629 28,59 12,361
    32,104 6,381 1,268 38,498 25,411 32,561 2,140X–1,268 14,527 33,212 38,616 8,335X–2,495
    3,379 20,320 32,561 29,422 1,257 24,24 24,485 40,618 1,268 40,338 15,198\. 21,367X–19,420
    2,407X–25,618 11,390 40,629 32,252 27,538X–18,411 10,422 2,185X–27,254 2,221X–40,204
    8,347 20,388 8,347 40,325 8,347 36,621 8,347 25,239 32,24 1,268 8,306 1,268 8,306
    1,268 5,58 40,629 5,19 5,19 4,386X 22,451 29,329 22,451X–12,262X 15,50 10,66X
    13,572 32,561 1,384 12,579 12,194 40,325X 8,347 7,518 12,629 29,219 26,106 1,624
    21,556X 40,238 16,438 2,555X.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1873-02-27`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ANTETYPE.–8.347, 20.388X 1.317, 12.269, 20.28, 10.622, 15.50, 2.495 8.481\.
    32.561\. 8.501X 1.268, 32,252, 12.455, 1.317, 8.226, 6.630 9.266, 2.4, 7.73X 24.627,
    32.561, 27.556, 31.302\. 28.185, 19.31X 25.264, 1.268, 32.252, 12.629, 29.219,
    2.555X 21.367, 9.629, 12.361, 15.50, 25.138X 1.268, 13.572, 35.562, 2.555X 1.268,
    8.306, 39.558, 11.606, 7.518X 40.204`'
  prefs: []
  type: TYPE_NORMAL
- en: Both ads mainly consist of number groups divided into two parts by a period
    or comma. The numbers before the period/comma are smaller than the ones after
    it, a pattern consistent with a book cipher. An expression such as `12.269` might
    stand for the 269th letter on page twelve of a certain book. The `X` at the end
    of some groups might mean that, instead of one letter, the group represents a
    whole word. Not much more is known about these two cryptograms.
  prefs: []
  type: TYPE_NORMAL
