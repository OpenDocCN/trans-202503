- en: '**1'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blinking an LED**
  prefs: []
  type: TYPE_NORMAL
- en: In this first project, you’ll connect an LED to your Pi and make it blink with
    a python script. Learning how to blink an LED using the GPIO pins is an important
    step in your Pi education; once you know how to control an LED, you can control
    practically any output, whether it’s a motor, a lamp, or even a toaster.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0037-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 5 mm LED
  prefs: []
  type: TYPE_NORMAL
- en: 330 Ω resistor
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE GPIO PINS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *General Purpose Input/Output (GPIO)* pins allow you to connect electronic
    hardware, like LEDs and sensors, to your Pi. They can be used to both read and
    send information, allowing your Pi to interact with the real world.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi 3 Model B board has a double row of 40 GPIO pins, shown in
    [Figure 1-1](ch01.xhtml#ch01fig1). This layout is the same for the Pi 2 Model
    B and Pi 1 Model B+, but slightly different from the Pi 1 Model A and B, which
    have only the first 26 pins. Check the [“Raspberry Pi GPIO Pin Guide”](app01.xhtml#app01)
    on [page 261](app01.xhtml#page_261) if you’re using a board other than the Raspberry
    Pi 3 Model B.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0038-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 1-1:** Raspberry Pi GPIO layout'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to refer to a GPIO pin: its name (which is known as GPIO
    numbering or Broadcom numbering) or by its corresponding pin number (which is
    known as physical numbering). For example, GPIO 25 corresponds to pin 22\. Throughout
    this book, we''ll refer to GPIO pins by their names. GPIO pins can be set to HIGH,
    which outputs 3.3 V and turns a component on, or LOW, which outputs 0 V and turns
    the component off.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| DC power | 3.3 V | 1 | 2 | 5 V | DC power |'
  prefs: []
  type: TYPE_TB
- en: '| SDA1, I²C | GPIO 2 | 3 | 4 | 5 V | DC power |'
  prefs: []
  type: TYPE_TB
- en: '| SCL1, I²C | GPIO 3 | 5 | 6 | GND |  |'
  prefs: []
  type: TYPE_TB
- en: '| GPIO_GCLK | GPIO 4 | 7 | 8 | GPIO 14 | TXD0 |'
  prefs: []
  type: TYPE_TB
- en: '|  | GND | 9 | 10 | GPIO 15 | RXD0 |'
  prefs: []
  type: TYPE_TB
- en: '| GPIO_GEN0 | GPIO 17 | 11 | 12 | GPIO 18 | GPIO_GEN1 |'
  prefs: []
  type: TYPE_TB
- en: '| GPIO_GEN2 | GPIO 27 | 13 | 14 | GND |  |'
  prefs: []
  type: TYPE_TB
- en: '| GPIO_GEN3 | GPIO 22 | 15 | 16 | GPIO 23 | GPIO_GEN4 |'
  prefs: []
  type: TYPE_TB
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| DC power | 3.3 V | 17 | 18 | GPIO 24 | GPIO_GEN5 |'
  prefs: []
  type: TYPE_TB
- en: '| SPI_MOSI | GPIO 10 | 19 | 20 | GND |  |'
  prefs: []
  type: TYPE_TB
- en: '| SPI_MISO | GPIO 9 | 21 | 22 | GPIO 25 | GPIO_GEN6 |'
  prefs: []
  type: TYPE_TB
- en: '| SPI_CLK | GPIO 11 | 23 | 24 | GPIO 8 | SPI_CE0_N |'
  prefs: []
  type: TYPE_TB
- en: '|  | GND | 25 | 26 | GPIO 7 | SPI_CE1_N |'
  prefs: []
  type: TYPE_TB
- en: '| I²C ID EEPROM | DNC | 27 | 28 | DNC | I²C ID EEPROM |'
  prefs: []
  type: TYPE_TB
- en: '|  | GPIO 5 | 29 | 30 | GND |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | GPIO 6 | 31 | 32 | GPIO 12 |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | GPIO 13 | 33 | 34 | GND |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | GPIO 19 | 35 | 36 | GPIO 16 |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | GPIO 26 | 37 | 38 | GPIO 20 |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | GND | 39 | 40 | GPIO 21 |  |'
  prefs: []
  type: TYPE_TB
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The GPIO pins are designed to work at 3.3 V, so if you connect them to higher
    voltages, you’ll permanently damage your Raspberry Pi.*'
  prefs: []
  type: TYPE_NORMAL
- en: The pins highlighted in gray, pins 27 and 28, are DNC, or “do not connect,”
    pins. The Raspberry Pi also has eight GND (ground) pins—highlighted in black in
    the table—for connecting ground to your circuits. There are four power pins, two
    5 V pins and two 3.3 V—highlighted in red and orange, respectively—to supply power.
    Several pins have special features; for example, the pins highlighted in yellow
    are used in serial peripheral interface (SPI) communication, and the ones highlighted
    in green are used for inter-integrated circuit (I²C) communication. You’ll learn
    about these communication protocols in [Project 3](ch03.xhtml#ch03) and [Project
    7](ch07.xhtml#ch07), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING LEDs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LEDs come in a wide variety of sizes, shapes, and colors, and some can even
    mix colors to produce almost any color. In this project you’ll use a simple 5
    mm red LED.
  prefs: []
  type: TYPE_NORMAL
- en: An *LED*, or *light-emitting diode*, is—as its name suggests—a diode that emits
    light. Diodes are electronic components that have *polarity*, meaning they allow
    current to flow in only one direction, from positive to negative. LEDs, like all
    diodes, have a positive connection known as an *anode*, and a negative connection
    known as a *cathode*. The two legs, or *leads*, on LEDs are different lengths
    to help you identify which is positive and which is negative, illustrated in [Figure
    1-2](ch01.xhtml#ch01fig2). The longer lead is the anode (+) and the shorter lead
    is the cathode (–).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0040-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 1-2:** A 5 mm red LED'
  prefs: []
  type: TYPE_NORMAL
- en: FINDING THE RIGHT RESISTOR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'LEDs can handle only so much current before they overload and burn out, which
    can potentially damage the LED and even the Pi board. To prevent this, you must
    always connect LEDs in series with a *resistor*: a small component that limits
    the amount of current passing through it.'
  prefs: []
  type: TYPE_NORMAL
- en: Resistors come in all sorts of values, and you need one that’s strong enough
    to protect your component without being so strong that it limits the component’s
    capabilities. For example, a stronger resistor can dull the light an LED gives
    off. The appropriate resistance value depends on the LED you’re using—most LEDs
    you’ll use in electronics can handle a maximum current rating of 20 mA. For the
    LED in this project, picking up a resistor of any value between 220 Ω and 470
    Ω is fine, and within this range, a lower resistance value will result in a slightly
    brighter LED.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We recommend that you purchase a 1/4 W resistor assortment that spans a wide
    range of resistance values. These will meet most of your needs.*'
  prefs: []
  type: TYPE_NORMAL
- en: The resistance value is indicated by the color bands on the resistor. Resistors
    usually have four bands, as shown in [Figure 1-3](ch01.xhtml#ch01fig3). The first
    two represent the first two digits of the value. The third is a multiplier representing
    the number of zeros after the first two digits. The fourth is the *tolerance*
    of the resistance, which notes the percentage that the actual resistance might
    be above or below the given value. For example, a 330 Ω resistor with a 5 percent
    tolerance might be any value between 313.5 Ω and 346.5 Ω.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0040-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 1-3:** A 330 Ω resistor'
  prefs: []
  type: TYPE_NORMAL
- en: If you need help identifying a resistor, check the resistor color card in [“Decoding
    Resistor Values”](app02.xhtml#app02) on [page 264](app02.xhtml#page_264).
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you’re ready to build your first circuit. All the projects in this book
    use a *solderless breadboard*, which gives you an inexpensive and easy way to
    build circuits without having to connect the components using solder. If you’ve
    never used a breadboard before, make sure to read [“How Does a Breadboard Work?”](ch01.xhtml#ch01box1)
    on [page 42](ch01.xhtml#page_42) before beginning.
  prefs: []
  type: TYPE_NORMAL
- en: To wire an LED to the Raspberry Pi, follow these next steps. Use the wiring
    diagram in [Figure 1-4](ch01.xhtml#ch01fig4) as a reference, and review [Figure
    1-1](ch01.xhtml#ch01fig1) for pin locations if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Connect a blue breadboard rail to one of the Raspberry Pi GND pins (pins 6,
    9, 14, 20, 25, 30, 34, and 39 all provide GND).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the LED into the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the 330 Ω resistor into the breadboard so that one side is connected
    to the LED anode (the longer, positive lead).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other side of the resistor to GPIO 25 (pin 22) with a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the LED cathode (the shorter, negative lead) to the GND power rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0041-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**LISTING 1-1:** Wiring an LED to the Raspberry Pi. The LED lead with a bend
    in it is the anode.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve given you instructions on where to place the resistor, but really it doesn’t
    matter whether it’s connected to the anode or cathode as long as it is connected
    to one. You might wonder why we didn’t just connect the LED cathode directly to
    pin 6 (GND), since we only need the GND rail for that one connection. The reason
    is that it’s good practice to use the breadboard GND rails, which will become
    more useful in more advanced circuits.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW DOES A BREADBOARD WORK?**'
  prefs: []
  type: TYPE_NORMAL
- en: Wiring a circuit using a breadboard is as easy as plugging and unplugging components.
    A breadboard has rows of holes that connect with copper strips underneath, so
    you just need to insert the components into those holes and then use jumper wires
    to connect them. The breadboard holes are connected to each other in a specific
    way, shown here by the orange lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0042-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each individual line is electrically isolated from the others. The horizontal
    lines are the *power rails*, used to connect the power supply: the blue rails
    are used to connect GND and the red rails to connect power. In the middle of the
    breadboard is a divide that splits the rows on either side. You should place your
    components in these rows. Components in the same row, on the same side of the
    center divide, will be connected by the copper strips beneath.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To keep all your projects organized, create a folder called *Projects* in your
    desktop environment to save all your projects’ scripts. Inside the newly created
    folder, create a new folder called *LEDs* where you’ll save the LED projects in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple terms, the blinking LED project works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The LED turns on for 1 second—GPIO 25 set to HIGH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LED turns off for 1 second—GPIO 25 set to LOW.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LED is on again for 1 second—GPIO 25 set to HIGH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LED is off again for 1 second—GPIO 25 set to LOW.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This pattern continues until you tell the program to stop.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we’ll control the Raspberry Pi GPIOs using a Python library
    called gpiozero. The gpiozero library provides a collection of interfaces for
    everyday components like LEDs, buttons, potentiometers, sensors, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code to the Python Editor and save the script as *blinking_led.py*
    inside the *LEDs* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There’s quite a lot going on here, so we’ll go through each major code section
    one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing Libraries**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At ➊ you import `LED` from the gpiozero library to control the GPIO that the
    LED is connected to. Then you import the `sleep()` function from the `time` module
    ➋.
  prefs: []
  type: TYPE_NORMAL
- en: '**Declaring the Pin**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At ➌ you create an `LED` object called `led` that refers to GPIO 25, which is
    the GPIO the LED is connected to. When you create and use this `LED` object, Python
    knows GPIO 25 is an output and thus should be set to HIGH or LOW. After this declaration,
    you can use `led` to refer to your GPIO 25.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting the while Loop**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At ➎ you start a `while` loop with the condition `True`, which means this loop
    will run forever until you stop the program yourself. The lines of code that follow
    the loop declaration are indented, telling Python that this is the content of
    the loop to be run as long as the `while` condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Digital Output**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next you need to set the digital output for the LED. You use the `led.on()`
    function ➏ to set GPIO 25 to HIGH, turning the LED on, and the `led.off()` function
    ➑ to set GPIO 25 to LOW, turning the LED off. There is a pause of 1 second between
    each LED state using the `sleep()` function ➐, which creates the blinking effect.
    The code stops where it is and waits for the amount of time specified in the `delay`
    variable (given in seconds) ➍ before proceeding to the next line of code. This
    allows you to keep the LED on or off for a given period of time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To run the script, first save it and then press **F5** or go to **Run** ▸ **Run
    Module**. Your circuit should look something like Figure 1-5, with your LED turning
    on and off every second. To stop the running program, press CTRL-C.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0044-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 1-4:** The completed project'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you’ve just built your first working project!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best way to learn electronics and programming is by experimenting. Here
    are two simple ideas for modifications you could try:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the delay time in the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the circuit and script to control more than one LED.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See if you can use what you learned in this project to figure out each task.
  prefs: []
  type: TYPE_NORMAL
