- en: '**7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mini Weather Forecaster**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’re going to build a weather forecaster that displays the
    day’s weather for your location on an OLED display. You’ll learn how to make API
    requests, which are really useful for projects that rely on frequently updated
    data, and how to use an OLED display.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0097-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 0.96-inch OLED display
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_SSD1306 library
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE OLED DISPLAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *organic light-emitting diode (OLED)* display this project uses is the
    SSD1306 model: a monocolor, 0.96-inch display with 128×64 pixels, shown in [Figure
    7-1](ch07.xhtml#ch07fig1). Compared to the LCD, which has a reserved space of
    5×8 pixels for each character, the OLED display is much more versatile. It allows
    you to choose which pixels are on and off, enabling you to produce custom text
    and images anywhere in the display. The OLED display also doesn’t require backlight,
    which results in a very nice contrast in dark environments. Additionally, its
    pixels consume energy only when they are on, so the OLED display consumes less
    power than an LCD.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0098-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 7-1:** The SSD1306 0.96-inch monocolor OLED display'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some OLED displays use SPI communication instead of I²C—these will come with
    a different set of pins. Make sure you check the pin layout before purchasing
    your OLED display.*'
  prefs: []
  type: TYPE_NORMAL
- en: This OLED display generally has four pins, GND, VCC, SCL, and SDA (see [Figure
    7-1](ch07.xhtml#ch07fig1)), though you may find that some models come with an
    extra reset pin. Some displays may come with the pins in a different order as
    well—VCC, GND, SCL, SDA—so just pay attention to the labels as you follow this
    project’s instructions.
  prefs: []
  type: TYPE_NORMAL
- en: The OLED display in [Figure 7-1](ch07.xhtml#ch07fig1) uses the Inter-Integrated
    Circuit (I²C) communication protocol to communicate with the Raspberry Pi, for
    which you need the SDA and SCL pins (GPIO 2 and GPIO 3, respectively).
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE OPENWEATHERMAP API**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An application programming interface (API) is a set of functions written by
    software developers to enable anyone to use their data or services. For example,
    the OpenWeatherMap project (*[https://openweathermap.org/](https://openweathermap.org/)*)
    has an API that enables users to request weather data using many different programming
    languages. In this project you’ll use that API to request the day’s weather forecast
    for your chosen location. Learning to use APIs with your Pi is a great skill because
    it allows you access to a wide variety of constantly changing information, such
    as current stock prices, currency exchange rates, the latest news, traffic updates,
    tweets, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenWeatherMap’s free plan provides everything you need to complete this project.
    To use the API you need an API key, known as the *APIID*. To get an APIID:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a browser and go to *[https://openweathermap.org/appid/](https://openweathermap.org/appid/)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Sign up** button and create a free account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be presented with a dashboard that contains several tabs. Select the
    **API keys** tab, as shown in [Figure 7-2](ch07.xhtml#ch07fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0099-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 7-2:** API keys on OpenWeatherMap'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the API keys tab, you’ll see a default key (shown in [Figure 7-2](ch07.xhtml#ch07fig2));
    this is a unique key you’ll need to pull information from the site. Copy and paste
    this key somewhere; you’ll need it in a moment. You can create a new key for each
    separate project if you like, but if you aren’t familiar with using APIs, we’d
    recommend just using the default key provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To pull information on weather in your chosen location, enter the following
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**WARNING**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*APIs are unique to the user and shouldn’t be shared with anyone. In this case,
    whoever has your API key can only request the weather, but if you were using social
    media APIs, for example, you could run into security issues—like strangers getting
    access to your personal information. Don’t share your API keys with anyone.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace your_city with the city you want data for, your_country_code with the
    country code for that city, and your_unique_API_key with the unique API key from
    step 4\. For example, the updated API URL for the town of Porto, Portugal, would
    be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy your URL into your browser, and the API will return a bunch of information
    corresponding to your local weather. [Listing 7-1](ch07.xhtml#ch07list1) shows
    the weather in Porto, Portugal, on the day we wrote this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**LISTING 7-1:** The API response'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*More information on using the API to get weather information is available
    at* [https://openweathermap.org/current](https://openweathermap.org/current).'
  prefs: []
  type: TYPE_NORMAL
- en: This may not look like much now, but next you’ll see how to organize this data
    with tabs and paragraphs to make it more readable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding JSON Syntax**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As you can see, the weather data for your chosen location is stored in a specific
    way, with symbols like `{}[] : ""` and `,`. This syntax is *JavaScript Object
    Notation (JSON)*, a standard for exchanging data in a way that’s convenient for
    computers. In JSON syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Data is represented in name/value pairs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each name is followed by a colon ( `:`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name/value pairs are separated with commas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curly brackets hold objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Square brackets hold arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Listing 7-2](ch07.xhtml#ch07list2) shows how you can organize the API information
    so it’s easier to understand.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 7-2:** The API JSON information rearranged for a clearer structure'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now you can more easily see all the different kinds of information the API provides.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making an API Request**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you have a URL that returns your local weather data. To show you how to
    access the information using Python, we’ll give you an example.
  prefs: []
  type: TYPE_NORMAL
- en: The simple code snippet in [Listing 7-3](ch07.xhtml#ch07list3) requests the
    current maximum temperature in Kelvin for Porto, Portugal, and prints it in the
    Python shell. Replace our URL with your own, and you’ll get the same information
    for your chosen location.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 7-3:** Requesting maximum temperature'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At ➊, you import the requests library, which is essential for making API requests.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋, you create a variable called `weather_data` in which you store the data
    returned after the API request. To make an API request for information, you use
    the command `requests.get('`your_url`')`, with your URL as the argument inside
    single quotes.
  prefs: []
  type: TYPE_NORMAL
- en: At ➌, you create the `temp_max` variable to hold the particular data you’re
    requesting. In this case, you want the maximum temperature.
  prefs: []
  type: TYPE_NORMAL
- en: To get that value, you first convert the `weather_data` variable to JSON with
    the `.json()` method. Then, using the `.get()` method, you access the `temp_max`
    variable, which contains the maximum temperature value. You can see in [Listing
    7-2](ch07.xhtml#ch07list2) that `main` is the top-level parent of the data you
    want to access, `temp_max`, so you need to get through `main` first.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, to access the wind speed you enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You need to go through the parent of `speed`, which is `wind`, to request the
    information about wind speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just want to get the city name, you enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After learning how to make API requests in Python, you’re ready to start this
    project!
  prefs: []
  type: TYPE_NORMAL
- en: '**THE REQUESTS LIBRARY**'
  prefs: []
  type: TYPE_NORMAL
- en: The requests library, also called “HTTP for Humans,” is an Apache2- licensed
    Python library used to send *hypertext transfer protocol (HTTP)* requests. This
    powerful library makes it simple to connect to web servers via HTTP. This capability
    allows you to easily request information from any web page, as you’ve been doing
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simply wire the OLED display to the Pi according to the pinout shown in the
    table. Remember that the pin order may be different on some models, so follow
    the pin labels.
  prefs: []
  type: TYPE_NORMAL
- en: '| **OLED DISPLAY** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| VCC | 3.3 V |'
  prefs: []
  type: TYPE_TB
- en: '| GND | GND |'
  prefs: []
  type: TYPE_TB
- en: '| SDA | GPIO 2 (SDA) |'
  prefs: []
  type: TYPE_TB
- en: '| SCL | GPIO 3 (SCL) |'
  prefs: []
  type: TYPE_TB
- en: '| RST (if existent) | GPIO 24 |'
  prefs: []
  type: TYPE_TB
- en: Check your circuit against [Figure 7-3](ch07.xhtml#ch07fig3) and then move on
    to the software.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0103-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 7-3:** Wiring the OLED display to the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you enter the script, you need to install the Adafruit_SSD1306 library
    to use the OLED with the Raspberry Pi. This library makes it simple to write text
    and draw images on the display. You’ll also need to enable I²C communication so
    the OLED and Pi can communicate.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the Library for the OLED Display**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you haven’t done so already, create a folder called *Libraries* on your
    Desktop. Then, open the terminal and navigate to the *Libraries* folder on your
    Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the OLED library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Adafruit_Python_SSD1306 library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Enabling I²C Communication**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The OLED communicates with the Pi using the I²C communication protocol, so you
    need to enable I²C communication on your Pi. Go to the Desktop main menu and select
    **Preferences** ▸ **Raspberry Pi Configuration**. In the Interfaces tab, enable
    I²C, as shown in [Figure 7-4](ch07.xhtml#ch07fig4), and press **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0104-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 7-4:** Enabling I²C communication'
  prefs: []
  type: TYPE_NORMAL
- en: '**I²C COMMUNICATION PROTOCOL**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I²C*, or *Inter-Integrated Circuit*, is a communication protocol that allows
    communication between multiple *slave* integrated circuits and one master chip.
    The slaves are the devices that respond to the master. The master chip can communicate
    with all slaves, but a slave can only communicate with the master. Both the slave
    and master can transfer data, but that transfer is always controlled by the master.
    In this case, the Raspberry Pi is the master chip and the OLED integrated circuit
    is the slave. The Raspberry Pi supports I²C communication in its GPIO pins through
    the SDA and SCL pins. The biggest advantage of using this communication protocol
    is that you can connect more than one device via I²C using just the SDA and SCL
    pins—no need to use additional pins on the header.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code shown in [Listing 7-4](ch07.xhtml#ch07list4) to the Python
    Editor and save the script as *weather_forecast.py* inside the *Displays* folder
    (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 7-4:** The *weather_forecast.py* script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As usual, your code starts by importing the required libraries ➊. The Adafruit_SSD1306
    library contains the OLED display driver classes. From the Python Imaging Library
    (PIL) you import three modules—`Image`, `ImageDraw`, and `ImageFont`—to create
    an image with the text that you’re going to display on the OLED.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE OLED LIBRARIES**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Adafruit_SSD1306 library refers to everything shown on the OLED display
    as an “image”—even text. The three modules you’re using here have the following
    roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Image creates a new image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageDraw draws the text or icons inside the image and shows what you’ll see
    on the actual OLED display.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageFont sets the text font.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initializing the OLED Display**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Even if your display doesn’t have a reset pin, you need to set the `RST` pin
    in your code. If your display does have a reset pin, it should be connected to
    GPIO 24\. So, in either case, you set `RST` to `24` here ➋.
  prefs: []
  type: TYPE_NORMAL
- en: At ➌, you create a class for your display. For a 128×32 display, create the
    class `SSD1306_128_32`; for a 128×64 display, create the class `SSD1306_128_64`.
    We’ve given both options in the code so you can just uncomment the line that matches
    your display size and comment out the other.
  prefs: []
  type: TYPE_NORMAL
- en: At ➎, you initialize the display library and prepare the display so that you
    can draw text on it. We’ve commented the code heavily to help you understand the
    purpose of each line.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making the API Request**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At ➍, you create a variable called `open_weather_map_url` to hold the API URL.
    Make sure to update this line with your own API URL.
  prefs: []
  type: TYPE_NORMAL
- en: At ➏, you make the API request, after which there are several blocks of code
    that work similarly. We’ll explain the one at ➐, and then you’ll be able to follow
    what the rest are doing. You create a variable, `location`, to get the location.
    This variable is a concatenation of several strings. First, you get the location
    using `weather_data.json().get('name')`, which in this example returns `Porto`.
    You add a hyphen by using `+ ' - '` and then the country code using `weather_data.json().get('sys').get('country')`;
    in this example, it returns `PT`. So, the `location` variable returns `Porto –
    PT`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing Text on the OLED Display**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To draw text on the display, you use the `draw.text()` function, which takes
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: x and y coordinates  Where the text starts being drawn
  prefs: []
  type: TYPE_NORMAL
- en: text  The text to display
  prefs: []
  type: TYPE_NORMAL
- en: font  The font the text will appear in
  prefs: []
  type: TYPE_NORMAL
- en: fill  The pixel brightness—255 is the maximum
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to display the location on the top line of the OLED forecaster,
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `x` and `top` coordinates were defined at ➎. This example uses the default
    library font, though you should feel free to explore other fonts by downloading
    the font files and modifying the code.
  prefs: []
  type: TYPE_NORMAL
- en: The blocks of code to display the weather description, temperature, pressure,
    humidity, and wind are all similar. Note that you need to increment the `to`p
    variable to draw text on the next line of the display.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the lines of code at ➑ display the image on the OLED. The delay time
    at the end determines how fast the loop updates the weather information—in this
    case, every 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Congratulations,
    now you have a tiny weather forecaster that will give you constantly updated data
    on the weather in your chosen location!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use APIs to get way more information than just the weather. With your
    favorite search engine, enter a query like *free API for <thing>* to find an API
    you can access. Here are some ideas to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: Traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Latest news
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stock prices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current Bitcoin exchange rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
