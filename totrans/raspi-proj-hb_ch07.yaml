- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7'
- en: Mini Weather Forecaster**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 小型天气预报器**
- en: In this project, you’re going to build a weather forecaster that displays the
    day’s weather for your location on an OLED display. You’ll learn how to make API
    requests, which are really useful for projects that rely on frequently updated
    data, and how to use an OLED display.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个天气预报器，将你所在位置当天的天气显示在 OLED 显示屏上。你将学习如何发起 API 请求，这对依赖于频繁更新数据的项目非常有用，以及如何使用
    OLED 显示屏。
- en: '![image](../images/f0097-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0097-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 0.96-inch OLED display
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 0.96 英寸 OLED 显示屏
- en: Jumper wires
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Adafruit_SSD1306 library
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit_SSD1306 库
- en: '**INTRODUCING THE OLED DISPLAY**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 OLED 显示屏**'
- en: 'The *organic light-emitting diode (OLED)* display this project uses is the
    SSD1306 model: a monocolor, 0.96-inch display with 128×64 pixels, shown in [Figure
    7-1](ch07.xhtml#ch07fig1). Compared to the LCD, which has a reserved space of
    5×8 pixels for each character, the OLED display is much more versatile. It allows
    you to choose which pixels are on and off, enabling you to produce custom text
    and images anywhere in the display. The OLED display also doesn’t require backlight,
    which results in a very nice contrast in dark environments. Additionally, its
    pixels consume energy only when they are on, so the OLED display consumes less
    power than an LCD.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用的 *有机发光二极管（OLED）* 显示屏是 SSD1306 型号：一款单色、0.96 英寸、128×64 像素的显示屏，如 [图 7-1](ch07.xhtml#ch07fig1)
    所示。与 LCD 显示屏相比，LCD 显示屏为每个字符保留了 5×8 像素的空间，而 OLED 显示屏则更加多功能。它允许你选择哪些像素打开或关闭，从而可以在显示屏的任何位置生成自定义的文本和图像。OLED
    显示屏还不需要背光，因此在黑暗环境下具有非常好的对比度。此外，只有在像素被点亮时，OLED 显示屏才会消耗电能，因此相比 LCD 显示屏，OLED 显示屏的功耗更低。
- en: '![image](../images/f0098-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0098-01.jpg)'
- en: '**FIGURE 7-1:** The SSD1306 0.96-inch monocolor OLED display'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-1：** SSD1306 0.96 英寸单色 OLED 显示屏'
- en: '**NOTE**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Some OLED displays use SPI communication instead of I²C—these will come with
    a different set of pins. Make sure you check the pin layout before purchasing
    your OLED display.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*有些 OLED 显示屏使用 SPI 通信而不是 I²C，这些显示屏将配备不同的引脚。购买 OLED 显示屏之前，请确保检查引脚布局。*'
- en: This OLED display generally has four pins, GND, VCC, SCL, and SDA (see [Figure
    7-1](ch07.xhtml#ch07fig1)), though you may find that some models come with an
    extra reset pin. Some displays may come with the pins in a different order as
    well—VCC, GND, SCL, SDA—so just pay attention to the labels as you follow this
    project’s instructions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该 OLED 显示屏通常有四个引脚：GND、VCC、SCL 和 SDA（见 [图 7-1](ch07.xhtml#ch07fig1)），不过你可能会发现某些型号还带有一个额外的重置引脚。有些显示屏的引脚顺序可能不同——例如
    VCC、GND、SCL、SDA——所以在按照本项目的说明进行操作时，务必留意引脚标识。
- en: The OLED display in [Figure 7-1](ch07.xhtml#ch07fig1) uses the Inter-Integrated
    Circuit (I²C) communication protocol to communicate with the Raspberry Pi, for
    which you need the SDA and SCL pins (GPIO 2 and GPIO 3, respectively).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-1](ch07.xhtml#ch07fig1) 中的 OLED 显示屏使用 I²C（串行外设接口）通信协议与树莓派通信，因此你需要 SDA
    和 SCL 引脚（分别是 GPIO 2 和 GPIO 3）。'
- en: '**USING THE OPENWEATHERMAP API**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 OpenWeatherMap API**'
- en: An application programming interface (API) is a set of functions written by
    software developers to enable anyone to use their data or services. For example,
    the OpenWeatherMap project (*[https://openweathermap.org/](https://openweathermap.org/)*)
    has an API that enables users to request weather data using many different programming
    languages. In this project you’ll use that API to request the day’s weather forecast
    for your chosen location. Learning to use APIs with your Pi is a great skill because
    it allows you access to a wide variety of constantly changing information, such
    as current stock prices, currency exchange rates, the latest news, traffic updates,
    tweets, and much more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）是由软件开发人员编写的一组函数，用于使任何人都能使用他们的数据或服务。例如，OpenWeatherMap 项目 (*[https://openweathermap.org/](https://openweathermap.org/)*)
    提供一个 API，允许用户使用多种编程语言请求天气数据。在这个项目中，你将使用该 API 请求你选择位置的当天天气预报。学会在 Raspberry Pi 上使用
    API 是一项非常有用的技能，因为它让你可以访问各种不断变化的信息，比如当前股价、汇率、最新新闻、交通更新、推文等等。
- en: 'OpenWeatherMap’s free plan provides everything you need to complete this project.
    To use the API you need an API key, known as the *APIID*. To get an APIID:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeatherMap 的免费计划提供了完成此项目所需的所有功能。要使用 API，你需要一个 API 密钥，称为 *APIID*。获取 APIID
    的方法：
- en: Open a browser and go to *[https://openweathermap.org/appid/](https://openweathermap.org/appid/)*.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 *[https://openweathermap.org/appid/](https://openweathermap.org/appid/)。
- en: Press the **Sign up** button and create a free account.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**按钮并创建一个免费账户。
- en: You’ll be presented with a dashboard that contains several tabs. Select the
    **API keys** tab, as shown in [Figure 7-2](ch07.xhtml#ch07fig2).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个包含多个标签的仪表盘。选择**API 密钥**标签，如[图 7-2](ch07.xhtml#ch07fig2)所示。
- en: '![image](../images/f0099-01.jpg)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0099-01.jpg)'
- en: '**FIGURE 7-2:** API keys on OpenWeatherMap'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-2：** OpenWeatherMap 上的 API 密钥'
- en: On the API keys tab, you’ll see a default key (shown in [Figure 7-2](ch07.xhtml#ch07fig2));
    this is a unique key you’ll need to pull information from the site. Copy and paste
    this key somewhere; you’ll need it in a moment. You can create a new key for each
    separate project if you like, but if you aren’t familiar with using APIs, we’d
    recommend just using the default key provided.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 API 密钥标签中，你会看到一个默认密钥（如[图 7-2](ch07.xhtml#ch07fig2)所示）；这是一个独特的密钥，你需要用它从站点拉取信息。将此密钥复制并粘贴到某个地方；稍后你会用到它。如果你愿意，可以为每个独立项目创建一个新的密钥，但如果你不熟悉使用
    API，我们建议你直接使用提供的默认密钥。
- en: 'To pull information on weather in your chosen location, enter the following
    URL:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要拉取你选择位置的天气信息，请输入以下 URL：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**WARNING**'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*APIs are unique to the user and shouldn’t be shared with anyone. In this case,
    whoever has your API key can only request the weather, but if you were using social
    media APIs, for example, you could run into security issues—like strangers getting
    access to your personal information. Don’t share your API keys with anyone.*'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*API 是用户专属的，不应与任何人共享。在这种情况下，拥有你的 API 密钥的人只能请求天气数据，但如果你使用的是社交媒体 API，例如，你可能会遇到安全问题——比如陌生人获得了你的个人信息。请勿与任何人共享你的
    API 密钥。*'
- en: 'Replace your_city with the city you want data for, your_country_code with the
    country code for that city, and your_unique_API_key with the unique API key from
    step 4\. For example, the updated API URL for the town of Porto, Portugal, would
    be:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 your_city 替换为你想获取数据的城市，将 your_country_code 替换为该城市的国家代码，将 your_unique_API_key
    替换为第 4 步中的唯一 API 密钥。例如，葡萄牙波尔图的更新 API URL 如下：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Copy your URL into your browser, and the API will return a bunch of information
    corresponding to your local weather. [Listing 7-1](ch07.xhtml#ch07list1) shows
    the weather in Porto, Portugal, on the day we wrote this project.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的 URL 粘贴到浏览器中，API 将返回与你的本地天气相关的大量信息。[列表 7-1](ch07.xhtml#ch07list1)展示了我们编写此项目当天，葡萄牙波尔图的天气。
- en: '**LISTING 7-1:** The API response'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**列表 7-1：** API 响应'
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**NOTE**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*More information on using the API to get weather information is available
    at* [https://openweathermap.org/current](https://openweathermap.org/current).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关如何使用 API 获取天气信息的更多信息，请访问* [https://openweathermap.org/current](https://openweathermap.org/current)。'
- en: This may not look like much now, but next you’ll see how to organize this data
    with tabs and paragraphs to make it more readable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来可能不多，但接下来你会看到如何通过标签和段落组织这些数据，使其更易读。
- en: '**Understanding JSON Syntax**'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**理解 JSON 语法**'
- en: 'As you can see, the weather data for your chosen location is stored in a specific
    way, with symbols like `{}[] : ""` and `,`. This syntax is *JavaScript Object
    Notation (JSON)*, a standard for exchanging data in a way that’s convenient for
    computers. In JSON syntax:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '如你所见，你选择的位置的天气数据以特定的方式存储，包含像 `{}[] : ""` 和 `,` 这样的符号。这种语法是*JavaScript 对象表示法（JSON）*，一种便于计算机交换数据的标准。在
    JSON 语法中：'
- en: Data is represented in name/value pairs.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据以名称/值对的形式表示。
- en: Each name is followed by a colon ( `:`).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个名称后面跟着一个冒号（ `:`）。
- en: Name/value pairs are separated with commas.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称/值对之间由逗号分隔。
- en: Curly brackets hold objects.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花括号用于包含对象。
- en: Square brackets hold arrays.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号用于包含数组。
- en: '[Listing 7-2](ch07.xhtml#ch07list2) shows how you can organize the API information
    so it’s easier to understand.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 7-2](ch07.xhtml#ch07list2)展示了如何组织 API 信息，使其更易理解。'
- en: '**LISTING 7-2:** The API JSON information rearranged for a clearer structure'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 7-2：** 重排后的 API JSON 信息，以更清晰的结构呈现'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now you can more easily see all the different kinds of information the API provides.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以更轻松地查看 API 提供的各种信息。
- en: '**Making an API Request**'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**发起 API 请求**'
- en: Now you have a URL that returns your local weather data. To show you how to
    access the information using Python, we’ll give you an example.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个返回本地天气数据的 URL。为了展示如何使用 Python 访问这些信息，我们将给你一个示例。
- en: The simple code snippet in [Listing 7-3](ch07.xhtml#ch07list3) requests the
    current maximum temperature in Kelvin for Porto, Portugal, and prints it in the
    Python shell. Replace our URL with your own, and you’ll get the same information
    for your chosen location.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 7-3](ch07.xhtml#ch07list3)中的简单代码片段会请求葡萄牙波尔图的当前最大温度（单位为开尔文），并将其打印在Python终端中。用你自己的URL替换我们的网址，就能得到你选择地点的相同信息。
- en: '**LISTING 7-3:** Requesting maximum temperature'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 7-3：** 请求最大温度'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At ➊, you import the requests library, which is essential for making API requests.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊位置，你导入了requests库，这是进行API请求的必备库。
- en: At ➋, you create a variable called `weather_data` in which you store the data
    returned after the API request. To make an API request for information, you use
    the command `requests.get('`your_url`')`, with your URL as the argument inside
    single quotes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋位置，你创建了一个名为`weather_data`的变量，来存储API请求后返回的数据。要进行API请求，你使用命令`requests.get('`your_url`')`，其中`your_url`是你网址的单引号括起来的参数。
- en: At ➌, you create the `temp_max` variable to hold the particular data you’re
    requesting. In this case, you want the maximum temperature.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在➌位置，你创建了`temp_max`变量来存储你请求的特定数据。在这个案例中，你想要获取最大温度。
- en: To get that value, you first convert the `weather_data` variable to JSON with
    the `.json()` method. Then, using the `.get()` method, you access the `temp_max`
    variable, which contains the maximum temperature value. You can see in [Listing
    7-2](ch07.xhtml#ch07list2) that `main` is the top-level parent of the data you
    want to access, `temp_max`, so you need to get through `main` first.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取该值，首先你需要将`weather_data`变量转换为JSON格式，使用`.json()`方法。然后，使用`.get()`方法，你可以访问包含最大温度值的`temp_max`变量。你可以在[清单
    7-2](ch07.xhtml#ch07list2)中看到，`main`是你想要访问的数据的顶级父节点`temp_max`，所以你需要先通过`main`。
- en: 'In the same way, to access the wind speed you enter:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，要访问风速，你需要输入：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You need to go through the parent of `speed`, which is `wind`, to request the
    information about wind speed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要通过`speed`的父节点`wind`来请求风速信息。
- en: 'If you just want to get the city name, you enter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想获取城市名称，可以输入：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After learning how to make API requests in Python, you’re ready to start this
    project!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 学会了如何在Python中进行API请求后，你就准备好开始这个项目了！
- en: '**THE REQUESTS LIBRARY**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**requests库**'
- en: The requests library, also called “HTTP for Humans,” is an Apache2- licensed
    Python library used to send *hypertext transfer protocol (HTTP)* requests. This
    powerful library makes it simple to connect to web servers via HTTP. This capability
    allows you to easily request information from any web page, as you’ve been doing
    here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: requests库，也称为“HTTP for Humans”，是一个Apache2许可的Python库，用于发送*超文本传输协议（HTTP）*请求。这个强大的库让通过HTTP连接到网络服务器变得简单。这个功能使你能够轻松地从任何网页请求信息，就像你在这里所做的那样。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线电路**'
- en: Simply wire the OLED display to the Pi according to the pinout shown in the
    table. Remember that the pin order may be different on some models, so follow
    the pin labels.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 只需根据表格中显示的引脚图将OLED显示器接线到树莓派。记得某些型号的引脚顺序可能不同，所以请按照引脚标签来连接。
- en: '| **OLED DISPLAY** | **RASPBERRY PI** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **OLED显示器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | 3.3 V |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| VCC | 3.3 V |'
- en: '| GND | GND |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| SDA | GPIO 2 (SDA) |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| SDA | GPIO 2 (SDA) |'
- en: '| SCL | GPIO 3 (SCL) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| SCL | GPIO 3 (SCL) |'
- en: '| RST (if existent) | GPIO 24 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| RST (如果存在) | GPIO 24 |'
- en: Check your circuit against [Figure 7-3](ch07.xhtml#ch07fig3) and then move on
    to the software.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的电路与[图 7-3](ch07.xhtml#ch07fig3)中的电路图，并接着进行软件部分的操作。
- en: '![image](../images/f0103-01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0103-01.jpg)'
- en: '**FIGURE 7-3:** Wiring the OLED display to the Raspberry Pi'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-3：** 将OLED显示器接线到树莓派'
- en: '**WRITING THE SCRIPT**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: Before you enter the script, you need to install the Adafruit_SSD1306 library
    to use the OLED with the Raspberry Pi. This library makes it simple to write text
    and draw images on the display. You’ll also need to enable I²C communication so
    the OLED and Pi can communicate.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入脚本之前，你需要安装Adafruit_SSD1306库来在树莓派上使用OLED显示器。这个库让你能够轻松地在显示器上编写文本和绘制图像。你还需要启用I²C通信，以便OLED和树莓派能够通信。
- en: '**Installing the Library for the OLED Display**'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装OLED显示库**'
- en: 'If you haven’t done so already, create a folder called *Libraries* on your
    Desktop. Then, open the terminal and navigate to the *Libraries* folder on your
    Pi:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有创建，请在桌面上创建一个名为*Libraries*的文件夹。然后，打开终端，进入你树莓派上的*Libraries*文件夹：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Clone the OLED library:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆OLED库：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install the Adafruit_Python_SSD1306 library:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Adafruit_Python_SSD1306库：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Enabling I²C Communication**'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启用I²C通信**'
- en: The OLED communicates with the Pi using the I²C communication protocol, so you
    need to enable I²C communication on your Pi. Go to the Desktop main menu and select
    **Preferences** ▸ **Raspberry Pi Configuration**. In the Interfaces tab, enable
    I²C, as shown in [Figure 7-4](ch07.xhtml#ch07fig4), and press **OK**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: OLED通过I²C通信协议与Pi进行通信，因此你需要在Pi上启用I²C通信。进入桌面主菜单，选择**首选项** ▸ **树莓派配置**。在接口选项卡中，启用I²C，如[图7-4](ch07.xhtml#ch07fig4)所示，然后点击**确定**。
- en: '![image](../images/f0104-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0104-01.jpg)'
- en: '**FIGURE 7-4:** Enabling I²C communication'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-4：** 启用I²C通信'
- en: '**I²C COMMUNICATION PROTOCOL**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**I²C通信协议**'
- en: '*I²C*, or *Inter-Integrated Circuit*, is a communication protocol that allows
    communication between multiple *slave* integrated circuits and one master chip.
    The slaves are the devices that respond to the master. The master chip can communicate
    with all slaves, but a slave can only communicate with the master. Both the slave
    and master can transfer data, but that transfer is always controlled by the master.
    In this case, the Raspberry Pi is the master chip and the OLED integrated circuit
    is the slave. The Raspberry Pi supports I²C communication in its GPIO pins through
    the SDA and SCL pins. The biggest advantage of using this communication protocol
    is that you can connect more than one device via I²C using just the SDA and SCL
    pins—no need to use additional pins on the header.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*I²C*，或称*互联集成电路*，是一种通信协议，允许多个*从设备*集成电路与一个主芯片之间进行通信。从设备是响应主设备的设备。主芯片可以与所有从设备通信，但从设备只能与主设备通信。主从设备都可以传输数据，但该传输始终由主设备控制。在这个例子中，树莓派是主芯片，而OLED集成电路是从设备。树莓派通过SDA和SCL引脚支持I²C通信。这种通信协议的最大优势是，你可以通过I²C连接多个设备，只需使用SDA和SCL引脚——无需使用额外的引脚。'
- en: '**Entering the Script**'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code shown in [Listing 7-4](ch07.xhtml#ch07list4) to the Python
    Editor and save the script as *weather_forecast.py* inside the *Displays* folder
    (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，并选择**文件** ▸ **新建文件**以创建一个新脚本。将[清单7-4](ch07.xhtml#ch07list4)中显示的代码复制到Python编辑器，并将脚本保存为*weather_forecast.py*，保存在*Displays*文件夹中（记住，你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 7-4:** The *weather_forecast.py* script'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单7-4：** *weather_forecast.py*脚本'
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As usual, your code starts by importing the required libraries ➊. The Adafruit_SSD1306
    library contains the OLED display driver classes. From the Python Imaging Library
    (PIL) you import three modules—`Image`, `ImageDraw`, and `ImageFont`—to create
    an image with the text that you’re going to display on the OLED.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，你的代码首先导入所需的库➊。Adafruit_SSD1306库包含OLED显示驱动程序类。从Python图像库（PIL）中，你导入三个模块——`Image`、`ImageDraw`和`ImageFont`——用于创建显示在OLED上的文本图像。
- en: '**THE OLED LIBRARIES**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**OLED库**'
- en: 'The Adafruit_SSD1306 library refers to everything shown on the OLED display
    as an “image”—even text. The three modules you’re using here have the following
    roles:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit_SSD1306库将OLED显示屏上显示的所有内容称为“图像”——即使是文本也是如此。你在这里使用的三个模块具有以下功能：
- en: Image creates a new image.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Image创建一个新图像。
- en: ImageDraw draws the text or icons inside the image and shows what you’ll see
    on the actual OLED display.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImageDraw在图像中绘制文本或图标，并显示你将在实际OLED显示屏上看到的内容。
- en: ImageFont sets the text font.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImageFont设置文本字体。
- en: '**Initializing the OLED Display**'
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**初始化OLED显示屏**'
- en: Even if your display doesn’t have a reset pin, you need to set the `RST` pin
    in your code. If your display does have a reset pin, it should be connected to
    GPIO 24\. So, in either case, you set `RST` to `24` here ➋.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你的显示屏没有重置引脚，你也需要在代码中设置`RST`引脚。如果你的显示屏有重置引脚，它应该连接到GPIO 24。因此，无论哪种情况，在这里➋你都将`RST`设置为`24`。
- en: At ➌, you create a class for your display. For a 128×32 display, create the
    class `SSD1306_128_32`; for a 128×64 display, create the class `SSD1306_128_64`.
    We’ve given both options in the code so you can just uncomment the line that matches
    your display size and comment out the other.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在➌处，你为显示器创建一个类。对于128×32显示屏，创建类`SSD1306_128_32`；对于128×64显示屏，创建类`SSD1306_128_64`。我们在代码中给出了这两种选项，你可以直接取消注释与显示屏尺寸匹配的那一行，并注释掉其他行。
- en: At ➎, you initialize the display library and prepare the display so that you
    can draw text on it. We’ve commented the code heavily to help you understand the
    purpose of each line.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎处，你初始化了显示库并准备好显示器，这样你就可以在上面绘制文本了。我们对代码进行了大量注释，帮助你理解每一行的目的。
- en: '**Making the API Request**'
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**发出API请求**'
- en: At ➍, you create a variable called `open_weather_map_url` to hold the API URL.
    Make sure to update this line with your own API URL.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在➍处，你创建了一个名为`open_weather_map_url`的变量来保存API的URL。确保更新这一行，使用你自己的API URL。
- en: At ➏, you make the API request, after which there are several blocks of code
    that work similarly. We’ll explain the one at ➐, and then you’ll be able to follow
    what the rest are doing. You create a variable, `location`, to get the location.
    This variable is a concatenation of several strings. First, you get the location
    using `weather_data.json().get('name')`, which in this example returns `Porto`.
    You add a hyphen by using `+ ' - '` and then the country code using `weather_data.json().get('sys').get('country')`;
    in this example, it returns `PT`. So, the `location` variable returns `Porto –
    PT`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在➏处，你发出API请求，然后有几个代码块执行类似的操作。我们将解释➐处的代码，然后你就能理解其余代码的功能。你创建了一个变量`location`来获取位置。这个变量是几个字符串的连接。首先，你使用`weather_data.json().get('name')`获取位置，在这个例子中返回的是`Porto`。接着，你用`+
    ' - '`添加一个连字符，然后使用`weather_data.json().get('sys').get('country')`获取国家代码；在这个例子中返回的是`PT`。因此，`location`变量的值为`Porto
    – PT`。
- en: '**Drawing Text on the OLED Display**'
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在OLED显示器上绘制文本**'
- en: 'To draw text on the display, you use the `draw.text()` function, which takes
    the following parameters:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要在显示器上绘制文本，你使用`draw.text()`函数，它需要以下参数：
- en: x and y coordinates  Where the text starts being drawn
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: x 和 y 坐标  文本开始绘制的位置
- en: text  The text to display
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: text  要显示的文本
- en: font  The font the text will appear in
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 字体  文本将显示的字体
- en: fill  The pixel brightness—255 is the maximum
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: fill  像素亮度——255是最大值
- en: 'For example, to display the location on the top line of the OLED forecaster,
    use the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在OLED预报器的顶部行显示位置，可以使用以下代码：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `x` and `top` coordinates were defined at ➎. This example uses the default
    library font, though you should feel free to explore other fonts by downloading
    the font files and modifying the code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 和 `top` 坐标在➎处定义。这个例子使用了默认的库字体，但你可以随意探索其他字体，方法是下载字体文件并修改代码。'
- en: The blocks of code to display the weather description, temperature, pressure,
    humidity, and wind are all similar. Note that you need to increment the `to`p
    variable to draw text on the next line of the display.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 显示天气描述、温度、气压、湿度和风速的代码块都很相似。注意，你需要递增`top`变量来在显示器的下一行绘制文本。
- en: Finally, the lines of code at ➑ display the image on the OLED. The delay time
    at the end determines how fast the loop updates the weather information—in this
    case, every 10 seconds.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在➑处的代码行将图像显示在OLED上。结尾的延迟时间决定了循环更新天气信息的速度——在这个例子中，每10秒更新一次。
- en: '**Running the Script**'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Congratulations,
    now you have a tiny weather forecaster that will give you constantly updated data
    on the weather in your chosen location!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**F5**键或进入**运行** ▸ **运行模块**来运行脚本。恭喜你，现在你有一个小型天气预报器，它将不断更新你选择位置的天气数据！
- en: '**TAKING IT FURTHER**'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步拓展**'
- en: 'You can use APIs to get way more information than just the weather. With your
    favorite search engine, enter a query like *free API for <thing>* to find an API
    you can access. Here are some ideas to get you started:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用API获取比天气更多的信息。使用你喜欢的搜索引擎，输入类似 *free API for <thing>* 的查询，找到你可以访问的API。这里有一些想法，帮助你入手：
- en: Traffic
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交通
- en: Tweets
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推文
- en: Latest news
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新新闻
- en: Stock prices
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 股票价格
- en: Current Bitcoin exchange rate
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前比特币汇率
