- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">24</samp> <samp class="SANS_Dogma_OT_Bold_B_11">THE
    ESP32 CAMERA BOARD</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">24</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ESP32
    摄像头板</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: In the past, to use an Arduino with a digital camera, you’d have to hack into
    the camera’s remote-control system and control it with the Arduino’s digital output
    pins. Today, thanks to the release of the inexpensive ESP32 dev board with a camera
    (also known as the ESP32 camera board), you can easily control a small digital
    camera in your projects and save the images for review or streaming over Wi-Fi.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，要在 Arduino 上使用数码相机，你必须破解相机的远程控制系统，并通过 Arduino 的数字输出引脚控制它。如今，得益于价格便宜的 ESP32
    开发板的发布（也称为 ESP32 摄像头板），你可以轻松地在项目中控制小型数码相机，并保存图像以供回顾或通过 Wi-Fi 流媒体传输。
- en: The ESP32 camera board uses the same ESP32 microcontroller with Wi-Fi as found
    on the ESP32 dev board used in [Chapters 19](chapter19.xhtml) through [24](chapter24.xhtml).
    However, the camera board is a much more compact unit and includes a connection
    for a tiny but useful camera module, which is usually included with purchase of
    the ESP32 camera board. It may also be the most complex device you’ve controlled
    with an Arduino-compatible board in this book so far.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ESP32 摄像头板使用与 [第 19 章](chapter19.xhtml) 到 [第 24 章](chapter24.xhtml) 中使用的 ESP32
    开发板相同的带 Wi-Fi 的 ESP32 微控制器。然而，摄像头板是一个更加紧凑的单元，并且包括一个连接小型但实用的摄像头模块，通常在购买 ESP32 摄像头板时会随附该模块。它可能也是本书中你用
    Arduino 兼容板控制的最复杂设备。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将学习如何：
- en: Configure ESP32 camera boards for Arduino
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Arduino 配置 ESP32 摄像头板
- en: Build a simple video-streaming device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的视频流设备
- en: Control ESP32 camera boards to capture still images on command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制 ESP32 摄像头板以按命令捕捉静态图像
- en: <samp class="SANS_Futura_Std_Bold_B_11">Selecting an ESP32 Camera</samp>
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">选择 ESP32 摄像头</samp>
- en: This chapter is based on the AI- Thinker ESP32 CAM module, a small board that
    contains the ESP32 hardware, a microSD memory card socket, a small power regulator,
    and a connector for a small camera. The package should also include the camera
    module.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于 AI-Thinker ESP32 CAM 模块，这是一块小型电路板，包含 ESP32 硬件、microSD 存储卡插槽、小型电源调节器和一个连接器，用于连接小型摄像头模块。包装中通常还会包含摄像头模块。
- en: Some ESP32 camera boards, such as PMD Way part 97263257 (shown in [Figure 24-1](chapter24.xhtml#fig24-1)),
    have no USB interface to save space.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 ESP32 摄像头板，如 PMD Way 的 97263257 部件（如 [图 24-1](chapter24.xhtml#fig24-1) 所示），没有
    USB 接口，以节省空间。
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD SET](../images/fig24-1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![ESP32 摄像头板套件的照片](../images/fig24-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-1: An ESP32 camera
    board</samp>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-1：一块 ESP32 摄像头板</samp>
- en: If that’s the case for the module you purchase, you’ll need a USB-to-serial
    cable like the PL2303TA cable shown in [Figure 24-2](chapter24.xhtml#fig24-2)
    (PMD Way part 727859). You’ll use this cable to power the ESP32 camera for uploading
    sketches and monitoring serial output in the Arduino IDE’s Serial Monitor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你购买的模块是这种情况，你将需要一根 USB 到串行电缆，如 [图 24-2](chapter24.xhtml#fig24-2) 所示的 PL2303TA
    电缆（PMD Way 部件 727859）。你将使用这根电缆为 ESP32 摄像头供电，以便在 Arduino IDE 的串行监视器中上传草图并监控串行输出。
- en: '![A PHOTO OF THE USB-TO-TTL CABLE](../images/fig24-2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![USB 到 TTL 电缆的照片](../images/fig24-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-2: A USB-to-TTL cable</samp>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-2：一根 USB 到 TTL 电缆</samp>
- en: Alternatively, you can source the ESP32 camera with a matching USB interface
    board such as PMD Way part 26409000, shown in [Figure 24-3](chapter24.xhtml#fig24-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以选择带有匹配 USB 接口板的 ESP32 摄像头，例如 PMD Way 的 26409000 部件，如 [图 24-3](chapter24.xhtml#fig24-3)
    所示。
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD WITH THE USB INTERFACE BOARD](../images/fig24-3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![带有 USB 接口板的 ESP32 摄像头板的照片](../images/fig24-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-3: An ESP32 camera
    board with a USB interface board</samp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-3：一块带有 USB 接口板的 ESP32 摄像头板</samp>
- en: I chose the ESP32 camera board used as shown in [Figure 24-1](chapter24.xhtml#fig24-1)
    not only because it’s the most popular model but because it allows you to use
    an external Wi-Fi antenna to enable a greater operational distance from the Wi-Fi
    access point. Usually, the module used is shipped configured to use the external
    antenna. You can still use it without the antenna, but the Wi-Fi range will not
    be optimal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了如图 [图 24-1](chapter24.xhtml#fig24-1) 所示的 ESP32 摄像头板，不仅因为它是最受欢迎的型号，还因为它允许你使用外部
    Wi-Fi 天线，从而使你可以与 Wi-Fi 接入点保持更大的操作距离。通常，出厂时模块已配置为使用外部天线。你仍然可以在没有天线的情况下使用它，但 Wi-Fi
    信号范围将不理想。
- en: After initial experimentation, you may want to substitute your default camera
    lens with a different lens type for zoom or wide-angle photography or use a longer
    cable between the camera and the ESP32 camera board. You can purchase these lenses
    from PMD Way (see part 26401000, for example) or your ESP32 camera board supplier.
    However, these extra camera types aren’t required for the projects in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在初步实验后，你可能希望用不同类型的镜头替换默认的摄像头镜头，用于变焦或广角摄影，或者使用更长的电缆将摄像头与 ESP32 摄像头板连接。你可以从 PMD
    Way 购买这些镜头（例如，查看 26401000 部件）或从你的 ESP32 摄像头板供应商处购买。然而，这些额外的镜头类型并不是本章项目的必要条件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the ESP32 Camera</samp>
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置 ESP32 摄像头</samp>
- en: Once you’ve purchased your ESP32 camera board, you’ll need to set it up to receive
    sketches and operate properly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你购买了 ESP32 摄像头板，你需要进行设置以便接收草图并正常运行。
- en: If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and complete the
    instructions in “Configuring the Arduino IDE for the ESP32” through “Testing the
    ESP32” to get your ESP32 working. Next, connect the ESP32 camera to your PC. If
    you have the USB interface board as shown in [Figure 24-2](chapter24.xhtml#fig24-2),
    connect via a USB cable as usual. If you’re using the alternate USB-to-TTL cable
    for the USB interface, connect the pins of the ESP32 camera to the cable as shown
    in [Table 24-1](chapter24.xhtml#tab24-1).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有完成，转到 [第 19 章](chapter19.xhtml)，并完成“为 ESP32 配置 Arduino IDE”到“测试 ESP32”的步骤，以使你的
    ESP32 正常工作。接下来，将 ESP32 摄像头连接到电脑。如果你有如图 [图 24-2](chapter24.xhtml#fig24-2) 所示的 USB
    接口板，按常规通过 USB 电缆连接。如果你使用的是替代的 USB 到 TTL 电缆连接 USB 接口，请按照 [表 24-1](chapter24.xhtml#tab24-1)
    所示的方式连接 ESP32 摄像头的引脚到电缆。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 24-1:</samp> <samp class="SANS_Futura_Std_Book_11">Connections
    Between ESP32 Camera and USB-TTL Cable</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 24-1：</samp> <samp class="SANS_Futura_Std_Book_11">ESP32
    摄像头与 USB-TTL 电缆的连接</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ESP32 camera pin</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Cable connector</samp> |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ESP32 摄像头引脚</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">电缆连接器</samp>
    |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5V
    (red)</samp> |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5V（红色）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND
    (black)</samp> |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND（黑色）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">U0T</samp> | <samp class="SANS_Futura_Std_Book_11">RX
    (white)</samp> |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">U0T</samp> | <samp class="SANS_Futura_Std_Book_11">RX（白色）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">U0R</samp> | <samp class="SANS_Futura_Std_Book_11">TX
    (green)</samp> |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">U0R</samp> | <samp class="SANS_Futura_Std_Book_11">TX（绿色）</samp>
    |'
- en: If you’re using the USB-to-TTL cable, you must also connect a jumper wire between
    a GND pin and the IO0 pin before uploading a sketch. After uploading the sketch,
    you must disconnect and reconnect the USB cable to the PC and then remove the
    IO0 to GND wire and press the reset button on the board to start the sketch. You’ll
    need to do this every time you upload a sketch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 USB 到 TTL 电缆，在上传草图之前，你还必须将跳线连接到 GND 引脚和 IO0 引脚之间。上传草图后，你必须断开并重新连接 USB
    电缆到电脑，然后移除 IO0 到 GND 的跳线，并按下开发板上的重置按钮以启动草图。每次上传草图时，你都需要执行这些步骤。
- en: Once you’ve connected your ESP32 camera to your PC, open the Arduino IDE and
    set the board to AI Thinker ESP-32 CAM by selecting **Tools** ![](../images/arr.png)
    **Board** ![](../images/arr.png) **esp32**. You may also need to set the USB port
    to the one used by your USB interface by selecting **Tools** ![](../images/arr.png)
    **Port**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 连接ESP32相机到您的PC后，打开Arduino IDE并将开发板设置为AI Thinker ESP-32 CAM，方法是选择**工具** ![](../images/arr.png)
    **开发板** ![](../images/arr.png) **esp32**。您可能还需要通过选择**工具** ![](../images/arr.png)
    **端口**来设置USB端口，以便与您的USB接口匹配。
- en: Open the WiFiScan example sketch included with the Arduino Wi-Fi library. Upload
    this sketch to your ESP32 camera board, and open the Serial Monitor. You should
    see the available Wi-Fi networks in your nearby area listed, as shown in [Figure
    24-4](chapter24.xhtml#fig24-4).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Arduino Wi-Fi库中附带的WiFiScan示例草图。将此草图上传到ESP32相机板，并打开串口监视器。您应该能看到附近可用的Wi-Fi网络列出，如[图24-4](chapter24.xhtml#fig24-4)所示。
- en: '![A SCREENSHOT OF THE WIFISCAN SKETCH’S OUTPUT, SHOWING THE AVAILABLE NETWORK
    AND STRENGTH](../images/fig24-4.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![WiFiScan草图输出的屏幕截图，显示可用的网络和信号强度](../images/fig24-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-4: Example output
    from running the WiFiScan example sketch</samp>'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-4：运行WiFiScan示例草图的输出示例</samp>
- en: The received signal strength indicator (RSSI) value in [Figure 24-4](chapter24.xhtml#fig24-4)
    is a measurement of how well the ESP32 camera board can hear a signal from your
    Wi-Fi access point. The closer to 0, the better the signal. The CH value is the
    Wi-Fi channel to your Wi-Fi access point; most access points have 16 channels.
    Finally, the Encryption type shows which form of encryption protocol is used for
    the listed Wi-Fi access points. If the WiFiScan example sketch worked correctly,
    your ESP32 camera board is ready to use.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图24-4](chapter24.xhtml#fig24-4)中显示的接收信号强度指示器（RSSI）值是一个测量ESP32相机板接收到您Wi-Fi接入点信号强度的指标。数值越接近0，信号越好。CH值是您Wi-Fi接入点的Wi-Fi频道；大多数接入点有16个频道。最后，加密类型显示的是所列Wi-Fi接入点使用的加密协议类型。如果WiFiScan示例草图工作正常，那么您的ESP32相机板已准备好使用。
- en: If your camera didn’t arrive preconnected to the board, you’ll now need to attach
    it. Working slowly and carefully, pry open the black plastic hinged strip across
    the connector, as shown in [Figure 24-5](chapter24.xhtml#fig24-5). It may help
    to use some plastic tweezers instead of your fingers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的相机在送达时没有预先连接到板上，您现在需要进行连接。请小心慢慢地操作，撬开黑色塑料铰链条带，如[图24-5](chapter24.xhtml#fig24-5)所示。使用塑料镊子可能会比用手指更有帮助。
- en: '![A PHOTO OF THE OPEN CAMERA CONNECTOR ON THE ESP32 CAMERA BOARD](../images/fig24-5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![ESP32相机板上的相机连接器打开照片](../images/fig24-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-5: Opening the camera
    cable connector on the ESP32 camera board</samp>'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-5：打开ESP32相机板上的相机电缆连接器</samp>
- en: Slide the camera’s interface cable into the connector on the ESP32 camera board.
    The camera lens should face upward during this process, with the cable sliding
    in just a few millimeters. Don’t exert too much force; if you run into an obstacle,
    the cable has gone far enough, as shown in [Figure 24-6](chapter24.xhtml#fig24-6).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将相机的接口电缆插入ESP32相机板上的连接器。在此过程中，相机镜头应朝上，电缆应滑入几毫米。不要用力过大；如果遇到阻力，电缆已经插入足够深，如[图24-6](chapter24.xhtml#fig24-6)所示。
- en: '![A PHOTO OF THE CAMERA CONNECTOR INSERTED INTO THE ESP32 CAMERA BOARD](../images/fig24-6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![插入到ESP32相机板上的相机连接器照片](../images/fig24-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-6: Inserting the
    camera cable connector on the ESP32 camera board</samp>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-6：将相机电缆连接器插入ESP32相机板</samp>
- en: Finally, push the black plastic hinged strip across the connector down until
    it clicks into place, which also secures the camera connector cable into the ESP32
    camera board, as shown in [Figure 24-7](chapter24.xhtml#fig24-7).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将黑色塑料铰链条带沿连接器方向推下，直到听到“咔嚓”一声，表示已经锁定到位，这样也能将相机连接器电缆固定到ESP32相机板上，如[图24-7](chapter24.xhtml#fig24-7)所示。
- en: '![A PHOTO OF THE CAMERA INSTALLED INTO THE ESP32 CAMERA BOARD](../images/fig24-7.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![安装到ESP32相机板上的相机照片](../images/fig24-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-7: The camera installed
    into the ESP32 camera board</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-7：相机安装到ESP32相机板上</samp>
- en: If there is a protective plastic cover over the lens, carefully remove it by
    pulling the tab on one side of the protector. You’re ready to test your camera
    by using it to stream video across your Wi-Fi network.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果镜头上有保护塑料膜，请小心地拉起保护膜一侧的标签将其取下。现在你可以通过它在Wi-Fi网络中进行视频流测试了。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #69: Streaming Video from
    a Basic Camera Server</samp>'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#69：从基本相机服务器流式传输视频</samp>
- en: In this project, you’ll control the ESP32 camera module remotely over a Wi-Fi
    local-area network using a web browser interface, experimenting with various settings
    on the camera interface to adjust the camera’s image or video stream.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将通过Wi-Fi局域网远程控制ESP32相机模块，使用网页浏览器界面，尝试调整相机界面上的各种设置来调整相机的图像或视频流。
- en: For hardware, you’ll need just the ESP32 camera module and USB interface as
    described in the previous section. For the sketch, you’ll need to download the
    project files from the book’s website at [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians),
    as usual. However, this chapter’s projects include extra files beyond the usual
    *.ino* sketch file. For this project, you only need to open the *project69.ino*
    file, and the Arduino IDE will automatically open the rest. As shown in [Figure
    24-8](chapter24.xhtml#fig24-8), you should see the included files as tabs under
    the menu bar.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于硬件，你只需要按照前一节的描述准备ESP32相机模块和USB接口。对于草图，你需要像往常一样从书籍网站下载项目文件，[*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians)。然而，本章的项目包括比通常的*.ino*草图文件更多的额外文件。对于这个项目，你只需打开*project69.ino*文件，Arduino
    IDE会自动打开其他文件。如[图24-8](chapter24.xhtml#fig24-8)所示，你应该能看到作为标签显示在菜单栏下的包含文件。
- en: '![A SCREENSHOT OF THE VIDEO FRAMERATE DATA DISPLAY](../images/fig24-8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![视频帧率数据展示截图](../images/fig24-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-8: All project file
    tabs being displayed in Arduino IDE</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-8：Arduino IDE中显示的所有项目文件标签</samp>
- en: The additional files (*app_httpd.cpp*, *camera_index.h*, and *camera_pins.h*)
    include data to define the GPIO pins for the ESP32 camera board and include data
    to help display the web page for the camera. This project operates a predefined
    interface, so you can’t modify much of it. You’ll only need to concern yourself
    with the *.ino* sketch file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的文件（*app_httpd.cpp*、*camera_index.h*和*camera_pins.h*）包含用于定义ESP32相机板GPIO引脚的数据，并包含帮助显示相机网页的数据。该项目操作的是一个预定义的界面，因此你无法修改太多内容。你只需要关注*.ino*草图文件。
- en: 'In the Project #69 sketch, add your Wi-Fi network and name in the SSID and
    password fields, as originally explained in Project #55 in [Chapter 19](chapter19.xhtml).
    Once you’ve connected your ESP32 camera to your computer, upload the sketch and
    then open the Serial Monitor in the Arduino IDE. If your USB interface is via
    the external cable, remember to remove the wire link from IO0 to GND and then
    press **RESET** on the camera module.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目#69的草图中，按照之前在[第19章](chapter19.xhtml)项目#55中解释的那样，添加你的Wi-Fi网络和名称到SSID和密码字段。当你将ESP32相机连接到计算机时，上传草图并打开Arduino
    IDE中的串口监视器。如果你的USB接口通过外部电缆连接，请记得从IO0移除与GND的连接，然后按下**RESET**按钮重启相机模块。
- en: You should see the IP address that the ESP32 camera is using appear on the Serial
    Monitor, as shown in [Figure 24-9](chapter24.xhtml#fig24-9).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在串口监视器中看到ESP32相机正在使用的IP地址，如[图24-9](chapter24.xhtml#fig24-9)所示。
- en: '![A SCREENSHOT OF THE IDE SERIAL MONITOR, DISPLAYING THE CAMERA’S IP ADDRESS](../images/fig24-9.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![显示相机IP地址的IDE串口监视器截图](../images/fig24-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-9: Example output
    from Serial Monitor displaying the camera’s IP address</samp>'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图24-9：串口监视器输出示例，显示相机的IP地址</samp>
- en: Open a web browser on your PC or mobile device connected to the same Wi-Fi network
    and visit the IP address shown in the Serial Monitor. The ESP32 camera should
    serve a web page with various controls and settings. Click **Start Stream** at
    the bottom of the page. The live video stream from the camera should appear on
    your screen, as shown in [Figure 24-10](chapter24.xhtml#fig24-10). (The video
    in the figure was taken from my kitchen table.)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开连接到同一Wi-Fi网络的PC或移动设备上的网页浏览器，访问串口监视器中显示的IP地址。ESP32相机应该会提供一个包含各种控件和设置的网页。点击页面底部的**开始流式传输**按钮。来自相机的实时视频流应该会出现在屏幕上，如[图24-10](chapter24.xhtml#fig24-10)所示。（图中的视频是我在厨房桌子上拍摄的。）
- en: '![A SCREENSHOT OF THE CAMERA STREAMING WEBPAGE](../images/fig24-10.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![相机流媒体网页的截图](../images/fig24-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-10: Example output
    from the camera streaming page</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-10：来自相机流媒体页面的示例输出</samp>
- en: Take some time to experiment with the settings, adjusting the brightness, contrast,
    and so on. When streaming video, the greater the quality of the image, the greater
    the amount of data being transmitted over the network. If you find the video update
    speed, or *frame rate*, too slow or jerky, change the resolution using the drop-down
    menu. You can also switch to streaming in black and white, as this requires much
    less data transmission than color. If you’re curious about the frame rate at the
    time of operation, you can view it in the Serial Monitor when the camera is streaming,
    as shown in [Figure 24-11](chapter24.xhtml#fig24-11).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间尝试调整设置，调整亮度、对比度等。进行视频流传输时，图像质量越高，网络上传输的数据量越大。如果你发现视频更新速度或*帧率*太慢或卡顿，可以通过下拉菜单更改分辨率。你也可以切换为黑白流媒体，因为这比彩色图像传输需要的数据显示量要少得多。如果你对操作时的帧率感到好奇，可以在串口监视器中查看相机流媒体时的帧率，如[图
    24-11](chapter24.xhtml#fig24-11)所示。
- en: '![A SCREENSHOT OF THE VIDEO FRAMERATE DATA DISPLAY](../images/fig24-11.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![视频帧率数据展示的截图](../images/fig24-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-11: Example frame
    rate output from an ESP32 camera</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-11：来自 ESP32 相机的帧率示例输出</samp>
- en: If you’re not happy with the quality or brightness of the video or images, you
    may need better external lighting or to reposition your camera to allow more ambient
    light to reach the lens.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对视频或图像的质量或亮度不满意，可能需要更好的外部照明，或者重新调整相机的位置，以便让更多的环境光照射到镜头上。
- en: 'Let’s take a look at the *.ino* sketch file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下*.ino* 草图文件：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sketch includes the required libraries and then defines the ESP32 camera
    type, allowing the correct pinout labels to be associated for the Arduino IDE
    to use. Be sure you’ve inserted your Wi-Fi network’s name and password in the
    appropriate fields.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 草图包含了所需的库，然后定义了 ESP32 相机类型，允许将正确的引脚标签与 Arduino IDE 使用的引脚进行关联。请确保在适当的字段中插入您的
    Wi-Fi 网络名称和密码。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the code
    activates the Serial Monitor for debugging ❶. It makes the Arduino GPIO associations
    for the camera interface pins ❷ and then defines the default image size and quality
    ❸. If there’s a problem initializing the camera, this is articulated ❹. The following
    <samp class="SANS_TheSansMonoCd_W5Regular_11">printf()</samp> function is available
    only when using ESP32-compatible Arduino, not Arduino boards themselves. It allows
    the display of a variable’s value within a string of text. For example, the line
    at ❺ will display the error code stored in variable <samp class="SANS_TheSansMonoCd_W5Regular_11">err</samp>
    at position <samp class="SANS_TheSansMonoCd_W5Regular_11">%x</samp> in hexadecimal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> 中，代码会启用串口监视器以进行调试
    ❶。它为相机接口引脚进行 Arduino GPIO 关联 ❷，然后定义默认的图像大小和质量 ❸。如果初始化相机时出现问题，会进行相应的提示 ❹。以下的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">printf()</samp> 函数仅在使用 ESP32 兼容的 Arduino
    时可用，而不是 Arduino 板本身。它允许在文本字符串中显示变量的值。例如，❺ 处的代码将显示存储在变量 <samp class="SANS_TheSansMonoCd_W5Regular_11">err</samp>
    中的错误代码，该错误代码以十六进制格式显示。
- en: The default image frame size is set to Quarter-VGA (320 × 240 pixels, or QVGA)
    for speed ❻. As the QVGA resolution is smaller, less data is required for each
    frame, meaning the frame rate can be higher and result in smoother video.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的图像帧大小设置为四分之一VGA（320 × 240 像素，或 QVGA），以提高速度 ❻。由于 QVGA 分辨率较小，每帧所需的数据较少，这意味着帧率可以更高，从而实现更流畅的视频。
- en: After making the Wi-Fi connection ❼, the sketch displays the ESP32 camera’s
    web page IP address in the Serial Monitor ❽. Have fun experimenting with the camera.
    There are plenty of ways to use this inexpensive piece of hardware, such as monitoring
    property entrances, watching children from another room, or viewing a bird’s nest.
    Now is a good time to learn about maximizing the Wi-Fi range with an external
    antenna.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立 Wi-Fi 连接后 ❼，草图会在串口监视器 ❽ 中显示 ESP32 相机的网页 IP 地址。尽情尝试相机吧。有很多方法可以使用这款廉价硬件，例如监控房产入口、从另一个房间观察孩子，或者查看鸟巢。现在是学习如何使用外部天线最大化
    Wi-Fi 范围的好时机。
- en: <samp class="SANS_Futura_Std_Bold_B_11">External Wi-Fi Antenna</samp>
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">外部 Wi-Fi 天线</samp>
- en: The recommended ESP32 camera board in this chapter allows for the use of an
    external Wi-Fi antenna, which makes a longer distance from the Wi-Fi access point
    possible. When shopping for an antenna, make sure to find one that includes the
    cable from the antenna to the ESP32 camera board. The socket on the board is called
    a *uFL* or *mini ipex connector*. The external antenna and cable should be sold
    in sets but are usually not included with the camera, meaning you need to order
    them separately.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本章推荐的 ESP32 摄像头板支持使用外部 Wi-Fi 天线，这可以使 Wi-Fi 接入点的距离更远。在购买天线时，请确保选择一个包含从天线到 ESP32
    摄像头板电缆的天线。板上的插座称为 *uFL* 或 *mini ipex 连接器*。外部天线和电缆通常作为一套出售，但通常不包括在摄像头中，这意味着你需要单独购买它们。
- en: '[Figure 24-12](chapter24.xhtml#fig24-12) shows an example external antenna
    and cable, PMD Way part 70202023.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 24-12](chapter24.xhtml#fig24-12)展示了一个外部天线和电缆的示例，PMD Way 部件 70202023。'
- en: '![A PHOTO OF THE EXTERNAL ANTENNA AND CABLE](../images/fig24-12.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![外部天线和电缆的照片](../images/fig24-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-12: An external antenna
    and cable</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-12：外部天线和电缆</samp>
- en: To check the module antenna configuration, turn the module over so you can see
    the antenna socket, the tiny round copper ring just below the antenna on the PCB,
    as shown in [Figure 24-13](chapter24.xhtml#fig24-13).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查模块天线配置，请将模块翻转过来，以便看到天线插座，PCB 上天线下方的微小圆形铜环，如[图 24-13](chapter24.xhtml#fig24-13)所示。
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD ANTENNA SOCKET](../images/fig24-13.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![ESP32 摄像头板天线插座的照片](../images/fig24-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-13: An ESP32 camera
    board antenna socket</samp>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-13：ESP32 摄像头板天线插座</samp>
- en: On the left of the socket should be three tiny PCB pads—top, bottom, and left.
    Two of the pads should be bridged by a surface-mount resistor. If the bottom and
    left pads are bridged in this way, as shown in [Figure 24-14](chapter24.xhtml#fig24-14),
    you’re ready for an external antenna that can be connected into the socket, as
    shown in [Figure 24-13](chapter24.xhtml#fig24-13).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 插座的左侧应有三个微小的 PCB 焊盘——上、下和左。两个焊盘应通过一个表面贴装电阻桥接。如果下部和左部焊盘按这种方式桥接，如[图 24-14](chapter24.xhtml#fig24-14)所示，那么你就可以准备连接一个外部天线到插座，如[图
    24-13](chapter24.xhtml#fig24-13)所示。
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD ANTENNA BRIDGING RESISTORS](../images/fig24-14.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![ESP32 摄像头板天线桥接电阻的照片](../images/fig24-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-14: ESP32 camera
    board bridging resistors</samp>'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-14：ESP32 摄像头板桥接电阻</samp>
- en: However, if your board has the resistor across the top and left pad, you’ll
    need to desolder and resolder it to the correct position. To do this, you’ll need
    a fine-tip soldering iron or a hot-air gun suitable for surface-mount component
    reflow work, as well as a small amount of solder. If this is a problem for you,
    check with your board supplier before ordering your ESP32 camera board, if possible.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你的板子上电阻跨接在顶部和左侧焊盘之间，你需要将其拆除并重新焊接到正确的位置。为此，你需要一把细尖焊枪或适用于表面贴装元件回流工作的热风枪，以及少量的焊锡。如果这对你来说是个问题，最好在订购
    ESP32 摄像头板之前与板子的供应商确认。
- en: Using the antenna greatly improves the radio range of the ESP32 camera board.
    Once you have the external antenna and cable connected, you can easily demonstrate
    the improvement in radio range by running the WiFiScan demonstration sketch used
    earlier in the chapter. For example, [Figure 24-15](chapter24.xhtml#fig24-15)
    shows the results of the sketch without the antenna and then with the antenna
    connected.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用天线可以大大提高 ESP32 摄像头板的无线电范围。一旦连接上外部天线和电缆，你可以轻松地通过运行本章前面使用过的 WiFiScan 演示示例来展示无线电范围的改善。例如，[图
    24-15](chapter24.xhtml#fig24-15)展示了未连接天线和连接天线后的 WiFiScan 结果。
- en: '![A SCREENSHOT OF THE WIFISCAN RESULTS](../images/fig24-15.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![WiFiScan 结果截图](../images/fig24-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-15: WiFiScan results
    with and without an external antenna</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-15：带和不带外部天线的 WiFiScan 结果</samp>
- en: Without the antenna connected, the output shows an RSSI value of −92; with the
    antenna connected, however, the RSSI value is −57.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 未连接天线时，输出显示 RSSI 值为 −92；但是，连接天线后，RSSI 值为 −57。
- en: Now that you know how to test Wi-Fi for the ESP32 camera board and set up video
    streaming, I’ll show you how to take photos on command and save them to the microSD
    card with the time and date stored in the filename of each image for easy reference.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何测试ESP32相机模块的Wi-Fi并设置视频流，我将向你展示如何按命令拍照并将其保存到microSD卡，同时在每张图像的文件名中存储时间和日期，便于参考。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #70: Taking Photos and Saving
    Them to a Memory Card</samp>'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #70：拍照并保存到存储卡</samp>'
- en: This project demonstrates how to control the onboard camera to take a photo
    at your command. You can use the code from this project in your own sketches to
    create time-lapse cameras, cameras triggered by sensors or switches, or just your
    own simple portable digital camera.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了如何控制板载相机按你的命令拍照。你可以在自己的草图中使用本项目的代码，制作延时摄影相机、由传感器或开关触发的相机，或者只是一个简单的便携数字相机。
- en: For hardware, you’ll need the ESP32 camera board with matching USB interface
    and a microSD memory card on which to store the captured images. If you haven’t
    already done so, format the microSD card for use with the camera, setting the
    filesystem type to FAT32\. Any normal format procedure on a PC, Mac, or Linux
    machine will have the option to set the filesystem type.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于硬件，你需要ESP32相机模块（带有匹配的USB接口）和一张microSD存储卡，用于存储拍摄的图像。如果你还没有这么做，格式化microSD卡以便与相机配合使用，将文件系统类型设置为FAT32。任何在PC、Mac或Linux机器上的正常格式化程序都提供设置文件系统类型的选项。
- en: 'Insert the formatted card into your ESP32 camera, then connect the ESP32 camera
    to your computer and upload the Project #70 sketch. Open the Serial Monitor in
    the Arduino IDE. If your USB interface is via the external cable, remember to
    remove the wire link from IO0 to GND and then press **RESET** on the camera module.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '将格式化后的卡插入ESP32相机，然后将ESP32相机连接到计算机并上传项目 #70 的草图。在Arduino IDE中打开串口监视器。如果你的USB接口是通过外部电缆连接的，请记得移除IO0到GND的连线，然后按**RESET**按钮重启相机模块。'
- en: The Serial Monitor should display the filename of the images the ESP32 camera
    has created, as shown in [Figure 24-16](chapter24.xhtml#fig24-16).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 串口监视器应显示ESP32相机拍摄的图像文件名，如[图 24-16](chapter24.xhtml#fig24-16)所示。
- en: '![A SCREENSHOT OF THE SERIAL MONITOR OUTPUT WITH THE IMAGE FILENAMES](../images/fig24-16.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![显示图像文件名的串口监视器输出截图](../images/fig24-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-16: Serial Monitor
    output of image filenames</samp>'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-16：图像文件名的串口监视器输出</samp>
- en: To stop the camera and review the results, disconnect the USB cable from the
    computer and insert the microSD card into the computer. Open the file manager
    for your PC and navigate to the drive representing the microSD card, and you should
    find the images taken by your ESP32 camera. For example, [Figure 24-17](chapter24.xhtml#fig24-17)
    shows a photo of the view from my office.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止相机并查看结果，断开USB电缆与计算机的连接，并将microSD卡插入计算机。打开计算机的文件管理器，找到代表microSD卡的驱动器，你应该能找到ESP32相机拍摄的图像。例如，[图
    24-17](chapter24.xhtml#fig24-17)展示了我办公室窗外的照片。
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #70](../images/fig24-17.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #70 示例输出截图](../images/fig24-17.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-17: Example output
    from Project #70</samp>'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 24-17：项目 #70 的示例输出</samp>'
- en: 'Let’s see how this works:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The sketch includes all the required libraries and then gives the pin definitions
    for the AI-Thinker ESP32 camera board. Every time the camera takes a photo, the
    program tracks the number of photos using the <samp class="SANS_TheSansMonoCd_W5Regular_11">image</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">Counter</samp> integer variable ❶, which
    will become part of the image’s filename (as demonstrated in [Figure 24-17](chapter24.xhtml#fig24-17)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图包括所有必需的库，然后给出AI-Thinker ESP32相机模块的引脚定义。每次相机拍照时，程序会使用<samp class="SANS_TheSansMonoCd_W5Regular_11">image</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">Counter</samp>整型变量❶跟踪照片的数量，图像的文件名将包含此数字（如[图
    24-17](chapter24.xhtml#fig24-17)所示）。
- en: The sketch also defines the pin numbers used for connection to the camera ❷,
    saves the image type, and defines the image size and quality from <samp class="SANS_TheSansMonoCd_W5Regular_11">config.pixel_format</samp>.
    This is set to the *.jpg* file type, an image size of UXGA (1,600 × 1,200 pixels),
    and a maximum quality of 10 (the higher the number, the lower the image quality).
    Other camera settings ❸ include white balance control, brightness, contrast, and
    so on. The comments in the sketch above each of these parameters describe their
    value ranges, so you can experiment with the values to get the desired result
    for your camera installation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图还定义了用于连接相机❷的引脚编号，保存了图像类型，并根据<samp class="SANS_TheSansMonoCd_W5Regular_11">config.pixel_format</samp>定义了图像的大小和质量。此设置为*.jpg*文件类型，图像大小为UXGA（1,600
    × 1,200像素），最大质量为10（数字越大，图像质量越低）。其他相机设置❸包括白平衡控制、亮度、对比度等。草图中每个参数上方的注释描述了它们的值范围，因此你可以调整这些值，以便为你的相机安装获取理想的效果。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">initMicroSDCard()</samp> function
    contains the initialization for the microSD card circuitry, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">takeNewPhoto()</samp>function
    enables the camera to take and save an image; its parameter is the filename with
    which to store the image. The crux of the sketch is <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>,
    which the program calls to capture images. This function increments the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">imageCounter</samp> variable and inserts
    it into a string for the image filename beginning with */ESP32CAM_* (which you
    can change to meet your needs) and adds the *.jpg* file extension to the end.
    Note that if you reset the ESP32 board before retrieving images from the memory
    card, they will be overwritten.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">initMicroSDCard()</samp>函数包含了microSD卡电路的初始化，而<samp
    class="SANS_TheSansMonoCd_W5Regular_11">takeNewPhoto()</samp>函数使相机能够拍摄并保存图像；其参数是用于存储图像的文件名。草图的核心是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>，程序调用该函数来捕获图像。此函数增加<samp
    class="SANS_TheSansMonoCd_W5Regular_11">imageCounter</samp>变量，并将其插入到以*/ESP32CAM_*开头（你可以根据需要更改）的字符串中，最后添加*.jpg*文件扩展名。请注意，如果你在从存储卡中获取图像之前重置了ESP32板，这些图像将被覆盖。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the sketch
    initializes the Serial Monitor, followed by the <samp class="SANS_TheSansMonoCd_W5Regular_11">WRITE_PERI_REG()</samp>
    function that turns off brown-out detection for the camera. This function allows
    the camera to keep operating (though at a lower quality) if the supply voltage
    drops temporarily. The sketch initializes the camera and the microSD card circuitry.
    Finally, it captures a new image by calling <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>,
    followed by an arbitrary five-second delay.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在<samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中，草图初始化了串行监视器，接着是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WRITE_PERI_REG()</samp>函数，该函数关闭了相机的欠压检测。此函数允许相机在电源电压暂时下降时继续工作（尽管质量较低）。草图初始化了相机和microSD卡电路。最后，它通过调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>捕获一张新图像，然后等待五秒钟。
- en: You can build your own digital photography projects around the sketch for this
    project, which contains everything you need to control the camera—simply adjust
    the camera settings to your liking and call the <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>
    function when you need a photo taken. The process of capturing an image and saving
    it to the microSD card takes around two seconds, though, so you can’t force it
    to work any faster than that.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以围绕这个项目的草图构建自己的数字摄影项目，它包含了控制相机所需的一切——只需根据你的喜好调整相机设置，并在需要拍照时调用<samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>函数。捕获图像并将其保存到microSD卡的过程大约需要两秒钟，因此你不能强迫它更快地工作。
- en: Now that you can take your own photos, it’s time to learn about the pinouts
    on your ESP32 camera board so you can interact with external devices to expand
    your projects.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经可以拍摄自己的照片了，是时候了解ESP32相机板上的引脚分配，这样你就可以与外部设备交互，扩展你的项目了。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The ESP32 Camera Pinouts</samp>
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">ESP32 相机引脚分配</samp>
- en: As with the ESP32 dev board, the ESP32 camera board has a range of GPIO pins
    you can use for noncamera operations. Once you understand these pinouts, you can
    use them in your own projects as needed. [Table 24-2](chapter24.xhtml#tab24-2)
    shows the pin labels and their matching Arduino use.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ESP32 开发板一样，ESP32 摄像头板也具有一系列可以用于非摄像头操作的 GPIO 引脚。了解这些引脚图后，你可以根据需要在自己的项目中使用它们。[表
    24-2](chapter24.xhtml#tab24-2) 显示了引脚标签及其对应的 Arduino 用法。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 24-2:</samp> <samp class="SANS_Futura_Std_Book_11">ESP32
    Camera Pinouts</samp>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 24-2：</samp> <samp class="SANS_Futura_Std_Book_11">ESP32
    摄像头引脚图</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Pin label</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    use</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Note</samp> |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">引脚标签</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚用途</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">备注</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5
    V power input</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5
    V 电源输入</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">地</samp>
    | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO12</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO12</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO13</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO13</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO15</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO15</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO14</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO14</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO2</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO2</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO4</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">Controls onboard bright LED</samp>
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO4</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">控制板载明亮 LED</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3V3</samp> | <samp class="SANS_Futura_Std_Book_11">3.3
    V power input</samp> | <samp class="SANS_Futura_Std_Book_11">Preferable to use
    5 V</samp> |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3V3</samp> | <samp class="SANS_Futura_Std_Book_11">3.3
    V 电源输入</samp> | <samp class="SANS_Futura_Std_Book_11">建议使用 5 V</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO16</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO16</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">IO0</samp> | <samp class="SANS_Futura_Std_Book_11">Code
    uploading/GPIO pin</samp> | <samp class="SANS_Futura_Std_Book_11">Connect to GND
    to upload code</samp> |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">IO0</samp> | <samp class="SANS_Futura_Std_Book_11">代码上传/GPIO
    引脚</samp> | <samp class="SANS_Futura_Std_Book_11">连接到 GND 以上传代码</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">地</samp>
    | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">VCC</samp> | <samp class="SANS_Futura_Std_Book_11">Power
    output</samp> | <samp class="SANS_Futura_Std_Book_11">Output, not input!</samp>
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">VCC</samp> | <samp class="SANS_Futura_Std_Book_11">电源输出</samp>
    | <samp class="SANS_Futura_Std_Book_11">输出，不是输入！</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">UOR</samp> | <samp class="SANS_Futura_Std_Book_11">Serial
    RX (receive)</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">UOR</samp> | <samp class="SANS_Futura_Std_Book_11">串口
    RX（接收）</samp> | <samp class="SANS_Futura_Std_Book_11">无</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">UOT</samp> | <samp class="SANS_Futura_Std_Book_11">Serial
    TX (transmit)</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">UOT</samp> | <samp class="SANS_Futura_Std_Book_11">串行TX（传输）</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
- en: If you’re using the camera, it’s preferable to power the ESP32 camera with 5
    V; otherwise, 3.3 V is fine. Running at the lower voltage can cause a slight image
    degradation. I recommend a 5 V DC with at least 500 mA of current from an external
    power supply when building your own projects that include more hardware than just
    the board.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用相机，最好使用5 V为ESP32相机供电；否则，3.3 V也可以。使用较低电压可能会导致图像轻微退化。当你在构建包含比板子更多硬件的项目时，建议使用至少500
    mA电流的5 V直流电源。
- en: The bright white “flash” LED is connected to GPIO pin IO4 and can be turned
    on and off like any digital output pin. It’s also connected to the microSD card
    socket circuit and will turn on when the card is being accessed. This LED generates
    a lot of heat, so when controlling it for your own projects, don’t run it continuously
    for longer than one second before allowing time for it to cool off.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 明亮的白色“闪光灯”LED连接到GPIO引脚IO4，可以像任何数字输出引脚一样打开和关闭。它还连接到microSD卡插槽电路，当卡被访问时会点亮。这款LED产生大量热量，因此在控制它用于自己的项目时，不要让它持续运行超过一秒钟，而应给予它足够的时间冷却。
- en: There is a small red LED on the other side of the camera module that is connected
    internally as GPIO pin 33\. It’s wired inversely so that setting that pin LOW
    turns the LED on and HIGH turns it off. Overall, the GPIO pins can be used as
    inputs or outputs. Remember that the logic voltage is 3.3 V, not 5 V.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在相机模块的另一侧有一个小的红色LED，它通过GPIO引脚33内部连接。它的接线方式是反向的，设置该引脚为低电平时会点亮LED，高电平时则关闭。总体来说，GPIO引脚可以用作输入或输出。请记住，逻辑电压是3.3
    V，而不是5 V。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned to harness the inexpensive and useful ESP32 camera
    board for video streaming or taking photos and saving them to a memory card. This
    adds a final skill set to the six ESP32-based chapters, which have demonstrated
    various ways of controlling projects remotely and logging and displaying data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何利用廉价且实用的ESP32相机板进行视频流传输或拍照，并将其保存到存储卡。这为六个基于ESP32的章节增加了最后一项技能集，后者展示了远程控制项目、记录和显示数据的各种方式。
- en: This marks the final chapter of *Arduino for Arduinians*! To continue your Arduino
    journey, check out the epilogue for some next steps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着*Arduino for Arduinians*的最后一章！要继续你的Arduino之旅，请查看结语，了解接下来的步骤。
