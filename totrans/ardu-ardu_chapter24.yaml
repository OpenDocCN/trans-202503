- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">24</samp> <samp class="SANS_Dogma_OT_Bold_B_11">THE
    ESP32 CAMERA BOARD</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: In the past, to use an Arduino with a digital camera, you’d have to hack into
    the camera’s remote-control system and control it with the Arduino’s digital output
    pins. Today, thanks to the release of the inexpensive ESP32 dev board with a camera
    (also known as the ESP32 camera board), you can easily control a small digital
    camera in your projects and save the images for review or streaming over Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: The ESP32 camera board uses the same ESP32 microcontroller with Wi-Fi as found
    on the ESP32 dev board used in [Chapters 19](chapter19.xhtml) through [24](chapter24.xhtml).
    However, the camera board is a much more compact unit and includes a connection
    for a tiny but useful camera module, which is usually included with purchase of
    the ESP32 camera board. It may also be the most complex device you’ve controlled
    with an Arduino-compatible board in this book so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure ESP32 camera boards for Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a simple video-streaming device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control ESP32 camera boards to capture still images on command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Selecting an ESP32 Camera</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter is based on the AI- Thinker ESP32 CAM module, a small board that
    contains the ESP32 hardware, a microSD memory card socket, a small power regulator,
    and a connector for a small camera. The package should also include the camera
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Some ESP32 camera boards, such as PMD Way part 97263257 (shown in [Figure 24-1](chapter24.xhtml#fig24-1)),
    have no USB interface to save space.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD SET](../images/fig24-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-1: An ESP32 camera
    board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If that’s the case for the module you purchase, you’ll need a USB-to-serial
    cable like the PL2303TA cable shown in [Figure 24-2](chapter24.xhtml#fig24-2)
    (PMD Way part 727859). You’ll use this cable to power the ESP32 camera for uploading
    sketches and monitoring serial output in the Arduino IDE’s Serial Monitor.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE USB-TO-TTL CABLE](../images/fig24-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-2: A USB-to-TTL cable</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can source the ESP32 camera with a matching USB interface
    board such as PMD Way part 26409000, shown in [Figure 24-3](chapter24.xhtml#fig24-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD WITH THE USB INTERFACE BOARD](../images/fig24-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-3: An ESP32 camera
    board with a USB interface board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: I chose the ESP32 camera board used as shown in [Figure 24-1](chapter24.xhtml#fig24-1)
    not only because it’s the most popular model but because it allows you to use
    an external Wi-Fi antenna to enable a greater operational distance from the Wi-Fi
    access point. Usually, the module used is shipped configured to use the external
    antenna. You can still use it without the antenna, but the Wi-Fi range will not
    be optimal.
  prefs: []
  type: TYPE_NORMAL
- en: After initial experimentation, you may want to substitute your default camera
    lens with a different lens type for zoom or wide-angle photography or use a longer
    cable between the camera and the ESP32 camera board. You can purchase these lenses
    from PMD Way (see part 26401000, for example) or your ESP32 camera board supplier.
    However, these extra camera types aren’t required for the projects in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the ESP32 Camera</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve purchased your ESP32 camera board, you’ll need to set it up to receive
    sketches and operate properly.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and complete the
    instructions in “Configuring the Arduino IDE for the ESP32” through “Testing the
    ESP32” to get your ESP32 working. Next, connect the ESP32 camera to your PC. If
    you have the USB interface board as shown in [Figure 24-2](chapter24.xhtml#fig24-2),
    connect via a USB cable as usual. If you’re using the alternate USB-to-TTL cable
    for the USB interface, connect the pins of the ESP32 camera to the cable as shown
    in [Table 24-1](chapter24.xhtml#tab24-1).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 24-1:</samp> <samp class="SANS_Futura_Std_Book_11">Connections
    Between ESP32 Camera and USB-TTL Cable</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ESP32 camera pin</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Cable connector</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5V
    (red)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND
    (black)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">U0T</samp> | <samp class="SANS_Futura_Std_Book_11">RX
    (white)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">U0R</samp> | <samp class="SANS_Futura_Std_Book_11">TX
    (green)</samp> |'
  prefs: []
  type: TYPE_TB
- en: If you’re using the USB-to-TTL cable, you must also connect a jumper wire between
    a GND pin and the IO0 pin before uploading a sketch. After uploading the sketch,
    you must disconnect and reconnect the USB cable to the PC and then remove the
    IO0 to GND wire and press the reset button on the board to start the sketch. You’ll
    need to do this every time you upload a sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve connected your ESP32 camera to your PC, open the Arduino IDE and
    set the board to AI Thinker ESP-32 CAM by selecting **Tools** ![](../images/arr.png)
    **Board** ![](../images/arr.png) **esp32**. You may also need to set the USB port
    to the one used by your USB interface by selecting **Tools** ![](../images/arr.png)
    **Port**.
  prefs: []
  type: TYPE_NORMAL
- en: Open the WiFiScan example sketch included with the Arduino Wi-Fi library. Upload
    this sketch to your ESP32 camera board, and open the Serial Monitor. You should
    see the available Wi-Fi networks in your nearby area listed, as shown in [Figure
    24-4](chapter24.xhtml#fig24-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE WIFISCAN SKETCH’S OUTPUT, SHOWING THE AVAILABLE NETWORK
    AND STRENGTH](../images/fig24-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-4: Example output
    from running the WiFiScan example sketch</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The received signal strength indicator (RSSI) value in [Figure 24-4](chapter24.xhtml#fig24-4)
    is a measurement of how well the ESP32 camera board can hear a signal from your
    Wi-Fi access point. The closer to 0, the better the signal. The CH value is the
    Wi-Fi channel to your Wi-Fi access point; most access points have 16 channels.
    Finally, the Encryption type shows which form of encryption protocol is used for
    the listed Wi-Fi access points. If the WiFiScan example sketch worked correctly,
    your ESP32 camera board is ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: If your camera didn’t arrive preconnected to the board, you’ll now need to attach
    it. Working slowly and carefully, pry open the black plastic hinged strip across
    the connector, as shown in [Figure 24-5](chapter24.xhtml#fig24-5). It may help
    to use some plastic tweezers instead of your fingers.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE OPEN CAMERA CONNECTOR ON THE ESP32 CAMERA BOARD](../images/fig24-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-5: Opening the camera
    cable connector on the ESP32 camera board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Slide the camera’s interface cable into the connector on the ESP32 camera board.
    The camera lens should face upward during this process, with the cable sliding
    in just a few millimeters. Don’t exert too much force; if you run into an obstacle,
    the cable has gone far enough, as shown in [Figure 24-6](chapter24.xhtml#fig24-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE CAMERA CONNECTOR INSERTED INTO THE ESP32 CAMERA BOARD](../images/fig24-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-6: Inserting the
    camera cable connector on the ESP32 camera board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, push the black plastic hinged strip across the connector down until
    it clicks into place, which also secures the camera connector cable into the ESP32
    camera board, as shown in [Figure 24-7](chapter24.xhtml#fig24-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE CAMERA INSTALLED INTO THE ESP32 CAMERA BOARD](../images/fig24-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-7: The camera installed
    into the ESP32 camera board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If there is a protective plastic cover over the lens, carefully remove it by
    pulling the tab on one side of the protector. You’re ready to test your camera
    by using it to stream video across your Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #69: Streaming Video from
    a Basic Camera Server</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll control the ESP32 camera module remotely over a Wi-Fi
    local-area network using a web browser interface, experimenting with various settings
    on the camera interface to adjust the camera’s image or video stream.
  prefs: []
  type: TYPE_NORMAL
- en: For hardware, you’ll need just the ESP32 camera module and USB interface as
    described in the previous section. For the sketch, you’ll need to download the
    project files from the book’s website at [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians),
    as usual. However, this chapter’s projects include extra files beyond the usual
    *.ino* sketch file. For this project, you only need to open the *project69.ino*
    file, and the Arduino IDE will automatically open the rest. As shown in [Figure
    24-8](chapter24.xhtml#fig24-8), you should see the included files as tabs under
    the menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE VIDEO FRAMERATE DATA DISPLAY](../images/fig24-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-8: All project file
    tabs being displayed in Arduino IDE</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The additional files (*app_httpd.cpp*, *camera_index.h*, and *camera_pins.h*)
    include data to define the GPIO pins for the ESP32 camera board and include data
    to help display the web page for the camera. This project operates a predefined
    interface, so you can’t modify much of it. You’ll only need to concern yourself
    with the *.ino* sketch file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project #69 sketch, add your Wi-Fi network and name in the SSID and
    password fields, as originally explained in Project #55 in [Chapter 19](chapter19.xhtml).
    Once you’ve connected your ESP32 camera to your computer, upload the sketch and
    then open the Serial Monitor in the Arduino IDE. If your USB interface is via
    the external cable, remember to remove the wire link from IO0 to GND and then
    press **RESET** on the camera module.'
  prefs: []
  type: TYPE_NORMAL
- en: You should see the IP address that the ESP32 camera is using appear on the Serial
    Monitor, as shown in [Figure 24-9](chapter24.xhtml#fig24-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE IDE SERIAL MONITOR, DISPLAYING THE CAMERA’S IP ADDRESS](../images/fig24-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-9: Example output
    from Serial Monitor displaying the camera’s IP address</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser on your PC or mobile device connected to the same Wi-Fi network
    and visit the IP address shown in the Serial Monitor. The ESP32 camera should
    serve a web page with various controls and settings. Click **Start Stream** at
    the bottom of the page. The live video stream from the camera should appear on
    your screen, as shown in [Figure 24-10](chapter24.xhtml#fig24-10). (The video
    in the figure was taken from my kitchen table.)
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE CAMERA STREAMING WEBPAGE](../images/fig24-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-10: Example output
    from the camera streaming page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to experiment with the settings, adjusting the brightness, contrast,
    and so on. When streaming video, the greater the quality of the image, the greater
    the amount of data being transmitted over the network. If you find the video update
    speed, or *frame rate*, too slow or jerky, change the resolution using the drop-down
    menu. You can also switch to streaming in black and white, as this requires much
    less data transmission than color. If you’re curious about the frame rate at the
    time of operation, you can view it in the Serial Monitor when the camera is streaming,
    as shown in [Figure 24-11](chapter24.xhtml#fig24-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE VIDEO FRAMERATE DATA DISPLAY](../images/fig24-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-11: Example frame
    rate output from an ESP32 camera</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not happy with the quality or brightness of the video or images, you
    may need better external lighting or to reposition your camera to allow more ambient
    light to reach the lens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the *.ino* sketch file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The sketch includes the required libraries and then defines the ESP32 camera
    type, allowing the correct pinout labels to be associated for the Arduino IDE
    to use. Be sure you’ve inserted your Wi-Fi network’s name and password in the
    appropriate fields.
  prefs: []
  type: TYPE_NORMAL
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the code
    activates the Serial Monitor for debugging ❶. It makes the Arduino GPIO associations
    for the camera interface pins ❷ and then defines the default image size and quality
    ❸. If there’s a problem initializing the camera, this is articulated ❹. The following
    <samp class="SANS_TheSansMonoCd_W5Regular_11">printf()</samp> function is available
    only when using ESP32-compatible Arduino, not Arduino boards themselves. It allows
    the display of a variable’s value within a string of text. For example, the line
    at ❺ will display the error code stored in variable <samp class="SANS_TheSansMonoCd_W5Regular_11">err</samp>
    at position <samp class="SANS_TheSansMonoCd_W5Regular_11">%x</samp> in hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: The default image frame size is set to Quarter-VGA (320 × 240 pixels, or QVGA)
    for speed ❻. As the QVGA resolution is smaller, less data is required for each
    frame, meaning the frame rate can be higher and result in smoother video.
  prefs: []
  type: TYPE_NORMAL
- en: After making the Wi-Fi connection ❼, the sketch displays the ESP32 camera’s
    web page IP address in the Serial Monitor ❽. Have fun experimenting with the camera.
    There are plenty of ways to use this inexpensive piece of hardware, such as monitoring
    property entrances, watching children from another room, or viewing a bird’s nest.
    Now is a good time to learn about maximizing the Wi-Fi range with an external
    antenna.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">External Wi-Fi Antenna</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recommended ESP32 camera board in this chapter allows for the use of an
    external Wi-Fi antenna, which makes a longer distance from the Wi-Fi access point
    possible. When shopping for an antenna, make sure to find one that includes the
    cable from the antenna to the ESP32 camera board. The socket on the board is called
    a *uFL* or *mini ipex connector*. The external antenna and cable should be sold
    in sets but are usually not included with the camera, meaning you need to order
    them separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 24-12](chapter24.xhtml#fig24-12) shows an example external antenna
    and cable, PMD Way part 70202023.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE EXTERNAL ANTENNA AND CABLE](../images/fig24-12.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-12: An external antenna
    and cable</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To check the module antenna configuration, turn the module over so you can see
    the antenna socket, the tiny round copper ring just below the antenna on the PCB,
    as shown in [Figure 24-13](chapter24.xhtml#fig24-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD ANTENNA SOCKET](../images/fig24-13.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-13: An ESP32 camera
    board antenna socket</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: On the left of the socket should be three tiny PCB pads—top, bottom, and left.
    Two of the pads should be bridged by a surface-mount resistor. If the bottom and
    left pads are bridged in this way, as shown in [Figure 24-14](chapter24.xhtml#fig24-14),
    you’re ready for an external antenna that can be connected into the socket, as
    shown in [Figure 24-13](chapter24.xhtml#fig24-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE ESP32 CAMERA BOARD ANTENNA BRIDGING RESISTORS](../images/fig24-14.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-14: ESP32 camera
    board bridging resistors</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: However, if your board has the resistor across the top and left pad, you’ll
    need to desolder and resolder it to the correct position. To do this, you’ll need
    a fine-tip soldering iron or a hot-air gun suitable for surface-mount component
    reflow work, as well as a small amount of solder. If this is a problem for you,
    check with your board supplier before ordering your ESP32 camera board, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Using the antenna greatly improves the radio range of the ESP32 camera board.
    Once you have the external antenna and cable connected, you can easily demonstrate
    the improvement in radio range by running the WiFiScan demonstration sketch used
    earlier in the chapter. For example, [Figure 24-15](chapter24.xhtml#fig24-15)
    shows the results of the sketch without the antenna and then with the antenna
    connected.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE WIFISCAN RESULTS](../images/fig24-15.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-15: WiFiScan results
    with and without an external antenna</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Without the antenna connected, the output shows an RSSI value of −92; with the
    antenna connected, however, the RSSI value is −57.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to test Wi-Fi for the ESP32 camera board and set up video
    streaming, I’ll show you how to take photos on command and save them to the microSD
    card with the time and date stored in the filename of each image for easy reference.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #70: Taking Photos and Saving
    Them to a Memory Card</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This project demonstrates how to control the onboard camera to take a photo
    at your command. You can use the code from this project in your own sketches to
    create time-lapse cameras, cameras triggered by sensors or switches, or just your
    own simple portable digital camera.
  prefs: []
  type: TYPE_NORMAL
- en: For hardware, you’ll need the ESP32 camera board with matching USB interface
    and a microSD memory card on which to store the captured images. If you haven’t
    already done so, format the microSD card for use with the camera, setting the
    filesystem type to FAT32\. Any normal format procedure on a PC, Mac, or Linux
    machine will have the option to set the filesystem type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the formatted card into your ESP32 camera, then connect the ESP32 camera
    to your computer and upload the Project #70 sketch. Open the Serial Monitor in
    the Arduino IDE. If your USB interface is via the external cable, remember to
    remove the wire link from IO0 to GND and then press **RESET** on the camera module.'
  prefs: []
  type: TYPE_NORMAL
- en: The Serial Monitor should display the filename of the images the ESP32 camera
    has created, as shown in [Figure 24-16](chapter24.xhtml#fig24-16).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE SERIAL MONITOR OUTPUT WITH THE IMAGE FILENAMES](../images/fig24-16.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-16: Serial Monitor
    output of image filenames</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To stop the camera and review the results, disconnect the USB cable from the
    computer and insert the microSD card into the computer. Open the file manager
    for your PC and navigate to the drive representing the microSD card, and you should
    find the images taken by your ESP32 camera. For example, [Figure 24-17](chapter24.xhtml#fig24-17)
    shows a photo of the view from my office.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #70](../images/fig24-17.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 24-17: Example output
    from Project #70</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The sketch includes all the required libraries and then gives the pin definitions
    for the AI-Thinker ESP32 camera board. Every time the camera takes a photo, the
    program tracks the number of photos using the <samp class="SANS_TheSansMonoCd_W5Regular_11">image</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">Counter</samp> integer variable ❶, which
    will become part of the image’s filename (as demonstrated in [Figure 24-17](chapter24.xhtml#fig24-17)).
  prefs: []
  type: TYPE_NORMAL
- en: The sketch also defines the pin numbers used for connection to the camera ❷,
    saves the image type, and defines the image size and quality from <samp class="SANS_TheSansMonoCd_W5Regular_11">config.pixel_format</samp>.
    This is set to the *.jpg* file type, an image size of UXGA (1,600 × 1,200 pixels),
    and a maximum quality of 10 (the higher the number, the lower the image quality).
    Other camera settings ❸ include white balance control, brightness, contrast, and
    so on. The comments in the sketch above each of these parameters describe their
    value ranges, so you can experiment with the values to get the desired result
    for your camera installation.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">initMicroSDCard()</samp> function
    contains the initialization for the microSD card circuitry, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">takeNewPhoto()</samp>function
    enables the camera to take and save an image; its parameter is the filename with
    which to store the image. The crux of the sketch is <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>,
    which the program calls to capture images. This function increments the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">imageCounter</samp> variable and inserts
    it into a string for the image filename beginning with */ESP32CAM_* (which you
    can change to meet your needs) and adds the *.jpg* file extension to the end.
    Note that if you reset the ESP32 board before retrieving images from the memory
    card, they will be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the sketch
    initializes the Serial Monitor, followed by the <samp class="SANS_TheSansMonoCd_W5Regular_11">WRITE_PERI_REG()</samp>
    function that turns off brown-out detection for the camera. This function allows
    the camera to keep operating (though at a lower quality) if the supply voltage
    drops temporarily. The sketch initializes the camera and the microSD card circuitry.
    Finally, it captures a new image by calling <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>,
    followed by an arbitrary five-second delay.
  prefs: []
  type: TYPE_NORMAL
- en: You can build your own digital photography projects around the sketch for this
    project, which contains everything you need to control the camera—simply adjust
    the camera settings to your liking and call the <samp class="SANS_TheSansMonoCd_W5Regular_11">captureImage()</samp>
    function when you need a photo taken. The process of capturing an image and saving
    it to the microSD card takes around two seconds, though, so you can’t force it
    to work any faster than that.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you can take your own photos, it’s time to learn about the pinouts
    on your ESP32 camera board so you can interact with external devices to expand
    your projects.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The ESP32 Camera Pinouts</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the ESP32 dev board, the ESP32 camera board has a range of GPIO pins
    you can use for noncamera operations. Once you understand these pinouts, you can
    use them in your own projects as needed. [Table 24-2](chapter24.xhtml#tab24-2)
    shows the pin labels and their matching Arduino use.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 24-2:</samp> <samp class="SANS_Futura_Std_Book_11">ESP32
    Camera Pinouts</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Pin label</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    use</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Note</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5
    V power input</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO12</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO13</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO15</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO14</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO2</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO4</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">Controls onboard bright LED</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">3V3</samp> | <samp class="SANS_Futura_Std_Book_11">3.3
    V power input</samp> | <samp class="SANS_Futura_Std_Book_11">Preferable to use
    5 V</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO16</samp> | <samp class="SANS_Futura_Std_Book_11">GPIO
    pin</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">IO0</samp> | <samp class="SANS_Futura_Std_Book_11">Code
    uploading/GPIO pin</samp> | <samp class="SANS_Futura_Std_Book_11">Connect to GND
    to upload code</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">VCC</samp> | <samp class="SANS_Futura_Std_Book_11">Power
    output</samp> | <samp class="SANS_Futura_Std_Book_11">Output, not input!</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">UOR</samp> | <samp class="SANS_Futura_Std_Book_11">Serial
    RX (receive)</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">UOT</samp> | <samp class="SANS_Futura_Std_Book_11">Serial
    TX (transmit)</samp> | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    | <samp class="SANS_Futura_Std_Book_11">n/a</samp> |'
  prefs: []
  type: TYPE_TB
- en: If you’re using the camera, it’s preferable to power the ESP32 camera with 5
    V; otherwise, 3.3 V is fine. Running at the lower voltage can cause a slight image
    degradation. I recommend a 5 V DC with at least 500 mA of current from an external
    power supply when building your own projects that include more hardware than just
    the board.
  prefs: []
  type: TYPE_NORMAL
- en: The bright white “flash” LED is connected to GPIO pin IO4 and can be turned
    on and off like any digital output pin. It’s also connected to the microSD card
    socket circuit and will turn on when the card is being accessed. This LED generates
    a lot of heat, so when controlling it for your own projects, don’t run it continuously
    for longer than one second before allowing time for it to cool off.
  prefs: []
  type: TYPE_NORMAL
- en: There is a small red LED on the other side of the camera module that is connected
    internally as GPIO pin 33\. It’s wired inversely so that setting that pin LOW
    turns the LED on and HIGH turns it off. Overall, the GPIO pins can be used as
    inputs or outputs. Remember that the logic voltage is 3.3 V, not 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned to harness the inexpensive and useful ESP32 camera
    board for video streaming or taking photos and saving them to a memory card. This
    adds a final skill set to the six ESP32-based chapters, which have demonstrated
    various ways of controlling projects remotely and logging and displaying data.
  prefs: []
  type: TYPE_NORMAL
- en: This marks the final chapter of *Arduino for Arduinians*! To continue your Arduino
    journey, check out the epilogue for some next steps.
  prefs: []
  type: TYPE_NORMAL
