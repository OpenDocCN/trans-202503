["```\nclass Cell {\n\n}\n```", "```\nlet cells = [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0];\n```", "```\n  cells[i] = newstate;\n```", "```\n  cells[i] = newstate;\n```", "```\nlet ruleset = [0, 1, 0, 1, 1, 0, 1, 0];\n```", "```\nif (a === 1 && b === 1 && c === 1) return ruleset[0];\n```", "```\n  function rules(a, b, c) {\n    if      (a === 1 && b === 1 && c === 1) return ruleset[0];\n    else if (a === 1 && b === 1 && c === 0) return ruleset[1];\n    else if (a === 1 && b === 0 && c === 1) return ruleset[2];\n    else if (a === 1 && b === 0 && c === 0) return ruleset[3];\n    else if (a === 0 && b === 1 && c === 1) return ruleset[4];\n    else if (a === 0 && b === 1 && c === 0) return ruleset[5];\n    else if (a === 0 && b === 0 && c === 1) return ruleset[6];\n    else if (a === 0 && b === 0 && c === 0) return ruleset[7];\n  }\n```", "```\nlet ruleset = [1, 1, 0, 1, 1, 1, 1, 0];\n```", "```\n  if (a === 1 && b === 1 && c === 1) return ruleset[0];\n```", "```\nlet w = 10;\n```", "```\nlet w = 8;\nlet columns = width / w;\nlet rows = height / w;\nlet board = new Array(columns);\nfor (let i = 0; i < columns; i++) {\n  board[i] = new Array(rows);\n}\n```", "```\nfunction create2DArray(columns, rows) {\n  let arr = new Array(columns);\n  for (let i = 0; i < columns; i++) {\n    arr[i] = new Array(rows);\n    for (let j = 0; j < rows; j++) {\n      arr[i][j] = 0;\n    }\n  }\n  return arr;\n}\n```", "```\n     board[i][j] = floor(random(2));\n```", "```\n     board[i][j] = new Cell(floor(random(2)));\n```", "```\nfunction drawHexagon(x, y, r) {\n  push();\n  translate(x, y);\n  stroke(0);\n  beginShape();\n  for (let angle = 0; angle < TWO_PI; angle += PI / 3) {\n    let xoff = cos(angle) * r;\n    let yoff = sin(angle) * r;\n    vertex(xoff, yoff);\n  }\n  endShape(CLOSE);\n  pop();\n}\n```"]