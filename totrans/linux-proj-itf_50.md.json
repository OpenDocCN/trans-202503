["```\n#include <sys/mman.h>\n\nint `mprotect`(void **addr*, size_t *length*, int *prot*);\n```", "```\n$ `./t_mprotect`\nBefore mprotect()\nb7cde000-b7dde000 ---s 00000000 00:04 18258    /dev/zero (deleted)\nAfter mprotect()\nb7cde000-b7dde000 rw-s 00000000 00:04 18258    /dev/zero (deleted)\n```", "```\n`vmem/t_mprotect.c`\n#define _BSD_SOURCE         /* Get MAP_ANONYMOUS definition from <sys/mman.h> */\n#include <sys/mman.h>\n#include \"tlpi_hdr.h\"\n\n#define LEN (1024 * 1024)\n\n#define SHELL_FMT \"cat /proc/%ld/maps | grep zero\"\n#define CMD_SIZE (sizeof(SHELL_FMT) + 20)\n                            /* Allow extra space for integer string */\n\nint\nmain(int argc, char *argv[])\n{\n    char cmd[CMD_SIZE];\n    char *addr;\n\n    /* Create an anonymous mapping with all access denied */\n\n    addr = mmap(NULL, LEN, PROT_NONE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    if (addr == MAP_FAILED)\n        errExit(\"mmap\");\n\n    /* Display line from /proc/self/maps corresponding to mapping */\n\n    printf(\"Before mprotect()\\n\");\n    snprintf(cmd, CMD_SIZE, SHELL_FMT, (long) getpid());\n    system(cmd);\n\n    /* Change protection on memory to allow read and write access */\n\n    if (mprotect(addr, LEN, PROT_READ | PROT_WRITE) == -1)\n        errExit(\"mprotect\");\n\n    printf(\"After mprotect()\\n\");\n    system(cmd);                /* Review protection via /proc/self/maps */\n\n    exit(EXIT_SUCCESS);\n}\n      `vmem/t_mprotect.c`\n```", "```\n#include <sys/mman.h>\n\nint `mlock`(void **addr*, size_t *length*);\nint `munlock`(void **addr*, size_t *length*);\n```", "```\nmlock(*p1, len1);\nmlock(*p2, len2);               /* Actually has no effect */\nmunlock(*p1, len1);\n```", "```\n#include <sys/mman.h>\n\nint `mlockall`(int *flags*);\nint `munlockall`(void);\n```", "```\n#define _BSD_SOURCE           /* Or: #define _SVID_SOURCE */\n#include <sys/mman.h>\n\nint `mincore`(void **addr*, size_t *length*, unsigned char **vec*);\n```", "```\n`vmem/memlock.c`\n#define _BSD_SOURCE     /* Get mincore() declaration and MAP_ANONYMOUS\n                           definition from <sys/mman.h> */\n#include <sys/mman.h>\n#include \"tlpi_hdr.h\"\n\n/* Display residency of pages in range [addr .. (addr + length - 1)] */\n\nstatic void\ndisplayMincore(char *addr, size_t length)\n{\n    unsigned char *vec;\n    long pageSize, numPages, j;\n\n    pageSize = sysconf(_SC_PAGESIZE);\n\n    numPages = (length + pageSize - 1) / pageSize;\n    vec = malloc(numPages);\n    if (vec == NULL)\n        errExit(\"malloc\");\n\n    if (mincore(addr, length, vec) == -1)\n        errExit(\"mincore\");\n\n    for (j = 0; j < numPages; j++) {\n        if (j % 64 == 0)\n            printf(\"%s%10p: \", (j == 0) ? \"\" : \"\\n\", addr + (j * pageSize));\n        printf(\"%c\", (vec[j] & 1) ? '*' : '.');\n    }\n    printf(\"\\n\");\n\n    free(vec);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    char *addr;\n    size_t len, lockLen;\n    long pageSize, stepSize, j;\n\n    if (argc != 4 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s num-pages lock-page-step lock-page-len\\n\", argv[0]);\n\n    pageSize = sysconf(_SC_PAGESIZE);\n    if (pageSize == -1)\n        errExit(\"sysconf(_SC_PAGESIZE)\");\n\n    len =      getInt(argv[1], GN_GT_0, \"num-pages\") * pageSize;\n    stepSize = getInt(argv[2], GN_GT_0, \"lock-page-step\") * pageSize;\n    lockLen =  getInt(argv[3], GN_GT_0, \"lock-page-len\") * pageSize;\n\n    addr = mmap(NULL, len, PROT_READ, MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    if (addr == MAP_FAILED)\n        errExit(\"mmap\");\n\n    printf(\"Allocated %ld (%#lx) bytes starting at %p\\n\",\n            (long) len, (unsigned long) len, addr);\n\n    printf(\"Before mlock:\\n\");\n    displayMincore(addr, len);\n\n    /* Lock pages specified by command line arguments into memory */\n\n    for (j = 0; j + lockLen <= len; j += stepSize)\n        if (mlock(addr + j, lockLen) == -1)\n            errExit(\"mlock\");\n\n    printf(\"After mlock:\\n\");\n    displayMincore(addr, len);\n\n    exit(EXIT_SUCCESS);\n}\n      `vmem/memlock.c`\n```", "```\n$ `su`                                        *Assume privilege*\nPassword:\n# `./memlock 32 8 3`\nAllocated 131072 (0x20000) bytes starting at 0x4014a000\nBefore mlock:\n0x4014a000: ................................\nAfter mlock:\n0x4014a000: ***.....***.....***.....***.....\n```", "```\n#define _BSD_SOURCE\n#include <sys/mman.h>\n\nint `madvise`(void **addr*, size_t *length*, int *advice*);\n```"]