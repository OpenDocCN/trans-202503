- en: '**14'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Home Surveillance Camera**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll create a home surveillance camera system that streams
    live video on a web page that you can access from any device with browser capabilities
    connected to the same network as your Pi. This means you’ll be able to monitor
    any part of your house without getting off the sofa!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0172-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Camera Module v2
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you need to connect the camera to the Raspberry Pi, as we’ve
    shown you in [“Connecting the Camera”](ch13.xhtml#lev134) on [page 165](ch13.xhtml#page_165).
    If you haven’t enabled the software camera yet, go back to [Project 13](ch13.xhtml#ch13)
    and follow the instructions to set up the camera before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: '**RECORDING VIDEO TO A FILE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before building your home surveillance camera system, you need to learn how
    to record video to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Using [Project 13](ch13.xhtml#ch13) as a reference, connect your Raspberry Pi
    Camera Module v2 to your Pi using the CSI port. Create a new script called *record_file.py*
    in **Python 3 (IDLE)**, save it inside the *Cameras* folder, and enter the code
    in [Listing 14-1](ch14.xhtml#ch14list1).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 14-1:** Record video to a file'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As usual, you first import the picamera library to control the camera ➊. You
    create an object called `camera` to refer to the camera ➋ and then set the camera
    resolution to 640×480 ➌. The camera resolution is configurable; the maximum resolution
    for video recording is 1920×1080 and the minimum resolution is 64×64\. To enable
    maximum resolution, you also need to set the frame rate to 15 by adding the line
    of code `camera.framerate = 15`. You can try testing this script now with different
    resolutions and see what works best for you, or you can just go with our settings
    for now and come back to it later.
  prefs: []
  type: TYPE_NORMAL
- en: The camera then starts recording to a file called *videotest.h264* ➍. Feel free
    to change the filename, though you should keep the extension *.h264*, which is
    a format for video files. You then specify the amount of time that the camera
    should record for ➎. In this case, the camera is recording for 60 seconds. The
    `wait_recording()` method also repeatedly checks for errors, such as the disk
    space being too full for more recording.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, you stop the video recording ➏ and print a message saying that the recording
    is finished. Press **F5** or go to **Run** ▸ **Run Module** to run the script.
    Your video file is located in the script’s folder, *Cameras*. From the terminal,
    enter the following commands to navigate to the video folder and watch it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This opens a new window and plays the whole video in fullscreen. [Figure 14-1](ch14.xhtml#ch14fig1)
    shows a screenshot of our video recording test.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0174-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 14-1:** Recording video with the Raspberry Pi camera'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now for the important bit: you’re going to build a web page that is hosted
    in your Raspberry Pi—also known as a *web server*—that streams live video. (We’ll
    cover web servers in more detail in [Projects 15](ch15.xhtml#ch15), [16](ch16.xhtml#ch16),
    and [17](ch17.xhtml#ch17).)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The script for this project is advanced, so we won’t explain each line in detail.
    Here’s an overview of what the code should do:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize a web server and the Pi camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the web server, available at the Raspberry Pi IP address port 8000, to show
    a web page you can customize using HTML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the web page to contain the camera video streaming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the web server accessible from any browser connected to the same network
    as your Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open **Python 3 (IDLE)** and go to **File** ▸ **New** to create a new script.
    Enter the code in [Listing 14-2](ch14.xhtml#ch14list2), and save it as *surveillance_system.py*
    in the *Cameras* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*).
  prefs: []
  type: TYPE_NORMAL
- en: This script was based on the web streaming example at *[http://picamera.readthedocs.io/en/latest/recipes2.html](http://picamera.readthedocs.io/en/latest/recipes2.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 14-2:** Stream video to a web page'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[Listing 14-2](ch14.xhtml#ch14list2) is more complicated than the scripts we’ve
    been writing so far, and explaining each class and function necessary for video
    streaming goes beyond the book’s scope, so we won’t go into it here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is space for customization, though. You can edit the way your web page
    looks and the camera settings:'
  prefs: []
  type: TYPE_NORMAL
- en: At ➊, you define your web page content using HTML; here you can change the title
    and heading of your web page. Check [Project 15](ch15.xhtml#ch15) for more information
    about HTML, as well as to learn how to style your web page using CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At ➋, you initialize the camera; here you can change the camera resolution and
    frame rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Once the script
    is running, your camera will stream to the web page. To access this page, you
    need to find the IP address for your Pi and enter the URL *http://<Pi IP address>:8000*,
    replacing *<Pi IP address>* with your Pi’s IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find your Pi’s IP address, go to the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will print the Pi’s IP address, as highlighted in [Figure 14-2](ch14.xhtml#ch14fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0177-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 14-2:** Finding your Raspberry Pi’s IP address'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you’ve built your own home surveillance system! You can access
    the video streaming from a computer, smartphone, or tablet browser connected to
    the local network. In this example, since our IP address is 192.168.1.112, we
    enter *http://192.168.1.112:8000*. Make sure you use your own IP address.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this project you’ve learned how to record video and how to build a web server
    that streams live video footage. You can mix what you’ve learned here with other
    projects to enhance them. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit [Project 13](ch13.xhtml#ch13) so that the Pi records video for a specified
    time when it detects movement inside your house while you’re out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the streaming web page with CSS using the skills you’ll learn in [Project
    15](ch15.xhtml#ch15).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
