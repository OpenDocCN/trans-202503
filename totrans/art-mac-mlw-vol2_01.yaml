- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: PART I DATA COLLECTION
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分 数据收集
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: Malware detection begins with data collection. All malicious code performs actions
    on an infected system that deviate from the norm. Therefore, by collecting sufficient
    data, you can uncover any infection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件检测始于数据收集。所有恶意代码都会在感染的系统上执行偏离正常行为的操作。因此，通过收集足够的数据，你可以揭示任何感染。
- en: Symptoms of digital pathogens often reflect the malware’s goals or capabilities.
    For example, if a computer is infected with adware, you’ll likely see browser
    subversions or hijacked search pages. In the case of a stealthy backdoor, you
    may observe a listening socket that allows an attacker to remotely control the
    infected system or its unauthorized network traffic. And any malware that wants
    to survive a reboot will have to persist, resulting in noticeable filesystem modifications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数字病原体的症状通常反映了恶意软件的目标或功能。例如，如果计算机感染了广告软件，你可能会看到浏览器篡改或劫持的搜索页面。如果是隐秘的后门程序，你可能会观察到一个监听套接字，允许攻击者远程控制感染的系统或其未经授权的网络流量。任何想要在重启后存活的恶意软件都必须具有持久性，这将导致文件系统的显著修改。
- en: In [Part I](part1.xhtml), I discuss how security software could programmatically
    collect data from a macOS system to detect any digital infections, just as a doctor
    might when checking whether a human patient is sick. Most malicious code on macOS
    systems runs as a stand-alone process, so I’ll start this section by discussing
    programmatic methods of querying the system to retrieve a snapshot of all running
    processes. Then we’ll extract information about each process, such as their arguments,
    hierarchies, loaded libraries, and much more. If any running process is indeed
    malware, the information we extract here should readily reveal this fact.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一部分](part1.xhtml)中，我讨论了安全软件如何通过编程方式收集来自macOS系统的数据，以检测任何数字感染，就像医生在检查人类患者是否生病时一样。大多数恶意代码在macOS系统上以独立进程的形式运行，因此我将从讨论如何通过编程方式查询系统来获取所有正在运行进程的快照开始这一部分。然后，我们将提取有关每个进程的信息，例如它们的参数、层级、加载的库等。如果某个运行中的进程确实是恶意软件，我们在此提取的信息应该能够轻松揭示这一事实。
- en: Subsequent chapters will bolster our malware detection capabilities by illustrating
    how to extract other types of data, either from specific items or from the system
    as a whole. I’ll discuss code signing by delving into mechanisms and APIs to obtain
    and validate cryptographic code signing signatures. This information can further
    uncover malware, but equally importantly, it also allows us to ignore trusted
    items in our hunt for malicious code. I’ll also show how to glean important data
    from Mach-O binaries, the network, and Apple’s proprietary Background Task Management
    database used to manage persistent items.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的章节将通过展示如何从特定项目或整个系统中提取其他类型的数据，来增强我们的恶意软件检测能力。我将通过深入探讨机制和API来讨论代码签名，获取并验证加密的代码签名。这些信息不仅能进一步揭示恶意软件，而且同样重要的是，它还允许我们在寻找恶意代码时忽略可信项目。我还将展示如何从Mach-O二进制文件、网络以及苹果公司专有的后台任务管理数据库中提取重要数据，该数据库用于管理持久化项目。
