- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Java
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Java
- en: '![g08001](image_fi/502680c08/g08001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g08001](image_fi/502680c08/g08001.png)'
- en: We came back from Christmas break. I got in pretty early, bright eyed and bushy
    tailed, and talked to Rubin. He informed me that he and Brian had dinner during
    the week off and that they’d decided that we were going to write everything in
    Java.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们从圣诞假期回来。我很早就到达，精神焕发，与Rubin交谈。他告诉我，他和Brian在假期期间共进晚餐，并决定我们将使用Java来编写所有内容。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Joe Onorato
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —乔·奥诺拉托
- en: Language Choices
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言选择
- en: 'The choice of a programming language for Android was probably more tied to
    Android’s growth than might otherwise be obvious. After all, a programming language
    is just the medium to input the information to the computer: Does it really matter?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个编程语言来开发Android，可能比表面看起来更紧密地与Android的成长有关。毕竟，编程语言只是向计算机输入信息的媒介：这真的那么重要吗？
- en: Yes, it does. Experienced programmers can and do pick up new languages all the
    time. But even these experts develop patterns that make them more efficient with
    languages that they know well. And the effect of middleware, or utility libraries
    that developers can carry from project to project, can’t be discounted. The fact
    that a programmer can depend on some library^([1](#c08-footnote-1)) in one project
    and then use it to bootstrap other projects means that they can be more efficient
    and productive on every new project because they don’t have to keep re-inventing
    the world.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，的确如此。经验丰富的程序员可以并且确实会不断学习新语言。但即使是这些专家，也会形成一些模式，使得他们在熟悉的语言上更加高效。而中间件的效果，或者开发者可以在项目间迁移的工具库，也是不可忽视的。一个程序员可以在一个项目中依赖某些库^([1](#c08-footnote-1))，然后在其他项目中继续使用它，这意味着他们在每个新项目中都能更加高效和富有生产力，因为他们无需重新发明轮子。
- en: The choice to use the Java programming language^([2](#c08-footnote-2)) was important,
    because at the time Android was released, Java was one of the major languages
    used by software developers around the world. The fact that Android allowed these
    developers to use their existing language skills to write applications on Android
    meant that many developers could avoid the ramp-up time that learning a new language
    would have entailed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 选择使用Java编程语言^([2](#c08-footnote-2))是一个重要决策，因为在Android发布时，Java是全球软件开发者广泛使用的主要语言之一。Android允许这些开发者利用他们现有的语言技能来开发应用，这意味着许多开发者可以避免学习新语言所需的上手时间。
- en: But this language choice was not obvious or immediate in the early days of Android.
    There were actually three languages being debated internally.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但在Android早期，这个语言选择并不是显而易见的，也没有立即确定。实际上，内部讨论了三种语言。
- en: First of all, there was JavaScript. In fact, in the beginning there was *only*
    JavaScript, because Android, at the start, was a desktop app written on and around
    the web’s programming language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是JavaScript。事实上，最初只有*JavaScript*，因为Android最初是一个基于网络编程语言编写的桌面应用。
- en: JavaScript is the programming language that developers use to write the code
    that is on the web pages that we visit. When we see something moving on a browser
    page, that animation is usually powered by JavaScript code. But JavaScript is
    a bit, er, messy, as real programming languages go. It’s easy for a developer
    to get things basically working with JavaScript, but some of its fundamental concepts^([3](#c08-footnote-3))
    make it more difficult to program larger systems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是开发者用来编写网页代码的编程语言。当我们在浏览器页面上看到某些动画时，这些动画通常是由JavaScript代码驱动的。但JavaScript作为一种编程语言，稍显*凌乱*。对于开发者来说，使用JavaScript让东西基本上能工作很容易，但它的一些基本概念^([3](#c08-footnote-3))使得编写大型系统变得更加困难。
- en: 'After work began on the real platform for Android, there was a choice of which
    language to use: JavaScript , C++, or Java.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android的真实平台开发开始后，选择使用哪种语言成为了一个问题：JavaScript、C++，还是Java。
- en: C++ was attractive because many developers know it and it’s used in low-level
    programming tasks to this day. C++ developers have a lot of control over important
    aspects of their application’s operation, such as memory allocation. But the flip
    side is that developers have to manage this kind of information in their applications.
    If they allocate memory to store an object (say, an image), they have to make
    sure they deallocate it when they are finished. Failing to do this (an all-too-common
    problem in software) can lead to *memory* *leaks* where memory is dribbled away
    and the application simply grows without bound until it uses up everything available
    in the system and fails when the system has no more memory to offer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 很有吸引力，因为许多开发者熟悉它，并且它至今仍用于低级编程任务。C++ 开发者对应用程序操作的许多重要方面拥有很大的控制权，例如内存分配。但另一方面，开发者必须在应用程序中管理这些信息。如果他们分配了内存来存储一个对象（比如图像），他们必须确保在使用完后释放内存。不这样做（这是软件中非常常见的问题）可能会导致
    *内存* *泄漏*，即内存被不断浪费，应用程序会无限膨胀，直到耗尽系统中可用的所有内存，最终由于系统没有更多内存可用而崩溃。
- en: Java is a programming language built around the concept of a *runtime* or *virtual
    machine (VM)*, which handles all of the tedious bits about memory management that
    C++ programmers have to handle on their own. In the image example above, the Java
    programmer simply loads an image, which causes the memory to be allocated. When
    the image is no longer being used, the runtime automatically *collects* that memory,
    which is known as *garbage collection*. Java developers can ignore details of
    memory collection (and leaks) and get down to the business of writing their actual
    application logic.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是一种围绕 *运行时* 或 *虚拟机 (VM)* 概念构建的编程语言，它处理所有 C++ 程序员必须自行处理的内存管理琐事。在上面的图像示例中，Java
    程序员只需加载图像，这样内存就会被分配。当图像不再被使用时，运行时会自动 *回收* 这些内存，这被称为 *垃圾回收*。Java 开发者可以忽略内存回收（和内存泄漏）的细节，专心编写实际的应用逻辑。
- en: Another reason for the team to consider Java was the existence of J2ME,^([4](#c08-footnote-4))
    the Java-based platform that ran on various devices already. Ficus Kirkpatrick
    said, “At the time, to be on a phone and to get these carrier deals, you had to
    have support for J2ME.” Choosing Java provided some ability to run J2ME code on
    the platform, which was considered useful at the time that Android was first being
    created.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 团队考虑选择 Java 的另一个原因是 J2ME^([4](#c08-footnote-4)) 的存在，这是一个基于 Java 的平台，已经能够在各种设备上运行。Ficus
    Kirkpatrick 说：“当时，要在手机上运行并获得这些运营商的合作，你必须支持 J2ME。” 选择 Java 提供了一定的能力在平台上运行 J2ME
    代码，而这一点在 Android 最初创建时被认为是有用的。
- en: Finally, powerful tools for writing Java code were available for free, including
    Eclipse and NetBeans. On the other hand, C++ didn’t have good free IDE^([5](#c08-footnote-5))
    support. Microsoft offered VisualStudio, which was a great tool for C++ development,
    but it wasn’t free, and Android wanted to appeal to all developers without requiring
    expensive tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，强大的 Java 代码编写工具，包括 Eclipse 和 NetBeans，都是免费的。而 C++ 则没有很好的免费 IDE^([5](#c08-footnote-5))
    支持。微软提供了 VisualStudio，这是一个非常适合 C++ 开发的工具，但它并不是免费的，而 Android 想要吸引所有开发者，而不要求使用昂贵的工具。
- en: 'The first plan was not to have just one language, but to offer a choice. Again,
    Ficus: “Our original idea was that we were going to do everything in a language-independent
    way. You were going to be able to write your apps in JavaScript, C++, and Java.
    Eventually we realized there were like twelve of us and we were never going to
    make that work. So we said ‘OK, we have to pick a language.’”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的计划并不是只选择一种语言，而是提供多种选择。再次引用 Ficus：“我们最初的想法是要以语言无关的方式做一切。你可以用 JavaScript、C++
    和 Java 编写应用程序。最终我们意识到，只有我们十二个人，根本做不到这一点。所以我们决定‘好吧，我们必须选一种语言。’”
- en: Andy Rubin saw the choice of just one language as a simplification for developers.
    Swetland said, “We were toying with some concepts of doing Java and C++. Andy
    felt very strongly that we needed one language, one API, so as to not confuse
    things. He saw Symbian^([6](#c08-footnote-6)) with their *n* different toolkits^([7](#c08-footnote-7))
    as confusing.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Andy Rubin 认为只选择一种语言是对开发者的简化。Swetland 说：“我们曾考虑过同时使用 Java 和 C++。Andy 强烈认为我们需要一种语言，一种
    API，这样就不会让事情变得复杂。他认为 Symbian^([6](#c08-footnote-6)) 以及他们的 *n* 种不同工具包^([7](#c08-footnote-7))会让人感到困惑。”
- en: These were the technical details and merits that factored into the debate. The
    actual decision was a bit less formal; Andy made the call and told Swetland over
    dinner one evening.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是参与辩论的技术细节和优点。实际的决定过程则没有那么正式；是安迪做出了决定，并在某个晚餐时告诉了斯威特兰德。
- en: The language choice was a good example of how quickly decisions were made on
    Android. In part, it was because it was Andy’s call, and Andy tended to make hard
    decisions that the organization would then scramble to execute. But more important,
    decisions were made quickly so that the organization could simply move on and
    do the rest of the infinite set of things that needed doing. The language choice
    had been debated internally for a while, and there was no right answer, but simply
    having a decision was more important than everyone being happy with whatever decision
    that was. So Java was it, and the team moved on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 语言选择很好地展示了Android决策的快速性。部分原因是因为这是安迪的决定，而安迪往往做出艰难的决定，然后组织会匆忙执行。但更重要的是，决策迅速做出，以便组织可以继续前进，做剩下的无限多需要做的事情。语言选择曾在内部讨论了一段时间，没有正确答案，但拥有一个决策，比每个人都对那个决定感到满意更为重要。所以，选择了Java，团队也继续前行。
- en: 'Ficus said, of the decision: “It didn’t really feel like much of a choice,
    given that the carriers wanted to see support for J2ME^([8](#c08-footnote-8))
    apps and this kind of ecosystem that existed at the time. And some of us had worked
    at Danger before, on the Hiptop, and we knew that we could make Java perform on
    a low-end device.”'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 费库斯谈到这个决定时说：“考虑到运营商希望支持J2ME^([8](#c08-footnote-8))应用，并且当时存在这种生态系统，实际上这并不算是一个真正的选择。而且我们中的一些人曾在Danger工作过，做过Hiptop，我们知道我们可以让Java在低端设备上运行。”
- en: 'Dianne Hackborn remembers when the decision was made: “Andy, very rightly,
    said, ‘We cannot do three different languages. That’s ridiculous, and we need
    to pick one. So we’re going to do Java.’ There was a lot of drama about that.
    No one cared about JavaScript, but a lot of people cared about C++.”'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 黛安·哈克博恩回忆起这个决定时说：“安迪非常正确地说，‘我们不能使用三种不同的语言，那太荒谬了，我们需要选一种。我们就选Java吧。’那时关于这个决定有很多戏剧性的争论。没有人关心JavaScript，但很多人关心C++。”
- en: The choice of Java made sense for various reasons, including team expertise.
    For example, the engineers from Danger had learned how to write an operating system
    with that language in an efficient way for those earlier, very constrained devices.
    In the end, with this and many other decisions, the team took a pragmatic approach.
    As Dianne said, “Not because anyone loved it, but because it’s what made sense
    to make the platform successful, and then the team adjusts.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Java是有多方面原因的，其中包括团队的专业能力。例如，来自Danger的工程师们曾学会了如何用Java为那些早期极其受限的设备高效地编写操作系统。最终，对于这一决定以及其他许多决策，团队采取了务实的态度。正如黛安所说：“不是因为有人特别喜欢它，而是因为它是实现平台成功的合理选择，然后团队进行调整。”
- en: Although Java was chosen as the primary language for Android development, there
    was (and still is) a lot of code written for Android in other languages. Much
    of the platform itself is written in C++ (and even some limited parts in assembly
    language). Also, most games are written in C++, as are some other apps, in full
    or in part. C++ is a popular language with many developers, because it offers
    some performance advantages for low-level code, as well as integration with existing
    C++ libraries and tools. But the main language, especially for most non-game applications,
    became Java, and that’s what all of the Android APIs were written in and for.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Java被选为Android开发的主要语言，但事实上（并且现在仍然是）很多Android代码是用其他语言编写的。平台本身的大部分是用C++编写的（甚至有一些部分使用汇编语言）。此外，大多数游戏都是用C++编写的，其他一些应用也是用C++编写的，完全或部分如此。C++是一种受开发者欢迎的语言，因为它为低级代码提供了一些性能优势，并且能够与现有的C++库和工具进行集成。但主要的语言，尤其是对于大多数非游戏应用来说，变成了Java，这也是所有Android
    API所用的语言。
- en: Not everybody was happy with the language decision. San Mehat wasn’t a big fan
    of Java, especially for the low-level systems programming that he did. “I didn’t
    have a problem with the language itself. Well, maybe I did, inasmuch as it hid
    all the details that were important to writing code that scaled and ran well.”
    He ordered a new license plate for his car, JAVA SUX. “When you go to get the
    license plate, they [the Department of Motor Vehicles] ask you what it stands
    for. I said that I used to work for Sun and we made this Java thing, and it stands
    for Secondary User Extensions, and they said ‘Okay.’”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每个人都对语言的选择感到满意。San Mehat并不是Java的忠实粉丝，尤其是在他从事低级系统编程时。“我对语言本身没有问题。嗯，可能有，因为它隐藏了许多写出高效、可扩展代码时重要的细节。”他为自己的车订了一块新车牌，写着JAVA
    SUX。“当你去申请车牌时，车管局会问你那是什么意思。我说我以前在Sun工作，我们做了这个Java东西，它代表着‘Secondary User Extensions’，他们就说‘好的’。”
- en: '![](image_fi/502680c08/f08001.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c08/f08001.png)'
- en: San’s license plate. San was not a fan of Android’s language choice. (Picture
    courtesy Eric Fischer.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: San的车牌。San并不喜欢Android的语言选择。（图片由Eric Fischer提供。）
- en: Runtimes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时
- en: To understand runtimes, you need to understand something about programming languages.
    Programmers write their code in whatever language they choose (C, Java, C++, Kotlin,
    Python, assembly . . . whatever). Computers don’t understand these languages;
    they understand binary code (0s and 1s) . . . and that’s it. The binary code represents
    instructions that the computer executes, like “add these two numbers.” In order
    to convert from typical programming languages into the binary-encoded instructions
    that the computer understands, programmers use tools called compilers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解运行时，你需要对编程语言有一些了解。程序员使用他们选择的任何语言编写代码（C、Java、C++、Kotlin、Python、汇编语言……随便什么）。计算机并不能理解这些语言，它们只理解二进制代码（0和1）……就这么简单。二进制代码表示计算机执行的指令，比如“将这两个数字相加”。为了将典型的编程语言转换为计算机能够理解的二进制编码指令，程序员使用一种叫做编译器的工具。
- en: Compilers translate from whatever language the programmer uses into binary instructions
    that the computer understands. So, for example, you can take a chunk of code written
    in C and compile it into a binary representation for a PC such that that compiled
    C code will run on that PC.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将程序员使用的任何语言翻译成计算机理解的二进制指令。例如，你可以将一段用C语言编写的代码编译成PC可执行的二进制表示，使得编译后的C代码能够在该PC上运行。
- en: That same compiled code may not run on a different kind of computer, like a
    Mac, or a Linux server, because that other computer may not have the same kind
    of CPU, so the binary instructions the compiler generated won’t make sense on
    that other system. Instead, the original source code needs to be compiled into
    a different binary version for each different type of hardware you want to run
    it on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段编译过的代码可能无法在其他类型的计算机上运行，比如Mac或Linux服务器，因为其他计算机可能没有相同的CPU，因此编译器生成的二进制指令在这些系统上无法理解。相反，原始源代码需要针对你希望运行的每种硬件编译成不同的二进制版本。
- en: '![](image_fi/502680c08/f08002.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c08/f08002.png)'
- en: Separate compilers create unique executables for every type of machine on which
    the code will be run.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的编译器为每种机器类型创建独特的可执行文件，用于运行代码。
- en: Along comes Java. The Java compiler translates source code not into machine-readable
    code, but into an intermediate representation called *bytecode*. This code can
    be executed on any computer platform that has an additional piece of software
    running on it called a *runtime*. The runtime interprets the bytecode and translates
    it into the binary representation of that computer, essentially compiling it on
    the fly. This ability to run on different hardware is what Sun Microsystems (the
    company where James Gosling was working when he created Java) called, “Write once,
    run anywhere.” Code would be compiled into bytecode that could then run on any
    target computer with a Java runtime.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后出现了Java。Java编译器将源代码转换的不是机器可读的代码，而是一个叫做*字节码*的中间表示。这个字节码可以在任何安装了额外软件的计算机平台上执行，这个额外的软件就是*运行时*。运行时会解释字节码，并将其转换为该计算机的二进制表示，本质上是在运行时编译它。Java能够在不同硬件上运行的能力就是Sun
    Microsystems（詹姆斯·高斯林在创建Java时所在的公司）所说的“写一次，到处运行”。代码会被编译成字节码，然后可以在任何安装了Java运行时的目标计算机上运行。
- en: '![](image_fi/502680c08/f08003.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c08/f08003.png)'
- en: Java code only needs to be compiled once. This produces a single executable
    that can run on all target machines that have a Java runtime.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Java 代码只需要编译一次。这将生成一个可以在所有目标机器上运行的单一可执行文件，只要该机器拥有 Java 运行时环境。
- en: Since the Android team wanted to use Java, they also needed a runtime. In fact,
    they went through several of them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Android 团队希望使用 Java，因此他们也需要一个运行时环境。事实上，他们经历了多个不同的运行时环境。
- en: 'At first, the team simply used existing runtimes. The first of these was Waba.^([9](#c08-footnote-9))
    Later on, the JamVM^([10](#c08-footnote-10)) virtual machine was substituted for
    Waba. Mike Fleming had joined by this time and helped get JamVM going: “Dan Bornstein’s
    VM wasn’t going to be ready for a while and we were going to write an awful lot
    of code. If we were going to be a Java platform, we needed to have something to
    run with for a while. Swetland and Fadden helped me out.” JamVM was used by Android
    until, in 2007, the Android runtime (Dalvik) was up and running.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，团队仅仅使用了现有的运行时环境。其中第一个是 Waba。^([9](#c08-footnote-9)) 后来，JamVM^([10](#c08-footnote-10))
    虚拟机替代了 Waba。到这时，Mike Fleming 加入了团队，并帮助启动了 JamVM：“Dan Bornstein 的虚拟机还需要一段时间才能准备好，而我们将编写大量代码。如果我们要成为一个
    Java 平台，就需要一个能够运行的东西，至少暂时能用。Swetland 和 Fadden 帮了我很多忙。” JamVM 一直被 Android 使用，直到
    2007 年，Android 运行时（Dalvik）开始运行。
- en: Dan Bornstein and the Dalvik Runtime
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dan Bornstein 和 Dalvik 运行时
- en: Open a file, bang a few keys at random, then debug until complete.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 打开一个文件，随意敲击几下键盘，然后调试直到完成。
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Dan Bornstein (according to Andy McFadden)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Dan Bornstein（根据 Andy McFadden 的说法）
- en: Although Waba and JamVM were sufficient for prototyping and early development,
    the team wanted their own runtime that they could control and customize as they
    needed. Brian Swetland was involved in the runtime that was written at Danger,
    but he had his hands full with kernel and systems work for Android. So the team
    hired Dan Bornstein, whom Brian had worked with at Danger.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Waba 和 JamVM 足以进行原型设计和早期开发，但团队希望拥有自己的运行时环境，能够根据需要进行控制和定制。Brian Swetland 参与了
    Danger 编写的运行时环境，但他在 Android 的内核和系统工作上已经忙不过来了。因此，团队聘请了 Dan Bornstein，Brian 曾在 Danger
    与他共事过。
- en: Dan (known to the team as “danfuzz”) had taken over the runtime from Brian at
    Danger. “Not long after I was hired, I started referring to myself as ‘Brian Jr.’
    He really didn’t like it . . . which is why I kept saying it.”
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Dan（团队称他为“danfuzz”）接手了来自 Brian 在 Danger 的运行时工作。“我被聘用后没多久，我开始称自己为‘Brian Jr.’他真的不喜欢这个名字……这也是我为什么一直这么叫的原因。”
- en: 'Dan was introduced to programming at the age of seven. He and his brother just
    wanted to play video games, so they eventually talked their parents into getting
    an Apple II, which the parents thought would be both a game and an education machine.
    The parents apparently won, because Dan didn’t just play games; he started programming
    them: “I totally wrote crappy video games, mostly text and low-res graphics.”
    Both Dan and his brother eventually became software engineers.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 七岁时开始接触编程。他和哥哥只是想玩视频游戏，于是他们最终说服父母购买了一台 Apple II，而父母认为这既是游戏机又是教育机器。显然父母赢了，因为
    Dan 不仅仅玩游戏；他开始编写游戏：“我完全编写了些糟糕的电子游戏，大多数是文本和低分辨率图形。” Dan 和他的哥哥最终都成为了软件工程师。
- en: Dan worked at various companies in Silicon Valley through the 90s and early
    2000s, including Danger, where he worked on (wait for it . . . ) a runtime for
    the Java programming language. So he was a natural candidate for that work on
    the Android team when he joined in October of 2005.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 在 90 年代和 2000 年代初期曾在硅谷的多家公司工作，包括 Danger，在那里他曾从事（等等……）Java 编程语言的运行时工作。因此，当他于
    2005 年 10 月加入 Android 团队时，他是这项工作的自然人选。
- en: Dan’s first task was to evaluate the possible options. It wasn’t obvious to
    the small team on Android at that time whether they could simply use something
    that already existed (either open source or some technology that they could acquire)
    or whether they needed to build something in-house. Dan started working on both
    of these options in parallel, evaluating existing runtimes while also building
    a runtime from scratch.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Dan 的第一个任务是评估可能的选项。对于当时 Android 小团队来说，是否可以简单地使用现有的东西（无论是开源的，还是能够获取的技术），或者是否需要内部构建一些东西，并不明显。Dan
    开始同时进行这两项工作，评估现有的运行时环境，同时也在从零开始构建一个运行时环境。
- en: Although Waba and JamVM worked well for quickly enabling the team’s use of Java,
    they were not seriously considered as long-term options. Both runtimes interpreted
    Java bytecode directly. But the team felt that there were performance and memory
    gains to be had by converting the Java code to another, more optimal format. A
    new bytecode format meant a new runtime, so Dan got busy making that happen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Waba和JamVM非常适合快速使团队能够使用Java，但它们并未被认真考虑为长期的解决方案。这两种运行时直接解释Java字节码。但团队认为，通过将Java代码转换为另一种更优的格式，可以获得性能和内存方面的提升。新的字节码格式意味着新的运行时环境，因此Dan开始了这项工作。
- en: 'Dan began work on a new runtime, which he named *Dalvik*: “I had just finished
    reading an issue [of *McSweeney’s*], which consisted of English translations of
    modern Icelandic fiction. So I had Iceland on the brain. I looked at a map of
    Iceland and tried to find something that was short and pronounceable, and didn’t
    have any of the weird characters, and I found Dalvík^([11](#c08-footnote-11))
    (or ‘Dal-veek,’ as it’s pronounced). It sounded like a nice little town.”'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Dan开始着手开发一个新的运行时环境，他将其命名为*Dalvik*：“我刚读完一本[《McSweeney’s》]的期刊，内容是现代冰岛小说的英文翻译。所以那时我脑子里一直想着冰岛。我查看了冰岛的地图，试图找到一个简短且易于发音的名称，并且没有任何奇怪的字符，最后我找到了Dalvík^([11](#c08-footnote-11))（或者‘Dal-veek’，就是这样发音的）。它听起来像是一个不错的小镇。”
- en: '![](image_fi/502680c08/f08004.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c08/f08004.png)'
- en: 'Java code written for Android went through two compilation steps: one to create
    Java bytecode, and the next to convert that to Dalvik bytecode, which would then
    run on Android’s Dalvik runtime.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为Android编写的Java代码经过了两个编译步骤：一个是创建Java字节码，另一个是将其转换为Dalvik字节码，然后在Android的Dalvik运行时中运行。
- en: Instead of running Java bytecode, the Dalvik VM ran another form of bytecode
    compiled from Java bytecode. There were efficiencies in size to be gained in having
    their own bytecode format, and space on the device at that time was at a premium.
    The Dalvik bytecode required an additional compilation step (using another compiler,
    called DX) to get it into the form readable by Dalvik, called dex.^([12](#c08-footnote-12))
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik虚拟机并不是直接运行Java字节码，而是运行另一种从Java字节码编译而来的字节码格式。采用自己特有的字节码格式在大小上可以获得效率提升，而当时设备上的存储空间非常紧张。Dalvik字节码需要一个额外的编译步骤（使用另一个编译器，叫做DX）才能转换为Dalvik可读取的格式，称为dex^([12](#c08-footnote-12))。
- en: '![](image_fi/502680c08/f08005.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c08/f08005.png)'
- en: Dan Bornstein, outside of the town of Dalvík, Iceland. In the period between
    finishing work on the G1 and the device actually shipping, Dan took a break from
    working on Dalvik to visit Dalvík. (Picture courtesy Dan Bornstein.)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Dan Bornstein，位于冰岛Dalvík镇外。在完成G1工作和设备实际发货之间的这段时间，Dan从Dalvik的开发工作中休息，去了一趟Dalvík。（照片由Dan
    Bornstein提供。）
- en: Eventually, Fadden pitched in to help with the runtime. “Danfuzz had the bytecode
    converter working reasonably well and needed someone to step up and write the
    VM. I volunteered, but pointed out that I knew very little about Java and VMs,
    and wasn’t quite sure where to start. He said, ‘Open a file, bang a few keys at
    random, then debug until complete.’”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Fadden也参与了运行时环境的开发。“Danfuzz已经让字节码转换器运行得相当不错，他需要有人加入并编写虚拟机。我自愿参与，但指出我对Java和虚拟机了解甚少，也不太清楚从哪里开始。他说，‘打开一个文件，随便敲几下键盘，然后调试直到完成。’”
- en: Dave Bort, another engineer on the team, wrote the first version of the Dalvik
    garbage collector. That garbage collector shipped with the runtime in 1.0 and
    was the basis for several years of refinement and optimization.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的另一位工程师Dave Bort编写了Dalvik垃圾回收器的第一个版本。这个垃圾回收器与1.0版本的运行时一起发布，并成为几年优化和改进的基础。
- en: Throughout this time, the runtime was constantly changing out from under all
    of the Java code being written for the platform. From Waba to JamVM to the nascent
    Dalvik runtime, major shifts were happening, but code kept running. Romain Guy
    remarked that even though the team was changing a huge and critical part of the
    system,^([13](#c08-footnote-13)) “I don’t remember running into showstopper bugs,
    or even bugs at all. I don’t remember anything else on Android being that stable.”
    Dan replied, “Some amount of the nature of that layer of the system helps with
    that—if the VM’s not working, shit just falls over.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间里，运行时环境一直在不断变化，而所有为平台编写的Java代码都在适应这些变化。从Waba到JamVM，再到初步的Dalvik运行时，发生了巨大的转变，但代码依然在运行。Romain
    Guy评论道，即便团队在更改系统中一个巨大且关键的部分^([13](#c08-footnote-13))，“我不记得曾遇到过致命的错误，甚至根本没有错误。我不记得Android的其他部分曾那么稳定过。”Dan回答道，“这部分系统的本质在某种程度上有助于这个问题——如果虚拟机不工作，整个系统就会崩溃。”
- en: Zygote
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 胚胎（Zygote）
- en: One of the things that the Dalvik team created to make Android work for 1.0
    was (and still is) called Zygote.^([14](#c08-footnote-14)) Zygote is like the
    loaf of bread you slice when making a sandwich. You could, of course, bake the
    bread from scratch every time you made a sandwich, but that’s a lot of effort
    and time spent every time you want a sandwich. It’s obviously much faster and
    easier to have a loaf that you can just cut slices from to jump-start each sandwich.
    Zygote is like sandwich bread for applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Android在1.0版本上正常运行，Dalvik团队创建了一项技术（直到现在依然在使用），它被称为Zygote。^([14](#c08-footnote-14))
    Zygote就像是你做三明治时用来切片的面包。你当然可以每次做三明治时从零开始烤面包，但那样会浪费很多时间和精力。显然，拥有一条可以随时切片的面包，更加快捷和方便，用来快速开始做三明治。Zygote就像是应用程序的三明治面包。
- en: Dan had this idea, which came from a feature of Emacs^([15](#c08-footnote-15))
    (a popular text editor on Unix systems), where it would allow you to dump the
    state at any time and then start up Emacs later from this saved state (cleverly
    called *undump*). This meant that Emacs could start much faster because it just
    sucked in the state from disk instead of running a bunch of code logic at startup
    time. “My idea was that we implement an undumper-type system as made most ‘famous’
    (at least to me) by Emacs. Mike [Fleming] said, ‘How about we skip the part where
    we dump to disk and reload?’ And he ran with it.” Mike got the system up and running,
    dramatically changing the way that applications started. Instead of each app loading
    in all of the code they required, and initializing it as it was loaded in, the
    Zygote system created a single process with much of the core platform code, essentially
    pre-loading and initializing all of it. Whenever an application launched, the
    Zygote process would be *forked* (duplicating itself into a new process), resulting
    in an almost immediate launch to that early stage of the new application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Dan有一个想法，这个想法来源于Emacs^([15](#c08-footnote-15))（一款流行的Unix系统文本编辑器）的一个特性，它允许你随时保存当前状态，然后从这个保存的状态重新启动Emacs（巧妙地称为*undump*）。这意味着Emacs可以更快启动，因为它只是从磁盘中加载状态，而不是在启动时执行一大堆代码逻辑。“我的想法是，我们实现一个类似undumper的系统，正如Emacs所做的那样，Mike
    [Fleming]说，‘我们能不能跳过将状态保存到磁盘然后重新加载的步骤？’然后他就开始着手实现了。”Mike使这个系统成功运行，极大地改变了应用程序的启动方式。不同于每个应用程序加载它所需要的所有代码并在加载时初始化，Zygote系统创建了一个单独的进程，包含了大部分核心平台代码，基本上是预加载并初始化了所有代码。每当一个应用程序启动时，Zygote进程会被*fork*（复制成一个新的进程），从而几乎可以立即启动新应用程序的早期阶段。
- en: Bob Lee (who worked on core libraries, the subject of the next chapter) said
    of Zygote, “It was just so simple! It’s like one API call! The reason we were
    able to do that was that the memory was copy-on-write.^([16](#c08-footnote-16))
    So as long as you didn’t touch those memory pages from that initial Zygote process,
    all that memory would be shared across the whole OS. It was just such a clever,
    beautiful solution to leverage stuff that was already there.”
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Bob Lee（曾负责核心库开发，下一章将讨论的内容）谈到Zygote时说：“它简直太简单了！就像一个API调用！我们能够做到这一点的原因是内存采用了写时复制（copy-on-write）技术。^([16](#c08-footnote-16))
    所以只要你不去触碰那些来自初始Zygote进程的内存页面，所有的内存就会在整个操作系统中共享。这个方法真是一个聪明、优美的解决方案，充分利用了已经存在的技术。”
- en: 'The system didn’t quite work as intended at first. Bob chased down a problem
    with the garbage collector: “After one garbage collection, I was like, ‘My app’s
    taking up so much memory again!’ It was because the garbage collector would touch
    every memory page.” That is, the normal efforts of the runtime would write to
    pages in memory that needed to stay read-only for the shared-memory approach of
    Zygote to work.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统起初并没有按预期工作。Bob追踪了垃圾回收器的问题：“经过一次垃圾回收后，我发现‘我的应用又占用了这么多内存！’这是因为垃圾回收器会触及每一页内存。”也就是说，运行时的正常操作会写入内存中的某些页面，而这些页面需要保持只读，以便Zygote的共享内存方法能够正常工作。
- en: Fadden came in with a fix for this. Each new process would separate the heap
    from the garbage collector after the Zygote stage, excluding it from the memory
    that the garbage collector examined. The shared memory portion didn’t even exist
    in the new app, so it wouldn’t get touched.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Fadden提出了一个解决方案。每个新的进程会在Zygote阶段之后将堆与垃圾回收器分离，不再让垃圾回收器检查这些内存。共享内存部分在新应用程序中甚至不存在，因此不会被触及。
- en: After this, Bob and Fadden continued to work on Zygote, to figure out which
    classes^([17](#c08-footnote-17)) needed to live in Zygote to get optimal sharing
    out of all applications. Bob said, “I modified the VM and added some instrumentation,
    so I could say, like, how long every class initializer is taking, and figure out
    how much memory each class is allocating, and then an algorithm would decide which
    classes to preload. You don’t want to take up too much memory for the shared processes
    that’s only ever going to be used by one app.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，Bob 和 Fadden 继续致力于 Zygote 的工作，找出哪些类^([17](#c08-footnote-17))需要驻留在 Zygote
    中，以便从所有应用中获得最佳的共享效果。Bob 说：“我修改了虚拟机并添加了一些工具，能够记录每个类的初始化时间，找出每个类分配了多少内存，然后通过算法决定哪些类需要预加载。你不希望为那些只会被一个应用使用的共享进程占用过多内存。”
- en: 'Bob credits Zygote for Android being at all functional at that time: “The Zygote
    thing helped a lot, just being able to share memory, going from having just a
    couple Java processes running to having dozens running on a really small device.
    And rather than having to wait for a whole VM to start up, our apps actually looked
    faster; they would launch instantly, because we’d just fork a process and start
    right there. Everything was already warmed up.” Eventually, Zygote contained not
    just code, but also shared data such as images, and continued providing memory
    and startup benefits to Android as the platform grew.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 归功于 Zygote，让 Android 在那个时候能够正常运行：“Zygote 的出现帮了大忙，它使得共享内存成为可能，从仅运行几个 Java
    进程到在一个非常小的设备上运行数十个进程。而且不再需要等待整个虚拟机启动，我们的应用实际上看起来更快；它们会瞬间启动，因为我们只需分叉一个进程并从那里开始。所有东西已经预热完毕。”最终，Zygote
    不仅包含代码，还包括共享数据，如图像，并继续为 Android 提供内存和启动的好处，随着平台的增长，Zygote 的作用也日益重要。
