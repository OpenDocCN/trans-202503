- en: '**2**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TELEPORTING WITH VARIABLES**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Are you ready to control your Minecraft world with the power of Python? In this
    chapter, you’ll take a brief tour through the basics of Python. Then you’ll put
    your new skills to the test and create your own teleportation tour of your Minecraft
    world!
  prefs: []
  type: TYPE_NORMAL
- en: The concepts described in this chapter aren’t specific to Minecraft Python,
    so you’ll be able to use them in any Python program that you create.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A PROGRAM?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *program* is a set of instructions that makes your computer do a specific
    task or tasks. Imagine a stopwatch app on a mobile phone. The stopwatch program
    has instructions that tell it what to do when you press start and stop. It also
    has instructions that display the time on the screen as it’s being counted. Some
    guy or gal programmed that stopwatch to work.
  prefs: []
  type: TYPE_NORMAL
- en: Millions of programs are used every day all around the world. A phone’s messaging
    app is a program, traffic lights are controlled by programs, and even computer
    games like Minecraft are programs.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you’ll learn the fundamentals of programming and how to write
    programs to make your ideas come to life in Minecraft.
  prefs: []
  type: TYPE_NORMAL
- en: '**STORING DATA WITH VARIABLES**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by learning how to store data with variables. *Variables* let you
    store data to use later in a program. *Data* is any information you might want
    to record, such as numbers, names, any kind of text, lists of items, and so on.
    For example, here’s a variable called `pickaxes` that stores the number value
    `12`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Variables can store numbers, words, and even complete sentences, such as “Get
    out of here, Creeper!” You can also change variables, which lets you do some pretty
    neat things in Minecraft. In fact, shortly you’ll use variables to take advantage
    of the power of teleportation!
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a variable in Python, you’ll use a variable name, an equal sign (`=`),
    and a value. Let’s say you’re about to take off on a grand adventure through many
    Minecraft biomes; you’ll want to bring a lot of food with you. You can represent
    food as a variable. For example, in the following Python shell, `bread` is the
    variable name and `145` is the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The variable’s name is always on the left of the equal sign, and the value you
    want to store is always on the right, as shown in [Figure 2-1](ch02.html#ch2fig1).
    This Python code line *declares* the variable `bread` and *assigns* the value
    `145` to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-1: Parts of a variable declaration. You must be very hungry if you
    have 145 loaves of bread.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve declared a variable and assigned it a value, you can enter the
    name of the variable into the Python shell to check what it’s holding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can use almost any name for a variable, but it’s best to use a name that
    describes the variable’s purpose so you’ll understand what’s going on in your
    program. Although it’s not a rule, you should start variable names with a lowercase
    letter instead of a capital letter. This is a style that Python programmers follow,
    and it’s good practice for you to follow, too, so others can easily read your
    code if you ever want to share it.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Although the value of a variable is* stored, *it is not* saved. *The value
    of a variable is stored in the computer’s temporary memory, meaning that when
    the computer is switched off or the program stops running, the value of the variable
    is no longer stored. Try closing IDLE and then opening it again. When you try
    to get the value of* `bread`, *what happens?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE STRUCTURE OF PROGRAMMING LANGUAGES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Syntax* is the set of rules that describes the grammar and punctuation of
    a programming language, similar to the grammar and punctuation in a human language.
    Once you understand Python’s syntax, you’ll be better able to write programs that
    a computer can follow; however, if you don’t use correct syntax, the computer
    won’t understand what you’re telling it to do.'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a single instruction in your code as a sentence. To end a sentence
    in English, you use a period (called a full stop in the United Kingdom). Instead
    of a period, Python uses a new line to indicate the end of an instruction and
    the start of the next. Each instruction on a new line is called a *statement*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you want to keep track of how many pickaxes, iron ore blocks,
    and cobblestone blocks you have. In the Python shell, you’d write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 2-2](ch02.html#ch2fig2) shows what this looks like in the Python shell.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-2: Entering code in the Python shell*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that each statement is on its own line. Because of the new lines, Python
    will understand that you want to keep track of three different items. But if you
    don’t put each statement on a new line, Python gets confused and gives you a syntax
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A *syntax error* is Python’s way of telling you it doesn’t understand. Python
    won’t be able to follow these instructions because it doesn’t know where one statement
    ends and another begins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python also won’t know what to do if you start lines with a space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you look closely, you’ll see that the code has spaces at the beginning of
    the line. When you get an unexpected indent syntax error, like the one here, you’ll
    know that your line of code starts with spaces when it shouldn’t.
  prefs: []
  type: TYPE_NORMAL
- en: Python is very picky about how you write code. If you get a syntax error when
    entering the examples in this book, check your work carefully. Most likely, you’ll
    find a small mistake.
  prefs: []
  type: TYPE_NORMAL
- en: '**SYNTAX RULES FOR VARIABLES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You need to know a few syntax rules for naming variables so Python can understand
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: • Don’t include symbols in your variable names, except for underscores (`_`),
    or you’ll get a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: • Don’t start a variable name with a number, as in `9bread`. Using numbers elsewhere
    in a variable name is fine, as in `bread9`.
  prefs: []
  type: TYPE_NORMAL
- en: '• You don’t need to add spaces on either side of the equal sign: your program
    will run fine without them. But they do make the code easier to read, so it’s
    a good idea to add them.'
  prefs: []
  type: TYPE_NORMAL
- en: Variables are very handy. Next, you’ll learn how to change the value of variables,
    and then you’ll be ready to teleport your player!
  prefs: []
  type: TYPE_NORMAL
- en: '**CHANGING THE VALUES OF VARIABLES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can change the value of a variable at any time in the same way you’d declare
    a variable. For example, say you meet five Minecraft cats and you want to save
    this value as a variable. First you declare a variable, `cats`, and assign the
    value `5` to it, which would look like this in a Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Later you meet five more cats and decide you want to update this value. What
    happens if you change the value of `cats` to 10?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you ask Python for the new value of `cats`, it’s no longer `5`! Now when
    you use the `cats` variable in a program, it will use the new value of `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many types of data that you can store in variables. *Data types*
    tell the computer how to work with a particular piece of data. I’ll start by discussing
    one of the types you’ll use most often: integers. Later in the chapter, I’ll also
    introduce the floats data type.'
  prefs: []
  type: TYPE_NORMAL
- en: '**INTEGERS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Integers* are positive or negative whole numbers. Values such as 10, 32, –6,
    194689, and –5 are integers, but 3.14 and 6.025 are not.'
  prefs: []
  type: TYPE_NORMAL
- en: You probably use integers every day without even thinking about it, even in
    Minecraft! For example, you might see 12 cows on a hillside while you’re on your
    way to mine 5 diamonds with 2 fresh apples in your inventory. All those numbers
    are integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you have five pigs in your Minecraft world and you want to write
    a program that uses the number of pigs in some way. In Python, you’d declare an
    integer variable to represent the number of pigs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also store negative values in variables. For example, to say the temperature
    is negative five degrees, you would set a variable like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To use Python variables and integers with Minecraft, complete the first mission.
  prefs: []
  type: TYPE_NORMAL
- en: '**MISSION #1: TELEPORT THE PLAYER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this mission, you’ll explore how variables work by teleporting your player
    to a new location using integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in [Figure 2-3](ch02.html#ch2fig3), your player has a *position* in
    the Minecraft world that is represented by three *coordinates*: `x`, `y`, and
    `z`. The letter `y` represents height, and `x` and `z` represent horizontal positions
    on a flat plane.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-3: 3D coordinates*'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the Raspberry Pi version of the game, the player’s position
    is given by three numbers in the top-left corner of the game window, which you
    can see in [Figure 2-4](ch02.html#ch2fig4). If you’re using the desktop edition
    of the game, you can see the player’s coordinates by pressing F3 and finding the
    first line in the second block of text on the left, labeled *XYZ*, as shown in
    [Figure 2-5](ch02.html#ch2fig5).
  prefs: []
  type: TYPE_NORMAL
- en: Move your player around the game and watch the position numbers change; the
    coordinates should update in real time as the player walks. Pretty cool, right?
    But walking long distances takes a long time. Why spend so much time walking when
    you can change positions instantly using Python? Let’s look at how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-4: The player’s position displayed in Minecraft: Pi Edition*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-5: The player’s position displayed in the desktop edition of Minecraft*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch on your computer or Raspberry Pi and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and click **File** ▸ **New File** (or **New Window** on some computers).
    You can see the empty text editor window in [Figure 2-6](ch02.html#ch2fig6). If
    you’re using a Raspberry Pi or have more than one version of Python installed
    on your computer, make sure you use Python 3, not Python 2.7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f02-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 2-6: A new text editor window in IDLE*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the new window appears, click **File** ▸ **Save As**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called *variables* inside the *Minecraft Python* folder
    that you created in [Chapter 1](ch01.html#ch01).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the *variables* folder, name your file *teleport.py*, and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you’re working in IDLE’s text editor, add the following two lines
    of code at the top of your program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These lines connect your program to Minecraft; you’ll use them in every program
    that interacts with Minecraft. Next, create three integer variables called `x`,
    `y`, and `z`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These variables represent the position that you want to teleport your player
    to. For now, set these variables to 10, 110, and 12, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then enter the following line of code, which will transport the player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `setTilePos()` part of the program is a *function*, which is a prewritten
    and reusable piece of code. The `setTilePos(x, y, z)` function tells Minecraft
    to change the player’s position using the three variables you just set. The values
    inside the parentheses are called *arguments*. You *passed* the variables you
    just created to the function as arguments so the function can use the values of
    `x`, `y`, and `z` when it runs.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re using a Raspberry Pi, don’t use values larger than 127 or smaller
    than –127 for the* `x` *and* `z` *variables. The Minecraft Pi world is small,
    and numbers outside this range will crash the game.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 2-1](ch02.html#ch2ex1) contains the full code to teleport your player,
    which you can also see in [Figure 2-7](ch02.html#ch2fig7):'
  prefs: []
  type: TYPE_NORMAL
- en: '*teleport.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 2-1: The finished teleport code*'
  prefs: []
  type: TYPE_NORMAL
- en: To make this program easier to understand, I’ve included some *comments* ➊.
    Comments are useful statements in code that describe what the code does but are
    ignored by Python. In other words, when you run the program, Python passes commented
    lines without doing anything. A single-line comment begins with a hash mark (`#`).
    My comments describe what each part of *teleport.py* does. It’s a good habit to
    write comments in your code so you can remember what the parts of your program
    do when you return to them later.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2-7](ch02.html#ch2fig7) shows the completed program written in IDLE’s
    text editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-7: The completed program in IDLE’s text editor*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s run the program! Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Minecraft by clicking the desktop icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re using a Raspberry Pi, click **Start Game** and **Create a New World**.
    If you’re using the desktop edition of Minecraft, open the game world using the
    instructions in “[Running Spigot and Creating a Game](ch01.html#ch01lev2sec05)”
    on [page 7](ch01.html#page_7) for Windows and on [page 16](ch01.html#page_16)
    for Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the world has been generated, press the ESC key (or TAB if you’re using
    a Raspberry Pi) to release the mouse. You can now move the mouse outside of the
    Minecraft window or double-click the Minecraft window to reselect the game. [Figure
    2-8](ch02.html#ch2fig8) shows the IDLE and Minecraft windows on my computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f02-08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 2-8: This is how I like to arrange my Minecraft and IDLE text editor
    windows.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the IDLE text editor window that has your *teleport.py* program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Run** ▸ **Run Module** or press F5. If you haven’t saved the program,
    IDLE will always ask if you want to save before running. Click **OK** to save
    the program. If you click Cancel, the program won’t run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you’re running programs from IDLE on a Raspberry Pi, a dialog asking
    you to save your program might appear and hide itself behind the Minecraft window.
    If you think IDLE has frozen, it might be that the dialog is hiding. Just minimize
    the Minecraft window and click OK in the IDLE dialog. After clicking OK, maximize
    the Minecraft window.*'
  prefs: []
  type: TYPE_NORMAL
- en: Well done! Your program should now run, and after a few seconds, your player
    should be teleported to coordinates (10, 110, 12), as shown in [Figure 2-9](ch02.html#ch2fig9).
    Your world isn’t the same as mine, so you’ll see some differences when you run
    it on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '**BONUS OBJECTIVE: JUMP AROUND**'
  prefs: []
  type: TYPE_NORMAL
- en: Do you think you’ve got the hang of teleportation? Try replacing `x`, `y`, and
    `z` with other integers to see where your player ends up! Try negative values,
    too!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-9: I’ve teleported from my house to position (10, 110, 12), which
    is above a swamp. Look out below!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**FLOATS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all numbers are whole numbers. Decimal points are used to represent values
    that can’t be described with whole numbers. For example, you might have half (0.5)
    of an apple. Numbers that use decimal points are called *floating point numbers*,
    or *floats*. This is another data type that Python uses. Floating point numbers
    are used instead of integers when you want to be more precise. Floats can also
    represent whole numbers (as in `3.0`), but integers can’t represent numbers with
    decimal places.
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed that your player’s position coordinates (as shown in
    [Figures 2-4](ch02.html#ch2fig4) and [2-5](ch02.html#ch2fig5)) include decimals,
    which means they’re floats!
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, you declare a float variable in the same way that you declare an
    integer variable. For example, to set the variable `x` to `1.34`, you’d write
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a negative float, put a minus sign (`-`) before the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the next mission, you’ll gain even more control over your teleportation powers
    by using floats to teleport the player to precise locations.
  prefs: []
  type: TYPE_NORMAL
- en: '**MISSION #2: GO EXACTLY WHERE YOU WANT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You learned how to set the player’s position using integers, but you can set
    the player’s position more accurately if you use floats. In this mission, we’ll
    revise the program from [Mission #1](ch02.html#ch02lev2sec05) to teleport the
    player using a float value:'
  prefs: []
  type: TYPE_NORMAL
- en: In IDLE, open the *teleport.py* program ([page 34](ch02.html#page_34)) by clicking
    **File** ▸ **Open** and selecting the file from your *variables* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save a copy of the program as *teleportPrecise.py* in your *variables* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the *teleportPrecise.py* file, change the `x`, `y`, and `z` variables to
    use floats instead of integers. That is, change the values of `x`, `y`, and `z`
    from 10, 110, and 12 to 10.0, 110.0, and 12.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the last line of code to `mc.player.setPos(x, y, z)` by removing the
    word `Tile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Minecraft world and run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*teleportPrecise.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Notice the difference between `mc.player.setPos(x, y, z)`, used here, and `mc.player.setTilePos(x,
    y, z)`, used in [Listing 2-1](ch02.html#ch2ex1). The `setTilePos()` function uses
    integers to tell the game the position of the block that you want to teleport
    to. The `setPos()` function is a little different—it uses floats to tell the game
    the position of the block as well as the precise position *on* that block that
    you want to teleport to. Using my program, I teleported to the top of my tower,
    as shown in [Figure 2-10](ch02.html#ch2fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-10: I’ve teleported myself to the top of my tower, using floats to
    be very precise.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**BONUS OBJECTIVE: TELEPORT ACCURATELY**'
  prefs: []
  type: TYPE_NORMAL
- en: Change the values of the `x`, `y`, and `z` variables using a mixture of positive
    and negative floats and run the program. Then, change the decimal values slightly
    from your new ones. What happens?
  prefs: []
  type: TYPE_NORMAL
- en: '**SLOWING DOWN TELEPORTATION USING THE TIME MODULE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python runs your code as fast as possible. But you can slow down the action
    by making your programs wait a certain number of seconds before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use time in your programs, you need the `time` module, which contains a
    set of prewritten functions relating to time. To use the `time` module, add the
    following line of code to the top of your programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Order is very important when you’re using the `time` module and the `sleep()`
    function, which is part of the `time` module. The `sleep()` function will make
    a program wait a specified number of seconds before continuing. You must always
    import the `time` module before you use the `sleep()` function. If you don’t,
    Python won’t be able to find the `sleep()` function and will be so confused that
    it will stop your program from running. This is why it’s best to import any module
    you use at the top of your code. All of your `import` statements will be grouped
    together at the top of the program. For example, I usually include the lines of
    code to connect to Minecraft first, and then add the `import time` statement on
    the third line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to use the `sleep()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code pauses your program for five seconds. You can use any number,
    including integers and floats, as the following example shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When your program reaches this line of code, it will wait 0.2 seconds. Now that
    you can control the flow of time, you’re ready for the next mission!
  prefs: []
  type: TYPE_NORMAL
- en: '**MISSION #3: TELEPORTATION TOUR**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The beauty of teleportation in Minecraft is that you can send your player anywhere.
    Using all the skills you’ve learned so far, you’ll send your player on an automated
    tour of your entire Minecraft world!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this mission, you’ll practice changing the values of variables by modifying
    the code from [Mission #1](ch02.html#ch02lev2sec05) ([page 31](ch02.html#page_31))
    to teleport the player to several locations across the map. The player will teleport
    to one location, wait a few seconds, and then teleport to another location.'
  prefs: []
  type: TYPE_NORMAL
- en: In IDLE, open the *teleport.py* program ([page 34](ch02.html#page_34)) by clicking
    **File** ▸ **Open** and selecting the file from your *variables* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save a copy of the program as *tour.py* in your *variables* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just after the code that connects your program to Minecraft, add `import time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the program, add `time.sleep(10)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the lines with the `x`, `y`, and `z` variables and the `setTilePos()` function
    and paste them at the end of the program, so those lines appear twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the values of both sets of `x`, `y`, and `z` variables to any numbers
    you want. You can find the coordinates for any position in your game by moving
    there and writing down the player’s coordinates like you did earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Minecraft world and run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final result should look like this, with new coordinates filled in:'
  prefs: []
  type: TYPE_NORMAL
- en: '*tour.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The player should teleport to the first location, wait 10 seconds, and then
    teleport to the second location, as shown in [Figure 2-11](ch02.html#ch2fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '**BONUS OBJECTIVE: MORE TELEPORTATION**'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the *tour.py* code to move the player as many times as you want. Replace
    the `10` in the function `time.sleep(10)` with a different value. You could even
    use a different number for each `sleep()` function so your player waits a different
    amount of time at each location.
  prefs: []
  type: TYPE_NORMAL
- en: Then edit the code so that between teleports, only one of the `x`, `y`, and
    `z` variables changes. You don’t have to change every variable every time! Try
    using floats instead of integers, too.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-11: I’ve set the coordinates in my program to teleport to my house
    and then to teleport to the desert.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**DEBUGGING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Everyone makes mistakes; often, even the best programmers don’t get their code
    right the first time. Writing a program that works is just one skill that a good
    programmer needs. Fixing programs when they don’t work is another essential skill.
    This process is called *debugging*, and each problem in a misbehaving program
    is called a *bug*. In this section, you’ll learn tips and tricks to fix all your
    future programs.
  prefs: []
  type: TYPE_NORMAL
- en: Bugs can completely stop a program from running, or they can make the program
    behave in an unexpected way. When a program doesn’t run, Python will show you
    an error message, such as the one in [Figure 2-12](ch02.html#ch2fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f02-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-12: Python gives me an error message because I didn’t stick to Python’s
    syntax.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Figure 2-12](ch02.html#ch2fig12) you can see that I’ve entered some code
    in the Python shell, and it has returned an error message. A lot of information
    is displayed in the error message, but based on the last line (`NameError: name
    ''x'' is not defined`) I can tell that something is wrong with my `x` variable.
    Specifically, the `x` variable has not been defined. To fix this, I need to add
    an extra line of code that defines the `x` variable, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This line will fix the error message, but it doesn’t mean all errors will be
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Bugs that allow the program to run but cause it to behave strangely won’t show
    an error message, but you’ll know something is wrong when your program produces
    an unexpected result. For example, if you forget to write a line of code in your
    teleportation programs, such as `setTilePos()`, the program will run without any
    errors, but the player won’t change position. That’s not a very useful teleportation
    program!
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Typos are among the most common causes of bugs. Spelling something in a way
    the computer doesn’t expect can stop your program from running. Be careful, and
    make sure your spelling and capitalization are correct!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**MISSION #4: FIX THE BUGGY TELEPORTATION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this mission, you’ll debug two programs. The first program, [Listing 2-2](ch02.html#ch2ex2),
    is similar to *teleport.py* ([page 34](ch02.html#page_34)), but this version has
    five mistakes. Open a new file in the IDLE text editor, copy [Listing 2-2](ch02.html#ch2ex2)
    into it, and save it as *teleportBug1.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*teleportBug1.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 2-2: A broken version of the teleport program*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To debug this program, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run *teleportBug1.py*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you get an error message, read the last line for a hint about what’s wrong.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Correct the bug and run the code again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep correcting the bugs until the program teleports the player to a new location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**HINT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t forget to double-check that you’re actually calling the* `setTilePos()`
    *function!*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try debugging another program. The version of *teleport.py* in [Listing
    2-3](ch02.html#ch2ex3) runs, but for some reason, the player doesn’t teleport
    to the specified position. Copy [Listing 2-3](ch02.html#ch2ex3) into an IDLE file
    and save it as *teleportBug2.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*teleportBug2.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 2-3: The teleport program with bugs*'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike with *teleportBug1.py*, you won’t get any error messages when you run
    the program. To fix this program, you’ll need to read the code until you find
    the mistake. The program should teleport the player to position (10, 110, –12).
    Run the program and check the coordinates that the player has teleported to. This
    might help you debug the program and identify the problem with it.
  prefs: []
  type: TYPE_NORMAL
- en: When you’ve squashed all the bugs in these two programs, add a comment to each
    to explain what the problems were. Jotting down problems you encounter in debugging
    can help you remember to watch out for similar bugs in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Congratulations! You’ve written your first Python programs to control a Minecraft
    player through the power of variables and functions. You explored two data types
    (integers and floats), controlled time, and debugged broken programs. You also
    learned two useful functions specific to the Minecraft Python API: `setPos()`
    and `setTilePos()`.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html#ch03), you’ll master the art of speed building in Minecraft,
    using mathematical operations and functions that set blocks!
  prefs: []
  type: TYPE_NORMAL
