- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">STREAM
    CIPHERS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">流加密</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Symmetric ciphers can be either block ciphers or stream ciphers. Recall from
    [Chapter 4](chapter4.xhtml) that block ciphers mix chunks of plaintext bits together
    with key bits to produce chunks of ciphertext of the same size, usually 64 or
    128 bits. Stream ciphers, on the other hand, don’t mix plaintext and key bits;
    instead, they generate pseudorandom bits from the key and encrypt the plaintext
    by XORing it with the pseudorandom bits, in the same fashion as the one-time pad
    explained in [Chapter 1](chapter1.xhtml).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对称加密可以是分组加密或流加密。回顾[第4章](chapter4.xhtml)，分组加密将明文的若干位与密钥位混合，生成相同大小的密文块，通常为64位或128位。另一方面，流加密不混合明文和密钥位；相反，它们从密钥生成伪随机位，通过将其与明文进行异或加密，类似于[第1章](chapter1.xhtml)中解释的一次性密码本。
- en: Stream ciphers are sometimes shunned because they have historically been more
    fragile than block ciphers and are more often broken—both the experimental ones
    designed by amateurs and the ciphers deployed in systems used by millions, including
    mobile phones, Wi-Fi, and public transport smart cards. But fortunately, although
    it’s taken almost 20 years, we now know how to design secure stream ciphers, and
    we trust them to protect Bluetooth connections, mobile 4G communications, and
    TLS connections.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 流加密有时被排斥，因为它们在历史上比分组加密更脆弱，更容易被破解——无论是业余爱好者设计的实验性算法，还是被数百万用户使用的系统中的加密算法，包括手机、Wi-Fi和公共交通智能卡。但幸运的是，尽管花了将近20年时间，我们现在知道如何设计安全的流加密算法，并信任它们来保护蓝牙连接、移动4G通信和TLS连接。
- en: 'This chapter first presents how stream ciphers work and discusses the two main
    classes of stream ciphers: stateful and counter based. We’ll then study hardware-
    and software-oriented stream ciphers and look at some insecure ciphers (A5/1 as
    used in GSM mobile communications, and RC4 in older version of TLS) and secure,
    state-of-the-art ones (Grain-128a for hardware and Salsa20 for software).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍流加密的工作原理，并讨论流加密的两大主要类别：有状态流加密和基于计数器的流加密。然后我们将研究硬件和软件导向的流加密算法，并查看一些不安全的加密算法（如在GSM移动通信中使用的A5/1和在旧版TLS中使用的RC4）以及安全的、最先进的算法（如硬件中的Grain-128a和软件中的Salsa20）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">How Stream Ciphers Work</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">流加密的工作原理</samp>
- en: Stream ciphers are more akin to deterministic random bit generators (DRBGs)
    than block ciphers because they generate a stream of pseudorandom bits rather
    than directly mixing plaintext data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 流加密更像是确定性随机比特生成器（DRBG），而非分组加密，因为它们生成的是伪随机比特流，而不是直接混合明文数据。
- en: 'What sets stream ciphers apart from DRBGs is that DRBGs take a single input
    value, whereas stream ciphers take two values: a key and a nonce. The key should
    be secret and is usually 128 or 256 bits. The nonce doesn’t have to be secret,
    but it should be unique for each key and is usually between 64 and 128 bits.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 流加密与确定性随机比特生成器（DRBG）不同之处在于，DRBG只接受一个输入值，而流加密接受两个值：一个密钥和一个随机数。密钥应当保密，通常为128位或256位。随机数不必保密，但应当对每个密钥唯一，通常为64位到128位之间。
- en: Stream ciphers produce a pseudorandom stream of bits we call the *keystream*.
    To encrypt the keystream, we XOR it to a plaintext and then XOR it again to the
    ciphertext to decrypt it. [Figure 5-1](chapter5.xhtml#fig5-1) shows the basic
    stream cipher encryption operation, where **SC** is the stream cipher algorithm,
    *KS* the keystream, *P* the plaintext, and *C* the ciphertext.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 流加密生成我们称之为*密钥流*的伪随机比特流。为了加密密钥流，我们将其与明文进行异或操作，然后再与密文进行异或操作以解密。[图5-1](chapter5.xhtml#fig5-1)展示了基本的流加密操作，其中**SC**是流加密算法，*KS*是密钥流，*P*是明文，*C*是密文。
- en: '![](../images/fig5-1.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: How stream ciphers
    encrypt, taking a secret key,</samp> <samp class="SANS_Futura_Std_Book_11">K</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">, and a public nonce,</samp> <samp class="SANS_Futura_Std_Book_11">N</samp>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-1：流加密如何加密，使用一个秘密密钥</samp>
    <samp class="SANS_Futura_Std_Book_11">K</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">和一个公共随机数</samp>
    <samp class="SANS_Futura_Std_Book_11">N</samp>
- en: A stream cipher computes *KS* = **SC**(*K*, *N*), encrypts as *C* = *P* ⊕ *KS*,
    and decrypts as *P* = *C* ⊕ *KS*. The encryption and decryption functions are
    the same because both do the same thing—namely, XOR bits with the keystream. That’s
    why, for example, certain cryptographic libraries provide a single <samp class="SANS_TheSansMonoCd_W5Regular_11">encrypt</samp>
    function for both encryption and decryption.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Stream ciphers allow you to encrypt a message with key *K*[1] and nonce *N*[1]
    and then encrypt another message with key *K*[1] and nonce *N*[2] that’s different
    from *N*[1], or with key *K*[2], which is different from *K*[1] and nonce *N*[1].
    However, you should never again encrypt with *K*[1] and *N*[1] because you would
    use the same keystream *KS* twice. That is, you’d have a first ciphertext *C*[1]
    = *P*[1] ⊕ *KS* and a second ciphertext *C*[2] = *P*[2] ⊕ *KS*, and if you know
    *P*[1], then you could determine *P*[2] = *C*[1] ⊕ *C*[2] ⊕ *P*[1].
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nonce *is short for “number used only once.” In the context of stream ciphers,
    we sometimes call it the* IV*, for “initial value.”*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'From a high-level perspective, there are two types of stream ciphers: stateful
    and counter based. *Stateful stream ciphers* have a secret internal state that
    evolves throughout keystream generation. The cipher initializes the state from
    the key and the nonce and then calls an update function to update the state value
    and produce one or more keystream bits from the state, as [Figure 5-2](chapter5.xhtml#fig5-2)
    shows. For example, RC4 is stateful while Salsa20 is counter based.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-2.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: A stateful stream
    cipher</samp>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '*Counter-based stream ciphers* produce chunks of a keystream from a key, a
    nonce, and a counter value, as in [Figure 5-3](chapter5.xhtml#fig5-3). Unlike
    stateful stream ciphers, counter-based stream ciphers such as Salsa20 don’t keep
    track of a secret during keystream generation, apart from the counter’s value.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-3.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: A counter-based
    stream cipher</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'These two approaches define the high-level architecture of the stream cipher,
    regardless of how the core algorithms work. The internals of the stream cipher
    also fall into two categories, depending on the target platform of the cipher:
    hardware oriented and software oriented.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hardware-Oriented Stream Ciphers</samp>
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When cryptographers talk about hardware, they mean application-specific integrated
    circuits (ASICs), programmable logic devices (PLDs), and field-programmable gate
    arrays (FPGAs). A cipher’s hardware implementation is an electronic circuit that
    implements the cryptographic algorithm at the bit level and that can’t be used
    for anything else; in other words, the circuit is *dedicated hardware*. On the
    other hand, software implementations of cryptographic algorithms simply tell a
    microprocessor what instructions to execute in order to run the algorithm. These
    instructions operate on bytes or words and then call pieces of electronic circuits
    that implement general-purpose operations such as addition and multiplication.
    Software deals with bytes or words of 32 or 64 bits, whereas hardware deals with
    bits. The first stream ciphers worked with bits to save complex wordwise operations
    and thus be more efficient in hardware, their target platform at the time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Stream ciphers were mainly used for hardware implementations because they were
    cheaper than block ciphers. They needed less memory and fewer logical gates than
    block ciphers and therefore occupied a smaller area on an integrated circuit,
    which reduced fabrication costs. For example, counting in gate-equivalents, the
    standard area metric for integrated circuits, you could find stream ciphers taking
    less than 1,000 gate-equivalents; by contrast, typical software-oriented block
    ciphers needed at least 10,000 gate-equivalents, making crypto an order of magnitude
    more expensive than with stream ciphers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Today, however, block ciphers are no longer more expensive than stream ciphers—first,
    because there are now hardware-friendly block ciphers about as small as stream
    ciphers, and second, because the cost of hardware has plunged. Yet stream ciphers
    are often associated with hardware because they used to be the best option.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I’ll explain the basic mechanism behind hardware stream
    ciphers, called *feedback shift registers (FSRs)*. Almost all hardware stream
    ciphers rely on FSRs in some way, whether that’s the A5/1 cipher used in 2G mobile
    phones or the more recent Grain-128a cipher.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The first standard block cipher, the Data Encryption Standard (DES), was optimized
    for hardware rather than software. When the US government standardized DES in
    the 1970s, most target applications were hardware implementations. It’s therefore
    no surprise that the S-boxes in DES are small and fast to compute when implemented
    as a logical circuit in hardware but inefficient in software. Unlike DES, the
    current Advanced Encryption Standard (AES) deals with bytes and is therefore more
    efficient in software than DES.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Feedback Shift Registers</samp>
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Countless stream ciphers use FSRs because they’re simple and well understood.
    An FSR is an array of bits equipped with an update *feedback function*, which
    I’ll denote as **f**. The FSR’s state is stored in the array, or register, and
    each *update* of the FSR uses the feedback function to change the state’s value
    and to produce one output bit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无数的流密码使用 FSR，因为它们简单且易于理解。FSR 是一个由比特组成的数组，配备了一个更新的 *反馈函数*，我将其表示为 **f**。FSR 的状态存储在数组或寄存器中，每次
    *更新* FSR 时，使用反馈函数来更改状态值并产生一个输出比特。
- en: 'In practice, an FSR works like this: if *R*[0] is the initial value of the
    FSR, the next state, *R*[1], is defined as *R*[0] left-shifted by 1 bit, where
    the bit leaving the register is returned as output and where the empty position
    is filled with **f**(*R*[0]).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，FSR 的工作方式如下：如果 *R*[0] 是 FSR 的初始值，那么下一状态 *R*[1] 被定义为将 *R*[0] 向左移 1 位，其中离开寄存器的比特作为输出，而空缺的位置由
    **f**(*R*[0]) 填充。
- en: 'We repeat the same rule to compute the subsequent state values *R*[2], *R*[3],
    and so on. That is, given *R*t, the FSR’s state at time *t*, the next state, *R*t
    [+ 1], is the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重复相同的规则来计算后续的状态值 *R*[2]、*R*[3] 等。也就是说，给定 *R*t，FSR 在时刻 *t* 的状态，下一状态 *R*[t +
    1] 为以下内容：
- en: '![](../images/pg91-1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-1.jpg)'
- en: 'In this equation, <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp> is
    the logical OR operator, and <samp class="SANS_TheSansMonoCd_W5Regular_11"><<</samp>
    is the shift operator, as used in the C language. For example, given the 8-bit
    string 00001111, we have this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方程中，<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp> 是逻辑或运算符，<samp class="SANS_TheSansMonoCd_W5Regular_11"><<</samp>
    是移位运算符，像 C 语言中使用的那样。例如，给定 8 位字符串 00001111，我们得到：
- en: '![](../images/pg91-2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-2.jpg)'
- en: The bit shift moves the bits to the left, losing the leftmost bit to retain
    the state’s bit length and zeroing the rightmost bit. The update operation of
    an FSR is identical, except that instead of being set to 0, the rightmost bit
    is set to **f**(*R*t).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 比特移位将比特向左移动，丢失最左边的比特以保持状态的比特长度，并将最右边的比特归零。FSR 的更新操作是相同的，唯一不同的是最右边的比特不被设置为 0，而是被设置为
    **f**(*R*t)。
- en: 'Consider, for example, a 4-bit FSR whose feedback function **f** XORs all 4
    bits together. Initialize the state to the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个 4 比特的 FSR，其反馈函数 **f** 对所有 4 比特进行异或运算。将状态初始化为以下内容：
- en: '![](../images/pg91-3.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-3.jpg)'
- en: 'Now shift the bits to the left, where 1 is output and the rightmost bit is
    set to the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将比特向左移动，其中 1 是输出，最右边的比特设置为以下内容：
- en: '![](../images/pg91-4.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-4.jpg)'
- en: 'Now the state becomes this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在状态变为：
- en: '![](../images/pg91-5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-5.jpg)'
- en: 'The next update outputs 1, left-shifts the state, and sets the rightmost bit
    to the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次更新输出 1，将状态左移，并将最右边的比特设置为以下内容：
- en: '![](../images/pg91-6.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-6.jpg)'
- en: 'Now the state is this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在状态如下：
- en: '![](../images/pg91-7.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-7.jpg)'
- en: 'The next three updates return three 0 bits and give the following state values:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三次更新返回三个 0 比特，并给出以下状态值：
- en: '![](../images/pg91-8.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg91-8.jpg)'
- en: We thus return to our initial state of 1100 after five iterations; updating
    the state five times from any of the values observed throughout this cycle returns
    us to this initial value. We say that 5 is the *period* of the FSR given any one
    of the values 1100, 1000, 0001, 0011, or 0110\. Because the period of this FSR
    is 5, clocking the register 10 times yields twice the same 5-bit sequence. Likewise,
    if you clock the register 20 times, starting from 1100, the output bits will be
    11000110001100011000, or four times the same 5-bit sequence of 11000\. Intuitively,
    such repeating patterns should be avoided, and a longer period is better for security.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在五次迭代后我们回到了初始状态 1100；从此循环中观察到的任何值更新状态五次都能回到这个初始值。我们说，给定任一值 1100、1000、0001、0011
    或 0110，5 是 FSR 的 *周期*。因为该 FSR 的周期是 5，时钟信号钟动寄存器 10 次会得到两次相同的 5 位序列。同样，如果从 1100
    开始时钟信号钟动寄存器 20 次，输出比特将是 11000110001100011000，或者四次相同的 5 位序列 11000。直观上，这种重复模式应该避免，较长的周期对安全性更好。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*If you plan to use an FSR in a stream cipher, avoid one with short periods,
    which make the output more predictable. With some types of FSRs, it’s easy to
    figure out their period, but it’s almost impossible to do so with others.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你打算在流密码中使用 FSR，请避免使用周期较短的 FSR，因为它们的输出更容易预测。对于某些类型的 FSR，容易推算出它们的周期，但对于其他类型几乎不可能做到这一点。*'
- en: '[Figure 5-4](chapter5.xhtml#fig5-4) shows the structure of this cycle, along
    with the other cycles of that FSR, with each cycle being a circle whose dots represent
    a state of the register.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-4.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: Cycles of the FSR
    whose feedback function XORs the 4 bits together</samp>'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, this particular FSR has two other period-5 cycles—{0100, 1001, 0010,
    0101, 1010} and {1111, 1110, 1101, 1011, 0111}. Note that any given state can
    belong to only one cycle of states. Here, we have three cycles of five states
    each, covering 15 of the 2⁴ = 16 possible values of our 4-bit register. The 16th
    possible value is 0000, which, as [Figure 5-4](chapter5.xhtml#fig5-4) shows, is
    a period-1 cycle because the FSR transforms 0000 to 0000.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: An FSR is essentially a register of bits, where each update of the register
    outputs a bit (the leftmost bit of the register) and where a function computes
    the new rightmost bit of the register. (All other bits are left-shifted.) The
    period of an FSR, from some initial state, is the number of updates needed until
    the FSR enters the same state again. If it takes *N* updates to do so, the FSR
    will produce the same *N* bits again and again.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '##### <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Linear Feedback Shift
    Registers</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '*Linear feedback shift registers (LFSRs)* are FSRs with a *linear* feedback
    function—namely, a function that’s the XOR of some bits of the state, such as
    the example of a 4-bit FSR in the previous section and its feedback function returning
    the XOR of the register’s 4 bits. Recall that in cryptography, linearity is synonymous
    with predictability and suggestive of a simple underlying mathematical structure.
    And, as you might expect, thanks to this linearity, we can analyze LFSRs using
    notions like linear complexity, finite fields, and primitive polynomials—but I’ll
    skip the math details and just give you the essential facts.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In linear algebra, we define a linear transform* ***f*** *as a function that
    satisfies* ***f****(*u *+* v*) =* ***f****(*u*) +* ***f****(*v*). If you know*
    ***f***(u) *and* ***f****(*v*), you can then determine* ***f****(*u *+* v*) without
    knowing* u *or* v*. With a nonlinear function, it’s much more complicated; you
    can’t easily find* ***f****(*u *+* v*) from* ***f****(*u*) and* ***f****(*v*).*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The choice of which bits to XOR together is crucial for the period of the LFSR
    and thus for its cryptographic value. The good news is that we know how to select
    the position of the bits to guarantee a maximal period of 2*^n* – 1\. Specifically,
    we take the indices of the bits, from 1 for the rightmost to *n* for the leftmost,
    and write the polynomial expression 1 + *X* + *X* ² + . . . + *X* *^n*, where
    we include the term *X* *^i* only if the *i*th bit is one of the bits XORed in
    the feedback function. The period is maximal *if and only if* that polynomial
    is *primitive*. To be primitive, the polynomial must have the following qualities:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The polynomial must be irreducible, meaning that it can’t be factorized—that
    is, written as a product of smaller polynomials. For example, *X* + *X* ³ is not
    irreducible because it’s equal to (1 + *X*)(*X* + *X*²):'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/pg93-1.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: The polynomial must satisfy certain other mathematical properties that cannot
    be easily explained without nontrivial mathematical notions but are easy to test.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The maximal period of an* n*-bit LFSR is 2*^n – *1, not 2*^n*, because the
    all-zero state always loops on itself infinitely. Because the XOR of any number
    of zeros is zero, new bits entering the state from the feedback functions will
    always be zero; hence, the all-zero state is doomed to stay all zeros.*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: For example, [Figure 5-5](chapter5.xhtml#fig5-5) shows a 4-bit LFSR with the
    feedback polynomial 1 + *X* + *X*³ + *X*⁴ in which we XOR the bits at positions
    1, 3, and 4 together to compute the new bit set to *L*[1]. However, this polynomial
    isn’t primitive because we can factorize it into (1 + *X*³)(1 + *X*).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-5.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: An LFSR with the
    feedback polynomial 1 +</samp> <samp class="SANS_Futura_Std_Book_11">X</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">+</samp> <samp class="SANS_Futura_Std_Book_11">X</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I-SUP_11">3</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">+</samp>
    <samp class="SANS_Futura_Std_Book_11">X</samp><samp class="SANS_Futura_Std_Book_Oblique_I-SUP_11">4</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, the period of the LFSR in [Figure 5-5](chapter5.xhtml#fig5-5) isn’t
    maximal. To prove this, start from the state 0001:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg94-1.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'Now left-shift by 1 bit and set the new bit to 0 + 0 + 1 = 1:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg94-2.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: 'Repeating the operation five more times gives the following state values:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg94-3.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: The state after six updates is the same as the initial one, demonstrating that
    we’re in a period-6 cycle and proving that the LFSR’s period isn’t the maximal
    value of 15.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at an LFSR with a maximal period, considering the LFSR in [Figure
    5-6](chapter5.xhtml#fig5-6).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-6.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: An LFSR with the
    feedback polynomial 1 +</samp> <samp class="SANS_Futura_Std_Book_11">X</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I-SUP_11">3</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">+</samp>
    <samp class="SANS_Futura_Std_Book_11">X</samp><samp class="SANS_Futura_Std_Book_Oblique_I-SUP_11">4</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">, a primitive polynomial, ensuring a
    maximal period</samp>'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-6：一个具有反馈多项式1 +</samp> <samp
    class="SANS_Futura_Std_Book_11">X</samp><samp class="SANS_Futura_Std_Book_Oblique_I-SUP_11">3</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">+</samp> <samp class="SANS_Futura_Std_Book_11">X</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I-SUP_11">4</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">，一个原始多项式，确保最大周期</samp>
- en: 'This feedback polynomial is a primitive polynomial described by 1 + *X* ³ +
    *X* ⁴, and you can verify that its period is maximal (namely, 15). From an initial
    value, the state evolves as follows (from 0001 to 0010, 0100, 1001, 0011, and
    so on):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该反馈多项式是一个原始多项式，描述为1 + *X*³ + *X*⁴，你可以验证它的周期是最大值（即15）。从初始值开始，状态按以下方式演变（从0001到0010、0100、1001、0011，依此类推）：
- en: '![](../images/pg94-4.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg94-4.jpg)'
- en: The state spans all possible values except 0000 with no repetition until it
    eventually loops. This demonstrates that the period is maximal and that the feedback
    polynomial is primitive.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该状态遍历所有可能的值，除了0000，并且在最终循环之前没有重复。这证明了周期是最大值，且反馈多项式是原始的。
- en: Alas, using an LFSR as a stream cipher is not secure. If *n* is the LFSR’s bit
    length, an attacker needs only *n* output bits to recover the LFSR’s initial state,
    allowing them to determine all previous bits and predict all future bits. This
    attack is possible because the LFSR is linear, implying that relations between
    the bits of the state obey linear equations, which are simple to solve. You can
    use the Berlekamp–Massey algorithm to solve the equations defined by the LFSR’s
    mathematical structure to find not only the LFSR’s initial state but also its
    feedback polynomial. In fact, you don’t even need to know the exact length of
    the LFSR to succeed; you can repeat the Berlekamp–Massey algorithm for all possible
    values of *n* until you hit the right one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜的是，使用LFSR作为流密码并不安全。如果*n*是LFSR的位长度，攻击者只需要*n*个输出位就能恢复LFSR的初始状态，从而确定所有之前的位并预测所有未来的位。之所以可能发生这种攻击，是因为LFSR是线性的，这意味着状态位之间的关系服从线性方程，解决这些方程是很简单的。你可以使用Berlekamp–Massey算法来解决由LFSR数学结构定义的方程，不仅可以找到LFSR的初始状态，还可以找到其反馈多项式。实际上，你甚至不需要知道LFSR的确切长度就能成功；你可以对所有可能的*n*值重复Berlekamp–Massey算法，直到找到正确的值。
- en: The upshot is that LFSRs are cryptographically weak because they’re linear.
    Output bits and initial state bits are related by simple and short equations that
    you can solve with high school linear algebra techniques. To strengthen LFSRs,
    let’s add a pinch of nonlinearity.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是，LFSR在密码学上较弱，因为它们是线性的。输出位和初始状态位通过简单且简短的方程关联，你可以使用高中线性代数技巧来解决这些方程。为了增强LFSR的安全性，我们可以加入一点非线性。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Filtered LFSRs</samp>
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">过滤LFSR</samp>
- en: To mitigate the insecurity of LFSRs, hide their linearity by passing their output
    bits through a nonlinear function before returning them to produce a *filtered
    LFSR*, as [Figure 5-7](chapter5.xhtml#fig5-7) illustrates.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻LFSR的不安全性，可以通过在返回之前将其输出位通过非线性函数进行处理来隐藏其线性特性，从而产生一个*过滤LFSR*，正如[图5-7](chapter5.xhtml#fig5-7)所示。
- en: '![](../images/fig5-7.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig5-7.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-7: A filtered LFSR</samp>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-7：一个过滤LFSR</samp>
- en: The **g** function in [Figure 5-7](chapter5.xhtml#fig5-7) must be a *nonlinear*
    function—one that both XORs bits together and combines them with logical AND or
    OR operations. For example, *L*[1]*L*[2] + *L*[3]*L*[4] is a nonlinear function
    (I’ve omitted the multiplication sign, so *L*[1]*L*[2] means *L*[1] × *L*[2],
    or *L*[1] & *L*[2] using C syntax).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[图5-7](chapter5.xhtml#fig5-7)中的**g**函数必须是一个*非线性*函数——它不仅进行XOR操作，还结合了逻辑与或运算。例如，*L*[1]*L*[2]
    + *L*[3]*L*[4]是一个非线性函数（我省略了乘号，因此*L*[1]*L*[2]表示*L*[1] × *L*[2]，或者使用C语法表示为*L*[1]
    & *L*[2]）。'
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*You can write feedback functions either directly in terms of an FSR’s bits,
    like* L1L2 *+* L3L4*, or using the equivalent polynomial notation 1 +* XX*²* *+*
    X*³*X*⁴**. The direct notation is easier to grasp, but the polynomial notation
    better serves the mathematical analysis of an FSR’s properties. We’ll stick to
    the direct notation unless we care about the mathematical properties.*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以直接用FSR的位表示反馈函数，比如* L1L2 *+* L3L4*，或者使用等效的多项式表示法 1 +* XX*²* +* X*³*X*⁴**。直接表示法更容易理解，但多项式表示法更适用于FSR属性的数学分析。除非我们关心数学属性，否则我们会坚持使用直接表示法。*'
- en: 'Filtered LFSRs are stronger than plain LFSRs because their nonlinear function
    thwarts straightforward attacks. Still, more complex attacks such as the following
    will break the system:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 滤波LFSR比普通LFSR更强，因为它们的非线性函数能阻止直接攻击。不过，像以下这样的更复杂攻击仍然能够破解系统：
- en: '**Algebraic attacks **Solve the nonlinear equation systems deduced from the
    output bits, where unknowns in the equations are bits from the LFSR state.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**代数攻击** 解出从输出位推导出的非线性方程系统，其中方程中的未知数是LFSR状态的位。'
- en: '**Cube attacks **Compute derivatives of the nonlinear equations to reduce the
    degree of the system down to one and then solve it efficiently like a linear system.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**立方体攻击** 计算非线性方程的导数，将系统的次数降到1，然后像线性系统一样高效地求解。'
- en: '**Fast correlation attacks **Exploit filtering functions that, despite their
    nonlinearity, tend to behave like linear functions.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速相关攻击** 利用过滤函数，尽管它们是非线性的，但通常表现得像线性函数。'
- en: The lesson here, as we’ve seen in previous examples, is that Band-Aids don’t
    fix bullet holes. Patching a broken algorithm with a slightly stronger layer won’t
    make the whole thing secure. You must fix the problem at the core.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的教训，如我们在前面的例子中看到的那样，是创可贴无法修补枪伤。用稍微强一点的层来修补破损的算法并不能使整个系统变得安全。你必须从核心解决问题。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Nonlinear FSRs</samp>
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">非线性FSR</samp>
- en: '*Nonlinear FSRs (NFSRs)* are like LFSRs but with a nonlinear feedback function
    instead of a linear one. Instead of just bitwise XORs, the feedback function can
    include bitwise AND and OR operations—a feature with both pros and cons.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*非线性FSR（NFSR）*类似于LFSR，但它有一个非线性的反馈函数，而不是线性的。反馈函数不仅仅是按位XOR操作，它还可以包括按位与（AND）和或（OR）操作——这既有优点也有缺点。'
- en: 'One benefit of the addition of nonlinear feedback functions is that they make
    NFSRs cryptographically stronger than LFSRs because the output bits depend on
    the initial secret state in a complex fashion, according to equations of exponential
    size. The LFSRs’ linear function keeps the relations simple, with at most *n*
    terms (*N*[1], *N*[2], . . . , *N*n, if the *N*is are the NFSR’s state bits).
    For example, a 4-bit NFSR with an initial secret state (*N*[1], *N*[2], *N*[3],
    *N*[4]) and a feedback function *N*[1] + *N*[2] + *N*[1]*N*[2] + *N*[3]*N*[4]
    produce a first output bit equal to the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 非线性反馈函数的一个好处是，它们使NFSR在密码学上比LFSR更强，因为输出位依赖于初始秘密状态，并且根据指数大小的方程进行复杂的计算。LFSR的线性函数使关系保持简单，最多有*n*项（*N*[1]，*N*[2]，...，*N*[n]，如果*N*是NFSR的状态位）。例如，一个4位的NFSR，初始秘密状态为(*N*[1]，*N*[2]，*N*[3]，*N*[4])，反馈函数为*N*[1]
    + *N*[2] + *N*[1]*N*[2] + *N*[3]*N*[4]，其第一个输出位为以下表达式：
- en: '![](../images/pg96-1.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg96-1.jpg)'
- en: 'The second iteration replaces the *N*[1] value with that new bit. Expressing
    the second output bit in terms of the initial state, we get the following equation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次迭代将*N*[1]值替换为新的位。将第二个输出位用初始状态表示，我们得到以下方程：
- en: '![](../images/pg96-2.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg96-2.jpg)'
- en: This new equation has algebraic degree 3 (the highest number of bits multiplied
    together, here in *N*[1]*N*[3]*N*[4]) rather than degree 2 of the feedback function,
    and it has six terms instead of four. As a result, iterating the nonlinear function
    quickly yields unmanageable equations because the size of the output grows exponentially.
    Although you’ll never compute those equations when running the NFSR, an attacker
    has to solve them in order to break the system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新方程的代数次数为3（最高次乘积的位数，这里是*N*[1]*N*[3]*N*[4]），而不是反馈函数的次数2，并且它有六个项而不是四个。因此，迭代非线性函数会迅速产生无法处理的方程，因为输出的大小呈指数增长。尽管在运行NFSR时你永远不会计算这些方程，攻击者必须解决它们才能破解系统。
- en: One downside to NFSRs is that there’s no efficient way to determine an NFSR’s
    period or to know whether its period is maximal. For an NFSR of *n* bits, you
    need to run close to 2*^n* trials to verify that its period is maximal. This calculation
    is impossible for large NFSRs of 80 bits or more.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there’s a trick to using an NFSR without worrying about short
    periods: you can combine LFSRs and NFSRs to get both a guaranteed maximal period
    and the cryptographic strength—and that’s exactly how Grain-128a works.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Grain-128a</samp>
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Remember the AES competition discussed in [Chapter 4](chapter4.xhtml), in the
    context of the AES block cipher? The stream cipher Grain is the offspring of a
    similar project called the eSTREAM competition. This competition closed in 2008
    with a shortlist of recommended stream ciphers, which included four hardware-oriented
    ciphers and four software-oriented ones. Grain is one of these hardware ciphers,
    and Grain-128a is an upgraded version from the original authors of Grain. [Figure
    5-8](chapter5.xhtml#fig5-8) shows the action mechanism of Grain-128a.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-8.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-8: The mechanism of
    Grain-128a, with a 128-bit NFSR and a 128-bit LFSR</samp>'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Grain-128a is about as simple as a stream cipher can be, combining a 128-bit
    LFSR, a 128-bit NFSR, and a filter function, **h**. The LFSR has a maximal period
    of 2^(128) – 1, which ensures that the period of the whole system is at least
    2^(128) – 1 to protect against potential short cycles in the NFSR. At the same
    time, the NFSR and the nonlinear filter function **h** add cryptographic strength.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Grain-128a takes a 128-bit key and a 96-bit nonce. It copies the 128 key bits
    into the NFSR’s 128 bits and copies the 96 nonce bits into the first 96 LFSR bits,
    filling the 32 bits left with ones and a single zero bit at the end. The initialization
    phase updates the whole system 256 times before returning the first keystream
    bit. During initialization, the bit returned by the **h** function is thus not
    output as a keystream but instead goes into the LFSR to ensure that its subsequent
    state depends on both the key and the nonce.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Grain-128a’s LFSR feedback function is
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg98-1.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: where *L*[1], *L*[2], . . . , *L*[128] are the bits of the LFSR. This feedback
    function takes only 6 bits from the 128-bit LFSR, but that’s enough to get a primitive
    polynomial that guarantees a maximal period. The small number of bits minimizes
    the cost of a hardware implementation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the feedback polynomial of Grain-128a’s NFSR (*N*[1], . . . , *N*[128]):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg98-2.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: This function was carefully chosen to maximize its cryptographic strength while
    minimizing its implementation cost. It has an algebraic degree of 4 because its
    term with the most variables has four variables (namely, *N*[33]*N*[35]*N*[36]*N*[40]).
    Moreover, **g** can’t be approximated by a linear function because it’s highly
    nonlinear. Also, in addition to **g**, Grain-128a XORs the bit coming out from
    the LFSRs to feed the result back as the NFSR’s new, rightmost bit.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The filter function **h** is another nonlinear function; it takes 9 bits from
    the NFSR and 7 bits from the LFSR and combines them in a way that ensures good
    cryptographic properties.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: As I write this, there is no known attack on Grain-128a, and I’m confident that
    it will remain secure. Grain-128a is used in some low-end embedded systems that
    need a compact and fast stream cipher—typically industrial proprietary systems—which
    is why Grain-128a is little known in the open source software community.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">A5/1</samp>
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A5/1 is a stream cipher that was used to encrypt voice communications in the
    2G mobile standard. The A5/1 standard was created in 1987 but only published in
    the late 1990s after it was reverse engineered. Attacks appeared in the early
    2000s, and A5/1 was eventually broken in a way that allows actual (rather than
    theoretical) decryption of encrypted communications. Let’s see why and how.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A5/1’s Mechanism</samp>
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As [Figure 5-9](chapter5.xhtml#fig5-9) shows, A5/1 relies on three LFSRs and
    uses a trick that looks clever at first glance but actually fails to be secure.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-9.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-9: The A5/1 cipher</samp>'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'A5/1 uses LFSRs of 19, 22, and 23 bits, with the polynomials for each as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg99-1.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: 'How could this be seen as secure with only LFSRs and no NFSR? The trick lies
    in A5/1’s update mechanism. Instead of updating all three LFSRs at each clock
    cycle, the designers of A5/1 added a clocking rule that does the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Checks the value of the 9th bit of LFSR 1, the 11th bit of LFSR 2, and the
    11th bit of LFSR 3, called the *clocking bits*. Of those 3 bits, either all have
    the same value (1 or 0) or two have the same value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Clocks the registers whose clocking bits are equal to the majority value,
    0 or 1\. Either two or three LFSRs are clocked at each update.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Without this rule, A5/1 would provide no security whatsoever, and bypassing
    this rule is enough to break the cipher. However, that’s easier said than done,
    as you’ll see.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In A5/1’s irregular clocking rule, each register is clocked with a probability
    of 3/4 at any update. Namely, the probability that at least one other register
    has the same bit value is 1 – (1/2)**²**, where (1/2)**²* *is the chance that
    both of the other two registers have a different bit value.*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 2G communications use A5/1 with a key of 64 bits and a 22-bit nonce, which changes
    for every new data frame. The initialization mechanism of A5/1 first sets all
    registers to zero and injects the key followed by the nonce bit by bit to each
    register, and after each bit is injected, the registers are updated. The system
    is then updated 100 times following the previously described irregular rule.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Attacks on A5/1 recover the 64-bit initial state of the system (the 19 + 22
    + 23 LFSR initial value), in turn revealing the nonce (if it wasn’t already known)
    and the key, by unwinding the initialization mechanism. The attacks are *known-plaintext
    attacks (KPAs)* because part of the encrypted data is known, which allows attackers
    to determine the corresponding keystream parts by XORing the ciphertext with the
    known plaintext chunks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main types of attacks on A5/1:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '**Subtle attacks **Exploit the internal linearity of A5/1 and its simple irregular
    clocking system.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '**Brutal attacks **Exploit only the short key of A5/1 and the invertibility
    of the frame number injection.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how these attacks work.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Subtle Attacks</samp>
  id: totrans-142
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'We’ll examine the *guess-and-determine* subtle attack. In this kind of attack,
    an attacker guesses certain secret values of the state to determine others. In
    cryptanalysis, “guessing” means brute-forcing: for each possible value of LFSRs
    1 and 2 and all possible values of LFSR 3’s clocking bit during the first 11 clocks,
    the attack reconstructs LFSR 3’s bits by solving equations that depend on the
    bits guessed. When the guess is correct, the attacker gets the right value for
    LFSR 3.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The attack’s pseudocode looks like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How efficient is this attack compared to the 2^(64)-trial brute-force search
    discussed in [Chapter 3](chapter3.xhtml)? This attack makes at most 2^(19) × 2^(22)
    × 2^(11) = 2^(52) operations in the worst case, when the algorithm succeeds only
    at the very last test. That’s 2^(12) (or about 4,000) times faster than in the
    brute-force search, assuming that the last two operations in the previous pseudocode
    require about as much computation as testing a 64-bit key in a brute-force search.
    But is this assumption correct?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall our discussion of the full attack cost in [Chapter 3](chapter3.xhtml).
    When evaluating the cost of an attack, we need to consider not only the amount
    of computation required to perform the attack but also parallelism and memory
    consumption. Neither is an issue here: as with any brute-force attack, the guess-and-determine
    attack is embarrassingly parallel (or *N* times faster when run on *N* cores)
    and doesn’t need more memory than just running the cipher itself.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Our 2^(52) attack cost estimate is inaccurate for another reason. In fact, each
    of the 2^(52) operations (testing a key candidate) takes about four times as many
    clock cycles as does testing a key in a brute-force attack. The upshot is that
    the real cost of this particular attack is closer to 4 × 2^(52) = 2^(54) operations
    when compared to a brute-force attack.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: The guess-and-determine attack on A5/1 can decrypt encrypted mobile communications,
    but it takes a couple of hours to recover the key when run on a cluster of dedicated
    hardware devices. In other words, it’s nowhere near real-time decryption. For
    that, we have another type of attack.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Brutal Attacks</samp>
  id: totrans-150
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *time-memory trade-off (TMTO)* attack is the brutal attack on A5/1\. This
    attack doesn’t care about A5/1’s internals; it cares only that its state is 64
    bits long. The TMTO attack sees A5/1 as a black box that takes in a 64-bit value
    (the state) and spits out a 64-bit value (the first 64 keystream bits).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea behind the attack is to reduce the cost of a brute-force search in
    exchange for using a lot of memory. The simplest type of TMTO is a type of codebook
    attack, wherein you precompute a table of 2^(64) elements containing a combination
    of key and value pairs (<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">key</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">:</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">value</samp>)
    and store the output value for each of the 2^(64) possible keys. To use this precomputed
    table for the attack, simply collect the output of an A5/1 instance and then look
    up in the table which key corresponds to that output. The attack itself is fast—taking
    only the amount of time necessary to look up a value in memory—but the creation
    of the table takes 2^(64) computations of A5/1\. Worse, codebook attacks require
    an insane amount of memory: 2^(64) × (64 + 64) bits, which is 2^(68) bytes or
    256 exabytes. That’s dozens of data centers, so we can forget about it.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: TMTO attacks reduce the memory requirements of codebook attacks at the price
    of increased computation during the online phase of the attack. The smaller the
    table, the more computations required to crack a key. Regardless, it costs about
    2^(64) operations to prepare the table, but that needs to be done only once.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: In 2010, researchers took about two months to generate two terabytes’ worth
    of tables, using graphics processing units (GPUs) and running 100,000 instances
    of A5/1 in parallel. With the help of such large tables, calls encrypted with
    A5/1 could be decrypted almost in real time. Telecommunication operators have
    implemented workarounds to mitigate the attack, but a real solution came with
    the 3G and 4G mobile telephony standards, which ditched A5/1 altogether.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Software</samp><samp class="SANS_Futura_Std_Bold_B_11">-Oriented
    Stream Ciphers</samp>
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software stream ciphers work with bytes or 32- or 64-bit words instead of individual
    bits, which proves to be more efficient on modern CPUs where instructions can
    perform arithmetic operations on a word in the same amount of time as on a bit.
    Software stream ciphers are therefore better suited than hardware ciphers for
    servers or browsers running on personal computers, where powerful general-purpose
    processors run the cipher as native software.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Today, there is considerable interest in software stream ciphers for a few reasons.
    First, because many devices embed powerful CPUs and hardware has become cheaper,
    there’s less of a need for small bit-oriented ciphers. For example, the two stream
    ciphers in the mobile communications standard 4G (the European SNOW3G and the
    Chinese ZUC) work with 32-bit words and not bits, unlike the older A5/1.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, stream ciphers have gained popularity in software at the expense of
    block ciphers, notably following the fiasco of the padding oracle attack against
    block ciphers in CBC mode. In addition, stream ciphers are easier to specify and
    to implement than block ciphers: instead of mixing message and key bits together,
    stream ciphers just ingest key bits as a secret. In fact, one of the most popular
    stream ciphers is actually a block cipher in disguise: AES in counter mode (CTR).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: One software stream cipher design, used by SNOW3G and ZUC, copies hardware ciphers
    and their FSRs, replacing bits with bytes or words. But these aren’t the most
    interesting designs for a cryptographer. As of this writing, the two designs of
    most interest are RC4 and Salsa20, which are used in numerous systems, despite
    the fact that one is completely broken.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">RC4</samp>
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Designed in 1987 by Ron Rivest of RSA Security and then reverse engineered and
    leaked in 1994, RC4 has long been the most widely used stream cipher. RC4 has
    been used in countless applications, most famously in the first Wi-Fi encryption
    standard Wired Equivalent Privacy (WEP) and in the Transport Layer Security (TLS)
    protocol used to establish HTTPS connections. Unfortunately, RC4 isn’t secure
    enough for most applications, including WEP and TLS. To understand why, let’s
    see how RC4 works.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">How RC4 Works</samp>
  id: totrans-162
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: RC4 is among the simplest ciphers ever created. It doesn’t perform any crypto-like
    operations, and it has no XORs, no multiplications, no S-boxes . . . nada. It
    simply swaps bytes. RC4’s internal state is an array, *S*, of 256 bytes, first
    set to *S*[0] = 0, *S*[1] = 1, *S*[2] = 2, . . . , *S*[255] = 255, and then initialized
    from an *n*-byte *K* using its *key scheduling algorithm (KSA)*, which works as
    in the Python code in [Listing 5-1](chapter5.xhtml#Lis5-1).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-1: The key scheduling
    algorithm of RC4</samp>'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this algorithm completes, array *S* still contains all the byte values
    from 0 to 255 but now in a random-looking order. For example, with the all-zero
    128-bit key, the state *S* (from *S*[0] to *S*[255]) becomes:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg103-1.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'However, if I flip the first key bit and run the KSA again, I get a totally
    different, apparently random state:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg103-2.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'Given the initial state *S*, RC4 generates a keystream, *KS*, of the same length
    as the plaintext, *P*, to compute a ciphertext: *C* = *P* ⊕ *KS*. The bytes of
    the keystream *KS* are computed from *S* according to the Python code in [Listing
    5-2](chapter5.xhtml#Lis5-2), if *P* is *m* bytes long.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-2: The keystream
    generation of RC4, where</samp> <samp class="SANS_Futura_Std_Book_11">S</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">is the state initialized in [Listing
    5-1](chapter5.xhtml#Lis5-1)</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Listing 5-2](chapter5.xhtml#Lis5-2), each iteration of the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop modifies up to 2 bytes of RC4’s internal state *S*: the *S*[*i*] and *S*[*j*]
    whose values are swapped. That is, if *i* = 0 and *j* = 4 and if *S*[0] = 56 and
    *S*[4] = 78, then the swap operation sets *S*[0] to 78 and *S*[4] to 56\. If *j*
    equals *i*, then S[*i*] isn’t modified.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: This looks too simple to be secure, yet it took 20 years for cryptanalysts to
    find exploitable flaws. Before the flaws were revealed, we knew RC4’s weaknesses
    only in specific implementations, as in the first Wi-Fi encryption standard, WEP.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">RC4 in WEP</samp>
  id: totrans-175
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: WEP, the first-generation Wi-Fi security protocol, is now completely broken
    due to weaknesses in the protocol’s design and in RC4.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: In its WEP implementation, RC4 encrypts payload data of 802.11 frames, the datagrams
    (or packets) that transport data over the wireless network. All payloads delivered
    in the same session use the same secret key of 40 or 104 bits but have what is
    a supposedly unique 3-byte nonce encoded in the frame header (the part of the
    frame that encodes metadata and comes before the actual payload).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem is that RC4 doesn’t support a nonce, at least not in its official
    specification, and we can’t use a stream cipher without a nonce. The WEP designers
    addressed this limitation with a workaround: they included a 24-bit nonce in the
    wireless frame’s header and prepended it to the WEP key to be used as RC4’s secret
    key. That is, if the nonce is the bytes *N*[0], *N*[1], *N*[2] and the WEP key
    is *K*[0], *K*[1], *K*[2], *K*[3], *K*[4], the actual RC4 key is *N*[0], *N*[1],
    *N*[2], *K*[0], *K*[1], *K*[2], *K*[3], *K*[4]. The net effect is to have 40-bit
    secret keys yield 64-bit effective keys and to have 104-bit keys yield 128-bit
    effective keys. The result? The advertised 128-bit WEP protocol actually offers
    only 104-bit security, at best.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'But here are the real problems with WEP’s nonce trick:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '**The nonces are too small at only 24 bits **This means that if a nonce is
    chosen randomly for each new message, you have to wait about 2^(24/2) = 2^(12)
    packets, or a few megabytes’ worth of traffic, until you can find two packets
    encrypted with the same nonce and thus the same keystream. Even if the nonce is
    a counter running from 0 to 2^(24) – 1, it takes a few gigabytes’ worth of data
    until a rollover, when the repeated nonce can allow the attacker to decrypt packets.
    But there’s a bigger problem.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '**Combining the nonce and key in this fashion helps recover the key **WEP’s
    three nonsecret nonce bytes let an attacker determine the value of *S* after three
    iterations of the key scheduling algorithm. Because of this, cryptanalysts found
    that the first keystream byte strongly depends on the first secret key byte—the
    fourth byte ingested by the KSA—and that this bias can be exploited to recover
    the secret key.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploiting those weaknesses requires access to both ciphertexts and the keystream—that
    is, known or chosen plaintexts. But that’s easy enough: known plaintexts occur
    when the Wi-Fi frames encapsulate data with a known header, and chosen plaintexts
    occur when the attacker injects known plaintext encrypted with the target key.
    The upshot is that the attacks work in practice, not just on paper.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Following the appearance of the first attacks on WEP in 2001, researchers found
    faster attacks that required fewer ciphertexts. Today, you can even find tools
    such as aircrack-ng that implement the entire attack, from network sniffing to
    cryptanalysis.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: WEP’s insecurity is due to both weaknesses in RC4, which takes a single one-use
    key instead of a key and a nonce (as in any decent stream cipher), and weaknesses
    in the WEP design itself.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the second biggest failure of RC4.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">RC4 in TLS</samp>
  id: totrans-186
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: TLS is the single most important security protocol used on the internet. It’s
    best known for underlying HTTPS connections, but it’s also used to protect some
    virtual private network (VPN) connections, as well as email servers, mobile applications,
    and many others. And sadly, TLS has long supported RC4.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Unlike WEP, the TLS implementation doesn’t make the same blatant mistake of
    tweaking the RC4 specs in order to use a public nonce. Instead, TLS just feeds
    RC4 a unique 128-bit session key, which means it’s a bit less broken than WEP.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'The weakness in TLS is due only to RC4 and its inexcusable flaws: statistical
    biases, or nonrandomness, which we know is a total deal-breaker for a stream cipher.
    For example, the second keystream byte produced by RC4 is zero, with a probability
    of 1/128, whereas it should ideally be 1/256\. (Recall that a byte can take 256
    values from 0 to 255; hence, a truly random byte is zero with a chance of 1/256.)
    Crazier still is the fact that most experts continued to trust RC4 as late as
    2013, even though its statistical biases have been known since 2001.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: RC4’s known statistical biases should have been enough to ditch the cipher altogether,
    even if we didn’t know how to exploit the biases to compromise actual applications.
    In TLS, RC4’s flaws weren’t publicly exploited until 2011, but the NSA allegedly
    managed to exploit RC4’s weaknesses to compromise TLS’s RC4 connections well before
    then.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: As it turned out, not only was RC4’s second keystream byte biased, but all of
    the first 256 bytes were biased as well. In 2011, researchers found that the probability
    that one of those bytes comes to zero equals 1/256 + *c*/256² for some constant,
    *c*, taking values between 0.24 and 1.34\. It’s not just for the byte zero but
    for other byte values as well. The amazing thing about RC4 is that it fails where
    even many noncryptographic PRNGs succeed—namely, at producing uniformly distributed
    pseudorandom bytes (that is, where each of the 256 bytes has a chance of 1/256
    of showing up).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'RC4’s flawed TLS implementation can even be exploited in the weakest attack
    model, the chosen-ciphertext: you collect ciphertexts and look for the plaintext,
    not the key. But there’s a caveat: you’ll need many ciphertexts, encrypting *the
    same plaintext* several times using different secret keys. We sometimes call this
    attack model the *broadcast model* because it’s akin to broadcasting the same
    message to multiple recipients.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you want to decrypt the plaintext byte *P*[1] of a plaintext P given many
    ciphertext bytes obtained by intercepting the different ciphertexts of the same
    message. You’ll thus obtain the first bytes of each of the four ciphertexts *C*¹,
    . . . , *C*⁴, for four keystreams *KS*¹, . . . , *KS*⁴ such that:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg105-1.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: Because of RC4’s bias, keystream bytes *KS*[1]*^i* (the first byte in each of
    the four instances) are more likely to be zero than any other byte value. Therefore,
    *C*[1]*^i* bytes are more likely to be equal to *P*[1] than to any other value.
    To determine *P*[1] given the *C*[1]*^i* bytes, simply count the number of occurrences
    of each byte value and return the most frequent one as *P*[1]. However, because
    the statistical bias is very small, you need millions of values to get it right
    with any certainty.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The attack generalizes to recover more than one plaintext byte and to exploit
    more than one biased value (zero here). The algorithm just becomes a bit more
    complicated. However, this attack is hard to put into practice because it needs
    to collect many ciphertexts encrypting the same plaintext but using different
    keys. For example, the attack can’t break all TLS-protected connections that use
    RC4 because you need to trick the server into encrypting the same plaintext to
    many different recipients, or many times to the same recipient with different
    keys.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Salsa20</samp>
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Salsa20 is a simple, software-oriented cipher optimized for modern CPUs that
    has been implemented in numerous protocols and libraries, along with its variant,
    ChaCha. Its designer, respected cryptographer Daniel J. Bernstein, submitted Salsa20
    to the eSTREAM competition in 2005 and won a place in eSTREAM’s software portfolio.
    Salsa20’s simplicity and speed have made it popular among developers.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Salsa20 is a counter-based stream cipher—it generates its keystream by repeatedly
    processing a counter incremented for each block. As [Figure 5-10](chapter5.xhtml#fig5-10)
    shows, the *Salsa20 core* algorithm transforms a 512-bit block using a key (*K*),
    a nonce (*N*), and a counter value (*Ctr*). Salsa20 then adds the result to the
    original value of the block to produce a *keystream block*. (If the algorithm
    were to return the core’s permutation directly as an output, Salsa20 would be
    totally insecure because it could be inverted. The final addition of the initial
    secret state *K* || *N* || *Ctr* makes the transform key-to-keystream-block noninvertible.)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-10.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-10: Salsa20’s encryption
    scheme for a 512-bit plaintext block</samp>'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using the Quarter-Round Function</samp>
  id: totrans-202
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Salsa20’s core permutation uses a function called *quarter-round* (**QR**),
    which transforms four 32-bit words (*a*, *b*, *c*, and *d*) as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg106-1.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: We compute these four lines from top to bottom, meaning that the new value of
    *b* depends on *a* and on *d*, the new value of *c* depends on *a* and on the
    new value of *b* (and thus *d* as well), and so on.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'The operation <<< is wordwise left-rotation by the specified number of bits,
    which can be any value between 1 and 31 (for 32-bit words). For example, <<< 8
    rotates a word’s bits of eight positions toward the left, as the following examples
    show:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg107-1.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Transforming Salsa20’s 512-Bit
    State</samp>
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Salsa20’s core permutation transforms a 512-bit internal state viewed as a 4×4
    array of 32-bit words. [Figure 5-11](chapter5.xhtml#fig5-11) shows the initial
    state, using a key of eight words (256 bits), a nonce of two words (64 bits),
    a counter of two words (64 bits), and four fixed constant words (128 bits) that
    are identical for each encryption/decryption and all blocks.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-11.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-11: The initialization
    of Salsa20’s state</samp>'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: To transform the initial 512-bit state, Salsa20 first applies the **QR** transform
    to all four columns independently (known as the *column-round*) and then to all
    four rows independently (the *row-round*), as [Figure 5-12](chapter5.xhtml#fig5-12)
    illustrates. The sequence column-round/row-round is a *double-round*. Salsa20
    repeats 10 double-rounds, for 20 rounds in total, which is the reason for the
    *20* in *Salsa20*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-12.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-12: Columns and rows
    transformed by Salsa20’s quarter-round (</samp><samp class="SANS_Futura_Std_Bold_Oblique_BI_11">QR</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">) function</samp>'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'The column-round transforms the four columns like so:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg108-1.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: 'The row-round transforms the rows by doing the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg108-2.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: In a column-round, each **QR** takes *x*i arguments ordered from the top to
    the bottom line, whereas a row-round’s **QR** takes as a first argument the words
    on the diagonal (as in the array on the right in [Figure 5-12](chapter5.xhtml#fig5-12))
    rather than words from the first column.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Evaluating Salsa20</samp>
  id: totrans-220
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[Listing 5-3](chapter5.xhtml#Lis5-3) shows Salsa20’s initial states for the
    first and second blocks when initialized with an all-zero key (<samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp>
    bytes) and an all-one nonce (<samp class="SANS_TheSansMonoCd_W5Regular_11">ff</samp>
    bytes). These two states differ in only 1 bit, in the counter, which is in bold:
    specifically, 0 for the first block and 1 for the second.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-3: Salsa20’s initial
    states for the first two blocks with an all-zero key and an all-one nonce</samp>'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Yet, despite only a 1-bit difference, the respective internal states after 10
    double-rounds are totally different from each other, as [Listing 5-4](chapter5.xhtml#Lis5-4)
    shows.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-4: The states from
    [Listing 5-3](chapter5.xhtml#Lis5-3) after 10 Salsa20 double-rounds</samp>'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'But remember, even though word values in the keystream block may look random,
    it’s far from a guarantee of security. RC4’s output looks random, but it has blatant
    biases. Fortunately, Salsa20 is much more secure than RC4 and doesn’t have statistical
    biases. Keep in mind, however, that even when keystreams are statistically indistinguishable
    from perfectly random bytes, this isn’t sufficient to achieve cryptographic security.  #####
    <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Learning Differential Cryptanalysis</samp>'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate why Salsa20 is more secure than RC4, let’s look at the basics
    of *differential cryptanalysis*, the study of the differences between states rather
    than their actual values. For example, the two initial states in [Listing 5-3](chapter5.xhtml#Lis5-3)
    differ by 1 bit in the counter or by the word *x*[8] in the Salsa20 state array.
    The following array shows the bitwise difference between these two states:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg109-1.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: The difference between the two states is actually the XOR of these states. The
    1 bit in bold corresponds to a 1-bit difference between the two states. In the
    XOR of the two states, any nonzero bits indicate differences.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how fast changes propagate in the initial state as a result of Salsa20’s
    core algorithm, let’s look at the difference between two states throughout the
    rounds iteration. After one round, the difference propagates across the first
    column to two of the three other words in that column:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg109-2.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: 'After two rounds, differences further propagate across the rows that already
    include a difference, which is all but the second row. At this point the differences
    between the states are rather sparse; not many bits have changed within a word:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg109-3.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: 'After three rounds, the differences between the states become more dense, though
    the many zero nibbles indicate that many bit positions are still not affected
    by the initial difference:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg109-4.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: 'After four rounds, differences look random to a human observer, and they are
    also almost random statistically as well:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg110-1.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: After only four rounds, a single difference propagates to most of the bits in
    the 512-bit state. In cryptography, we call this *full diffusion*.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Not only do differences propagate across all states, they also do so according
    to complex equations that make future differences hard to predict because highly
    *nonlinear* relations drive the state’s evolution, thanks to the mix of XOR, addition,
    and rotation. If we used only XORs, we’d still have many differences propagating,
    but the process would be linear and therefore insecure.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Attacking Salsa20/8</samp>
  id: totrans-241
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Salsa20 makes 20 rounds by default, but we sometimes use it with only 12 rounds,
    in a version called Salsa20/12, to make it faster. Although Salsa20/12 uses eight
    fewer rounds than Salsa20, it’s in practice as reliable as the 20-round version,
    according to the state-of-the-art research progress. Even Salsa20/8, with only
    eight rounds, is known to be only theoretically weaker but as solid in practice
    as Salsa20.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Breaking Salsa20 should ideally take 2^(256) operations, thanks to its use of
    a 256-bit key. If one can recover the key by performing fewer than 2^(256) operations,
    the cipher is in theory broken. That’s exactly the case with Salsa20/8.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'The attack on Salsa20/8 (published in the 2008 paper “New Features of Latin
    Dances: Analysis of Salsa, ChaCha, and Rumba,” of which I’m a co-author and for
    which we won a cryptanalysis prize from Daniel J. Bernstein) exploits a statistical
    bias in Salsa’s core algorithm after four rounds to recover the key of eight-round
    Salsa20\. In reality, this is mostly a theoretical attack: we estimate its complexity
    at 2^(251) operations of the core function—infeasible, like any computation of,
    say, 2^(100) operations or more, but less so than breaking the expected 2^(256)
    complexity.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'The attack exploits not only a bias over the first four rounds of Salsa20/8
    but also a property of the last four rounds: knowing the nonce, *N*, and the counter,
    *Ctr* (refer to [Figure 5-10](chapter5.xhtml#fig5-10)), the only value needed
    to invert the computation from the keystream back to the initial state is the
    key, *K*. But as [Figure 5-13](chapter5.xhtml#fig5-13) shows, if you know only
    some part of *K*, you can partially invert the computation up until the fourth
    round and observe some bits of that intermediate state—including the biased bit!
    You’ll observe the bias only if you have the correct guess of the partial key;
    hence, the bias serves as an indicator that you’ve got the correct key.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig5-13.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-13: The principle
    of the attack on Salsa20/8</samp>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: In the actual attack on Salsa20/8, to determine the correct guess we need to
    guess 220 bits of the key, and we need 2^(31) pairs of keystream blocks, all with
    the same specific difference in the nonce. Once we single out the correct 220
    bits, we brute-force 36 bits. The brute-forcing takes 2^(36) operations, a computation
    that is dwarfed by the unrealistic 2^(220) × 2^(31) = 2^(251) trials needed to
    find the 220 bits to complete the first part of the attack.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">How Things Can Go Wrong</samp>
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alas, many things can go wrong with stream ciphers, from brittle, insecure designs
    to strong algorithms incorrectly implemented. I’ll explore each category of potential
    problems in the following sections.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Nonce Reuse</samp>
  id: totrans-251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most common failure with stream ciphers occurs when reusing a nonce more
    than once with the same key. This produces identical keystreams, allowing you
    to break the encryption—for example, by XORing two ciphertexts together; the keystream
    then vanishes, and you’re left with the XOR of the two plaintexts.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: A real example is older versions of Microsoft Word and Excel that used a unique
    nonce for each document, but modifying a document didn’t change the nonce. As
    a result, one could use the clear and encrypted text of an older version of a
    document to decrypt later encrypted versions. If Microsoft made this blunder,
    you can imagine how large the problem might be.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Certain stream ciphers designed in the 2010s tried to mitigate the risk of nonce
    reuse by building “misuse-resistant” constructions, or ciphers that remain secure
    even if a nonce is used twice. However, achieving this level of security comes
    with a performance penalty, as you’ll see in [Chapter 8](chapter8.xhtml) with
    the SIV mode.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Broken RC4 Implementation</samp>
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Though it’s intrinsically weak, RC4 can become even weaker if you blindly optimize
    its implementation. For example, let’s consider an entry in the 2007 Underhanded
    C Contest, an informal competition where programmers write benign-looking code
    that actually includes a malicious function.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it works. The naive way to implement the line <samp class="SANS_TheSansMonoCd_W5Regular_11">swap(S[i],
    S[j])</samp> in RC4’s algorithm is to do the following, as this Python code shows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This way of swapping two variables works, but you need to create a new variable,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">buf</samp>. To avoid this, programmers
    often use the following *XOR-swap* trick to swap the values of the variables <samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This works because the second line sets <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>
    ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">y = x</samp>, and the third line
    sets <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp> ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp> ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">y
    = y</samp>. Using this trick to implement RC4 gives the implementation in [Listing
    5-5](chapter5.xhtml#Lis5-5) (adapted from David Wagner and Philippe Biondi’s program
    submitted to the 2007 Underhanded C Contest, and online at *[http://<wbr>www<wbr>.underhanded<wbr>-c<wbr>.org<wbr>/<wbr>_page<wbr>_id<wbr>_16<wbr>.html](http://www.underhanded-c.org/_page_id_16.html)*).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-5: An incorrect C
    implementation of RC4, due to its use of an XOR swap</samp>'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Can you spot the problem with the XOR swap?
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Things go south when <samp class="SANS_TheSansMonoCd_W5Regular_11">i = j</samp>.
    Instead of leaving the state unchanged, the XOR swap sets <samp class="SANS_TheSansMonoCd_W5Regular_11">S[i]</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">S[i]</samp> ⊕ <samp class="SANS_TheSansMonoCd_W5Regular_11">S[i]
    = 0</samp>. In effect, a byte of the state is set to zero each time <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>
    equals <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> in the key schedule
    or during encryption, ultimately leading to an all-zero state and thus to an all-zero
    keystream. For example, after processing 68KB of data, most of the bytes in the
    256-byte state are zero, and the output keystream looks like this:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg113-1.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: The lesson here is to refrain from over-optimizing your crypto implementations.
    Clarity and confidence always trump performance in cryptography.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Weak Ciphers Baked
    into Hardware</samp>
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When a cryptosystem fails to be secure, some systems quickly respond by silently
    updating the affected software remotely (as with web applications) or by releasing
    a new version and prompting the users to upgrade (as with mobile applications).
    Other systems aren’t so lucky and need to stick to the compromised cryptosystem
    for a while before upgrading to a secure version, as is the case with certain
    satellite phones.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: In the early 2000s, US and European telecommunication standardization institutes
    (TIA and ETSI) jointly developed two standards for satellite phone (satphone)
    communications. Satphones are like mobile phones, except that their signal goes
    through satellites rather than terrestrial stations. The advantage is that you
    can use them pretty much everywhere in the world, as long as you have satellite
    coverage. Their downsides are the price, quality, latency, and, as it turns out,
    security.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: GMR-1 and GMR-2 are the two satphone standards adopted by most commercial vendors,
    such as Thuraya and Inmarsat. Both include stream ciphers to encrypt voice communications.
    GMR-1’s cipher is hardware oriented, with a combination of four LFSRs, similar
    to A5/2, the deliberately insecure cipher in the 2G mobile standard aimed at non-Western
    countries. GMR-2’s cipher is software oriented, with an 8-byte state and the use
    of S-boxes. Both stream ciphers are insecure and protect users only against amateurs,
    not against state agencies.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: This story reminds us that stream ciphers used to be easier to break than block
    ciphers and that they’re easier to sabotage. Why? Well, if you design a weak stream
    cipher on purpose, when you find the flaw, you can still blame it on the weakness
    of stream ciphers and deny any malicious intent.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Further Reading</samp>
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about stream ciphers, begin with the archives of the eSTREAM competition
    at *[https://<wbr>www<wbr>.ecrypt<wbr>.eu<wbr>.org<wbr>/stream<wbr>/project<wbr>.html](https://www.ecrypt.eu.org/stream/project.html)*,
    where you’ll find hundreds of papers on stream ciphers, including details of more
    than 30 candidates and many attacks. Some of the most interesting attacks are
    the correlation attacks, algebraic attacks, and cube attacks. See in particular
    the work of Nicolas Courtois and Willi Meier for the first two attack types and
    that of Itai Dinur and Adi Shamir for cube attacks.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: For more about attacks on RC4, look up the 2001 Scott Fluhrer, Itsik Mantin,
    and Adi Shamir (FMS) attack, and the 2013 research article “On the Security of
    RC4 in TLS.”
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Salsa20’s legacy deserves your attention, too. The stream cipher ChaCha is similar
    to Salsa20 but with a slightly different core permutation that was later used
    in the hash function BLAKE, as you’ll see in [Chapter 6](chapter6.xhtml). These
    algorithms all leverage Salsa20’s software implementation techniques using parallelized
    instructions, as discussed at *[https://<wbr>cr<wbr>.yp<wbr>.to<wbr>/snuffle<wbr>.html](https://cr.yp.to/snuffle.html)*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
