- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 15 IMPLEMENTING A SHOPPING CART
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15 实现购物车
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: When browsing an online store, you expect to add items to a shopping cart and
    for them to be remembered until you’re ready to check out and pay. This is an
    extremely common requirement, so in this chapter we’ll focus on building an application
    with a shopping cart. In the process, you’ll learn how to work with sessions in
    a more sophisticated way, storing and updating whole arrays within the $_SESSION
    superglobal. We’ll also continue our efforts to encapsulate the core logic for
    user actions into separate functions coordinated by a front-controller script,
    yielding a well-organized, easy-to-maintain application structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览在线商店时，你希望将商品添加到购物车，并且希望它们在你准备结账时仍被记住。这是一个非常常见的需求，因此在本章中，我们将重点构建一个具有购物车的应用程序。在这个过程中，你将学习如何更高效地使用会话，在$_SESSION超级全局中存储和更新整个数组。我们还将继续努力将用户行为的核心逻辑封装成单独的函数，并通过前端控制器脚本进行协调，从而得到一个结构良好、易于维护的应用程序。
- en: A *shopping cart* is basically a way to record which products and what quantities
    a user has selected. Our website therefore needs to show a list of products as
    well as enable the user to add items to their shopping cart and view its contents.
    We should also offer a way to edit the shopping cart, allowing the user to change
    quantities, remove items, or empty the cart altogether. As an example, [Figure
    15-1](#fig15-1) shows an Amazon shopping cart with a few items.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*购物车*基本上是记录用户选择了哪些产品及其数量的方式。因此，我们的网站需要显示一份产品列表，并允许用户将商品添加到购物车中，查看购物车的内容。我们还应提供一种编辑购物车的方法，让用户可以更改商品数量、删除商品或清空购物车。例如，[图15-1](#fig15-1)展示了一个亚马逊购物车，里面有一些商品。'
- en: '![](../images/figure15-1.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure15-1.jpg)'
- en: 'Figure 15-1: An e-commerce shopping cart'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-1：一个电子商务购物车
- en: Notice that the cart displays the cost of the individual items as well as a
    total cost of the entire order. The Amazon shopping cart page also offers ways
    to change the quantity of each item and to delete items from the cart. We’ll emulate
    all these features in our own shopping cart.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到购物车显示了每个商品的价格以及整个订单的总费用。亚马逊购物车页面还提供了更改每个商品数量和删除商品的方式。我们将在自己的购物车中模仿所有这些功能。
- en: The Shopping Cart File Structure
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 购物车文件结构
- en: 'Our shopping cart web application will span several files, including an *index.php*
    front-controller script, a *functions.php* file declaring various useful functions,
    a collection of template scripts, and other supporting files. The complete structure
    for the project will ultimately be as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的购物车网页应用将包含多个文件，其中包括一个*index.php*前端控制器脚本，一个*functions.php*文件声明各种实用函数，一组模板脚本以及其他支持文件。最终，项目的完整结构将如下所示：
- en: '![](../images/pg277.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg277.jpg)'
- en: For now, start a new PHP project, create the necessary folders, and copy the
    image files (*banana.png*, *pineapple.png*, and so on) from the book’s provided
    resource files into the *public/images* folder. With that, we’re ready to start
    building the application. The book resource files and exercise solutions can be
    found at *[https://github.com/dr-matt-smith/php-crash-course](https://github.com/dr-matt-smith/php-crash-course)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，开始一个新的PHP项目，创建必要的文件夹，并将书中提供的资源文件中的图像文件（*banana.png*、*pineapple.png*等）复制到*public/images*文件夹中。这样，我们就可以开始构建应用程序了。书中的资源文件和练习解决方案可以在*[https://github.com/dr-matt-smith/php-crash-course](https://github.com/dr-matt-smith/php-crash-course)*找到。
- en: Defining the Product List
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义产品列表
- en: Before we create the shopping cart itself, we’ll begin by building a list of
    products for the user to choose from. We’ll use an array to store the products
    available in our online shop. (Normally, product information would be stored in
    a database instead, but we won’t be covering these until [Part VI](part6.xhtml).)
    In addition to the product array, we’ll use a second array stored in the session
    to keep track of the contents of each user’s shopping cart. You learned to loop
    through an array of products to automatically generate links featuring the product
    IDs in [Chapter 11](chapter11.xhtml) (see Listing 11-11 on [page 214](chapter11.xhtml#pg_214)).
    We’ll do something similar here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 15-2](#fig15-2) shows the product list page we’ll create. As usual,
    we can use a little Bootstrap to help produce a professional-looking page with
    minimal CSS.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure15-2.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-2: A page showing the list of products'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have five products on our site. [Table 15-1](#tab15-1) lists the data
    values we need to store for each product.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 15-1: Product Details'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Value of attribute per product |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| ID | 010 | 025 | 005 | 021 | 002 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| Name | Sandwich | Slice of cheesecake | Pineapple | Jelly donut | Banana
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| Description | A filling, savory snack of peanut butter and jelly. | Treat
    yourself to a chocolate-covered cheesecake slice. | A piece of exotic fruit. |
    The best type of donut — filled with sweet jam. | The basis for a good smoothie
    and high in potassium. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| Price | 1.00 | 2.00 | 3.00 | 2.50 | 0.50 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| Stars | 4 | 5 | 2 | 3 | 5 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| Image | peanut _butter.png | chocolate_cheese _cake.png | pineapple.png |
    jellydonut.png | banana.png |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: Notice that each product has a unique ID, name, description, price, star rating
    (from 1 to 5), and associated image filename. To implement all of this, we’ll
    create a $products array that contains an element for each product, using the
    product IDs as keys. Each product in the array is itself an array with keys for
    each attribute, such as 'name', 'description', 'price', and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Products Array
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Listing 15-1 shows how to declare each product array element to store its data
    values, creating elements for the first two products. Enter this code into *public/index.php*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 15-1: Declaring the first two products in index.php'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new, empty array called $products. Then we use $products['010']
    to append a new element to the end of $products, indexed with the key '010'. This
    new element is set to an array containing the properties for the peanut butter
    and jelly sandwich. We then append another element to $products with the key '025',
    containing an array with the properties for the cheesecake slice.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Using these first two products as a model, add the code declaring array elements
    for the remaining three products from [Table 15-1](#tab15-1). Be sure to use strings
    containing the products’ IDs as array keys.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll need a little CSS to style the product list page, so create the *public/css/products.css*
    file containing the contents of [Listing 15-2](#lis15-2).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些 CSS 来样式化产品列表页面，因此创建 *public/css/products.css* 文件，包含 [Listing 15-2](#lis15-2)
    的内容。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 15-2: The CSS to style the product list in css/products.css'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 15-2：在 css/products.css 中样式化产品列表的 CSS
- en: We first style the stars that represent the product’s ratings. We use Bootstrap
    Glyphicon stars. Filled stars will be gold ❶, and disabled stars will be gray
    ❷. Then we set the product images to fill (100%) the available horizontal spaces
    (for dynamically flexed blocks) ❸. I’ve used an image editor to make all images
    the same size for a consistent, professional look and feel. We also set the prices
    to be larger than normal text (1.5) and bold ❹. This will apply to prices both
    on the product list page and in the shopping cart itself.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为表示产品评分的星星设置样式。我们使用 Bootstrap Glyphicon 星星图标。填充的星星将显示为金色 ❶，禁用的星星将显示为灰色 ❷。然后，我们将产品图片设置为填充（100%）可用的横向空间（对于动态弹性块）
    ❸。我使用图像编辑器将所有图片调整为相同的大小，以确保一致的专业外观和感觉。我们还将价格设置为比正常文本大（1.5倍）并加粗 ❹。这将应用于产品列表页面和购物车中的价格。
- en: Displaying the Star Ratings
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示星级评分
- en: Next, we’ll write a PHP function that will return a string containing the HTML
    and CSS classes for a given number of stars. Create and complete the PHP script
    *src/functions.php*, based on the contents of [Listing 15-3](#lis15-3).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个 PHP 函数，返回一个包含给定数量星星的 HTML 和 CSS 类的字符串。根据 [Listing 15-3](#lis15-3)
    的内容，创建并完成 PHP 脚本 *src/functions.php*。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 15-3: A function to output gold and gray stars'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 15-3：输出金色和灰色星星的函数
- en: To keep our code simple, we’ve created a reusable function to return the HTML
    needed to display a given number of filled gold stars (set with the function’s
    $stars parameter) while displaying the remaining (disabled) stars as gray. We
    use a switch statement to handle each possible star rating from 0 to 5. (I’ve
    shown cases 0 through 2; you can fill in the remaining cases.) We display each
    Bootstrap Glyphicon star character by using an HTML <span> element, with the CSS
    class glyphicon glyphicon-star for a filled gold star or glyphicon glyphicon-star-empty
    for a gray star. We could also implement this starsHtml() function by using some
    kind of loop, but the switch statement is more straightforward to follow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持代码简洁，我们创建了一个可重用的函数，返回显示给定数量填充金色星星所需的 HTML（由函数的 $stars 参数设置），同时将其余（禁用的）星星显示为灰色。我们使用
    switch 语句处理从 0 到 5 的每个可能的星级评分。（我展示了 0 到 2 的情况，你可以补充剩余的情况。）我们通过使用 HTML <span> 元素来显示每个
    Bootstrap Glyphicon 星星字符，对于填充的金色星星使用 CSS 类 glyphicon glyphicon-star，对于灰色星星使用 glyphicon
    glyphicon-star-empty。我们也可以使用某种循环来实现这个 starsHtml() 函数，但 switch 语句更容易理解。
- en: Creating the Template Script
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建模板脚本
- en: We now need to write the template script for the product list page. It will
    loop through the $products array, decorating the data for each product with the
    appropriate HTML. (For this to work, the $products array must already have been
    created in the calling script before the template script itself is executed; we’ve
    done this in [Listing 15-1](#lis15-1).) Create *templates/list.php* and enter
    the contents of [Listing 15-4](#lis15-4).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要编写产品列表页面的模板脚本。它将遍历 $products 数组，为每个产品的数据添加适当的 HTML。（为了让这个功能正常工作，$products
    数组必须在模板脚本执行之前在调用脚本中创建；我们在 [Listing 15-1](#lis15-1) 中做了这件事。）创建 *templates/list.php*
    文件，并输入 [Listing 15-4](#lis15-4) 的内容。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 15-4: The list.php template'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 15-4：list.php 模板
- en: We use three <link> elements to load the Bootstrap CSS styles and glyphs, plus
    our custom *products.css* stylesheet in the *css* folder. Then we declare a PHP
    foreach loop to iterate through the $products array, one product at a time ❶.
    On each iteration, the loop extracts the array containing details about the current
    product (with elements indexed by 'name', 'price', 'stars', and 'image'), and
    names that array $product. The foreach syntax $products as $id => $product also
    means that the key for the current array element (a string containing the current
    product ID) will be available in the $id variable. This will become important
    because our shopping cart logic needs to know the ID of each product so it can
    display and modify the cart contents.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用三个 `<link>` 元素来加载 Bootstrap CSS 样式和字形，同时加载我们自定义的 *products.css* 样式表（位于 *css*
    文件夹中）。然后，我们声明一个 PHP 的 `foreach` 循环，逐一遍历 `$products` 数组 ❶。在每次迭代中，循环提取当前产品的详细信息数组（该数组的元素通过
    'name'、'price'、'stars' 和 'image' 索引），并将该数组命名为 `$product`。`foreach` 语法 `$products
    as $id => $product` 还意味着当前数组元素的键（包含当前产品 ID 的字符串）将在 `$id` 变量中可用。这一点非常重要，因为我们的购物车逻辑需要知道每个产品的
    ID，以便显示和修改购物车内容。
- en: Inside the loop, we create a $price variable containing the value of the 'price'
    element of the current product array, formatted to two decimal places with the
    number_format() function ❷. Next, we create an HTML <img> element that uses the
    image filename stored in $product['image'] to create the path to the appropriate
    image file in the public *images* folder (for example, *images/banana.png*) ❸.
    We then pass the integer number of stars ($product['stars']) to the starsHtml()
    function so the appropriate HTML for the five gold and gray stars will be output
    ❹.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们创建一个 `$price` 变量，包含当前产品数组中 'price' 元素的值，并使用 `number_format()` 函数将其格式化为保留两位小数
    ❷。接下来，我们创建一个 HTML `<img>` 元素，使用存储在 `$product['image']` 中的图像文件名来创建公共 *images* 文件夹中相应图像文件的路径（例如，*images/banana.png*）
    ❸。然后，我们将星级数（`$product['stars']`）传递给 `starsHtml()` 函数，以便输出适当的五颗金色和灰色星星的 HTML ❹。
- en: 'Still in the foreach loop, we set the name of the product as a level 1 heading
    styled with the fs-5 Bootstrap CSS class for smaller text. We then create a <div>
    styled with the price CSS class (defined in our *css/products.css* file). This
    <div> displays the price of the current product, along with a form containing
    a button labeled Add to Cart. Once we’ve added shopping functionality, clicking
    this button will add the ID of the current product to the shopping cart via a
    POST HTTP request. The form passes two query-string parameters: action with a
    value of addToCart and id with a value of the current product ID ❺. Finally, we
    display the product’s text description in its own <div> styled with the fs-6 Bootstrap
    CSS class for small text ❻, before closing the foreach loop.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在 `foreach` 循环中，我们将产品的名称设置为一级标题，并使用 fs-5 Bootstrap CSS 类来调整文本大小。接着，我们创建一个带有价格
    CSS 类的 `<div>`（该类定义在我们的 *css/products.css* 文件中）。这个 `<div>` 显示当前产品的价格，并包含一个标有 "添加到购物车"
    的按钮。添加购物功能后，点击此按钮将通过 POST HTTP 请求将当前产品的 ID 添加到购物车。表单传递了两个查询字符串参数：action 的值为 addToCart，id
    的值为当前产品的 ID ❺。最后，我们在自己的 `<div>` 中显示产品的文本描述，并使用 fs-6 Bootstrap CSS 类来设置小号字体 ❻，然后关闭
    `foreach` 循环。
- en: Updating the Index Script
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新索引脚本
- en: To complete our product list, we need to add require_once statements to the
    *index.php* script so it can access code from other parts of the project. Update
    *public/index.php* as shown in [Listing 15-5](#lis15-5).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的产品列表，我们需要在 *index.php* 脚本中添加 `require_once` 语句，以便它可以访问项目其他部分的代码。更新 *public/index.php*，如[列表
    15-5](#lis15-5)所示。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 15-5: Reading the function declarations and template script into index.php'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15-5：将函数声明和模板脚本读取到 `index.php` 中
- en: We use require_once to read in the function declaration file, which gives the
    page template access to the starsHtml() function. Then, at the end of the script,
    we read in the template script to display the product list page. Because we declare
    the $products array in between, the template will have access to this too. At
    this point, if you run the PHP web server (php -S localhost:8000 -t public) and
    visit the home page in a web browser, you should see the list of products, as
    shown earlier in [Figure 15-2](#fig15-2).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `require_once` 来读取函数声明文件，这样页面模板就可以访问 `starsHtml()` 函数。然后，在脚本的末尾，我们读取模板脚本以显示产品列表页面。因为我们在中间声明了
    `$products` 数组，所以模板也可以访问这个数组。此时，如果你运行 PHP 网络服务器（`php -S localhost:8000 -t public`）并在浏览器中访问主页，你应该能看到产品列表，正如之前在[图
    15-2](#fig15-2)中所示。
- en: Designing the Shopping Cart
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计购物车
- en: Now let’s create a shopping cart display page, so users will have a way to view
    their cart. In “Implementing Cart-Manipulation Functions” on [page 293](#pg_293),
    we’ll implement the logic for adding to, deleting from, and changing the quantities
    of the shopping cart contents. [Figure 15-3](#fig15-3) shows the shopping cart
    page we’ll create.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个购物车展示页面，这样用户就可以查看他们的购物车。在[第293页](#pg_293)的《实现购物车操作功能》中，我们将实现添加、删除和更改购物车商品数量的逻辑。[图15-3](#fig15-3)展示了我们将要创建的购物车页面。
- en: '![](../images/figure15-3.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure15-3.jpg)'
- en: 'Figure 15-3: The shopping cart page'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图15-3：购物车页面
- en: We’ll need to display a row for each product in the cart, along with the unit
    price, the quantity in the cart, and the subtotal for each product. Each item
    also needs + and - buttons to incrementally change the quantity of the product
    by plus or minus 1, and a red Remove button to completely remove that product
    from the cart. We’ll have a final row beneath the products displaying the total
    cost of all items in the cart.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为购物车中的每个产品显示一行，包含单价、购物车中的数量和该产品的小计。每个商品还需要有“+”和“-”按钮，以便逐步增加或减少商品数量，另外还有一个红色的“移除”按钮，用来将该商品完全从购物车中删除。我们还会在商品下方增加一行，显示购物车中所有商品的总成本。
- en: '#### Creating the Front Controller'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 创建前端控制器'
- en: 'Since the shopping cart will be our second display page, we need to introduce
    front-controller logic to *public/index.php* to select the appropriate template
    to display. We’re going to offer two navigation links at the top of each page:
    List of Products (href="/") and Shopping Cart (href="/?action=cart"). The front
    controller can therefore check for an action query-string variable with a value
    of cart to determine which page the user is requesting. Delete the require_once
    statement currently at the end of *public/index.php* and replace it with the code
    in [Listing 15-6](#lis15-6).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于购物车将是我们的第二个展示页面，我们需要在*public/index.php*中引入前端控制器逻辑，以选择合适的模板进行展示。我们将在每个页面的顶部提供两个导航链接：产品列表（href="/"）和购物车（href="/?action=cart"）。因此，前端控制器可以检查带有cart值的action查询字符串变量，以确定用户请求的是哪个页面。删除当前在*public/index.php*末尾的require_once语句，并用[列表15-6](#lis15-6)中的代码替换它。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 15-6: Deciding which template to display at the end of index.php'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 列表15-6：决定在index.php末尾显示哪个模板
- en: 'This code creates a $page variable whose value is the name of a template file.
    We incorporate whatever value $page has into the require_once statement at the
    end of the script to display the appropriate template ❶. We have just two templates
    to choose from: the product list (*list.php*) and the shopping cart (*cart.php*,
    which we’ll write shortly). By default, we first set $page to the product list
    template. Then we retrieve a value for the action variable from the query-string
    parameters, and if it’s found to be cart, we change $page to the shopping cart
    template.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个$page变量，其值为模板文件的名称。我们将$page的值插入到脚本末尾的require_once语句中，以显示适当的模板 ❶。我们只有两个模板可供选择：产品列表（*list.php*）和购物车（*cart.php*，我们稍后会编写）。默认情况下，我们首先将$page设置为产品列表模板。然后，我们从查询字符串参数中获取action变量的值，如果值为cart，我们将$page更改为购物车模板。
- en: In “Writing the switch Statement” on [page 297](#pg_297), we’ll expand on the
    front- controller logic to account for all the actions users can take on the shopping
    cart page. For now, though, [Listing 15-6](#lis15-6) has all the front-controller
    logic we need in order to view the cart.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第297页](#pg_297)的《编写switch语句》中，我们将扩展前端控制器逻辑，考虑用户在购物车页面上可以执行的所有操作。不过，目前为止，[列表15-6](#lis15-6)已经包含了我们查看购物车所需的所有前端控制器逻辑。
- en: Managing the Product and Cart Arrays
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理产品和购物车数组
- en: We’ll represent the contents of the shopping cart by using a $cartItems array
    whose keys are product IDs and whose values are the quantities of those products
    in the cart. We don’t need to store additional product information, such as prices,
    in this array, since we can use the product IDs to retrieve the other details
    from the source of our product data, the $products array.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用$cartItems数组来表示购物车的内容，其键为产品ID，值为这些产品在购物车中的数量。我们不需要在这个数组中存储额外的产品信息，如价格，因为我们可以通过产品ID从产品数据源——$products数组中检索其他详细信息。
- en: 'Ultimately, we’ll be reading the contents of the shopping cart array from the
    session, but for now, we’ll hardcode an array of cart items for testing purposes.
    This is a common approach when developing a new feature: you hardcode initial
    data so you can write scripts to work with data for the new feature, and then
    once that’s all working, you make the source of the data dynamic (for example,
    coming from the session or a database).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将从会话中读取购物车数组的内容，但现在，我们将为测试目的硬编码一个购物车物品数组。这是开发新功能时常见的一种方法：你硬编码初始数据，以便编写与新功能数据一起工作的脚本，然后当一切正常运行时，你将数据的来源变为动态的（例如，从会话或数据库中获取）。
- en: To keep our *index.php* script from getting too complicated, we’ll write a separate
    function that returns the array of items currently in the shopping cart. Add the
    getShoppingCart() function shown in [Listing 15-7](#lis15-7) to the end of the
    *src/functions.php* file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免*index.php*脚本变得过于复杂，我们将编写一个单独的函数，返回当前购物车中物品的数组。将[清单 15-7](#lis15-7)中显示的getShoppingCart()函数添加到*src/functions.php*文件的末尾。
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 15-7: The getShoppingCart() function'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-7：getShoppingCart()函数
- en: The getShoppingCart() function creates and returns the contents of the $cartItems
    array. Each element in the array has a product ID string that acts as its key
    (in this hardcoded example, '010' and '005' for the sandwich and pineapple products,
    respectively). The value of each element is the quantity of that product in the
    cart (two sandwiches and four pineapples).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: getShoppingCart()函数创建并返回$cartItems数组的内容。数组中的每个元素都有一个作为键的产品 ID 字符串（在这个硬编码示例中，三明治和菠萝产品的ID分别是'010'和'005'）。每个元素的值是该产品在购物车中的数量（三明治2个，菠萝4个）。
- en: While we’re at it, let’s also move all the code declaring the $products array
    from *index.php* into a getAllProducts() function. Again, this will help keep
    the index script from becoming too complex. Copy the code you created in [Listing
    15-1](#lis15-1) from *public/index.php* and paste it at the end of the *src/functions.php*
    script, as shown in [Listing 15-8](#lis15-8). To embed the code within a function,
    you’ll also need to add the lines shown in black.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还将把在*index.php*中声明$products数组的所有代码移动到getAllProducts()函数中。这样做有助于保持索引脚本不至于过于复杂。从[清单
    15-1](#lis15-1)中复制你在*public/index.php*中创建的代码，并将其粘贴到*src/functions.php*脚本的末尾，如[清单
    15-8](#lis15-8)所示。为了将代码嵌入函数中，你还需要添加黑色字体中所示的行。
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 15-8: The getAllProducts() function'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-8：getAllProducts()函数
- en: This function builds up the $products array and then returns it, allowing the
    array to be used in *public/index.php*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数构建$products数组并返回它，从而使得该数组可以在*public/index.php*中使用。
- en: Streamlining the Index Script
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简化索引脚本
- en: We can now update our *index.php* script to make use of the new getAllProducts()
    and getShoppingCart() functions. If you haven’t already, delete the code building
    the $products array from the *index.php* script. Then update the file by adding
    the statements shown in [Listing 15-9](#lis15-9).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新*index.php*脚本，利用新的getAllProducts()和getShoppingCart()函数。如果你还没有这样做，请从*index.php*脚本中删除构建$products数组的代码。然后按照[清单
    15-9](#lis15-9)中显示的语句更新文件。
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 15-9: The simplified index.php script'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-9：简化后的index.php脚本
- en: We now use the getAllProducts() and getShoppingCart() functions declared in
    *src/functions.php* to create the $products and $cartItems arrays. The arrays
    are therefore available to whichever template script is invoked in the final require_once
    statement.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用在*src/functions.php*中声明的getAllProducts()和getShoppingCart()函数来创建$products和$cartItems数组。因此，这些数组可以在最终require_once语句调用的任何模板脚本中使用。
- en: Creating a Header Template
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建头部模板
- en: When we write a display template for the shopping cart, much of its page header
    content will be the same as that of the product list page. To simplify both the
    cart and product display templates, we’ll put all the common HTML content into
    a separate template file named *templates/_header.php*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为购物车编写展示模板时，它的大部分页面头部内容将与产品列表页面相同。为了简化购物车和产品展示模板，我们将所有公共的 HTML 内容放入一个单独的模板文件，命名为*templates/_header.php*。
- en: This name follows the common convention of using an underscore to prefix the
    name of a *partial template* (a file that renders only part of a page and is shared
    by several other templates). This convention enables you to quickly identify partial
    templates within a folder, so you can ignore them when you’re looking for a particular
    full template file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称遵循了常见的约定，使用下划线作为 *部分模板*（一个只渲染页面部分并且被多个其他模板共享的文件）名称的前缀。这个约定使得你可以快速识别文件夹中的部分模板，从而在寻找特定的完整模板文件时可以忽略它们。
- en: Copy the code from *templates/list.php*, paste it into a new *templates/_header.php*
    file, and update the code as shown in [Listing 15-10](#lis15-10).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 复制 *templates/list.php* 中的代码，将其粘贴到一个新的 *templates/_header.php* 文件中，并根据[清单 15-10](#lis15-10)
    更新代码。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 15-10: The common page header content in _header.php'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-10：_header.php 中的常见页面头部内容
- en: 'The header template uses a $pageTitle variable, which will need to be defined
    in each script that requires this header template. The variable appears twice:
    in the required HTML title in the <head> element ❶ and as a level 1 HTML heading
    in the body of every page ❷. In between, we add a simple navigation list with
    two links, one to show the product list and one to display the shopping cart.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 头部模板使用了一个 $pageTitle 变量，这个变量需要在每个需要此头部模板的脚本中定义。该变量出现了两次：一次是在 <head> 元素中的 HTML
    标题 ❶，另一次是在每个页面主体中的一级 HTML 标题 ❷。在这两者之间，我们添加了一个简单的导航列表，其中有两个链接，一个用于显示产品列表，另一个用于显示购物车。
- en: We can now remove all that common header content from our product list page
    (*templates/list.php*). [Listing 15-11](#lis15-11) shows the updated, simplified
    contents of the template.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从产品列表页面 (*templates/list.php*) 中移除所有的常见头部内容。[清单 15-11](#lis15-11) 显示了更新后的、简化的模板内容。
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 15-11: The simplified list.php template'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-11：简化后的 list.php 模板
- en: 'We use a PHP code block to set a value for $pageTitle and read in the *_header.php*
    template to create the page header. The remainder of the file is just as before:
    a single <div> styled as a Bootstrap row, and a foreach loop to add column divs
    for each product.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个 PHP 代码块为 $pageTitle 设置值，并读取 *_header.php* 模板以创建页面头部。文件的其余部分与之前相同：一个作为
    Bootstrap 行样式的单个 <div>，以及一个 foreach 循环来为每个产品添加列 div。
- en: Creating the Cart Display Template
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建购物车显示模板
- en: We’re now ready to write the template for displaying the items in the shopping
    cart. This script will loop through and display each product in the $cartItems
    array, calculate a subtotal for each product, and find the overall total for the
    complete shopping cart. The script is quite long, so we’ll discuss it in sections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备编写显示购物车中商品的模板。该脚本将循环遍历并显示 $cartItems 数组中的每个产品，计算每个产品的小计，并找出完整购物车的总金额。这个脚本相当长，因此我们将分部分进行讨论。
- en: The first part of the script accesses the common HTML page header code and sets
    up headings for each column in the cart display. Create a new *templates/cart.php*
    file and enter the code in [Listing 15-12](#lis15-12).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第一部分访问了常见的 HTML 页面头部代码，并为购物车显示中的每一列设置了标题。创建一个新的 *templates/cart.php* 文件，并在[清单
    15-12](#lis15-12)中输入代码。
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 15-12: The first part of the cart.php template: setting up the cart
    display'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-12：cart.php 模板的第一部分：设置购物车显示
- en: First, we zero the $total variable; this will eventually hold the grand total
    of all items in the shopping cart. Then we set the $pageTitle variable and read
    in the header template, just as we did on the product list page. We then create
    a row of column headers ❶ identifying the Image, Item, Price, Quantity, Subtotal,
    and Action columns. We use the Bootstrap 12-column layout, making the image (col-2),
    item (col-4), and quantity (col-3) columns wider than the price, subtotal, and
    action columns (which default to 1/12 page-width columns).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将 $total 变量归零；它最终将保存购物车中所有商品的总金额。然后，我们设置 $pageTitle 变量并读取头部模板，就像在产品列表页面上做的那样。接着，我们创建一个列头行
    ❶，标识出图像、商品、价格、数量、小计和操作列。我们使用 Bootstrap 的 12 列布局，使得图像（col-2）、商品（col-4）和数量（col-3）列比价格、小计和操作列更宽（后者默认是
    1/12 页面宽度的列）。
- en: The workhorse section of the shopping cart display script is a loop through
    the $cartItems array. For each product in the array, we’ll display the product’s
    image, name, description, unit price, quantity, and subtotal. Within the loop,
    we’ll also create form buttons for changing the quantity and removing the product
    completely from the shopping cart. [Listing 15-13](#lis15-13) shows the main PHP
    code block at the beginning of the loop.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车显示脚本的核心部分是循环遍历 $cartItems 数组。对于数组中的每个商品，我们将显示该商品的图片、名称、描述、单价、数量和小计。在循环内部，我们还会创建表单按钮，用于更改数量和将商品从购物车中完全移除。[清单
    15-13](#lis15-13) 显示了循环开始时的主要 PHP 代码块。
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 15-13: The second part of the cart.php template: the item loop'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-13：cart.php 模板的第二部分：商品循环
- en: The loop will continue in [Listing 15-14](#lis15-14) with all the HTML column
    <div> elements needed to display each cart item.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 循环将在[清单 15-14](#lis15-14) 中继续，展示显示每个购物车商品所需的所有 HTML 列 <div> 元素。
- en: Within a PHP code block, we start a foreach loop through the $cartItems array,
    setting $id to equal the current array element key and $quantity to equal the
    current element value. Since $id also corresponds to a key in the $products array,
    we use it to retrieve all product details for the current shopping cart item,
    storing them in the $product variable ❶. We then extract the price of the product
    into $price and multiply it by $quantity to get the subtotal for the cart item
    ❷. Next, we add the subtotal for the current cart item to the grand total ($total)
    ❸. This grand total will accumulate over the course of the loop. Finally, we format
    both $price and $subtotal to be numbers with two decimal places, since they represent
    currency values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 PHP 代码块内，我们开始遍历 $cartItems 数组的 foreach 循环，将 $id 设置为当前数组元素的键，将 $quantity
    设置为当前元素的值。由于 $id 也对应 $products 数组中的一个键，我们用它来检索当前购物车商品的所有详细信息，并将其存储在 $product 变量中
    ❶。然后，我们提取商品的价格到 $price，并将其乘以 $quantity 以获得该购物车商品的小计 ❷。接下来，我们将当前购物车商品的小计添加到总金额
    ($total) 中 ❸。这个总金额将在循环过程中逐步累加。最后，我们将 $price 和 $subtotal 格式化为保留两位小数的数字，因为它们表示货币值。
- en: Listing 15-14 shows the rest of the foreach loop, where we lay out the HTML
    needed to display each cart item.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-14 显示了 foreach 循环的其余部分，我们在其中展示了显示每个购物车商品所需的 HTML。
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 15-14: The third part of the cart.php template: the item <div> elements'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-14：cart.php 模板的第三部分：商品 <div> 元素
- en: 'We start a new <div>, which will be a row for the current shopping cart item
    in the foreach loop ❶. Then we display a <div> containing an HTML image tag for
    the current product’s image, getting the image filename from the value of $product[''image'']
    ❷. The image is centered and also styled with the product CSS class (from our
    *products.css*) so that the image is sized to fit the <div> (size: 100%). For
    cart product display, we have a different (smaller) image with the same name,
    so the URL for the image references the *cart* subfolder of the *images* folder:
    /images/cart/<?= $product[''image''] ?>.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始一个新的 <div>，它将是 foreach 循环中当前购物车商品的一行 ❶。然后，我们展示一个 <div>，其中包含一个 HTML 图像标签，显示当前商品的图片，图片文件名来自
    $product['image'] 的值 ❷。该图片居中，并且通过产品的 CSS 类（来自我们的 *products.css*）进行了样式设置，使得图片大小适应
    <div>（大小：100%）。对于购物车商品显示，我们有一个不同的（更小的）图片，且名称相同，因此图片的 URL 会引用 *images* 文件夹的 *cart*
    子文件夹：/images/cart/<?= $product['image'] ?>。
- en: We next create a <div> displaying the product name ($product['name']) as a level
    1 heading, along with the text description of the product ($product['description'])
    ❸. Then we display the two-decimal-place value stored in $price in a <div> styled
    with the Bootstrap align-self-center class to vertically center the content in
    the row, with text aligned to the right (text-end) and with the price CSS class
    (bold and larger text) from our *products.css* stylesheet ❹.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个 <div>，展示商品名称 ($product['name'])，作为一级标题，并显示商品的文本描述 ($product['description'])
    ❸。然后，我们在一个 <div> 中展示存储在 $price 中的两位小数值，使用 Bootstrap align-self-center 类将内容在行内垂直居中，文本右对齐
    (text-end)，并应用价格的 CSS 类（加粗和较大字体），来自我们的 *products.css* 样式表 ❹。
- en: 'The next <div> displays the quantity for the current cart item ❺. This is actually
    an HTML form, with two buttons (a minus and a plus) and the $quantity variable
    displayed. The form uses the POST method (since we’re changing content on the
    server) and passes two query-string parameters: action=changeCartQuantity and
    the ID of the product (id=<?= $id ?>). Later in the chapter, we’ll add more logic
    to our *index.php* script to recognize this new value of the action parameter
    and process a change of quantity. For the buttons, we use a minus-sign Glyphicon
    symbol (Bootstrap CSS class glyphicon-minus) with the name changeDirection and
    the value reduce, and a plus-sign Glyphicon, also with the name changeDirection
    but with the value increase.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个<div>显示当前购物车商品的数量❺。这实际上是一个HTML表单，包含两个按钮（一个减号和一个加号）以及显示的$quantity变量。该表单使用POST方法（因为我们正在更改服务器上的内容），并传递两个查询字符串参数：action=changeCartQuantity
    和商品的ID（id=<?= $id ?>）。稍后在本章中，我们将向*index.php*脚本添加更多逻辑，以识别这个新的action参数值并处理数量的更改。对于按钮，我们使用减号Glyphicon符号（Bootstrap
    CSS类glyphicon-minus）并设置name为changeDirection，值为reduce；加号Glyphicon符号，同样设置name为changeDirection，值为increase。
- en: 'Next, we display the value of $subtotal. Once again we format its <div> with
    our price CSS class because it is a currency value, and we align the text to the
    right (text-end) ❻. Then we output another vertically centered <div> with text
    aligned to the right (text-end) that presents a button for the user to remove
    the item completely from the shopping cart ❼. This is another form submitting
    with the POST method. It sends two query-string variables: action=removeFromCart
    and the ID of the current item (id=<?= $id ?>). The form offers the user a button
    consisting of a cross Glyphicon followed by the word Remove. Again, later in the
    chapter, we’ll add more logic to our *index.php* script to handle removing an
    item from the shopping cart. And with that, we end our foreach loop ❽.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们显示$subtotal的值。我们再次使用价格CSS类来格式化它的<div>，因为它是一个货币值，并且我们将文本对齐到右侧（text-end）❻。然后我们输出另一个垂直居中的<div>，文本对齐到右侧（text-end），显示一个按钮，供用户完全从购物车中移除该商品❼。这是另一个使用POST方法提交的表单。它发送两个查询字符串变量：action=removeFromCart
    和当前商品的ID（id=<?= $id ?>）。该表单提供一个按钮，由一个叉号Glyphicon符号和单词Remove组成。稍后在本章中，我们将向*index.php*脚本添加更多逻辑，以处理从购物车中移除商品的操作。至此，我们结束了foreach循环❽。
- en: Listing 15-15 shows the final part of the *templates/cart.php* script. This
    section of the code displays the grand total.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 列表15-15展示了*templates/cart.php*脚本的最后部分。该部分代码显示了总金额。
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 15-15: The final part of the cart.php template: showing the total'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表15-15：cart.php模板的最后部分：显示总金额
- en: This code outputs a final row, displaying two <div> elements. One gives the
    cart total ($total), formatted to two decimal places. The other outputs just the
    word Total. The div to display the total is made wide enough to cover all the
    missing columns to its left by using the Bootstrap class col-11, and since the
    value is a currency, it’s again styled with the price CSS class defined in the
    *products.css* stylesheet file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码输出最后一行，显示两个<div>元素。一个显示购物车总金额（$total），格式化为两位小数。另一个仅输出Total字样。用于显示总金额的<div>足够宽，以覆盖其左侧所有缺失的列，使用了Bootstrap类col-11，并且由于值是货币形式，它再次使用在*products.css*样式表文件中定义的价格CSS类进行样式化。
- en: We’ve now achieved a two-page website. One page displays a list of products
    from data stored in the $products array. The second page displays the contents
    of a shopping cart by using the $cartItems array.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经实现了一个包含两页的网站。一页显示从$products数组中获取的产品列表，另一页显示使用$cartItems数组显示的购物车内容。
- en: Interacting with the Session
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与会话的交互
- en: Up to this point, we’ve used a hardcoded function to always return the same
    shopping cart contents. Now we’ll modify the application to work with a dynamic,
    interactive shopping cart stored in the $_SESSION array so that the cart contents
    can be remembered over the course of the browser session. In the process, we’ll
    implement functions to modify the contents of the cart.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了一个硬编码的函数，始终返回相同的购物车内容。现在我们将修改应用程序，使其与存储在$_SESSION数组中的动态互动购物车一起工作，以便在浏览器会话期间记住购物车的内容。在这个过程中，我们将实现修改购物车内容的功能。
- en: Updating the Cart-Retrieval Function
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新购物车获取功能
- en: To work with dynamic shopping cart data, we must first update the getShoppingCart()
    function to retrieve the shopping cart contents from the session. As we explored
    in [Chapter 14](chapter14.xhtml), before we attempt to retrieve a value from the
    session, we should set a default value in case nothing is found. Our default case
    will be an empty shopping cart array.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理动态购物车数据，我们首先必须更新 **getShoppingCart()** 函数，以从会话中检索购物车内容。正如我们在 [第 14 章](chapter14.xhtml)
    中探讨的那样，在尝试从会话中检索值之前，我们应该设置一个默认值以防找不到任何内容。我们的默认情况将是一个空的购物车数组。
- en: Listing 15-16 shows the updated getShoppingCart() code. This function replaces
    the previous one in *src/functions.php*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/functions.php* 中的 **getShoppingCart()** 代码已更新，见清单 15-16。
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 15-16: A function to retrieve the cart array from the session'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-16：从会话中检索购物车数组的函数
- en: We set $cartItems to the default value of an empty array. Then we use isset()
    to test whether a value can be found in the $_SESSION array for the 'cart' key.
    If an element exists for this key, its value is copied into the $cartItems variable.
    Finally, the function returns the contents of $cartItems.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 $cartItems 设置为空数组的默认值。然后，我们使用 isset() 来测试 $_SESSION 数组中是否可以找到 'cart' 键的值。如果该键存在一个元素，则将其值复制到
    $cartItems 变量中。最后，函数返回 $cartItems 的内容。
- en: Implementing Cart-Manipulation Functions
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现购物车操作函数
- en: Next, we’ll implement functions to manipulate the contents of the cart. First,
    to add an item to the shopping cart stored in the $_SESSION array, we need a function
    that will add a new element to the array with the product ID as the key and a
    quantity of 1 as the value. If $_SESSION doesn’t contain a current shopping cart
    array, this same function should create a new one containing one element. We’ll
    achieve this by adding a new function to *src/functions.php*, as shown in [Listing
    15-17](#lis15-17).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现用于操作购物车内容的函数。首先，为了向存储在 $_SESSION 数组中的购物车中添加商品，我们需要一个函数，该函数将使用产品 ID
    作为键并将数量设置为 1，向数组中添加一个新元素。如果 $_SESSION 中没有当前的购物车数组，则同样的函数应该创建一个包含一个元素的新数组。我们将在
    *src/functions.php* 中添加一个新函数，如 [清单 15-17](#lis15-17) 所示。
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 15-17: A function to add a new product to the cart'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-17：向购物车添加新产品的函数
- en: The function takes an $id parameter representing the ID of the item being added
    to the cart. We first store the current shopping cart array in the $cartItems
    variable by calling our getShoppingCart() function. Then we add a new element
    to $cartItems, with the key of the $id parameter and a value of 1 (the quantity
    of this product in the cart). Finally, we store the updated $cartItems array in
    $_SESSION, overwriting the previous $_SESSION['cart'] array if one existed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受一个 $id 参数，表示要添加到购物车中的项目的 ID。我们首先通过调用我们的 **getShoppingCart()** 函数将当前购物车数组存储在
    $cartItems 变量中。然后，我们向 $cartItems 添加一个新元素，其键为 $id 参数，值为 1（购物车中此产品的数量）。最后，我们将更新后的
    $cartItems 数组存储在 $_SESSION 中，如果存在的话，将覆盖前一个 $_SESSION['cart'] 数组。
- en: Removing a product completely from the shopping cart is similar to adding an
    item. We’ll add a new removeItemFromCart() function to *src/functions.php*, as
    shown in [Listing 15-18](#lis15-18).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 完全从购物车中移除产品与添加项目类似。我们将在 *src/functions.php* 中添加一个新的 **removeItemFromCart()**
    函数，如 [清单 15-18](#lis15-18) 所示。
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 15-18: A function to remove a product from the cart'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-18：从购物车中移除产品的函数
- en: Once again, the function takes in an $id parameter and starts by getting the
    array of items in the shopping cart. Then we use unset() to remove the element
    with the specified ID from the $cartItems array. As before, we finish by storing
    the updated array in the session, overwriting the previous array.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，该函数接受一个 $id 参数，并开始获取购物车中项目的数组。然后，我们使用 **unset()** 来从 $cartItems 数组中删除指定 ID
    的元素。与以前一样，最后通过将更新后的数组存储在会话中来完成操作，覆盖先前的数组。
- en: Next, we’ll write a getQuantity() function to look up the current quantity of
    a given product in the shopping cart array. This function, shown in [Listing 15-19](#lis15-19),
    will help us write other functions for increasing and decreasing the quantity
    of a product in the cart.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个 **getQuantity()** 函数，用于查找购物车数组中给定产品的当前数量。此函数如 [清单 15-19](#lis15-19)
    所示，将帮助我们编写其他增加和减少购物车中产品数量的函数。
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 15-19: A function to check the quantity of a product'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 15-19：检查产品数量的函数
- en: This function takes in the desired product ID and the shopping cart array as
    parameters. We use isset() to test whether an element can be found in the cart
    for the given ID. If it’s found, we return the value for that array element, representing
    the current quantity for that item. If no element is found indexed by $id, the
    item isn’t in the cart, so we return a quantity of 0.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: To increase the quantity of a product in the cart by 1, we need to retrieve
    the existing quantity, add 1 to it, and save the updated array back to the session.
    We’ll encode this logic in an increaseCartQuantity() function, as shown in [Listing
    15-20](#lis15-20).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 15-20: A function to increase the quantity of a cart item'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: After retrieving the $cartItems array, we use our getQuantity() function to
    determine the quantity of the product with the given $id. Next, we add 1 to this
    quantity and assign the new quantity to the $id key in the $cartItems array. Then
    we store the updated array in $_SESSION['cart'], overwriting the previous array.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Decreasing the quantity by 1 is a little more complicated than increasing it,
    since this may reduce the quantity to 0, in which case we should remove the product
    completely from the shopping cart. We need to retrieve the existing quantity,
    subtract 1 from it, test whether the quantity is now 0, update the cart array
    appropriately, and save the updated array back to the session. We’ll encode this
    logic in a reduceCartQuantity() function, as shown in [Listing 15-21](#lis15-21).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 15-21: A function to reduce the quantity of a cart item in file src/functions.php'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: We retrieve the shopping cart from the session and look up the quantity of the
    product with the given $id, just as we did in the previous function. Then we subtract
    1 from this quantity. Next, we test whether the reduced quantity is less than
    1 (that is, 0), and if so, we remove the entire element from the shopping cart
    by using unset(). Otherwise, we store the reduced quantity in the shopping cart.
    Finally, we store the updated $cartItems array in the session, overwriting the
    previous values.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*When easy to do so, I always recommend using strong tests, such as less-than
    or greater-than, as we do for [Listing 15-21](#lis15-21)’s* if *statement, rather
    than testing for equality with a value like 0.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Empty Cart Template
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we’re making the shopping cart dynamic, we need to account for the
    possibility that the user will try to view their cart when it’s empty. We’ll create
    a separate empty cart template to display when this happens. [Figure 15-4](#fig15-4)
    shows how it should look.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figure15-4.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15-4: The empty shopping cart page'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Listing 15-22 shows the code for the empty cart template. Enter this code in
    a new file called *templates/emptyCart.php*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Listing 15-22: The emptyCart.php template'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: This template is very short since, like our other display templates, it uses
    all the common content in *_header.php* (after first setting the required $pageTitle
    variable). Besides the header, it contains a single row of text informing the
    user that the cart is empty.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Finalizing the Front Controller
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our website now has three possible pages the user can see: the list of products,
    the empty cart, and the cart containing items. The application needs to identify
    and perform a range of actions, such as adding items to the cart and changing
    quantities. To finalize our shopping cart application, we therefore need to expand
    the front-controller script in *index.php* to choose from all these pages and
    actions.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '#### Adding Display Functions'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we’ll be expanding the front controller, we still want to keep it
    as simple and concise as possible. Therefore, we’ll declare two final helper functions:
    one to display the list of products and one to display the shopping cart (either
    empty or full). Add the code shown in [Listing 15-23](#lis15-23) to the *src/functions.php*
    file.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Listing 15-23: Functions to display the products and the shopping cart'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: First, we declare the displayProducts() function. It invokes getAllProducts()
    to obtain an array of all the products, then reads in and executes the *list.php*
    template. Then we declare the displayCart() function. It retrieves the $products
    and $cartItems arrays, then tests whether $cartItems is empty ❶. Depending on
    the result, the function displays the appropriate template, either *cart.php*
    or *emptyCart.php*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Writing the switch Statement
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We’re ready to bring everything together with updated front-controller code.
    We’ll follow the pattern we discussed in [Chapter 13](chapter13.xhtml) of using
    a switch statement to detect the required action and respond appropriately. Our
    front controller needs to handle six queries from the user:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Display all products
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the shopping cart
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a product to the shopping cart (given a product ID)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove a product from the shopping cart (given a product ID)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the quantity of a product by 1 (given a product ID)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease the quantity of a product by 1 (given a product ID), and remove it
    if the quantity is now 0
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the existing contents of *public/index.php* with the code in [Listing
    15-24](#lis15-24). This is a well-organized script, since all the complex logic
    has been relegated to separate functions. The front-controller script simply focuses
    on retrieving query-string and POST values, deciding which function to call, and
    choosing whether to display the product list or shopping cart after executing
    the appropriate function.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing 15-24: The final version of the front-controller logic in index.php'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: We use PHP’s session_start() function to start a new session if none currently
    exists or to renew the existing session. Calling this function is one of the first
    tasks you must do when processing a request to the server involving data stored
    in the $_SESSION array. Next, after reading in the function declarations from
    *src/functions.php*, we try to find a value for the $action variable from the
    query-string parameters and use it to begin a switch() statement.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: If the value of $action is 'cart' ❶, we display the shopping cart by using the
    displayCart() function. If the value is 'addToCart' ❷ or 'removeFromCart' ❸, we
    retrieve the value of the id query-string variable, pass it to the appropriate
    function to add or remove a cart item, and then display the shopping cart. If
    $action is 'changeCartQuantity' ❹, we retrieve the product ID from the query string
    and get the value of changeDirection from the POST variables. If the latter is
    'increase', we call increaseCartQuantity(); otherwise, we call decreaseCartQuantity().
    In either case, we then display the shopping cart. Finally, if no value of the
    action query-string variable is found, we use the default case to display the
    list of products ❺.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter, we explored a real-world application of working with sessions:
    an interactive shopping cart. Our work with the shopping cart stored in the $_SESSION
    array followed the same approach as in the preceding chapter: we set a default,
    attempt to read a value from the $_SESSION array, do something with the value,
    then save the updated data back into the session. The core logic for the project
    in this chapter revolves around two arrays, a product list and a shopping cart,
    both of which are keyed with product IDs. While in this chapter our list of products
    is fixed in an array, it would be straightforward to refactor this code to read
    the list of products from a database, which is how most real-world e-commerce
    websites operate.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: By identifying the operations we wanted to apply to our shopping cart array
    and then encoding this logic as individual functions in *src/functions.php*, our
    final *public/index.php* front controller was simple to write. The listings for
    *templates/list.php* and *templates/cart.php* are relatively long, but this is
    mostly because we incorporated some Bootstrap CSS to make the list of products
    and shopping cart look more professional. In fact, the display templates would
    have been even longer had we not used a *templates/_header.php* file to store
    information common to all three pages of the site.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Many software systems are designed around the relationship between *data structures*
    (the way information is stored) and *algorithms* (the programming of the application
    logic). In this case, we structured both our product details and our shopping
    cart arrays around unique product IDs. This decision made creating the site logic
    and display templates straightforward.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: We also saw that not all information about a session needs to be stored to the
    session. For example, the shopping cart subtotals and grand total can be calculated
    dynamically each time the cart page is loaded; they don’t need to be stored. Likewise,
    we don’t store product details within the shopping cart array, just the product
    ID, since we can retrieve all the other attributes of each product in the cart
    from the array of product items. To sum up, we created two data structures (the
    arrays for product details and shopping cart contents) and then designed algorithms
    (our front-controller logic and display templates) to efficiently interact with
    them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 1.   Add a new 'category' attribute for the products in the shopping cart application,
    with possible values 'savory' (the sandwich), 'sweet' (the cheesecake and the
    donut), or 'fruit' (the pineapple and banana). You’ll need to add this element
    to each product in the getAllProducts() function, and add a new <div> in the *list.php*
    template to display it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 2.   Add a button labeled Empty Cart to the shopping cart display page that
    results in a POST request sending the query-string parameter action=emptyCart.
    Then add an emptyShoppingCart() function to the *src/functions.php* file and a
    new case to the front controller’s switch statement to invoke this function and
    clear the shopping cart’s contents.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Since nothing else is being stored in the session for this project, you
    could either use the killSession() function approach from [Chapter 14](chapter14.xhtml)
    or simply replace the existing contents of $_SESSION[''cart''] with an empty array.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 3.   Our code doesn’t have any validation checking for missing or invalid data.
    For example, when the action query-string variable is addToCart, we would have
    a problem if the ID is missing or invalid or if no product exists in the $products
    array matching the received ID. Add some simple validation so that if any problem
    arises with the ID when one is required, the product list page is displayed and
    no change is made to the shopping cart.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
