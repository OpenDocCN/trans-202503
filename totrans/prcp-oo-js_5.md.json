["```\n`var` book `=` {\n    title: `\"The Principles of Object-Oriented JavaScript\"`\n};\n\n`var` prototype `=` `Object`.getPrototypeOf(book);\n\nconsole.log(prototype `===` `Object`.prototype);        `// true`\n```", "```\n  `var` now `=` `new` `Date`();\n  `var` earlier `=` `new` `Date`(`2010`, `1`, `1`);\n\n❶ console.log(now `>` earlier);        `// true`\n```", "```\n`var` book `=` {\n    title: `\"The Principles of Object-Oriented JavaScript\"`\n};\n\n`var` message `=` `\"Book = \"` `+` book;\nconsole.log(message);                `// \"Book = [object Object]\"`\n```", "```\n  `var` book `=` {\n      title: `\"The Principles of Object-Oriented JavaScript\"`,\n      toString: `function`() {\n          `return` `\"[Book \"` `+` `this`.title + `\"]\"`\n      }\n  };\n\n  `var` message `=` `\"Book = \"` + book;\n\n  `// \"Book = [Book The Principles of Object-Oriented JavaScript]\"`\n❶ console.log(message);\n```", "```\n`Object`.prototype.add `=` `function`(value) {\n    `return` `this` `+` value;\n};\n\n`var` book `=` {\n    title: `\"The Principles of Object-Oriented JavaScript\"`\n};\n\nconsole.log(book.add(`5`));           `// \"[object Object]5\"`\nconsole.log`(``\"title\"`.add(`\"end\"`));    `// \"titleend\"`\n\n`// in a web browser`\nconsole.log(`document`.add(`true`));    `// \"[object HTMLDocument]true\"`\nconsole.log(`window`.add(`5`));         `// \"[object Window]true\"`\n```", "```\n`var` empty `=` {};\n\n`for` (`var` property `in` empty) {\n    console.log(property);\n}\n```", "```\n`var` empty `=` {};\n\n`for` (`var` property `in` empty) {\n    if (empty.hasOwnProperty(property)) {\n        console.log(property);\n    }\n}\n```", "```\n`var` book `=` {\n    title: `\"The Principles of Object-Oriented JavaScript\"`\n};\n\n`// is the same as`\n\n`var` book `=` `Object`.create(`Object`.prototype, {\n                title: {\n                    configurable: `true`,\n                    enumerable: `true`,\n                    value: `\"The Principles of Object-Oriented JavaScript\"`,\n                    writable: `true`\n                }\n            });\n```", "```\n`var` person1 `=` {\n    name: `\"Nicholas\"`,\n    sayName: `function`() {\n        console.log(`this`.name);\n    }\n};\n\n`var` person2 `=` `Object`.create(person1, {\n    name: {\n        configurable: `true`,\n        enumerable: `true`,\n        value: `\"Greg\"`,\n        writable: `true`\n    }\n});\n\nperson1.sayName();                                  `// outputs \"Nicholas\"`\nperson2.sayName();                                  `// outputs \"Greg\"`\nconsole.log(person1.hasOwnProperty(`\"sayName\"`));     `// true`\nconsole.log(person1.isPrototypeOf(person2));        `// true`\nconsole.log(person2.hasOwnProperty(`\"sayName\"`));     `// false`\n```", "```\n`var` nakedObject `=` `Object`.create(`null`);\n\nconsole.log(`\"toString\"` `in` nakedObject);    `// false`\nconsole.log(`\"valueOf\"` `in` nakedObject);     `// false`\n```", "```\n`// you write this`\n`function` YourConstructor() {\n    `// initialization`\n}\n\n`// JavaScript engine does this for you behind the scenes`\nYourConstructor.prototype `=` `Object`.create(`Object`.prototype, {\n                                constructor: {\n                                    configurable: `true`,\n                                    enumerable: `true`,\n                                    value: YourConstructor\n                                    writable: `true`\n                                }\n                            });\n```", "```\n❶ `function` Rectangle(length, width) {\n      `this`.length `=` length;\n      `this`.width `=` width;\n  }\n\n  Rectangle.prototype.getArea `=` `function`() {\n      `return` `this`.length `*` `this`.width;\n  };\n\n  Rectangle.prototype.toString `=` `function`() {\n      `return` `\"[Rectangle \"` `+` `this`.length `+` `\"x\"` `+` `this`.width `+` `\"]\"`;\n  };\n\n  `// inherits from Rectangle`\n❷ `function` Square(size) {\n      `this`.length `=` size;\n      `this`.width `=` size;\n  }\n\n  Square.prototype `=` `new` Rectangle();\n  Square.prototype.constructor `=` Square;\n\n  Square.prototype.toString `=` `function`() {\n      `return` `\"[Square \"` `+` `this`.length `+` `\"x\"` `+` `this`.width `+` `\"]\"`;\n  };\n\n  `var` rect `=` `new` Rectangle(`5`, `10`);\n  `var` square `=` `new` Square(`6`);\n\n  console.log(rect.getArea());        `// 50`\n  console.log(square.getArea());      `// 36`\n\n  console.log(rect.toString());       `// \"[Rectangle 5x10]\"`\n  console.log(square.toString());     `// \"[Square 6x6]\"`\n\n  console.log(rect `instanceof` Rectangle);     `// true`\n  console.log(rect `instanceof` `Object`);        `// true`\n\n  console.log(square `instanceof` Square);      `// true`\n  console.log(square `instanceof` Rectangle);   `// true`\n  console.log(square `instanceof` `Object`);      `// true`\n```", "```\n`// inherits from Rectangle`\n`function` Square(size) {\n    `this`.length `=` size;\n    `this`.width `=` size;\n}\n\nSquare.prototype `=` `Object`.create(Rectangle.prototype, {\n                        constructor: {\n                            configurable: `true`,\n                            enumerable: `true`,\n                            value: Square,\n                            writable: `true`\n                        }\n                   });\nSquare.prototype.toString `=` `function`() {\n    `return` `\"[Square \"` `+` `this`.length `+` `\"x\"` `+` `this`.width `+` `\"]\"`;\n};\n```", "```\n  `function` Rectangle(length, width) {\n      `this`.length `=` length;\n      `this`.width `=` width;\n  }\n\n  Rectangle.prototype.getArea `=` `function`() {\n      `return` `this`.length `*` `this`.width;\n  };\n\n  Rectangle.prototype.toString `=` `function`() {\n      `return` `\"[Rectangle \"` `+` `this`.length `+` `\"x\"` `+` `this`.width `+` `\"]\"`;\n  };\n\n  `// inherits from Rectangle`\n❶ `function` Square(size) {\n      Rectangle.call(`this`, size, size);\n\n      `// optional: add new properties or override existing ones here`\n  }\n\n  Square.prototype `=` `Object`.create(Rectangle.prototype, {\n                          constructor: {\n                              configurable: `true`,\n                              enumerable: `true`,\n                              value: Square,\n                              writable: `true`\n                          }\n                      });\n\n  Square.prototype.toString `=` `function`() {\n      `return` `\"[Square \"` `+` `this`.length `+` `\"x\"` + `this`.width `+` `\"]\"`;\n  };\n\n  `var` square `=` `new` Square(`6`);\n\n  console.log(square.length);        `// 6`\n  console.log(square.width);         `// 6`\n  console.log(square.getArea());     `// 36`\n```", "```\n  `function` Rectangle(length, width) {\n      `this`.length `=` length;\n      `this`.width `=` width;\n  }\n\n  Rectangle.prototype.getArea `=` `function`() {\n      `return` `this`.length `*` `this`.width;\n  };\n\n  Rectangle.prototype.toString `=` `function`() {\n      `return` `\"[Rectangle \"` `+` `this`.length `+` `\"x\"` `+` `this`.height `+` `\"]\"`;\n  };\n\n  `// inherits from Rectangle`\n  `function` Square(size) {\n      Rectangle.call(`this`, size, size);\n  }\n\n  Square.prototype `=` `Object`.create(Rectangle.prototype, {\n                          constructor: {\n                              configurable: `true`,\n                              enumerable: `true`,\n                              value: Square,\n                              writable: `true`\n                          }\n                      });\n  `// call the supertype method`\n❶ Square.prototype.toString `=` `function`() {\n      `var` text `=` Rectangle.prototype.toString.call(`this``);`\n      `return` text.replace(`\"Rectangle\"`, `\"Square\"`);\n  };\n```"]