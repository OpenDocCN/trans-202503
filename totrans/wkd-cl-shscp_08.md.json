["```\n$ curl -s http://www.daveonfilm.com/ | head -7\n<!DOCTYPE html>\n<html lang=\"en-US\">\n<head>\n<meta charset=\"UTF-8\" />\n<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\" />\n<link rel=\"pingback\" href=\"http://www.daveonfilm.com/xmlrpc.php\" />\n<title>Dave On Film: Smart Movie Reviews from Dave Taylor</title>\n```", "```\n   #!/bin/bash\n\n   # ftpget--Given an ftp-style URL, unwraps it and tries to obtain the\n   #   file using anonymous ftp\n\n   anonpass=\"$LOGNAME@$(hostname)\"\n\n   if [ $# -ne 1 ] ; then\n     echo \"Usage: $0 ftp://...\" >&2\n     exit 1\n   fi\n\n   # Typical URL: ftp://ftp.ncftp.com/unixstuff/q2getty.tar.gz\n\n   if [ \"$(echo $1 | cut -c1-6)\" != \"ftp://\" ] ; then\n     echo \"$0: Malformed url. I need it to start with ftp://\" >&2\n     exit 1\n   fi\n\n   server=\"$(echo $1 | cut -d/ -f3)\"\n   filename=\"$(echo $1 | cut -d/ -f4-)\"\n   basefile=\"$(basename $filename)\"\n\n   echo ${0}: Downloading $basefile from server $server\n\n➊ ftp -np << EOF\n   open $server\n   user ftp $anonpass\n   get \"$filename\" \"$basefile\"\n   quit\n   EOF\n\n   if [ $? -eq 0 ] ; then\n     ls -l $basefile\n   fi\n\n   exit 0\n```", "```\n$ ftpget ftp://ftp.ncftp.com/unixstuff/q2getty.tar.gz\nftpget: Downloading q2getty.tar.gz from server ftp.ncftp.com\n-rw-r--r--  1 taylor  staff  4817 Aug 14  1998 q2getty.tar.gz\n```", "```\n$ ftpget ftp://ftp.ncftp.com/ncftp/ncftp-3.1.5-src.tar.bz2\n../Scripts.new/053-ftpget.sh: Downloading q2getty.tar.gz from server ftp.\nncftp.com\nConnected to ncftp.com.\n220 ncftpd.com NcFTPd Server (licensed copy) ready.\n331 Guest login ok, send your complete e-mail address as password.\n230-You are user #2 of 16 simultaneous users allowed.\n230-\n230 Logged in anonymously.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nlocal: q2getty.tar.gz remote: unixstuff/q2getty.tar.gz\n227 Entering Passive Mode (209,197,102,38,194,11)\n150 Data connection accepted from 97.124.161.251:57849; transfer starting for\nq2getty.tar.gz (4817 bytes).\n100% |*******************************************************|  4817\n67.41 KiB/s    00:00 ETA\n226 Transfer completed.\n4817 bytes received in 00:00 (63.28 KiB/s)\n221 Goodbye.\n-rw-r--r--  1 taylor  staff  4817 Aug 14  1998 q2getty.tar.gz\n```", "```\nftp -np << EOF\nopen $server\nuser ftp $anonpass\ncd $destdir\nput \"$filename\"\nquit\nEOF\n```", "```\n/bin/echo -n \"Password for ${user}: \"\nstty -echo\nread password\nstty echo\necho \"\"\n```", "```\n   #!/bin/bash\n\n   # getlinks--Given a URL, returns all of its relative and absolute links.\n   #   Has three options: -d to generate the primary domains of every link,\n   #   -i to list just those links that are internal to the site (that is,\n   #   other pages on the same site), and -x to produce external links only\n   #   (the opposite of -i).\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $0 [-d|-i|-x] url\" >&2\n     echo \"-d=domains only, -i=internal refs only, -x=external only\" >&2\n     exit 1\n   fi\n\n   if [ $# -gt 1 ] ; then\n     case \"$1\" in\n➊     -d) lastcmd=\"cut -d/ -f3|sort|uniq\"\n           shift\n           ;;\n       -r) basedomain=\"http://$(echo $2 | cut -d/ -f3)/\"\n➋         lastcmd=\"grep \\\"^$basedomain\\\"|sed \\\"s|$basedomain||g\\\"|sort|uniq\"\n           shift\n           ;;\n       -a) basedomain=\"http://$(echo $2 | cut -d/ -f3)/\"\n➌         lastcmd=\"grep -v \\\"^$basedomain\\\"|sort|uniq\"\n           shift\n           ;;\n        *) echo \"$0: unknown option specified: $1\" >&2\n           exit 1\n     esac\n   else\n➍   lastcmd=\"sort|uniq\"\n   fi\n\n   lynx -dump \"$1\"|\\\n➎   sed -n '/^References$/,$p'|\\\n     grep -E '[[:digit:]]+\\.'|\\\n     awk '{print $2}'|\\\n     cut -d\\? -f1|\\\n➏   eval $lastcmd\n\n   exit 0\n```", "```\n$ getlinks http://www.daveonfilm.com/ | head -10\nhttp://instagram.com/d1taylor\nhttp://pinterest.com/d1taylor/\nhttp://plus.google.com/110193533410016731852\nhttps://plus.google.com/u/0/110193533410016731852\nhttps://twitter.com/DaveTaylor\nhttp://www.amazon.com/Doctor-Who-Shada-Adventures-Douglas/\nhttp://www.daveonfilm.com/\nhttp://www.daveonfilm.com/about-me/\nhttp://www.daveonfilm.com/author/d1taylor/\nhttp://www.daveonfilm.com/category/film-movie-reviews/\n```", "```\n$ getlinks http://www.amazon.com/ | wc -l\n219\n```", "```\n$ getlinks -d http://www.amazon.com/ | head -10\namazonlocal.com\naws.amazon.com\nfresh.amazon.com\nkdp.amazon.com\nservices.amazon.com\nwww.6pm.com\nwww.abebooks.com\nwww.acx.com\nwww.afterschool.com\nwww.alexa.com\n```", "```\n$ getlinks -a http://www.amazon.com/ | wc -l\n51\n$ getlinks -r http://www.amazon.com/ | wc -l\n222\n```", "```\n   #!/bin/bash\n   # githubuser--Given a GitHub username, pulls information about the user\n\n   if [ $# -ne 1 ]; then\n     echo \"Usage: $0 <username>\"\n     exit 1\n   fi\n\n   # The -s silences curl's normally verbose output.\n➊ curl -s \"https://api.github.com/users/$1\" | \\\n           awk -F'\"' '\n               /\\\"name\\\":/ {\n                 print $4\" is the name of the GitHub user.\"\n               }\n               /\\\"followers\\\":/{\n                 split($3, a, \" \")\n                 sub(/,/, \"\", a[2])\n                 print \"They have \"a[2]\" followers.\"\n               }\n                 /\\\"following\\\":/{\n                 split($3, a, \" \")\n                 sub(/,/, \"\", a[2])\n                 print \"They are following \"a[2]\" other users.\"\n               }\n               /\\\"created_at\\\":/{\n                 print \"Their account was created on \"$4\".\"\n               }\n               '\n   exit 0\n```", "```\n$ githubuser brandonprry\nBrandon Perry is the name of the GitHub user.\nThey have 67 followers.\nThey are following 0 other users.\nTheir account was created on 2010-11-16T02:06:41Z.\n```", "```\n#!/bin/bash\n\n# zipcode--Given a ZIP code, identifies the city and state. Use city-data.com,\n#   which has every ZIP code configured as its own web page.\n\nbaseURL=\"http://www.city-data.com/zips\"\n\n/bin/echo -n \"ZIP code $1 is in \"\n\ncurl -s -dump \"$baseURL/$1.html\" | \\\n  grep -i '<title>' | \\\n  cut -d\\( -f2 | cut -d\\) -f1\n\nexit 0\n```", "```\nhttp://www.city-data.com/zips/80304.html\n```", "```\n<title>80304 Zip Code (Boulder, Colorado) Profile - homes, apartments,\nschools, population, income, averages, housing, demographics, location,\nstatistics, residents and real estate info</title>\n```", "```\n$ zipcode 10010\nZIP code 10010 is in New York, New York\n$ zipcode 30001\nZIP code 30001 is in <title>Page not found – City-Data.com</title>\n$ zipcode 50111\nZIP code 50111 is in Grimes, Iowa\n```", "```\n<tr><td align=center><a name=\"207\">207</a></td><td align=center>ME</td><td\nalign=center>-5</td><td>   Maine</td></tr>\n```", "```\n#!/bin/bash\n\n# areacode--Given a three-digit US telephone area code, identifies the city\n#   and state using the simple tabular data at Bennet Yee's website.\n\nsource=\"http://www.bennetyee.org/ucsd-pages/area.html\"\n\nif [ -z \"$1\" ] ; then\n  echo \"usage: areacode <three-digit US telephone area code>\"\n  exit 1\nfi\n\n# wc -c returns characters + end of line char, so 3 digits = 4 chars\nif [ \"$(echo $1 | wc -c)\" -ne 4 ] ; then\n  echo \"areacode: wrong length: only works with three-digit US area codes\"\n  exit 1\nfi\n\n# Are they all digits?\nif [ ! -z \"$(echo $1 | sed 's/[[:digit:]]//g')\" ] ; then\n  echo \"areacode: not-digits: area codes can only be made up of digits\"\n  exit 1\nfi\n\n# Now, finally, let's look up the area code...\n\nresult=\"$(➊curl -s -dump $source | grep \"name=\\\"$1\" | \\\n  sed 's/<[^>]*>//g;s/^ //g' | \\\n  cut -f2- -d\\ | cut -f1 -d\\( )\"\n\necho \"Area code $1 =$result\"\n\nexit 0\n```", "```\n$ areacode 817\nArea code 817 =  N Cent. Texas: Fort Worth area\n$ areacode 512\nArea code 512 =  S Texas: Austin\n$ areacode 903\nArea code 903 =  NE Texas: Tyler\n```", "```\n   #!/bin/bash\n   # weather--Uses the Wunderground API to get the weather for a given ZIP code\n\n   if [ $# -ne 1 ]; then\n     echo \"Usage: $0 <zipcode>\"\n     exit 1\n   fi\n\n   apikey=\"b03fdsaf3b2e7cd23\"   # Not a real API key--you need your own.\n\n➊ weather=`curl -s \\\n       \"https://api.wunderground.com/api/$apikey/conditions/q/$1.xml\"`\n➋ state=`xmllint --xpath \\\n       //response/current_observation/display_location/full/text\\(\\) \\\n       <(echo $weather)`\n   zip=`xmllint --xpath \\\n       //response/current_observation/display_location/zip/text\\(\\) \\\n       <(echo $weather)`\n   current=`xmllint --xpath \\\n       //response/current_observation/temp_f/text\\(\\) \\\n       <(echo $weather)`\n   condition=`xmllint --xpath \\\n       //response/current_observation/weather/text\\(\\) \\\n       <(echo $weather)`\n\n   echo $state\" (\"$zip\") : Current temp \"$current\"F and \"$condition\" outside.\"\n\n   exit 0\n```", "```\n$ weather 78727\nAustin, TX (78727) : Current temp 59.0F and Clear outside.\n$ weather 80304\nBoulder, CO (80304) : Current temp 59.2F and Clear outside.\n$ weather 10010\nNew York, NY (10010) : Current temp 68.7F and Clear outside.\n```", "```\n   #!/bin/bash\n   # moviedata--Given a movie or TV title, returns a list of matches. If the user\n   #   specifies an IMDb numeric index number, however, returns the synopsis of\n   #   the film instead. Uses the Internet Movie Database.\n\n   titleurl=\"http://www.imdb.com/title/tt\"\n   imdburl=\"http://www.imdb.com/find?s=tt&exact=true&ref_=fn_tt_ex&q=\"\n   tempout=\"/tmp/moviedata.$$\"\n\n➊ summarize_film()\n   {\n     # Produce an attractive synopsis of the film.\n\n     grep \"<title>\" $tempout | sed 's/<[^>]*>//g;s/(more)//'\n\n     grep --color=never -A2 '<h5>Plot:' $tempout | tail -1 | \\\n       cut -d\\< -f1 | fmt | sed 's/^/ /'\n\n     exit 0\n   }\n\n   trap \"rm -f $tempout\" 0 1 15\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $0 {movie title | movie ID}\" >&2\n     exit 1\n   fi\n\n   #########\n   # Checks whether we're asking for a title by IMDb title number\n\n   nodigits=\"$(echo $1 | sed 's/[[:digit:]]*//g')\"\n\n   if [ $# -eq 1 -a -z \"$nodigits\" ] ; then\n     lynx -source \"$titleurl$1/combined\" > $tempout\n     summarize_film\n     exit 0\n   fi\n\n   ##########\n   # It's not an IMDb title number, so let's go with the search...\n\n   fixedname=\"$(echo $@ | tr ' ' '+')\"       # for the URL\n\n   url=\"$imdburl$fixedname\"\n\n➋ lynx -source $imdburl$fixedname > $tempout\n\n   # No results?\n\n➌ fail=\"$(grep --color=never '<h1 class=\"findHeader\">No ' $tempout)\"\n\n   # If there's more than one matching title...\n\n   if [ ! -z \"$fail\" ] ; then\n     echo \"Failed: no results found for $1\"\n     exit 1\n   elif [ ! -z \"$(grep '<h1 class=\"findHeader\">Displaying' $tempout)\" ] ; then\n     grep --color=never '/title/tt' $tempout | \\\n     sed 's/</\\\n   </g' | \\\n     grep -vE '(.png|.jpg|>[ ]*$)' | \\\n     grep -A 1 \"a href=\" | \\\n     grep -v '^--$' | \\\n     sed 's/<a href=\"\\/title\\/tt//g;s/<\\/a> //' | \\\n➍   awk '(NR % 2 == 1) { title=$0 } (NR % 2 == 0) { print title \" \" $0 }' | \\\n     sed 's/\\/.*>/: /' | \\\n     sort\n   fi\n\n   exit 0\n```", "```\n$ moviedata lawrence of arabia\n0056172: Lawrence of Arabia (1962)\n0245226: Lawrence of Arabia (1935)\n0390742: Mighty Moments from World History (1985) (TV Series)\n1471868: Mystery Files (2010) (TV Series)\n1471868: Mystery Files (2010) (TV Series)\n1478071: Lawrence of Arabia (1985) (TV Episode)\n1942509: Lawrence of Arabia (TV Episode)\n1952822: Lawrence of Arabia (2011) (TV Episode)\n$ moviedata 0056172\nLawrence of Arabia (1962)\n    A flamboyant and controversial British military figure and his\n    conflicted loyalties during his World War I service in the Middle East.\n```", "```\n#!/bin/bash\n\n# convertcurrency--Given an amount and base currency, converts it\n#   to the specified target currency using ISO currency identifiers.\n#   Uses Google's currency converter for the heavy lifting:\n#   http://www.google.com/finance/converter\n\nif [ $# -eq 0 ]; then\n  echo \"Usage: $(basename $0) amount currency to currency\"\n  echo \"Most common currencies are CAD, CNY, EUR, USD, INR, JPY, and MXN\"\n  echo \"Use \\\"$(basename $0) list\\\" for a list of supported currencies.\"\nfi\n\nif [ $(uname) = \"Darwin\" ]; then\n  LANG=C   # For an issue on OS X with invalid byte sequences and lynx\nfi\n\n     url=\"https://www.google.com/finance/converter\"\ntempfile=\"/tmp/converter.$$\"\n    lynx=$(which lynx)\n\n# Since this has multiple uses, let's grab this data before anything else.\n\ncurrencies=$($lynx -source \"$url\" | grep \"option value=\" | \\\n  cut -d\\\" -f2- | sed 's/\">/ /' | cut -d\\( -f1 | sort | uniq)\n\n########### Deal with all non-conversion requests.\n\nif [ $# -ne 4 ] ; then\n  if [ \"$1\" = \"list\" ] ; then\n    # Produce a listing of all currency symbols known by the converter.\n    echo \"List of supported currencies:\"\n    echo \"$currencies\"\n  fi\n  exit 0\nfi\n\n########### Now let's do a conversion.\n\nif [ $3 != \"to\" ] ; then\n  echo \"Usage: $(basename $0) value currency TO currency\"\n  echo \"(use \\\"$(basename $0) list\\\" to get a list of all currency values)\"\n  exit 0\nfi\n\namount=$1\nbasecurrency=\"$(echo $2 | tr '[:lower:]' '[:upper:]')\"\ntargetcurrency=\"$(echo $4 | tr '[:lower:]' '[:upper:]')\"\n\n# And let's do it--finally!\n\n$lynx -source \"$url?a=$amount&from=$basecurrency&to=$targetcurrency\" | \\\n  grep 'id=currency_converter_result' | sed 's/<[^>]*>//g'\n\nexit 0\n```", "```\nhttps://www.google.com/finance/converter?a=100&from=USD&to=MXN\n```", "```\n$ convertcurrency\nUsage: convert amount currency to currency\nMost common currencies are CAD, CNY, EUR, USD, INR, JPY, and MXN\nUse \"convertcurrency list\" for a list of supported currencies.\n$ convertcurrency list | head -10\nList of supported currencies:\n\nAED United Arab Emirates Dirham\nAFN Afghan Afghani\nALL Albanian Lek\nAMD Armenian Dram\nANG Netherlands Antillean Guilder\nAOA Angolan Kwanza\nARS Argentine Peso\nAUD Australian Dollar\nAWG Aruban Florin\n$ convertcurrency 75 eur to usd\n75 EUR = 84.5132 USD\n```", "```\n#!/bin/bash\n# getbtcaddr--Given a Bitcoin address, reports useful information\n\nif [ $# -ne 1 ]; then\n  echo \"Usage: $0 <address>\"\n  exit 1\nfi\n\nbase_url=\"https://blockchain.info/q/\"\n\nbalance=$(curl -s $base_url\"addressbalance/\"$1)\nrecv=$(curl -s $base_url\"getreceivedbyaddress/\"$1)\nsent=$(curl -s $base_url\"getsentbyaddress/\"$1)\nfirst_made=$(curl -s $base_url\"addressfirstseen/\"$1)\n\necho \"Details for address $1\"\necho -e \"\\tFirst seen: \"$(date -d @$first_made)\necho -e \"\\tCurrent balance: \"$balance\necho -e \"\\tSatoshis sent: \"$sent\necho -e \"\\tSatoshis recv: \"$recv\n```", "```\n$ getbtcaddr 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\nDetails for address 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n    First seen: Sat Jan 3 12:15:05 CST 2009\n    Current balance: 6554034549\n    Satoshis sent: 0\n    Satoshis recv: 6554034549\n\n$ getbtcaddr 1EzwoHtiXB4iFwedPr49iywjZn2nnekhoj\nDetails for address 1EzwoHtiXB4iFwedPr49iywjZn2nnekhoj\n    First seen: Sun Mar 11 11:11:41 CDT 2012\n    Current balance: 2000000\n    Satoshis sent: 716369585974\n    Satoshis recv: 716371585974\n```", "```\n   #!/bin/bash\n\n   # changetrack--Tracks a given URL and, if it's changed since the last visit,\n   #   emails the new page to the specified address\n\n   sendmail=$(which sendmail)\n   sitearchive=\"/tmp/changetrack\"\n   tmpchanges=\"$sitearchive/changes.$$\"  # Temp file\n   fromaddr=\"webscraper@intuitive.com\"\n   dirperm=755        # read+write+execute for dir owner\n   fileperm=644       # read+write for owner, read only for others\n\n   trap \"$(which rm) -f $tmpchanges\" 0 1 15  # Remove temp file on exit\n\n   if [ $# -ne 2 ] ; then\n     echo \"Usage: $(basename $0) url email\" >&2\n     echo \"  tip: to have changes displayed on screen, use email addr '-'\" >&2\n     exit 1\n   fi\n\n   if [ ! -d $sitearchive ] ; then\n     if ! mkdir $sitearchive ; then\n echo \"$(basename $0) failed: couldn't create $sitearchive.\" >&2\n       exit 1\n     fi\n     chmod $dirperm $sitearchive\n   fi\n\n   if [ \"$(echo $1 | cut -c1-5)\" != \"http:\" ] ; then\n     echo \"Please use fully qualified URLs (e.g. start with 'http://')\" >&2\n     exit 1\n   fi\n\n   fname=\"$(echo $1 | sed 's/http:\\/\\///g' | tr '/?&' '...')\"\n   baseurl=\"$(echo $1 | cut -d/ -f1-3)/\"\n\n   # Grab a copy of the web page and put it in an archive file. Note that we\n   #   can track changes by looking just at the content (that is, -dump, not\n   #   -source), so we can skip any HTML parsing....\n\n   lynx -dump \"$1\" | uniq > $sitearchive/${fname}.new\n   if [ -f \"$sitearchive/$fname\" ] ; then\n     # We've seen this site before, so compare the two with diff.\n     diff $sitearchive/$fname $sitearchive/${fname}.new > $tmpchanges\n     if [ -s $tmpchanges ] ; then\n       echo \"Status: Site $1 has changed since our last check.\"\n     else\n       echo \"Status: No changes for site $1 since last check.\"\n       rm -f $sitearchive/${fname}.new     # Nothing new...\n       exit 0                              # No change--we're outta here.\n     fi\n   else\n     echo \"Status: first visit to $1\\. Copy archived for future analysis.\"\n     mv $sitearchive/${fname}.new $sitearchive/$fname\n     chmod $fileperm $sitearchive/$fname\n     exit 0\n   fi\n\n   # If we're here, the site has changed, and we need to send the contents\n   #   of the .new file to the user and replace the original with the .new\n   #   for the next invocation of the script.\n\n   if [ \"$2\" != \"-\" ] ; then\n\n   ( echo \"Content-type: text/html\"\n     echo \"From: $fromaddr (Web Site Change Tracker)\"\n     echo \"Subject: Web Site $1 Has Changed\"\n➊   echo \"To: $2\"\n     echo \"\"\n\n➋   lynx -s -dump $1 | \\\n➌   sed -e \"s|src=\\\"|SRC=\\\"$baseurl|gi\" \\\n➍       -e \"s|href=\\\"|HREF=\\\"$baseurl|gi\" \\\n➎       -e \"s|$baseurl\\/http:|http:|g\"\n   ) | $sendmail -t\n\n   else\n     # Just showing the differences on the screen is ugly. Solution?\n\n     diff $sitearchive/$fname $sitearchive/${fname}.new\n   fi\n\n   # Update the saved snapshot of the website.\n\n   mv $sitearchive/${fname}.new $sitearchive/$fname\n   chmod 755 $sitearchive/$fname\n   exit 0\n```", "```\n$ changetrack http://www.intuitive.com/ taylor@intuitive.com\nStatus: first visit to http://www.intuitive.com/. Copy archived for future\nanalysis.\n```", "```\n$ changetrack http://www.intuitive.com/ taylor@intuitive.com\n$\n```"]