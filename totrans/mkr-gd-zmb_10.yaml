- en: '**10**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10**'
- en: '**COMMUNICATING WITH OTHER SURVIVORS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**与其他幸存者沟通**'
- en: '![image](graphics/f0001-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f0001-01.jpg)'
- en: 'In [Chapter 1](ch01.html#ch01), we discussed the pros and cons of teaming up
    with other humans when zombies walk the Earth. Associating with other people can
    certainly be worthwhile: you can protect each other, share knowledge, pool resources,
    and so on. Of course, they can also take your stuff and put you between themselves
    and the oncoming zombies. If you decide to take the risk and reach out to your
    fellow life forms, then build the projects in this chapter.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html#ch01)中，我们讨论了在僵尸横行的世界中与其他人合作的利弊。与其他人合作无疑是值得的：你们可以互相保护，分享知识，集中资源，等等。当然，他们也可能拿走你的东西，把你推到他们和即将来临的僵尸之间。如果你决定冒险与其他生命形式接触，那么就按照本章中的项目进行构建。
- en: First, we’ll build a beacon to broadcast a voice signal that can be heard on
    an FM radio, so any survivors scanning the airwaves can hear your message, whether
    that’s “Stay away!” or “Help, I’m trapped on the roof of a shopping mall!” After
    that, you’ll also build a Morse code flasher that will blink out any message you
    care to translate into dots and dashes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建一个信标，广播一个可以在FM收音机上听到的语音信号，任何扫描空中波段的幸存者都能听到你的信息，无论是“走开！”还是“救命，我被困在商场的屋顶！”之后，你还将构建一个摩尔斯电码闪光器，闪烁出你愿意翻译成点和划的任何信息。
- en: Of course, if you want to be the one scanning frequency bands, this chapter
    also explains how to hack a radio receiver to search for a signal. Then, you can
    lurk silently while you decide whether what’s out there is worth broadcasting
    to (see [Figure 10-1](ch10.html#ch10fig1)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你想扫描频率带，本章也解释了如何破解一个收音机接收器来搜索信号。然后，你可以悄悄地潜伏，决定外面是否值得广播（见[图10-1](ch10.html#ch10fig1)）。
- en: '![image](graphics/f10-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f10-01.jpg)'
- en: 'Figure 10-1: Zombies like the radio too.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：僵尸也喜欢收音机。
- en: '**PROJECT 17: A RASPBERRY PI RADIO TRANSMITTER BEACON**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目17：树莓派收音机发射器信标**'
- en: The Raspberry Pi is a versatile device that can, given the right software, act
    as an FM radio transmitter. The only extra hardware you’ll need is a length of
    wire to act as an antenna.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一种多功能设备，如果有合适的软件，它可以作为FM收音机发射器。你唯一需要的额外硬件是一段电线，作为天线使用。
- en: '**WHAT YOU WILL NEED**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你需要的材料**'
- en: This is another Raspberry Pi project, so you will need to have a working Raspberry
    Pi system complete with keyboard, mouse, and screen as described in [Chapter 5](ch05.html#ch05).
    Once the program that transmits the radio signal is up and running, you can turn
    off the screen to save power if you wish.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个树莓派项目，因此你需要一个正常工作的树莓派系统，配有键盘、鼠标和屏幕，如[第5章](ch05.html#ch05)所述。一旦广播信号的程序运行起来，你可以选择关闭屏幕以节省电力。
- en: '**RADIO TRANSMITTER LEGALITY**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**收音机发射器的合法性**'
- en: If you’re reading this after the zombie apocalypse, there will be no legal problems
    with building a transmitter because there won’t be any government to enforce the
    regulations. If, however, you are building in preparation, then the legality of
    the transmitter in this project is covered by the same legislation as FM transmitters
    designed to be connected to an MP3 player for car audio.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在僵尸末日后阅读本书，那么建造发射器不会遇到任何法律问题，因为那时没有政府来执行这些法规。然而，如果你是在为末日做准备，那么本项目中的发射器的合法性与为车载音响连接MP3播放器设计的FM发射器受到同样的法律监管。
- en: These transmitters are legal in the United States if the effective range is
    200 feet (60 m) or less. If you use a full-length antenna, this transmitter will
    have a longer range than that, so to stay within the law, use a small antenna
    of about 3 or 4 inches (7 to 10 cm).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有效范围为200英尺（60米）或更短，这些发射器在美国是合法的。如果你使用全长天线，这个发射器的范围会比那个更远，因此为了遵守法律，使用约3或4英寸（7到10厘米）的短天线。
- en: Regulation of the airwaves is necessary so the frequencies used by emergency
    services stay clear, but this transmitter uses only the public broadcast FM wave
    band. The worst that can happen is one of your neighbors receives your broadcast
    instead of their favorite radio station.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对无线电频率的监管是必要的，以确保紧急服务使用的频率不受干扰，但这个发射器只使用公共广播的FM波段。最糟糕的情况是，邻居会接收到你的广播，而不是他们最喜欢的电台。
- en: 'To build this radio transmitter, you’ll need the following parts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个收音机发射器，你需要以下部件：
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **物品** | **备注** | **来源** |'
- en: '| --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![image](graphics/square.jpg) Raspberry Pi | Raspberry Pi 2, Model B or B+
    | Adafruit (2358), Fry’s (8258726) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 树莓派 | 树莓派 2 型号 B 或 B+ | Adafruit (2358), Fry’s
    (8258726) |'
- en: '| ![image](graphics/square.jpg) Jumper wire | Female-to-female jumper wire
    | Adafruit (826) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 跳线电缆 | 母对母跳线电缆 | Adafruit (826) |'
- en: '| ![image](graphics/square.jpg) Wire for the antenna | About 3 feet (1 m) of
    wire |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 天线电线 | 大约 3 英尺（1 米）的电线 |  |'
- en: Any wire will do for the transmitter; just check your box of scavenged hookup
    wire for something that will fit into the end of the female-to-female jumper wire.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任意电线都适用于发射器；只需检查你的接线材料箱，找一根能插入母对母跳线的一端的电线。
- en: You could add the radio transmitter to your existing Raspberry Pi setup. However,
    for maximum transmission range, you’ll want to put the transmitter somewhere high
    up, so I recommend getting a second Pi.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将无线电发射器添加到现有的树莓派设置中。不过，为了获得最大传输范围，你需要将发射器放置在一个较高的位置，因此我建议你购买第二块树莓派。
- en: The length of the jumper wire doesn’t matter; it just allows an easy connection
    between the Raspberry Pi GPIO pin and the antenna wire. The wire to use for the
    rest of the antenna should be the right size to poke into one end of the female-to-female
    jumper wire and stay there. You might need to put a kink in the antenna wire so
    that it stays in place.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线电缆的长度不重要；它只是允许树莓派 GPIO 引脚与天线电线之间轻松连接。用于其他部分天线的电线应具有适当的尺寸，以便插入母对母跳线的一端并保持固定。你可能需要在天线电线的一端打个弯，以使其保持在原位。
- en: '**CONSTRUCTION**'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: To build your transmitter, all you need to do is plug one end of the jumper
    wire onto GPIO pin 4 of the Raspberry Pi ([Figure 10-2](ch10.html#ch10fig2)),
    then plug the antenna wire into the other end of the jumper wire and fix the other
    end of the antenna to a high spot so that the antenna is pulled up vertically.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建发射器，你只需将跳线电缆的一端插入树莓派的 GPIO 引脚 4（见[图 10-2](ch10.html#ch10fig2)），然后将天线电线插入跳线电缆的另一端，并将天线的另一端固定在一个高处，以便天线垂直拉起。
- en: '![image](graphics/f10-02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-02.jpg)'
- en: 'Figure 10-2: Attaching the antenna'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2：连接天线
- en: You will get the longest transmission range if you place the whole Raspberry
    Pi up high. If you have a watchtower, this would be ideal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将整个树莓派放在高处，你将获得最长的传输范围。如果你有一个瞭望塔，这将是理想的选择。
- en: It does not matter if the antenna wire is not very straight. You may find that
    some electrical tape wrapped around the junction of the antenna wire and the jumper
    wire will prevent the antenna from becoming detached. Once you’ve strengthened
    the antenna, you’ve built your radio transmitter beacon!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果天线电线不够直也没关系。你可能会发现，将一些电工胶带缠绕在天线电线与跳线的连接处，可以防止天线脱落。一旦加固了天线，你就完成了你的无线电发射器信标！
- en: '**SOFTWARE**'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**软件**'
- en: I wish I could claim credit for the wonderful piece of software you’ll use in
    this project, but as it was developed by those clever folk at the Imperial College
    Robotics Society, I can’t. You can find out all about their project at *[http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter](http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter).*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望能为你在这个项目中使用的精彩软件称功，但由于它是由帝国理工大学机器人协会的那些聪明人开发的，所以我不能。你可以在 *[http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter](http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter)*
    上了解他们的项目。
- en: The software uses a sound file to oscillate GPIO pin 4 in just the right way
    to generate an FM carrier wave and signal (see the box on frequency modulation).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件使用一个声音文件以正确的方式使 GPIO 引脚 4 振荡，从而生成 FM 载波波形和信号（见频率调制框）。
- en: 'To install the software, start an LXTerminal session on your Raspberry Pi and
    type the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装软件，请在树莓派上启动 LXTerminal 会话，并输入以下命令：
- en: $ mkdir pifm
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: $ mkdir pifm
- en: $ cd pifm
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: $ cd pifm
- en: $ wget http://www.icrobotics.co.uk/wiki/images/c/c3/Pifm.tar.gz
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: $ wget http://www.icrobotics.co.uk/wiki/images/c/c3/Pifm.tar.gz
- en: $ tar -xzf Pifm.tar.gz
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: $ tar -xzf Pifm.tar.gz
- en: These commands create a directory ready to install the software, download the
    software using the `wget` utility, and then uncompress the downloaded file into
    the newly created directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令创建一个目录，准备安装软件，使用 `wget` 工具下载软件，然后将下载的文件解压到新创建的目录中。
- en: '**USING THE FM TRANSMITTER**'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用 FM 发射器**'
- en: 'To test out the FM transmitter, you need an FM receiver (see “[Project 18:
    Arduino FM Radio Frequency Hopper](ch10.html#ch00lev1sec186)” on [page 188](ch10.html#page_188)).
    You also need to find an unused frequency, or at least a frequency with only a
    faint signal. Of course, this won’t be a problem following the apocalypse, but
    it’s more of a challenge with the crowded preapocalypse airwaves. Use your FM
    receiver to find a quiet part of the spectrum and make a note of the frequency.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 FM 发射器，你需要一个 FM 接收器（请参见 “[项目 18：Arduino FM 无线电频率跳跃器](ch10.html#ch00lev1sec186)”
    以及 [第 188 页](ch10.html#page_188)）。你还需要找到一个未被使用的频率，或者至少是一个信号很微弱的频率。当然，末日后这不会成为问题，但在末日前的拥挤电波中，这可就成了一个挑战。使用你的
    FM 接收器找到一个信号空闲的频段，并记下这个频率。
- en: The software you installed includes a sound sample of the *Star Wars* theme
    for testing the transmitter before you record your own, more appropriate message—although
    the music is not completely inappropriate to accompany humanity’s great battle
    to save itself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你安装的软件包括一个 *星际大战* 主题的声音样本，用于在录制你自己的、更合适的消息之前测试发射器——尽管这段音乐完全不失为一个伴随人类拯救自己的伟大斗争的背景音乐。
- en: 'In the LXTerminal, issue the following command to play the tune over your transmitter:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LXTerminal 中，输入以下命令，将音乐通过发射器播放：
- en: $ sudo ./pifm sound.wav 103.0
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo ./pifm sound.wav 103.0
- en: In place of *103.0*, substitute the frequency that your radio receiver is tuned
    to.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *103.0* 替换为你的收音机接收到的频率。
- en: '**RECORDING A MESSAGE**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**录制消息**'
- en: To record a message, you’ll need a laptop and some sound-recording or editing
    software. I recommend Audacity, which is available free for Windows, OS X, and
    Linux from *[http://audacityteam.org/](http://audacityteam.org/)*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要录制一条消息，你需要一台笔记本电脑和一些声音录制或编辑软件。我推荐 Audacity，它可以在 Windows、OS X 和 Linux 上免费下载，访问链接：[http://audacityteam.org/](http://audacityteam.org/)
- en: Fiction and history both tell us that when law and order disintegrate, bad behavior
    often follows. So think long and hard about what you want to say in your message.
    Who knows what gun-toting, supply-stealing outlaws are lurking around the corner?
    You’ll probably want to direct new arrivals somewhere you can observe them before
    lowering your defenses, so bear this in mind when recording your broadcast.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 小说和历史都告诉我们，当法律和秩序瓦解时，坏行为往往随之而来。所以，在你准备发送消息时，务必要认真思考你想说的话。谁知道会有多少带枪、偷取物资的恶棍潜伏在角落里？你可能希望先将新来的人引导到一个你可以观察的地方，在降低防备之前，记得这一点，特别是在录制广播时。
- en: The pifm software requires you to record your message with the sample rate set
    at 16 bit 44.1kHz and then export the message as a WAV file. In the software,
    change `sound.wav` to the name of your new sound file, say *my*_*message.wav*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: pifm 软件要求你将消息录制为采样率为 16 位 44.1kHz 的音频文件，然后将其导出为 WAV 文件。在软件中，将 `sound.wav` 更改为你新音频文件的名称，比如
    *my*_*message.wav*。
- en: '**FREQUENCY MODULATION**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**调频**'
- en: Frequency modulation, or FM as it is nearly always called, is a way of encoding
    a signal (in this case a low-frequency sound signal) on a much higher carrier
    frequency. The sound signal nudges the carrier frequency higher or lower than
    the carrier frequency, depending on the level of your message signal’s waveform.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 调频，或简称 FM，是一种将信号（在这种情况下是低频声音信号）编码到一个远高于载波频率的载波上。声音信号根据消息信号波形的强度，推动载波频率向上或向下偏移。
- en: '[Figure 10-3](ch10.html#ch10fig3) shows two cycles of the message signal (solid
    line) superimposed on the much higher frequency carrier to create the broadcast
    signal (dotted line), whose frequency changes as your message signal changes.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-3](ch10.html#ch10fig3) 显示了消息信号（实线）的两个周期，它们叠加在远高于频率的载波上，形成广播信号（虚线）。广播信号的频率会随消息信号的变化而变化。'
- en: '![image](graphics/f10-03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-03.jpg)'
- en: 'Figure 10-3: Frequency modulation'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：调频
- en: When the signal is at its maximum, the peaks of the dotted broadcast signal
    are closest together. That means the frequency is higher than average. At the
    bottom of the waveform, when the signal has its minimum value, the broadcast signal
    peaks are farthest apart (the frequency is lower than average).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当信号达到最大时，虚线广播信号的波峰距离最接近。这意味着频率高于平均值。在波形的底部，当信号达到最低值时，广播信号的波峰最远离（频率低于平均值）。
- en: In this way, the low-frequency sound wave is encoded onto the high-frequency
    carrier wave. When this signal gets to an FM radio receiver, the circuitry in
    the receiver extracts the original low-frequency audio from the carrier signal.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，低频声音波被编码到高频载波上。当这个信号传送到FM收音机接收器时，接收器中的电路会从载波信号中提取出原始的低频音频。
- en: '**RUNNING THE TRANSMITTER AUTOMATICALLY**'
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**自动运行发射器**'
- en: To maximize the chance of other survivors discovering your message, repeat this
    broadcast around the clock. You can configure the Raspberry Pi to do this for
    you automatically using a Linux tool called `crontab`. The `crontab` utility lets
    you schedule programs to run at certain times of day.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化其他幸存者发现你的消息的机会，全天候重复此广播。你可以配置树莓派自动为你完成这项任务，使用一个名为`crontab`的Linux工具。`crontab`工具允许你安排程序在一天中的特定时间运行。
- en: 'Enter the following command into the LXTerminal:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在LXTerminal中输入以下命令：
- en: $ sudo crontab -e
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo crontab -e
- en: This will open a configuration file with the nano editor, as shown in [Figure
    10-4](ch10.html#ch10fig4).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个配置文件，使用nano编辑器进行编辑，如[图10-4](ch10.html#ch10fig4)所示。
- en: '![image](graphics/f10-04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-04.jpg)'
- en: 'Figure 10-4: scheduling your broadcasts'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-4：安排你的广播时间
- en: 'Scroll down to the end of the file and add the following line:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 向文件末尾滚动并添加以下行：
- en: '*/3 * * * * /home/pi/pifm/pifm /home/pi/pifm/sound.wav 101.0'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*/3 * * * * /home/pi/pifm/pifm /home/pi/pifm/sound.wav 101.0'
- en: The first part of the line (`*/3`) schedules the transmission to run every 3
    minutes, 24 hours a day, 7 days a week. If you use a different sound file or frequency,
    you need to replace `sound.wav` with your filename and enter your chosen frequency.
    If your message is longer than 3 minutes, change `*/3` to the number of minutes
    you need it to be.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的第一部分（`*/3`）安排了每3分钟运行一次广播，每天24小时，7天一周。如果你使用不同的音频文件或频率，你需要将`sound.wav`替换为你的文件名，并输入你选择的频率。如果你的消息超过了3分钟，改变`*/3`为你需要的分钟数。
- en: You only need to do this configuration once; the settings will stick even if
    the Pi is rebooted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要进行一次此配置；即使Pi重启，设置也会保持。
- en: '**PROJECT 18: ARDUINO FM RADIO FREQUENCY HOPPER**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目18：ARDUINO FM RADIO FREQUENCY HOPPER**'
- en: After the zombie apocalypse strikes, your chances of survival will be increased
    by group living—that is, assuming no bite victims come inside and turn into zombies.
    Always be sure that everyone gets checked for zombie-infected wounds before you
    grant entry!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在丧尸末日发生后，群体生活将提高你的生存几率——前提是没有被咬的人进入并变成丧尸。在允许他人进入之前，一定要确保每个人都接受检查，确保没有丧尸感染的伤口！
- en: You’ll inevitably need to sleep or go on supply runs, and without someone to
    watch your back you’ll be vulnerable. (Not to mention the slow descent into insanity
    you’ll suffer from lack of human contact—and you thought zombies were crazy.)
    Therefore, you’ll likely benefit from having a few companions around. Other groups
    of survivors may already be trying to make contact by broadcasting their own radio
    messages, as we now are. In fact, another group might have bought or salvaged
    this book and made the FM transmitter of Project 17\. To find them, you just need
    to be able to pick up their transmission.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你不可避免地需要睡觉或者外出寻找补给，而如果没有人帮助你看守背后，你就会变得脆弱。（更不用说你会因为缺乏人类接触而逐渐陷入疯狂——你以为丧尸已经够疯狂了。）因此，你很可能会从有几个同伴的陪伴中受益。其他幸存者小组可能已经通过广播他们自己的无线电信息试图与你们取得联系，就像我们现在正在做的那样。事实上，另一组人可能已经购买或回收了这本书，并制作了第17项目的FM发射器。为了找到他们，你只需要能够接收到他们的广播信号。
- en: This project ([Figure 10-5](ch10.html#ch10fig5)) takes a cheap FM receiver and
    hacks it so that it automatically scans the FM band for the next station. If someone
    has started transmitting on FM, creating a station instead of the hiss of empty
    airwaves, you will hear their broadcast. An Arduino simulates the pressing of
    the tune button on the radio receiver.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目（[图10-5](ch10.html#ch10fig5)）利用一个便宜的FM接收器，并进行黑客修改，使其能够自动扫描FM频段寻找下一个电台。如果有人开始在FM频段进行广播，创建了一个电台而不是空旷的噼啪声，你就能听到他们的广播。一个Arduino模拟按下收音机接收器上的调频按钮。
- en: '![image](graphics/f10-05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-05.jpg)'
- en: 'Figure 10-5: FM radio frequency hopper'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-5：FM收音机频率跳跃器
- en: '**WHAT YOU WILL NEED**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你需要的材料**'
- en: 'To make this project, you will need the following parts:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作这个项目，你将需要以下部件：
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **物品** | **备注** | **来源** |'
- en: '| --- | --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
- en: '| ![image](graphics/square.jpg) FM radio | Simple low-cost FM headphone radio
    | Dollar Store (or equivalently named establishment in your country’s currency)
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) FM收音机 | 简单的低成本FM耳机收音机 | Dollar Store（或您所在国家货币名称等效的商店）
    |'
- en: '| ![image](graphics/square.jpg) Powered speaker |  | Electronics store |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 带电扬声器 |  | 电子商店 |'
- en: '| ![image](graphics/square.jpg) Audio lead (aux lead) | To connect the radio
    to the powered speaker |  |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 音频线（辅助线） | 用于将收音机连接到带电扬声器 |  |'
- en: '| ![image](graphics/square.jpg) Red LEDs | 2 red LEDs | Adafruit (297) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 红色LED | 2个红色LED | Adafruit (297) |'
- en: '| ![image](graphics/square.jpg) Barrel jack plug | DC power jack with flying
    leads, 12V cigarette lighter adapter, or 5V USB adaptor and lead | Adafruit (80),
    eBay |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 圆形插座插头 | 带飞线的DC电源插座、12V汽车点烟器适配器或5V USB适配器和线
    | Adafruit (80), eBay |'
- en: '| ![image](graphics/square.jpg) Right-angle header pins | 12-way right-angle
    header pins | eBay |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 直角排针 | 12脚直角排针 | eBay |'
- en: We are using right-angle pins rather than straight header pins as right-angle
    pins make it a little easier to solder wires and component leads to this project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是直角引脚而非直插式引脚，因为直角引脚能使得焊接电线和元件引脚变得稍微容易一些。
- en: Look for an FM radio that has a Tune button that moves from one station to the
    next and a Reset button that starts from the beginning of the FM wave band. The
    radio I used cost less than $2, including in-ear headphones.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找一款具有调谐按钮的FM收音机，调谐按钮可以将频率从一个电台切换到下一个，而重置按钮则可以从FM波段的起点开始播放。我使用的这款收音机不到2美元，包含了入耳式耳机。
- en: The Arduino and speakers both require power. Although I have suggested using
    the barrel jack, you could just as easily use the USB port to power the Arduino.
    By now, you should be used to figuring out the most convenient way to power low-voltage
    devices from a 12V battery.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino和扬声器都需要电源。虽然我建议使用圆形插座，但你也可以同样使用USB端口为Arduino供电。到现在为止，你应该已经习惯于从12V电池为低电压设备提供电源的最便捷方式了。
- en: '**CONSTRUCTION**'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: This project assumes the radio uses an SC1088 integrated circuit. This extremely
    low-cost chip is used in most very cheap radios, which seem to use the reference
    design specified in the datasheet for the chip. (Just search for “SC1088 datasheet”
    online; you should turn up a PDF in the first few results.) The wiring diagram
    is shown in [Figure 10-6](ch10.html#ch10fig6). It shows the Arduino being powered
    from the DC jack, but it could equally well be powered by the USB port.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目假设收音机使用的是SC1088集成电路。这个极为低成本的芯片被广泛应用于大多数廉价收音机，似乎都使用数据手册中指定的参考设计。（只需在线搜索“SC1088
    datasheet”，应该能在前几条搜索结果中找到PDF文件。）接线图如[图10-6](ch10.html#ch10fig6)所示，显示了通过DC插座为Arduino供电，但也可以通过USB端口为其供电。
- en: '![image](graphics/f10-06.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-06.jpg)'
- en: 'Figure 10-6: Radio scanner wiring diagram. The numbers 15 and 16 on the SC1088
    radio indicate pin numbers of the chip.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-6：收音机扫描器接线图。SC1088收音机上的数字15和16表示芯片的引脚编号。
- en: The “tune” and “reset” pins of the SC1088 IC are designed to be connected to
    momentary pushbuttons that short these pins to the chip’s 3V supply rail. You
    can see this configuration in the datasheet’s reference schematic. When pushbuttons
    are not shorting the input pins to the supply rail, they are pulled down to ground
    by variable resistances that are set inside the chip. We can emulate the functionality
    of the pushbutton by connecting these pins to ~3V when we want to simulate a button
    push, and by leaving the pin *floating* (not being driven high or low) when we
    want to simulate a button waiting to be pressed. To make the pin float, we can
    set the Arduino pin that is driving it to an input. When acting as an input, an
    I/O pin is said to be *high impedance*, meaning that the pin looks like an open
    circuit to anything that is attached to it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: SC1088集成电路的“调谐”和“重置”引脚设计为连接到短接这两个引脚至芯片3V电源轨的瞬时按键。你可以在数据手册的参考原理图中看到这种配置。当按键不短接输入引脚与电源轨时，它们通过芯片内部设置的可变电阻拉至地。我们可以通过在需要模拟按钮按下时，将这些引脚连接到大约3V来模拟按键功能；而在我们需要模拟按钮等待按下时，则让引脚保持*浮空*状态（不被驱动为高或低电平）。为了让引脚浮空，我们可以将驱动该引脚的Arduino引脚设置为输入。当作为输入时，I/O引脚被称为*高阻抗*状态，意味着该引脚对附着在其上的任何东西来说，就像是一个开路。
- en: To convert the 5V of the Arduino output pins to 3V, we place red LEDs between
    the Arduino pin and the SC1088\. These drop the 5V to about 3.3V, the same level
    as supplied to the chip. The LEDs will also glow very slightly when activated,
    letting you know when the project is in operation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Arduino输出针脚的5V转换为3V，我们将红色LED放在Arduino针脚和SC1088之间。这些LED将5V降到大约3.3V，与提供给芯片的电压相同。当激活时，LED会非常微弱地发光，告诉你项目正在运行。
- en: '**STEP 1: DISASSEMBLE THE RADIO**'
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 1：拆解收音机**'
- en: First, take the radio apart. How to do this will depend on how your radio is
    put together. For mine, I just undid two screws and the whole thing came apart.
    [Figure 10-7](ch10.html#ch10fig7)a shows the radio in its original state and 10-7b
    after removal of the case.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，把收音机拆开。具体怎么拆取决于你的收音机的组装方式。对于我的收音机，我只需要松开两个螺丝，整个收音机就拆开了。[图10-7](ch10.html#ch10fig7)a显示了收音机的原始状态，10-7b显示了拆下外壳后的状态。
- en: '![image](graphics/f10-07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-07.jpg)'
- en: 'Figure 10-7: taking the radio apart'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-7：拆解收音机
- en: Take the button cell battery out because we are going to use the Arduino to
    supply power to the radio.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 取出钮扣电池，因为我们将使用Arduino为收音机提供电源。
- en: '**STEP 2: IDENTIFY THE CONNECTION POINTS**'
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 2：识别连接点**'
- en: Now we need to identify the points where we need to attach wires and LED leads.
    [Figure 10-8](ch10.html#ch10fig8) shows the underside of the radio’s circuit board.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要识别需要连接电线和LED引线的点。[图10-8](ch10.html#ch10fig8)显示了收音机电路板的底面。
- en: Start by identifying the location of the Scan and Reset switches. The pins for
    these will form a rectangle. The pins are connected in pairs, so both of the solder
    points labeled *A* are actually connected, as are the pair of points labeled *B*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先识别扫描和复位开关的位置。它们的引脚会形成一个矩形。这些引脚是成对连接的，因此标记为*A*的焊接点实际上是连接的，标记为*B*的焊接点也是如此。
- en: '![image](graphics/f10-08.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-08.jpg)'
- en: 'Figure 10-8: The radio PCB'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-8：收音机PCB
- en: The A connections are for the Reset button. If you follow the track on the PCB,
    you will see that one of the A pins connects to pin 16 of the SC1088 (IC pins
    are numbered 1 to 16 counterclockwise, with a little dot on the IC package next
    to pin 1).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: A连接用于复位按钮。如果你沿着PCB上的轨迹追踪，你会看到A针脚其中一个连接到SC1088的第16脚（IC针脚编号从1到16，按逆时针方向排列，IC封装旁边的一个小点表示第1脚）。
- en: Following the track from B, you can see that one pin connects to pin 15 of the
    SC1088\. This is the connection that we will use to scan for the next station.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着B点的轨迹，你可以看到其中一个针脚连接到SC1088的第15脚。这就是我们用来扫描下一个电台的连接。
- en: If you’re finding it hard to see where the tracks run, use your multimeter set
    to continuity mode to identify the pins. Press one probe to the IC pin you want
    to find a connection for (15 or 16) and then try the different likely connections
    on the switches with the other probe until the buzzer on the multimeter sounds.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你很难看清楚轨迹的走向，可以使用万用表的通断模式来识别针脚。将一只探针放到你想找连接的IC针脚（15或16），然后用另一只探针试探开关上的不同可能连接点，直到万用表的蜂鸣器响起。
- en: Next, find the two connections needed to power the radio from the Arduino, which
    correspond to the battery holder connections on the PCB. The 3V batteries the
    radio takes have a negative central connection (C) and positive connections to
    the outside frame of the battery holder (D).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到需要将收音机从Arduino供电的两个连接点，它们对应于PCB上的电池座连接点。收音机使用的3V电池有一个负极连接（C）和一个连接到电池座外框的正极连接（D）。
- en: '**STEP 3: ATTACH THE HEADER STRIP**'
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 3：连接排针**'
- en: I have suggested a right-angle header strip here, because it’s easier to solder
    the wires to, but regular header pins work almost as well. Break off a length
    of 12 pins and attach them to the Arduino pins 3.3V through to A5 ([Figure 10-9](ch10.html#ch10fig9)).
    One pin will sit between the two header sockets, unconnected to anything.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里建议使用一个直角排针，因为它更容易焊接电线，但常规的排针也几乎同样有效。将12针长的排针断开并将其连接到Arduino的3.3V到A5针脚上（[图10-9](ch10.html#ch10fig9)）。其中一个针脚会位于两个排针插座之间，未连接任何东西。
- en: '![image](graphics/f10-09.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-09.jpg)'
- en: 'Figure 10-9: The Arduino header pins'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-9：Arduino排针
- en: '**STEP 4: LINK THE RADIO TO THE ARDUINO**'
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 4：将收音机连接到Arduino**'
- en: '[Figure 10-10](ch10.html#ch10fig10) shows the radio connected to the Arduino.
    Use short wires to connect the 3.3V Arduino pin to the positive battery connection,
    point D, that you identified earlier. Connect an Arduino GND connection (it doesn’t
    matter which one) to point C, the negative battery connection. Connect the positive
    (longer) lead of one LED to Arduino pin A0 and the negative lead of that same
    LED to point B. Do the same with another LED to Arduino pin A1 and point A on
    the radio PCB.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-10](ch10.html#ch10fig10)展示了收音机连接到Arduino。使用短线将3.3V的Arduino引脚连接到你之前标记的正极电池连接点D。将一个Arduino
    GND连接（哪个都可以）连接到点C，负极电池连接。将一个LED的正极（较长的引脚）连接到Arduino的A0引脚，负极连接到点B。另一个LED同样连接到Arduino的A1引脚和收音机PCB上的A点。'
- en: '![image](graphics/f10-10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-10.jpg)'
- en: 'Figure 10-10: The Arduino connected to the radio'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-10：Arduino与收音机连接
- en: '**STEP 5: CONNECT EVERYTHING TOGETHER**'
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 5：将所有组件连接在一起**'
- en: Finally, plug the powered speakers into the radio’s audio jack. You can test
    this using the headphones first. The radio uses headphones or an audio lead as
    an antenna, so you may get better results with a longer lead of a few feet than
    with a very short lead.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将供电的扬声器插入收音机的音频插孔。你可以先使用耳机进行测试。收音机使用耳机或音频线作为天线，所以使用几英尺长的音频线可能会比使用非常短的音频线得到更好的效果。
- en: '**SOFTWARE**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**软件**'
- en: All the source code for this book is available from *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*.
    See [Appendix C](app03.html#app03) for instructions on installing the Arduino
    sketch.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的所有源代码可从*[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*获得。请参阅[附录
    C](app03.html#app03)了解有关安装Arduino草图的说明。
- en: The Arduino sketch for this project is called *Project_18_Scanner*, and I’ll
    walk you through it now.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的Arduino草图名为*Project_18_Scanner*，我将带你逐步了解它。
- en: 'The sketch starts by defining several constants:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 草图开始时定义了几个常量：
- en: '[PRE0]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `scanPin` and `resetPin` constants define the two Arduino pins we’ll use,
    and `pulseLength` defines the length of the simulated button press. The scan buttons
    needs to be pressed for a full 1,000 milliseconds (1 second) for the radio to
    scan for the next station rather than simply move the frequency up a step, though
    this can vary depending on your radio.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`scanPin`和`resetPin`常量定义了我们将使用的两个Arduino引脚，`pulseLength`定义了模拟按钮按下的时间长度。扫描按钮需要按下完整的1,000毫秒（1秒），收音机才会扫描下一个电台，而不是仅仅将频率上移一步，尽管这可能会根据你的收音机有所不同。'
- en: The constant `period` tells the Arduino an amount of time, in milliseconds,
    to pause so you have time to register whether you are hearing a transmission or
    just white noise.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 常量`period`告诉Arduino一个时间段，单位是毫秒，用来暂停，以便你有时间判断是否听到了传输信号，还是只是白噪声。
- en: 'Next, we define a single global variable:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个全局变量：
- en: '[PRE1]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This variable, called `count`, is used to keep track of the number of scans
    to make before resetting to the start of the FM band again.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量，名为`count`，用于记录扫描次数，在重新开始扫描FM频段之前。
- en: The `setup` function initializes both pins as inputs (although as we shall see,
    this sketch is unusual in that it changes the pin mode of the pins after their
    first initialization).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup`函数将两个引脚初始化为输入（尽管正如我们将看到的，这个草图很特别，在第一次初始化引脚后会更改引脚模式）。'
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `loop` function is where we actually scan for frequencies:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop`函数是我们实际扫描频率的地方：'
- en: '[PRE3]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First of all, the loop delays by the time specified in `period`. The function
    then sends a pulse to the scan pin to begin scanning. When the pulse has finished,
    the pin is set back as an input.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，循环会按照`period`中指定的时间进行延迟。然后，函数向扫描引脚发送一个脉冲以开始扫描。当脉冲完成后，引脚会被重新设置为输入。
- en: The `count` variable then increments, and when it has reached the maximum specified
    in `numStations`, a pulse is sent to the reset pin to start scanning from the
    beginning of the FM band again. During testing, setting `numStations` to 5 will
    allow you to check whether the project is working and finding different stations.
    However, after a zombie apocalypse, the airwaves should be pretty empty, so you
    may want to reduce this number to just 1, as any signal you happen across is bound
    to be transmitted by survivors (or perhaps smart zombies). If you discover any
    automated transmissions you want to ignore, like a distress beacon from your former
    boss or the murmurings of zombies inexplicably learning the rudiments of human
    language, change `numStations` to a value of one more than the number of stations
    you want to ignore.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`count` 变量递增，当它达到 `numStations` 中指定的最大值时，会向重置引脚发送一个脉冲，从 FM 波段的起始点重新开始扫描。在测试期间，将
    `numStations` 设置为 5 可以检查项目是否正常工作并找到不同的电台。然而，在僵尸末日之后，无线电波应该会变得相当空旷，因此你可能想将此数字减少到
    1，因为你偶然遇到的任何信号必定是由幸存者（或许是聪明的僵尸）传送的。如果你发现任何你想忽略的自动化传输，例如你前老板发来的求救信号，或者僵尸们莫名其妙地学会了人类语言的低语声，可以将
    `numStations` 设置为比你想忽略的电台数量多一个的值。
- en: '**USING THE RADIO SCANNER**'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用无线电扫描仪**'
- en: 'When you first turn everything on, you should hear static. After five seconds
    or so, the scan LED will glow very dimly, and the radio will scan for its first
    station. After five more seconds, it will move on to the next station, and so
    on, until you identify a human friend. Remember: safety in numbers—not hordes.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次开启所有设备时，应该会听到杂音。大约五秒后，扫描 LED 会发出微弱的光，接着无线电会扫描第一个电台。再过五秒，它会继续扫描下一个电台，依此类推，直到你识别到一个人类朋友。记住：人多力量大——但不是人群。
- en: '**PROJECT 19: ARDUINO MORSE CODE BEACON**'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 19：ARDUINO 莫尔斯电码信标**'
- en: 'Morse code is a 19th-century invention that allows you to send messages using
    a series of long or short pulses of light or sound. Each letter of the alphabet
    is made up of dots and dashes, where a dot is a short pulse and a dash is a long
    pulse (three times longer than a dot). For example, the letter *z* is represented
    as this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 莫尔斯电码是19世纪的发明，它允许你通过一系列长短不一的光或声音脉冲发送信息。字母表中的每个字母由点和横线组成，其中点是短脉冲，横线是长脉冲（比点长三倍）。例如，字母
    *z* 的表示方式是：
- en: z
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: z
- en: --..
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: --..
- en: 'And the word *zombie* would be this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 词语 *zombie* 的莫尔斯电码表示是：
- en: zombie
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 僵尸
- en: --.. --- -- -...   .. .
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: --.. --- -- -...   .. .
- en: Morse code uses shorter sequences of dashes and dots for the more commonly used
    letters, so *e*, as the most common letter used in the English language, is just
    a single dot. If you are interested, you can search online for the complete Morse
    code, though the software in this project will translate your message into Morse
    code for you. Take a look at the code for a table of Morse codes.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 莫尔斯电码使用较短的短横线和点的组合来表示常用字母，因此，作为英语中最常用的字母，*e* 只由一个点表示。如果你有兴趣，可以在线搜索完整的莫尔斯电码，虽然本项目中的软件会自动将你的信息转换为莫尔斯电码。查看代码中莫尔斯电码表。
- en: 'This Arduino-based project uses 12V LED lamps, like those you used back in
    “[Project 3: LED Lighting](ch03.html#ch00lev1sec56)” on [page 49](ch03.html#page_49),
    to flash a message to any other survivors in visual range. It’s especially effective
    at night. [Figure 10-11](ch10.html#ch10fig11) shows the finished project.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基于 Arduino 的项目使用了12V LED 灯泡，就像你在 “[项目 3：LED 照明](ch03.html#ch00lev1sec56)”
    中使用的那样，用来向任何可视范围内的其他幸存者闪烁消息。特别是在夜间效果显著。[图 10-11](ch10.html#ch10fig11) 显示了完成的项目。
- en: '![image](graphics/f10-11.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-11.jpg)'
- en: 'Figure 10-11: A Morse code beacon'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-11：莫尔斯电码信标
- en: '**WHAT YOU WILL NEED**'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你将需要的材料**'
- en: 'To make this project, you will need the following parts:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作这个项目，你需要以下零件：
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **物品** | **备注** | **来源** |'
- en: '| --- | --- | --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
- en: '| ![image](graphics/square.jpg) Screwshield |  | Adafruit (196) |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) Screwshield |  | Adafruit (196) |'
- en: '| ![image](graphics/square.jpg) 1 kΩ resistor |  | Mouser (293-1k-RC) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 1 kΩ 电阻 |  | Mouser (293-1k-RC) |'
- en: '| ![image](graphics/square.jpg) MOSFET | FQP33N10 MOSFET | Adafruit (355) |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) MOSFET | FQP33N10 MOSFET | Adafruit (355) |'
- en: '| ![image](graphics/square.jpg) MR16 LED lamps | 12V 3W | Hardware store |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) MR16 LED 灯泡 | 12V 3W | 五金商店 |'
- en: '| ![image](graphics/square.jpg) MR16 lamp sockets | Sockets with trailing leads
    | Hardware store |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) MR16 灯座 | 带导线的插座 | 五金店 |'
- en: '| ![image](graphics/square.jpg) Terminal block | 2-way terminal block | Home
    Depot, Lowe’s, Menards |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 接线端子 | 2路接线端子 | 家得宝、Lowe''s、Menards |'
- en: '| ![image](graphics/square.jpg) 9V Arduino battery lead | DC power jack with
    flying leads or 12V cigarette lighter adapter | DC power supply |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 9V Arduino电池连接线 | 带飞线的直流电源插座或12V汽车点烟器适配器 |
    直流电源 |'
- en: '| ![image](graphics/square.jpg) Wire | Bell cable (or other cable) |  |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 电线 | 门铃电缆（或其他电缆） |  |'
- en: 'It is best to use a fresh Arduino and screwshield for this project, both because
    it will be situated away from your main setup and because your screwshield from
    previous projects is probably pretty full by now. This project will be powered
    by its own solar power supply and battery (refer to “[Project 1: Solar Recharging](ch02.html#ch00lev1sec33)”
    on [page 26](ch02.html#page_26)).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '最好使用一个全新的Arduino和螺丝屏来完成这个项目，既因为它将远离你的主设备，也因为你之前的螺丝屏可能已经用得差不多了。这个项目将由独立的太阳能电源和电池供电（请参见[“项目1：太阳能充电”（Project
    1: Solar Recharging）](ch02.html#ch00lev1sec33)，见[第26页](ch02.html#page_26)）。'
- en: 'I used three LED lights, but if you want more lamps, just add more in parallel.
    The transistor used to switch the lights is capable of switching up to 20W of
    lighting but only with a heatsink, so your combined wattage should be kept below
    10W. If you made “[Project 3: LED Lighting](ch03.html#ch00lev1sec56)” on [page
    49](ch03.html#page_49), I would just use the same LEDs.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '我使用了三个LED灯，但如果你想要更多的灯具，只需并联更多的灯。用于开关灯具的晶体管能承载最高20W的照明功率，但必须加装散热器，因此你的总功率应保持在10W以下。如果你完成了[“项目3：LED照明”（Project
    3: LED Lighting）](ch03.html#ch00lev1sec56)，见[第49页](ch03.html#page_49)，我建议直接使用相同的LED灯。'
- en: '**CONSTRUCTION**'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: The layout for the screwshield and wiring schematic are shown in [Figure 10-12](ch10.html#ch10fig12).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 螺丝屏和接线图示见[图10-12](ch10.html#ch10fig12)。
- en: '![image](graphics/f10-12.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-12.jpg)'
- en: 'Figure 10-12: Screwshield layout and wiring schematic for the Morse code beacon'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-12：摩尔斯电码信标的螺丝屏布局和接线图
- en: '**STEP 1: ASSEMBLE THE SCREWSHIELD**'
  id: totrans-166
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 1：组装螺丝屏**'
- en: Assemble the screwshield following the instructions in “[Assembling a Screwshield](app03.html#ch00lev1sec254)”
    on [page 259](app03.html#page_259).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[“组装螺丝屏”（Assembling a Screwshield）](app03.html#ch00lev1sec254)中提供的说明，组装螺丝屏，见[第259页](app03.html#page_259)。
- en: '**STEP 2: SOLDER THE COMPONENTS ONTO THE SCREWSHIELD**'
  id: totrans-168
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 2：将元件焊接到螺丝屏上**'
- en: 'You only need to solder two components for this project: a resistor and metal
    oxide semiconductor field effect transistor (MOSFET). MOSFETs are great for switching
    fairly high-power loads quickly.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目只需焊接两个元件：一个电阻和金属氧化物半导体场效应晶体管（MOSFET）。MOSFET非常适合快速开关较大功率负载。
- en: Solder the resistor and transistor in place according to the circuit schematic.
    When soldering the transistor, make sure you place it so that the metal tab faces
    to the right ([Figure 10-12](ch10.html#ch10fig12)). When the components are soldered
    into place, the assembly should like [Figure 10-13](ch10.html#ch10fig13).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 根据电路图焊接电阻和晶体管。在焊接晶体管时，确保其金属标签朝右（见[图10-12](ch10.html#ch10fig12)）。当所有元件焊接到位时，组装件应如下图所示[图10-13](ch10.html#ch10fig13)。
- en: '![image](graphics/f10-13.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-13.jpg)'
- en: 'Figure 10-13: The top of the screwshield'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-13：螺丝屏的顶部
- en: '**STEP 3: WIRE THE UNDERSIDE OF THE SCREWSHIELD**'
  id: totrans-173
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 3：接线螺丝屏的底部**'
- en: Once the components are secured in place, use their excess leads to make the
    connections on the underside ([Figure 10-14](ch10.html#ch10fig14)). Before soldering
    the resistor lead that connects to pin 13 on the Arduino, add some insulation
    to avoid causing short circuits with the 5V and GND tracks it crosses over.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦元件固定好后，使用它们的多余导线在底部进行连接（见[图10-14](ch10.html#ch10fig14)）。在焊接连接到Arduino第13号引脚的电阻导线之前，添加一些绝缘层，以防与5V和GND轨道发生短路。
- en: '![image](graphics/f10-14.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-14.jpg)'
- en: 'Figure 10-14: The underside of the screwshield'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-14：螺丝屏的底部
- en: '**STEP 4: CONNECT THE LAMPS**'
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 4：连接灯具**'
- en: If you want to keep this simple, you can just use a single LED lamp. For a wider
    range of visibility, however, connect a few LED lamps and point them in different
    directions ([Figure 10-15](ch10.html#ch10fig15)).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想简化，可以只使用一个LED灯。但如果你需要更广的视距，可以连接几个LED灯并将它们指向不同的方向（见[图10-15](ch10.html#ch10fig15)）。
- en: '![image](graphics/f10-15.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-15.jpg)'
- en: 'Figure 10-15: The lamp assembly'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-15：灯具组件
- en: In [Figure 10-15](ch10.html#ch10fig15), I’ve fixed three lamp sockets to a bit
    of wood and connected all three 12V LED lamps to the terminal block. Lamps of
    this type usually include a circuit that allows the wires to be connected any
    way around, but if your modules have a polarity marked on them with a + and –,
    you need to make sure all the + connections are connected to one terminal of the
    terminal block and the – connections go to the other. The lamp holders will have
    holes allowing them to be attached to the wood with screws.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 10-15](ch10.html#ch10fig15)中，我将三个灯座固定在一块木板上，并将三盏 12V LED 灯连接到接线端子块。此类灯通常包括一个电路，允许电线以任意方式连接，但如果你的模块上标有极性符号（+
    和 –），你需要确保所有的 + 连接都连接到接线端子块的一个端子，– 连接连接到另一个端子。灯座上会有孔，可以用螺丝将它们固定在木板上。
- en: '**STEP 5: FINAL WIRING**'
  id: totrans-182
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 5：最终接线**'
- en: 'Use some bell cable or other wire to connect the lamp assembly to the *X* and
    *V[in]* terminals on the screwshield. Stranded wire is best, as it’s less liable
    to break. Make this wire as long as you need it (but above 50 ft, or 15 m, there
    might be some reduction in brightness): you may want to site the lamp assembly
    high up outside, to make it easier for people to see your message, while leaving
    the Arduino in the safety of your bunker. Remember to waterproof the lamp assembly—sealing
    it in a transparent plastic bag will do the trick.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一些铃线或其他电缆将灯具组件连接到螺丝盾上的 *X* 和 *V[in]* 端子。最好使用多股电线，因为它不容易断裂。将这根电线做得足够长（但超过 50
    英尺或 15 米时，亮度可能会有所降低）：你可能希望将灯具组件安装在较高的地方，这样人们可以更容易地看到你的信息，而将 Arduino 保持在安全的地方。记得将灯具组件防水——将其密封在透明塑料袋中即可。
- en: To connect power to the Arduino, use either a cigarette lighter adapter or a
    custom lead using alligator clips and a barrel jack plug with flying leads to
    connect the Arduino to a 12V solar power supply or battery. Note that this project
    requires 12V for the lamps, so you cannot use a 5V USB lead to power the Arduino.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Arduino 供电，可以使用香烟点烟器适配器或通过鳄鱼夹和带飞线的桶形插头自定义导线，将 Arduino 连接到 12V 太阳能电源或电池。请注意，这个项目需要
    12V 为灯泡供电，因此无法使用 5V USB 导线为 Arduino 提供电力。
- en: '**SOFTWARE**'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**软件**'
- en: All the source code for this book is available via *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*.
    See [Appendix C](app03.html#app03) for instructions on installing the Arduino
    sketch. The Arduino sketch for this project is called *Project_19_Morse_Beacon*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的所有源代码都可以通过 *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*
    获取。请参见[附录 C](app03.html#app03)，了解安装 Arduino 草图的说明。这个项目的 Arduino 草图名为 *Project_19_Morse_Beacon*。
- en: The sketch uses the Ardiuno’s built-in *EEPROM* library. The Morse code message
    is stored in EEPROM memory every time a change is made, meaning that the beacon
    can remember the message even if power to the Arduino is interrupted. The sketch
    also makes use of a library from the Arduino community called *EEPROMAnything*,
    which makes saving to and reading from EEPROM easier. The code for EEPROMAnything
    is included in the download for this project, so there is nothing to download
    separately.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图使用了 Arduino 内建的 *EEPROM* 库。每次更改时，摩尔斯代码消息都会存储在 EEPROM 内存中，这意味着即使 Arduino 的电源中断，信标仍然能够记住消息。该草图还使用了
    Arduino 社区提供的一个库 *EEPROMAnything*，它简化了对 EEPROM 的存取操作。EEPROMAnything 的代码已包含在本项目的下载包中，因此无需单独下载。
- en: 'First, we load both the official Arduino EEPROM library and EEPROMAnything:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们加载官方的 Arduino EEPROM 库和 EEPROMAnything 库：
- en: '[PRE4]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A number of constants are used to control the project:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了多个常量来控制项目：
- en: '[PRE5]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The pin that controls the LEDs is specified in `ledPin`. The constant `dotDelay`
    defines in milliseconds the duration of a dot flash. Dashes are always three times
    the duration of a dot.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 LED 的引脚在 `ledPin` 中指定。常量 `dotDelay` 以毫秒为单位定义了点闪烁的持续时间。破折号的持续时间总是点的三倍。
- en: The constant `gapBetweenRepeats` specifies in seconds the time that will elapse
    between each repetition of the message, and `maxMessageLen` specifies the maximum
    length, in letters rather than dots and dashes, of the message. A maximum size
    is specified because in Arduino code, you have to declare the size of arrays.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 常量 `gapBetweenRepeats` 以秒为单位指定每次重复消息之间的时间间隔，`maxMessageLen` 指定消息的最大长度（按字母计，而不是点和破折号）。设置最大大小是因为在
    Arduino 代码中，你必须声明数组的大小。
- en: 'Two global variables are used:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了两个全局变量：
- en: '[PRE6]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `message` variable will contain the text of the message to be flashed, and
    `lastFlashTime` keeps track of when the message was last flashed, to allow a break
    between the repeats.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`message`变量将包含要闪烁的消息文本，而`lastFlashTime`则记录上次闪烁消息的时间，以便在重复之间有时间间隔。'
- en: Two global `char` arrays are used to contain the dot and dash sequences for
    Morse code. The program will only flash characters that it knows how to send,
    that is letters, digits, or a space character. All other characters in the message
    are ignored.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个全局`char`数组来存储摩尔斯电码的点和划线序列。程序只会闪烁它知道如何发送的字符，即字母、数字或空格字符。消息中的所有其他字符都会被忽略。
- en: '[PRE7]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `setup` function sets the `ledPin` as an output and then starts serial
    communication at `Serial.begin`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup`函数将`ledPin`设置为输出，然后在`Serial.begin`中启动串行通信：'
- en: '[PRE8]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Serial communication is used to set a new message, either using the serial monitor
    of the Arduino IDE or, as you will see in “[Using the Morse Beacon](ch10.html#ch00lev1sec205)”
    on [page 205](ch10.html#page_205), a terminal program running on a Raspberry Pi.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用串行通信来设置新消息，可以通过Arduino IDE的串行监视器，或者如你在“[使用摩尔斯信标](ch10.html#ch00lev1sec205)”中看到的那样，在[第205页](ch10.html#page_205)上，通过在树莓派上运行的终端程序进行设置。
- en: Every time the message is changed, it is saved in EEPROM, so during the setup
    process, the sketch reads any stored message from EEPROM. If no message has been
    set, the `if` statement in `setup` sets the default message to “SOS.” Finally,
    at `flashmessage`, the setup function flashes the message for the first time.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 每次消息更改时，都会将其保存在EEPROM中，因此在设置过程中，草图会从EEPROM中读取任何存储的消息。如果没有设置消息，`setup`中的`if`语句会将默认消息设置为“SOS”。最后，在`flashmessage`中，设置函数会首次闪烁该消息。
- en: 'The `loop` function first checks whether a new message has been sent over the
    serial connection:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop`函数首先检查是否有新消息通过串行连接发送过来：'
- en: '[PRE9]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Any new message is read into the `message` character array until the newline
    character (`\n`) is read. The null character `’\0’` is added to the end of the
    message. This is the Arduino’s way of indicating the end of a string of characters.
    Once the whole message has been read through, it is saved into EEPROM (`EEPROM_writeAnything`),
    and then the new message begins flashing immediately.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 任何新消息都会读取到`message`字符数组中，直到读取到换行符（`\n`）。然后在消息末尾添加空字符`’\0’`，这是Arduino指示字符字符串结束的方式。一旦整个消息读取完毕，它将被保存到EEPROM中（`EEPROM_writeAnything`），然后新消息立即开始闪烁。
- en: The remainder of the `loop` function checks whether enough time has passed before
    it can repeat the message. This could be done more simply using `delay`, but we
    would be unable to interrupt the loop if a new message arrived during the `delay`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop`函数的其余部分检查是否已经过了足够的时间，允许重复发送消息。虽然可以通过`delay`更简单地实现，但如果在`delay`期间有新消息到达，我们将无法中断循环。'
- en: The `flashMessage` function is the most complex function in the sketch.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`flashMessage`函数是草图中最复杂的函数。'
- en: '[PRE10]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `flashMessage` function starts by echoing the message it is about to send
    to reassure you that it is sending what you want it to. It then loops over every
    character in the message. Before each character, it uses `Serial.available` to
    check for a new message. If a new message has come in, the function stops sending
    its message in order to receive the new message from your computer or Raspberry
    Pi; then it begins sending the new message instead.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`flashMessage`函数首先回显它将要发送的消息，以确保它发送的是你希望发送的内容。然后，它循环遍历消息中的每个字符。在每个字符之前，它使用`Serial.available`检查是否有新消息。如果有新消息到达，函数会停止发送当前消息，并开始接收来自计算机或树莓派的新消息；然后它将开始发送新消息。'
- en: The `flashMessage` function determines whether the character is an uppercase
    letter, a lowercase letter, a number, or the space character and then takes the
    appropriate action.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`flashMessage`函数确定字符是大写字母、小写字母、数字还是空格字符，然后采取相应的行动。'
- en: If the character is a lowercase letter, the index position of the sequence of
    dots and dashes held in the letters array is provided as a parameter to the `flashSequence`
    function, which then flashes those dots and dashes. The other options are handled
    in the same way.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符是小写字母，则将字母数组中点和划线序列的索引位置作为参数传递给`flashSequence`函数，后者会闪烁这些点和划线。其他选项以相同的方式处理。
- en: Finally, when the whole message has been sent, the `lastFlashTime` variable
    is set to the current time so the loop function can work out when it is time to
    start flashing the message again.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当整个消息发送完毕后，`lastFlashTime`变量将设置为当前时间，以便循环函数可以计算出何时开始重新闪烁消息。
- en: 'The work of flashing the sequence of dots and dashes for a particular character
    is handled by the `flashSequence` function:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁特定字符的点和划的工作由`flashSequence`函数处理：
- en: '[PRE11]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This loops over each dot or dash, calling `flashDotOrDash`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程会循环遍历每个点或划，调用`flashDotOrDash`：
- en: '[PRE12]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `flashDotOrDash` function uses the appropriate delay period to flash a dot
    or dash.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`flashDotOrDash`函数使用适当的延迟时间来闪烁一个点或一个划。'
- en: '**USING THE MORSE BEACON**'
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用摩尔斯信标**'
- en: Upload the sketch to your Arduino and power up the project. The default message
    should start to flash. If it doesn’t, go back and check over all your wiring.
    To change the message, attach your Arduino to your computer, open the serial monitor
    on the Arduino IDE, and type in a new message ([Figure 10-16](ch10.html#ch10fig16)).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图到Arduino并启动项目。默认消息应该开始闪烁。如果没有，检查所有接线。要更改消息，请将Arduino连接到你的计算机，打开Arduino IDE的串口监视器，并输入新消息（[图
    10-16](ch10.html#ch10fig16)）。
- en: '![image](graphics/f10-16.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-16.jpg)'
- en: 'Figure 10-16: Changing the message using the serial monitor'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-16：使用串口监视器更改消息
- en: Here, the current message, “There are survivors here,” should change to “Watch
    out zombies about” when the Send button is pressed.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当按下发送按钮时，当前的消息“这里有幸存者”应该改为“当心僵尸在附近”。
- en: 'If you prefer to use your Raspberry Pi to change the message, install the terminal
    program `screen` (your Raspberry Pi will need an Internet connection):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用树莓派来更改消息，安装终端程序`screen`（你的树莓派需要连接互联网）：
- en: $ sudo apt-get install screen
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-get install screen
- en: 'Once `screen` is installed, connect the USB lead between your Raspberry Pi
    and the Arduino and then enter the following command on your Raspberry Pi:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`screen`安装完成，连接树莓派和Arduino之间的USB线，然后在树莓派上输入以下命令：
- en: $ screen /dev/ttyACM0 9600
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: $ screen /dev/ttyACM0 9600
- en: At this point, anything you type should be sent to the Arduino, and any messages
    coming from the Arduino should be displayed. [Figure 10-17](ch10.html#ch10fig17)
    shows the message being changed using `screen`. Note that the message will not
    appear on the screen as you type it but only after you press `ENTER`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你输入的任何内容都应该发送到Arduino，来自Arduino的任何消息也应显示出来。[图 10-17](ch10.html#ch10fig17)展示了使用`screen`更改消息。注意，消息不会在你输入时立即显示，而是在你按下`ENTER`后显示。
- en: '![image](graphics/f10-17.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-17.jpg)'
- en: 'Figure 10-17: Changing the message using the screen command'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-17：使用screen命令更改消息
- en: Once the message has been changed, the Arduino will remember it, so you can
    unplug the Arduino to get ready for installation. Unplugging the Arduino will
    quit the `screen` command by closing the serial connection to the Raspberry Pi.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦消息被更改，Arduino会记住它，因此你可以拔掉Arduino，为安装做准备。拔掉Arduino会通过关闭与树莓派的串口连接来退出`screen`命令。
- en: Now just attach your project to your desired location, preferably one with 360-degree
    visibility, and start blinking your message. [Figure 10-18](ch10.html#ch10fig18)
    shows the project fixed to my zombie-proof shed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需将项目固定在你希望的位置，最好是一个可以看到360度视野的地方，然后开始闪烁你的消息。[图 10-18](ch10.html#ch10fig18)显示了我将项目固定在抗僵尸小屋上的样子。
- en: '![image](graphics/f10-18.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f10-18.jpg)'
- en: 'Figure 10-18: Installing the Morse beacon'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-18：安装摩尔斯信标
- en: 'If you want to conserve power, only use your beacon at night, when it is most
    likely to be spotted. But beware: popular culture gives us mixed messages on whether
    zombies are attracted to flashing lights. You may want to reinforce your stronghold
    before sending out messages, just in case.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想节省电力，只在晚上使用信标，因为那时最可能被发现。但要小心：流行文化给我们关于僵尸是否会被闪烁的光吸引的信息不一。在发送消息之前，你可能想要加固你的据点，以防万一。
- en: In [Chapter 11](ch11.html#ch11), we will continue with the theme of communication.
    For the final project of this book, we’ll build a pair of haptic communication
    devices that will allow you and a fellow survivor to communicate silently, without
    alerting zombies to your presence.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.html#ch11)中，我们将继续探讨通信的主题。作为本书的最终项目，我们将构建一对触觉通信设备，允许你和另一位幸存者在不引起僵尸注意的情况下进行静默交流。
