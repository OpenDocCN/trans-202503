- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binary Triage
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In the last chapter, I introduced static analysis tools and techniques and applied
    them to various nonbinary file formats, such as distribution mediums and scripts.
    In this chapter, we’ll continue our discussion of static analysis by focusing
    on Apple’s native executable file format, the venerable Mach object file format
    (Mach-O). As the majority of Mac malware is compiled into Mach-Os, all Mac malware
    analysts should understand the structure of these binaries, as at a minimum, this
    will allow you to differentiate the benign from the malicious.
  prefs: []
  type: TYPE_NORMAL
- en: The Mach-O File Format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like with all binary file formats, analyzing and understanding Mach-O files
    requires specific analysis tools, often culminating in the use of a binary disassembler.
    Executable binary file formats are rather complex, and the Mach-O is no exception.
    The good news is that you’ll need only an elementary understanding of the format,
    as well as a few related concepts, for malware analysis purposes. If you’re interested
    in gaining an even more exhaustive understanding of the format, see either Apple’s
    detailed developer documentation and SDK files or the write-up “Parsing Mach-O
    Files.”^([1](#c05-endnote-1))
  prefs: []
  type: TYPE_NORMAL
- en: 'At a basic level, a Mach-O file consists of three sequential parts: a header,
    load commands, and data ([Figure 5-1](#figure5-1)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Mach-O header sits at the top, with load commands in the middle and data
    at the bottom.](image_fi/501942c05/f05001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5-1: Layout of a Mach-O binary'
  prefs: []
  type: TYPE_NORMAL
- en: The header identifies the file as a Mach-O format and contains other metadata
    about the binary, while the load commands contain information used by the dynamic
    loader to load the binary into memory. These are followed by the binary’s actual
    instructions, variables, and other data. We’ll cover each of these parts in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mach-O files start with a Mach-O *header*, which identifies the file as a Mach-O
    and specifies the target CPU architecture and type of Mach-O binary. The header
    also contains the number and size of the load commands.
  prefs: []
  type: TYPE_NORMAL
- en: A Mach-O header is a structure of type `mach_header_64`, or for 32-bit binaries,
    `mach_header`, defined in Apple’s developer SDK file, *mach-o/loader.h* ([Listing
    5-1](#listing5-1)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-1: The `mach_header_64` structure'
  prefs: []
  type: TYPE_NORMAL
- en: Though Apple’s comments provide a succinct description of each member in the
    `mach_header_64` structure let’s take a closer at the ones relevant to malware
    analysis. First is the `magic` member, which contains a 32-bit value that identifies
    the file as a Mach-O binary. For 64-bit binaries, this will be set to the ``MH_MAGIC_64
    constant (defined in *loader.h*), containing the hex value `0xfeedfacf`. For older
    32-bit binaries, Apple’s SDK files specify other values for this magic constant,
    but you’re unlikely to encounter these when analyzing modern Mac malware.``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
