- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Binary Triage
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制筛查
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In the last chapter, I introduced static analysis tools and techniques and applied
    them to various nonbinary file formats, such as distribution mediums and scripts.
    In this chapter, we’ll continue our discussion of static analysis by focusing
    on Apple’s native executable file format, the venerable Mach object file format
    (Mach-O). As the majority of Mac malware is compiled into Mach-Os, all Mac malware
    analysts should understand the structure of these binaries, as at a minimum, this
    will allow you to differentiate the benign from the malicious.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我介绍了静态分析工具和技术，并将它们应用于各种非二进制文件格式，如分发介质和脚本。在本章中，我们将继续讨论静态分析，重点关注苹果的本地可执行文件格式——久负盛名的
    Mach 对象文件格式（Mach-O）。由于大多数 Mac 恶意软件都被编译成 Mach-O 格式，因此所有 Mac 恶意软件分析师都应了解这些二进制文件的结构，因为至少这将帮助你区分良性和恶意文件。
- en: The Mach-O File Format
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mach-O 文件格式
- en: Like with all binary file formats, analyzing and understanding Mach-O files
    requires specific analysis tools, often culminating in the use of a binary disassembler.
    Executable binary file formats are rather complex, and the Mach-O is no exception.
    The good news is that you’ll need only an elementary understanding of the format,
    as well as a few related concepts, for malware analysis purposes. If you’re interested
    in gaining an even more exhaustive understanding of the format, see either Apple’s
    detailed developer documentation and SDK files or the write-up “Parsing Mach-O
    Files.”^([1](#c05-endnote-1))
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有二进制文件格式一样，分析和理解 Mach-O 文件需要特定的分析工具，通常最终需要使用二进制反汇编器。可执行二进制文件格式相当复杂，而 Mach-O
    也不例外。好消息是，你只需对该格式有基本了解，以及一些相关概念，就足够用于恶意软件分析。如果你有兴趣深入了解该格式，可以参考苹果的详细开发者文档和 SDK
    文件，或者阅读“解析 Mach-O 文件”的文章。^([1](#c05-endnote-1))
- en: 'At a basic level, a Mach-O file consists of three sequential parts: a header,
    load commands, and data ([Figure 5-1](#figure5-1)).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从基本层面来看，Mach-O 文件由三个连续的部分组成：头部、加载命令和数据（[图 5-1](#figure5-1)）。
- en: '![The Mach-O header sits at the top, with load commands in the middle and data
    at the bottom.](image_fi/501942c05/f05001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Mach-O 头部位于顶部，加载命令位于中间，数据位于底部。](image_fi/501942c05/f05001.png)'
- en: 'Figure 5-1: Layout of a Mach-O binary'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：Mach-O 二进制文件布局
- en: The header identifies the file as a Mach-O format and contains other metadata
    about the binary, while the load commands contain information used by the dynamic
    loader to load the binary into memory. These are followed by the binary’s actual
    instructions, variables, and other data. We’ll cover each of these parts in the
    following sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 头部将文件标识为 Mach-O 格式，并包含有关二进制文件的其他元数据，而加载命令包含动态加载器用于将二进制文件加载到内存中的信息。紧随其后的是二进制文件的实际指令、变量和其他数据。我们将在以下章节中详细介绍这些部分。
- en: The Header
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头部
- en: Mach-O files start with a Mach-O *header*, which identifies the file as a Mach-O
    and specifies the target CPU architecture and type of Mach-O binary. The header
    also contains the number and size of the load commands.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Mach-O 文件以 Mach-O *头部* 开头，该头部将文件标识为 Mach-O 格式，并指定目标 CPU 架构和 Mach-O 二进制文件类型。头部还包含加载命令的数量和大小。
- en: A Mach-O header is a structure of type `mach_header_64`, or for 32-bit binaries,
    `mach_header`, defined in Apple’s developer SDK file, *mach-o/loader.h* ([Listing
    5-1](#listing5-1)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Mach-O 头部是 `mach_header_64` 类型的结构体，或者对于 32 位二进制文件，使用 `mach_header`，它在苹果的开发者
    SDK 文件中定义，*mach-o/loader.h*（[Listing 5-1](#listing5-1)）。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: The `mach_header_64` structure'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 5-1：`mach_header_64` 结构体
- en: Though Apple’s comments provide a succinct description of each member in the
    `mach_header_64` structure let’s take a closer at the ones relevant to malware
    analysis. First is the `magic` member, which contains a 32-bit value that identifies
    the file as a Mach-O binary. For 64-bit binaries, this will be set to the ``MH_MAGIC_64
    constant (defined in *loader.h*), containing the hex value `0xfeedfacf`. For older
    32-bit binaries, Apple’s SDK files specify other values for this magic constant,
    but you’re unlikely to encounter these when analyzing modern Mac malware.``
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然苹果的注释简洁地描述了 `mach_header_64` 结构体中的每个成员，但让我们更仔细地看看与恶意软件分析相关的部分。首先是 `magic`
    成员，它包含一个 32 位值，用于标识文件为 Mach-O 二进制文件。对于 64 位二进制文件，该值将设置为 `MH_MAGIC_64` 常量（在 *loader.h*
    中定义），其十六进制值为 `0xfeedfacf`。对于旧的 32 位二进制文件，苹果的 SDK 文件指定了其他值作为这个魔术常量，但在分析现代 Mac 恶意软件时，你不太可能遇到这些值。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
