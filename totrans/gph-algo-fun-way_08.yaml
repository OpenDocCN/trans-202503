- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SOLVING
    PUZZLES</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">解谜</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: The uses of graph search algorithms extend beyond searching paths between physical
    places or virtual links between items. They also apply to a wide range of more
    abstract problems, such as solving puzzles or devising strategies in games.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图搜索算法的应用不仅限于搜索物理位置之间的路径或物品之间的虚拟链接。它们还广泛应用于更多抽象的问题，比如解谜或在游戏中制定策略。
- en: Many puzzles can be represented by a set of discrete states that capture the
    different configurations of the puzzle. *Solving the puzzle* might then consist
    of using a sequence of steps to transition from the initial state to some predefined
    goal state. This could correspond to moving discs on a Tower of Hanoi puzzle,
    moving people in a river-crossing puzzle, or rearranging tiles in a slider puzzle.
    In this chapter, we transform each of these puzzles into graph search problems
    by modeling the states of the puzzle as nodes and the transitions between them
    as edges. We then solve them by searching for a path to the puzzle’s target state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 许多谜题可以通过一组离散的状态来表示，这些状态捕捉了谜题的不同配置。*解决谜题*可能需要通过一系列步骤，从初始状态过渡到某个预定义的目标状态。这可能对应于在河内塔谜题中移动圆盘，在过河谜题中移动人，或在滑块谜题中重新排列拼图块。在本章中，我们通过将谜题的状态建模为节点，将它们之间的过渡建模为边，来将这些谜题转化为图搜索问题。然后，我们通过搜索到达谜题目标状态的路径来解决它们。
- en: '### <samp class="SANS_Futura_Std_Bold_B_11">State Spaces and Graphs</samp>'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_B_11">状态空间与图</samp>'
- en: This section describes the state space representations and graph representations
    of our three classic puzzles.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了我们三个经典谜题的状态空间表示和图表示。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Tower of Hanoi</samp>
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">河内塔</samp>
- en: The Tower of Hanoi puzzle consists of three pegs, along with discs of different
    diameters that can be stacked on the pegs. Initially, all the discs are on the
    leftmost peg and are stacked in order of decreasing diameter, as shown for a three-disc
    version in [Figure 6-1](#fig6-1), where the widest disc is on the bottom of the
    pile and the smallest is on top. The goal of the puzzle is to move the discs one
    at a time such that they all end up on the rightmost peg in the same order.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 河内塔谜题由三个柱子和不同直径的圆盘组成，这些圆盘可以堆叠在柱子上。最初，所有圆盘都在最左边的柱子上，并按直径从大到小堆叠，如[图 6-1](#fig6-1)所示，其中最宽的圆盘在底部，最小的圆盘在顶部。谜题的目标是一次移动一个圆盘，使所有圆盘最终都按相同的顺序堆放到最右边的柱子上。
- en: '![A board with three pegs. The first peg has three discs, stacked in order
    of decreasing diameter. The other two pegs are empty.](../images/f06001.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![一个有三个柱子的棋盘。第一个柱子上堆着三个圆盘，按直径从大到小排列。其他两个柱子是空的。](../images/f06001.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-1: The initial state
    of the Tower of Hanoi puzzle</samp>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-1：河内塔谜题的初始状态</samp>
- en: Two constraints make this puzzle interesting. First, you can move only the topmost
    disc of each stack. Second, at every step, each stack must maintain the sorted
    ordering. You are never allowed to place a wider disc on top of a smaller one.
    For example, [Figure 6-2](#fig6-2) shows a move from the initial state to the
    valid second state.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个约束条件使得这个谜题变得有趣。首先，你只能移动每个堆叠中最上面的圆盘。第二，每一步操作后，每个堆叠必须保持排序。你永远不能将一个较大的圆盘放在较小的圆盘上面。例如，[图
    6-2](#fig6-2)展示了从初始状态到有效第二状态的一个移动。
- en: '![A board with three pegs. The first peg has two discs, stacked in order of
    decreasing diameter. The second peg has the smallest disc.](../images/f06002.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![一个有三个柱子的棋盘。第一个柱子上堆着两个圆盘，按直径从大到小排列。第二个柱子上有最小的圆盘。](../images/f06002.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-2: The Tower of Hanoi
    puzzle after moving one disc</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-2：移动一个圆盘后的河内塔谜题</samp>
- en: We can represent the different configurations of discs as *states* in a variety
    of ways. To illustrate this, let’s consider a set of three vectors that track
    the ordered set of discs on each peg, where the combined vector set represents
    the state of the puzzle. We denote states within angle brackets. The state of
    the puzzle in [Figure 6-1](#fig6-1) is represented with the vectors <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>,
    while the state of [Figure 6-2](#fig6-2) is represented as <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2],[1],[]></samp>.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过多种方式将不同的圆盘配置表示为*状态*。为了说明这一点，假设有一组三个向量，用来跟踪每个柱子上的圆盘顺序，其中组合的向量集代表了谜题的状态。我们用尖括号表示状态。[图6-1](#fig6-1)中的状态表示为向量<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>，而[图6-2](#fig6-2)中的状态表示为<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3,2],[1],[]></samp>。
- en: We might think of these states as enumerating the universe of possibilities
    for the puzzle. The current arrangement of discs might be <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3],[],[2,1]></samp>.
    However, if we had made different moves, we might have the arrangement <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3],[1],[2]></samp>.
    We can sit back and envision the wide range of possible options, how to move between
    them, and the impact of future moves.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把这些状态看作是在枚举谜题的所有可能性。当前的圆盘排列可能是<samp class="SANS_TheSansMonoCd_W5Regular_11"><[3],[],[2,1]></samp>。然而，如果我们做出了不同的操作，可能会得到排列<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3],[1],[2]></samp>。我们可以放松心情，设想各种可能的选择，如何在它们之间移动，以及未来操作的影响。
- en: With the ability to enumerate the puzzle’s states as vectors, we can transform
    the problem into an undirected graph by using a single node for each state and
    edges for valid actions. This is illustrated in [Figure 6-3](#fig6-3) for the
    Tower of Hanoi with three discs, where the nodes are potential destinations along
    our problem-solving journey. One node represents our starting state of <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>,
    and one represents our target state of <samp class="SANS_TheSansMonoCd_W5Regular_11"><[],[],[3,2,1]></samp>,
    with a range of other states in between.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将谜题的状态表示为向量，我们可以将问题转化为一个无向图，每个状态用一个节点表示，有效的操作用边表示。这在[图6-3](#fig6-3)中进行了说明，该图表示了三个圆盘的汉诺塔，其中的节点是我们解决问题过程中的潜在目标状态。一个节点代表我们起始的状态<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>，另一个节点代表我们的目标状态<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[],[],[3,2,1]></samp>，中间还有许多其他状态。
- en: '![Each node is labeled with three arrays. The leftmost node has the array [3,
    2, 1] and two empty arrays. This node has two neighbors to the right. The top
    node is labeled with the arrays [3, 2], [1], and an empty array. The bottom node
    is labeled with the array [3, 2], an empty array, and the array [1].](../images/f06003.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![每个节点都标有三个数组。最左边的节点标有数组[3, 2, 1]和两个空数组。这个节点有两个右侧邻居。顶部节点标有数组[3, 2]、[1]和一个空数组。底部节点标有数组[3,
    2]、一个空数组和数组[1]。](../images/f06003.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-3: Part of the graph
    representation of the Tower of Hanoi puzzle</samp>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-3：汉诺塔谜题的图形表示部分</samp>
- en: Since we can move from state <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>
    to state <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2],[1],[]></samp> by
    moving the smallest disc from the first to the second peg, the graph contains
    an undirected edge between those nodes. In contrast, we cannot move from state
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp> to state
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><[2,1],[3],[]></samp> by moving
    a single disc, so there is no edge between those states.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以通过将最小的圆盘从第一个柱子移动到第二个柱子，从状态<samp class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>转移到状态<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3,2],[1],[]></samp>，因此图中在这两个节点之间有一条无向边。相比之下，我们不能通过移动单个圆盘从状态<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><[3,2,1],[],[]></samp>转移到状态<samp class="SANS_TheSansMonoCd_W5Regular_11"><[2,1],[3],[]></samp>，因此这些状态之间没有边。
- en: Until now, example graph nodes in this book have mostly represented concrete
    items like physical locations, computer nodes, web pages, tasks, or people. Now,
    however, our nodes represent potential configurations of the world. One immediate
    consequence of this is an explosion in the number of nodes. There are many more
    potential configurations of discs in the Tower of Hanoi than there are physical
    discs or pegs in the puzzle. This means we may encounter much larger graphs than
    before and the performance of the algorithms becomes ever more important.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，本书中的示例图节点大多表示具体的项目，如物理位置、计算机节点、网页、任务或人物。然而，现在我们的节点表示的是世界的潜在配置。这带来的一个直接后果是节点数量的爆炸。汉诺塔中盘子的潜在配置比物理盘子或柱子的数量要多得多。这意味着我们可能会遇到比以往更大的图，算法的性能变得更加重要。
- en: '#### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">River-Crossing
    Puzzles</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '#### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">过河难题</samp>'
- en: River-crossing puzzles are a class of brain teasers that ask about transporting
    a set of people or animals across a river in a boat with limited capacity. Challenges
    arise from constraints on which entities are allowed to be left alone together
    on either bank.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 过河难题是一类脑筋急转弯问题，要求将一组人或动物通过一只有容量限制的船运送过河。挑战来自于关于哪些实体可以单独留在岸上的限制。
- en: Let’s consider one classic river puzzle that we will describe as the prisoners-and-guards
    puzzle, in which three guards and three prisoners need to cross a river. At their
    disposal is a boat that can carry two people at most. The prisoners are handcuffed
    and cannot escape if left alone. However, if there are more prisoners than guards
    on a shore, the prisoners will gang up on the guards and steal their keys. Thus,
    on each shore, a guard must be accompanied by *at most* the same number of prisoners.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个经典的过河难题，我们将其描述为囚犯与看守的难题，其中三名看守和三名囚犯需要过河。可用的工具是一只最多能容纳两人的船。囚犯被戴上手铐，若单独留在岸边无法逃脱。然而，如果岸边囚犯的数量超过看守，囚犯就会联合起来抢夺看守的钥匙。因此，每个岸边上，看守必须至少有*与囚犯相同数量*的人陪伴。
- en: 'We can represent the puzzle as a *state space graph*, where each node represents
    a state of the puzzle. The puzzle’s state consists of three pieces of information:
    the number of guards on the left bank, the number of prisoners on the left bank,
    and whether the boat is on the left or right bank. The number of guards and prisoners
    on the right bank can be derived from the number on the left, so we do not need
    to explicitly store that information. The starting state for the problem is <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>, with all six people and
    the boat on the left bank.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个难题表示为一个*状态空间图*，其中每个节点表示难题的一个状态。该状态由三部分信息组成：左岸的看守数量，左岸的囚犯数量，以及船是否在左岸或右岸。右岸的看守和囚犯数量可以从左岸的数量推导出来，因此我们不需要显式地存储这些信息。问题的起始状态是<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>，所有六个人和船都在左岸。
- en: 'Each node in the graph represents a single valid state, while edges link states
    that are reachable via a single move. Valid moves include sending any combination
    of one or two people across in the boat: two guards, one guard, one guard and
    one prisoner, two prisoners, or one prisoner. The boat cannot travel across without
    anyone, as someone needs to steer it. Since we can always undo any move by sending
    the same configuration back across, the graph is undirected.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的每个节点表示一个有效的状态，而边连接那些通过单次移动可以到达的状态。有效的移动包括将任意一组合适的人员或两人送过河：两名看守，一名看守，一名看守和一名囚犯，两名囚犯，或一名囚犯。船不能没有人驾驶而过河，因为需要有人操控它。由于我们可以通过将相同的配置送回原岸来撤销任何移动，图是无向的。
- en: '[Figure 6-4](#fig6-4) shows the entire graph of 16 possible states. Each state
    is a single node with both a graphical and a textual representation of the state.
    The letters <samp class="SANS_TheSansMonoCd_W5Regular_11">G</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp>
    represent the locations of guards and prisoners, respectively. The position of
    the boat is shown and represented with an <samp class="SANS_TheSansMonoCd_W5Regular_11">R</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">L</samp> in the state at the
    bottom. For many states there are only two valid moves, but for others there are
    multiple options.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-4](#fig6-4)展示了16个可能状态的整个图。每个状态是一个单独的节点，既有图形表示，也有文本表示。字母<samp class="SANS_TheSansMonoCd_W5Regular_11">G</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">P</samp>分别表示警卫和囚犯的位置。船的位置在状态底部用<samp class="SANS_TheSansMonoCd_W5Regular_11">R</samp>或<samp
    class="SANS_TheSansMonoCd_W5Regular_11">L</samp>表示。对于许多状态，只有两种有效的移动，但对于其他状态，则有多个选择。'
- en: '![Each of the 16 nodes contains a picture of the puzzle state as well as its
    label. The left-most node has the state 3, 3, L, and shows three Gs, three Ps,
    and the boat on the left side of the river. It has three neighbors with states
    (3, 1, R), (2, 2, R), and (3, 2, R).](../images/f06004.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![每个16个节点都包含拼图状态的图片及其标签。最左侧的节点有状态(3, 3, L)，并显示三名警卫、三名囚犯以及河流左侧的船。它有三个邻居，状态分别是(3,
    1, R)、(2, 2, R)和(3, 2, R)。](../images/f06004.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-4: The graph representation
    of the prisoners-and-guards river-crossing puzzle</samp>'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-4：囚徒与警卫过河问题的图表示</samp>
- en: This puzzle illustrates the use of state representations while using a relatively
    small graph and makes it easy to visualize and analyze the reachable set of states.
    In later sections we’ll use this puzzle to show how we can programmatically create
    graphs and search for solutions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个拼图展示了在使用相对较小的图时如何表示状态，并且使得可达状态集的可视化和分析变得容易。在后续的章节中，我们将使用这个拼图展示如何通过编程方式创建图并搜索解决方案。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Slider Puzzles</samp>
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">滑动拼图</samp>
- en: A slider puzzle consists of a grid of square tiles on a board with one square
    missing to leave a gap. Tiles can be rearranged by sliding an adjacent tile into
    the gap, effectively allowing the tile and gap to switch places. The goal of the
    puzzle is to move each of the tiles into the correct position. Depending on the
    puzzle, we might be tasked with ordering a sequence of numbers or unscrambling
    a picture. A classic example of this game is the 15-square, shown in [Figure 6-5](#fig6-5),
    where each tile is labeled with an integer from 1 to 15 and the correct state
    has all the tiles arranged in ascending order from top left to bottom right.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动拼图由一个方格的瓦片组成，其中一个方格为空缺，形成一个空位。瓦片可以通过滑动相邻的瓦片进入空位来重新排列，实质上允许瓦片和空位交换位置。拼图的目标是将每个瓦片移动到正确的位置。根据拼图的不同，我们可能需要排列一系列数字或拼出一张图片。这个游戏的经典例子是15格拼图，如[图6-5](#fig6-5)所示，其中每个瓦片标有从1到15的整数，正确的状态是所有瓦片按照从左上到右下的升序排列。
- en: '![A 4 × 4 grid with cells numbered 1 through 15\. One cell is grayed out.](../images/f06005.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![一个4×4的方格，格子编号为1到15，其中一个格子已灰显。](../images/f06005.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-5: The 15-square puzzle</samp>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-5：15格拼图</samp>
- en: The slider puzzle lends itself well to graph representation. Each possible arrangement
    of tiles is a unique puzzle state and can be represented by a graph node. Edges
    indicate possible traversals between states. At most, each state has four undirected
    edges, representing the neighbors that can be reached by filling that state’s
    gap position with each of the four adjacent tiles. We can call these edges Up,
    Down, Left, and Right.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动拼图非常适合使用图表示。每一种可能的瓦片排列都是一个独特的拼图状态，可以通过一个图节点表示。边表示状态之间可能的遍历。每个状态最多有四条无向边，表示通过将该状态的空缺位置填入四个相邻瓦片中的每一个，可以到达的邻居。我们可以将这些边称为上、下、左、右。
- en: '[Figure 6-6](#fig6-6) shows an example state and its four neighbors. By searching
    through the graph for a path from the initial state’s node to the goal state’s
    node, we can find a sequence of moves that solves the puzzle.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-6](#fig6-6)展示了一个示例状态及其四个邻居。通过在图中搜索从初始状态节点到目标状态节点的路径，我们可以找到一系列解决拼图的移动步骤。'
- en: '![A graph composed of five nodes, each of which holds a 4 × 4 slider puzzle
    like the one in Figure 6-5 with the empty square in a different position.](../images/f06006.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![由五个节点组成的图，每个节点都包含一个4 × 4的滑块难题，类似于图6-5中的难题，只是空白方格的位置不同。](../images/f06006.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-6: A single state
    of the 15-square puzzle (center) and its four neighbor states</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-6：15方块难题的一个状态（中间）及其四个邻近状态</samp>
- en: The 15-square puzzle demonstrates how quickly the state space can explode. This
    apparently simple puzzle has over 20 trillion states, many of which will never
    need to be visited on our path to the solution.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 15方块难题展示了状态空间如何迅速膨胀。这个看似简单的难题有超过20万亿个状态，其中许多状态在我们寻找解法的过程中根本不需要访问。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Constructing a Graph with Search</samp>
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用搜索构建图</samp>
- en: The graph search algorithms from the previous chapters required us to provide
    a fully specified graph. For puzzle problems, this might not be feasible. We don’t
    want to laboriously enumerate their many, many states by hand before we can start
    the search. Not only would this be time-consuming, but it would also likely lead
    to errors and accidentally induce the puzzle equivalent of cheating—adding an
    edge that allows an illegal move. Even worse, we would waste a huge amount of
    effort generating states that either are not used in the solution or are not reachable
    at all.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章中的图搜索算法要求我们提供一个完全指定的图。对于难题问题，这可能不可行。在开始搜索之前，我们不想费力地手动列举出它们众多的状态。这不仅会非常耗时，而且很可能会导致错误，并且不小心引发作弊的等价问题——添加一条允许非法移动的边。更糟糕的是，我们会浪费大量的精力生成那些在解法中既不被使用，也无法到达的状态。
- en: Instead, we can dynamically create a graph using a search algorithm by extending
    the breadth-first and depth-first search algorithms to explore the state space,
    adding nodes and edges on the fly. Each time we discover a new state, we add the
    corresponding node. Each time we test a move between states, we add the corresponding
    edge. Unlike previous searches that iterated over each node or each edge out of
    a node, using a search to build the graph requires the algorithm to iterate over
    puzzle states and the valid moves out of each state.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以通过扩展广度优先搜索和深度优先搜索算法来动态创建一个图，探索状态空间，并实时添加节点和边。每次发现一个新状态时，我们就添加相应的节点。每次测试状态之间的移动时，我们就添加相应的边。与之前的搜索方式不同，后者需要遍历每个节点或每个节点的边，而使用搜索来构建图则要求算法遍历难题的状态以及每个状态的有效移动。
- en: Throughout the rest of this section, we examine how we can build out such graphs
    using the river-crossing puzzle. We start with an initial state <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>
    and explore outward from there. At each step, we ask, “What is the next state
    if we send some combination of people (two guards, one guard, one guard and one
    prisoner, two prisoners, or one prisoner) across the river?” We compute the next
    state with simple arithmetic and check its validity using the puzzle’s rules.
    If the new state is valid, we add it and the corresponding edge to our graph.
    Throughout the next few sections, we will build out the code to store the state
    space, define valid transitions, and construct the graph. While we focus on the
    river-crossing puzzle, the approaches apply to a range of puzzles.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，我们将探讨如何使用过河难题构建这样的图。我们从一个初始状态<samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>开始，并从那里向外探索。在每一步中，我们会问：“如果我们把一些人（两个警卫，一个警卫，一个警卫和一个囚犯，两个囚犯，或一个囚犯）送过河，下一状态是什么？”我们通过简单的算术计算下一状态，并使用难题的规则检查其有效性。如果新状态有效，我们就将其及相应的边添加到我们的图中。在接下来的几个部分中，我们将编写代码来存储状态空间、定义有效转换并构建图。虽然我们专注于过河难题，但这些方法适用于一系列难题。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Representing the
    Puzzle’s States</samp>
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">表示难题的状态</samp>
- en: 'In order to define our search, we first need to represent the puzzle’s state.
    The following code shows how to define a simple class <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>
    (where <samp class="SANS_TheSansMonoCd_W5Regular_11">PG</samp> stands for “prisoners
    and guards”) to store the current state of the puzzle and provide some helper
    functions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义我们的搜索，首先需要表示拼图的状态。以下代码展示了如何定义一个简单的类 <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>（其中
    <samp class="SANS_TheSansMonoCd_W5Regular_11">PG</samp> 代表“囚犯和警卫”）来存储拼图的当前状态，并提供一些辅助函数：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The variables <samp class="SANS_TheSansMonoCd_W5Regular_11">guards_left</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">prisoners_left</samp> store
    the number of guards and prisoners on the left riverbank. The string <samp class="SANS_TheSansMonoCd_W5Regular_11">boat_side</samp>
    indicates whether the boat is currently on the left (<samp class="SANS_TheSansMonoCd_W5Regular_11">L</samp>)
    or the right (<samp class="SANS_TheSansMonoCd_W5Regular_11">R</samp>) bank. The
    <samp class="SANS_TheSansMonoCd_W5Regular_11">__str__()</samp> function allows
    us to easily convert the state into a string representation for storage and display.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 <samp class="SANS_TheSansMonoCd_W5Regular_11">guards_left</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">prisoners_left</samp> 存储左岸的警卫和囚犯数量。字符串
    <samp class="SANS_TheSansMonoCd_W5Regular_11">boat_side</samp> 指示船当前位于左岸（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">L</samp>）还是右岸（<samp class="SANS_TheSansMonoCd_W5Regular_11">R</samp>）。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">__str__()</samp> 函数允许我们轻松地将状态转换为字符串表示形式，便于存储和显示。
- en: 'Given the <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> data
    structure, it is easy to programmatically compute the result of moving a given
    number of guards and prisoners as part of the next boat trip, as shown in the
    following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> 数据结构，按照以下代码所示，我们可以编程地计算下一次船次移动给定数量的警卫和囚犯的结果：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The majority of the <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp>
    function checks whether the move is valid. If the move is invalid, the function
    returns <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>. Otherwise,
    it will return the new <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>
    corresponding to the result of the move. Note that this requires us to import
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Union</samp> from Python’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">typing</samp> library to support type
    hints for multiple return types. The code checks that the number of prisoners
    and number of guards are both nonnegative, that there is at least one person in
    the boat, and that there are at most two people in the boat ❶. If any of the validity
    checks fail, the move is not valid, and the function returns <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>
    to indicate there is no next valid state.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分的 <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp>
    函数用于检查移动是否有效。如果移动无效，函数将返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>。否则，函数将返回对应于该移动结果的新
    <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>。需要注意的是，这要求我们从 Python
    的 <samp class="SANS_TheSansMonoCd_W5Regular_11">typing</samp> 库导入 <samp class="SANS_TheSansMonoCd_W5Regular_11">Union</samp>，以支持多个返回类型的类型提示。代码检查囚犯和警卫的数量是否都是非负的，是否至少有一个人坐在船上，并且船上最多有两个人
    ❶。如果任何有效性检查失败，则移动无效，函数返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>，表示没有下一个有效状态。
- en: If the move passes these first validity checks, the code computes the resulting
    number of prisoners and guards on the left shore (<samp class="SANS_TheSansMonoCd_W5Regular_11">P_L</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">G_L</samp>, respectively) and
    the number of prisoners and guards on the right shore (<samp class="SANS_TheSansMonoCd_W5Regular_11">P_R</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">G_R</samp>) ❷. These four counts
    are used to check whether the new state is valid. The code checks that the move
    is not relocating more people than are on the current shore by confirming that
    none of the counts become negative ❸. It also checks that the new state has a
    valid balance of guards and prisoners ❹. If there is at least one guard on a shore,
    then there cannot be more prisoners than guards on that shore. However, it is
    valid to have only prisoners on a shore. Once again, if any of the validity checks
    fail, the new state is not valid, and the function returns <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>.
    If all checks pass, the code returns a <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>
    data structure representing the new state.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果移动通过了这些初步的有效性检查，代码会计算左岸的囚犯和守卫数量（分别为 <samp class="SANS_TheSansMonoCd_W5Regular_11">P_L</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">G_L</samp>），以及右岸的囚犯和守卫数量（分别为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">P_R</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">G_R</samp>）
    ❷。这四个数量将用于检查新状态是否有效。代码检查移动是否没有将超过当前岸上的人数移走，通过确认没有任何计数变为负数 ❸。它还检查新状态是否有有效的守卫和囚犯平衡
    ❹。如果某一岸上至少有一个守卫，那么该岸上的囚犯数量不能超过守卫数量。然而，岸上只有囚犯是有效的。再一次，如果任何有效性检查失败，新状态将被视为无效，函数将返回
    <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>。如果所有检查都通过，代码将返回一个表示新状态的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> 数据结构。
- en: 'While <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp>
    checks and computes the result of a single move, we need to construct edges for
    each valid move out of a state. We can define a helper function to generate and
    test all possible neighbors of the current state:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当 <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp> 检查并计算单个移动的结果时，我们需要为每个有效的移动构建边缘。我们可以定义一个辅助函数来生成并测试当前状态的所有可能邻居：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code creates an empty list of neighbors (<samp class="SANS_TheSansMonoCd_W5Regular_11">neighbors</samp>),
    then systematically tries all five possible moves: one guard, two guards, one
    prisoner, two prisoners, and one guard plus one prisoner ❶. Each time, the code
    calls <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp>
    and checks whether a valid neighboring state is returned ❷. If so, it adds the
    new state to the list of neighbors.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个空的邻居列表（<samp class="SANS_TheSansMonoCd_W5Regular_11">neighbors</samp>），然后系统地尝试五种可能的移动方式：一个守卫、两个守卫、一个囚犯、两个囚犯和一个守卫加一个囚犯
    ❶。每次，代码都会调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_result_of_move()</samp>
    并检查是否返回有效的邻接状态 ❷。如果是，它会将新状态添加到邻居列表中。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Generating the Graph</samp>
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">生成图形</samp>
- en: Now that we have the components to algorithmically determine which states neighbor
    the current state, we can use a modified breadth-first search to generate the
    state space graph for the prisoners-and-guards puzzle. This algorithm will start
    from the initial state and explore outward along edges to adjacent states. We’ll
    use the <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp> helper
    function from the last section to determine the set of valid neighboring states
    from the current state. As new states are discovered by the neighbor generation
    function, we’ll add those states to the graph as new nodes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了算法上确定哪些状态是当前状态邻接状态的组件，我们可以使用修改过的广度优先搜索来生成囚犯与守卫谜题的状态空间图。这个算法将从初始状态开始，沿着边缘向外探索到相邻状态。我们将使用上一节中的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp> 辅助函数来确定当前状态的有效邻接状态集。随着邻居生成函数发现新状态，我们将把这些状态作为新节点添加到图中。
- en: We track the state information in the <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>
    data structure. For convenience, we will link to this state information as a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> object assigned to the
    node’s label. This makes the current state data structure readily accessible during
    the search. We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">__str__()</samp>
    method to produce a string representation of the data structure for use in helper
    data structures.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在<samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>数据结构中跟踪状态信息。为了方便起见，我们将这个状态信息链接为一个分配给节点标签的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>对象。这使得在搜索过程中可以方便地访问当前的状态数据结构。我们使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">__str__()</samp>方法生成数据结构的字符串表示，用于辅助数据结构。
- en: 'In addition to the data structures used in previous breadth-first searches,
    we need to track one additional piece of information: a mapping from the state
    to its node in the graph. It doesn’t help us to know that an edge exists between
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>
    if we can’t then find the corresponding nodes and create the edge. We store this
    information in a dictionary (<samp class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>)
    that maps a string representation of the state to the corresponding node’s index
    in the graph.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前广度优先搜索中使用的数据结构外，我们还需要追踪一项额外的信息：从状态到图中对应节点的映射。如果我们无法找到对应的节点并创建边缘，知道<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp>与<samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>之间存在一条边是没有意义的。我们将这项信息存储在一个字典（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>）中，该字典将状态的字符串表示映射到图中对应节点的索引。
- en: 'The code to create the state graph for prisoners and guards combines the pieces
    we’ve previously assembled:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建囚犯与守卫状态图的代码将我们之前组装的各个部分组合起来：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code for generating the graph starts by setting up the necessary data structures:
    an empty dictionary (<samp class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>),
    an empty queue (<samp class="SANS_TheSansMonoCd_W5Regular_11">next_node</samp>),
    and an empty graph (<samp class="SANS_TheSansMonoCd_W5Regular_11">g</samp>). It
    creates a new <samp class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp> object
    for the initial state, inserts the corresponding node into the graph with the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> class’s <samp class="SANS_TheSansMonoCd_W5Regular_11">insert_node()</samp>
    function, adds the initial state’s node index to the queue, and adds the string
    to index mapping to the dictionary ❶.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 生成图形的代码首先通过设置必要的数据结构来开始：一个空字典（<samp class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>）、一个空队列（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">next_node</samp>）和一个空图（<samp class="SANS_TheSansMonoCd_W5Regular_11">g</samp>）。它为初始状态创建一个新的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">PGState</samp>对象，通过<samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>类的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">insert_node()</samp>函数将对应的节点插入图中，将初始状态的节点索引添加到队列中，并将字符串与索引的映射添加到字典中❶。
- en: We are now ready to start the search itself. Like other breadth-first searches,
    our prisoners-and-guards graph generation uses a queue of node indices (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">next_node</samp>) to control the search.
    The next node index is dequeued, and the corresponding node and state are retrieved
    ❷. Unlike previous breadth-first search examples, the algorithm cannot rely on
    the node’s edge list to determine neighbors. Instead, the code uses the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp> function to generate
    possible neighboring states ❸.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始搜索了。像其他广度优先搜索一样，我们的囚犯与守卫图生成使用一个节点索引队列（<samp class="SANS_TheSansMonoCd_W5Regular_11">next_node</samp>）来控制搜索。下一个节点索引被出队，随后获取对应的节点和状态❷。与之前的广度优先搜索示例不同，算法不能依赖节点的边列表来确定邻居。相反，代码使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp>函数来生成可能的邻接状态❸。
- en: The code checks whether each state has been seen before by searching for its
    string representation in the <samp class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>
    dictionary ❹. If the state does not have an entry in the table (and a valid node
    index), we have neither seen it nor added it to the graph yet. New nodes are created
    for any previously unseen states, and new edges are generated between the current
    node and its neighbor ❺.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过在<samp class="SANS_TheSansMonoCd_W5Regular_11">indices</samp>字典中查找状态的字符串表示来检查每个状态是否之前出现过
    ❹。如果状态在表中没有条目（以及有效的节点索引），那么我们既没有见过它，也没有将它添加到图中。对于任何以前未见过的状态，都会创建新节点，并且在当前节点与其邻居之间生成新的边
    ❺。
- en: The code concludes by returning the completed graph <samp class="SANS_TheSansMonoCd_W5Regular_11">g</samp>.
    Since the algorithm only searches outward from the initial state, the returned
    graph will include only states that are reachable from the initial state by valid
    moves. Nodes for invalid or unreachable states are not included.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代码最后通过返回完成的图<samp class="SANS_TheSansMonoCd_W5Regular_11">g</samp>来结束。由于算法仅从初始状态向外搜索，因此返回的图只会包含那些可以通过有效的移动从初始状态到达的状态。无效或无法到达的状态的节点不会被包含在内。
- en: '[Figure 6-7](#fig6-7) shows the first few steps of the algorithm’s progress.
    The single node corresponding to the graph’s initial <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>
    state is shown in [Figure 6-7(a)](#fig6-7). [Figure 6-7(b)](#fig6-7) shows the
    result after the first node is visited: the <samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp>
    function finds three valid neighbors for the current state, and the algorithm
    creates new nodes for each one. After exploring the <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,1,R></samp>
    state, the code creates a <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp>
    node and the corresponding edge, as shown in [Figure 6-7(c)](#fig6-7).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-7](#fig6-7) 显示了算法进展的前几步。图中显示了对应于图的初始状态 <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>
    的单一节点，如[图 6-7(a)](#fig6-7)所示。[图 6-7(b)](#fig6-7) 显示了第一个节点访问后的结果：<samp class="SANS_TheSansMonoCd_W5Regular_11">pg_neighbors()</samp>函数为当前状态找到了三个有效的邻居，算法为每个邻居创建了新节点。在探索了
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,1,R></samp> 状态后，代码创建了一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp> 节点，并且生成了相应的边，如[图 6-7(c)](#fig6-7)所示。'
- en: '![In (A), the graph has a single node labeled (3, 3, L). In (B), three neighbors
    have been added with states (3, 1, R), (2, 2, R), and (3, 2, R). Each neighbor
    has an edge back to the first node. In (C), a fifth node has been created with
    state (3, 2, L) and an edge to node (3, 1, R).](../images/f06007.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![在 (A) 中，图中只有一个节点标记为 (3, 3, L)。在 (B) 中，已经添加了三个邻居，状态为 (3, 1, R)、(2, 2, R) 和
    (3, 2, R)，每个邻居都有一条返回到第一个节点的边。在 (C) 中，已经创建了一个第五个节点，状态为 (3, 2, L)，并且有一条到节点 (3, 1,
    R) 的边。](../images/f06007.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-7: The first three
    steps of generating the graph for the prisoners-and-guards puzzle</samp>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-7: 生成囚徒与警卫谜题图的前三个步骤</samp>'
- en: The algorithm generates new nodes whenever it first sees them. However, it does
    not necessarily generate all the node’s edges until it visits that node, which
    is why there is no edge from state <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp>
    to state <samp class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp> in [Figure
    6-7(c)](#fig6-7). The code will generate the edge between those nodes only when
    it visits either <samp class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp>.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 算法每当第一次看到节点时就会生成新节点。然而，它并不一定在访问该节点之前生成所有节点的边，这就是为什么在[图 6-7(c)](#fig6-7)中，状态
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp> 和状态 <samp class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp>
    之间没有边的原因。只有在访问 <samp class="SANS_TheSansMonoCd_W5Regular_11"><2,2,R></samp> 或
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,2,L></samp> 之一时，代码才会在这些节点之间生成边。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Solving a Puzzle with Search</samp>
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">通过搜索解决谜题</samp>
- en: We can apply the searches from past chapters directly to the prisoners-and-guards
    puzzle graph. We add the search functions to the same prisoners-and-guards program,
    building off the previous section’s functions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接将之前章节的搜索应用到囚徒与警卫的谜题图上。我们将搜索功能添加到相同的囚徒与警卫程序中，基于上一节的函数进行构建。
- en: 'To simplify the logic, we start with a simple helper function that creates
    a dictionary mapping the state’s string to the corresponding node’s index:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化逻辑，我们从一个简单的辅助函数开始，该函数创建一个字典，将状态的字符串映射到相应节点的索引：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The resulting map of state string to node index allows us to look up the start
    and goal indices without tracing through the graph. We can look up the index of
    the starting node (0) from the string <samp class="SANS_TheSansMonoCd_W5Regular_11">"3,3,L"</samp>.
    Similarly, we can look up the goal node’s index (14) from its state string <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"0,0,R"</samp>.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的状态字符串到节点索引的映射允许我们直接查找起始和目标的索引，而无需遍历整个图形。我们可以通过字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">"3,3,L"</samp>
    查找起始节点的索引（0）。同样，我们也可以通过状态字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">"0,0,R"</samp>
    查找目标节点的索引（14）。
- en: 'Here’s the code for searching the puzzle:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于搜索谜题的代码：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The code starts by creating the puzzle’s graph representation ❶. It then builds
    a dictionary <samp class="SANS_TheSansMonoCd_W5Regular_11">state_to_index</samp>,
    which maps the state string to the index, and uses that to look up the indices
    of the starting and goal nodes ❷.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先通过创建谜题的图形表示 ❶。接着，它构建一个字典 <samp class="SANS_TheSansMonoCd_W5Regular_11">state_to_index</samp>，将状态字符串映射到索引，并使用该字典查找起始节点和目标节点的索引
    ❷。
- en: The code uses a standard breadth-first search to explore the graph, returning
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">last</samp> list ❸. Finally,
    it traverses the <samp class="SANS_TheSansMonoCd_W5Regular_11">last</samp> list
    backward from the goal node until it reaches the starting node or a dead end ❹.
    If the path dead-ends before reaching the starting node, the function displays
    the message <samp class="SANS_TheSansMonoCd_W5Regular_11">No solution</samp> ❺.
    Otherwise, the code walks the path forward and displays the list of states visited
    in the correct order ❻.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用标准的广度优先搜索来探索图形，并返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">最后</samp>
    列表 ❸。最后，它从目标节点开始，反向遍历 <samp class="SANS_TheSansMonoCd_W5Regular_11">最后</samp>
    列表，直到到达起始节点或死胡同 ❹。如果路径在到达起始节点之前死胡同，函数会显示消息 <samp class="SANS_TheSansMonoCd_W5Regular_11">无解</samp>
    ❺。否则，代码会向前走路径，并以正确的顺序显示访问过的状态列表 ❻。
- en: '[Figure 6-8](#fig6-8) shows the generated graph with node indices. Each node
    is labeled with both its node index (top) and its state string (bottom).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-8](#fig6-8)显示了生成的图，并标明了节点索引。每个节点上方标有其节点索引，下方标有其状态字符串。'
- en: '![The graph from Figure 6-4 with a number and state string labeling each node.
    The leftmost node has the label 0\. Its three neighbors are labeled 2, 3, and
    1 from top to bottom.](../images/f06008.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图6-4中的图，标有编号和状态字符串，每个节点都有标签。最左边的节点标签为0。它的三个邻居从上到下标为2、3和1。](../images/f06008.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-8: The graph for prisoners
    and guards with node indices shown</samp>'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-8：标有节点索引的囚犯与守卫图</samp>
- en: Given the generated puzzle graph, we can directly run the breadth-first search
    from [Chapter 5](chapter5.xhtml). [Table 6-1](#tab6-1) shows the state of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">last</samp> vector after each node
    is explored. The first row corresponds to iteration 0 and state <samp class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>.
    The goal (state <samp class="SANS_TheSansMonoCd_W5Regular_11"><0,0,R></samp>)
    is visited during iteration 14.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 给定生成的谜题图形，我们可以直接从[第5章](chapter5.xhtml)运行广度优先搜索。[表 6-1](#tab6-1)显示了每次节点被探索后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">最后</samp> 向量的状态。第一行对应于第0次迭代，状态为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><3,3,L></samp>。目标（状态 <samp class="SANS_TheSansMonoCd_W5Regular_11"><0,0,R></samp>）在第14次迭代时被访问。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 6-1:</samp> <samp class="SANS_Futura_Std_Book_11">The
    Progression of the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">last</samp>
    <samp class="SANS_Futura_Std_Book_11">Vector</samp>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 6-1：</samp> <samp class="SANS_Futura_Std_Book_11">最后</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">向量</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Step (node)</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">R</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">L</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">R</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">L</samp> |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">步骤 (节点)</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">R</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">3</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">2</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">3</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">R</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">1</samp><samp class="SANS_Futura_Std_Heavy_B_11">L</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">2</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">L</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">R</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">0</samp><samp class="SANS_Futura_Std_Heavy_B_11">1</samp><samp
    class="SANS_Futura_Std_Heavy_B_11">L</samp> |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0 (3,3,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0 (3,3,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">1 (3,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">1 (3,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2 (3,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2 (3,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3 (2,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3 (2,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4 (3,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4 (3,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5 (3,0,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5 (3,0,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6 (3,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6 (3,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">7 (1,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">7 (1,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">8 (2,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">8 (2,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9 (0,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9 (0,2,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">10 (0,3,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">10 (0,3,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">11 (0,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">11 (0,1,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">12 (1,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">12 (1,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">13 (0,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">13 (0,2,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">–1</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">14 (0,0,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">14</samp> |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">14 (0,0,R)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">14</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">15 (0,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">14</samp> |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">15 (0,1,L)</samp> | <samp class="SANS_Futura_Std_Book_11">–1</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    | <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">9</samp>
    | <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    | <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    | <samp class="SANS_Futura_Std_Book_11">14</samp> |'
- en: Based on the <samp class="SANS_TheSansMonoCd_W5Regular_11">last</samp> vector
    that breadth-first search produces, we can track the moves necessary to take us
    from the initial state to the goal. Remember that breadth-first search returns
    the shortest path on unweighted graphs, so it has found us the solution requiring
    the fewest moves.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 基于广度优先搜索生成的<sup class="SANS_TheSansMonoCd_W5Regular_11">最后</sup>向量，我们可以追踪从初始状态到目标状态所需的移动。记住，广度优先搜索在无权图上返回最短路径，因此它已经找到了要求最少移动的解决方案。
- en: We can use similar approaches for the Tower of Hanoi and the slider puzzle.
    Each time, we would start by defining the data structure for the state space and
    a function to algorithmically generate a state’s neighbors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似的方法来解决汉诺塔问题和滑块谜题。每次，我们都将通过定义状态空间的数据结构以及一个生成状态邻居的算法函数来开始。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Why This Matters</samp>
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">为什么这很重要</samp>
- en: This chapter introduced how to apply graph search to the abstract world of solving
    puzzles. Beyond the relatively simple puzzles covered here, we can model increasingly
    complex problems by incorporating the rich structure of the graph, including directed
    and weighted edges. While the puzzles in this chapter used undirected edges to
    represent reversible moves, for example, we can represent a move that cannot be
    taken back with a directed edge. If we’re trying to solve a puzzle that involves
    crossing a bridge that will collapse after one trip, we cannot directly return
    to the state where we are on the other side of the ravine with the bridge intact.
    Similarly, weighted edges allow us to account for the cost of moves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何将图搜索应用于解决谜题的抽象世界。除了这里涉及的相对简单的谜题外，我们还可以通过结合图的丰富结构来建模日益复杂的问题，包括有向和加权边。例如，本章中的谜题使用无向边表示可逆移动，但我们可以用有向边表示无法撤销的移动。如果我们试图解决一个谜题，涉及到过一座桥，而这座桥在第一次通过后会坍塌，我们就无法直接返回到桥对面并保持桥完好的状态。同样，加权边使我们能够考虑移动的成本。
- en: The code in this chapter also demonstrated that we do not have to generate graphs
    before starting our searches, but instead we can use a search to create the graph
    data structure as we explore the various states. In many cases, we might not need
    to explicitly create the graph data structure at all. Once we have defined the
    states and transitions, we can apply graph algorithms like breadth-first search
    directly to them. For the remainder of this book, we will refer to modeling problems
    as graph problems even in cases where we do not explicitly build a graph.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码还展示了我们不必在开始搜索之前生成图形，而是可以通过搜索来创建图数据结构，同时探索不同的状态。在许多情况下，我们甚至可能根本不需要显式地创建图数据结构。一旦我们定义了状态和转换，就可以直接对它们应用图算法，比如广度优先搜索。从本书的剩余部分开始，我们将把建模问题称为图问题，即使在某些情况下我们并没有显式地构建图。
- en: In the next chapter, we will return to the question of computing paths through
    graphs, expanding beyond the search-based approaches we have seen so far to find
    the least-cost path through graphs with weighted edges.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将回到通过图形计算路径的问题，超越到目前为止我们看到的基于搜索的方法，寻找带权图中最低成本的路径。
