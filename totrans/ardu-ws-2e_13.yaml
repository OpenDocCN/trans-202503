- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Motors and Movement
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 电机与运动
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中你将
- en: Use a servo to create an analog thermometer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用伺服电机创建一个模拟温度计
- en: Learn how to control the speed and direction of DC electric motors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何控制直流电动机的速度和方向
- en: Learn how to control small stepper motors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何控制小型步进电机
- en: Use an Arduino motor shield
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino电机扩展板
- en: Begin work on a motorized robot vehicle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始制作一辆电动机器人
- en: Use simple microswitches for collision avoidance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单的微动开关进行碰撞避免
- en: Use infrared and ultrasonic distance sensors for collision avoidance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用红外和超声波距离传感器进行碰撞避免
- en: Making Small Motions with Servos
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用伺服电机进行小范围运动
- en: A *servo* (short for *servomechanism*) is an electric motor with a built-in
    sensor. It can be commanded to rotate to a specific angular position. By attaching
    the shaft of the servo to other machines, like wheels, gears, and levers, you
    can precisely control items in the external world. For example, you might use
    a servo to control the steering of a remote control car by connecting the servo
    to a *horn*, a small arm or bar that the servo rotates. An example of a horn is
    one of the hands on an analog clock. [Figure 14-1](#figure14-1) shows a servo
    and three types of horns.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*伺服电机*（*伺服机构*的简称）是一个带有内建传感器的电动机。它可以被命令旋转到特定的角度位置。通过将伺服电机的轴连接到其他机器（如车轮、齿轮和杠杆），你可以精确地控制外部世界中的物体。例如，你可以使用伺服电机来控制遥控车的转向，通过将伺服电机连接到一个*角度盘*（一个小臂或杆，伺服电机旋转它）。一个角度盘的例子是模拟钟表上的时针。[图14-1](#figure14-1)展示了伺服电机和三种类型的角度盘。
- en: '![f14001](image_fi/500587c14/f14001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f14001](image_fi/500587c14/f14001.png)'
- en: 'Figure 14-1: A servo and various horns'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-1：伺服电机和各种角度盘
- en: Selecting a Servo
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择伺服电机
- en: 'When you’re selecting a servo, consider several parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择伺服电机时，考虑几个参数：
- en: Speed The time it takes for the servo to rotate, usually measured in seconds
    per angular degree, revolutions per minute (RPM), or seconds per 60 degrees.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 速度：伺服电机旋转所需的时间，通常以每角度度数的秒数、每分钟转速（RPM）或每60度的秒数来衡量。
- en: Rotational range The angular range through which the servo can rotate—for example,
    180 degrees (half of a full rotation) or 360 degrees (one complete rotation).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旋转范围：伺服电机可以旋转的角度范围——例如，180度（半圈旋转）或360度（完整旋转）。
- en: Current How much current the servo draws. When using a servo with an Arduino,
    you may need to use an external power supply for the servo.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电流：伺服电机所消耗的电流。在使用伺服电机与Arduino时，你可能需要为伺服电机使用外部电源。
- en: Torque The amount of force the servo can exert when rotating. The greater the
    torque, the heavier the item the servo can control. The torque produced is generally
    proportional to the amount of current used.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扭矩：伺服电机旋转时能施加的力。扭矩越大，伺服电机能够控制的物体就越重。产生的扭矩通常与所用电流成正比。
- en: The servo shown in [Figure 14-1](#figure14-1) is a generic SG90-type servo.
    It is inexpensive and can rotate up to 180 degrees, as shown in [Figure 14-2](#figure14-2).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-1](#figure14-1)中展示的伺服电机是一个常见的SG90型号。它价格便宜，最多可以旋转180度，如[图14-2](#figure14-2)所示。'
- en: '![f14002](image_fi/500587c14/f14002.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f14002](image_fi/500587c14/f14002.png)'
- en: 'Figure 14-2: Example servo rotation range'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-2：伺服电机旋转范围示例
- en: Connecting a Servo
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接伺服电机
- en: It’s easy to connect a servo to an Arduino because it needs only three wires.
    If you’re using the SG90, the darkest wire connects to GND, the center wire connects
    to 5 V, and the lightest wire (the *pulse* or *data* wire) connects to a digital
    pin. If you’re using a different servo, check its data sheet for the correct wiring.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将伺服电机连接到Arduino非常简单，因为它只需要三根线。如果你使用的是SG90型号，最深色的线连接到GND，中间的线连接到5V，最浅色的线（*脉冲*或*数据*线）连接到数字引脚。如果你使用的是其他型号的伺服电机，请查阅其数据表，了解正确的接线方式。
- en: Putting a Servo to Work
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用伺服电机
- en: Now let’s put our servo to work. In this sketch, the servo will turn through
    its rotational range. Connect the servo to your Arduino as described, with the
    pulse wire connected to digital pin 4, and then enter and upload the sketch in
    [Listing 14-1](#listing14-1).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始使用伺服电机。在这个草图中，伺服电机会在其旋转范围内旋转。按照上述方法将伺服电机连接到Arduino，脉冲线连接到数字引脚4，然后输入并上传[Listing
    14-1](#listing14-1)中的草图。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 14-1: Servo demonstration sketch'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 14-1：伺服电机演示草图
- en: 'In this sketch, we use the Servo library, which needs to be installed. Follow
    the instructions outlined in Chapter 7\. In the Library Manager, find and then
    install the “Servo by Michael Margolis, Arduino” library. Create an instance of
    the servo with the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个草图中，我们使用了Servo库，需要进行安装。请按照第7章中的说明操作。在库管理器中，找到并安装“Servo by Michael Margolis,
    Arduino”库。使用以下代码创建伺服电机实例：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, in `void setup()`, we tell the Arduino which digital pin the servo control
    is using:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`void setup()`中，我们告诉Arduino哪个数字引脚用于控制伺服电机：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we simply move the servo with the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需用以下代码来控制伺服电机：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `x` is an integer between 0 and 180 representing the angular position
    to which the servo will be moved. When running the sketch in [Listing 14-1](#listing14-1),
    the servo will rotate across its maximum range, stopping at the extremes (0 degrees
    and 180 degrees) and at the midpoint (90 degrees). When looking at your servo,
    note that the 180-degree position is on the left and 0 degrees is on the right.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x`是一个介于0和180之间的整数，表示伺服电机将要移动的角度位置。当运行[清单14-1](#listing14-1)中的草图时，伺服电机会跨越其最大范围旋转，停在极端位置（0度和180度）以及中间位置（90度）。查看你的伺服电机时，注意180度的位置在左侧，0度的位置在右侧。
- en: In addition to pushing or pulling objects, servos can be used to communicate
    data in a similar way as an analog gauge. For example, you could use a servo as
    an analog thermometer, as you’ll see in Project 37.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了推拉物体之外，伺服电机还可以像模拟仪表一样用来传输数据。例如，你可以使用伺服电机作为模拟温度计，就像在项目37中展示的那样。
- en: 'Project #37: Building an Analog Thermometer'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#37：构建模拟温度计
- en: Using our servo and the TMP36 temperature sensor from earlier chapters, we’ll
    build an analog thermometer. We’ll measure the temperature and then convert this
    measurement to an angle between 0 and 180 degrees to indicate a temperature between
    0 and 30 degrees Celsius. The servo will rotate to the angle that matches the
    current temperature.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前章节中的伺服电机和TMP36温度传感器，我们将制作一个模拟温度计。我们将测量温度，然后将该测量值转换为0到180度之间的角度，以指示0到30摄氏度之间的温度。伺服电机会旋转到与当前温度相匹配的角度。
- en: The Hardware
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The required hardware is minimal:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的硬件非常简单：
- en: One TMP36 temperature sensor
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TMP36温度传感器
- en: One breadboard
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: One small servo
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小型伺服电机
- en: Various connecting wires
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: The Schematic
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: The circuit is also very simple, as shown in [Figure 14-3](#figure14-3).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 电路也非常简单，如[图14-3](#figure14-3)所示。
- en: '![f14003](image_fi/500587c14/f14003.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f14003](image_fi/500587c14/f14003.png)'
- en: 'Figure 14-3: Schematic for Project 37'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-3：项目37的电路图
- en: The Sketch
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: The sketch will determine the temperature using the same method used in Project
    8 in Chapter 4. Then it will convert the temperature into an angular rotation
    value for the servo.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图将使用与第4章第8项目中相同的方法来确定温度。然后，它将把温度转换为伺服电机的角度旋转值。
- en: 'Enter and upload the following sketch:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Most of this sketch should be clear to you at this point, but the function
    `calculateservo()` at 1 is new. This function converts the temperature into the
    matching angle for the servo to use according to the following formula:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，这个草图的大部分内容应该都很清楚，但1处的`calculateservo()`函数是新的。此函数根据以下公式将温度转换为伺服电机使用的匹配角度：
- en: angle = (–6 × temperature) + 180
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: angle = (–6 × temperature) + 180
- en: 'You might find it useful to make a *backing sheet* to show the range of temperatures
    that the servo will display, with a small arrow to create a realistic effect.
    An example is shown in [Figure 14-4](#figure14-4). You can download a printable
    version of the backing sheet from the book’s website: [https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现制作一个*背板*来显示伺服电机所显示的温度范围很有用，可以加一个小箭头来增强真实感。示例见[图14-4](#figure14-4)。你可以从本书的网站下载可打印版本的背板：[https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/)。
- en: '![f14004](image_fi/500587c14/f14004.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![f14004](image_fi/500587c14/f14004.png)'
- en: 'Figure 14-4: A backing sheet indicates the temperature on our thermometer.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-4：背板显示我们的温度计上的温度。
- en: Using Electric Motors
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用电动马达
- en: The next step in our motor-controlling journey is to work with small electric
    motors. Small motors are used for many applications, from small fans to toy cars
    to model railroads.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们控制电机的下一步是使用小型电动马达。小型电动马达广泛应用于各种领域，从小风扇到玩具车，再到模型铁路。
- en: Selecting a Motor
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个马达
- en: 'As with servos, you need to consider several parameters when you’re choosing
    an electric motor:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与伺服电机类似，选择电动机时需要考虑多个参数：
- en: The operating voltage The voltage at which the motor is designed to operate.
    This can vary, from 3 V to more than 12 V.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作电压：电动机设计的工作电压。这可以变化，从 3 V 到超过 12 V。
- en: The current without a load The amount of current the motor uses at its operating
    voltage while spinning freely, without anything connected to the motor’s shaft.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无负载电流：电动机在自由旋转时使用的电流，即在电动机轴上没有任何连接物的情况下的工作电流。
- en: The stall current The amount of current used by the motor when it is trying
    to turn but cannot because of the load on the motor.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卡死电流：电动机在试图旋转时，因为负载的存在而无法转动时所消耗的电流。
- en: The speed at the operating voltage The motor’s speed in RPM.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作电压下的转速：电动机在 RPM 中的转速。
- en: Our example will use a small, inexpensive electric motor with a speed of 8,540
    RPM when running on 3 V, similar to the one shown in [Figure 14-5](#figure14-5).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例将使用一款小型且价格便宜的电动机，其在 3 V 下运行时的转速为 8,540 转/分钟，类似于[图 14-5](#figure14-5)中所示的电动机。
- en: '![f14005](image_fi/500587c14/f14005.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f14005](image_fi/500587c14/f14005.png)'
- en: 'Figure 14-5: Our small electric motor'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-5：我们的微型电动机
- en: To control our motor we’ll use a transistor, introduced in Chapter 3. Because
    our motor uses up to 0.7 A of current (more than can be passed by the BC548 transistor),
    we’ll use a transistor called a Darlington for this project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制电动机，我们将使用一个晶体管，详情见第 3 章。由于我们的电动机使用最多 0.7 A 的电流（超过 BC548 晶体管的承载能力），因此我们将在本项目中使用一个名为达林顿的晶体管。
- en: The TIP120 Darlington Transistor
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TIP120 达林顿晶体管
- en: A *Darlington transistor* is nothing more than two transistors connected together.
    It can handle high currents and voltages. The TIP120 Darlington can pass up to
    5 A of current at 60 V, which is more than enough to control our small motor.
    The TIP120 uses a similar schematic symbol as the BC548, as shown in [Figure 14-6](#figure14-6),
    but the TIP120 transistor is physically larger than the BC548.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*达林顿晶体管*不过是两个晶体管连接在一起。它能处理高电流和高电压。TIP120 达林顿晶体管能够通过最多 5 A 的电流，且工作电压为 60 V，足以控制我们的微型电动机。TIP120
    使用与 BC548 相似的电路符号，如[图 14-6](#figure14-6)所示，但 TIP120 晶体管的体积比 BC548 大。'
- en: '![f14006](image_fi/500587c14/f14006.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f14006](image_fi/500587c14/f14006.png)'
- en: 'Figure 14-6: TIP120 schematic symbol'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-6：TIP120 电路符号
- en: The TIP120 uses the TO-220 housing style, as shown in [Figure 14-7](#figure14-7).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: TIP120 使用 TO-220 外壳样式，如[图 14-7](#figure14-7)所示。
- en: '![f14007](image_fi/500587c14/f14007.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![f14007](image_fi/500587c14/f14007.png)'
- en: 'Figure 14-7: The TIP120'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-7：TIP120
- en: When you’re looking at the TIP120 from the labeled side, the pins from left
    to right are base (B), collector (C), and emitter (E). The metal heat sink tab
    is also connected to the collector.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从标记的一侧查看 TIP120 时，针脚从左到右分别是基极（B）、集电极（C）和发射极（E）。金属散热片也连接到集电极。
- en: 'Project #38: Controlling the Motor'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #38：控制电动机'
- en: In this project, we’ll control the motor by adjusting the speed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将通过调整电动机的速度来控制它。
- en: The Hardware
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要以下硬件：
- en: One small 3 V electric motor
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小型 3 V 电动机
- en: One 1 kΩ resistor (R1)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 1 kΩ 电阻（R1）
- en: One breadboard
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: One 1N4004 diode
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 1N4004 二极管
- en: One TIP120 Darlington transistor
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 TIP120 达林顿晶体管
- en: A separate 3 V power source
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单独的 3 V 电源
- en: Various connecting wires
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: You must use a separate power source for motors, because the Arduino cannot
    supply enough current for the motor in all possible situations. If the motor becomes
    stuck, then it will draw up to its *stall current*, which could be more than 1
    A. That’s more than the Arduino can supply, and if it attempts to supply that
    much current the Arduino could be permanently damaged.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 必须为电动机使用单独的电源，因为 Arduino 在所有情况下都无法提供足够的电流。如果电动机卡住，它将拉取其*卡死电流*，这可能超过 1 A。这超过了
    Arduino 所能提供的电流，如果 Arduino 尝试提供这么多电流，它可能会被永久损坏。
- en: A separate battery holder is a simple solution. For a 3 V supply, a two-cell
    AA battery holder with flying leads will suffice, such as the one shown in [Figure
    14-8](#figure14-8).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独的电池座是一个简单的解决方案。对于 3 V 电源，一个带飞线的两节 AA 电池座就足够了，如[图 14-8](#figure14-8)所示。
- en: '![f14008](image_fi/500587c14/f14008.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![f14008](image_fi/500587c14/f14008.png)'
- en: 'Figure 14-8: A two-cell AA battery holder'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-8：一个两节 AA 电池座
- en: The Schematic
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: Assemble the circuit as shown in the schematic in [Figure 14-9](#figure14-9).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 14-9](#figure14-9)中的电路图组装电路。
- en: '![f14009](image_fi/500587c14/f14009.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![f14009](image_fi/500587c14/f14009.png)'
- en: 'Figure 14-9: Schematic for Project 38'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-9：项目38的原理图
- en: The Sketch
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'In this project, we’ll adjust the speed of the motor from stopped (zero) to
    the maximum and then reduce it back to zero. Enter and upload the following sketch:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将调整电机的速度，从停止（零速）到最大速度，然后再减速回零。输入并上传以下草图：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We control the speed of the motor using pulse-width modulation (as demonstrated
    in Project 3 in Chapter 3). Recall that we can do this only with digital pins
    3, 5, 6, 9, 10, and 11\. Using this method, current is applied to the motor in
    short bursts: the longer the burst, the faster the speed, as the motor is on more
    than it is off during a set period of time. So at 1, the motor speed starts at
    zero and increases slowly; you can control the acceleration by changing the `delay`
    value at 2. At 3, the motor is running as fast as possible and holds that speed
    for 5 seconds. Then, from 4, the process reverses, and the motor slows to a stop.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过脉宽调制来控制电机的速度（如第3章项目3中所示）。回想一下，我们只能在数字引脚3、5、6、9、10和11上执行此操作。使用这种方法，电流会以短时脉冲的方式施加到电机上：脉冲持续时间越长，电机的速度越快，因为电机在设定的时间内“开启”的时间比“关闭”的时间多。因此，在1时，电机的速度从零开始，逐渐加速；你可以通过改变2处的`delay`值来控制加速。3时，电机以最快的速度运行并保持该速度5秒钟。然后，从4开始，过程反转，电机逐渐减速直至停止。
- en: The diode is used in the same way it was with the relay control circuit described
    in Figure 3-19 on page 42 to protect the circuit. When the current is switched
    off from the motor, stray current exists for a brief time inside the motor’s coil
    and has to go somewhere. The diode allows the stray current to loop around through
    the coil until it dissipates as a tiny amount of heat.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 二极管的使用方式与图3-19（第42页）中描述的继电器控制电路相同，用于保护电路。当电机的电流被切断时，电机线圈内会存在短暂的剩余电流，这些电流必须消耗掉。二极管允许这些剩余电流在电机线圈内循环，直到以微小的热量形式消散掉。
- en: Using Small Stepper Motors
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用小型步进电机
- en: Stepper motors are different from regular DC motors, in that they divide a full
    rotation of the motor into a fixed number of steps. They do this by using two
    coil windings that are independently controlled. So instead of controlling a rotation
    with varying voltage as with a regular DC motor, you instead turn on or off the
    coils in a stepper motor in a certain pattern to rotate the shaft in either direction
    a set number of times. This control makes steppers ideal for jobs that need precise
    motor positioning. They are quite commonly found in devices from computer printers
    to advanced manufacturing devices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机与普通直流电机的不同之处在于，它们将电机的完整旋转分为固定数量的步伐。它们通过使用两个独立控制的线圈绕组来实现这一点。因此，不同于通过改变电压来控制旋转的普通直流电机，步进电机通过按照一定模式打开或关闭线圈，旋转轴在任意方向上旋转设定次数。这种控制方式使得步进电机非常适合需要精确电机定位的任务。它们在从计算机打印机到先进制造设备等各种设备中都有广泛应用。
- en: We will demonstrate stepper motor operation using the model 28BYJ-48, as shown
    in [Figure 14-10](#figure14-10). This type of stepper motor can be controlled
    to rotate to one of 4,096 positions; that is, one full rotation is divided into
    4,096 steps.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用28BYJ-48型号的步进电机演示其操作，如[图14-10](#figure14-10)所示。这种步进电机可以控制电机转到4,096个位置之一；也就是说，一整圈的旋转被分为4,096步。
- en: '![f14010](image_fi/500587c14/f14010.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![f14010](image_fi/500587c14/f14010.png)'
- en: 'Figure 14-10: A stepper motor and controller board'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-10：步进电机及控制板
- en: The board next to the motor is used as an interface between your Arduino and
    the stepper motor, making connection easy and fast. It is usually supplied along
    with the stepper motor. A close-up is shown in [Figure 14-11](#figure14-11).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 电机旁边的板子作为Arduino与步进电机之间的接口，方便快捷地进行连接。通常它会和步进电机一起提供。它的特写图见[图14-11](#figure14-11)。
- en: '![f14011](image_fi/500587c14/f14011.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![f14011](image_fi/500587c14/f14011.png)'
- en: 'Figure 14-11: The stepper motor controller board'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-11：步进电机控制板
- en: Now to connect your stepper motor to the Arduino. Make the connections as shown
    in [Table 14-1](#table14-1).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将步进电机连接到Arduino。按照[表14-1](#table14-1)中的示意图进行连接。
- en: 'Table 14-1: Connections Between the Stepper Motor Controller Board and the
    Arduino'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-1：步进电机控制板与Arduino之间的连接
- en: '| **Control board pin label** | **Arduino pin** |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| **控制板引脚标签** | **Arduino引脚** |'
- en: '| --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| IN1 | D8 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| IN1 | D8 |'
- en: '| IN2 | D9 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| IN2 | D9 |'
- en: '| IN3 | D10 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| IN3 | D10 |'
- en: '| IN4 | D11 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| IN4 | D11 |'
- en: '| 5–12 V+ | 5 V |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 5–12 V+ | 5 V |'
- en: '| 5–12 V− | GND |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 5–12 V− | GND |'
- en: You can briefly run the stepper motor using power from your Arduino if nothing
    else is drawing power from the Arduino. However, this is not recommended. Instead,
    use an external 5 V power supply such as a plug pack or other convenient source.
    As the controller board doesn’t have a DC socket, you can use an external socket
    with terminal blocks to make easy, solderless connections, as shown in [Figure
    14-12](#figure14-12).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他设备从Arduino获取电源，你可以简单地使用Arduino提供的电源来运行步进电机。然而，这并不推荐。建议使用外部5V电源，如插头包或其他便捷的电源。由于控制板没有直流插座，你可以使用带端子块的外部插座来实现简便、免焊接的连接，如[图14-12](#figure14-12)所示。
- en: '![f14012](image_fi/500587c14/f14012.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![f14012](image_fi/500587c14/f14012.png)'
- en: 'Figure 14-12: DC socket terminal block'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-12：直流插座端子块
- en: You can then connect jumper wires from the + and – connectors on the terminal
    blocks to those on the stepper motor controller board. To simplify controlling
    the stepper motor in our Arduino sketches, you can use a neat Arduino library
    called CheapStepper. You can download it from [https://github.com/tyhenry/CheapStepper/archive/master.zip](https://github.com/tyhenry/CheapStepper/archive/master.zip)
    and install it using the method described in Chapter 7.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将跳线从端子块的+和–连接器连接到步进电机控制板的对应端子。为了简化在Arduino草图中控制步进电机，你可以使用一个叫做CheapStepper的简洁Arduino库。你可以从[https://github.com/tyhenry/CheapStepper/archive/master.zip](https://github.com/tyhenry/CheapStepper/archive/master.zip)下载它，并按照第7章中描述的方法安装。
- en: Once you have successfully installed the library and connected your stepper
    motor as described earlier, enter and upload [Listing 14-2](#listing14-2).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你成功安装了库并按照之前的描述连接了步进电机，就可以输入并上传[列表14-2](#listing14-2)。
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 14-2: Testing the stepper motor'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 列表14-2：测试步进电机
- en: 'Operation of the stepper motor is quite simple. We first include the library
    at 1 and create an instance of the motor at 2. (If you wish to change the digital
    pins used for the controller board, update them here.) The control function uses
    `true` and `false` for clockwise and counterclockwise rotation, respectively,
    so we assign these to Boolean variables at 3 to make things clearer. Finally,
    the motor can be instructed to rotate to one of the 4,096 positions using the
    function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机的操作非常简单。我们首先在第1行包含库，并在第2行创建电机的实例。（如果你希望更改控制板使用的数字引脚，请在此处更新。）控制函数使用`true`和`false`分别表示顺时针和逆时针旋转，因此我们在第3行将它们分配给布尔变量，以便更加清晰。最后，电机可以通过以下函数旋转到4,096个位置中的一个：
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: where the direction is either `clockwise` or `cclockwise` and the location is
    a value between 0 and 4,095\. This is done starting at 5 and repeatedly through
    the end of the sketch.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，方向要么是`顺时针`，要么是`逆时针`，位置是介于0和4,095之间的一个值。这个过程从5开始，并重复直到草图结束。
- en: 'Furthermore, in `void setup()` at 4, we set the motor’s rotational speed to
    20 RPM using:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`void setup()`的第4行中，我们通过以下代码将电机的转速设置为20 RPM：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is the recommended speed for our stepper motor. Other motors will vary,
    so you should check with the supplier for these details.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们步进电机的推荐速度。其他电机的速度可能不同，因此你应该向供应商咨询这些细节。
- en: A few moments after you upload the sketch, your stepper motor will start rotating
    to various positions, and you can see the commands echoed in the Serial Monitor,
    as shown in [Figure 14-13](#figure14-13).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你上传草图后不久，步进电机将开始旋转到不同的位置，你可以在串口监视器中看到回显的命令，如[图14-13](#figure14-13)所示。
- en: '![f14013](image_fi/500587c14/f14013.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![f14013](image_fi/500587c14/f14013.png)'
- en: 'Figure 14-13: Commands sent to the stepper motor'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-13：发送到步进电机的命令
- en: 'Project #39: Building and Controlling a Robot Vehicle'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#39：构建和控制机器人车辆
- en: Although controlling the speed of one DC motor can be useful, let’s move into
    more interesting territory by controlling four DC motors at once and affecting
    their speed *and* direction. Our goal is to construct a four-wheeled vehicle-style
    robot that we’ll continue to work on in the next few chapters. Here I’ll describe
    the construction and basic control of our robot.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管控制一个直流电机的速度非常有用，但让我们进入更有趣的领域，同时控制四个直流电机并影响它们的速度*和*方向。我们的目标是构建一个四轮车辆风格的机器人，接下来的章节中我们将继续开发它。在这里，我将描述我们的机器人构建和基本控制。
- en: Our robot has four motors that each control one wheel, allowing it to travel
    at various speeds as well as rotate in place. You will be able to control the
    speed and direction of travel, and you will also learn how to add parts to enable
    collision avoidance and remote control. Once you have completed the projects in
    this book, you will have a solid foundation for creating your own versions of
    this robot and bringing your ideas to life.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器人有四个电机，每个电机控制一个车轮，使其能够以不同的速度行驶并在原地旋转。你将能够控制行驶的速度和方向，还将学会如何添加零件来实现避障和远程控制。完成本书中的项目后，你将为创造自己的机器人版本并将创意付诸实践打下坚实的基础。
- en: The Hardware
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'You’ll need the following hardware :'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: Robot vehicle chassis with four DC motors and wheels
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配备四个直流电机和车轮的机器人车辆底盘
- en: Four-cell AA battery holder with wired output
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四节 AA 电池座（带有接线输出）
- en: Four alkaline AA cells
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四节碱性 AA 电池
- en: L293D Motor Drive Shield for Arduino
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L293D 电机驱动扩展板（适用于 Arduino）
- en: Arduino and USB cable
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: The Chassis
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 底盘
- en: The foundation of any robot is a solid chassis containing the motors, drivetrain,
    and power supply. An Arduino-powered robot also needs to have room to mount the
    Arduino and various external parts.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 任何机器人的基础都是一个坚固的底盘，包含电机、传动系统和电源。一个由 Arduino 驱动的机器人还需要有足够的空间来安装 Arduino 和各种外部部件。
- en: You can choose from many chassis models available on the market. To keep things
    simple, we’re using an inexpensive robot chassis that includes four small DC motors
    that operate at around 6 V DC and matching wheels, as shown in [Figure 14-14](#figure14-14).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从市面上众多的底盘模型中进行选择。为了简化操作，我们使用了一个价格便宜的机器人底盘，包含四个小型直流电机，工作电压大约为 6V DC，并配有相应的车轮，如
    [图 14-14](#figure14-14) 所示。
- en: '![f14014](image_fi/500587c14/f14014.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![f14014](image_fi/500587c14/f14014.png)'
- en: 'Figure 14-14: Our robot chassis'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-14：我们的机器人底盘
- en: The task of physically assembling the robot chassis will vary between models,
    and you may need a few basic tools such as screwdrivers and pliers. If you’re
    not sure about your final design but wish to get your robot moving, a favored
    technique is to hold the electronics to the chassis with sticky products such
    as Blu Tack.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人底盘的物理组装任务因模型不同而有所不同，你可能需要一些基本工具，如螺丝刀和钳子。如果你对最终设计不确定，但仍然希望让机器人开始移动，常用的一种技巧是使用粘性产品（如
    Blu Tack）将电子元件固定到底盘上。
- en: The Power Supply
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 电源
- en: The motors included with the robot chassis typically operate at around 6 V DC,
    so we’ll use a four-cell AA battery holder to power our robot, as shown in [Figure
    14-15](#figure14-15).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人底盘包含的电机通常工作在大约 6V DC，因此我们将使用一个四节 AA 电池座为机器人供电，如 [图 14-15](#figure14-15) 所示。
- en: '![f14015](image_fi/500587c14/f14015.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![f14015](image_fi/500587c14/f14015.png)'
- en: 'Figure 14-15: A battery holder for four AA cells'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-15：四节 AA 电池的电池座
- en: Some AA cell battery holders will not have the wiring needed to connect to our
    project and instead will have connections for a 9 V battery snap (as our unit
    in [Figure 14-15](#figure14-15) does). In this case, you’ll need a battery snap
    like the one in [Figure 14-16](#figure14-16).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 AA 电池座可能没有连接到我们项目所需的线路，而是配有 9V 电池卡扣的连接（如我们在 [图 14-15](#figure14-15) 中的单元所示）。在这种情况下，你需要像
    [图 14-16](#figure14-16) 中的电池卡扣一样的设备。
- en: '![f14016](image_fi/500587c14/f14016.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![f14016](image_fi/500587c14/f14016.png)'
- en: 'Figure 14-16: A battery cable used to connect the battery holder to the Arduino'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-16：用于将电池座连接到 Arduino 的电池线缆
- en: The Schematic
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: The final requirement is to create the circuitry to control the four motors
    in the chassis. Although we could use the circuitry shown in [Figure 14-9](#figure14-9)
    for each of the motors, this wouldn’t allow us to control the direction of the
    motors and could be somewhat inconvenient to wire up ourselves. Instead, we’ll
    use a *motor shield*. A motor shield contains the circuitry we need to handle
    the higher current drawn by the motors and accepts commands from the Arduino to
    control both the speed and direction of the motors. For our robot, we’ll use an
    L293D Motor Drive Shield for Arduino, as shown in [Figure 14-17](#figure14-17).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的要求是创建电路来控制底盘中的四个电机。虽然我们可以为每个电机使用 [图 14-9](#figure14-9) 中显示的电路，但这不能让我们控制电机的方向，且连接起来可能会稍显不便。相反，我们将使用一个*电机扩展板*。电机扩展板包含了处理电机所需的高电流的电路，并接受
    Arduino 发出的命令来控制电机的速度和方向。对于我们的机器人，我们将使用 L293D 电机驱动扩展板，如 [图 14-17](#figure14-17)
    所示。
- en: '![f14017](image_fi/500587c14/f14017.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![f14017](image_fi/500587c14/f14017.png)'
- en: 'Figure 14-17: An L293D Motor Drive Shield for Arduino'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-17：Arduino 的 L293D 电机驱动扩展板
- en: Connecting the Motor Shield
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接电机扩展板
- en: 'Making the required connections to the motor shield is simple: connect the
    wires from the battery holder to the terminal block at the bottom left of the
    shield, as shown in [Figure 14-18](#figure14-18). The black wire (negative) must
    be on the right side and the red wire on the left.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 连接电机扩展板所需的接线非常简单：将电池盒的电线连接到扩展板左下角的接线端子，如[图 14-18](#figure14-18)所示。黑色电线（负极）必须连接到右侧，红色电线连接到左侧。
- en: '![f14018](image_fi/500587c14/f14018.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![f14018](image_fi/500587c14/f14018.png)'
- en: 'Figure 14-18: DC power connection'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-18：直流电源连接
- en: Next you need to connect each DC motor to the motor shield. We’ll refer to the
    two DC motors at the front of the chassis as motor 2 (left) and motor 1 (right)
    and the two DC motors at the rear as motor 3 (left) and motor 4 (right). Each
    motor will have a red and a black wire, so connect them to the matching terminal
    blocks on the left-hand and right-hand side of the motor shield, as shown in [Figure
    14-19](#figure14-19).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来需要将每个直流电机连接到电机扩展板。我们将底盘前部的两个直流电机分别称为电机2（左）和电机1（右），底盘后部的两个直流电机分别称为电机3（左）和电机4（右）。每个电机都有一根红色和一根黑色电线，将它们连接到电机扩展板左侧和右侧相应的接线端子，如[图
    14-19](#figure14-19)所示。
- en: '![f14019](image_fi/500587c14/f14019.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![f14019](image_fi/500587c14/f14019.png)'
- en: 'Figure 14-19: Connecting the motors'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-19：连接电机
- en: When connecting the wires from the DC motors, note that the black wires are
    on the outside ends of the terminal blocks and the red wires are on the internal
    ends. Furthermore, each terminal block is labeled with our matching motor number
    (M1, M2, M3, and M4) for easy reference.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 连接直流电机的电线时，请注意黑色电线连接到接线端子的外侧，红色电线连接到内侧。此外，每个接线端子上都有相应的电机编号（M1、M2、M3和M4）以便参考。
- en: If your motor’s wires are not color coded, you may have to swap them after the
    first run to determine which way is forward or backward.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的电机电线没有颜色编码，可能需要在第一次运行后交换电线，以确定哪个方向是前进或后退。
- en: After you’ve connected the power and motor wires to the shield and the shield
    to your Arduino, the robot should look something like the one in [Figure 14-20](#figure14-20).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在将电源和电机电线连接到扩展板并将扩展板连接到Arduino后，机器人应该类似于[图 14-20](#figure14-20)所示的样子。
- en: '![f14020](image_fi/500587c14/f14020.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![f14020](image_fi/500587c14/f14020.png)'
- en: 'Figure 14-20: Our robot is ready for action!'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-20：我们的机器人准备好行动了！
- en: The Sketch
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: Now to get the robot moving. To simplify its operation, we first need to download
    and install the Arduino library for the motor drive shield. Follow the instructions
    outlined in Chapter 7\. In the Library Manager, find and then install the “Adafruit
    Motor Shield library by Adafruit.”
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始让机器人动起来。为了简化操作，我们首先需要下载并安装用于电机驱动扩展板的Arduino库。按照第7章中的说明操作。在库管理器中，找到并安装“Adafruit
    Motor Shield library by Adafruit”。
- en: After a moment, the Adafruit Motor Shield library v1 will appear. Click **Install**
    and wait for the library to be installed. You can then close the Library Manager
    window.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，Adafruit Motor Shield库v1会出现。点击**安装**并等待库安装完成。然后你可以关闭库管理器窗口。
- en: 'Now we’ll create some functions to operate our robot. Because two motors are
    involved, we’ll need four movements:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一些函数来操作我们的机器人。由于涉及到两个电机，我们需要四个动作：
- en: Forward motion
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前进运动
- en: Reverse motion
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向运动
- en: Rotate clockwise
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺时针旋转
- en: Rotate counterclockwise
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆时针旋转
- en: 'Thus, we’ll need four functions in our sketch to match our four movements:
    `goForward()`, `goBackward()`, `rotateLeft()`, and `rotateRight()`. Each accepts
    a value in milliseconds, which is the length of time required to operate the movement,
    and a PWM value between 0 and 255\. For example, to move forward for 2 seconds
    at full speed, we’d use `goForward(255,2000)`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要在草图中创建四个函数来匹配我们的四个动作：`goForward()`、`goBackward()`、`rotateLeft()`和`rotateRight()`。每个函数接受一个毫秒值，表示操作所需的时间，以及一个介于0到255之间的PWM值。例如，要以全速前进2秒，我们可以使用`goForward(255,2000)`。
- en: 'Enter and save the following sketch (but don’t upload it just yet):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并保存以下草图（但暂时不要上传）：
- en: '[PRE9]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Controlling the robot is easy thanks to the four custom functions in the sketch.
    Each custom function makes use of the library functions used to control a motor.
    Before you can use these functions, you need to create an instance for each motor,
    as shown at 1.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于草图中包含了四个自定义函数，因此控制机器人非常简单。每个自定义函数利用了用于控制电机的库函数。在使用这些函数之前，需要为每个电机创建一个实例，如1所示。
- en: 'The direction of travel for each motor is set using:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 每个电机的运动方向可以通过以下方式设置：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The value of `direction` is either `FORWARD`, `REVERSE`, or `RELEASE`, to set
    the motor’s rotational direction forward or backward or cut power to the motor,
    respectively.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`direction`的值可以是`FORWARD`（前进）、`REVERSE`（后退）或`RELEASE`（释放），分别表示设置电机的旋转方向为前进或后退，或切断电机的电源。'
- en: 'To set the speed of the motor, we use:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置电机的速度，我们使用：
- en: '[PRE11]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The value of `speed` is between `0` and `255`; it is the range of PWM used to
    control the rotational speed of the motor.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`speed`的值在`0`和`255`之间；它是用于控制电机转速的 PWM 范围。'
- en: 'Therefore, in each of our four custom functions at 2, we use the combination
    of the motor speed and directional controls to control all four motors at once.
    Each of the custom functions accepts two parameters: `speed` (our PWM value) and
    `duration` (the amount of time to run the motor).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们四个自定义函数中的每一个（见第 2 点）中，我们使用电机速度和方向控制的组合来同时控制四个电机。每个自定义函数接受两个参数：`speed`（我们的
    PWM 值）和`duration`（电机运行的时间）。
- en: Upload the sketch, remove the USB cable, and connect the battery cable to the
    Arduino power socket. Then place the robot on carpet or a clean surface and let
    it drive about. Experiment with the movement functions in the sketch to control
    your robot; this will help you become familiar with the time delays and how they
    relate to distance traveled.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图，移除 USB 电缆，然后将电池电缆连接到 Arduino 的电源插座。接着将机器人放在地毯或清洁的表面上，让它开始移动。通过实验草图中的运动功能来控制你的机器人，这将帮助你熟悉时间延迟以及它们与行驶距离的关系。
- en: Connecting Extra Hardware to the Robot
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接额外硬件到机器人
- en: Some motor drive shields for Arduino may not have stacking header sockets to
    enable you to put another shield on top, and they might not allow easy connection
    of wires from sensors, etc. In this case, you should use a *terminal shield* for
    Arduino, an example of which is shown in [Figure 14-21](#figure14-21).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Arduino 的电机驱动扩展板可能没有堆叠头插座，无法让你在上面再放一个扩展板，而且它们可能不方便连接传感器等设备的电线。在这种情况下，你应该使用适用于
    Arduino 的*端子扩展板*，其示例如[图 14-21](#figure14-21)所示。
- en: '![f14021](image_fi/500587c14/f14021.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![f14021](image_fi/500587c14/f14021.png)'
- en: 'Figure 14-21: A terminal shield for Arduino'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-21：Arduino 的端子扩展板
- en: Terminal shields allow for easy wiring of hardware or sensors to the Arduino’s
    input and output pins without any soldering, and they can also be used to build
    your own circuitry for more permanent uses later.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 端子扩展板可以方便地将硬件或传感器接入 Arduino 的输入和输出引脚，而无需焊接，并且它们还可以用于构建你自己的电路，方便以后做更多持久性的应用。
- en: Sensing Collisions
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碰撞检测
- en: 'Now that our robot can move, we can start to add sensors. These will tell the
    robot when it has bumped into something, or they will measure the distance between
    the robot and an object in its path so that it can avoid a crash. We’ll use three
    methods of collision avoidance: microswitches, infrared, and ultrasonic.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的机器人能够移动了，我们可以开始添加传感器。这些传感器将告诉机器人何时碰到障碍物，或者它们将测量机器人与路径中物体之间的距离，以便它能够避免碰撞。我们将使用三种碰撞避免方法：微动开关、红外线和超声波。
- en: 'Project #40: Detecting Robot Vehicle Collisions with a Microswitch'
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #40：使用微动开关检测机器人碰撞'
- en: A *microswitch* can act like the simple push button we used in Chapter 4, but
    the microswitch component is physically larger and includes a large metal bar
    that serves as the actuator (see [Figure 14-22](#figure14-22)).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*微动开关*可以像我们在第 4 章中使用的简单按钮一样工作，但微动开关的组件在物理上更大，并且包括一个作为执行器的大金属杆（见[图 14-22](#figure14-22)）。'
- en: '![f14022](image_fi/500587c14/f14022.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![f14022](image_fi/500587c14/f14022.png)'
- en: 'Figure 14-22: A microswitch'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-22：微动开关
- en: When using a microswitch, you connect one wire to the bottom contact and the
    other to the contact labeled NO (normally open) to ensure that current flows only
    when the bar is pressed. We’ll mount the microswitch on the front of our robot
    so that when the robot hits an object, the bar will be pressed, causing current
    to flow and making the robot reverse direction or take another action.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用微动开关时，你将一根电线连接到底部接触点，另一根电线连接到标有 NO（常开）的接触点，以确保电流只有在金属杆被按下时才会流动。我们将在机器人的前面安装微动开关，这样当机器人撞到物体时，金属杆就会被按下，导致电流流动，并使机器人改变方向或采取其他行动。
- en: The Schematic
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: The microswitch hardware is wired like a single push button, as shown in [Figure
    14-23](#figure14-23).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 微动开关硬件的接线方式类似于一个简单的按钮，如[图 14-23](#figure14-23)所示。
- en: '![f14023](image_fi/500587c14/f14023.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![f14023](image_fi/500587c14/f14023.png)'
- en: 'Figure 14-23: Schematic for Project 40'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-23：项目 40 的原理图
- en: The Sketch
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: We connect the microswitch to an interrupt port (digital pin 2). Although you
    might think we should have a function called by the interrupt to make the robot
    reverse for a few moments, that’s not possible, because the `delay()` function
    doesn’t operate inside functions called by interrupts. We must think a little
    differently in this case.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将微动开关连接到一个中断端口（数字引脚2）。虽然你可能认为我们应该有一个由中断调用的函数来让机器人倒退几秒钟，但这是不可能的，因为`delay()`函数无法在中断调用的函数内部运行。在这种情况下，我们必须换个思路。
- en: Instead, the function `goForward()` will turn on the motors if two conditions
    are met for the variables `crash` and the Boolean `move`. If `crash` is `true`,
    the motors will reverse at a slower speed for 2 seconds to back away from a collision
    situation.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，函数`goForward()`将在满足变量`crash`和布尔值`move`的两个条件时启动电机。如果`crash`为`true`，电机将在较慢的速度下反向2秒，以避开碰撞。
- en: We can’t use `delay()` because of the interrupt, so we measure the amount of
    time that the motors run by reading `millis()` at the start and comparing that
    against the current value of `millis()`. When the difference is greater than or
    equal to the required duration, `move` is set to `false` and the motors stop.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能使用`delay()`，因为有中断的存在，所以我们通过读取开始时的`millis()`值并与当前的`millis()`值进行比较来测量电机运行的时间。当差值大于或等于所需的持续时间时，`move`被设置为`false`，电机停止。
- en: 'Enter and upload the following sketch:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE12]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This sketch uses an advanced method of moving forward, in that two variables
    are used to monitor movement while the robot is in motion. The first is the Boolean
    variable `crash`. If the robot bumps into something and activates the microswitch,
    then an interrupt is called, which runs the function `backOut()` at 1. It is here
    that the variable `crash` is changed from `false` to `true`. The second variable
    that is monitored is the Boolean variable `move`. In the function `goForward()`,
    we use `millis()` at 2 to calculate constantly whether the robot has finished
    moving for the required period of time (set by the parameter `duration`).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图使用了一种高级的前进方法，即在机器人运动过程中使用两个变量来监控运动。第一个是布尔变量`crash`。如果机器人碰到某物并触发了微动开关，则会调用一个中断，运行第1步的函数`backOut()`。在这里，变量`crash`的值将从`false`更改为`true`。第二个被监控的变量是布尔变量`move`。在`goForward()`函数中，我们在第2步使用`millis()`不断计算机器人是否已完成所需时间（由参数`duration`设置）的移动。
- en: At 4, the function calculates whether the elapsed time is less than the required
    time, and if so, the variable `move` is set to `true`. Therefore, the robot is
    allowed to move forward only if it has not crashed and not run out of time. If
    a crash has been detected, the function `goBackward()` at 3 is called, at which
    point the robot will reverse slowly for 2 seconds and then resume as normal.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步，函数计算经过的时间是否小于所需时间，如果是，则变量`move`被设置为`true`。因此，机器人只有在没有发生碰撞且没有耗尽时间的情况下才能向前移动。如果检测到碰撞，第3步的函数`goBackward()`将被调用，此时机器人将慢慢后退2秒，然后恢复正常。
- en: Infrared Distance Sensors
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 红外距离传感器
- en: Our next method of collision avoidance uses an infrared (IR) distance sensor.
    This sensor bounces an infrared light signal off a surface in front of it and
    returns a voltage that is relative to the distance between the sensor and the
    surface. Infrared sensors are useful for collision detection because they are
    inexpensive, but they’re not ideal for *exact* distance measuring. We’ll use the
    Sharp GP2Y0A21YK0F analog sensor, shown in [Figure 14-24](#figure14-24), for our
    project.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一种避碰方法使用红外（IR）距离传感器。该传感器通过将红外光信号从其前方表面反射回来，并返回一个与传感器与表面之间的距离相关的电压值。红外传感器在避碰检测中非常有用，因为它们价格低廉，但并不适合*精确*的距离测量。我们将在项目中使用Sharp
    GP2Y0A21YK0F模拟传感器，如[图14-24](#figure14-24)所示。
- en: '![f14024](image_fi/500587c14/f14024.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![f14024](image_fi/500587c14/f14024.png)'
- en: 'Figure 14-24: The Sharp IR sensor'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-24：Sharp IR传感器
- en: Wiring It Up
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接线路
- en: To wire the sensor, connect the red and black wires on the sensor to 5 V and
    GND, respectively, with the white wire connecting to an analog input pin on your
    Arduino. We’ll use `analogRead()` to measure the voltage returned from the sensor.
    The graph in [Figure 14-25](#figure14-25) shows the relationship between the distance
    measured and the output voltage.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接传感器，将传感器上的红色和黑色线分别连接到5V和GND，白色线连接到你的Arduino的模拟输入引脚。我们将使用`analogRead()`来测量传感器返回的电压。[图14-25](#figure14-25)中的图表显示了测量的距离与输出电压之间的关系。
- en: '![f14025](image_fi/500587c14/f14025.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![f14025](image_fi/500587c14/f14025.png)'
- en: 'Figure 14-25: Graph of IR sensor distance versus output voltage'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-25：红外传感器距离与输出电压的图表
- en: Testing the IR Distance Sensor
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试红外距离传感器
- en: Because the relationship between distance and output is not easily represented
    with an equation, we’ll categorize the readings into 5 cm stages. To demonstrate
    this, we’ll use a simple example. Connect your infrared sensor’s white lead to
    analog pin 0, the red lead to 5 V, and the black lead to GND. Then enter and upload
    the sketch shown in [Listing 14-3](#listing14-3).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于距离和输出之间的关系无法通过公式简单表示，我们将把读数分成 5 cm 的阶段。为了演示这一点，我们将使用一个简单的示例。将红外传感器的白色引线连接到模拟引脚
    0，红色引线连接到 5 V，黑色引线连接到 GND。然后输入并上传 [Listing 14-3](#listing14-3) 中显示的草图。
- en: '[PRE13]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 14-3: IR sensor demonstration sketch'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 14-3：红外传感器演示草图
- en: The sketch reads the voltage from the IR sensor at 1 and then uses a series
    of `if` statements at 2 to choose which approximate distance is being returned.
    We determine the distance from the voltage returned by the sensor using two parameters.
    The first is the voltage-to-distance relationship, as displayed in [Figure 14-25](#figure14-25).
    Then, using the knowledge (from Project 6 in Chapter 4) that `analogRead()` returns
    a value between 0 and 1,023 relative to a voltage between 0 V and around 5 V,
    we can calculate the approximate distance returned by the sensor.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先读取红外传感器的电压，然后通过一系列的 `if` 语句来选择返回的近似距离。我们通过传感器返回的电压使用两个参数来确定距离。第一个是电压与距离的关系，如
    [图 14-25](#figure14-25) 所示。然后，利用知识（来自第 4 章的项目 6），`analogRead()` 返回一个介于 0 和 1,023
    之间的值，与 0 V 到大约 5 V 之间的电压成比例，我们可以计算出传感器返回的近似距离。
- en: After uploading the sketch, open the Serial Monitor and experiment by moving
    your hand or a piece of paper at various distances from the sensor. The Serial
    Monitor should return the approximate distance, as shown in [Figure 14-26](#figure14-26).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，打开串口监视器，尝试通过将手或纸张在不同的距离处移动来进行实验。串口监视器应返回近似的距离，如 [图 14-26](#figure14-26)
    所示。
- en: '![f14026](image_fi/500587c14/f14026.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![f14026](image_fi/500587c14/f14026.png)'
- en: 'Figure 14-26: Results of [Listing 14-3](#listing14-3)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-26：[Listing 14-3](#listing14-3) 的结果
- en: 'Project #41: Detecting Robot Vehicle Collisions with an IR Distance Sensor'
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #41：使用红外距离传感器检测机器人车辆碰撞'
- en: Now let’s use the IR sensor with our robot vehicle instead of the microswitch.
    We’ll use a slightly modified version of Project 40\. Instead of using an interrupt,
    we’ll create the function `checkDistance()`, which changes the variable `crash`
    to `true` if the distance measured by the IR sensor is around 20 cm or less. We’ll
    use this in the `goForward()` forward motion `do-while` loop.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用红外传感器替代微型开关，配合我们的机器人车。我们将使用一个略微修改过的第 40 项目版本。我们不使用中断，而是创建一个 `checkDistance()`
    函数，当红外传感器测量的距离大约为 20 cm 或更小时，将变量 `crash` 改为 `true`。我们将在 `goForward()` 前进动作的 `do-while`
    循环中使用它。
- en: The Sketch
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Connect the IR sensor to your robot and then enter and upload this sketch:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 将红外传感器连接到你的机器人，然后输入并上传以下草图：
- en: '[PRE14]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This sketch operates using the same methods used in Project 40, except this
    version constantly takes distance measurements at 1 and sets the `crash` variable
    to `true` if the distance between the IR sensor and an object is less than about
    20 cm.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图使用了与第 40 项目中相同的方法，唯一的区别是这个版本不断地在 1 处进行距离测量，并且如果红外传感器与物体之间的距离小于约 20 cm，就将
    `crash` 变量设置为 `true`。
- en: 'Modifying the Sketch: Adding More Sensors'
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改草图：添加更多传感器
- en: After running the robot and using this sensor, you should see the benefits of
    using a non-contact collision sensor. It’s simple to add more sensors to the same
    robot, such as sensors at the front and rear or at each corner. You should be
    able to add code to check each sensor in turn and make a decision based on the
    returned distance value.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行机器人并使用此传感器后，你应该能够看到使用非接触式碰撞传感器的好处。向同一机器人添加更多传感器也非常简单，例如在前后或每个角落安装传感器。你应该能够添加代码，逐一检查每个传感器，并根据返回的距离值做出决策。
- en: Ultrasonic Distance Sensors
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超声波距离传感器
- en: Our final method of collision avoidance uses an *ultrasonic distance sensor*.
    This sensor bounces a sound wave of an ultra-high frequency (that cannot be heard
    by the human ear) off a surface and measures the amount of time it takes for the
    sound to return to the sensor. We’ll use the common HC-SR04-type ultrasonic distance
    sensor, shown in [Figure 14-27](#figure14-27), for this project, because it’s
    inexpensive and accurate to around 2 cm.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终碰撞避免方法使用*超声波距离传感器*。该传感器将超高频声波（人耳无法听到的）从表面反射回来，并测量声音返回传感器所需的时间。我们将在这个项目中使用常见的HC-SR04型超声波距离传感器，如[图14-27](#figure14-27)所示，因为它价格便宜且精度高，约为2厘米。
- en: '![f14027](image_fi/500587c14/f14027.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![f14027](image_fi/500587c14/f14027.png)'
- en: 'Figure 14-27: The HC-SR04 ultrasonic distance sensor'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-27：HC-SR04超声波距离传感器
- en: An ultrasonic sensor’s accuracy and range mean it can measure distances between
    about 2 and 450 cm. However, because the sound wave needs to be reflected back
    to the sensor, the sensor must be angled less than 15 degrees away from the direction
    of travel.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 超声波传感器的准确性和范围意味着它可以测量大约2到450厘米之间的距离。然而，由于声波需要反射回传感器，传感器的角度必须与运动方向小于15度。
- en: Connecting the Ultrasonic Sensor
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接超声波传感器
- en: To connect the sensor, attach the Vcc (5 V) and GND leads to their connectors
    on the motor drive shield, attach the Trig pin to digital pin D2, and attach the
    Echo pin to digital pin D13\. We use D2 and D13 as they are not used by the motor
    drive shield. However, if you’re just testing or experimenting with the sensor
    without the robot, you can connect the wires directly to your Arduino board.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接传感器，将Vcc（5V）和GND引脚连接到电机驱动屏蔽板上的相应连接器，将Trig引脚连接到数字引脚D2，将Echo引脚连接到数字引脚D13。我们选择D2和D13是因为这些引脚不被电机驱动屏蔽板使用。不过，如果你只是单独测试或实验传感器而不使用机器人，可以直接将电线连接到Arduino板上。
- en: To simplify operation of the sensor, download the Arduino library from [https://github.com/Martinsos/arduino-lib-hc-sr04/archive/master.zip](https://github.com/Martinsos/arduino-lib-hc-sr04/archive/master.zip)
    and install it as explained in Chapter 7. Once the library is installed, you can
    run the test sketch in [Listing 14-4](#listing14-4) to see how the sensor works.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化传感器的操作，请从[https://github.com/Martinsos/arduino-lib-hc-sr04/archive/master.zip](https://github.com/Martinsos/arduino-lib-hc-sr04/archive/master.zip)下载Arduino库，并按照第7章的说明进行安装。安装完成后，你可以运行[列表14-4](#listing14-4)中的测试草图，查看传感器的工作效果。
- en: '[PRE15]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 14-4: Ultrasonic sensor demonstration sketch'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 列表14-4：超声波传感器演示草图
- en: Retrieving the distance from the sensor is quite simple thanks to the library.
    At 1, we create an instance and declare which digital pins are connected to the
    sensor. Then at 2, we have a floating-point variable used to store the distance
    returned from the sensor’s library function. Finally, the distance is generated
    at 3 for display in the Serial Monitor.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 由于库的帮助，从传感器中获取距离变得非常简单。在1中，我们创建了一个实例并声明与传感器连接的数字引脚。然后在2中，我们使用一个浮动变量来存储从传感器库函数返回的距离。最后，在3中，生成的距离会显示在串口监视器中。
- en: Testing the Ultrasonic Sensor
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试超声波传感器
- en: After uploading the sketch, open the Serial Monitor and move an object toward
    and away from the sensor. The distance to the object should be returned in centimeters.
    See how it works in [Figure 14-28](#figure14-28).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，打开串口监视器，并将物体靠近或移开传感器。传感器应返回物体的距离，单位为厘米。查看其工作原理，请参考[图14-28](#figure14-28)。
- en: '![f14028](image_fi/500587c14/f14028.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![f14028](image_fi/500587c14/f14028.png)'
- en: 'Figure 14-28: Results from [Listing 14-4](#listing14-4)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-28：[列表14-4](#listing14-4)中的测试结果
- en: 'Project #42: Detecting Collisions with an Ultrasonic Distance Sensor'
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#42：使用超声波距离传感器检测碰撞
- en: Now that you understand how the sensor works, let’s use it with our robot.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了传感器的工作原理，我们来将它与机器人一起使用。
- en: The Sketch
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'In the following sketch, we check for distances between the robot and an object
    of 5 cm or less, which will give the robot a reason to back up. Enter and upload
    the following sketch to see for yourself:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下草图中，我们检查机器人与物体之间的距离是否小于或等于5厘米，这将促使机器人后退。输入并上传以下草图，亲自体验：
- en: '[PRE16]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The operation of this sketch should be quite familiar by now. Once again, we
    constantly measure the distance at 1 and then change the variable `crash` to `true`
    if the distance between the ultrasonic sensor and an object in its path is less
    than 5 cm. Watching the robot magically avoid colliding with things or having
    a battle of wits with a pet can be quite amazing.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图的操作应该已经非常熟悉了。我们再次不断测量距离，当超声波传感器与路径中的物体之间的距离小于 5 厘米时，我们将变量 `crash` 更改为 `true`。看到机器人神奇地避开障碍物，或者和宠物进行智力较量，真的非常令人惊讶。
- en: Looking Ahead
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: In this chapter, you learned how to introduce your Arduino-based projects to
    the world of movement. Using simple motors, or pairs of motors, with a motor shield,
    you can create projects that can move on their own and even avoid obstacles. We
    used three types of sensors to demonstrate a range of accuracies and sensor costs,
    so you can now make decisions based on your requirements and project budget.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将基于 Arduino 的项目引入到运动的世界。通过使用简单的电机或一对电机，并配合电机扩展板，您可以创建能够自主移动甚至避开障碍物的项目。我们使用了三种类型的传感器，展示了不同的精度和传感器成本，因此您现在可以根据需求和项目预算做出决策。
- en: By now, I hope you are experiencing and enjoying the ability to design and construct
    such things. But it doesn’t stop here. In the next chapter, we move outdoors and
    harness the power of satellite navigation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我希望您已经体验并享受到了设计和构建这些项目的乐趣。但这还不止于此。在下一章中，我们将走到户外，利用卫星导航的力量。
