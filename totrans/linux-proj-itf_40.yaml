- en: Chapter 40. Login Accounting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Login accounting is concerned with recording which users are currently logged
    in to the system, and recording past logins and logouts. This chapter looks at
    the login accounting files and the library functions used to retrieve and update
    the information they contain. We also describe the steps that an application providing
    a login service should perform in order to update these files when a user logs
    in and out.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the `utmp` and `wtmp` Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'UNIX systems maintain two data files containing information about users logging
    in and out of the system:'
  prefs: []
  type: TYPE_NORMAL
- en: The `utmp` file maintains a record of users currently logged in to the system
    (as well as certain other information that we describe later). As each user logs
    in, a record is written to the `utmp` file. One of the fields in this record,
    *ut_user*, records the login name of the user. This record is later erased on
    logout. Programs such as *who(1)* use the information in the `utmp` file to display
    a list of currently logged-in users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `wtmp` file is an audit trail of all user logins and logouts (as well as
    certain other information that we describe later). On each login, a record containing
    the same information as is written to the `utmp` file is appended to the `wtmp`
    file. On logout, a further record is appended to the file. This record contains
    the same information, except that the *ut_user* field is zeroed out. The *last(1)*
    command can be used to display and filter the contents of the `wtmp` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux, the `utmp` file resides at `/var/run/utmp`, and the `wtmp` file resides
    at `/var/log/wtmp`. In general, applications don’t need to know about these pathnames,
    since they are compiled into *glibc*. Programs that do need to refer to the locations
    of these files should use the `_PATH_UTMP` and `_PATH_WTMP` pathname constants,
    defined in `<paths.h>` (and `<utmpx.h>`), rather than explicitly coding pathnames
    into the program.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SUSv3 doesn’t standardize any symbolic names for the pathnames of the `utmp`
    and `wtmp` files. The names `_PATH_UTMP` and `_PATH_WTMP` are used on Linux and
    the BSDs. Many other UNIX implementations instead define the constants `UTMP_FILE`
    and `WTMP_FILE` for these pathnames. Linux also defines these names in `<utmp.h>`,
    but doesn’t define them in `<utmpx.h>` or `<paths.h>`.
  prefs: []
  type: TYPE_NORMAL
- en: The *utmpx* API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `utmp` and `wtmp` files have been present in the UNIX system since early
    times, but underwent steady evolution and divergence across various UNIX implementations,
    especially BSD versus System V. System V Release 4 greatly extended the API, in
    the process creating a new (parallel) *utmpx* structure and associated `utmpx`
    and `wtmpx` files. The letter *x* was likewise included in the names of header
    files and additional functions for processing these new files. Many other UNIX
    implementations also added their own extensions to the API.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we describe the Linux *utmpx* API, which is a hybrid of the
    BSD and System V implementations. Linux doesn’t follow System V in creating parallel
    `utmpx` and `wtmpx` files; instead, the `utmp` and `wtmp` files contain all of
    the required information. However, for compatibility with other UNIX implementations,
    Linux provides both the traditional *utmp* and the System V-derived *utmpx* APIs
    for accessing the contents of these files. On Linux, these two APIs return exactly
    the same information. (One of the few differences between the two APIs is that
    the *utmp* API contains reentrant versions of a few functions, while the *utmpx*
    API does not.) However, we confine our discussion to the utmpx interface, since
    that is the API specified in SUSv3 and is thus preferred for portability to other
    UNIX implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The SUSv3 specification doesn’t cover all aspects of the `utmpx` API (e.g.,
    the locations of the `utmp` and `wtmp` files are not specified). The precise contents
    of the login accounting files differ somewhat across implementations, and various
    implementations provide additional login accounting functions that are not specified
    in SUSv3.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Chapter 17](ch17.html "Chapter 17. Access Control Lists") of [Frisch, 2002]
    summarizes some of the variations in the location and use of the `wtmp` and `utmp`
    files across different UNIX implementations. It also describes the use of the
    *ac(1)* command, which can be used to summarize login information from the `wtmp`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: The *utmpx* Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `utmp` and `wtmp` files consist of *utmpx* records. The *utmpx* structure
    is defined in `<utmpx.h>`, as shown in [Example 40-1](ch40.html#definition_of_the_utmpx_structure
    "Example 40-1. Definition of the utmpx structure").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SUSv3 specification of the *utmpx* structure doesn’t include the *ut_host*,
    *ut_exit*, *ut_session*, or *ut_addr_v6* fields. The *ut_host* and *ut_exit* fields
    are present on most other implementations; *ut_session* is present on a few other
    implementations; and *ut_addr_v6* is Linux-specific. SUSv3 specifies the *ut_line*
    and *ut_user* fields, but leaves their lengths unspecified.
  prefs: []
  type: TYPE_NORMAL
- en: The *int32_t* data type used to define the *ut_addr_v6* field of the *utmpx*
    structure is a 32-bit integer.
  prefs: []
  type: TYPE_NORMAL
- en: Example 40-1. Definition of the *utmpx* structure
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each of the string fields in the *utmpx* structure is null-terminated unless
    it completely fills the corresponding array.
  prefs: []
  type: TYPE_NORMAL
- en: For login processes, the information stored in the *ut_line* and *ut_id* fields
    is derived from the name of the terminal device. The *ut_line* field contains
    the complete filename of the terminal device. The *ut_id* field contains the suffix
    part of the filename—that is, the string following *tty*, *pts*, or *pty* (the
    last two are for System-V and BSD-style pseudoterminals, respectively). Thus,
    for the terminal `/dev/tty2`, *ut_line* would be *tty2* and *ut_id* would be *2*.
  prefs: []
  type: TYPE_NORMAL
- en: In a windowing environment, some terminal emulators use the *ut_session* field
    to record the session ID for the terminal window. (Refer to [Sessions](ch34.html#sessions
    "Sessions") for an explanation of session IDs.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The *ut_type* field is an integer defining the type of record being written
    to the file. The following set of constants (with their corresponding numeric
    values shown in parentheses) can be used as values for this field:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EMPTY` (0)'
  prefs: []
  type: TYPE_NORMAL
- en: This record doesn’t contain valid accounting information.
  prefs: []
  type: TYPE_NORMAL
- en: '`RUN_LVL` (1)'
  prefs: []
  type: TYPE_NORMAL
- en: This record indicates a change in the system’s run-level during system startup
    or shutdown. (Information about run-levels can be found in the *init(8)* manual
    page.) The `_GNU_SOURCE` feature test macro must be defined in order to obtain
    the definition of this constant from `<utmpx.h>`.
  prefs: []
  type: TYPE_NORMAL
- en: '`BOOT_TIME` (2)'
  prefs: []
  type: TYPE_NORMAL
- en: This record contains the time of system boot in the *ut_tv* field. The usual
    author of `RUN_LVL` and `BOOT_TIME` records is *init*. These records are written
    to both the `utmp` file and the `wtmp` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`NEW_TIME` (3)'
  prefs: []
  type: TYPE_NORMAL
- en: This record contains the new time after a system clock change, recorded in the
    *ut_tv* field.
  prefs: []
  type: TYPE_NORMAL
- en: '`OLD_TIME` (4)'
  prefs: []
  type: TYPE_NORMAL
- en: This record contains the old time before a system clock change, recorded in
    the *ut_tv* field. Records of type `OLD_TIME` and `NEW_TIME` are written to the
    `utmp` and `wtmp` files by the NTP (or a similar) daemon when it makes changes
    to the system clock.
  prefs: []
  type: TYPE_NORMAL
- en: '`INIT_PROCESS` (5)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a record for a process spawned by *init*, such as a *getty* process.
    Refer to the *inittab(5)* manual page for details.
  prefs: []
  type: TYPE_NORMAL
- en: '`LOGIN_PROCESS` (6)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a record for a session leader process for a user login, such as a *login(1)*
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '`USER_PROCESS` (7)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a record for a user process, usually a login session, with the username
    appearing in the *ut_user* field. The login session may have been started by *login(1)*
    or by some application offering a remote login facility, such as *ftp* or *ssh*.
  prefs: []
  type: TYPE_NORMAL
- en: '`DEAD_PROCESS` (8)'
  prefs: []
  type: TYPE_NORMAL
- en: This record identifies a process that has exited.
  prefs: []
  type: TYPE_NORMAL
- en: 'We show the numeric values of these constants because various applications
    depend on the constants having the above numerical order. For example, in the
    source code of the *agetty* program, we find checks such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Records of the type `INIT_PROCESS` usually correspond to invocations of *getty(8)*
    (or a similar program, such as *agetty(8)* or *mingetty(8)*). On system boot,
    the *init* process creates a child for each terminal line and virtual console,
    and each child execs the *getty* program. The *getty* program opens the terminal,
    prompts the user for a login name, and then execs *login(1)*. After successfully
    validating the user and performing various other steps, *login* forks a child
    that execs the user’s login shell. The complete life of such a login session is
    represented by four records written to the `wtmp` file in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: an `INIT_PROCESS` record, written by *init*;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a `LOGIN_PROCESS` record, written by *getty*;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a `USER_PROCESS` record, written by *login*; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a `DEAD_PROCESS` record, written by *init* when it detects the death of the
    child *login* process (which occurs on user logout).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further details on the operation of *getty* and *login* during user login can
    be found in [Chapter 9](ch09.html "Chapter 9. Process Credentials") of [Stevens
    & Rago, 2005].
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some versions of *init* spawn the *getty* process before updating the `wtmp`
    file. Consequently, *init* and *getty* race with each other to update the `wtmp`
    file, with the result that the `INIT_PROCESS` and `LOGIN_PROCESS` records may
    be written in the opposite order from that described in the main text.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Information from the `utmp` and `wtmp` Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The functions described in this section retrieve records from files containing
    *utmpx*-format records. By default, these functions use the standard `utmp` file,
    but this can be changed using the *utmpxname()* function (described below).
  prefs: []
  type: TYPE_NORMAL
- en: These functions employ the notion of a *current location* within the file from
    which they are retrieving records. This location is updated by each function.
  prefs: []
  type: TYPE_NORMAL
- en: The *setutxent()* function rewinds the `utmp` file to the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Normally, we should call *setutxent()* before employing any of the *getutx*()*
    functions (described below). This prevents possible confusion that might result
    if some third-party function that we have called has previously made use of these
    functions. Depending on the task being performed, it may also be necessary to
    call *setutxent()* again at appropriate points later in a program.
  prefs: []
  type: TYPE_NORMAL
- en: The *setutxent()* function and the *getutx*()* functions open the `utmp` file
    if it is not already open. When we have finished using the file, we can close
    it with the *endutxent()* function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The *getutxent()*, *getutxid()*, and *getutxline()* functions read a record
    from the `utmp` file and return a pointer to a (statically allocated) *utmpx*
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All return a pointer to a statically allocated *utmpx* structure, or `NULL`
    if no matching record or EOF was encountered
  prefs: []
  type: TYPE_NORMAL
- en: The *getutxent()* function retrieves the next sequential record from the `utmp`
    file. The *getutxid()* and *getutxline()* functions perform searches, starting
    from the current file location, for a record matching the criteria specified in
    the *utmpx* structure pointed to by the *ut* argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *getutxid()* function searches the `utmp` file for a record based on the
    values specified in the *ut_type* and *ut_id* fields of the *ut* argument:'
  prefs: []
  type: TYPE_NORMAL
- en: If the *ut_type* field is `RUN_LVL`, `BOOT_TIME`, `NEW_TIME`, or `OLD_TIME`,
    then *getutxid()* finds the next record whose *ut_type* field matches the specified
    value. (Records of these types don’t correspond to user logins.) This permits
    searches for records of changes to the system time and run-level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the *ut_type* field is one of the remaining valid values (`INIT_PROCESS`,
    `LOGIN_PROCESS`, `USER_PROCESS`, or `DEAD_PROCESS`), then *getutxent()* finds
    the next record whose *ut_type* field matches *any* of these values and whose
    *ut_id* field matches that specified in its *ut* argument. This permits scanning
    the file for records corresponding to a particular terminal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *getutxline()* function searches forward for a record whose *ut_type* field
    is either `LOGIN_PROCESS` or `USER_PROCESS`, and whose *ut_line* field matches
    that specified in the *ut* argument. This is useful for finding records corresponding
    to user logins.
  prefs: []
  type: TYPE_NORMAL
- en: Both *getutxid()* and *getutxline()* return `NULL` if the search fails (i.e.,
    end-of-file is encountered without finding a matching record).
  prefs: []
  type: TYPE_NORMAL
- en: 'On some UNIX implementations, *getutxline()* and *getutxid()* treat the static
    area used for returning the *utmpx* structure as a kind of cache. If they determine
    that the record placed in this cache by a previous *getutx*()* call matches the
    criteria specified in ut, then no file read is performed; the call simply returns
    the same record once more (SUSv3 permits this behavior). Therefore, to prevent
    the same record from being repeatedly returned when calling *getutxline()* and
    *getutxid()* within a loop, we must zero out this static data structure, using
    code such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The *glibc* implementation doesn’t perform this type of caching, but we should
    nevertheless employ this technique for the sake of portability.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because the *getutx*()* functions return a pointer to a statically allocated
    structure, they are not reentrant. The GNU C library provides reentrant versions
    of the traditional *utmp* functions (*getutent_r()*, *getutid_r()*, and *getutline_r()*),
    but doesn’t provide reentrant versions of their *utmpx* counterparts. (SUSv3 doesn’t
    specify the reentrant versions.)
  prefs: []
  type: TYPE_NORMAL
- en: By default, all of the *getutx*()* functions work on the standard `utmp` file.
    If we want to use another file, such as the `wtmp` file, then we must first call
    *utmpxname()*, specifying the desired pathname.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns 0 on success, or -1 on error
  prefs: []
  type: TYPE_NORMAL
- en: The *utmpxname()* function merely records a copy of the pathname given to it.
    It doesn’t open the file, but does close any file previously opened by one of
    the other calls. This means that *utmpxname()* doesn’t return an error if an invalid
    pathname is specified. Instead, when one of the *getutx*()* functions is later
    called, it will return an error (i.e., `NULL`, with *errno* set to `ENOENT`) when
    it fails to open the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although not specified in SUSv3, most UNIX implementations provide *utmpxname()*
    or the analogous *utmpname()* function.
  prefs: []
  type: TYPE_NORMAL
- en: Example program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file") uses some of the
    functions described in this section to dump the contents of a *utmpx*-format file.
    The following shell session log demonstrates the results when we use this program
    to dump the contents of `/var/run/utmp` (the default used by these functions if
    *utmpxname()* is not called):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For brevity, we edited out much of the output produced by the program. The lines
    matching `tty1` to `tty5` are for logins on virtual consoles (`/dev/tty[1-6]`).
    The last line of output is for an *xterm* session on a pseudoterminal.
  prefs: []
  type: TYPE_NORMAL
- en: The following output produced by dumping `/var/log/wtmp` shows that when a user
    logs in and out, two records are written to the `wtmp` file. (We edited out all
    of the other output produced by the program.) By searching sequentially through
    the `wtmp` file (using *getutxline()*), these records can be matched via the *ut_line*
    field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Example 40-2. Displaying the contents of a *utmpx*-format file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving the Login Name: *getlogin()*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *getlogin()* function returns the name of the user logged in on the controlling
    terminal of the calling process. This function uses the information maintained
    in the `utmp` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns pointer to username string, or `NULL` on error
  prefs: []
  type: TYPE_NORMAL
- en: The *getlogin()* function calls *ttyname()* ([Terminal Identification](ch62.html#terminal_identification
    "Terminal Identification")) to find the name of the terminal associated with the
    calling process’s standard input. It then searches the `utmp` file for a record
    whose *ut_line* value matches this terminal name. If a matching record is found,
    then *getlogin()* returns the *ut_user* string from that record.
  prefs: []
  type: TYPE_NORMAL
- en: If a match is not found or an error occurs, then *getlogin()* returns `NULL`
    and sets *errno* to indicate the error. One reason *getlogin()* may fail is that
    the process doesn’t have a terminal associated with its standard input (`ENOTTY`),
    perhaps because it is daemon. Another possibility is that this terminal session
    is not recorded in `utmp`; for example, some software terminal emulators don’t
    create entries in the `utmp` file.
  prefs: []
  type: TYPE_NORMAL
- en: Even in the (unusual) case where a user ID has multiple login names in `/etc/passwd`,
    *getlogin()* is able to return the actual username that was used to log in on
    this terminal because it relies on the `utmp` file. By contrast, using *getpwuid(getuid())*
    always retrieves the first matching record from `/etc/passwd`, regardless of the
    name that was used to log in.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A reentrant version of *getlogin()* is specified by SUSv3, in the form of *getlogin_r()*,
    and this function is provided by *glibc*.
  prefs: []
  type: TYPE_NORMAL
- en: The `LOGNAME` environment variable can also be used to find a user’s login name.
    However, the value of this variable can be changed by the user, which means that
    it can’t be used to securely identify a user.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the `utmp` and `wtmp` Files for a Login Session
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When writing an application that creates a login session (in the manner of,
    say, *login* or *sshd*), we should update the `utmp` and `wtmp` files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On login, a record should be written to the `utmp` file to indicate that this
    user logged in. The application must check whether a record for this terminal
    already exists in the `utmp` file. If a previous record exists, it is overwritten;
    otherwise, a new record is appended to the file. Often, calling *pututxline()*
    (described shortly) is enough to ensure that these steps are correctly performed
    (see [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files") for an example). The output *utmpx* record should have
    at least the *ut_type*, *ut_user*, *ut_tv*, *ut_pid*, *ut_id*, and *ut_line* fields
    filled in. The *ut_type* field should be set to `USER_PROCESS`. The *ut_id* field
    should contain the suffix of the name of the device (i.e., the terminal or pseudoterminal)
    on which the user is logging in, and the *ut_line* field should contain the name
    of the login device, with the leading `/dev/` string removed. (Examples of the
    contents of these two fields are shown in the sample runs of the program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file").) A record containing
    exactly the same information is appended to the `wtmp` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The terminal name acts (via the *ut_line* and *ut_id* fields) as a unique key
    for records in the `utmp` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On logout, the record previously written to the `utmp` file should be erased.
    This is done by creating a record with *ut_type* set to `DEAD_PROCESS`, and with
    the same *ut_id* and *ut_line* values as the record written during login, but
    with the *ut_user* field zeroed out. This record is written over the earlier record.
    A copy of the same record is appended to the `wtmp` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If we fail to clean up the *utmp* record on logout, perhaps because of a program
    crash, then, on the next reboot, *init* automatically cleans up the record, setting
    its *ut_type* to `DEAD_PROCESS` and zeroing out various other fields of the record.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `utmp` and `wtmp` files are normally protected so that only privileged users
    can perform updates on these files. The accuracy of *getlogin()* depends on the
    integrity of the `utmp` file. For this, as well as other reasons, the permissions
    on the `utmp` and `wtmp` files should never be set to allow writing by unprivileged
    users.
  prefs: []
  type: TYPE_NORMAL
- en: What qualifies as a login session? As we might expect, logins via *login*, *telnet*,
    and *ssh* are recorded in the login accounting files. Most *ftp* implementations
    also create login accounting records. However, are login accounting records created
    for each terminal window started on the system or for invocations of *su*, for
    example? The answer to that question varies across UNIX implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Under some terminal emulator programs (e.g., *xterm*), command-line options
    or other mechanisms can be used to determine whether the program updates the login
    accounting files.
  prefs: []
  type: TYPE_NORMAL
- en: The *pututxline()* function writes the *utmpx* structure pointed to by *ut*
    into the `/var/run/utmp` file (or an alternative file if *utmpxname()* was previously
    called).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns pointer to copy of successfully updated record on success, or `NULL`
    on error
  prefs: []
  type: TYPE_NORMAL
- en: Before writing the record, *pututxline()* first uses *getutxid()* to search
    forward for a record that may be overwritten. If such a record is found, it is
    overwritten; otherwise, a new record is appended to the end of the file. In many
    cases, an application precedes a call to *pututxline()* by a call to one of the
    *getutx*()* functions, which sets the current file location to the correct record—that
    is, one matching the *getutxid()*-style criteria in the *utmpx* structure pointed
    to by *ut*. If *pututxline()* determines that this has occurred, it doesn’t call
    *getutxid()*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If *pututxline()* makes an internal call to *getutxid()*, this call doesn’t
    change the static area used by the *getutx*()* functions to return the *utmpx*
    structure. SUSv3 requires this behavior from an implementation.
  prefs: []
  type: TYPE_NORMAL
- en: When updating the `wtmp` file, we simply open the file and append a record to
    it. Because this is a standard operation, *glibc* encapsulates it in the *updwtmpx()*
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The *updwtmpx()* function appends the *utmpx* record pointed to by *ut* to the
    file specified in *wtmpx_file*.
  prefs: []
  type: TYPE_NORMAL
- en: SUSv3 doesn’t specify *updwtmpx()*, and it appears on only a few other UNIX
    implementations. Other implementations provide related functions—*login(3)*, *logout(3)*,
    and *logwtmp(3)*—which are also in *glibc* and described in the manual pages.
    If such functions are not present, we need to write our own equivalents. (The
    implementation of these functions is not complex.)
  prefs: []
  type: TYPE_NORMAL
- en: Example program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files") uses the functions described in this section to update
    the `utmp` and `wtmp` files. This program performs the required updates to `utmp`
    and `wtmp` in order to log in the user named on the command line, and then, after
    sleeping a few seconds, log them out again. Normally, such actions would be associated
    with the creation and termination of a login session for a user. This program
    uses *ttyname()* to retrieve the name of the terminal device associated with a
    file descriptor. We describe *ttyname()* in [Terminal Identification](ch62.html#terminal_identification
    "Terminal Identification").'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shell session log demonstrates the operation of the program in
    [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files"). We assume privilege in order to be able to update the
    login accounting files, and then use the program to create a record for the user
    *mtk*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'While the *utmpx_login* program was sleeping, we typed *Control-Z* to suspend
    the program and push it into the background. Next, we use the program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file") to examine the
    contents of the `utmp` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Above, we used the *who(1)* command to show that the output of *who* derives
    from *utmp*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we use our program to examine the contents of the `wtmp` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Above, we used the *last(1)* command to show that the output of last derives
    from `wtmp`. (For brevity, we have edited the output of the *dump_utmpx* and *last*
    commands in this shell session log to remove lines of output that are irrelevant
    to our discussion.)
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use the *fg* command to resume the *utmpx_login* program in the foreground.
    It subsequently writes logout records to the `utmp` and `wtmp` files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We then once more examine the contents of the `utmp` file. We see that the
    `utmp` record was overwritten:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The final line of output shows that *who* ignored the `DEAD_PROCESS` record.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we examine the `wtmp` file, we see that the `wtmp` record was superseded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The final line of output above demonstrates that *last* matches the login and
    logout records in `wtmp` to show the starting and ending times of the completed
    login session.
  prefs: []
  type: TYPE_NORMAL
- en: Example 40-3. Updating the `utmp` and `wtmp` files
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `lastlog` File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `lastlog` file records the time each user last logged in to the system.
    (This is different from the `wtmp` file, which records all logins and logouts
    by all users.) Among other things, the `lastlog` file allows the *login* program
    to inform users (at the start of a new login session) when they last logged in.
    In addition to updating `utmp` and `wtmp`, applications providing login services
    should also update `lastlog`.
  prefs: []
  type: TYPE_NORMAL
- en: As with the `utmp` and `wtmp` files, there is variation in the location and
    format of the `lastlog` file. (A few UNIX implementations don’t provide this file.)
    On Linux, this file resides at `/var/log/lastlog`, and a constant, `_PATH_LASTLOG`,
    is defined in `<paths.h>` to point to this location. Like the `utmp` and `wtmp`
    files, the `lastlog` file is normally protected so that it can be read by all
    users but can be updated only by privileged processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The records in the `lastlog` file have the following format (defined in `<lastlog.h>`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that these records don’t include a username or user ID. Instead, the `lastlog`
    file consists of a series of records that are indexed by user ID. Thus, to find
    the `lastlog` record for user ID 1000, we would seek to byte *(1000 * sizeof(struct
    lastlog))* of the file. This is demonstrated in [Example 40-4](ch40.html#displaying_information_from_the_lastlog
    "Example 40-4. Displaying information from the lastlog file"), a program that
    allows us to view the `lastlog` records for the user(s) listed on its command
    line. This is similar to the functionality offered by the *lastlog(1)* command.
    Here is an example of the output produced by running this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Performing updates on `lastlog` is similarly a matter of opening the file, seeking
    to the correct location, and performing a write.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since the `lastlog` file is indexed by user ID, it is not possible to distinguish
    logins under different usernames that have the same user ID. (In [The Password
    File: `/etc/passwd`](ch08.html#the_password_file_colon__solidus_etc_sol "The Password
    File: /etc/passwd"), we noted that it is possible, though unusual, to have multiple
    login names with the same user ID.)'
  prefs: []
  type: TYPE_NORMAL
- en: Example 40-4. Displaying information from the `lastlog` file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Login accounting records the users currently logged in, as well as all past
    logins. This information is maintained in three files: the `utmp` file, which
    maintains a record of all currently logged-in users; the `wtmp` file, which is
    an audit trail of all logins and logouts; and the `lastlog` file, which records
    the time of last login for each user. Various commands, such as *who* and *last*,
    use the information in these files.'
  prefs: []
  type: TYPE_NORMAL
- en: The C library provides functions to retrieve and update the information in the
    login accounting files. Applications providing login services should use these
    functions to update the login accounting files, so that commands depending on
    this information operate correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Aside from the *utmp(5)* manual page, the most useful place to find further
    information about the login accounting functions is in the source code of the
    various applications that use these functions. See, for example, the sources of
    *mingetty* (or *agetty*), *login*, *init*, *telnet*, *ssh*, and *ftp*.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Implement *getlogin()*. As noted in [Retrieving the Login Name: *getlogin()*](ch40.html#retrieving_the_login_name_colon_getlogin
    "Retrieving the Login Name: getlogin()"), *getlogin()* may not work correctly
    for processes running under some software terminal emulators; in that case, test
    from a virtual console instead.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the program in [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp
    "Example 40-3. Updating the utmp and wtmp files") (`utmpx_login.c`) so that it
    updates the `lastlog` file in addition to the `utmp` and `wtmp` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the manual pages for *login(3)*, *logout(3)*, and *logwtmp(3)*. Implement
    these functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement a simple version of *who(1)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
