- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 8 SLIDESHOW PRESENTATIONS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you need to create a slideshow pre- sentation, like one you might create
    in PowerPoint, R has you covered. In this chapter, you’ll learn how to produce
    pre- sentations using xaringan. This package, which uses R Markdown, is the most
    widely used tool for creating slideshows in R.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use xaringan to turn the penguin report from [Chapter 6](chapter6.xhtml)
    into a slideshow. You’ll learn how to create new slides, selectively reveal content,
    adjust text and image alignment, and style your presentation with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Why Use xaringan?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have noticed the Presentation option while creating a new R Markdown
    document in RStudio. This option offers several ways to make slides, such as knitting
    an R Markdown document to PowerPoint. However, using the xaringan package provides
    advantages over these options.
  prefs: []
  type: TYPE_NORMAL
- en: For example, because xaringan creates slides as HTML documents, you can post
    them online versus having to email them or print them out for viewers. You can
    send someone the presentation simply by sharing a link. [Chapter 9](chapter9.xhtml)
    will discuss ways to publish your presentations online.
  prefs: []
  type: TYPE_NORMAL
- en: A second benefit of using xaringan is accessibility. HTML documents are easy
    to manipulate, giving viewers control over their appearance. For example, people
    with limited vision can access HTML documents in ways that allow them to view
    the content, such as by increasing the text size or using screen readers. Making
    presentations with xaringan lets more people engage with your slides.
  prefs: []
  type: TYPE_NORMAL
- en: How xaringan Works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get started with xaringan, run install.packages("xaringan") in RStudio to
    install the package. Next, navigate to **File****New File****R Markdown** to
    create a new project. Choose the **From Template** tab and select the template
    called **Ninja Presentation**, then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get an R Markdown document containing some default content. Delete
    this and add the penguin R report you created in [Chapter 6](chapter6.xhtml).
    Then, change the output format in the YAML to xaringan::moon_reader like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The moon_reader output format takes R Markdown documents and knits them as slides.
    Try clicking **Knit** to see what this looks like. You should get an HTML file
    with the same name as the R Markdown document (such as *xaringan-example.xhtml*),
    as shown in [Figure 8-1](chapter8.xhtml#fig8-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-1: The xaringan package automatically generates a title slide.'
  prefs: []
  type: TYPE_NORMAL
- en: If you scroll to the next slide with the right arrow key, you should see familiar
    content. [Figure 8-2](chapter8.xhtml#fig8-2) shows the second slide, which has
    the same text as the report from [Chapter 6](chapter6.xhtml) and a cut-off version
    of its histogram.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-2: The second slide needs adjustment, as the histogram is cut off.'
  prefs: []
  type: TYPE_NORMAL
- en: Although the syntax for making slides with xaringan is nearly identical to that
    used to make reports with R Markdown, you need to make a few tweaks so that the
    content can fit on the slides. When you’re working in a document that will be
    knitted to Word, its length doesn’t matter, because reports can have 1 page or
    100 pages. Working with xaringan, however, requires you to consider how much content
    can fit on a single slide. The cut-off histogram demonstrates what happens if
    you don’t. You’ll fix it next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New Slide
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll make this histogram fully visible by putting it in its own slide. To
    make a new slide, add three dashes (---) where you’d like it to begin. I’ve added
    them before the histogram code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When you knit the document again, what was one slide should now be broken into
    two: an Introduction slide and a Bill Length slide. However, if you look closely,
    you’ll notice that the bottom of the histogram is still slightly cut off. To correct
    this, you’ll change its size.'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Size of Figures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Adjust the size of the histogram using the code chunk option fig.height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]{r **fig.height = 4**}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Doing this fits the histogram fully on the slide and also reveals the text that
    was hidden below it. Keep in mind that fig.height adjusts only the figure’s output
    height; sometimes you may need to adjust the output width using fig.width in addition
    or instead.
  prefs: []
  type: TYPE_NORMAL
- en: Revealing Content Incrementally
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When presenting a slideshow, you might want to show only a portion of the content
    on each slide at a time. Say, for example, that when you’re presenting the first
    slide, you want to talk a bit about each penguin species. Rather than show all
    three species when you open this slide, you might prefer to have the names come
    up one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this using a feature xaringan calls *incremental reveal*. Place
    two dashes (--) between any content you want to display incrementally, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code lets you show Adelie onscreen first; then Adelie and Gentoo; and then
    Adelie, Gentoo, and Chinstrap.
  prefs: []
  type: TYPE_NORMAL
- en: When presenting your slides, use the right arrow to incrementally reveal the
    species.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning Content with Content Classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll also likely want to control how your content is aligned. To do so, you
    add the *content classes* .left[], .right[], and .center[] to specify the desired
    alignment for a piece of content. For example, to center-align the histogram,
    use .center[] as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]{r fig.height = 4}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This code centers the chart on the slide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other built-in options can make two-column layouts. Adding .pull-left[] and
    .pull-right[] will make two equally spaced columns. Use the following code to
    display the histogram on the left side of the slide and the accompanying text
    on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]{r fig.height = 4}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: average_bill_length <- penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: summarize(avg_bill_length = mean(bill_length_mm,
  prefs: []
  type: TYPE_NORMAL
- en: na.rm = TRUE)) %>%
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pull(avg_bill_length)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 8-3](chapter8.xhtml#fig8-3) shows the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-3: A slide with two columns of equal size'
  prefs: []
  type: TYPE_NORMAL
- en: To make a narrow left column and wide right column, use the content classes
    .left-column[] and .right-column[]. [Figure 8-4](chapter8.xhtml#fig8-4) shows
    what the slide looks like with the text on the left and the histogram on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-4: A slide with a smaller left column and a larger right column'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to aligning particular pieces of content on slides, you can also
    horizontally align the entire content using the left, right, and center classes.
    To do so, specify the class right after the three dashes that indicate a new slide,
    but before any content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]{r fig.height = 4}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code produces a horizontally centered slide. To adjust the vertical position,
    you can use the classes top, middle, and bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Background Images to Slides
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using the same syntax you just used to center the entire slide, you can also
    add a background image. Create a new slide, use the classes center and middle
    to horizontally and vertically align the content, and add a background image by
    specifying the path to the image within the parentheses of url():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To run this code, you’ll need a file called *penguins.jpg* in your project (you
    can download it at *[https://data.rfortherestofus.com/penguins.jpg](https://data.rfortherestofus.com/penguins.jpg)*).
    Knitting the document should produce a slide that uses this image as a background
    with the text *Penguins* in front of it, as shown in [Figure 8-5](chapter8.xhtml#fig8-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-5: A slide that uses a background image'
  prefs: []
  type: TYPE_NORMAL
- en: Now you’ll add custom CSS to further improve this slide.
  prefs: []
  type: TYPE_NORMAL
- en: Applying CSS to Slides
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One issue with the slide you just made is that the word *Penguins* is hard
    to read. It would be better if you could make the text bigger and a different
    color. To do this, you’ll need to use *Cascading Style Sheets (CSS)*, the language
    used to style HTML documents. If you’re thinking, *I’m reading this book to learn
    R, not CSS*, don’t worry: you’ll need only a bit of CSS to make tweaks to your
    slides. To apply them, you can write your own custom code, use a CSS theme, or
    combine the two approaches using the xaringanthemer package.'
  prefs: []
  type: TYPE_NORMAL
- en: Custom CSS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add custom CSS, create a new code chunk and place css between the curly
    brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]{css}'
  prefs: []
  type: TYPE_NORMAL
- en: '**.remark-slide-content h2 {**'
  prefs: []
  type: TYPE_NORMAL
- en: '**font-size: 150px;**'
  prefs: []
  type: TYPE_NORMAL
- en: '**color: white;**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This code chunk tells R Markdown to make the second-level header (h2) 150 pixels
    large and white. Adding .remark-slide-content before the header targets specific
    elements in the presentation. The term *remark* comes from *remark.js*, a JavaScript
    library for making presentations that xaringan uses under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the font in addition to the text’s size and color, add this CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]{css}'
  prefs: []
  type: TYPE_NORMAL
- en: '**@import url(''https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap'');**'
  prefs: []
  type: TYPE_NORMAL
- en: .remark-slide-content h2 {
  prefs: []
  type: TYPE_NORMAL
- en: 'font-size: 150px;'
  prefs: []
  type: TYPE_NORMAL
- en: 'color: white;'
  prefs: []
  type: TYPE_NORMAL
- en: '**font-family: Inter;**'
  prefs: []
  type: TYPE_NORMAL
- en: '**font-weight: bold;**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The first new line makes a font called Inter available to the slides, because
    some people might not have the font installed on their computers. Next, this code
    applies Inter to the header and makes it bold. You can see the slide with bold
    Inter font in [Figure 8-6](chapter8.xhtml#fig8-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-6: The title slide with CSS changes to the font'
  prefs: []
  type: TYPE_NORMAL
- en: Because xaringan slides are built as HTML documents, you can customize them
    with CSS however you’d like. The sky’s the limit!
  prefs: []
  type: TYPE_NORMAL
- en: Themes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You may not care to know the ins and outs of CSS. Fortunately, you can customize
    your slides in two ways without writing any CSS yourself. The first way is to
    apply xaringan themes created by other R users. Run this code to get a list of
    all available themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Some CSS files change fonts only, while others change general elements, such
    as text size, colors, and whether slide numbers are displayed. Using prebuilt
    themes usually requires you to use both a general theme and a fonts theme, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This code tells xaringan to use the default CSS, as well as customizations made
    in the metropolis and metropolis-fonts CSS themes. These come bundled with xaringan,
    so you don’t need to install any additional packages to access them. [Figure 8-7](chapter8.xhtml#fig8-7)
    shows how the theme changes the look and feel of the slides.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig8-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-7: A slide using the metropolis theme'
  prefs: []
  type: TYPE_NORMAL
- en: If writing custom CSS is the totally flexible but more challenging option for
    tweaking your xaringan slides, then using a custom theme is simpler but a lot
    less flexible. Custom themes allow you to easily use others’ prebuilt CSS but
    not to tweak it further.
  prefs: []
  type: TYPE_NORMAL
- en: The xaringanthemer Package
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A nice middle ground between writing custom CSS and applying someone else’s
    theme is to use the xaringanthemer package by Garrick Aden-Buie. This package
    includes several built-in themes but also allows you to easily create your own
    custom theme. After installing the package, adjust the css line in your YAML to
    use the *xaringan-themer.css* file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can customize your slides by using the style_xaringan() function. This
    function has over 60 arguments, enabling you to tweak nearly any part of your
    xaringan slides. To replicate the custom CSS you wrote earlier in this chapter
    using xaringanthemer, you’ll use just a few of the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '**library(xaringanthemer)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**style_xaringan(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**header_h2_font_size = "150px",**'
  prefs: []
  type: TYPE_NORMAL
- en: '**header_color = "white",**'
  prefs: []
  type: TYPE_NORMAL
- en: '**header_font_weight = "bold",**'
  prefs: []
  type: TYPE_NORMAL
- en: '**header_font_family = "Inter"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code sets the header size to 150 pixels and makes all the headers use the
    bold, white Inter font.
  prefs: []
  type: TYPE_NORMAL
- en: One particularly nice thing about the xaringanthemer package is that you can
    use any font available on Google Fonts by simply adding its name to header_font_family
    or another argument that sets font families (text_font _family and code_font_family
    are the other two, for styling body text and code, respectively). This means you
    won’t have to include the line that makes the Inter font available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create presentations using the xaringan
    package. You saw how to incrementally reveal content on slides, create multicolumn
    layouts, and add background images to slides. You also changed your slides’ appearance
    by applying custom themes, writing your own CSS, and using the xaringanthemer
    package.
  prefs: []
  type: TYPE_NORMAL
- en: With xaringan, you can create any type of presentation you want and then customize
    it to match your desired look and feel. Creating presentations with xaringan also
    allows you to share your HTML slides easily and enables greater accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Garrick Aden-Buie, Silvia Canelón, and Shannon Pileggi, “Professional, Polished,
    Presentable: Making Great Slides with xaringan,” workshop materials, n.d., *[https://presentable-user2021.netlify.app](https://presentable-user2021.netlify.app)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Silvia Canelón, “Sharing Your Work with xaringan: An Introduction to xaringan
    for Presentations: The Basics and Beyond,” workshop for the NHS-R Community 2020
    Virtual Conference, November 2, 2020, *[https://spcanelon.github.io/xaringan-basics-and-beyond/index.xhtml](https://spcanelon.github.io/xaringan-basics-and-beyond/index.xhtml)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alison Hill, “Meet xaringan: Making Slides in R Markdown,” slideshow presentation,
    January 16, 2019, *[https://arm.rbind.io/slides/xaringan.xhtml](https://arm.rbind.io/slides/xaringan.xhtml)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yihui Xie, J. J. Allaire, and Garrett Grolemund, “xaringan Presentations,”
    in *R Markdown: The Definitive Guide* (Boca Raton, FL: CRC Press, 2019), *[https://bookdown.org/yihui/rmarkdown/](https://bookdown.org/yihui/rmarkdown/)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
