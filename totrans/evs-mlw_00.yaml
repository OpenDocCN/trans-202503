- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Dogma_OT_Bold_B_11">INTRODUCTION</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">介绍</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: The year is 2010\. Global threat researchers have discovered a new piece of
    malware that uses several techniques to infect particular victims. It specifically
    targets a type of Siemens programmable logic controller used in the uranium enrichment
    process at Iranian nuclear facilities. The malware, eventually dubbed “Stuxnet,”
    profiles the environment it’s running in to ensure it infects only its intended
    victim. Stuxnet remained undetected for months due not only to its targeted nature
    but also to the multiple defense evasion and stealth techniques in its arsenal.
    One such technique is its use of stolen code-signing certificates, a relatively
    new tactic that gives the malware an air of authenticity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一年是2010年。全球威胁研究人员发现了一种新型恶意软件，它使用多种技术感染特定的受害者。它特别针对一种西门子可编程逻辑控制器，这种控制器被用于伊朗核设施中的铀浓缩过程。最终被命名为“Stuxnet”的恶意软件，会分析其运行环境，以确保只感染预定的受害者。由于其针对性的特点，以及其拥有的多种防御规避和隐蔽技术，Stuxnet长时间未被发现。其使用的一项技术是窃取的代码签名证书，这是一种相对较新的战术，能够赋予恶意软件一种真实性的外观。
- en: 'Fast-forward to January 2019\. A compromised ASUS software update server is
    serving malicious, fake updates that check the MAC address of the affected computer.
    The attack is especially targeted in nature: only if the victim has one of a handful
    of hardcoded addresses does the executable download an additional payload from
    the internet. Once installed, the malware remains dormant and undetected until
    specific triggers occur. The actors behind this attack sign their malicious files
    with legitimate ASUS certificates, helping the payload slip past anti-malware
    defenses. Researchers dub this attack “ShadowHammer.”'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到2019年1月。一个被攻破的华硕软件更新服务器正在提供恶意的假更新，这些更新会检查受影响计算机的MAC地址。该攻击具有特别的针对性：只有当受害者的计算机拥有一小部分硬编码的地址时，执行文件才会从互联网上下载额外的有效载荷。一旦安装，恶意软件会保持潜伏并未被发现，直到特定的触发条件发生。这次攻击的幕后黑手使用合法的华硕证书为恶意文件签名，帮助有效载荷绕过反恶意软件防御。研究人员将这次攻击命名为“ShadowHammer”。
- en: A short while later, in 2020, the world is rocked by a threat group that infiltrates
    the network of SolarWinds, a company that supplies hundreds of thousands of organizations
    with network- and system-monitoring software. The threat actors inject malicious
    code into a legitimate software update service for the SolarWinds Orion platform.
    These updates are pushed to organizations that use Orion, and the malicious code
    silently and effectively delivers a remote access trojan to the victim organizations’
    networks. The actors behind this attack remain undetected for a long time due
    to the techniques they employ to blend into their target environments. This attack
    is later nicknamed “Sunburst.”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，2020年，世界被一个威胁组织震惊，该组织渗透了SolarWinds的网络——这家公司为成千上万的组织提供网络和系统监控软件。威胁行为者将恶意代码注入到SolarWinds
    Orion平台的合法软件更新服务中。这些更新被推送到使用Orion的组织中，而恶意代码则悄无声息地有效地将远程访问木马送入受害组织的网络。由于这些攻击者使用了融入目标环境的技术，这次攻击长时间未被发现。该攻击后来被称为“Sunburst”。
- en: In these attacks, the world has witnessed *evasion:* threats seeking to remain
    hidden and undetected for as long as possible while protecting themselves from
    host and network defense software and investigators. Once detected, evasive threats
    may alter their behavior, dynamically modify their code, or terminate themselves,
    while destroying any evidence that they ever resided in the victim’s network.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些攻击中，世界见证了*规避：*威胁试图在尽可能长的时间内保持隐匿并未被发现，同时保护自己免受宿主和网络防御软件及调查人员的监控。一旦被发现，具有规避性的威胁可能会改变其行为，动态修改其代码，或自我终止，同时销毁所有曾经存在于受害者网络中的证据。
- en: Evasive and context-aware malware is a highly effective and persistent threat
    that requires defenders to consistently adapt. As a result, it’s vital for cybersecurity
    professionals and researchers to have a deep understanding of the various evasion
    techniques malware uses, how to identify them, and how to overcome them. This
    book explores the nature of evasive and context-aware malware common to Windows,
    providing insights into the techniques it uses to evade detection as it exploits
    the operating system’s features and architecture. This book also aims to equip
    malware analysts, forensics investigators, frontline defenders, detection engineers,
    researchers, and students with the knowledge and tools they need to understand
    these types of threats and peel back the layers of armor concealing the malware’s
    code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 规避和上下文感知的恶意软件是一种高度有效且持久的威胁，要求防御者不断适应。因此，网络安全专业人员和研究人员必须深入了解恶意软件使用的各种规避技术、如何识别它们以及如何克服它们。这本书探讨了常见于
    Windows 的规避和上下文感知恶意软件的性质，提供了恶意软件如何利用操作系统的功能和架构来规避检测的技术的洞察。 本书还旨在为恶意软件分析师、取证调查员、前线防御人员、检测工程师、研究人员和学生提供他们理解这些威胁类型并揭开隐藏恶意软件代码的层层防护所需的知识和工具。
- en: Before we begin, let’s define exactly what malware is by looking at some common
    types and how they take advantage of evasion techniques.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们通过查看一些常见类型的恶意软件及其如何利用规避技术来明确恶意软件究竟是什么。
- en: <samp class="SANS_Futura_Std_Bold_B_11">What Is Malware?</samp>
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">什么是恶意软件？</samp>
- en: Generally speaking, *malware* is any piece of software that does malicious things.
    Seems simple enough, right? However, there are often conflicting definitions of
    malware. Remcos is software sold on the open internet and described by its authors
    as a “remote administration tool.” However, since anyone can buy Remcos (completely
    legally, I might add), it’s largely used for nefarious purposes and has many of
    the same capabilities as a known type of malware called a remote access trojan.
    Another example is AsyncRAT, an open source “remote access tool” that, according
    to its author, is “designed to remotely monitor and control other computers through
    a secure, encrypted connection.” So, are Remcos and AsyncRAT malware, then? The
    answer largely depends on whom you ask, who’s using it, and for what purpose.
    Context is key.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，*恶意软件*是指任何做恶意事情的软件。看起来很简单，对吧？然而，恶意软件的定义常常存在冲突。Remcos 是一种在开放互联网出售的软件，其作者将其描述为“远程管理工具”。然而，由于任何人都可以购买
    Remcos（完全合法，我想补充一下），它通常被用于不良目的，并且具有与一种已知恶意软件——远程访问木马相同的许多功能。另一个例子是 AsyncRAT，一种开源的“远程访问工具”，根据其作者的说法，它“旨在通过安全的加密连接远程监控和控制其他计算机”。那么，Remcos
    和 AsyncRAT 是恶意软件吗？答案在很大程度上取决于你问谁、谁在使用它以及使用的目的是什么。上下文是关键。
- en: 'Malware can be separated into different types, or *classes*. Malware classes
    are defined by groupings of behaviors and capabilities in differing malware families.
    Some of the most common malware classes are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以分为不同类型，或称为 *类别*。恶意软件类别是通过不同恶意软件家族中行为和功能的分组来定义的。以下是一些最常见的恶意软件类别：
- en: '**Remote access trojans (RATs)**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程访问木马（RATs）**'
- en: RATs are used to provide a persistent connection or access to an infected system.
    RATs often can monitor the infected host using techniques such as logging keystrokes,
    issuing commands to the infected host, or downloading additional malware onto
    the host.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: RATs 用于提供持久的连接或访问受感染系统。RATs 通常可以通过记录按键、向受感染主机发出命令或向主机下载其他恶意软件等技术来监控受感染的主机。
- en: '**Infostealers**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息窃取者**'
- en: Infostealers typically target sensitive information on the victim host, such
    as login credentials, banking information, cryptocurrency wallets, cookie and
    browser history, and similar information. They then send that data back to the
    threat actor(s). Banking trojans, which specifically target banking and financial-related
    data, could be considered a type of infostealer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 信息窃取者通常针对受害主机上的敏感信息，如登录凭据、银行信息、加密货币钱包、浏览器历史记录和类似信息。然后，它们将这些数据发送回攻击者。专门针对银行和金融相关数据的银行木马，可以被认为是一种信息窃取者。
- en: '**Droppers and loaders**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载器和加载器**'
- en: Droppers and loaders are designed to deploy additional malware onto the system.
    Technically speaking, droppers contain an embedded payload and drop it to the
    victim system upon execution. Loaders, on the other hand, download their payloads
    from an external resource, such as the internet. However, these terms are often
    used interchangeably. These malware variants pave the way for the additional malware,
    sometimes even preparing the victim host by disabling anti-malware software and
    other endpoint defenses before the payload is deployed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 投放器和加载器旨在将额外的恶意软件部署到系统上。从技术上讲，投放器包含一个嵌入的有效负载，并在执行时将其投放到受害者的系统中。而加载器则从外部资源（如互联网）下载其有效负载。然而，这些术语通常可以互换使用。这些恶意软件变种为额外的恶意软件铺平道路，有时甚至在部署有效负载之前，通过禁用反恶意软件软件和其他终端防御措施来准备受害者主机。
- en: '**Ransomware**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**勒索软件**'
- en: Ransomware is designed to deny a victim access to a system or data until a sum
    of money, often in the form of cryptocurrency, is paid to the threat actor. The
    malware may encrypt the hard disk or specific files on the system, “lock” access
    to files or programs, or otherwise prevent the victim from using their system
    as intended. The attacker then demands a ransom payment from the victim in exchange
    for restoring the systems and data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 勒索软件旨在阻止受害者访问系统或数据，直到支付一定的金额，通常是以加密货币的形式，给威胁行为者。该恶意软件可能会加密硬盘或系统上的特定文件，“锁定”对文件或程序的访问，或以其他方式阻止受害者按预期使用其系统。攻击者随后要求受害者支付赎金，以换取恢复系统和数据。
- en: '**Wipers**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**擦除程序**'
- en: Wipers (or *killware*) are close cousins to ransomware. They are designed to
    destroy files on the victim’s system to cause damage or impact services. To accomplish
    this, the wipers encrypt data on the machine or erase the data using partition
    tools, for example. So, wipers generally act like ransomware, except that they
    are not intended to decrypt data after encrypting it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 擦除程序（或*毁灭性软件*）与勒索软件是密切相关的。它们旨在破坏受害者系统上的文件，造成损害或影响服务。为了实现这一目的，擦除程序会加密机器上的数据或使用分区工具删除数据。例如，擦除程序通常像勒索软件一样运作，除了它们在加密数据后并不打算解密数据。
- en: '**Worms**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**蠕虫**'
- en: Worms are a self-spreading type of malware. Once they infect a host, they often
    scan the victim’s network, searching for additional systems to infect.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 蠕虫是一种自我传播的恶意软件。一旦它们感染了一个主机，通常会扫描受害者的网络，寻找其他系统来感染。
- en: '**Viruses**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**病毒**'
- en: 'The word *virus* is often used synonymously with *malware*, but this isn’t
    exactly accurate: all viruses are malware, but not all malware are viruses. Viruses
    append malicious code to files on a victim system, and when those files are sent
    to another victim and opened, the virus spreads to the new victim host.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*病毒*这个词经常与*恶意软件*同义使用，但这并不完全准确：所有病毒都是恶意软件，但并非所有恶意软件都是病毒。病毒将恶意代码附加到受害者系统上的文件中，当这些文件被发送到另一个受害者并被打开时，病毒会传播到新的受害者主机。'
- en: '**Rootkits and bootkits**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Rootkit和Bootkit**'
- en: '*Rootkits* are specialized variants of malware that are designed to conceal
    their presence from both system users and security tools. To avoid detection,
    rootkits typically modify system components at the kernel level of the operating
    system, which allows the attacker to maintain access to the compromised system.
    *Bootkits* usually have the same purposes as rootkits but instead infect the master
    boot record (MBR) or other components of a computer system’s boot process, allowing
    them to gain control of the system before the operating system loads.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*Rootkit*是恶意软件的特殊变种，旨在隐瞒它们在系统用户和安全工具中的存在。为了避免被发现，Rootkit通常会修改操作系统的内核级系统组件，这使得攻击者能够保持对被入侵系统的访问权限。*Bootkit*通常与Rootkit有相同的目的，但它们感染的是主引导记录（MBR）或计算机系统引导过程的其他组件，使得它们能够在操作系统加载之前控制系统。'
- en: '**Trojan horses**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**木马**'
- en: Historically, *trojans* have been defined as malicious software that masquerades
    as legitimate software. I include them in this list for the sake of completeness,
    but I don’t like this term or its definition. After all, what malicious software
    *doesn’t* masquerade as legitimate software? If malicious software told us it
    was malicious, we wouldn’t be tricked into executing it. Hence, *trojan* is an
    archaic and very often overused term.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，*木马*被定义为伪装成合法软件的恶意软件。我将它们列在此清单中是为了完整性，但我不喜欢这个术语及其定义。毕竟，哪种恶意软件不是伪装成合法软件的呢？如果恶意软件告诉我们它是恶意的，我们就不会被它欺骗并执行它。因此，*木马*是一个过时且经常被滥用的术语。
- en: This list covers a large percentage of malware, but it’s not exhaustive. Other
    variants of malware include keyloggers, coinminers, spyware, hacktools, and more.
    It’s important to keep in mind that these malware types are not always straightforward,
    and there are often overlaps. It can be helpful to think of these as behavioral
    characteristics rather than distinct categories.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这份列表涵盖了大部分恶意软件，但并不详尽。其他恶意软件变种包括键盘记录器、加密货币挖矿程序、间谍软件、黑客工具等。需要记住的是，这些恶意软件类型并不总是简单明了，它们之间常常会有重叠。把这些恶意软件看作行为特征，而不是独立的类别，可能会更有帮助。
- en: 'We often classify malware into two overarching groups: commodity and bespoke.
    *Commodity* malware is often available to a large market, whether on the open
    internet or on dark-web forums. This type of malware is used by many different
    threat groups at once. Examples of commodity malware include Lokibot and Agent
    Tesla, two of the most popular pieces of malware in circulation. *Bespoke* malware
    is more customized, often targeting a certain industry or even a particular company
    or person, and it has a very specific objective. Examples of this type of malware
    include Stuxnet, which we mentioned earlier, and HermeticWiper, which targeted
    systems in Ukraine at the beginning of the Russian invasion in 2022\. Commodity
    malware can be augmented to be more targeted and bespoke in nature.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将恶意软件分为两大类：常见恶意软件和定制恶意软件。*常见*恶意软件通常面向大规模市场，无论是在公开的互联网还是在暗网论坛中都能找到。这类恶意软件通常会被多个不同的威胁团体同时使用。常见恶意软件的例子包括Lokibot和Agent
    Tesla，这是目前流通的两款最流行的恶意软件。*定制*恶意软件则更加个性化，通常针对某一特定行业，甚至是某个特定公司或个人，且具有非常明确的目标。这类恶意软件的例子包括我们前面提到的Stuxnet，以及2022年俄罗斯入侵乌克兰初期针对乌克兰系统的HermeticWiper。常见恶意软件可以通过增强定制化功能，变得更具针对性和个性化。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Malware exists for all major operating systems, including (but not limited
    to) Windows, macOS, and flavors of Unix, as well as mobile operating systems such
    as Android and iOS. As it is the most prevalent, I’ve decided to focus on Windows
    malware in this book. However, many of the evasion techniques we’ll discuss in
    this book can also be implemented in some form on other operating systems.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*恶意软件存在于所有主要操作系统中，包括（但不限于）Windows、macOS以及各种Unix版本，和Android、iOS等移动操作系统。由于Windows是最为普及的，我决定在本书中重点讨论Windows恶意软件。然而，我们将在本书中讨论的许多规避技术也可以以某种形式在其他操作系统上实现。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">What Is Malware Analysis?</samp>
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">什么是恶意软件分析？</samp>
- en: '*Malware analysis* is the process of investigating and taking apart malicious
    code and software. A malware analyst’s goal is to identify and understand the
    behavior, functionalities, and potential impact of a malware sample and the attack
    surrounding it (also known as its *context*). Malware analysis is as much an art
    as a science because it often takes a great deal of creativity to fully understand
    a malware sample, especially if it is one of the more advanced variants, and to
    put that knowledge to use to detect and prevent future attacks. As we’ll discuss
    in [Chapter 3](chapter3.xhtml), malware analysis can be divided into two overarching
    methods: static analysis and dynamic analysis.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*恶意软件分析*是调查并拆解恶意代码和软件的过程。恶意软件分析师的目标是识别并理解恶意软件样本的行为、功能和潜在影响，以及与之相关的攻击（也称为其*背景*）。恶意软件分析既是一门艺术，也是一门科学，因为要完全理解一个恶意软件样本，尤其是那些更高级的变种，往往需要大量的创造力，并将这些知识用于检测和防止未来的攻击。正如我们在[第三章](chapter3.xhtml)中讨论的那样，恶意软件分析可以分为两种主要方法：静态分析和动态分析。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Why Does Malware Use Evasion?</samp>
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">为什么恶意软件会使用规避技术？</samp>
- en: 'The ultimate goal of evasion is self-preservation by avoiding detection and
    analysis. Some malware is designed to remain embedded in a victim’s system or
    network for as long as possible. Other malware simply seeks to circumvent as many
    network and host defenses as it can before being detected so that it can quickly
    execute its payload. Malware authors may implement evasion techniques in their
    malware for any of the following reasons:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 规避的最终目标是通过避免被检测和分析来实现自我保护。一些恶意软件旨在尽可能长时间地潜伏在受害者的系统或网络中。其他恶意软件则试图在被发现之前尽可能绕过多个网络和主机防御，以便快速执行其有效载荷。恶意软件作者可能出于以下任何原因在其恶意软件中实现规避技术：
- en: '**Hampering analysis**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**妨碍分析**'
- en: Intelligent malware knows that at some point, it will be detected and likely
    investigated by an analyst or researcher in a virtual machine or malware sandbox.
    It’s becoming increasingly common to witness malware scanning its host system
    and looking for indications that it’s being run in an analyst’s lab. The malware
    may also search for signs of analysis tools, such as code debuggers, and interfere
    with them to prevent, thwart, or at least slow down malware analysts’ efforts
    to understand its underlying behaviors, functionalities, and code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 智能恶意软件知道，它最终会被检测到，并且可能会在虚拟机或恶意软件沙箱中被分析员或研究人员调查。现在，恶意软件扫描其宿主系统并寻找运行在分析员实验室中的迹象，已经变得越来越常见。恶意软件还可能搜索分析工具的迹象，例如代码调试器，并干扰它们，以防止、挫败或至少减缓恶意软件分析员理解其潜在行为、功能和代码的努力。
- en: '**Evading defenses**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**规避防御**'
- en: Network and host defenses such as an intrusion prevention system (IPS), anti-malware,
    and endpoint detection and response (EDR) products are nuisances to malware. Evasive
    threats will try to circumvent and bypass these defenses to remain hidden on the
    infected host.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 网络和宿主防御系统，例如入侵防御系统（IPS）、反恶意软件和端点检测与响应（EDR）产品，对于恶意软件来说是麻烦。规避性威胁会尝试绕过这些防御措施，以便保持在感染宿主上的隐匿状态。
- en: '**Targeting systems and profiling context**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标系统与上下文分析**'
- en: Threats such as Stuxnet go to great lengths to identify the type of system they’re
    currently running on. Malware that implements profiling techniques may attempt
    to determine the victim’s operating system, the software installed on the victim’s
    machine, or even the victim’s physical location. The malware then uses this information
    to determine whether the system is a valid target or not. If not, the malware
    may remove all evidence that it ever resided on the victim host, thereby eluding
    detection. Malware may also use profiling to determine the specific defenses employed
    in the target system or network and alter its behaviors and capabilities based
    on that information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁如Stuxnet会不遗余力地识别其当前运行的系统类型。实施分析技术的恶意软件可能会尝试确定受害者的操作系统、受害者机器上安装的软件，甚至是受害者的物理位置。然后，恶意软件利用这些信息来判断该系统是否是有效目标。如果不是，恶意软件可能会删除所有曾经在受害者主机上存在的证据，从而逃避检测。恶意软件还可能通过分析来确定目标系统或网络中采用的特定防御措施，并根据这些信息改变其行为和功能。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Why I Wrote This Book</samp>
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">我为何写这本书</samp>
- en: Over my years of dedicated study and research into the realm of cybercrime and
    its perpetrators, I’ve seen an increase in the use of evasion techniques, even
    in the most rudimentary and widespread malware. Modern malware combines multiple
    tactics to circumvent the most robust sandboxes and defenses and to impede analysis
    and investigation as much as possible. Techniques that once were reserved for
    more advanced or bespoke malware are becoming much more common. Not only that,
    but evasive measures in malware are constantly evolving to further thwart analysis
    efforts.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我在网络犯罪及其作案者领域的专心研究中，发现了规避技术使用的增加，甚至在最基础和广泛传播的恶意软件中也是如此。现代恶意软件结合了多种战术，来绕过最强大的沙箱和防御，并尽可能地妨碍分析和调查。曾经只用于更高级或定制恶意软件的技术，现在变得更加普遍。不仅如此，恶意软件中的规避措施也在不断发展，以进一步妨碍分析工作。
- en: This book is intended to serve as both an introduction to and an extensive resource
    on Windows-based malware evasion techniques. It can be challenging for newcomers
    to this field and seasoned professionals alike to identify and learn the fundamentals
    to combat evasive threats. While substantial research is being conducted in this
    domain, it still remains relatively niche. I firmly believe that the better we
    malware researchers and security analysts understand modern threat behavior and
    emerging trends, the more effectively we can defend our organizations and protect
    future victims.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在作为Windows平台恶意软件规避技术的入门指南和详尽资源。对于这个领域的新人和经验丰富的专业人员来说，识别并学习基础知识以应对规避威胁可能是具有挑战性的。尽管在这个领域正在进行大量研究，但它仍然相对小众。我坚信，我们作为恶意软件研究人员和安全分析师，越是了解现代威胁行为和新兴趋势，就能越有效地保护我们的组织并防止未来的受害者。
- en: My hope is that after reading this book, you will have clear strategies that
    you can readily incorporate into your malware analysis methodologies or your organization’s
    defensive measures. Above all, my goal is to spark your interest in seeking further
    knowledge in this field. Together, we must keep threat actors and malware authors
    on their toes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我的希望是，在阅读完本书后，你能拥有明确的策略，能够将其轻松融入到你的恶意软件分析方法或组织的防御措施中。最重要的是，我的目标是激发你对这一领域进一步学习的兴趣。我们必须共同努力，让威胁行为者和恶意软件作者时刻保持警觉。
- en: While I consider myself knowledgeable in this subject area, I am well aware
    that there is always room for growth and learning. Please do not hesitate to reach
    out to me personally with any questions, feedback, or additional insights into
    the material presented in this book. I always enjoy engaging in thoughtful discussion
    about cyberthreats and malware.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我认为自己在这一领域有一定的知识，但我也深知还有很多成长和学习的空间。如果你对本书中的内容有任何问题、反馈或额外的见解，请随时联系我。我总是乐于与人讨论网络威胁和恶意软件相关的话题。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Who Should Read This Book</samp>
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">谁应该阅读本书</samp>
- en: I wrote this book for anyone who seeks to better understand evasion techniques
    used by modern and advanced malware. Perhaps you’re already a malware researcher
    who wants to explore how malware can evade and circumvent your analysis tools
    and analysis lab environment. Maybe you’re a frontline incident responder seeking
    to better understand how to identify and detect these types of threats, or perhaps
    you’re a forensics analyst trying to determine how to investigate systems compromised
    with advanced malware. This book is for you.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这本书是为那些希望更好理解现代和先进恶意软件所采用的规避技术的人们。也许你已经是恶意软件研究员，想要探索恶意软件如何规避和绕过你的分析工具和实验环境。也许你是前线的事件响应者，希望更好地理解如何识别和检测这些类型的威胁，或者你是一个法证分析员，试图了解如何调查被先进恶意软件攻陷的系统。这本书就是为你准备的。
- en: 'This book is very technical in nature and is not a beginner’s guide to Windows
    malware analysis, so I assume you have at least an intermediate-level knowledge
    of cybersecurity principles and a basic understanding of malware analysis concepts.
    Ideally, you’ll also have experience reversing assembly code. If you’re new to
    these topics, however, have no fear: the first three chapters of this book provide
    a crash course in malware analysis and the fundamental concepts required to understand
    the later chapters of the book.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本书内容非常技术化，并不是针对初学者的 Windows 恶意软件分析指南，因此我假设你至少具备中级的网络安全知识，并对恶意软件分析有基本了解。理想情况下，你还应该有反汇编代码的经验。然而，如果你是这些话题的新手，也不用担心：本书的前三章提供了恶意软件分析的速成课程，以及理解后续章节所需的基本概念。
- en: Also, I expect that you have a malware analysis lab environment set up to safely
    execute malware. This is very important, as all examples in this book use real
    malware samples. [Appendix A](appendix-A.xhtml) includes a guide for setting up
    a hypervisor and virtual machines for safe malware analysis.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我希望你已经设置了一个恶意软件分析实验环境，以便安全地执行恶意软件。这一点非常重要，因为本书中的所有示例都使用了真实的恶意软件样本。[附录 A](appendix-A.xhtml)包括了设置虚拟机和虚拟化平台进行安全恶意软件分析的指南。
- en: <samp class="SANS_Futura_Std_Bold_B_11">How This Book Is Organized</samp>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书结构</samp>
- en: This book is organized into 4 parts, which are made up of 17 chapters, plus
    3 appendixes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本书共分为 4 个部分，包含 17 章，以及 3 个附录。
- en: '[Part I](part1.xhtml), The Fundamentals, establishes a baseline level of knowledge
    for the rest of the book.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一部分](part1.xhtml)，基础知识，为本书的其余部分奠定了知识基准。'
- en: '**[Chapter 1](chapter1.xhtml): Windows Foundational Concepts **Covers fundamental
    concepts of the Windows operating system'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 1 章](chapter1.xhtml)：Windows 基础概念** 涵盖了 Windows 操作系统的基本概念。'
- en: '**[Chapter 2](chapter2.xhtml): Malware Triage and Behavioral Analysis **Focuses
    on the basics of triaging malware and analyzing the behavior of malware samples
    to determine how they operate on an infected system'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 2 章](chapter2.xhtml)：恶意软件筛查与行为分析** 聚焦于恶意软件筛查的基础知识，并分析恶意软件样本的行为，以确定它们如何在感染的系统上运行。'
- en: '**[Chapter 3](chapter3.xhtml): Static and Dynamic Code Analysis **Covers the
    fundamentals of static and dynamic code analysis and how you can use these techniques
    to uncover malware’s true intentions'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 3 章](chapter3.xhtml)：静态与动态代码分析** 涵盖了静态和动态代码分析的基础知识，并讲解了如何使用这些技术揭示恶意软件的真实意图。'
- en: '[Part II](part2.xhtml), Context Awareness and Sandbox Evasion, delves into
    how evasive malware is able to detect virtual machines and malware analysis sandboxes.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part2.xhtml)，上下文感知和沙箱规避，探讨了如何通过虚拟机和恶意软件分析沙箱检测到规避恶意软件。'
- en: '**[Chapter 4](chapter4.xhtml): Enumerating Operating System Artifacts **Discusses
    how malware can closely inspect underlying operating system artifacts to detect
    analysis efforts'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第四章](chapter4.xhtml): 枚举操作系统遗留物** 讨论了恶意软件如何仔细检查底层操作系统遗留物，以检测分析活动。'
- en: '**[Chapter 5](chapter5.xhtml): User Environment and Interaction Detection **Explains
    the ways in which malware thwarts investigations by enumerating user interactions
    and the environment in which it’s running'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章](chapter5.xhtml): 用户环境与交互检测** 解释了恶意软件如何通过枚举用户交互和它运行的环境来阻挠调查。'
- en: '**[Chapter 6](chapter6.xhtml): Enumerating Hardware and Network Configurations **Examines
    how malware can inspect system hardware and network settings to discover a malware
    analyst’s sandboxes and virtual machines'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第六章](chapter6.xhtml): 枚举硬件和网络配置** 探讨了恶意软件如何检查系统硬件和网络设置，以发现恶意软件分析师的沙箱和虚拟机。'
- en: '**[Chapter 7](chapter7.xhtml): Runtime Environment and Virtual Processor Anomalies **Covers
    how processing and runtime environment anomalies can tip off malware to analysis
    attempts'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第七章](chapter7.xhtml): 运行时环境与虚拟处理器异常** 讨论了处理和运行时环境异常如何使恶意软件察觉分析尝试。'
- en: '**[Chapter 8](chapter8.xhtml): Evading Sandboxes and Disrupting Analysis **Explores
    several other techniques a threat actor can use to completely evade and disrupt
    an analysis environment'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第八章](chapter8.xhtml): 避免沙箱和干扰分析** 探讨了威胁行为者可以用来完全规避和干扰分析环境的几种技术。'
- en: '[Part III](part3.xhtml), Anti-reversing, details the methods attackers use
    to complicate the reverse engineering process for malware analysts.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三部分](part3.xhtml)，反逆向，详细介绍了攻击者如何通过复杂化逆向工程过程来对抗恶意软件分析师。'
- en: '**[Chapter 9](chapter9.xhtml): Anti-disassembly **Explains how malware uses
    anti- disassembly techniques to prevent and disrupt manual code analysis'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第九章](chapter9.xhtml): 反反汇编** 解释了恶意软件如何使用反反汇编技术来防止和干扰手动代码分析。'
- en: '**[Chapter 10](chapter10.xhtml): Anti-debugging **Discusses how malware is
    able to detect and circumvent debuggers and dynamic code analysis'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十章](chapter10.xhtml): 反调试** 讨论了恶意软件如何检测并规避调试器和动态代码分析。'
- en: '**[Chapter 11](chapter11.xhtml): Covert Code Execution and Misdirection **Demonstrates
    ways in which malware can execute code covertly or confuse and misdirect malware
    analysts'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十一章](chapter11.xhtml): 隐蔽代码执行和误导** 演示了恶意软件如何隐蔽地执行代码，或如何使恶意软件分析师迷惑和误导。'
- en: '[Part IV](part4.xhtml), Defense Evasion, delves into how malware evades defensive
    controls.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四部分](part4.xhtml)，防御规避，深入探讨了恶意软件如何规避防御控制。'
- en: '**[Chapter 12](chapter12.xhtml): Process Injection, Manipulation, and Hooking **Reveals
    how malware can inject malicious code into different processes, manipulate processes,
    and hook function code'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十二章](chapter12.xhtml): 进程注入、操控与钩子技术** 揭示了恶意软件如何将恶意代码注入不同进程、操控进程并钩取函数代码。'
- en: '**[Chapter 13](chapter13.xhtml): Evading Endpoint and Network Defenses **Covers
    how malware evades and circumvents network and endpoint defenses'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十三章](chapter13.xhtml): 避免端点和网络防御** 介绍了恶意软件如何规避并绕过网络和端点防御。'
- en: '**[Chapter 14](chapter14.xhtml): Introduction to Rootkits **Discusses the fundamentals
    of an especially dangerous type of evasive malware: rootkits'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十四章](chapter14.xhtml): Rootkit介绍** 讨论了一种特别危险的规避恶意软件类型：Rootkit的基本原理。'
- en: '**[Chapter 15](chapter15.xhtml): Fileless, Living Off The Land, and Anti-forensics
    Techniques **Explores how malware uses so-called fileless techniques and anti-forensics
    measures to evade defenses and forensics tools'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十五章](chapter15.xhtml): 无文件、依赖现成工具及反取证技术** 探讨了恶意软件如何利用所谓的无文件技术和反取证措施来规避防御和取证工具。'
- en: '**[Chapter 16](chapter16.xhtml): Encoding and Encryption **Focuses on encoding
    and encryption techniques, providing practical methodologies for analyzing malware'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十六章](chapter16.xhtml): 编码与加密** 专注于编码和加密技术，提供了分析恶意软件的实用方法。'
- en: '**[Chapter 17](chapter17.xhtml): Packers and Unpacking Malware **Discusses
    how malware obfuscators and packers work, going into depth on how to unpack malicious
    code'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十七章](chapter17.xhtml): 打包器和解包恶意软件** 讨论了恶意软件混淆器和打包器的工作原理，并深入讲解了如何解包恶意代码。'
- en: The appendixes include a walk-through of building a malware analysis lab; a
    list of Windows API functions that malware can exploit for evasion purposes; and
    references for further reading on the world of malware and malware analysis.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 附录包括了建立恶意软件分析实验室的操作步骤；恶意软件可能利用的 Windows API 函数列表，用于规避目的；以及进一步阅读恶意软件及其分析世界的参考资料。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Malware Samples for This Book</samp>
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书的恶意软件样本</samp>
- en: 'Throughout this book, I include analysis labs and information about specific
    malware samples and families. I often reference the malware file’s signature in
    the format <samp class="SANS_TheSansMonoCd_W5Regular_11">SHA256:</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">hash_value</samp>.
    Here’s an example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我包含了分析实验室和关于特定恶意软件样本及其家族的信息。我常常引用恶意软件文件的签名，格式为<samp class="SANS_TheSansMonoCd_W5Regular_11">SHA256:</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">hash_value</samp>。这是一个例子：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Most of the malware samples I reference in this way can be downloaded from VirusTotal
    ([*https://<wbr>www<wbr>.virustotal<wbr>.com*](https://www.virustotal.com)), assuming
    you have a commercial account, or are available for free from MalShare ([*https://<wbr>malshare<wbr>.com*](https://malshare.com)).
    Please note that these malware samples are *real* malware. Before downloading
    and executing any of the malware I reference in this book, make sure that you’ve
    built a dedicated malware analysis lab and configured it for safe analysis. [Appendix
    A](appendix-A.xhtml) discusses tips on how to do this.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我在书中引用的大多数恶意软件样本都可以从 VirusTotal 上下载（[*https://<wbr>www<wbr>.virustotal<wbr>.com*](https://www.virustotal.com)），前提是你有商业账户，或者可以从
    MalShare 免费下载（[*https://<wbr>malshare<wbr>.com*](https://malshare.com)）。请注意，这些恶意软件样本是*真实*的恶意软件。在下载并执行书中提到的任何恶意软件之前，确保你已建立了专门的恶意软件分析实验室，并配置为安全分析。[附录
    A](appendix-A.xhtml)讨论了如何做到这一点的技巧。
- en: Finally, for this book, I’ve tried to use a mix of malware samples, including
    both 32-bit and 64-bit malware. You may be wondering why I focus so much on 32-bit
    code when 64-bit code is largely replacing it. The simple answer is that 32-bit
    malware is still common, likely because there’s no motivation for malware to move
    to a 64-bit architecture. It doesn’t need the extra memory address space or performance
    that 64-bit architectures supply. And perhaps most importantly, 32-bit malware
    will run on nearly every version of Windows. Keep in mind that some people are
    still running outdated operating systems such as Windows XP, Windows Server 2003,
    and Windows 7, as well as older processor architectures.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这本书中，我尝试使用了多种恶意软件样本，包括 32 位和 64 位恶意软件。你可能会好奇，为什么我如此关注 32 位代码，而 64 位代码已逐渐取代它。简单的回答是，32
    位恶意软件仍然很常见，这可能是因为恶意软件没有动力去转向 64 位架构。它不需要 64 位架构所提供的额外内存地址空间或性能。而且，最重要的是，32 位恶意软件几乎可以在每个版本的
    Windows 上运行。请记住，一些人仍然在使用过时的操作系统，如 Windows XP、Windows Server 2003 和 Windows 7，以及更旧的处理器架构。
- en: Now, let’s start digging into the foundational concepts of Windows. See you
    in [Chapter 1](chapter1.xhtml).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始深入探讨 Windows 的基础概念。在[第 1 章](chapter1.xhtml)见。
