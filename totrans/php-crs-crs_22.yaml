- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 17 INTRODUCTION TO OBJECT-ORIENTED PROGRAMMING
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17 面向对象编程简介
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: 'So far in this book, we’ve been using PHP to write *procedural* code, a sequence
    of instructions executed in order. We’re now going to shift our attention to a
    different way of using PHP: object-oriented programming (OOP). This chapter provides
    an overview of some important OOP concepts. Then the next several chapters will
    present in more depth how to harness OOP in your PHP projects.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用 PHP 编写*过程式*代码，这是按顺序执行的一系列指令。现在，我们将把注意力转向另一种使用 PHP 的方式：面向对象编程（OOP）。本章将概述一些重要的
    OOP 概念。接下来的几章将更深入地介绍如何在 PHP 项目中应用 OOP。
- en: The object-oriented style of programming revolves around *objects*, computer
    representations of real-world things, and *classes*, generalized models that define
    all the abilities and characteristics every object of a certain category should
    have. In an object-oriented computer system, objects send messages to each other,
    interpret those messages, and decide what instructions to execute in response,
    often creating a value to be returned to the sender.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的编程风格围绕着*对象*展开，对象是现实世界事物的计算机表示，以及*类*，即定义了每个特定类别的对象应具备的所有能力和特征的通用模型。在面向对象的计算机系统中，对象之间相互发送消息，解释这些消息，并决定响应时要执行的指令，通常会生成一个返回给发送者的值。
- en: 'The power of OOP lies in its capacity for abstraction: programmers can focus
    much of their attention on planning out a system of classes with features relating
    to the real-world task or problem the application is meant to solve, rather than
    always having to think about the code itself. For example, an online banking system
    might need classes like Client, BankAccount, and Transaction, and objects created
    from those classes would represent specific instances of clients, bank accounts,
    and transactions. The messages and operations to make changes to these objects
    might include functions like withdrawCash($sum), setNewOverdraft($limit), or updateClientAddress($address).
    Similarly, an online computer game might need such classes as Player, Level, and
    InventoryItem, with messages and operations like purchaseInventoryItem($itemID)
    and setPlayerName($name). A programmer can identify all these requirements and
    map out the necessary web of class relationships before writing a single line
    of code. Thanks to this planning and organization, the process of writing the
    code becomes much easier.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: OOP 的力量在于它的抽象能力：程序员可以将大量精力集中在规划一个与应用程序要解决的现实任务或问题相关的类系统上，而不是总是需要考虑代码本身。例如，一个在线银行系统可能需要像
    Client、BankAccount 和 Transaction 这样的类，从这些类创建的对象将表示特定的客户、银行账户和交易实例。修改这些对象的消息和操作可能包括像
    withdrawCash($sum)、setNewOverdraft($limit) 或 updateClientAddress($address) 这样的函数。类似地，一个在线电脑游戏可能需要像
    Player、Level 和 InventoryItem 这样的类，操作和消息可能包括 purchaseInventoryItem($itemID) 和 setPlayerName($name)。程序员可以在编写一行代码之前就识别出所有这些需求，并规划出必要的类关系网。得益于这种规划和组织，编写代码的过程变得更加容易。
- en: Ultimately, the programmer must declare each class, which does require writing
    code. The programmer will declare data variables and functions to carry out typical
    programming tasks such as performing numeric calculations, manipulating strings
    and arrays, and so on. However, the beauty of OOP is that once you’ve created
    a class, its structure is essentially hidden “under the hood.” The rest of the
    coding process can focus on harnessing the objects’ messages and functions, which
    closely relate to real-world concepts and tasks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，程序员必须声明每个类，这确实需要编写代码。程序员将声明数据变量和函数，以执行诸如进行数值计算、操作字符串和数组等典型的编程任务。然而，OOP 的美妙之处在于，一旦你创建了一个类，它的结构本质上是“隐藏在幕后”的。剩下的编程过程可以集中在利用对象的消息和函数上，这些消息和函数与现实世界的概念和任务密切相关。
- en: Classes and Objects
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类和对象
- en: An object-oriented program is made up of PHP files that declare classes. A class
    can be thought of as the blueprint, or template, from which objects are created.
    Just like a blueprint of a car is just a drawing on paper, a PHP file declaring
    a class doesn’t itself do anything. However, just as you can ask a factory to
    take the car blueprint and manufacture one or more physical cars, you can ask
    the PHP engine to use a class declaration to create objects based on that class.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象程序由声明类的 PHP 文件组成。类可以被视为一个蓝图或模板，基于这个蓝图可以创建对象。就像汽车的蓝图只是纸上的一张图纸一样，声明类的 PHP
    文件本身并不做任何事情。然而，正如你可以要求工厂根据汽车蓝图制造一辆或多辆实际汽车一样，你可以要求 PHP 引擎使用类声明来创建基于该类的对象。
- en: 'Sometimes people refer to an object as an *instance* of a class, since each
    object is one specific manifestation of the general characteristics and behaviors
    defined by the class. You can treat the terms *object* and *instance* as synonyms:
    an object in the computer’s memory, created from a class template, with a set
    of data values and the capability to respond to messages and execute functions.
    [Figure 17-1](#fig17-1) illustrates the relationship between a class and the objects
    created from that class.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候人们把对象称为类的 *实例*，因为每个对象是类定义的通用特征和行为的一个具体体现。你可以将*对象*和*实例*视为同义词：它是计算机内存中的一个对象，从类模板创建，具有一组数据值，并能够响应消息和执行函数。[图
    17-1](#fig17-1) 说明了类与从该类创建的对象之间的关系。
- en: '![](../images/figure17-1.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure17-1.jpg)'
- en: 'Figure 17-1: The Client class and two Client objects, matt and aoife'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-1：Client 类和两个 Client 对象，matt 和 aoife
- en: 'The class in the figure, Client, represents customers of a bank. You need to
    know three important aspects of a class: its name, its data variables, and its
    functions. In this example, our Client objects will have data variables for the
    client’s ID number, name, and contact information. When variables are declared
    as part of a class, they’re called *properties*. Likewise, our Client objects
    have several functions: you can close, suspend, or resume a customer’s account.
    When functions are declared as part of a class, they’re called *methods*. The
    various parts of a class are known collectively as its *members*; the members
    of a class include all its properties (variables), methods (functions), and constants.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的类 Client 代表银行的客户。你需要了解类的三个重要方面：它的名称、它的数据变量和它的函数。在这个例子中，我们的 Client 对象将包含客户的
    ID 号、姓名和联系方式等数据变量。当变量作为类的一部分声明时，它们被称为 *属性*。同样，我们的 Client 对象有几个函数：你可以关闭、暂停或恢复客户账户。当函数作为类的一部分声明时，它们被称为
    *方法*。类的各个部分统称为它的 *成员*；类的成员包括所有属性（变量）、方法（函数）和常量。
- en: The bottom of [Figure 17-1](#fig17-1) also shows two objects (or instances)
    created from the Client class, named matt and aoife. Each object has its own set
    of properties (for example, the matt object has a surname of Smith and the address
    10 Main Street, Dublin), and both objects have access to the methods defined in
    the Client class. In PHP programming, you can have a $matt variable that functions
    as a reference to the Client object of the same name, and you can send it a message
    to close Matt’s account by writing $matt->closeAccount(). When the $matt object
    receives this message, it would execute its closeAccount() method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-1](#fig17-1) 底部还展示了从 Client 类创建的两个对象（或实例），分别命名为 matt 和 aoife。每个对象都有自己的一组属性（例如，matt
    对象的姓氏是 Smith，地址是都柏林主街 10 号），并且这两个对象都可以访问 Client 类中定义的方法。在 PHP 编程中，你可以拥有一个 $matt
    变量，作为对同名 Client 对象的引用，你可以通过编写 $matt->closeAccount() 发送消息来关闭 Matt 的账户。当 $matt 对象收到这个消息时，它将执行其
    closeAccount() 方法。'
- en: WARNING
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 警告
- en: '*When you’re writing object-oriented PHP code, make sure you don’t confuse
    the* -> *object operator (for objects and messages) with the* => *operator, which
    is for key/value relationships in arrays.*  ### Creating Relationships Between
    Objects'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你编写面向对象的 PHP 代码时，确保不要将* -> *对象运算符（用于对象和消息）与* => *运算符混淆，后者用于数组中的键/值关系。* ###
    创建对象之间的关系'
- en: One of the powerful features of OOP is that you can build relationships between
    objects by linking a property of one object to another object. In some cases,
    you might relate objects of the same class. For example, if you have a Person
    class, you might link one Person object to another to demonstrate that one person
    is another person’s parent. Other times, you might relate objects of different
    classes, such as to establish that a Client object is the owner of a BankAccount
    object, as shown in [Figure 17-2](#fig17-2).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）的一个强大特性是，你可以通过将一个对象的属性链接到另一个对象，建立对象之间的关系。在某些情况下，你可能会将同一类的对象关联起来。例如，如果你有一个
    Person 类，你可能会将一个 Person 对象链接到另一个 Person 对象，以展示一个人是另一个人的父母。其他时候，你可能会将不同类的对象关联起来，比如建立一个
    Client 对象是一个 BankAccount 对象的所有者，如[图 17-2](#fig17-2)所示。
- en: '![](../images/figure17-2.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure17-2.jpg)'
- en: 'Figure 17-2: The BankAccount class declares that each BankAccount object is
    linked to a Client object.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-2：BankAccount 类声明每个 BankAccount 对象都与一个 Client 对象相连接。
- en: 'The top of the figure shows the BankAccount class. Like the Client class we
    considered earlier, it includes data properties and methods that objects of this
    class can have: each BankAccount object has an account number, an owner, a balance,
    an overdraft limit, and a category, along with methods to deposit and withdraw
    money and set the overdraft limit.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图的顶部显示了 BankAccount 类。与我们之前讨论的 Client 类一样，它包含了该类对象可能拥有的数据属性和方法：每个 BankAccount
    对象都有一个账户号码、一个所有者、一个余额、一个透支限额和一个类别，并且拥有存款、取款以及设置透支限额的方法。
- en: 'The owner property is particularly significant: its value must be a reference
    to a Client object. The owner property thus creates a link between objects of
    the BankAccount and Client classes. For example, as you can see at the bottom
    of the figure, DUB1070, a BankAccount object, is linked to matt, one of the Client
    objects. The beauty of this mechanism is that for any BankAccount object we’re
    working with, we can follow the link through the owner property to its related
    Client object and find out the name, address, and other details of the person
    who has the bank account.  ### Encapsulation and Information Hiding'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: owner 属性特别重要：它的值必须是指向 Client 对象的引用。因此，owner 属性在 BankAccount 和 Client 类的对象之间创建了一个联系。例如，如你在图的底部看到的，DUB1070，一个
    BankAccount 对象，链接到 matt，一个 Client 对象。这个机制的妙处在于，对于我们正在处理的任何 BankAccount 对象，我们可以通过
    owner 属性的链接找到其相关的 Client 对象，从而得知拥有该银行账户的人的姓名、地址以及其他细节。### 封装与信息隐藏
- en: A class organizes an object’s data and the methods that can affect that data,
    gathering them in the same place. This principle, known as *encapsulation*, is
    central to OOP. Encapsulation helps keep projects organized; returning to the
    example in [Figure 17-1](#fig17-1), it’s logical that the methods for working
    with customer data are declared in the same file that also declares the data properties
    that should be stored about customers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类将对象的数据和可以影响这些数据的方法组织在一起，将它们聚集在同一地方。这一原则被称为*封装*，它是面向对象编程的核心。封装有助于保持项目的组织性；回到[图
    17-1](#fig17-1)中的例子，可以看出，处理客户数据的方法声明在同一个文件中，该文件还声明了应存储的客户数据属性。
- en: A danger arises, however, if all the data of an object can be directly changed
    by any part of the computer system that has access to that object. For example,
    we wouldn’t want the age of a Client object to be set to 0 or a negative number!
    In fact, the bank might have a policy setting the minimum age of a client to,
    say, 16 years old. To avoid such unauthorized changes and ensure valid data, object-oriented
    languages, including PHP, provide ways to control access to an object’s data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果一个对象的所有数据都可以被计算机系统中任何可以访问该对象的部分直接更改，就会产生风险。例如，我们不希望 Client 对象的年龄被设置为 0
    或负数！事实上，银行可能有政策要求客户的最低年龄为 16 岁。为了避免这种未经授权的更改并确保数据有效，面向对象的语言（包括 PHP）提供了控制访问对象数据的方式。
- en: The OOP feature of managing access to the data and methods of an object is known
    as *information hiding*. In PHP, you use the public, private, and protected keywords
    to declare different levels of access to the properties and methods of a class
    of objects. Continuing our example, we might prevent direct access to a Client
    object’s age property by making it private. Then we might declare a public setAge()
    method that will update the age only if certain validation requirements are met,
    such as being an integer 16 or greater. We’ll discuss how to use these features
    of object-oriented PHP in detail in the next few chapters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）中的一个特性是管理对象数据和方法的访问权限，这被称为*信息隐藏*。在PHP中，你可以使用public、private和protected关键字来声明不同级别的访问权限，以控制类对象的属性和方法的访问权限。继续我们之前的例子，我们可能通过将Client对象的年龄属性设为private来防止直接访问。然后，我们可能声明一个public的setAge()方法，只有在满足某些验证要求（如年龄为16岁或更大且为整数）时，才会更新年龄。我们将在接下来的几章中详细讨论如何使用面向对象的PHP特性。
- en: Superclasses, Inheritance, and Overriding
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超类、继承与重写
- en: You can assign properties and methods that are common among several classes
    to a *superclass*, a generalized class that other classes (called *subclasses*)
    can *inherit* characteristics from. For example, both staff and clients of a bank
    will share many common data properties, such as a name, address, and phone number.
    [Figure 17-3](#fig17-3) shows the common properties and methods of the Client
    and StaffMember classes in bold. Some properties and methods are unique to each
    class, such as clientId for Client objects versus staffId for StaffMember objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将几个类之间共有的属性和方法分配给一个*超类*，这是一个通用类，其他类（称为*子类*）可以从中*继承*特性。例如，银行的员工和客户将共享许多共同的数据属性，如姓名、地址和电话号码。[图
    17-3](#fig17-3)显示了Client和StaffMember类的共同属性和方法，已用粗体标出。一些属性和方法是每个类特有的，例如Client对象的clientId和StaffMember对象的staffId。
- en: '![](../images/figure17-3.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure17-3.jpg)'
- en: 'Figure 17-3: The Client and StaffMember classes have many duplicate members—very
    inefficient!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-3：Client和StaffMember类有许多重复的成员——效率极低！
- en: '[Figure 17-4](#fig17-4) illustrates how we can generalize the common properties
    and methods into a new superclass named Person, from which the Client and StaffMember
    classes both inherit. Only those properties and methods unique to a particular
    subclass are defined directly in the subclass itself. In PHP, we write something
    as simple as class Client extends Person to indicate that one class is to inherit
    from another.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-4](#fig17-4)说明了我们如何将共同的属性和方法概括成一个名为Person的新超类，Client和StaffMember类都从中继承。只有那些特定子类独有的属性和方法才会直接在子类中定义。在PHP中，我们可以通过简单地写`class
    Client extends Person`来表示一个类从另一个类继承。'
- en: '![](../images/figure17-4.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure17-4.jpg)'
- en: 'Figure 17-4: The generalized Person superclass eliminates duplication.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-4：通用的Person超类消除了重复。
- en: Superclasses and inheritance help you avoid duplicating code across several
    classes. For example, you wouldn’t want to write code for operations like validating
    telephone numbers and addresses in multiple places; if something were to change
    (such as the 2014 introduction of Irish ZIP codes, called Eircodes!), you’d have
    to update several classes, and perhaps addresses and phone numbers would end up
    being treated differently in different parts of the system. Thanks to superclasses
    and inheritance, the code needs to be updated only once.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 超类和继承帮助你避免在多个类中重复代码。例如，你不希望在多个地方编写验证电话号码和地址等操作的代码；如果某些内容发生变化（例如2014年引入了爱尔兰的邮政编码——Eircodes！），你将不得不更新多个类，可能会导致地址和电话号码在系统的不同部分被不同对待。得益于超类和继承，代码只需要更新一次。
- en: 'Often you’ll want subclasses to inherit all the methods from their superclass,
    but this isn’t always the case. Sometimes a class may need to have logic that’s
    different from that of its superclass. For example, you might have a subclass
    of clients whose costs or taxes are calculated differently, or you might have
    products that require a special disclaimer to be displayed. In such circumstances,
    a subclass can *override* an inherited method; that is, you can create a method
    directly in the subclass that takes precedence over the method of the same name
    from the superclass. In PHP, overriding a method is straightforward: if a subclass
    declaration implements a method matching one that would have been inherited from
    a superclass, then the subclass’s method will be used.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The Flow of Control for Object-Oriented Systems
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each type of programming language has a *flow of control*, which indicates how
    a computer system starts running and how it decides what to do next, after it’s
    started. As you’ve seen in the last several chapters, the flow of control for
    a procedural PHP web application usually is driven by a front controller in the
    *index.php* PHP script. When the web server receives an HTTP request, the statements
    in *index.php* are executed in sequence. In an object-oriented application, however,
    where many of the PHP files are devoted to declaring classes of objects, the flow
    of control may seem a bit more obscure. When do objects of those classes actually
    get created and start sending messages to one another?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Object-oriented PHP web applications still have an *index.php* script, though
    it looks a bit different from what we’ve seen previously. It typically creates
    the main application object, which serves as a front controller, and tells this
    object to process the received request and act appropriately. [Listing 17-1](#lis17-1)
    illustrates the kind of *index.php* scripts we’ll write in the coming chapters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 17-1: The typical code for an object-oriented index.php front controller'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: First, we read in the declaration for the class (or classes) we’ll be using.
    You’ll learn a simple way to do this in [Chapter 18](chapter18.xhtml), and then
    in [Chapter 20](chapter20.xhtml) you’ll learn to use the Composer PHP command
    line tool to load class declarations in a more general way.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a new object of the WebApplication class, storing a reference
    to this new object in the $app variable. The WebApplication class will contain
    the logic for processing an HTTP request received from a web client, which is
    everything we previously would have put into the *index.php* script itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Then we send the message run() to the WebApplication object, which will result
    in the run() method that’s declared in the WebApplication class being executed
    for the particular $app object. The code for the run() method will include statements
    to do things like extract an action from the URL-encoded variables and check the
    session for login status. The code may also invoke other methods or create new
    objects as appropriate to complete the action requested by the web client.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们向WebApplication对象发送消息run()，这将导致在WebApplication类中为特定的$app对象执行声明的run()方法。run()方法的代码将包括诸如从URL编码的变量中提取动作并检查会话中的登录状态等操作。代码还可能调用其他方法或根据需要创建新对象，以完成网页客户端请求的操作。
- en: In summary, for a web application like this, the flow of control is sequential
    within the *index.php* file; the statements in that file are executed in order.
    As a result, an object is created, and the object is sent a message to start processing
    the HTTP request. From this point on, all the other logic for our web application
    will be in the methods of the WebApplication class, or other classes for which
    objects will be created as part of the execution of methods in the WebApplication
    class.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，对于像这样的网页应用程序，控制流是在*index.php*文件中顺序进行的；该文件中的语句会按顺序执行。因此，会创建一个对象，并向该对象发送消息以开始处理HTTP请求。从此之后，网页应用程序的所有其他逻辑将位于WebApplication类的方法中，或者是WebApplication类方法执行过程中会创建对象的其他类中。
- en: An Example Class Declaration
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例类声明
- en: Let’s now consider an example PHP class declaration. In [Listing 17-2](#lis17-2),
    we declare a class named Player, such as might be part of an online game system.
    Don’t worry too much about the specifics of the code; we’ll cover how to write
    PHP classes in much more detail in later chapters. For now, this example simply
    offers a glimpse of the type of code that’s to come.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一个PHP类声明的示例。在[Listing 17-2](#lis17-2)中，我们声明了一个名为Player的类，可能是在线游戏系统的一部分。暂时不要太担心代码的细节；我们将在后面的章节中更加详细地介绍如何编写PHP类。现在，这个示例只是提供了即将到来的代码类型的一瞥。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 17-2: The PHP code to declare a Player class'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 17-2：声明Player类的PHP代码
- en: We use the class keyword to declare a class called Player, and we give the class
    two properties, name and highScore. Just as for variables in non-object-oriented
    PHP, you can assign a default value to a property. We do that here, setting the
    default value of highScore to 0 ❶ so that each new Player object will be created
    with an initial high score of 0\. We next declare the setName() method ❷, which
    when invoked will take in a string parameter and store it in a Player object’s
    name property. Then we declare the setHighScore() method ❸. It takes in a parameter
    ($newScore), and if this new score is higher than the stored high score for the
    object, then the new score is stored in the object’s highScore property.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用class关键字声明一个名为Player的类，并为该类提供两个属性：name和highScore。就像在非面向对象PHP中声明变量一样，你可以为属性指定默认值。我们在这里这么做，设置highScore的默认值为0❶，这样每个新的Player对象都会创建时拥有初始的高分0。接着，我们声明setName()方法❷，当调用时，它会接收一个字符串参数并将其存储在Player对象的name属性中。然后我们声明setHighScore()方法❸。它接收一个参数($newScore)，如果这个新分数高于该对象存储的高分，那么新的分数将存储在对象的highScore属性中。
- en: 'When a method is executed, it will be working on the properties of a particular
    object created from the class the method is defined in. In the method’s definition,
    the special PHP keyword $this refers to the object on which the method will be
    invoked. Thus, in the definition for the setName() method, we use the $this keyword
    (as in $this->name = $name;) as a stand-in for whichever Player object is being
    assigned a name. For example, I might have an object $player1 whose name I set
    to "Matt", and a second object $player2 whose name I set to "Aoife". In both cases,
    the setName() method code ❷ would be invoked to assign the name, and in both cases
    $this would stand for the Player object whose name is being set: first $player1
    and then $player2.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方法被执行时，它将在特定的由类创建的对象的属性上进行操作。在方法的定义中，特殊的PHP关键字$this表示将调用该方法的对象。因此，在setName()方法的定义中，我们使用$this关键字（如$this->name
    = $name;）作为占位符，代表正在设置名称的Player对象。例如，我可能有一个对象$player1，其名称设置为"Matt"，另一个对象$player2，其名称设置为"Aoife"。在这两种情况下，setName()方法代码❷都会被调用来设置名称，并且在这两种情况下，$this都会代表正在设置名称的Player对象：首先是$player1，然后是$player2。
- en: Our class declaration includes examples of information hiding, in that the name
    and highScore properties are declared as private. They can’t be changed by code
    from outside the Player class. However, we’ve also declared the setName() and
    setHighScore() methods as public. These *setter* methods allow for outside communication
    with Player objects, but only through internal validation checks coded in the
    methods (such as checking that a new score exceeds the previous high score before
    overwriting the highScore property); these checks ensure that the object’s data
    is never set to invalid or inconsistent values.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类声明包括了信息隐藏的示例，因为 name 和 highScore 属性被声明为私有的。它们不能被 Player 类外部的代码修改。然而，我们也将
    setName() 和 setHighScore() 方法声明为公共的。这些*setter* 方法允许与 Player 对象进行外部交互，但仅通过方法中的内部验证检查（例如，在覆盖
    highScore 属性之前检查新得分是否超过了之前的最高得分）；这些检查确保对象的数据永远不会被设置为无效或不一致的值。
- en: Notice that each method in [Listing 17-2](#lis17-2) is short and simple. Once
    the architecture of an application has been created, writing code to declare each
    property and method of a class is often relatively straightforward. While the
    methods for a full web application will be longer than those shown in this example,
    one benefit of OOP is that it typically allows programmers to focus on writing
    one method of a class at a time, with each method having one clear responsibility.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[列表 17-2](#lis17-2) 中的每个方法都很简短和简单。一旦应用程序的架构创建完成，编写代码以声明类的每个属性和方法通常是相对直接的。尽管一个完整的
    Web 应用程序的方法会比此示例中的方法更长，但面向对象编程（OOP）的一个好处是，它通常允许程序员一次专注于编写类的一个方法，每个方法都有一个明确的职责。
- en: With OOP, you don’t have to think about all the ways the method could be used;
    you only need to make sure that what you’re writing is a correct behavior for
    the class. For example, it doesn’t matter if a Player object’s name is being set
    for the first time at the start of the game, is being updated in the middle of
    the game because the player changed their mind, or is being changed automatically
    because the player was turned into a frog. The point is to write the setName()
    method so that it requires valid parameters and results in the correct changes
    to the Player object’s properties. As such, the code will be easy to write and
    maintain.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程，你不需要考虑方法可能的所有使用方式；你只需要确保你编写的行为是该类的正确行为。例如，不论一个 Player 对象的名字是在游戏开始时第一次设置，还是在游戏中间因为玩家改变了主意而更新，或者因为玩家变成了青蛙而自动改变，都不重要。关键是编写
    setName() 方法，确保它要求有效的参数，并正确地修改 Player 对象的属性。因此，代码将易于编写和维护。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we surveyed some of the important OOP concepts. You saw that
    classes are templates for creating objects and that classes allow you to store
    all the variables and functions an object needs in one place, a concept called
    *encapsulation*. You also saw that objects can link to each other through their
    properties and that objects of different subclasses can inherit shared properties
    and methods from superclasses. Finally, you had a first look at some of the PHP
    code that implements these concepts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了一些重要的面向对象编程概念。你看到了类是创建对象的模板，并且类允许你将对象所需的所有变量和函数存储在一个地方，这个概念叫做*封装*。你还看到对象可以通过它们的属性相互关联，不同子类的对象可以继承父类的共享属性和方法。最后，你初步了解了一些实现这些概念的
    PHP 代码。
- en: In the next few chapters, you’ll learn how to declare classes, create objects,
    and send messages to objects to invoke their methods and change their data. You’ll
    then begin to put all that knowledge together to create well-organized object-oriented
    web applications building on the features we’ve explored in all the previous chapters.
    As you read ahead, don’t forget that you already know many of the core requirements
    for writing object-oriented PHP programs, since OOP comes down to declaring variables
    and writing PHP statements in functions; it’s just that the variables (properties)
    and functions (methods) are grouped (encapsulated) together in classes, and that
    the methods will be invoked in response to messages sent to objects of the classes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，你将学习如何声明类、创建对象、以及向对象发送消息以调用其方法并更改其数据。然后，你将开始将所有这些知识结合起来，创建结构良好的面向对象的Web应用程序，基于我们在前几章中探讨的特性。在你继续阅读时，别忘了你已经知道了编写面向对象PHP程序的许多核心要求，因为OOP的核心就是声明变量并在函数中编写PHP语句；只不过变量（属性）和函数（方法）被组织（封装）在类中，并且方法会响应发送给类的对象的消息进行调用。
- en: Exercises
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 1.   Choose a computer system, such as an online store, an application on your
    desktop or laptop, or an app on your phone or tablet. Think about some of the
    classes of objects that system might be using. Choose one class of object and
    write a list of the pieces of data it might store, as well as some of the methods
    it might need in order to work on that data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   选择一个计算机系统，例如一个在线商店、桌面或笔记本上的应用程序，或是手机或平板上的应用。思考该系统可能使用的某些对象类。选择一个对象类，并写出它可能存储的数据项以及它可能需要用来处理这些数据的一些方法。
- en: 2.   Thinking again of the classes from Exercise 1, try to identify one data
    property that you would want to restrict access to, so that it could be changed
    only through a method that would log the change.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   再次思考练习 1 中的类，尝试识别一个你希望限制访问的数据属性，以便它只能通过一个方法进行更改，该方法会记录更改日志。
- en: 3.   Consider a computer system for a library. Think of two classes of objects
    the computer system might use that share several data properties and methods (for
    example, different types of items the library offers for lending). Now generalize
    those common properties and methods into a suitably named superclass, and draw
    a class diagram like [Figure 17-4](#fig17-4) that shows which properties and methods
    are inherited from the superclass and which are specific to each subclass.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 3.   考虑一个图书馆的计算机系统。想想计算机系统可能使用的两类共享多个数据属性和方法的对象（例如，图书馆提供借阅的不同类型物品）。现在将这些公共属性和方法概括为一个适当命名的超类，并绘制类似于[图
    17-4](#fig17-4)的类图，显示从超类继承的属性和方法以及每个子类特有的属性和方法。
