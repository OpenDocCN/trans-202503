- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Insulting a Computer
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-I](Images/Alphabet-I.png)n this chapter, we’ll look at how computers
    can be trained to recognize different tones and emotion in written text, a technique
    known as *sentiment analysis**.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Imagine you need to write a few sentences to say that you are going to the
    zoo tomorrow.'
  prefs: []
  type: TYPE_NORMAL
- en: Think about what you might write if you’re super happy and excited about going.
    You love the zoo, and you can’t wait to go. What sorts of words would you use?
    Would your excitement affect the way you write the sentences?
  prefs: []
  type: TYPE_NORMAL
- en: Now think of what you might write if you’re angry about having to go. You hate
    zoos, there are other things that you’d rather be doing tomorrow, and you’re annoyed
    that someone is making you go. How might that show up in your writing? Would your
    annoyance make you use different sorts of words than you would if you were happy
    about going? Would you phrase your sentences differently?
  prefs: []
  type: TYPE_NORMAL
- en: Both of these paragraphs would have the same basic meaning (that you are going
    to the zoo tomorrow), but their tone and sentiment would be different. Computers
    can be trained to recognize the patterns in how we write when we’re annoyed compared
    with how we write when we’re happy. With enough examples of text demonstrating
    different emotions and sentiment, you can train an ML model to identify the emotion
    or tone in a new piece of writing based on patterns in vocabulary and grammar
    that the computer learns to recognize.
  prefs: []
  type: TYPE_NORMAL
- en: ML systems that are trained to recognize sentiment and emotion in text can be
    used to understand how people feel about things. For example, businesses use sentiment
    analysis to find out what people think about their products or services by pointing
    their ML model at millions of blogs, forums, newsgroups, and social media posts—far
    more than they could ever read themselves. Sentiment analysis tells them how much
    of that feedback seems positive and how much seems negative, and what the most
    common complaints and criticisms are.
  prefs: []
  type: TYPE_NORMAL
- en: Sentiment analysis isn’t just applied to massive amounts of text across the
    whole internet, though. Companies will often use it to help sort and prioritize
    customer support letters and emails, replying first to the letters and emails
    that sound the angriest or most annoyed.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, companies use sentiment analysis on their own internal discussions
    as a way of estimating how happy their employees are and if there are any issues
    or concerns that need attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll train an ML model to recognize the sentiment expressed
    by two different types of text: compliments and insults.'
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you’ll create a character that reacts to a message you type
    (see [Figure 7-1](#figure7-1)). If you give the character a compliment, it will
    look happy. If you insult it, it will look sad.
  prefs: []
  type: TYPE_NORMAL
- en: '![f07001](Images/f07001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 7-1:](#figureanchor7-1) Recognizing compliments and insults'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, start by designing your character. For my screenshots, I drew a simple
    face. You can draw anything you like, as long as you can tell if it is happy or
    sad. You could make an animal, a robot, an alien, or anything else you can think
    of.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)
    to start a new Scratch project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Costumes** tab, as shown in [Figure 7-2](#figure7-2).![f07002](Images/f07002.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-2:](#figureanchor7-2) Designing a character in the Costumes tab'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Move your mouse pointer over the cat face icon at the bottom left of the screen
    to see the choices for adding a costume, as shown in [Figure 7-3](#figure7-3).![f07003](Images/f07003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-3:](#figureanchor7-3) Adding a new costume'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’d like to draw your own character, click **Paint**. For my screenshots,
    I drew a simple green alien character by drawing a few colored circles and adding
    some hair (see [Figure 7-4](#figure7-4)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’d prefer not to draw the character yourself, you have a few other options.
    If your computer has a webcam and you want to use a photo of your face, click
    **Camera**. Or, to use a picture you’ve saved on the computer (such as one you
    downloaded from the internet), click **Upload Costume**. To pick a costume from
    the Scratch Costume Library instead, click **Choose a Costume**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: No matter which choice you make, you should see the character on the canvas
    after this step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07004](Images/f07004.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-4:](#figureanchor7-4) Drawing your character'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click the character costume in the costume pane and click **duplicate**,
    as shown in [Figure 7-5](#figure7-5). You’ll need three copies of it.![f07005](Images/f07005.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-5:](#figureanchor7-5) Duplicating a costume'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rename each copy of the character by clicking it in the costume pane and then
    typing the new name in the **Costume** text box above the canvas, as shown in
    [Figure 7-6](#figure7-6). Name them `waiting`, `feeling happy`, and `feeling sad`.![f07006](Images/f07006.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-6:](#figureanchor7-6) Renaming your character costumes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click each character costume in the costume pane and draw an expression that
    matches its name, as shown in [Figure 7-7](#figure7-7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `feeling happy` costume should look happy. If it’s a face, you could make
    it smile. If it’s an animal, you could change the position of its tail or ears.
    Or you could just draw the character holding up a sign that says how it feels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `feeling sad` costume should look sad. If it’s a face, you could draw a
    frown or tears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `waiting` costume will be used while your character is waiting for you to
    say something to it, so it should be neither happy nor sad.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07007](Images/f07007.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-7:](#figureanchor7-7) Adding expressions to the different character
    costumes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save your Scratch project by clicking **File**▶**Save to your computer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Your Game Without ML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s useful to see the difference ML makes by trying to code this AI project
    without it first. But you can skip this part if you’d rather go straight to using
    ML.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Code** tab, as shown in [Figure 7-8](#figure7-8).![f07008](Images/f07008.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-8:](#figureanchor7-8) The Code tab'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the script shown in [Figure 7-9](#figure7-9).![f07009](Images/f07009.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-9:](#figureanchor7-9) Coding the project without ML'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save your project, using **File**▶**Save to your computer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your project by clicking the Green Flag icon. Your character will ask you
    to say something to it. Type `I like you` or `You are nice`, and your character
    will look happy. If you type anything else, your character will look sad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now type `You are lovely`. Why doesn’t your character look happy?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What would you need to change about your code so it would recognize “I like
    you” and “You are nice” *and* “You are lovely” as compliments?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do you think you can write a script that includes *every possible way* of phrasing
    every possible compliment and insult?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Chapter 1, I said that ML is not the only way to create an AI system. Here
    you’ve created an AI program using a *rules-based* approach. You can see why,
    although rules-based techniques like this are still used for some very simple
    AI projects, ML is the preferred approach for more complicated projects. We’ll
    train our project that way next, and later in the chapter we’ll see how the ML
    code performs compared to the rules-based code.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train the computer to recognize compliments and insults, you’ll collect examples
    of both and use them to train an ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new ML project, name it `Make me happy`, and set it to learn to recognize
    text in your preferred language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 7-10](#figure7-10).![f07010](Images/f07010.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-10:](#figureanchor7-10) Train is the first phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label**, as shown in [Figure 7-11](#figure7-11). Name this training
    bucket `compliments`. Then, create a second training bucket and name it `insults`.![f07011](Images/f07011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-11:](#figureanchor7-11) Prepare two training buckets using **Add
    new label**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add example** **in the **compliments** bucket, as shown in [Figure 7-12](#figure7-12),
    and type the best compliment that you can think of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this step to add at least five examples of compliments that will make
    your character happy. These are the examples your ML model will use to learn what
    a compliment looks like, so try to think of a wide variety.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07012](Images/f07012.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-12:](#figureanchor7-12) Training examples for recognizing compliments**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***   Click **Add example** in the **insults** bucket, as shown in [Figure
    7-13](#figure7-13), and type the meanest, cruelest insult that you can think of.'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this step to add at least *five* examples of insults that will make your
    character sad. Again, these are the examples that your ML model will use to learn
    what an insult looks like, so try to come up with several variations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07013](Images/f07013.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-13:](#figureanchor7-13) Training examples for recognizing insults
    *   Click **Back to project** in the top-left corner of the screen.*   Click **Learn
    & Test**.*   Click **Train new machine learning model**, as shown in [Figure 7-14](#figure7-14).![f07014](Images/f07014.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Figure 7-14:](#figureanchor7-14) Training a new ML model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The computer will use the examples you’ve just created to learn how to recognize
    compliments and insults.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To do so, it will look for patterns in the examples you’ve written. It will
    learn from both the words you chose and the way you phrased the sentences. Then,
    it will use these patterns to recognize the meaning of messages we’ll send to
    it in the next steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Training the model might take a minute, but you’ll notice that it’s much quicker
    than the image classifiers that you have been training in the previous chapters.
    Learning to recognize patterns in text is much easier for computers than learning
    to recognize patterns in images.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test your ML model by typing a compliment or insult into the **Test** box, as
    shown in [Figure 7-15](#figure7-15).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s important that you test it with examples you have not included in the training
    buckets. You’re testing how well the computer can recognize new examples that
    it’s never seen before, not how well it remembers the examples you’ve already
    given it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your model gets things wrong, go back to the Train phase and add more examples.
    Then, come back to the Learn & Test phase and train a new ML model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep going until you’re happy with how the computer performs. In the next chapter,
    you’ll learn better ways to test ML models, but for now, simply trying out the
    model a few times is a good start.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07015](Images/f07015.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-15:](#figureanchor7-15) Testing is an important part of ML.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**### Code Your Game with ML'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an ML model that can recognize compliments and insults, you’ll
    modify your earlier project to use your ML model instead of the rules you used
    before.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make**, as shown in [Figure 7-16](#figure7-16).![f07016](Images/f07016.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-16:](#figureanchor7-16) Once you’re happy with your ML model, it’s
    time to make something with it!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Scratch 3**, and then click **Open in Scratch 3** to open a new window
    with Scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see new blocks representing your ML model in the Toolbox, as shown
    in [Figure 7-17](#figure7-17).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f07017](Images/f07017.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 7-17:](#figureanchor7-17) Scratch will open with a new set of blocks
    for your project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open your saved project by clicking **File**▶**Load from your computer**, as
    shown in [Figure 7-18](#figure7-18).![f07018](Images/f07018.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-18:](#figureanchor7-18) Open the rules-based project you worked on
    earlier.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you created the rules-based script earlier, update it to match [Figure 7-19](#figure7-19).
    If you skipped the rules-based approach to the project, create the whole script
    shown in [Figure 7-19](#figure7-19).![f07019](Images/f07019.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 7-19:](#figureanchor7-19) Coding the project using ML'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this script, your character will ask you to say something to it. The script
    uses your ML model to recognize whether the message you type is a compliment or
    an insult. It will display one of the costumes you’ve drawn based on what it’s
    recognized, making it look like your character is reacting to whether you’re complimenting
    or insulting it!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you coded this project earlier without ML, compare this script with the previous
    one. Can you see how ML makes it easier to create a project that can react to
    a wider variety of possible messages?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s time to test your project. Click the Green Flag and try typing a few messages.
    Even if you type something you didn’t use for training, hopefully the character
    will correctly react to your message. If it doesn’t, you can always go back to
    the Train phase to add more examples and then train a new ML model.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve successfully created a character that has learned to recognize and react
    to compliments and insults you give it!
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at a few ways you could improve this project.
  prefs: []
  type: TYPE_NORMAL
- en: Using Speech Input Instead of Typing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What about changing your project so that you can say your compliments and insults
    aloud instead of typing them?
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need a microphone on your computer to be able to use speech input, and
    you’ll need to add the Speech to Text extension from the Scratch Extensions Library.
    To access the Extensions Library, click the Add Extension icon (it looks like
    two blocks with a plus sign, +) at the bottom of the Toolbox. This library contains
    additional blocks you can use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Find and click the **Speech to Text** extension to add those blocks to your
    Toolbox, and then update your script to look like [Figure 7-20](#figure7-20).
  prefs: []
  type: TYPE_NORMAL
- en: '![f07020](Images/f07020.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 7-20:](#figureanchor7-20) The Make me happy project using speech recognition'
  prefs: []
  type: TYPE_NORMAL
- en: '*Speech recognition* *is another application of ML. For this improvement, you
    aren’t training the speech ML model yourself, you’re using a model that someone
    else has trained for you. But the basic principle behind how the speech blocks
    were created is similar to how you created the typed examples of compliments and
    insults.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*What else could you do to improve your project?'
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing Speech That Isn’t a Compliment or Insult
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Type `What is the time?` to your character. It might think that this question
    is a compliment and look happy. Or it might identify it as an insult and look
    sad.
  prefs: []
  type: TYPE_NORMAL
- en: Neither of those reactions is really the right thing to do. You could update
    your code so that it doesn’t react at all when it gets messages that aren’t a
    compliment or an insult.
  prefs: []
  type: TYPE_NORMAL
- en: When you tested your ML model in the Learn & Test phase, you may have noticed
    the confidence score showing how confident the computer is that it has recognized
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: Try typing `What is the time?` again now, as shown in [Figure 7-21](#figure7-21).
  prefs: []
  type: TYPE_NORMAL
- en: '![f07021](Images/f07021.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 7-21:](#figureanchor7-21) Testing the confidence in classifying “What
    is the time?”'
  prefs: []
  type: TYPE_NORMAL
- en: You should see that this message gets a very low confidence score. This is the
    ML model’s way of telling you that it didn’t recognize the text. It’s saying that
    in all of the training examples you’ve given it, it hasn’t seen anything like
    that before, so it wasn’t able to recognize whether the message was a compliment
    or insult.
  prefs: []
  type: TYPE_NORMAL
- en: My ML model had a confidence score of 0 in its classifying of “What is the time?”
    Your ML model might have scored a bit higher, depending on how you trained it.
    For example, if you included a lot of questions like “What is wrong with you?”
    in your insults bucket, your ML model might have 10 percent confidence that “What
    is the time?” is an insult, just because it is a question. That would still be
    useful information, as it’s telling you that there’s a 90 percent chance that
    the message isn’t an insult. It’s saying that the message had some similarities
    to patterns that it recognizes from the insults it learned from, but that it isn’t
    able to *confidently* identify the message as an insult.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with different test sentences that aren’t compliments or insults
    to see what sort of confidence scores you get. Compare these with the confidence
    scores you get when you test your ML model on messages that really are compliments
    and insults.
  prefs: []
  type: TYPE_NORMAL
- en: What sort of confidence score does your ML model give when it correctly recognizes
    an actual compliment or insult?
  prefs: []
  type: TYPE_NORMAL
- en: You can use the confidence score in your Scratch project, as shown in [Figure
    7-22](#figure7-22).
  prefs: []
  type: TYPE_NORMAL
- en: '![f07022](Images/f07022.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 7-22:](#figureanchor7-22) Using confidence scores in your code'
  prefs: []
  type: TYPE_NORMAL
- en: This script will make the character react only if the ML model is at least 70
    percent confident that it has recognized the message you give it. Otherwise, the
    script will ignore the message.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to change the `70` to a percentage that works for your ML model,
    based on your own testing.
  prefs: []
  type: TYPE_NORMAL
- en: Is there anything else you could do to improve your project?
  prefs: []
  type: TYPE_NORMAL
- en: Learning from Mistakes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When someone is using an ML system, they’ll often know if the computer has made
    a mistake. One way to improve your ML project is to let it learn from those mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Give the user a way to tell the project if the ML model makes a mistake. It
    could be a button to click, or a text box where they type “yes” or “no” in response
    to being asked, “Did I get that right?”
  prefs: []
  type: TYPE_NORMAL
- en: The script shown in [Figure 7-23](#figure7-23) will ask if the ML model is correct.
    If you type “no,” the text the computer didn’t recognize correctly will be added
    to the training examples. After every five new training examples, a new ML model
    is trained.
  prefs: []
  type: TYPE_NORMAL
- en: '![f07023](Images/f07023.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 7-23:](#figureanchor7-23) An example of learning from mistakes'
  prefs: []
  type: TYPE_NORMAL
- en: Training your model to learn from mistakes will make it smarter the longer you
    use it. Think of how you’d like to tell your character when it has misunderstood
    you, and use a script like this so it can learn from your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned about *sentiment analysis*, the use of ML to recognize
    the tone and emotion in text. You learned how businesses and organizations use
    sentiment analysis to get valuable insight and feedback from customers on the
    internet, prioritize customer service responses, and measure employee satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: You discovered that ML is a much better approach to building AI systems for
    complex projects than a simple rules-based method. You also learned how confidence
    scores can tell you how sure an ML model is of the predictions it’s making, and
    saw how you could improve your ML models by helping them learn from their mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll use an approach similar to sentiment analysis to
    train a model to recognize different styles of writing.****
  prefs: []
  type: TYPE_NORMAL
