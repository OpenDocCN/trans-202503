- en: —27—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Heaps in Politics and Academia
  prefs: []
  type: TYPE_NORMAL
- en: Early the next morning, Frank snuck out of the safe house and made his way across
    town to the police academy. Once on campus, surrounded by police officers, cadets,
    and retired officers, he felt himself relax. He even smiled broadly as he cut
    across the quad to the academy’s faculty office building.
  prefs: []
  type: TYPE_NORMAL
- en: Frank hadn’t been in the building in years. As a rule, the professors maintained
    an open-door policy that allowed students to stop by with questions anytime. In
    reality, few students ever took advantage of this access, preferring instead to
    wait until the night before a test to realize how much they didn’t know. Frank
    often held out longer, waiting until he sat down to take the exam before realizing
    his ignorance.
  prefs: []
  type: TYPE_NORMAL
- en: A quick scan of the faculty directory indicated that Dr. Loop occupied the sole
    office on the building’s top floor. Frank wasn’t surprised. The peculiar design
    of the faculty building made office assignments a contentious topic in the best
    of times. Each floor held exactly half the offices of the floor beneath it, meaning
    that not only were the views better as you went up, but each office doubled in
    size. After years of bitter fighting, the dean had imposed a strict tenure-based
    priority for offices—the occupant of any office must have served a longer tenure
    than anyone in the offices directly below. In effect, he had turned the faculty
    building into a large tenure-based heap.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0214-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dr. Olivia Loop, Professor of Wizard Criminology, had taught at the police academy
    for 70 years. Only Dr. Babbleton, Professor of Floating-Point Operations, came
    close to matching her tenure, at 61 years.
  prefs: []
  type: TYPE_NORMAL
- en: By the time Frank reached the top floor, he was breathing hard and wondering
    how a 95-year-old professor managed that climb multiple times a day. Then again,
    she did have the benefit of constant exercise.
  prefs: []
  type: TYPE_NORMAL
- en: “Come in, come in,” called Dr. Loop through her open door. “Have a seat before
    you fall down. Those stairs can be tough, even for a youngster like you.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0214-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Frank entered the office and slumped gratefully into one of the hard wooden
    chairs in front of Dr. Loop’s desk. He struggled for breath for another moment
    as Dr. Loop watched him silently.
  prefs: []
  type: TYPE_NORMAL
- en: “Nice office,” Frank finally managed.
  prefs: []
  type: TYPE_NORMAL
- en: “It *is* wonderful, isn’t it?” said Dr. Loop. “I had to wait 70 years to make
    it here—70 years! Professor Iterator simply refused to retire for the longest
    time. But I just waited patiently. You know what happened the day Professor Iterator
    called it quits?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank shook his head, still too winded to give a proper response.
  prefs: []
  type: TYPE_NORMAL
- en: “That young upstart, Dr. Lambda, tried to steal my office!”
  prefs: []
  type: TYPE_NORMAL
- en: “Really?” Frank wheezed.
  prefs: []
  type: TYPE_NORMAL
- en: Dr. Loop shrugged. “You know how it is. Retirement at the police academy is
    always an exciting affair. Due to our tenure system, only the most senior professor
    can put in for retirement. Once that happens, no one can resist the chance to
    sneak into a better office.
  prefs: []
  type: TYPE_NORMAL
- en: “Honestly, it was all Professor Iterator’s fault. After 75 years, he just packed
    up and stormed out, muttering about troublesome kids. As per tradition, the only
    person he told was the one nearest the door—Dr. Lambda, who has been here only
    11 years.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0215-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Not caring about our well-established system for office assignments, Dr. Lambda
    packed the contents of his meager office and moved straight up here. Ha! It happens
    every time someone leaves. The professor with the very last office in the entire
    building runs upstairs and tries to take the top office. Every single time, I
    tell you!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0215-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Of course, once I heard of Dr. Iterator’s departure, I raced right up here
    to claim the office for myself. It was rightfully mine, you see. I had the only
    legitimate claim, having been here for 70 years. But Dr. Babbleton heard me running
    up the stairs and decided to try for it as well. It always happens like that,
    you know.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Once an office opens up, both the professors who live below it rush up to make
    a claim. Unless a grant application is due—then it can take a few weeks for anyone
    to notice. In this case, Dr. Babbleton and I also had to contend with Dr. Lambda’s
    predictable attempt to get the best office.
  prefs: []
  type: TYPE_NORMAL
- en: “Anyway, there we were—Dr. Lambda, Dr. Babbleton, and me. We argued for a good
    hour about the tenure rules. Dr. Lambda had no claim and we all knew it, but he
    stubbornly held his ground for a while. The argument really came down to Dr. Babbleton,
    who had been here a paltry 61 years, and me. Inevitably, I won out—forcing Dr.
    Lambda to move down into my old room. Dr. Babbleton remained in her office on
    the floor below.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Dr. Lambda packed up his belongings and moved to my office, but the poor man
    found two other professors already waiting there. They had occupied the office
    below mine and were looking for an opportunity to upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0217-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “They both had better claims on my old office, one having been here 30 years
    and the other 40\. This time, Dr. Lambda didn’t put up much of a fight. Dr. Variable
    won that office. He deserved it, too, after 40 years.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0217-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “As luck would have it, Dr. Lambda finally caught a break on the next floor
    down. There the two professors below were both more junior than Dr. Lambda. I
    think he took particular pleasure in claiming victory and shutting the door in
    their faces.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0217-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “In a way, Dr. Lambda was lucky,” explained Dr. Loop. “When he tried to steal
    the top office, he ended up on the other side of the building with more junior
    professors. He got to move up a whole floor. The rules only state that the occupant
    of any office must have served a longer tenure than anyone in the offices *directly*
    below. So, by pure luck, Dr. Lambda now has an office on the second floor while
    some of his more senior colleagues are still on the first floor.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank waited politely to see if the story would continue. When it didn’t, he
    ventured, “Dr. Loop, if I could have a moment of your time? I have a few questions.”
  prefs: []
  type: TYPE_NORMAL
- en: “Of course,” said Dr. Loop. “I assume this is about this week’s assignment?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank balked, thrown off in mid-thought. “What? No. I’m not a student here.”
  prefs: []
  type: TYPE_NORMAL
- en: “You aren’t? Then you should consider the police force. It’s a noble career.”
  prefs: []
  type: TYPE_NORMAL
- en: “I graduated over 10 years ago.”
  prefs: []
  type: TYPE_NORMAL
- en: “Is that so?” Dr. Loop shrugged again. “After a while, all the kids just blend
    together.”
  prefs: []
  type: TYPE_NORMAL
- en: “Okay,” Frank said, desperately trying to regain his train of thought. “Right.
    I need to know about security spells.”
  prefs: []
  type: TYPE_NORMAL
- en: “Oh, I don’t *teach* magic,” explained Dr. Loop. “I teach Wizard Criminology,
    it’s the study of—”
  prefs: []
  type: TYPE_NORMAL
- en: “I took your class,” Frank interrupted. “I don’t want to know how to perform
    spells. I want to know what types of security spells exist. Particularly in police
    stations.”
  prefs: []
  type: TYPE_NORMAL
- en: Dr. Loop’s expression suddenly grew hard. “That’s very sensitive information,”
    she said, her voice cold. “Known only to a few people.”
  prefs: []
  type: TYPE_NORMAL
- en: “That’s why I’m here,” said Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Why, exactly, do you need this information?” she asked.
  prefs: []
  type: TYPE_NORMAL
- en: “I’m investigating a theft at the Capital Police Station,” he shot back. First
    the blathering story, now she was grilling him? He didn’t have time for this.
  prefs: []
  type: TYPE_NORMAL
- en: “I will need to see your badge,” prompted Dr. Loop. She made a beckoning motion
    with her hand.
  prefs: []
  type: TYPE_NORMAL
- en: Frank reached into his trench cloak and retrieved his Private Investigator badge.
    He tossed it on her desk.
  prefs: []
  type: TYPE_NORMAL
- en: “A PI?” Dr. Loop laughed. Then, her voice grew hard again. “Get out of my office.”
  prefs: []
  type: TYPE_NORMAL
- en: “Doctor Loop—” started Frank, but stopped at the sound of a crossbow being cocked.
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: HEAPS**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: 'A *max heap* is a binary tree–based data structure that maintains a special
    ordered relationship between a node and its children. Specifically, a heap stores
    the elements according to the *heap property*, which for a max heap states that
    the value at any node in the tree is larger (or equal to) every element below
    it. This structure allows the max heap to efficiently support several important
    operations: (1) efficiently finding the largest element, (2) removing the largest
    element, and (3) inserting an arbitrary element. These three operations make heaps
    ideal data structures for implementing priority queues.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0219-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Heaps are often visualized as trees, though they’re easy to implement as arrays,
    where each element in the array corresponds to a node in the tree, with the root
    node at index 0, as shown in the following diagram. Child node indexes are defined
    relative to the indexes of their parents. Specifically, a node at index *i* has
    children at indexes 2*i* + 1 and 2*i* + 2\. So the node at index 1 will have a
    child at index (2 × 1) + 1 = **3**, and at (2 × 1) + 2 = **4**, as shown in the
    diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0220-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, some heap implementations just skip array index 0 for simplicity.
    The root node is instead placed at index 1\. In this case, a node at index *i*
    has children at indexes 2*i* and 2*i* + 1, making the index computations simpler.
    Either way, the indexing scheme allows the algorithm to compute the index of a
    child based on the parent, and a parent based on the child.
  prefs: []
  type: TYPE_NORMAL
- en: Since the root node (the first element in the array) always corresponds to the
    maximum value in a max heap, you can always find this value in constant time (that
    is, in the same amount of time no matter how many values are in the array). This
    allows a user to efficiently look up the highest-valued item on the priority queue.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add an element or remove the max element, the processes are more
    complicated, as they require first breaking and then restoring the heap property.
  prefs: []
  type: TYPE_NORMAL
- en: You add a new element to the heap by first appending it to the back of the array
    (the first empty space in the bottom level of the tree). This new value might
    be larger than its parent, which would break the heap property, so you need to
    push this node up the tree until it is no longer larger than its parent and the
    heap property is restored. More formally, if the new value is larger than the
    value of its parent node, you bubble it up by swapping it with its parent. For
    example, if we were to add 60 to the preceding heap, we would insert it at the
    bottom and swap it upward twice, because at both levels it is larger than its
    parent node.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0221-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Removal of the max element is similar. The original max value is swapped with
    the last element of the array, making the last element the new root node.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0221-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then the original max value (current last element) is deleted. We have now deleted
    the correct node, but likely broken the heap property in the process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0221-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Starting at the new root node, we walk that node down the tree in order to restore
    the heap property. At each level we compare that node’s value to both its children.
    If it is smaller than either of its children, we move the new root node downward
    to restore the heap property by swapping places with the larger of its two children.
    The downward swaps terminate when there are no larger children.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0222-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Both insertion of new elements and deletion of the maximum element require us
    to walk at most one path between the top and bottom of the tree. Since we can
    approximately double the number of nodes in a heap while adding only a single
    level of new nodes to the bottom, the operations can be fast even for large heaps.
    Specifically, we can double the number of nodes and add only one additional step
    to both of these operations! Furthermore, both operations guarantee that the tree
    remains balanced, so future operations will be efficient.
  prefs: []
  type: TYPE_NORMAL
