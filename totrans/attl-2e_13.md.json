["```\n$ git clone https://git.savannah.gnu.org/git/gnulib.git\n--snip--\n$ ln -s $PWD/gnulib/gnulib-tool $HOME/bin/gnulib-tool\n$\n```", "```\n$ mkdir -p b64/src\n$ cd b64\n$\n```", "```\n#include \"config.h\"\n#include <stdio.h>\n\nint main(void)\n{\n    printf(\"b64 - convert data to and from base64 strings.\\n\");\n    return 0;\n}\n```", "```\n$ autoscan\n$ mv configure.scan configure.ac\n$ echo \"bin_PROGRAMS = src/b64\nsrc_b64_SOURCES = src/b64.c\" >Makefile.am\n$ touch NEWS README AUTHORS ChangeLog\n$\n```", "```\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\nAC_INIT([b64], [1.0], [b 64-bugs@example.org])\nAM_INIT_AUTOMAKE([subdir-objects])\nAC_CONFIG_SRCDIR([src/b64.c])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIRS([m4])\n--snip--\nAC_CONFIG_FILES([Makefile])\n\nAC_OUTPUT\n```", "```\n$ autoreconf -i\naclocal: warning: couldn't open directory 'm4': No such file or directory\nconfigure.ac:12: installing './compile'\nconfigure.ac:6: installing './install-sh'\nconfigure.ac:6: installing './missing'\nMakefile.am: installing './INSTALL'\nMakefile.am: installing './COPYING' using GNU General Public License v3 file\nMakefile.am:     Consider adding the COPYING file to the version control\nsystem\nMakefile.am:     for your code, to avoid questions about which license your\nproject uses\nMakefile.am: installing './depcomp'\n$\n$ ./configure && make\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\n--snip--\nconfig.status: creating Makefile\nconfig.status: creating config.h\nconfig.status: executing depfiles commands\nmake  all-am\nmake[1]: Entering directory '/.../b64'\ndepbase=`echo src/b64.o | sed 's|[^/]*$|.deps/&|;s|\\.o$||'`;\\\ngcc -DHAVE_CONFIG_H -I.         -g -O2 -MT src/b64.o -MD -MP -MF $depbase.Tpo -c\n-o src/b64.o src/b64.c &&\\\nmv -f $depbase.Tpo $depbase.Po\ngcc    -g -O2 -o src/b64 src/b64.o\nmake[1]:   Leaving directory '/.../b64'\n$\n$ src/b64\n$ b64 - convert data to and from base64 strings.\n$\n```", "```\n$ gnulib-tool --import base64\nModule list with included dependencies (indented):\n    absolute-header\n  base64\n    extensions\n    extern-inline\n    include_next\n    memchr\n    snippet/arg-nonnull\n    snippet/c++defs\n    snippet/warn-on-use\n    stdbool\n    stddef\n    string\nFile list:\n  lib/arg-nonnull.h\n  lib/base64.c\n  lib/base64.h\n  --snip--\n  m4/string_h.m4\n  m4/warn-on-use.m4\n  m4/wchar_t.m4\nCreating directory ./lib\nCreating directory ./m4\nCopying file lib/arg-nonnull.h\nCopying file lib/base64.c\nCopying file lib/base64.h\n--snip--\nCopying file m4/string_h.m4\nCopying file m4/warn-on-use.m4\nCopying file m4/wchar_t.m4\nCreating lib/Makefile.am\nCreating m4/gnulib-cache.m4\nCreating m4/gnulib-comp.m4\nCreating ./lib/.gitignore\nCreating ./m4/.gitignore\nFinished.\n\nYou may need to add #include directives for the following .h files.\n  #include \"base64.h\"\n\nDon't forget to\n  - add \"lib/Makefile\" to AC_CONFIG_FILES in ./configure.ac,\n  - mention \"lib\" in SUBDIRS in Makefile.am,\n  - mention \"-I m4\" in ACLOCAL_AMFLAGS in Makefile.am,\n  - mention \"m4/gnulib-cache.m4\" in EXTRA_DIST in Makefile.am,\n  - invoke gl_EARLY in ./configure.ac, right after AC_PROG_CC,\n  - invoke gl_INIT in ./configure.ac.\n$\n```", "```\n--snip--\n# Checks for programs.\nAC_PROG_CC\ngl_EARLY\n\n# Checks for libraries.\n\n# Checks for header files.\n\n# Initialize Gnulib.\ngl_INIT\n\n# Checks for typedefs, structures, and compiler characteristics.\n\n# Checks for library functions.\n\nAC_CONFIG_FILES([Makefile lib/Makefile])\n\nAC_OUTPUT\n```", "```\nACLOCAL_AMFLAGS = -I m4\nEXTRA_DIST = m4/gnulib-cache.m4\nSUBDIRS = lib\n\nbin_PROGRAMS = src/b64\nsrc_b64_SOURCES = src/b64.c\n```", "```\n#include \"config.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <unistd.h>\n\n#include \"base64.h\"\n\n#define BUF_GROW 1024\n\nstatic void exit_with_help(int status)\n{\n    printf(\"b64 â€“ convert data TO and FROM base64 (default: TO).\\n\");\n    printf(\"Usage: b64 [options]\\n\");\n    printf(\"Options:\\n\");\n    printf(\"  -d   base64-decode stdin to stdout.\\n\");\n    printf(\"  -h   print this help screen and exit.\\n\");\n    exit(status);\n}\n\nstatic char *read_input(FILE *f, size_t *psize)\n{\n    int c;\n    size_t insize, sz = 0;\n    char *bp = NULL, *cp = NULL, *ep = NULL;\n\n    while ((c = fgetc(f)) != EOF)\n    {\n        if (cp >= ep)\n        {\n            size_t nsz = sz == 0 ? BUF_GROW : sz * 2;\n            char *np = realloc(bp, nsz);\n            if (np == NULL)\n            {\n                perror(\"readin realloc\");\n                exit(1);\n            }\n cp = np + (cp - bp);\n            bp = np;\n            ep = np + nsz;\n            sz = nsz;\n        }\n        *cp++ = (char) c;\n    }\n    *psize = cp - bp;\n    return bp;\n}\n\nstatic int encode(FILE *f)\n{\n    size_t insize;\n    char *outbuf, *inbuf = read_input(f, &insize);\n    size_t outsize = base64_encode_alloc(inbuf, insize, &outbuf);\n    if (outbuf == NULL)\n    {\n        if (outsize == 0 && insize != 0)\n        {\n            fprintf(stderr, \"encode: input too long\\n\");\n            return 1;\n        }\n        fprintf(stderr, \"encode: allocation failure\\n\");\n    }\n    fwrite(outbuf, outsize, 1, stdout);\n    free(inbuf);\n    free(outbuf);\n    return 0;\n}\n\nstatic int decode(FILE *f)\n{\n    size_t outsize, insize;\n    char *outbuf, *inbuf = read_input(f, &insize);\n    bool ok = base64_decode_alloc(inbuf, insize, &outbuf, &outsize);\n    if (!ok)\n    {\n        fprintf(stderr, \"decode: input not base64\\n\");\n        return 1;\n    }\n    if (outbuf == NULL)\n    {\n        fprintf(stderr, \"decode: allocation failure\\n\");\n        return 1;\n    }\n    fwrite(outbuf, outsize, 1, stdout);\n    free(inbuf);\n    free(outbuf);\n    return 0;\n}\nint main(int argc, char *argv[])\n{\n int c;\n    bool tob64 = true;\n\n    while ((c = getopt(argc, argv, \"dh\")) != -1)\n    {\n        switch (c)\n        {\n            case 'd':\n                tob64 = false;\n                break;\n            case 'h':\n            default:                exit_with_help(c == 'h' ? 0 : 1);\n        }\n    }\n    return tob64 ? encode(stdin) : decode(stdin);\n}\n```", "```\nACLOCAL_AMFLAGS = -I m4\nEXTRA_DIST = m4/gnulib-cache.m4\nSUBDIRS = lib\n\nbin_PROGRAMS = src/b64\nsrc_b64_SOURCES = src/b64.c\nsrc_b64_CPPFLAGS = -I$(top_builddir)/lib -I$(top_srcdir)/lib\nsrc_b64_LDADD = lib/libgnu.a\n```", "```\n$ autoreconf -i\n--snip--\n$ ./configure && make\n--snip--\n$ echo hi | src/b64\naGkK$ echo -n aGkK | src/b64 -d\nhi\n$\n```", "```\n#!/bin/sh\ngnulib-tool --update\nautoreconf -i\n```"]