- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Events
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll create *events*. Also called scheduled events, these
    are database objects that fire based on a set schedule, executing the functionality
    you defined when creating them.
  prefs: []
  type: TYPE_NORMAL
- en: Events can be scheduled to run once or at some interval, like daily, weekly,
    or yearly; for example, you might create an event to perform weekly payroll processing.
    You can use events to schedule long-running processing during off-hours, like
    updating a billing table based on orders that came in that day. Sometimes you
    schedule off-hour events because your functionality needs to happen at a particular
    time, like making changes to the database at 2 AM when Daylight Saving Time begins.
  prefs: []
  type: TYPE_NORMAL
- en: The Event Scheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MySQL has an *event scheduler* that manages the scheduling and execution of
    events. The event scheduler can be turned on or off, but should be on by default.
    To confirm that the scheduler is on, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If your scheduler is on, the result should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `Value` displayed is `OFF`, you (or your database administrator) need
    to turn the scheduler on with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the `Value` returned is `DISABLED`, your MySQL server was started with the
    scheduler disabled. Sometimes this is done to temporarily stop the scheduler.
    You can still schedule events, but no events will fire until the scheduler is
    enabled again. If the event scheduler is disabled, it needs to be changed in a
    configuration file managed by your database administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Events with No End Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Listing 13-1](#listing13-1) you create an event that removes old rows from
    the `payable_audit` table in the `bank` database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 13-1: Creating a monthly event'
  prefs: []
  type: TYPE_NORMAL
- en: To create the event in the `bank` database, first you set your current database
    to `bank` with the `use` command. Then you drop the old version of this event
    (if one exists) in order to create a new one. Next you create the event, `e_cleanup_payable_audit`
    ❶, and set a schedule to run it once per month.
  prefs: []
  type: TYPE_NORMAL
- en: Every event begins with `on schedule`; for a one-time event, you’d follow this
    with the `at` keyword and the timestamp (the date and time) at which the event
    should fire. For a recurring event, `on schedule` should be followed by the word
    `every` and the interval at which it should fire. For example, `every 1 hour`,
    `every 2 week`, or `every 3 year`. (Intervals are expressed in the singular form,
    like `3 year` and not `3 year``s`.) In this case, you specify `every 1 month`
    ❷. You’ll also define the date and time when the recurring event `starts` and
    `ends`.
  prefs: []
  type: TYPE_NORMAL
- en: For your event, you define `starts` as `2024-01-01 10:00` ❸, meaning your event
    will start firing on 1/1/2024 at 10 AM and will fire every month at this time.
    You didn’t use the `ends` keyword, so this event will fire monthly—theoretically
    forever—until the event is dropped with the `drop event` command.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you define the event’s actions with the `do` command ❹, and add the SQL
    statements that perform the functionality in the event body. Your event body starts
    with `begin` and ends with `end`. Here, you delete rows in the `payable_audit`
    table that are more than one year old ❺. While you use only one statement here,
    it is possible to put multiple SQL statements in the event body.
  prefs: []
  type: TYPE_NORMAL
- en: The `show events` command displays a list of scheduled events in the current
    database, as in [Figure 13-1](#figure13-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c13/f13001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-1: The `show events` command as seen in MySQL Workbench'
  prefs: []
  type: TYPE_NORMAL
- en: The user account that defined the event is listed as the Definer. This gives
    you an audit trail that tells you who scheduled which events.
  prefs: []
  type: TYPE_NORMAL
- en: To show only events for a particular database (even if you aren’t currently
    in that database), use the `show events in` `database` command. In this example,
    the command would be `show events in bank`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a list of all events in all databases, you can use the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: MySQL provides you with the `events` table in the `information_schema` database
    that you can query for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Events with an End Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For events that should run for a limited time, use the `ends` keyword. For
    example, you might want to create an event that runs at 1/1/2024 once an hour
    between 9 AM and 5 PM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To schedule an event that runs every 5 minutes for the next hour, you might
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You started your event immediately. It will fire every 5 minutes, and will stop
    firing one hour from now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you need an event to fire just once at a particular date and time.
    For example, you may need to wait until after midnight to do some one-time account
    updates to your `bank` database so that interest rates are calculated first by
    another process. You could define an event like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Your `e_account_update` event is scheduled to run on 3/10/2024 at 1 minute past
    midnight.
  prefs: []
  type: TYPE_NORMAL
- en: You might find it useful to schedule a one-time event when the clocks change
    to Daylight Saving Time. On 3/10/2024, for example, the clocks move forward one
    hour. On 11/6/2024, Daylight Saving Time ends and the clocks move back one hour.
    In many databases, data will need to change as a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Schedule a one-time event for March 10, 2024, so that the database makes changes
    when Daylight Saving Time begins. On that date at 2 AM, your system clock will
    change to 3 AM. Schedule your event for 1 minute before the clocks change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Rather than having to stay awake until 1:59 in the morning to change the clock,
    you can schedule an event to do it for you.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To check for errors after your event runs, query a table in the `performance_schema`
    database called `error_log`.
  prefs: []
  type: TYPE_NORMAL
- en: The `performance_schema` database is used to monitor the performance of MySQL.
    The `error_log` table houses diagnostic messages like errors, warnings, and notifications
    of the MySQL server starting or stopping.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can check all event errors by finding rows where the `data`
    column contains the text `Event Scheduler`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This query finds all rows in the table that have the text `Event Scheduler`
    somewhere in the `data` column. Recall from Chapter 7 that the `like` operator
    allows you to check if a string matches some pattern. Here you’re using the `%`
    wildcard character to check that the `data` column contains a value that starts
    with any character(s), contains the text `Event Scheduler`, then ends with any
    character(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'To find errors for a particular event, search for the event name. Say the `e_account_update`
    event calls a procedure named `p_account_update()`, but that procedure doesn’t
    exist. You’ll find errors for the `e_account_update` event like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The query returns a row that shows the `logged` column with the date and time
    when the event fired, and the `data` column shows an error message ([Figure 13-2](#figure13-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/503007c13/f13002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-2: Displaying event errors in MySQL Workbench'
  prefs: []
  type: TYPE_NORMAL
- en: The message tells you that the `e_account_update` event in the `bank` database
    failed because `p_account_update` does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can disable an event using the `alter` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The event will not fire again until you re-enable it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When an event is no longer needed, you can drop it from the database using the
    `drop event` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you scheduled events to fire once and on a recurring basis.
    You learned how to check for errors in your event scheduler, and disable and drop
    events. The next chapter will focus on assorted tips and tricks that can make
    MySQL more productive and enjoyable.
  prefs: []
  type: TYPE_NORMAL
