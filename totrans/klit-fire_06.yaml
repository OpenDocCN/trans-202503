- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Coming in Midstream
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 中途介入
- en: So far, this book has been operating under the assumption that you are *initiating*
    the modernization effort at your organization. We’ve considered strategy that
    assumes you’re on-site to do the planning in the first place. The organization
    might have attempted to modernize before you were employed there, but I’ve assumed
    that the current modernization effort is something you started. However, most
    modernization efforts I’ve been involved with in my career have not looked like
    this. Organizations tend to underestimate the amount of work and level of investment
    modernization requires. An unfortunate consequence of that assumption is that
    they do not seek out expertise until they are in trouble.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书假设你是在*启动*组织中的现代化工作。我们讨论的战略也假设你最初是在现场进行规划的。这个组织可能在你加入之前就尝试过现代化，但我假设当前的现代化努力是你开始的。然而，我职业生涯中参与的大多数现代化工作并非如此。组织往往低估了现代化所需的工作量和投入程度。这个假设的不幸后果是，直到陷入困境时，他们才寻求专业帮助。
- en: In my career, the number of modernization efforts I have kicked off is dwarfed
    by the number of modernization efforts I have parachuted into. I would love to
    have the luxury of participating in the planning and assessment phases, but rarely
    do technical leaders think that is necessary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我启动的现代化工作远不如我跳伞式介入的现代化工作多。我很希望能够参与规划和评估阶段，但技术领导者们很少认为这有必要。
- en: This chapter describes what to do when you’re coming in midstream and the project
    is already in trouble. Activities can get messy when you’re attempting to change
    legacy systems, and this chapter is full of emergency “break glass here” techniques
    for untangling the mess.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了当你介入一个已经处于困境中的项目时该做什么。当你尝试改变遗留系统时，活动可能会变得混乱，本章充满了应急的“破玻璃”技术，帮助你理顺混乱的局面。
- en: When a project takes months or years of sustained commitment, no shortage of
    things can go wrong. In Chapter 3, I mentioned that most modernization stories
    begin with failure. Coming in when plans are already in motion and not going well
    limits your options. Pushing the reset button and going back to the drawing board
    may do more harm than good. A combat medic’s first job is to stop the bleeding,
    not order a bunch of X-rays and put together a diet and exercise plan. To be effective
    when you’re coming into a project that has already started, your role needs to
    adapt. First you need to stop the bleeding, and then you can do your analysis
    and long-term planning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个项目需要几个月或几年的持续投入时，出问题的事情会层出不穷。在第三章中，我提到过，大多数现代化的故事都以失败开始。你在计划已经开始并且进展不顺利时介入，选择的余地有限。按下重置按钮重新开始，可能会弊大于利。战地医护人员的首要任务是止血，而不是开一堆X光片或制定饮食和运动计划。要在一个已经开始的项目中发挥作用，你的角色必须做出调整。首先，你需要止血，然后你才能进行分析和长期规划。
- en: Finding the Bleed
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到关键问题
- en: Of course, technology projects do not literally bleed; therefore, identifying
    the most urgent issues can be a challenge. In this chapter, we discuss the situations
    I have seen the most often, but I want us to start with some general guidance
    first.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，技术项目并不会字面上“流血”；因此，识别最紧迫的问题可能是一个挑战。在本章中，我们讨论了我遇到过的最常见的情况，但我想我们首先要从一些一般性的指导开始。
- en: '**Find responsibility gaps**. There will always be a disconnect between responsibilities
    formally delegated and actual responsibilities or functionality. Conway’s law
    tells us that the technical architecture and the organization’s structure are
    general equivalents, but no system is a one-to-one mapping of its organization.
    There are parts of the system with shared ownership, parts that no one is responsible
    for at all, parts where responsibilities are split in unintuitive ways. When looking
    for bad technology, debt, or security issues, the most productive places to mine
    are gaps between what two components of the same organization officially own.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**发现责任空白**。正式委派的责任和实际责任或功能之间总会存在脱节。康威定律告诉我们，技术架构和组织结构是一般等效的，但没有任何系统是其组织的一对一映射。系统中有一些部分是共享责任的，有些部分根本没有人负责，还有一些部分的责任分配方式是非直观的。在寻找糟糕的技术、债务或安全问题时，最有成效的地方是寻找同一组织内两个组件之间官方责任的空白。'
- en: 'Organizations tend to have responsibility gaps in the following areas:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 组织通常在以下领域存在责任空白：
- en: So-called 20 percent projects, or tools and services built (usually by a single
    engineer) as a side project.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所谓的20%项目，或者是作为副业（通常由单个工程师完成）构建的工具和服务。
- en: Interfaces. Not so much visual design but common components that were built
    to standardize experience or style before the organization was large enough to
    run a team to maintain them.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口。这不是指视觉设计，而是指那些在组织足够大，能够组建团队来维护之前，构建的用于标准化体验或风格的公共组件。
- en: New specializations. Is the role of a data engineer closer to a database administrator
    or a data scientist?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的专业化角色。数据工程师的角色更接近数据库管理员还是数据科学家？
- en: Product engineering versus whatever the product runs on. Dev-Ops/site reliability
    engineering (SRE) didn’t solve that problem; this just moved it under more abstraction
    layers. If you’ve automated your infrastructure configuration, great—who maintains
    the automation tools?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品工程与产品运行所在平台之间的差异。Dev-Ops/网站可靠性工程（SRE）并没有解决这个问题；它只是将问题移到了更多的抽象层面。如果你已经自动化了基础设施配置，那很好——但是，谁来维护这些自动化工具呢？
- en: When there’s a responsibility gap, the organization has a blind spot. Debt collects,
    vulnerabilities go unpatched, and institutional knowledge is gradually lost.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在责任空白时，组织就会出现盲点。债务积累，漏洞未修复，机构知识逐渐丧失。
- en: '**Study the cadence, topics, and invite lists of meetings**. Too often, meetings
    are maladapted attempts to solve problems. So if you want to know what parts of
    the project are suffering the most, pay attention to what the team is having meetings
    about, how often meetings are held, and who is being dragged into those meetings.
    In particular, look for meetings with long invite lists. Large meetings are less
    effective than small meetings, but they do convincingly spread the blame around
    by giving everyone the impression that all parties were consulted and all opinions
    were explored. Meetings with ever-expanding invite lists suggest something is
    wrong in that area of the project.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**研究会议的节奏、议题和邀请名单**。会议往往是对问题进行不适当解决的尝试。因此，如果你想了解项目中哪些部分最为困难，就要注意团队开会的内容，会议的频率以及谁被拉进这些会议。特别是要注意那些邀请名单很长的会议。大规模会议往往不如小规模会议高效，但它们确实通过给每个人一种“所有方都被咨询过，所有意见都被探索过”的印象，成功地分散了责任。邀请名单不断扩展的会议，通常意味着该项目的某个领域出现了问题。'
- en: Other red flags around meetings include teams that are having planning sessions
    longer than an hour and teams where check-in meetings are scheduled with less
    than 48 hours’ notice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 会议的其他红旗包括团队的规划会议超过一小时，或者团队的签到会议通知时间少于48小时。
- en: '**Pay attention to the rhetoric of career-minded leaders**. It’s harsh to say
    it, but people react to a struggling project in basically two ways. There are
    the people who roll up their sleeves and focus on helping, even if helping means
    unglamorous work not usually part of their responsibilities, and then there are
    the people who spend the time they could be helping drafting excuses that explain
    why the failure is not their fault. Large, messy, in-progress projects will likely
    have a mix of both people; look for the second type. The problems they are running
    away from tend to be the messiest ones.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**关注有职业意识的领导者的言辞**。说起来有点 harsh，但人们对一个正在困境中的项目基本上有两种反应。一类人会卷起袖子，专注于帮助，即使帮助意味着做一些不体面的工作，而这些工作通常不是他们职责的一部分；另一类人则会花时间撰写借口，解释为什么失败与自己无关。大规模、混乱且进行中的项目通常会有这两类人；要留意第二类人。那些他们逃避的难题，往往是最混乱的。'
- en: '**Look for compounding problems**. Coming in midstream means the project hasn’t
    officially failed yet, and what people are getting wrong, they are probably doubling
    and tripling down on. Projects are rarely doomed by one critical error. It’s far
    more likely that the organization was drowning in dysfunctional structures for
    months leading up to the failure.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**寻找复合性问题**。介入到项目进行中的时候，意味着项目还没有正式失败，而人们犯的错误可能会被一再加剧。项目很少因为一个关键错误而注定失败。更可能的是，组织已经在几个月的时间里陷入了功能失调的结构中，直到最终的失败。'
- en: All of these examples are places where natural human reactions actively make
    the problem worse instead of better. Having unclear responsibilities means teams
    feel like they are asked to pick up the slack for someone else too often. They
    become self-righteous and start ignoring tasks that aren’t part of their jobs
    as they see it, making the situation worse. Meetings slow down work, which almost
    always leads to more meetings. Career-minded leaders claim failure was beyond
    their control, implicitly blaming the team. They make their employees feel unsafe,
    which encourages them to avoid the problem areas as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些例子都是自然的人类反应反而使问题变得更糟的地方，而不是更好。职责不明确意味着团队常常觉得被要求替别人承担责任。他们变得自以为是，开始忽视那些不在自己工作范围内的任务，导致情况更糟。会议拖慢了工作进度，几乎总是导致更多的会议。注重个人职业发展的领导者声称失败超出了他们的控制范围，暗中将责任推给团队。他们让员工感到不安全，这也鼓励员工避免接触问题区域。
- en: If a project is failing, you need to earn both the trust and respect of the
    team already at work to course-correct. The best way to do that is by finding
    a compounding problem and halting its cycle. If an organization is having too
    many meetings, cut all of them and gradually reintroduce them one by one. If career-minded
    leaders are damaging psychological safety, start educating people about blameless
    postmortems and just culture. Talk to people and observe how the team behaves
    as a unit. When you can, it is always better to set up someone else for victory
    rather than solving the problem yourself.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目失败了，你需要赢得正在工作中的团队的信任和尊重，才能进行调整。最好的方法是找到一个累积性的问题并停止其循环。如果一个组织开会过多，就取消所有会议，并逐渐一个个地重新引入它们。如果职业导向的领导者正在破坏心理安全，就开始教育大家无责事后分析和公正文化。与人交谈并观察团队如何作为一个整体表现。当可能时，总是更好地为别人创造胜利，而不是自己解决问题。
- en: The rest of this chapter describes various in-progress failures I have seen
    and what we did to pull the project out of a death spiral.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章其余部分描述了我所见过的各种进行中的失败，以及我们如何将项目从死亡螺旋中拉出来。
- en: 'Mess: Fixing Things That Are Not Broken'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混乱：修复那些没有损坏的东西
- en: We’ve already looked at a number of reasons organizations try to fix things
    that aren’t broken.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过了许多组织尝试修复那些没有损坏的东西的原因。
- en: They assume new technology is more advanced than older technology.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们认为新技术比旧技术更先进。
- en: They aspire to artificial consistency.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们追求人为的一致性。
- en: They confuse success with quality.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们将成功与质量混淆。
- en: They optimize past the point of diminishing returns.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们优化过度，超出了收益递减的临界点。
- en: The preeminent target of an organization’s desire to fix things that are not
    broken is the monolith. A monolith in the context of software engineering is a
    tightly coupled application that configures a variety of functions and features
    so that they run on a single discrete computing resource. Monoliths were a problem
    that web development invented. Before the internet reached the scale that made
    distributed computing possible, there was little reason not to design programs
    to run on one machine. Lately, it seems like no engineer can bear to suffer a
    monolith to live. Monolith is the ultimate dirty word. Engineers complain about
    them endlessly. No one ever wants to admit to building one. Every successful large
    technical organization seems to have at least one conference talk about the heroic
    multiyear campaign it staged to remove a monolith.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 组织修复那些没有损坏的东西的首要目标就是单体架构。在软件工程中，单体架构指的是一个紧密耦合的应用程序，它将各种功能和特性配置到一个独立的计算资源上运行。单体架构是网络开发发明的问题。在互联网尚未发展到分布式计算可以实现的规模之前，设计程序在一台机器上运行几乎没有理由不这么做。最近，似乎没有哪个工程师能忍受单体架构的存在。单体架构已经成为了最脏的词。工程师们不停抱怨它们。没有人愿意承认自己建造了一个单体架构。每个成功的大型技术组织似乎都会至少有一次关于英勇的多年度努力来去除单体架构的会议演讲。
- en: But if monoliths are so awful, why do so many organizations end up with them?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果单体架构如此糟糕，为什么这么多组织最终还是采用了它们呢？
- en: The opposite of a monolith is service-oriented architecture. Instead of designing
    the application to host all its functionality on a single machine, functionality
    is broken up into services. Ideally, each service has a single goal, and typically
    each has its own set of computing resources. The application is created by coordinating
    the interaction of these services.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 单体架构的对立面是面向服务的架构。与其将应用程序设计为将所有功能托管在一台机器上，不如将功能分解为多个服务。理想情况下，每个服务有一个单一目标，通常每个服务都有自己的计算资源。应用程序是通过协调这些服务之间的交互来创建的。
- en: Building a product from the beginning with a service-oriented architecture is
    usually a mistake. Because you don’t have the proper product/market fit figured
    out yet, integrations and data contracts become a major pain point. A data contract
    is an implicit agreement written in code between two services that must communicate
    with one another. We call it a contract because both sides need to send and receive
    data in the same format for the communication to work. If the server decides to
    change what data it’s sending and the client is not updated accordingly, communication
    between the services breaks down.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就以面向服务的架构来构建产品通常是一个错误。因为你还没有弄清楚合适的产品/市场契合度，集成和数据契约会成为一个主要的痛点。数据契约是两方服务之间用代码隐式写下的协议，必须互相通信。我们称其为契约，因为双方需要以相同的格式发送和接收数据，通信才能正常工作。如果服务器决定更改其发送的数据，而客户端没有及时更新，那么服务之间的通信就会中断。
- en: When a team is pivoting and iterating, when the feedback loop between the customer
    and team is at its shortest, data contracts get broken all the time. Features
    get added, removed, or moved around. Assumptions get made and either validated
    or thrown out. Before organizations find a product market fit, they can pivot
    in wild and unpredictable ways. For example, YouTube started as a video dating
    service. Groupon started as a platform for organizing social actions. Slack started
    as an online multiplayer video game. Slack was actually the second time its founder
    had started building an online game only to realize that the real product was
    something completely different. His earlier startup, Flickr, had the same origin
    story.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个团队在进行调整和迭代时，当客户与团队之间的反馈循环最短时，数据契约经常会被打破。功能会被添加、移除或调整。假设会被做出，并且要么得到验证，要么被抛弃。在组织找到产品市场契合之前，它们可以进行疯狂且不可预测的转型。例如，YouTube最初是一个视频约会服务。Groupon最初是一个用于组织社交活动的平台。Slack最初是一个在线多人视频游戏。实际上，Slack是其创始人第二次开始构建在线游戏时，才意识到真正的产品是完全不同的东西。他的早期创业公司Flickr也有着相似的起源故事。
- en: In general, the level of abstraction your design has should be inversely proportional
    to the number of untested assumptions you’re making. The more abstractions a given
    design includes, the more difficult changing APIs without breaking data contracts
    becomes. The more often you break contracts, the more often a team has to stop
    new work and redo old work. When the product hasn’t even launched yet, forcing
    teams to redo work over and over again doesn’t improve the odds of success.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你的设计抽象层级应该与未经过测试的假设数量成反比。设计中包含的抽象越多，改变API而不破坏数据契约就变得越困难。你打破契约的次数越多，团队就越需要停止新工作并重新做旧工作。当产品还未发布时，强迫团队一次又一次地重做工作并不会提高成功的几率。
- en: That’s why monoliths are so great during the early stages of a product. They
    are tightly coupled, but their complexity and level of abstraction are low. When
    an engineer makes a change that breaks another part of the system, she knows it
    immediately and has access to the code to fix the problem she caused.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在产品的早期阶段，单体架构（monoliths）如此出色。它们是紧密耦合的，但它们的复杂性和抽象层级较低。当工程师做出改变导致系统的另一个部分出现问题时，她能够立刻发现并且有能力访问代码来修复她所引发的问题。
- en: Once again, focus on the balance between complexity and coupling. Complex systems
    have large surface areas. Every process takes more steps, and every part needs
    its own team to handle its maintenance correctly. The downsides of complexity
    can be mitigated by running more teams and facilitating communication and knowledge
    sharing between them. If an organization is able to do that, it can achieve the
    benefits that can come from making systems more complex. Well-built complex systems
    often allow for greater customization. They can operate at a larger scale with
    greater flexibility.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，专注于复杂性和耦合之间的平衡。复杂系统有较大的表面面积。每个过程都需要更多的步骤，每个部分都需要独立的团队来正确处理其维护。复杂性的缺点可以通过运行更多的团队并促进团队之间的沟通和知识共享来缓解。如果一个组织能够做到这一点，它就能够获得使系统更复杂所带来的好处。构建良好的复杂系统通常允许更大的定制性，能够以更大的灵活性和更大规模运作。
- en: Tightly coupled systems, on the other hand, achieve flexibility by strategically
    breaking themselves. Every programmer has deployed at least one cheap hack to
    get around an API or inheritance pattern, usually tacking on a comment that reads
    “Ugh, do this the right way later.” Tightly coupled systems become messy because
    they accrue debt with each workaround that is deployed. The downsides of tight
    coupling can be mitigated with engineering standards dictating how to extend,
    modify, and ultimately play nicely with the coupling. They can also be mitigated
    by honoring the engineering team’s commitment to refactoring on occasion. The
    benefits of tight coupling are that one person can hold enough knowledge of the
    system in her head to anticipate behavior in a variety of conditions. The architecture
    is simpler and, therefore, cheaper and easier to run.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 紧密耦合的系统则通过战略性地“打破自己”来实现灵活性。每个程序员至少都部署过一次廉价的解决方案来绕过API或继承模式，通常会附上一个评论：“唉，稍后按正确方式做。”
    紧密耦合的系统变得杂乱无章，因为每一个解决方法都会导致技术债务的积累。紧密耦合的缺点可以通过工程标准来缓解，这些标准规定了如何扩展、修改并最终与耦合保持和谐。它们还可以通过工程团队承诺偶尔进行重构来缓解。紧密耦合的好处在于，一个人可以掌握系统的足够知识，来预测在各种条件下的行为。架构更简单，因此也更便宜、更容易运行。
- en: A system has a lifecycle. When it is new, it’s often run by a small team and
    has much more to gain from being tightly coupled than it does from being complex.
    Small teams building new things frequently throw everything out and start over.
    Small teams have an easier time honoring engineering standards because there are
    fewer people to bring to consensus. Even when small teams are at big organizations,
    they tend to build monoliths because the advantages of a monolith are pretty compelling
    when you don’t know whether what you’re building will be successful and need to
    change things fast, even if your method of changing them is poor. At small organizations,
    we find people are doing several different jobs at once with roles not so clearly
    defined. Everyone in the same space is using the same resources. In short, small
    organizations build monoliths because small organizations *are* monoliths.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统有生命周期。当它是新的时，通常由一个小团队来运行，与其说它从复杂中受益，不如说它从紧密耦合中获得更多。小团队在构建新事物时，常常会把一切都推翻重建。小团队更容易遵守工程标准，因为需要达成共识的人更少。即便是大组织中的小团队，它们也倾向于构建单体架构，因为单体架构的优势在于，当你不确定自己构建的东西是否会成功并且需要快速更改时，它比其他架构更具吸引力，哪怕你修改的方式并不完美。在小型组织中，我们发现人们通常一次性做多种工作，角色定义不太清晰。每个人都在同一个空间里使用相同的资源。简而言之，小型组织构建单体架构是因为小型组织本身就是单体架构。
- en: Large organizations benefit more from complex systems because they have robust
    operational units to support them. They have the teams to run and maintain all
    the moving parts of the system—its platform, its monitoring, and so on. They rarely
    throw everything out and start over, because they operate at a scale where trying
    to do that would mean a major migration. Large organizations do well when they
    transition their monoliths to services, because the problems around communication
    and knowledge sharing that need to be solved to make complex systems work are
    problems that large organizations have to solve anyway.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大型组织从复杂系统中受益更多，因为它们有强大的运营单元来支持这些系统。它们有团队来运行和维护系统的各个组成部分——平台、监控等等。它们很少会把所有东西都丢掉重新开始，因为它们的规模如此庞大，想要重新做一遍意味着一次重大迁移。大型组织在将其单体架构转化为服务时表现良好，因为解决使复杂系统正常运行的沟通和知识共享问题是大型组织本来就需要解决的问题。
- en: But nobody starts a large organization, just as nobody gives birth to a teenager.
    They grow up, and as they grow up, the ideal point on the complexity–coupling
    spectrum shifts. Most monoliths will eventually have to be rethought and redesigned,
    but trying to pinpoint when is like trying to predict the exact moment you will
    outgrow a favorite sweater. Some organizations will wait too long, and some will
    do it too soon. Don’t believe anyone who tells you that ditching your monolith
    is the solution to all your problems. Monoliths can and do scale. Sometimes they
    are more expensive to scale, but the notion that it is impossible to scale monoliths
    is false. The issue is that by still having a monolith, you might be giving up
    benefits that could have a huge impact on operational excellence.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是没有人一开始就创建一个大型组织，就像没有人一开始就生下一个青少年一样。它们会成长，随着成长，复杂性–耦合性谱上的理想点也会发生变化。大多数单体架构最终都需要重新思考和重新设计，但尝试确定什么时候进行这样的改变，就像试图预测你会在什么时候长大到不再适合穿最喜欢的毛衣一样。有些组织会等得太久，有些则做得太早。不要相信那些告诉你，丢弃单体架构就能解决所有问题的人。单体架构是可以扩展的，有时它们扩展的成本较高，但认为单体架构无法扩展是错误的。问题在于，如果你仍然使用单体架构，可能会放弃一些本可以对运营卓越产生巨大影响的好处。
- en: Fixing things that are not broken means you’re taking on all the risks of a
    modernization but will not be able to find the compelling value add and build
    the momentum that keeps things going. Nontechnical stakeholders will see time
    and money spent and not understand what the point of it was. This demoralizes
    engineers and violates trust with the team. Fixing the wrong thing makes it harder
    to secure the resources to finish and makes it much harder to sell the organization
    on future modernization efforts that might be more necessary.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 修复那些并没有坏的东西意味着你承担了现代化的所有风险，却无法找到有说服力的增值内容，也无法建立起推动事情发展的动力。非技术相关的利益相关者看到时间和金钱的投入，却不明白其意义何在。这会让工程师感到沮丧，并破坏团队的信任。修复错误的事情会让你更难获得完成任务的资源，也会使得在未来需要进行现代化的努力时，更难说服组织投入资源。
- en: Figuring Out Whether Something Needs to Be Fixed
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定是否需要修复某些问题
- en: Treating monoliths as inherently bad pushes organizations into fixing them when
    they’re not broken. I had a friend who used to say her greatest honor was hearing
    a system she built had to be rewritten in order to scale it. This meant she had
    built something that people loved and found useful to the point where they needed
    to scale it. Most people in technology do not go into building a system with that
    expectation. The assumption is that the best way to build something is to build
    it in such a way that it doesn’t need any significant changes for a long time.
    Optimizing to minimize rewrites might seem like a sensible strategy, but if not
    properly reined in, it invites behavior that ultimately makes systems more brittle.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将单体架构视为本质上有缺陷的做法，会促使组织在单体架构没有问题时就开始修复它。我有个朋友曾经说过，她最大的荣耀就是听到她构建的系统必须重写才能进行扩展。这意味着她构建了一个人们喜爱并且找到有用的系统，以至于他们需要对其进行扩展。大多数技术人员在构建系统时并没有这种预期。通常的假设是，最好的构建方式是将系统构建得足够稳固，长时间内不需要做任何重大改动。为了尽量减少重写而进行优化似乎是一种合理的策略，但如果没有适当控制，它会导致最终使系统变得更脆弱的行为。
- en: 'Neal Ford, director and software architect at ThoughtWorks, had a saying I’m
    fond of repeating to engineers on my teams: “Metawork is more interesting than
    work.” Left to their own devices, software engineers will almost invariably over-engineer
    things to tackle bigger, more complex, long-view problems instead of the problems
    directly in front of them. For example, engineering teams might take a break from
    working on an application to write a scaffolding tool for future applications.
    Rather than writing SQL queries, teams might write their own object relational
    mapping (ORM). Rather than building a frontend, teams might build a design system
    with every form component they might ever need perfectly styled.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ThoughtWorks的董事兼软件架构师尼尔·福特有一句话，我很喜欢反复对我的团队工程师们说：“元工作比工作本身更有趣。”如果任由软件工程师们自主决定，他们几乎总是会过度设计，去解决更大、更复杂、更长远的问题，而不是眼前直接存在的问题。例如，工程团队可能会暂停开发某个应用程序，而去为未来的应用程序编写一个脚手架工具。团队可能会选择自己编写对象关系映射（ORM），而不是直接写SQL查询。团队可能会构建一个设计系统，其中包含每一个可能需要的表单组件，并进行完美的样式设计，而不是直接构建前端。
- en: Decisions motivated by wanting to avoid rewriting code later are usually bad
    decisions. In general, any decision made to please or impress imagined spectators
    with the superficial elegance of your approach is a bad one. If you’re coming
    into a project where team members are fixing something that isn’t broken, you
    can be sure they are doing so because they are afraid of the way their product
    looks to other people. They are ashamed of their working, successful technology,
    and you have to figure out how to convince them not to be ashamed so that they
    can focus on fixing things that are actually broken.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 出于避免日后重写代码的动机而做出的决策通常是糟糕的决策。一般来说，任何为了取悦或给假想的观众留下深刻印象，展示你方法的表面优雅而做出的决策，都是错误的。如果你进入一个团队，发现成员们在修复一些并没有坏掉的东西，你可以确定他们是在做这件事，因为他们害怕他们的产品给别人留下的印象。他们对自己的工作技术感到羞愧，而你必须想办法说服他们不要感到羞愧，这样他们才能专注于修复那些真正坏掉的东西。
- en: Set the expectation that all systems need to be rewritten eventually. Engineers
    at the highest level write programs that have to be revised. No one is smart enough
    to anticipate every new use case or feature, every advancement in hardware, or
    every adjustment or shift that might require code to be rewritten. What works
    for a large organization might suffocate a small one. Good technologists should
    focus on what brings the most benefit and highest probability of success to the
    table at the current moment, with the confidence of knowing they have nothing
    to prove.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设定一个预期，即所有系统最终都需要重写。最高水平的工程师编写的程序必须进行修订。没有人足够聪明，能够预见到每一个新的使用案例或功能、每一次硬件的进步，或者每一个可能需要重写代码的调整或变化。对一个大组织有效的东西，可能会扼杀一个小组织。优秀的技术人员应该专注于当前时刻带来最大利益和最高成功概率的事情，且要有信心知道他们无需证明什么。
- en: 'This requires getting consensus from engineering on what it means to be broken
    in the first place. I’ve mentioned SLOs/SLAs before, and I will point to them
    again: define what level of value a system needs to bring to the user. If an ugly
    piece of code meets its SLO, it might not be broken, it might be just an ugly
    piece of code. Technology doesn’t need to be beautiful or to impress other people
    to be effective, and all technologists are ultimately in the business of producing
    effective technology.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要从工程团队获得一致的意见，明确什么是“坏掉”了。我之前提到过SLOs/SLAs，我现在再提一次：定义一个系统需要为用户提供的价值水平。如果一段丑陋的代码符合其SLO，它可能并没有坏掉，只是看起来很丑。技术不需要漂亮，也不需要给别人留下深刻印象才算有效，所有技术人员最终都是在生产有效的技术。
- en: But . . . What About Conventions?
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但是……那么约定呢？
- en: 'Setting the expectation that all code will eventually need to be rewritten
    does mean that occasionally code needs to be rewritten to bring it in line with
    modern conventions or to clear debt. The issue of what is worth fixing is full
    of nuance. When I talk about not fixing things that aren’t broken, I’m talking
    about not breaking up monoliths for the sake of breaking up monoliths and not
    rewriting code to fit the newest trends for the sake of looking good to outsiders.
    There are plenty of times when changes needed for long-term performance are hard
    to justify with existing SLOs alone. Technical debt rarely effects performance
    in a predictable way. A system could badly need a refactor but look fine on a
    monitoring dashboard until the day it falls apart all at once. In deciding whether
    to spend the time and money realigning a system with a given convention, here
    are some other ways to think about value add other than SLOs:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设定所有代码最终都需要重写的预期，确实意味着偶尔需要重写代码以使其符合现代约定或清理技术债务。什么值得修复的问题充满了微妙的差异。当我谈到不修复那些没坏的东西时，我指的是不因为单纯为了拆解单体架构而去拆解单体架构，也不是为了迎合外部的眼光而重写代码以适应最新的趋势。有很多时候，出于长期性能的需求而做出的变更，单凭现有的SLO是难以证明其必要性的。技术债务很少以可预测的方式影响性能。一个系统可能急需重构，但在监控仪表盘上看起来一切正常，直到某一天它突然完全崩溃。在决定是否花费时间和资金将一个系统与给定的约定重新对齐时，除了SLO之外，还有一些其他方式可以考虑其附加价值：
- en: Age The older the convention, the more likely it is to be buried deeply in various
    parts of a modern stack. Legacy systems that don’t conform find that the tools
    and options available to them get smaller and smaller.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 年龄 越古老的约定，越有可能深埋在现代技术栈的各个部分中。不符合标准的遗留系统会发现，他们可用的工具和选项越来越少。
- en: Justification Why do people who promote this convention promote it? Is it good
    security practice? Have there been well-documented cases of the convention preventing
    serious failure?
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说明：为什么推广这一惯例的人会推广它？它是一个好的安全实践吗？是否有充分记录的案例表明这一惯例能防止严重的失败？
- en: Advocates Where is this convention coming from? Is it a big organization many
    other organizations will have to do business with?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 倡导者：这一惯例的来源是什么？它是一个大型组织，许多其他组织必须与之合作吗？
- en: Openness Is the convention based on or tied to open standards? Are people blocked
    from adopting this convention by licensing or other proprietary issues?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放性是基于开放标准的惯例吗？是否有许可或其他专有问题阻止人们采纳这一惯例？
- en: When Does Breaking Up Add Value?
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时拆分能增加价值？
- en: Since this section has spent a lot of time debunking the suggestion that monoliths
    are inherently bad and need to be broken up, it makes sense to close it with some
    advice on when to break up monoliths.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这一部分花了大量时间驳斥“单体架构天生不好，必须拆分”的观点，因此在这里总结一些关于何时拆分单体架构的建议是有意义的。
- en: Monoliths can be scaled, but depending on how activity is growing, they may
    be difficult to scale efficiently. For example, if one part of the system is using
    more resources than other parts, it makes sense to change to an architecture that
    allows that piece to be given additional resources while not affecting the other
    parts of the system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 单体架构是可以扩展的，但根据活动的增长方式，它们可能难以高效地扩展。例如，如果系统的某一部分比其他部分消耗更多资源，那么转变为一种架构，允许该部分分配更多资源而不影响其他部分的系统是有意义的。
- en: More often than not, monoliths are broken up because of the way the organization
    is scaling. If you have hundreds or even thousands of engineers contributing to
    the same code base, the potential for miscommunication and conflict is almost
    infinite. Coordinating between teams sharing ownership on the same monolith often
    pushes organizations back into a traditional release cycle model where one team
    tests and assembles a set of updates that go to production in a giant package.
    This slows development down, and more important, it slows down rollbacks that
    affect the organization’s ability to respond to failure.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单体架构拆分的原因更多的是因为组织规模的增长。如果有成百上千个工程师共同参与同一个代码库，沟通不畅和冲突的潜力几乎是无限的。在同一个单体架构上共享所有权的团队之间的协调，常常会将组织推回到传统的发布周期模型中，在这个模型里，一个团队测试并汇总一系列更新，作为一个巨大的包发布到生产环境中。这会减慢开发速度，更重要的是，它会减缓回滚，影响组织应对失败的能力。
- en: Breaking up the monolith into services that roughly correspond to what each
    team owns means that each team can control its own deploys. Development speeds
    up. Add a layer of complexity in the form of formal, testable API specs, and the
    system can facilitate communication between those teams by policing how they are
    allowed to change downstream interactions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将单体架构拆分成大致对应每个团队所拥有的服务意味着每个团队可以控制自己的部署。开发速度加快。增加一个复杂层次，即正式的、可测试的API规范，系统就能通过监管团队之间如何更改下游交互来促进团队之间的沟通。
- en: 'The Compounding Problem: Diminishing Trust'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合问题：信任逐渐减少
- en: Large, expensive projects kicked off to fix things that are not broken break
    trust with the nontechnical parts of the organization. It inconveniences colleagues,
    frustrates them, and sometimes confuses them. A modernization effort needs buy-in
    beyond engineering to be successful. Spending time and money on changes that will
    have no visible impact on the business or mission side of operations makes it
    hard to secure that buy-in in the future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大型且昂贵的项目启动，去修复那些并没有坏掉的事情，会破坏与组织中非技术部门的信任。它给同事带来不便，令他们沮丧，有时还会让他们困惑。现代化努力需要获得工程以外的部门支持才能成功。花时间和金钱去做那些对业务或任务方面没有明显影响的变更，会让以后很难获得那种支持。
- en: Unfortunately, software engineers are socialized around the idea that their
    discipline is so difficult, nonengineers are incapable of understanding even the
    most basic concepts. Resistance from the nontechnical side of an organization
    tends to be dismissed as ignorance. That means once trust is violated, a cycle
    is started. The harder securing buy-in for modernization becomes, the more convinced
    engineering becomes that the problem is their nontechnical colleagues’ intelligence
    and common sense. Engineering stops even trying to speak to the values and needs
    of the business side of the organization. The more out-of-touch their proposals
    become with the organization’s needs, the less trust engineering will command.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，软件工程师往往认为他们的学科非常困难，非工程人员甚至无法理解最基本的概念。来自组织非技术部门的抗拒往往被视为无知。这意味着，一旦信任被破坏，一个恶性循环就开始了。获取现代化支持的难度越大，工程部门就越认为问题出在非技术同事的智力和常识上。工程部门开始不再试图与业务部门沟通组织的价值和需求。他们的提案与组织需求脱节的程度越大，工程部门获得的信任就越少。
- en: 'Solution: Formal Methods'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案：形式化方法
- en: Course-correcting a team that is fixing things that are not broken is a long
    process. The only thing worse than fixing the wrong thing is leaving an attempt
    to fix the wrong thing unfinished. Half-finished initiatives create confusing,
    poorly documented, and harder to maintain systems. If you’re coming in early enough
    that not much has been moved around, by all means, stop the team from doing what
    it’s doing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 修正一个正在修复并未坏掉的东西的团队是一个漫长的过程。最糟糕的事情不是修复错误的事，而是放任修复错误的事未完成。半途而废的项目会导致混乱、文档不全、维护难度加大的系统。如果你介入时，团队还没做太多改动，那么尽早制止他们所做的事是非常必要的。
- en: Otherwise, you have to stay committed. Your first task has to be getting their
    initiative to a place where you can stop work without creating a Frankenstein
    monster. Once you’ve figured out where that point is, the next challenge is figuring
    out how to tack on value to the process so that the organization can recover from
    its mistake stronger.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你必须保持专注。你的第一任务是将他们的主动性引导到一个可以停止工作的地方，而不会造成“弗兰肯斯坦怪物”般的结果。一旦你找到了那个点，接下来的挑战就是如何在流程中增加价值，让组织从错误中恢复过来并变得更强。
- en: Monolith breakups and other large-scale redesigns offer an opportunity to change
    process as well as change code. A silver lining in fixing something that is not
    broken can be found in treating the fix as an opportunity to experiment with and
    improve engineering practices. If the organization lacks proper testing, take
    the opportunity to build out and mature test suites. If the organization doesn’t
    have monitoring, consider what tools might work for the new architecture. If the
    organization has never done incident response or on-call rotations, use the creation
    of new services to establish those practices.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 单体拆分和其他大规模重设计提供了改变流程以及改变代码的机会。即使是修复一个并未坏掉的东西，也能在把修复当作一个改善工程实践的机会中找到一些亮点。如果组织缺乏适当的测试，可以趁此机会建立并完善测试套件。如果组织没有监控，考虑哪些工具可能适用于新的架构。如果组织从未做过事件响应或轮班值守，可以通过创建新服务来建立这些实践。
- en: If the organization does all of these things already, introduce formal methods.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组织已经做了这些事情，引入形式化方法。
- en: '*Formal methods* are techniques for applying mathematical checks to software
    designs to prove their correctness. In attempting to prove correctness, formal
    methods can highlight bugs that would otherwise be impossible to find just by
    studying the code. The most accessible form of formal methods is called *formal
    specification*. It consists of writing out the design as a specification with
    a markup language that a model checker can parse and run analysis on. These model
    checkers take the valid inputs defined by the spec and map out every possible
    combination of output based on the design. Then they compare all those possible
    outputs to the rules the spec has defined for valid outputs, looking for a result
    that violates the assertions of the spec.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*形式化方法*是将数学检查应用于软件设计以证明其正确性的技术。在尝试证明正确性的过程中，形式化方法可以突出那些仅通过研究代码无法发现的错误。最常见的形式化方法是*形式化规范*。它包括将设计写成一种规范，使用一种标记语言，模型检查器可以解析并进行分析。这些模型检查器会根据规范定义的有效输入，绘制出所有可能的输出组合。然后，它们会将所有这些可能的输出与规范中定义的有效输出规则进行比较，查找任何违反规范声明的结果。'
- en: As of this writing, formal methods are not commonly used by software teams.
    The learning curve is steep, and resources for beginners are practically nonexistent.
    The community of users itself is small and skewed slightly toward academia. However,
    an engineering team doesn’t need everyone to know how to write a spec to start
    using formal methods. An organization can start with just one engineer who works
    with other teams to draft and refine specs, the same way engineering teams often
    have a small pool of designers they work with to draft and refine UX.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，正式方法尚未被软件团队广泛使用。学习曲线陡峭，且几乎没有面向初学者的资源。用户社区本身规模较小，并且略偏向学术界。然而，工程团队并不需要每个成员都知道如何编写规范就能开始使用正式方法。一个组织可以从一个工程师开始，与其他团队合作起草和完善规范，就像工程团队通常有一个小型设计师团队来协作起草和完善用户体验一样。
- en: Formal methods help engineering teams consider a broader array of conditions
    and scaling factors. They also improve communication between teams by giving everyone
    a reference detailing the design and expected behaviors of a system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正式方法帮助工程团队考虑更多的条件和扩展因素。它们还通过为每个人提供一个详细说明系统设计和预期行为的参考，改善了团队之间的沟通。
- en: If you can’t find anyone who can make sense of TLA+ syntax or Alloy or Petri
    nets, one slightly easier way to begin introducing formal methods is with contract
    testing. *Contract testing* is a form of automated testing that checks whether
    components of a system have broken their data contracts with one another. When
    breaking up a monolith into services, honoring these contracts or clearly communicating
    when they need to be broken is essential to building, integrating, and maintaining
    a high-performing system. Contract testing is not a form of formal specification
    per se, but rolling it out follows roughly the same process. It requires every
    endpoint to have a spec written in a specific markup language that the contract
    testing tool can parse and check for inconsistencies.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找不到能够理解TLA+语法、Alloy或Petri网的人，开始引入正式方法的一个稍微简单的方法是使用合同测试。*合同测试*是一种自动化测试形式，检查系统组件之间是否破坏了它们的数据契约。在将单体应用拆分为微服务时，遵守这些契约或明确沟通何时需要打破契约，对于构建、集成和维护高性能系统至关重要。合同测试本身并不算是一种正式的规范方法，但其推广过程大致相同。它要求每个端点都必须有一个以特定标记语言编写的规范，合同测试工具可以解析并检查其中的矛盾。
- en: Strongly typed languages sometimes can do contract testing without any additional
    tools if repositories are set up correctly. For example, if the service owner
    is responsible for writing the endpoints, the client libraries, and the mocks
    of the service for testing, they can test for breaking changes on their own.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 强类型语言有时可以在没有额外工具的情况下进行合同测试，前提是仓库设置正确。例如，如果服务负责人负责编写端点、客户端库以及服务的测试模拟，那么他们可以自行测试是否有破坏性的变更。
- en: 'Mess: Forgotten and Lost Systems'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混乱：被遗忘和丢失的系统
- en: 'Large organizations lose systems. I don’t mean the systems go down; I mean
    the organizations forget they have them and occasionally lose the records of their
    existence. Entire product lines are designed to handle this problem: searching
    for VMs on networks, transversing connections, inspecting dependencies, and managing
    inventory. It’s amazing how common it is, because this seems like something that
    just shouldn’t happen. How can an organization continue to spend money on something
    it does not know exists?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 大型组织会丢失系统。我不是说系统崩溃了，而是说组织会忘记他们拥有这些系统，偶尔还会丢失它们的存在记录。为了应对这个问题，整个产品线都在设计相关解决方案：搜索网络上的虚拟机、遍历连接、检查依赖关系和管理库存。这种情况居然如此常见，真让人惊讶，因为这看起来是根本不应该发生的事情。一个组织怎么可能继续为它根本不知道存在的东西花钱呢？
- en: When an organization is in startup mode, it typically has a small engineering
    team that handles basically everything. Groups then constantly break off and reform
    as the architecture is built out. At some point, an organization likely will start
    to create divisions and delegate ownership, but that’s a game of musical chairs
    that will often leave some parts of the architecture without a seat when the music
    stops.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组织处于创业阶段时，通常会有一个小型的工程团队处理几乎所有的事务。随着架构的建设，团队不断地分裂和重组。某个时刻，组织可能会开始创建部门并委派所有权，但这就像是一场音乐椅游戏，常常会导致一些架构部分在音乐停下时找不到座位。
- en: Software without maintainers is a key place to find all kinds of monsters, but
    how do you find what is unowned and forgotten?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 没有维护者的软件是发现各种怪物的关键地方，但如何找出那些没有所有者且被遗忘的软件呢？
- en: One potential approach is to trace the activities of the engineers who were
    around when things were small. In those early days, strong engineers tend to hop
    from project to project, applying themselves wherever urgency and interest coincide.
    Not much thought is likely given to transition planning, because the software
    is new and would be stable for a while without much in the way of maintenance.
    If the software is particularly well made, it might slip into obscurity, quietly
    humming away completely unnoticed because it has never seemed to need maintenance
    before. Trace the movements of those early engineers as the software was originally
    being built. What did they touch, and who owns it now?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个潜在的方法是追溯那些在事情还很小的时候就参与的工程师的活动。在那些早期的日子里，优秀的工程师往往在项目之间跳跃，将精力集中在紧急和兴趣相结合的地方。由于软件是新的，且一段时间内会保持稳定，几乎不需要多少维护，所以他们很少考虑过渡规划。如果软件特别做得好，它可能会悄无声息地消失，默默地运行着，因为它似乎从未需要过维护。追溯那些早期工程师的活动，看看他们当初接触了哪些内容，现在谁拥有它们？
- en: Another option is to follow the money. Forgotten services still consume resources
    the organization must pay for. At the least, some record of those transactions
    should exist. If you’re using a commercial cloud provider, start tagging your
    instances automatically. Doing so will highlight images that are unaccounted for.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是追踪资金流。被遗忘的服务仍然会消耗组织必须支付的资源。至少，应该有一些关于这些交易的记录。如果你使用的是商业云服务提供商，可以开始自动标记你的实例。这样可以突出显示那些未被记录的镜像。
- en: 'The Compounding Problem: Crippling Risk Avoidance'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合问题：严重的风险规避
- en: When an architecture is so complex or so old that entire pieces of it are forgotten,
    engineers can feel as if they are working in a minefield. No one plans effectively
    for the unknown unless they plan effectively for failure. Without the ability
    to accept and adapt to failure, the unknown traps individual contributors in a
    catch-22\. Changing a system with unclear boundaries and missing components is
    likely to trigger an outage. Not taking action increases the odds of failure eventually,
    but not failure that can be traced to one particular decision or action.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当架构如此复杂或如此陈旧，以至于它的某些部分被完全遗忘时，工程师们可能会觉得自己在雷区中工作。除非有效地为失败做出规划，否则没人能有效地为未知做出规划。如果没有接受并适应失败的能力，个体贡献者就会陷入“死循环”。改变一个边界不清、组件缺失的系统很可能会引发故障。不采取行动最终会增加失败的几率，但这种失败不会追溯到某一个特定的决策或行为。
- en: Engineers make decisions that are worse for the health of systems overall but
    are less likely to trigger outages that they can be blamed for as individuals.
    Maintaining the system becomes a game of hot potato, with every passing year increasing
    the risks to greater and greater extremes. Although many of the engineers caught
    in this trap understand they are choosing the worst possible outcome for everyone,
    the level of complexity of the system makes it impossible for them ever to feel
    like they know the system well enough to change it safely.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们做出的决策可能对系统整体健康造成更大的损害，但却不太可能引发他们作为个人会被指责的故障。系统的维护变成了一场烫手山芋的游戏，每年过去，风险都在不断增加，且越来越极端。尽管许多陷入这个困境的工程师知道自己选择的是对大家最糟糕的结果，但系统的复杂性使得他们永远无法觉得自己足够了解系统，以便安全地进行更改。
- en: 'Solution: Chaos Testing'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案：混沌测试
- en: Ultimately, you must accept that it might not be possible to track down and
    account for all systems. Even when you find them, figuring out exactly what they
    do could be difficult. If you’re coming into a project with an organization that
    has forgotten systems, you’re probably dealing with a team that is paralyzed by
    this reality. The engineers might have gotten stuck in the planning phase as they
    try fruitlessly to figure out whether the latest inventory is correct. They are
    probably scared of deploying any changes at all to any system, for fear of finding
    another forgotten system that’s also a critical dependency.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你必须接受可能无法追踪和考虑所有系统的事实。即使你找到了它们，搞清楚它们到底做了什么也可能很困难。如果你加入了一个已经遗忘系统的组织，你很可能会面对一个被这种现实困住的团队。这些工程师可能会在规划阶段停滞不前，因为他们徒劳地试图搞清楚最新的库存是否正确。他们可能害怕对任何系统进行任何更改，生怕会发现另一个被遗忘的系统，且这个系统也是一个关键的依赖项。
- en: You have to be comfortable with the unknown. You can do that by emphasizing
    *resilience* over reliability. Reliability is important, but too many organizations
    use reliability to aim for perfection, which is the exact opposite of what they
    should be trying to accomplish. Site reliability engineers typically talk about
    performance in terms of number of nines—that is, whether a service is up and running
    99.9 percent of the time (three nines), 99.99 percent of the time (four nines),
    or 99.999 percent of the time (five nines). Since these numbers are calculated
    as part of SLAs and since SLAs are written into the contract between the organization
    and its customer, nontechnical people in the organization tend to misunderstand
    the value of the number of nines. More nines are not always better.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须学会适应未知。你可以通过强调*韧性*而非可靠性来做到这一点。可靠性很重要，但太多的组织将可靠性作为追求完美的目标，而这恰恰是他们不应该做的事情。站点可靠性工程师通常以“九个数”来谈论性能——也就是说，服务是否能够在99.9%的时间内运行（三个9），99.99%的时间内运行（四个9），或99.999%的时间内运行（五个9）。由于这些数字是作为服务水平协议（SLA）的一部分进行计算的，而且SLA通常是写进组织与客户之间合同的条款中，因此组织中的非技术人员往往误解了这些“九”的价值。更多的“九”不一定更好。
- en: '*Five nines* means a service has fewer than 5.25 minutes of downtime per year.
    So if something goes wrong, an engineer has only a few minutes to wake up, log
    on, diagnose, and fix it. And even if she is capable of pulling that off, failure
    can happen only once a year. A former colleague of mine and an experienced engineer
    from Google used to like to say, “Anything over four nines is basically a lie.”
    The more nines you are trying to guarantee, the more risk-averse engineering teams
    will become, and the more they will avoid necessary improvements. Remember, to
    get five nines or more, they have only seconds to respond to incidents. That’s
    a lot of pressure.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*五个9*意味着一项服务每年停机时间少于5.25分钟。所以如果发生问题，工程师只有几分钟的时间来唤醒、登录、诊断和修复它。即使她能够完成这些，失败每年也只能发生一次。我以前的一位同事，一位来自谷歌的资深工程师，曾经喜欢说：“四个9以上基本就是谎言。”你想要保证的9越多，工程团队就会越趋向于规避风险，越不愿进行必要的改进。记住，要达到五个9或更多，他们必须在几秒钟内对事件做出响应。这是巨大的压力。'
- en: SLAs/SLOs are valuable because they give people a budget for failure. When organizations
    stop aiming for perfection and accept that all systems will occasionally fail,
    they stop letting their technology rot for fear of change and invest in responding
    faster to failure. That’s the idea anyway. Some organizations can’t be talked
    out of wanting five or even six nines of availability. In those cases, *mean time
    to recovery (MTTR)* is a more useful statistic to push than reliability. MTTR
    tracks how long it takes the organization to recover from failure.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: SLA/SLO的价值在于它们给人们提供了一个失败的预算。当组织不再追求完美，接受所有系统偶尔都会失败时，他们不再因为害怕改变而让技术腐化，而是投资于更快地响应失败。无论如何，这是这个理念。某些组织无法放弃追求五个甚至六个9的可用性。在这种情况下，*平均恢复时间（MTTR）*是一个比可靠性更有用的统计数据。MTTR跟踪组织从失败中恢复所需的时间。
- en: When we encountered systems that had been forgotten and we couldn’t figure out
    what they were doing, we would usually just turn them off and see what happened.
    For an older generation of technologists, this seems reckless, but modern-day
    engineering teams refer to this practice as *chaos testing*. Resilience in engineering
    is all about recovering stronger from failure. That means better monitoring, better
    documentation, and better processes for restoring services, but you can’t improve
    any of that if you don’t occasionally fail.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到那些已经被遗忘、无法理解其功能的系统时，我们通常会选择关闭它们，看会发生什么。对老一代技术人员来说，这似乎是轻率的行为，但现代工程团队将这一做法称为*混沌测试*。工程中的韧性就是从失败中恢复得更强大。这意味着更好的监控、更好的文档和更好的服务恢复流程，但如果你不偶尔经历失败，就无法改善这些方面。
- en: The rationale around provoking failure deliberately is that if something unexpected
    does happen, it happens when everyone is on high alert and at a time the organization
    scheduled specifically for that purpose. When we turned off a system, we waited
    for someone to complain. That person was either the system owner or the owner
    of a downstream dependency, but either way, we ended the experiment with more
    information about what the system was doing than we started with.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 故意引发故障的理由是，如果发生了意外情况，那通常会发生在大家都高度警觉的时候，并且是组织专门为此安排的时间。当我们关闭一个系统时，我们会等待有人抱怨。抱怨的人要么是系统拥有者，要么是下游依赖的拥有者，但无论如何，我们结束实验时会比开始时对系统的运作有更多的了解。
- en: If no one complained, we tended just to leave the system off and move on. Having
    one less component to modernize was still a win. Do we sometimes find out months
    later that the system we turned off was in fact doing something essential? I won’t
    lie; it does occasionally happen, but that’s why investing in testing and monitoring
    is so important for systems at scale of any age. If something is important enough
    to build a component specifically to do it, there should be some way of alerting
    system owners when it doesn’t happen.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有人抱怨，我们往往只是将系统关闭然后继续前进。少了一个需要现代化的组件，仍然算是胜利。我们是否有时会在几个月后发现，我们关闭的系统实际上在做某些至关重要的事情？我不会撒谎；的确偶尔会发生这种情况，但这也正是为什么投资于测试和监控对任何规模、任何年代的系统来说都如此重要。如果某个组件是重要到需要专门构建来执行某项任务，那么当它没有执行时，应该有某种方式来提醒系统的拥有者。
- en: 'Mess: Institutional Failures'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混乱：制度性失败
- en: If a bad pattern is used in one part of a system, it’s everywhere in the system.
    Sometimes an organization doesn’t know that string concatenation on database queries
    is a bad idea (for example). More likely, the bad pattern you’re seeing is a result
    of shifting norms around technical best practices. Remember the days when Facebook
    thought HTTPS could be optional? What would have been secure practice a few years
    ago is already riddled with easily exploitable holes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统的某一部分使用了一个不良的模式，那它在系统的其他地方也会存在。比如，有时候一个组织可能不知道数据库查询中的字符串连接是个坏主意。更有可能的是，你看到的不良模式是技术最佳实践变化的结果。还记得Facebook曾经认为HTTPS可以是可选的吗？几年前被认为是安全做法的东西，现在已经充满了容易被利用的漏洞。
- en: It stands to reason, therefore, that if you have a piece of software no one
    has put much thought into maintaining for a few years, there are going to be problems,
    and those problems are going to be systemic. They will be patterns repeated throughout
    the system. What reason would the engineering team have to do things differently?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此可以推理，如果你有一款软件已经有几年没有人认真去维护，那肯定会有问题，而这些问题将是系统性的。它们将是贯穿整个系统的重复模式。工程团队为什么要做得不同呢？
- en: Lately, I’ve been seeing this kind of rot taking hold within months, rather
    than years. Particularly on security issues, the turnaround between secure and
    cracked seems to grow shorter and shorter all the time. If no one has touched
    something in six months, that is a good place to start the search for problems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我看到这种腐化现象发生的时间越来越短，已经是几个月，而不是几年。尤其是安全问题，安全与被攻破之间的周期似乎越来越短。如果有某个东西六个月没有人碰过，那就是开始寻找问题的好地方。
- en: Once you’ve found a problem, the next step is to determine whether it’s a pattern
    or just a mistake. Security vulnerabilities from out-of-date dependencies are
    obviously not a pattern. Accidentally removing something that was once in the
    code is not a pattern. Not escaping inputs, storing secrets in plaintext, returning
    more information than the requester needs—those are patterns.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你发现了一个问题，下一步是判断它是一个模式还是一个错误。由于过时依赖而导致的安全漏洞显然不是一个模式。无意中移除代码中曾经存在的某些内容也不是一个模式。不对输入进行转义、以明文存储秘密、返回比请求者需要的更多信息——这些才是模式。
- en: Code-checking software can sometimes be useful in tracking down all the instances
    of a bad pattern. But some problems do not reveal themselves easily and require
    actual human beings. If you’ve found such a problem, the first thing to do is
    define the context around the code. What is it doing? What type of requests trigger
    it, and what processes and services does it call? The nice thing about patterns
    is that if you know their context, you can predict them. If a piece of bad code
    calls a database, the natural place to look for other pieces of bad code is other
    places that call that database.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查软件有时可以帮助追踪到坏模式的所有实例。但有些问题不容易显现，需要实际的人力去处理。如果你发现了这样的问题，首先要做的是定义代码的上下文。它在做什么？什么类型的请求会触发它，它调用了哪些过程和服务？关于模式的好处是，如果你知道它们的上下文，你可以预测它们。如果一段坏代码调用了数据库，那么寻找其他坏代码的自然地方就是那些也调用该数据库的地方。
- en: In the worst-case scenario, the problems cross application boundaries. Part
    of analyzing the context of a bad pattern should be its providence. In other words,
    who built this thing? If the same team built two applications at about the same
    time, it’s unlikely completely different development practices were used.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在最坏的情况下，问题跨越了应用程序的边界。分析坏模式的上下文的一部分应该包括其来源。换句话说，谁构建了这个东西？如果同一个团队大约在同一时间构建了两个应用程序，那么不太可能使用完全不同的开发实践。
- en: 'The Compounding Problem: No Owners'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 累积问题：没有负责人
- en: The trouble with systemic issues, whether they’re in the code base or the culture,
    is that no one actually owns them. If they affect everyone and everyone participates
    in them, the only people with the authority to fix them are the people the least
    equipped to do so. A CEO or cabinet secretary isn’t going to have much luck neglecting
    their responsibilities in order to dig into implementation issues of one system,
    no matter how large or critical. Such a leader could delegate the responsibility
    to a more tactical subordinate, but that appointee would likely find themselves
    fighting endless political battles.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 系统性问题，无论是在代码库中还是文化中，的问题在于没有人真正拥有它们。如果它们影响每个人并且每个人都参与其中，唯一有权修复它们的人往往是最不具备修复能力的人。CEO或内阁部长不会有太多运气忽视自己的职责去深入解决一个系统的实施问题，无论这个系统多么庞大或关键。这样的领导者可以将责任委派给一个更具战术性的下属，但该任命者可能会发现自己在与无休止的政治斗争作斗争。
- en: Problems that impact multiple organizational units require coordination across
    those boundaries to fix. The more importance an organization gives those boundaries—building
    budgets and hiring cycles around them—the more people at the top of those units
    will police their boundaries. This sets up political battles that are often self-reinforcing.
    Leaders have their fiefdoms. They fought hard for the resources they have. If
    they reroute even a small portion of those resources to institutional problems
    while their peers ignore the problem and the problem is not solved, those resources
    could be permanently forfeited. When there is no precedent for cross-functional
    collaboration, who will take on the risk of being the first mover?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 影响多个组织单元的问题需要跨越这些边界进行协调才能解决。组织越是重视这些边界——围绕它们制定预算和招聘周期——这些单元的高层人员就越会监控自己的边界。这就引发了往往是自我强化的政治斗争。领导们有自己的“领地”，他们为现有的资源付出了艰苦的努力。如果他们将这些资源的一小部分重新分配给机构性问题，而他们的同僚忽视该问题且问题未得到解决，这些资源可能会永久丧失。当没有跨职能协作的先例时，谁会承担成为首个行动者的风险？
- en: 'Solution: Code Yellow'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案：黄色警戒
- en: Systemic problems almost always appear midstream. When we find them, I like
    to document these issues for the wider organization as *BOLOs* (for *be on the
    lookouts*). We send out a short announcement explaining the problem in plain English,
    pointing to specific examples we have found and establishing a point of contact
    on our team for other teams to reach out to if they find similar issues. If the
    problem is particularly serious, we will set up short talks about the issue, demonstrating
    what the bad code looks like, how to recognize it, and describe appropriate and
    inappropriate fixes. Sometimes we reach out to other teams specifically.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 系统性问题几乎总是在中途出现。当我们发现它们时，我喜欢将这些问题记录下来并以*BOLOs*（即*留意事项*）的形式发布给更广泛的组织。我们会发布简短的公告，用通俗易懂的语言解释问题，指明我们发现的具体例子，并为其他团队提供我们团队的联络点，以便他们在发现类似问题时联系。如果问题特别严重，我们将会组织简短的讲座，展示坏代码的样子、如何识别它，以及描述合适和不合适的修复方法。有时我们会特别联系其他团队。
- en: Broadly, these techniques are part of a methodology called *Code Yellow*, which
    is a cross-functional team created to tackle an issue critical to operational
    excellence. The term *Code Yellow* refers both to the team and the process that
    governs the team’s activities. This was a practice developed at Google to handle
    issues that were beyond the scope of what any one part of the organization owned.
    And unlike other processes at Google, it didn’t end up documented and commented
    on in a thousand different management books, so the only people who seem to know
    what a Code Yellow is or how to run one are former Google people or individuals
    trained by former Google people. It has spread to other engineering organizations
    through oral tradition in that way.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上讲，这些技术是一个名为*Code Yellow*的方法论的一部分，这是一支跨职能团队，旨在解决对运营卓越至关重要的问题。术语*Code Yellow*既指代团队，也指代支配团队活动的过程。这是谷歌为处理那些超出任何一个组织部分职责范围的问题而发展出来的一种做法。与谷歌的其他流程不同，它并没有被记录在成千上万本管理书籍中，所以似乎只有曾在谷歌工作的人或受过前谷歌员工培训的人才知道什么是Code
    Yellow或如何进行Code Yellow。通过口头传承的方式，它已经传播到其他工程组织。
- en: The purpose of a Code Yellow is to create momentum. When a legacy system has
    performance, stability, or security issues that are both systemic and entangled
    with other issues, it can be overwhelming and demoralizing. Nobody makes things
    better, because everybody becomes distracted by the total volume of problems.
    No single improvement feels like it will make enough of an impact to turn the
    tide.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Code Yellow的目的是为了创造势头。当一个遗留系统存在性能、稳定性或安全性的问题，并且这些问题是系统性的，并且与其他问题交织在一起时，这会让人感到不堪重负和沮丧。没有人能够改善局面，因为每个人都被问题的总量所分散注意力。没有单一的改进措施能够产生足够的影响来扭转局势。
- en: 'Code Yellows have the following critical features that ensure their success
    over other project management approaches:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Code Yellow具有以下关键特点，这些特点确保了它比其他项目管理方法更为成功：
- en: '**The Code Yellow leader has escalated privileges**. The leader gets to commandeer
    any and all resources needed for the Code Yellow effort. This includes people,
    conference rooms, offices, and so on. The leaders can pull these resources off
    of other teams without approval from the normal chain of command and without lengthy
    explanation or discussion.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Code Yellow的领导者拥有提升的权限**。领导者可以指挥任何和所有执行Code Yellow所需的资源。这包括人员、会议室、办公室等等。领导者可以在没有正常指挥链批准的情况下，从其他团队调取这些资源，无需长时间的解释或讨论。'
- en: '**The leader serves as a central point of contact for the effort**. Code Yellow
    issues are often both systemic and sensitive in nature. The organization may not
    know the full scope of the issue when declaring the Code Yellow. By creating a
    central point of contact, teams across the organization can refer issues to the
    Code Yellow leader and receive clear and specific guidance. Unrelated issues can
    be diagnosed and dispatched easily.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**领导者作为工作的核心联络点**。Code Yellow问题通常既是系统性的，又是敏感性的。当组织宣布Code Yellow时，可能并不知道问题的全部范围。通过创建一个核心联络点，组织中的各个团队可以将问题转交给Code
    Yellow领导者，并获得明确和具体的指导。无关的问题可以轻松诊断并解决。'
- en: '**The team is small**. Team composition may change as the leader pulls in experts
    from other teams and releases them, but the size of the team at any one point
    in time stays less than eight people. Those people should be able to implement
    solutions; they are not simply representatives from other teams.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**团队规模小**。团队的构成可能会随着领导者从其他团队调入专家并将其释放而变化，但团队在任何时间点的人数都保持在八人以下。这些人应该能够实施解决方案，他们不仅仅是其他团队的代表。'
- en: '**The team is focused**. When assigned to a Code Yellow, team members are relieved
    of all other roles and responsibilities so they can focus their energies 100 percent
    on the Code Yellow.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**团队专注**。当被分配到Code Yellow时，团队成员会被解除所有其他角色和责任，以便他们可以将精力100%集中在Code Yellow上。'
- en: '**The Code Yellow is temporary**. Before declaring a Code Yellow, the organization
    should set success criteria. At what level of improvement is the situation no
    longer critical and the remaining work can be placed on the road maps of existing
    teams with proper prioritization? Code Yellows can last for months, but they should
    not run for quarters. The temporary nature of a Code Yellow is what helps conquer
    the political rivalries that otherwise make systemic problems harder to solve.
    A Code Yellow guarantees that only resources that are urgently needed will be
    commandeered and that they will be returned as soon as the crisis is over.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Code Yellow 是临时性的**。在宣布 Code Yellow 之前，组织应设定成功标准。情况需要改进到什么程度才不再是危急的，剩余的工作可以通过适当的优先级规划，纳入现有团队的路线图中？Code
    Yellow 可能会持续数月，但不应持续几个季度。Code Yellow 的临时性有助于克服政治竞争，这些政治竞争往往使系统性问题更难解决。Code Yellow
    保证只有紧急需要的资源会被征用，并且在危机结束后这些资源会尽快归还。'
- en: 'An issue warrants a Code Yellow if it is urgent and the scope is beyond what
    one cohesive unit of an organization can handle. That usually means a security
    or a system reliability problem. Occasionally Code Yellows can be used for more
    nuanced issues that affect the organization’s overall competitiveness. In 2008,
    Google called a Code Yellow after internal studies demonstrated how latency negatively
    affected users’ long-term behaviors:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个问题紧急且其范围超出了一个组织的单一单位所能处理的范围，它就值得启动 Code Yellow。这通常意味着安全性或系统可靠性问题。偶尔，Code
    Yellow 也可用于处理一些更微妙的问题，这些问题影响组织的整体竞争力。2008年，Google 在内部研究表明延迟对用户长期行为产生负面影响后，启动了一个
    Code Yellow。
- en: '*One might think that the minuscule amounts of latency involved in the experiment
    would be negligible—they ranged between 100 and 400 milliseconds. But even those
    tiny hiccups in delivering search results acted as a deterrent to future searches.
    The reduction in the number of searches was small but significant, and were measurable
    even with 100 milliseconds (one-tenth of a second) latency. What’s more, even
    after the delays were removed, the people exposed to the slower results would
    take a long time to resume their previous level of searching.*'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*人们可能认为实验中涉及的微小延迟是可以忽略不计的——这些延迟在 100 到 400 毫秒之间。但即便是这些微小的搜索结果延迟也成为了未来搜索的障碍。搜索量的减少虽小却显著，甚至在
    100 毫秒（十分之一秒）延迟下也能测量出来。更重要的是，即使延迟被消除，那些曾经暴露于较慢结果中的人们也需要很长时间才能恢复到他们之前的搜索水平。*'
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*[. . .]*'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*[. . .]*'
- en: ''
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*This Code Yellow kicked off at a TGIF where Hölzle metered the performance
    of various Google products around the world, with a running ticker on the big
    screen in Charlie’s Café pinpointing the deficiencies. “You could hear a pin drop
    in the room when people were watching how stunningly slow things were, like Gmail
    in India,” says Gabriel Stricker, a Google PR director.^([1](#c06-footnote-1))*'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这个 Code Yellow 在一个 TGIF（感谢周五）活动中启动，Hölzle 测量了全球各种 Google 产品的性能，Charlie’s Café
    的大屏幕上展示了实时跑马灯，指出各个产品的性能缺陷。“当人们看到 Gmail 在印度的速度极慢时，你可以听见房间里的针掉下来，”Google 公关总监 Gabriel
    Stricker 说。^([1](#c06-footnote-1))*'
- en: In 2010, another Code Yellow was called to deal with the aftermath of Operation
    Aurora, a Chinese government cyberattack that rooted Google’s corporate network
    and allowed Chinese intelligence to steal information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在2010年，另一个 Code Yellow 被启动以应对“奥 Aurora行动”后的影响，这是一次中国政府的网络攻击，攻击者侵入了 Google 的公司网络并允许中国情报部门窃取信息。
- en: In 2015, the Chromium team (the open source project that backs Google Chrome)
    called a Developer Productivity Code Yellow to improve performance so that it
    would be easier to attract and retain contributors.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年，Chromium 团队（支撑 Google Chrome 的开源项目）启动了一个开发者生产力 Code Yellow，旨在改善性能，使吸引和留住贡献者变得更加容易。
- en: All of these are critical issues, but they all look different. They have different
    scopes. Only one presented itself as a traditional crisis. But in each case, the
    problem would have been difficult for a single team or solitary division to solve.
    By building a small, empowered team to start off the response, Google was able
    to create focus and momentum that made impossible problems seem solvable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都是至关重要的，但它们各自有所不同。它们有不同的范围。只有一个呈现出传统的危机特征。但在每种情况下，问题都会对单个团队或孤立的部门造成解决上的困难。通过建立一个小而有权力的团队来启动响应，Google
    能够创造出一种焦点和动力，使看似不可能的问题变得可以解决。
- en: Code Yellows end when the issue is out of the critical stage, not when the problem
    is fully resolved. Part of the Code Yellow should be developing a plan for executing
    on long-term improvements, upgrades, and development work. How is post–Code Yellow
    work assigned? Who holds people accountable? The composition of the Code Yellow
    team should reflect this; if the long-term work will involve specific teams, members
    of those teams should be part of the Code Yellow. At the end of the Code Yellow,
    those members return to their teams and continue the Code Yellow work as part
    of their regular road maps.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 黄色代码在问题脱离关键阶段时结束，而不是在问题完全解决时结束。黄色代码的一部分应该是制定执行长期改进、升级和开发工作的计划。如何分配后黄色代码的工作？谁来追责？黄色代码团队的组成应反映这一点；如果长期工作涉及特定团队，那么这些团队的成员应成为黄色代码的一部分。在黄色代码结束时，这些成员将返回各自的团队，并继续将黄色代码工作纳入常规路线图中。
- en: It’s worthwhile for leadership to have a high tolerance for risk when defining
    the line of criticality. Code Yellows become less effective the longer and less
    urgent the work becomes. Having a good plan of how the work will be completed
    once normal status is restored and holding people accountable produces a better
    outcome than depending on a small elite team to save you.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义关键性问题的界限时，领导层对风险的容忍度很重要。黄色代码的效果会随着工作时间的延长和紧迫感的降低而减少。一旦恢复正常状态，制定清晰的工作完成计划并追究责任，往往能比依赖小规模精英团队来挽救局面取得更好的结果。
- en: Calling a Code Yellow
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发起黄色代码
- en: Code Yellows are declared by the lowest-level leader, not the highest. They
    should be declared only by leaders who have authority over all the affected parts
    of the organization. In a small organization, Code Yellows are usually called
    by someone very senior, but as the organization grows, this practice becomes inefficient
    and bureaucratic. By granting the authority to the lowest-level leader with authority
    over all affected areas, the organization is able to continue to move quickly
    in response to critical issues.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 黄色代码应由最低级别的领导者发起，而不是最高级别的领导者。只有那些对所有受影响组织部分具有权力的领导者才能发起黄色代码。在一个小型组织中，黄色代码通常由非常高级的领导发起，但随着组织的发展，这种做法变得低效且官僚化。通过将权力下放给最低级别的领导者，且该领导者对所有受影响领域拥有权力，组织能够继续快速响应关键问题。
- en: In other words, if the problem is an engineering issue that spans teams under
    multiple directors, the person with the authority to call a Code Yellow is the
    vice president of engineering to whom those directors report. If the issue also
    involves teams of another VP, the person with the authority is one level up from
    the VPs.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果问题是跨越多个团队、由多个总监负责的工程问题，那么有权发起黄色代码的人是这些总监的上级工程副总裁。如果问题还涉及到其他副总裁领导的团队，则有权发起黄色代码的人是副总裁的上级。
- en: Sometimes the scope of a Code Yellow changes to affect a larger part of the
    organization as the team uncovers more details. In that case, it is not customary
    to relitigate the decision to call the Code Yellow itself, although some adjustments
    to communication strategy and success criteria may be warranted. Status meetings
    may be expanded to include leaders from other groups, for example.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，随着团队揭示更多细节，黄色代码的范围可能会扩大，影响到组织的更大部分。在这种情况下，通常不会重新审视发起黄色代码的决定，尽管在沟通策略和成功标准上可能需要做出一些调整。例如，状态会议可能会扩大，涵盖来自其他小组的领导者。
- en: Code Yellows are not generally called by engineering managers or directors because
    the scope of their field of influence should be small enough to manage the problem
    via other project management strategies. Code Yellows are for systemic problems;
    a problem that fits entirely within the domain of a single engineering manager
    without touching or affecting any other group is not systemic.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，工程经理或总监不会发起黄色代码，因为他们的影响范围应该足够小，可以通过其他项目管理策略来管理问题。黄色代码用于系统性问题；如果某个问题完全处于单一工程经理的领域内，而没有触及或影响到其他任何小组，那么它就不是系统性问题。
- en: Running a Code Yellow
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行黄色代码
- en: The Code Yellow leader plays a similar role to that of an incident commander,
    assigning tasks to team members and serving as the final decision-maker. They
    need to have enough technical knowledge and implementation experience to do so
    with confidence. They also need to be able to devote 100 percent of their attention
    to the Code Yellow. For these reasons, senior leaders are usually a poor choice
    to run a Code Yellow. Clearing their calendars to focus on a Code Yellow blocks
    other important things in the organization. They might not understand how the
    product or architecture works with the detail necessary to make quick decisions.
    However, the leader need not necessarily be from engineering. Product managers
    can make excellent Code Yellow leaders, as can staff engineers and principal engineers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Code Yellow的负责人扮演的角色类似于事件指挥官，负责分配任务给团队成员，并作为最终决策者。他们需要具备足够的技术知识和实施经验，以便自信地作出决策。他们还需要能够将100%的注意力集中在Code
    Yellow上。出于这些原因，高层领导通常不适合担任Code Yellow的负责人。腾出他们的日程专注于Code Yellow会阻碍组织内其他重要事务的进行。他们可能不了解产品或架构的详细工作原理，无法快速做出决策。然而，负责人不一定非得来自工程团队。产品经理、员工工程师和首席工程师都可以成为优秀的Code
    Yellow负责人。
- en: Ideally, the Code Yellow leader should have enough experience with the organization
    to know who the experts are, which teams own which parts of the product, and so
    on and so forth. This allows them to keep the team small and limit the amount
    of discussion around identifying resources.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，Code Yellow的负责人应当对组织有足够的了解，知道谁是专家，哪些团队负责哪些部分的产品，等等。这使得他们能够保持团队规模较小，减少在识别资源时的讨论量。
- en: When declaring a Code Yellow, it’s important that the wider organization be
    made aware of it. If the organization is large, it may not be necessary to broadcast
    an announcement about the Code Yellow to all employees, but every team that might
    have relevant information or resources that will be reassigned in the Code Yellow
    needs to know. This helps smooth the path for the leader when he or she approaches
    other teams.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在宣布Code Yellow时，确保整个组织都知晓是很重要的。如果组织规模较大，可能不需要向所有员工广播Code Yellow的公告，但每个可能有相关信息或资源，并且将在Code
    Yellow中重新分配的团队都需要知情。这有助于负责人在接触其他团队时更加顺利。
- en: Because Code Yellows tend to be sensitive, it’s not necessary to provide a great
    deal of detail in the announcement. If the Code Yellow was triggered by issues,
    tickets, or discussions that are accessible to everyone, the announcement should
    link to those internal conversations for reference. Otherwise, the Code Yellow
    announcement can just define the scope as it is known at the time (for example,
    “We’re declaring a Code Yellow on application security”).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Code Yellow通常比较敏感，因此在宣布时不需要提供过多的细节。如果Code Yellow是由可供所有人访问的问题、工单或讨论引发的，公告应链接到这些内部讨论以供参考。否则，Code
    Yellow公告可以仅定义当时已知的范围（例如，“我们正在宣布应用安全的Code Yellow”）。
- en: The Code Yellow announcement must clearly identify who the leader is, generally
    with a statement like “John Doe may reach out to you about this.”
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Code Yellow公告必须清楚地指出负责人是谁，通常会使用类似“John Doe可能会就此事联系你”的表述。
- en: Part of the leader’s responsibility during a Code Yellow is handling communication
    about the Code Yellow, which includes keeping leadership briefed on progress.
    Although Code Yellows can be stressful, the more time the leader spends in status
    update meetings with senior leadership about the Code Yellow, the less time that
    person spends working on resolving the Code Yellow.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Code Yellow负责人，他们的一项责任是处理与Code Yellow相关的沟通，包括向领导层报告进展情况。尽管Code Yellow可能会带来压力，但负责人花费在与高层领导开会讨论Code
    Yellow进展的时间越多，解决Code Yellow问题的时间就越少。
- en: Daily 5- to 15-minute standup calls strike a happy medium but are not required.
    Some organizations will create either a physical or remote “war room” where the
    Code Yellow team members operate. If the organization’s monitoring tools are robust
    enough to handle it without significant engineering effort, setting up dashboards
    to track key metrics around the Code Yellow can help keep everyone focused.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 每日进行5到15分钟的站立会议是一种平衡方式，但并非强制要求。一些组织会创建一个实体或远程的“作战室”，让Code Yellow团队成员在其中工作。如果组织的监控工具足够强大，能够在无需大量工程工作下应对这一情况，那么设置仪表盘以跟踪与Code
    Yellow相关的关键指标有助于让每个人保持专注。
- en: 'Mess: Leadership Has Lost the Room'
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混乱：领导层已经失去控制
- en: '*Losing the room* is a sports term. It means a coach has lost the respect of
    his or her players. The team, instead of following orders and working together,
    struggles to self-organize.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*失去房间*是一个体育术语。它意味着教练已经失去了队员们的尊重。团队不再按照命令行动，合作变得困难，反而挣扎着自我组织。'
- en: This book spends a lot of time discussing value and momentum because success
    with legacy modernization is less about technical implementation and more about
    the morale of the team doing the modernizing. So, what can you do if the team
    you’re taking over is so demoralized they won’t listen to you long enough to exercise
    other techniques presented in this book?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本书花了很多时间讨论价值和动能，因为遗留系统现代化的成功更多的是关于技术执行，而不是进行现代化的团队的士气。那么，如果你接手的团队已经士气低落到连听你说话的耐心都没有，无法采用本书中提到的其他技术，你该怎么办呢？
- en: People are often too quick to equate morale issues with character flaws. Incentives
    play a much larger role in who’s effective at an organization than some fanciful
    notion of their character. Organizations that refuse to take responsibility for
    the situations in which they put their own employees struggle to achieve operational
    excellence. They discover they possess a unique ability to find and hire the few
    bad apples in a pool of hundreds of candidates. They watch talent with options
    walk away and complain about the lack of loyalty, integrity, or mental toughness.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 人们往往过于急于将士气问题与性格缺陷等同。激励因素在一个组织中谁能有效工作，远比他们的性格这一虚构的概念要重要得多。那些拒绝对自己创造的员工困境负责的组织，很难实现运营卓越。他们发现自己有一种独特的能力，能够在数百个候选人中找到并聘用那几个“坏苹果”。他们看到有选择的才俊离开，却抱怨缺乏忠诚、正直或心理韧性。
- en: Remember, no one wants to suck at their job. Popular culture sells the myth
    about lazy, stupid, uncaring bureaucrats. It’s easy to dismiss people that way.
    Buying into the idea that those kinds of problems are really character flaws means
    you don’t have to recognize that you’ve created an environment where people feel
    trapped. They are caught between conflicting incentives with no way to win.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，没有人愿意在工作中表现得很差。流行文化常常传播关于懒惰、愚蠢、不关心的官僚的神话。将人们归类为这样的人很容易。相信这些问题实际上是性格缺陷，意味着你无需认识到你已经创造了一个让人感到被困住的环境。他们被相互冲突的动机所困，没有任何取胜的办法。
- en: An organization doesn’t have to be part of the government to be a bureaucracy.
    When a leader has lost the room, it is usually because the organization has pushed
    the engineering team back into a place where it is not possible to succeed. It’s
    important not to lose sight of the element of bad faith in this outcome. Teams
    don’t reject their leaders because a project fails or even because a project fails
    multiple times. Teams reject their leaders when they feel that success was snatched
    from them. Either they made a real contribution that was ignored or credited to
    someone else, or their efforts to achieve operational excellence were sabotaged
    by the leadership in the organization.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织并不一定是政府的一部分才算是官僚。领导者失去“房间”通常是因为组织已经把工程团队推到了一个无法成功的地方。不要忽视这个结果中“不信任”因素的重要性。团队不会因为一个项目失败，甚至因为一个项目多次失败而拒绝他们的领导。团队拒绝他们的领导，是因为他们觉得成功被从他们手中夺走了。要么他们做出了真正的贡献却被忽视，或者他们为了实现运营卓越所做的努力被组织中的领导者所破坏。
- en: Sometimes you can restore trust and bring a team back from the dead just by
    changing the scenery. Remove old leaders when teams lose faith in them and replace
    them with new leaders who will gain their trust rather than assume they have it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你仅仅通过改变环境，就能恢复信任并将团队从死灰中复生。当团队失去对领导的信任时，移除旧的领导者并替换上新领导者，他们将赢得信任，而不是假设自己已经拥有了信任。
- en: But the longer a situation of bad faith is allowed to continue, the deeper the
    psychological roots grow. The lack of trust in an organization and its leadership
    can diminish the trust a team has in themselves. Being betrayed by your own leadership
    is traumatic. One of the ways people process that trauma is by wondering if they
    deserved it. Removing rejected leaders might solve superficial problems, but it
    doesn’t restore teams back to excellence.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，允许恶性局面持续下去，时间越长，心理根源就会越深。对组织及其领导的不信任，会削弱团队对自己的信任。被自己的领导背叛是创伤性的。人们处理这种创伤的一种方式是自问是否配得上这种对待。移除被排斥的领导者可能解决了表面问题，但并不能让团队恢复卓越。
- en: People without confidence self-sabotage. They create self-fulfilling prophecies
    and display signs of learned helplessness. For example, I had a team once that
    experienced a high rate of failed deploys, triggering some problem in production
    at least once a week that required a rollback. The organization had also been
    leaning on them to produce more and more while cutting their staff and restricting
    their resources. I took over that team after their old manager was fired, and
    it was obvious from our first few conversations that the problem wasn’t their
    engineering skills. They had been asked to improve a piece of legacy technology
    that had not been updated in a while. It had almost no testing, no monitoring,
    and a complex deploy process.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏信心的人会自我破坏。他们创造自我实现的预言，并表现出学到的无助感。例如，我曾经有一个团队，他们经历了频繁的部署失败，每周至少发生一次生产环境问题，需要回滚。与此同时，组织还不断要求他们生产更多的成果，同时削减他们的人员并限制他们的资源。在他们的旧经理被解雇后，我接管了这个团队，从我们最初几次的对话中很明显，问题并不在于他们的工程能力。他们被要求改进一项已有很长时间没有更新的遗留技术。那项技术几乎没有测试、没有监控，且部署流程复杂。
- en: The reason the legacy system had not been updated in a while was because the
    organization had been regularly refusing requests to staff a team for the task
    or invest anything significant in resources. To top it off, the whole infrastructure
    for this system that processed millions of transactions had been maintained for
    years by one person.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个遗留系统之所以没有得到更新，是因为组织一直拒绝为此任务配备团队或投入任何重要的资源。更糟糕的是，处理数百万交易的整个基础设施已经由一个人维护了多年。
- en: The team members were completely demoralized. They had lost faith in their ability
    to ship code safely, so they backed off larger, more creative solutions to technical
    challenges that might have helped them. They became resigned to their situation,
    as if outages were inevitable.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 团队成员完全丧失了士气。他们失去了对安全交付代码的信心，因此放弃了更大、更具创意的技术挑战解决方案，这些解决方案可能本可以帮助他们。他们对现状感到无奈，仿佛停机是不可避免的。
- en: They didn’t test things. When things went wrong, they didn’t do a thorough investigation
    and confirm what the failure points had been. They avoided those things not because
    they didn’t understand that they were important, but because they had lost faith
    in their own abilities. After so many failures and years of denied resource requests,
    they felt other people in the organization assumed they were bad engineers and
    were desperate to avoid confirming that.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 他们没有进行测试。当问题发生时，他们没有进行彻底调查，确认故障点到底在哪里。他们回避这些事情，不是因为他们不明白它们的重要性，而是因为他们对自己能力的信心丧失。在经历了这么多的失败和多年未得到资源支持的情况下，他们觉得组织中的其他人认为他们是差的工程师，并且拼命避免证实这一点。
- en: That scenario might sound counterintuitive. If they were so scared of failing,
    they should have tested more, investigated deeper. Why would they stick with a
    process that they knew was bad and would increase their likelihood of failure?
    Like Schrödinger’s cat, if they don’t have a proper process, they could be both
    alive and dead at the same time. If they don’t have a proper process, they never
    have to confront the potential reality that they are just bad engineers. It is
    always possible that a better process would fix all their problems.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个情境可能听起来违反直觉。如果他们如此害怕失败，应该更加测试，更加深入调查。为什么他们还会坚持一个自己明知有问题且会增加失败概率的流程？就像薛定谔的猫，如果他们没有一个合适的流程，他们可能同时既活着又死了。如果他们没有一个合适的流程，他们就永远不必面对这样一个潜在的现实：他们只是差的工程师。总有可能一个更好的流程能解决他们所有的问题。
- en: However, if they implemented a better process and still failed anyway, they
    would lose this mental lifeline they were hanging on to. The team doomed itself
    to failure because they were afraid of learning that the problem the whole time
    was them—not their process, not the organization’s denial of resources, not the
    inexperienced manager.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果他们实施了更好的流程，但仍然失败，他们将失去那条他们依赖的心理救命稻草。这个团队把自己注定走向失败，因为他们害怕发现一直以来问题就在他们自己身上——而不是他们的流程、不是组织的资源匮乏、也不是那个没有经验的经理。
- en: 'The Compounding Problem: Self-Sabotaging Teams'
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**累积问题：自我破坏的团队**'
- en: Confidence comes before success. Success rarely creates confidence. When teams
    don’t have confidence in themselves, they will always find something to debunk
    successful outcomes. They got lucky. The outcome wasn’t as good as it should have
    been or could have been had another team been in charge. The successful outcome
    did not outweigh past failures.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 信心先于成功。成功很少能创造信心。当团队没有信心时，他们总会找到某种理由来否定成功的结果。他们运气好。结果没有达到预期，或者如果是另一支团队负责，结果可能会更好。成功的结果没有超越过去的失败。
- en: When people can’t accept successful outcomes, they tend to avoid success completely.
    They self-sabotage because the status quo is safe.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们无法接受成功的结果时，他们往往会完全避免成功。他们会自我破坏，因为现状是安全的。
- en: Confidence problems are always compounding. The only thing that convinces people
    to stop belittling themselves is knowing they have the trust and acceptance of
    their peers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 信心问题总是会不断累积。唯一能说服人们停止贬低自己的，是知道他们赢得了同伴的信任和接纳。
- en: 'Solution: Murder Boards'
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案：谋杀委员会
- en: A murder board is a technique I picked up in government and repurposed for engineering
    teams. In government, we used them to prep people for Congressional testimony
    or confirmation hearings, but applying them to a technical challenge was not completely
    unheard of. NASA’s Ames Research Center uses them for satellite launches and requesting
    funding for research.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 谋杀委员会是我在政府工作时学到的技巧，并且我将其重新应用于工程团队。在政府中，我们使用它来为国会证词或确认听证会做准备，但将其应用于技术挑战并不是完全不被理解的。NASA的艾姆斯研究中心就用它来准备卫星发射和请求研究资金。
- en: The way a murder board works is you put together a panel of experts who will
    ask questions, challenge assumptions, and attempt to poke holes in a plan or proposal
    put in front of them by the person or group the murder board exercise is intended
    to benefit. It’s called a murder board because it’s supposed to be combative.
    The experts aren’t just trying to point out flaws in the proposal; they are trying
    to outright *murder* the ideas.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 谋杀委员会的运作方式是，你将组建一个专家小组，他们会提问、挑战假设，并尝试找出计划或提案中的漏洞。这个过程被称为“谋杀委员会”，因为它的目的是充满对抗性。专家们不仅仅是在指出提案中的缺点；他们的目标是直接*“谋杀”*这些想法。
- en: Murder boards are one of those techniques that are really appropriate only in
    specific circumstances. To be a productive and beneficial exercise, it is essential
    that the murder board precedes an extremely stressful event. Murder boards have
    two goals. The first is to prepare candidates for a stressful event by making
    sure they have an answer for every question, a response to every concern, and
    mitigation strategy for every foreseeable problem. The second goal of a murder
    board is to build candidates’ confidence. If they go into the stressful event
    knowing that they survived the murder board process, they will know that every
    aspect of their plan or testimony has been battle-tested.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 谋杀委员会是那种只有在特定情况下才非常适用的技巧。为了使其成为一个富有成效且有益的练习，谋杀委员会必须发生在极为紧张的事件之前。谋杀委员会有两个目标。第一个是通过确保候选人能回答每一个问题、回应每一个关切，并为每一个可预见的问题准备应对策略，来为他们准备一个紧张的事件。谋杀委员会的第二个目标是增强候选人的信心。如果他们能够知道自己经历了谋杀委员会的过程并成功渡过，那么他们会明白，自己计划或证词的每个方面都已经经过了严峻的考验。
- en: I scheduled a murder board for my team with the bad process because I understood
    that before anything else could get better, the team members needed to learn that
    their colleagues in engineering did not look down on them. They needed to see
    that everyone wanted them to succeed, that their past experience of having goal
    posts moved, resources promised and then taken away, and actions taken in bad
    faith was over.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我为我的团队安排了一个“谋杀委员会”，尽管这个过程有些糟糕，但我理解，在任何事情变得更好之前，团队成员们首先需要明白，工程团队的同事们并不会看不起他们。他们需要看到每个人都希望他们成功，他们过去经历过的目标不断变动、承诺的资源被拿走、以及以不良信念做出的行动都已经结束。
- en: They also needed to overcome their fear that they weren’t good enough to improve
    their process or that an improved process wouldn’t affect their odds of success.
    I asked them to write out their plan to test, deploy, and monitor one key upcoming
    change and be prepared to defend it. They were not thrilled by the idea of doing
    a murder board. It took me a while to persuade them the exercise could be good.
    Part of the reason they worried was they felt this exercise would invite colleagues
    to micromanage them, talk down to them, or treat them like they were stupid and
    could not be trusted.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还需要克服对自己不够好，无法改善流程，或者认为改进后的流程不会影响他们成功的几率的恐惧。我让他们写下测试、部署和监控一个关键变更的计划，并准备为其辩护。他们对做“谋杀板”并不兴奋。我花了一些时间说服他们，这个活动可能是有益的。他们担心的部分原因是，他们觉得这个活动会让同事们过度管理他们、贬低他们，或者像对待愚蠢、不可信任的人一样对待他们。
- en: I argued that this was an opportunity to prove to everyone how difficult their
    engineering challenge was. They would leave the murder board with a new process.
    If the new process still failed, everyone would know it was vetted by the best
    engineers at the organization and that they couldn’t have done any better. In
    this way, I used the murder board to resolve their fear of opening Schrödinger’s
    box. Failure under a better process would not prove they were bad engineers. That
    process had survived the murder board and still failed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我辩称，这是一个向大家证明他们的工程挑战有多么困难的机会。他们将带着一个新流程离开“谋杀板”。如果新流程仍然失败，大家都会知道它已经得到了组织内最佳工程师的审查，他们再也做不到更好。通过这种方式，我利用“谋杀板”解决了他们打开薛定谔盒子的恐惧。在更好的流程下的失败并不意味着他们是糟糕的工程师。那个流程已经在“谋杀板”上经受过考验，但仍然失败了。
- en: To accomplish those goals, it is essential that both sides of the murder board
    know that the purpose of the exercise is to make the candidate stronger. There
    must not be any doubt that everyone is on the same team, working for the candidate’s
    benefit. Criticism should be tough, nitpicky, and unforgiving but delivered only
    if it is relevant to the stressful event to come—in this case, a deploy. For that
    reason, we don’t do murder boards when there is no upcoming stressful event to
    ground them.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些目标，确保“谋杀板”双方都明白此次活动的目的是让候选人变得更强大是至关重要的。必须毫无疑问地让每个人都明白，大家是同一支队伍，为候选人的利益而工作。批评应该是严厉的、挑剔的、不宽容的，但只有在与即将到来的紧张事件相关时才应提出——在本例中是一次部署。因此，在没有即将到来的紧张事件作为背景时，我们不会做“谋杀板”。
- en: It is useful to set some boundaries with the board. We do not use the murder
    board space to dredge up old failures or grudges. We do not use the murder board
    space to put people down or insult them. We don’t use it to make grand speeches.
    The board can ask questions, point out flaws, or provide hypothetical situations.
    They can provide detailed explanations to elaborate fully on a problem they want
    to highlight, but they should avoid doing so and let team members speak in their
    own words as much as possible. Most important, the board’s commentary should be
    exclusively *negative*, even if there are strong advantages to the plan being
    presented. Murder boards build confidence because they are *survived*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 给“谋杀板”设定一些边界是很有用的。我们不会在“谋杀板”上翻旧账或者算账。我们不会用“谋杀板”来贬低或侮辱别人。我们也不会用它来做宏大的演讲。董事会成员可以提问、指出缺陷或提供假设情况。他们可以提供详细的解释，充分阐述他们想要强调的问题，但他们应该尽量避免这样做，让团队成员尽可能用自己的话来说。最重要的是，董事会的评论应该完全是*负面的*，即使所呈现的计划有明显的优点。“谋杀板”能够建立信心，因为它们是*经受住考验的*。
- en: Stopping the Bleed
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止流血
- en: The techniques discussed in this chapter are all about transitioning troubled
    projects to a state where problems are not compounding in cycles. If the organization
    is making changes that will not provide enough value to justify their expense,
    boost the value of those changes by turning them into a vehicle of better engineering
    practices. If the organization is paralyzed by missing information and unknown
    complications, promote resilience and eliminate the fear of failure. If problems
    extend beyond what any one team can solve by itself, allow the organization to
    temporarily reorganize itself around the problem. If teams are demoralized to
    the point where they are hurting themselves, challenge other parts of the organization
    to contribute to their success.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的技术都围绕着将陷入困境的项目转变为一种问题不再成循环积累的状态。如果组织正在进行的变革无法提供足够的价值来证明其费用是值得的，就通过将这些变革转化为更好的工程实践来提升它们的价值。如果组织因为缺乏信息和未知的复杂因素而陷入停滞，促进韧性并消除失败的恐惧。如果问题超出了任何一个团队可以单独解决的范围，让组织围绕这个问题临时重组。如果团队士气低落到自我伤害的程度，挑战组织的其他部分来帮助他们取得成功。
- en: Legacy modernization projects do not fail because one mistake was made or something
    went wrong once. They fail because the organization deploys solutions that actually
    reinforce unsuccessful conditions. If you’re coming into a project in the middle,
    your most important task as a leader is figuring out where those cycles are and
    stopping them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统现代化项目并非因为犯了一个错误或某件事情一次性出错而失败。它们失败的原因在于组织部署了实际上会加剧不成功局面的解决方案。如果你在项目进行到一半时加入，作为领导者，你最重要的任务就是找出这些恶性循环并加以制止。
