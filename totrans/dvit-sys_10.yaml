- en: '10'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '10'
- en: '**KEY ASSEMBLY TAKEAWAYS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**汇编语言的关键要点**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: This part of the book has covered the basics of assembly. While most people
    today code in a high-level programming language, an understanding of assembly
    increases a programmer’s ability to better understand what their programs and
    compilers are doing. A knowledge of assembly is also essential for anyone who
    designs software for embedded systems and other resource-constrained environments,
    and for people who work in vulnerability analysis. The chapters contained in the
    assembly part of this book have spanned 64-bit Intel assembly (x86-64), 32-bit
    Intel Assembly (IA32), and 64-bit ARM assembly (ARMv8-A).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分介绍了汇编语言的基础。尽管今天大多数人使用高级编程语言编程，但了解汇编语言可以增强程序员更好地理解他们的程序和编译器的能力。对于任何为嵌入式系统和其他资源受限环境设计软件的人，以及从事漏洞分析的人员，掌握汇编语言也是至关重要的。本书中关于汇编部分的章节涵盖了64位Intel汇编（x86-64）、32位Intel汇编（IA32）和64位ARM汇编（ARMv8-A）。
- en: 10.1 Common Features
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1 共同特征
- en: Regardless of the specific assembly language that one learns, there are some
    common features to *all* assembly languages worth highlighting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 无论学习哪种具体的汇编语言，都有一些值得强调的*所有*汇编语言的共同特征。
- en: '**The ISA defines the assembly language.**   The specific assembly language
    available on a machine is defined by the *instruction set architecture* (ISA)
    of that machine. To identify the underlying architecture of a particular Linux
    machine, use the `uname -p` command.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**ISA定义了汇编语言。** 机器上可用的具体汇编语言由该机器的*指令集架构*（ISA）定义。要识别特定Linux机器的底层架构，可以使用`uname
    -p`命令。'
- en: '**Registers hold data.**   Every ISA defines a set of basic *registers* that
    the CPU uses to operate on data. Some registers are *general purpose* and can
    hold any kind of data, whereas other registers are *special purpose* and are typically
    reserved by the compiler for specific uses (e.g., stack pointer, base pointer).
    Although general-purpose registers are readable and writable, some special-purpose
    registers are read-only (e.g., the instruction pointer).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**寄存器存储数据。** 每个ISA都定义了一组基础的*寄存器*，CPU用这些寄存器来处理数据。有些寄存器是*通用的*，可以存储任何类型的数据，而另一些寄存器则是*专用的*，通常由编译器为特定用途保留（例如栈指针、基址指针）。虽然通用寄存器是可读写的，但一些专用寄存器是只读的（例如指令指针）。'
- en: '**Instructions specify what the CPU can do.**   The ISA also defines a series
    of *instructions* that specify operations that the CPU can perform. Each instruction
    has an *operation code* (opcode) that specifies what the instruction does, and
    one or more *operands* that specifies the data to be used. The ISA documents specific
    instructions for data movement, arithmetic operations, conditionals, branches,
    and accessing memory. These core instructions are often combined to represent
    more complex data structures like arrays, structs, and matrices.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**指令指定了CPU能够执行的操作。** ISA（指令集架构）还定义了一系列*指令*，指定了CPU能够执行的操作。每条指令都有一个*操作码*（opcode），指明该指令的功能，并且有一个或多个*操作数*，指定要使用的数据。ISA文档详细说明了数据传输、算术运算、条件判断、分支操作以及内存访问等特定指令。这些核心指令通常会组合起来表示更复杂的数据结构，如数组、结构体和矩阵。'
- en: '**The program stack holds local variables associated with a particular function.**   The
    compiler uses the stack (or stack memory) of a process’s virtual address space
    to store temporary data. On all modern systems, the program stack grows toward
    *lower* memory addresses. The compiler uses the stack pointer and base pointer
    to specify a *stack frame* that defines the area of the stack that is associated
    with a particular function or procedure. A new stack frame is added to the stack
    with every function call and defines the stack region associated with the callee
    function. The stack frame associated with a particular function is removed from
    the stack when that function returns. Typically, the stack and base pointers return
    to their original values when a function ends. While this bit of bookkeeping suggests
    that local variables are “cleaned” from the stack, old data usually stick around
    in the form of junk values, which can sometimes lead to hard-to-debug behaviors.
    Malicious actors can also use knowledge of an ISA’s stack bookkeeping to create
    dangerous security exploits like buffer overflows.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序栈保存了与特定函数相关的局部变量。** 编译器使用进程虚拟地址空间的栈（或栈内存）来存储临时数据。在所有现代系统中，程序栈朝着*较低*的内存地址增长。编译器使用栈指针和基址指针来指定一个*栈帧*，该栈帧定义了与特定函数或过程相关的栈区域。每次函数调用时，都会将新的栈帧添加到栈中，定义与被调用函数相关的栈区域。当函数返回时，特定函数相关的栈帧会从栈中移除。通常，当函数结束时，栈指针和基址指针会恢复到它们的原始值。虽然这段书面记录表明局部变量会从栈中“清除”，但旧数据通常以垃圾值的形式保留，这有时会导致难以调试的行为。恶意攻击者也可以利用ISA栈管理的知识，制造像缓冲区溢出这样的危险安全漏洞。'
- en: '**Security.**   All systems are vulnerable to security vulnerabilities like
    buffer overflow; however, the relatively recent ARMv8-A has had the opportunity
    to learn from some of the security flaws that affected older Intel architectures.
    However, the first line of defense is always the programmer. Even with additional
    protections, no ISA is invulnerable to potential security flaws. When coding in
    C, programmers should use *length specifiers* whenever possible to reduce the
    chance of security vulnerabilities resulting from boundary overruns (see [Table
    10-1](ch10.xhtml#ch10tab1)).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全性。** 所有系统都容易受到像缓冲区溢出这样的安全漏洞的影响；然而，相对较新的ARMv8-A有机会从影响旧版Intel架构的安全缺陷中吸取教训。尽管如此，第一道防线始终是程序员。即使有额外的保护措施，没有任何ISA能够避免潜在的安全缺陷。在C语言编程时，程序员应该尽可能使用*长度说明符*，以减少由于边界溢出导致的安全漏洞的机会（参见[表10-1](ch10.xhtml#ch10tab1)）。'
- en: '**Table 10-1:** C Functions with Length Specifiers'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**表10-1：** 带有长度说明符的C函数'
- en: '| **Instead of** | **Use** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **替代** | **使用** |'
- en: '| `gets(buf)` | `fgets(buf, 12, stdin)` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `gets(buf)` | `fgets(buf, 12, stdin)` |'
- en: '| `scanf("%s", buf)` | `scanf("%12s", buf)` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `scanf("%s", buf)` | `scanf("%12s", buf)` |'
- en: '| `strcpy(buf2, buf)` | `strncpy(buf2, buf, 12)` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `strcpy(buf2, buf)` | `strncpy(buf2, buf, 12)` |'
- en: '| `strcat(buf2, buf)` | `strncat(buf2, buf, 12)` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `strcat(buf2, buf)` | `strncat(buf2, buf, 12)` |'
- en: '| `sprintf(buf, "%d")` | `snprintf(buf, 12, "%d", num)` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `sprintf(buf, "%d")` | `snprintf(buf, 12, "%d", num)` |'
- en: 10.2 Further Reading
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.2 进一步阅读
- en: 'This book offers just a taste of some of the most popular assembly languages
    in use. For a more in-depth understanding of assembly, we encourage you to check
    out the ISA specifications:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书仅提供了当前使用的一些最流行汇编语言的初步介绍。如果你想更深入地了解汇编语言，我们鼓励你查阅ISA规格：
- en: Intel 64 and IA32 Manuals, *[https://software.intel.com/en-us/articles/intel-sdm#architecture](https://software.intel.com/en-us/articles/intel-sdm#architecture)*
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel 64和IA32手册， *[https://software.intel.com/en-us/articles/intel-sdm#architecture](https://software.intel.com/en-us/articles/intel-sdm#architecture)*
- en: ARM Cortex-A Programmer’s Guide, *[https://developer.arm.com/docs/den0024/a/preface](https://developer.arm.com/docs/den0024/a/preface)*
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM Cortex-A编程指南， *[https://developer.arm.com/docs/den0024/a/preface](https://developer.arm.com/docs/den0024/a/preface)*
- en: 'The following free resources may also be useful for those who are interested
    in learning 32-bit assembly:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下免费的资源对于有兴趣学习32位汇编的人可能也会很有帮助：
- en: IA32 Programming Web Aside, Randal Bryant and David O’Hallaron, *[http://csapp.cs.cmu.edu/3e/waside/waside-ia32.pdf](http://csapp.cs.cmu.edu/3e/waside/waside-ia32.pdf)*
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IA32编程网络附录，Randal Bryant和David O’Hallaron， *[http://csapp.cs.cmu.edu/3e/waside/waside-ia32.pdf](http://csapp.cs.cmu.edu/3e/waside/waside-ia32.pdf)*
- en: 32-bit ARM Assembly, Azeria Labs, *[https://azeria-labs.com/writing-arm-assembly-part-1/](https://azeria-labs.com/writing-arm-assembly-part-1/)*
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32位ARM汇编，Azeria Labs， *[https://azeria-labs.com/writing-arm-assembly-part-1/](https://azeria-labs.com/writing-arm-assembly-part-1/)*
- en: 'The following books also feature in-depth discussions of assembly; these aren’t
    free, but they are great resources for further reading:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下书籍也包含了关于汇编语言的深入讨论；它们不是免费的，但它们是进一步阅读的宝贵资源：
- en: 'Intel systems: Randal Bryant and David O’Hallaron, *Computer Systems: A Programmer’s
    Perspective*, Pearson, 2015.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔系统：Randal Bryant 和 David O'Hallaron, *计算机系统：程序员的视角*, Pearson, 2015年。
- en: 'ARMv8: David Patterson and John Hennessy, *Computer Organization and Design:
    ARM Edition*, Morgan Kaufmann, 2016.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ARMv8: David Patterson 和 John Hennessy, *计算机组织与设计：ARM版*, Morgan Kaufmann, 2016年。'
