["```\nimport {resolvers} from \"../../graphql/resolvers\";\nimport {typeDefs} from \"../../graphql/schema\"; \n```", "```\nimport {resolvers} from \"graphql/resolvers\";\nimport {typeDefs} from \"graphql/schema\"; \n```", "```\n{\n\"compilerOptions\": {\n **\"baseUrl\": \".\",**\n`--snip--`\n}\n} \n```", "```\n$ **docker exec -it foodfinder-application npm install mongoose**\n```", "```\nMONGO_URI=mongodb://backend:27017/foodfinder\n```", "```\nimport mongoose, {ConnectOptions} from \"mongoose\";\n\nconst MONGO_URI = process.env.MONGO_URI || \" \";\n\nif (!MONGO_URI.length) {\n    throw new Error(\n        \"Please define the MONGO_URI environment variable (.env.local)\"\n    );\n}\nlet cached = global.mongoose;\n\nif (!cached) {\n    cached = global.mongoose = {conn: null, promise: null};\n}\n\nasync function dbConnect(): Promise<any> {\n\n    if (cached.conn) {\n        return cached.conn;\n    }\n\n    if (!cached.promise) {\n\n        const opts: ConnectOptions = {\n            bufferCommands: false,\n            maxIdleTimeMS: 10000,\n            serverSelectionTimeoutMS: 10000,\n            socketTimeoutMS: 20000,\n        };\n\n cached.promise = mongoose\n            .connect(MONGO_URI, opts)\n            .then((mongoose) => mongoose)\n            .catch((err) => {\n                throw new Error(String(err));\n            });\n    }\n\n    try {\n        cached.conn = await cached.promise;\n    } catch (err) {\n        throw new Error(String(err));\n    }\n\n    return cached.conn;\n}\n\nexport default dbConnect; \n```", "```\nimport mongoose from \"mongoose\";\n\ndeclare global {\n    var mongoose: mongoose;\n} \n```", "```\nimport {Schema, InferSchemaType} from \"mongoose\";\n\nexport const LocationSchema: Schema = new Schema<LocationType>({\n    address: {\n        type: \"String\",\n        required: true,\n    },\n    street: {\n        type: \"String\",\n        required: true,\n    },\n    zipcode: {\n        type: \"String\",\n        required: true,\n    },\n    borough: {\n        type: \"String\",\n        required: true,\n    },\n    cuisine: {\n        type: \"String\",\n        required: true,\n    },\n    grade: {\n        type: \"String\",\n        required: true,\n    },\n    name: {\n        type: \"String\",\n        required: true,\n    },\n    on_wishlist: {\n        type: [\"String\"],\n        required: true,\n    },\n    location_id: {\n        type: \"String\",\n        required: true,\n    },\n});\n\nexport declare type LocationType = InferSchemaType<typeof LocationSchema>; \n```", "```\nimport mongoose, {model} from \"mongoose\";\nimport {LocationSchema, LocationType} from \"mongoose/locations/schema\";\n\nexport default mongoose.models.locations ||\n    model<LocationType>(\"locations\", LocationSchema); \n```", "```\nimport type {NextApiRequest, NextApiResponse} from \"next\";\n\nimport dbConnect from \"middleware/db-connect\";\nimport Locations from \"mongoose/locations/model\";\n\nexport default async function handler(\n    req: NextApiRequest, res: NextApiResponse<any>\n) {\n    await dbConnect();\n    const locations = await Locations.find({});\n    res.status(200).json(locations);\n} \n```", "```\nexport declare type FilterLocationType = {\n    location_id: string | string[];\n};\n\nexport declare type FilterWishlistType = {\n    on_wishlist: {\n        $in: string[];\n    };\n}; \n```", "```\nimport Locations from \"mongoose/locations/model\";\nimport {\n    FilterWishlistType,\n    FilterLocationType,\n} from \"mongoose/locations/custom\";\nimport {LocationType} from \"mongoose/locations/schema\";\nimport {QueryOptions} from \"mongoose\";\n\nasync function findLocations(\n    filter: FilterLocationType | FilterWishlistType | {}\n): Promise<LocationType[] | []> {\n    try {\n    let result: Array<LocationType | undefined> = await Locations.find(\n            filter\n        );\n        return result as LocationType[];\n    } catch (err) {\n        console.log(err);\n    }\n    return [];\n}\n\nexport async function findAllLocations(): Promise<LocationType[] | []> {\n    let filter = {};\n    return await findLocations(filter);\n}\n\nexport async function findLocationsById(\n    location_ids: string[]\n): Promise<LocationType[] | []> {\n    let filter = {location_id: location_ids};\n    return await findLocations(filter);\n}\n\nexport async function onUserWishlist(\n    user_id: string\n): Promise<LocationType[] | []> {\n    let filter: FilterWishlistType = {\n        on_wishlist: {\n            $in: [user_id],\n        },\n    };\n    return await findLocations(filter);\n}\n\nexport async function updateWishlist(\n    location_id: string,\n    user_id: string,\n    action: string\n) : Promise<LocationType | null | {}>\n {\n    let filter = {location_id: location_id};\n    let options: QueryOptions = {upsert: true, returnDocument: \"after\"};\n    let update = {};\n\n    switch (action) {\n        case \"add\":\n            update = {$push: {on_wishlist: user_id}};\n            break;\n        case \"remove\":\n            update = {$pull: {on_wishlist: user_id}};\n            break;\n    }\n\n    try {\n        let result: LocationType | null = await Locations.findOneAndUpdate(\n            filter,\n            update,\n            options\n        );\n        return result;\n    } catch (err) {\n        console.log(err);\n    }\n    return {};\n} \n```", "```\nimport type {NextApiRequest, NextApiResponse} from \"next\";\nimport dbConnect from \"middleware/db-connect\";\n\nimport {findAllLocations} from \"mongoose/locations/services\";\n\nexport default async function handler(\n    req: NextApiRequest,\n    res: NextApiResponse<any>\n) {\n    await dbConnect();\n    const locations = await findAllLocations();\n    res.status(200).json(locations);\n} \n```"]