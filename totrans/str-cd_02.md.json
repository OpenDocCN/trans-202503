["```\nIF X EQUALS Y THEN MOVE A TO B; \nOTHERWISE IF C EQUALS D THEN MOVE A TO D AND\nIF Y EQUALS Z THEN ADD B TO C\n```", "```\n#  Ask for two ints and report their relationship #\n( print(\"enter an integer: \");\n  INT a = read int;\n  print(\"now enter another integer: \");\n  INT b = read int;\n  IF (a > b) THEN\n    print((a, \" is greater than \", b, new line))\n  ELSE \n    IF (b > a) THEN\n      print((b, \" is greater than \", a, new line))\n    ELSE\n      print((a, \" is equal to \", b, new line))\n    FI\n  FI )\n```", "```\n> a68g bigger.a68\n```", "```\n      x ← ι10        \n      10 × x                \n10 20 30 40 50 60 70 80 90 100\n      y ← 4 4 ρ 16 ? 100\n      y\n97  5 92 67\n49 74 63 29\n23 85 56 33\n78 77 98 81\n```", "```\n      x ← 10?10        \n      x                               \n7 9 4 2 10 5 6 3 8 1                \n      xι10\n5\n```", "```\n 3 × 6 + 2\n24\n      (3 × 6) + 2\n20\n```", "```\n10  HOME\n100  REM COIN FLIPPER\n110  PRINT : INPUT \"HOW MANY FLIPS:\";N\n120  IF N < 1 THEN  END\n130 K = 0:T = 0:H = 0: PRINT\n140 C =  INT (2 *  RND (1))\n150  IF C = 0 THEN  PRINT \"T\";:T = T + 1\n160  IF C = 1 THEN  PRINT \"H\";:H = H + 1 170 K = K + 1\n180  IF K < N THEN  GOTO 140\n190  PRINT : PRINT\n200  PRINT H;\" HEADS AND \";T;\" TAILS\"\n210  PRINT \"DO YOU WANT TO TRY AGAIN?\": INPUT A$\n220  IF A$ = \"Y\" THEN  GOTO 10\n230  HOME : END\n```", "```\nhello:proc options(main);\n  declare i fixed binary;\n  do i = 1 to 10;\n    put skip list(\"Hello, world!\");\n  end;\nend hello;\n```", "```\nrepeat 16 [         ; repeat commands in [ ] 16 times\n    repeat 4 [      ; repeat commands in [ ] 4 times\n        fd 50       ; turtle forward 50 pixels\n        rt 90       ; turtle turn right 90 degrees\n    ]\n    rt 22.5         ; turn right 22.5 degrees\n]\npu                  ; pen up\nfd 80               ; forward 80 pixels\nrt 40               ; right turn 40 degrees\n```", "```\ncomment Hello world;\nbegin\n    OutText(\"Hello, world!\");\n    OutImage;\n    OutText(\"How are you today?\");\nend\n```", "```\nbegin\n    integer r;\n    for r:= 1,1, 3 step 3 until 18, -12 do\n    begin\n        OutInt(r,5);     OutText(\" \");\n        OutInt(r*r,5);   OutText(\" \");\n        OutInt(r*r*r,5); Outimage;\n    end\nend\n```", "```\n    1     1     1\n    1     1     1\n    3     9    27\n    6    36   216\n    9    81   729\n   12   144  1728\n   15   225  3375\n   18   324  5832\n  -12   144 -1728\n```", "```\nbegin\n  class Person;\n  begin\n    text first, last;\n    integer age;\n    procedure Print;\n    begin\n      OutText(first); OutText(\" \");\n      OutText(last); OutText(\", age\");\n      OutInt(age,3); Outimage;\n    end;\n  end;\n\n  Person class Pal;\n  begin\n    text nickname;\n    procedure Print;\n    begin\n      OutText(nickname);\n      OutText(\" is \");\n      This Pal Qua Person.Print;\n    end;\n  end;\n\n  ref(Person) Fred, Barney;\n  ref(Pal) Wilma, Betty;\n\n  Fred :- new Person;\n  Barney :- new Person;\n  Wilma :- new Pal; Betty :- new Pal;\n\n  Fred.first :- \"Fred\";         Barney.first :- \"Barney\";\n  Fred.last :- \"Flintstone\";    Barney.last :- \"Rubble\";\n  Fred.age := 37;               Barney.age := 34;\n\n  Wilma.first :- \"Wilhelmina\";  Betty.first :- \"Elizabeth\";\n  Wilma.last :- \"Flintstone\";   Betty.last :- \"Rubble\";\n  Wilma.age := 35;              Betty.age := 31;\n  Wilma.nickname :- \"Wilma\";    Betty.nickname :- \"Betty\";\n\n  Fred.Print;\n  Wilma.Print;\n  Barney.Print;\n  Betty.Print;    \nend\n```", "```\nThis Pal Qua Person.Print;\n```", "```\nFred Flintstone, age 37\nWilma is Wilhelmina Flintstone, age 35\nBarney Rubble, age 34\nBetty is Elizabeth Rubble, age 31\n```", "```\nprogram nonsquares;\n\nvar\n   n : integer;\n\nbegin\n    for n := 1 to 120 do begin write(n + trunc(0.5 + sqrt(n)):4);\n        if (n mod 10) = 0 then writeln;\n    end;\n    writeln\nend.\n```", "```\n   2   3   5   6   7   8  10  11  12  13\n  14  15  17  18  19  20  21  22  23  24\n  26  27  28  29  30  31  32  33  34  35\n  37  38  39  40  41  42  43  44  45  46\n  47  48  50  51  52  53  54  55  56  57\n  58  59  60  61  62  63  65  66  67  68\n  69  70  71  72  73  74  75  76  77  78\n  79  80  82  83  84  85  86  87  88  89\n  90  91  92  93  94  95  96  97  98  99\n 101 102 103 104 105 106 107 108 109 110\n 111 112 113 114 115 116 117 118 119 120\n 122 123 124 125 126 127 128 129 130 131\n```", "```\n> sudo apt-get install swi-prolog-nox\n```", "```\nmale(uranus).\nmale(cronus).\nmale(zeus).\n--snip--\nfemale(gaia).\nfemale(rhea).\nfemale(hera).\n--snip--\nparent(uranus, cronus).\nparent(gaia, cronus).\nparent(cronus, zeus).\n--snip--\nmarried(zeus, hera).\nmarried(hephaestus, aphrodite).\n\nfather(X,Y) :- parent(X,Y), male(X).\nmother(X,Y) :- parent(X,Y), female(X).\nchild(X,Y) :- parent(Y,X).\nsibling(X,Y) :- parent(P,X), parent(P,Y), dif(X,Y).\nbrother(X,Y) :- sibling(X,Y), male(X).\nsister(X,Y) :- sibling(X,Y), female(X). grandparent(X,Y) :- parent(X,A), parent(A,Y).\ngrandfather(X,Y) :- grandparent(X,Y), male(X).\ngrandmother(X,Y) :- grandparent(X,Y), female(X).\ngreatgrandparent(X,Y) :- parent(X,A), parent(A,B), parent(B,Y).\ngreatgrandfather(X,Y) :- greatgrandparent(X,Y), male(X).\ngreatgrandmother(X,Y) :- greatgrandparent(X,Y), female(X).\ncousin(X,Y) :- sibling(A,B), parent(A,X), parent(B,Y), dif(X,Y).\naunt(X,Y) :- sister(X,A), parent(A,Y).\nuncle(X,Y) :- brother(X,A), parent(A,Y).\nwife(X,Y) :- female(X), (married(X,Y); married(Y,X)).\nhusband(X,Y) :- male(X), (married(X,Y); married(Y,X)).\nparamour(X,Y) :- child(A,X), child(A,Y), \\+ married(X,Y), dif(X,Y).\n```", "```\n> swipl family.pl\n```", "```\n?- married(zeus,hera).\ntrue.\n?- wife(X,zeus).\nX = hera ;\nfalse.\n?- mother(hera,W).\nW = ares ;\nW = hephaestus ;\nW = eris.\n?- mother(X,hera).\nX = rhea.\n?- mother(X,zeus).\nX = rhea.\n?- father(zeus,W).\nW = ares ;\nW = hephaestus ;\nW = eris ;\nW = athena ;\nW = hermes ;\nW = apollo ;\nW = artemis ;\nW = dionysus.\n```", "```\n?- paramour(zeus,W).\nW = metis ;\nW = maia ;\nW = leto ;\nW = leto ;\nW = semele.\n?- grandmother(X,apollo).\nX = rhea ;\nfalse.\n?- greatgrandfather(X,artemis).\nX = uranus ;\nfalse.\n```", "```\nparamour(X,Y) :- child(A,X), child(A,Y), \\+ married(X,Y), dif(X,Y).\n```", "```\n1 1 2 3 5 8 13 21 34 55 ...\n```", "```\ndef fib(n):\n    if (n <= 2):\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n```", "```\nfib(1,1).\nfib(2,1).\n\nfib(N,F) :-\n    N > 2,\n    N1 is N-1,\n    N2 is N-2,\n    fib(N1,F1),\n    fib(N2,F2),\n    F is F1 + F2.\n```", "```\n?- fib(11,F).\nF = 89 .\n```", "```\n?- trace.\ntrue.\n[trace]  ?- fib(3,F).\n   Call: (8) fib(3, _4072) ? creep\n   Call: (9) 3>2 ? creep\n   Exit: (9) 3>2 ? creep\n   Call: (9) _4296 is 3+ -1 ? creep\n   Exit: (9) 2 is 3+ -1 ? creep\n   Call: (9) _4302 is 3+ -2 ? creep\n   Exit: (9) 1 is 3+ -2 ? creep\n➊ Call: (9) fib(2, _4304) ? creep\n   Exit: (9) fib(2, 1) ? creep\n➋ Call: (9) fib(1, _4304) ? creep\n   Exit: (9) fib(1, 1) ? creep\n   Call: (9) _4072 is 1+1 ? creep\n   Exit: (9) 2 is 1+1 ? creep\n   Exit: (8) fib(3, 2) ? creep\nF = 2 .\n```", "```\nfib(1,A,F,F).\n\nfib(N,A,B,F) :-\n    N > 0,\n    N1 is N-1,\n    B1 is A+B,\n    fib(N1,B,B1,F).\n```", "```\nObject subclass: MyClass [ \n    A: n [ ^n*n ]\n]\n```", "```\nMyClass extend [ \n    B: n [ ^n*n*n ] \n]\n```", "```\n> sudo apt-get install gnu-smalltalk\n```", "```\n$ brew install gnu-smalltalk\n```", "```\n#!/usr/bin/gst\n\"Smalltalk 'Hello, world!' example\"\n\n'' displayNl.\n'Hello, world!' displayNl.\n'' displayNl.\n```", "```\ngst\nGNU Smalltalk ready\n\nst> 2 + 3 * 6\n30\nst> 2 + (3 * 6)\n20\n```", "```\nst> x := Array new: 5\n(nil nil nil nil nil )\nst> x at: 1 put: 3\n3 st> x at: 3 put: 'plugh'\n'plugh'\nst> x\n(3 nil 'plugh' nil nil )\n```", "```\nst> s := 'Nobody expects the Spanish inquisition!'\nst> s countSubCollectionOccurrencesOf: 'i'\n5\n```", "```\nst> Transcript show: 'howdy'; cr; show: 'partner'; cr\nhowdy\npartner\n```", "```\nst> b := [ 'I am a block. I am an island.' displayNl ]\na BlockClosure\nst> b value\nI am a block.  I am an island.\n'I am a block.  I am an island.'\n```", "```\nst> x := 'number 9'\n'number 9'\nst> b := [ :i | |y| y:=i. x:=y. z:=y ]\na BlockClosure\nst> b value: 42\n42\nst> x. z. y\n42\n42\nnil\n```", "```\nv := stdin nextLine asInteger.\n\n(v < 0) ifTrue: [\n    a := -1\n] ifFalse: [ \n    (v > 0) ifTrue: [\n        a := 1\n    ] ifFalse: [\n        a := 0\n    ]\n].\n```", "```\ni:=1\\. \n[i < 10] whileTrue: [ i displayNl. i := i + 1 ]\n```", "```\ni:=1.\n[i >= 10] whileFalse: [ i displayNl. i := i + 1 ]\n```", "```\ni:=1\\. \n[x:=i*i. i < 10] whileTrue: [ i displayNl. i := i + 1 ]\n```", "```\n1 to: 10 do: [ :i | i displayNl ]\n```", "```\nj := 1 to: 10.\nj do: [ :i | i displayNl ]\n```", "```\nj := 1 to: 10.\nb := [ :i | i displayNl ].\nj do: b.\n```", "```\nObject subclass: Animal [\n    | increment distance letter |\n    init: inc letter: l [\n        letter := l.\n        increment := inc.\n        distance := 0\n    ]\n    getDistance [ ^distance ]\n    print [\n        (distance-1) timesRepeat: [  '-' display ].\n        letter displayNl\n    ]\n]\n```", "```\nAnimal subclass: Bird [\n    init [ super init: 6 letter: 'B' ]\n    fly [ distance := distance + increment ]\n    doesNotUnderstand: msg [ ]\n]\nAnimal subclass: Wolf [\n    init [ super init: 5 letter: 'W' ]\n    run [ distance := distance + increment ]\n    doesNotUnderstand: msg [ ]\n]\nAnimal subclass: Frog [\n    init [ super init: 4 letter: 'F' ]\n    hop [ distance := distance + increment ]\n    doesNotUnderstand: msg [ ]\n]\nAnimal subclass: Snail [\n    init [ super init: 3 letter: 'S' ]\n    crawl [ distance := distance + increment ]\n    doesNotUnderstand: msg [ ]\n]\n```", "```\nanimals := Array new: 4.\nanimals at: 1 put: (Bird new).\nanimals at: 2 put: (Wolf new).\nanimals at: 3 put: (Frog new).\nanimals at: 4 put: (Snail new).\n1 to: 4 do: [ :i | (animals at: i) init ].\n```", "```\nmoves := #('fly' 'run' 'hop' 'crawl').\n50 timesRepeat: [\n    m := moves at: ((1 to: 4) atRandom).\n    1 to: 4 do: [ :i | (animals at: i) perform: m asSymbol ].\n].\n```", "```\nTranscript cr; show: 'Race results:'; cr; cr\n1 to: 4 do: [ :i | (animals at: i) print ].\n'' displayNl.\n```", "```\ndist := Dictionary new.\n1 to: 4 do: [ :i | \n    animal := animals at: i.\n    dist at: animal put: animal getDistance\n].\n```", "```\nd := (animals at: 1) getDistance.\nwinner := (animals at: 1) class displayString.\ndist associationsDo: [ :pair |\n    ((pair value) > d) ifTrue: [\n        d := pair value.\n        winner := (pair key) class displayString.\n    ]\n].\nTranscript show: 'The winner is '; show: winner; cr; cr.\n```", "```\nRace results:\n\n------------------------------------------------------------------B\n--------------------------------------------------------------------W\n--------------------------------------------------------------F\n-----------------------------S\n\nThe winner is Wolf\n```", "```\nBird wins  0.6373\nWolf wins  0.2802\nFrog wins  0.0760\nSnail wins 0.0065\n```", "```\n> sudo apt-get install smlnj\n```", "```\nStandard ML of New Jersey v110.79 [built: Tue Aug  8 23:21:20 2017]\n-\n```", "```\nval it = \"scary movie\" : string\n```", "```\n>>> x = 359\n>>> def f(y):\n...     return x+y\n>>> f(2)\n361\n>>> x = 42\n>>> f(2)\n44\n```", "```\n- val x = 359;\nval x = 359 : int\n- fun f(y) = x+y;\nval f = fn : int -> int\n- f(2);\nval it = 361 : int\n- val x = 42;\nval x = 42 : int\n- f(2);\nval it = 361 : int\n```", "```\n- val x = true;\n- val y = false;\n- x orelse y;\nval it = true : bool\n- x andalso y;\nval it = false : bool\n```", "```\n- (fn x => x+1) 11;\nval it = 12 : int\n```", "```\n- fun add(x,y) = x+y;\nval add = fn : int * int -> int\n- add(11,22);\nval it = 33 : int\n- fun add x y = x+y;\nval add = fn : int -> int -> int\n- add 11 22;\nval it = 33 : int\n```", "```\nfn : int * int -> int\n```", "```\nfn : int -> int -> int\n```", "```\n- fun add x y = x+y;\nval add = fn : int -> int -> int\n- (add 11) 22;\nval it = 33 : int\n- val add11 = add 11;\nval add11 = fn : int -> int\n- add11(22);\nval it = 33 : int\n- add11;\nval it = fn : int -> int\n```", "```\nfun hello () = print \"Hello, world!\\n\";\n\nfun greetA(n) =\n    if (n = 1) then hello()\n    else (hello(); greetA(n-1));\n\nfun greetB 1 = hello()\n  | greetB n = (hello(); greetB(n-1));\n```", "```\n[opening hello.sml]\nval hello = fn : unit -> unit\nval greetA = fn : int -> unit\nval greetB = fn : int -> unit\n```", "```\nfun greetB 1 = hello()\n  | greetB n = (hello(); greetB(n-1));\n```", "```\n- fun add x y = x+y;\nval add = fn : int -> int -> int\n- val add3 = add 3;\nval add3 = fn : int -> int\n- map add3 [0,1,2,3,4];\nval it = [3,4,5,6,7] : int list\n- map (fn x => \"a \" ^ x) [\"boat\", \"car\", \"truck\"];\nval it = [\"a boat\",\"a car\",\"a truck\"] : string list\n```", "```\n- val f = (fn (x,y) => y^x);\nval f = fn : string * string -> string\n- foldr f \"a \" [\"boat\", \"car\", \"truck\"];\nval it = \"a truckcarboat\" : string\n- foldl f \"a \" [\"boat\", \"car\", \"truck\"];\nval it = \"a boatcartruck\" : string\n```", "```\nf(\"truck\", f(\"car\", f(\"boat\", \"a \")));\n```", "```\nf(\"boat\", f(\"car\", f(\"truck\", \"a \")));\n```", "```\n- foldl op+ 0 [11,33,22,44];\nval it = 110 : int\n- foldl op* 1 [5,4,3,2,1];\nval it = 120 : int\n```"]