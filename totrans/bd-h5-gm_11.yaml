- en: Appendix A. Afterword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hopefully, working through this book has taught you how simple it can be to
    develop a game with HTML5 and JavaScript and has given you some insight into these
    technologies’ potential. The next question is: where to next? The answer is: go
    and make more games!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: With your new skills and HTML5, CSS, and JavaScript reference material on the
    Internet, you should be able to tackle just about any kind of game that’s possible
    with HTML5, although I recommend making your next project relatively small and
    achievable. Most developers have a list of unfinished projects longer than their
    list of finished ones, so start with a game that will let you put a tick in the
    right column.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: If you already have some game ideas and think you can build them, by all means
    dive straight in! In case you’re wondering where to go, here are a few suggestions
    to help you hone your skills and build a portfolio.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Improving Bubble Shooter
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Bubble Shooter* is pretty nifty already, but we all know it could be better.
    Any game always has room for improvement! Here are some ideas:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Add power-ups and bonus points that drop when bubbles are popped and that the
    user has to click to collect.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more bubble colors to later levels.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create grid patterns in different sizes and layouts.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement side walls so the player can bounce fired bubbles off the sides.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You shouldn’t need to write an entirely new game to add these features, and
    with the bulk of *Bubble Shooter* in place already, you can really focus on refining
    them. Throw in a few creative ideas of your own, and you’ll have a game that people
    can’t stop playing!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Whole New Game
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can learn a lot by spending time polishing a game such as *Bubble Shooter*,
    but to build your confidence as a game developer, there’s nothing better than
    building as many games as you can. You can either create your own new game ideas
    or, to fast-track to the programming process, work with some existing games and
    try to figure out how they’re made. I’ll describe a few suggestions for basic
    game ideas that you’ll be able to construct with your new skills.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Match-3
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Match-3 games, such as *Bejeweled* and *Candy Crush*, never seem to go out of
    fashion, and they present both a well-defined technical challenge and a demanding
    user interface one. Consider the problem of a set of gems exploding and dropping,
    which in turn causes more gems to drop and explode, and so on. Visualize algorithms
    to handle the cascading effects and consider what happens if the user tries to
    swap a gem while all of this is happening. Will you let players do that? Try building
    the best game of this type that you can, and then, once you have it working, play
    *Bejeweled* or one of the other popular implementations, identify the features
    you think make the experience fun, and try to add similar polish to your game.
    Subtle but effective touches really make all the difference.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Solitaire
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Card games are simpler than other games graphically, but they pose enough user
    interface and game logic challenges that it’s worth working through one. Once
    the game logic is in place, you can offer users customized deck backs and animations
    to give your game personality. Be sure to obfuscate your code so that players
    can’t peek at the deck state while playing!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 卡牌游戏在图形表现上比其他类型的游戏简单，但它们带来了足够的用户界面和游戏逻辑挑战，因此值得投入精力去开发。游戏逻辑一旦建立，你就可以为玩家提供定制的卡组背面和动画效果，以赋予你的游戏个性。务必混淆代码，以防玩家在游戏过程中窥探到卡组状态！
- en: A Platform Game
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台游戏
- en: 'A platform game is a big step up from the types of games mentioned earlier.
    You’ll need to implement some basic physics for the main character (although I
    wouldn’t try to implement real physics for the entire game) and some kind of scrolling,
    either just sideways or possibly in both dimensions. The level design can remain
    simple: define an entrance point and an exit point and make the player cross between
    the two. By the end, you’ll start thinking more in terms of reusing code for future
    games, and you’ll have solved challenges such as animating a moving figure.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 平台游戏是比前面提到的游戏类型更高一层的挑战。你需要为主角实现一些基本的物理效果（尽管我不建议你为整个游戏实现真实物理模拟），并实现某种形式的滚动，可能是仅仅水平滚动，也有可能是双向滚动。关卡设计可以保持简单：定义一个入口点和一个出口点，让玩家穿越这两点。最终，你将开始更多地考虑如何为未来的游戏复用代码，并且你会解决诸如动画化移动人物等问题。
- en: A Simple Physics Game
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的物理游戏
- en: '*Angry Birds* was a huge hit, which makes it all the more surprising that the
    basic mechanics are so simple to re-create. *Angry Birds* uses a physics engine
    called Box2D, and there’s a free version available for JavaScript called Box2dWeb.
    You can find the code and documentation at *[https://code.google.com/p/box2dweb/](https://code.google.com/p/box2dweb/)*.
    The examples that you’ll find online aren’t always simple to follow, and adding
    physics to a game is challenging. I recommend Seth Ladd’s tutorial for a step-by-step
    introduction to the library at *[http://blog.sethladd.com/2011/08/box2d-orientation-for-javascript.html](http://blog.sethladd.com/2011/08/box2d-orientation-for-javascript.html)*.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*愤怒的小鸟*是一款巨大的成功，这也让人更加惊讶于其基本机制竟如此简单便于重现。*愤怒的小鸟*使用了一款名为Box2D的物理引擎，并且有一个免费的JavaScript版本，叫做Box2dWeb。你可以在*［https://code.google.com/p/box2dweb/］(https://code.google.com/p/box2dweb/)*找到代码和文档。你在网上找到的示例并不总是容易理解，并且将物理引擎加入游戏也是具有挑战性的。我推荐Seth
    Ladd的教程，它为你提供了逐步介绍这款库的指南，教程地址是*［http://blog.sethladd.com/2011/08/box2d-orientation-for-javascript.html］(http://blog.sethladd.com/2011/08/box2d-orientation-for-javascript.html)*。'
- en: Joining a Game Development Team
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入游戏开发团队
- en: If none of the ideas discussed so far captures your imagination, and you’re
    struggling to come up with a game concept of your own, consider finding a game
    designer who’s looking for someone to help realize their creations. Sites such
    as Meetup (*[http://meetup.com/](http://meetup.com/)*) are a good place to look
    for game development groups. You can meet and perhaps collaborate with both established
    and aspiring game developers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果到目前为止提到的任何想法都无法激发你的创意，或者你正为自己的游戏创意苦恼，考虑找一个正在寻找合作伙伴的游戏设计师，帮助实现他们的创意。像Meetup这样的站点（*［http://meetup.com/］(http://meetup.com/)*)是寻找游戏开发团队的好地方。在那里，你可以遇到并可能与既有经验的开发者和有抱负的游戏开发者合作。
- en: With HTML5, an individual or a small team can create games that mass audiences
    can play on desktop and mobile devices more easily than ever before. Grab the
    opportunity—go forth and make games!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 借助HTML5，个人或小团队比以往任何时候都更容易创建可以在桌面和移动设备上供大众玩耍的游戏。抓住这个机会——去创造游戏吧！
