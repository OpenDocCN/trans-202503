["```\nselect f_get_state_population('New York');\n```", "```\nf_get_state_population('New York')\n----------------------------------\n              19299981\n```", "```\nselect  *\nfrom    state_population\nwhere   population > f_get_state_population('New York');\n```", "```\nselect  *\nfrom    state_population\nwhere   population > 19299981;\n```", "```\nstate       population\n----------  ----------\nCalifornia   39613493\nTexas        29730311\nFlorida      21944577\n```", "```\ncall p_set_state_population('New York');\n```", "```\n❶ use population;\n\n❷ drop function if exists f_get_state_population;\n\ndelimiter //\n\n❸ create function f_get_state_population(\n    state_param    varchar(100)\n)\nreturns int\ndeterministic reads sql data\nbegin\n    declare population_var int;\n\n    select  population\n    into    population_var\n from    state_population\n    where   state = state_param;\n\n    return(population_var);\n❹ end//\n\ndelimiter ;\n```", "```\ndelimiter //\ncreate function f_get_world_population()\nreturns bigint\ndeterministic no sql\nbegin\n    return(7978759141);\nend//\n\ndelimiter ;\n```", "```\ncreate function f_get_world_population()\nreturns bigint\ndeterministic no sql\nreturn(7978759141);\n```", "```\ndeterministic reads sql data\n```", "```\ndeterministic\nreads sql data\n```", "```\n❶ use population;\n\n❷ drop procedure if exists p_set_state_population;\n\n❸ delimiter //\n\n❹ create procedure p_set_state_population(\n  ❺ in state_param varchar(100)\n)\nbegin\n  ❻ delete from state_population\n    where state = state_param;\n\n  ❼ insert into state_population\n    (\n           state,\n           population\n    )\n    select state,\n         ❽ sum(population)\n    from   county_population\n    where  state = state_param\n    group by state;\n\n❾ end//\n\ndelimiter ;\n```", "```\nuse population;\n\ndrop procedure if exists p_set_and_show_state_population;\n\ndelimiter //\n\ncreate procedure p_set_and_show_state_population(\n    in state_param varchar(100)\n)\nbegin\n  ❶ declare population_var int;\n\n    delete from state_population\n    where state = state_param;\n\n  ❷ select sum(population)\n    into   population_var\n    from   county_population\n    where  state = state_param;\n\n  ❸ insert into state_population\n    (\n           state,\n           population\n    )\n    values\n    (\n           state_param,\n           population_var\n    );\n\n  ❹ select concat(\n               'Setting the population for ',\n               state_param,\n ' to ',\n               population_var\n            );\nend//\n\ndelimiter ;\n```", "```\ncall p_set_and_show_state_population('New York');\n```", "```\nSetting the population for New York to 20201249\n```", "```\ndeclare population_var int;\n```", "```\ndeclare local_var int;\nset local_var = 2;\nset @user_var = local_var + 3;\n```", "```\nuse population;\n\ndrop procedure if exists p_compare_population;\n\ndelimiter //\n\ncreate procedure p_compare_population(\n    in state_param varchar(100)\n)\nbegin\n    declare state_population_var int;\n    declare county_population_var int;\n\n    select  population\n  ❶ into    state_population_var\n    from    state_population\n    where   state = state_param;\n\n select sum(population)\n  ❷ into   county_population_var\n    from   county_population\n    where  state = state_param;\n\n  ❸ if (state_population_var = county_population_var) then\n       select 'The population values match';\n  ❹ else\n       select 'The population values are different';\n    end if;\n\nend//\n\ndelimiter ;\n```", "```\ncall p_compare_population('New York');\n```", "```\nThe population values are different\n```", "```\nif (state_population_var = county_population_var) then\n    select 'The population values match';\n**elseif (state_population_var > county_population_var) then**\n **select 'State population is more than the sum of county population';**\nelse\n    select 'The sum of county population is more than the state population';\nend if;\n```", "```\nuse population;\n\ndrop procedure if exists p_population_group;\n\ndelimiter //\n\ncreate procedure p_population_group(\n    in state_param varchar(100)\n)\nbegin\n    declare state_population_var int;\n\n    select population\n    into   state_population_var\n    from   state_population\n    where  state = state_param;\n\n    case\n    ❶ when state_population_var > 30000000 then select 'Over 30 Million';\n    ❷ when state_population_var > 10000000 then select 'Between 10M and 30M';\n    ❸ else select 'Under 10 Million';\n    end case;\n\nend//\n\ndelimiter ;\n```", "```\ncall p_population_group('California');\nOver 30 Million\n\ncall p_population_group('New York');\nBetween 10M and 30M\n\ncall p_population_group('Rhode Island');\nUnder 10 Million\n```", "```\ndrop procedure if exists p_endless_loop;\n\ndelimiter //\ncreate procedure p_endless_loop()\nbegin\n**loop**\n **select 'Looping Again';**\n**end loop;**\nend;\n//\ndelimiter ;\n```", "```\ncall p_endless_loop();\n```", "```\ndrop procedure if exists p_more_sensible_loop;\n\ndelimiter //\ncreate procedure p_more_sensible_loop()\nbegin\n❶ set @cnt = 0;\n❷ msl: loop\n  select 'Looping Again';\n❸ set @cnt = @cnt + 1;\n❹ if @cnt = 10 then\n  ❺ leave msl;\n  end if;\nend loop msl;\nend;\n//\ndelimiter ;\n```", "```\ndrop procedure if exists p_repeat_until_loop;\n\ndelimiter //\ncreate procedure p_repeat_until_loop()\nbegin\nset @cnt = 0;\n**repeat**\n **select 'Looping Again';**\n **set @cnt = @cnt + 1;**\n**until @cnt = 10**\n**end repeat;**\nend;\n//\ndelimiter ;\n```", "```\ndrop procedure if exists p_while_loop;\n\ndelimiter //\ncreate procedure p_while_loop()\nbegin\nset @cnt = 0;\n**while @cnt < 10 do**\n **select 'Looping Again';**\n **set @cnt = @cnt + 1;**\n**end while;**\nend;\n//\ndelimiter ;\n```", "```\nuse population;\n\ndrop procedure if exists p_get_county_population;\n\ndelimiter //\n\ncreate procedure p_get_county_population(\n    in state_param varchar(100)\n)\nbegin\n    select county,\n           format(population, 0)\n    from   county_population\n    where  state = state_param\n    order by population desc;\nend//\n\ndelimiter ;\n```", "```\ncall p_get_county_population('New York');\n```", "```\nKings          2,736,074\nQueens         2,405,464\nNew York       1,694,251\nSuffolk        1,525,920\nBronx          1,472,654\nNassau         1,395,774\nWestchester    1,004,457\nErie             954,236\n`--snip--`\n```", "```\ncounty       population\n-----------  ----------\nKings         2,736,074\nQueens        2,405,464\nNew York      1,694,251\nSuffolk       1,525,920\nBronx         1,472,654\nNassau        1,395,774\nWestchester   1,004,457\n```", "```\ndrop procedure if exists p_split_big_ny_counties;\n\ndelimiter //\n\ncreate procedure p_split_big_ny_counties()\nbegin\n❶ declare  v_state       varchar(100);\n  declare  v_county      varchar(100);\n  declare  v_population  int;\n\n❷ declare done bool default false;\n\n❸ declare county_cursor cursor for\n    select  state,\n            county,\n            population\n    from    county_population\n    where   state = 'New York'\n    and     population > 2000000;\n\n❹ declare continue handler for not found set done = true;\n\n❺ open county_cursor;\n\n❻ fetch_loop: loop\n    fetch county_cursor into v_state, v_county, v_population;\n\n  ❼ if done then\n      leave fetch_loop;\n    end if;\n\n  ❽ set @cnt = 1;\n\n  ❾ split_loop: loop\n\n      insert into county_population\n      (\n        state,\n        county,\n        population\n      )\n values\n      (\n        v_state,\n        concat(v_county, '-', @cnt),\n        round(v_population/2)\n      );\n\n      set @cnt = @cnt + 1;\n\n      if @cnt > 2 then\n        leave split_loop;\n      end if;\n\n    end loop split_loop;\n\n    -- delete the original county\n  ❿ delete from county_population where county = v_county;\n\n  end loop fetch_loop;\n\n  close county_cursor;\nend;\n//\n\ndelimiter ;\n```", "```\ncall p_split_big_ny_counties();\n```", "```\nselect *\nfrom   county_population\norder by population desc;\n```", "```\nstate     county       population\n--------  -----------  ----------\nNew York  New York       1694251\nNew York  Suffolk        1525920\nNew York  Bronx          1472654\nNew York  Nassau         1395774\nNew York  Kings-1        1368037\nNew York  Kings-2        1368037\nNew York  Queens-1       1202732\nNew York  Queens-2       1202732\nNew York  Westchester    1004457\n`--snip--`\n```", "```\nuse population;\n\ndrop procedure if exists p_return_state_population;\n\ndelimiter //\n\ncreate procedure p_return_state_population(\n  ❶ in  state_param         varchar(100),\n  ❷ out current_pop_param   int\n)\nbegin\n  ❸ select population\n    into   current_pop_param\n    from   state_population\n    where  state = state_param;\nend//\n\ndelimiter ;\n```", "```\ncall p_return_state_population('New York', @pop_ny);\n```", "```\nselect @pop_ny;\n```", "```\n20201249\n```", "```\nuse population;\n\ndrop procedure if exists p_population_caller;\n\ndelimiter //\n\ncreate procedure p_population_caller()\nbegin\n  call p_return_state_population('New York', @pop_ny);\n  call p_return_state_population('New Jersey', @pop_nj);\n\n  set @pop_ny_and_nj = @pop_ny + @pop_nj;\n\n  select concat(\n     'The population of the NY and NJ area is ',\n     @pop_ny_and_nj);\n\nend//\n\ndelimiter ;\n```", "```\ncall p_population_caller();\n```", "```\nThe population of the NY and NJ area is 29468379\n```", "```\nselect routine_type,\n       routine_name\nfrom   information_schema.routines\nwhere  routine_schema = 'population';\n```", "```\nroutine_type  routine_name\n------------  -------------------------------\nFUNCTION      f_get_state_population\nPROCEDURE     p_compare_population\nPROCEDURE     p_endless_loop\nPROCEDURE     p_get_county_population\nPROCEDURE     p_more_sensible_loop\nPROCEDURE     p_population_caller\nPROCEDURE     p_repeat_until_loop\nPROCEDURE     p_return_state_population\nPROCEDURE     p_set_and_show_state_population\nPROCEDURE     p_set_state_population\nPROCEDURE     p_split_big_ny_counties\nPROCEDURE     p_while_loop\n```"]