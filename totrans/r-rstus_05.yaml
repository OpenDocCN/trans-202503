- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 4 MAPS AND GEOSPATIAL DATA
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 地图和地理空间数据
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: When I first started learning R, I considered it a tool for working with numbers,
    not shapes, so I was surprised when I saw people using it to make maps. For example,
    developer Abdoul Madjid used R to make a map that visualizes rates of COVID-19
    in the United States in 2021.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚开始学习R时，我认为它是一个用于处理数字的工具，而不是处理形状的工具，因此当我看到人们用它来制作地图时，我感到很惊讶。例如，开发者Abdoul Madjid使用R制作了一张2021年美国COVID-19疫情传播率的地图。
- en: You might think you need specialized mapmaking software like ArcGIS to make
    maps, but it’s an expensive tool. And while Excel has added support for mapmaking
    in recent years, its features are limited (for example, you can’t use it to make
    maps based on street addresses). Even QGIS, an open source tool similar to ArcGIS,
    still requires learning new skills.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为制作地图需要像ArcGIS这样的专业地图制作软件，但它是一个昂贵的工具。虽然Excel近年来增加了地图制作支持，但它的功能有限（例如，你不能用它根据街道地址制作地图）。即使是类似于ArcGIS的开源工具QGIS，仍然需要学习新技能。
- en: Using R for mapmaking is more flexible than using Excel, less expensive than
    using ArcGIS, and based on syntax you already know. It also lets you perform all
    of your data manipulation tasks with one tool and apply the principles of high-quality
    data visualization discussed in [Chapter 2](chapter2.xhtml). In this chapter,
    you’ll work with simple features of geospatial data and examine Madjid’s code
    to understand how he created this map. You’ll also learn where to find geospatial
    data and how to use it to make your own maps.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用R制作地图比使用Excel更灵活，比使用ArcGIS更便宜，而且基于你已经知道的语法。它还允许你使用一个工具完成所有数据操作任务，并应用[第二章](chapter2.xhtml)中讨论的高质量数据可视化原则。在本章中，你将处理地理空间数据的简单特征，并检查Madjid的代码，以了解他是如何制作这张地图的。你还将学习在哪里找到地理空间数据以及如何使用这些数据制作自己的地图。
- en: A Brief Primer on Geospatial Data
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地理空间数据简明入门
- en: 'You don’t need to be a GIS expert to make maps, but you do need to understand
    a few things about how geospatial data works, starting with its two main types:
    vector and raster. *Vector* data uses points, lines, and polygons to represent
    the world. *Raster* data, which often comes from digital photographs, ties each
    pixel in an image to a specific geographic location. Vector data tends to be easier
    to work with, and you’ll be using it exclusively in this chapter.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要成为GIS专家就能制作地图，但你需要了解一些关于地理空间数据的工作原理，首先是它的两种主要类型：矢量数据和栅格数据。*矢量*数据使用点、线和多边形来表示世界。*栅格*数据通常来自数字照片，它将图像中的每个像素与特定的地理位置关联。矢量数据通常更容易处理，你将在本章中专门使用它。
- en: 'In the past, working with geospatial data meant mastering competing standards,
    each of which required learning a different approach. Today, though, most people
    use the *simple features* model (often abbreviated as *sf*) for working with vector
    geospatial data, which is easier to understand. For example, to import simple
    features data about the state of Wyoming, enter the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，处理地理空间数据意味着要掌握不同的标准，每个标准都需要学习不同的方法。然而今天，大多数人使用*简单特征*模型（通常缩写为*sf*）来处理矢量地理空间数据，这种模型更易于理解。例如，要导入关于怀俄明州的简单特征数据，只需输入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And then you can look at the data like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以像这样查看数据：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output has two columns, one for the state name (NAME) and another called
    geometry. This data looks like the data frames you’ve seen before, aside from
    two major differences.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包含两列，一列是州名（NAME），另一列叫做geometry。除了两个主要区别外，这些数据看起来就像你之前见过的数据框。
- en: First, there are five lines of metadata above the data frame. At the top is
    a line stating that the data contains one feature and one field. A *feature* is
    a row of data, and a *field* is any column containing nonspatial data. Second,
    the simple features data contains geographical data in a variable called geometry.
    Because the geometry column must be present for a data frame to be geospatial
    data, it isn’t counted as a field. Let’s look at each part of this simple features
    data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数据框上方有五行元数据。最上面的一行说明数据包含一个特征和一个字段。*特征*是一行数据，*字段*是包含非空间数据的任何列。其次，简单特征数据包含一个名为geometry的地理数据变量。因为geometry列必须存在，才能将数据框视为地理空间数据，因此它不算作一个字段。让我们逐一看看这些简单特征数据的各个部分。
- en: The Geometry Type
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 几何类型
- en: 'The *geometry type* represents the shape of the geospatial data you’re working
    with and is typically shown in all caps. In this case, the relatively simple POLYGON
    type represents a single polygon. You can use ggplot to display this data by calling
    geom_sf(), a special geom designed to work with simple features data:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*几何类型*表示你正在处理的地理空间数据的形状，通常用大写字母表示。在这种情况下，相对简单的 POLYGON 类型表示一个单一的多边形。你可以通过调用
    geom_sf() 来使用 ggplot 显示这些数据，geom_sf() 是专为处理简单要素数据而设计的特殊几何：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Figure 4-1](chapter4.xhtml#fig4-1) shows the resulting map of Wyoming. It
    may not look like much, but I wasn’t the one who made Wyoming a nearly perfect
    rectangle!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-1](chapter4.xhtml#fig4-1)显示了怀俄明州的结果地图。它看起来可能不太复杂，但并不是我让怀俄明州几乎变成了一个完美的矩形！'
- en: '![](../images/fig4-1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-1.jpg)'
- en: 'Figure 4-1: A map of Wyoming generated using POLYGON simple features data'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-1：使用 POLYGON 简单要素数据生成的怀俄明州地图
- en: Other geometry types used in simple features data include POINT, to display
    elements such as a pin on a map that represents a single location. For example,
    the map in [Figure 4-2](chapter4.xhtml#fig4-2) uses POINT data to show a single
    electric vehicle charging station in Wyoming.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简单要素数据中使用的其他几何类型包括 POINT，用于显示例如地图上的一个标记，表示单一位置。例如，[图 4-2](chapter4.xhtml#fig4-2)中的地图使用
    POINT 数据来显示怀俄明州的一个电动汽车充电站。
- en: '![](../images/fig4-2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-2.jpg)'
- en: 'Figure 4-2: A map of Wyoming containing POINT simple features data'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2：包含 POINT 简单要素数据的怀俄明州地图
- en: The LINESTRING geometry type is for a set of points that can be connected with
    lines and is often used to represent roads. [Figure 4-3](chapter4.xhtml#fig4-3)
    shows a map that uses LINESTRING data to represent a section of US Highway 30
    that runs through Wyoming.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: LINESTRING 几何类型用于一组可以用线连接的点，通常用于表示道路。[图 4-3](chapter4.xhtml#fig4-3)显示了一张地图，使用
    LINESTRING 数据表示穿过怀俄明州的美国 30 号公路的一段。
- en: '![](../images/fig4-3.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-3.jpg)'
- en: 'Figure 4-3: A road represented using LINESTRING simple features data'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-3：使用 LINESTRING 简单要素数据表示的道路
- en: Each of these geometry types has a MULTI variation (MULTIPOINT, MULTI LINESTRING,
    and MULTIPOLYGON) that combines multiple instances of the type in one row of data.
    For example, [Figure 4-4](chapter4.xhtml#fig4-4) uses MULTIPOINT data to show
    all electric vehicle charging stations in Wyoming.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每种几何类型都有一个 MULTI 变体（MULTIPOINT、MULTI LINESTRING 和 MULTIPOLYGON），它将该类型的多个实例组合在一行数据中。例如，[图
    4-4](chapter4.xhtml#fig4-4)使用 MULTIPOINT 数据来显示怀俄明州的所有电动汽车充电站。
- en: '![](../images/fig4-4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-4.jpg)'
- en: 'Figure 4-4: Using MULTIPOINT data to represent multiple electric vehicle charging
    stations'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-4：使用 MULTIPOINT 数据表示多个电动汽车充电站
- en: Likewise, you can use MULTILINESTRING data to show not just one road but all
    major roads in Wyoming ([Figure 4-5](chapter4.xhtml#fig4-5)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以使用 MULTILINESTRING 数据不仅显示一条道路，而是显示怀俄明州的所有主要道路（[图 4-5](chapter4.xhtml#fig4-5)）。
- en: '![](../images/fig4-5.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-5.jpg)'
- en: 'Figure 4-5: Using MULTILINESTRING data to represent several roads'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-5：使用 MULTILINESTRING 数据表示几条道路
- en: 'Finally, you could use MULTIPOLYGON data, for example, to depict a state made
    up of multiple polygons. The following data represents the 23 counties in the
    state of Wyoming:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用 MULTIPOLYGON 数据，例如，表示一个由多个多边形组成的州。以下数据表示怀俄明州的 23 个县：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see on the second line, the geometry type of this data is MULTIPOLYGON.
    In addition, the repeated MULTIPOLYGON text in the geometry column indicates that
    each row contains a shape of type MULTIPOLYGON. [Figure 4-6](chapter4.xhtml#fig4-6)
    shows a map made with this data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如第二行所示，这些数据的几何类型是 MULTIPOLYGON。此外，几何列中重复出现的 MULTIPOLYGON 文本表明每行数据都包含一个 MULTIPOLYGON
    类型的形状。[图 4-6](chapter4.xhtml#fig4-6)展示了使用这些数据制作的地图。
- en: '![](../images/fig4-6.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-6.jpg)'
- en: 'Figure 4-6: A map of Wyoming counties'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-6：怀俄明州各县的地图
- en: Notice that the map is made up entirely of polygons.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，地图完全由多边形组成。
- en: The Dimensions
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 维度
- en: 'Next, the geospatial data frame contains the data’s *dimensions*, or the type
    of geospatial data you’re working with. In the Wyoming example, it looks like
    Dimension: XY, meaning the data is two-dimensional, as in the case of all the
    geospatial data used in this chapter. There are two other dimensions (Z and M)
    that you’ll see much more rarely. I’ll leave them for you to investigate further.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，地理空间数据框包含数据的*维度*，即你正在处理的地理空间数据类型。在怀俄明州的例子中，它看起来像是维度：XY，意味着数据是二维的，就像本章中使用的所有地理空间数据一样。还有另外两个维度（Z
    和 M），你会更少见到它们。我将留给你进一步探索。
- en: The Bounding Box
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 边界框
- en: 'The penultimate element in the metadata is the *bounding box*, which represents
    the smallest area in which you can fit all of your geospatial data. For the wyoming
    object, it looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据倒数第二个元素是*边界框*，它表示能够容纳所有地理空间数据的最小区域。对于 wyoming 对象，它如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The ymin value of 40.99475 and ymax value of 45.0059 represent the lowest and
    highest latitudes, respectively, that the state’s polygon can fit into. The x-values
    do the same for the longitude. Bounding boxes are calculated automatically, and
    typically you don’t have to worry about altering them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ymin 值 40.99475 和 ymax 值 45.0059 分别代表该州多边形可以适配的最低和最高纬度。x 值则用于表示经度的相应范围。边界框是自动计算的，通常你不需要担心修改它们。
- en: The Coordinate Reference System
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 坐标参考系统
- en: The last piece of metadata specifies the *coordinate reference system* used
    to project the data when it’s plotted. The challenge with representing any geospatial
    data is that you’re displaying information about the three-dimensional Earth on
    a two-dimensional map. Doing so requires choosing a coordinate reference system
    that determines what type of correspondence, or *projection*, to use when making
    the map.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项元数据指定了*坐标参考系统*，该系统用于在绘制数据时对其进行投影。表示任何地理空间数据的挑战在于，你需要在二维地图上展示关于三维地球的信息。这样做需要选择一个坐标参考系统，它决定了在绘制地图时使用哪种类型的对应关系或*投影*。
- en: 'The data for the Wyoming counties map includes the line Geodetic CRS: WGS 84,
    indicating the use of a coordinate reference system known as *WGS84*. To see a
    different projection, check out the same map using the *Albers equal-area conic
    convenience projection*. While Wyoming looked perfectly horizontal in [Figure
    4-6](chapter4.xhtml#fig4-6), the version in [Figure 4-7](chapter4.xhtml#fig4-7)
    appears to be tilted.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '怀俄明州县地图的数据包括行 Geodetic CRS: WGS 84，表示使用了名为*WGS84*的坐标参考系统。要查看不同的投影，可以查看使用*Albers
    等面积圆锥投影*的相同地图。虽然在 [图 4-6](chapter4.xhtml#fig4-6) 中，怀俄明州看起来是完全水平的，但在 [图 4-7](chapter4.xhtml#fig4-7)
    中，它似乎倾斜了。'
- en: '![](../images/fig4-7.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-7.jpg)'
- en: 'Figure 4-7: A map of Wyoming counties using the Albers equal-area conic convenience
    projection'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：使用 Albers 等面积圆锥投影制作的怀俄明州县地图
- en: 'If you’re wondering how to change projections when making maps of your own,
    fear not: you’ll see how to do this when we look at Madjid’s map in the next section.
    And if you want to know how to choose appropriate projections for your maps, check
    out “Using Appropriate Projections” on [page 81](#pg_81).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道如何在制作自己的地图时更改投影，请不要担心：当我们在下一节查看 Madjid 的地图时，你将看到如何操作。如果你想了解如何为地图选择合适的投影，可以查看“使用合适的投影”章节中的
    [第 81 页](#pg_81)。
- en: The geometry Column
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 几何列
- en: 'In addition to the metadata, simple features data differs from traditional
    data frames in another respect: its geometry column. As you might have guessed
    from the name, this column holds the data needed to draw the maps.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了元数据，简单要素数据在另一个方面与传统数据框有所不同：它的几何列。如你所猜测的那样，这一列保存了绘制地图所需的数据。
- en: To understand how this works, consider the connect-the-dots drawings you probably
    completed as a kid. As you added lines to connect one point to the next, the subject
    of your drawing became clearer. The geometry column is similar. It has a set of
    numbers, each of which corresponds to a point. If you’re using LINESTRING/MULTILINESTRING
    or POLYGON/MULTIPOLYGON simple features data, ggplot uses the numbers in the geometry
    column to draw each point and then adds lines to connect the points. If you’re
    using POINT/MULTIPOINT data, it draws the points but doesn’t connect them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一点，想象一下你小时候可能完成过的连点成图的绘画活动。当你将线条连接一个点到下一个点时，你的画作主题变得更加清晰。几何列也类似。它包含一组数字，每个数字对应一个点。如果你使用的是
    LINESTRING/MULTILINESTRING 或 POLYGON/MULTIPOLYGON 简单要素数据，ggplot 会使用几何列中的数字绘制每个点，并添加线条连接这些点。如果你使用的是
    POINT/MULTIPOINT 数据，它会绘制这些点，但不会连接它们。
- en: Once again, thanks to R, you never have to worry about these details or look
    in any depth at the geometry column.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢 R，你不需要担心这些细节或深入查看几何列。
- en: Re-creating the COVID-19 Map
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重建 COVID-19 地图
- en: Now that you understand the basics of geospatial data, let’s walk through the
    code Madjid used to make his COVID-19 map. Shown in [Figure 4-8](chapter4.xhtml#fig4-8),
    it makes use of the geometry types, dimensions, bounding boxes, projections, and
    the geometry column just discussed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你理解了地理空间数据的基础知识，让我们一起来看看Madjid用来制作COVID-19地图的代码。图[4-8](chapter4.xhtml#fig4-8)中展示了该地图，利用了几何类型、维度、边界框、投影和刚才讨论过的几何列。
- en: '![](../images/fig4-8.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-8.jpg)'
- en: 'Figure 4-8: Abdoul Madjid’s map of COVID-19 in the United States in 2021'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-8：Abdoul Madjid的2021年美国COVID-19地图
- en: 'I’ve made some small modifications to the code to make the final map fit on
    the page. You’ll begin by loading a few packages:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我对代码做了一些小修改，使得最终的地图能够适应页面。你将从加载一些包开始：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The albersusa package will give you access to geospatial data. Install it as
    follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: albersusa包将为你提供地理空间数据的访问权限。按以下步骤安装它：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can install all of the other packages using the standard install .packages()
    code. You’ll use the tidyverse to import data, manipulate it, and plot it with
    ggplot. The sf package will enable you to change the coordinate reference system
    and use an appropriate projection for the data. The zoo package has functions
    for calculating rolling averages, and the colorspace package gives you a color
    scale that highlights the data well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用标准的install.packages()代码安装所有其他包。你将使用tidyverse导入数据、操作数据并通过ggplot绘制图表。sf包将帮助你更改坐标参考系统，并使用适合数据的投影。zoo包有计算滚动平均数的函数，而colorspace包则提供了一个能够突出显示数据的颜色比例。
- en: Importing the Data
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入数据
- en: 'Next, you’ll import the data you need: COVID-19 rates by state over time, state
    populations, and geospatial information. Madjid imported each of these pieces
    of data separately and then merged them, and you’ll do the same.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将导入所需的数据：按州的COVID-19病例率、州人口以及地理空间信息。Madjid将这些数据分别导入，然后将它们合并，你也将按此方式操作。
- en: 'The COVID-19 data comes directly from the *New York Times*, which publishes
    daily case rates by state as a CSV file on its GitHub account. To import it, enter
    the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: COVID-19数据直接来自*纽约时报*，该报通过其GitHub账户每天发布按州分类的病例率CSV文件。要导入该数据，请输入以下内容：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Federal Information Processing Standards (FIPS) are numeric codes used to represent
    states, but you’ll reference states by their names instead, so the line select(-fips)
    drops the fips variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦信息处理标准（FIPS）是用于表示州的数字代码，但你将通过州的名称来引用州，因此这一行选择(-fips)会去掉fips变量。
- en: 'Looking at this data, you can see the arrival of the first COVID-19 cases in
    the United States in January 2020:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这些数据，你可以看到2020年1月美国首次出现COVID-19病例：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Madjid’s map shows per capita rates (the rates per 100,000 people) rather than
    absolute rates (the rates without consideration for a state’s population). So,
    to re-create his maps, you also need to obtain data on each state’s population.
    Download this data as a CSV as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Madjid的地图显示的是人均率（每10万人口的比率），而不是绝对率（没有考虑州人口的比率）。因此，要重建他的地图，你还需要获得每个州的人口数据。按照以下步骤将数据下载为CSV格式：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This code imports the data, keeps the State and Pop (population) variables,
    and saves the data as an object called usa_states. Here’s what usa_states looks
    like:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码导入数据，保留州和人口（Pop）变量，并将数据保存为名为usa_states的对象。usa_states的样子如下：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, import the geospatial data and save it as an object called usa_states_geom
    like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，导入地理空间数据并将其保存为名为usa_states_geom的对象，如下所示：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The usa_sf() function from the albersusa package gives you simple features data
    for all US states. Conveniently, it places Alaska and Hawaii at a position and
    scale that make them easy to see. This data includes multiple variables, but because
    you need only the state names, this code keeps just the name variable.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 来自albersusa包的usa_sf()函数为你提供所有美国州的简单要素数据。方便的是，它将阿拉斯加和夏威夷放置在易于查看的位置和比例。这些数据包含多个变量，但由于你只需要州名，代码仅保留了州名变量。
- en: The st_transform() function from the sf package changes the coordinate reference
    system. The one used here comes from the us_laea_proj object in the albersusa
    package. This is the Albers equal-area conic convenience projection you used earlier
    to change the appearance of the Wyoming counties map.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 来自sf包的st_transform()函数用于更改坐标参考系统。这里使用的参考系统来自albersusa包中的us_laea_proj对象。这是你之前用来改变怀俄明州县地图外观的阿尔伯斯等面积圆锥投影。
- en: Calculating Daily COVID-19 Cases
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计算每日COVID-19病例
- en: 'The covid_data data frame lists cumulative COVID-19 cases by state, but not
    the number of cases per day, so the next step is to calculate that number:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`covid_data`数据框列出了按州统计的累计COVID-19病例数，但没有按日统计病例数，所以下一步是计算每日病例数：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The group_by() function calculates totals for each state, then creates a new
    variable called pd_cases, which represents the number of cases in the previous
    day (the lag() function is used to assign data to this variable) ❶. Some days
    don’t have case counts for the previous day, so set this value to 0 using the
    replace_na() function ❷.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_by()`函数按州计算总数，然后创建一个名为`pd_cases`的新变量，表示前一天的病例数（使用`lag()`函数将数据分配给此变量）❶。某些天没有前一天的病例数，因此使用`replace_na()`函数将该值设为0❷。'
- en: 'Next, this code creates a new variable called daily_cases ❸. To set the value
    of this variable, use the case_when() function to create a condition: if the cases
    variable (which holds the cases on that day) is greater than the pd_cases variable
    (which holds cases from one day prior), then daily_cases is equal to cases minus
    pd_cases. Otherwise, you set daily_cases to be equal to 0.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这段代码创建了一个名为`daily_cases`的新变量❸。要设置这个变量的值，使用`case_when()`函数创建一个条件：如果`cases`变量（表示当天的病例数）大于`pd_cases`变量（表示前一天的病例数），那么`daily_cases`等于`cases`减去`pd_cases`。否则，`daily_cases`设置为0。
- en: Finally, because you grouped the data by state at the beginning of the code,
    now you need to remove this grouping using the ungroup() function before arranging
    the data by state and date ❹.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为你在代码开始时按州对数据进行了分组，现在需要使用`ungroup()`函数去除这个分组，然后再按州和日期对数据进行排序❹。
- en: 'Here’s the resulting covid_cases data frame:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果数据框`covid_cases`：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the next step, you’ll make use of the new daily_cases variable.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，你将利用新的`daily_cases`变量。
- en: Calculating Incidence Rates
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计算发病率
- en: 'You’re not quite done calculating values. The data that Madjid used to make
    his map didn’t include daily case counts. Instead, it contained a five-day rolling
    average of cases per 100,000 people. A *rolling average* is the average case rate
    in a certain time period. Quirks of reporting (for example, not reporting on weekends
    but instead rolling Saturday and Sunday cases into Monday) can make the value
    for any single day less reliable. Using a rolling average smooths out these quirks.
    Generate this data as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你还没有完全计算出所有的值。Madjid用于制作地图的数据没有包括每日新增病例数。相反，它包含的是每10万人中五天滚动平均的病例数。*滚动平均*是某一时间段内的平均病例率。报告的特殊情况（例如，周末没有报告，而是将周六和周日的病例合并到周一）可能会导致某一天的数值不太可靠。使用滚动平均可以平滑这些特殊情况。按如下方式生成这些数据：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code creates a new data frame called covid_cases_rm (where *rm* stands
    for rolling mean). The first step in its creation is to use the rollmean() function
    from the zoo package to create a roll_cases variable, which holds the average
    number of cases in the five-day period surrounding a single date. The k argument
    is the number of days for which you want to calculate the rolling average (5,
    in this case), and the fill argument determines what happens in cases like the
    first day, where you can’t calculate a five-day rolling mean because there are
    no days prior to this day (Madjid set these values to NA).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个名为`covid_cases_rm`的新数据框（其中*rm*代表滚动均值）。它创建的第一步是使用`zoo`包中的`rollmean()`函数来创建一个`roll_cases`变量，表示围绕单一日期的五天期间的平均病例数。`k`参数是你希望计算滚动平均的天数（在这里是5天），`fill`参数确定在像第一天这样没有先前几天的数据时会发生什么（Madjid将这些值设为NA）。
- en: 'After calculating roll_cases, you need to calculate per capita case rates.
    To do this, you need population data, so join the population data from the usa_states
    data frame with the covid_cases data like so:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 计算了`roll_cases`之后，你需要计算人均病例率。为此，你需要人口数据，因此将`usa_states`数据框中的人口数据与`covid_cases`数据进行连接，如下所示：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To drop rows with missing population data, you call the drop_na() function with
    the Pop variable as an argument. In practice, this removes several US territories
    (American Samoa, Guam, the Northern Mariana Islands, and the Virgin Islands).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除缺失人口数据的行，你需要调用`drop_na()`函数，并将Pop变量作为参数。在实际操作中，这会删除几个美国领土（美属萨摩亚、关岛、北马里亚纳群岛和美属维尔京群岛）。
- en: 'Next, you create a per capita case rate variable called incidence_rate by multiplying
    the roll_cases variable by 100,000 and then dividing it by the population of each
    state:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你通过将`roll_cases`变量乘以100,000并除以每个州的人口来创建一个名为`incidence_rate`的按人均病例率变量：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Rather than keeping raw values (for example, on June 29, 2021, Florida had
    a rate of 57.77737 cases per 100,000 people), you use the cut() function to convert
    the values into categories: values of >0 (greater than zero), values of >5 (greater
    than five), and values of >50 (greater than 50).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与其保留原始值（例如，2021年6月29日，佛罗里达州每10万人有57.77737例病例），不如使用cut()函数将数值转换为类别：大于0（大于零）的值，大于5（大于五）的值，以及大于50（大于五十）的值。
- en: 'The last step is to filter the data so it includes only 2021 data (the only
    year depicted in Madjid’s map) and then select just the variables (state, date,
    and incidence_rate) you’ll need to create the map:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是过滤数据，只保留2021年的数据（这是Madjid地图中展示的唯一年份），然后选择创建地图所需的变量（州、省、日期和发病率）：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here’s the final covid_cases_rm data frame:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的covid_cases_rm数据框：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You now have a data frame that you can combine with your geospatial data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有一个可以与地理空间数据合并的数据框。
- en: Adding Geospatial Data
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加地理空间数据
- en: 'You’ve used two of the three data sources (COVID-19 case data and state population
    data) to create the covid_cases_rm data frame you’ll need to make the map. Now
    it’s time to use the third data source: the geospatial data you saved as usa_states_geom.
    Simple features data allows you to merge regular data frames and geospatial data
    (another point in its favor):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用了三个数据源中的两个（COVID-19病例数据和州人口数据），创建了covid_cases_rm数据框，接下来需要使用第三个数据源：你保存的地理空间数据usa_states_geom。简单特征数据允许你将常规数据框与地理空间数据合并（这也是它的优势之一）：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This code merges the covid_cases_rm data frame into the geospatial data, matching
    the name variable from usa_states_geom to the state variable in covid_cases_rm.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将covid_cases_rm数据框与地理空间数据合并，匹配usa_states_geom中的name变量与covid_cases_rm中的state变量。
- en: 'Next, you create a new variable called fancy_date to format the date nicely
    (for example, Jan. 01 instead of 2021-01-01):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个新变量fancy_date，用于美化日期格式（例如，使用“Jan. 01”而不是“2021-01-01”）：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The format() function does the formatting, while the fct_inorder() function
    makes the fancy_date variable sort data by date (rather than, say, alphabetically,
    which would put August before January). Last, the relocate() function puts the
    fancy_date column next to the date column.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: format()函数负责格式化，而fct_inorder()函数使得fancy_date变量按照日期排序数据（而不是按字母顺序排列，这样8月就不会排在1月之前）。最后，relocate()函数将fancy_date列移到日期列旁边。
- en: 'Save this data frame as usa_states_geom_covid and take a look at the result:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将此数据框保存为usa_states_geom_covid，并查看结果：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can see the metadata and geometry columns discussed earlier in the chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到之前章节中提到的元数据和几何列。
- en: Making the Map
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 制作地图
- en: It took a lot of work to end up with the surprisingly simple usa_states_geom_covid
    data frame. While the data may be simple, the code Madjid used to make his map
    is quite complex. This section walks you through it in pieces.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 花了很多工夫才得到看似简单的usa_states_geom_covid数据框。虽然数据看起来简单，但Madjid用来制作地图的代码相当复杂。本节将分步骤向你讲解这些代码。
- en: 'The final map is actually multiple maps, one for each day in 2021\. Combining
    365 days makes for a large final product, so instead of showing the code for every
    single day, filter the usa_states_geom_covid to show just the first six days in
    January:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最终地图实际上是多个地图，每个地图代表2021年中的一天。将365天的数据合并会产生一个庞大的最终产品，因此，代码不会展示每一天，而是通过过滤usa_states_geom_covid来只显示1月的前六天：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save the result as a data frame called usa_states_geom_covid_six_days. Here’s
    what this data looks like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果保存为一个名为usa_states_geom_covid_six_days的数据框。以下是该数据的样子：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Madjid’s map is giant, as it includes all 365 days. The size of a few elements
    have been changed so that they fit in this book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Madjid的地图非常庞大，因为它包含了所有365天的数据。为了适应本书的排版，某些元素的大小有所调整。
- en: Generating the Basic Map
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成基本地图
- en: 'With your six days of data, you’re ready to make some maps. Madjid’s mapmaking
    code has two main parts: generating the basic map, then tweaking its appearance.
    First, you’ll revisit the three lines of code used to make the Wyoming maps, with
    some adornments to improve the quality of the visualization:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有了六天的数据，你已经准备好制作地图。Madjid的地图制作代码分为两大部分：生成基本地图，然后调整其外观。首先，你将回顾用于制作怀俄明州地图的三行代码，并进行一些装饰，以提高可视化效果：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The geom_sf() function plots the geospatial data, modifying a couple of arguments:
    size = .05 makes the state borders less prominent and color = "grey55" sets them
    to a medium-gray color. Then, the facet_wrap() function is used for the faceting
    (that is, to make one map for each day). The vars(fancy_date) code specifies that
    the fancy_date variable should be used for the faceted maps, and strip.position
    = "bottom" moves the labels Jan. 01, Jan. 02, and so on to the bottom of the maps.
    [Figure 4-9](chapter4.xhtml#fig4-9) shows the result.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: geom_sf()函数绘制地理空间数据，修改了几个参数：size = .05使州边界不那么突出，color = "grey55"将它们设置为中灰色。然后，facet_wrap()函数用于分面（即为每一天制作一张地图）。vars(fancy_date)代码指定使用fancy_date变量作为分面地图的依据，strip.position
    = "bottom"将标签Jan. 01、Jan. 02等移到地图底部。[图4-9](chapter4.xhtml#fig4-9)展示了结果。
- en: '![](../images/fig4-9.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-9.jpg)'
- en: 'Figure 4-9: A map showing the incidence rate of COVID-19 for the first six
    days of 2021'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-9：展示2021年前六天COVID-19发病率的地图
- en: Having generated the basic map, now you’ll make it look good.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 生成了基本地图后，接下来你将让它看起来更加美观。
- en: Applying Data Visualization Principles
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 应用数据可视化原则
- en: 'From now on, all of the code that Madjid uses is to improve the appearance
    of the maps. Many of the tweaks shown here should be familiar if you’ve read [Chapter
    2](chapter2.xhtml), highlighting a benefit of making maps with ggplot: you can
    apply the same data visualization principles you learned about when making charts.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，Madjid使用的所有代码都用于改善地图的外观。如果你阅读过[第二章](chapter2.xhtml)，那么这些调整应该会让你感到熟悉，这突显了使用ggplot制作地图的一个好处：你可以应用制作图表时学到的数据可视化原则。
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The scale_fill_discrete_sequential() function, from the colorspace package,
    sets the color scale. This code uses the rocket palette (the same palette that
    Cédric Scherer and Georgios Karamanis used in [Chapter 2](chapter2.xhtml)) and
    changes the legend title to “COVID-19 INCIDENCE RATE.” The guide_legend() function
    adjusts the position, alignment, and text properties of the title. The code then
    puts the colored squares in one row, adjusts their height and width, and tweaks
    the text properties of the labels (>0, >5, and so on).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 来自colorspace包的scale_fill_discrete_sequential()函数设置颜色比例。该代码使用火箭调色板（与Cédric Scherer和Georgios
    Karamanis在[第二章](chapter2.xhtml)中使用的调色板相同），并将图例标题更改为“COVID-19 发病率”。guide_legend()函数调整标题的位置、对齐方式和文本属性。然后，代码将彩色方块放在一行中，调整它们的高度和宽度，并调整标签（>0、>5等）的文本属性。
- en: Next, the labs() function adds a title and caption. Following theme _minimal(),
    the theme() function makes some design tweaks, including setting the font and
    text color; making the title and caption bold; and adjusting their size, alignment,
    and margins. The code then adjusts the size of the strip text (Jan. 01, Jan. 02,
    and so on) and makes it bold, puts the legend at the top of the maps, and adds
    a bit of spacing around it. Grid lines, as well as the longitude and latitude
    lines, are removed, and then the entire visualization gets a bit of padding and
    a light gray background.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，labs()函数添加标题和说明。遵循主题_minimal()，theme()函数进行一些设计调整，包括设置字体和文本颜色；使标题和说明加粗；并调整它们的大小、对齐方式和边距。然后，代码调整条形文本（如Jan.
    01、Jan. 02等）的大小并加粗，图例被放置在地图顶部，并增加了一些间距。网格线、经纬度线被移除，接着整个可视化区域增加了一些内边距，并设置了浅灰色背景。
- en: There you have it! [Figure 4-10](chapter4.xhtml#fig4-10) shows the re-creation
    of his COVID-19 map.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！[图4-10](chapter4.xhtml#fig4-10)展示了他重建的COVID-19地图。
- en: '![](../images/fig4-10.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-10.jpg)'
- en: 'Figure 4-10: The re-creation of Abdoul Madjid’s map'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-10：Abdoul Madjid地图的重建
- en: From data import and data cleaning to analysis and visualization, you’ve seen
    how Madjid made a beautiful map in R.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据导入、数据清理到分析和可视化，你已经看到Madjid是如何在R中制作出一张漂亮的地图的。
- en: Making Your Own Maps
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作自己的地图
- en: You may now be wondering, *Okay, great, but how do I actually make my own maps?*
    In this section you’ll learn where you can find geospatial data, how to choose
    a projection, and how to prepare the data for mapping.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能在想，*好吧，太好了，但我到底该如何制作自己的地图呢？* 在这一节中，你将学习如何找到地理空间数据，如何选择投影，并且如何准备数据进行绘制。
- en: There are two ways to access simple features geospatial data. The first is to
    import raw data, and the second is to access it with R functions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以访问简单特征的地理空间数据。第一种是导入原始数据，第二种是通过R函数访问它。
- en: Importing Raw Data
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入原始数据
- en: Geospatial data can come in various formats. While ESRI shapefiles (with the
    *.shp* extension) are the most common, you might also encounter GeoJSON files
    (*.geojson*) like the ones we used in the Wyoming example at the beginning of
    this chapter, KML files (*.kml*), and others. [Chapter 8](chapter8.xhtml) of *Geocomputation
    with R* by Robin Lovelace, Jakub Nowosad, and Jannes Muenchow discusses this range
    of formats.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间数据可以有多种格式。尽管 ESRI shapefile（带 *.shp* 扩展名）是最常见的格式，但你也可能遇到 GeoJSON 文件（*.geojson*），如我们在本章开头的怀俄明州示例中使用的，KML
    文件（*.kml*）等。Robin Lovelace、Jakub Nowosad 和 Jannes Muenchow 所著的 *Geocomputation
    with R* 第 8 章（[第 8 章](chapter8.xhtml)）讨论了这些格式。
- en: 'The good news is that a single function can read pretty much any type of geospatial
    data: read_sf() from the sf package. Say you’ve downloaded geospatial data about
    US state boundaries from the website *geojson.xyz* in GeoJSON format, then saved
    it in the *data* folder as *states.geojson*. To import this data, use the read_sf()
    function like so:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，一个函数几乎可以读取任何类型的地理空间数据：sf 包中的 read_sf()。假设你从 *geojson.xyz* 网站下载了关于美国州边界的
    GeoJSON 格式的地理空间数据，并将其保存在 *data* 文件夹中，命名为 *states.geojson*。要导入这些数据，可以使用 read_sf()
    函数，像这样：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The dsn argument (which stands for *data source name*) tells read_sf() where
    to find the file. You save the data as the object us_states.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: dsn 参数（即 *数据源名称*）告诉 read_sf() 从哪里查找文件。你将数据保存为对象 us_states。
- en: Accessing Geospatial Data with R Functions
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 R 函数访问地理空间数据
- en: 'Sometimes you’ll have to work with raw data in this way, but not always. That’s
    because certain R packages provide functions for accessing geospatial data. Madjid
    used the usa_sf() function from the albersusa package to acquire his data. Another
    package for accessing geospatial data related to the United States, tigris, has
    a number of well-named functions for different types of data. For example, load
    the tigris package and run the states() function like so:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要以这种方式处理原始数据，但并非总是如此。这是因为某些 R 包提供了访问地理空间数据的函数。Madjid 使用了 albersusa 包中的
    usa_sf() 函数来获取数据。另一个访问与美国相关的地理空间数据的包 tigris，拥有许多为不同数据类型命名的函数。例如，加载 tigris 包并运行
    states() 函数，如下所示：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The cb = TRUE argument opts out of using the most detailed shapefile and sets
    the resolution to a more manageable 20m (1:20 million). Without these changes,
    the resulting shapefile would be large and slow to work with. Setting progress_bar
    = FALSE hides the messages that tigris generates as it loads data. The result
    is saved as states_tigris. The tigris package has functions to get geospatial
    data about counties, census tracts, roads, and more.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: cb = TRUE 参数让你放弃使用最详细的 shapefile，并将分辨率设置为更易管理的 20m（1:2000万）。如果不做这些修改，生成的 shapefile
    会很大，且处理起来很慢。设置 progress_bar = FALSE 可以隐藏 tigris 在加载数据时生成的消息。结果会保存为 states_tigris。tigris
    包有函数可以获取关于县、普查区、道路等的地理空间数据。
- en: 'If you’re looking for data outside the United States, the rnaturalearth package
    provides functions for importing geospatial data from across the world. For example,
    use ne_countries() to retrieve geospatial data about various countries:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要寻找美国以外的数据，rnaturalearth 包提供了从全球导入地理空间数据的函数。例如，使用 ne_countries() 来获取关于各个国家的地理空间数据：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This code uses two arguments: returnclass = "sf" to get data in simple features
    format, and continent = "Africa" to get only countries on the African continent.
    If you save the result to an object called africa_countries, you can plot the
    data on a map as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了两个参数：returnclass = "sf" 用于获取简单特征格式的数据，continent = "Africa" 用于只获取非洲大陆上的国家。如果你将结果保存为名为
    africa_countries 的对象，你可以像下面这样在地图上绘制数据：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[Figure 4-11](chapter4.xhtml#fig4-11) shows the resulting map.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-11](chapter4.xhtml#fig4-11) 显示了生成的地图。'
- en: '![](../images/fig4-11.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-11.jpg)'
- en: 'Figure 4-11: A map of Africa made with data from the rnaturalearth package'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-11：使用 rnaturalearth 包的数据制作的非洲地图
- en: If you can’t find an appropriate package, you can always fall back on using
    read_sf() from the sf package.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找不到合适的包，始终可以退而求其次，使用 sf 包中的 read_sf()。
- en: Using Appropriate Projections
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用适当的投影
- en: Once you have access to geospatial data, you need to decide which projection
    to use. If you’re looking for a simple answer to this question, you’ll be disappointed.
    As *Geocomputation with R* puts it, “The question of *which* CRS [to use] is tricky,
    and there is rarely a ‘right’ answer.”
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你访问了地理空间数据，你需要决定使用哪种投影。如果你期望有一个简单的答案，可能会失望。正如 *Geocomputation with R* 所说：“*哪个*
    CRS [使用什么坐标参考系统] 是个棘手的问题，通常没有一个‘正确’的答案。”
- en: 'If you’re overwhelmed by the task of choosing a projection, the crsuggest package
    from Kyle Walker can give you ideas. Its suggest_top_crs() function returns a
    coordinate reference system that is well suited for your data. Load crsuggest
    and try it out on your africa_countries data:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被选择投影的任务压倒，可以使用Kyle Walker的crsuggest包来获得灵感。它的`suggest_top_crs()`函数返回一个非常适合你的数据的坐标参考系统。加载crsuggest并尝试在你的africa_countries数据上使用它：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The suggest_top_crs() function should return projection number 28232. Pass
    this value to the st_transform() function to change the projection before you
    plot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`suggest_top_crs()`函数应该返回投影编号28232。将该值传递给`st_transform()`函数，在绘图之前更改投影：'
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When run, this code generates the map in [Figure 4-12](chapter4.xhtml#fig4-12).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，此代码生成了[图4-12](chapter4.xhtml#fig4-12)中的地图。
- en: '![](../images/fig4-12.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-12.jpg)'
- en: 'Figure 4-12: A map of Africa made with projection number 28232'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-12：使用投影编号28232制作的非洲地图
- en: As you can see, you’ve successfully mapped Africa with a different projection.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你已成功使用不同的投影绘制了非洲地图。
- en: Wrangling Geospatial Data
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 地理空间数据整理
- en: 'The ability to merge traditional data frames with geospatial data is a huge
    benefit of working with simple features data. Remember that for his COVID-19 map,
    Madjid analyzed traditional data frames before merging them with geospatial data.
    But because simple features data acts just like traditional data frames, you can
    just as easily apply the data-wrangling and analysis functions from the tidyverse
    directly to a simple features object. To see how this works, revisit the africa_countries
    simple features data and select two variables (name and pop_est) to see the name
    and population of the countries:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将传统数据框与地理空间数据合并的能力是处理简单特征数据的一个巨大优势。记住，在制作COVID-19地图时，Madjid在将传统数据框与地理空间数据合并之前，先对传统数据框进行了分析。但因为简单特征数据就像传统数据框一样工作，所以你可以直接将tidyverse的数据整理和分析函数应用到简单特征对象上。为了了解这一点，请重新访问africa_countries简单特征数据，并选择两个变量（name和pop_est），查看国家的名称和人口：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output looks like the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Say you want to make a map showing which African countries have populations
    larger than 20 million. First, you’ll need to calculate this value for each country.
    To do so, use the mutate() and if_else() functions, which will return TRUE if
    a country’s population is over 20 million and FALSE otherwise, and then store
    the result in a variable called population_above_20_million:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想制作一张显示哪些非洲国家人口超过2000万的地图。首先，你需要为每个国家计算这个值。为此，使用`mutate()`和`if_else()`函数，它们会返回TRUE（如果国家人口超过2000万）或FALSE（否则），然后将结果存储在名为population_above_20_million的变量中：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can then take this code and pipe it into ggplot, setting the fill aesthetic
    property to be equal to population_above_20_million:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将此代码传递到ggplot中，将填充美学属性设置为population_above_20_million：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This code generates the map shown in [Figure 4-13](chapter4.xhtml#fig4-13).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成了[图4-13](chapter4.xhtml#fig4-13)中显示的地图。
- en: '![](../images/fig4-13.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig4-13.jpg)'
- en: 'Figure 4-13: A map of Africa highlighting countries with populations above
    20 million people'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-13：一张突出显示人口超过2000万的非洲国家的地图
- en: 'This is a basic example of the data wrangling and analysis you can perform
    on simple features data. The larger lesson is this: any skill you’ve developed
    for working with data in R will serve you well when working with geospatial data.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以在简单特征数据上执行数据整理和分析的一个基本示例。更大的启示是：你在R中开发的任何数据处理技能，都将在处理地理空间数据时派上用场。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this short romp through the world of mapmaking in R, you learned the basics
    of simple features geospatial data, reviewed how Abdoul Madjid applied this knowledge
    to make his map, explored how to get your own geospatial data, and saw how to
    project it appropriately to make your own maps.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次简短的R地图制作之旅中，你学习了简单特征地理空间数据的基础知识，回顾了Abdoul Madjid如何运用这些知识制作他的地图，探索了如何获取自己的地理空间数据，并看到了如何适当地投影它们以制作你自己的地图。
- en: R may very well be the best tool for making maps. It also lets you use the skills
    you’ve developed for working with traditional data frames and the ggplot code
    to make your visualizations look great. After all, Madjid isn’t a GIS expert,
    but he combined a basic understanding of geospatial data, fundamental R skills,
    and knowledge of data visualization principles to make a beautiful map. Now it’s
    your turn to do the same.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kieran Healy, “Draw Maps,” in *Data Visualization: A Practical Introduction*
    (Princeton, NJ: Princeton University Press, 2018), *[https://socviz.co](https://socviz.co)*.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Andrew Heiss, “Lessons on Space from Data Visualization: Use R, ggplot2, and
    the Principles of Graphic Design to Create Beautiful and Truthful Visualizations
    of Data,” online course, last updated July 11, 2022, *[https://datavizs22.classes.andrewheiss.com/content/12-content/](https://datavizs22.classes.andrewheiss.com/content/12-content/)*.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Robin Lovelace, Jakub Nowosad, and Jannes Muenchow, *Geocomputation with R*
    (Boca Raton, FL: CRC Press, 2019), *[https://r.geocompx.org](https://r.geocompx.org)*.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kyle Walker, *Analyzing US Census Data: Methods, Maps, and Models in R* (Boca
    Raton, FL: CRC Press, 2013).'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
