- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: 'Short Range Radio: Abusing RFID'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 短距离无线电：滥用RFID
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: IoT devices don’t always need a continuous wireless transmission across long
    distances. Manufacturers often use *short-range radio* technologies to connect
    devices equipped with cheap, low-powered transmitters. These technologies allow
    devices to exchange low volumes of data at longer intervals, and as a result,
    they’re well suited for IoT devices that want to save power when they’re not transmitting
    any data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网（IoT）设备并不总是需要跨越长距离进行持续的无线传输。制造商通常使用*短距离无线电*技术来连接配备低功耗、廉价发射器的设备。这些技术使设备能够在较长的时间间隔内交换少量数据，因此非常适合那些在不传输数据时需要节省电力的物联网设备。
- en: In this chapter, we examine the most popular short-range radio solution, *Radio
    Frequency Identification (RFID)*. It’s often used in smart door locks and key
    card tags for user identification. You’ll learn to clone tags using a variety
    of methods, break the tags’ cryptographic keys, and change the information stored
    in the tags. Successfully utilizing these techniques could allow attackers to
    gain illicit access to a facility, for example. Then you’ll write a simple fuzzer
    to discover unknown vulnerabilities in RFID readers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨最流行的短距离无线电解决方案——*射频识别（RFID）*。它常用于智能门锁和门禁卡标签以进行用户身份识别。你将学习使用各种方法克隆标签、破解标签的加密密钥，并更改标签中存储的信息。成功利用这些技术可能使攻击者获得对某个设施的非法访问权限。例如，你还将编写一个简单的模糊测试器，用于发现RFID读卡器中的未知漏洞。
- en: How RFID Works
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RFID的工作原理
- en: RFID was designed to replace barcode technology. It works by transmitting encoded
    data through radio waves; then it uses this data to identify a tagged entity.
    This entity might be a human, such as an employee who wants to access a company
    building; pets; automobiles passing through toll booths; or even simple goods.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: RFID的设计初衷是取代条形码技术。它通过无线电波传输编码数据，然后使用这些数据来识别带标签的实体。这个实体可以是一个人，比如希望进入公司大楼的员工；宠物；通过收费站的汽车；甚至是简单的商品。
- en: RFID systems come in a broad range of shapes, supported ranges, and sizes, but
    we can usually identify the main components shown in [Figure 10-1](#figure10-1).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: RFID系统有多种形状、支持的范围和大小，但我们通常可以识别出[图 10-1](#figure10-1)中显示的主要组件。
- en: '![f10001](Images/f10001.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![f10001](Images/f10001.png)'
- en: 'Figure 10-1: Common RFID system components'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1：常见RFID系统组件
- en: The RFID tag’s memory contains information that identifies an entity. The reader
    can read the tag’s information using a scanning antenna, which is usually externally
    connected and typically generates the constant electromagnetic field required
    for this wireless connection. When the tag’s antenna is within range of the reader’s,
    the reader’s electromagnetic field sends an electric current to power up the RFID
    tag. The tag can then receive commands from the RFID reader and send responses
    containing the identification data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RFID标签的存储器包含标识某个实体的信息。读卡器可以通过扫描天线读取标签的信息，通常这种天线是外部连接的，且通常生成无线连接所需的恒定电磁场。当标签的天线进入读卡器天线的范围内时，读卡器的电磁场会向标签传送电流，提供能量使其工作。标签接着可以接收来自RFID读卡器的命令，并发送包含标识数据的响应。
- en: Several organizations have created standards and regulations that dictate the
    radio frequency, protocols, and procedures used to share information using RFID
    technologies. The following sections provide an overview of these variations,
    the security principles on which they’re based, and a testing methodology for
    RFID-enabled IoT devices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 若干组织制定了标准和规章，规定了使用RFID技术共享信息时所使用的射频、协议和程序。以下各节将概述这些变种、它们所基于的安全原则以及RFID启用的物联网设备的测试方法。
- en: Radio Frequency Bands
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 射频频段
- en: RFID relies on a group of technologies that operate in specific radio frequency
    bands, as listed in [Table 10-1](#table10-1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RFID依赖于一组在特定射频频段内工作的技术，如[表 10-1](#table10-1)所示。
- en: 'Table 10-1: RFID Bands'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1：RFID 频段
- en: '| **Frequency band** | **Signal range** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **频段** | **信号范围** |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Very low frequency (VLF) | (3 kHz–30 kHz) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 极低频（VLF） | （3 kHz–30 kHz） |'
- en: '| Low frequency (LF) | (30 kHz–300 kHz) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 低频（LF） | （30 kHz–300 kHz） |'
- en: '| Medium frequency (MF) | (300 kHz–3,000 kHz) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 中频（MF） | （300 kHz–3,000 kHz） |'
- en: '| High frequency (HF) | (3,000 kHz–30 MHz) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 高频（HF） | （3,000 kHz–30 MHz） |'
- en: '| Very high frequency (VHF) | (30 MHz–300 MHz) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 超高频（VHF） | （30 MHz–300 MHz） |'
- en: '| Ultra high frequency (UHF) | (300 MHz–3,000 MHz) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 超高频（UHF） | （300 MHz–3,000 MHz） |'
- en: '| Super high frequency (SHF) | (3,000 MHz–30 GHz) |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 超高频（SHF） | （3,000 MHz–30 GHz） |'
- en: '| Extremely high frequency (EHF) | (30 GHz–300 GHz) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 极高频 (EHF) | (30 GHz–300 GHz) |'
- en: '| Uncategorized | (300 GHz–3,000 GHz) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 未分类 | (300 GHz–3,000 GHz) |'
- en: Each of these RFID technologies follows a specific protocol. The best technology
    to use for a system depends on factors such as the signal’s range, data transfer
    rate, accuracy, and implementation cost.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 RFID 技术中的每一种都遵循特定的协议。用于系统的最佳技术取决于信号范围、数据传输速率、精度和实施成本等因素。
- en: Passive and Active RFID Technologies
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 被动与主动 RFID 技术
- en: An RFID tag can rely on its own power source, such as an embedded battery, or
    receive its power from the reading antenna using the current induced from the
    received radio waves. We characterize these as *active* or *passive* technologies,
    as shown in [Figure 10-2](#figure10-2).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: RFID 标签可以依靠自身的电源，比如嵌入式电池，或者从读取天线获取电力，通过接收的无线电波产生的电流来供电。我们将这些技术分类为 *主动* 或 *被动*
    技术，如 [图 10-2](#figure10-2) 所示。
- en: '![f10002](Images/f10002.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f10002](Images/f10002.png)'
- en: 'Figure 10-2: Passive and active technologies along the radio frequency spectrum'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2：沿无线电频谱分布的被动与主动技术
- en: Because active devices don’t need external power to start a communication process,
    they operate on higher frequencies and can continuously broadcast their signal.
    They can also support connections over longer ranges, so they’re often used as
    tracking beacons. Passive devices operate on the three lower frequencies of the
    RFID spectrum.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主动设备无需外部电源即可启动通信过程，它们通常工作在较高的频率范围内，并能持续广播信号。它们还能支持更长距离的连接，因此常用于追踪信标。被动设备则工作在
    RFID 频谱中的三种较低频率上。
- en: Some special devices are *semi-passive*; they contain integrated power sources
    capable of powering the RFID tag microchip at all times without requiring power
    from the reader’s signal. For this reason, the devices respond faster and in a
    greater reading range than passive ones.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些特殊设备是 *半被动* 的；它们包含集成电源，能够在不依赖阅读器信号的情况下始终为 RFID 标签微芯片提供电源。因此，这些设备比被动设备响应更快，且具有更广的读取范围。
- en: Another way to identify the differences between the existing RFID technologies
    is to look at their radio waves. Low-frequency devices use long-range waves, whereas
    high-frequency devices use short-range waves ([Figure 10-3](#figure10-3)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 识别现有 RFID 技术差异的另一种方法是观察它们的无线电波。低频设备使用长波，而高频设备使用短波（见 [图 10-3](#figure10-3)）。
- en: '![f10003](Images/f10003.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![f10003](Images/f10003.png)'
- en: 'Figure 10-3: Wave forms depending on the frequency'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：根据频率变化的波形
- en: These RFID implementations also use antennas with very different dimensions
    and wire turns, as shown in [Table 10-2](#table10-2). The shape of each antenna
    provides the best range and data transfer rate for each wavelength used.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 RFID 实现还使用尺寸和线圈圈数非常不同的天线，如 [表 10-2](#table10-2) 所示。每种天线的形状为每个波长提供了最佳的范围和数据传输速率。
- en: The Structure of RFID Tags
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RFID 标签的结构
- en: To understand existing cybersecurity threats in RFID tags, you need to understand
    the inner workings of these devices. Commercial tags usually comply with the ISO/IEC
    18000 and EPCglobal international standards, which define a series of diverse
    RFID technologies, each using a unique frequency range.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 RFID 标签中存在的网络安全威胁，您需要了解这些设备的内部工作原理。商业标签通常符合 ISO/IEC 18000 和 EPCglobal 国际标准，这些标准定义了一系列不同的
    RFID 技术，每种技术使用独特的频率范围。
- en: 'Table 10-2: Antennas for Different Frequency Implementations'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-2：不同频率实现的天线
- en: '| **Low frequency** | **High frequency** | **Ultra high frequency** |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **低频** | **高频** | **超高频** |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![g10001](Images/g10001.png) | ![g10002](Images/g10002.png) | ![g10003](Images/g10003.png)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| ![g10001](Images/g10001.png) | ![g10002](Images/g10002.png) | ![g10003](Images/g10003.png)
    |'
- en: Tag Classes
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 标签分类
- en: EPCglobal divides RFID tags into six categories. A tag in each category has
    all the capabilities listed in the previous category, making it backward compatible.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: EPCglobal 将 RFID 标签分为六类。每一类的标签都具备前一类中列出的所有功能，因此具有向后兼容性。
- en: '*Class 0 tags* are passive tags that operate in UHF bands. The vendor preprograms
    them at the production factory. As a result, you can’t change the information
    stored in their memory.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*Class 0 标签* 是被动标签，工作在 UHF 频段。厂商在生产工厂中对其进行预编程，因此无法更改其存储在内存中的信息。'
- en: '*Class 1 tags* can also operate in HF bands. In addition, they can be written
    only once after production. Many Class 1 tags can also process *cyclic redundancy
    checks (CRCs)* of the commands they receive. CRCs are a few extra bytes at the
    end of the commands for error detection.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*Class 1 标签*也可以在 HF 频段中工作。此外，它们在生产后只能写入一次。许多 Class 1 标签还可以处理它们接收到的命令的*循环冗余校验
    (CRC)*。CRC 是命令末尾的一些额外字节，用于错误检测。'
- en: '*Class 2 tags* can be written multiple times.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*Class 2 标签*可以多次写入。'
- en: '*Class 3 tags* can contain embedded sensors that can record environmental parameters,
    such as the current temperature or the tag’s motion. These tags are semi-passive,
    because although they have an embedded power source, such as an integrated battery,
    they can’t initiate wireless communication with other tags or readers.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*Class 3 标签*可以包含嵌入式传感器，能够记录环境参数，如当前温度或标签的运动。这些标签是半被动的，因为尽管它们有嵌入式电源，如集成电池，但它们不能主动与其他标签或读取器进行无线通信。'
- en: On the contrary, *Class 4 tags* can initiate communication with other tags of
    the same class, making them active tags.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，*Class 4 标签*可以与同一类别的其他标签进行通信，使它们成为主动标签。
- en: The most advanced tags are the *Class 5 tags*, which can provide power to other
    tags and communicate with all the previous tag classes. Class 5 tags can act as
    RFID readers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最先进的标签是*Class 5 标签*，它不仅可以为其他标签提供电力，还能与所有前述标签类别进行通信。Class 5 标签可以充当 RFID 阅读器。
- en: Information Stored in RFID Tags
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 存储在 RFID 标签中的信息
- en: 'An RFID tag’s memory usually stores four kinds of data: (a) the *identification
    data*, which identifies the entity to which the tag is attached; (b) the *supplementary
    data,* which provides further details regarding the entity; (c) the *control data*,
    used for the tag’s internal configuration; and (d) the tag’s *manufacturer data*,
    which contains a tag’s *Unique Identifier (UID)* and details regarding the tag’s
    production, type, and vendor. You’ll find the first two kinds of data in all the
    commercial tags; the last two can differ based on the tag’s vendor.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: RFID 标签的内存通常存储四种数据：（a）*标识数据*，用于标识标签所附着的实体；（b）*补充数据*，提供有关该实体的进一步细节；（c）*控制数据*，用于标签的内部配置；以及（d）标签的*制造商数据*，其中包含标签的*唯一标识符
    (UID)* 以及有关标签生产、类型和供应商的详细信息。你会在所有商业标签中找到前两种数据；后两种则可能根据标签供应商不同而有所差异。
- en: The identification data includes user-defined fields, such as bank accounts,
    product barcodes, and prices. It also includes a number of registers specified
    by the standards to which the tags adhere. For example, the ISO standard specifies
    the *Application Family Identifier (AFI)* value, a code that indicates the kind
    of object the tag belongs to. A tag for traveling baggage would use a different
    predefined AFI than a tag for a library book. Another important register, also
    specified by ISO, is the *Data Storage Format Identifier**(DSFID)*, which defines
    the logical organization of the user data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 标识数据包括用户定义的字段，如银行账户、产品条形码和价格。它还包括标准所规定的多个寄存器，这些标准定义了标签所遵循的规定。例如，ISO 标准规定了*应用家庭标识符
    (AFI)* 值，这是一个代码，指示标签所属对象的种类。旅行行李的标签会使用与图书馆书籍标签不同的预定义 AFI。另一个由 ISO 规定的重要寄存器是*数据存储格式标识符
    (DSFID)*，它定义了用户数据的逻辑组织。
- en: The supplementary data can handle other details defined by the standards, such
    as Application Identifiers (AIs), ANSI MH-10 Data Identifiers (DIs), and ATA Text
    Element Identifiers (TEIs), which we won’t discuss here.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 补充数据可以处理标准定义的其他细节，例如应用标识符 (AIs)、ANSI MH-10 数据标识符 (DIs) 和 ATA 文本元素标识符 (TEIs)，这些我们在这里不讨论。
- en: RFID tags also support different kinds of security controls, depending on the
    tag vendor. Most have mechanisms that restrict the read or write operations on
    each user memory block and on the special registers containing the AFI and DSFID
    values. These lock mechanisms use data stored in the control memory and have default
    passwords preconfigured by the vendor but allow the tag owners to configure custom
    passwords.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: RFID 标签还支持根据标签供应商不同而设定的各种安全控制。大多数标签具有限制每个用户内存块的读取或写入操作以及包含 AFI 和 DSFID 值的特殊寄存器的机制。这些锁定机制使用存储在控制内存中的数据，并具有由供应商预配置的默认密码，但允许标签拥有者配置自定义密码。
- en: Low-Frequency RFID Tags
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 低频 RFID 标签
- en: Low-frequency RFID devices include key cards that employees use to open doors,
    small glass tube tags implanted into pets, and temperature-resistant RFID tags
    for laundry, industrial, and logistics applications. These devices rely on passive
    RFID technology and operate in a range of 30 kHz to 300 kHz, although most of
    the devices that people use daily to track, access, or validate a task operate
    in the narrower range of 125 kHz to 134 kHz. The low-frequency tags have low memory
    capacities, a slow data transfer rate, and water and dust resistance, unlike the
    high frequency technologies.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 低频 RFID 设备包括员工用来开门的门禁卡、小型玻璃管标签（植入宠物体内）以及用于洗衣、工业和物流应用的耐温 RFID 标签。这些设备依赖于被动 RFID
    技术，工作频率范围为 30 kHz 到 300 kHz，尽管大多数人日常使用的设备（用于跟踪、访问或验证任务）工作在 125 kHz 到 134 kHz 的较窄范围内。与高频技术不同，低频标签具有较小的存储容量、较慢的数据传输速率，以及防水和防尘的特点。
- en: Often, we use low-frequency tags for access control purposes. The reason is
    that their low memory capacity can handle only small amounts of data, such as
    IDs used to authenticate. One of the most sophisticated tags, HID Global’s ProxCard
    ([Figure 10-4](#figure10-4)), uses a small number of bytes to support unique IDs
    that a tag management system can use for user authentication.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用低频标签进行门禁控制。原因在于它们的低存储容量只能处理少量数据，例如用于身份验证的 ID。最先进的标签之一，HID Global 的 ProxCard（[图
    10-4](#figure10-4)），使用少量字节支持唯一的 ID，标签管理系统可以利用这些 ID 进行用户认证。
- en: '![f10004](Images/f10004.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f10004](Images/f10004.png)'
- en: 'Figure 10-4: The HID ProxCard II, a popular low-frequency RFID tag'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-4：HID ProxCard II，一种流行的低频 RFID 标签
- en: Other companies, such as NXP with its Hitag2 tags and readers, introduced further
    security controls; for example, a mutual authentication protocol that uses a shared
    key to protect communications between the tag and reader. This technology is very
    popular in vehicle immobilization applications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他公司，例如 NXP 通过其 Hitag2 标签和读卡器，推出了进一步的安全控制；例如，使用共享密钥的互认证协议，用于保护标签与读卡器之间的通信。这项技术在车辆防盗应用中非常受欢迎。
- en: High-Frequency RFID Tags
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高频 RFID 标签
- en: You can find high-frequency RFID implemented globally in applications like payment
    systems, making it a game changer in the contactless world. Many people refer
    to this technology as *Near Field Communication (NFC)*, a term for devices operating
    over the 13.56 MHz frequency. Some of the most important NFC technologies are
    the MIFARE cards and the NFC microcontrollers integrated into mobile devices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 全球范围内，你可以在支付系统等应用中找到高频 RFID 技术，这使得它成为非接触式世界中的颠覆者。许多人称这种技术为 *近场通信（NFC）*，这是指工作在
    13.56 MHz 频率范围内的设备。一些最重要的 NFC 技术包括 MIFARE 卡和集成在移动设备中的 NFC 微控制器。
- en: One of the most popular high-frequency tag vendors is NXP, which controls approximately
    85 percent of the contactless market. Mobile devices use many of its NFC chips.
    For example, the new versions of the iPhone XS and XS Max implement the NXP 100VB27
    controller. This allows the iPhones to communicate with other NFC transponders
    and perform tasks such as contactless payments. Additionally, NXP has some low-cost
    and well-documented microcontrollers, such as the PN532, used for research and
    development purposes. The PN532 supports reading and writing, peer-to-peer communication,
    and emulation modes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: NXP 是最受欢迎的高频标签供应商之一，控制着大约 85% 的非接触式市场。移动设备使用了许多其 NFC 芯片。例如，iPhone XS 和 XS Max
    的新版本实现了 NXP 100VB27 控制器。这使得 iPhone 可以与其他 NFC 应答器通信，并执行如非接触式支付等任务。此外，NXP 还拥有一些低成本且文档完善的微控制器，如
    PN532，广泛用于研发。PN532 支持读取和写入、点对点通信以及仿真模式。
- en: NXP also designs the MIFARE cards, which are contactless smart cards based on
    ISO/IEC 14443\. The MIFARE brand has different families, such as MIFARE Classic,
    MIFARE Plus, MIFARE Ultralight, MIFARE DESFire, and MIFARE SAM. According to NXP,
    these cards implement AES and DES/Triple-DES encryption methods, whereas some
    versions, such as MIFARE Classic, MIFARE SAM, and MIFARE Plus, also support its
    proprietary encryption algorithm Crypto-1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: NXP 还设计了 MIFARE 卡，这是基于 ISO/IEC 14443 的非接触式智能卡。MIFARE 品牌有不同的系列，例如 MIFARE Classic、MIFARE
    Plus、MIFARE Ultralight、MIFARE DESFire 和 MIFARE SAM。根据 NXP 的说法，这些卡实现了 AES 和 DES/Triple-DES
    加密方法，而一些版本，例如 MIFARE Classic、MIFARE SAM 和 MIFARE Plus，还支持其专有的加密算法 Crypto-1。
- en: Attacking RFID Systems with Proxmark3
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Proxmark3 攻击 RFID 系统
- en: In this section, we’ll walk through a number of attacks against RFID tags. We’ll
    clone the tags, allowing you to impersonate a legitimate person or object. We’ll
    also circumvent the cards’ protections to tamper with their stored memory contents.
    In addition, we’ll build a simple fuzzer that you can use against devices with
    RFID reading capabilities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将介绍多种针对RFID标签的攻击。我们将克隆标签，使你能够冒充合法的人或物体。我们还将绕过卡片的保护措施，篡改其存储的内存内容。此外，我们还将构建一个简单的模糊测试工具，你可以用它对具有RFID读取功能的设备进行测试。
- en: As a card reader, we’ll use Proxmark3, a general-purpose RFID tool with a powerful
    field-programmable gate array (FPGA) microcontroller capable of reading and emulating
    low-frequency and high-frequency tags ([https://github.com/Proxmark/proxmark3/wiki](https://github.com/Proxmark/proxmark3/wiki)).
    Proxmark3 currently costs less than $300\. You can also use the Proxmark3 EVO
    and Proxmark3 RDV 4 versions of the tool. To read tags with Proxmark3, you’ll
    need antennas designed for the frequency band of the specific card you’re reading
    (reference [Table 10-2](#table10-2) for images of the antenna types). You can
    obtain these antennas from the same distributors that offer the Proxmark3 device.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为卡片读取器，我们将使用Proxmark3，这是一款通用的RFID工具，配备强大的现场可编程门阵列（FPGA）微控制器，能够读取和仿真低频和高频标签（[https://github.com/Proxmark/proxmark3/wiki](https://github.com/Proxmark/proxmark3/wiki)）。目前Proxmark3的价格不到300美元。你也可以使用Proxmark3
    EVO和Proxmark3 RDV 4版本的工具。要使用Proxmark3读取标签，你需要为特定卡片频段设计的天线（参考[表10-2](#table10-2)查看天线类型的图片）。你可以从与Proxmark3设备相同的分销商处获取这些天线。
- en: We’ll also show you how to use free apps to transform any NFC-enabled Android
    device into a card reader for MIFARE cards.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向你展示如何使用免费的应用程序，将任何支持NFC的Android设备转换为MIFARE卡的卡片读取器。
- en: To perform these tests, we’ll use an HID ProxCard, as well as a number of unprogrammed
    T55x7 tags and NXP MIFARE Classic 1KB cards, which cost less than $2 each.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这些测试，我们将使用HID ProxCard，以及一些未编程的T55x7标签和NXP MIFARE Classic 1KB卡，这些卡的价格不到2美元每张。
- en: Setting Up Proxmark3
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Proxmark3
- en: 'To use Proxmark3, you’ll first have to install a number of required packages
    on your computer. Here’s how to do so using `apt` :'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Proxmark3，你首先需要在计算机上安装一些必需的软件包。以下是如何使用`apt`进行安装：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, use the `git` command to download the source code from the Proxmark3
    remote repository. Then navigate to its folder and run the `make` command to build
    the required binaries:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`git`命令从Proxmark3的远程仓库下载源代码。然后导航到其文件夹并运行`make`命令来构建所需的二进制文件：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now you’re ready to plug the Proxmark3 into your computer using a USB cable.
    Once you’ve done so, identify the serial port to which the device is connected
    using the `dmesg` command, available in Kali Linux. You can use this command to
    get information about the hardware on a system:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你准备好通过USB线将Proxmark3连接到计算机。连接后，使用`dmesg`命令识别设备连接的串口，该命令可在Kali Linux中使用。你可以使用该命令获取系统硬件的信息：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Based on the output, we know the device is connected on the */dev/ttyACM0* serial
    port.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出结果，我们知道设备连接在*/dev/ttyACM0*串口上。
- en: Updating Proxmark3
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新Proxmark3
- en: Because Proxmark3’s source code changes frequently, we recommend that you update
    the device before using it. The device software consists of the operating system,
    the bootloader image, and the FPGA image. The bootloader executes the operating
    system, whereas the FPGA image is the code that executes in the device’s embedded
    FPGA.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Proxmark3的源代码经常更新，我们建议在使用设备之前先更新它。设备软件由操作系统、引导程序映像和FPGA映像组成。引导程序执行操作系统，而FPGA映像则是设备嵌入式FPGA中执行的代码。
- en: 'The latest bootloader version is in the *bootrom.elf* file in the source code
    folders. To install it, hold down the Proxmark3’s button while the device is connected
    to your computer until you see a red and yellow light on the device. Then, while
    holding the button, use the *flasher* binary in the source code folder to install
    the image. As parameters, pass it Proxmark3’s serial interface and the `-b`parameter
    to define the bootloader’s image path:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的引导程序版本位于源代码文件夹中的*bootrom.elf*文件。要安装它，连接设备到计算机后，按住Proxmark3的按钮，直到设备上显示红色和黄色的灯光。然后，在按住按钮的同时，使用源代码文件夹中的*flasher*二进制文件安装映像。作为参数，传递Proxmark3的串口接口以及`-b`参数来定义引导程序映像的路径：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can find the latest versions of the operating system and FPGA image in
    the same file, named *fullimage.elf*, in the source code folders. If you’re using
    Kali Linux, you should also stop and disable the ModemManager. The ModemManager
    is the daemon that controls mobile broadband devices and connections in many Linux
    distributions; it can interfere with connected devices, such as Proxmark3\. To
    stop and disable this service, use the `systemectl`command, which is preinstalled
    in Kali Linux:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在相同的文件中找到操作系统和FPGA镜像的最新版本，文件名为*fullimage.elf*，位于源代码文件夹中。如果你使用的是Kali Linux，你还应该停止并禁用ModemManager。ModemManager是许多Linux发行版中控制移动宽带设备和连接的守护进程，它可能会干扰连接的设备，如Proxmark3。要停止并禁用此服务，可以使用`systemectl`命令，该命令已预装在Kali
    Linux中：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can use the Flasher tool to complete the flash again, this time without
    the `-b`parameter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Flasher工具再次完成闪存操作，这次不带`-b`参数。
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Proxmark3 RVD 4.0 also supports a command to automate the full process
    of updating the bootloader, the operating system, and the FPGA:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmark3 RVD 4.0还支持一个命令，可以自动化整个更新过程，包括更新引导加载程序、操作系统和FPGA：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To find out if the update succeeded, execute the `Proxmark3` binary, which
    is located in the *client* folder, and pass it the device’s serial interface:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更新是否成功，执行位于*client*文件夹中的`Proxmark3`二进制文件，并将设备的串口接口传递给它：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The command should output the device’s attributes, such as the embedded processor
    type, the memory size, and the architecture identifier, followed by the prompt.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应输出设备的属性，例如嵌入式处理器类型、内存大小和架构标识符，然后显示提示符。
- en: Identifying Low- and High-Frequency Cards
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别低频和高频卡
- en: Now let’s identify specific kinds of RFID cards. The Proxmark3 software comes
    with a preloaded list of known RFID tags for different vendors, and it supports
    vendor-specific commands that you can use to control these tags.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们识别特定类型的RFID卡。Proxmark3软件预加载了不同供应商的已知RFID标签列表，并支持供应商特定的命令，允许你控制这些标签。
- en: Before using the Proxmark3, connect it to an antenna that matches the card type.
    If you’re using the newer Proxmark3 RVD 4.0 model, the antennas will look slightly
    different because they’re more compact. Consult the vendor’s documentation to
    select the right one for each case.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Proxmark3之前，连接一个与卡片类型匹配的天线。如果你使用的是更新的Proxmark3 RVD 4.0型号，天线看起来会略有不同，因为它们更加紧凑。请查阅供应商的文档，选择适合每种情况的天线。
- en: 'Proxmark3 commands all begin with either the `lf` parameter, for interacting
    with the low-frequency cards, or the `hf` parameter, for interacting with the
    high-frequency cards. To identify nearby known tags, use the `search` parameter.
    In the following example, we use Proxmark3 to identify a Hitag2 low-frequency
    tag:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmark3的所有命令都以`lf`参数开始，用于与低频卡交互，或以`hf`参数开始，用于与高频卡交互。要识别附近的已知标签，使用`search`参数。在以下示例中，我们使用Proxmark3识别一个Hitag2低频标签：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next command identifies an NXP ICode SLIX high-frequency tag:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令识别一个NXP ICode SLIX高频标签：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Depending on the tag vendor, the command’s output might also include the manufacturer,
    microchip identification number, or known tag-specific vulnerabilities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据标签供应商的不同，命令的输出可能还包括制造商、微芯片识别号或已知的标签特定漏洞。
- en: Low-Frequency Tag Cloning
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 低频标签克隆
- en: Let’s clone a tag, starting with a low-frequency one. The low-frequency cards
    available on the market include HID ProxCard, Cotag, Awid, Indala, and Hitag,
    among others, but HID ProxCards are the most common. In this section, we’ll clone
    it using Proxmark3 and then create a new tag containing the same data. You could
    use this tag to impersonate the legitimate tagged entity, such as an employee,
    and unlock the corporate building’s smart door lock.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们克隆一个标签，从低频标签开始。市面上可用的低频卡包括HID ProxCard、Cotag、Awid、Indala和Hitag等，但HID ProxCard是最常见的。在本节中，我们将使用Proxmark3克隆它，并创建一个包含相同数据的新标签。你可以使用这个标签冒充合法的标记实体，例如员工，并解锁公司大楼的智能门锁。
- en: 'To start, use the low-frequency search command to identify cards that are in
    Proxmark3’s range. If the card in range is an HID, the output will typically look
    like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用低频搜索命令识别Proxmark3范围内的卡片。如果在范围内的卡片是HID，则输出通常如下所示：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, examine the supported vendor-specific tag commands for HID devices by
    providing `hid` as a parameter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，提供`hid`作为参数，查看支持的HID设备的供应商特定标签命令：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now try to read the tag data:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试读取标签数据：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The command should return the HID tag’s exact ID.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回HID标签的确切ID。
- en: 'To clone this tag with the Proxmark3, use a blank or previously unprogrammed
    T55x7 card. These cards are normally compatible with EM4100, HID, and Indala technologies.
    Position the T55x7 card over the low-frequency antenna and execute the following
    command, passing it the ID of the tag you want to clone:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Proxmark3克隆此标签，可以使用一张空白或之前未编程的T55x7卡。这些卡通常与EM4100、HID和Indala技术兼容。将T55x7卡放置在低频天线位置，执行以下命令，并传入你要克隆的标签的ID：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now you could use the T55x7 card as though it were the original card.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像使用原卡一样使用T55x7卡。
- en: High-Frequency Tag Cloning
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高频标签克隆
- en: Although high-frequency technologies implement better security than low-frequency
    ones, inadequate or old implementations could be vulnerable to attacks. For example,
    the MIFARE Classic cards are among the most vulnerable high-frequency cards, because
    they use default keys and an insecure proprietary cryptographic mechanism. In
    this section, we’ll walk through the process of cloning a MIFARE Classic card.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管高频技术提供的安全性优于低频技术，但不充分或过时的实现仍可能容易受到攻击。例如，MIFARE Classic卡是最脆弱的高频卡之一，因为它们使用默认密钥和不安全的专有加密机制。在本节中，我们将详细介绍克隆MIFARE
    Classic卡的过程。
- en: MIFARE Classic Memory Allocation
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MIFARE Classic内存分配
- en: 'To understand what MIFARE Classic’s possible attack vectors are, let’s analyze
    the memory allocation in the simplest MIFARE card: the MIFARE Classic 1KB ([Figure
    10-5](#figure10-5)).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解MIFARE Classic可能的攻击路径，我们分析一下最简单的MIFARE卡：MIFARE Classic 1KB卡（[图 10-5](#figure10-5)）。
- en: '![f10005](Images/f10005.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![f10005](Images/f10005.png)'
- en: 'Figure 10-5: MIFARE Classic memory map'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-5：MIFARE Classic内存映射
- en: The MIFARE Classic 1KB card has 16 sectors. Each sector occupies four blocks,
    and each block contains 16 bytes. The manufacturer saves the card’s UID in Sector
    0 of Block 0, which you can’t alter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: MIFARE Classic 1KB卡有16个区块。每个区块占四个块，每个块包含16字节。制造商将卡的UID保存在区块0的第0块中，这部分内容无法修改。
- en: To access each sector, you’ll need two keys, A and B. The keys can be different,
    but many implementations use default keys (`FFFFFFFFFFFF` is a common one). These
    keys get stored in Block 3 of each sector, called the *sector trailer*. The sector
    trailer also stores the *access bits*, which establish the read and write permissions
    on each block using the two keys.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问每个区块，你需要两个密钥，A和B。这些密钥可以不同，但许多实现使用默认密钥（`FFFFFFFFFFFF`是常见的一个）。这些密钥存储在每个区块的第3块中，称为*区块尾*。区块尾还存储*访问位*，它们通过这两个密钥设定每个块的读写权限。
- en: 'To understand why having two keys is useful, let’s consider an example: the
    cards we use to ride a subway system. These cards might allow an RFID reader to
    readall data blocks with either key A or B but write to them only with key B.
    As a result, the RFID reader at the turnstile, which has only key A, can read
    the card’s data, unlock the turnstile for users with sufficient balance, and decrement
    their balance. But you’d need a special terminal equipped with key B to write,
    or increment, the users’ balance. The station cashier might be the only person
    who can operate this terminal.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么需要两个密钥，我们来看一个例子：我们用来乘坐地铁的卡片。这些卡片可能允许RFID读卡器使用密钥A或B读取所有数据区块，但只有使用密钥B才能写入这些区块。因此，只有配备了密钥A的闸机上的RFID读卡器，可以读取卡片数据，解锁闸机供余额足够的用户通行，并扣减他们的余额。但要写入或增加用户余额，你需要一个配备密钥B的特殊终端。车站的收银员可能是唯一能够操作此终端的人。
- en: The access bits are located between the two key types. If a company misconfigures
    these bits—for example, by unintentionally granting write permissions—adversaries
    could tamper with the sector’s block data. [Table 10-3](#table10-3) lists the
    possible access control permissions that you could define using these access bits.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 访问位位于两种密钥类型之间。如果公司配置这些访问位时出错——例如，无意中授予写入权限——攻击者可能会篡改该区域的区块数据。[表 10-3](#table10-3)列出了使用这些访问位时可以定义的可能访问控制权限。
- en: 'Table 10-3: MIFARE Access Bits'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-3：MIFARE 访问位
- en: '| **Access bits** | **Valid access control permissions** | **Block** | **Description**
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **访问位** | **有效的访问控制权限** | **区块** | **描述** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| C1[3,] C2[3,] C3[3,] | Read, write | 3 | Sector trailer |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| C1[3,] C2[3,] C3[3,] | 读取、写入 | 3 | 区块尾 |'
- en: '| C1[2,] C2[2,] C3[2] | Read, write, increment, decrement, transfer, restore
    | 2 | Data block |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| C1[2,] C2[2,] C3[2] | 读取、写入、增加、减少、传输、恢复 | 2 | 数据块 |'
- en: '| C1[1,] C2[1,] C3[1] | Read, write, increment, decrement, transfer, restore
    | 1 | Data block |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| C1[1,] C2[1,] C3[1] | 读取、写入、增加、减少、传输、恢复 | 1 | 数据块 |'
- en: '| C1[0,] C2[0,] C3[0,] | Read, write, increment, decrement, transfer, restore
    | 0 | Data block |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| C1[0,] C2[0,] C3[0,] | 读取、写入、增加、减少、转移、恢复 | 0 | 数据块 |'
- en: You could use various methods to exploit the MIFARE Classic cards. You might
    use special hardware, such as the Proxmark3 or an Arduino with a PN532 board.
    Even less sophisticated hardware, as simple as an Android phone, might be enough
    to copy, clone, and replay a MIFARE Classic card, but many hardware researchers
    prefer the Proxmark3 to other solutions because of its preloaded commands.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用各种方法来破解 MIFARE Classic 卡。你可以使用专用硬件，如 Proxmark3 或带有 PN532 板的 Arduino。甚至一些不那么复杂的硬件，如一部
    Android 手机，可能足以复制、克隆和重放 MIFARE Classic 卡，但许多硬件研究人员更倾向于使用 Proxmark3，而不是其他解决方案，因为它预加载了命令。
- en: 'To view the attacks you could perform against the MIFARE Classic card, use
    the `hf mf`command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你可以对 MIFARE Classic 卡执行的攻击，请使用 `hf mf` 命令：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most of the listed commands implement brute-force attacks against the authentication
    protocol used (such as the `chk` and `fchk` commands) or attacks for known vulnerabilities
    (such as the `nack`, `darkside`, and `hardnested` commands). We’ll use the `darkside`
    command in Chapter 15.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的多数命令实现了针对所用身份验证协议的暴力破解攻击（如 `chk` 和 `fchk` 命令）或已知漏洞的攻击（如 `nack`、`darkside`
    和 `hardnested` 命令）。我们将在第 15 章中使用 `darkside` 命令。
- en: Cracking the Keys with a Brute-Force Attack
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用暴力破解攻击破解密钥
- en: To read the MIFARE card’s memory blocks, you need to find the keys for each
    of the 16 sectors. The simplest way to do this is to perform a brute-force attack
    and attempt to authenticate using a list of default keys. Proxmark3 has a special
    command for this attack, called `chk` (an abbreviation of the word check). This
    command uses a list of known passwords to try to read the card.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取 MIFARE 卡的内存块，你需要找到每个 16 个扇区的密钥。最简单的方法是执行暴力破解攻击，并尝试使用默认密钥列表进行身份验证。Proxmark3
    为此攻击提供了一个专用命令，叫做 `chk`（是“check”的缩写）。此命令使用已知的密码列表来尝试读取卡片。
- en: To perform this attack, first select the commands in the high-frequency band
    using the `hf` parameter, followed by the `mf` parameter, which will show you
    the commands for MIFARE cards. Then add the `chk` parameter to select the brute-force
    attack. You must also provide the number of blocks that you’re targeting. This
    can be a parameter between `0x00` and `0xFF`, or it can be the *** character,
    which selects all the blocks, followed by a number that specifies the tag’s memory
    size (`0` = 320 bytes, `1` = 1KB, `2` = 2KB, and `4` = 4KB).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此攻击，首先使用 `hf` 参数选择高频带中的命令，然后使用 `mf` 参数，它将显示 MIFARE 卡的命令。接着添加 `chk` 参数以选择暴力破解攻击。你还必须提供目标的块数量。这可以是
    `0x00` 和 `0xFF` 之间的一个参数，也可以是 *** 字符，后跟指定标签内存大小的数字（`0` = 320 字节，`1` = 1KB，`2` =
    2KB，`4` = 4KB）。
- en: 'Next, provide the key type: `A` for type A keys, `B` for type B keys, and `?`
    for testing both types of keys. You can also use the `d` parameter to write the
    identified keys to a binary file or the `t` parameter to load the identified keys
    directly to the Proxmark3 emulator memory for further use, such as reading specific
    blocks or sectors.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，提供密钥类型：`A` 代表 A 类型密钥，`B` 代表 B 类型密钥，`?` 代表测试两种类型的密钥。你还可以使用 `d` 参数将识别出的密钥写入二进制文件，或使用
    `t` 参数将识别出的密钥直接加载到 Proxmark3 仿真器内存中以供进一步使用，比如读取特定的块或扇区。
- en: Then you can specify either a space-separated list of keys or a file that contains
    these keys. Proxmark3 contains a default list in the source code folder at *./client/default_keys.dic*.
    If you don’t provide your own list or a file with the keys, Proxmark3 will use
    this file to test the 17 most common default keys.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以指定一个由空格分隔的密钥列表，或者一个包含这些密钥的文件。Proxmark3 在源代码文件夹中包含一个默认列表，位于 *./client/default_keys.dic*。如果你没有提供自己的密钥列表或文件，Proxmark3
    将使用此文件来测试 17 个最常见的默认密钥。
- en: 'Here is an example run of the brute-force attack:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是暴力破解攻击的示例运行：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the command succeeds, it displays a table with the A and B keys for the
    16 sectors. If you used the `b` parameter, Proxmark3 stores the keys in a file
    named *dumpedkeys.bin ,* and the output would look like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令成功，它会显示一个表格，列出 16 个扇区的 A 和 B 密钥。如果你使用了 `b` 参数，Proxmark3 会将密钥存储在名为 *dumpedkeys.bin*
    的文件中，输出结果将如下所示：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The latest versions of Proxmark3, such as RVD 4.0, support an optimized version
    of the same command, called `fchk`. It takes two parameters, the tag’s memory
    size and the `t` (transfer) parameter, which you can use to load the keys to the
    Proxmark3 memory:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的 Proxmark3，例如 RVD 4.0，支持该命令的优化版本，名为 `fchk`。它需要两个参数，标签的内存大小和 `t`（传输）参数，后者可用于将密钥加载到
    Proxmark3 内存中：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Reading and Cloning the Card Data
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取和克隆卡片数据
- en: 'Once you know the keys, you can start reading sectors or blocks using the `rdbl`
    parameter. The following command reads block number 0 with the A key `FFFFFFFFFFFF`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦知道了密钥，你就可以使用 `rdbl` 参数开始读取扇区或块。以下命令读取块号为 0 的 A 密钥 `FFFFFFFFFFFF`：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can read a complete sector, using the same methodology, with the `hf mf
    rdsc`command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用相同的方法读取完整的扇区，使用 `hf mf rdsc` 命令：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To clone a MIFARE card, use the `dump`parameter. This parameter writes a file
    with all the information from the original card. You could save and reuse that
    file later to create a new, fresh copy of the original card.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆一张 MIFARE 卡，可以使用 `dump` 参数。该参数会写入一个包含原始卡片所有信息的文件。你可以稍后保存并重用该文件，以创建一个新的、完整的原始卡片副本。
- en: 'The `dump` parameter lets you assign the name of a file or the type of technology
    that you want to dump. Just pass it the card’s memory size. In this example, we
    use `1` for the 1KB memory size (although because `1` is the default size, we
    could have omitted this). The command uses the keys we stored in the *dumpkeys.bin*
    file to access the card:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`dump` 参数允许你指定要转储的文件名或技术类型。只需将卡片的内存大小传递给它。在这个例子中，我们使用 `1` 表示 1KB 的内存大小（尽管因为
    `1` 是默认大小，我们本可以省略它）。该命令使用我们在 *dumpkeys.bin* 文件中存储的密钥来访问卡片：'
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command stores the data in a file named *hf-mf-B46F6F79-data.bin*. You
    can transfer files in the *.bin* format directly to another RFID tag.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将数据存储在一个名为 *hf-mf-B46F6F79-data.bin* 的文件中。你可以将 *.bin* 格式的文件直接传输到另一张 RFID
    标签上。
- en: Some Proxmark3 firmwares maintained by third-party developers will store the
    data in two more files with .*eml* and .*json* extensions. You could load the
    .*eml* file to the Proxmark3 memory for further use, and you could use the .*json*
    file with third-party software and other RFID emulation devices, such as the ChameleonMini.
    You can easily convert this data from one file format to another, either manually
    or by using a number of automated scripts that we’ll discuss in “Automating RFID
    Attacks Using the Proxmark3 Scripting Engine” on page 263\.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一些由第三方开发者维护的 Proxmark3 固件会将数据存储在两个额外的文件中，分别具有 .*eml* 和 .*json* 扩展名。你可以将 .*eml*
    文件加载到 Proxmark3 内存中以供进一步使用，且可以使用 .*json* 文件与第三方软件及其他 RFID 仿真设备（如 ChameleonMini）配合使用。你可以轻松地将数据从一种文件格式转换为另一种，无论是手动进行，还是使用我们将在《通过
    Proxmark3 脚本引擎自动化 RFID 攻击》一章中讨论的多种自动化脚本。
- en: 'To copy the stored data to a new card, place the card within range of the Proxmark3’s
    antenna and use Proxmark3’s `restore`parameter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要将存储的数据复制到新卡片上，将卡片放置在 Proxmark3 天线的有效范围内，并使用 Proxmark3 的 `restore` 参数：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The card doesn’t need to be blank for this command to work, but the `restore`
    command uses *dumpkeys.bin*`` once`again to access the card. If the card’s current
    keys are different than the ones stored in the *dumpkeys.bin* file, the write
    operation will fail.` ``
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这条命令并不要求卡片必须是空白的，但`restore`命令会再次使用 *dumpkeys.bin* 文件来访问卡片。如果卡片当前的密钥与 *dumpkeys.bin*
    文件中存储的密钥不同，写入操作将会失败。
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
