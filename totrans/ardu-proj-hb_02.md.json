["```\n/* by DojoDave <http://www.0j0.org>\n   modified 30 Aug 2011 by Tom Igoe\n   This example code is in the public domain.\n   http://www.arduino.cc/en/Tutorial/Button\n*/\n\nconst int buttonPin = 2;      // Pin connected to pushbutton\nconst int ledPin = 13;        // Pin connected to LED\nint buttonState = 0;          // Give pushbutton a value\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);    // Set LED pin as output\n  pinMode(buttonPin, INPUT);  // Set pushbutton pin as input\n}\n\nvoid loop() {\n  buttonState = digitalRead(buttonPin); // Read input from pin 2\n  if (buttonState == HIGH) { // If pushbutton is pressed, set as HIGH\n    digitalWrite(ledPin, HIGH); // Turn on LED\n  }\n  else {\n    digitalWrite(ledPin, LOW);  // Otherwise, turn off LED\n  }\n}\n```", "```\n/* http://arduino.cc/en/Reference/AnalogWrite by Tom Igoe\n   from http:itp.nyu.edu/physcomp/Labs/AnalogIn */\n\nint potPin = A0; // Analog input pin connected to the potentiometer\nint potValue = 0; // Value that will be read from the potentiometer\nint led = 9; // Pin 9 (connected to the LED) is capable of PWM\n\n// Runs once at beginning of the program\nvoid setup() {\n  pinMode(led, OUTPUT); // Set pin 9 to output\n}\n\n// Loops continuously\nvoid loop() {\n  potValue = analogRead(potPin); // Read potentiometer value\n                                 // from A0 pin\n  analogWrite(led, potValue/4);  // Send potentiometer value to LED\n                                 // to control brightness with PWM\n  delay(10);                     // Wait for 10 ms\n}\n```", "```\n/* By Tom Igoe. This example code is in the public domain.\n   http://www.arduino.cc/en/Tutorial/BarGraph */\n\nconst int analogPin = A0; // Pin connected to the potentiometer\nconst int ledCount = 9;   // Number of LEDs\nint ledPins[] = {2,3,4,5,6,7,8,9,10}; // Pins connected to the LEDs\n\nvoid setup() {\n  for (int thisLed = 0; thisLed < ledCount; thisLed++) {\n    pinMode(ledPins[thisLed], OUTPUT); // Set the LED pins as output\n  }\n}\n\n// Start a loop\nvoid loop() {\n  int sensorReading = analogRead(analogPin); // Analog input\n  int ledLevel = map(sensorReading, 0, 1023, 0, ledCount);\n  for (int thisLed = 0; thisLed < ledCount; thisLed++) {\n    if (thisLed < ledLevel) { // Turn on LEDs in sequence\n      digitalWrite(ledPins[thisLed], HIGH);\n    }\n    else { // Turn off LEDs in sequence\n      digitalWrite(ledPins[thisLed], LOW);\n    }\n  }\n}\n```", "```\nconst int analogInPin = A0; // Analog input pin connected to the\n                            // potentiometer\nint sensorValue = 0;        // Value read from the potentiometer\nint timer = 0;              // Delay value\n\n// Set digital pins 12 and 11 as outputs\nvoid setup() {\n  pinMode(12, OUTPUT);\n  pinMode(11, OUTPUT);\n}\n\n// Start a loop to turn LEDs on and off with a delay in between\nvoid loop() {\n  sensorValue = analogRead(analogInPin); // Read value from the\n                                         // potentiometer\n  timer = map(sensorValue, 0, 1023, 10, 500); // Delay 10 to 500 ms\n  digitalWrite(12, HIGH); // LED turns on\n  delay(timer);           // Delay depending on potentiometer value\n  digitalWrite(12, LOW);  // LED turns off\n  delay(timer);\n  digitalWrite(12, HIGH);\n  delay(timer);\n  digitalWrite(12, LOW);\n  digitalWrite(11, HIGH);\n  delay(timer);\n  digitalWrite(11, LOW);\n  delay(timer);\n  digitalWrite(11, HIGH);\n  delay(timer);\n  digitalWrite(11, LOW);\n}\n```", "```\nif(analogRead(0) > 900){\n```", "```\nconst int moistureAO = 0;\nint AO = 0;       // Pin connected to A0 on the controller\nint tmp = 0;      // Value of the analog pin\nint buzzPin = 11; // Pin connected to the piezo buzzer\nint LED = 13;     // Pin connected to the LED\n\nvoid setup () {\n  Serial.begin(9600); // Send Arduino reading to IDE\n  Serial.println(\"Soil moisture sensor\");\n  pinMode(moistureAO, INPUT);\n  pinMode(buzzPin, OUTPUT); // Set pin as output\n  pinMode(LED, OUTPUT);     // Set pin as output\n}\n\nvoid loop () {\n  tmp = analogRead( moistureAO );\n  if ( tmp != AO ) {\n    AO = tmp;\n    Serial.print(\"A = \"); // Show the resistance value of the sensor\n                          // in the IDE\n    Serial.println(AO);\n  }\n  delay (1000);\n  if (analogRead(0) > 900) { // If the reading is higher than 900,\n    digitalWrite(buzzPin, HIGH); // the buzzer will sound\n    digitalWrite(LED, HIGH);     // and the LED will light\n    delay(1000); // Wait for 1 second\n    digitalWrite(buzzPin, LOW);\n    digitalWrite(LED, HIGH);\n  }\n  else {\n    digitalWrite(buzzPin, LOW); // If the reading is below 900,\n                                // the buzzer and LED stay off\n    digitalWrite(LED, LOW);\n  }\n}\n```", "```\n// Code by James Newbould used with kind permission\n#define NUMREADINGS 25 // Raise number to increase data smoothing\nint senseLimit = 1023; // Raise number to decrease sensitivity of\n                       // the antenna (up to 1023 max)\nint probePin = 5; // Set analog pin 5 as the antenna pin\nint val = 0;      // Reading from probePin\n\n// Pin connections to LED bar graph with resistors in series\nint LED1 = 11;\nint LED2 = 10;\nint LED3 = 9;\nint LED4 = 8;\nint LED5 = 7;\nint LED6 = 6;\nint LED7 = 5;\nint LED8 = 4;\nint LED9 = 3;\nint LED10 = 2;\nint readings[NUMREADINGS]; // Readings from the analog input\nint index = 0;             // Index of the current reading\nint total = 0;             // Running total\nint average = 0;           // Final average of the probe reading\n\nvoid setup() {\n  pinMode(2, OUTPUT); // Set LED bar graph pins as outputs\n  pinMode(3, OUTPUT);\n  pinMode(4, OUTPUT);\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(7, OUTPUT);\n  pinMode(8, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n  pinMode(11, OUTPUT);\n Serial.pinMode(9600); // Initiate serial connection with IDE for\n                        // debugging and so on\n  for (int i = 0; i < NUMREADINGS; i++)\n    readings[i] = 0; // Initialize all readings to 0\n}\n\nvoid loop() {\n  val = analogRead(probePin); // Take a reading from probe\n  if (val >= 1) {             // If the reading isn't zero, proceed\n    val = constrain(val, 1, senseLimit); // If the reading is\n                                         // higher than the current\n                                         // senseLimit value, update\n                                         // senseLimit value with\n                                         // higher reading\n    val = map(val, 1, senseLimit, 1, 1023); // Remap the constrained\n                                            // value within a 1 to\n                                            // 1023 range\n    total -= readings[index]; // Subtract the last reading\n    readings[index] = val;    // Read from the sensor\n    total += readings[index]; // Add the reading to the total\n    index = (index + 1);      // Advance to the next index\n    if (index >= NUMREADINGS) // If we're at the end of the array\n      index = 0;              // loop around to the beginning\n    average = total / NUMREADINGS; // Calculate the average reading\n    if (average > 50) { // If the average reading is higher than 50\n      digitalWrite(LED1, HIGH); // turn on the first LED\n    }\n    else {                        // If it's not\n      digitalWrite(LED1, LOW);    // turn off that LED\n    }\n    if (average > 150) {          // And so on\n      digitalWrite(LED2, HIGH);\n    }\n    else {\n      digitalWrite(LED2, LOW);\n    }\n    if (average > 250) {\n      digitalWrite(LED3, HIGH);\n    }\n    else {\n      digitalWrite(LED3, LOW);\n    }\n    if (average > 350) {\n      digitalWrite(LED4, HIGH);\n    }\n    else {\n      digitalWrite(LED4, LOW);\n    }\n    if (average > 450) {\n      digitalWrite(LED5, HIGH);\n    }\n    else {\n      digitalWrite(LED5, LOW);\n    }\n    if (average > 550) {\n      digitalWrite(LED6, HIGH);\n    }\n    else {\n      digitalWrite(LED6, LOW);\n    }\n    if (average > 650) {\n      digitalWrite(LED7, HIGH);\n    }\n    else {\n      digitalWrite(LED7, LOW);\n    }\n    if (average > 750) {\n      digitalWrite(LED8, HIGH);\n    }\n    else {\n      digitalWrite(LED8, LOW);\n    }\n    if (average > 850) {\n      digitalWrite(LED9, HIGH);\n    }\n    else {\n      digitalWrite(LED9, LOW);\n    }\n    if (average > 950) {\n      digitalWrite(LED10, HIGH);\n    }\n    else {\n      digitalWrite(LED10, LOW);\n    }\n    Serial.println(val);   // Use output to aid in calibrating\n  }\n}\n```"]