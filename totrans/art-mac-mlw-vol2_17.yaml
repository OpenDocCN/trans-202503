- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 14 CASE STUDIES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14个案例研究
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In this final chapter, I showcase a handful of case studies, ranging from good
    apps misbehaving to sophisticated nation-state attacks. In each case, I’ll demonstrate
    exactly how the heuristic-based detection approaches discussed throughout this
    book succeed at uncovering the threat, even without prior knowledge of it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我展示了若干个案例研究，涵盖了从正常应用程序出现问题到复杂的国家级攻击等各种情况。在每个案例中，我将演示本书中讨论的基于启发式的检测方法如何成功地揭示威胁，即使事先没有任何相关知识。
- en: Shazam’s Mic Access
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shazam的麦克风访问
- en: 'About a year after the release of OverSight, the webcam and mic monitor detailed
    in [Chapter 12](chapter12.xhtml), I received an email from a user named Phil,
    who wrote the following: “Thanks to OverSight, I was able to figure out why my
    mic was always spying on me. Just to let you know, the Shazam widget keeps the
    microphone active even when you specifically switch the toggle to OFF in their
    app.”'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在OverSight发布约一年后，我收到了一个名叫Phil的用户发来的电子邮件，邮件内容如下：“多亏了OverSight，我才弄明白为什么我的麦克风总是监视我。顺便告诉你，Shazam小部件即使你在应用程序中将切换开关设置为关闭，它仍然保持麦克风处于激活状态。”
- en: Shazam, an app that became popular in the mid-2010s, identifies the name and
    artist of a song while it plays. To confirm Phil’s bold claim (and rule out any
    bugs in OverSight), I decided to investigate the issue. I installed Shazam on
    my Mac, then toggled it on, instructing it to listen. Unsurprisingly, this generated
    an OverSight event indicating that Shazam had activated the computer’s built-in
    microphone.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Shazam是一款在2010年代中期流行的应用程序，它可以在歌曲播放时识别歌曲的名称和艺术家。为了验证Phil的大胆说法（并排除OverSight中可能的bug），我决定调查这个问题。我在我的Mac上安装了Shazam，打开它并指示它开始监听。毫不奇怪，这触发了一个OverSight事件，表明Shazam启动了计算机内建的麦克风。
- en: 'I then toggled Shazam off. Instead of displaying the expected deactivation
    alert, OverSight displayed nothing. To determine whether Shazam was indeed still
    listening, I reverse engineered the app. Examining Shazam’s binary code revealed
    a core class named SHKAudioRecorder and seemingly relevant methods named isRecording
    and stopRecording. In the following debugger output, you can see that I encountered
    an instance of this class at the memory address 0x100729040\. We can introspect
    this SHKAudioRecorder object, and even directly invoke its methods or inspect
    its properties, to see whether Shazam is indeed still recording:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我关闭了Shazam。与预期的禁用警告不同，OverSight没有显示任何内容。为了确认Shazam是否仍在监听，我对该应用程序进行了逆向工程。检查Shazam的二进制代码时，我发现了一个名为SHKAudioRecorder的核心类，并且似乎与其相关的方法命名为isRecording和stopRecording。在以下的调试器输出中，您可以看到我在内存地址0x100729040遇到了这个类的一个实例。我们可以查看这个SHKAudioRecorder对象，甚至直接调用它的方法或检查它的属性，看看Shazam是否真的仍在录音：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Continued analysis revealed that, to stop recording, the stopRecording method
    would invoke Apple’s Core Audio AudioOutputUnitStop function. So far, so good.
    However, further investigation appeared to show that Shazam never actually called
    this method when users toggled off the recording. This strongly implied that Shazam
    kept the mic active and listening! Indeed, as shown in the debugger output, querying
    the isRecording property after toggling Shazam off shows it still set to YES,
    the Objective-C value for true.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步分析显示，要停止录音，stopRecording方法会调用Apple的Core Audio AudioOutputUnitStop函数。到目前为止，一切正常。然而，进一步调查显示，当用户关闭录音时，Shazam实际上从未调用过这个方法。这强烈暗示Shazam保持麦克风处于激活并监听状态！确实，正如调试器输出所示，在关闭Shazam后查询isRecording属性，仍然显示它被设置为YES，这是Objective-C中表示“真”的值。
- en: 'Apparently, when Shazam’s marketing materials claimed the app would “lend its
    ears to your Mac,” they weren’t kidding! I reached out to the company, who told
    me that this undocumented behavior was part of the app’s design, and actually
    benefited the user:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，当Shazam的宣传材料声称该应用程序将“倾听您的Mac”时，他们可不是开玩笑！我联系了公司，他们告诉我，这种未文档化的行为是该应用程序设计的一部分，实际上对用户有益：
- en: Thanks for getting in touch and bringing this to our attention. The iOS and
    Mac apps use a shared SDK, hence the continued recording you are seeing on Mac.
    We use this continued recording on iOS for performance, allowing us to deliver
    faster song matches to users.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 感谢您的联系并向我们报告这个问题。iOS和Mac应用程序使用共享的SDK，因此您在Mac上看到的持续录音情况。我们在iOS上使用这种持续录音是为了性能优化，帮助我们为用户提供更快速的歌曲匹配。
- en: While Shazam initially ignored my concerns, it changed its mind once the media
    got involved, running pieces with headlines such as “Shazam is always listening
    to everything you’re doing”^([1](#chapter14-1)) and “Shhh! Shazam is always listening—even
    when it’s been switched ‘off.’ ”^([2](#chapter14-2)) In response, Shazam pushed
    out an update that turned off the microphone when the app was toggled off.^([3](#chapter14-3))
    (Apparently, though, there really is no such thing as bad publicity; the following
    year, Apple acquired Shazam for $400 million.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Shazam 最初忽视了我的担忧，但当媒体介入后，它改变了态度，发布了诸如“Shazam 总是在监听你所做的一切”^([1](#chapter14-1))
    和“嘘！Shazam 总是在监听——即使它已经被‘关闭’”^([2](#chapter14-2)) 等标题的报道。对此，Shazam 推出了一个更新，使得当应用被切换到关闭状态时，麦克风会被关闭^([3](#chapter14-3))。（然而，显然没有什么叫做坏公关；第二年，苹果以
    4 亿美元收购了 Shazam。）
- en: I designed OverSight to detect malware with mic and webcam spying capabilities,
    such as FruitFly, Crisis, and Mokes, but its malware-agnostic, heuristic-based
    approach has proven extremely versatile, capable also of identifying a major privacy
    issue.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我设计了 OverSight 来检测具有麦克风和摄像头间谍功能的恶意软件，如 FruitFly、Crisis 和 Mokes，但其不针对恶意软件的启发式方法证明了极高的通用性，还能够识别一个主要的隐私问题。
- en: Next, we’ll consider a more conventional example of malware detection.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将考虑一个更常见的恶意软件检测示例。
- en: DazzleSpy Detection
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DazzleSpy 检测
- en: DazzleSpy, a malicious specimen mentioned throughout the book, makes for a great
    case study, as it’s not your average, run-of-the-mill malware. This sophisticated,
    persistent backdoor used zero-day exploits to infect individuals supporting pro-democracy
    causes in Hong Kong.^([4](#chapter14-4)) Intrigued by the malware, I performed
    my own analysis of it^([5](#chapter14-5)) and then considered how security tools
    could have defended against it and other sophisticated macOS threats.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DazzleSpy 是本书中多次提到的恶意样本，它是一个很好的案例研究，因为它不是普通的常见恶意软件。这个复杂且持久的后门利用零日漏洞感染了支持香港民主运动的人士^([4](#chapter14-4))。对这款恶意软件产生兴趣后，我对其进行了自己的分析^([5](#chapter14-5))，并考虑了安全工具如何防范它以及其他复杂的
    macOS 威胁。
- en: Exploit Detection
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 漏洞检测
- en: The tools and techniques presented in this book have predominantly focused on
    detecting malware once it has found its way onto a macOS system. However, these
    approaches can often detect the malware’s initial exploitation vector as well.
    For example, a process monitor that builds process hierarchies may be able to
    detect an exploited browser or word processor spawning a malicious child process.
    This heuristic-based approach to exploit detection is especially important, as
    advanced threat actors increasingly deploy their malware via exploits.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中展示的工具和技术主要集中在检测恶意软件一旦进入 macOS 系统后的情况。然而，这些方法通常也能检测到恶意软件的初始利用向量。例如，一个构建进程层次结构的进程监视器可能能够检测到被利用的浏览器或文字处理器生成了一个恶意的子进程。这种基于启发式的漏洞检测方法尤为重要，因为高级威胁行为者越来越多地通过漏洞部署他们的恶意软件。
- en: 'Before we focus on DazzleSpy’s exploits, let’s consider an attack that leveraged
    a malicious document. Attributed to North Korean nation-state hackers,^([6](#chapter14-6))
    the Word file contained macro code capable of exploiting a macOS system to persistently
    install a backdoor. Here is a snippet of the malicious code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们关注 DazzleSpy 的攻击行为之前，先来看看一起利用恶意文档的攻击事件。该攻击归因于朝鲜国家级黑客，^([6](#chapter14-6))
    该 Word 文件包含能够利用 macOS 系统持久性安装后门的宏代码。以下是恶意代码的一部分：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see that the malicious macro downloads a remote binary, *mt.dat*, via
    curl, sets it to be executable, then spawns it using the popen API. Because the
    malicious macro executes in the context of Word, a process monitor will show curl,
    chmod, and *mt.dat* as children of Word. This, of course, is highly anomalous
    and indicative of an attack.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，恶意宏通过 curl 下载远程二进制文件 *mt.dat*，将其设置为可执行文件，然后使用 popen API 执行它。由于恶意宏是在 Word
    环境中执行的，进程监视器会显示 curl、chmod 和 *mt.dat* 是 Word 的子进程。当然，这种行为是高度异常的，表明这是一起攻击。
- en: In the case of DazzleSpy, the exploit chain is far more complex, but it still
    offers several chances for detection. As part of the chain, an in-memory Mach-O
    executable code downloads the DazzleSpy backdoor to the *$TMPDIR/airportpaird*
    directory. After making the backdoor executable, it uses a privilege escalation
    exploit to remove the com.apple.quarantine extended attribute. This action ensures
    that the operating system will allow the binary to execute without prompts or
    alerts, even though it isn’t notarized.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就 DazzleSpy 而言，漏洞链复杂得多，但它仍然提供了几个检测的机会。作为链的一部分，一段内存中的 Mach-O 可执行代码将 DazzleSpy
    后门下载到 *$TMPDIR/airportpaird* 目录。将后门设为可执行后，它使用特权升级漏洞移除 com.apple.quarantine 扩展属性。此操作确保操作系统允许二进制文件执行，而无需提示或警告，即使它没有通过认证。
- en: As the malicious website hosting the exploit chain is long gone, it’s hard to
    test our detections directly unless we set up our own server hosting the same
    exploits. Still, a security tool leveraging Endpoint Security events should be
    able to readily observe and even thwart many actions taken by the exploit that
    deployed DazzleSpy. For example, as [Chapter 9](chapter9.xhtml) showed, the ES_EVENT_TYPE_AUTH_EXEC
    event type provides a mechanism to authenticate process executions, perhaps blocking
    any that aren’t notarized, especially if the parent is the browser.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于托管漏洞链的恶意网站早已不存在，除非我们自己搭建一个托管相同漏洞的服务器，否则很难直接测试我们的检测方法。不过，利用端点安全事件的安全工具应该能够轻松观察并甚至阻止漏洞利用
    DazzleSpy 部署过程中采取的许多操作。例如，正如[第9章](chapter9.xhtml)所示，ES_EVENT_TYPE_AUTH_EXEC 事件类型提供了一种认证进程执行的机制，或许能阻止任何未认证的进程执行，特别是当父进程是浏览器时。
- en: Other Endpoint Security events related to the deletion of extended attributes
    could catch or even block any process attempting to delete com.apple.quarantine.
    The example code in [Listing 14-1](chapter14.xhtml#Lis14-1) monitors one of these
    events, ES_EVENT_TYPE_NOTIFY_DELETEEXTATTR, to detect any removal of any extended
    attribute.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与删除扩展属性相关的其他端点安全事件可能会捕获或甚至阻止任何试图删除 com.apple.quarantine 的进程。[示例代码 14-1](chapter14.xhtml#Lis14-1)
    监视其中一个事件，ES_EVENT_TYPE_NOTIFY_DELETEEXTATTR，以检测任何扩展属性的移除。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 14-1: Detecting the removal of the quarantine attribute'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 14-1：检测隔离属性的移除
- en: 'We first specify the event of interest, ES_EVENT_TYPE_NOTIFY_DELETEEXTATTR,
    which will notify us of the removal of any extended attributes ❶. (You could also
    use the authorization event ES_EVENT_TYPE_AUTH_DELETEEXTATTR to block the removal
    altogether.) This notification event will trigger the callback block ❷, where
    we extract the responsible process, its filepath, and any extended attributes
    that the code deleted. We can extract this information from a structure named
    deleteextattr found in the Endpoint Security event. This structure, of type es_event_deleteextattr_t,
    is defined in *ESMessage.h* and has the following members:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先指定感兴趣的事件，ES_EVENT_TYPE_NOTIFY_DELETEEXTATTR，它会在任何扩展属性被移除时通知我们 ❶。（你也可以使用授权事件
    ES_EVENT_TYPE_AUTH_DELETEEXTATTR 来完全阻止移除操作。）这个通知事件会触发回调块 ❷，在其中我们提取责任进程、其文件路径和代码删除的任何扩展属性。我们可以从名为
    deleteextattr 的结构中提取这些信息，该结构位于端点安全事件中。该结构类型为 es_event_deleteextattr_t，在 *ESMessage.h*
    中定义，具有以下成员：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When downloaded, whether through a browser exploit chain or manually, DazzleSpy’s
    airportpaird binary will have the com.apple.quarantine extended attribute set.
    You can confirm this with the xattr command, executed with the -l command line
    flag:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过浏览器漏洞链或手动下载时，DazzleSpy 的 airportpaird 二进制文件会设置 com.apple.quarantine 扩展属性。你可以通过执行带有
    -l 命令行标志的 xattr 命令来确认这一点：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To manually mimic the exploit, delete this attribute by running xattr with
    the -d flag:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 若要手动模拟该漏洞，可以通过运行带有 -d 标志的 xattr 删除此属性：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the monitoring code we wrote in [Listing 14-1](chapter14.xhtml#Lis14-1)
    is running, you’ll receive the following alert:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在[示例代码 14-1](chapter14.xhtml#Lis14-1)中编写的监控代码正在运行，你将收到以下警报：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Many other malware samples remove the com.apple.quarantine extended attribute,
    including CoinTicker, OceanLotus, and XCSSET.^([7](#chapter14-7)) It’s worth noting,
    however, that legitimate applications, such as installers, may also remove this
    attribute, so you shouldn’t treat a single observation as the sole reason for
    classifying an item as malicious.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他恶意软件样本会移除 com.apple.quarantine 扩展属性，包括 CoinTicker、OceanLotus 和 XCSSET。^([7](#chapter14-7))
    然而，值得注意的是，合法应用程序（如安装程序）也可能会移除该属性，因此不应仅凭一次观察就将某个项目分类为恶意。
- en: Persistence
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 持久性
- en: 'It’s also easy to detect DazzleSpy by taking a behavior-based approach focusing
    on the malware’s persistence and network access. Let’s start by detecting its
    persistence, one of the best ways to detect malware. The following decompilation
    shows DazzleSpy’s installDaemon method installing and persisting it as a launch
    agent:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过专注于恶意软件的持久性和网络访问行为，采用基于行为的检测方法，DazzleSpy 也很容易被检测到。让我们从检测其持久性开始，这是检测恶意软件的最佳方法之一。以下反编译片段显示
    DazzleSpy 的 installDaemon 方法将其安装并作为启动代理持久化：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see that malware first makes a copy of itself to *~/.local/softwareupdate*,
    then persists this copy by using the *com.apple.softwareupdate.plist* launch agent
    property list.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，恶意软件首先将自身复制到 *~/.local/softwareupdate*，然后通过使用 *com.apple.softwareupdate.plist*
    启动代理属性列表使该副本持久化。
- en: 'A file monitor that has subscribed to file I/O Endpoint Security events such
    as ES_EVENT_TYPE_NOTIFY_CREATE can easily observe this behavior and detect DazzleSpy
    when it persists. For example, here is the output of the file monitor discussed
    in [Chapter 8](chapter8.xhtml):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个订阅了文件 I/O 端点安全事件（如 ES_EVENT_TYPE_NOTIFY_CREATE）的文件监视器可以轻松观察到这种行为，并在 DazzleSpy
    持久化时检测到它。例如，这里是 [第 8 章](chapter8.xhtml) 中讨论的文件监视器的输出：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once DazzleSpy has persisted, we can also view the contents of its *com.apple.softwareupdate.plist*
    launch agent property list:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 DazzleSpy 持久化，我们还可以查看其 *com.apple.softwareupdate.plist* 启动代理属性列表的内容：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The ProgramArguments key confirms the path to the persistence location of the
    malicious binary we saw in the decompilation. Also, you can see that the RunAtLoad
    key is set to true, meaning that each time the user logs in (at which point the
    operating system examines launch agents), macOS will automatically restart the
    malware.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ProgramArguments 键确认了我们在反编译中看到的恶意二进制文件持久化位置的路径。同时，你可以看到 RunAtLoad 键被设置为 true，这意味着每次用户登录时（此时操作系统会检查启动代理），macOS
    会自动重新启动恶意软件。
- en: BlockBlock could easily detect this persistence via Endpoint Security file events
    or the newer ES_EVENT_TYPE_NOTIFY_BTM_LAUNCH_ITEM_ADD event. Also, because traditional
    antivirus products have improved their detections, KnockKnock’s VirusTotal integrations
    will now highlight DazzleSpy as malicious, but even if the antivirus signatures
    failed to flag DazzleSpy as malware (as they did when the malware was initially
    deployed), KnockKnock could detect DazzleSpy’s persistent launch agent, as its
    Background Task Management plug-in reveals all installed launch items.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: BlockBlock 可以通过端点安全文件事件或更新后的 ES_EVENT_TYPE_NOTIFY_BTM_LAUNCH_ITEM_ADD 事件轻松检测到这种持久性。此外，由于传统的防病毒产品已经改进了检测能力，KnockKnock
    的 VirusTotal 集成现在会将 DazzleSpy 标记为恶意软件，但即使防病毒签名未能标记 DazzleSpy 为恶意软件（就像恶意软件最初部署时那样），KnockKnock
    仍能检测到 DazzleSpy 的持久化启动代理，因为其后台任务管理插件揭示了所有已安装的启动项。
- en: Furthermore, notice the *com.apple* prefix to the property list, which suggests
    that the binary is an Apple updater. Apple hasn’t signed the item, however; in
    fact, the binary is wholly unsigned. (KnockKnock indicates this by showing a question
    mark next to the item’s name.) Taking all this information into consideration,
    we can conclude that the item is likely malicious and requires thorough investigation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意属性列表中的*com.apple*前缀，这表明该二进制文件是一个 Apple 更新程序。然而，Apple 并未签署该项；事实上，该二进制文件完全没有签名。（KnockKnock
    通过在项目名称旁边显示问号来指示这一点。）考虑到所有这些信息，我们可以得出结论，该项很可能是恶意的，需要彻底调查。
- en: Network Access
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络访问
- en: 'Unauthorized network access is yet another great way to detect malware, and
    DazzleSpy is no exception. To receive tasking, DazzleSpy connects to the attacker’s
    command-and-control server at 88.218.192.128\. The following snippet of decompilation
    shows this address is hardcoded into the malware, along with the port, 5633:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 未经授权的网络访问是检测恶意软件的又一种有效方式，DazzleSpy 也不例外。为了接收任务，DazzleSpy 会连接到攻击者的指挥与控制服务器 88.218.192.128\.
    以下反编译片段显示该地址已被硬编码到恶意软件中，同时包括端口 5633：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A network monitor like LuLu, which uses the techniques mentioned in [Chapter
    7](chapter7.xhtml), could easily detect this network access. In its alert, LuLu
    would capture the unauthorized *softwareupdate* program’s attempt to connect to
    a remote server listening on a nonstandard port. It would also show that the program
    isn’t signed with a trusted certificate or notarized and that it runs from a hidden
    directory. Put together, these red flags certainly warrant a closer inspection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 像LuLu这样的网络监控工具，可以利用[第7章](chapter7.xhtml)中提到的技术，轻松检测到这种网络访问。在其警报中，LuLu将捕获到未经授权的*softwareupdate*程序试图连接到一个非标准端口上监听的远程服务器。它还会显示该程序没有使用受信任的证书签名或公证，并且它是从一个隐藏目录中运行的。将这些红旗信号结合起来，确实值得进行更深入的检查。
- en: The 3CX Supply Chain Attack
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3CX供应链攻击
- en: 'This last case study pits our tools and techniques against what are widely
    considered to be some of the most challenging attacks to detect: supply chain
    attacks. These damaging cybersecurity incidents can infect a massive number of
    unsuspecting users by compromising trusted software. Although most supply chain
    attacks impact Windows-based computers, there has been a noticeable uptick of
    such attacks against the open source community^([8](#chapter14-8)) and macOS.
    Here, we’ll focus on the 2023 nation-state attack discussed several times in the
    book, which targeted the popular private branch exchange (PBX) software provider
    3CX.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的这个案例研究将我们的工具和技术与被广泛认为是最难检测的攻击之一——供应链攻击——进行了对比。这些破坏性的网络安全事件通过破坏受信任的软件，能够感染大量毫无防备的用户。尽管大多数供应链攻击影响的是基于Windows的计算机，但针对开源社区^([8](#chapter14-8))和macOS的此类攻击明显增加。在这里，我们将重点讨论书中多次提到的2023年国家级攻击，该攻击目标是流行的私人分支交换（PBX）软件提供商3CX。
- en: Believed to be the first *chained* supply chain attack (in which the attackers
    gained initial access to 3CX through a separate supply chain attack), attackers
    subverted both the Windows and Mac versions of 3CX’s application. The attackers
    then signed the trojanized application with 3CX’s own developer certificate and
    submitted it to Apple, which inadvertently notarized it. Finally, macOS enterprise
    users downloaded the subverted application en masse, without suspecting that anything
    was amiss.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是首个*链式*供应链攻击（攻击者通过另一个供应链攻击获取了对3CX的初步访问权限），攻击者破坏了3CX的Windows和Mac版本应用程序。随后，攻击者使用3CX自己的开发者证书签署了被篡改的应用程序，并提交给苹果，苹果无意中为其进行了公证。最终，macOS企业用户在毫无察觉的情况下大量下载了被篡改的应用程序。
- en: Supply chain attacks are incredibly difficult to detect. The legitimate macOS
    3CX application contained more than 400MB of code spread across more than 100
    files, so identifying a malicious component to confirm its subversion was like
    searching for a needle in a haystack. You can read more about this search in my
    write-up, where I both confirmed the subversion of the macOS app and pinpointed
    the single library within the app that hosted the attacker’s malicious code.^([9](#chapter14-9))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 供应链攻击非常难以检测。合法的macOS 3CX应用程序包含超过400MB的代码，分布在100多个文件中，因此要识别恶意组件并确认其被篡改，就像大海捞针。你可以在我的文章中阅读更多关于这次搜索的内容，在那里我既确认了macOS应用程序的篡改，也找到了该应用程序中承载攻击者恶意代码的单一库。^([9](#chapter14-9))
- en: 'Understandably, even large cybersecurity companies struggle with such detections:
    SentinelOne initially noted that it couldn’t confirm whether the macOS version
    of the 3CX app was impacted by the attack.^([10](#chapter14-10)) Also, Apple’s
    scans missed the subversion of the infected installer, resulting in the inadvertent
    granting of a notarization ticket.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以理解的是，即使是大型网络安全公司也很难进行此类检测：SentinelOne最初指出，它无法确认macOS版本的3CX应用程序是否受到攻击的影响。^([10](#chapter14-10))
    此外，苹果的扫描未能发现感染的安装程序被篡改，从而导致意外授予了公证凭证。
- en: Still, it’s quite possible to detect supply chain attacks by observing anomalous
    or unusual behaviors. CrowdStrike, the first organization to confirm the 3CX attack
    on Windows,^([11](#chapter14-11)) used this behavior-based approach.^([12](#chapter14-12))
    Let’s consider the detection methods that could uncover this and other supply
    chain attacks. When taken together, various anomalies paint a very clear picture
    that something is amiss.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，通过观察异常或不寻常的行为，仍然很有可能检测到供应链攻击。CrowdStrike是第一个确认3CX在Windows上遭遇攻击的组织，^([11](#chapter14-11))
    他们采用了这种基于行为的方法。^([12](#chapter14-12)) 让我们来考虑一下那些能够揭露这一攻击及其他供应链攻击的检测方法。将各种异常现象结合起来，能够清晰地描绘出问题的存在。
- en: File Monitoring
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件监控
- en: 'The malicious code added to the 3CX app’s legitimate *libffmpeg.dylib* library
    had two simple goals: gather information about the infected host, then download
    and execute a second-stage payload. As part of the first activity, the malware
    also generated an identifier to uniquely identify the infected host and wrote
    it to a hidden, encrypted file, *.main_storage*.^([13](#chapter14-13)) Here is
    a snippet of decompilation from a function in the subverted *libffmpeg.dylib*
    library that opens the file, encrypts the information, and then writes it to disk:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到3CX应用程序合法*libffmpeg.dylib*库中的恶意代码有两个简单的目标：收集感染主机的信息，然后下载并执行第二阶段的有效载荷。作为第一步活动的一部分，恶意软件还生成了一个标识符来唯一标识感染的主机，并将其写入一个隐藏的加密文件*.main_storage*。^([13](#chapter14-13))
    下面是一个来自被篡改的*libffmpeg.dylib*库中的反编译代码片段，该函数打开文件、加密信息并将其写入磁盘：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the decompilation, you can see the file being opened with the fopen API ❶.
    The filename is hardcoded in the malware but not shown in the decompilation, as
    the code dynamically creates the full path and then passes it into the function.
    Once it has opened the file, the malware XOR encrypts a buffer pointed to by the
    r14 register using a hardcoded key, 0x7a ❷. Then it writes the encrypted buffer
    to the file with the fwrite API ❸.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在反编译中，你可以看到文件是通过fopen API ❶打开的。文件名在恶意软件中是硬编码的，但在反编译中未显示，因为代码动态生成完整路径并将其传递给该函数。一旦文件被打开，恶意软件就会使用硬编码的密钥0x7a
    ❷，对由r14寄存器指向的缓冲区进行XOR加密。然后，它通过fwrite API ❸将加密后的缓冲区写入文件。
- en: 'Using a file monitor, you could observe the malware opening and writing to
    this hidden file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件监控工具，你可以观察到恶意软件打开并写入这个隐藏文件：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you manually examine *.main_storage* with the macOS hexdump utility, you
    can see that it clearly appears obfuscated or encrypted:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手动使用macOS的hexdump工具检查*.main_storage*，你会看到它明显被混淆或加密：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By flagging the creation of hidden files, especially those that contain encrypted
    content, we’d quickly notice that the 3CX application was acting very strangely.
    One way to detect that a file is encrypted is to compute the file’s entropy. This
    process is computationally intensive, so we wouldn’t want to do this for every
    file, but checking hidden files might be a good start!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标记隐藏文件的创建，特别是那些包含加密内容的文件，我们很快就能注意到3CX应用程序表现得非常异常。检测文件是否被加密的一种方法是计算文件的熵值。这个过程计算量大，因此我们不希望对每个文件都进行此操作，但检查隐藏文件可能是一个好的起点！
- en: Network Monitoring
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络监控
- en: Once the malware has generated an ID for the victim and completed a basic survey
    of the infected system, it sends this information to its command-and-control server.
    The resulting network traffic gives us yet another heuristic with which to detect
    that something is amiss. However, the 3CX application accesses the network to
    accomplish its legitimate functionality, so to detect its subversion, we’d need
    to observe it communicating with new, malicious endpoints.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意软件为受害者生成了ID并完成了对感染系统的基本调查，它会将这些信息发送到其指挥与控制服务器。由此产生的网络流量给我们提供了另一个启发式方法，用于检测是否发生了异常。然而，3CX应用程序也会访问网络来完成其合法功能，因此要检测其恶意行为，我们需要观察它与新的恶意端点的通信。
- en: 'In fact, this is how users noticed the supply chain attack in the first place.
    The first reports of odd behavior appeared on 3CX forums, where customers posted
    about unusual network traffic emanating from the application. For example, one
    customer noticed a connection to the *msstorageboxes.com* DNS host, an unrecognized
    domain that had just been registered in Reykjavik.^([14](#chapter14-14)) The DNSMonitor
    tool described in [Chapter 13](chapter13.xhtml) lets us observe this DNS traffic:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这就是用户最初发现供应链攻击的方式。关于异常行为的首个报告出现在3CX论坛上，客户在论坛中发布了关于应用程序发出异常网络流量的帖子。例如，一位客户注意到与*msstorageboxes.com*
    DNS主机的连接，这个域名是一个新注册的、不被识别的域名，位于雷克雅未克。^([14](#chapter14-14)) [第13章](chapter13.xhtml)中描述的DNSMonitor工具让我们能够观察到这些DNS流量：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These two requests attempt to resolve the domains *1648.3cx.cloud* and *msstorageboxes.com*.
    How might you classify these endpoints as legitimate or anomalous? As discussed
    in the previous chapter, general approaches include examining historical DNS records,
    WHOIS data, and any SSL/TLS certificates.^([15](#chapter14-15)) These data points
    look normal for the *3cx.cloud* domain (which is part of 3CX’s infrastructure),
    but the *msstorageboxes.com* domain raises some serious red flags.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个请求尝试解析域名*1648.3cx.cloud*和*msstorageboxes.com*。你如何判断这些端点是合法的还是异常的？正如上一章所讨论的，一般方法包括检查历史DNS记录、WHOIS数据以及任何SSL/TLS证书。^([15](#chapter14-15))
    这些数据点对于*3cx.cloud*域名来说看起来是正常的（该域名是3CX基础设施的一部分），但*msstorageboxes.com*域名则引起了一些严重的警报。
- en: Process Monitoring
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进程监控
- en: 'Once the malicious code in *libffmpeg.dylib* has resolved the address of the
    command-and-control server, it checks in with the server by submitting the generated
    UUID and basic survey data it has collected from the infected host. Then it downloads
    and executes a second-stage payload, which provides even more opportunities to
    heuristically detect this stealthy attack. The following snippet of decompiled
    code from *libffmpeg.dylib* shows the malware writing out the second-stage payload
    and then executing it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦*libffmpeg.dylib*中的恶意代码解析了命令与控制服务器的地址，它便会向服务器发送生成的UUID和从受感染主机收集的基本调查数据。然后，它会下载并执行第二阶段的有效载荷，这为启发式检测这种隐蔽攻击提供了更多的机会。以下是来自*libffmpeg.dylib*的反编译代码片段，显示了恶意软件写出第二阶段有效载荷并执行它的过程：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The malware builds a full path for the payload within the 3CX desktop app’s
    *Application Support* directory. You can see that the name of the payload is hardcoded
    as UpdateAgent ❶. Next, it opens the file in write binary mode ❷ and writes the
    bytes of the payload it received from the attackers’ command-and-control server
    ❸. After changing its permissions to executable ❹, the malware invokes the sprintf
    API to create a buffer with the path to the saved UpdateAgent binary stored in
    the r13 register ❺ and the suffix >/dev/null 2>&1. This suffix, not shown in the
    decompilation, will redirect any output or errors from the payload to */dev/null*.
    Finally, the malware executes the payload ❻.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件在3CX桌面应用程序的*Application Support*目录中为有效载荷构建了完整路径。你可以看到有效载荷的名称被硬编码为UpdateAgent
    ❶。接下来，它以写入二进制模式打开该文件 ❷，并写入它从攻击者的命令与控制服务器收到的有效载荷字节 ❸。在将其权限更改为可执行 ❹ 后，恶意软件调用sprintf
    API以创建一个包含保存的UpdateAgent二进制文件路径的缓冲区，该路径存储在r13寄存器中 ❺，并附加后缀>/dev/null 2>&1。此后缀未在反编译中显示，它会将有效载荷的任何输出或错误重定向到*/dev/null*。最后，恶意软件执行该有效载荷
    ❻。
- en: By the time researchers discovered the supply chain attack, the attackers’ command-and-control
    servers were offline, so we can’t observe the attack in real time. However, we
    could emulate it by configuring a host to resolve msstorageboxes.com to a server
    we control, then serve a sample of the second-stage payload from an infected victim.
    This setup would allow us to understand what information our monitoring tools
    could capture about this surreptitious infection.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当研究人员发现供应链攻击时，攻击者的命令与控制服务器已经下线，因此我们无法实时观察该攻击。然而，我们可以通过配置主机，将msstorageboxes.com解析为我们控制的服务器，然后从受感染的受害者那里提供第二阶段有效载荷样本来模拟该攻击。这个设置将使我们了解我们的监控工具能捕获到有关这次隐秘感染的哪些信息。
- en: 'For example, the process monitoring code from [Chapter 8](chapter8.xhtml) would
    capture the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[第8章](chapter8.xhtml)中的进程监控代码将捕获以下内容：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Recall that the popen API executed the second-stage payload in the shell. Even
    so, its parent ID (in this instance, 40029) will still identify the 3CX desktop
    app instance. The fact that the 3CX desktop app is spawning additional processes
    is slightly suspicious; the fact that this process’s binary, *UpdateAgent*, is
    signed in an ad hoc manner, rather than with a trusted certificate, is a huge
    red flag:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 记得popen API在shell中执行了第二阶段的有效载荷。即便如此，它的父进程ID（在此实例中为40029）仍然能够识别3CX桌面应用程序实例。3CX桌面应用程序生成额外进程的事实稍显可疑；更为严重的是，该进程的二进制文件*UpdateAgent*是以临时方式签名的，而不是使用受信任的证书，这一点是一个巨大的警告信号：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As in the case of DazzleSpy, initial payloads are often signed with a developer
    certificate as well as notarized, allowing them to run with ease on recent versions
    of macOS. However, secondary payloads often aren’t. Nor do they need to be, if
    they’re downloaded and executed by malicious code running on the operating system.
    However, most legitimate software is signed, so you should closely examine any
    non-notarized third-party software, or even block it altogether.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如同 DazzleSpy 的情况一样，初始有效负载通常会使用开发者证书签名并且经过公证，允许它们在较新的 macOS 版本上顺利运行。然而，二级有效负载通常不会这样做。如果它们是由操作系统中运行的恶意代码下载并执行的，那么就不需要签名和公证了。然而，大多数合法软件都会进行签名，因此你应该仔细检查任何未经公证的第三方软件，甚至可以完全阻止它的执行。
- en: Currently, BlockBlock blocks only non-notarized software that macOS has quarantined.
    However, you could modify the tool to allow only notarized third-party software
    to execute. To do so, you could register an Endpoint Security client and subscribe
    to ES_EVENT_TYPE_AUTH_EXEC events. If a new process is validly signed and notarized,
    you could return ES_AUTH_RESULT_ALLOW to allow it to execute. Otherwise, you could
    return the value ES_AUTH_RESULT_DENY, blocking the process. Keep in mind, however,
    that core platform binaries aren’t notarized.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，BlockBlock 只会阻止 macOS 已经隔离的未经公证的软件。然而，你可以修改该工具，仅允许公证的第三方软件执行。为此，你可以注册一个 Endpoint
    Security 客户端并订阅 ES_EVENT_TYPE_AUTH_EXEC 事件。如果新进程是有效签名并且经过公证，你可以返回 ES_AUTH_RESULT_ALLOW
    以允许其执行。否则，你可以返回 ES_AUTH_RESULT_DENY 来阻止该进程。不过，请记住，核心平台二进制文件并未经过公证。
- en: 'BlockBlock always allows platform binaries, which you can identify using the
    is_platform_binary member of the Endpoint Security es_process_t structure. Also,
    applications from the official Mac App Store aren’t notarized, although Apple
    scans them for malware. To determine whether an application came from the Mac
    App store, use the following requirement string: anchor apple generic and certificate
    leaf [subject.CN] = \"Apple Mac OS Application Signing\".'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: BlockBlock 始终允许平台二进制文件，你可以通过 Endpoint Security es_process_t 结构体中的 is_platform_binary
    成员来识别它们。此外，来自官方 Mac App Store 的应用程序并未经过公证，尽管 Apple 会对它们进行恶意软件扫描。要判断某个应用程序是否来自
    Mac App Store，请使用以下要求字符串：anchor apple generic and certificate leaf [subject.CN]
    = \"Apple Mac OS Application Signing\"。
- en: Capturing Self-Deletion
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 捕获自我删除
- en: 'The *UpdateAgent* binary performs other suspicious actions we could detect.
    For example, it self-deletes. After forking, the child instance invokes the unlink
    API with the value argv[0], which holds the path of the process’s binary:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*UpdateAgent* 二进制文件执行了其他我们可以检测到的可疑操作。例如，它会自我删除。在分叉后，子进程调用 unlink API，并传入 argv[0]，该值保存了进程二进制文件的路径：'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Malware is rather fond of self-deletion, as removing the binary from disk can
    often thwart analysis. Even for security tools, macOS doesn’t provide an effective
    way to capture memory images of running processes. In fact, at least one security
    company whose product tracked process launches failed to obtain the *UpdateAgent*
    binary, which had self-deleted by the time an analyst tried manually to collect
    it. Similarly, traditional signature-based antivirus scanners require an on-disk
    file to scan and will fail if they don’t find one. Luckily an anonymous user was
    kind enough to share the binary with me, leading to its detailed analysis in my
    write-up.^([16](#chapter14-16))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件非常喜欢自我删除，因为从磁盘上移除二进制文件往往能阻碍分析。即便是安全工具，macOS 也没有提供有效的方法来捕捉正在运行的进程的内存镜像。事实上，至少有一家安全公司，其产品跟踪进程启动，但未能获取到
    *UpdateAgent* 二进制文件，因为当分析人员试图手动收集它时，它已经自我删除。同样，传统的基于签名的病毒扫描器需要扫描磁盘上的文件，如果没有找到文件，它们将无法执行扫描。幸运的是，一位匿名用户非常慷慨地与我分享了该二进制文件，使得我能够对其进行详细分析，并写出了相关报告。^([16](#chapter14-16))
- en: 'For heuristic-based detection approaches, however, self-deleted binaries are
    both easy to detect and a big red flag. Detecting self-deleted binaries is easy
    to do with a file monitor: just look for a deletion event in which the process
    path matches the path of the file being deleted, as in the following output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于启发式的检测方法，自我删除的二进制文件既容易被检测到，也是一个明显的警告信号。通过文件监控来检测自我删除的二进制文件非常简单：只需查找删除事件，其中进程路径与被删除文件的路径匹配，如以下输出所示：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that the two paths to the *UpdateAgent* binary match.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个 *UpdateAgent* 二进制文件的路径一致。
- en: '#### Detecting Exfiltration'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 检测外泄'
- en: 'After self-deleting, *UpdateAgent* extracts information from both a legitimate
    3CX configuration file and the *.main_storage* file created by the first-stage
    component, *libffmpeg.dylib*. In its send_post function, the malware then transmits
    this information to another command-and-control server, *sbmsa.wiki*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自删除后，*UpdateAgent*从一个合法的3CX配置文件和由第一阶段组件*libffmpeg.dylib*创建的*.main_storage*文件中提取信息。在其send_post函数中，恶意软件将这些信息发送到另一个命令和控制服务器*sbmsa.wiki*：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This transmission is arguably the easiest action of the entire supply chain
    attack to detect and, more importantly, to classify as anomalous, for many of
    the reasons already discussed. First, a network extension (such as DNSMonitor)
    can easily detect a new network event and tie it back to the responsible process.
    In this case, the responsible process, *UpdateAgent*, was recently installed,
    signed in an ad hoc manner, and non-notarized. Moreover, the process has self-deleted.
    Finally, the domain *sbmsa.wiki* appears suspicious due to characteristics such
    as a lack of historical DNS records, choice of registrar, and more.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这次传输无疑是整个供应链攻击中最容易检测的行为，而且更重要的是，可以将其归类为异常，这一点基于许多前面已经讨论的原因。首先，网络扩展（例如DNSMonitor）可以轻松检测到新的网络事件，并将其与相应的进程关联。在本例中，负责的进程*UpdateAgent*是最近安装的，采用临时签名并且未经过公证。此外，该进程已自删除。最后，域名*sbmsa.wiki*显得可疑，原因包括缺乏历史DNS记录、选择的注册商等。
- en: The alert from LuLu shown in [Figure 14-1](chapter14.xhtml#fig14-1), triggered
    by the malware attempting to connect to the attacker’s remote server, captures
    many of these anomalies. For instance, strikethrough process names indicate self-deletion,
    while the perplexed frowning face signifies that the malware has an untrusted
    signature.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: LuLu发出的警报（见[图14-1](chapter14.xhtml#fig14-1)），由恶意软件尝试连接攻击者的远程服务器触发，捕获了这些异常现象。例如，带删除线的进程名称表示自删除，而困惑的皱眉符号则表明该恶意软件具有不可信的签名。
- en: '![](../images/Figure14-1.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure14-1.jpg)'
- en: 'Figure 14-1: A LuLu alert shows a self-deleted binary with an untrusted signature
    attempting to access the network.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-1：LuLu警报显示一个具有不可信签名的自删除二进制文件尝试访问网络。
- en: 'Supply chain attacks are notorious for being very challenging to detect and
    having an extensive impact. Nevertheless, as demonstrated here, monitoring tools
    that leverage heuristics can identify anomalous behaviors associated with these
    complex attacks, leading to their detection.  ### Conclusion'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 供应链攻击因其非常难以检测且影响广泛而臭名昭著。然而，正如这里所示，利用启发式方法的监控工具可以识别与这些复杂攻击相关的异常行为，从而实现其检测。###
    结论
- en: Whenever we make bold claims about our tools’ detection capabilities, especially
    regarding yet-to-be-discovered threats, we must back them up. In this last chapter,
    we pitted the tools and detection approaches presented throughout the book against
    the latest and most insidious threats targeting macOS systems. Although we didn’t
    have prior knowledge of these threats, our heuristic-based detections performed
    admirably. This confirms the power of behavior-based heuristics in identifying
    both existing and emerging threats, as we’ve demonstrated in this final section
    and throughout the book. More importantly, you now have the knowledge and skills
    to write your own tools and heuristics, empowering you to defend against even
    the most sophisticated macOS threats of the future.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们对工具的检测能力做出大胆声明时，特别是对于尚未发现的威胁，我们必须为这些声明提供支持。在本章最后，我们将本书中介绍的工具和检测方法与针对macOS系统的最新且最隐蔽的威胁进行对抗。虽然我们事先并不知道这些威胁，但基于启发式的方法的检测表现出色。这确认了基于行为的启发式方法在识别现有和新兴威胁方面的强大能力，正如我们在本章最后以及全书中所展示的那样。更重要的是，现在你已经具备了编写自己工具和启发式方法的知识和技能，能够应对未来即使是最复杂的macOS威胁。
- en: Notes
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '[  1](#chapter14_1).  “Shazam Is Always Listening to Everything You’re Doing,”
    *New York Post*, November 11, 2016, [*https://<wbr>nypost<wbr>.com<wbr>/2016<wbr>/11<wbr>/15<wbr>/shazam<wbr>-is<wbr>-always<wbr>-listening<wbr>-to<wbr>-everything<wbr>-youre<wbr>-doing<wbr>/*](https://nypost.com/2016/11/15/shazam-is-always-listening-to-everything-youre-doing/).'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  1](#chapter14_1).  “Shazam一直在监听你所做的一切，”*纽约邮报*，2016年11月11日，[*https://<wbr>nypost<wbr>.com<wbr>/2016<wbr>/11<wbr>/15<wbr>/shazam<wbr>-is<wbr>-always<wbr>-listening<wbr>-to<wbr>-everything<wbr>-youre<wbr>-doing<wbr>/*](https://nypost.com/2016/11/15/shazam-is-always-listening-to-everything-youre-doing/).'
- en: '[  2](#chapter14_2).  John Leyden, “Shhh! Shazam Is Always Listening—Even When
    It’s Been Switched ‘Off,’ ” *The Register*, November 16, 2016, [*https://<wbr>www<wbr>.theregister<wbr>.com<wbr>/2016<wbr>/11<wbr>/15<wbr>/shazam<wbr>_listening<wbr>/*](https://www.theregister.com/2016/11/15/shazam_listening/).'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  2](#chapter14_2).  John Leyden, “嘘！Shazam 总是处于监听状态——即使它已经被‘关闭’了，” *The Register*，2016年11月16日，[*https://www.theregister.com/2016/11/15/shazam_listening/*](https://www.theregister.com/2016/11/15/shazam_listening/).'
- en: '[  3](#chapter14_3).  You can read more about the reversing of the Shazam faux
    pas in Patrick Wardle, “Forget the NSA, It’s Shazam That’s Always Listening!”
    Objective-See, November 14, 2016, [*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>/blog<wbr>_0x13<wbr>.html*](https://objective-see.org/blog/blog_0x13.html).'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  3](#chapter14_3).  你可以在 Patrick Wardle 的文章《忘记 NSA 吧，Shazam 才是一直在监听！》中阅读更多关于
    Shazam 失误反转的内容，Objective-See，2016年11月14日，[*https://objective-see.org/blog/blog_0x13.html*](https://objective-see.org/blog/blog_0x13.html).'
- en: '[  4](#chapter14_4).  Marc-Etienne M. Léveillé and Anton Cherepanov, “Watering
    Hole Deploys New macOS Malware, DazzleSpy, in Asia,” *WeLiveSecurity*, January
    25, 2022, [*https://<wbr>www<wbr>.welivesecurity<wbr>.com<wbr>/2022<wbr>/01<wbr>/25<wbr>/watering<wbr>-hole<wbr>-deploys<wbr>-new<wbr>-macos<wbr>-malware<wbr>-dazzlespy<wbr>-asia<wbr>/*](https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/).'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  4](#chapter14_4).  Marc-Etienne M. Léveillé 和 Anton Cherepanov, “Watering
    Hole 在亚洲部署新的 macOS 恶意软件 DazzleSpy，” *WeLiveSecurity*，2022年1月25日，[*https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/*](https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/).'
- en: '[  5](#chapter14_5).  Patrick Wardle, “Analyzing OSX.DazzleSpy,” Objective-See,
    January 25, 2022, [*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>/blog<wbr>_0x6D<wbr>.html*](https://objective-see.org/blog/blog_0x6D.html).'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  5](#chapter14_5).  Patrick Wardle, “分析 OSX.DazzleSpy，” Objective-See，2022年1月25日，[*https://objective-see.org/blog/blog_0x6D.html*](https://objective-see.org/blog/blog_0x6D.html).'
- en: '[  6](#chapter14_6).  Phil Stokes, “Lazarus APT Targets Mac Users with Poisoned
    Word Document,” SentinelOne, April 25, 2019, [*https://<wbr>www<wbr>.sentinelone<wbr>.com<wbr>/labs<wbr>/lazarus<wbr>-apt<wbr>-targets<wbr>-mac<wbr>-users<wbr>-with<wbr>-poisoned<wbr>-word<wbr>-document<wbr>/*](https://www.sentinelone.com/labs/lazarus-apt-targets-mac-users-with-poisoned-word-document/).'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  6](#chapter14_6).  Phil Stokes, “Lazarus APT 通过毒害的 Word 文档攻击 Mac 用户，” SentinelOne，2019年4月25日，[*https://www.sentinelone.com/labs/lazarus-apt-targets-mac-users-with-poisoned-word-document/*](https://www.sentinelone.com/labs/lazarus-apt-targets-mac-users-with-poisoned-word-document/).'
- en: '[  7](#chapter14_7).  “Subvert Trust Controls: Gatekeeper Bypass,” Mitre Attack,
    [*https://<wbr>attack<wbr>.mitre<wbr>.org<wbr>/techniques<wbr>/T1553<wbr>/001<wbr>/*](https://attack.mitre.org/techniques/T1553/001/).'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  7](#chapter14_7).  “颠覆信任控制：绕过 Gatekeeper，” Mitre Attack，[*https://attack.mitre.org/techniques/T1553/001/*](https://attack.mitre.org/techniques/T1553/001/).'
- en: '[  8](#chapter14_8).  “Malicious Code Discovered in Linux Distributions,” *Kaspersky*,
    March 31, 2024, [*https://<wbr>www<wbr>.kaspersky<wbr>.com<wbr>/blog<wbr>/cve<wbr>-2024<wbr>-3094<wbr>-vulnerability<wbr>-backdoor<wbr>/50873<wbr>/*](https://www.kaspersky.com/blog/cve-2024-3094-vulnerability-backdoor/50873/).'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  8](#chapter14_8).  “在 Linux 发行版中发现恶意代码，” *Kaspersky*，2024年3月31日，[*https://www.kaspersky.com/blog/cve-2024-3094-vulnerability-backdoor/50873/*](https://www.kaspersky.com/blog/cve-2024-3094-vulnerability-backdoor/50873/).'
- en: '[  9](#chapter14_9).  Patrick Wardle, “Ironing Out (the macOS) Details of a
    Smooth Operator (Part I),” Objective-See, March 29, 2023, [*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>/blog<wbr>_0x73<wbr>.html*](https://objective-see.org/blog/blog_0x73.html).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  9](#chapter14_9).  Patrick Wardle, “完善 (macOS) 细节：一个平稳操作的细节（第一部分）”，Objective-See，2023年3月29日，[*https://objective-see.org/blog/blog_0x73.html*](https://objective-see.org/blog/blog_0x73.html).'
- en: '[10](#chapter14_10).  Juan Andres Guerrero-Saade, “SmoothOperator | Ongoing
    Campaign Trojanizes 3CX Software in Software Supply Chain Attack,” SentinelOne,
    March 29, 2023, [*https://<wbr>web<wbr>.archive<wbr>.org<wbr>/web<wbr>/20230329231830<wbr>/https:<wbr>/<wbr>/www<wbr>.sentinelone<wbr>.com<wbr>/blog<wbr>/smoothoperator<wbr>-ongoing<wbr>-campaign<wbr>-trojanizes<wbr>-3cx<wbr>-software<wbr>-in<wbr>-software<wbr>-supply<wbr>-chain<wbr>-attack<wbr>/*](https://web.archive.org/web/20230329231830/https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/).'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[10](#chapter14_10).  Juan Andres Guerrero-Saade，“SmoothOperator | 持续的活动 Trojanizes
    3CX 软件，发生在软件供应链攻击中，”SentinelOne，2023年3月29日，[*https://web.archive.org/web/20230329231830/https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/*](https://web.archive.org/web/20230329231830/https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/)。'
- en: '[11](#chapter14_11).  Bart Lenaerts-Bergmans “What Is a Supply Chain Attack?”
    CrowdStrike, September 27, 2023, [*https://<wbr>www<wbr>.crowdstrike<wbr>.com<wbr>/cybersecurity<wbr>-101<wbr>/cyberattacks<wbr>/supply<wbr>-chain<wbr>-attacks<wbr>/*](https://www.crowdstrike.com/cybersecurity-101/cyberattacks/supply-chain-attacks/).'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[11](#chapter14_11).  Bart Lenaerts-Bergmans “什么是供应链攻击？”CrowdStrike，2023年9月27日，[*https://www.crowdstrike.com/cybersecurity-101/cyberattacks/supply-chain-attacks/*](https://www.crowdstrike.com/cybersecurity-101/cyberattacks/supply-chain-attacks/)。'
- en: '[12](#chapter14_12).  CrowdStrike (@CrowdStrike), “CrowdStrike Falcon Platform
    detects and prevents active intrusion campaign targeting 3CXDesktopApp customers,”
    X, March 29, 2023, [*https://<wbr>x<wbr>.com<wbr>/CrowdStrike<wbr>/status<wbr>/1641167508215349249*](https://x.com/CrowdStrike/status/1641167508215349249).'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[12](#chapter14_12).  CrowdStrike (@CrowdStrike)，“CrowdStrike Falcon 平台检测并防止针对
    3CXDesktopApp 客户的主动入侵活动，”X，2023年3月29日，[*https://x.com/CrowdStrike/status/1641167508215349249*](https://x.com/CrowdStrike/status/1641167508215349249)。'
- en: '[13](#chapter14_13).  “Smooth Operator,” National Cyber Security Centre, June
    29, 2023, [*https://<wbr>www<wbr>.ncsc<wbr>.gov<wbr>.uk<wbr>/static<wbr>-assets<wbr>/documents<wbr>/malware<wbr>-analysis<wbr>-reports<wbr>/smooth<wbr>-operator<wbr>/NCSC<wbr>_MAR<wbr>-Smooth<wbr>-Operator<wbr>.pdf*](https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/smooth-operator/NCSC_MAR-Smooth-Operator.pdf).'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[13](#chapter14_13).  “Smooth Operator，”国家网络安全中心，2023年6月29日，[*https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/smooth-operator/NCSC_MAR-Smooth-Operator.pdf*](https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/smooth-operator/NCSC_MAR-Smooth-Operator.pdf)。'
- en: '[14](#chapter14_14).  “Threat Alerts from SentinelOne,” 3CX Forums, March 29,
    2023, [*https://<wbr>www<wbr>.3cx<wbr>.com<wbr>/community<wbr>/threads<wbr>/threat<wbr>-alerts<wbr>-from<wbr>-sentinelone<wbr>-for<wbr>-desktop<wbr>-update<wbr>-initiated<wbr>-from<wbr>-desktop<wbr>-client<wbr>.119806<wbr>/post<wbr>-558710*](https://www.3cx.com/community/threads/threat-alerts-from-sentinelone-for-desktop-update-initiated-from-desktop-client.119806/post-558710).'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[14](#chapter14_14).  “SentinelOne 的威胁警报，”3CX 论坛，2023年3月29日，[*https://www.3cx.com/community/threads/threat-alerts-from-sentinelone-for-desktop-update-initiated-from-desktop-client.119806/post-558710*](https://www.3cx.com/community/threads/threat-alerts-from-sentinelone-for-desktop-update-initiated-from-desktop-client.119806/post-558710)。'
- en: '[15](#chapter14_15).  Esteban Borges, “How to Perform Threat Hunting Using
    Passive DNS,” *Security Trails*, January 31, 2023, [*https://<wbr>securitytrails<wbr>.com<wbr>/blog<wbr>/threat<wbr>-hunting<wbr>-using<wbr>-passive<wbr>-dns*](https://securitytrails.com/blog/threat-hunting-using-passive-dns).'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[15](#chapter14_15).  Esteban Borges，“如何使用被动 DNS 进行威胁狩猎，”*Security Trails*，2023年1月31日，[*https://securitytrails.com/blog/threat-hunting-using-passive-dns*](https://securitytrails.com/blog/threat-hunting-using-passive-dns)。'
- en: '[16](#chapter14_16).  See Patrick Wardle, “Ironing Out (the macOS) Details
    of a Smooth Operator (Part II),” Objective-See, April 1, 2023, [*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>/blog<wbr>_0x74<wbr>.html*](https://objective-see.org/blog/blog_0x74.html).'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[16](#chapter14_16).  见 Patrick Wardle，“细化（macOS）中 Smooth Operator 的细节（第二部分），”Objective-See，2023年4月1日，[*https://objective-see.org/blog/blog_0x74.html*](https://objective-see.org/blog/blog_0x74.html)。'
