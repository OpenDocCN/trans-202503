["```\n--snip--\n# Additional overlays and parameters are documented /boot/\noverlays/README\n\n# Enable audio (loads snd_bcm2835)\ndtparam=audio=on\nstart_x=1\ngpu_mem=128\n\ncore_freq=250\n```", "```\n   # LED strip configuration:\n➊ LED_COUNT      = 16      # Number of LED pixels.\n➋ LED_PIN        = 18      # GPIO pin connected to the pixels \n                            (18 uses PWM!).\n➌ #LED_PIN       = 10      # GPIO pin connected to the pixels \n                            (10 uses SPI /dev/spidev0.0).\n   LED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually \n                            800khz)\n   LED_DMA        = 10      # DMA channel to use for generating \n                            signal (try 10)\n   LED_BRIGHTNESS = 255     # Set to 0 for darkest and 255 for \n                            brightest\n   LED_INVERT     = False   # True to invert the signal (when using \n                            NPN transistor level shift)\n   LED_CHANNEL    = 0       # set to '1' for GPIOs 13, 19, 41, 45 \n                            or 53\n   LED_STRIP      = ws.WS2811_STRIP_GRB   # Strip type and color\n                                          ordering\n```", "```\n# LED strip configuration:\nLED_COUNT      = 8       # Number of LED pixels.\n#LED_PIN       = 18      # GPIO pin connected to the pixels (18 \n                         uses PWM!).\nLED_PIN        = 10      # GPIO pin connected to the pixels (10 \n                         uses SPI /dev/spidev0.0).\nLED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually \n                         800khz)\nLED_DMA        = 10      # DMA channel to use for generating \n                         signal (try 10)\nLED_BRIGHTNESS = 255     # Set to 0 for darkest and 255 for \n                         brightest\nLED_INVERT     = False   # True to invert the signal (when using \n                         NPN transistor level shift)\nLED_CHANNEL    = 0       # set to '1' for GPIOs 13, 19, 41, 45 or 53\nLED_STRIP      = ws.WS2811_STRIP_GRB   # Strip type and color \n                                       ordering\n```", "```\n   import gpiozero\n   import cwiid\n   import time\n➊ from rpi_ws281x import *\n\n   robot = gpiozero.Robot(left=(17,18), right=(27,22))\n   --snip--\n   wii.rpt_mode = cwiid.RPT_BTN | cwiid.RPT_ACC\n\n   LED_COUNT      = 8\n   LED_PIN        = 10\n   LED_FREQ_HZ    = 800000\n   LED_DMA        = 10\n➋ LED_BRIGHTNESS = 150\n   LED_INVERT     = False\n   LED_CHANNEL    = 0\n   LED_STRIP      = ws.WS2811_STRIP_GRB\n\n➌ strip = Adafruit_NeoPixel(LED_COUNT, LED_PIN, LED_FREQ_HZ,\n   LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL, LED_STRIP)\n   strip.begin()\n\n➍ def colorWipe(strip, color, wait_ms=50):\n       \"\"\"Wipe color across display a pixel at a time.\"\"\"\n➎     for i in range(strip.numPixels()):\n           strip.setPixelColor(i, color)\n           strip.show()\n           time.sleep(wait_ms/1000.0)\n   while True:\n➏     buttons = wii.state[\"buttons\"]\n       if (buttons & cwiid.BTN_PLUS):\n           colorWipe(strip, Color(255, 0, 0))  # Red wipe\n       if (buttons & cwiid.BTN_HOME):\n           colorWipe(strip, Color(0, 255, 0))  # Blue wipe\n       if (buttons & cwiid.BTN_MINUS):\n           colorWipe(strip, Color(0, 0, 255))  # Green wipe\n       if (buttons & cwiid.BTN_B):\n           colorWipe(strip, Color(0, 0, 0))    # Blank\n\n       x = (wii.state[\"acc\"][cwiid.X] - 95) - 25\n       --snip--\n       if (turn_value < 0.3) and (turn_value > -0.3):\n           robot.value = (forward_value, forward_value)\n       else:\n           robot.value = (-turn_value, turn_value)\n```", "```\npi@raspberrypi:~/robot/sounds $ ls\nhorn.wav  beep.wav\n```", "```\n   import gpiozero\n   import cwiid\n   import time\n   from rpi_ws281x import *\n➊ import os\n\n   robot = gpiozero.Robot(left=(17,18), right=(27,22))\n   --snip--\n\n   while True:\n       buttons = wii.state[\"buttons\"]\n       if (buttons & cwiid.BTN_PLUS):\n           colorWipe(strip, Color(255, 0, 0))  # Red wipe\n       --snip--\n       if (buttons & cwiid.BTN_B):\n           colorWipe(strip, Color(0, 0, 0))    # Blank\n\n➋     if (buttons & cwiid.BTN_A):\n           os.system(\"aplay sounds/horn.wav\")\n\n        x = (wii.state[\"acc\"][cwiid.X] - 95) - 25\n       --snip--\n       if (turn_value < 0.3) and (turn_value > -0.3):\n           robot.value = (forward_value, forward_value)\n       else:\n           robot.value = (-turn_value, turn_value)\n```", "```\n   import gpiozero\n   import time\n➊ import os\n\n   TRIG = 23\n   ECHO = 24\n\n   trigger = gpiozero.OutputDevice(TRIG)\n   --snip--\n\n   while True:\n      dist = get_distance(trigger,echo)\n      if dist <= 15:\n➋         os.system(\"aplay sounds/beep.wav\")\n           robot.right(0.3)\n           time.sleep(0.25)\n      else:\n           robot.forward(0.3)\n           time.sleep(0.1)\n```"]