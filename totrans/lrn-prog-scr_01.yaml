- en: Chapter 2. Motion and Drawing
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二章 运动与绘图
- en: 'Now that you know your way around the interface, you’re ready to use more of
    Scratch’s programming tools. In this chapter, you’ll do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了界面，你准备好使用更多 Scratch 的编程工具了。在本章中，你将进行以下操作：
- en: Explore Scratch’s motion and pen commands
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Scratch 的运动与画笔命令
- en: Animate sprites and move them around the Stage
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画精灵并让它们在舞台上移动
- en: Draw artistic, geometric patterns and create games
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制艺术性、几何图案并创建游戏
- en: Learn why sprite cloning is a valuable tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习为什么精灵克隆是一个有价值的工具
- en: It’s time to put on your creative hat and jump into the world of computer graphics!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候戴上你的创意帽，跳入计算机图形的世界了！
- en: Using Motion Commands
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用运动命令
- en: If you want to make games or other animated programs, you’ll need to use blocks
    from the *Motion* palette to move sprites around. Furthermore, you’ll need to
    command sprites to move to a particular spot on the Stage or turn in a certain
    direction. You’ll find out how in this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想制作游戏或其他动画程序，你需要使用 *运动* 调色板中的积木来移动精灵。此外，你还需要命令精灵移动到舞台上的特定位置或朝某个方向转动。在本节中，你将学到如何做到这一点。
- en: Absolute Motion
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绝对运动
- en: Remember, as you saw in [Figure 1-4](ch01.html#stage_is_like_a_coordinate_plane_with_po
    "Figure 1-4. The Stage is like a coordinate plane with point (0,0) in the center."),
    the Stage is like a 480 × 360 rectangular grid whose center is point (0,0). Scratch
    has four *absolute motion* commands (**go to**, **glide to**, **set x to**, and
    **set y to**) that let you tell your sprite exactly where to go on that grid.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，正如你在[图 1-4](ch01.html#stage_is_like_a_coordinate_plane_with_po "图 1-4. 舞台就像一个以点
    (0,0) 为中心的坐标平面")中看到的那样，舞台就像一个 480 × 360 的矩形网格，中心是点 (0,0)。Scratch 有四个*绝对运动*命令（**go
    to**、**glide to**、**set x to** 和 **set y to**），让你可以告诉精灵在这个网格上的确切位置。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you want more details about these and other blocks, use the Scratch Tips
    window on the right side of the Scripts panel. If you don’t see the Tips window,
    just click the question mark near the top-right corner of Scratch’s Project Editor.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想了解这些和其他积木的更多细节，可以使用脚本面板右侧的 Scratch 提示窗口。如果你看不到提示窗口，只需点击 Scratch 项目编辑器右上角的问号。*'
- en: To demonstrate these commands, let’s say that you want to make the `Rocket`
    sprite in [Figure 2-1](ch02.html#you_can_move_a_sprite_to_any_point_on_th "Figure 2-1. You
    can move a sprite to any point on the Stage using the go to block.") hit the star-shaped
    `Target` sprite at position (200,150). The most obvious way to do this is to use
    the **go to** block, as illustrated in the right side of the figure. The *x*-coordinate
    tells the sprite how far to move horizontally across the Stage, whereas the *y*-coordinate
    tells it how far to move vertically.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这些命令，假设你想让[图 2-1](ch02.html#you_can_move_a_sprite_to_any_point_on_th "图
    2-1. 你可以使用 go to 块将精灵移动到舞台上的任何位置")中的 `Rocket` 精灵撞击位于 (200,150) 位置的星形 `Target`
    精灵。最明显的方法是使用 **go to** 块，正如图的右侧所示。*x* 坐标告诉精灵在舞台上水平移动的距离，而 *y* 坐标则告诉它垂直移动的距离。
- en: '![You can move a sprite to any point on the Stage using the go to block.](httpatomoreillycomsourcenostarchimages2134343.png.jpg)Figure 2-1. You
    can move a sprite to any point on the Stage using the *go to* block.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![你可以使用 go to 块将精灵移动到舞台上的任何位置。](httpatomoreillycomsourcenostarchimages2134343.png.jpg)图
    2-1. 你可以使用 *go to* 块将精灵移动到舞台上的任何位置。'
- en: The `Rocket` won’t turn to face the target, but it will move along an invisible
    line connecting its current position, point (0,0), to point (200,150). You can
    make the `Rocket` slow down by using the **glide to** command instead. It’s nearly
    identical to the **go to** command, but it lets you set how long the `Rocket`
    will take to reach the target.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rocket` 不会转向目标，但它会沿着一条看不见的直线从当前位置（点 (0,0)）移动到点 (200,150)。你可以使用 **glide to**
    命令让 `Rocket` 放慢速度。它与 **go to** 命令几乎相同，但它允许你设置 `Rocket` 到达目标所需的时间。'
- en: Another way to hit the target is to change the *x*- and *y*-positions of the
    `Rocket` sprite independently with the **set x to** and **set y to** blocks, as
    illustrated in [Figure 2-2](ch02.html#you_can_set_the_x-_and_y-coordinates_of
    "Figure 2-2. You can set the x- and y-coordinates of a sprite independently.").
    Do you remember how you used the **set x to** block in the Pong game in [Chapter 1](ch01.html
    "Chapter 1. Getting Started")? (See [Figure 1-20](ch01.html#script_for_the_paddle_sprite
    "Figure 1-20. The script for the Paddle sprite") for a review.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种击中目标的方法是通过 **set x to** 和 **set y to** 块独立改变 `Rocket` 精灵的 *x* 和 *y* 位置，如[图
    2-2](ch02.html#you_can_set_the_x-_and_y-coordinates_of "图 2-2。你可以独立设置精灵的 x 和 y
    坐标")所示。你还记得在[第 1 章](ch01.html "第 1 章。入门")的 Pong 游戏中如何使用 **set x to** 块吗？（请参阅[图
    1-20](ch01.html#script_for_the_paddle_sprite "图 1-20。Paddle 精灵的脚本")复习一下。）
- en: '![You can set the x- and y-coordinates of a sprite independently.](httpatomoreillycomsourcenostarchimages2134345.png.jpg)Figure 2-2. You
    can set the *x*- and *y*-coordinates of a sprite independently.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![你可以独立设置精灵的 x 和 y 坐标。](httpatomoreillycomsourcenostarchimages2134345.png.jpg)图
    2-2。你可以独立设置精灵的* x *和* y *坐标。'
- en: You can always see a sprite’s current *x*- and *y*-position in the upper-right
    corner of the Scripts Area. If you want to display this information on the Stage,
    you can use the **x position** and **y position** reporter blocks. Click the checkboxes
    next to these blocks to see their values on the Stage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时在脚本区域的右上角看到精灵当前的 *x* 和 *y* 位置。如果你想在舞台上显示这些信息，可以使用 **x position** 和 **y
    position** 变量块。点击这些块旁边的复选框，就可以在舞台上看到它们的值。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Motion commands work with reference to a sprite’s center, which you can set
    in the Paint Editor. For example, sending a sprite to point (100,100) moves the
    sprite so that its center is at (100,100), as illustrated in [Figure 2-3](ch02.html#motion_commands_reference_a_spriteapostr
    "Figure 2-3. Motion commands reference a sprite’s center."). Therefore, when you
    draw or import a costume for a sprite you plan to move around, pay special attention
    to its center!*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*运动命令是以精灵的中心为参考点的，你可以在绘画编辑器中设置该中心。例如，发送精灵到点 (100,100) 时，会将精灵移动到其中心位于 (100,100)
    的位置，如[图 2-3](ch02.html#motion_commands_reference_a_spriteapostr "图 2-3。运动命令参考精灵的中心")所示。因此，当你为将要移动的精灵绘制或导入服装时，要特别注意它的中心位置！*'
- en: '![Motion commands reference a sprite’s center.](httpatomoreillycomsourcenostarchimages2134347.png.jpg)Figure 2-3. Motion
    commands reference a sprite’s center.Try It Out 2-1'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![运动命令参考精灵的中心。](httpatomoreillycomsourcenostarchimages2134347.png.jpg)图 2-3。运动命令参考精灵的中心。试试看
    2-1'
- en: List the coordinates of the `Rocket` sprite after executing each command in
    the script shown below.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行下方脚本中的每个命令后，列出 `Rocket` 精灵的坐标。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134349.png.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图像](httpatomoreillycomsourcenostarchimages2134349.png.jpg)'
- en: Relative Motion
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相对运动
- en: 'Now consider the grid depicted in [Figure 2-4](ch02.html#you_can_move_a_sprite_on_the_stage_using
    "Figure 2-4. You can move a sprite on the Stage using relative motion commands."),
    which shows another `Rocket` sprite and target. You can’t see the coordinates
    this time, so you don’t know the sprites’ exact position. If you had to tell the
    `Rocket` how to hit the target, you might say: “Move three steps, then turn right,
    then move two steps.”'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑[图 2-4](ch02.html#you_can_move_a_sprite_on_the_stage_using "图 2-4。你可以使用相对运动命令在舞台上移动精灵")中所示的网格，这里展示了另一个
    `Rocket` 精灵和目标。此时你看不见坐标，所以不知道精灵的确切位置。如果你需要告诉 `Rocket` 如何击中目标，你可能会说：“移动三步，然后向右转，再移动两步。”
- en: '![You can move a sprite on the Stage using relative motion commands.](httpatomoreillycomsourcenostarchimages2134351.png.jpg)Figure 2-4. You
    can move a sprite on the Stage using relative motion commands.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![你可以使用相对运动命令在舞台上移动精灵。](httpatomoreillycomsourcenostarchimages2134351.png.jpg)图
    2-4。你可以使用相对运动命令在舞台上移动精灵。'
- en: Commands like **move** and **turn** are *relative motion* commands. The first
    “move” command above, for example, caused the `Rocket` to move up, while the second
    “move” command sent it right. The motion depends on (or is relative to) the sprite’s
    current *direction*. The direction convention used in Scratch is illustrated in
    [Figure 2-5](ch02.html#in_scratchcomma_0_is_upcomma_90_is_right "Figure 2-5. In
    Scratch, 0 is up, 90 is right, 180 is down, and –90 is left.").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 像**move**和**turn**这样的命令是*相对运动*命令。例如，上面的第一个“move”命令使得`Rocket`向上移动，而第二个“move”命令则使其向右移动。运动依赖于（或相对于）精灵当前的*方向*。Scratch中使用的方向约定在[图2-5](ch02.html#in_scratchcomma_0_is_upcomma_90_is_right
    "图2-5. 在Scratch中，0是上，90是右，180是下，–90是左。")中说明。
- en: '![In Scratch, 0 is up, 90 is right, 180 is down, and –90 is left.](httpatomoreillycomsourcenostarchimages2134353.png.jpg)Figure 2-5. In
    Scratch, 0 is up, 90 is right, 180 is down, and –90 is left.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![在Scratch中，0是上，90是右，180是下，–90是左。](httpatomoreillycomsourcenostarchimages2134353.png.jpg)图2-5.
    在Scratch中，0是上，90是右，180是下，–90是左。'
- en: You can turn a sprite toward a particular direction (or *heading*) with the
    **point in direction** command. To choose up, right, down, or left, just click
    the down arrow and select one of these options from the drop-down menu. For other
    directions, type the value you want in the white edit box. You can even use negative
    values! (For example, typing 45 or –315 will both point the sprite northeast.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**point in direction**命令将精灵朝特定方向（或*朝向*）旋转。要选择上、右、下或左，只需点击下箭头，从下拉菜单中选择其中一个选项。对于其他方向，可以在白色编辑框中输入你想要的值。你甚至可以使用负值！（例如，输入45或–315都会将精灵指向东北。）
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*You’ll find the sprite’s current direction in the sprite info area. You can
    also click the checkbox next to the* **direction** *block (in the* Motion *palette)
    to see the direction on the Stage.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在精灵信息区域找到精灵当前的方向。你也可以点击**方向**块旁边的复选框（在*运动*调色板中）来查看舞台上的方向。*'
- en: Now that you know how directions work in Scratch, let’s see how the relative
    motion commands (**move**, **change x by**, **change y by**, and **turn**) work.
    We’ll start with the **move** and **turn** commands, which work with respect to
    the sprite’s current direction, as shown in [Figure 2-6](ch02.html#simple_script_that_illustrates_using_the
    "Figure 2-6. A simple script that illustrates using the move and turn commands").
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了Scratch中的方向是如何工作的，让我们看看相对运动命令（**move**、**change x by**、**change y by**和**turn**）是如何工作的。我们将从**move**和**turn**命令开始，它们相对于精灵当前的方向进行操作，如[图2-6](ch02.html#simple_script_that_illustrates_using_the
    "图2-6. 一个简单的脚本，演示如何使用move和turn命令")所示。
- en: '![A simple script that illustrates using the move and turn commands](httpatomoreillycomsourcenostarchimages2134355.png.jpg)Figure 2-6. A
    simple script that illustrates using the *move* and *turn* commands'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![一个简单的脚本，演示如何使用move和turn命令](httpatomoreillycomsourcenostarchimages2134355.png.jpg)图2-6.
    一个简单的脚本，演示如何使用*move*和*turn*命令'
- en: First, the **go to** block ① moves the `Rocket` so that its center is aligned
    with the center of the Stage. The second command block ② points the sprite up,
    and the third ③ turns it 45° clockwise. Then, the sprite moves 100 steps ④ in
    its current direction before turning 45° counterclockwise ⑤ to stop in the up
    position.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，**go to**块①将`Rocket`移动到舞台中心。第二个命令块②使精灵朝上，第三个③将其顺时针旋转45°。然后，精灵按照当前方向移动100步④，之后再逆时针旋转45°⑤，停在上方的位置。
- en: Direction and Costumes
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 方向和服装
- en: The **point in direction** command knows nothing about the sprite’s costume.
    For example, consider the two sprites shown below.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**point in direction**命令并不关心精灵的服装。例如，考虑下面显示的两个精灵。'
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134357.png.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![无标题的图像](httpatomoreillycomsourcenostarchimages2134357.png.jpg)'
- en: Using the Paint Editor, we drew the bird’s costume to face right and the insect’s
    costume to face up. What do think will happen if you use the **point in direction
    90** command (that is, point right) on each sprite?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绘图编辑器时，我们将小鸟的服装画成面朝右，而将昆虫的服装画成面朝上。你认为如果对每个精灵使用**point in direction 90**命令（即朝右），会发生什么？
- en: You might guess that the insect will turn to face right, but actually, neither
    sprite will turn. Although 90° is labeled “right,” that direction really refers
    to the costume’s *original orientation* in the Paint Editor. So because the insect
    looks like it’s facing up in the Paint Editor, it will still face up when you
    tell it to point to 90°. If you want your sprite to respond to the **point in
    direction** command as shown in [Figure 2-5](ch02.html#in_scratchcomma_0_is_upcomma_90_is_right
    "Figure 2-5. In Scratch, 0 is up, 90 is right, 180 is down, and –90 is left."),
    you need to draw the sprite’s costume so that it faces right in the Paint Editor
    (as the bird costume does in the above figure).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会猜测昆虫会转向右边，但实际上，两个角色都不会转动。尽管90°标记为“右”，但这个方向实际上是指在绘图编辑器中的服装的*原始方向*。因此，因为昆虫在绘图编辑器中看起来是朝上的，所以当你让它指向90°时，它仍然会朝上。如果你希望你的角色响应
    **指向方向** 命令，如 [图 2-5](ch02.html#in_scratchcomma_0_is_upcomma_90_is_right "图 2-5.
    在 Scratch 中，0 是上，90 是右，180 是下，–90 是左。") 所示，你需要在绘图编辑器中绘制角色的服装，使其面向右（如上图中的鸟的服装所示）。
- en: Sometimes you might only want to move your sprite horizontally or vertically
    from its current position, and that’s where the **change x by** and **change y
    by** blocks come in. The script in [Figure 2-7](ch02.html#navigate_a_winding_path_with_change_x_by
    "Figure 2-7. Navigate a winding path with change x by and change y by.") illustrates
    the use of these blocks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能只想从当前位置水平或垂直移动角色，这时 **change x by** 和 **change y by** 块就派上用场了。[图 2-7](ch02.html#navigate_a_winding_path_with_change_x_by
    "图 2-7. 通过 *change x by* 和 *change y by* 导航一条曲折的路径。") 中的脚本演示了这些块的使用。
- en: '![Navigate a winding path with change x by and change y by.](httpatomoreillycomsourcenostarchimages2134359.png.jpg)Figure 2-7. Navigate
    a winding path with *change x by* and *change y by*.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![通过 *change x by* 和 *change y by* 导航一条曲折的路径。](httpatomoreillycomsourcenostarchimages2134359.png.jpg)图
    2-7. 通过 *change x by* 和 *change y by* 导航一条曲折的路径。'
- en: After the `Rocket` sprite moves to the center of the Stage, the first **change
    x by 50** command ① adds 50 to its *x*-coordinate to send it 50 steps to the right.
    The next command ②, **change y by 50**, makes the *y*-coordinate 50, causing the
    sprite to move up 50 steps. The other commands work in a similar way. Try to trace
    the sprite’s motion, illustrated in [Figure 2-7](ch02.html#navigate_a_winding_path_with_change_x_by
    "Figure 2-7. Navigate a winding path with change x by and change y by."), to find
    the sprite’s final destination.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Rocket` 角色移动到舞台中心后，第一个 **change x by 50** 命令 ① 将 50 添加到其 *x* 坐标，使其向右移动 50
    步。接下来的命令 ②，**change y by 50**，使 *y* 坐标为 50，导致角色向上移动 50 步。其他命令的工作方式也类似。尝试追踪角色的运动，见
    [图 2-7](ch02.html#navigate_a_winding_path_with_change_x_by "图 2-7. 通过 *change
    x by* 和 *change y by* 导航一条曲折的路径。")，找到角色的最终位置。
- en: Try It Out 2-2
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 2-2
- en: Find the rocket’s final (*x, y*) position when it executes each of the two scripts
    shown below. What mathematical theorem can you use to prove that the two scripts
    are equivalent?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 找出火箭执行下列两个脚本时的最终 (*x, y*) 位置。你可以使用什么数学定理来证明这两个脚本是等效的？
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134361.png.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2134361.png.jpg)'
- en: Other Motion Commands
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他运动命令
- en: 'There are just four motion commands left to explore: **point towards**; a second
    type of **go to** block; **if on edge, bounce**; and **set rotation style**.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还有四个运动命令需要探索：**朝向**；第二种类型的 **go to** 块；**如果在边缘，反弹**；以及 **设置旋转样式**。
- en: '*TennisBallChaser.sb2*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*TennisBallChaser.sb2*'
- en: You’ve already learned about rotation styles, and you saw the **if on edge,
    bounce** command in action in [Chapter 1](ch01.html "Chapter 1. Getting Started")
    (see [Figure 1-13](ch01.html#script_for_demonstrating_rotation_styles "Figure 1-13. Script
    for demonstrating rotation styles")). To see the other two commands in action,
    let’s create a simple application of a cat chasing a tennis ball, as illustrated
    in [Figure 2-8](ch02.html#programming_a_cat_to_run_after_a_tennis "Figure 2-8. Programming
    a cat to run after a tennis ball").
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了旋转样式，并且在 [第 1 章](ch01.html "第 1 章. 入门") 中看到了 **如果在边缘，反弹** 命令的实际效果（参见 [图
    1-13](ch01.html#script_for_demonstrating_rotation_styles "图 1-13. 演示旋转样式的脚本")）。为了查看另外两个命令的实际效果，让我们创建一个简单的应用程序，让猫追逐网球，如
    [图 2-8](ch02.html#programming_a_cat_to_run_after_a_tennis "图 2-8. 编程让猫追逐网球") 中所示。
- en: '![Programming a cat to run after a tennis ball](httpatomoreillycomsourcenostarchimages2134363.png.jpg)Figure 2-8. Programming
    a cat to run after a tennis ball'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![编程让猫追逐网球](httpatomoreillycomsourcenostarchimages2134363.png.jpg)图 2-8. 编程让猫追逐网球'
- en: As shown, the application contains two sprites, named `Cat` and `Ball`, and
    two scripts. When you click the green flag icon, the `Ball` sprite follows the
    mouse pointer. The `Cat` sprite continuously points towards the `Ball` and moves
    toward it using the **glide** command. Go ahead and build this application to
    see how it works. You can find the **forever** block in the *Control* palette
    and the **mouse x** and **mouse y** blocks in the *Sensing* palette. You can find
    the complete application in the file *TennisBallChaser.sb2*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，该应用包含两个精灵，分别名为`Cat`和`Ball`，以及两个脚本。当您点击绿色旗帜图标时，`Ball`精灵会跟随鼠标指针。`Cat`精灵不断朝向`Ball`并使用**滑行**命令向其移动。请构建这个应用并观察其工作原理。您可以在*Control*调色板中找到**forever**积木，在*Sensing*调色板中找到**mouse
    x**和**mouse y**积木。完整的应用文件可以在*TennisBallChaser.sb2*中找到。
- en: In the next section, we’ll look at the *Pen* palette and learn how to make a
    sprite leave a visual trace of its motion.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将查看*Pen*调色板，并学习如何让精灵留下其运动的视觉轨迹。
- en: Pen Commands and Easy Draw
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 画笔命令与Easy Draw
- en: '*EasyDraw.sb2*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*EasyDraw.sb2*'
- en: The motion commands you used in the previous section allow you to move the sprite
    to any point on the Stage. Now wouldn’t it be nice to see the actual path your
    sprite travels? Scratch’s pen can help.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您在上一部分中使用的运动命令可以将精灵移动到舞台上的任何位置。现在，是时候看到精灵实际走过的路径了吧？Scratch的画笔可以帮忙。
- en: Each sprite has an invisible *pen*, which can be either up or down. If the pen
    is down, the sprite will draw as it moves. Otherwise, the sprite moves without
    leaving any trace. The commands in the *Pen* palette allow you to control the
    pen’s size, color, and shade.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个精灵都有一支隐形的*画笔*，可以设置为上或下。如果画笔在下，精灵移动时会留下轨迹。否则，精灵会移动但不留下任何痕迹。*Pen*调色板中的命令允许您控制画笔的大小、颜色和阴影。
- en: Try It Out 2-3
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 2-3
- en: Open the Tips window in Scratch, click the house icon, and click **Pen** for
    a brief description of each Pen command. The scripts below demonstrate most of
    those commands. Re-create these scripts, run them, and describe the output of
    each. Don’t forget to set the sprite’s pen down before running these scripts.
    (You can find the **repeat** block in the *Control* palette.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Scratch中的提示窗口，点击房子图标，然后点击**Pen**以简要查看每个画笔命令的描述。下面的脚本演示了大多数这些命令。重新创建这些脚本，运行它们，并描述每个脚本的输出。在运行这些脚本之前，别忘了将精灵的画笔设置为下。（您可以在*Control*调色板中找到**repeat**积木。）
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134365.png.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![无标题的图片](httpatomoreillycomsourcenostarchimages2134365.png.jpg)'
- en: Let’s explore some of the pen commands in detail and create a simple program
    to draw pictures by moving and turning a sprite on the Stage with the arrow keys.
    One press of the up arrow (↑) will move the sprite forward 10 steps. Pressing
    the down arrow (↓) will move the sprite backward 10 steps. Each press of the right
    arrow (→) will turn the sprite to the right 10°, and each press of the left arrow
    (←) will turn the sprite to the left 10°. So, for example, to make the sprite
    turn 90°, as shown in [Figure 2-9](ch02.html#easy_draw_application_in_action "Figure 2-9. The
    Easy Draw application in action"), you would press the left or right arrow key
    nine times.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探索一些画笔命令，并通过按箭头键在舞台上移动和旋转精灵，创建一个简单的绘图程序。按一下上箭头（↑）会让精灵向前移动10步。按下箭头（↓）会让精灵向后移动10步。每按一次右箭头（→），精灵会向右转动10°，每按一次左箭头（←），精灵会向左转动10°。例如，若要让精灵转动90°，如[图2-9](ch02.html#easy_draw_application_in_action
    "图2-9. Easy Draw应用实例")所示，您需要按左箭头或右箭头九次。
- en: First, start a new Scratch project. Replace the `Cat`’s costume with something
    that clearly shows if the sprite is pointing left, right, up, or down. The `beetle`
    or the `cat2` costumes (from the Animals folder) are good choices, but feel free
    to pick any other costume you like. In the *Costumes* tab, click the **Choose
    costume from library** button and select an appropriate costume.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动一个新的Scratch项目。将`Cat`的服装更换为能清晰显示精灵指向左、右、上或下的图案。`beetle`或`cat2`（来自动物文件夹）是不错的选择，但也可以选择其他任何您喜欢的服装。在*Costumes*标签页中，点击**从库中选择服装**按钮，选择合适的服装。
- en: '![The Easy Draw application in action](httpatomoreillycomsourcenostarchimages2134367.png.jpg)Figure 2-9. The
    Easy Draw application in action'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![Easy Draw应用实例](httpatomoreillycomsourcenostarchimages2134367.png.jpg)图2-9.
    Easy Draw应用实例'
- en: Now, add the scripts shown in [Figure 2-10](ch02.html#scripts_for_the_easy_draw_application
    "Figure 2-10. Scripts for the Easy Draw application") to your sprite. You can
    create the four **when key pressed** blocks from the **when space key pressed**
    block in the *Events* palette. Just click the down arrow and choose the arrow
    key you need.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将[图2-10](ch02.html#scripts_for_the_easy_draw_application "图2-10。Easy Draw应用程序的脚本")中显示的脚本添加到你的角色中。你可以从*事件*调色板中的**按键按下**块创建四个**当按下空格键**的块。只需点击向下箭头，选择所需的箭头键。
- en: '![Scripts for the Easy Draw application](httpatomoreillycomsourcenostarchimages2134369.png.jpg)Figure 2-10. Scripts
    for the Easy Draw application'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![Easy Draw应用程序的脚本](httpatomoreillycomsourcenostarchimages2134369.png.jpg)图2-10。Easy
    Draw应用程序的脚本'
- en: When you click the green flag, the sprite will move to the center of the Stage
    ① and point up ②. Then the pen’s color ③ and size ④ will be set, and the script
    puts the pen down ⑤ to get ready for drawing. After that, the program clears any
    previous drawings from the Stage ⑥.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击绿色旗帜时，角色将移动到舞台的中心①并指向上方②。然后，笔的颜色③和大小④将被设置，脚本将把笔放下⑤为绘图做好准备。之后，程序将清除舞台上所有先前的绘图⑥。
- en: All you have to do to clear the Stage and start a new drawing is click the green
    flag. Use the keyboard arrows to draw any shape you like. What shape do you think
    the sequence ↑→↑→ ↑→... would create?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要清除舞台并开始新的绘图，你只需点击绿色旗帜。使用键盘箭头键绘制任何你喜欢的形状。你认为顺序↑→↑→ ↑→...会绘制出什么形状？
- en: Try It Out 2-4
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下 2-4
- en: Add an option to make the drawing pen wider when the letter *W* is pressed and
    narrower when the letter *N* is pressed. Think of other ways to enhance the application
    and try to implement them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个选项，当按下字母*W*时，使绘图笔变宽；当按下字母*N*时，使绘图笔变窄。想一想其他可能改进应用程序的方式，并尝试实现它们。
- en: The Power of Repeat
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复的力量
- en: Our programs have been relatively simple so far, but as you start writing longer
    scripts, you’ll often need to replicate the same stack of blocks several times
    in a row. Duplicating scripts can make your program longer, harder to understand,
    and tougher to experiment with. If you need to change one number, for example,
    you’ll have to make the same change in each copy of the block. The **repeat**
    command from the *Control* palette can help you avoid this problem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的程序相对简单，但随着你开始编写更长的脚本，你会经常需要多次连续复制同一组积木。重复脚本会使你的程序变得更长、更难理解，并且更难进行实验。例如，如果你需要更改一个数字，你将不得不在每个脚本副本中进行相同的更改。*控制*调色板中的**重复**命令可以帮助你避免这个问题。
- en: '*DrawSquare.sb2*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*DrawSquare.sb2*'
- en: 'For example, let’s say that you want to draw the square shown in [Figure 2-11](ch02.html#square_left_parenthesisleftright_parenth
    "Figure 2-11. A square (left) and a script to draw it (right) using a sequence
    of move and turn commands") (left). You could command the sprite to follow these
    repetitive instructions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想绘制[图2-11](ch02.html#square_left_parenthesisleftright_parenth "图2-11。一个方形（左）和一个用移动和旋转命令绘制它的脚本（右）")（左）所示的方形。你可以指示角色按照这些重复的指令执行：
- en: Move some distance and turn 90° counterclockwise.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动一定距离并逆时针旋转90°。
- en: Move the same distance and turn 90° counterclockwise.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动相同的距离并逆时针旋转90°。
- en: Move the same distance and turn 90° counterclockwise.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动相同的距离并逆时针旋转90°。
- en: Move the same distance and turn 90° counterclockwise.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动相同的距离并逆时针旋转90°。
- en: '![A square (left) and a script to draw it (right) using a sequence of move
    and turn commands](httpatomoreillycomsourcenostarchimages2134371.png.jpg)Figure 2-11. A
    square (left) and a script to draw it (right) using a sequence of *move* and *turn*
    commands'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![一个方形（左）和一个用移动和旋转命令绘制它的脚本（右）](httpatomoreillycomsourcenostarchimages2134371.png.jpg)图2-11。一个方形（左）和一个用*移动*和*旋转*命令绘制它的脚本（右）'
- en: '[Figure 2-11](ch02.html#square_left_parenthesisleftright_parenth "Figure 2-11. A
    square (left) and a script to draw it (right) using a sequence of move and turn
    commands") also shows a script that implements these instructions. Notice that
    it repeats the commands **move 100 steps** and **turn 90 degrees** four times.
    In contrast, we can avoid using the same two blocks over and over with the **repeat**
    block, which runs the commands inside it as many times as you tell it to, as shown
    in [Figure 2-12](ch02.html#using_the_repeat_block_to_draw_a_square "Figure 2-12. Using
    the repeat block to draw a square"). Using a **repeat** block can also make the
    instructions much easier to understand.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-11](ch02.html#square_left_parenthesisleftright_parenth "图 2-11. 一个正方形（左）和用一系列移动和转向命令绘制它的脚本（右）")
    还展示了一个实现这些指令的脚本。注意，它重复了命令 **移动 100 步** 和 **转向 90 度** 四次。相比之下，我们可以通过 **repeat**
    块来避免重复使用相同的两个块，**repeat** 块会按你指定的次数执行其中的命令，如 [图 2-12](ch02.html#using_the_repeat_block_to_draw_a_square
    "图 2-12. 使用 repeat 块绘制正方形") 所示。使用 **repeat** 块还可以让指令变得更容易理解。'
- en: '![Using the repeat block to draw a square](httpatomoreillycomsourcenostarchimages2134373.png.jpg)Figure 2-12. Using
    the *repeat* block to draw a square'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用 repeat 块绘制正方形](httpatomoreillycomsourcenostarchimages2134373.png.jpg)图
    2-12. 使用 *repeat* 块绘制正方形'
- en: The square you draw with the script in [Figure 2-11](ch02.html#square_left_parenthesisleftright_parenth
    "Figure 2-11. A square (left) and a script to draw it (right) using a sequence
    of move and turn commands") depends on the direction your sprite faces when you
    start. This concept is illustrated in [Figure 2-13](ch02.html#spriteapostrophes_initial_direction_chan
    "Figure 2-13. The sprite’s initial direction changes the square’s location.").
    Note that after drawing the square, the sprite will return to its starting point
    and face the same direction it did before it began to move.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你用 [图 2-11](ch02.html#square_left_parenthesisleftright_parenth "图 2-11. 一个正方形（左）和用一系列移动和转向命令绘制它的脚本（右）")
    中的脚本绘制的正方形，取决于精灵开始时面对的方向。这个概念在 [图 2-13](ch02.html#spriteapostrophes_initial_direction_chan
    "图 2-13. 精灵的初始方向改变了正方形的位置。") 中有所说明。注意，在绘制完正方形后，精灵会回到起点并面朝它开始移动时的方向。
- en: '![The sprite’s initial direction changes the square’s location.](httpatomoreillycomsourcenostarchimages2134375.png.jpg)Figure 2-13. The
    sprite’s initial direction changes the square’s location.Try It Out 2-5'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![精灵的初始方向会改变正方形的位置。](httpatomoreillycomsourcenostarchimages2134375.png.jpg)图
    2-13. 精灵的初始方向改变了正方形的位置。尝试 2-5'
- en: '*Polygon.sb2*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*Polygon.sb2*'
- en: You can easily modify the square-drawing script of [Figure 2-12](ch02.html#using_the_repeat_block_to_draw_a_square
    "Figure 2-12. Using the repeat block to draw a square") to draw other regular
    polygons. The modified script has the form shown below. You can substitute any
    whole number for “number of sides” to specify the desired polygon and any value
    for “side length” to control the polygon’s size. The figure also shows six polygons
    of the same side length that were drawn using this script. The sprite started
    at the position and heading indicated by the green arrow in the figure. Open the
    file *Polygon.sb2* and run it using different values for “number of sides.” What
    happens when this number becomes large? This should give you an idea of how to
    draw circles.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松修改 [图 2-12](ch02.html#using_the_repeat_block_to_draw_a_square "图 2-12.
    使用 repeat 块绘制正方形") 中的正方形绘制脚本来绘制其他规则的多边形。修改后的脚本如下所示。你可以为“边数”替换任何整数来指定所需的多边形，并为“边长”指定任何值来控制多边形的大小。图中还展示了使用此脚本绘制的六个相同边长的多边形。精灵从图中绿色箭头所示的位置和方向开始。打开
    *Polygon.sb2* 文件，并使用不同的“边数”值运行它。当这个数字变得很大时会发生什么？这应该能给你一个绘制圆形的思路。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134377.png.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2134377.png.jpg)'
- en: Rotated Squares
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转的正方形
- en: '*RotatedSquares.sb2*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*RotatedSquares.sb2*'
- en: You can create amazing art by repeating a pattern in a certain sequence. For
    example, the script shown in [Figure 2-14](ch02.html#drawing_a_rotated_square
    "Figure 2-14. Drawing a rotated square") creates an attractive pattern by rotating
    and drawing a square 12 times. (The blocks for initializing the pen and putting
    it down are not shown for the sake of brevity.)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按一定的顺序重复图案来创造惊人的艺术。例如，[图 2-14](ch02.html#drawing_a_rotated_square "图 2-14.
    绘制旋转正方形") 中展示的脚本通过旋转并绘制正方形 12 次，创造了一个吸引人的图案。（为了简洁，初始化笔并放下笔的块未展示。）
- en: '![Drawing a rotated square](httpatomoreillycomsourcenostarchimages2134379.png.jpg)Figure 2-14. Drawing
    a rotated square'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![绘制旋转的正方形](httpatomoreillycomsourcenostarchimages2134379.png.jpg)图2-14. 绘制旋转的正方形'
- en: The outer **repeat** block ① executes 12 times. Each time inside the loop, it
    draws one square ② and then makes a 30° left turn ③ to prepare to draw the next
    one.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 外部**repeat**积木①执行12次。每次在循环中，它绘制一个正方形②，然后左转30°③，为绘制下一个正方形做准备。
- en: Try It Out 2-6
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试 2-6
- en: Notice that (12 repeats) × (30° for each repeat) = 360°. What do you think would
    happen if you changed the numbers in the program to 4 repeats and 90°? What about
    5 and 72°? Experiment with different values for the **repeat** count and the **turn**
    angle to see what happens.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，（12次重复）×（每次重复30°）= 360°。如果你将程序中的数字改为4次重复和90°，你觉得会发生什么？如果是5次和72°呢？试着改变**repeat**的重复次数和**turn**的角度，看看会发生什么。
- en: Exploring with Stamp
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用印章探索
- en: '*Windmill.sb2*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*Windmill.sb2*'
- en: In the previous section, you learned to use the **turn** and **repeat** blocks
    to transform simple shapes into complex patterns. But what if you want to rotate
    more challenging shapes? Instead of drawing the basic shape with **move** and
    **turn** commands, you can make a new costume in the Paint Editor and use the
    **stamp** block to draw multiple copies of it on the Stage. To illustrate this
    technique, let’s write a program to draw the windmill shown in [Figure 2-15](ch02.html#stamp_command_allows_you_to_create_compl
    "Figure 2-15. The stamp command allows you to create complex geometric patterns
    with ease.").
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你学会了使用**turn**和**repeat**积木将简单形状转化为复杂图案。但是如果你想旋转更具挑战性的形状怎么办？你可以不使用**move**和**turn**命令绘制基本形状，而是在画图编辑器中创建一个新服装，并使用**stamp**积木在舞台上绘制多个副本。为了说明这种技术，让我们编写一个程序来绘制[图2-15](ch02.html#stamp_command_allows_you_to_create_compl
    "图2-15. 印章命令让你轻松创建复杂的几何图案")所示的风车。
- en: '![The stamp command allows you to create complex geometric patterns with ease.](httpatomoreillycomsourcenostarchimages2134381.png.jpg)Figure 2-15. The
    *stamp* command allows you to create complex geometric patterns with ease.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![印章命令让你轻松创建复杂的几何图案](httpatomoreillycomsourcenostarchimages2134381.png.jpg)图2-15.
    *印章*命令让你轻松创建复杂的几何图案。'
- en: We drew the flag shape using the Paint Editor (see [Figure 2-15](ch02.html#stamp_command_allows_you_to_create_compl
    "Figure 2-15. The stamp command allows you to create complex geometric patterns
    with ease."), left) and used it as the costume of our sprite. We set the costume’s
    center at the lower tip of the flag so we could rotate the flag around this point.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用画图编辑器绘制了旗帜形状（见[图2-15](ch02.html#stamp_command_allows_you_to_create_compl
    "图2-15. 印章命令让你轻松创建复杂的几何图案")，左侧），并将其作为我们角色的服装。我们将服装的中心设置在旗帜的下尖端，这样可以围绕这个点旋转旗帜。
- en: The script for drawing the windmill is shown in [Figure 2-15](ch02.html#stamp_command_allows_you_to_create_compl
    "Figure 2-15. The stamp command allows you to create complex geometric patterns
    with ease.") (middle). The **repeat** block executes eight times; each time, it
    stamps a copy of the costume on the Stage before rotating the sprite 45° to the
    left. Note that for this script to work, you must use the **set rotation style**
    block with the sprite’s rotation style set to `all around` to allow the flag to
    flip as it rotates.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制风车的脚本如[图2-15](ch02.html#stamp_command_allows_you_to_create_compl "图2-15. 印章命令让你轻松创建复杂的几何图案")（中间）所示。**repeat**积木执行八次；每次，它会在舞台上印刷一个服装副本，然后将角色旋转45°向左。请注意，为了使此脚本正常工作，必须使用**设置旋转样式**积木，并将角色的旋转样式设置为`all
    around`，以便旗帜在旋转时能够翻转。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: DrawingGeometricShapes.pdf *in the extra resources package (which you can download
    from* [http://nostarch.com/learnscratch/](http://nostarch.com/learnscratch/)*)
    provides comprehensive coverage of drawing geometric shapes such as rectangles,
    parallelograms, rhombuses, trapezoids, kites, and polygons, and teaches you how
    to create attractive polygon art.*
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 《DrawingGeometricShapes.pdf》*在额外资源包中（你可以从* [http://nostarch.com/learnscratch/](http://nostarch.com/learnscratch/)
    *下载）详细介绍了绘制几何图形，如矩形、平行四边形、菱形、梯形、风筝形和多边形，并教你如何创建吸引人的多边形艺术。*
- en: Try It Out 2-7
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试 2-7
- en: The **change color effect by** block (from the *Looks* palette) allows you to
    apply graphic effects like color, whirl, and fisheye. Open the file *Windmill.sb2*
    and add this command inside the **repeat** block. Experiment with other graphic
    effects to make some more cool patterns. Note that for the **change color effect
    by** block to work, the flag’s color in the Paint Editor can’t be black.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**改变颜色效果**块（来自*外观*面板）允许你应用图形效果，如颜色、旋转和鱼眼效果。打开文件*Windmill.sb2*，并将此命令添加到**重复**块中。尝试其他图形效果，制作更多酷炫的图案。请注意，为了让**改变颜色效果**块生效，绘图编辑器中的旗帜颜色不能是黑色。'
- en: Scratch Projects
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scratch 项目
- en: In this section, we’ll develop two short programs that should further your understanding
    of the **Motion** and **Pen** blocks you’ve learned so far. You can find the backdrops
    and sprites in the project files for this chapter, so we’ll focus on writing the
    scripts we need to make these applications work. An explanation of an additional
    bonus game, called Survival Jump, is available in the extra resources. You’ll
    find details in *BonusApplications.pdf* (*[http://nostarch.com/learnscratch/](http://nostarch.com/learnscratch/)*).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发两个简短的程序，进一步帮助你理解到目前为止学到的**运动**和**笔迹**块。你可以在本章的项目文件中找到背景和角色，因此我们将专注于编写使这些应用程序正常工作的脚本。一个名为“生存跳跃”的额外奖励游戏的解释可以在额外资源中找到。详细信息请参阅*BonusApplications.pdf*（*[http://nostarch.com/learnscratch/](http://nostarch.com/learnscratch/)*）。
- en: Some of these scripts will use command blocks that you haven’t seen, but don’t
    worry if you don’t completely understand some things. You’ll learn all about them
    in the coming chapters.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些脚本将使用你尚未见过的命令块，但如果你不完全理解其中的某些内容，也不必担心。你将在接下来的章节中学习到所有相关内容。
- en: Get the Money
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取金币
- en: '*Money_NoCode.sb2*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*Money_NoCode.sb2*'
- en: Our first application is a simple game in which the player needs to move the
    sprite by using the keyboard arrows to collect as many bags of gold as possible.
    As illustrated in [Figure 2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a
    "Figure 2-16. Help the cat grab as many bags of gold as possible!"), the bag of
    gold appears at a random location on the grid. If the player doesn’t grab the
    bag in three seconds, it moves somewhere else.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个应用是一个简单的游戏，玩家需要使用键盘箭头移动角色，尽可能多地收集金币袋。如[图2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a
    "图2-16. 帮助猫抓取尽可能多的金币袋！")所示，金币袋会在网格上的随机位置出现。如果玩家在三秒钟内没有抓到金币袋，它会移动到其他地方。
- en: '![Help the cat grab as many bags of gold as possible!](httpatomoreillycomsourcenostarchimages2134383.png.jpg)Figure 2-16. Help
    the cat grab as many bags of gold as possible!'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![帮助猫抓取尽可能多的金币袋！](httpatomoreillycomsourcenostarchimages2134383.png.jpg)图2-16.
    帮助猫抓取尽可能多的金币袋！'
- en: Open the file *Money_NoCode.sb2*. The scripts are missing, but you’ll create
    them now, and the file contains everything else you’ll need.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件*Money_NoCode.sb2*。该文件缺少脚本，但你现在将创建它们，文件中包含你所需的其他一切。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The coordinate axes shown in [Figure 2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a
    "Figure 2-16. Help the cat grab as many bags of gold as possible!") were added
    to help you understand the numbers used in these scripts. Come back to this figure
    as needed to refresh your mental picture of how the sprites are moving.*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a "图2-16. 帮助猫抓取尽可能多的金币袋！")中显示的坐标轴是为了帮助你理解这些脚本中使用的数字。如有需要，可以返回此图，刷新你对角色如何移动的理解。*'
- en: Let’s start by writing the scripts for the `Player` sprite, as shown in [Figure 2-17](ch02.html#scripts_for_the_player_sprite
    "Figure 2-17. The scripts for the Player sprite").
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先编写`Player`角色的脚本，如[图2-17](ch02.html#scripts_for_the_player_sprite "图2-17.
    Player角色的脚本")所示。
- en: '![The scripts for the Player sprite](httpatomoreillycomsourcenostarchimages2134385.png.jpg)Figure 2-17. The
    scripts for the *`Player`* sprite'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![Player角色的脚本](httpatomoreillycomsourcenostarchimages2134385.png.jpg)图2-17.
    *`Player`*角色的脚本'
- en: When the player clicks the green flag, this sprite moves to (–30,–30) ① and
    points to the right ②. The other four scripts respond to the arrow keys. When
    an arrow key is pressed, the corresponding script changes the sprite’s direction
    ③, plays a short sound (using the **play sound** block ④ from the *Sound* palette),
    and moves the sprite 60 steps ⑤. The sprite bounces off the Stage’s edge ⑥ if
    needed. Because 60 steps correspond to 1 square on the grid of [Figure 2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a
    "Figure 2-16. Help the cat grab as many bags of gold as possible!"), each time
    you press an arrow key, the `Player` sprite moves 1 square.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家点击绿色旗帜时，这个精灵会移动到 (–30,–30) ① 并朝右指向 ②。其他四个脚本响应方向键。当按下一个方向键时，相应的脚本会改变精灵的方向
    ③，播放一个短音效（使用 *声音* 面板中的 **播放声音** 块 ④），并移动精灵 60 步 ⑤。如果需要，精灵会从舞台边缘反弹 ⑥。由于 60 步对应于[图
    2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a "图 2-16. 帮助猫抓取尽可能多的金币袋")中网格上的
    1 个方格，因此每次按下方向键时，`Player` 精灵会移动 1 个方格。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '*Have you noticed that the four arrow-handling scripts in [Figure 2-17](ch02.html#scripts_for_the_player_sprite
    "Figure 2-17. The scripts for the Player sprite") are almost identical? In [Chapter 4](ch04.html
    "Chapter 4. Procedures"), you’ll learn how to avoid duplicating code this way.*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*你是否注意到在[图 2-17](ch02.html#scripts_for_the_player_sprite "图 2-17. Player 精灵的脚本")中，四个处理箭头的脚本几乎是完全相同的？在[第
    4 章](ch04.html "第 4 章. 过程")中，你将学习如何避免这样重复代码。*'
- en: Go ahead and test this part of the game. You should be able to move the `Player`
    sprite around the Stage using the arrow keys on your keyboard. Once you have that
    working, we’ll move on to the `Gold` sprite, whose script is shown in [Figure 2-18](ch02.html#script_for_the_gold_sprite
    "Figure 2-18. The script for the Gold sprite").
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 继续测试游戏的这一部分。你应该能够通过键盘上的方向键移动 `Player` 精灵在舞台上。当你完成这部分功能后，我们将继续处理 `Gold` 精灵，其脚本见[图
    2-18](ch02.html#script_for_the_gold_sprite "图 2-18. 金币精灵的脚本")。
- en: '![The script for the Gold sprite](httpatomoreillycomsourcenostarchimages2134387.png.jpg)Figure 2-18. The
    script for the *`Gold`* sprite'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![金币精灵的脚本](httpatomoreillycomsourcenostarchimages2134387.png.jpg)图 2-18. *`Gold`*
    精灵的脚本'
- en: Like the `Player` script, this script also starts when the green flag is clicked.
    It moves the bag of gold around. It also tracks how many bags have been collected
    with a variable named `score`, which I’ve created for you in the *Data* palette.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Player` 精灵的脚本类似，这个脚本也会在点击绿色旗帜时启动。它会移动金币袋。它还会通过名为 `score` 的变量来跟踪已经收集到的金币袋数量，我已经在
    *数据* 面板中为你创建了这个变量。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '*Labels like* `score` *are called* variables*. They let us save information
    to use later in our programs. You’ll learn everything about variables in [Chapter 5](ch05.html
    "Chapter 5. Variables").*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*像 `score` 这样的标签被称为* 变量*。它们让我们能够保存信息，以便在程序中稍后使用。你将在[第 5 章](ch05.html "第 5 章.
    变量")中学习所有关于变量的知识。*'
- en: Since the game just started and we don’t have any bags yet, we set `score` to
    0 ①. Next, we start a loop that will repeat 20 times ② to show a total of 20 bags
    to the player. (If you don’t want 20 bags, feel free to use your favorite number
    instead.) Each time the loop runs, the bag of gold will appear at some random
    location ③, give the player some time to grab it ④, and increment `score` if the
    player is successful ⑤.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于游戏刚开始，我们还没有收集到任何金币袋，所以我们将 `score` 设置为 0 ①。接下来，我们启动一个循环，该循环会重复 20 次 ②，向玩家展示总共
    20 个金币袋。（如果你不想要 20 个金币袋，可以随意选择你喜欢的数字。）每次循环运行时，金币袋将出现在某个随机位置 ③，给玩家一些时间来抓取它 ④，如果玩家成功抓取，则增加
    `score` ⑤。
- en: 'We need the bag to appear randomly on one of the Stage’s 48 squares. As you
    saw in [Figure 2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a "Figure 2-16. Help
    the cat grab as many bags of gold as possible!"), the bag’s *x*-position can be
    any of the following values: –210, –150, –90, ..., 210\. These numbers are spaced
    60 steps apart, so you can find each *x*-position starting with –210 by calculating'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要让金币袋随机出现在舞台上的 48 个方格之一。正如你在[图 2-16](ch02.html#help_the_cat_grab_as_many_bags_of_gold_a
    "图 2-16. 帮助猫抓取尽可能多的金币袋")中看到的，金币袋的 *x* 位置可以是以下任意值：–210、–150、–90、...、210。这些数字间隔为
    60 步，因此你可以通过计算从 –210 开始找到每个 *x* 位置：
- en: '| *x* = –210 + (0 × 60) |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| *x* = –210 + (0 × 60) |'
- en: '| *x* = –210 + (1 × 60) |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| *x* = –210 + (1 × 60) |'
- en: '| *x* = –210 + (2 × 60) |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| *x* = –210 + (2 × 60) |'
- en: '| *x* = –210 + (3 × 60) |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| *x* = –210 + (3 × 60) |'
- en: and so on. A similar expression applies to the *y*-position.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推。类似的表达式适用于 *y* 位置。
- en: We can set the bag’s *x*-position by generating a random number between 0 and
    7, multiplying it by 60, and adding the result to –210\. [Figure 2-19](ch02.html#building_the_set_x_to_block_from_figure
    "Figure 2-19. Building the set x to block from Figure 2-18") shows the detailed
    steps for creating the **set x to** block in our script; the **set y to** block
    is constructed in a similar manner.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过生成一个0到7之间的随机数，将其乘以60，并将结果加上-210来设置袋子的*x*位置。[图2-19](ch02.html#building_the_set_x_to_block_from_figure
    "图2-19. 从图2-18构建set x到块")展示了在我们的脚本中创建**set x to**块的详细步骤；**set y to**块的构建方式也类似。
- en: '![Building the set x to block from](httpatomoreillycomsourcenostarchimages2134389.png.jpg)Figure 2-19. Building
    the *set x to* block from [Figure 2-18](ch02.html#script_for_the_gold_sprite "Figure 2-18. The
    script for the Gold sprite")'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![从图2-18构建set x to块](httpatomoreillycomsourcenostarchimages2134389.png.jpg)图2-19.
    从[图2-18](ch02.html#script_for_the_gold_sprite "图2-18. 金色精灵的脚本")构建*set x to*块'
- en: After appearing at a random location, the bag of gold will give the player three
    seconds to grab it. (You can change this duration to make the game harder or easier
    to play.) To track the time, the script first resets Scratch’s built-in timer
    to 0\. It then waits until either the player grabs the bag by touching it or the
    timer exceeds three seconds. When either condition happens, the **wait until**
    block will let the script move on to execute the **if/then** block. The details
    for creating the **wait until** block are illustrated in [Figure 2-20](ch02.html#building_the_wait_until_block_in_the_scr
    "Figure 2-20. Building the wait until block in the script of Figure 2-18").
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在随机位置出现后，金袋子会给玩家三秒钟的时间来抓住它。（你可以更改这个时长，让游戏变得更难或更容易。）为了跟踪时间，脚本首先将Scratch内置的计时器重置为0。然后它会等待，直到玩家通过触摸袋子抓住它，或者计时器超过三秒。当任一条件发生时，**wait
    until**块将让脚本继续执行**if/then**块。[图2-20](ch02.html#building_the_wait_until_block_in_the_scr
    "图2-20. 在图2-18的脚本中构建wait until块")展示了创建**wait until**块的细节。
- en: '![Building the wait until block in the script of](httpatomoreillycomsourcenostarchimages2134391.png.jpg)Figure 2-20. Building
    the *wait until* block in the script of [Figure 2-18](ch02.html#script_for_the_gold_sprite
    "Figure 2-18. The script for the Gold sprite")'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![在脚本中构建wait until块](httpatomoreillycomsourcenostarchimages2134391.png.jpg)图2-20.
    在[图2-18](ch02.html#script_for_the_gold_sprite "图2-18. 金色精灵的脚本")的脚本中构建*wait until*块'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Blocks inside the* **if/then** *block will only run if the condition you specify
    in the header of the* **if/then** *block is true. [Chapter 6](ch06.html "Chapter 6. Making
    Decisions") explains this block in detail, but for now, you know enough to use
    it to add your own touches to a program.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**if/then** *块中的代码只有在你在**if/then** *块的头部指定的条件为真时才会运行。[第6章](ch06.html "第6章.
    做出决策")详细解释了这个块，但现在，你已经足够了解如何使用它来为程序增添个人特色。*'
- en: If the player touches the bag, the commands inside the **if/then** block will
    run. In that case, the **play sound** block will make a `WaterDrop` noise, and
    the **change score by 1** block (in the *Data* palette) will add 1 to the score.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家触摸到袋子，**if/then**块中的命令将会执行。在这种情况下，**play sound**块将播放`WaterDrop`声音，而**change
    score by 1**块（在*数据*调色板中）将分数加1。
- en: The game is now complete. Click the green flag to test your creation!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏现在完成了。点击绿旗测试你的创作！
- en: Scratch’s Timer
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch的计时器
- en: Scratch maintains a timer that records how much time has passed since Scratch
    was started. When you start Scratch in a Web browser, the timer will be set to
    0, and it will count up by tenths of a second as long as you keep Scratch open.
    The **timer** block (in the *Sensing* palette) holds the current value of the
    timer. The checkbox next to the block allows you to show/hide the block’s monitor
    on the Stage. The **reset timer** block resets the timer to 0, and the time starts
    ticking up again immediately. The timer continues to run even when the project
    stops running.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch保持一个计时器，记录自Scratch启动以来已经过去的时间。当你在Web浏览器中启动Scratch时，计时器将被设置为0，并且只要你保持Scratch打开，它会按十分之一秒为单位递增。**timer**块（在*感应*调色板中）保存计时器的当前值。块旁边的复选框允许你在舞台上显示/隐藏该块的监视器。**reset
    timer**块将计时器重置为0，并且时间会立即重新开始计数。即使项目停止运行，计时器仍会继续运行。
- en: Catching Apples
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕捉苹果
- en: '*CatchApples_NoCode.sb2*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*CatchApples_NoCode.sb2*'
- en: Consider the Catching Apples game shown in [Figure 2-21](ch02.html#catching_apples_game
    "Figure 2-21. The Catching Apples game"). In this game, apples appear at random
    horizontal positions at the top of the Stage at random times and fall to the ground.
    The player has to move the cart to catch the apples before they touch the ground,
    and each apple is worth 1 point.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[图2-21](ch02.html#catching_apples_game "图2-21。抓苹果游戏")中的抓苹果游戏。在这个游戏中，苹果会在舞台顶部的随机水平位置、随机时间出现并掉落到地面。玩家必须移动购物车来抓住苹果，防止它们掉到地面，每个苹果值1分。
- en: '![The Catching Apples game](httpatomoreillycomsourcenostarchimages2134393.png.jpg)Figure 2-21. The
    Catching Apples game'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![抓苹果游戏](httpatomoreillycomsourcenostarchimages2134393.png.jpg)图2-21。抓苹果游戏'
- en: At first, you might think such a game requires many sprites with nearly identical
    scripts. After all, there are a lot of apples. As of Scratch 2, however, that’s
    not the case. With the *cloning* feature, you can easily create a bunch of copies
    of a sprite. In our Catching Apples game, we’ll use a single apple sprite and
    create as many clones as we desire.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，你可能会认为这样的游戏需要许多精灵，且每个精灵的脚本几乎一样。毕竟苹果很多。然而，自Scratch 2版本起，情况发生了变化。借助*克隆*功能，你可以轻松创建多个精灵的副本。在我们的抓苹果游戏中，我们只使用一个苹果精灵，并可以创建任意数量的克隆。
- en: Open the file *CatchApples_NoCode.sb2*, which contains the setup for our game
    without scripts. To make things a little more exciting, the setup also includes
    a variable named `score` (created for you in the *Data* palette), which we’ll
    use to keep track of the caught apples. First, however, you’ll make the script
    for the `Cart` sprite as illustrated in [Figure 2-22](ch02.html#script_for_the_cart_sprite
    "Figure 2-22. The script for the Cart sprite").
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件*CatchApples_NoCode.sb2*，该文件包含了没有脚本的游戏设置。为了让游戏更有趣，设置中还包含了一个名为`score`的变量（在*数据*调色板中为你创建），我们将用它来跟踪抓到的苹果数量。但首先，你将为`购物车`精灵创建如[图2-22](ch02.html#script_for_the_cart_sprite
    "图2-22。购物车精灵的脚本")所示的脚本。
- en: '![The script for the Cart sprite](httpatomoreillycomsourcenostarchimages2134395.png.jpg)Figure 2-22. The
    script for the *`Cart`* sprite'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![购物车精灵的脚本](httpatomoreillycomsourcenostarchimages2134395.png.jpg)图2-22。*`购物车`*精灵的脚本'
- en: When the green flag is clicked, we move the cart to the bottom center of the
    Stage. The script then continuously checks the state of the right and left arrows
    and moves the cart accordingly. I picked the number 30 based on trial and error,
    so feel free to change it based on your own experimentation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击绿旗时，我们将购物车移到舞台底部中央。接下来，脚本会持续检查左右箭头的状态，并相应地移动购物车。我选择了数字30是通过试验得出的，所以你可以根据自己的实验结果自由更改。
- en: Now comes the cloning business. Start by adding the script of [Figure 2-23](ch02.html#first_script_of_the_apple_sprite
    "Figure 2-23. The first script of the Apple sprite") to the `Apple` sprite. This
    script also starts running when the green flag is clicked.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是克隆的部分。首先将[图2-23](ch02.html#first_script_of_the_apple_sprite "图2-23。苹果精灵的第一个脚本")中的脚本添加到`苹果`精灵中。这个脚本也会在点击绿旗时开始运行。
- en: '![The first script of the Apple sprite](httpatomoreillycomsourcenostarchimages2134397.png.jpg)Figure 2-23. The
    first script of the *`Apple`* sprite'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![苹果精灵的第一个脚本](httpatomoreillycomsourcenostarchimages2134397.png.jpg)图2-23。*`苹果`*精灵的第一个脚本'
- en: Since we haven’t caught any apples yet, the script sets the `score` variable
    to 0 ①. Next, it makes the sprite visible with the **show** block from the *Looks*
    palette ②. It then starts a **repeat** block that will loop for 30 times ③ to
    have 30 apples fall.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有抓到任何苹果，脚本将`score`变量设置为0 ①。接着，它使用*外观*调色板中的**显示**块②使精灵可见。然后，它开始一个**重复**块，该块会循环30次③，让30个苹果掉落。
- en: During each pass of the loop, the `Apple` sprite will move to a random horizontal
    position at the top part of the Stage ④. It then calls the **create clone of**
    block (from the *Control* palette) to clone itself ⑤, waits for a short random
    time ⑥, and starts the next round of the **repeat** block. After completing the
    30 rounds of the **repeat** block, the script hides the `Apple` sprite using the
    **hide** block ⑦ from the *Looks* palette.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环过程中，`苹果`精灵将移到舞台上方的随机水平位置④。接着，它会调用*控制*调色板中的**创建克隆**块⑤，克隆自身，等待一段短暂的随机时间⑥，并开始下一轮**重复**块。完成30轮**重复**块后，脚本通过*外观*调色板中的**隐藏**块⑦将`苹果`精灵隐藏。
- en: If you run the game now by clicking the green flag, 30 apples will pop up randomly
    at the top of the Stage and stay there—because we haven’t told the cloned apples
    what to do. This is where the next script for the `Apple` sprite ([Figure 2-24](ch02.html#second_script_for_the_apple_sprite
    "Figure 2-24. The second script for the Apple sprite")) comes in.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在点击绿色旗帜运行游戏，30个苹果会随机出现在舞台的顶部，并停留在那里——因为我们还没有告诉克隆的苹果该做什么。这时，`Apple` 精灵的下一个脚本（[图2-24](ch02.html#second_script_for_the_apple_sprite
    "图2-24. 第二个苹果精灵脚本")）就派上用场了。
- en: '![The second script for the Apple sprite](httpatomoreillycomsourcenostarchimages2134399.png.jpg)Figure 2-24. The
    second script for the *`Apple`* sprite'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![第二个苹果精灵的脚本](httpatomoreillycomsourcenostarchimages2134399.png.jpg)图2-24.
    第二个*`Apple`*精灵的脚本'
- en: Thanks to the **when I start as a clone** block ① (from the *Control* palette),
    each clone will execute the script shown in this figure. Each `Apple` moves down
    10 steps ② and checks whether it was caught or missed by the cart. If the clone
    detects that it is touching the cart ③, that means it was caught. Therefore, it
    increases the score, plays a sound, and deletes itself (because it has no more
    work to do). If the clone falls below the cart ④, then the player missed; in this
    case, the clone plays a different sound before deleting itself. If the clone is
    neither caught nor missed, then it’s still falling, and the **forever** block
    goes around again.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**当我作为克隆启动时**模块①（来自*控制*面板），每个克隆都会执行图中显示的脚本。每个`Apple`精灵向下移动10步②，并检查它是否被小车抓住或掉落。如果克隆检测到它碰到了小车③，这意味着它被抓住了。因此，它会增加分数，播放音效，并删除自己（因为它不再有任务）。如果克隆掉落到小车下方④，则玩家错过了；在这种情况下，克隆会播放另一种音效，然后删除自己。如果克隆既没有被抓住也没有错过，它仍在下落中，**永远**模块再次循环执行。
- en: Now that our apples know how to fall, the game is complete! Go ahead and test
    it out by clicking the green flag. If you want to experiment, try changing the
    wait time between cloning the different apples and the speed of moving the cart.
    Does that give you some ideas for changing the game’s difficulty?
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的苹果已经知道如何掉落了，游戏完成了！点击绿色旗帜测试一下吧。如果你想进行实验，可以尝试改变克隆不同苹果之间的等待时间以及移动小车的速度。这样做会给你一些调整游戏难度的灵感吗？
- en: More on Cloned Sprites
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于克隆精灵的更多信息
- en: Any sprite can copy itself or another sprite using the **create clone of** block.
    (The Stage can also clone sprites using the same block.) A cloned sprite inherits
    the original’s *state* at the time it is cloned—that is, the original’s current
    position and direction, costume, visibility status, pen color, pen size, graphic
    effects, and so on. This idea is illustrated in [Figure 2-25](ch02.html#clone_inherits_the_attributes_of_its_mas
    "Figure 2-25. A clone inherits the attributes of its master.").
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 任何精灵都可以使用**创建克隆**模块复制自己或其他精灵。（舞台也可以使用相同的模块克隆精灵。）克隆的精灵会继承原始精灵在被克隆时的*状态*——即原始精灵的当前位置和方向、服装、可见状态、画笔颜色、画笔大小、图形效果等。这个概念在[图2-25](ch02.html#clone_inherits_the_attributes_of_its_mas
    "图2-25. 克隆继承了主精灵的属性")中得到了说明。
- en: '![A clone inherits the attributes of its master.](httpatomoreillycomsourcenostarchimages2134401.png.jpg)Figure 2-25. A
    clone inherits the attributes of its master.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![克隆继承了主精灵的属性。](httpatomoreillycomsourcenostarchimages2134401.png.jpg)图2-25.
    克隆继承了主精灵的属性。'
- en: Clones also inherit the scripts of the master sprite, as shown in [Figure 2-26](ch02.html#clones_inherit_the_scripts_of_their_mast
    "Figure 2-26. Clones inherit the scripts of their master."). Here, the master
    sprite creates two clones. When you press the spacebar, all three sprites (the
    master and the two clones) turn 15° to the right because they all execute the
    **when space key pressed** script.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆也会继承主精灵的脚本，如[图2-26](ch02.html#clones_inherit_the_scripts_of_their_mast "图2-26.
    克隆继承其主精灵的脚本")所示。这里，主精灵创建了两个克隆。当你按下空格键时，所有三个精灵（主精灵和两个克隆）都会向右转15°，因为它们都会执行**当空格键按下时**的脚本。
- en: '![Clones inherit the scripts of their master.](httpatomoreillycomsourcenostarchimages2134403.png.jpg)Figure 2-26. Clones
    inherit the scripts of their master.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![克隆继承了主精灵的脚本。](httpatomoreillycomsourcenostarchimages2134403.png.jpg)图2-26.
    克隆继承了主精灵的脚本。'
- en: Always pay special attention when using the **create clone of** block in a script
    that doesn’t start with the green flag trigger, or you could end up with more
    sprites than you intended. Consider the program shown in [Figure 2-27](ch02.html#cloning_in_response_to_a_key_press_event
    "Figure 2-27. Cloning in response to a key press event"). The first time you press
    the spacebar, a clone will be created, and the application will have two sprites
    (the master and the clone).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 **创建克隆** 块时，特别需要注意，如果脚本没有以绿色旗帜触发器开始，你可能会得到比预期更多的精灵。考虑下图中显示的程序 [图 2-27](ch02.html#cloning_in_response_to_a_key_press_event
    "图 2-27. 按键响应创建克隆")。第一次按下空格键时，会创建一个克隆，应用程序中会有两个精灵（主精灵和克隆精灵）。
- en: '![Cloning in response to a key press event](httpatomoreillycomsourcenostarchimages2134405.png.jpg)Figure 2-27. Cloning
    in response to a key press event'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![按键响应创建克隆](httpatomoreillycomsourcenostarchimages2134405.png.jpg)图 2-27. 按键响应创建克隆'
- en: Now, if you press the spacebar a second time, you’ll have four sprites in your
    application. Why? The master sprite will respond to the key press and create a
    clone, but the first clone will also respond and create another clone (that is,
    a clone of the clone). Press the spacebar a third time, and you’ll have eight
    sprites in your application. The number of clones will grow exponentially!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你第二次按下空格键，你的应用程序中将有四个精灵。为什么？主精灵会响应按键并创建一个克隆，但第一个克隆也会响应并创建另一个克隆（即克隆的克隆）。第三次按下空格键时，你的应用程序中将有八个精灵。克隆的数量将呈指数增长！
- en: You can solve this by only cloning sprites in scripts that start with the **when
    green flag clicked** block. These scripts are run only by the master sprite.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过仅在以 **当绿色旗帜点击时** 块开始的脚本中克隆精灵来解决这个问题。这些脚本仅由主精灵执行。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to move sprites to specific points on the Stage
    using absolute motion commands. You then used relative motion commands to move
    sprites with reference to their own position and direction. After that, you created
    some nifty drawings with the pen commands.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用绝对运动命令将精灵移动到舞台上的特定位置。然后，你使用相对运动命令参考精灵自己的位置和方向移动精灵。之后，你使用画笔命令创建了一些精美的图形。
- en: As you drew different shapes, you discovered the power of the **repeat** block,
    which allows you to create shorter and more efficient scripts. You also learned
    about the **stamp** command and used it with the **repeat** block to design complex
    patterns with ease.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你绘制不同的图形时，你发现了 **重复** 块的强大功能，它让你能够创建更简短、更高效的脚本。你还学习了 **印章** 命令，并与 **重复** 块结合使用，轻松设计复杂的图案。
- en: At the end of the chapter, you created two games and learned about Scratch’s
    clone feature. In the next chapter, you’ll use the *Looks* and *Sound* palettes
    to create even more engaging programs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，你创建了两个游戏，并了解了 Scratch 的克隆功能。在下一章，你将使用 *外观* 和 *声音* 调色板创建更具吸引力的程序。
- en: Problems
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: '| **Q:** | 1\. Explain how the following script works. Write the (*x*,*y*)
    coordinates for all corners of the figure.![image with no caption](httpatomoreillycomsourcenostarchimages2134407.png.jpg)
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 1\. 解释以下脚本是如何工作的。写出图形所有角落的 (*x*,*y*) 坐标。![无标题图片](httpatomoreillycomsourcenostarchimages2134407.png.jpg)
    |'
- en: '| **Q:** | 2\. Write a script to connect each of the following sets of points
    in order and reveal the final shape:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '| **问：** | 2\. 编写一个脚本，按顺序连接下列各组点，并展示最终形状：'
- en: (30,20), (80,20), (80,30), (90,30), (90,80), (80,80), (80,90), (30,90), (30,80),
    (20,80), (20,30), (30,30), (30,20)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (30,20), (80,20), (80,30), (90,30), (90,80), (80,80), (80,90), (30,90), (30,80),
    (20,80), (20,30), (30,30), (30,20)
- en: (–10,10), (–30,10), (–30,70), (–70,70), (–70,30), (–60,30), (–60,60), (–40,60),
    (–40,10), (–90,10), (–90,90), (–10,90), (–10,10)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (–10,10), (–30,10), (–30,70), (–70,70), (–70,30), (–60,30), (–60,60), (–40,60),
    (–40,10), (–90,10), (–90,90), (–10,90), (–10,10)
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Q:** | 3\. Write a script to draw each of the patterns shown below.![image
    with no caption](httpatomoreillycomsourcenostarchimages2134409.png.jpg) |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 3\. 编写一个脚本，绘制下列图案。![无标题图片](httpatomoreillycomsourcenostarchimages2134409.png.jpg)
    |'
- en: '| **Q:** | 4\. Consider the following script and its output. Re-create the
    script, add the necessary pen setup commands, run it, and explain how it works.![image
    with no caption](httpatomoreillycomsourcenostarchimages2134411.png.jpg) |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 4\. 请考虑以下脚本及其输出。重新创建该脚本，添加必要的画笔设置命令，运行并解释其工作原理。![无标题图片](httpatomoreillycomsourcenostarchimages2134411.png.jpg)
    |'
- en: '| **Q:** | 5\. Consider the following script and its output. Re-create the
    script, add the necessary pen setup commands, run it, and explain how it works.![image
    with no caption](httpatomoreillycomsourcenostarchimages2134413.png.jpg) |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 5\. 请考虑以下脚本及其输出。重新创建该脚本，添加必要的笔设置命令，运行并解释它是如何工作的。![没有标题的图片](httpatomoreillycomsourcenostarchimages2134413.png.jpg)
    |'
- en: '| **Q:** | 6\. Consider the following script and its output. Re-create the
    script, add the necessary pen commands, run it, and explain how it works.![image
    with no caption](httpatomoreillycomsourcenostarchimages2134415.png.jpg) |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 6\. 请考虑以下脚本及其输出。重新创建该脚本，添加必要的笔命令，运行并解释它是如何工作的。![没有标题的图片](httpatomoreillycomsourcenostarchimages2134415.png.jpg)
    |'
- en: '| **Q:** | 7\. Create the script shown below, add the necessary pen commands,
    and run it. Explain how the script works.![image with no caption](httpatomoreillycomsourcenostarchimages2134417.png.jpg)
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 7\. 创建如下所示的脚本，添加必要的笔命令并运行它。解释这个脚本是如何工作的。![没有标题的图片](httpatomoreillycomsourcenostarchimages2134417.png.jpg)
    |'
- en: '| **Q:** | 8\. Write a program that produces the output shown below.![image
    with no caption](httpatomoreillycomsourcenostarchimages2134419.png.jpg) |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 8\. 编写一个程序，生成如下所示的输出。![没有标题的图片](httpatomoreillycomsourcenostarchimages2134419.png.jpg)
    |'
- en: '| **Q:** | 9\. In this problem, you’ll write the scripts needed to complete
    the Balloon Blast game shown below.*BalloonBlast_NoCode.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134421.png.jpg)This
    game contains two sprites, named `Balloon` and `Rocket`. When you click the green
    flag, the `Balloon` sprite creates the five clones in the interface shown above.
    The `Rocket` sprite moves left and right on its own, bouncing off the edges of
    the Stage. You need to press the spacebar at the right moment to launch the rocket
    and pop the balloons.Open the file *BalloonBlast_NoCode.sb2*. This file contains
    the code for creating the five clones when the game starts. Your task is to complete
    the game by adding the following two scripts.![image with no caption](httpatomoreillycomsourcenostarchimages2134423.png.jpg)
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 9\. 在这个问题中，你将编写完成如下“气球爆破”游戏所需的脚本。*BalloonBlast_NoCode.sb2*![没有标题的图片](httpatomoreillycomsourcenostarchimages2134421.png.jpg)这个游戏包含两个精灵，分别名为`Balloon`和`Rocket`。当你点击绿色旗帜时，`Balloon`精灵会在上面的界面中创建五个克隆。`Rocket`精灵会自动左右移动，碰到舞台边缘时会反弹。你需要在合适的时机按下空格键发射火箭并爆破气球。打开文件*BalloonBlast_NoCode.sb2*。该文件包含在游戏开始时创建五个克隆的代码。你的任务是通过添加以下两个脚本来完成游戏。![没有标题的图片](httpatomoreillycomsourcenostarchimages2134423.png.jpg)
    |'
