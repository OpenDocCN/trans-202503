- en: '**14**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14**'
- en: '**IMAGEMAGICK AND WORKING WITH GRAPHICS FILES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**IMAGEMAGICK与图形文件的操作**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: The command line has an extraordinary range of capabilities in the Linux world,
    but because it’s text based, there’s not much you can do with graphics. Or is
    there?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux世界中，命令行有着极其广泛的功能，但由于它是基于文本的，你不能做太多图形相关的操作。或者说，真的不能吗？
- en: 'It turns out that a hugely powerful suite of command line utilities, ImageMagick,
    is available for just about every command line environment, from OS X to Linux
    to many more. To use the scripts in this chapter, you’ll need to download and
    install the suite from *[http://www.imagemagick.org/](http://www.imagemagick.org/)*
    or from a package manager such as `apt`, `yum`, or `brew`, if you didn’t already
    do so in [Script #91](ch13.xhtml#ch13lev1sec03) on [page 304](ch13.xhtml#page_304).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，强大的命令行工具套件ImageMagick几乎适用于每一个命令行环境，从OS X到Linux以及更多平台。如果你没有在[脚本#91](ch13.xhtml#ch13lev1sec03)中（第304页）已经下载并安装该套件，那么你需要从*[http://www.imagemagick.org/](http://www.imagemagick.org/)*或通过像`apt`、`yum`、`brew`这样的包管理器进行安装。
- en: Because the utilities are designed to work on the command line, they require
    very little disk space, coming in at 19MB or so (for the Windows release). You
    can also get the source code if you want to dive into some powerful and flexible
    software. Open source for the win, again.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些工具是为命令行设计的，所以它们占用的磁盘空间非常小，大约只有19MB（适用于Windows版本）。如果你想深入了解一些强大而灵活的软件，还可以获取源代码。开源再次获胜。
- en: '**#94 A Smarter Image Size Analyzer**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#94 更智能的图像大小分析器**'
- en: 'The `file` command offers the ability to ascertain the file type and, in some
    cases, the dimensions of an image. But too often it fails:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`file`命令提供了确定文件类型的能力，在某些情况下还能获得图像的尺寸。但它常常失败：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: PNG and GIF files work, but what about the more common JPEG? The `file` command
    can’t figure out the image’s dimensions. Annoying!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PNG和GIF文件是可以处理的，但那更常见的JPEG呢？`file`命令无法识别图像的尺寸，真让人烦恼！
- en: '***The Code***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: Let’s fix that with a script ([Listing 14-1](ch14.xhtml#ch14ex1)) that uses
    the `identify` tool from ImageMagick to far more accurately ascertain image dimensions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个脚本来解决这个问题（[列表 14-1](ch14.xhtml#ch14ex1)），该脚本使用ImageMagick的`identify`工具，更准确地确定图像的尺寸。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 14-1: The* `*imagesize*` *script*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表14-1：*`*imagesize*`*脚本*'
- en: '***How It Works***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: 'When you use the `-verbose` flag, the `identify` tool extracts an extraordinary
    amount of information about each image analyzed, as shown in its output for just
    one PNG graphic:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`-verbose`标志时，`identify`工具会提取关于每张分析图像的非常大量的信息，如它在仅一个PNG图形的输出中所展示的那样：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That’s a lot of data. Too much data, you might think. But without the `-verbose`
    flag, the output is rather cryptic:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是太多数据了，你可能会觉得数据量太大。但如果没有`-verbose`标志，输出就显得相当晦涩：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We want a happy medium, and getting there is where the output format string
    is helpful. Let’s look more closely at [Listing 14-1](ch14.xhtml#ch14ex1), focusing
    on the only meaningful line in the script ➊.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想找到一个合适的平衡点，输出格式字符串在实现这一目标时非常有帮助。让我们更仔细地看看[列表14-1](ch14.xhtml#ch14ex1)，专注于脚本中唯一有意义的行➊。
- en: The `-format` string has almost 30 options, allowing you to extract specific
    data you want from one or many images in exactly the format desired. We’re tapping
    into `%f` for the original filename, `%G` as a shortcut for width × height, and
    `%k` as a calculated value for the maximum number of colors used in the image.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`-format`字符串有近30个选项，可以让你从一张或多张图像中精确提取你需要的数据。我们将使用`%f`表示原始文件名，`%G`作为宽度×高度的快捷方式，以及`%k`作为计算值，用来表示图像中使用的最大颜色数。'
- en: You can learn more about the `-format` options at *[http://www.imagemagick.org/script/escape.php](http://www.imagemagick.org/script/escape.php)*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*[http://www.imagemagick.org/script/escape.php](http://www.imagemagick.org/script/escape.php)*了解更多关于`-format`选项的信息。
- en: '***Running the Script***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: ImageMagick does all the work, so this script is mostly just a way to encode
    the specific output format desired. Getting info on your images is fast and easy,
    as [Listing 14-2](ch14.xhtml#ch14ex2) shows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ImageMagick完成了所有的工作，所以这个脚本基本上只是编码所需的特定输出格式。正如[列表14-2](ch14.xhtml#ch14ex2)所示，获取图像信息既快捷又简单。
- en: '***The Results***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 14-2: Running the* `*imagesize*` *script*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表14-2：运行*`*imagesize*`*脚本*'
- en: '***Hacking the Script***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: Currently, we see the pixel size and available color set of the image, but a
    very useful addition would be the file size. However, any more information would
    be hard to read unless a little reformatting of the output is done.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，我们能看到图像的像素大小和可用的颜色集，但一个非常有用的补充是文件大小。然而，更多的信息会很难阅读，除非对输出进行一些重新格式化。
- en: '**#95 Watermarking Images**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#95 水印图像**'
- en: If you’re looking to protect your images and other content when you post online,
    you’re bound to be disappointed. Anything online is open to copying, no matter
    if you have a password, use a strong copyright notice, or even add code to your
    website that tries to inhibit users from saving individual images. The fact is
    that for a computer to be able to render anything online, it has to use the image
    buffer on the device, and that buffer can then be duplicated through a screen
    capture or similar tool.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在网上发布时保护你的图像和其他内容，你很可能会失望。任何在线内容都可以被复制，无论你是否设置密码，使用强大的版权声明，甚至是添加阻止用户保存单张图像的代码。事实上，任何在线的东西都需要通过设备的图像缓冲区来呈现，而这个缓冲区可以通过屏幕截图或类似工具被复制。
- en: But all is not lost. You can do two things to protect your online images. One
    is to only post small image sizes. Look at professional photographers’ sites and
    you’ll see what we mean. Usually they share only thumbnails because they want
    you to buy the larger image file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但一切并非无望。你可以做两件事来保护你的在线图像。一种方法是只发布小尺寸的图像。看看专业摄影师的网站，你就会明白我们是什么意思。通常他们只分享缩略图，因为他们希望你购买更大的图像文件。
- en: Watermarking is another solution, though some artists balk at the work of adding
    a copyright image or other identifying information directly to the photograph.
    But with ImageMagick, adding watermarks is easy, even in bulk, as shown in [Listing
    14-3](ch14.xhtml#ch14ex3).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 水印是另一种解决方案，尽管一些艺术家不愿意直接在照片上添加版权图像或其他标识信息。但使用ImageMagick，添加水印非常容易，甚至可以批量处理，正如[列表
    14-3](ch14.xhtml#ch14ex3)所示。
- en: '***The Code***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 14-3: The* `*watermark*` *script*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 14-3：* `*水印*` *脚本*'
- en: '***How It Works***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: Just about all the confusing code in this script is courtesy of ImageMagick.
    Yes, it’s doing complicated things, but even then, there’s something about how
    it’s designed and documented that makes ImageMagick a challenge to work with.
    Still, don’t be tempted to throw out the proverbial baby with the bathwater because
    the features and functionality of the various ImageMagick tools are amazing and
    well worth the learning curve.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这段脚本中的几乎所有混乱代码都来自ImageMagick。是的，它做了复杂的事情，但即便如此，ImageMagick的设计和文档让它成为一个很难使用的工具。不过，千万不要因此而放弃，因为ImageMagick各种工具的功能和特点非常强大，完全值得花时间去学习。
- en: The first step is to get the dimensions of the image ➊ so that the water-mark
    overlay will have exactly the same dimensions. Bad things happen if they don’t
    match!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取图像的尺寸➊，以便水印叠加层的尺寸与图像完全匹配。如果不匹配，就会发生问题！
- en: The `"%G"` produces width × height, which is then given to the `convert` program
    as the size of the new canvas to produce. The `convert` line at ➋ is one we copied
    from the ImageMagick documentation because, quite frankly, it’s tricky to get
    just right from scratch. (To learn more about the specifics of the `convert -draw`
    parameter language, we encourage you to do a quick online search. Or you can just
    copy our code!)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`"%G"`会输出宽度×高度，然后将其作为新画布的尺寸传递给`convert`程序。➋处的`convert`命令是我们从ImageMagick文档中复制的，因为老实说，从零开始准确地写出它相当棘手。（要了解`convert
    -draw`参数语言的具体信息，我们建议你做个快速的在线搜索，或者你也可以直接复制我们的代码！）'
- en: The new filename should be the base filename with `"+wm"` added, and that’s
    what the three lines at ➌ accomplish. The `rev` command reverses its input character
    by character so that the `cut -d. -f1` gets the filename suffix, since we don’t
    know how many dots are going to appear in the filename. Then the suffix is reordered
    the right way and `"+wm."` is added.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 新的文件名应该是基础文件名并加上`"+wm"`，这就是➌三行代码的作用。`rev`命令逐字符反转输入，这样`cut -d. -f1`就能获取文件名的后缀，因为我们无法预测文件名中会出现多少个点。然后，后缀被重新排序，并添加`"+wm."`。
- en: Finally, we use the `composite` utility ➍ to pull the pieces together and make
    our watermarked image. You can experiment with different `-dissolve` values to
    make the overlay more or less opaque.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`composite`工具➍将各个部分组合起来，制作带水印的图像。你可以尝试不同的`-dissolve`值，以调整叠加层的透明度。
- en: '***Running the Script***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: 'The script takes two arguments: the name of the image to watermark and the
    text of the watermarking sequence itself. If the watermark will be more than a
    single word, make sure the entire phrase is in quotes so it transfers properly,
    as [Listing 14-4](ch14.xhtml#ch14ex4) shows.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本接受两个参数：要加水印的图像名称和水印序列的文本。如果水印包含多个单词，请确保整个短语用引号括起来，以便正确传输，正如 [列表 14-4](ch14.xhtml#ch14ex4)
    所示。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 14-4: Running the* `*watermark*` *script*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 14-4：运行* `*watermark*` *脚本*'
- en: '***The Results***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: The result is shown in [Figure 14-1](ch14.xhtml#ch14fig1).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如 [图 14-1](ch14.xhtml#ch14fig1) 所示。
- en: '![image](../images/f14-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f14-01.jpg)'
- en: '*Figure 14-1: Image with automatically applied watermark*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-1：自动应用水印的图像*'
- en: 'If you run into an `unable to read font` error, then you are likely missing
    the Ghostscript software suite (common on OS X). To remedy this, install Ghostscript
    with your package manager. For example, use this command to install the `brew`
    package manager on OS X:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到 `unable to read font` 错误，那么很可能是缺少了 Ghostscript 软件套件（在 OS X 上比较常见）。为了解决这个问题，可以通过包管理器安装
    Ghostscript。例如，使用以下命令在 OS X 上安装 `brew` 包管理器：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '***Hacking the Script***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: The font size used for the watermark should be a function of the size of the
    image. If the image is 280 pixels wide, a 44-point watermark would be too big,
    but if the image is 3800 pixels wide, 44 points might be too small. Choosing an
    appropriate font size or text placement can be left to the user by adding it to
    the script as another parameter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 水印的字体大小应根据图像的大小来调整。如果图像宽度为 280 像素，44 点的水印会太大，但如果图像宽度为 3800 像素，44 点可能又会太小。选择合适的字体大小或文本位置可以通过将其添加为另一个参数留给用户。
- en: ImageMagick also knows the fonts on your system, so it would be helpful to allow
    users to specify a font by name to use as the watermark.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ImageMagick 还能够识别你系统中的字体，因此允许用户按名称指定用于水印的字体会很有帮助。
- en: '**#96 Framing Images**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#96 图像框架**'
- en: It’s often useful to be able to wrap a border or fancy frame around an image,
    and ImageMagick has a lot of capabilities in this regard through the `convert`
    utility. The problem is, as with the rest of the suite, it’s hard to figure out
    how to use this tool from the ImageMagick documentation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 包围图像添加边框或华丽框架通常非常有用，ImageMagick 在这方面有很多功能，可以通过 `convert` 工具来实现。问题是，就像这个工具套件的其他部分一样，很难从
    ImageMagick 文档中弄清楚如何使用这个工具。
- en: 'For example, here’s the explanation of the `-frame` parameter:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是 `-frame` 参数的解释：
- en: The size portion of the *geometry* argument indicates the amount of extra width
    and height that is added to the dimensions of the image. If no offsets are given
    in the *geometry* argument, then the border added is a solid color. Offsets *x*
    and *y*, if present, specify that the width and height of the border is partitioned
    to form an outer bevel of thickness *x* pixels and an inner bevel of thickness
    *y* pixels.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*geometry* 参数中的尺寸部分表示图像的宽度和高度上增加的额外宽度和高度。如果 *geometry* 参数中没有给出偏移量，那么添加的边框将是纯色的。如果有
    *x* 和 *y* 偏移量，则表示边框的宽度和高度被分割成一个外部的斜角，厚度为 *x* 像素，内部的斜角厚度为 *y* 像素。'
- en: Got it?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 明白了吗？
- en: Maybe it would be easier to just see an example. In fact, that’s exactly what
    we’ll do with the `usage()` function in this script, as shown in [Listing 14-5](ch14.xhtml#ch14ex5).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 也许直接查看一个示例会更容易。实际上，这正是我们将在这个脚本中通过 `usage()` 函数来做的，正如 [列表 14-5](ch14.xhtml#ch14ex5)
    中所示。
- en: '***The Code***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 14-5: The* `*frameit*` *script*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 14-5：* `*frameit*` *脚本*'
- en: '***How It Works***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: Since we’ve already explored `getopts` as a way to gracefully parse complex
    parameters to a script, this wrapper script is pretty straightforward, with most
    of the work happening in the last few lines. In the `for` loop ➊, a new version
    of the filename specified is created with a `"+f"` suffix (prior to the file type
    suffix).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经探讨了如何使用 `getopts` 来优雅地解析复杂的脚本参数，这个包装脚本相当简单，大部分工作发生在最后几行。在 `for` 循环 ➊ 中，创建了指定文件名的新版本，后缀为
    `"+f"`（在文件类型后缀之前）。
- en: For a filename like *abandoned-train.png*, the suffix would be `png` and the
    prefix would be `abandoned-train`. Notice we lost the period (`.`), but we’ll
    add that back in when we build the new filename ➋. Once that’s accomplished, it’s
    just a matter of invoking the `convert` program with all the parameters ➌.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 *abandoned-train.png* 这样的文件名，后缀将是 `png`，前缀将是 `abandoned-train`。注意，我们丢失了句点（`.`），但当我们构建新文件名时会把它加回去
    ➋。完成这一步之后，就只是调用 `convert` 程序并传入所有参数的问题 ➌。
- en: '***Running the Script***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Specify the type of frame you want—either with `-frame` (for more elaborate,
    3D effects) or with `-border` (for a simple border)—along with the appropriate
    ImageMagick geometry values, a preferred color for the border or matte portion,
    and the input filename (or filenames). [Listing 14-6](ch14.xhtml#ch14ex6) shows
    an example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 指定你想要的框架类型——可以使用`-frame`（用于更复杂的3D效果）或`-border`（用于简单的边框）——以及适当的ImageMagick几何值，喜欢的边框或底色，以及输入的文件名（或文件名列表）。[清单14-6](ch14.xhtml#ch14ex6)展示了一个例子。
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 14-6: Running the* `*frameit*` *script*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-6：运行* `*frameit*` *脚本*'
- en: '***The Results***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: The result of this invocation is shown in [Figure 14-2](ch14.xhtml#ch14fig2).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的结果如[图14-2](ch14.xhtml#ch14fig2)所示。
- en: '![image](../images/f14-02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f14-02.jpg)'
- en: '*Figure 14-2: A museum-style 3D matte frame*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-2：博物馆风格的3D底框*'
- en: '***Hacking the Script***'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: 'If you forget a parameter, ImageMagick issues a typically baffling error:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了一个参数，ImageMagick会给出一个通常令人困惑的错误：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A smart hack would be to add additional error testing in the script to save
    the user from these ugly things, don’t you think?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个聪明的技巧是在脚本中添加额外的错误测试，以防止用户遭遇这些麻烦，你不觉得吗？
- en: It’s possible that this script might hiccup with filenames that include spaces.
    Of course, spaces should never be included in a filename that’s intended to go
    on a web server, but you should still fix the script to remove this problem.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本可能会在文件名包含空格时出现问题。当然，空格绝不应该出现在用于放置在网页服务器上的文件名中，但你仍然应该修复脚本以解决这个问题。
- en: '**#97 Creating Image Thumbnails**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#97 创建图像缩略图**'
- en: 'We’re surprised how often this problem crops up: someone either includes a
    ridiculously large image on a web page or emails a photograph far larger than
    the computer screen. It’s not only annoying but also a waste of bandwidth and
    computer resources.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很惊讶这个问题出现得如此频繁：有人在网页上放了一个极其大的图片，或者通过电子邮件发送了一张远大于计算机屏幕的照片。这不仅让人烦恼，而且浪费带宽和计算机资源。
- en: 'This script we will implement creates a thumbnail image from any picture you
    give it, allowing you to specify detailed height and width parameters or simply
    indicate that the resultant smaller image must fit within certain dimensions.
    Indeed, creating thumbnails is an officially recommended use of the cool `mogrify`
    utility:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要实现的这个脚本从你给定的任何图片创建一个缩略图，允许你指定详细的高度和宽度参数，或者简单地指示生成的小图像必须适应某些尺寸。事实上，创建缩略图是官方推荐使用强大的`mogrify`工具的一种方式：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that generally you want to create your thumbnails in a parallel directory
    rather than in the same directory as the original images. In fact, the `mogrify`
    utility can be quite dangerous if misused, as it can overwrite all the images
    in a directory with a thumbnail version, destroying the original copy. To alleviate
    this concern, the `mogrify` command creates 100 × 100 thumbnail images in the
    *thumbs* subdirectory, converting them from JPEG to GIF along the way.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通常你应该在与原始图像不同的并行目录中创建缩略图，而不是与原始图像放在同一目录下。事实上，`mogrify`工具如果被误用，可能会非常危险，因为它会将目录中的所有图像覆盖成缩略图版本，破坏原始文件。为了解决这个问题，`mogrify`命令会在*thumbs*子目录中创建100
    × 100的缩略图，将其从JPEG格式转换为GIF格式。
- en: This is useful but still narrow in application. Let’s create a more general
    purpose thumbnail-processing script, like the one shown in [Listing 14-7](ch14.xhtml#ch14ex7).
    It could certainly be used to accomplish the above task, but it can also be used
    for a lot of other image reduction tasks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有用，但应用范围仍然较窄。让我们创建一个更通用的缩略图处理脚本，像[清单14-7](ch14.xhtml#ch14ex7)中所示的那样。它当然可以用来完成上述任务，但也可以用于许多其他的图像缩小任务。
- en: '***The Code***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 14-7: The* `*thumbnails*` *script*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-7：* `*thumbnails*` *脚本*'
- en: '***How It Works***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: ImageMagick is so complicated, it just begs for scripts like this one that can
    simplify common tasks. In this script, we’re tapping into a couple of additional
    features, including the `-strip` ➋ parameter to remove the exchangeable image
    file format (EXIF) information that’s useful for photo archives but unnecessary
    for online use (for example, camera used, ISO speed of photograph, f-stop, geolocation
    data, and so on).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ImageMagick非常复杂，它确实需要像这样的脚本来简化常见任务。在这个脚本中，我们利用了一些额外的功能，包括`-strip` ➋参数，用来去除可交换图像文件格式（EXIF）信息，这些信息对照片归档有用，但在网上使用时并不必要（例如，使用的相机、照片的ISO速度、光圈值、地理位置数据等）。
- en: The other new flag is `-unsharp` ➊, a filter that ensures the shrunk thumbnails
    don’t end up blurry from the processing. Explaining the potential values for this
    parameter and how they would affect the result would involve a whole lotta science,
    so in the spirit of keeping things simple, we’re using the parameter `0x.5` without
    explanation. Want to know more? A web search will pull up the details quickly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新的标志是`-unsharp` ➊，它是一个滤镜，确保缩小的缩略图不会因为处理而变得模糊。解释这个参数的潜在值及其如何影响结果涉及大量的科学内容，因此为了简化，我们使用了`0x.5`这个参数而不做解释。想了解更多？网络搜索会很快提供相关细节。
- en: The best way to understand the difference between thumbnails of an exact size
    and those that fit within certain dimensions is to see examples, as in [Figure
    14-3](ch14.xhtml#ch14fig3).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 理解精确大小的缩略图和适应某些尺寸的缩略图之间的区别，最好的方法是查看实例，就像在[图 14-3](ch14.xhtml#ch14fig3)中那样。
- en: '![image](../images/f14-03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f14-03.jpg)'
- en: '*Figure 14-3: Difference between a thumbnail of an exact given size (*`*-e*`
    *argument) and one set to fit certain dimensions proportionally (*`*-f*` *argument)*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-3：指定大小的缩略图（`*-e*` *参数）与按比例适应某些尺寸的缩略图（`*-f*` *参数）之间的区别*'
- en: The difference between creating an exact thumbnail and a fitted thumbnail internally
    is just a single exclamation mark. That’s what’s going on at ➌.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建精确缩略图和创建适应缩略图之间的区别，仅仅是一个感叹号。这就是在 ➌ 处发生的事情。
- en: Other than that, you’ve seen everything in this script before, from the breakdown
    and reassembly of filenames to the use of the `-format` flag to get the height
    or width of the current image.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你在这个脚本中看到的所有内容之前都见过，从文件名的分解和重组，到使用`-format`标志来获取当前图像的高度或宽度。
- en: '***Running the Script***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: '[Listing 14-8](ch14.xhtml#ch14ex8) shows the script at work, creating new thumbnails
    in different sizes for a photo of Hawaii.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 14-8](ch14.xhtml#ch14ex8)展示了脚本的实际工作过程，它为一张夏威夷的照片创建了不同尺寸的缩略图。'
- en: '***The Results***'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 14-8: Running the* `*thumbnails*` *script*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 14-8：运行* `*thumbnails*` *脚本*'
- en: '***Hacking the Script***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: A neat addition to this script would be the ability to make an assortment of
    thumbnails based on multiple size ranges passed in, so for example, you could
    create a 100 × 100, 500 × 500, and wallpaper-sized 1024 × 768 image all in one
    go. On the other hand, perhaps such a task is better left to another shell script.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的一个整洁的补充功能是能够根据传入的多个尺寸范围生成各种缩略图，例如，你可以一次性创建一个 100 × 100，500 × 500 和壁纸尺寸的
    1024 × 768 图像。另一方面，也许这样的任务更适合交给另一个 shell 脚本来完成。
- en: '**#98 Interpreting GPS Geolocation Information**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#98 解读 GPS 地理位置信息**'
- en: 'Most photographs nowadays are taken with cell phones or other smart digital
    devices that know their latitude and longitude. There’s a privacy issue with this,
    of course, but there’s also something interesting about being able to pinpoint
    where a photograph was taken. Unfortunately, while ImageMagick’s `identify` tool
    lets you extract that GPS information, the format of the data makes it hard to
    read:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在大多数照片都是用手机或其他智能数字设备拍摄的，这些设备知道它们的纬度和经度。当然，这涉及到隐私问题，但能够准确定位照片拍摄地点也是非常有趣的。不幸的是，虽然
    ImageMagick 的 `identify` 工具可以让你提取这些 GPS 信息，但数据的格式使其难以读取：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The information shown is in degrees, minutes, and seconds—which makes sense—but
    the format is nonintuitive, particularly since the format that a site like Google
    Maps or Bing Maps expects is more akin to this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的信息是以度、分、秒的形式呈现的——这很合理——但这种格式不太直观，特别是因为像 Google Maps 或 Bing Maps 这样的站点期望的格式更像是：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This script translates the EXIF information into the latter format so you can
    copy and paste the data directly into a mapping program. As part of that process,
    the script has to solve some rudimentary equations (notice that the seconds value
    of the latitude provided by the `identify` tool is 1983/100, which equals 19.83).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将 EXIF 信息转换为后者的格式，以便你可以将数据直接复制粘贴到映射程序中。作为这一过程的一部分，脚本需要解决一些基础方程（请注意，`identify`
    工具提供的纬度秒数值是 1983/100，等于 19.83）。
- en: '***The Code***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: 'The idea of latitude and longitude is older than you might think. In fact,
    Portuguese mapmaker Pedro Reinel first drew latitude lines on his maps back in
    1504\. The calculations also involve some peculiar math. Fortunately, we don’t
    have to work them out. Instead, we just need to know how to convert the EXIF latitude
    and longitude values into those that modern mapping applications expect, as you’ll
    see in [Listing 14-9](ch14.xhtml#ch14ex9). This script also makes use of the `echon`
    script from [Script #8](ch01.xhtml#ch01lev1sec09) on [page 33](ch01.xhtml#page_33).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '纬度和经度的概念比你想象的要古老。事实上，葡萄牙地图制作人Pedro Reinel早在1504年就开始在他的地图上绘制纬度线。计算中也涉及一些特殊的数学。幸运的是，我们不需要手动计算。相反，我们只需知道如何将EXIF中的纬度和经度值转换为现代地图应用程序所期望的格式，正如[Listing
    14-9](ch14.xhtml#ch14ex9)中所看到的那样。这个脚本还使用了[Script #8](ch01.xhtml#ch01lev1sec09)中的`echon`脚本，[第33页](ch01.xhtml#page_33)有详细说明。'
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 14-9: The* `*geoloc*` *script*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-9: The* `*geoloc*` *脚本*'
- en: '***How It Works***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***原理***'
- en: Every time we explore using ImageMagick, we find that there’s another parameter
    and another way to utilize its capabilities. In this case, it turns out that you
    can use the `-format` argument at ➊ to extract only specific matching parameters
    from the EXIF information associated with an image.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们探索使用ImageMagick时，我们都会发现有新的参数和新的方法来利用它的功能。在这个案例中，事实证明你可以在➊处使用`-format`参数，仅提取与图像关联的EXIF信息中的特定匹配参数。
- en: Note that we use `GPSL` as the pattern to `grep` for, not `GPS`. That’s so we
    won’t have to pick through the additional GPS-related information that would be
    reported. Try removing the `L` and see how much other EXIF data is printed!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`GPSL`作为`grep`的匹配模式，而不是`GPS`。这样我们就不用去筛选其他额外的GPS相关信息了。试试去掉`L`，看看会打印出多少其他EXIF数据！
- en: After that, it’s a matter of extracting specific fields of information and solving
    the mathematical equations with `scriptbc` to convert the data to a meaningful
    format, as demonstrated by the `latdeg` lines at ➋.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，就是提取特定的信息字段，并通过`scriptbc`解决数学方程，将数据转换为有意义的格式，就像➋处的`latdeg`行所展示的那样。
- en: By this point, pipes with `cut` used more than once should be familiar to you.
    These are a super useful scripting tool!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，使用`cut`的管道命令应该已经不陌生了。这些是非常有用的脚本工具！
- en: Once all the data is extracted and all the equations solved, we need to reassemble
    the information in a manner consistent with the standard notation for latitude
    and longitude, as we do at ➌. And we’re done!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有数据提取完成，所有方程式解决之后，我们需要以符合标准的纬度和经度表示方式重新组合信息，就像我们在➌处所做的那样。这样就完成了！
- en: '***Running the Script***'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Give the script an image, and if the file includes latitude and longitude information,
    the script will convert it to a format that’s ready to be analyzed by Google Maps,
    Bing Maps, or any other major mapping program, as [Listing 14-10](ch14.xhtml#ch14ex10)
    shows.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 给脚本输入一张图像，如果文件包含纬度和经度信息，脚本将其转换为可以被Google Maps、Bing Maps或任何其他主要地图程序分析的格式，正如[Listing
    14-10](ch14.xhtml#ch14ex10)所示。
- en: '***The Results***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 14-10: Running the* `*geoloc*` *script*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-10: 运行* `*geoloc*` *脚本*'
- en: '***Hacking the Script***'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: What happens if you input a photograph that doesn’t have EXIF information? That’s
    something that the script should address gracefully, not just output an ugly error
    message from a failed call to `bc` or print empty coordinates, don’t you think?
    Adding some more defensive code that ensures the GPS location values pulled from
    ImageMagick are sane would be a useful addition.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入一张没有EXIF信息的照片会发生什么呢？这正是脚本应该优雅地处理的问题，而不仅仅是输出一个由于`bc`调用失败而产生的错误信息，或者打印出空的坐标，不是吗？增加一些防御性代码，确保从ImageMagick提取的GPS位置信息是合理的，将是一个有用的改进。
