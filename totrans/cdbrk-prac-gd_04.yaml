- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: 'Simple substitution ciphers without spaces between words: Patristocrats'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有单词间空格的简单替换密码：Patristocrats
- en: '![](image_fi/502727c04/g04001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c04/g04001.png)'
- en: 'The message shown in [Figure 4-1](#figure4-1) was sent to the *New York Post*
    by a copycat of the infamous Zodiac Killer (see [Chapter 6](c06.xhtml)) in 1994—about
    twenty-five years after the killer’s last original message had appeared.^([1](b06.xhtml#c04-endnote-1))
    It is encrypted with the substitution table provided in the same figure and decrypts
    to the following plaintext (which includes a few spelling mistakes): `THIS IS
    THE ZODIAC SPEUKING. I AM IN CONTROL. THO’ MASTERY, BE READY FOR MORE. YOURS TRLIY.`'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图4-1](#figure4-1)中显示的消息是由臭名昭著的黄道杀手的模仿者于1994年发送给*纽约邮报*的——大约是在杀手最后一条原始信息发布的二十五年后。（参见[第六章](c06.xhtml)）该信息使用了同一图中提供的替换表进行加密，并解密为以下明文（包括一些拼写错误）：`THIS
    IS THE ZODIAC SPEUKING. I AM IN CONTROL. THO’ MASTERY, BE READY FOR MORE. YOURS
    TRLIY.`
- en: How a Patristocrat, a simple substitution cipher without spaces, works
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个Patristocrat密码，作为一种没有空格的简单替换密码，如何运作
- en: As you will certainly have noticed, this Zodiac copycat cryptogram was encrypted
    with a monoalphabetic substitution cipher of the different-alphabet type. However,
    unlike the ciphertexts we saw in [Chapter 3](c03.xhtml), this one doesn’t contain
    spaces between the words. Crypto puzzle fans and members of the American Cryptogram
    Association typically use the term *Patristocrat* to refer to monoalphabetic substitution
    ciphers without spaces, especially ones that use Latin letters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你肯定注意到的，这个黄道模仿者密码是用不同字母表类型的单字母替换密码加密的。然而，与我们在[第3章](c03.xhtml)中看到的密码不同，这个密码没有单词之间的空格。密码谜题爱好者和美国密码谜语协会的成员通常用*Patristocrat*这个术语来指代没有空格的单字母替换密码，特别是那些使用拉丁字母的密码。
- en: '![](image_fi/502727c04/f04001.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c04/f04001.png)'
- en: 'Figure 4-1: This message by an alleged murderer is encrypted in a monoalphabetic
    substitution cipher. It doesn’t contain spaces.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1：这条疑似凶手的信息使用单字母替换密码进行加密，并且没有空格。
- en: It should be clear that the absence of spaces makes a Patristocrat more difficult
    to break than an Aristocrat cipher. However, Patristocrats are more difficult
    for the legitimate recipient to handle, too, because it is sometimes hard to correctly
    determine the word boundaries when decrypting the message. Ambiguities may appear.
    For instance, `YOUDONTGETMEAPARTOFTHEUNION` may mean “You don’t get me, a part
    of the union,” or “You don’t get me apart of the union.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很明显，缺少空格使得Patristocrat密码比贵族密码更难破译。然而，Patristocrat密码对合法接收者来说也更难处理，因为在解密消息时，有时很难正确确定单词边界。可能会出现歧义。例如，`YOUDONTGETMEAPARTOFTHEUNION`可能意味着“你不了解我，联合的一部分”，或者“你不了解我，联合之外的一部分”。
- en: For this reason, we encounter Patristocrat ciphers a lot less in practice than
    ordinary simple substitution ciphers. Still, this kind of encryption is far from
    infrequent and therefore should be studied by everybody interested in codebreaking.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们在实际应用中遇到Patristocrat密码的频率远低于普通的简单替换密码。然而，这种加密方式并非罕见，因此任何有意研究破译密码的人都应该学习它。
- en: How to detect a Patristocrat
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测一种Patristocrat密码
- en: If the text you are looking at has no pattern of word breaks, or if this patten
    is too regular (consisting, for instance, of groups of five characters), you may
    be dealing with a Patristocrat. A Patristocrat will generally have the same letter
    variety as other simple substitution cryptograms, which means that frequency analysis
    and the index of coincidence are helpful tools to detect it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到的文本没有单词间的分隔符，或者这种模式过于规律（例如，由五个字符一组组成），那么你可能正在处理一个Patristocrat密码。Patristocrat密码通常具有与其他简单替换密码相同的字母种类，这意味着频率分析和巧合指数是有效的工具来检测它。
- en: As an example, let’s look at a cryptogram published by the NSA. As many readers
    might know, the NSA is quite active on social media, publishing crypto puzzles
    on Facebook (NSAUSGov) and Twitter ([@NSAUSGov](http://www.twitter.com/@NSAUSGov)).
    If you’re interested in a career at this agency, solving these challenges might
    be a good way to get their attention. The ciphertext in [Figure 4-2](#figure4-2)
    is the first of four challenge ciphers that the NSA announced via Twitter in May
    2014\. Because each cipher was tweeted on a Monday, they are referred to as the
    “NSA Monday Challenges.”^([2](b06.xhtml#c04-endnote-2))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/f04002.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2: First of the four NSA Monday Challenges in 2014'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a transcript of the first NSA Monday Challenge:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '`tpfccdlfdtte pcaccplircdt dklpcfrp?qeiq`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`lhpqlipqeodf gpwafopwprti izxndkiqpkii`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '`krirrifcapnc dxkdciqcafmd vkfpcadf.`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t let the spaces confuse you. They separate blocks of twelve letters and
    do not correspond to the word separations in the plaintext. Here’s a frequency
    analysis:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/g04002.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: The frequencies are consistent with a simple substitution cipher. The index
    of coincidence of the ciphertext is 6.7%, which is exactly the expected value
    of an English text. So, it makes sense to assume that this first NSA Monday Challenge
    is a Patristocrat.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: How to break a Patristocrat
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first NSA Monday Challenge can be solved within seconds by a computer, using
    techniques such as hill climbing (see [Chapter 16](c16.xhtml)). To do so, you
    could use the cryptogram solver available as a part of Tyler Akins’ Cipher Tools
    at [https://rumkin.com/tools/cipher/](https://rumkin.com/tools/cipher/) or CrypTool
    2\. For those who prefer to solve cryptograms by hand, read on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Frequency analysis using digraphs
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Clearly, frequency analysis can be very helpful for breaking a Patristocrat,
    but we can use a few additional statistics in our analyses. The first involves
    *digraphs*, or consecutive letter pairs, that appear in the text. Here is a frequency
    analysis of digraphs in the first NSA Monday Challenge:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/g04003.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'To make use of these statistics, we need a few further facts about the English
    language:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The most frequent digraph in the English language is *EN*.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The digraph *ER* is frequent in both directions: *ER*/*RE*.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most frequent digraph consisting of doubled letters is *LL*, followed by
    *TT* and *SS*.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The digraphs *AA* and *II* are very rare in English, although *A* and *I* are
    frequent standalone letters.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about English digraphs in Appendix B.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: You might initially assume that the most frequent digraph in the ciphertext
    corresponds to the most frequent one in the English language. However, this assumption
    doesn’t work very well for a ciphertext of only about a hundred letters. Nevertheless,
    knowledge of digraph frequencies can be helpful, as will become clear.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, let’s also perform a triple-letter (trigraph) analysis of
    the ciphertext. This analysis reveals that the trigraphs `PQE` and `PCA` appear
    twice, while all other groupings of three letters have a frequency of one. The
    most frequent trigraph in the English language is *THE*, followed by *AND*, *ING*,
    *ENT*, *ION*, *HER*, *FOR*, and *THA* (see Appendix B for additional trigraph
    statistics).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Trigraph frequencies may be quite helpful for breaking longer ciphertexts, but
    they are not relevant here because only two trigraphs appear more than once in
    the challenge. For similar reasons, tetragraph (four-letter), pentagraph (five-letter),
    and hexagraph (six-letter) frequencies are of no use in this context, though,
    believe it or not, they all have been used by codebreakers. In general, a group
    of *n* letters is referred to as an *n-graph*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now try to apply the statistics we have computed. As shown in our initial
    frequency analysis, the most frequent letter in the first NSA Monday Challenge
    ciphertext is `P` (12.5%), followed by `C` (11.54%) and `I` (10.58%). So, let’s
    assume that these letters stand for `E`, `T`, and `A`, the most frequent letters
    in the English language. There are several possibilities for how to map `P`, `C`,
    and `I` onto `E`, `T`, and `A`, starting with the following option:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '`* * T * * * * * A * * * * * * E * * * * * * * * * *`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'We could check the plausibility of this assumption by taking a look at the
    resulting digraphs, either by hand or by using modern tools such as Cipher Tools
    or CrypTool 2, which produces the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/g04004.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: It is immediately clear that a few things don’t look plausible. For example,
    the digraph `AA` (which appears twice) and the digraph `AE` are not very common
    in English. We’re probably on the wrong track.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'We therefore try another assumption:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '`* * A * * * * * T * * * * * * E * * * * * * * * * *`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'This renders the following plaintext candidate:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '`*E*AA*******EA*AAE*T*A*****EA**E?**T***E**TE******E****E*E**TT*****T*E*TT**T**T*A*E*A****AT*A*******EA***`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Again, we have two `AA`s, which is not very likely. Moreover, the trigraph `AAE`
    appears in the plaintext but is very rare in the English language. Our guess was
    apparently wrong again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try a third assumption:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`* * T * * * * * E * * * * * * A * * * * * * * * * *`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'This renders as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '`*A*TT*******AT*TTA*E*T*****AT**A?**E***A**EA******A****A*A**EE*****E*A*EE**E**E*T*A*T****TE*T*******AT***`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: This is the best result so far, so let’s stick with it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Examining the results further, it becomes apparent that the missing letter
    (a ciphertext `A`) in `AT*TTA` is probably a vowel. As `A` and `E` are already
    in use, this letter can only be `I`, `O`, `U`, or `Y`. If `I` is correct, we get
    the digraph `IT`, which is a frequent English word. Let’s try this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`I * T * * * * * E * * * * * * A * * * * * * * * * *`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'This renders as the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`*A*TT*******ATITTA*E*T*****AT**A?**E***A**EA******A*I**A*A**EE*****E*A*EE**E**E*TIA*T****TE*TI******ATI**`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'This looks good; it could be English, and there is nothing that shows up as
    a red flag. What can we try next? The string `ATI**` at the end might stand for
    `ATING`, as in `RATING` or `SKATING`. Let’s add `N` and `G` to our table:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '`I * T N * G * * E * * * * * * A * * * * * * * * * *`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'We now get this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '`*AGTTN*GN***ATITTA*E*TN*N**ATG*A?**E***A**EA***NG*A*IG*A*A**EE***N*E*A*EE**E**EGTIA*TN**NTE*TIG*N**GATING`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '`AGTTN` and `GTIA` are not very likely in an English text. Moreover, the word
    `GATING` at the end doesn’t make much sense. *EN*, the most frequent English digraph,
    doesn’t appear at all in this plaintext candidate. Altogether, this means that
    our assumption concerning `N` and `G` is probably wrong.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the last five letters are not `ATING`, but `ATION`. There are many
    words with this ending, for instance, `STATION`, `RELATION`, and `FRUSTRATION`.
    Let’s check this guess:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`I * T O * N * * E * * * * * * A * * * * * * * * * *`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our plaintext candidate:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`*ANTTO*NO***ATITTA*E*TO*O**ATN*A?**E***A**EA***ON*A*IN*A*A**EE***O*E*A*EE**E**ENTIA*TO**OTE*TIN*O**NATION`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'This looks pretty good. `NATION` as the last word in an NSA cryptogram is quite
    plausible. The digraph `EN`, which we expect to be frequent, shows up once. Also,
    we can now guess several additional words: `O**NATION` probably means `OUR NATION`;
    `E**ENTIA*` could stand for `ESSENTIAL`; and `*ANTTO` most likely represents `WANT
    TO`. This gives us several more letters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`I * T O * N * * E * R * * L * A * S * W * U * * * *`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our next plaintext candidate:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`WANTTO*NOWW*ATITTA*ESTOWOR*ATNSA?**E***A**EA***ON*A*IN*A*ASWEE**LORE*AREERSESSENTIALTO*ROTE*TIN*OURNATION`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Guessing the remaining letters is straightforward. Here’s the plaintext of
    the first NSA Monday Challenge:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`WANT TO KNOW WHAT IT TAKES TO WORK AT NSA? CHECK BACK EACH MONDAY IN MAY AS
    WE EXPLORE CAREERS ESSENTIAL TO PROTECTING OUR NATION.`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the substitution table (ciphertext letters marked with `?` are those
    for which the corresponding plaintext letter does not exist):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`Plaintext:` `A B C D E F G H I J K L M N O P Q R S T U V W X Y Z`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`Ciphertext: P H Q G I ? M E A ? L N O F D X ? K S C V ? T Z W ?`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Word guessing
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Other techniques can help us decipher Patristocrats. Let’s look at the first
    NSA Monday Challenge (including the frequency chart) again:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`tpfccdlfdtte pcaccplircdt dklpcfrp?qeiq lhpqlipqeodf gpwafopwprti izxndkiqpkii
    krirrifcapnc dxkdciqcafmd vkfpcadf.`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/g04005.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: One possibility is to start by guessing a word. This would be a lot easier if
    we knew the positions of the spaces, but this is not the case here. Still, word
    guessing may work. We know that the NSA is the sender of the message, so searching
    for the trigraph `NSA` seems like a good idea. This search won’t work, however,
    as this set of letters is hard to spot in the more than one hundred trigraphs
    we would have to check.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能性是从猜测一个单词开始。如果我们知道空格的位置，这将变得容易得多，但在这里并不是如此。不过，猜单词可能有效。我们知道NSA是消息的发送者，因此搜索三字母组合`NSA`似乎是个不错的主意。然而，这个搜索并不起作用，因为这个字母组合在我们需要检查的上百个三字母组合中很难被发现。
- en: 'Let’s assume that we know from some source that the word `CAREER` appears in
    the plaintext (after all, `CAREER` is a likely word in an NSA challenge cryptogram
    made to attract talented codebreakers). Now we can use it as a crib. The word
    `CAREER` contains the string `REER`, which has a letter pattern of type 1221\.
    If we search for this pattern in the ciphertext, we find two strings of this kind:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们知道某个来源提供的信息，表示单词`CAREER`出现在明文中（毕竟，`CAREER`是NSA为吸引有才华的破译者而制作的加密题目中的一个可能单词）。现在我们可以将它作为密码提示。单词`CAREER`包含字符串`REER`，它的字母模式是1221型。如果我们在密文中搜索这个模式，就会找到两个类似的字符串：
- en: '`KIIK`: This looks like a good candidate.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KIIK`：这看起来是一个不错的候选项。'
- en: '`IRRI`: There’s an `R` left of the first `I`, so the letter pattern is actually
    21221\. This doesn’t fit with `CAREER`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IRRI`：第一个`I`左边有一个`R`，因此字母模式实际上是21221型。这与`CAREER`不匹配。'
- en: This means that `KIIK` is the only string that fits. If our guess is correct,
    `QPKIIK` stands for `CAREER`. The identified letters `A`, `C`, `E`, and `R` should
    be enough to determine the remaining letters. We leave the rest of the deciphering
    process to the reader.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`KIIK`是唯一符合的字符串。如果我们的猜测是正确的，`QPKIIK`代表`CAREER`。已识别的字母`A`、`C`、`E`和`R`应该足以确定其余的字母。我们将解密的剩余部分留给读者。
- en: Success stories
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功故事
- en: A prison message
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一条监狱消息
- en: The note depicted in [Figure 4-3](#figure4-3) was sent in 2012 by an inmate
    of a prison in Manchester, UK, to his sister.^([3](b06.xhtml#c04-endnote-3)) According
    to the sender of the message, the numbers represented a puzzle for his sister
    to solve. Police of course immediately suspected an encrypted message, so they
    asked British forensic linguist John Olsson to take a look at the note.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图4-3](#figure4-3)所示，2012年，一名英国曼彻斯特监狱的囚犯将这张纸条寄给了他的姐姐。^([3](b06.xhtml#c04-endnote-3))
    根据消息的发送者说，数字代表了一个谜题，让他的姐姐来解答。警方当然立即怀疑这是加密信息，于是他们请来了英国法医语言学家John Olsson来查看这张纸条。
- en: '![](image_fi/502727c04/f04003.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c04/f04003.png)'
- en: 'Figure 4-3: This encrypted message sent in 2012 by a British prison inmate
    doesn’t contain spaces.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-3：这份由2012年英国监狱囚犯发送的加密消息中没有空格。
- en: Olsson saw that the cryptogram contained twenty-three distinct numbers. A frequency
    analysis revealed that it was consistent with a simple substitution ciphertext.
    To break the cipher, Olsson first tried to guess words—a difficult task, as the
    message didn’t contain spaces. Following a systematic approach, Olsson analyzed
    840 letter combinations of various lengths in the ciphertext and checked each
    one to see if it could represent a certain word. The breakthrough came when he
    assumed that the sequence `38`, `9`, `5`, `10`, `3`, `5` stood for `PLEASE`—a
    guess that proved correct. Knowing five letters, Olsson could then identify all
    the others. Here are the first eight lines of the plaintext. (It contains many
    mistakes and unusual spellings.)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Olsson发现加密文本中包含二十三个不同的数字。频率分析显示，这与简单替换加密密文一致。为了破解这个密码，Olsson首先尝试猜测单词——这是一项艰难的任务，因为消息中没有空格。通过系统地分析Olsson分析了密文中840种不同长度的字母组合，并检查每个字母组合是否能够代表某个特定的单词。突破口出现在他假设`38`、`9`、`5`、`10`、`3`、`5`代表`PLEASE`时——这个猜测证明是正确的。在知道了五个字母之后，Olsson便能识别出所有其他字母。以下是明文的前八行。（它包含许多错误和不常见的拼写。）
- en: '`KOH C U M M A x I WID SA`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`KOH C U M M A x I WID SA`'
- en: '`xY UNCLE PLEASE I`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`xY UNCLE PLEASE I`'
- en: '`RUSH SHUD TAKE 2 DAYS 2`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`RUSH SHUD TAKE 2 DAYS 2`'
- en: '`A WEK DA TASK IS TO BE`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`A WEK DA TASK IS TO BE`'
- en: '`COMPLETED BY ANY ME-`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`COMPLETED BY ANY ME-`'
- en: '`ANS NECERSSARY PLEASE`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANS NECERSSARY PLEASE`'
- en: '`TASK STATEMENT FROM`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`TASK STATEMENT FROM`'
- en: '`SHAKA THROUGH INDECEND-`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHAKA THROUGH INDECEND-`'
- en: 'One potential way to interpret this plaintext is this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能的方式来解读这个明文是：
- en: '`Kohcumma and I would say, “Uncle, please don’t rush. Should take two days
    to a week.” The task is to be completed by any means necessary. Please task statement
    from Shaka through indecent . . .`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the message is available online at Klaus’s blog.^([4](b06.xhtml#c04-endnote-4))
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The Cheltenham Number Stone
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The British Government Communications Headquarters (GCHQ) is one of the most
    powerful surveillance organizations in the world, comparable to the American NSA.
    It is located in a large, round building (“The Doughnut”) on the outskirts of
    Cheltenham, UK. A side exit of this building leads to Hester’s Way Park, where
    a set of nine stone sculptures, the *Listening Stones*, created in 2004 by artist
    Gordon Young, are exhibited.^([5](b06.xhtml#c04-endnote-5))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Each of the *Listening Stones* has a set of carvings consisting of letters,
    numbers, or symbols. Two of these inscriptions are encrypted messages. Because
    one of these ciphertexts consists of numbers while the other is composed of letters,
    we refer to them as the “Number Stone” and the “Letter Stone,” respectively (though
    these are not their official names). The Letter Stone will be covered in Chapter
    16.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 4-4](#figure4-4) shows the Number Stone, which bears a cryptogram consisting
    of about 1,300 two-digit numbers, all between 01 and 66.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/F04004.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-4: The Number Stone is one of the *Listening Stones* created in 2004
    by British artist Gordon Young. The inscribed numbers represent an encrypted message.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the first hundred numbers of the message:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`23 02 13 22 25 33 02 14 33 25 02 21 16 26 10 03 06 33 04 13 21 16 01 15 26
    25 33 47 44 33 26 10 12 15 16 11 10 05 10 33 10 20 13 22 16 33 30 53 46 64 33
    46 33 42 51 57 54 37 53 64 33 54 64 33 54 63 33 30 53 51 43 33 40 43 33 64 53
    51 33 47 46 60 47 40 40 33 60 46 64 64 54 43 37 33 16 43 33 60 44 33`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2015, Klaus published an article about this cryptogram on his *Cipherbrain*
    blog.^([6](b06.xhtml#c04-endnote-6)) After only a few hours, a blog reader named
    Robert posted a (correct) solution in the comments section. It turned out that
    the creator of the message had used a simple substitution cipher. We don’t know
    exactly how Robert broke this ciphertext, but we assume that he used frequency
    analysis. Considering that the message is quite long, it was certainly possible
    to identify a few letters based solely on their frequency. In addition, the substitution
    table shows some regularities, as the letters of the alphabet are sorted using
    the artist’s name, Gordon Young, as the keyword. Here’s the table:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`G O R D N Y U A B C E F H I J K L M P Q S T V W X Z`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`01 02 03 04 05 06 07 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27 30 31
    32`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`_ . , ’`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`33 34 35 36`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '`g o r d n y u a b c e f h I j k l m p q s t v w x z`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`37 40 41 42 43 44 45 46 47 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67
    70`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the first lines of the plaintext:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`POEMS OF SOLITARY DELIGHTS by`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`TACHIBANA AKEMI` `What a delight it`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`is When on the bamboo matting`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`In my grassthatched hut,`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`All on my own, I make myself at`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '`ease. What a delight it is`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`When, borrowing Rare writings`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`from a friend, I open out The`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`first sheet. What a delight`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`it is When, spreading paper,`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '`I take my brush And find my`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '`hand Better than I thought.`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rudyard Kipling’s encrypted message
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rudyard Kipling was the author of many famous tales, such as those found in
    *The* *Jungle Book* (1894). Within his considerable body of work are the *Just
    So Stories* (1902) for children, one of which is “How the First Letter Was Written.”
    The story’s original print included an illustration between two sequences of symbols
    ([Figure 4-5](#figure4-5)). These symbols are a message encrypted in a Patristocrat
    style. Can you break it?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/f04005.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5: The symbols on the left and right of this illustration in a 1902
    Rudyard Kipling story represent a message encrypted in a substitution cipher.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: This is not as difficult as it appears! Look carefully, and you will
    see that the first word is `THIS`. For more hints, just as for everything in our
    Challenges sections, check out [https://codebreaking-guide.com/challenges/](https://codebreaking-guide.com/challenges/).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: NSA’s second Monday Challenge
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, we introduced the first NSA Monday Challenge released
    in 2014\. Here’s the second one:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '`Rimfinnpeqcnvqauuagcrdokvdisndrdcrpigaisacpsdffaicvhakcfdqfpqdetrk`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '`ilfa ecnpqacakqisacpfampoacfimannicfakdumfalddnraprf`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: This cryptogram needs to be read backward. Apart from this, it’s an ordinary
    substitution cipher without spaces.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Unsolved cryptograms
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several unsolved cryptograms appear to be English texts encrypted with substitution
    ciphers without spaces. We’ll introduce three of them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The Dorabella cryptogram
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Dorabella cryptogram is extremely well known. It is covered in everything
    from David Kahn’s 1967 classic *The Codebreakers* (including the 1996 edition),^([7](b06.xhtml#c04-endnote-7))
    to Elonka’s “Famous Unsolved Codes and Ciphers” page,^([8](b06.xhtml#c04-endnote-8))
    to Klaus’s “Top 50 Unsolved Cryptograms” list.^([9](b06.xhtml#c04-endnote-9))
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: British composer Edward Elgar (1857–1934) not only created famous music pieces,
    such as the early twentieth-century march “Pomp and Circumstance,” but also was
    fond of cryptography. In 1897, when his wife Alice sent a thank-you letter to
    the Penny family, he included an encrypted note to his friend, the twenty-three-year-old
    Dora Penny ([Figure 4-6](#figure4-6)).^([10](b06.xhtml#c04-endnote-10)) This ciphertext
    is referred to as the Dorabella cryptogram, and despite analysis by many people
    (from amateurs to renowned codebreakers) for over a century, it has never been
    solved.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c04/f04006.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-6: The Dorabella cryptogram is one of the most famous unsolved crypto
    mysteries.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: The frequency distribution of the Dorabella cryptogram fits well with a monoalphabetic
    substitution cipher, but this has not led to the solution. There are many ways
    to explain this. Elgar might have deliberately avoided words containing Es. Others
    have suggested that the Dorabella cryptogram might encrypt a melody (i.e., musical
    notes), rather than a text. It is also possible that the plaintext is in a language
    other than English. Or, of course, the Dorabella cryptogram may not be a simple
    substitution cipher at all. If you want to dig deeper, check out Craig Bauer’s
    2017 book *Unsolved!*^([11](b06.xhtml#c04-endnote-11)) It provides a comprehensive
    analysis of the Dorabella cryptogram.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: The Chinese gold bars mystery
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another well-known unsolved cryptogram is inscribed on seven Chinese gold bars,
    as described on the International Association for Cryptologic Research website
    in 1996.^([12](b06.xhtml#c04-endnote-12)) These gold bars were allegedly issued
    to a General Wang in Shanghai, China, in 1933\. They appear to represent metal
    certificates related to a bank deposit with a US bank. The gold bars bear pictures,
    Chinese writing, some form of script writing, and cryptograms in Latin letters.
    The Chinese writing discusses a transaction in excess of $300 million. The cryptograms
    consist of sixteen encrypted lines, some of which are repeated:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '`SKCDKJCDJCYQSZKTZJPXPWIRN`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`MQOLCSJTLGAJOKBSSBOMUPCE`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`RHZVIYQIYSXVNQXQWIOVWPJO`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '`FEWGDRHDDEEUMFFTEEMJXZR`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '`XLYPISNANIRUSFTFWMIY`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`HFXPCQYZVATXAWIZPVE`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`YQHUDTABGALLOWLS`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '`UGMNCBXCFLDBEY`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`ABRYCTUGVZXUPB`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`JKGFIJPMCWSAEK`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`KOWVRSRKWTMLDH`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '`HLMTAHGBGFNIV`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`MVERZRLQDBHQ`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`VIOHIKNNGUAB`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`GKJFHYXODIE`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '`ZUQUPNZN`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: It is difficult to know how to categorize this cryptogram, as it is unsolved.
    We are making a guess that it might be a Patristocrat, but of course, it might
    be some other system.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'There has been an update to this mystery since the publication of this book’s
    first edition: on December 10, 2020, we attempted to contact the owner of the
    bars but found the phone number disconnected. We had more luck contacting the
    listed attorney, Peter Bisno. He confirmed that he had seen the bars themselves
    and that they were “large,” around the size of television remote controls. He
    informed us that there had been some effort to contact banks about them in the
    1990s, but that it hadn’t gone anywhere and that he had dropped his research.
    He did not know anything more about the current location of the bars.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: James Hampton’s notebook
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another difficult-to-categorize unsolved crypto mystery is by US amateur artist
    James Hampton (1909–1964), who left behind an artwork known as *The Throne of
    the Third Heaven* *of the Nations’ Millennium General Assembly*. He created this
    massive, altar-like installation over several years, starting in 1950, out of
    cardboard, aluminum foil, and other cheap materials. Today, it is on display in
    the Smithsonian American Art Museum in Washington, DC. Hampton was also the author
    of manually encrypted notes, including a notebook with over a hundred pages of
    ciphertext ([Figure 4-7](#figure4-7)).^([13](b06.xhtml#c04-endnote-13)) None of
    his notes have ever been deciphered. Scans of all the pages are available online.^([14](b06.xhtml#c04-endnote-14))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个难以分类的未解决密码学谜团是由美国业余艺术家詹姆斯·汉普顿（1909-1964年）创建的。他留下了一件作品，被称为*“第三天堂的宝座”*，在多年的时间里，从1950年开始，用纸板、铝箔和其他廉价材料制成了这个大型的、类似祭坛的装置。今天，它展示在华盛顿特区的史密森尼美国艺术博物馆。汉普顿还创作了手工加密的笔记，包括一本有上百页密文的笔记本（[图
    4-7](#figure4-7)）。^([13](b06.xhtml#c04-endnote-13)) 他的笔记从未被解密过。所有页面的扫描版已在网上公开。^([14](b06.xhtml#c04-endnote-14))
- en: '![](image_fi/502727c04/f04007.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c04/f04007.png)'
- en: 'Figure 4-7: The encrypted notebook of amateur artist James Hampton has never
    been deciphered.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：业余艺术家詹姆斯·汉普顿的加密笔记本从未被解密过。
