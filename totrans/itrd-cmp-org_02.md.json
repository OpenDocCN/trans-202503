["```\n6c2a16 = 01101100001010102\n\n0123abcd16 = 000000010010001110101011110011012\n```", "```\n100 = 0x64 = 0144 = 0b01100100\n```", "```\nLet result = 0\nRepeat for each i = 0, ..., (n - 1)\n    Add di × 2i to result\n```", "```\nquotient = N\ni = 0\ndi = quotient % 2\nquotient = quotient / 2\nWhile quotient != 0\n    i = i + 1\n    di = quotient % 2\n    quotient = quotient / 2\n```", "```\n<address> : <content>\n```", "```\nprintf(\"Hello, World!\\n\");\n```", "```\ncout < \"Hello, World!\" < endl;\n```", "```\nint x;\nscanf(\"%i\", &x);\nx += 100;\nprintf(\"%i\", x);\n```", "```\nint x;\ncin << x;\nx +=100;\ncout << x;\n```", "```\n➊ // Read and display an integer and a text string.\n\n➋ #include <stdio.h>\n\n   int main(void)\n   {\n    ➌ unsigned int an_int;\n       char a_string[10];\n\n    ➍ printf(\"Enter a number in hexadecimal: \");\n    ➎ scanf(\"%x\", &an_int);\n       printf(\"Enter it again: \");\n    ❻ scanf(\"%s\", a_string);\n    ❼ printf(\"The integer is %u and the string is %s\\n\", an_int, a_string);\n\n    ❽ return 0;\n   }\n```", "```\nreturn-data-type function-name(parameter-list)\n{\n    function-body\n}\n```", "```\nscanf(\"1 %i and 2 %i\", &one_int, &two_int);\n```", "```\n1 123 and 2 456\n```", "```\n$ gcc -Wall -o int_and_string int_and_string.c\n$ ./int_and_string\nEnter a hexadecimal value: 123abc\nEnter it again: 123abc\nThe integer is 1194684 and the string is 123abc\n$\n```", "```\n$ gcc -g -Wall -o int_and_string int_and_string.c\n```", "```\n$ gdb ./int_and_string\n--snip--\nReading symbols from ./int_and_string...\n(gdb) l\n1       // Read and display an integer and a text string.\n2\n3       #include <stdio.h>\n4\n5       int main(void)\n6       {\n7           unsigned int an_int;\n8           char a_string[10];\n9\n10          printf(\"Enter a number in hexadecimal: \");\n(gdb)\n11          scanf(\"%x\", &an_int);\n12          printf(\"Enter it again: \");\n13          scanf(\"%s\", a_string);\n14          \n15          printf(\"The integer is %u and the string is %s\\n\", an_int, a_string);\n16\n17          return 0;\n18      }\n(gdb)\n```", "```\n(gdb) b 15\nBreakpoint 1 at 0x80c: file int_and_string.c, line 15.\n```", "```\n(gdb) r\nStarting program: /home/bob/progs/chapter_02/int_and_string/int_and_string\nEnter a hexadecimal value: 123abc\nEnter it again: 123abc\n\nBreakpoint 1, main () at int_and_string.c:15\n15   printf(\"The integer is %u and the string is %s\\n\", an_int, a_string);\n```", "```\n(gdb) print an_int\n$1 = 1194684\n(gdb) print a_string\n$2 = \"123abc\\000\\000\\000\"\n```", "```\n(gdb) printf \"an_int = %u = %#x\\n\", an_int, an_int\nan_int = 1194684 = 0x123abc\n(gdb) printf \"a_string = %s\\n\", a_string\na_string = 123abc\n```", "```\n(gdb) help x\nExamine memory: x/FMT ADDRESS.\nADDRESS is an expression for the memory address to examine.\nFMT is a repeat count followed by a format letter and a size letter.\nFormat letters are o(octal), x(hex), d(decimal), u(unsigned decimal),\n t(binary), f(float), a(address), i(instruction), c(char) and s(string).\nSize letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).\nThe specified number of objects of the specified size are printed\naccording to the format.\nDefaults for format and size letters are those previously used.\nDefault count is 1\\. Default address is following last thing printed\nwith this command or \"print\".\n```", "```\n(gdb) print &an_int\n$3 = (unsigned int *) 0x7fffffef7c\n```", "```\n(gdb) x/1dw 0x7fffffef7c\n0x7fffffef7c: 1194684 \n(gdb) x/1xw 0x7fffffef7c\n0x7fffffef7c: 0x00123abc\n(gdb) x/4xb 0x7fffffef7c\n0x7fffffef7c: ❶ 0xbc  0x3a     0x12     0x00\n```", "```\n(gdb) print &a_string\n$4 = (char (*)[10]) 0x7fffffef70\n```", "```\n(gdb) x/10c 0x7fffffef70\n0x7fffffef70:   49 '1'  50 '2'  51 '3'  97 'a'  98 'b'  99 'c'  0 '\\000'  0 '\\000'\n0x7fffffef78:   0 '\\000'  0 '\\000'\n(gdb) x/10xb 0x7fffffef70\n0x7fffffef70:   0x31    0x32    0x33    0x61    0x62    0x63    0x00    0x00\n0x7fffffef78:   0x00    0x00\n```", "```\n(gdb) c\nContinuing.\nThe integer is 1194684 and the string is 123abc\n[Inferior 1 (process 2289) exited normally]\n(gdb) q\n$\n```", "```\n0x7fffffef7c: 0xbc\n0x7fffffef7d: 0x3a\n0x7fffffef7e: 0x12\n0x7fffffef7f: 0x00\n```", "```\n0x7fffffef7c: 0x00123abc\n```", "```\n(gdb) x/1xw 0x7fffffef7c\n0x7ffffff2ec: 0x00123abc\n(gdb) x/4xb 0x7fffffef7c   [BIG-ENDIAN COMPUTER, NOT OURS!]\n0x7ffffff2ec: 0x00 0x12 0x3a 0xbc\n```", "```\n0x7fffffef7c: 0x00\n0x7fffffef7d: 0x12\n0x7fffffef7e: 0x3a\n0x7fffffef7f: 0xbc\n```"]