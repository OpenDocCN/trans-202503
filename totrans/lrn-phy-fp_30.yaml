- en: '27'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MAGNETIC FIELD
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Magnets produce magnetic fields, but so do electric currents. Since magnets
    are made of materials that have circular currents at a microscopic level, physicists
    consider electric current to be the fundamental source of magnetic fields. In
    this chapter, we’ll explore how magnetic fields are produced by currents. We’ll
    write functions to find the magnetic field for all the current distributions we
    looked at in the last chapter, and we’ll make pictures of the magnetic fields
    produced by a wire loop, an ideal magnetic dipole, a solenoid, and a toroid. But
    first, let’s begin with a simple example of magnetism.
  prefs: []
  type: TYPE_NORMAL
- en: A Simple Magnetic Effect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two parallel wires carrying current in the same direction will attract each
    other. In the modern view of magnetism, one current does not directly apply a
    force to another current. Instead, one current creates a magnetic field, and that
    magnetic field applies a force to the second current, as shown in [Figure 27-1](ch27.xhtml#ch27fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/520fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 27-1: Conceptual diagram of the role of the magnetic field when two
    currents are present*'
  prefs: []
  type: TYPE_NORMAL
- en: The magnetic field, like the electric field, is a vector field of the kind we
    talked about in [Chapter 22](ch22.xhtml). The magnetic field associates a vector
    **B**(**r**) with each point **r** in space; that vector helps determine the force
    on a particle if there is a particle at point **r** in space. [Figure 27-1](ch27.xhtml#ch27fig1)
    shows for the magnetic field what [Figure 25-1](ch25.xhtml#ch25fig1) showed for
    the electric field. As the electric field is a mediator of electrical forces between
    charges, the magnetic field is a mediator of magnetic forces between currents.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the magnetic field breaks the analysis of magnetic situations into
    two parts. The first part is current creating the magnetic field, which we’ll
    discuss in this chapter. The second part is the force the magnetic field applies
    to (a second) current, which we’ll discuss in [Chapter 28](ch28.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now turn to some introductory code.
  prefs: []
  type: TYPE_NORMAL
- en: Introductory Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Listing 27-1](ch27.xhtml#ch27list1) shows the first lines of code in the `MagneticField`
    module we’ll write in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 27-1: Opening lines of code for the `MagneticField` module*'
  prefs: []
  type: TYPE_NORMAL
- en: We use types and functions from the `SimpleVec` module of [Chapter 10](ch10.xhtml),
    the `CoordinateSystems` module of [Chapter 22](ch22.xhtml), the `Geometry` module
    of [Chapter 23](ch23.xhtml), the `ElectricField` module of [Chapter 25](ch25.xhtml),
    and the `Current` module of [Chapter 26](ch26.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Current Creates Magnetic Field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part of the modern two-part view of magnetism is that current creates
    magnetic field. We’ll start with the magnetic field created by a line current,
    the simplest current distribution, and then move to more complex current distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Magnetic Field Created by a Line Current
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unlike the situation with charge, in which a point charge serves as the simplest
    form of charge, there is no such thing as a point current. Current, by definition,
    must flow, and the simplest way it can flow is along a curve or wire. We’ll assume
    that charge does not pile up anywhere along our wires, a very reasonable assumption
    since you must go to some trouble to get charge to pile up. Consequently, the
    current at any point in a wire is the same.
  prefs: []
  type: TYPE_NORMAL
- en: The *Biot-Savart law* provides a way to calculate the magnetic field produced
    by a current-carrying wire. The wire can be of any shape, so this is a perfect
    opportunity to use the `Curve` data type we defined in [Chapter 23](ch23.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Although there is no such thing as a point current, the Biot-Savart law nevertheless
    claims that the magnetic field of a current-carrying wire can be found as the
    superposition (that is, sum) of small magnetic field contributions from small
    segments of the wire. Each small current segment could not exist on its own since
    the current needs to keep flowing, but we can still compute the magnetic field
    contribution from a small current segment.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a small segment of wire carrying current *I*. The segment is characterized
    by a displacement vector *d***l**′, whose length *dl*′ is short enough that the
    segment can be considered straight, and whose direction is tangent to the wire.
    The contribution **dB(r)** to the magnetic field at location **r** by the small
    current segment is
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/521equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This says the contribution is proportional to the current *I*, proportional
    to the segment length *dl*′, inversely proportional to the square of the displacement
    **r** – **r**^′ from the source point **r**′ to the field point **r**, and points
    in a direction perpendicular to both the current and the displacement.
  prefs: []
  type: TYPE_NORMAL
- en: We compute the magnetic field produced by the entire wire by adding together
    the contributions of all the small segments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/521equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This integral is the crossed line integral we defined in [Chapter 26](ch26.xhtml).
    The minus sign enters because the cross product is anti-commutative.
  prefs: []
  type: TYPE_NORMAL
- en: The integrand of the crossed line integral is the function that maps a source
    point **r′** to the vector
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/522equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that **r′**, the field point where we wish to know the magnetic field,
    is simply a parameter in this integrand; it is *not* the variable of integration.
    We should think of **r′** as the variable of integration since it is the locations
    **r′** of the curve at which we must evaluate the integrand and sum the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll give the integrand the local name `integrand` in the `bFieldFromLine`
    `Current` function we’ll write next. The type signature of `bFieldFromLineCurrent`
    makes clear, in a computer-checked way, the two inputs required to find the magnetic
    field: the `Current` and the `Curve` along which the current flows. For a reader
    of Haskell, the function `bFieldFromLineCurrent` is a clearer description of what
    is going on than Equation 27.2 since the latter does not make it terribly clear
    that the magnetic field depends only on the curve and the current.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We define a local constant `coeff` to hold the numerical value of – *μ*[0] *I*/4*π*
    in SI units, and we define a local function `integrand` to hold the integrand.
    We want to define a local variable `d` for the displacement from `r'` to `r`,
    but because `r'` exists locally to the function `integrand`, the definition for
    `d` must occur within the definition for `integrand` and cannot be placed parallel
    to the definitions of `coeff` and `integrand`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 26](ch26.xhtml), we wrote a type for current distribution. Over
    the course of the present chapter, we will write functions to calculate the magnetic
    field produced by each sort of current distribution. This allows us to encapsulate
    the idea that current creates magnetic field in the following function, which
    produces a magnetic field given any current distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The function `bField` uses pattern matching on the input to treat each sort
    of current distribution separately. For a line current, it uses the function `bFieldFromLineCurrent`
    we wrote earlier. For surface and volume currents, it uses functions we’ll write
    later in this chapter. For a combination distribution with the constructor `MultipleCurrents`,
    it uses the principle of superposition to find the magnetic field by summing the
    magnetic fields each individual current produced. We use the function `addVectorFields`
    from [Chapter 22](ch22.xhtml) to combine the magnetic fields of the component
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Magnetic Field of a Circular Current Loop
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: One of the simplest and most natural ways to produce a magnetic field is with
    a circular loop of current. A circular loop of current is also a nice model of
    a magnetic dipole, as we discussed in [Chapter 26](ch26.xhtml). Surprisingly,
    there is no analytical solution for the magnetic field produced by a circular
    current loop. However, we can get a good approximate solution using the numerical
    integration embedded in our crossed line integral.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a circular loop in the xy-plane, centered at the origin, with radius
    0.25 m. This loop carries a current of 10 A in a counterclockwise direction when
    viewed from the positive z-axis. We can use the function `circularCurrentLoop`
    from [Chapter 26](ch26.xhtml) to make this current distribution, and we can use
    the function `bField`, which uses `bFieldFromLineCurrent` we wrote earlier, to
    find the magnetic field produced by this circular loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The expression `circularCurrentLoop 0.25 10` has type `CurrentDistribution`;
    we could have given it a name, either at the top level, as we do for `circleB`,
    or using a `let` or `where` construction. Deciding what to name something is part
    of the creative process of writing in a functional language. Would it help you
    or a reader of the code to see a good name for something, or would the name just
    get in the way, diverting our attention from more important ideas? This is a decision
    you get to make over and over again. In this case, I thought the current distribution
    was well-enough named by the function `circularCurrentLoop` and its parameters
    that another name was unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: The left side of [Figure 27-2](ch27.xhtml#ch27fig2) shows the magnetic field
    in the yz-plane for this current loop. The x-direction comes out of the page in
    this figure, so the loop in the xy-plane appears as a horizontal line in the center
    of the picture where the field strength is largest. The magnetic field points
    through the current loop and back around.
  prefs: []
  type: TYPE_NORMAL
- en: The right side of [Figure 27-2](ch27.xhtml#ch27fig2) shows the magnetic field
    of an ideal dipole, which we’ll explain next.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/524fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 27-2: Magnetic field produced by a current loop (left) and an ideal
    magnetic dipole (right). The left image is produced by `bFieldPicLoop`; the right
    image is produced by `bFieldPicIdealDipole`. The magnetic field around the edges
    of the figures is very similar, indicating that, away from the source, a current
    loop looks like a magnetic dipole.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code that produced the left picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We use `vfGrad` from [Chapter 22](ch22.xhtml) to make a gradient vector field
    picture. The expression `(**0.2)` is a Haskell section denoting the function `\x
    -> x**0.2`, a scaling function we use because the magnitude of the field decreases
    rapidly as we move away from the loop. The other inputs to `vfGrad` declare that
    we want to look at the field in the yz-plane, assign a name to the output file,
    specify the number of arrows in each direction, and provide the name of the vector
    field to be pictured.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, a current loop is an example of a magnetic dipole. In
    the next section, we’ll take a closer look at magnetic dipoles.
  prefs: []
  type: TYPE_NORMAL
- en: Ideal Magnetic Dipole
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: An *ideal magnetic dipole* is a source of magnetic field formed by letting the
    radius *R* of the loop approach 0 while the current in the loop gets larger so
    that the magnetic dipole moment *IπR*² stays constant. Let’s look at the magnetic
    field produced by an ideal magnetic dipole.
  prefs: []
  type: TYPE_NORMAL
- en: The magnetic field produced by an ideal magnetic dipole at the origin is
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/524equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where **m** is magnetic dipole moment. Here’s the same equation translated
    into Haskell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the exception of the coefficient in front, Equation 27.3 is the same as
    Equation 25.3 for the electric field produced by an ideal electric dipole. This
    similarity is reflected in the functions `bFieldIdealDipole` and `eFieldIdeal`
    `Dipole`, which differ only in local variable names and the coefficient in front.
  prefs: []
  type: TYPE_NORMAL
- en: The right side of [Figure 27-2](ch27.xhtml#ch27fig2) shows the magnetic field
    produced by an ideal magnetic dipole. The magnitude of the magnetic dipole moment
    **m** is not so important in this picture because the darkest arrows are those
    where the magnetic field is largest in magnitude, regardless of what that magnitude
    is. Equation 27.3 shows that the magnetic field increases linearly with the dipole
    moment, so the picture would be the same for any dipole moment in the z-direction.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the two pictures in [Figure 27-2](ch27.xhtml#ch27fig2), we see that
    the magnetic field differs in the centers of the pictures, close to the sources
    of the field. The fields around the edges of the pictures, farther from the sources,
    are very similar in the two pictures. The similarity of the fields a bit farther
    from the sources entitles both sources to be called magnetic dipoles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to produce the picture on the right in [Figure 27-2](ch27.xhtml#ch27fig2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The only differences in this program compared to `bFieldPicLoop` for the circular
    loop are the filenames and the magnetic fields. The magnetic field here is `bFieldIdealDipole
    kHat`, where we use the unit vector `kHat` for the magnetic dipole moment because
    its magnitude doesn’t change the picture.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen one example of the magnetic field produced by a line current, the
    circular loop, and compared it to that of an ideal magnetic dipole. Let’s look
    at a second example of magnetic field from a line current, a solenoid.
  prefs: []
  type: TYPE_NORMAL
- en: Wire Solenoid
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We defined the wire solenoid as a current distribution in the last chapter.
    Now let’s calculate its magnetic field. We’ll look at two wire solenoids. Each
    has a radius of 1 cm, a length of 10 cm, and a current of 10 A. The first solenoid
    has 100 turns per meter, for a total of 10 turns. The second solenoid has 1,000
    turns per meter, for a total of 100 turns.
  prefs: []
  type: TYPE_NORMAL
- en: To start, let’s look at the magnetic field at the center of the two solenoids.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We see that in both cases, the magnetic field is primarily in the z-direction,
    which is along the central axis, as expected. The x-components of the magnetic
    field are essentially 0\. The y-components are small but not 0\. Because the wire
    is in the shape of a helix, there is a small transverse component of the magnetic
    field. For our particular helix, this small transverse component shows up in the
    y-direction. Longer solenoids have smaller transverse components.
  prefs: []
  type: TYPE_NORMAL
- en: For comparison, an ideal solenoid has radius *R*, infinite length, *n* turns
    per unit length, and carries current *I*. Physicists like the ideal solenoid because,
    as long as *n* is reasonably large so that current is flowing at essentially all
    places on the surface of the cylinder, there is a simple expression for the magnetic
    field it produces. The magnetic field outside the ideal solenoid (at field points
    farther than *R* from the central axis) is 0\. The magnetic field inside the ideal
    solenoid has a uniform value of *μ*[0]*nI* and points along the central axis of
    the solenoid. The magnetic field produced is independent of the radius.
  prefs: []
  type: TYPE_NORMAL
- en: An ideal solenoid with the same number of turns per unit length and same current
    as our first solenoid would have *n* = 100/m and *I* = 10 A, so its magnetic field
    at the center (and at any other point inside) is
  prefs: []
  type: TYPE_NORMAL
- en: '*μ*[0]*nI* = (4*π* × 10^(−7) N/A²)(100/m)(10 A) = 1.26 × 10^(−3) T'
  prefs: []
  type: TYPE_NORMAL
- en: 'The z-component of our first solenoid is pretty close this value, even though
    our first solenoid is non-ideal in two ways: its length is not infinite and its
    winding has a spacing of one turn per centimeter (that is, not terribly close
    together).'
  prefs: []
  type: TYPE_NORMAL
- en: An ideal solenoid with the same parameters as our second solenoid would have
    the same current but with 10 times the winding density *n*, so its magnetic field
    would be 10 times what we just calculated. Our second solenoid also has a magnetic
    field that is pretty close to the value for an ideal solenoid.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 27-3](ch27.xhtml#ch27fig3) shows the magnetic fields produced by our
    two solenoids.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/527fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 27-3: Magnetic fields produced by two solenoids. Both solenoids have
    a 1-cm radius, a 10-cm length, and a 10-A current. The solenoid on the left has
    100 turns per meter, for a total of 10 turns. The solenoid on the right has 1,000
    turns per meter, for a total of 100 turns. The pictures focus on a 4-cm × 4-cm
    region at the center of the solenoid. The left image is produced by `bFieldPicSolenoid10`;
    the right image is produced by `bFieldPicSolenoid100`.*'
  prefs: []
  type: TYPE_NORMAL
- en: The pictures in [Figure 27-3](ch27.xhtml#ch27fig3) show the magnetic field in
    the yz-plane. The magnetic field produced by the first solenoid is shown on the
    left. The picture is a 4-cm × 4-cm area in the yz-plane at the center of the solenoid.
    Since this solenoid has one turn per centimeter, we see four turns of the solenoid.
    The places where the wire cuts through the yz-plane, where the magnetic field
    circles around the wire, are noticeable. The magnetic field is highest near the
    wires. The magnetic field inside the solenoid is clearly larger than that outside
    the solenoid, and in the opposite direction.
  prefs: []
  type: TYPE_NORMAL
- en: The magnetic field produced by the second solenoid is shown on the right. The
    picture is also a 4-cm × 4-cm area in the yz-plane at the center of the solenoid.
    This solenoid has 10 turns per centimeter, so 40 turns over the height of the
    picture. This is too many for us to see the individual wires. As with the first
    solenoid, the magnetic field is highest near the wires, larger on the inside than
    the outside, and has the opposite direction on the outside compared to the inside.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code that made the images in [Figure 27-3](ch27.xhtml#ch27fig3).
    The program `bFieldPicSolenoid10`, named for 10 total turns, creates the picture
    on the left of the figure, while `bFieldPicSolenoid100`, named for 100 total turns,
    creates the picture on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We get pictures that are 4 cm wide by 4 cm high by mapping the visible square
    corners at (–1, –1) and (1,1) to Cartesian coordinates (0, –0.02, –0.02) and (0,
    0.02, 0.02) with the function `\(y,z) -> cart 0 (0.02*y) (0.02*z)`.
  prefs: []
  type: TYPE_NORMAL
- en: Wire Toroid
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We defined the wire toroid as a current distribution in the last chapter. Now
    let’s calculate its magnetic field. We’ll look at a wire toroid with a small radius
    of 0.3 m, a big radius of 1 m, 50 turns of wire, and 10 A of current. This current
    distribution has the expression `wireToroid 0.3 1 50 10`.
  prefs: []
  type: TYPE_NORMAL
- en: The program `bFieldWireToroid` gives the magnetic field of this wire toroid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 27-4](ch27.xhtml#ch27fig4) shows the magnetic field produced by our
    toroid.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/528fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 27-4: Magnetic field `bFieldWireToroid` produced by a toroidal coil
    of wire. The image is produced by `bFieldPicWireToroid`.*'
  prefs: []
  type: TYPE_NORMAL
- en: The picture in [Figure 27-4](ch27.xhtml#ch27fig4) shows the magnetic field in
    the xy-plane. The picture is a 1.5-m × 1.5-m area in the xy-plane at the center
    of the toroid. The picture shows how the magnetic field is confined inside the
    torus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code that produced the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The wire loop, wire solenoid, and wire toroid are examples of line currents.
    Let’s move up a dimension and look at how to find the magnetic field produced
    by a surface current.
  prefs: []
  type: TYPE_NORMAL
- en: Magnetic Field Created by a Surface Current
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Current flowing across a surface produces a magnetic field. To calculate this
    magnetic field, we must supply two pieces of information: the `Surface` across
    which the current flows and the surface current density **K**, represented as
    a `VectorField`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the version of the Biot-Savart law that gives the magnetic field produced
    by a surface current:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/529equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a vector surface integral of the same type we dealt with in [Chapter
    25](ch25.xhtml). The integrand of the vector surface integral is the function
    that maps a source point **r′** to the vector
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/529equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that **r**, the field point where we wish to know the magnetic field, is
    simply a parameter in this integrand; it is *not* the variable of integration.
    We should think of **r′** as the variable of integration since it is the locations
    **r′** that lie on the surface at which we must evaluate the integrand and sum
    the results. In the `bFieldFromSurfaceCurrent` function we’ll write next, we give
    the integrand the local name `integrand`. The type signature of `bFieldFromSurfaceCurrent`
    makes clear, in a computer-checked way, the two inputs that must be provided and
    the return type of a vector field. For a reader of Haskell, the function `bFieldFromSurfaceCurrent`
    is a clearer description of what is going on than Equation 27.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We define a local constant `coeff` to hold the numerical value of *μ*[0]/4*π*
    in SI units, and we define a local function `integrand` to hold the integrand.
    As before, we want to define a local variable `d` for the displacement from `r'`
    to `r`, but because `r'` exists locally to the function `integrand`, the definition
    for `d` must occur within the definition for `integrand` and cannot be placed
    parallel to the definitions of `coeff` and `integrand`.
  prefs: []
  type: TYPE_NORMAL
- en: As with `bFieldFromLineCurrent`, this function is used by the function `bField`,
    which computes the magnetic field due to any current distribution. The final function
    used by `bField` finds the magnetic field due to a volume current, and we turn
    to that next.
  prefs: []
  type: TYPE_NORMAL
- en: Magnetic Field Created by a Volume Current
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Current flowing though a volume produces a magnetic field. To calculate this
    magnetic field, we must supply two pieces of information: the `Volume` through
    which the current flows and the volume current density **J**, represented as a
    `VectorField`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the version of the Biot-Savart law that gives the magnetic field produced
    by a volume current:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/530equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a vector volume integral of the same type we dealt with in [Chapter
    25](ch25.xhtml). The integrand of the vector volume integral is the function that
    maps a source point **r′** to the vector
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/530equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The function `bFieldFromVolumeCurrent` calculates the magnetic field produced
    by a volume current density.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The only difference between this function and `bFieldFromSurfaceCurrent` is
    that this function uses `vectorVolumeIntegral` to perform a volume integral rather
    than a surface integral. As with the functions `bFieldFromLineCurrent` and `bFieldFromSurfaceCurrent`,
    this function is used by the function `bField`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter showed how to calculate the magnetic field produced by a current
    distribution. We wrote functions to find the magnetic field produced by a line
    current, a surface current, and a volume current. We wrote a function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: that calculates the magnetic field of any current distribution by combining
    the functions we wrote for each current distribution. We looked at the magnetic
    fields produced by a wire loop, an ideal magnetic dipole, a wire solenoid, and
    a wire toroid. Over the last four chapters, we have focused on the part of electromagnetic
    theory in which charge (and current, which is moving charge) produces fields.
    In the next chapter, we’ll turn to the other side of electromagnetic theory in
    which fields apply force to charge.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise 27.1.** *Faraday’s law* asserts a relationship between the *magnetic
    flux* through a surface and the inclination for a current to flow around the boundary
    of the surface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The magnetic flux *Φ[B]* through a surface *S* is defined to be the dotted
    surface integral of the magnetic field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/531equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We defined the dotted surface integral in [Chapter 25](ch25.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: (a) Write a function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: that accepts a magnetic field and a surface as input and returns magnetic flux
    as output.
  prefs: []
  type: TYPE_NORMAL
- en: (b) Write a function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: that returns the magnetic flux through a given surface produced by the magnetic
    field of a given current distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 27.2.** Use `vf3D` from [Chapter 22](ch22.xhtml) to show the magnetic
    field `circleB` of a wire loop. You will need to search for an appropriate scale
    factor. The magnitude of the magnetic field at the center of a circular loop is
    *μ*[0]*I*/2*R*, where *I* is the current in the loop and *R* is the radius. You
    can use this expression to take a good first guess at a scale factor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Exercise 27.3.** Here is a program that computes and displays the magnetic
    field of a wire solenoid with 1,000 turns of wire. It’s not so different from
    the programs we wrote in this chapter for solenoids with 10 and 100 turns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The resulting picture, shown here, looks nothing like the magnetic field of
    a solenoid.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/532fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Identify the cause of this strange behavior and fix it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 27.4.** Make a picture of the magnetic field produced by a sheet
    solenoid. Pick values for the radius, length, number of turns per unit length,
    and current. Decide which of the visualization methods you will use.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 27.5.** Consider the magnetic field `circleB` produced by a circular
    wire in the xy-plane, centered at the origin, with radius 0.25 m carrying 10 A
    of current. Make a graph of the z-component of the magnetic field as a function
    of location along the x-axis. It should look something like [Figure 27-5](ch27.xhtml#ch27fig5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/532fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 27-5: Magnetic field produced by a circular loop of current*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 27.6.** Consider the magnetic field produced by a circular loop
    carrying current. Make a graph of the z-component of the magnetic field as a function
    of location along the z-axis. Include both positive and negative values of *z*.
    The maximum magnetic field should occur at *z* = 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 27.7.** In one of the exercises in the last chapter, we introduced
    the Helmholtz coil as a current distribution. Make a graph of the z-component
    of the magnetic field as a function of location along the z-axis. Include both
    positive and negative values of *z*. You should find that the magnetic field is
    much more uniform near the center than that produced by a single loop of wire.'
  prefs: []
  type: TYPE_NORMAL
