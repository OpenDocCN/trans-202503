- en: 6. the story of chumby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of my earliest open hardware projects was chumby, the Wi-Fi-enabled content
    delivery device that took me to China to set up my first supply chain in 2007.[*](footnote.xhtml#fn17)
    Working on chumby was personally exciting to me for two reasons. First, I had
    the opportunity to build a product that could improve people’s lives in some small
    way. The always-on, always-connected users who blog and rely on IM to keep in
    touch could use chumby to make those connections more easily. At the same time,
    chumby was a chance for me to create a truly open platform that enabled hackers
    to tinker and modify it however they liked.
  prefs: []
  type: TYPE_NORMAL
- en: '**A HACKER-FRIENDLY PLATFORM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hackers have an insatiable desire to extend, modify, customize, and abuse consumer
    products to discover unintended functionality. At Chumby, we hoped hackers would
    learn how the device worked and transform it to do things we never imagined, so
    we designed chumby to be as open as possible to *anybody* who wanted to hack it.
    We considered not only open source software hackers, but also hardware hackers,
    artists, and crafters—that is, people skilled with and passionate about noncomputer
    things, like metalworking, sewing, or carpentry. To encourage and enable chumby
    hackers, we made the source code, schematics, board layouts, bill of materials,
    flat patterns, and 3D CAD databases of the plastic pieces freely available. You
    can still find them all on the chumby wiki (*[http://wiki.chumby.com/](http://wiki.chumby.com/)*).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0182-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The original soft chumby*'
  prefs: []
  type: TYPE_NORMAL
- en: The idea was to let hackers break away from point-solution hacks on inscrutable
    hardware and into hacks they could share with just about anyone. For instance,
    imagine you add a blood pressure cuff to a chumby and give the chumby to your
    grandmother. Now you can check on Grandma’s health, and she can watch pictures
    of her grandchildren while she gets her blood pressure taken. But imagine this
    scenario with a WRT-54G router instead of a chumby. Sure, you can add a blood
    pressure cuff to a WRT-54G as well (in fact, it’s quite similar to chumby architecturally),
    but try teaching Grandma how to set it up and use it. In other words, we felt
    making chumby a simple product would allow hackers to make their own hacks more
    usable and more understandable to the less technical people in their lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making chumby open had other benefits for hackers, too. This time, imagine
    your thermostat is a little too far from the place where you actually want to
    regulate temperature. You could solve that problem in a weekend by adding a temperature
    sensor to a chumby. The chumby platform has Wi-Fi and I built a hacker sensor
    package for the device, so the project would require minimal hardware grunge work:
    you’d just mod two chumbys (one with a temperature sensor and one with an interface
    to the thermostat) and enable both with the sensor package. Such a device would
    not only help you keep your living room at the right temperature but also tell
    you the latest news and help you track your favorite TV shows.'
  prefs: []
  type: TYPE_NORMAL
- en: The icing on the cake is that you’d also be free to publish your modifications
    and even resell modified chumbys with those custom capabilities. Others could
    benefit from your work, and you could make some money. (On a lighter note, the
    original chumby housing was made of fabric, so you could even modify it to match
    your décor!)
  prefs: []
  type: TYPE_NORMAL
- en: 'The original chumby design, now called the *chumby classic*, premiered at FOO
    Camp in 2006, and it went on sale in 2008\. Unfortunately, however, the chumby
    classic hit full-stride launch in the middle of the worst economic downturn since
    the Great Depression. Its cute, cuddly form factor had a price tag that many consumers
    just couldn’t stomach, so I did what any entrepreneur would do in a recession:
    I scaled back.'
  prefs: []
  type: TYPE_NORMAL
- en: '**EVOLVING CHUMBY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Shortly after Lehman Brothers filed for [Chapter 11](ch11.xhtml#ch11) bankruptcy
    protection in 2008, we started work on a product that could address a new economic
    reality. As I drew my first napkin sketches for the product, which we later dubbed
    the *chumby One*, the stock market was in free fall and losing several hundred
    points a day. Given that, the key goal was cost reduction. I took a good, hard
    look at the whole design so I could build a cheaper, faster product that would
    be better for the market. We wanted chumby One to win new customers yet retain
    the loyalty of our existing consumer base, and we wanted it out before Christmas
    2009.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, an applications engineer from Freescale (since acquired by NXP)
    contacted me about a new, remarkably inexpensive CPU (the i.MX233) that Freescale
    planned to launch in 2009\. It looked like a promising fit for chumby, so I drew
    up some straw-man renderings and ran some cost scenarios. At CES in January 2009,
    we shared the new design with a few potential customers to get feedback on the
    features and pricing. The idea slow-rolled through March, and after the Chinese
    New Year, I built the first prototype board.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*One really cool thing about the i.MX233 is that it has embedded power regulators,
    and they aren’t just linear regulators: they’re switching regulators. But they’re
    not just any switching regulators; they derive three voltages using just a single
    inductor! How cool is that? I have to give mad props to the guy who designed that
    system.*'
  prefs: []
  type: TYPE_NORMAL
- en: Around May, we contracted an industrial designer to do some sketches, and by
    June, we had a near-final industrial design. We made our first 3D-printed prototypes
    around then, but we couldn’t afford a mechanical engineering contractor. I had
    to learn SolidWorks and do the mechanical integration for the 3D prototype myself.
    Since I enjoy learning new things, the experience was quite rewarding.
  prefs: []
  type: TYPE_NORMAL
- en: In July, we inked a purchase order for steel tooling, and by August, we had
    first-shot plastics. I spent September refining and debugging the design and October
    on more testing, refining, and ramping up mass production. By November 2009, the
    first shipment of chumby Ones was 35,000 feet above the Pacific Ocean en route
    to LAX.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0185-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The finished chumby One*'
  prefs: []
  type: TYPE_NORMAL
- en: The chumby One retailed for about half the price of the chumby classic, and
    it had more features, like an FM radio and support for a rechargeable lithium
    ion battery, a feature users of the squishy, leather chumby classic often requested.
    The initial reactions to the battery in the chumby One were an interesting study
    in consumer psychology. For some reason, even though the chumby One was smaller
    and lighter than the chumby classic and did exactly the same things, people didn’t
    feel it should have a rechargeable battery. They had no intrinsic desire to pick
    up the chumby One and carry it around. That just goes to show how much form factor
    influences a consumer’s perception of function!
  prefs: []
  type: TYPE_NORMAL
- en: At any rate, customers certainly liked all those options, but to me, they weren’t
    the most significant new features.
  prefs: []
  type: TYPE_NORMAL
- en: '**A More Hackable Device**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What really excited me about the chumby One was that it was much more hackable
    than the chumby classic. On the chumby classic, we used a soldered-down SLC NAND
    chip, which was cost-effective but made development quite complicated. Developers
    were exposed directly to all the warts of NAND flash memory, including bad blocks
    and error correction, and if the system failed to boot correctly, one had few
    recovery options. We addressed these problems on the chumby One by storing the
    firmware on a microSD card.
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to get your hands on a chumby One, you’ll notice that you can’t
    replace the microSD card from the outside. We made that choice to prevent nonhackers
    from pulling the microSD card out and wondering why the device wouldn’t boot.
    But if you unscrew and remove the back panel (no glue seals, unlike the chumby
    classic), the microSD card is easy to access. Thanks to this key change, hackers
    didn’t have to worry about bricking their chumbys. If someone screwed up the firmware,
    they could just pull the microSD card out, mount it on their dev box, and write
    a new image.
  prefs: []
  type: TYPE_NORMAL
- en: We also chose to make the chumby One’s microSD card a *managed* NAND device
    so that we could directly drop ext3 (a popular default Linux filesystem configuration)
    onto it. The root partition was still mounted as read-only at the factory to prevent
    accidental damage, but a managed NAND system made remounting the root partition
    as read/write and modifying the Linux system trivial. We consciously made the
    OS image use only a small portion of the total microSD card capacity, leaving
    hackers with over a gigabyte of extra space to load custom applications and libraries.
    (Keep in mind that a gig was a big deal at the time.)
  prefs: []
  type: TYPE_NORMAL
- en: In hardware, what’s good for hackers is also good for developers. The flexibility
    we added for hackers allowed us to add a ton of great features to the OS. For
    example, the chumby One supported certain 3G modems and could serve Wi-Fi as an
    access point through those 3G modems. That basically made the device a 3G-to-Wi-Fi
    router, which I found enormously useful when I was traveling and needed to create
    a Wi-Fi hotspot for other devices. We didn’t expose that feature at the mainstream
    user level at first, but we knew we (or anyone else—it was an open project, after
    all) could wrap a GUI around it and make it more user-friendly if people liked
    it. And if you plugged a USB keyboard into a chumby One, it would automatically
    open a console shell that you could type into. That’s handy for times when you
    can’t SSH in, like when you’re debugging network scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware with No Secrets**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with the chumby classic, we also made the chumby One design as open as possible.
    We posted schematics, gerber files, and the GPL source code online. In the following
    figure, you can see a preproduction pilot chumby One board. The mass-production
    board was basically identical, with some minor tweaks to enhance compatibility
    with the SMT machines we used in China.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, notice the pair of test points on the board labeled *SETEC ASTRONOMY*
    in the bottom-left corner of the photo of the back of the mainboard. You could
    use those points to bypass the write protection on the chumby One’s authentication
    ROM and wipe out the keys that Chumby used to authenticate the device. I can’t
    think of a real reason to do that, but I added them on the principle that hardware
    you own shouldn’t hold secrets from you. If you don’t like having encrypted access
    codes on a device, you should be able to nuke them. In the case of a chumby One,
    that meant you’d no longer have the codes to fetch widgets from Chumby’s servers,
    but hey, it’s your hardware. When hardware is truly yours, you can void the warranty
    and do what you want with it. Of course, we published the security protocol that
    chumby Ones used to fetch widgets, too.
  prefs: []
  type: TYPE_NORMAL
- en: I also designed the chumby One motherboard with mounting holes and features
    so it could be retrofitted back into a chumby classic. Although Chumby never planned
    to put chumby One boards into chumby classic enclosures—hand-stitched Italian
    leather was just too expensive, and there were a couple of technical issues with
    integration—I thought intrepid hackers would appreciate the option to do it themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0188-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The chumby One mainboard (back)*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0189-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The chumby One mainboard (front)*'
  prefs: []
  type: TYPE_NORMAL
- en: I continued to work on improving the chumby line for several years, but eventually,
    I wanted more time for personal projects and a break from entrepreneurship.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE END OF CHUMBY, NEW ADVENTURES**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In April 2012, Chumby as the world knew it came to an end. We had run out of
    money, and the investors had run out of patience. I’d already left the company
    discreetly in January; I had a good run, but it was also time for me to move on.
    Upon hearing the news, my good friend Phil Torrone from *Make:* reached out to
    me for an interview, and I was happy to oblige. You can read the full interview
    online,[*](footnote.xhtml#fn18) but I’ve excerpted parts of it here that you might
    find useful if you’re excited to get into the hardware business.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** How did you get involved at Chumby? And what was your role at the
    company?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** I was originally an advisor to the company, a consultant brought
    in to figure out some bits of the hardware strategy. We had weekly dinners where
    we’d talk about what the product might be. Eventually, I got excited enough about
    the product that I just hammered out an initial prototype motherboard in my spare
    time. Around the same time, my boss at my prior company was really irritating
    me (he lectured me about the importance of being in my chair every morning by
    9AM, completely ignoring the fact that I’d worked until midnight the day before),
    so I resigned on the spot and joined the founding team of Chumby.'
  prefs: []
  type: TYPE_NORMAL
- en: My role at the company was initially VP of Hardware, which sounds grand. But
    when the hardware organization consists of exactly one person, you’re also the
    solder jockey and the janitor. Now that I think back on it, the team took a big
    chance on me. At the time I had no experience in supply chain management and had
    never been to China. They took a leap of faith and gave me the opportunity to
    figure it all out. I really appreciate that they gave me so much latitude to learn
    on the job.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** What was the best part of making the chumby?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** There were so many great things about making the chumby. I think
    overall, one of the best parts was that I had to figure everything out from conception
    to distribution. It meant that I got to see every part of the process firsthand:
    industrial design, electronics design, tooling, supply chain, retail, and reverse
    logistics. There are so many things that go into a product, and satisfying that
    curiosity about how things are made was great.'
  prefs: []
  type: TYPE_NORMAL
- en: The other thing I really treasure from making the chumby was all the wonderful
    people I got to work with and meet along the way. I made a lot of friends, and
    I had so many excellent mentors.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, I think the best part about making chumby isn’t really the making.
    It’s seeing people use it, and seeing people enjoy and appreciate the device.
    The smile on a user’s face is the ultimate reward.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** Can you talk about making a device from start to finish, from idea
    to factory to retail shelves?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** One of the best parts about making a device from start to finish
    is that you have a totally unconstrained set of tools to solve the problems at
    hand. You can solve business problems with board layout, and vice versa. For example,
    there was a question about how we could uniquely and flexibly brand units, in
    a fashion that allowed for swappable faceplates (that is, snap on the NFL faceplate
    and get your football scores, snap on the Bloomberg faceplate and get your financial
    news, and so on). This is a topic that could take dozens of meetings to hash out.
    But as the sole hardware guy, I knew that embedding an EEPROM costs only $0.20
    and while everyone else discussed possible solutions in the staff meeting, I fired
    up my board design tool, added the eight-pin EEPROM to the board, tossed on an
    appropriate connector, and had the whole solution engineered by the time action
    items were assigned. It actually took me longer to convince them that the work
    was done than it took to do the work.'
  prefs: []
  type: TYPE_NORMAL
- en: I think I ended up absorbing many of the skills required to build a product
    from start to finish because it’s very difficult to communicate requirements.
    The question was always whether it would be faster for me to do it myself or to
    explain it to someone else, wait for them to do it, and possibly have to re-explain
    it and have them change it. That’s one reason I learned mechanical design; the
    industrial design and plastics tooling is a long pole in the tent for many consumer
    products, and being able to efficiently and effectively communicate with a mechanical
    engineering team using their language was important to getting the job done right.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** What were the challenges with retail sales?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** Retail and distribution were the most difficult challenges. Here
    are a few difficulties I encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dealing with the merchant buyers.**  Brick-and-mortar retailers hire teams
    of buyers assigned to monetize shelf space. They think about products in terms
    of revenue per shelf space, and they don’t really see anything beyond that. This
    puts into sharp relief any improvements you want to add to the product that also
    drive up product costs. Merchants tend to look at your product as so many grams
    of plastic and so many wires. They multiply those numbers by the commodity price
    of the raw materials to set expectations for how much they’ll pay to have it on
    the shelf. It’s possible to cut better deals, but educating a merchant about the
    value of your product takes a lot of effort. Unfortunately, the turnover in merchant
    staff can be fairly high, so you may spend months cutting a deal only to find
    that the person you were working with has left the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Margin.**  Everyone in the supply chain has a hand out: the distributor,
    the merchant, and the factory. Beyond that, market development funds and other
    slush money have to be factored in. At the end of the day, the shelf cost of a
    product is about three times your BOM cost. This means adding a $0.50 part turns
    into a $1.50 retail price impact.'
  prefs: []
  type: TYPE_NORMAL
- en: This is aggravated by the fact that prices are quantized into “magic” numbers
    (like $19.99, $49.99, or $99.99) that you have to hit. You just don’t MSRP a product
    for $127.45\. If a product retails for above $99, it’s psychologically binned
    with the $149 or $199 products. When your product’s BOM cost approaches one of
    these quantization points, you’ll do lots of soul searching about whether it’s
    worth $0.50 to improve, say, the speakers. Either that small cost increase will
    come out of your own margin, or you risk pushing your product into a higher price
    tier.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cash flow.** Retailers are notoriously bad at paying on time. You may negotiate
    60-day terms, but often you’re not paid after 90 or even 120 days. If your product
    doesn’t sell out so that the retailer has to place another order with you (at
    which point you have some leverage to collect outstanding payment), you’ll get
    strung out. This can be partially mitigated with financial instruments such as
    factoring insurance. Insurance companies will sell insurance on anything, including
    insurance hedging against retailers not paying on time or going insolvent before
    they can pay you.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reverse logistics and returns.** Many retailers offer no-questions-asked
    return guarantees. That’s great for the customer, but guess who services those
    returns? The retailer passes the buck back to the entrepreneur! This is part of
    why payment times can be quite bad: retailers are retaining cash to hand back
    to customers to satisfy returns. Once the returns are processed, you get to figure
    out how to get the returned material off their dock and back into a facility where
    you can refurbish the units. Typically, most returned units aren’t defective.
    They simply didn’t meet customer expectations, or the customer had buyer’s remorse
    after an impulse buy. The otherwise working units are usually missing accessories
    or are cosmetically marred, thereby requiring extensive rework to refurbish.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Contracts.** Retailers will hand you a default contract full of terms that
    very strongly favor them in almost every contingency. Sometimes, the contracts
    can expose you to liabilities that you can’t possibly hope to cover. For example,
    I’ve seen language such that if an affiliated content website was down for longer
    than a specified amount of time, then you could be liable for nonspecific damage
    to the brand reputation of the retailer selling your goods. Those sorts of open-ended
    liabilities are unacceptable, and negotiating them out can take months. Other
    onerous terms include penalties for late shipments or fines for defective units.
    The contract negotiation process is very distracting to top management and can
    put a real drag on an organization.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** Did you get any patents? How do they work within the world of open
    source?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** Yes, I actually was granted several patents during my tenure at
    Chumby. Patents are a very natural way to protect hardware ideas. As F/OSS [free
    and open source software] licenses like the GPL [GNU general public license] and
    BSD [Berkeley software distribution] rely on copyright for power, open hardware
    licenses can likewise draw upon patents for power.'
  prefs: []
  type: TYPE_NORMAL
- en: When we started, no license existed that addressed the patent issue, so chumby
    created its own flavor of open source license. It was basically an automatic cross-license
    with users who created derivative works. Those who utilized our source would get
    a license to the patents, under the condition that any patents granted for the
    derivative work also had to be automatically licensed back to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The license had a couple of other restrictions that were not “truly” open,
    like a condition that the derivative work had to at least give users the option
    to run the chumby network in a competing product (an opt-in checkpoint during
    the boot process). There was also an “ask us if you want to manufacture” clause,
    which stated that derivatives going to mass production had to get additional authorization
    from Chumby. We added that primarily to create a checkpoint to verify interoperability
    with the servers, and also to enforce proper trademark and branding rules. Burying
    that clause in the license meant that the license couldn’t be called open source
    because Chumby could always say no, though it never did in practice. However,
    the situation does highlight an ongoing struggle in open source hardware: how
    to address trademark and interoperability issues in an increasingly complex and
    diverse ecosystem.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, the rights to the patents I created at Chumby are all assigned to the
    investors. They will likely be sold to the highest bidder, which could very well
    be a patent troll. I would regard that outcome as unfortunate, but it’s a reality
    that I must accept. The investors have the right to explore all lawful venues
    to recover their investment. In an ideal world, however, I’d buy back the rights
    at an affordable price, license them to the open source community, and try to
    establish a material precedent on how to handle patents in the open source community.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** Do you have any advice for a maker who is considering taking venture
    capitalist funding? Anything different if they’re doing open source hardware?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** I think VC funding is suitable only for accelerating certain kinds
    of growth. It’s not very good for early-stage research and development or businesses
    that have slow, but steady, growth models.'
  prefs: []
  type: TYPE_NORMAL
- en: The hardware model is radically different from the software model. Software
    is innately scalable. You can acquire 100,000 users overnight. Monetizing the
    user base in software is trickier, but most software plays start with scale and
    then worry about money.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because hardware requires the movement of atoms to acquire a user, scalability
    is limited by the rate at which you can economically and reliably assemble your
    atoms and ship them to the customer. On the other hand, there is a very natural
    point for monetization in hardware: the margin you charge on every unit sold.
    Money comes earlier and more often, but the growth rate is limited by pesky things
    like the laws of physics and the availability of raw materials and skilled labor
    to build the units. Notable exceptions to this rule are concepts like the Square
    reader. Square’s hardware was cleverly designed to be so cheap that its cost was
    arguably lower than the cost to acquire a customer through other means (like print
    advertising and mailing campaigns), making the dongle cheap enough to just give
    away.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, in hardware, first ask this: what is your distribution channel,
    and how hard is getting your product to end users? Ultimately, the size of that
    pipe and the monetary drag on transactions limits the growth rate of your idea.
    You also have to factor in *boomerang* costs like returns and customer support
    costs. You’ll be shocked at how many support calls you get from people who forgot
    to plug your product in.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have an awesome distribution channel, a solid marketing campaign, and
    customers lined up out the door, maybe VC is a reasonable match. But a typical
    maker will start out selling stuff online, possibly in boutique stores. The time
    it takes to turn capital into revenue will be on the order of months initially,
    and that’s a brutal cycle to finance with VC. All the money you have tied up in
    the supply chain isn’t adding any value to you, but you traded a lot of your ownership
    in the company to get that money.
  prefs: []
  type: TYPE_NORMAL
- en: I would typically recommend that a maker try to first fund research and development
    out of pocket, or with a very friendly angel loan. Once you have a prototype and
    a solid plan for production, it’s smarter to go into debt to finance small batches
    of builds so you’re never overextended and build your market one step at a time.
    Every time you turn inventory, you should come back with more cash, which you
    can plow into making more inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this forces good discipline. It will help you focus on leaning up the
    supply chain so that inventory turns faster. The best hardware companies turn
    inventory in a matter of days. If you’re growing your capital base by 20 percent
    with every inventory turn, it only takes four turns to double your money: $100
    turns into $120, which turns into $144, which turns into $172, which on the fourth
    turn results in $207\. That’s the magic of compounded percentages.'
  prefs: []
  type: TYPE_NORMAL
- en: If you can do a full turn of inventory once every eight weeks and sustain a
    20 percent growth rate with each turn, you’ll grow your business by over 300 percent
    in one year. Of course, the markets are never so ideal and predictable, but you
    can play with turn time versus margin available to grow your business. Higher-margin
    businesses can take longer to turn inventories and still sustain a palatable growth
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping like this is a lot of hard work, but at the end of the day, you
    own every penny you make, as you have no investors. The glory stories for this
    model aren’t as big as, say, Instagram or Google, but if you’re doing it right,
    you’re in control, and your work is more likely to pay off in the end. In fact,
    many successful Chinese hardware manufacturing businesses grew primarily using
    bootstrapped funding just like this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** What are your thoughts on Kickstarter for funding?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** I don’t think it’s a good idea to fund early research and development
    with Kickstarter or other crowdfunding platforms because of the hard commitments
    you have to make to customers early on. Kickstarter is a great phenomenon, but
    you also need to be careful raising money there. To some extent, Kickstarter is
    the ultimate dumb money. Customers are sold on a vision and buy in early on, and
    you have to deliver on that vision. In crowdsourcing your money, you’ve also crowdsourced
    your board of directors. But the road to product development is never smooth.
    As a result, Kickstarter money can lock you into commitments early on that you
    can’t back out of.'
  prefs: []
  type: TYPE_NORMAL
- en: I think Kickstarter can be a better solution than VC, but you should only use
    it after the idea has matured sufficiently and you’re primarily looking to find
    a better way to finance production than VC money or a bank loan. In fact, after
    you consider the frictional losses of extracting money from Kickstarter, a bank
    loan with a few percent interest could be favorable. But of course, a bank loan
    doesn’t come with the same visibility, marketing, and upside potential as a crowdfunding
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** When you advise companies, what do you most often suggest to the
    founders?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** Ship or die! Particularly if you’ve accepted VC funding. The moment
    VC money hits your books, you’re on a fixed-length fuse. If that fuse runs out
    and you haven’t created substantial value, a bomb goes off that wipes out a chunk
    of your valuation. If you’ve raised a million dollars and you plan to burn it
    in a year, every day “costs” you $4,000\. I use that as a value barometer to guide
    decision making: if $30 in expedite fees can pull in the schedule on a long-pole
    task by one day, the money is well spent. This is also part of the reason I lived
    on “China time” while chumby was in production even though I was in California.
    Staying up until 4 or 5AM every night to flip emails with the factory and shorten
    the longest pole in the tent shaved days off the schedule, which translated to
    tens of thousands of dollars in burn.'
  prefs: []
  type: TYPE_NORMAL
- en: In the face of “ship or die,” don’t look to ship the perfect product. Shipping
    a product that’s good enough is more important than shipping a great product late,
    especially in consumer electronics or any similarly seasonal business. In consumer
    electronics, up to 90 percent of your business can happen in the fourth quarter.
    If you miss Christmas, you’ll have no revenue for the next three quarters; missing
    Christmas is like dropping an extra year of burn on your capitalization table.
    Worse yet, during that year, your competitors will continue to improve.
  prefs: []
  type: TYPE_NORMAL
- en: Chumby suffered from precisely this. We premiered an alpha version of the device
    in August 2006, but we missed Christmas 2007\. We didn’t launch our squishy, connected
    alarm clock until just after Christmas, in February 2008.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider some world events that happened around these dates: the iPhone shipped
    in June 2007, and the global economy crashed in October 2008\. It was bad enough
    that we had to weather almost a full year, from February 2008 until Christmas
    2008, burning venture money to stay warm. But when the economy fell out, so did
    the appetite for a $200 stocking stuffer. We had too much inventory and had to
    fight for survival.'
  prefs: []
  type: TYPE_NORMAL
- en: If my memory is correct, we could have shipped a product for Christmas 2007\.
    It just wouldn’t have been quite as polished and would have lacked some features.
    But maybe it would have been good enough. In retrospect, the iPhone had by far
    less momentum in 2007 than in 2008, and we probably could have cleared a lot of
    inventory. On the other hand, perhaps knowing the iPhone, its apps, and its awesome
    touchscreen would obsolete a connected alarm clock drove us to second-guess our
    strategy and delay launch to strengthen features like streaming music integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'At any rate, the lesson is clear enough to me: ship or die!'
  prefs: []
  type: TYPE_NORMAL
- en: A second piece of advice I’d give to hardware companies is to aim high with
    price. It’s virtually impossible to raise your pricing if you start too low, and
    there’s nothing like a sale to get people to buy.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware startups that principally sell online are tempted to set the price
    as low as possible to drive buzz and improve initial sales. The temptation to
    sell your $35 device for $49 direct online is huge. After all, that’s about a
    28 percent margin (unless your BOM doesn’t factor in soft costs). That’s great,
    until you’ve dropped off the front page of Engadget and your sales are plummeting.
  prefs: []
  type: TYPE_NORMAL
- en: Engaging a retailer may help bring in more, and more consistent, sales, but
    a retailer will initially try to buy your product from you for between 40 and
    60 percent of your MSRP. This means they’d want to buy a product for $49 and sell
    it at $99\. If you’ve already sold a bunch of units at $49, there’s no way the
    retailer can sell it for $99\. To access retail, you’d have to sell your $35 product
    to a retailer for $25 so the retailer can sell it at your established price of
    $49\. Even if you’re successful with such a drastic cost-down, you’re still left
    making no money!
  prefs: []
  type: TYPE_NORMAL
- en: Selling your $35 device for $99 might garner fewer customers at first, but your
    initial margins would be spectacular, and you’d have the room to cut in a retailer
    or run sales of your own to get more customers. That’s part of the reason MSRPs
    are so high. Retailers also love to use sales to make units move, and a $99 unit
    priced down to $69 feels like a smart buy. But at $69, the retailer is only making
    29 percent margin.
  prefs: []
  type: TYPE_NORMAL
- en: Aiming too low on pricing effectively robs you of the opportunity to use retail
    as a possible distribution channel, and you simultaneously lose the opportunity
    to have sales and promotions yourself. Promotions are important because viral
    marketing can only get you in front of a customer once or twice at best. So when
    you put your heart and soul into your product, price it like you mean it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** If you could do it over, how would you change the hardware of the
    chumby? The software? The way chumby was made?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** Well, as my previous answer indicates, I would have focused much
    more on shipping on time, perhaps at the expense of jettisoning some features.'
  prefs: []
  type: TYPE_NORMAL
- en: A more counterintuitive thing I learned is that accessories and packaging can
    take more time to develop than a product. The squishy chumby classic came with
    a wonderful set of linen and microfiber bags and rubber charms. (We developed
    over a dozen charms in all.) There was also a custom power adapter, branded ribbons,
    gift boxes, branded tissue paper ... I even had to iterate the hardware design
    and spin an injection-mold tool to improve the attachment method for the charms
    to the device. I spent at least four months intensely focused on the accessories
    and packaging for the product. Our fan base went wild over the attention to detail,
    and that helped goose sales.
  prefs: []
  type: TYPE_NORMAL
- en: But in retrospect, I wonder if we could have done better forgoing the details
    and shipping before Christmas. One of the most gut-wrenching realizations that
    small companies have to make is that they aren’t Apple. Apple spends over a billion
    dollars a year on tooling. An injection-molding tool may cost around $40,000 and
    take two to three months to make; Apple is known to build five or six simultaneously
    and then scrap all but one so they can evaluate multiple design approaches. For
    Apple, tossing $200,000 in tooling to save two months’ time to market is peanuts.
    But for a startup that raised a million bucks, that’s unthinkable. Apple also
    has hundreds of staff; a startup has just a few members to do everything. The
    precision and refinement of Apple’s products come at an enormous cost that is
    out of reach for startups.
  prefs: []
  type: TYPE_NORMAL
- en: I don’t mean to say that design isn’t important. It’s still an absolutely critical
    element to a product, and good design and attention to detail allow a startup
    to charge more for a product and differentiate themselves from competitors. Apple
    has raised the bar very high for design and user experience, and users will judge
    your product accordingly. But it’s important to keep in mind that your true bar
    for comparison is other startups, not Apple. If your chief competitor is Apple,
    either you need a billion dollars in cash to invest in product design or you need
    to rethink your strategy.
  prefs: []
  type: TYPE_NORMAL
- en: That leads to another thing I’d probably change. Pivoting is so important for
    a startup. A startup has to be able to run circles around big companies. Culturally,
    Chumby just found it challenging to be agile enough to adapt to a rapidly changing
    technological landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, hindsight is 20/20\. There’s a lot we could have done differently,
    but when I think back on all the early decisions we made and how we got there
    (the resistive touchscreen, lack of integrated battery, using Flash as our core
    platform), I don’t see how we could have made any different fact-based decisions
    back then.
  prefs: []
  type: TYPE_NORMAL
- en: But that does show a flaw of fact-based reasoning. Engineers love to make decisions
    based upon available data and high-confidence models of the future. But I think
    the real visionaries either don’t know enough, or have the sheer conviction and
    courage to see past the facts and cast a long shot. It’s probably a bit of both.
    Taking risks also means there’s a bit of luck involved.
  prefs: []
  type: TYPE_NORMAL
- en: I certainly have a fact-induced myopia. My recent focus on operational efficiency,
    schedules, and risk management has sapped my ability to have creative and audacious
    visions. I’m actually taking a year off from entrepreneurship to decompress a
    bit and to try to rediscover and develop the creative bits of myself that have
    atrophied over the past couple of years.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** Now that you’ve been part of a full cycle of a VC-funded company
    that makes hardware, what suggestions do you have for company structure, from
    the people to the location to the overall organization?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** The structure really depends on the type of product you’re trying
    to build. Hardware has many different specialties (like consumer, medical, and
    industrial) and markets (like high-end boutique, hobby items, and mass market
    devices). There’s good business potential in all of them, but your location, focus,
    and team composition need to be tuned based on your product and what gives you
    a competitive edge. At Chumby, hardware was just a barrier to entry for apps to
    run in your home, so it was instantly a race to the bottom. The hardware part
    of the company had to run lean (remember, Chumby had one hardware engineer and
    one operations director), and it needed a China-centric strategy from day one.'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, if you can suffer doing a hardware startup through bootstrapping,
    it’s worthwhile. A broad range of hardware products can be bootstrapped at first—and
    then Kickstarted, debt-financed, or VC-funded to scale. For instance, MakerBot
    developed and shipped its 3D printer entirely on angel money, before closing a
    round of VC funding. Bre Pettis, one of the cofounders, once mentioned that they
    lived on nothing but cup ramen noodles for a month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any hardware company that has passed the idea phase and is entering the scaling-up
    phase has to be razor-focused on operations and cash flow. Maintaining a build-to-order
    paradigm is critical but difficult: a key metric for any hardware company, small
    or large, is how quickly you can turn inventory into cash. There are two halves
    to the equation. One is leaning up your supply chain and trimming lead times so
    you don’t need to sit on much inventory, yet can satisfy new orders quickly. The
    other is leaning up your cash management so you can bill customers quickly while
    stretching your credit lines as far as possible. That’s a multidimensional optimization
    problem that can make your head explode without the right staff, so your team
    should include a crack operations director and someone adept in semi-exotic financial
    instruments like factoring insurance, collateralized lines of credit, and trade
    contracts.'
  prefs: []
  type: TYPE_NORMAL
- en: Being able to access China effectively early offers a disruptive advantage to
    your startup (it’s hard to ignore the order-of-magnitude advantage China has over
    the United States in assembly costs), but working with China does come at a huge
    cost and risk to the organization. It may not be for everyone, particularly on
    day one.
  prefs: []
  type: TYPE_NORMAL
- en: I outsourced myself to Singapore to get closer to China, because I knew I’d
    never be able to get away from the China ecosystem. China has such a firm grip
    on hardware manufacturing, and I think it will take decades for them to lose their
    edge. This geographic diversity also means that any effective hardware startup
    has to be able to function effectively with a delocalized team.
  prefs: []
  type: TYPE_NORMAL
- en: '**Phil:** What’s next for bunnie? What are you most excited to do next?'
  prefs: []
  type: TYPE_NORMAL
- en: '**bunnie:** That is *the* question for me! I don’t really know what’s next.
    As I noted earlier in the interview, I’m taking a year off to do things that aren’t
    specifically entrepreneurial. My current priorities are to first have fun with
    my work, second to not lose too much money, and third to do something good for
    the community through a combination of hacktivism, volunteer work, and open source
    methodology. I’m hoping in this year I’ll collect the bits of my soul that I’ve
    lost along the way, find some new ones, and relearn the value of magic in my life.
    I’m also spending a fair bit of my focus tuning up myself, getting fit, changing
    my diet habits, and losing weight. The coolest piece of hardware you’ll ever own
    is your body, and if that’s not working well, there’s no hope for anything else.
    Once I’m done with my aimless wanderings, hopefully I’ll have a better idea of
    what’s next!'
  prefs: []
  type: TYPE_NORMAL
- en: While reviewing that interview for this book, I chuckled a bit to myself. By
    that point, the year I took off had turned into four years. Several concerned
    associates of mine asked, “When are you going to stop your midlife crisis and
    get a real career?” But in retrospect, not going back to the corporate world was
    the best decision I ever made.
  prefs: []
  type: TYPE_NORMAL
- en: I do live a lot leaner than I did when I had VC/corporate backing, but I have
    a lot more independence. It was a choice between golden handcuffs and an Aeron
    chair, or a rucksack and an interesting spot near the horizon. I’m still working
    on collecting the bits of my soul, and I’m still slowly relearning the values
    of enchantment and wonder. But at least I have the freedom to contemplate values
    other than the wealth of my invested shareholders. Thankfully, I had some success
    in revising my dietary habits and fitness level; tuning up my own body was an
    excruciating year of calorie tracking, sore muscles, and blistered hands, but
    it paid off in spades. My mother used to tell me that without health, you have
    nothing; she’s absolutely right. If you don’t have the stamina to work, it’s hard
    to turn opportunities into outcomes. With any luck, my health will hold out, and
    I’ll have many more stories to share with you in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHY THE BEST DAYS OF OPEN HARDWARE ARE YET TO COME**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most critical outcomes from my year of soul searching was the realization
    that the best days of open hardware are still ahead. As I contemplated in my interview
    with Phil, Chumby didn’t fail because of its open hardware model. At worst, the
    model had little bearing upon the consumer appeal of the product; at best, it
    was a good talking point. Nowhere in that interview did I gripe about plummeting
    sales in response to cheap clones appearing on the market due to our liberal open
    source policies.
  prefs: []
  type: TYPE_NORMAL
- en: Rather, one of our biggest challenges was an inability to keep up with Moore’s
    law. Chumby simply didn’t have the resources as a startup to keep pace. It took
    two to three years to push a major platform revision, at which point that revision
    was already obsolete. My PhD dissertation[*](footnote.xhtml#fn19) was centered
    on Moore’s law and its impact on computer architecture. The most powerful computers
    are descendants of a processor designed in the 1970s (the Intel 8085) with derivatives
    still used today as the brains of toaster oven. Why? Because running existing
    code on backward-compatible CPUs has almost always been faster than porting old
    code to a new microarchitecture. Given that fact, in my thesis, I designed a microarchitecture
    that nobody could possibly implement at the time but that might be optimal for
    a computer that could be built 10 to 15 years out. A small team of researchers
    would have ample time to develop the infrastructure necessary for a novel computer
    that would be relevant the day it’s finally switched on. I spent several months
    in the late ’90s studying the underpinnings of Moore’s law, trying to understand
    where it runs thin and where it holds strong. At the time, the strongest limitation
    was the speed of light, so my thesis revolved around architectural tricks to reduce
    communication latencies.
  prefs: []
  type: TYPE_NORMAL
- en: In 2011, about a decade after my graduation and right around the end of Chumby,
    I had an opportunity to give a “vision” keynote at the Open Hardware Summit. I
    decided to review my notes from college and see if there might be another decade
    left in Moore’s law. There isn’t, and that has profound ramifications on the future
    of open source hardware. This section is an adaptation of a blog post I wrote
    in 2011 sharing my thoughts; thankfully, here in 2016, I’ve yet to retract any
    of the statements I made back then.
  prefs: []
  type: TYPE_NORMAL
- en: '**Where We Came From: Open to Closed**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open hardware is a niche industry, and certain trends have caused the hardware
    industry to favor large, closed businesses at the expense of small or individual
    innovators. Looking 20 to 30 years into the future, however, I see a fundamental
    shift in trends that can tilt the balance of power to favor innovation over scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I said in this part’s preface: in the beginning, hardware was open. Early
    consumer electronic products, such as vacuum-tube radios, often shipped with user
    manuals containing full schematics, a list of replacement parts, and instructions
    for service. In the ’80s, computers often shipped with schematics. For example,
    the Apple II shipped with a reference manual that included a full schematic of
    the mainboard, an artifact I credit for strongly influencing me to get into hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0207-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A vacuum-tube radio schematic*'
  prefs: []
  type: TYPE_NORMAL
- en: 'But contemporary user manuals lack this depth of information. The most complex
    diagram I’ve seen in a Mac Pro user guide instructs you on how to sit at the computer:
    keep your “thighs tilted slightly,” “shoulders relaxed,” and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What happened? Did electronics just get too hard and complex? On the contrary,
    improving electronics got too *easy*: the pace of Moore’s law has been too much
    for small-scale innovators to keep up.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Where We Are: “Sit and Wait” vs. “Innovate”**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider this snapshot of Moore’s law, which states that “goodness” (pick virtually
    any metric: performance, transistor density, price per quanta, etc.) doubles every
    18 months.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0208-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Moore’s law, doubling once every 18 months versus linear improvement of 75
    percent per year. The shaded sliver between the two lines at t < 2 years represents
    the window of opportunity where linear improvement exceeds Moore’s law*.'
  prefs: []
  type: TYPE_NORMAL
- en: This chart is unusual in that the vertical axis is linear. Most charts depicting
    Moore’s law use a logarithmic vertical scale, which flattens the curve’s sharp
    upward trend into a much more innocuous-looking straight line. The shaded area,
    on the other hand, represents a linear improvement over time. This might represent
    a small innovator working at a constant, noncompounding, but respectable rate
    of 75 percent per year to add or improve features on a given platform. The tiny
    (almost invisible) space enclosed by the curves represents the market opportunity
    of the small innovator versus Moore’s law.
  prefs: []
  type: TYPE_NORMAL
- en: The juxtaposition of these two curves highlights the central challenge facing
    small innovators. Sitting and waiting have long been more profitable than innovating.
    If it takes two years to double the performance of a system, you’re better off
    simply waiting and upgrading to the latest hardware in two years. Racing against
    Moore’s law is a Sisyphean exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exponential growth mechanic favors large businesses with the resources
    to achieve huge scale. Instead of developing one product at a time, a competitive
    business must have the resources and vision to develop three or four generations
    of products simultaneously. Reaching the global market within the timespan of
    a single technology generation requires a supply chain and distribution channel
    that can do millions of units a month: selling at a rate of 10,000 units per month,
    reaching “only” a million users, or about 1 percent of the households in the United
    States alone, would take eight years. And significantly, the small barrier (a
    few months’ time) created by closing a design and forcing the competition to reverse-engineer
    products can be an advantage, especially against the pace of Moore’s law.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, technology markets have become inaccessible to small innovators as individuals
    struggle to keep up with the technology treadmill and big companies continue to
    close their designs to gain a thin edge on their competition. This trend is changing,
    however.
  prefs: []
  type: TYPE_NORMAL
- en: '**Where We’re Going: Heirloom Laptops**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Gordon Moore, the man who observed Moore’s law, is one of Intel’s co-founders.
    Moore’s law is best known for describing how transistor density, and by extension
    CPU performance, would increase over time. For instance, consider this plot of
    Intel CPU clock speed at introduction versus time.[*](footnote.xhtml#fn20)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0210-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*CPU clock speed over time. The plateau has held steady since 2014*.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the abrupt plateau where clock speed stops increasing. At that point,
    CPU makers started using multicore technology to drive performance, but this wasn’t
    by choice. CPUs reached physical limits that prevented practical clock scaling,
    primarily related to power and wire delay scaling. Transistor density, and hence
    core count, continues to increase over time, but the pace is decelerating. Transistor
    count used to double once every 18 months; then it slowed down to double less
    than once every 24 months. Eventually, transistor density scaling will effectively
    end. The absolute endpoint for transistor scaling is a topic of debate, but one
    study^([†](footnote.xhtml#fn21)) indicates that scaling may stop at an effective
    gate length of about 5 nm. That’s about the space between 10 silicon atoms, so
    even if this guess is wrong, it can’t be wrong by much.
  prefs: []
  type: TYPE_NORMAL
- en: The implications are profound. One day, you won’t be able to rely on buying
    a faster computer next year. Your phone won’t get any smaller or more powerful.
    And the flash drive you buy next year will cost the same and store the same number
    of bits as the one you bought this year. The idea of an “heirloom laptop” may
    sound preposterous today, but someday, we may perceive our computers as cherished
    and useful heirlooms to hand down to our children as part of our legacy.
  prefs: []
  type: TYPE_NORMAL
- en: '**An Opportunity for Open Hardware**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This slowing trend is good for small businesses, and likewise open hardware
    practices. To see why, let’s revisit the plot of Moore’s law versus linear improvement.
    This time, I’ll overlay two new scenarios: technology doubling once every 24 and
    36 months.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0211-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Three different Moore’s law scenarios. The shaded sliver between linear improvement
    and the t=18 months scenario turns into a large region of opportunity under the
    t=36 months scenario. (Note that the vertical axis is log scale.)*'
  prefs: []
  type: TYPE_NORMAL
- en: The area bounded by the curved line and the straight line at the bottom represents
    the market opportunity for linear improvement versus Moore’s law. In the 36-month
    scenario, not only does linear improvement have over eight years to go before
    it is lapped by Moore’s law, but also there is a point at around year two or three
    where the optimized solution is clearly superior to Moore’s law. In other words,
    there is a genuine market window for monetizing innovative solutions at a pace
    that small businesses can handle.
  prefs: []
  type: TYPE_NORMAL
- en: As Moore’s law decelerates, there’s also potential for greater standardization
    of platforms. Creating a standard tablet or mobile phone chassis with interchangeable
    components may seem ridiculous now, but it becomes a reasonable proposition when
    components stop shrinking and changing so much. As technology decelerates, there
    will be a convergence between hardware found in mobile phones and hardware found
    in embedded CPU modules like the Arduino. Just look at the Raspberry Pi, which
    was introduced in 2012\. Models released in 2016 offer a quad-core, 1.2GHz CPU
    for performance comparable to entry-level smartphones at the time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating stable, performance-competitive open platforms will empower small businesses.
    Of course, a small business can still choose to be closed, but by doing so, it
    must create a vertical set of proprietary infrastructure, and the dilution of
    focus to implement such a stack could be disadvantageous.
  prefs: []
  type: TYPE_NORMAL
- en: In the post–Moore’s law future, FPGAs may perform respectably compared to their
    hardwired CPU kin, for at least two reasons. First, the flexible yet regular structure
    of an FPGA may lend it a longer scaling curve, in part due to the FPGA’s ability
    to reconfigure circuits around small-scale fluctuations in fabrication tolerances.
    Second, the extra effort to optimize code for hardware acceleration will amortize
    more favorably as CPU performance scaling increasingly relies upon difficult techniques
    like using parallel cores on a massive scale. Massively multicore CPU architectures
    look a lot like the coarse-grain FPGA architectures proposed in academic circles
    in the ’90s. An equalization of FPGA-to-CPU performance should greatly facilitate
    the penetration of open hardware at a deep level.
  prefs: []
  type: TYPE_NORMAL
- en: There will be a rise in repair culture as technology becomes less disposable
    and more permanent. Replacing worn-out computer parts five years from their purchase
    date won’t seem so silly when the replacement part has virtually the same specifications
    and price as the old part. This rise in repair culture will create a demand for
    schematics and spare parts that in turn facilitates the growth of open ecosystems
    and small businesses.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I’m looking forward to the return of artisan engineering, where
    elegance, optimization, and balance are valued over feature creep, and where I
    can use the same tool for a decade and not be viewed as an anachronism. (Most
    people laugh when they hear I held on to Eudora 7 as my email client until 2012,
    when I switched to my current client, Thunderbird.)
  prefs: []
  type: TYPE_NORMAL
- en: The deceleration of Moore’s law has already impacted markets that are less sensitive
    to performance. Consider the rise of Arduino. It took several years to gain popularity,
    with virtually the same hardware at its core the whole time. Fortunately, the
    demands of Arduino’s primary market (physical computing, education, and embedded
    control applications) have not grown, allowing the platform to remain stable.
    This stability has enabled Arduino to grow deep roots in a thriving user community
    with open and interoperable standards.
  prefs: []
  type: TYPE_NORMAL
- en: With some hard work and a bit of luck, I believe the open hardware ecosystem
    will surely blossom. The inevitable slowdown of Moore’s law may spell trouble
    for technology giants, but it will also create an opportunity for the open hardware
    movement to grow roots and start something potentially very big. To seize this
    opportunity, open hardware pioneers will need to set the stage by creating a culture
    of permissive standards and customs that can scale over time.
  prefs: []
  type: TYPE_NORMAL
- en: I look forward to being a part of open hardware’s bright future.
  prefs: []
  type: TYPE_NORMAL
- en: '**CLOSING THOUGHTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although chumby, conceived in 2006, was a bit ahead of its time and the company
    ultimately fell victim to Moore’s law, my reflections on the slowing pace of Moore’s
    law encouraged me to try yet another experiment in open hardware. The next chapter,
    on Novena, shares the story of my quixotic adventures building a bespoke open
    source laptop.
  prefs: []
  type: TYPE_NORMAL
