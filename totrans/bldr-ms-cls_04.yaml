- en: Chapter 4. Blocking In
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With preparation finished and concept art and reference at the ready, we can
    move on to modeling. *Modeling* is the process of creating a 3D object that is
    made up of individual points connected to form faces, which in turn make up more
    complex shapes. There are many ways to create models in Blender, from modifying
    primitives, like a simple cube or sphere, to building the surface of a mesh face
    by face or drawing smooth curves that Blender can convert into objects composed
    of vertices and faces.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling can be a long process, and to save time, it helps to know where you
    are going with a particular modeling task. Still, you can’t model an object all
    at once; you have to start somewhere, and that’s where blocking in comes in. *Blocking
    in* is the process of adding simple placeholders for the objects you want to create
    so that you can better plan how they fit together, consider their individual constructions,
    and spot problems before they become major issues. Once a scene has been blocked
    in, you can move on to refining, replacing, or adding to each part to create a
    final model. For example, in the Jungle Temple scene, simple elements like cubes
    are used as placeholders for key elements; for other projects, we create simple
    base meshes for sculpting that act as a foundation for developing the final form
    of our sculpted models.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Modeling Terms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive in, here are some definitions of Blender’s basic modeling concepts
    that I’ll use throughout this chapter. [Table 4-1](ch04.html#important_terms_for_modeling_in_blendera
    "Table 4-1. Important Terms for Modeling in Blender’s Edit Mode") lists them in
    hierarchical order: Vertices make up edges, which make up faces, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Edit Mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit mode (shown in [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m
    "Figure 4-1. Blender’s 3D Viewport in Edit Mode")) is where the modeling magic
    happens. With a mesh object selected, you can enter Edit mode by pressing TAB
    or by clicking the mode drop-down menu in the 3D Viewport header and selecting
    Edit mode. Once in Edit mode, your selected object is editable (if it is in fact
    editable—empty objects and lamps, for example, are not). When an object is editable,
    you can select and manipulate parts as well as create new parts.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-1. Important Terms for Modeling in Blender’s Edit Mode
  prefs: []
  type: TYPE_NORMAL
- en: '| Term | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| vertex (plural *vertices*); also known as a *vert* | A single point in 3D
    space with a specific location. Vertices are connected to construct *meshes*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| edge | A line connecting two vertices. |'
  prefs: []
  type: TYPE_TB
- en: '| face (or polygon) | Three or more vertices connected by edges and filled
    with a flat surface. A polygon formed of three vertices is called a *tri* (short
    for *triangle*). A polygon formed of four vertices is called a *quad* (short for
    *quadrangle*). Polygons with more than four vertices are called n*-gons*. |'
  prefs: []
  type: TYPE_TB
- en: '| normal | The direction in which a face or vertex points. Imagine a flagpole
    pointing straight out from the surface of an object. The direction it points is
    the *face normal*. Vertices and edges can also have normals when they are part
    of a surface. |'
  prefs: []
  type: TYPE_TB
- en: '| mesh | A collection of vertices, faces, and edges that are all part of a
    single object. |'
  prefs: []
  type: TYPE_TB
- en: '| topology | A term that refers to the way the faces of a mesh “flow” over
    its surface. (See [Chapter 5](ch05.html "Chapter 5. Modeling the Details") and
    [Chapter 7](ch07.html "Chapter 7. Retopology") for more on topology.) |'
  prefs: []
  type: TYPE_TB
- en: '| operator | Any operation you perform on part of a mesh, such as translating,
    scaling, duplicating, and so on. Operators generally take input from the user
    (such as the distance and direction you want to move something) and then do something
    to the selected object as a result. |'
  prefs: []
  type: TYPE_TB
- en: '![Blender’s 3D Viewport in Edit Mode](httpatomoreillycomsourcenostarchimages1538318.png.jpg)Figure 4-1. Blender’s
    3D Viewport in Edit ModeTable 4-2. Frequently Used Operators in Edit Mode'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operators | Hotkey | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Delete | X | Deletes the selected vertices, edges, or faces. |'
  prefs: []
  type: TYPE_TB
- en: '| Duplicate | SHIFT-D | Duplicates your selection and allows you to move it.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Extrude | E or CTRL-click | Creates new geometry by “pulling” new verts,
    edges, and faces out from the current selection. The results of extruding depend
    on what you have selected (see [Figure 4-2](ch04.html#extruding_faces_1comma_extruding_edges_2
    "Figure 4-2. Extruding faces 1, extruding edges 2, and extruding a single vertex
    3\. Extruding operations on different selections will have different results.
    Extruding vertices will create edges, while extruding edges or faces will create
    faces. Extruding an entire closed mesh (not shown) will duplicate that mesh.")).
    CTRL-clicking in Edit mode with nothing selected will create a new vertex wherever
    you click. Doing so multiple times will create a string of connected vertices.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Fill | F | If two vertices are selected, Fill creates an edge joining them.
    If three, four, or more vertices are selected, it creates a tri, quad, or *n*-gon
    from them. |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate | R | Rotates the vertices, edges, or faces you have selected. (You
    can also use the 3D Manipulator widget in Rotate mode.) |'
  prefs: []
  type: TYPE_TB
- en: '| Scale | S | Scales the vertices, edges, or faces you have selected, allowing
    you to resize part or all of a mesh. (You can also use the 3D Manipulator widget
    in Scale mode to do this.) |'
  prefs: []
  type: TYPE_TB
- en: '| Shrink/Fatten | ALT-S | Moves the selected vertices along the direction of
    their normals to inflate a mesh, almost like a balloon, or to shrink it to make
    it thinner. |'
  prefs: []
  type: TYPE_TB
- en: '| Smooth | W▸Smooth | Smooths sharp angles between edges and faces so that
    the resulting mesh is smoother. |'
  prefs: []
  type: TYPE_TB
- en: '| Subdivide | W▸Subdivide | Divides all selected edges into two and faces into
    four, creating more dense geometry. |'
  prefs: []
  type: TYPE_TB
- en: '| Translate (also known as Grab or Move) | G | Grabs the vertices, edges, or
    faces you have selected and allows you to move them. (You can also use the 3D
    Manipulator widget in Translate mode to do this.) |'
  prefs: []
  type: TYPE_TB
- en: '| Dissolve | X | An alternative to Delete, this deletes the edges or vertices
    selected but fills the hole left behind with an *n*-gon. |'
  prefs: []
  type: TYPE_TB
- en: '| Connect | J | Connects two vertices that are part of the same face, splitting
    the face in two in the process. |'
  prefs: []
  type: TYPE_TB
- en: '| Cut | K | Gives you a knife tool that lets you cut the selected geometry
    along the lines you draw. Hold CTRL to snap to vertices and the middle of edges.
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blender almost always has two ways of performing an action: through the UI
    and by using a keyboard shortcut and/or Search. In many cases, it pays to learn
    both because knowing how to quickly perform actions and switch between modes will
    greatly speed up your work.'
  prefs: []
  type: TYPE_NORMAL
- en: Once in Edit mode, you can select things by right-clicking them. You can extend
    your selection with SHIFT-right-click. To select or deselect everything in the
    current mesh, press **A**. To switch between selecting vertices, edges, and faces,
    click the vertex, edge, or face select buttons in the 3D Viewport header (see
    [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m "Figure 4-1. Blender’s
    3D Viewport in Edit Mode")).
  prefs: []
  type: TYPE_NORMAL
- en: Press **L** to select all parts of a mesh connected to the part of the mesh
    under your cursor. With part of a mesh selected, you can perform various operations
    on your selection in order to edit your mesh.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 4-2](ch04.html#frequently_used_operators_in_edit_mode "Table 4-2. Frequently
    Used Operators in Edit Mode") lists the operators that you’ll use most often when
    modeling in Blender. There are many other ways to interact with a mesh, but I’ll
    cover those as we go along.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about an operator in Blender, search for it on *[http://wiki.blender.org/](http://wiki.blender.org/)*.
    You can easily discover more operators (or search for an existing one) using the
    Search menu (spacebar) or by looking through the header menus and panels of Blender’s
    different editors. You can hover over buttons in Blender to see a tool tip describing
    what an operator does and whether it has a keyboard shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: '![Extruding faces 1, extruding edges 2, and extruding a single vertex 3\. Extruding
    operations on different selections will have different results. Extruding vertices
    will create edges, while extruding edges or faces will create faces. Extruding
    an entire closed mesh (not shown) will duplicate that mesh.](httpatomoreillycomsourcenostarchimages1538320.png.jpg)Figure 4-2. Extruding
    faces 1, extruding edges 2, and extruding a single vertex 3. Extruding operations
    on different selections will have different results. Extruding vertices will create
    edges, while extruding edges or faces will create faces. Extruding an entire closed
    mesh (not shown) will duplicate that mesh.'
  prefs: []
  type: TYPE_NORMAL
- en: In Edit mode, the **W** key brings up a menu with a lot of handy tools for modeling.
    All of the operators you will use in Edit mode can be found in the 3D Viewport.
    As of Blender 2.5, when you use most operators, the Tool Options panel will appear
    at the bottom of the Tool Shelf, allowing you to change, retroactively, the parameters
    of the operator you just used. For example, after applying the Subdivide operator,
    you can use the Tool Options panel to change how many subdivisions to apply and
    whether to smooth them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other Ways to Model: Curves'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use Blender to create models in a number of different ways, including
    using various curves, *metaballs* (which behave somewhat like blobs of clay that
    stick together when they get close to one another), *NURBS surfaces* (surfaces
    constructed from cross sections defined by curves), text objects, and Bézier curves.
    Each has its place in modeling, but the most important (after meshes) are Bézier
    curves, which we’ll use often throughout the modeling sections of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '*Bézier curves* define a path in 3D space and are constructed using control
    points and handles. They can be used to make both wire- or ribbon-like objects
    that follow the path of a curve (using closed or open curves) and flat surfaces
    that are defined by their outline (using closed 2D curves). Each control point
    has two handles that define how the path flows through that vertex, allowing you
    to create a wide array of smooth and sharp paths with a curve.'
  prefs: []
  type: TYPE_NORMAL
- en: Modeling with curves works very much like using meshes; you can grab, rotate,
    scale, duplicate, and extrude control points or their handles. (You can’t make
    faces from curves, though; you can only connect each vertex in a curve to two
    others.)
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with curves bear the following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '****The geometry generated by curves is *procedural*.**** This means that the
    curves you define are used to generate a mesh according to the settings you apply
    to the curve in the Object Data tab ([Figure 4-3](ch04.html#object_data_tab_for_a_curve_object_allow
    "Figure 4-3. The Object Data tab for a curve object allows you to change between
    a 2D and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry)."))
    of the Properties editor. You can change things like the number of divisions per
    curve segment and the beveling and extrusion applied to the curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Object Data tab for a curve object allows you to change between a 2D
    and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry).](httpatomoreillycomsourcenostarchimages1538322.png.jpg)Figure 4-3. The
    Object Data tab for a curve object allows you to change between a 2D and 3D curve,
    set the density of the mesh created from that curve (Resolution), and define how
    the curve is beveled and extruded to create a 3D object (Geometry).'
  prefs: []
  type: TYPE_NORMAL
- en: '****Curves can be open or closed.**** To close a curve, select its two ends
    and press **F** to join them. You can delete a segment of a closed curve by selecting
    two or more connected points and choosing **X**▸**Segment** to make it open again.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Curves can be either 2D or 3D.**** Points on a 2D curve cannot be moved
    along the curve object’s *z*-axis, which allows you to create a flat object by
    defining its outline with a curve. Blender then fills in the shape with faces
    according to the Fill setting (see [Figure 4-3](ch04.html#object_data_tab_for_a_curve_object_allow
    "Figure 4-3. The Object Data tab for a curve object allows you to change between
    a 2D and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry).")).
    You can then extrude the outline of a closed curve to create a solid shape using
    the Geometry settings in the Object Data tab. You can also add details like beveled
    edges and change the curve’s resolution here.'
  prefs: []
  type: TYPE_NORMAL
- en: '****3D curves have a “tilt” that determines the direction of extrusion of the
    curve, as shown in [Figure 4-4](ch04.html#different_types_of_curvesdot_left_a_2d_c
    "Figure 4-4. Different types of curves. Left: A 2D curve extruded and beveled
    to make a flat cutout shape. Right: 3D curves extruded to make ribbons. (The tilt
    of the curve defines how the curve twists.)").**** You can see the direction of
    the tilt from the normals (arrowheads) displayed along the length of 3D curves.
    You can edit this tilt with CTRL-T, allowing you to create a curve that twists
    along its length.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Curves can be used to deform meshes.**** Mesh objects can be stretched
    along the path taken by a curve by applying a curve modifier to them.'
  prefs: []
  type: TYPE_NORMAL
- en: '****The curve handles can work in one of several ways, as shown in [Figure 4-5](ch04.html#curves_with_different_handle_types_left
    "Figure 4-5. Curves with different handle types (clockwise from top left: automatic,
    aligned, vector, and free)").**** The default is usually automatic or aligned,
    depending on the sort of curve object you add. Automatic handles simply create
    a smooth path from one control point to the next, with the handles pointing in
    opposite directions. If you grab one handle and move it, its control point will
    switch to using aligned handles that point in opposite directions but can be rotated
    and scaled, allowing you to create more flexible curves. You can change to other
    handle types using the shortcut **V** (or via the Curve menu in the header). Vector
    handles create straight lines between points with sharp corners. Free handles
    create sharp corners too, but you can also grab them and move them around like
    aligned handles, allowing you to create curved segments between control points.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Different types of curves. Left: A 2D curve extruded and beveled to make
    a flat cutout shape. Right: 3D curves extruded to make ribbons. (The tilt of the
    curve defines how the curve twists.)](httpatomoreillycomsourcenostarchimages1538324.png.jpg)Figure 4-4. Different
    types of curves. Left: A 2D curve extruded and beveled to make a flat cutout shape.
    Right: 3D curves extruded to make ribbons. (The tilt of the curve defines how
    the curve twists.)'
  prefs: []
  type: TYPE_IMG
- en: Modifiers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modifiers allow you to procedurally and nondestructively perform operations
    on your models. They are fundamental to creating just about anything in Blender.
    Some modifiers generate new geometry, replacing or adding to your mesh, while
    others deform existing geometry according to certain rules or offer ways to plug
    simulations and other more complex entities into your scene.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll focus mainly on modifiers that generate and deform the meshes they are
    applied to because they’re the most useful for creating models. Some of the most
    important ones for modeling are listed in [Table 4-3](ch04.html#useful_modifiers_for_modeling
    "Table 4-3. Useful Modifiers for Modeling"). In particular, the Mirror and Subdivision
    Surface modifiers are used in practically all organic modeling. The effects of
    the most commonly used generate modifiers are shown on a half-sphere in [Figure 4-6](ch04.html#different_generate_modifiers_and_their_e
    "Figure 4-6. Different generate modifiers and their effects. From the top, we
    see half a sphere 1, with a Mirror modifier 2, an Array modifier 3, a Solidify
    modifier 4, and a Subdivision Surface modifier 5 applied. Modifiers can be combined
    to create all sorts of shapes more easily than modeling them by hand.").
  prefs: []
  type: TYPE_NORMAL
- en: '![Curves with different handle types (clockwise from top left: automatic, aligned,
    vector, and free)](httpatomoreillycomsourcenostarchimages1538326.png.jpg)Figure 4-5. Curves
    with different handle types (clockwise from top left: automatic, aligned, vector,
    and free)Table 4-3. Useful Modifiers for Modeling'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Modifier | Effect |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **generate** | Mirror | Mirrors the geometry of the mesh along the specified
    axis, about the object’s origin, or of another object. Mirror modifiers are very
    useful for creating symmetrical objects. |'
  prefs: []
  type: TYPE_TB
- en: '|   | Array | Copies the mesh geometry and offsets it using a fixed offset
    relative to the object’s size or some other object. Arrays are useful for models
    with repeating elements. |'
  prefs: []
  type: TYPE_TB
- en: '|   | Subdivision Surface (Subsurf) | Divides each face of a mesh into four
    smaller faces and smooths them, creating a smoother mesh with each iteration.
    Subsurfs are useful for objects with smooth surfaces, particularly organic models.
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | Solidify | Extrudes the geometry along its normals to create a solid
    shell from a surface. |'
  prefs: []
  type: TYPE_TB
- en: '| **deform** | Lattice | Uses a 3D grid of points to smoothly distort the shape
    of a mesh. |'
  prefs: []
  type: TYPE_TB
- en: '|   | Shrinkwrap | Projects the mesh onto the surface of another object. |'
  prefs: []
  type: TYPE_TB
- en: '|   | Curve | Deforms a mesh along the path of a curve. |'
  prefs: []
  type: TYPE_TB
- en: '![Different generate modifiers and their effects. From the top, we see half
    a sphere 1, with a Mirror modifier 2, an Array modifier 3, a Solidify modifier
    4, and a Subdivision Surface modifier 5 applied. Modifiers can be combined to
    create all sorts of shapes more easily than modeling them by hand.](httpatomoreillycomsourcenostarchimages1538328.png.jpg)Figure 4-6. Different
    generate modifiers and their effects. From the top, we see half a sphere 1, with
    a Mirror modifier 2, an Array modifier 3, a Solidify modifier 4, and a Subdivision
    Surface modifier 5 applied. Modifiers can be combined to create all sorts of shapes
    more easily than modeling them by hand.'
  prefs: []
  type: TYPE_NORMAL
- en: Blocking in the Jungle Temple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider the Jungle Temple scene. For this project, my initial concern
    was designing a layout for the environment that lent itself to creating a nice
    composition. I began with only the main elements in the scene: a door into the
    interior of the temple and some stone blocks and trees strewn around the ruins.'
  prefs: []
  type: TYPE_NORMAL
- en: To create the door, I added a cube in Object mode (SHIFT-A▸Mesh▸Cube) and scaled
    it (**S**) to about the size I needed. Once you activate the Scale operator, you
    can constrain scaling along one axis (by pressing **X**, **Y**, or **Z**) to scale
    the object in only one direction. You can also scale on all *but* one axis by
    pressing SHIFT and **X**, **Y**, or **Z**.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to Edit mode (TAB), I added a hole by extruding in the two outside
    faces and scaling them on the *x*- and *z*-axes only. Next, I deleted the center
    faces (**X**) and created new faces around the hole in the center by selecting
    two open edges at a time and making a face between them (**F**), as shown in [Figure 4-7](ch04.html#making_a_simple_door
    "Figure 4-7. Making a simple door").
  prefs: []
  type: TYPE_NORMAL
- en: Back in Object mode, I added a plane (SHIFT-A▸Mesh▸Plane) and scaled it up to
    form the ground plane of the scene. Then I added a camera and moved it to roughly
    view the door I was looking for. A quick way to do this is to navigate to the
    view you want just within the 3D Viewport and then press CTRL-ALT-0 to snap the
    camera to the current view. You can also just move and rotate the camera like
    any other object. Note that this might result in the camera getting slightly tilted.
    You can rectify this by manually setting the Y rotation of the camera to 0, using
    the Rotation properties in the Transform panel of the Properties region (**N**).
  prefs: []
  type: TYPE_NORMAL
- en: From here, I added some simple walls to form the main boundaries of my scene
    simply by adding, scaling, moving, and extruding cubes. Next, I began adding more
    cubes, keeping in mind how they would become the final architectural elements
    of the scene, like stone walls, statues, and loose blocks of stone. This progression
    is shown in [Figure 4-8](ch04.html#blocking_in_with_simple_elementsdot_i_be "Figure 4-8. Blocking
    in with simple elements. I began with the door and then added a ground plane,
    walls, and cubes to represent major elements in the scene.").
  prefs: []
  type: TYPE_NORMAL
- en: With the simple elements blocked in, I began to add rough proxies for the trees
    I wanted growing over the ruins. To create these proxies, I added a Bézier curve
    object and set the handles to automatic. Then I used Blender’s Snapping tools
    to extrude curves resembling the roots and trunks of trees over the surfaces of
    the placeholder objects ([Figure 4-9](ch04.html#by_snapping_the_tree_roots_to_their_surr
    "Figure 4-9. By snapping the tree roots to their surroundings, we can quickly
    block in tree roots crawling over the surface of the ruins.")). I accomplished
    this by turning on Snapping, setting the snapping target to faces, and enabling
    Project onto Surface ([Figure 4-10](ch04.html#snapping_icons "Figure 4-10. Snapping
    icons")). This projects the curves onto the other objects in the scene as you
    move and extrude them, allowing you to “draw out” the trees over the top of the
    existing scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a simple door](httpatomoreillycomsourcenostarchimages1538330.png.jpg)Figure 4-7. Making
    a simple door![Blocking in with simple elements. I began with the door and then
    added a ground plane, walls, and cubes to represent major elements in the scene.](httpatomoreillycomsourcenostarchimages1538332.png.jpg)Figure 4-8. Blocking
    in with simple elements. I began with the door and then added a ground plane,
    walls, and cubes to represent major elements in the scene.![By snapping the tree
    roots to their surroundings, we can quickly block in tree roots crawling over
    the surface of the ruins.](httpatomoreillycomsourcenostarchimages1538334.png.jpg)Figure 4-9. By
    snapping the tree roots to their surroundings, we can quickly block in tree roots
    crawling over the surface of the ruins.![Snapping icons](httpatomoreillycomsourcenostarchimages1538336.png.jpg)Figure 4-10. Snapping
    icons'
  prefs: []
  type: TYPE_NORMAL
- en: Snapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blender has tools for snapping objects, vertices, faces, or edges to all sorts
    of things. To turn on Snapping, click the Snapping icon (the horseshoe magnet)
    in the header of the 3D Viewport (see [Figure 4-10](ch04.html#snapping_icons "Figure 4-10. Snapping
    icons")). Then, from the drop-down menu beside the Snapping icon, select how Blender
    will snap your selection when it’s moved, scaled, or rotated from among the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '****Increment****. Your selection will snap to the nearest increment so that
    you can construct objects with precisely aligned points. This is useful for modeling
    things like buildings or mechanical objects where you want perfectly aligned walls
    and floors with no lumps or bumps. (You can also snap your selection to Blender’s
    grid by pressing SHIFT-S▸**Selection to Grid**.)'
  prefs: []
  type: TYPE_NORMAL
- en: '****Vertex/Edge/Face/Volume****. Your selection will be snapped to the vertices,
    edges, faces, or interior of any objects. You can change what Blender chooses
    to snap to from the drop-down menu that appears. Click the icon to the right of
    the drop-down menu to rotate the selection so that it aligns with the normal vertices
    that it snaps to.'
  prefs: []
  type: TYPE_NORMAL
- en: One very important snapping option is found in Face Snapping mode. Enabling
    Face Snapping causes the Project onto Surface icon to appear. Project onto Surface
    will cause geometry you create to snap onto the surface of existing objects as
    you move, scale, or rotate them around. This option allows you to create new topology
    over the surface of an existing object. In [Chapter 7](ch07.html "Chapter 7. Retopology"),
    we will be creating new topology over the surface of existing objects to better
    capture their shapes after we have sculpted the originals.
  prefs: []
  type: TYPE_NORMAL
- en: Base Meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the Bat Creature, I needed a simple base mesh that could be sculpted
    on. A base mesh is a simple model that captures the basic shapes of the model
    you want to sculpt. Once you’ve created a base mesh, you can add a Multiresolution
    modifier and begin subdividing and sculpting details in Sculpt mode (see [Chapter 6](ch06.html
    "Chapter 6. Sculpting")).
  prefs: []
  type: TYPE_NORMAL
- en: Your base mesh should capture the overall proportions of the mesh and be designed
    to subdivide easily in order to provide a nice even mesh to sculpt on. We can
    retopologize the sculpted base mesh later to create the final model, but working
    with very simple geometry now will leave more freedom for experimentation while
    sculpting.
  prefs: []
  type: TYPE_NORMAL
- en: A base mesh can have any level of complexity, but try to create topology that
    will support the forms that you know you want to create, without introducing too
    many details that you might not be sure about. Depending on how sure you are of
    what you want your model to look like, you can include topology for features like
    eyes, mouths, and muscle groups, or you can leave it as simple as a basic sphere
    or cube if you’re just modeling a face.
  prefs: []
  type: TYPE_NORMAL
- en: For the Bat Creature, I aimed for a base mesh that gave topology for the overall
    body plan but left out fine details, such as the head. I developed the base mesh
    by setting my concept art as a background image and using it as a guide.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Bat Creature Base Mesh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I started with the torso of the creature to provide a guide for the scale of
    the rest of the parts, as well as something to attach them to. To begin, I took
    the default .*blend* file (the scene you are presented with when Blender starts
    up) and deleted any objects already present. Then I loaded in the concept drawing
    for the Bat Creature (as shown in [Figure 4-11](ch04.html#concept_art_loaded_in_as_a_background_im
    "Figure 4-11. Concept art loaded in as a background image")). (For help with this,
    see [Using Concepts and Reference Images in Blender](ch03.html#using_concepts_and_reference_images_in_b
    "Using Concepts and Reference Images in Blender").) While I didn’t plan to use
    this concept to model from exactly, it made a useful guide for judging the proportions
    as I worked. At this point, I left the wings out of the base mesh for the body,
    as I planned to model them separately later.
  prefs: []
  type: TYPE_NORMAL
- en: '![Concept art loaded in as a background image](httpatomoreillycomsourcenostarchimages1538338.png.jpg)Figure 4-11. Concept
    art loaded in as a background image'
  prefs: []
  type: TYPE_NORMAL
- en: Next, I added a cube, changed to Edit mode (TAB), and scaled it to the rough
    proportions of the torso. I did this first in overall terms by just scaling it
    to the right width (**S**). Then I scaled up the *z*-axis (**S**▸**Z**) before
    scaling in on the *y*-axis (**S**▸**Y**) to make it taller and shallower. By adding
    horizontal loop cuts (extra rings of edges around the mesh, as discussed below)
    around the middle of the cube (CTRL-R) and moving them forward a little, I added
    a bit of curvature to the torso and began refining its shape.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it was easier to start using a Mirror modifier to keep my mesh
    symmetrical because the model was becoming more complex. To do so, I added a loop
    cut vertically around the middle of the torso and deleted its right-hand side.
    Adding a Mirror modifier then mirrored the geometry of the left-hand side of the
    body to create a symmetrical whole that only required editing on one side (see
    [Figure 4-12](ch04.html#adding_a_mirror_modifier_to_the_body_req "Figure 4-12. Adding
    a Mirror modifier to the body requires adding an edge loop around the middle and
    deleting half of the torso first. By default, the mirror modifier mirrors objects
    around the x-axis, but you can change this to mirror around any combination of
    the x-, y-, and z-axes, depending on your model.")). At the same time, turning
    on clipping keeps vertices on the midline from straying away from the object’s
    *x* origin, which prevents holes from appearing in the mesh if you accidentally
    move a vertex slightly away from the line of symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: Loop Cuts and Face and Edge Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *face loop* is a string of quads connected end-to-end in a continuous path,
    allowing an *edge loop* (a chain of connected vertices) to be cut through the
    middle. For example, in [Figure 4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll
    "Figure 4-13. You can add multiple loop cuts by scrolling your mouse wheel or
    entering a number with the keyboard after pressing CTRL-R. Loop cuts terminate
    when they reach a triangle or the edge of a mesh."), adding two edge loops around
    the face loop encircling the cylinder creates a new face loop running around the
    middle. Technically, an edge/face loop should be one continuous cyclical path,
    but the term is often used to mean any reasonably long chain of quads/edges.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Mirror modifier to the body requires adding an edge loop around
    the middle and deleting half of the torso first. By default, the mirror modifier
    mirrors objects around the x-axis, but you can change this to mirror around any
    combination of the x-, y-, and z-axes, depending on your model.](httpatomoreillycomsourcenostarchimages1538340.png.jpg)Figure 4-12. Adding
    a Mirror modifier to the body requires adding an edge loop around the middle and
    deleting half of the torso first. By default, the mirror modifier mirrors objects
    around the *x*-axis, but you can change this to mirror around any combination
    of the *x*-, *y*-, and *z*-axes, depending on your model.'
  prefs: []
  type: TYPE_NORMAL
- en: The Loop Cut tool (CTRL-R) is extremely important because it follows a path
    of quads through your mesh, cutting through each one to create new edges that
    flow through the face loop. If you activate the Loop Cut tool and mouse over an
    edge, Blender will highlight the path in purple. If the path reaches a triangle
    or an open edge of the mesh, it stops.
  prefs: []
  type: TYPE_NORMAL
- en: Loop cuts are useful because they allow you to add definition to your model
    while maintaining clean topology. You can create multiple loop cuts by scrolling
    your mouse wheel after pressing CTRL-R and before choosing an edge to start cutting
    from (see [Figure 4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll "Figure 4-13. You
    can add multiple loop cuts by scrolling your mouse wheel or entering a number
    with the keyboard after pressing CTRL-R. Loop cuts terminate when they reach a
    triangle or the edge of a mesh.")).
  prefs: []
  type: TYPE_NORMAL
- en: Blender has other operators for interacting with edge loops and face loops,
    including ones for deleting the loop (joining the faces on either side together
    to keep the mesh whole) and sliding the loop up and down the edges parallel to
    it. You can also select an entire edge loop at once to manipulate it. (If it isn’t
    cyclic, Blender will simply find the longest path that it can.) These operators
    are detailed in [Table 4-4](ch04.html#edge_loop_operators "Table 4-4. Edge Loop
    Operators").
  prefs: []
  type: TYPE_NORMAL
- en: As the next step in my project, I extruded down from the hips to make the leg
    and added loop cuts to flesh out its shape, as shown in [Figure 4-14](ch04.html#adding_loop_cuts_to_the_leg_gave_me_more
    "Figure 4-14. Adding loop cuts to the leg gave me more vertices with which to
    define its shape."). For the arms, I added a bend at the shoulder by extruding
    out from the body and then down from the bottom face of the newly extruded region,
    as shown in [Figure 4-15](ch04.html#extruding_the_armsdot_creating_a_corner "Figure 4-15. Extruding
    the arms. Creating a corner at the shoulders gave the arm a more natural shape.").
    This gave the shoulder a nicer, more natural corner than it might have if I’d
    extruded down directly from the body.
  prefs: []
  type: TYPE_NORMAL
- en: '![You can add multiple loop cuts by scrolling your mouse wheel or entering
    a number with the keyboard after pressing CTRL-R. Loop cuts terminate when they
    reach a triangle or the edge of a mesh.](httpatomoreillycomsourcenostarchimages1538342.png.jpg)Figure 4-13. You
    can add multiple loop cuts by scrolling your mouse wheel or entering a number
    with the keyboard after pressing CTRL-R. Loop cuts terminate when they reach a
    triangle or the edge of a mesh.Table 4-4. Edge Loop Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Hotkey | Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Delete Edge Loop | X▸Edge Loop | Deletes the selected portion of an edge
    loop, leaving the surface otherwise intact. |'
  prefs: []
  type: TYPE_TB
- en: '| Edge Slide | CTRL-E▸Edge Slide | Allows you to slide all or part of an edge
    loop along the edges running perpendicular to it. |'
  prefs: []
  type: TYPE_TB
- en: '| Loop Cut | CTRL-R | Creates a new edge loop starting from the edge under
    the cursor. |'
  prefs: []
  type: TYPE_TB
- en: '| Select Edge/Face Loop | ALT-right-click | Selects an edge/face loop (depending
    on selection mode). |'
  prefs: []
  type: TYPE_TB
- en: '![Adding loop cuts to the leg gave me more vertices with which to define its
    shape.](httpatomoreillycomsourcenostarchimages1538344.png.jpg)Figure 4-14. Adding
    loop cuts to the leg gave me more vertices with which to define its shape.'
  prefs: []
  type: TYPE_NORMAL
- en: Poses for Modeling Characters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The pose you model a character or creature in is very important to its ultimate
    look, and your strategy will depend on what you want to use your model for. So
    far, I’ve modeled the Bat Creature in a relaxed pose that is close to the classic
    T pose: arms straight out and legs shoulder width apart. The T pose is useful
    when *rigging* a character (the process of creating an armature that tells the
    mesh how to move as if it had bones and joints). However, the T pose looks rather
    tense and unnatural when modeling, an effect that can stick around when posing
    a character into other positions. Instead, I wanted the character to look as relaxed
    and neutral as possible while in the early stages of modeling so that I could
    progress away from this neutral position later. By relaxing the arms down toward
    the character’s sides, I eliminated this tension to make the character’s default
    pose much more natural.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extruding the arms. Creating a corner at the shoulders gave the arm a more
    natural shape.](httpatomoreillycomsourcenostarchimages1538346.png.jpg)Figure 4-15. Extruding
    the arms. Creating a corner at the shoulders gave the arm a more natural shape.![Adding
    an extra edge loop around the torso and legs and merging a couple of edges to
    clean up the mesh](httpatomoreillycomsourcenostarchimages1538348.png.jpg)Figure 4-16. Adding
    an extra edge loop around the torso and legs and merging a couple of edges to
    clean up the mesh'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Though we won’t cover rigging in detail, note that there is a reason for the
    classic T pose. When it comes to rigging, having a character’s arms out straight
    can make it simpler to set up bone chains and constraints. However, continuing
    improvements in Blender’s rigging tools have made it somewhat less necessary to
    do this. You can always re-pose your model in the T pose after having modeled
    and sculpted it in a more relaxed pose.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, I selected all the edges running down the front and back of the body and
    legs and subdivided them (**W**) to allow me to refine the shape of the torso
    and legs. Doing so created some awkward topology at the pelvis, which I fixed
    by selecting the two new edges and merging them, as shown in [Figure 4-16](ch04.html#adding_an_extra_edge_loop_around_the_tor
    "Figure 4-16. Adding an extra edge loop around the torso and legs and merging
    a couple of edges to clean up the mesh"). I did the same for the edges on the
    backside, too.
  prefs: []
  type: TYPE_NORMAL
- en: I added an edge loop around the middle of the character as seen from the side
    ([Figure 4-17](ch04.html#refining_the_body_in_side_view_left_pare "Figure 4-17. Refining
    the body in side view (left) before adding an edge loop running around the middle
    (right)")) and running across the chest and down the arms. I then further refined
    the body shape, tucking in the waist at the back and rounding out the shape of
    the legs and arms. This step brought the number of vertices around the arms and
    legs to a total of eight, which would be important when adding hands and feet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Refining the body in side view (left) before adding an edge loop running
    around the middle (right)](httpatomoreillycomsourcenostarchimages1538350.png.jpg)Figure 4-17. Refining
    the body in side view (left) before adding an edge loop running around the middle
    (right)'
  prefs: []
  type: TYPE_IMG
- en: As I went along, I tried to make sure that my mesh was completely composed of
    quads, and I aimed to keep the size and shape of the quads approximately even
    and square. This is important when creating a base mesh for sculpting because
    triangles, *n*-gons, and long, thin faces generally create artifacts when sculpted
    on.
  prefs: []
  type: TYPE_NORMAL
- en: To create a loop of faces running around the shoulder ([Figure 4-18](ch04.html#adding_a_loop_of_faces_around_the_should
    "Figure 4-18. Adding a loop of faces around the shoulder. This loop made it easy
    to reposition the arm in different poses without deforming the chest.")), I selected
    the faces of the arm and split them from the body (**Y**). I then shifted the
    arm out and bridged the edges around the gap using the Bridge operator (W▸Bridge
    Two Edge Loops). This connected two strings or loops of vertices together, filling
    them in with faces from one to the other. The two must have the same number of
    vertices to be joined.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a loop of faces around the shoulder. This loop made it easy to reposition
    the arm in different poses without deforming the chest.](httpatomoreillycomsourcenostarchimages1538352.png.jpg)Figure 4-18. Adding
    a loop of faces around the shoulder. This loop made it easy to reposition the
    arm in different poses without deforming the chest.'
  prefs: []
  type: TYPE_NORMAL
- en: Then I added some more loop cuts over various parts of the body, running across
    the forms, to even out the mesh and give an even distribution of roughly square
    quads ([Figure 4-19](ch04.html#adding_some_extra_edge_loops_around_the "Figure 4-19. Adding
    some extra edge loops around the legs, arms, and torso")). You can adjust the
    position of an existing edge loop using the Edge Slide operator (CTRL-E▸Edge Slide),
    which lets you slide edge loops up and down.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding some extra edge loops around the legs, arms, and torso](httpatomoreillycomsourcenostarchimages1538354.png.jpg)Figure 4-19. Adding
    some extra edge loops around the legs, arms, and torso'
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the Hands and Feet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To model the hands (as shown in [Figure 4-20](ch04.html#creating_the_hand "Figure 4-20. Creating
    the hand")), I began with a cube and flattened it by scaling it down along its
    *x-*axis to form the basis for the palm 1. Then I added some loop cuts around
    the middle and vertically 2.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I could have extruded the fingers straight out from each face
    at the base of the palm. Doing so, however, would have created some nasty topology
    where the fingers meet each other that would neither sculpt nor deform well when
    posed. Instead, I did some extruding to add face loops that run between the fingers
    3. For the middle one, I simply selected half of the hand and extruded out. For
    the outer two gaps, I extruded in the middle 4 faces on the bottom half of the
    hand on both sides, as well as those connecting the two sides along the bottom,
    for a total of 10 faces.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the hand](httpatomoreillycomsourcenostarchimages1538356.png.jpg)Figure 4-20. Creating
    the hand'
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the number of faces along the top side of the hand (where it will
    eventually join with the arm), I merged the two pairs of edges on the top corner
    of the hand opposite the thumb 4. (Remember I was aiming to have eight vertices
    to join with the arm, so this area needed to be kept simple.)
  prefs: []
  type: TYPE_NORMAL
- en: For the thumb, I extruded out twice from the faces on the front of the hand
    5 and then merged the vertices on the corner to create a bend 6. I then added
    a loop cut running around the outside of the hand 7, extruded the fingers and
    the thumb 8, and smoothed them slightly (W▸Smooth). Next, I gave the fingers and
    thumb a bit of a curl inward by selecting and first rotating the whole finger,
    then the last two-thirds, and then just the tip 9. I also adjusted the shape of
    the whole hand by selecting parts of the hand from the top view and rotating them
    with proportional editing turned on to give the palm and thumb a slight curve.
  prefs: []
  type: TYPE_NORMAL
- en: I smoothed the hand slightly (W▸Smooth) to make the fingers and palm a bit less
    blocky. By selecting the surface of the palm, and with proportional editing turned
    on, I inflated it slightly (ALT-S) to give the hand a bit more volume 10. This
    completes the modeling stages shown in [Figure 4-20](ch04.html#creating_the_hand
    "Figure 4-20. Creating the hand").
  prefs: []
  type: TYPE_NORMAL
- en: To connect the hand to the arm ([Figure 4-21](ch04.html#joining_the_hand_to_the_arm
    "Figure 4-21. Joining the hand to the arm")), I deleted the four faces in the
    middle of the top side of the hand, moved the hand into place, and then joined
    the hand with the main body in Object mode (CTRL-J). Then in Edit mode, I deleted
    the corresponding faces at the end of the arm and bridged the loops to connect
    the hand to the arm.
  prefs: []
  type: TYPE_NORMAL
- en: '![Joining the hand to the arm](httpatomoreillycomsourcenostarchimages1538358.png.jpg)Figure 4-21. Joining
    the hand to the arm'
  prefs: []
  type: TYPE_NORMAL
- en: Because I kept the number of vertices around the end of the arm and the wrist
    the same, the hand joined to the arm with a minimum of fuss, as shown in [Figure 4-21](ch04.html#joining_the_hand_to_the_arm
    "Figure 4-21. Joining the hand to the arm"). Because the join now had two edge
    loops quite close together, I deleted one (selecting it with ALT-right-click,
    then deleting with X▸Edge Loop) to create a more even distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the feet was much the same, as shown in [Figure 4-22](ch04.html#constructing_the_foot
    "Figure 4-22. Constructing the foot"). Beginning with a cube, I first extruded
    the general shape of the foot 1. I added face loops to produce gaps between the
    toes (2 to 4), extruded the toes 5, smoothed the foot a little 6, and then merged
    the corner edges on the back of the foot to improve the way that the edge loops
    flow around the back and reduced the overall polycount, as I did with the hand
    7. I used Inflate and proportional editing to make the big toe bigger and refine
    the slope of the foot, which slopes down forward from the leg and down from the
    big toe side to the little toe side 8. Again, because there are eight vertices
    around the circumference of the leg, I could delete four faces from the top of
    the foot and bridge the gap with the leg (9 and 10). Then I cleaned up the edge
    loop distribution along the lower leg by sliding, deleting, or adding edge loops
    to get more evenly spaced edge loops (11 and 12).
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the Head
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The head began as just a cube extruded out, once at the front and then down
    at the base to create the chin ([Figure 4-23](ch04.html#making_the_head_and_attaching_it_to_the
    "Figure 4-23. Making the head and attaching it to the body")). After adding a
    few loop cuts, I extruded out from the bottom to create the neck and then smoothed
    and refined the shape to give it a better silhouette and to make it slightly narrower
    at the front. I extruded out from the faces on the side of the head to create
    some geometry for the ears. Then, as with the body, I deleted half and added a
    Mirror modifier. Next, I connected the head to the body, deleting the faces in
    between and bridging the gap with the Bridge operator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Constructing the foot](httpatomoreillycomsourcenostarchimages1538360.png.jpg)Figure 4-22. Constructing
    the foot![Making the head and attaching it to the body](httpatomoreillycomsourcenostarchimages1538362.png.jpg)Figure 4-23. Making
    the head and attaching it to the body'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Be sure that the* x *location of the origin of the head aligns with the body
    before joining it with CTRL-J. If you don’t, the Mirror modifier on the body will
    have a different center than the head, causing it to split the head apart and
    forcing you to join the faces together again.*'
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking the Model with Proportional Editing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don’t like the proportions of certain areas of your model, you don’t
    have to tweak every vertex individually. Instead, you can use Blender’s proportional
    editing to grab, scale, or rotate one vertex and drag nearby vertices along with
    it so that changes are made proportionally.
  prefs: []
  type: TYPE_NORMAL
- en: To turn on proportional editing, use the circular icon in the 3D Viewport header
    (as shown in [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m "Figure 4-1. Blender’s
    3D Viewport in Edit Mode")) or the shortcut key O. Once proportional editing has
    been turned on, you can adjust the distance over which the nearby unselected vertices
    are dragged (along with selected ones), as well as the falloff curve for the effect.
    To change the radius, scroll your mouse wheel while manipulating your selection.
    Select the falloff curve from the drop-down menu next to the Proportional Editing
    icon in the header. You can also set proportional editing to affect only connected
    vertices (ALT-O), which will drag only nearby vertices in the same mesh as those
    selected, allowing you to do things like move an arm without affecting your model’s
    waist.
  prefs: []
  type: TYPE_NORMAL
- en: Different falloff settings can significantly impact the effect of transforming
    part of your mesh. For example, the Sharp Falloff option will create sharp peaks
    if you grab and move a single vertex, whereas the Sphere Falloff option will create
    bulbous, spherical shapes. The Random Falloff option is useful for roughening
    up the surface of a mesh; by grabbing a single vertex and moving it a little,
    with a wide radius for the falloff, you can add a slight random variation to the
    surface of a mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Proportional editing is useful for many things besides tweaking proportions.
    For example, you can use it to create interesting curved or twisted deformations
    by grabbing or rotating parts of the mesh ([Figure 4-24](ch04.html#proportional_editing_has_many_usesdot_he
    "Figure 4-24. Proportional editing has many uses. Here it’s used to deform a subdivided
    column using (left to right) Translate, Rotate, and Scale operations and the standard
    “smooth” falloff.")) or for posing characters without having to rig them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Proportional editing has many uses. Here it’s used to deform a subdivided
    column using (left to right) Translate, Rotate, and Scale operations and the standard
    “smooth” falloff.](httpatomoreillycomsourcenostarchimages1538364.png.jpg)Figure 4-24. Proportional
    editing has many uses. Here it’s used to deform a subdivided column using (left
    to right) Translate, Rotate, and Scale operations and the standard “smooth” falloff.'
  prefs: []
  type: TYPE_NORMAL
- en: I used proportional editing to make a few tweaks to finalize the mesh, such
    as pulling back the arms and shoulders slightly and narrowing the back where it’s
    level with the waist.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Wings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make it easier to sculpt on the body and wings, I created them as separate
    meshes that I could join later when retopologizing. To create the wings, I first
    blocked in the skeleton using the reference as a rough guide, beginning with a
    small plane and working along the length of the bones (see [Figure 4-25](ch04.html#blocking_in_the_wingsdot_starting_with_t
    "Figure 4-25. Blocking in the wings. Starting with the layout of the wing in 2D
    keeps things simple and makes it easier to produce the structure we want.")).
    To make it easier to get the topology I wanted, I kept the mesh 2D at this point.
  prefs: []
  type: TYPE_NORMAL
- en: With the basic skeleton blocked in, I began filling in the wings between the
    bones. To make sure the gap could be filled in neatly, I spaced out the vertices
    along the bones so that they roughly matched up with one another, adding more
    as needed or shifting existing ones. Next, I extruded and scaled the edges to
    create a clean division between the wing and the bones, and I began filling in
    the gaps. (The extrusion/scaling won’t produce perfect results, but you can tweak
    the position of the vertices manually to get a nicer layout.)
  prefs: []
  type: TYPE_NORMAL
- en: With the gaps filled in, I selected the whole model and extruded it back to
    give it some thickness, as shown in [Figure 4-26](ch04.html#blocking_in_the_wingsdot_the_wings_are_e
    "Figure 4-26. Blocking in the wings. The wings are extruded and the membranes
    between the bones made thinner. Then the whole wing is given some curvature using
    the Warp tool.") 1. Next, I selected just the wing membrane areas and used the
    Shrink/Fatten tool (ALT-S) to make these areas slightly thinner again 2. At this
    point, the wing had some thickness but was still very flat looking. To rectify
    this, I first selected its more central parts and shifted them back slightly to
    give the wing a bit of a concave shape 3.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sometimes Blender will calculate the normals of a mesh incorrectly, which
    can cause operators like Shrink/Fatten and modifiers like Subdivision Surface
    or Bevel to behave strangely. You can often see this if you set your mesh to draw
    smooth, as black boundaries will appear between areas with conflicting normals.
    To fix this, simply select your whole mesh in Edit mode and use the Recalculate
    Normals operator (CTRL-N) to force Blender to recalculate the object’s normals.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next I used the Warp operator (SHIFT-W) to give the wing a curve 4. This operator
    uses the 3D cursor position as the center of the operation and arranges the selected
    vertices in a circle around that center. You can define how far the vertices are
    warped with your cursor; setting the 3D cursor further from the mesh before using
    the operator will give the curve a wider radius.
  prefs: []
  type: TYPE_NORMAL
- en: As a result of these treatments, I was able to add a nice curve to the wing
    by switching to the top view and using Warp. Also, by rotating the mesh and using
    Warp again, I could add a similar curve to the wing’s profile 5.
  prefs: []
  type: TYPE_NORMAL
- en: The Warp operator will often move the mesh about a bit, so I dropped back into
    Object mode (TAB) and moved the wing back to where I wanted it before applying
    the transforms (CTRL-A▸Apply Location and then repeat for Rotation and Scale,
    too).
  prefs: []
  type: TYPE_NORMAL
- en: '![Blocking in the wings. Starting with the layout of the wing in 2D keeps things
    simple and makes it easier to produce the structure we want.](httpatomoreillycomsourcenostarchimages1538366.png.jpg)Figure 4-25. Blocking
    in the wings. Starting with the layout of the wing in 2D keeps things simple and
    makes it easier to produce the structure we want.![Blocking in the wings. The
    wings are extruded and the membranes between the bones made thinner. Then the
    whole wing is given some curvature using the Warp tool.](httpatomoreillycomsourcenostarchimages1538368.png.jpg)Figure 4-26. Blocking
    in the wings. The wings are extruded and the membranes between the bones made
    thinner. Then the whole wing is given some curvature using the Warp tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Applying Transforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations like Warp can move your object out of place and require you to rotate,
    scale, or translate your mesh to put it back in place. It’s often easiest to do
    this by moving the entire mesh at once in Object mode, though doing so will also
    affect the object’s local coordinates, which can lead to strange results when
    using operators and modifiers. For example, I next wanted to use a Mirror modifier
    to copy the wings over onto the other side of the base mesh for the Bat Creature,
    but after using the Warp operator and moving and rotating the wings in Edit mode,
    adding a Mirror modifier would have given incorrect results (see [Figure 4-27](ch04.html#with_the_objectapostrophes_coordinate_ax
    "Figure 4-27. With the object’s coordinate axes turned on, it becomes obvious
    why the Mirror modifier isn’t producing the desired effects. Applying the transforms
    on the mesh before applying modifiers produces more predictable results.")). The
    reason for this is that by rotating the object in Object mode, I rotated its local
    coordinates, too. Because the Mirror modifier uses these coordinates to mirror
    the object, the results were not what you might expect.
  prefs: []
  type: TYPE_NORMAL
- en: To see an object’s local coordinates, turn on the Axes setting in the Object
    tab of the Properties editor (see [Figure 4-27](ch04.html#with_the_objectapostrophes_coordinate_ax
    "Figure 4-27. With the object’s coordinate axes turned on, it becomes obvious
    why the Mirror modifier isn’t producing the desired effects. Applying the transforms
    on the mesh before applying modifiers produces more predictable results.")). To
    reset the axes to match the global coordinate system, use each of the Apply Location/Rotation/Scale
    operators in Object mode (CTRL-A) in turn, which will place the object’s origin
    at the global origin and match the rotation and scaling of its local coordinates
    to the global coordinates without affecting its shape. As a result, you’ll be
    able to model, add modifiers, and perform other operations with more predictable
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '![With the object’s coordinate axes turned on, it becomes obvious why the Mirror
    modifier isn’t producing the desired effects. Applying the transforms on the mesh
    before applying modifiers produces more predictable results.](httpatomoreillycomsourcenostarchimages1538370.png.jpg)Figure 4-27. With
    the object’s coordinate axes turned on, it becomes obvious why the Mirror modifier
    isn’t producing the desired effects. Applying the transforms on the mesh before
    applying modifiers produces more predictable results.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Of course, instead of the above, you can manipulate an object’s local coordinates
    to your advantage. For example, you could use a Mirror modifier to create a symmetrical
    object and then move and rotate it to a position in your scene that doesn’t match
    the global coordinates. As long as you don’t apply these transforms in Object
    mode at this point, the results of the modifier should stay the way you want them
    to.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as with the body, I added a Mirror modifier and then used proportional
    editing to better align the wings with the back and tweak the shape.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I had completed blocking in the bat’s body, as shown in [Figure 4-28](ch04.html#finished_body_base_mesh
    "Figure 4-28. The finished body base mesh"). We’ll create its final topology once
    the sculpting is finished, as discussed in [Chapter 5](ch05.html "Chapter 5. Modeling
    the Details") and [Chapter 7](ch07.html "Chapter 7. Retopology").
  prefs: []
  type: TYPE_NORMAL
- en: Shading Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that so far in blocking out the projects, I have kept the meshes we have
    been creating shaded flat—that is, the faces appear faceted and do not blend into
    one another. The reason for this is that it makes it easier to read at a glance
    the direction that the faces of a mesh are pointing and to see how the forms of
    the mesh are progressing. Later on, I will use smooth shading to render some of
    the models in order to make them look smooth ([Figure 4-29](ch04.html#flat_and_smooth_shading_modesdot_smooth
    "Figure 4-29. Flat and Smooth shading modes. Smooth shading blends between the
    normals of a mesh’s faces to make it look smooth. You can switch between the two
    modes using the Shade Smooth and Shade Flat operators in either Object or Edit
    mode.")), but for now this isn’t necessary. To switch between the two, simply
    select your mesh, and in the Tool Shelf, use the Flat and Smooth operators to
    switch the shading of your selection between flat and smooth shading. You can
    do this either in Object mode, which affects the whole of each selected object,
    or Edit mode, which affects only the selected faces.
  prefs: []
  type: TYPE_NORMAL
- en: '![The finished body base mesh](httpatomoreillycomsourcenostarchimages1538372.png.jpg)Figure 4-28. The
    finished body base mesh![Flat and Smooth shading modes. Smooth shading blends
    between the normals of a mesh’s faces to make it look smooth. You can switch between
    the two modes using the Shade Smooth and Shade Flat operators in either Object
    or Edit mode.](httpatomoreillycomsourcenostarchimages1538374.png.jpg)Figure 4-29. Flat
    and Smooth shading modes. Smooth shading blends between the normals of a mesh’s
    faces to make it look smooth. You can switch between the two modes using the Shade
    Smooth and Shade Flat operators in either Object or Edit mode.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Spider Bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To block in the Spider Bot, I needed only the basic parts of the body and legs.
    To generate more detailed ideas for the main parts of the body, I used sculpting
    and then retopologized the results and added more mechanical parts with traditional
    modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning with two cubes, one for the abdomen (back segment) and the other for
    the cephalothorax (head and body segment), I scaled them roughly to the correct
    proportions, as shown in [Figure 4-30](ch04.html#creating_base_meshes_for_the_spider_bot
    "Figure 4-30. Creating base meshes for the Spider Bot") 1. By adding a Subsurf
    modifier (CTRL-1), I was able to get a more rounded shape without having to add
    and manually adjust lots of edge loops. Just adding a couple more edge loops brought
    me closer to the shapes I needed 2.
  prefs: []
  type: TYPE_NORMAL
- en: After joining the two cubes into the same object in Object mode (CTRL-J), I
    applied the Subsurf modifier at subdivision level 1 to give more geometry to play
    with 3, but I copied the modifier first to further subdivide the mesh. When a
    modifier is applied, changes it makes to the mesh are applied to the mesh and
    thus converted into geometry you can edit. This allowed me to extrude some of
    the new faces from the front of the body to create a bump for the head 4. With
    the extruded faces still selected, I pressed CTRL-+ to grow the selection, fattened
    it a bit with ALT-S, and then smoothed it a little to complete my base mesh for
    sculpting the body.
  prefs: []
  type: TYPE_NORMAL
- en: For the legs, I began by laying out my plan for the main part of the leg, consisting
    of long, flattened, bone-shaped pieces for the long segments of the leg and shield-shaped
    pieces for the knee and foot segments. I created two slightly different variations
    of the long segments, one for the first and last pairs of legs and one for the
    middle two pairs 5. To create these pieces, I began with a plane, added a Mirror
    modifier to make the leg symmetrical, and then extruded one edge and added loop
    cuts to create the top-down plan of the leg. Next, I selected the whole thing
    (**A**) and extruded it out along its normals by first extruding (**E**) without
    moving the new faces. I then moved the new faces along their normals (ALT-S) to
    give the leg segment a uniform thickness. For now, I created only one copy of
    each piece; after sculpting and retopology, I’ll duplicate the finished parts
    and position them to make the legs. This completes some basic parts for the Spider
    Bot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating base meshes for the Spider Bot](httpatomoreillycomsourcenostarchimages1538376.png.jpg)Figure 4-30. Creating
    base meshes for the Spider Bot'
  prefs: []
  type: TYPE_NORMAL
- en: In Review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter laid the foundations for the models. For the Spider Bot and the
    Bat Creature, this entailed creating base meshes with simple topology that we’ll
    later use to sculpt on and flesh out the designs of our characters. In the case
    of the Jungle Temple, I blocked in the most important elements of the scene with
    simple placeholder meshes. In the next chapter, we will replace and expand upon
    these placeholders, as well as model some extra details for the other two projects
    and discuss some more in-depth modeling concepts along the way. Then in [Chapter 6](ch06.html
    "Chapter 6. Sculpting"), we will move on to sculpting the base meshes created
    in this chapter using Blender’s sculpt tools.
  prefs: []
  type: TYPE_NORMAL
