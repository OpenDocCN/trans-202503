- en: Chapter 4. Blocking In
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 章：封闭建模
- en: With preparation finished and concept art and reference at the ready, we can
    move on to modeling. *Modeling* is the process of creating a 3D object that is
    made up of individual points connected to form faces, which in turn make up more
    complex shapes. There are many ways to create models in Blender, from modifying
    primitives, like a simple cube or sphere, to building the surface of a mesh face
    by face or drawing smooth curves that Blender can convert into objects composed
    of vertices and faces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 准备工作完成，概念艺术和参考资料已准备好后，我们可以开始建模了。*建模*是创建由单独的点组成的 3D 对象的过程，这些点通过连接形成面，面进一步构成更复杂的形状。Blender
    中有许多创建模型的方法，从修改原始形状，如简单的立方体或球体，到逐面构建网格表面，或者绘制 Blender 可以转换为由顶点和面组成的对象的平滑曲线。
- en: Modeling can be a long process, and to save time, it helps to know where you
    are going with a particular modeling task. Still, you can’t model an object all
    at once; you have to start somewhere, and that’s where blocking in comes in. *Blocking
    in* is the process of adding simple placeholders for the objects you want to create
    so that you can better plan how they fit together, consider their individual constructions,
    and spot problems before they become major issues. Once a scene has been blocked
    in, you can move on to refining, replacing, or adding to each part to create a
    final model. For example, in the Jungle Temple scene, simple elements like cubes
    are used as placeholders for key elements; for other projects, we create simple
    base meshes for sculpting that act as a foundation for developing the final form
    of our sculpted models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 建模可能是一个漫长的过程，为了节省时间，了解特定建模任务的目标是很有帮助的。不过，您不可能一次性完成一个对象的建模；您必须从某个地方开始，这就是封闭建模的作用。*封闭建模*是为您想要创建的对象添加简单占位符的过程，这样您可以更好地规划它们如何组合在一起，考虑它们的单独构造，并在问题成为重大问题之前发现它们。一旦一个场景的基本结构完成，您就可以继续精细化、替换或添加每个部分，以创建最终模型。例如，在丛林神庙场景中，像立方体这样的简单元素被用作关键元素的占位符；对于其他项目，我们创建简单的基础网格进行雕刻，这些网格为雕刻模型的最终形态提供了基础。
- en: Basic Modeling Terms
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本建模术语
- en: 'Before we dive in, here are some definitions of Blender’s basic modeling concepts
    that I’ll use throughout this chapter. [Table 4-1](ch04.html#important_terms_for_modeling_in_blendera
    "Table 4-1. Important Terms for Modeling in Blender’s Edit Mode") lists them in
    hierarchical order: Vertices make up edges, which make up faces, and so on.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解之前，以下是本章中将使用的 Blender 基本建模概念的定义。[表 4-1](ch04.html#important_terms_for_modeling_in_blendera
    "表 4-1. Blender 编辑模式中的重要术语")按层次顺序列出了它们：顶点构成边，边构成面，以此类推。
- en: Edit Mode
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑模式
- en: Edit mode (shown in [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m
    "Figure 4-1. Blender’s 3D Viewport in Edit Mode")) is where the modeling magic
    happens. With a mesh object selected, you can enter Edit mode by pressing TAB
    or by clicking the mode drop-down menu in the 3D Viewport header and selecting
    Edit mode. Once in Edit mode, your selected object is editable (if it is in fact
    editable—empty objects and lamps, for example, are not). When an object is editable,
    you can select and manipulate parts as well as create new parts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑模式（如[图 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m "图 4-1. Blender
    编辑模式下的 3D 视口")所示）是建模魔法发生的地方。在选中一个网格对象后，您可以通过按 TAB 键或点击 3D 视口顶部的模式下拉菜单并选择编辑模式进入编辑模式。一旦进入编辑模式，您所选的对象就可以编辑（如果它本身可编辑——例如，空对象和灯光是不可编辑的）。当对象可编辑时，您可以选择和操作其中的部分，并创建新部分。
- en: Table 4-1. Important Terms for Modeling in Blender’s Edit Mode
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1. Blender 编辑模式中的重要术语
- en: '| Term | Description |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 术语 | 描述 |'
- en: '| --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| vertex (plural *vertices*); also known as a *vert* | A single point in 3D
    space with a specific location. Vertices are connected to construct *meshes*.
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 顶点（复数 *vertices*）；也称为 *vert* | 3D 空间中的一个点，具有特定的位置。顶点通过连接构成 *网格*。 |'
- en: '| edge | A line connecting two vertices. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 边 | 连接两个顶点的线。 |'
- en: '| face (or polygon) | Three or more vertices connected by edges and filled
    with a flat surface. A polygon formed of three vertices is called a *tri* (short
    for *triangle*). A polygon formed of four vertices is called a *quad* (short for
    *quadrangle*). Polygons with more than four vertices are called n*-gons*. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 面（或多边形） | 由三个或更多的顶点通过边连接，并填充一个平面表面。由三个顶点构成的多边形称为 *三角形*（*triangle* 的简写）。由四个顶点构成的多边形称为
    *四边形*（*quadrangle* 的简写）。具有四个以上顶点的多边形称为 *n-边形*（*n-gons*）。 |'
- en: '| normal | The direction in which a face or vertex points. Imagine a flagpole
    pointing straight out from the surface of an object. The direction it points is
    the *face normal*. Vertices and edges can also have normals when they are part
    of a surface. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 法线 | 一个面或顶点指向的方向。可以想象一个旗杆从物体表面垂直指向外部，它指向的方向就是*面法线*。当顶点和边是表面的一部分时，也可以具有法线。
    |'
- en: '| mesh | A collection of vertices, faces, and edges that are all part of a
    single object. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 网格 | 由顶点、面和边组成的集合，所有这些都属于同一个物体。 |'
- en: '| topology | A term that refers to the way the faces of a mesh “flow” over
    its surface. (See [Chapter 5](ch05.html "Chapter 5. Modeling the Details") and
    [Chapter 7](ch07.html "Chapter 7. Retopology") for more on topology.) |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 拓扑 | 一个术语，指的是网格面在其表面上的“流动”方式。（有关拓扑的更多内容，请参见[第5章](ch05.html "第5章。细节建模")和[第7章](ch07.html
    "第7章。重新拓扑")）。 |'
- en: '| operator | Any operation you perform on part of a mesh, such as translating,
    scaling, duplicating, and so on. Operators generally take input from the user
    (such as the distance and direction you want to move something) and then do something
    to the selected object as a result. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 对网格的一部分进行的任何操作，如平移、缩放、复制等。操作符通常接收用户输入（如你想要移动的距离和方向），然后根据这些输入对所选对象执行操作。
    |'
- en: '![Blender’s 3D Viewport in Edit Mode](httpatomoreillycomsourcenostarchimages1538318.png.jpg)Figure 4-1. Blender’s
    3D Viewport in Edit ModeTable 4-2. Frequently Used Operators in Edit Mode'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![Blender 的 3D 编辑模式视图](httpatomoreillycomsourcenostarchimages1538318.png.jpg)图4-1.
    Blender 的 3D 编辑模式视图表4-2. 编辑模式下常用操作符'
- en: '| Operators | Hotkey | Description |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 热键 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Delete | X | Deletes the selected vertices, edges, or faces. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 删除 | X | 删除所选的顶点、边或面。 |'
- en: '| Duplicate | SHIFT-D | Duplicates your selection and allows you to move it.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 复制 | SHIFT-D | 复制你的选择并允许你移动它。 |'
- en: '| Extrude | E or CTRL-click | Creates new geometry by “pulling” new verts,
    edges, and faces out from the current selection. The results of extruding depend
    on what you have selected (see [Figure 4-2](ch04.html#extruding_faces_1comma_extruding_edges_2
    "Figure 4-2. Extruding faces 1, extruding edges 2, and extruding a single vertex
    3\. Extruding operations on different selections will have different results.
    Extruding vertices will create edges, while extruding edges or faces will create
    faces. Extruding an entire closed mesh (not shown) will duplicate that mesh.")).
    CTRL-clicking in Edit mode with nothing selected will create a new vertex wherever
    you click. Doing so multiple times will create a string of connected vertices.
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 拉伸 | E 或 CTRL-点击 | 通过从当前选择中“拉出”新的顶点、边和面来创建新的几何体。拉伸的结果取决于你所选的内容（见[图4-2](ch04.html#extruding_faces_1comma_extruding_edges_2
    "图4-2. 拉伸面1，拉伸边2，和拉伸单个顶点3。对不同选择的拉伸操作会有不同的结果。拉伸顶点会创建边，而拉伸边或面则会创建面。拉伸整个封闭网格（未显示）会复制该网格。")）。在编辑模式下，若没有选中任何内容，CTRL-点击将会在点击的地方创建一个新的顶点。多次这样操作会创建一串相连的顶点。
    |'
- en: '| Fill | F | If two vertices are selected, Fill creates an edge joining them.
    If three, four, or more vertices are selected, it creates a tri, quad, or *n*-gon
    from them. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 填充 | F | 如果选择了两个顶点，填充将创建一个连接它们的边。如果选择了三个、四个或更多顶点，它将从这些顶点创建一个三角形、四边形或*n*边形。
    |'
- en: '| Rotate | R | Rotates the vertices, edges, or faces you have selected. (You
    can also use the 3D Manipulator widget in Rotate mode.) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 旋转 | R | 旋转你所选的顶点、边或面。（你也可以在旋转模式下使用 3D 操作小工具。） |'
- en: '| Scale | S | Scales the vertices, edges, or faces you have selected, allowing
    you to resize part or all of a mesh. (You can also use the 3D Manipulator widget
    in Scale mode to do this.) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 缩放 | S | 缩放你选择的顶点、边或面，允许你调整网格的部分或全部大小。（你也可以在缩放模式下使用 3D 操作小工具来执行此操作。） |'
- en: '| Shrink/Fatten | ALT-S | Moves the selected vertices along the direction of
    their normals to inflate a mesh, almost like a balloon, or to shrink it to make
    it thinner. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 收缩/膨胀 | ALT-S | 沿顶点法线的方向移动选中的顶点，以膨胀网格，几乎像气球一样，或将其收缩，使其变薄。 |'
- en: '| Smooth | W▸Smooth | Smooths sharp angles between edges and faces so that
    the resulting mesh is smoother. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 平滑 | W▸平滑 | 平滑边和面之间的锐角，使得结果网格更加平滑。 |'
- en: '| Subdivide | W▸Subdivide | Divides all selected edges into two and faces into
    four, creating more dense geometry. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 划分 | W▸划分 | 将所有选中的边分割成两段，将面分割成四个，从而创建更密集的几何体。 |'
- en: '| Translate (also known as Grab or Move) | G | Grabs the vertices, edges, or
    faces you have selected and allows you to move them. (You can also use the 3D
    Manipulator widget in Translate mode to do this.) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 平移（也叫抓取或移动） | G | 抓取你选择的顶点、边或面，并允许你移动它们。（你也可以在平移模式下使用 3D 操作器小部件来执行此操作。） |'
- en: '| Dissolve | X | An alternative to Delete, this deletes the edges or vertices
    selected but fills the hole left behind with an *n*-gon. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 溶解 | X | 删除选中的边或顶点，但用 *n*-边形填充留下的空洞，是删除操作的替代方法。 |'
- en: '| Connect | J | Connects two vertices that are part of the same face, splitting
    the face in two in the process. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | J | 连接两个属于同一面的顶点，并在此过程中将该面分割成两个部分。 |'
- en: '| Cut | K | Gives you a knife tool that lets you cut the selected geometry
    along the lines you draw. Hold CTRL to snap to vertices and the middle of edges.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 切割 | K | 提供一个刀具工具，允许你沿绘制的线条切割选中的几何体。按住 CTRL 键可对齐到顶点和边的中点。 |'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Blender almost always has two ways of performing an action: through the UI
    and by using a keyboard shortcut and/or Search. In many cases, it pays to learn
    both because knowing how to quickly perform actions and switch between modes will
    greatly speed up your work.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 几乎总是提供两种执行操作的方式：通过 UI 和使用快捷键及/或搜索。在许多情况下，学习这两种方式都很有价值，因为学会快速执行操作和在模式之间切换会大大提高工作效率。
- en: Once in Edit mode, you can select things by right-clicking them. You can extend
    your selection with SHIFT-right-click. To select or deselect everything in the
    current mesh, press **A**. To switch between selecting vertices, edges, and faces,
    click the vertex, edge, or face select buttons in the 3D Viewport header (see
    [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m "Figure 4-1. Blender’s
    3D Viewport in Edit Mode")).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 进入编辑模式后，你可以通过右键点击选择对象。按住 SHIFT 并右键点击可以扩展选择。要选择或取消选择当前网格中的所有内容，按 **A**。要在选择顶点、边和面的模式之间切换，请点击
    3D 视口头部的顶点、边或面选择按钮（见 [图 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m
    "图 4-1. Blender 编辑模式下的 3D 视口")）。
- en: Press **L** to select all parts of a mesh connected to the part of the mesh
    under your cursor. With part of a mesh selected, you can perform various operations
    on your selection in order to edit your mesh.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按 **L** 选择与光标下网格部分相连的所有网格部分。选中网格的部分后，你可以对选区执行各种操作，以编辑网格。
- en: '[Table 4-2](ch04.html#frequently_used_operators_in_edit_mode "Table 4-2. Frequently
    Used Operators in Edit Mode") lists the operators that you’ll use most often when
    modeling in Blender. There are many other ways to interact with a mesh, but I’ll
    cover those as we go along.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-2](ch04.html#frequently_used_operators_in_edit_mode "表 4-2. 编辑模式下常用操作符")列出了在
    Blender 建模时你最常使用的操作符。还有许多其他与网格交互的方式，我会在接下来的内容中详细讲解。'
- en: To learn more about an operator in Blender, search for it on *[http://wiki.blender.org/](http://wiki.blender.org/)*.
    You can easily discover more operators (or search for an existing one) using the
    Search menu (spacebar) or by looking through the header menus and panels of Blender’s
    different editors. You can hover over buttons in Blender to see a tool tip describing
    what an operator does and whether it has a keyboard shortcut.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解 Blender 中的操作符，请访问 *[http://wiki.blender.org/](http://wiki.blender.org/)*
    搜索相关内容。你可以通过搜索菜单（空格键）或浏览 Blender 不同编辑器的头部菜单和面板，轻松发现更多操作符（或搜索已有操作符）。在 Blender 中，悬停在按钮上会显示工具提示，描述操作符的功能及其是否有快捷键。
- en: '![Extruding faces 1, extruding edges 2, and extruding a single vertex 3\. Extruding
    operations on different selections will have different results. Extruding vertices
    will create edges, while extruding edges or faces will create faces. Extruding
    an entire closed mesh (not shown) will duplicate that mesh.](httpatomoreillycomsourcenostarchimages1538320.png.jpg)Figure 4-2. Extruding
    faces 1, extruding edges 2, and extruding a single vertex 3. Extruding operations
    on different selections will have different results. Extruding vertices will create
    edges, while extruding edges or faces will create faces. Extruding an entire closed
    mesh (not shown) will duplicate that mesh.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![挤出面 1，挤出边 2，以及挤出单个顶点 3。不同选择上的挤出操作将产生不同的结果。挤出顶点将创建边，而挤出边或面将创建面。挤出整个封闭网格（未显示）将复制该网格。](httpatomoreillycomsourcenostarchimages1538320.png.jpg)图
    4-2. 挤出面 1，挤出边 2，以及挤出单个顶点 3。不同选择上的挤出操作将产生不同的结果。挤出顶点将创建边，而挤出边或面将创建面。挤出整个封闭网格（未显示）将复制该网格。'
- en: In Edit mode, the **W** key brings up a menu with a lot of handy tools for modeling.
    All of the operators you will use in Edit mode can be found in the 3D Viewport.
    As of Blender 2.5, when you use most operators, the Tool Options panel will appear
    at the bottom of the Tool Shelf, allowing you to change, retroactively, the parameters
    of the operator you just used. For example, after applying the Subdivide operator,
    you can use the Tool Options panel to change how many subdivisions to apply and
    whether to smooth them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑模式下，**W**键会弹出一个包含许多建模工具的菜单。你在编辑模式下使用的所有操作符都可以在3D视图中找到。从Blender 2.5开始，当你使用大多数操作符时，工具选项面板会出现在工具架的底部，让你能够事后更改刚才使用的操作符的参数。例如，在应用细分操作符后，你可以使用工具选项面板来改变细分的数量以及是否对其进行平滑处理。
- en: 'Other Ways to Model: Curves'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他建模方式：曲线
- en: You can use Blender to create models in a number of different ways, including
    using various curves, *metaballs* (which behave somewhat like blobs of clay that
    stick together when they get close to one another), *NURBS surfaces* (surfaces
    constructed from cross sections defined by curves), text objects, and Bézier curves.
    Each has its place in modeling, but the most important (after meshes) are Bézier
    curves, which we’ll use often throughout the modeling sections of this book.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Blender以多种方式创建模型，包括使用各种曲线、*元球*（其行为有点像靠近时会粘在一起的黏土团块）、*NURBS曲面*（由曲线定义的横截面构成的曲面）、文本对象以及贝塞尔曲线。每种方法在建模中都有其特定用途，但最重要的（仅次于网格）是贝塞尔曲线，我们将在本书的建模部分中频繁使用。
- en: '*Bézier curves* define a path in 3D space and are constructed using control
    points and handles. They can be used to make both wire- or ribbon-like objects
    that follow the path of a curve (using closed or open curves) and flat surfaces
    that are defined by their outline (using closed 2D curves). Each control point
    has two handles that define how the path flows through that vertex, allowing you
    to create a wide array of smooth and sharp paths with a curve.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*贝塞尔曲线*定义了一个3D空间中的路径，并通过控制点和手柄构造。它们可以用来创建沿曲线路径延伸的线状或带状物体（使用闭合或开放曲线），以及通过轮廓定义的平面表面（使用闭合的二维曲线）。每个控制点都有两个手柄，用来定义路径在该顶点的流动方式，从而使你能够创建各种平滑或锐利的路径。'
- en: Modeling with curves works very much like using meshes; you can grab, rotate,
    scale, duplicate, and extrude control points or their handles. (You can’t make
    faces from curves, though; you can only connect each vertex in a curve to two
    others.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用曲线建模的方式与使用网格非常相似；你可以抓取、旋转、缩放、复制以及拉伸控制点或其手柄。（不过，你不能从曲线创建面；你只能将曲线中的每个顶点与另外两个顶点连接起来。）
- en: 'When working with curves bear the following in mind:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用曲线时，请记住以下几点：
- en: '****The geometry generated by curves is *procedural*.**** This means that the
    curves you define are used to generate a mesh according to the settings you apply
    to the curve in the Object Data tab ([Figure 4-3](ch04.html#object_data_tab_for_a_curve_object_allow
    "Figure 4-3. The Object Data tab for a curve object allows you to change between
    a 2D and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry)."))
    of the Properties editor. You can change things like the number of divisions per
    curve segment and the beveling and extrusion applied to the curve.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '****由曲线生成的几何体是*程序化的*。**** 这意味着你定义的曲线将根据你在对象数据选项卡中应用于曲线的设置来生成网格（[图4-3](ch04.html#object_data_tab_for_a_curve_object_allow
    "图4-3。对象数据选项卡允许你在2D和3D曲线之间切换，设置从曲线创建的网格密度（分辨率），并定义如何对曲线进行倒角和拉伸以创建3D物体（几何）")）。你可以更改一些参数，比如每个曲线段的划分数目，以及对曲线应用的倒角和拉伸。'
- en: '![The Object Data tab for a curve object allows you to change between a 2D
    and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry).](httpatomoreillycomsourcenostarchimages1538322.png.jpg)Figure 4-3. The
    Object Data tab for a curve object allows you to change between a 2D and 3D curve,
    set the density of the mesh created from that curve (Resolution), and define how
    the curve is beveled and extruded to create a 3D object (Geometry).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![对象数据选项卡允许你在2D和3D曲线之间切换，设置从曲线创建的网格密度（分辨率），并定义如何对曲线进行倒角和拉伸以创建3D物体（几何）。](httpatomoreillycomsourcenostarchimages1538322.png.jpg)图4-3。对象数据选项卡允许你在2D和3D曲线之间切换，设置从曲线创建的网格密度（分辨率），并定义如何对曲线进行倒角和拉伸以创建3D物体（几何）。'
- en: '****Curves can be open or closed.**** To close a curve, select its two ends
    and press **F** to join them. You can delete a segment of a closed curve by selecting
    two or more connected points and choosing **X**▸**Segment** to make it open again.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '****曲线可以是开放的或封闭的。**** 要关闭曲线，选择其两个端点并按 **F** 将它们连接起来。你可以通过选择两个或更多连接的点，然后选择 **X**▸**段**
    来删除封闭曲线的一段，从而使其重新变为开放曲线。'
- en: '****Curves can be either 2D or 3D.**** Points on a 2D curve cannot be moved
    along the curve object’s *z*-axis, which allows you to create a flat object by
    defining its outline with a curve. Blender then fills in the shape with faces
    according to the Fill setting (see [Figure 4-3](ch04.html#object_data_tab_for_a_curve_object_allow
    "Figure 4-3. The Object Data tab for a curve object allows you to change between
    a 2D and 3D curve, set the density of the mesh created from that curve (Resolution),
    and define how the curve is beveled and extruded to create a 3D object (Geometry).")).
    You can then extrude the outline of a closed curve to create a solid shape using
    the Geometry settings in the Object Data tab. You can also add details like beveled
    edges and change the curve’s resolution here.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '****曲线可以是二维或三维的。**** 二维曲线上的点不能沿曲线对象的 *z* 轴移动，这使得你可以通过定义曲线的轮廓来创建一个平面对象。Blender
    然后根据填充设置（见[图 4-3](ch04.html#object_data_tab_for_a_curve_object_allow "图 4-3. 曲线对象的对象数据选项卡允许你在二维和三维曲线之间切换，设置从该曲线创建的网格的密度（分辨率），并定义如何倒角和挤出曲线以创建
    3D 对象（几何）。")）填充该形状。然后，你可以使用对象数据选项卡中的几何设置将封闭曲线的轮廓挤出以创建实心形状。你还可以添加细节，如倒角边缘，并在这里更改曲线的分辨率。'
- en: '****3D curves have a “tilt” that determines the direction of extrusion of the
    curve, as shown in [Figure 4-4](ch04.html#different_types_of_curvesdot_left_a_2d_c
    "Figure 4-4. Different types of curves. Left: A 2D curve extruded and beveled
    to make a flat cutout shape. Right: 3D curves extruded to make ribbons. (The tilt
    of the curve defines how the curve twists.)").**** You can see the direction of
    the tilt from the normals (arrowheads) displayed along the length of 3D curves.
    You can edit this tilt with CTRL-T, allowing you to create a curve that twists
    along its length.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '****3D 曲线有一个“倾斜角度”，决定了曲线的挤出方向，如[图 4-4](ch04.html#different_types_of_curvesdot_left_a_2d_c
    "图 4-4. 不同类型的曲线。左：一个二维曲线被挤出并倒角，形成一个平面的切口形状。右：3D 曲线被挤出形成带状物。（曲线的倾斜角度决定了曲线的扭曲方式。）")所示。****
    你可以通过显示在 3D 曲线长度上的法线（箭头）看到倾斜的方向。你可以通过 CTRL-T 编辑这个倾斜角度，从而创建一个沿其长度扭曲的曲线。'
- en: '****Curves can be used to deform meshes.**** Mesh objects can be stretched
    along the path taken by a curve by applying a curve modifier to them.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '****曲线可以用来变形网格。**** 可以通过将曲线修改器应用到网格对象上，使网格沿着曲线的路径进行拉伸。'
- en: '****The curve handles can work in one of several ways, as shown in [Figure 4-5](ch04.html#curves_with_different_handle_types_left
    "Figure 4-5. Curves with different handle types (clockwise from top left: automatic,
    aligned, vector, and free)").**** The default is usually automatic or aligned,
    depending on the sort of curve object you add. Automatic handles simply create
    a smooth path from one control point to the next, with the handles pointing in
    opposite directions. If you grab one handle and move it, its control point will
    switch to using aligned handles that point in opposite directions but can be rotated
    and scaled, allowing you to create more flexible curves. You can change to other
    handle types using the shortcut **V** (or via the Curve menu in the header). Vector
    handles create straight lines between points with sharp corners. Free handles
    create sharp corners too, but you can also grab them and move them around like
    aligned handles, allowing you to create curved segments between control points.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '****曲线控制柄可以以多种方式工作，如[图 4-5](ch04.html#curves_with_different_handle_types_left
    "图 4-5. 不同控制柄类型的曲线（从左上角顺时针：自动、对齐、矢量和自由）")所示。**** 默认通常是自动或对齐，具体取决于你添加的曲线对象类型。自动控制柄会简单地在一个控制点和下一个控制点之间创建一条平滑的路径，且控制柄指向相反的方向。如果你抓住一个控制柄并移动它，控制点将切换为使用对齐控制柄，这些控制柄指向相反的方向，但可以旋转和缩放，使你能够创建更灵活的曲线。你可以使用快捷键**V**（或通过顶部的曲线菜单）切换到其他控制柄类型。矢量控制柄在点之间创建具有锐角的直线。自由控制柄也会创建锐角，但你还可以像对齐控制柄一样抓住它们并移动，使你能够在控制点之间创建弯曲的线段。'
- en: '![Different types of curves. Left: A 2D curve extruded and beveled to make
    a flat cutout shape. Right: 3D curves extruded to make ribbons. (The tilt of the
    curve defines how the curve twists.)](httpatomoreillycomsourcenostarchimages1538324.png.jpg)Figure 4-4. Different
    types of curves. Left: A 2D curve extruded and beveled to make a flat cutout shape.
    Right: 3D curves extruded to make ribbons. (The tilt of the curve defines how
    the curve twists.)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![不同类型的曲线。左侧：将2D曲线挤出并倒角，形成平面切割形状。右侧：将3D曲线挤出形成丝带。（曲线的倾斜决定了曲线的扭转方式。）](httpatomoreillycomsourcenostarchimages1538324.png.jpg)图4-4。不同类型的曲线。左侧：将2D曲线挤出并倒角，形成平面切割形状。右侧：将3D曲线挤出形成丝带。（曲线的倾斜决定了曲线的扭转方式。）'
- en: Modifiers
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修饰符
- en: Modifiers allow you to procedurally and nondestructively perform operations
    on your models. They are fundamental to creating just about anything in Blender.
    Some modifiers generate new geometry, replacing or adding to your mesh, while
    others deform existing geometry according to certain rules or offer ways to plug
    simulations and other more complex entities into your scene.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 修饰符允许你以程序化和非破坏性的方式对模型进行操作。它们是创建Blender中几乎任何内容的基础。一些修饰符会生成新的几何体，替换或添加到你的网格中，而其他修饰符则会根据特定规则变形现有的几何体，或提供将仿真和其他更复杂的实体插入到场景中的方法。
- en: We’ll focus mainly on modifiers that generate and deform the meshes they are
    applied to because they’re the most useful for creating models. Some of the most
    important ones for modeling are listed in [Table 4-3](ch04.html#useful_modifiers_for_modeling
    "Table 4-3. Useful Modifiers for Modeling"). In particular, the Mirror and Subdivision
    Surface modifiers are used in practically all organic modeling. The effects of
    the most commonly used generate modifiers are shown on a half-sphere in [Figure 4-6](ch04.html#different_generate_modifiers_and_their_e
    "Figure 4-6. Different generate modifiers and their effects. From the top, we
    see half a sphere 1, with a Mirror modifier 2, an Array modifier 3, a Solidify
    modifier 4, and a Subdivision Surface modifier 5 applied. Modifiers can be combined
    to create all sorts of shapes more easily than modeling them by hand.").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要关注那些生成并变形应用到网格上的修饰符，因为它们对于创建模型最为有用。在[表4-3](ch04.html#useful_modifiers_for_modeling
    "表4-3。建模的有用修饰符")中列出了一些最重要的建模修饰符。特别是，镜像和子面修饰符几乎在所有有机建模中都会使用。最常用的生成修饰符的效果显示在[图4-6](ch04.html#different_generate_modifiers_and_their_e
    "图4-6。不同的生成修饰符及其效果。从上面看，我们看到一个半球1，应用了镜像修饰符2、数组修饰符3、加固修饰符4和子面修饰符5。修饰符可以组合使用，比手工建模更容易创建各种形状。")中。
- en: '![Curves with different handle types (clockwise from top left: automatic, aligned,
    vector, and free)](httpatomoreillycomsourcenostarchimages1538326.png.jpg)Figure 4-5. Curves
    with different handle types (clockwise from top left: automatic, aligned, vector,
    and free)Table 4-3. Useful Modifiers for Modeling'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![具有不同控制柄类型的曲线（从左上角顺时针：自动、对齐、向量和自由）](httpatomoreillycomsourcenostarchimages1538326.png.jpg)图4-5。具有不同控制柄类型的曲线（从左上角顺时针：自动、对齐、向量和自由）表4-3。建模的有用修饰符'
- en: '| Type | Modifier | Effect |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 修饰符 | 效果 |'
- en: '| --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **generate** | Mirror | Mirrors the geometry of the mesh along the specified
    axis, about the object’s origin, or of another object. Mirror modifiers are very
    useful for creating symmetrical objects. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **生成** | 镜像 | 沿指定的轴线、关于对象的原点或另一个对象，镜像网格的几何体。镜像修饰符对于创建对称对象非常有用。 |'
- en: '|   | Array | Copies the mesh geometry and offsets it using a fixed offset
    relative to the object’s size or some other object. Arrays are useful for models
    with repeating elements. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   | 数组 | 复制网格几何体，并使用相对于对象大小或其他某个对象的固定偏移量进行偏移。数组对于具有重复元素的模型非常有用。|'
- en: '|   | Subdivision Surface (Subsurf) | Divides each face of a mesh into four
    smaller faces and smooths them, creating a smoother mesh with each iteration.
    Subsurfs are useful for objects with smooth surfaces, particularly organic models.
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   | 子面（Subsurf） | 将网格的每个面分割为四个更小的面，并平滑它们，每次迭代都会创建更平滑的网格。子面修饰符适用于具有平滑表面的对象，特别是有机模型。
    |'
- en: '|   | Solidify | Extrudes the geometry along its normals to create a solid
    shell from a surface. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|   | 加固 | 沿法线挤出几何体，创建一个来自表面的实心外壳。 |'
- en: '| **deform** | Lattice | Uses a 3D grid of points to smoothly distort the shape
    of a mesh. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **变形** | 格子 | 使用3D网格点来平滑地扭曲网格的形状。 |'
- en: '|   | Shrinkwrap | Projects the mesh onto the surface of another object. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|   | 收缩包裹 | 将网格投影到另一个对象的表面上。 |'
- en: '|   | Curve | Deforms a mesh along the path of a curve. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|   | 曲线 | 沿着曲线路径变形网格。 |'
- en: '![Different generate modifiers and their effects. From the top, we see half
    a sphere 1, with a Mirror modifier 2, an Array modifier 3, a Solidify modifier
    4, and a Subdivision Surface modifier 5 applied. Modifiers can be combined to
    create all sorts of shapes more easily than modeling them by hand.](httpatomoreillycomsourcenostarchimages1538328.png.jpg)Figure 4-6. Different
    generate modifiers and their effects. From the top, we see half a sphere 1, with
    a Mirror modifier 2, an Array modifier 3, a Solidify modifier 4, and a Subdivision
    Surface modifier 5 applied. Modifiers can be combined to create all sorts of shapes
    more easily than modeling them by hand.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同的生成修改器及其效果。从上到下，我们看到半个球体 1，应用了镜像修改器 2、阵列修改器 3、加厚修改器 4 和细分表面修改器 5。修改器可以组合使用，创建各种形状，比手动建模更容易。](httpatomoreillycomsourcenostarchimages1538328.png.jpg)图4-6。不同的生成修改器及其效果。从上到下，我们看到半个球体
    1，应用了镜像修改器 2、阵列修改器 3、加厚修改器 4 和细分表面修改器 5。修改器可以组合使用，创建各种形状，比手动建模更容易。'
- en: Blocking in the Jungle Temple
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丛林神庙的初步搭建
- en: 'Let’s consider the Jungle Temple scene. For this project, my initial concern
    was designing a layout for the environment that lent itself to creating a nice
    composition. I began with only the main elements in the scene: a door into the
    interior of the temple and some stone blocks and trees strewn around the ruins.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑丛林神庙的场景。对于这个项目，我最初的关注点是设计一个能够创造出良好构图的环境布局。我从场景中的主要元素开始：通往神庙内部的门和一些散落在废墟中的石块与树木。
- en: To create the door, I added a cube in Object mode (SHIFT-A▸Mesh▸Cube) and scaled
    it (**S**) to about the size I needed. Once you activate the Scale operator, you
    can constrain scaling along one axis (by pressing **X**, **Y**, or **Z**) to scale
    the object in only one direction. You can also scale on all *but* one axis by
    pressing SHIFT and **X**, **Y**, or **Z**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作门，我在物体模式下添加了一个立方体（SHIFT-A▸网格▸立方体），并缩放它（**S**）到我需要的大小。一旦激活了缩放操作符，你可以通过按**X**、**Y**或**Z**来限制只在一个轴上缩放物体。你也可以按住SHIFT并按**X**、**Y**或**Z**来在所有轴上缩放，除了一个轴。
- en: Switching to Edit mode (TAB), I added a hole by extruding in the two outside
    faces and scaling them on the *x*- and *z*-axes only. Next, I deleted the center
    faces (**X**) and created new faces around the hole in the center by selecting
    two open edges at a time and making a face between them (**F**), as shown in [Figure 4-7](ch04.html#making_a_simple_door
    "Figure 4-7. Making a simple door").
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到编辑模式（TAB），我通过在两侧外部面进行拉伸，并仅在*x*轴和*z*轴上缩放，添加了一个孔。接下来，我删除了中心的面（**X**），并通过选择两个开放的边，每次做一个面（**F**），在中心周围创建了新的面，如[图4-7](ch04.html#making_a_simple_door
    "图4-7. 制作一个简单的门")所示。
- en: Back in Object mode, I added a plane (SHIFT-A▸Mesh▸Plane) and scaled it up to
    form the ground plane of the scene. Then I added a camera and moved it to roughly
    view the door I was looking for. A quick way to do this is to navigate to the
    view you want just within the 3D Viewport and then press CTRL-ALT-0 to snap the
    camera to the current view. You can also just move and rotate the camera like
    any other object. Note that this might result in the camera getting slightly tilted.
    You can rectify this by manually setting the Y rotation of the camera to 0, using
    the Rotation properties in the Transform panel of the Properties region (**N**).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在物体模式下，我添加了一个平面（SHIFT-A▸网格▸平面）并将其放大，形成了场景的地面平面。然后，我添加了一个相机并将其移动到大致能够看到我想要的门的位置。快速的方法是，在3D视口中导航到你想要的视角，然后按下CTRL-ALT-0将相机对准当前视角。你也可以像操作其他物体一样，移动和旋转相机。注意，这样做可能会导致相机稍微倾斜。你可以通过手动设置相机的Y轴旋转为0来纠正这一点，方法是使用属性区域（**N**）中的旋转属性面板。
- en: From here, I added some simple walls to form the main boundaries of my scene
    simply by adding, scaling, moving, and extruding cubes. Next, I began adding more
    cubes, keeping in mind how they would become the final architectural elements
    of the scene, like stone walls, statues, and loose blocks of stone. This progression
    is shown in [Figure 4-8](ch04.html#blocking_in_with_simple_elementsdot_i_be "Figure 4-8. Blocking
    in with simple elements. I began with the door and then added a ground plane,
    walls, and cubes to represent major elements in the scene.").
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我通过添加、缩放、移动和拉伸立方体，简单地添加了一些墙壁，形成了场景的主要边界。接着，我开始添加更多的立方体，考虑它们将如何成为场景中最终的建筑元素，比如石墙、雕像和散落的石块。这一过程如[图
    4-8](ch04.html#blocking_in_with_simple_elementsdot_i_be "图 4-8. 使用简单元素进行封装。我从门开始，然后添加了地面平面、墙壁和立方体来表示场景中的主要元素。")所示。
- en: With the simple elements blocked in, I began to add rough proxies for the trees
    I wanted growing over the ruins. To create these proxies, I added a Bézier curve
    object and set the handles to automatic. Then I used Blender’s Snapping tools
    to extrude curves resembling the roots and trunks of trees over the surfaces of
    the placeholder objects ([Figure 4-9](ch04.html#by_snapping_the_tree_roots_to_their_surr
    "Figure 4-9. By snapping the tree roots to their surroundings, we can quickly
    block in tree roots crawling over the surface of the ruins.")). I accomplished
    this by turning on Snapping, setting the snapping target to faces, and enabling
    Project onto Surface ([Figure 4-10](ch04.html#snapping_icons "Figure 4-10. Snapping
    icons")). This projects the curves onto the other objects in the scene as you
    move and extrude them, allowing you to “draw out” the trees over the top of the
    existing scene.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单元素封装完成后，我开始为想要生长在废墟上的树木添加粗略的代理模型。为了创建这些代理，我添加了一个贝塞尔曲线对象，并将控制点设置为自动。然后，我使用
    Blender 的对齐工具将曲线挤出，形成类似树根和树干的形状，覆盖在占位对象的表面上（[图 4-9](ch04.html#by_snapping_the_tree_roots_to_their_surr
    "图 4-9. 通过将树根对齐到周围环境，我们可以迅速封装覆盖废墟表面的树根。")）。我通过开启对齐功能，将对齐目标设置为面，并启用“投影到表面”功能（[图
    4-10](ch04.html#snapping_icons "图 4-10. 对齐图标")）。这会在你移动和拉伸曲线时将它们投影到场景中的其他物体上，让你能够在现有场景的基础上“绘制”出树木的形状。
- en: '![Making a simple door](httpatomoreillycomsourcenostarchimages1538330.png.jpg)Figure 4-7. Making
    a simple door![Blocking in with simple elements. I began with the door and then
    added a ground plane, walls, and cubes to represent major elements in the scene.](httpatomoreillycomsourcenostarchimages1538332.png.jpg)Figure 4-8. Blocking
    in with simple elements. I began with the door and then added a ground plane,
    walls, and cubes to represent major elements in the scene.![By snapping the tree
    roots to their surroundings, we can quickly block in tree roots crawling over
    the surface of the ruins.](httpatomoreillycomsourcenostarchimages1538334.png.jpg)Figure 4-9. By
    snapping the tree roots to their surroundings, we can quickly block in tree roots
    crawling over the surface of the ruins.![Snapping icons](httpatomoreillycomsourcenostarchimages1538336.png.jpg)Figure 4-10. Snapping
    icons'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![制作简单的门](httpatomoreillycomsourcenostarchimages1538330.png.jpg)图 4-7. 制作简单的门![使用简单元素进行封装。我从门开始，然后添加了地面平面、墙壁和立方体来表示场景中的主要元素。](httpatomoreillycomsourcenostarchimages1538332.png.jpg)图
    4-8. 使用简单元素进行封装。我从门开始，然后添加了地面平面、墙壁和立方体来表示场景中的主要元素。![通过将树根对齐到周围环境，我们可以迅速封装覆盖废墟表面的树根。](httpatomoreillycomsourcenostarchimages1538334.png.jpg)图
    4-9. 通过将树根对齐到周围环境，我们可以迅速封装覆盖废墟表面的树根。![对齐图标](httpatomoreillycomsourcenostarchimages1538336.png.jpg)图
    4-10. 对齐图标'
- en: Snapping
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对齐
- en: 'Blender has tools for snapping objects, vertices, faces, or edges to all sorts
    of things. To turn on Snapping, click the Snapping icon (the horseshoe magnet)
    in the header of the 3D Viewport (see [Figure 4-10](ch04.html#snapping_icons "Figure 4-10. Snapping
    icons")). Then, from the drop-down menu beside the Snapping icon, select how Blender
    will snap your selection when it’s moved, scaled, or rotated from among the following
    options:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 提供了用于将物体、顶点、面或边缘对齐到各种目标的工具。要启用对齐功能，请点击 3D 视口头部区域中的对齐图标（马蹄形磁铁）（见[图 4-10](ch04.html#snapping_icons
    "图 4-10. 对齐图标")）。然后，从对齐图标旁边的下拉菜单中选择在移动、缩放或旋转时，Blender 如何将你的选择对齐到以下选项之一：
- en: '****Increment****. Your selection will snap to the nearest increment so that
    you can construct objects with precisely aligned points. This is useful for modeling
    things like buildings or mechanical objects where you want perfectly aligned walls
    and floors with no lumps or bumps. (You can also snap your selection to Blender’s
    grid by pressing SHIFT-S▸**Selection to Grid**.)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '****增量****。您的选择将对齐到最近的增量，从而使您可以构建具有精确对齐点的物体。这对于建模建筑物或机械物体等场景非常有用，在这些场景中，您需要完美对齐的墙壁和地板，没有任何突起或凹陷。（您也可以通过按下SHIFT-S▸**选择对齐到网格**，将选择对齐到Blender的网格。）'
- en: '****Vertex/Edge/Face/Volume****. Your selection will be snapped to the vertices,
    edges, faces, or interior of any objects. You can change what Blender chooses
    to snap to from the drop-down menu that appears. Click the icon to the right of
    the drop-down menu to rotate the selection so that it aligns with the normal vertices
    that it snaps to.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '****顶点/边缘/面/体积****。您的选择将对齐到任何物体的顶点、边缘、面或内部。您可以通过下拉菜单更改Blender选择对齐的对象。点击下拉菜单右侧的图标以旋转选择，使其与对齐的法线顶点匹配。'
- en: One very important snapping option is found in Face Snapping mode. Enabling
    Face Snapping causes the Project onto Surface icon to appear. Project onto Surface
    will cause geometry you create to snap onto the surface of existing objects as
    you move, scale, or rotate them around. This option allows you to create new topology
    over the surface of an existing object. In [Chapter 7](ch07.html "Chapter 7. Retopology"),
    we will be creating new topology over the surface of existing objects to better
    capture their shapes after we have sculpted the originals.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常重要的对齐选项位于面对齐模式。启用面对齐时，投影到表面图标将会出现。投影到表面会使您创建的几何体在移动、缩放或旋转时对齐到现有物体的表面。这个选项允许您在现有物体的表面上创建新的拓扑结构。在[第7章](ch07.html
    "第7章. 重拓扑")中，我们将在现有物体的表面上创建新的拓扑，以便在雕刻原始物体之后更好地捕捉它们的形状。
- en: Base Meshes
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础网格
- en: To create the Bat Creature, I needed a simple base mesh that could be sculpted
    on. A base mesh is a simple model that captures the basic shapes of the model
    you want to sculpt. Once you’ve created a base mesh, you can add a Multiresolution
    modifier and begin subdividing and sculpting details in Sculpt mode (see [Chapter 6](ch06.html
    "Chapter 6. Sculpting")).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建蝙蝠生物，我需要一个可以雕刻的简单基础网格。基础网格是一个简单的模型，它捕捉到您想要雕刻的模型的基本形状。一旦创建了基础网格，您可以添加多分辨率修改器，并开始在雕刻模式中细分和雕刻细节（请参见[第6章](ch06.html
    "第6章. 雕刻)")。
- en: Your base mesh should capture the overall proportions of the mesh and be designed
    to subdivide easily in order to provide a nice even mesh to sculpt on. We can
    retopologize the sculpted base mesh later to create the final model, but working
    with very simple geometry now will leave more freedom for experimentation while
    sculpting.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您的基础网格应该捕捉到网格的整体比例，并设计为易于细分，从而提供一个均匀的网格供雕刻使用。我们可以稍后重新拓扑雕刻后的基础网格，创建最终模型，但现在使用非常简单的几何体将为雕刻时的实验提供更多自由。
- en: A base mesh can have any level of complexity, but try to create topology that
    will support the forms that you know you want to create, without introducing too
    many details that you might not be sure about. Depending on how sure you are of
    what you want your model to look like, you can include topology for features like
    eyes, mouths, and muscle groups, or you can leave it as simple as a basic sphere
    or cube if you’re just modeling a face.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 基础网格可以具有任何复杂度，但尽量创建能够支持您知道需要创建的形状的拓扑结构，同时避免引入过多您不确定的细节。根据您对模型外观的确定程度，您可以包含眼睛、嘴巴和肌肉群等特征的拓扑，或者如果您只是在建模一个面部，可以保持基础网格简单，如球体或立方体。
- en: For the Bat Creature, I aimed for a base mesh that gave topology for the overall
    body plan but left out fine details, such as the head. I developed the base mesh
    by setting my concept art as a background image and using it as a guide.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蝙蝠生物，我的目标是创建一个基础网格，为整体的身体结构提供拓扑，但省略了细节部分，如头部。我通过将我的概念艺术设置为背景图像并将其作为指南，来开发基础网格。
- en: Building the Bat Creature Base Mesh
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建蝙蝠生物的基础网格
- en: I started with the torso of the creature to provide a guide for the scale of
    the rest of the parts, as well as something to attach them to. To begin, I took
    the default .*blend* file (the scene you are presented with when Blender starts
    up) and deleted any objects already present. Then I loaded in the concept drawing
    for the Bat Creature (as shown in [Figure 4-11](ch04.html#concept_art_loaded_in_as_a_background_im
    "Figure 4-11. Concept art loaded in as a background image")). (For help with this,
    see [Using Concepts and Reference Images in Blender](ch03.html#using_concepts_and_reference_images_in_b
    "Using Concepts and Reference Images in Blender").) While I didn’t plan to use
    this concept to model from exactly, it made a useful guide for judging the proportions
    as I worked. At this point, I left the wings out of the base mesh for the body,
    as I planned to model them separately later.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我从生物的躯干开始建模，以为其余部件提供比例参考，并为它们提供一个附着点。首先，我使用了默认的.*blend*文件（Blender启动时展示的场景），并删除了其中已有的任何物体。然后，我加载了蝙蝠生物的概念图（如[图4-11](ch04.html#concept_art_loaded_in_as_a_background_im
    "图4-11. 作为背景图加载的概念艺术")所示）。(有关帮助，请参见[在Blender中使用概念和参考图像](ch03.html#using_concepts_and_reference_images_in_b
    "在Blender中使用概念和参考图像")。) 虽然我并不打算完全按照这个概念图建模，但它为我提供了一个有用的参考，用来判断在建模过程中比例的准确性。此时，我没有将翅膀包含在躯体的基础网格中，因为我打算稍后单独建模翅膀。
- en: '![Concept art loaded in as a background image](httpatomoreillycomsourcenostarchimages1538338.png.jpg)Figure 4-11. Concept
    art loaded in as a background image'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![作为背景图加载的概念艺术](httpatomoreillycomsourcenostarchimages1538338.png.jpg)图4-11.
    作为背景图加载的概念艺术'
- en: Next, I added a cube, changed to Edit mode (TAB), and scaled it to the rough
    proportions of the torso. I did this first in overall terms by just scaling it
    to the right width (**S**). Then I scaled up the *z*-axis (**S**▸**Z**) before
    scaling in on the *y*-axis (**S**▸**Y**) to make it taller and shallower. By adding
    horizontal loop cuts (extra rings of edges around the mesh, as discussed below)
    around the middle of the cube (CTRL-R) and moving them forward a little, I added
    a bit of curvature to the torso and began refining its shape.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我添加了一个立方体，切换到编辑模式（TAB），并将其缩放到大致的人体比例。我首先通过将其缩放到正确的宽度（**S**）来进行整体调整。然后，我沿*Z*轴缩放（**S**▸**Z**），接着在*Y*轴上进行缩放（**S**▸**Y**），使其变得更高、更浅。通过在立方体的中部添加水平循环切割（在网格周围增加额外的边环，如下文所述）（CTRL-R）并稍微将它们向前移动，我为躯干添加了一些曲线，并开始精细化其形状。
- en: At this point, it was easier to start using a Mirror modifier to keep my mesh
    symmetrical because the model was becoming more complex. To do so, I added a loop
    cut vertically around the middle of the torso and deleted its right-hand side.
    Adding a Mirror modifier then mirrored the geometry of the left-hand side of the
    body to create a symmetrical whole that only required editing on one side (see
    [Figure 4-12](ch04.html#adding_a_mirror_modifier_to_the_body_req "Figure 4-12. Adding
    a Mirror modifier to the body requires adding an edge loop around the middle and
    deleting half of the torso first. By default, the mirror modifier mirrors objects
    around the x-axis, but you can change this to mirror around any combination of
    the x-, y-, and z-axes, depending on your model.")). At the same time, turning
    on clipping keeps vertices on the midline from straying away from the object’s
    *x* origin, which prevents holes from appearing in the mesh if you accidentally
    move a vertex slightly away from the line of symmetry.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到了这个阶段，由于模型变得更加复杂，使用镜像修改器来保持网格对称变得更容易了。为此，我在躯干的中部添加了一个垂直的循环切割，并删除了右侧的部分。然后，添加了一个镜像修改器，将身体左侧的几何形状镜像到右侧，形成一个对称的整体，只需要编辑一侧（参见[图4-12](ch04.html#adding_a_mirror_modifier_to_the_body_req
    "图4-12. 给身体添加镜像修改器需要在中部添加边循环，并首先删除躯干的一半。默认情况下，镜像修改器会沿着x轴进行镜像，但你可以根据模型的需要更改为沿任意组合的x、y和z轴进行镜像。")）。同时，启用裁剪功能，可以防止顶点偏离物体的*x*原点，避免因不小心将顶点稍微移开对称线而导致网格出现漏洞。
- en: Loop Cuts and Face and Edge Loops
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环切割、面和边循环
- en: A *face loop* is a string of quads connected end-to-end in a continuous path,
    allowing an *edge loop* (a chain of connected vertices) to be cut through the
    middle. For example, in [Figure 4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll
    "Figure 4-13. You can add multiple loop cuts by scrolling your mouse wheel or
    entering a number with the keyboard after pressing CTRL-R. Loop cuts terminate
    when they reach a triangle or the edge of a mesh."), adding two edge loops around
    the face loop encircling the cylinder creates a new face loop running around the
    middle. Technically, an edge/face loop should be one continuous cyclical path,
    but the term is often used to mean any reasonably long chain of quads/edges.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*面环*是一个由四边形组成的字符串，端对端连接，形成连续的路径，使得*边环*（一系列连接的顶点）可以通过中间部分进行切割。例如，在[图4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll
    "图4-13. 你可以通过滚动鼠标滚轮或按下CTRL-R后输入数字来添加多个环切割。当环切割到达三角形或网格的边缘时，切割会终止。")中，围绕面环的两个边环将环绕圆柱体，形成一个新的面环，环绕中间部分。技术上来说，边环/面环应该是一个连续的环形路径，但这个术语通常用来表示任何合理长度的四边形/边缘链。'
- en: '![Adding a Mirror modifier to the body requires adding an edge loop around
    the middle and deleting half of the torso first. By default, the mirror modifier
    mirrors objects around the x-axis, but you can change this to mirror around any
    combination of the x-, y-, and z-axes, depending on your model.](httpatomoreillycomsourcenostarchimages1538340.png.jpg)Figure 4-12. Adding
    a Mirror modifier to the body requires adding an edge loop around the middle and
    deleting half of the torso first. By default, the mirror modifier mirrors objects
    around the *x*-axis, but you can change this to mirror around any combination
    of the *x*-, *y*-, and *z*-axes, depending on your model.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![为身体添加镜像修改器需要在中间添加一个边环，并先删除一半的躯干。默认情况下，镜像修改器沿x轴镜像物体，但你可以根据模型的不同，修改为沿任意组合的x轴、y轴和z轴进行镜像。](httpatomoreillycomsourcenostarchimages1538340.png.jpg)图4-12.
    为身体添加镜像修改器需要在中间添加一个边环，并先删除一半的躯干。默认情况下，镜像修改器沿*x*轴镜像物体，但你可以根据模型的需要，更改为沿任意组合的*x*、*y*、*z*轴镜像。'
- en: The Loop Cut tool (CTRL-R) is extremely important because it follows a path
    of quads through your mesh, cutting through each one to create new edges that
    flow through the face loop. If you activate the Loop Cut tool and mouse over an
    edge, Blender will highlight the path in purple. If the path reaches a triangle
    or an open edge of the mesh, it stops.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 环切割工具（CTRL-R）非常重要，因为它沿着四边形路径切割你的网格，穿过每一个四边形，创建新的边缘，流经面环。如果你激活环切割工具并将鼠标悬停在一个边缘上，Blender会用紫色高亮显示该路径。如果路径遇到三角形或网格的开放边缘，切割会停止。
- en: Loop cuts are useful because they allow you to add definition to your model
    while maintaining clean topology. You can create multiple loop cuts by scrolling
    your mouse wheel after pressing CTRL-R and before choosing an edge to start cutting
    from (see [Figure 4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll "Figure 4-13. You
    can add multiple loop cuts by scrolling your mouse wheel or entering a number
    with the keyboard after pressing CTRL-R. Loop cuts terminate when they reach a
    triangle or the edge of a mesh.")).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 环切割非常有用，因为它允许你在保持网格拓扑清晰的同时，给模型添加更多细节。你可以在按下CTRL-R后，通过滚动鼠标滚轮来创建多个环切割，然后选择一个边缘开始切割（参见[图4-13](ch04.html#you_can_add_multiple_loop_cuts_by_scroll
    "图4-13. 你可以通过滚动鼠标滚轮或按下CTRL-R后输入数字来添加多个环切割。当环切割到达三角形或网格的边缘时，切割会终止。")）。
- en: Blender has other operators for interacting with edge loops and face loops,
    including ones for deleting the loop (joining the faces on either side together
    to keep the mesh whole) and sliding the loop up and down the edges parallel to
    it. You can also select an entire edge loop at once to manipulate it. (If it isn’t
    cyclic, Blender will simply find the longest path that it can.) These operators
    are detailed in [Table 4-4](ch04.html#edge_loop_operators "Table 4-4. Edge Loop
    Operators").
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Blender还提供了其他操作器，用于与边环和面环进行交互，包括删除环（将两侧的面连接起来，以保持网格完整）和沿与之平行的边缘上下滑动环。你还可以一次选择整个边环进行操作。（如果它不是环形的，Blender将简单地找到它能够找到的最长路径。）这些操作器的详细信息在[表4-4](ch04.html#edge_loop_operators
    "表4-4. 边环操作器")中。
- en: As the next step in my project, I extruded down from the hips to make the leg
    and added loop cuts to flesh out its shape, as shown in [Figure 4-14](ch04.html#adding_loop_cuts_to_the_leg_gave_me_more
    "Figure 4-14. Adding loop cuts to the leg gave me more vertices with which to
    define its shape."). For the arms, I added a bend at the shoulder by extruding
    out from the body and then down from the bottom face of the newly extruded region,
    as shown in [Figure 4-15](ch04.html#extruding_the_armsdot_creating_a_corner "Figure 4-15. Extruding
    the arms. Creating a corner at the shoulders gave the arm a more natural shape.").
    This gave the shoulder a nicer, more natural corner than it might have if I’d
    extruded down directly from the body.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![You can add multiple loop cuts by scrolling your mouse wheel or entering
    a number with the keyboard after pressing CTRL-R. Loop cuts terminate when they
    reach a triangle or the edge of a mesh.](httpatomoreillycomsourcenostarchimages1538342.png.jpg)Figure 4-13. You
    can add multiple loop cuts by scrolling your mouse wheel or entering a number
    with the keyboard after pressing CTRL-R. Loop cuts terminate when they reach a
    triangle or the edge of a mesh.Table 4-4. Edge Loop Operators'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Hotkey | Function |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| Delete Edge Loop | X▸Edge Loop | Deletes the selected portion of an edge
    loop, leaving the surface otherwise intact. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| Edge Slide | CTRL-E▸Edge Slide | Allows you to slide all or part of an edge
    loop along the edges running perpendicular to it. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| Loop Cut | CTRL-R | Creates a new edge loop starting from the edge under
    the cursor. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| Select Edge/Face Loop | ALT-right-click | Selects an edge/face loop (depending
    on selection mode). |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '![Adding loop cuts to the leg gave me more vertices with which to define its
    shape.](httpatomoreillycomsourcenostarchimages1538344.png.jpg)Figure 4-14. Adding
    loop cuts to the leg gave me more vertices with which to define its shape.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Poses for Modeling Characters
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The pose you model a character or creature in is very important to its ultimate
    look, and your strategy will depend on what you want to use your model for. So
    far, I’ve modeled the Bat Creature in a relaxed pose that is close to the classic
    T pose: arms straight out and legs shoulder width apart. The T pose is useful
    when *rigging* a character (the process of creating an armature that tells the
    mesh how to move as if it had bones and joints). However, the T pose looks rather
    tense and unnatural when modeling, an effect that can stick around when posing
    a character into other positions. Instead, I wanted the character to look as relaxed
    and neutral as possible while in the early stages of modeling so that I could
    progress away from this neutral position later. By relaxing the arms down toward
    the character’s sides, I eliminated this tension to make the character’s default
    pose much more natural.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Extruding the arms. Creating a corner at the shoulders gave the arm a more
    natural shape.](httpatomoreillycomsourcenostarchimages1538346.png.jpg)Figure 4-15. Extruding
    the arms. Creating a corner at the shoulders gave the arm a more natural shape.![Adding
    an extra edge loop around the torso and legs and merging a couple of edges to
    clean up the mesh](httpatomoreillycomsourcenostarchimages1538348.png.jpg)Figure 4-16. Adding
    an extra edge loop around the torso and legs and merging a couple of edges to
    clean up the mesh'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Though we won’t cover rigging in detail, note that there is a reason for the
    classic T pose. When it comes to rigging, having a character’s arms out straight
    can make it simpler to set up bone chains and constraints. However, continuing
    improvements in Blender’s rigging tools have made it somewhat less necessary to
    do this. You can always re-pose your model in the T pose after having modeled
    and sculpted it in a more relaxed pose.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Next, I selected all the edges running down the front and back of the body and
    legs and subdivided them (**W**) to allow me to refine the shape of the torso
    and legs. Doing so created some awkward topology at the pelvis, which I fixed
    by selecting the two new edges and merging them, as shown in [Figure 4-16](ch04.html#adding_an_extra_edge_loop_around_the_tor
    "Figure 4-16. Adding an extra edge loop around the torso and legs and merging
    a couple of edges to clean up the mesh"). I did the same for the edges on the
    backside, too.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: I added an edge loop around the middle of the character as seen from the side
    ([Figure 4-17](ch04.html#refining_the_body_in_side_view_left_pare "Figure 4-17. Refining
    the body in side view (left) before adding an edge loop running around the middle
    (right)")) and running across the chest and down the arms. I then further refined
    the body shape, tucking in the waist at the back and rounding out the shape of
    the legs and arms. This step brought the number of vertices around the arms and
    legs to a total of eight, which would be important when adding hands and feet.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Refining the body in side view (left) before adding an edge loop running
    around the middle (right)](httpatomoreillycomsourcenostarchimages1538350.png.jpg)Figure 4-17. Refining
    the body in side view (left) before adding an edge loop running around the middle
    (right)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: As I went along, I tried to make sure that my mesh was completely composed of
    quads, and I aimed to keep the size and shape of the quads approximately even
    and square. This is important when creating a base mesh for sculpting because
    triangles, *n*-gons, and long, thin faces generally create artifacts when sculpted
    on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: To create a loop of faces running around the shoulder ([Figure 4-18](ch04.html#adding_a_loop_of_faces_around_the_should
    "Figure 4-18. Adding a loop of faces around the shoulder. This loop made it easy
    to reposition the arm in different poses without deforming the chest.")), I selected
    the faces of the arm and split them from the body (**Y**). I then shifted the
    arm out and bridged the edges around the gap using the Bridge operator (W▸Bridge
    Two Edge Loops). This connected two strings or loops of vertices together, filling
    them in with faces from one to the other. The two must have the same number of
    vertices to be joined.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个绕肩部的面片循环（[图4-18](ch04.html#adding_a_loop_of_faces_around_the_should "图4-18.
    在肩部周围添加一个面片循环。这个循环使得在不变形胸部的情况下，可以轻松调整手臂在不同姿势中的位置。")），我选择了手臂的面片，并将其从身体中分离出来（**Y**）。然后，我将手臂移出，并使用桥接操作符（W▸桥接两个边循环）在空隙周围桥接边缘。这样将两条顶点链或循环连接在一起，并通过面片从一个连接到另一个。两个循环的顶点数必须相同才能连接。
- en: '![Adding a loop of faces around the shoulder. This loop made it easy to reposition
    the arm in different poses without deforming the chest.](httpatomoreillycomsourcenostarchimages1538352.png.jpg)Figure 4-18. Adding
    a loop of faces around the shoulder. This loop made it easy to reposition the
    arm in different poses without deforming the chest.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![在肩部周围添加一个面片循环。这个循环使得在不变形胸部的情况下，可以轻松调整手臂在不同姿势中的位置。](httpatomoreillycomsourcenostarchimages1538352.png.jpg)图4-18.
    在肩部周围添加一个面片循环。这个循环使得在不变形胸部的情况下，可以轻松调整手臂在不同姿势中的位置。'
- en: Then I added some more loop cuts over various parts of the body, running across
    the forms, to even out the mesh and give an even distribution of roughly square
    quads ([Figure 4-19](ch04.html#adding_some_extra_edge_loops_around_the "Figure 4-19. Adding
    some extra edge loops around the legs, arms, and torso")). You can adjust the
    position of an existing edge loop using the Edge Slide operator (CTRL-E▸Edge Slide),
    which lets you slide edge loops up and down.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我在身体的各个部分添加了更多的循环切割，跨越不同的形态，以平整网格并提供大致均匀的方形四边形分布（[图4-19](ch04.html#adding_some_extra_edge_loops_around_the
    "图4-19. 在腿部、手臂和躯干周围添加一些额外的边循环")）。你可以使用边缘滑动操作符（CTRL-E▸边缘滑动）来调整现有边循环的位置，这个操作符可以让你上下滑动边循环。
- en: '![Adding some extra edge loops around the legs, arms, and torso](httpatomoreillycomsourcenostarchimages1538354.png.jpg)Figure 4-19. Adding
    some extra edge loops around the legs, arms, and torso'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![在腿部、手臂和躯干周围添加一些额外的边循环](httpatomoreillycomsourcenostarchimages1538354.png.jpg)图4-19.
    在腿部、手臂和躯干周围添加一些额外的边循环'
- en: Modeling the Hands and Feet
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手部和脚部建模
- en: To model the hands (as shown in [Figure 4-20](ch04.html#creating_the_hand "Figure 4-20. Creating
    the hand")), I began with a cube and flattened it by scaling it down along its
    *x-*axis to form the basis for the palm 1. Then I added some loop cuts around
    the middle and vertically 2.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建模手部（如[图4-20](ch04.html#creating_the_hand "图4-20. 创建手部")所示），我从一个立方体开始，通过沿其
    *x-* 轴缩放来扁平它，形成手掌的基础1。然后，我在中部添加了一些循环切割，并进行垂直切割2。
- en: At this point, I could have extruded the fingers straight out from each face
    at the base of the palm. Doing so, however, would have created some nasty topology
    where the fingers meet each other that would neither sculpt nor deform well when
    posed. Instead, I did some extruding to add face loops that run between the fingers
    3. For the middle one, I simply selected half of the hand and extruded out. For
    the outer two gaps, I extruded in the middle 4 faces on the bottom half of the
    hand on both sides, as well as those connecting the two sides along the bottom,
    for a total of 10 faces.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，我本可以直接从手掌底部的每个面片上挤出手指。然而，这样做会在手指交接处产生一些糟糕的拓扑结构，这样的结构在雕刻或变形时表现不佳。相反，我进行了挤出操作，添加了运行在手指之间的面片循环3。对于中间的手指，我只选择了手部的一半并进行了挤出操作。对于外侧的两个空隙，我在手掌底部的两侧中部4面上进行挤出，同时连接两侧的底部，共计10个面片。
- en: '![Creating the hand](httpatomoreillycomsourcenostarchimages1538356.png.jpg)Figure 4-20. Creating
    the hand'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![创建手部](httpatomoreillycomsourcenostarchimages1538356.png.jpg)图4-20. 创建手部'
- en: To reduce the number of faces along the top side of the hand (where it will
    eventually join with the arm), I merged the two pairs of edges on the top corner
    of the hand opposite the thumb 4. (Remember I was aiming to have eight vertices
    to join with the arm, so this area needed to be kept simple.)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少手部顶部（最终与手臂连接处）面片的数量，我将手部顶部角落与拇指对面的两对边缘合并（图4）。(记住，我的目标是让手部与手臂连接时有八个顶点，所以这一区域需要保持简单。)
- en: For the thumb, I extruded out twice from the faces on the front of the hand
    5 and then merged the vertices on the corner to create a bend 6. I then added
    a loop cut running around the outside of the hand 7, extruded the fingers and
    the thumb 8, and smoothed them slightly (W▸Smooth). Next, I gave the fingers and
    thumb a bit of a curl inward by selecting and first rotating the whole finger,
    then the last two-thirds, and then just the tip 9. I also adjusted the shape of
    the whole hand by selecting parts of the hand from the top view and rotating them
    with proportional editing turned on to give the palm and thumb a slight curve.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: I smoothed the hand slightly (W▸Smooth) to make the fingers and palm a bit less
    blocky. By selecting the surface of the palm, and with proportional editing turned
    on, I inflated it slightly (ALT-S) to give the hand a bit more volume 10. This
    completes the modeling stages shown in [Figure 4-20](ch04.html#creating_the_hand
    "Figure 4-20. Creating the hand").
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: To connect the hand to the arm ([Figure 4-21](ch04.html#joining_the_hand_to_the_arm
    "Figure 4-21. Joining the hand to the arm")), I deleted the four faces in the
    middle of the top side of the hand, moved the hand into place, and then joined
    the hand with the main body in Object mode (CTRL-J). Then in Edit mode, I deleted
    the corresponding faces at the end of the arm and bridged the loops to connect
    the hand to the arm.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Joining the hand to the arm](httpatomoreillycomsourcenostarchimages1538358.png.jpg)Figure 4-21. Joining
    the hand to the arm'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Because I kept the number of vertices around the end of the arm and the wrist
    the same, the hand joined to the arm with a minimum of fuss, as shown in [Figure 4-21](ch04.html#joining_the_hand_to_the_arm
    "Figure 4-21. Joining the hand to the arm"). Because the join now had two edge
    loops quite close together, I deleted one (selecting it with ALT-right-click,
    then deleting with X▸Edge Loop) to create a more even distribution.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the feet was much the same, as shown in [Figure 4-22](ch04.html#constructing_the_foot
    "Figure 4-22. Constructing the foot"). Beginning with a cube, I first extruded
    the general shape of the foot 1. I added face loops to produce gaps between the
    toes (2 to 4), extruded the toes 5, smoothed the foot a little 6, and then merged
    the corner edges on the back of the foot to improve the way that the edge loops
    flow around the back and reduced the overall polycount, as I did with the hand
    7. I used Inflate and proportional editing to make the big toe bigger and refine
    the slope of the foot, which slopes down forward from the leg and down from the
    big toe side to the little toe side 8. Again, because there are eight vertices
    around the circumference of the leg, I could delete four faces from the top of
    the foot and bridge the gap with the leg (9 and 10). Then I cleaned up the edge
    loop distribution along the lower leg by sliding, deleting, or adding edge loops
    to get more evenly spaced edge loops (11 and 12).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the Head
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The head began as just a cube extruded out, once at the front and then down
    at the base to create the chin ([Figure 4-23](ch04.html#making_the_head_and_attaching_it_to_the
    "Figure 4-23. Making the head and attaching it to the body")). After adding a
    few loop cuts, I extruded out from the bottom to create the neck and then smoothed
    and refined the shape to give it a better silhouette and to make it slightly narrower
    at the front. I extruded out from the faces on the side of the head to create
    some geometry for the ears. Then, as with the body, I deleted half and added a
    Mirror modifier. Next, I connected the head to the body, deleting the faces in
    between and bridging the gap with the Bridge operator.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![Constructing the foot](httpatomoreillycomsourcenostarchimages1538360.png.jpg)Figure 4-22. Constructing
    the foot![Making the head and attaching it to the body](httpatomoreillycomsourcenostarchimages1538362.png.jpg)Figure 4-23. Making
    the head and attaching it to the body'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Be sure that the* x *location of the origin of the head aligns with the body
    before joining it with CTRL-J. If you don’t, the Mirror modifier on the body will
    have a different center than the head, causing it to split the head apart and
    forcing you to join the faces together again.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking the Model with Proportional Editing
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don’t like the proportions of certain areas of your model, you don’t
    have to tweak every vertex individually. Instead, you can use Blender’s proportional
    editing to grab, scale, or rotate one vertex and drag nearby vertices along with
    it so that changes are made proportionally.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: To turn on proportional editing, use the circular icon in the 3D Viewport header
    (as shown in [Figure 4-1](ch04.html#blenderapostrophes_3d_viewport_in_edit_m "Figure 4-1. Blender’s
    3D Viewport in Edit Mode")) or the shortcut key O. Once proportional editing has
    been turned on, you can adjust the distance over which the nearby unselected vertices
    are dragged (along with selected ones), as well as the falloff curve for the effect.
    To change the radius, scroll your mouse wheel while manipulating your selection.
    Select the falloff curve from the drop-down menu next to the Proportional Editing
    icon in the header. You can also set proportional editing to affect only connected
    vertices (ALT-O), which will drag only nearby vertices in the same mesh as those
    selected, allowing you to do things like move an arm without affecting your model’s
    waist.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Different falloff settings can significantly impact the effect of transforming
    part of your mesh. For example, the Sharp Falloff option will create sharp peaks
    if you grab and move a single vertex, whereas the Sphere Falloff option will create
    bulbous, spherical shapes. The Random Falloff option is useful for roughening
    up the surface of a mesh; by grabbing a single vertex and moving it a little,
    with a wide radius for the falloff, you can add a slight random variation to the
    surface of a mesh.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Proportional editing is useful for many things besides tweaking proportions.
    For example, you can use it to create interesting curved or twisted deformations
    by grabbing or rotating parts of the mesh ([Figure 4-24](ch04.html#proportional_editing_has_many_usesdot_he
    "Figure 4-24. Proportional editing has many uses. Here it’s used to deform a subdivided
    column using (left to right) Translate, Rotate, and Scale operations and the standard
    “smooth” falloff.")) or for posing characters without having to rig them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Proportional editing has many uses. Here it’s used to deform a subdivided
    column using (left to right) Translate, Rotate, and Scale operations and the standard
    “smooth” falloff.](httpatomoreillycomsourcenostarchimages1538364.png.jpg)Figure 4-24. Proportional
    editing has many uses. Here it’s used to deform a subdivided column using (left
    to right) Translate, Rotate, and Scale operations and the standard “smooth” falloff.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: I used proportional editing to make a few tweaks to finalize the mesh, such
    as pulling back the arms and shoulders slightly and narrowing the back where it’s
    level with the waist.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Wings
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make it easier to sculpt on the body and wings, I created them as separate
    meshes that I could join later when retopologizing. To create the wings, I first
    blocked in the skeleton using the reference as a rough guide, beginning with a
    small plane and working along the length of the bones (see [Figure 4-25](ch04.html#blocking_in_the_wingsdot_starting_with_t
    "Figure 4-25. Blocking in the wings. Starting with the layout of the wing in 2D
    keeps things simple and makes it easier to produce the structure we want.")).
    To make it easier to get the topology I wanted, I kept the mesh 2D at this point.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: With the basic skeleton blocked in, I began filling in the wings between the
    bones. To make sure the gap could be filled in neatly, I spaced out the vertices
    along the bones so that they roughly matched up with one another, adding more
    as needed or shifting existing ones. Next, I extruded and scaled the edges to
    create a clean division between the wing and the bones, and I began filling in
    the gaps. (The extrusion/scaling won’t produce perfect results, but you can tweak
    the position of the vertices manually to get a nicer layout.)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: With the gaps filled in, I selected the whole model and extruded it back to
    give it some thickness, as shown in [Figure 4-26](ch04.html#blocking_in_the_wingsdot_the_wings_are_e
    "Figure 4-26. Blocking in the wings. The wings are extruded and the membranes
    between the bones made thinner. Then the whole wing is given some curvature using
    the Warp tool.") 1. Next, I selected just the wing membrane areas and used the
    Shrink/Fatten tool (ALT-S) to make these areas slightly thinner again 2. At this
    point, the wing had some thickness but was still very flat looking. To rectify
    this, I first selected its more central parts and shifted them back slightly to
    give the wing a bit of a concave shape 3.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sometimes Blender will calculate the normals of a mesh incorrectly, which
    can cause operators like Shrink/Fatten and modifiers like Subdivision Surface
    or Bevel to behave strangely. You can often see this if you set your mesh to draw
    smooth, as black boundaries will appear between areas with conflicting normals.
    To fix this, simply select your whole mesh in Edit mode and use the Recalculate
    Normals operator (CTRL-N) to force Blender to recalculate the object’s normals.*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Next I used the Warp operator (SHIFT-W) to give the wing a curve 4. This operator
    uses the 3D cursor position as the center of the operation and arranges the selected
    vertices in a circle around that center. You can define how far the vertices are
    warped with your cursor; setting the 3D cursor further from the mesh before using
    the operator will give the curve a wider radius.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: As a result of these treatments, I was able to add a nice curve to the wing
    by switching to the top view and using Warp. Also, by rotating the mesh and using
    Warp again, I could add a similar curve to the wing’s profile 5.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: The Warp operator will often move the mesh about a bit, so I dropped back into
    Object mode (TAB) and moved the wing back to where I wanted it before applying
    the transforms (CTRL-A▸Apply Location and then repeat for Rotation and Scale,
    too).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Blocking in the wings. Starting with the layout of the wing in 2D keeps things
    simple and makes it easier to produce the structure we want.](httpatomoreillycomsourcenostarchimages1538366.png.jpg)Figure 4-25. Blocking
    in the wings. Starting with the layout of the wing in 2D keeps things simple and
    makes it easier to produce the structure we want.![Blocking in the wings. The
    wings are extruded and the membranes between the bones made thinner. Then the
    whole wing is given some curvature using the Warp tool.](httpatomoreillycomsourcenostarchimages1538368.png.jpg)Figure 4-26. Blocking
    in the wings. The wings are extruded and the membranes between the bones made
    thinner. Then the whole wing is given some curvature using the Warp tool.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Applying Transforms
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations like Warp can move your object out of place and require you to rotate,
    scale, or translate your mesh to put it back in place. It’s often easiest to do
    this by moving the entire mesh at once in Object mode, though doing so will also
    affect the object’s local coordinates, which can lead to strange results when
    using operators and modifiers. For example, I next wanted to use a Mirror modifier
    to copy the wings over onto the other side of the base mesh for the Bat Creature,
    but after using the Warp operator and moving and rotating the wings in Edit mode,
    adding a Mirror modifier would have given incorrect results (see [Figure 4-27](ch04.html#with_the_objectapostrophes_coordinate_ax
    "Figure 4-27. With the object’s coordinate axes turned on, it becomes obvious
    why the Mirror modifier isn’t producing the desired effects. Applying the transforms
    on the mesh before applying modifiers produces more predictable results.")). The
    reason for this is that by rotating the object in Object mode, I rotated its local
    coordinates, too. Because the Mirror modifier uses these coordinates to mirror
    the object, the results were not what you might expect.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: To see an object’s local coordinates, turn on the Axes setting in the Object
    tab of the Properties editor (see [Figure 4-27](ch04.html#with_the_objectapostrophes_coordinate_ax
    "Figure 4-27. With the object’s coordinate axes turned on, it becomes obvious
    why the Mirror modifier isn’t producing the desired effects. Applying the transforms
    on the mesh before applying modifiers produces more predictable results.")). To
    reset the axes to match the global coordinate system, use each of the Apply Location/Rotation/Scale
    operators in Object mode (CTRL-A) in turn, which will place the object’s origin
    at the global origin and match the rotation and scaling of its local coordinates
    to the global coordinates without affecting its shape. As a result, you’ll be
    able to model, add modifiers, and perform other operations with more predictable
    results.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![With the object’s coordinate axes turned on, it becomes obvious why the Mirror
    modifier isn’t producing the desired effects. Applying the transforms on the mesh
    before applying modifiers produces more predictable results.](httpatomoreillycomsourcenostarchimages1538370.png.jpg)Figure 4-27. With
    the object’s coordinate axes turned on, it becomes obvious why the Mirror modifier
    isn’t producing the desired effects. Applying the transforms on the mesh before
    applying modifiers produces more predictable results.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Of course, instead of the above, you can manipulate an object’s local coordinates
    to your advantage. For example, you could use a Mirror modifier to create a symmetrical
    object and then move and rotate it to a position in your scene that doesn’t match
    the global coordinates. As long as you don’t apply these transforms in Object
    mode at this point, the results of the modifier should stay the way you want them
    to.*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as with the body, I added a Mirror modifier and then used proportional
    editing to better align the wings with the back and tweak the shape.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I had completed blocking in the bat’s body, as shown in [Figure 4-28](ch04.html#finished_body_base_mesh
    "Figure 4-28. The finished body base mesh"). We’ll create its final topology once
    the sculpting is finished, as discussed in [Chapter 5](ch05.html "Chapter 5. Modeling
    the Details") and [Chapter 7](ch07.html "Chapter 7. Retopology").
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Shading Modes
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that so far in blocking out the projects, I have kept the meshes we have
    been creating shaded flat—that is, the faces appear faceted and do not blend into
    one another. The reason for this is that it makes it easier to read at a glance
    the direction that the faces of a mesh are pointing and to see how the forms of
    the mesh are progressing. Later on, I will use smooth shading to render some of
    the models in order to make them look smooth ([Figure 4-29](ch04.html#flat_and_smooth_shading_modesdot_smooth
    "Figure 4-29. Flat and Smooth shading modes. Smooth shading blends between the
    normals of a mesh’s faces to make it look smooth. You can switch between the two
    modes using the Shade Smooth and Shade Flat operators in either Object or Edit
    mode.")), but for now this isn’t necessary. To switch between the two, simply
    select your mesh, and in the Tool Shelf, use the Flat and Smooth operators to
    switch the shading of your selection between flat and smooth shading. You can
    do this either in Object mode, which affects the whole of each selected object,
    or Edit mode, which affects only the selected faces.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '![The finished body base mesh](httpatomoreillycomsourcenostarchimages1538372.png.jpg)Figure 4-28. The
    finished body base mesh![Flat and Smooth shading modes. Smooth shading blends
    between the normals of a mesh’s faces to make it look smooth. You can switch between
    the two modes using the Shade Smooth and Shade Flat operators in either Object
    or Edit mode.](httpatomoreillycomsourcenostarchimages1538374.png.jpg)Figure 4-29. Flat
    and Smooth shading modes. Smooth shading blends between the normals of a mesh’s
    faces to make it look smooth. You can switch between the two modes using the Shade
    Smooth and Shade Flat operators in either Object or Edit mode.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Spider Bot
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To block in the Spider Bot, I needed only the basic parts of the body and legs.
    To generate more detailed ideas for the main parts of the body, I used sculpting
    and then retopologized the results and added more mechanical parts with traditional
    modeling.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Beginning with two cubes, one for the abdomen (back segment) and the other for
    the cephalothorax (head and body segment), I scaled them roughly to the correct
    proportions, as shown in [Figure 4-30](ch04.html#creating_base_meshes_for_the_spider_bot
    "Figure 4-30. Creating base meshes for the Spider Bot") 1. By adding a Subsurf
    modifier (CTRL-1), I was able to get a more rounded shape without having to add
    and manually adjust lots of edge loops. Just adding a couple more edge loops brought
    me closer to the shapes I needed 2.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: After joining the two cubes into the same object in Object mode (CTRL-J), I
    applied the Subsurf modifier at subdivision level 1 to give more geometry to play
    with 3, but I copied the modifier first to further subdivide the mesh. When a
    modifier is applied, changes it makes to the mesh are applied to the mesh and
    thus converted into geometry you can edit. This allowed me to extrude some of
    the new faces from the front of the body to create a bump for the head 4. With
    the extruded faces still selected, I pressed CTRL-+ to grow the selection, fattened
    it a bit with ALT-S, and then smoothed it a little to complete my base mesh for
    sculpting the body.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: For the legs, I began by laying out my plan for the main part of the leg, consisting
    of long, flattened, bone-shaped pieces for the long segments of the leg and shield-shaped
    pieces for the knee and foot segments. I created two slightly different variations
    of the long segments, one for the first and last pairs of legs and one for the
    middle two pairs 5. To create these pieces, I began with a plane, added a Mirror
    modifier to make the leg symmetrical, and then extruded one edge and added loop
    cuts to create the top-down plan of the leg. Next, I selected the whole thing
    (**A**) and extruded it out along its normals by first extruding (**E**) without
    moving the new faces. I then moved the new faces along their normals (ALT-S) to
    give the leg segment a uniform thickness. For now, I created only one copy of
    each piece; after sculpting and retopology, I’ll duplicate the finished parts
    and position them to make the legs. This completes some basic parts for the Spider
    Bot.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating base meshes for the Spider Bot](httpatomoreillycomsourcenostarchimages1538376.png.jpg)Figure 4-30. Creating
    base meshes for the Spider Bot'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: In Review
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter laid the foundations for the models. For the Spider Bot and the
    Bat Creature, this entailed creating base meshes with simple topology that we’ll
    later use to sculpt on and flesh out the designs of our characters. In the case
    of the Jungle Temple, I blocked in the most important elements of the scene with
    simple placeholder meshes. In the next chapter, we will replace and expand upon
    these placeholders, as well as model some extra details for the other two projects
    and discuss some more in-depth modeling concepts along the way. Then in [Chapter 6](ch06.html
    "Chapter 6. Sculpting"), we will move on to sculpting the base meshes created
    in this chapter using Blender’s sculpt tools.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
