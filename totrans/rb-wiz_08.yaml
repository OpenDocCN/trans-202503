- en: Chapter 9. Inheriting the Magic of Ruby
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 继承红宝石的魔法
- en: Her Majesty’s Menagerie
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 她陛下的珍奇动物园
- en: The King, Ruben, and Scarlet raced westward along the underground passage toward
    the castle.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、鲁本和斯嘉丽沿着地下通道向城堡的方向快速奔跑。
- en: “How much farther?” panted Ruben.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “还要多远？”鲁本气喘吁吁地问。
- en: “I’m not sure,” said the King, “but Wherefore told us to go as far as we could,
    and then we’d be at the Mysterious Pipe.” He thought for a moment. “It can’t be
    too far, though,” he said at last. “These are the Ambrose Caverns, and while they
    stretch beneath the entire kingdom, I know Haldo has managed to get between the
    castle and places farther than the Pines in a matter of minutes.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “我不确定，”国王说道，“但Wherefore告诉我们尽可能走远，然后我们就能到达神秘的管道。”他思索了一下。“不过应该不会太远，”他最终说道，“这是安布罗斯洞窟，虽然它们延伸至整个王国的地下，但我知道哈尔多可以在几分钟内穿越城堡和比松树林更远的地方。”
- en: “That’s right! Haldo knows these tunnels,” said Scarlet. She ran in silence
    for a minute or two. “What if . . .” she began.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！哈尔多熟悉这些隧道，”斯嘉丽说道。她沉默地跑了几分钟。“如果……会怎样……”她开口说道。
- en: “What if what?” asked Ruben.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “什么如果？”鲁本问道。
- en: “Well, what if whoever’s causing all this trouble is someone Haldo let in? Or
    what if Haldo’s *one of them*?”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，如果引发这一切麻烦的人是哈尔多让进来的呢？或者如果哈尔多是*他们中的一员*呢？”
- en: “Bite your tongue!” said the King. “Haldo’s been in my service since he was
    a boy. He’d never do anything to hurt us or this kingdom!”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “闭嘴！”国王说道，“哈尔多从小时候就跟着我，他绝不会做任何伤害我们或这个王国的事！”
- en: “We should consider every possibility,” Scarlet said.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “我们应该考虑所有可能性，”斯嘉丽说道。
- en: “Even so,” said the King, “all suspects are innocent until we prove them guilty.
    If we’re lucky, we’ll catch these scoundrels red-handed when we arrive at the
    castle!”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “即便如此，”国王说道，“所有嫌疑人都是无辜的，直到我们证明他们有罪。如果我们运气好，等我们到达城堡时，能当场抓到这些恶棍！”
- en: “Which will be any minute,” Ruben said. “Look!”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “随时都会的，”鲁本说道。“看！”
- en: Up ahead, the narrow tunnel opened up into a wide cavern. The King, Scarlet,
    and Ruben jogged into the open space, then stood for a moment, catching their
    breath.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前方，狭窄的隧道展开成一个宽阔的洞窟。国王、斯嘉丽和鲁本跑进开阔的空间，然后停下片刻，喘着气。
- en: “This is it,” said the King, “the basement *below* the basement below the castle!
    Now we just need to find the Mysterious Pipe and climb back up into my Royal Study.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “就是这里，”国王说道，“城堡下方的地下室下面！现在我们只需要找到神秘的管道，然后爬回到我的皇家书房。”
- en: “And there it is!” said Scarlet. In the darkness, they could just make out the
    outline of the Mysterious Pipe in the far corner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “就是这里！”斯嘉丽说道。在黑暗中，他们勉强看见远角落里神秘管道的轮廓。
- en: The trio walked up to the base of the pipe, which was gurgling softly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 三人走到管道底部，管道正在轻轻地咕噜作响。
- en: “Now what?” asked Ruben. “The Mysterious Pipe is full of water! How are we supposed
    to climb up it?”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “现在怎么样？”鲁本问道。“神秘的管道里满是水！我们怎么爬上去？”
- en: “Well, we turned the Flowmatic Something-or-Other on before,” Scarlet said.
    “We can turn it back off!” She felt around the bottom of the pipe until she found
    the familiar boxy shape of a Computing Contraption, then flipped open its lid.
    The glow of the IRB prompt illuminated their faces.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “我们之前打开了那个Flowmatic什么的，”斯嘉丽说道，“我们可以把它关掉！”她在管道底部摸索，直到找到那个熟悉的计算装置的方形形状，然后打开了它的盖子。IRB提示的光芒照亮了他们的脸。
- en: “Right!” said the King. “What variable did we change before?”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “对了！”国王说道，“我们之前改了什么变量？”
- en: “`flowmatic_on`!” replied Ruben.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “`flowmatic_on`！”鲁本回答道。
- en: 'Scarlet quickly typed into the Computing Contraption:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽迅速在计算装置上输入：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With a slow *booooop* and a *glug*-*glug* sound, the Mysterious Pipe shut down
    and emptied.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着一声缓慢的*booooop*和*咕噜咕噜*的声音，神秘的管道关闭并排空了。
- en: “Well done, Scarlet!” said the King as he walked to the far side of the Pipe.
    He grabbed a large metal wheel jutting out of the side and gave it a spin. The
    wheel turned several times, and with a hollow *clank*, the door to which it was
    attached eased open.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “做得好，斯嘉丽！”国王说道，他走到管道的另一侧。他抓住一个突出的金属轮子，转动了几下。轮子转了好几圈，随着一声空洞的*砰*，它连接的门慢慢打开了。
- en: “Into the Mysterious Pipe!” cried the King, and the three climbed inside.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “进入神秘的管道！”国王喊道，三人都爬了进去。
- en: 'Ruben looked straight up and squinted. “I can’t even see the light at the top!”
    he said. “This Pipe is huge! Hellooo!” he called, and the Mysterious Pipe echoed:
    *Hello! Ello! Lo!*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本直视着管道顶部，眯着眼睛。“我连上面的光都看不见！”他说道，“这个管道太大了！哈喽！”他喊道，神秘管道回响着：*哈喽！ 喽！ 哦！*
- en: “It’ll take forever to climb, if we can even do it at all!” said Scarlet. She
    thought for a moment. “I might have an idea.” She turned to Ruben and the King.
    “Do you trust me?” she asked.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “爬上去得费时费力，如果我们能做到的话！”斯嘉丽说道。她想了想。“我或许有个主意。”她转向鲁本和国王。“你们信任我吗？”她问道。
- en: “With my life!” said the King.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “凭我的生命！”国王说道。
- en: “To the end!” said Ruben.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “到终点！”鲁本说道。
- en: '“All right, then,” said Scarlet. “Hold your breath!” She reached around to
    the Computing Contraption on the side of the Mysterious Pipe and typed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，”斯嘉丽说道。“屏住呼吸！”她伸手到神秘管道旁边的计算机设备上，开始输入：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: She slammed the metal door shut, and in an instant, the pipe filled with water.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 她猛地把金属门关上，瞬间，管道里充满了水。
- en: For a moment, the three floated at the bottom of the Mysterious Pipe, holding
    their breath. Then the entire pipe began to tremble slightly, and with a deep
    *whoosh*, the force of the water propelled the King, Scarlet, and Ruben straight
    up!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟，三人漂浮在神秘管道底部，屏住呼吸。接着，整个管道微微颤动，随着一声深沉的*嗖*，水流的冲击力将国王、斯嘉丽和鲁本直接推了上去！
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160039.png.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160039.png.jpg)'
- en: In just a few seconds, the three of them began to slow down, and they found
    themselves floating just inches from the narrow top of the Mysterious Pipe. The
    King reached down and pushed on the latch of the pipe’s door, and in a flood of
    water, the trio tumbled out onto the floor of the King’s Royal Study.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，他们三人开始放慢速度，发现自己漂浮在神秘管道狭窄顶部仅几英寸的地方。国王伸手按下管道门的门闩，随着一阵水流，三人跌跌撞撞地从门口掉进了国王的皇家书房。
- en: “Genius! Absolutely genius!” the King sputtered.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “天才！绝对是天才！”国王急促地说道。
- en: “Thank you,” said Scarlet, taking a small bow. “But we’ve got to get to the
    Queen! Do you know where she is?”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “谢谢你，”斯嘉丽说着，微微鞠了一躬。“但是我们得赶紧去找皇后！你知道她在哪儿吗？”
- en: “She should be back from Her Royal Majesty’s Hacktastic Ruby Conference,” said
    the King, “so I imagine she’s up in her Royal Office. Let’s go!” And with that,
    he dashed out of the room.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “她应该刚从皇家陛下的Ruby黑客大会回来，”国王说道，“所以我想她现在应该在她的皇家办公室里。走吧！”说完，他冲出了房间。
- en: Ruby and Scarlet followed. “The Queen was at a Ruby conference?” Scarlet asked
    as they raced up the stairs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby和斯嘉丽紧随其后。“皇后参加了Ruby大会？”斯嘉丽一边跑上楼梯一边问。
- en: “Indeed!” said the King. “It might surprise you to learn that although I’m rather
    new to all of this Ruby business, my wife is quite the hacker.”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “的确如此！”国王说道。“你可能会惊讶地发现，虽然我对这些Ruby的事情还很新，但我的妻子可是个不折不扣的黑客。”
- en: “That’s amazing!” said Ruben. “Maybe she’ll be able to help us fix all these
    Ruby malfunctions and catch the bad guys causing them.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”鲁本说道。“也许她能帮我们修好这些Ruby故障，抓住那些搞破坏的坏人。”
- en: “I hope so. Ah! Here we are,” said the King, and he skidded to a halt in front
    of an enormous wooden door with golden handles.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “我希望如此。啊！我们到了，”国王说道，急停在一扇带有金色把手的巨大木门前。
- en: He pulled down on both handles at once, swung the doors open, and rushed inside.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 他同时拉下两个把手，猛地推开门，急匆匆地冲了进去。
- en: The Queen was seated at her desk in a high-backed chair, furiously typing at
    a Computing Contraption.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 皇后正坐在一把高背椅上，专心致志地敲打着计算机设备。
- en: “They tried to break into my Computing Contraption!” she said. “The very idea!”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “他们试图闯入我的计算机设备！”皇后说道。“这简直不可理喻！”
- en: “They who?” asked Scarlet and Ruben together as they followed the King into
    the Queen’s Royal Office.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “他们是谁？”斯嘉丽和鲁本齐声问道，跟着国王进入皇后的皇家办公室。
- en: “I don’t know!” said the Queen, still typing. “There were four of them, and
    I caught them at my Computing Contraption, trying to figure out my password. Luckily,
    I’m a stickler for security.”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道！”皇后一边打字一边说道。“他们有四个人，我抓到他们在我的计算机设备前，试图破解我的密码。幸运的是，我对安全性要求非常严格。”
- en: “That she is,” said the King, wringing out his fluffy white beard. “She won’t
    even let me buy gummy bears on the Internet!”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “她确实是，”国王说道，一边拧干他那蓬松的白胡子。“她甚至不让我在网上买橡皮糖！”
- en: “For good reason,” said the Queen, and she stopped typing. “The last time I
    let you do that, you sent a small fortune to someone claiming to be the Gummy
    Bear King!” She paused, looking at Scarlet and Ruben. “I don’t believe we’ve met,”
    she said. “Who might you be?” She looked the three of them up and down. “And why
    are you all so wet?”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “有充分的理由，”皇后说道，停下了打字。“上次我让你做这事时，你竟然把一大笔钱给了一个自称是橡皮糖国王的人！”她停顿了一下，看了看斯嘉丽和鲁本。“我相信我们还没见过面，”她说道。“你们是？”她上下打量了他们三人。“你们为什么都这么湿？”
- en: “I’m Ruben,” said Ruben, “and this is Scarlet. We’re helping the King find whoever’s
    responsible for all the Ruby malfunctions going on, and we ran all the way from
    the Carmine Pines and swam up through the Mysterious Pipe to do it!”
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “我是鲁本，”鲁本说道，“这是斯卡雷特。我们在帮助国王找出是谁让 Ruby 出现故障的，我们从深红松树林一路跑来，游过神秘管道来帮助处理这件事！”
- en: “Well, you’ve come to the right place!” said the Queen. “I’m going to track
    down those ne’er-do-wells if it’s the last thing I do.” She began typing again.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，你来对地方了！”女王说道。“如果这事我不做到底，那就没天理了。”她又开始打字。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160041.png.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160041.png.jpg)'
- en: “Did you get a good look at any of them?” asked Scarlet. “Were there any clues?
    Did you see or hear anything that might help us catch them?”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “你有好好观察过他们吗？”斯卡雷特问道。“有没有什么线索？你看到或听到什么能帮助我们抓住他们的吗？”
- en: “I didn’t see their faces,” the Queen said, “but I overheard them trying to
    figure out my Computing Contraption’s password. There were four of them—it sounded
    like two boys and two girls. I got home early from the Hacktastic Ruby Conference
    and thought I’d try out some of the Ruby tricks I learned, and when I came up
    to my office, I caught them in the act! They ran when I shouted at them to surrender,
    and I sent the palace guards after them. In the meantime, I’ve been working to
    increase the security on my Computing Contraption to ensure it’s completely immune
    to attack.”
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “我没看到他们的脸，”女王说道，“但是我听到他们试图破解我的计算设备密码。他们有四个人——听起来是两个男孩和两个女孩。我从 Hacktastic Ruby
    大会早早回来，想着试试我学到的一些 Ruby 技巧，当我走进办公室时，正好抓到他们作案！我大声喊叫他们投降，他们就跑了，我立刻派卫兵去追他们。与此同时，我一直在努力增加计算设备的安全性，确保它能完全防御攻击。”
- en: “Did they get anything from your Computing Contraption?” Scarlet asked.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “他们从你的计算设备上得到了什么吗？”斯卡雷特问道。
- en: “Thank heavens, no,” said the Queen. “They didn’t get my password, but we’d
    be in terrible trouble if they had. With that, they could access any system in
    the kingdom with no restrictions!”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “谢天谢地，不是，”女王说道。“他们没拿到我的密码，但如果他们拿到，我们就麻烦大了。凭那个，他们可以不受任何限制地访问王国里的任何系统！”
- en: “These villains are escalating!” said the King, pacing around the Queen’s office.
    “We’ve got to catch them as quickly as possible, before they strike again. We
    might not be so lucky next time.”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “这些坏蛋越来越猖狂了！”国王在女王的办公室里来回踱步。“我们得尽快抓住他们，不能让他们再作恶。下次我们可能就不这么幸运了。”
- en: The Queen nodded. “I’ve instructed the guards to bring any suspects they catch
    directly to us for questioning,” she said. “In the meantime, I’ve upgraded all
    the security on my Computing Contraption. The only thing left to do is update
    some of my Ruby programs to make them more secure, too!”
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 女王点了点头。“我已经指示卫兵将任何他们抓到的嫌疑人直接带来我们这里审问，”她说道。“与此同时，我已经升级了我的计算设备的所有安全措施。剩下的就是更新我的一些
    Ruby 程序，使它们也更安全！”
- en: “Ruby!” said Ruben. “That happens to be our specialty. Can we help?” he asked.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “Ruby！”鲁本说道。“那正好是我们的专长。我们能帮忙吗？”他问道。
- en: The Queen smiled. “That would be lovely,” she said. “While I’m something of
    an expert in more than a few programming languages, I’m pretty new to Ruby.” She
    slid over in her chair, and Ruben and Scarlet clambered up beside her.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 女王微笑着说道。“那真是太好了，”她说道。“虽然我在不少编程语言上都有些造诣，但在 Ruby 上我还是个新手。”她在椅子上挪了挪，鲁本和斯卡雷特爬到她旁边坐下。
- en: “First things first,” said the Queen. “Do you know how to create a Ruby class?”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “首先，首先，”女王说道，“你们知道怎么创建 Ruby 类吗？”
- en: A Brush-up on Classes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习一下类
- en: '“I think so,” said Ruben. “May I create any class I want?” The Queen nodded,
    and Ruben typed into her Computing Contraption:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “我想是的，”鲁本说道。“我可以创建任何我想要的类吗？”女王点了点头，鲁本在她的计算设备上输入了代码：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “I see!” said the Queen. “You’ve defined an `Animal` class. You’re using `attr_accessor`
    to automatically make a method to access the `name`s of your animals, and the
    `initialize` method sets the animal’s `@name` and number of `@leg`s whenever a
    new animal is created.”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “明白了！”女王说道。“你定义了一个 `Animal` 类。你使用了 `attr_accessor` 来自动生成一个方法，用来访问动物的 `name`，而
    `initialize` 方法则在每次创建新动物时，设置动物的 `@name` 和 `@leg` 数量。”
- en: “Yup!” said Ruben. “And if we create an animal with `Animal.new` but don’t give
    it a number of legs, it’ll be `4` by default.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”鲁本说道。“如果我们用 `Animal.new` 创建一个动物，但没有指定它的腿数，它默认会是 `4` 条腿。”
- en: The Queen nodded. “That makes sense to me. Why don’t you go ahead and create
    a couple of animals?”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 女王点了点头。“这对我来说很有道理。你们可以开始创建几个动物试试。”
- en: 'Ruben typed some more:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本继续打字：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: “Wonderful! At ➊, we’ve created `monkey`, an instance of the `Animal` class,
    and created it with the name `'George'` and `2` legs. Next, at ➋, we’ve changed
    our `monkey`’s name to `'Kong'` to show that our `attr_accessor` lets us both
    read *and* change the name.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！在 ➊，我们创建了 `monkey`，一个 `Animal` 类的实例，并将它的名字设为 `'George'`，腿数为 `2`。接下来，在 ➋，我们将
    `monkey` 的名字改为 `'Kong'`，展示了我们的 `attr_accessor` 让我们不仅能读取*还*能更改名字。
- en: “Finally, at ➌, we’ve created a second instance of the `Animal` class, `dog`,
    with the name `'Bigelow'`. Since we didn’t create our `dog` with a number of legs,
    it gets four by default, as you can see by the return value at ➍.”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: “最后，在 ➌，我们创建了 `Animal` 类的第二个实例 `dog`，名字为 `'Bigelow'`。由于我们没有为 `dog` 指定腿数，它默认会有四条腿，就像在
    ➍ 所显示的返回值那样。”
- en: A Couple of Classes
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些类
- en: The Queen thought for a moment. “Yes, this will do nicely. Now then,” she continued,
    “imagine if instead of just having `monkey` and `dog` as instances of `Animal`,
    we decided we wanted to have `Monkey` and `Dog` as separate classes instead. How
    could we do it?”
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 女王思考了一下。“是的，这样挺好。那么，”她接着说，“想象一下，如果我们不仅仅把 `monkey` 和 `dog` 当作 `Animal` 类的实例，而是想要将
    `Monkey` 和 `Dog` 作为单独的类来处理。我们该怎么做呢？”
- en: '“Well, we could do something like this,” Ruben said, and he typed:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，我们可以这样做，”Ruben 说道，他开始输入：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '“Precisely,” said the Queen. “That defines a `Monkey` class, and the monkeys
    it creates will have `@name`s and two `@leg`s. The `attr_accessor` also automatically
    creates a `name` method for each monkey so we can get its name. To create a new
    monkey from the class, we use `Monkey.new` and pass its name as a string value.
    Like this!” She typed into the Computing Contraption:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “正是如此，”女王说道。“这定义了一个 `Monkey` 类，猴子类创建的猴子会有 `@name` 和两个 `@leg`。`attr_accessor`
    还会自动为每只猴子创建一个 `name` 方法，让我们可以获取它的名字。为了从类中创建一只新的猴子，我们使用 `Monkey.new` 并传入它的名字作为字符串值。像这样！”她在计算机装置上输入：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '“We can do the same thing for our `Dog` class,” Ruben continued. “We know that
    pretty much every dog has four legs, so it’ll look just like the `Monkey` class,
    only the class name will be different and the number of `@leg`s will be `4`.”
    He typed into the Computing Contraption:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “我们也可以对 `Dog` 类做同样的事情，”Ruben 继续说道。“我们知道几乎每只狗都有四条腿，所以它的结构会和 `Monkey` 类一样，只是类名不同，`@leg`
    的数量会是 `4`。”他说着在计算机装置上输入：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Just like we can create new monkeys with `Monkey.new` and pass in a string
    for the monkey’s name, we can create new dogs with `Dog.new` and pass in a string
    for the dog’s name!” Ruben said.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “就像我们可以通过 `Monkey.new` 创建新的猴子，并传入一个字符串作为猴子的名字一样，我们也可以通过 `Dog.new` 创建新的狗狗，并传入一个字符串作为狗的名字！”Ruben
    说道。
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: “That’s certainly one way to create a couple of classes,” said the Queen, “but
    it looks like you had to write a lot of the same code for both your `Monkey` and
    your `Dog` class.”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “这肯定是创建一对类的方式之一，”女王说道，“但看起来你为 `Monkey` 和 `Dog` 类写了很多重复的代码。”
- en: “That’s true,” said Ruben. “Is that okay?”
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”Ruben 说道。“这样可以吗？”
- en: Inheritance and DRY Code
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承与 DRY 代码
- en: “Well,” said the Queen, “any time you find yourself writing something more than
    once, you should ask yourself whether you *have* to. Good code—unlike my husband
    here,” she said, stifling a laugh as the King poured water out of the sleeves
    of his kingly robe, “—should be *DRY*.”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”女王说道，“每当你发现自己写了重复的代码时，你应该问问自己是否*非得*这样做。好的代码——不像我丈夫这样，”她忍住笑意说道，国王正在从他华丽的王袍袖子里倒出水，“——应该是
    *DRY* 的。”
- en: “I know that one!” said the King, shaking drops of water off his string and
    replacing it in his pocket. “It stands for *Don’t* *Repeat* *Yourself*.”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道那个！”国王说道，一边将水滴从他的弦上抖掉并放回口袋。“它代表 *不要* *重复* *自己*。”
- en: “He knows that one because he repeats himself all the time,” the Queen whispered
    to Scarlet and Ruben. “But yes,” she said, “if you avoid repeating yourself in
    your code, you save lots of time! Also, if you ever have to change something,
    you only need to change it *one* place, not several.”
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “他知道这个，因为他总是重复自己，”女王低声对 Scarlet 和 Ruben 说道。“但是，是的，”她接着说，“如果你避免在代码中重复自己，就能节省大量时间！而且，如果你需要修改某个部分，你只需要修改
    *一个* 地方，而不是多个地方。”
- en: “I like the sound of that!” said Ruben, “but how can we make our class code
    more DRY?”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “我喜欢这个！”Ruben 说道，“但我们怎么才能让我们的类代码更 *DRY* 呢？”
- en: “With *inheritance*,” said the Queen.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “通过 *继承*，”女王说道。
- en: “Inheritance!” said Scarlet. “I think I’ve heard it mentioned before, but I’m
    not sure what it is.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “继承！”Scarlet 说道。“我好像以前听说过这个，但不太清楚它是什么意思。”
- en: “I’ll show you,” said the Queen, explaining as she typed into the Computing
    Contraption. “We’ve already created a class called `Animal`. What if we could
    use that class as a way to create both our `Monkey` *and* `Dog` classes?”
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “我来给你们展示，”女王一边解释一边在计算装置上敲打着。“我们已经创建了一个名为`Animal`的类。假设我们可以使用这个类作为创建`Monkey` *和*`Dog`类的方式呢？”
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '“The `class Dog < Animal` part means that the `Dog` class *inherits from* the
    `Animal` class. It says to Ruby: ‘Make a new class called `Dog` that knows how
    to do everything `Animal` does,’” the Queen said. “Then we just add a method,
    like we’d normally do. Here, I’m adding a `bark` method for `Dog`s, since dogs
    know how to bark.” She rolled up her sleeves.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “`class Dog < Animal` 这一部分的意思是`Dog`类*继承自*`Animal`类。它对Ruby说：‘创建一个新的名为`Dog`的类，它知道如何做`Animal`类做的一切，’”女王说道。“然后我们只需要像平常一样添加一个方法。在这里，我为`Dog`类添加了一个`bark`方法，因为狗会叫。”她卷起了袖子。
- en: '“Here’s the amazing part: because `Dog` inherits from `Animal`, new dogs can
    do anything animals can do *and* anything dogs can do. They’ll have a `name` method
    and a default of four legs, and know how to `bark`!”'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “这里有一个惊人的地方：因为`Dog`继承自`Animal`，新的狗类可以做任何动物能做的事，*并且*还能够做狗能做的事。它们会有一个`name`方法和默认的四条腿，并且知道如何`bark`！”
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “Astounding!” said the King.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “令人震惊！”国王说道。
- en: “Isn’t it?” said the Queen. “It also means that instead of typing all that class
    definition business again for our `Monkey` class, we can just inherit from `Animal`
    again. Because we inherit from `Animal`, we get our `name` method and a default
    `@legs` value of `4`, *plus* we’ll get this neat new `make_sounds` method I added
    just for monkeys.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “不是吗？”女王说道。“这也意味着，我们可以通过再次从`Animal`类继承，而不必重新输入所有关于`Monkey`类的定义。因为我们从`Animal`继承，我们得到了`name`方法和默认的`@legs`值为`4`，*而且*我们还会得到我专为猴子添加的这个新的`make_sounds`方法。”
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Now we can create a new monkey with a name and two legs. Not only can we change
    its name with the `name=` method we inherited from `Animal`, but we can also `make_sounds`!”
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “现在我们可以创建一个有名字和两条腿的新猴子了。不仅可以通过我们从`Animal`继承来的`name=`方法改变它的名字，还可以`make_sounds`！”
- en: “We can get the name and change it?” Ruben asked.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “我们可以获取名字并更改它吗？”Ruben问道。
- en: The Queen nodded. “Remember, we inherited from `Animal`, and `Animal` has `attr_accessor
    :name`. That automatically creates a `name` method for getting the name and a
    `name=` method for setting the name. See?”
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 女王点了点头。“记住，我们是从`Animal`继承的，而`Animal`有`attr_accessor :name`。这会自动创建一个`name`方法，用于获取名字，还有一个`name=`方法，用于设置名字。明白了吗？”
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “Wow!” said Scarlet, “That’s amazing—the `monkey` and the `dog` have their own
    methods, but they also can do anything an `Animal` can do!”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”Scarlet说道，“这太神奇了——`monkey`和`dog`都有各自的方法，但它们也可以做任何`Animal`能做的事！”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160043.png.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160043.png.jpg)'
- en: “That’s what makes inheritance so wonderful!” said the Queen. “Given our `Animal`
    class from before, which had an `attr_accessor` for `:name` and an `initialize`
    method that set the `@name` and `@legs` instance variables, we can make two new
    classes that inherit that information and add some new things—like a `bark` method
    for `Dog` instances and a `make_sounds` method for `Monkey` instances.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “这就是继承如此美妙的原因！”女王说道。“考虑到我们之前的`Animal`类，它有`attr_accessor`用于`:name`，并且有一个`initialize`方法来设置`@name`和`@legs`实例变量，我们可以创建两个新的类，这些类继承了这些信息，并添加一些新内容——比如为`Dog`实例添加一个`bark`方法，为`Monkey`实例添加一个`make_sounds`方法。”
- en: “Inheritance in Ruby works exactly as it does in real life,” the Queen continued.
    “Just like you might have inherited your father’s eye color or your mother’s math
    smarts, objects in Ruby can inherit information and methods from other objects.”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “Ruby中的继承就像现实生活中的继承一样，”女王继续说道。“就像你可能继承了你父亲的眼睛颜色或你母亲的数学才能，Ruby中的对象也可以继承其他对象的信息和方法。”
- en: “Oh!” said Ruben. “So not only can we use classes to create lots of similar
    objects and avoid writing extra code, but we can even write classes that borrow
    code from other classes?”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “哦！”Ruben说道。“所以我们不仅可以使用类来创建许多相似的对象，避免编写额外的代码，我们还可以编写从其他类借用代码的类？”
- en: “On the nose,” said the Queen. “We might want to use inheritance in our code
    if two classes have what I like to call an ‘is-a’ relationship, as in ‘a monkey
    *is* *a* kind of animal’ or ‘a dog *is* *a* kind of animal.’”
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “说得对，”女王说道。“如果两个类之间有我喜欢称之为‘is-a’关系，比如‘猴子*是*一种动物’或者‘狗*是*一种动物’，我们可能会在代码中使用继承。”
- en: “But a `Dog` would never inherit from a `Monkey`,” said Scarlet, “because a
    dog *isn’t* a kind of monkey.”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “但是`Dog`类永远不会继承自`Monkey`类，”Scarlet说，“因为狗*不是*猴子的一种。”
- en: “Exactly,” said the Queen.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”女王答道。
- en: “Could you show us the syntax again?” said Scarlet. “This is a good trick and
    I want to remember it.”
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “你能再展示一下语法吗？”Scarlet说。“这是个好技巧，我想记住它。”
- en: Subclass and Superclass
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子类和父类
- en: '“Of course,” said the Queen. “When you have one class that inherits from another,
    you use the `class` keyword, just like always. Then you write the name of the
    class that will inherit, which we call the *subclass* or the *child* *class*,
    and then a `<`. You can think of that little `<` as the tip of an arrow that says,
    ‘Put all the powers and abilities of the class on the right into the class on
    the left!’ To finish up, you then write the name of the class you’re inheriting
    from to the right of the `<`, which we call the *superclass* or *parent* *class*.
    Finally, you just define any new methods as you normally would. It looks like
    this,” she said, and typed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “当然可以，”女王回答。“当你有一个类继承自另一个类时，你使用`class`关键字，就像往常一样。然后你写下要继承的类的名称，我们称之为*子类*或*子类*，然后是`<`。你可以把那个小小的`<`看作是箭头的尖端，意思是‘把右边类的所有能力和特性带入左边的类！’最后，你在`<`的右边写下你要继承的类的名称，这就是我们所说的*父类*或*父类*。最后，你可以像平常一样定义任何新的方法。它看起来像这样，”她说着并敲击键盘：
- en: super_and_subclass.rb
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: super_and_subclass.rb
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: “Here we have two classes, `MySuperclass` and `MySubclass`,” the Queen explained.
    “`MySubclass` inherits from `MySuperclass` on line ➋, so instances of `MySubclass`
    not only have the `say_goodbye` method defined in the `MySubclass` class, but
    they can also use the `say_hello` method they inherit from `MySuperclass`! Let’s
    see what happens when we create a new instance of `MySubclass`.”
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “这里我们有两个类，`MySuperclass`和`MySubclass`，”女王解释道。“`MySubclass`在第➋行继承自`MySuperclass`，因此`MySubclass`的实例不仅拥有在`MySubclass`类中定义的`say_goodbye`方法，而且还可以使用它从`MySuperclass`继承的`say_hello`方法！让我们看看当我们创建一个新的`MySubclass`实例时会发生什么。”
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “I created an instance of `MySubclass` called `subby` using `MySubclass.new`,”
    said the Queen. “Just like I promised, `subby` can use both the `say_goodbye`
    method defined in `MySubclass` as well as the `say_hello` method defined in `MySuperclass`,
    because `MySubclass` inherits from `MySuperclass` and can therefore do anything
    `MySuperclass` knows how to do.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “我通过`MySubclass.new`创建了一个名为`subby`的`MySubclass`实例，”女王说道。“正如我承诺的那样，`subby`可以使用在`MySubclass`中定义的`say_goodbye`方法，也可以使用在`MySuperclass`中定义的`say_hello`方法，因为`MySubclass`继承自`MySuperclass`，因此它可以做任何`MySuperclass`能做的事。”
- en: “Thanks!” said Scarlet, “I think I’ve got it now.” She studied the screen for
    a few seconds. “Is it possible for a class to inherit from more than one other
    class?” she asked.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: “谢谢！”Scarlet说，“我现在明白了。”她看着屏幕几秒钟。“一个类可以继承多个其他类吗？”她问道。
- en: “Alas, no,” said the Queen. “You can have only one class name on the left side
    of the `<` and one class name on the right side. However!” she continued, “there
    *is* a Ruby trick that lets you mix the behavior of several classes into one,
    which we’ll get to in a little while.”
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “唉，不行，”女王说。“你只能在`<`的左边放一个类名，在右边放一个类名。然而！”她继续说道，“*确实*有一个Ruby技巧，可以让你将多个类的行为混合到一个类中，我们稍后会讲到。”
- en: “Okay,” said Ruben, “but what if you want your subclass to have a different
    version of a method than the superclass has?”
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，”Ruben说，“但是如果你想让你的子类有一个与父类不同版本的方法呢？”
- en: 'Overriding Methods: Pirates are People, Too'
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖方法：海盗也是人
- en: '“Now *that*, we can do,” said the Queen. “Any subclass can override a method
    it inherits from its superclass at any time. Let’s have a look. We’ll create a
    superclass called `Person` and subclass called `Pirate`, with a `speak` method
    for both. Of course, pirates and regular people speak pretty differently, don’t
    they?” Scarlet and Ruben nodded. “So,” the Queen continued, “the two `speak` methods
    will be different.” She typed into the Computing Contraption:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “现在*这个*，我们可以做到了，”女王说。“任何子类都可以在任何时候覆盖它从父类继承的方法。让我们来看看。我们会创建一个名为`Person`的父类和一个名为`Pirate`的子类，每个类都有一个`speak`方法。当然，海盗和普通人的说话方式可不太一样，对吧？”Scarlet和Ruben点点头。“所以，”女王继续说道，“这两个`speak`方法会不同。”她在计算设备上敲入了代码：
- en: pirates_and_people.rb
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: pirates_and_people.rb
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: “Starting at ➊, I’ve defined the `Person` class with an `attr_reader :name`,
    so we’ll be able to get and change the name of any `Person` instances,” the Queen
    said. “The `initialize` method sets the `name` to the string we’ll pass in when
    we call `Person.new`, and the `speak` method just prints out `'Hello!'`”
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: “从 ➊ 开始，我定义了`Person`类并添加了`attr_reader :name`，这样我们就能够获取和修改任何`Person`实例的名字，”女王说道。“`initialize`方法将`name`设置为我们在调用`Person.new`时传入的字符串，而`speak`方法只会打印`'Hello!'`。”
- en: “With you so far!” said the King.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: “到目前为止我跟上了！”国王说道。
- en: “Next, at ➋, I’ve defined the `Pirate` class to inherit from `Person`, so `Pirate`
    instances will be able to do anything a `Person` instance can do,” said the Queen.
    “But! I’ve given `Pirate` its very own `speak` method that prints `'Arr!'`. We’ll
    see how that works in a moment. First, let’s go ahead and create an instance of
    each class to make sure we can create it and get its name without any trouble.”
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，在 ➋ 处，我定义了`Pirate`类继承自`Person`类，因此`Pirate`实例将能够执行`Person`实例能够执行的任何操作，”女王说道。“但是！我为`Pirate`类定义了自己的`speak`方法，打印出`'Arr!'`。我们稍后会看看它是如何工作的。首先，让我们创建每个类的一个实例，确保我们能够顺利创建它并获取它的名字。”
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: “Now, let’s test our `speak` method,” the Queen said. “Because `Pirate` created
    its own `speak` method, instances of `Pirate` will use that one instead of the
    one inherited from `Person`,” she explained. “But since we didn’t change the `name`
    and `name=` methods given to `Pirate` by `attr_reader :name`, which it inherited,
    we can get and change names the same way for both people and pirates!”
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，让我们测试一下我们的`speak`方法，”女王说道。“因为`Pirate`创建了自己的`speak`方法，所以`Pirate`的实例将使用那个方法，而不是继承自`Person`的那个方法，”她解释道。“但是由于我们没有修改`Pirate`通过`attr_reader
    :name`继承来的`name`和`name=`方法，我们仍然可以像处理普通人一样处理海盗的名字——获取和修改名字。”
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: “That’s really cool,” Ruben said, “but when would we decide to override a method?”
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: “那真是太酷了，”鲁本说道，“但是我们什么时候决定重写一个方法呢？”
- en: “Any time one class inherits from another and you want *most* of the same behavior,
    but not all,” said the Queen. “In this case, we want a `Pirate` to be a `Person`
    and to be created like one, but we want to make sure our `Pirate`s sound like
    pirates. So we simply override the methods we want to be different between regular
    old people and pirates!”
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “每当一个类继承自另一个类，而且你想要*大部分*相同的行为，但不是完全一样的时候，”女王说道。“在这个例子中，我们希望`Pirate`是`Person`，并且像`Person`一样创建它，但我们希望确保我们的`Pirate`听起来像海盗。所以我们只需要重写我们希望在普通人和海盗之间有所不同的方法！”
- en: “That makes sense,” said Scarlet, “but what if we want a little of both? That
    is, what if we want to *modify* a method we inherit, but not completely *replace*
    it?”
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: “那说得通，”Scarlet说道，“但是如果我们想要两者的结合呢？也就是说，如果我们想要*修改*一个继承来的方法，但又不完全*替换*它呢？”
- en: Using super
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用super
- en: '“I’m so glad you asked,” said the Queen. “That’s absolutely something Ruby
    lets us do—all we need is the `super` keyword. Using the `Animal` class we created
    earlier, we’ll create a new version of a method that already exists, just like
    we did with the `speak` method, and add our new code. Then, we’ll use `super`
    to tell Ruby: ‘Okay, I’m done adding new things to this method! Now have it do
    all the things the superclass’s version of the method does.’ It works like this,”
    she said, and typed:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: “我很高兴你问了这个问题，”女王说道。“这正是Ruby允许我们做的——我们只需要`super`关键字。使用我们之前创建的`Animal`类，我们将创建一个已经存在的方法的新版本，就像我们之前对`speak`方法所做的那样，并添加我们的新代码。然后，我们会使用`super`来告诉Ruby：‘好吧，我已经完成了对这个方法的修改！现在让它执行父类版本方法中所有的操作。’它是这样工作的，”她说着，输入了：
- en: super_dog.rb
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: super_dog.rb
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: “Now we can create a `Dog` class that inherits from `Animal`, just like before,”
    said the Queen.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: “现在我们可以像之前一样创建一个继承自`Animal`的`Dog`类，”女王说道。
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: “Here, though, we’ve given `Dog` its own `initialize` method, which `Dog` instances
    will use instead of the one inherited from `Animal`,” the Queen continued.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: “不过在这里，我们为`Dog`类定义了自己的`initialize`方法，`Dog`的实例将使用这个方法，而不是继承自`Animal`的那个方法，”女王继续说道。
- en: “Just like pirates used their own `speak` method instead of the one from `Person`,”
    Ruben said.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: “就像海盗使用自己的`speak`方法，而不是`Person`类的那个方法一样，”鲁本说道。
- en: '“Exactly!” said the Queen. “We added our own `puts` statement to the `Dog initialize`
    method to print out a message, but then we used `super` to tell Ruby: ‘Okay! Now,
    use `Animal`’s `initialize` method.’ All `super` does is call the version of the
    method from the superclass! Since `Animal`’s `initialize` method sets the `@name`
    and the `@legs` instance variables for us, you see not only `@name="Bigelow"`
    but `@legs=4`!”'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “正是！”王后说。“我们在`Dog initialize`方法中添加了自己的`puts`语句来打印出一条信息，但之后我们使用了`super`来告诉 Ruby：‘好的！现在，使用`Animal`的`initialize`方法。’`super`所做的就是调用父类方法的版本！由于`Animal`的`initialize`方法为我们设置了`@name`和`@legs`实例变量，因此你会看到不仅有`@name="Bigelow"`，还有`@legs=4`！”
- en: “Gracious me, that’s astounding,” said the King, who had finally dried himself
    off. “Is there anything Ruby *can’t* do?”
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: “哎呀，太惊人了，”国王说，他终于把自己弄干了。“Ruby到底有什么是*做不到*的？”
- en: “That’s nothing,” said the Queen. “Now the real fun begins. We’ll use inheritance,
    method overriding, and `super` to create some trusty friends to defend us against
    the intruders in our kingdom!”
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: “这不算什么，”王后说。“真正有趣的部分来了。我们将通过继承、方法重写和`super`来创造一些可靠的伙伴，帮助我们防御入侵我们王国的敌人！”
- en: Protecting the Kingdom with GuardDogs and FlyingMonkeys
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用守卫狗和飞猴保护王国
- en: '“But before we do that,” said the Queen, “let’s get back to our `Dog`s and
    `Monkey`s. First, I’ll redefine a `Dog` class, since it’s been a bit since we
    looked at it.” She typed into her Computing Contraption:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “但在我们继续之前，”王后说，“我们还是回到我们的`Dog`和`Monkey`类吧。首先，我会重新定义一个`Dog`类，因为已经有一段时间没看它了。”她在她的计算机装置上打字：
- en: guard_dog.rb
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: guard_dog.rb
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '“Our `Dog` class inherits from `Animal` and will be initialized with a `name`,
    and it will have a `bark` method to let it bark whenever it likes,” said the Queen.
    “Next, I’ll create a brand-new class that inherits from `Dog`. Let’s keep adding
    to *guard_dog.rb*!” She typed into the Computing Contraption:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “我们的`Dog`类继承自`Animal`，并将以`name`进行初始化，它还会有一个`bark`方法，随时可以让它叫个不停，”王后说。“接下来，我将创建一个全新的类，继承自`Dog`。让我们继续修改*guard_dog.rb*吧！”她在计算机装置上打字：
- en: guard_dog.rb
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: guard_dog.rb
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '“Here, I’ve created a `GuardDog` class that inherits from `Dog`. At ➊, we have
    an `attr_accessor` for `:strength`, so we’ll be able to set and get the strength
    of our new guard dog. Next, I added an `initialize` method at ➋ that partly overrides
    the one from `Dog`: it sets the `GuardDog`’s `@strength`, then calls `super` with
    just the `name` to use `Dog`’s `initialize` method, which sets the `@name`. At
    ➌, I completely overrode the `bark` method from `Dog` and gave `GuardDog` its
    own phrase to say.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: “在这里，我创建了一个继承自`Dog`的`GuardDog`类。在 ➊，我为`:strength`添加了一个`attr_accessor`，这样我们就可以设置和获取新守卫狗的力量。接下来，在
    ➋，我添加了一个`initialize`方法，它部分重写了`Dog`中的`initialize`方法：它设置了`GuardDog`的`@strength`，然后仅传递`name`调用`super`，以使用`Dog`的`initialize`方法，进而设置`@name`。在
    ➌，我完全重写了`Dog`中的`bark`方法，并为`GuardDog`设置了一个独有的叫声。
- en: Finally at ➍, I added a brand-new `attack` method that prints out a string saying
    how much damage the dog did. That method uses Ruby’s built-in `rand` method to
    choose a random number between zero and whatever the `GuardDog`’s strength is.”
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后在 ➍，我添加了一个全新的`attack`方法，用于打印出一条字符串，说明狗造成了多少伤害。该方法使用了 Ruby 内置的`rand`方法来选择一个介于零和`GuardDog`的力量之间的随机数。
- en: “Wow!” said Ruben. “That’s amazing! And I didn’t know you could call `super`
    with arguments.”
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”鲁本说。“太棒了！我没想到你还能用参数来调用`super`。”
- en: “Oh, yes,” said the Queen. “If you call `super` by itself, it calls the superclass’s
    `initialize` method with all of the arguments the subclass’s `initialize` method
    got. `GuardDog` takes one more argument than `Dog`—it takes `strength` as well
    as `name`—and that would cause an error if we tried to give both of those to `Dog`,
    which is created only with a `name`. So we call `super` with just `name` to make
    sure that `Dog`’s `initialize` method gets the number of arguments it expects.”
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，是的，”王后说。“如果单独调用`super`，它会用子类`initialize`方法获得的所有参数来调用父类的`initialize`方法。`GuardDog`比`Dog`多接受一个参数——它还需要`strength`，而`Dog`仅用`name`来创建。如果我们尝试同时给`Dog`传递这两个参数，就会导致错误。所以我们只用`name`来调用`super`，确保`Dog`的`initialize`方法能接收到它期望的参数数量。”
- en: Every GuardDog Has His Day
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每一只守卫狗都有它的日子
- en: “Now then,” the Queen continued, “let’s create a new `GuardDog` and test it
    out!”
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，”王后继续说，“让我们创建一个新的`GuardDog`并进行测试吧！”
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: “Now we’ve got a special kind of dog—a `GuardDog`—with its own set of methods!”
    The Queen said. “We partly overrode its `initialize` method because we wanted
    it to have `strength`, but then we used `super` to finish creating it like a regular
    dog. We overrode `bark` because we wanted our `GuardDog` to have the `bark` method,
    then finished up by adding a completely new `attack` method that `GuardDog`s have
    but `Dog`s don’t.”
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: “现在我们有了一种特殊的狗——`GuardDog`——它有自己的一套方法！”皇后说。“我们部分重写了它的`initialize`方法，因为我们希望它有`strength`，但之后我们使用`super`像创建普通狗那样完成了它的创建。我们重写了`bark`方法，因为我们希望`GuardDog`有`bark`方法，然后通过添加一个完全新的`attack`方法结束，`GuardDog`有这个方法，而普通的`Dog`没有。”
- en: “I’m starting to get it now,” said Ruben. “We use inheritance to minimize the
    amount of code we have to retype, and we override methods when we want to make
    exceptions and give our subclasses special behavior!” The Queen nodded.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: “我现在开始明白了，”鲁本说。“我们通过继承来减少需要重新输入的代码量，当我们想做出例外并赋予子类特殊行为时，我们重写方法！”皇后点点头。
- en: “Don’t forget `super`,” Scarlet said. “We use that when we want to partly change
    the behavior of a method in a subclass, but not completely replace it.”
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: “别忘了`super`，”斯嘉丽说。“当我们想要部分修改子类中方法的行为，但不完全替代它时，我们会用这个。”
- en: The King furrowed his brow. “This makes sense, but could we see a bit more?”
    he asked. “It’s an awful lot to keep in my head all at once.”
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 国王皱起了眉头。“这很有道理，但我们能再看一些吗？”他问。“一下子记住这些有点多。”
- en: Once More, with Feeling!
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再来一次，带点情感！
- en: Ruben nodded. “Could we have one more example, just to be sure we understand?”
    he asked.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本点点头。“能再来一个例子，确保我们理解吗？”他问。
- en: '“Of course,” said the Queen. “Here’s another example of inheritance, method
    overriding, and `super`, this time using our trusty `Monkey` class. Let’s make
    `Monkey` look like this,” she said, and typed:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”皇后说。“这是另一个继承、方法重写和`super`的例子，这次我们使用我们可靠的`Monkey`类。让我们让`Monkey`看起来像这样，”她说着，打了几行代码：
- en: flying_monkey.rb
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: flying_monkey.rb
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: “Here, we have a `Monkey` class. Using `attr_reader`, we can get (but not change)
    our monkey’s `name` and number of `arms`, which defaults to `2`. We also have
    a `make_sounds` method that prints out a string.”
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: “在这里，我们有一个`Monkey`类。通过使用`attr_reader`，我们可以获取（但不能修改）猴子的`name`和`arms`数量，默认为`2`。我们还有一个`make_sounds`方法，它会打印出一个字符串。”
- en: “Looks pretty standard,” said the King.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: “看起来很标准，”国王说。
- en: '“Next,” the Queen continued, “we’ll create a `FlyingMonkey` class that inherits
    from `Monkey`. We’ll keep adding to *flying_monkey.rb*!” She typed into her Computing
    Contraption:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，”皇后继续说，“我们将创建一个继承自`Monkey`的`FlyingMonkey`类。我们将继续在*flying_monkey.rb*中添加内容！”她在她的计算机装置中输入了代码：
- en: flying_monkey.rb
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: flying_monkey.rb
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: “For our `FlyingMonkey` class,” said the Queen, “we first inherit from `Monkey`
    ➊. Next, we add an `attr_reader` for `:wings` so we know how many wings our `FlyingMonkey`
    has ➋. We `initialize` the flying monkey with a certain number of `@wings`, but
    then call `super` to have the `Monkey` class take care of setting the `@name`
    and number of `@arms` ➌. We then define a brand-new `throw_coconuts` method ➍
    that uses Ruby’s built-in `rand` method to calculate how much damage the flying
    monkey can do by throwing coconuts. The number of coconuts is a random number
    between zero and the flying monkey’s number of arms, and the damage is that number
    multiplied by the number of wings the monkey has, because monkeys with more wings
    can fly higher.”
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: “对于我们的`FlyingMonkey`类，”皇后说，“首先我们继承自`Monkey` ➊。接下来，我们为`:wings`添加一个`attr_reader`，这样我们就知道我们的`FlyingMonkey`有多少翅膀
    ➋。我们用一个特定数量的`@wings`来初始化飞行猴子，但接着调用`super`让`Monkey`类来设置`@name`和`@arms`的数量 ➌。然后我们定义一个全新的`throw_coconuts`方法
    ➍，这个方法使用Ruby内置的`rand`方法来计算飞行猴子投掷椰子的伤害值。椰子的数量是一个从零到飞行猴子手臂数量之间的随机数，伤害值则是这个数字乘以猴子翅膀的数量，因为有更多翅膀的猴子可以飞得更高。”
- en: “Okay!” said the Queen. “Let’s create a flying monkey and test out his methods.”
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “好的！”皇后说。“让我们创建一个飞行猴子并测试它的方法。”
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: “Amazing!” said Scarlet. “We create the `FlyingMonkey` by using its own `initialize`
    method for wings, then letting `Monkey` finish up by setting the name and number
    of arms. And because `FlyingMonkey` inherits from `Monkey`, a flying monkey can
    not only `throw_coconuts` but can also use `Monkey`’s `make_sounds` method!”
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”斯嘉丽说。“我们通过使用`FlyingMonkey`自己的`initialize`方法来添加翅膀，然后让`Monkey`类来完成设置名字和手臂数量的工作。而且因为`FlyingMonkey`继承了`Monkey`，所以飞行猴子不仅可以`throw_coconuts`，还可以使用`Monkey`的`make_sounds`方法！”
- en: “Huzzah!” said the King. “I’ll bet that monkey is excellent at throwing coconuts,
    too. Which I suppose is only natural for a flying monkey.”
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “好极了！”国王说。“我敢打赌那只猴子在扔椰子方面也非常出色。想来，飞行猴子自然是应该具备这种本事。”
- en: “And I’ll bet he makes very good monkey sounds,” added Ruben.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: “我敢打赌它能发出非常逼真的猴子叫声，”鲁本补充道。
- en: '“I guess that makes sense,” said Scarlet, “but something’s been bothering me:
    why does our `GuardDog` know how to *talk*?”'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: “我想这有道理，”斯嘉丽说，“但有件事困扰着我：为什么我们的 `GuardDog` 会知道怎么*说话*？”
- en: “He’s a very smart dog,” said the Queen.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: “他是一只非常聪明的狗，”皇后说。
- en: “Very,” said the King.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: “非常聪明，”国王说。
- en: “Speaking of,” said the Queen, “I think it’s high time we put our guard dogs
    and flying monkeys to work!” She pressed a button on the arm of her chair, and
    her Computing Contraption began to hum. In a matter of seconds, doors slid open
    on all sides of her office, and dozens of guard dogs and flying monkeys emerged!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “说到这个，”皇后说，“我觉得该是时候让我们的守卫狗和飞行猴子开始工作了！”她按下椅子扶手上的一个按钮，她的计算设备开始嗡嗡作响。几秒钟内，办公室四周的门打开了，几十只守卫狗和飞行猴子涌了出来！
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160045.png.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160045.png.jpg)'
- en: “Taco Tuesdays!” said the King. “And I thought all these gadgets and hacking
    conferences were a waste of time and money.”
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: “塔可星期二！”国王说。“我原本以为所有这些小工具和黑客会议都是浪费时间和金钱。”
- en: “On the contrary,” said the Queen. “I think they just might save the kingdom!”
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: “恰恰相反，”皇后说，“我觉得它们可能会拯救这个王国！”
- en: The King opened his mouth to speak, but at that very moment, a bright red telephone
    began ringing madly on the Queen’s desk. She picked it up. “Hello?” she said.
    She waited a moment, and then her eyes went wide. “Stay right where you are! We’re
    on our way!” She hung up and jumped from her chair. “The guards have news!” she
    said. “They’re down in the Royal Stables. Quickly now, let’s go!”
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 国王张开嘴准备说话，但就在此时，皇后桌上的一部鲜红的电话开始疯狂地响了起来。她接起电话。“喂？”她说。她等了一会儿，眼睛睁得大大的。“保持原地不动！我们马上就到！”她挂断电话，跳下椅子。“卫兵有消息！”她说。“他们在皇家马厩。快点，我们走！”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160047.png.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160047.png.jpg)'
- en: And with that, the four of them dashed from the Queen’s office and headed for
    the stables out back, the guard dogs charging ahead and the flying monkeys following
    close behind.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 说完，他们四人迅速从皇后的办公室冲出去，朝着后面的马厩跑去，守卫狗们迅速前冲，飞行猴子紧随其后。
- en: The Queen’s Machine
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 皇后的机器
- en: This is getting exciting! While the King, the Queen, Ruben, and Scarlet go catch
    the bad guys, let’s jump in and help the Queen create a Ruby class to help keep
    all her royal business secret; after all, there’s only so much `GuardDog`s and
    `FlyingMonkey`s can do! I’m thinking some kind of login account for her Computing
    Contraption that’s a bit more secure than what she’s been using so far might be
    just what we need; we don’t want anyone breaking in again anytime soon. So, we’ll
    set up an `Account` class with a `password` for the Queen to use to log in to
    her computer.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是越来越激动人心了！在国王、皇后、鲁本和斯嘉丽去捉拿坏人时，让我们跳进去帮助皇后创建一个 Ruby 类，来帮助保持她所有的皇家事务机密；毕竟，`GuardDog`
    和 `FlyingMonkey` 也只能做这么多！我想为她的计算设备创建一个更加安全的登录账户，可能正是我们所需要的；我们可不希望有人再次轻易闯入。所以，我们将设置一个
    `Account` 类，里面有一个 `password`，让皇后用来登录她的计算机。
- en: Let’s begin by making a new file called secrecy.rb and typing the following
    code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个名为 secrecy.rb 的新文件开始，并键入以下代码。
- en: secrecy.rb
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: secrecy.rb
- en: '[PRE25]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is a long one, so let’s go through it step-by-step.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码比较长，我们一步一步地来看。
- en: First, we create a basic `Account` class at ➊ that sets up some instance variables
    (check them out in the `initialize` method at ➋). Instances of the `Account` class
    can have their `@username` and `@password` read and changed by any Ruby code that
    happens to want to, thanks to the `attr_accessor` for both `:username` and `:password`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 ➊ 创建一个基本的 `Account` 类，设置一些实例变量（在 ➋ 的 `initialize` 方法中查看它们）。`Account`
    类的实例可以通过 `attr_accessor` 让 Ruby 代码随意读取和修改 `@username` 和 `@password` 的值，提供了对这两个属性的访问权限。
- en: We’re off to a pretty good start! This code lets us create an account for someone
    and lets that person set her password, just as you might do for a website or your
    email. The problem, though, is that this code lets *any* Ruby code change the
    user’s password, which we definitely don’t want.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个相当不错的开始！这段代码让我们能够为某人创建账户，并允许该人设置密码，就像你为一个网站或电子邮件设置密码一样。然而，问题是，这段代码允许*任何*
    Ruby 代码修改用户密码，这显然是我们不希望看到的。
- en: To fix that, we create our `SuperSecretAccount` class at ➌ that inherits from
    `Account`, and here’s where things get interesting. First, `SuperSecretAccount`’s
    `initialize` method also takes a username and password, and it passes these to
    `super` to let `Account` take care of setting those instance variables ➍. The
    `SuperSecretAccount` also creates a new instance variable, `@reset_attempts`,
    to keep track of how many times a user tries to log in.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们在 ➌ 创建了 `SuperSecretAccount` 类，它继承自 `Account`，接下来是事情变得有趣的地方。首先，`SuperSecretAccount`
    的 `initialize` 方法同样接受一个用户名和密码，并将这些传递给 `super`，让 `Account` 负责设置这些实例变量 ➍。`SuperSecretAccount`
    还创建了一个新的实例变量 `@reset_attempts`，用来跟踪用户尝试登录的次数。
- en: Next, the `SuperSecretAccount` class overrides the `password=` method ➎ (one
    of the two created by `Account`’s `attr_accessor :password`), so it requires a
    user to enter her old password in order to change it. If she enters the correct
    password, the program updates the password and immediately `break`s out of the
    `while` loop; if she tries unsuccessfully three times, the program exits without
    changing the password.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`SuperSecretAccount` 类重写了 `password=` 方法 ➎（由 `Account` 的 `attr_accessor
    :password` 创建的两个方法之一），因此它要求用户输入旧密码才能更改密码。如果她输入了正确的密码，程序会更新密码并立即 `break` 跳出 `while`
    循环；如果她三次尝试失败，程序将在不更改密码的情况下退出。
- en: After that, the `SuperSecretAccount` class overrides the `password` method at
    ➏ (the other one created by `Account`’s `attr_accessor :password`) and makes it
    print the string `The password is secret!` instead of giving up the password as
    it normally would. Finally, we create a couple of accounts ➐ and try getting and
    setting the passwords ➑.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，`SuperSecretAccount` 类重写了 `password` 方法 ➏（由 `Account` 的 `attr_accessor :password`
    创建的另一个方法），并让它打印出字符串 `The password is secret!`，而不是像通常那样直接显示密码。最后，我们创建了几个账户 ➐，并尝试获取和设置密码
    ➑。
- en: 'You can run the code in your file by typing **`ruby secrecy.rb`** from the
    command line. Make sure you’re in the same folder as your *secrecy.rb* file and
    type:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行中输入 **`ruby secrecy.rb`** 来运行文件中的代码。确保你在与 *secrecy.rb* 文件相同的文件夹中，然后输入：
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here’s the output I get (yours might be a little different, depending on what
    you enter when you run the script):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我得到的输出（你的可能会稍有不同，取决于你在运行脚本时输入的内容）：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: First, we see our program print out our regular account’s password, followed
    by the new password after we change it ➊. That was too easy!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们看到程序打印出我们常规账户的密码，然后是我们更改密码后的新密码 ➊。那太简单了！
- en: Next, at ➋, we see that our secret account correctly hides the password from
    prying eyes, printing out only `The password is secret!` if we try to look at
    it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 ➋，我们看到我们的秘密账户正确地隐藏了密码，若我们尝试查看密码，它只会打印出 `The password is secret!`。
- en: Finally, we try to change our secret account password at ➌. We put in two wrong
    passwords (`lasers` and `ninja`) before finally entering the correct password,
    `your password`, and our Ruby program prints out that we successfully updated
    our password to `Something else!`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们尝试在 ➌ 更改我们的秘密账户密码。我们先输入两个错误的密码（`lasers` 和 `ninja`），然后输入正确的密码 `your password`，我们的
    Ruby 程序打印出我们成功地将密码更新为 `Something else!`。
- en: Feel free to play around with the code. What happens when you try to get and
    set the password on the `regular` account in *secrecy.rb*? What about when you
    try to change the `super_safe` one?
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 随意玩玩这段代码。当你尝试获取和设置 *secrecy.rb* 中 `regular` 账户的密码时会发生什么？当你尝试更改 `super_safe`
    账户时又会怎么样？
- en: What happens if we try to set the password on our `super_safe` account and pass
    in the correct current password? The wrong one? Try passing in the wrong password
    a bunch of times. What happens?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在 `super_safe` 账户上设置密码，并且传入正确的当前密码，会发生什么？如果是错误的呢？尝试多次输入错误密码会怎么样？
- en: 'Once you’re done exploring the code, you can try thinking about all the cool
    stuff we could do to make it even better. For example, what methods could we add
    to the `Account` or `SuperSecretAccount` to make them even more useful? (Maybe
    a `reset_password` method, in case you’ve completely forgotten your password?)
    What methods might `SuperSecretAccount` override from `Account`? Are there any
    that might use some of the functionality of `Account` but not all of it? How could
    we go about doing that? (Hint: `super` would be involved.)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了对代码的探索，你可以尝试思考我们可以做些什么来让它变得更好。例如，我们可以为`Account`或`SuperSecretAccount`添加哪些方法，使它们更有用？（也许添加一个`reset_password`方法，以防你完全忘记了密码？）`SuperSecretAccount`可能会从`Account`重写哪些方法？有没有哪些方法可能使用`Account`的一部分功能，但不是全部？我们该如何做到这一点？（提示：`super`将会参与其中。）
- en: 'Lastly, Ruby does have some built-in methods that can help make your code more
    secure (or at least control which methods can be called). If you like, you can
    read all about it in the Ruby docs: *[http://ruby-doc.org/core-2.0.0/Module.html#method-i-private](http://ruby-doc.org/core-2.0.0/Module.html#method-i-private)*.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Ruby确实有一些内置方法可以帮助你提高代码的安全性（或至少控制哪些方法可以被调用）。如果你愿意，可以在Ruby文档中详细阅读：*[http://ruby-doc.org/core-2.0.0/Module.html#method-i-private](http://ruby-doc.org/core-2.0.0/Module.html#method-i-private)*。
- en: You Know This!
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你已经知道这些了！
- en: You learned some tricky stuff in this chapter, but I’m confident you’ve got
    a good handle on it. Just to be sure, let’s go through it all once more.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这一章学了一些复杂的内容，但我相信你已经掌握得很好了。为了确保这一点，我们再过一遍所有内容。
- en: First, we reviewed how to create a Ruby class using the `class` keyword.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们回顾了如何使用`class`关键字创建Ruby类。
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, you found out that Ruby classes can share information and methods with
    each other through *inheritance*: just as a person can inherit traits from her
    parents, one Ruby class can inherit information and behavior from another. The
    class that does the inheriting is called a *subclass* or *child class*, and the
    class it inherits from is called the *superclass* or *parent class*.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你发现Ruby类可以通过*继承*相互共享信息和方法：就像一个人可以继承父母的特征一样，一个Ruby类可以从另一个类继承信息和行为。进行继承的类称为*子类*，而被继承的类称为*父类*。
- en: 'Inheritance syntax looks like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 继承的语法如下：
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this example, because `Dog` inherits from `Animal`, instances of the `Dog`
    class (made with `Dog.new`) can use any of the methods defined in the `Animal`
    class.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于`Dog`继承自`Animal`，所以`Dog`类的实例（通过`Dog.new`创建）可以使用`Animal`类中定义的任何方法。
- en: We also learned about *method overriding* and the `super` keyword. Method overriding
    is just writing a method in a subclass that has the same name as a method in the
    superclass; when we create an instance of the subclass, it will use the subclass’s
    version of the method instead of the superclass’s. You’d want to override the
    superclass’s method any time you want different or more specific behavior in the
    subclass. For example, say you’re writing a game where your wizard is a hero (`class
    Wizard < Hero`), and wizards use magic in their `attack` method instead of the
    game’s default `sword`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了*方法重写*和`super`关键字。方法重写就是在子类中编写一个与父类方法同名的方法；当我们创建子类的实例时，它会使用子类版本的方法，而不是父类的版本。每当你想要在子类中实现不同或更具体的行为时，你就需要重写父类的方法。例如，假设你正在编写一个游戏，其中巫师是英雄（`class
    Wizard < Hero`），巫师在他们的`attack`方法中使用魔法，而不是游戏默认的`剑`。
- en: 'You can override a method like so:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样重写一个方法：
- en: '[PRE30]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can see this in the following example: the hero’s pretty good with a sword,
    but the wizard knows how to cast spells!'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从以下例子中看到这一点：这个英雄很擅长剑术，但巫师知道如何施放魔法！
- en: '[PRE31]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we want to change only *part* of a method, we use `super`; we add whatever
    extra functionality we want, then call `super` to call the superclass’s version
    of the method, like so:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想修改方法的*部分*内容，可以使用`super`；我们添加所需的额外功能，然后调用`super`来调用父类的版本，如下所示：
- en: '[PRE32]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `attack` method is doing two things. First, it calls the superclass’s version
    of `attack` using `super` (that is, the `attack` defined in `Hero` that just prints
    the `Swung sword` message). Then it prints an additional message (`But I also
    know magic! You shall not pass!`). You’d do this when you want to modify the behavior
    of the superclass’s method, but not replace it completely.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`attack`方法做了两件事。首先，它通过`super`调用父类的`attack`版本（也就是`Hero`类中定义的`attack`方法，它只打印`Swung
    sword`的消息）。然后，它打印额外的信息（`But I also know magic! You shall not pass!`）。当你想修改父类方法的行为，但又不完全替换它时，就可以这么做。'
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Last but not least, you saw that you can call `super` with arguments in order
    to send the right arguments to the superclass’s method:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，你看到可以通过带有参数的`super`来将正确的参数传递给父类的方法：
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now when we create a `GuardDog`, it adds its own `@strength` and lets `Dog`
    take care of adding the `@name`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建一个`GuardDog`时，它会添加自己的`@strength`，并让`Dog`来负责添加`@name`：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: All right! At this point, you’re a class master. Well, *almost*—just as there
    are ways to update and change your methods, there are ways to update and change
    your classes; you can even mix behaviors from a bunch of different classes into
    the Ruby classes you create! The last piece of the Ruby class puzzle is *modules*,
    and if we hurry, we can get down to the Royal Stables just in time to learn all
    about them.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！到此为止，你已经是一个类的高手了。嗯，*差不多*——正如你有方法更新和更改你的方法一样，也有方法更新和更改你的类；你甚至可以将来自不同类的行为混合到你创建的
    Ruby 类中！Ruby 类的最后一块拼图就是*模块*，如果我们加快速度，就能准时赶到皇家马厩，了解它们的所有内容。
