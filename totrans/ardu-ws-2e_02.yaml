- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: First Steps
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 初步步骤
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将
- en: Learn the concepts of good project design
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习良好项目设计的概念
- en: Learn the basic properties of electricity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习电的基本性质
- en: Be introduced to the resistor, light-emitting diode (LED), transistor, rectifier
    diode, and relay
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍电阻器、发光二极管（LED）、晶体管、整流二极管和继电器
- en: Use a solderless breadboard to construct circuits
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无焊面包板来构建电路
- en: Learn how integer variables, `for` loops, and digital outputs can be used to
    create various LED effects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用整数变量、`for`循环和数字输出来创建各种LED效果
- en: Now you’ll begin to bring your Arduino to life. As you will see, there is more
    to working with Arduino than just the board itself. You’ll learn how to plan projects
    in order to make your ideas a reality, then move on to a quick primer on electricity.
    Electricity is the driving force behind everything we do in this book, and it’s
    important to have a solid understanding of the basics in order to create your
    own projects. You’ll also take a look at the components that bring real projects
    to life. Finally, you’ll examine some new functions that are the building blocks
    for your Arduino sketches.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将开始让您的Arduino活起来。正如您将看到的，与仅仅是板子本身一起使用Arduino还有更多内容。您将学习如何计划项目，以使您的想法变为现实，然后进行电力的快速入门。电力是本书中我们所做的一切的驱动力，了解基础知识对于创造自己的项目至关重要。您还将查看将真实项目带到生活的组件。最后，您将研究一些作为Arduino草图构建块的新功能。
- en: Planning Your Projects
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划您的项目
- en: When starting your first few projects, you might be tempted to write your sketch
    immediately after you’ve come up with a new idea. But before you start writing,
    a few basic preparatory steps are in order. After all, your Arduino board isn’t
    a mind reader; it needs precise instructions, and even if these instructions can
    be executed by the Arduino, if you overlook so much as a minor detail, the results
    may not be what you expected.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始您的前几个项目时，您可能会有冲动在想出新主意后立即编写草图。但在开始写作之前，需要进行一些基本的准备工作。毕竟，您的Arduino板不是读心者；它需要精确的指令，即使这些指令可以由Arduino执行，如果您忽略了一个细节，结果可能不会是您预期的。
- en: 'Whether you are creating a project that simply blinks a light or one that controls
    an automated model railway signal, you’ll be more successful if you have a detailed
    plan. When designing your Arduino projects, follow these basic steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是创建一个简单闪烁灯光的项目还是控制自动化模型铁路信号的项目，如果您有一个详细的计划，您将更加成功。在设计您的Arduino项目时，请遵循以下基本步骤：
- en: '**Define your objective.** Determine what you want to achieve.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义您的目标。** 确定您想要实现的目标。'
- en: '**Write your algorithm.** An *algorithm* is a set of instructions that describes
    how to accomplish your goal. Your algorithm will list the steps necessary for
    you to achieve your project’s objective.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写您的算法。** *算法*是一组说明，描述如何实现您的目标。您的算法将列出实现项目目标所需的步骤。'
- en: '**Select your hardware.** Determine how your hardware will connect to the Arduino.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择您的硬件。** 确定您的硬件将如何连接到Arduino。'
- en: '**Write your sketch.** Create your initial program that tells the Arduino what
    to do.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写您的草图。** 创建告诉Arduino该做什么的初始程序。'
- en: '**Wire it up.** Connect your hardware to the Arduino board.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接它。** 将您的硬件连接到Arduino板。'
- en: '**Test and debug.** Does it work? During this stage, you identify errors and
    find their causes, whether in the sketch, hardware, or algorithm.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试和调试。** 它是否工作？在这个阶段，您将识别错误并找出其原因，无论是在草图、硬件还是算法中。'
- en: The more time you spend planning your project, the easier a time you’ll have
    during the testing and debugging stage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 计划项目花费的时间越多，在测试和调试阶段就会越轻松。
- en: About Electricity
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于电力
- en: 'Let’s spend a bit of time discussing electricity, since you’ll soon be building
    electronic circuits with your Arduino projects. In simple terms, *electricity*
    is a form of energy that we can harness and convert into heat, light, movement,
    and power. Electricity has three main properties that will be important to us
    as we build projects: current, voltage, and power.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您很快将开始在Arduino项目中构建电子电路，让我们花点时间讨论一下电。简单来说，*电*是一种能量形式，我们可以利用它并将其转化为热能、光能、动能和电能。电具有三个主要属性，对我们在项目中构建过程中很重要：电流、电压和功率。
- en: Current
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电流
- en: The flow of electrical energy is called the *current*. Electrical current flows
    through a *circuit* (a path for the current) from the positive side of a power
    source, such as a battery, to the negative side of the power source. This is known
    as *direct current (DC)*. (For the purposes of this book, we will not deal with
    *alternating current*, or *AC*.) In some circuits, the negative side is called
    *ground (GND)*. Current is measured in *amperes* or “amps” (*A*); 1 amp is 6.2415
    × 10^(18) electrons flowing past a single point in 1 second. Smaller amounts of
    current are measured in *milliamps (mA)*, where 1,000 milliamps equal 1 amp.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 电能的流动被称为*电流*。电流通过*电路*（电流的通道）从电源的正极流向电源的负极。例如，电池就是一个电源。这种流动叫做*直流电（DC）*。（在本书中，我们将不讨论*交流电*，或*AC*。）在一些电路中，负极被称为*接地（GND）*。电流的单位是*安培*或“安”(*A*)；1安培等于每秒通过某一点的6.2415
    × 10^(18)个电子。较小的电流用*毫安（mA）*来衡量，1,000毫安等于1安培。
- en: Voltage
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电压
- en: '*Voltage* is a measure of the difference in potential energy between a circuit’s
    positive and negative ends. This is measured in *volts (V)*. If you think of electrons
    flowing the way water flows, then voltage would be equivalent to pressure: the
    greater the voltage, the faster the current moves through a circuit.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*电压*是电路正负两端之间潜在能量差的衡量标准，单位为*伏特（V）*。如果你将电子流动比作水流，那么电压就相当于压力：电压越大，电流在电路中的流动速度越快。'
- en: Power
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功率
- en: '*Power* is a measurement of the rate at which an electrical device converts
    energy from one form to another. Power is measured in *watts (W)*. For example,
    a 100 W light bulb is much brighter than a 60 W bulb because the higher-wattage
    bulb converts more electrical energy into light.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*功率*是衡量电气设备将能量从一种形式转换为另一种形式的速度。功率的单位是*瓦特（W）*。例如，100 W的灯泡比60 W的灯泡亮，因为功率更高的灯泡将更多的电能转换为光能。'
- en: 'A simple mathematical relationship exists among voltage, current, and power:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 电压、电流和功率之间有一个简单的数学关系：
- en: Power (*W*) = Voltage (*V*) × Current (*A*)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功率（*W*）= 电压（*V*）× 电流（*A*）
- en: Electronic Components
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子组件
- en: Now that you know a little bit about the basics of electricity, let’s look at
    how it interacts with various electronic components and devices. Electronic *components*
    are the various parts that control electric current in a circuit. Just as the
    various parts of a car’s engine work together to store fuel, filter fuel, pump
    fuel, and inject fuel to allow us to drive, electronic components work together
    to control and harness the flow of electricity to help us create useful devices.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对电的基础知识有了一些了解，我们来看看它是如何与各种电子组件和设备互动的。电子*组件*是控制电路中电流流动的各种部件。就像汽车引擎的各个部件共同工作以存储燃料、过滤燃料、泵送燃料和喷射燃料，帮助我们驾驶一样，电子组件协同工作来控制和利用电流的流动，帮助我们创造有用的设备。
- en: Throughout this book, I’ll explain specialized components as we use them. The
    following sections describe some of the fundamental components.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我会在我们使用的过程中解释一些专用组件。以下部分描述了一些基本的组件。
- en: The Resistor
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电阻器
- en: Various components, such as the Arduino’s LED, require only a small amount of
    current to function—usually around 10 mA. When the LED receives more current than
    it needs, it converts the excess to heat—and too much heat can kill an LED. To
    reduce the flow of current to components such as LEDs, we can add a *resistor*
    between the voltage source and the component. Current flows freely along normal
    copper wire, but when it encounters a resistor, its movement is slowed. Some current
    is converted into a small amount of heat, which is proportional to the value of
    the resistor. [Figure 3-1](#figure3-1) shows some commonly used resistors.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 各种组件，如Arduino的LED，只需要少量电流就能工作——通常约为10 mA。当LED接收到的电流超过其需求时，它会将多余的电流转化为热量——过多的热量可能会损坏LED。为了减少流向LED等组件的电流，我们可以在电压源和组件之间添加一个*电阻器*。电流可以在普通铜线中自由流动，但当它遇到电阻器时，流动会被减慢。部分电流会转化为少量的热量，转化的热量与电阻器的数值成正比。[图3-1](#figure3-1)显示了一些常用的电阻器。
- en: '![f03001](image_fi/500587c03/f03001.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![f03001](image_fi/500587c03/f03001.png)'
- en: 'Figure 3-1: Typical resistors'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-1：典型电阻器
- en: Resistance
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 电阻
- en: The level of resistance can be either fixed or variable. Resistance is measured
    in *ohms* (Ω) and can range from zero to thousands of ohms (*kilohms*, or kΩ)
    to millions of ohms (*megohms*, or MΩ).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻的大小可以是固定的，也可以是可变的。电阻的单位是*欧姆*（Ω），其范围从零到数千欧姆（*千欧姆*，或kΩ），甚至到数百万欧姆（*兆欧姆*，或MΩ）。
- en: Reading Resistance Values
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取电阻值
- en: 'Although you can test resistance with a multimeter, you can also read resistance
    directly from a physical resistor. The resistors we will use will be physically
    very small, so their resistance value usually cannot be printed on them. One common
    way to show a component’s resistance is with a series of color-coded bands, read
    from left to right, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以用万用表测试电阻值，也可以直接从物理电阻中读取电阻值。我们将使用的电阻器物理尺寸非常小，因此通常无法在电阻器上打印其电阻值。常见的表示组件电阻的方法是使用一系列从左到右阅读的彩色编码带，如下所示：
- en: '**First band** Represents the first digit of the resistance'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第一个电阻带** 代表电阻的第一位数字'
- en: '**Second band** Represents the second digit of the resistance'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第二个电阻带** 代表电阻的第二位数字'
- en: '**Third band** Represents the multiplier (for four-band resistors) or the third
    digit (for five-band resistors)'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第三个电阻带** 代表倍数（对于四带电阻）或第三个数字（对于五带电阻）'
- en: '**Fourth band** Represents the multiplier (for five-band resistors) or the
    *tolerance*, or accuracy of the component’s resistance (for four-band resistors)'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第四个电阻带** 代表倍数（对于五带电阻）或*公差*，即元件电阻的精度（对于四带电阻）'
- en: '**Fifth band** Shows the tolerance for five-band resistors'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第五个电阻带** 显示五带电阻的公差'
- en: '[Table 3-1](#table3-1) lists the colors of resistors and their corresponding
    values.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[表3-1](#table3-1)列出了电阻的颜色及其对应的值。'
- en: Because it is difficult to manufacture resistors with exact values, you select
    a margin of error as a percentage when buying a resistor. For five-band resistors,
    a brown band in the fifth position indicates tolerance of 1 percent, gold indicates
    5 percent, and silver indicates 10 percent.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于电阻器的制造精度问题，选择一个误差范围作为购买电阻时的百分比。对于五带电阻，位于第五位置的棕色带表示1%的公差，金色表示5%，银色表示10%的公差。
- en: '[Figure 3-2](#figure3-2) shows a resistor diagram. The yellow, violet, and
    orange resistance bands are read as 4, 7, and 3, respectively, as listed in [Table
    3-1](#table3-1). The third band represents the multiplier; in this example, the
    47 is multiplied by 10 to the power of 3 to arrive at the value of 47,000 Ω, more
    commonly read as 47 kΩ. The brown band indicates a very precise resistor, which
    should be accurate to within 1 percent.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-2](#figure3-2)展示了一个电阻示意图。黄色、紫色和橙色的电阻带分别表示4、7和3，具体内容列于[表3-1](#table3-1)。第三个电阻带表示倍数；在这个例子中，47被乘以10的3次方，得出47,000
    Ω的值，通常读作47 kΩ。棕色电阻带表示一个非常精确的电阻，其公差应在1%以内。'
- en: '![f03002](image_fi/500587c03/f03002.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f03002](image_fi/500587c03/f03002.png)'
- en: 'Figure 3-2: Example resistor diagram'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-2：电阻示意图
- en: 'Table 3-1: Values of Bands Printed on a Resistor, in Ohms'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表3-1：电阻上的带标值，单位为欧姆
- en: '| **Color** | **Ohms** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **颜色** | **欧姆值** |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Black | 0 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 黑色 | 0 |'
- en: '| Brown | 1 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 棕色 | 1 |'
- en: '| Red | 2 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 红色 | 2 |'
- en: '| Orange | 3 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 橙色 | 3 |'
- en: '| Yellow | 4 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 黄色 | 4 |'
- en: '| Green | 5 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 绿色 | 5 |'
- en: '| Blue | 6 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 蓝色 | 6 |'
- en: '| Violet | 7 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 紫色 | 7 |'
- en: '| Gray | 8 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 灰色 | 8 |'
- en: '| White | 9 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 白色 | 9 |'
- en: Chip Resistors
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 芯片电阻
- en: Surface-mount chip resistors display a printed number and letter code, as shown
    in [Figure 3-3](#figure3-3), instead of colored stripes. The first two digits
    represent a single number, and the third digit represents the number of zeros
    to follow that number. For example, the resistor in [Figure 3-3](#figure3-3) has
    a value of 10,000 Ω, or 10 kΩ.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表面贴装芯片电阻显示一个打印的数字和字母代码，如[图3-3](#figure3-3)所示，而不是彩色条纹。前两位数字表示一个单独的数字，第三位数字表示跟随该数字后的零的个数。例如，[图3-3](#figure3-3)中的电阻值为10,000
    Ω，或10 kΩ。
- en: '![f03003](image_fi/500587c03/f03003.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f03003](image_fi/500587c03/f03003.png)'
- en: 'Figure 3-3: A surface-mount resistor'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-3：表面贴装电阻
- en: Power Rating
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 功率额定值
- en: The resistor’s *power rating* is a measurement of the power, in watts, that
    it will tolerate before overheating or failing. The resistors shown in [Figure
    3-1](#figure3-1) are 1/4W resistors, which are the most commonly used resistors
    with the Arduino system. For the purposes of the projects in this book, you only
    need 1/4W resistors.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻的*功率额定值*是它在过热或损坏之前能够承受的功率，以瓦特为单位。[图3-1](#figure3-1)中所示的电阻是1/4W电阻，这是Arduino系统中最常用的电阻。在本书的项目中，你只需要1/4W的电阻。
- en: When you’re selecting a resistor, consider the relationship between power, current,
    and voltage. The greater the current and/or voltage in your design, the greater
    the resistor’s power rating should be.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 选择电阻时，考虑功率、电流和电压之间的关系。设计中的电流和/或电压越大，电阻的功率额定值应越大。
- en: Usually, the greater a resistor’s power rating, the greater its physical size.
    For example, the resistor shown in [Figure 3-5](#figure3-5) is a 5W resistor,
    whose body measures 22 mm long by 10 mm wide.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，电阻器的功率额定值越大，其物理尺寸也越大。例如，[图 3-5](#figure3-5)所示的电阻器是一个 5W 电阻器，其主体长度为 22 毫米，宽度为
    10 毫米。
- en: '![f03005](image_fi/500587c03/f03005.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f03005](image_fi/500587c03/f03005.png)'
- en: 'Figure 3-5: A 5W resistor'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-5：一个 5W 电阻器
- en: The Light-Emitting Diode
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发光二极管
- en: The LED is a very common, infinitely useful component that converts electrical
    current into light. LEDs come in various shapes, sizes, and colors. [Figure 3-6](#figure3-6)
    shows a common LED.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: LED 是一种非常常见、用途广泛的组件，可以将电流转化为光。LED 有各种形状、尺寸和颜色。[图 3-6](#figure3-6) 显示了一个常见的 LED。
- en: '![f03006](image_fi/500587c03/f03006.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![f03006](image_fi/500587c03/f03006.png)'
- en: 'Figure 3-6: A red LED, 5 mm in diameter'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-6：一个红色 LED，直径 5 毫米
- en: Connecting LEDs in a circuit takes some care, because they are *polarized*;
    this means that current can enter and leave the LED in one direction only. The
    current enters via the *anode* (positive) side and leaves via the *cathode* (negative)
    side, as shown in [Figure 3-7](#figure3-7). Any attempt to make too much current
    flow through an LED in the opposite direction will break the component.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在电路中连接 LED 时需要小心，因为它们是*有极性的*；这意味着电流只能在一个方向上进入和离开 LED。电流通过*阳极*（正）端进入，通过*阴极*（负）端离开，如
    [图 3-7](#figure3-7) 所示。任何试图让电流反向流过 LED 的做法都会损坏该元件。
- en: Thankfully, LEDs are designed so that you can tell which end is which. The leg
    on the anode side is longer (you can think of the “plus” side as having length
    “added” to it), and the rim at the base of the LED is flat on the cathode side,
    as shown in [Figure 3-8](#figure3-8).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，LED 的设计使得你可以分辨其端点。阳极端的引脚较长（你可以将“正”端想象成“加长”了），而 LED 底部的边缘在阴极端是平的，如 [图 3-8](#figure3-8)
    所示。
- en: '![f03007](image_fi/500587c03/f03007.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![f03007](image_fi/500587c03/f03007.png)'
- en: 'Figure 3-7: Current flow through an LED'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-7：LED 中的电流流动
- en: '![f03008](image_fi/500587c03/f03008.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![f03008](image_fi/500587c03/f03008.png)'
- en: 'Figure 3-8: LED design indicates the anode (longer leg) and cathode (flat rim)
    sides.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-8：LED 设计指示阳极（较长引脚）和阴极（平边缘）端
- en: When adding LEDs to a project, you need to consider the operating voltage and
    current. For example, common red LEDs require around 1.7 V and 5 to 20 mA of current.
    This presents a slight problem for us, because the Arduino outputs a set 5 V and
    a much higher current. Luckily, we can use a current-limiting resistor to reduce
    the current flow into an LED. But which value resistor do we use? That’s where
    Ohm’s law comes in.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中添加 LED 时，需要考虑其工作电压和电流。例如，常见的红色 LED 需要大约 1.7 V 的电压和 5 到 20 毫安的电流。这对我们来说有点问题，因为
    Arduino 输出的是 5 V 的固定电压和一个更高的电流。幸运的是，我们可以使用限流电阻来减少流入 LED 的电流。但我们该选择哪个数值的电阻器呢？这就需要用到欧姆定律。
- en: 'To calculate the required current-limiting resistor for an LED, use this formula:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算 LED 所需的限流电阻，请使用以下公式：
- en: '*R* = (*V*[s] − *V*[f]) ÷ *I*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*R* = (*V*[s] − *V*[f]) ÷ *I*'
- en: where *V*[s] is the supply voltage (Arduino outputs 5 V), *V*[f] is the LED
    forward voltage drop (say, 1.7 V), and *I* is the current required for the LED
    (10 mA). (The value of *I* must be in amps, so 10 mA converts to 0.01 A.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *V*[s] 是电源电压（Arduino 输出 5 V），*V*[f] 是 LED 的正向电压降（假设为 1.7 V），*I* 是 LED 所需的电流（10
    毫安）。（*I* 的单位必须是安培，所以 10 毫安转换为 0.01 A。）
- en: Now let’s apply this formula to our LEDs, using values of 5 V for *V*[s], 1.7
    V for *V*[f], and 0.01 A for *I*. Substituting these values into the formula gives
    a value for *R* of 330 Ω. However, the LEDs will happily light up when fed current
    less than 10 mA. It’s good practice to use lower currents when possible to protect
    sensitive electronics, so we’ll use 560 Ω, 1/4W resistors with our LEDs, which
    allow around 6 mA of current to flow.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这个公式应用到我们的 LED 上，使用 *V*[s] = 5 V，*V*[f] = 1.7 V 和 *I* = 0.01 A。将这些数值代入公式中，得出
    *R* 的值为 330 Ω。然而，当电流低于 10 毫安时，LED 也能正常发光。为了保护敏感的电子元件，最好尽量使用较小的电流，因此我们将使用 560 Ω、1/4W
    的电阻器与我们的 LED 配合使用，这样可以使电流流过约 6 毫安。
- en: The Solderless Breadboard
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无焊面包板
- en: Our ever-changing circuits will need a base—something to hold them together
    and build upon. A great tool for this purpose is a *solderless breadboard*. The
    breadboard is a plastic base with rows of electrically connected sockets (just
    don’t cut bread on them). They come in many sizes, shapes, and colors, as shown
    in [Figure 3-10](#figure3-10).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不断变化的电路需要一个基础——一个将它们连接在一起并构建其上的平台。一个很好的工具就是*无焊接面包板*。面包板是一个带有电气连接插座的塑料基座（只是不可以用它切面包）。它们有多种尺寸、形状和颜色，如[图
    3-10](#figure3-10)所示。
- en: '![f03010](image_fi/500587c03/f03010.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![f03010](image_fi/500587c03/f03010.png)'
- en: 'Figure 3-10: Breadboards in various shapes and sizes'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-10：各种形状和尺寸的面包板
- en: The key to using a breadboard is knowing how the sockets are connected—whether
    in short columns or in long rows along the edge or in the center. The connections
    vary by board. For example, in the breadboard shown at the top of [Figure 3-11](#figure3-11),
    columns of five holes are connected vertically but isolated horizontally. If you
    place two wires in one vertical row, then they will be electrically connected.
    By the same token, the long rows in the center between the horizontal lines are
    connected horizontally. You’ll often need to connect a circuit to the supply voltage
    and ground, and these long horizontal lines of holes are ideal for that purpose.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面包板的关键是了解插座的连接方式——是按短列连接，还是按沿边缘或中央的长行连接。连接方式因面包板而异。例如，在[图 3-11](#figure3-11)顶部所示的面包板中，五个孔的列是垂直连接的，但水平方向上是隔离的。如果你将两根导线插入同一垂直行，它们就会被电气连接。同理，位于水平线之间的中央长行也是水平连接的。你经常需要将电路连接到电源电压和地线，这些长的水平孔线非常适合这个目的。
- en: When you’re building more complex circuits, a breadboard will get crowded, and
    you won’t always be able to place components exactly where you want. It’s easy
    to solve this problem using short connecting wires, however. Retailers that sell
    breadboards usually also sell small boxes of wires of various lengths, such as
    the assortment shown in [Figure 3-12](#figure3-12).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在构建更复杂的电路时，面包板会变得拥挤，你并不总能将组件放置在你想要的地方。然而，使用短连接线很容易解决这个问题。销售面包板的零售商通常也会销售各种长度的小盒子电线，例如在[图
    3-12](#figure3-12)中所示的那种。
- en: '![f03011](image_fi/500587c03/f03011.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![f03011](image_fi/500587c03/f03011.png)'
- en: 'Figure 3-11: Breadboard internal connections'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-11：面包板内部连接
- en: '![f03012](image_fi/500587c03/f03012.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![f03012](image_fi/500587c03/f03012.png)'
- en: 'Figure 3-12: Assorted breadboard wires'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-12：各种面包板连接线
- en: 'Project #1: Creating a Blinking LED Wave'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #1：创建一个闪烁的 LED 波动'
- en: Let’s put some LEDs and resistors to work. In this project, we’ll use five LEDs
    to emulate the front of the famous vehicle KITT from the television show *Knight
    Rider*, creating a kind of wavelike light pattern.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来用一些 LED 和电阻器。在这个项目中，我们将使用五个 LED 来模拟电视节目《骑士杀手》中的著名车辆 KITT 的前端，创建一种波动的光模式。
- en: The Algorithm
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算法
- en: 'Here’s our algorithm for this project:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们这个项目的算法：
- en: Turn on LED 1.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 LED 1。
- en: Wait half a second.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待半秒钟。
- en: Turn off LED 1.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 LED 1。
- en: Turn on LED 2.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 LED 2。
- en: Wait half a second.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待半秒钟。
- en: Turn off LED 2.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 LED 2。
- en: Continue until LED 5 is turned on, at which point the process reverses from
    LEDs 5 to 1.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续，直到 LED 5 被打开，此时过程会从 LED 5 反向到 LED 1。
- en: Repeat indefinitely.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无限重复。
- en: The Hardware
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你创建这个项目所需的材料：
- en: Five LEDs
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个 LED
- en: Five 560 Ω resistors
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个 560 Ω 电阻器
- en: One breadboard
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: Various connecting wires
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: We will connect the LEDs to digital pins 2 through 6 via the 560 Ω current-limiting
    resistors.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 560 Ω 限流电阻器，将 LED 连接到数字引脚 2 到 6。
- en: The Schematic
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: Now let’s build the circuit. Circuit layout can be described in several ways.
    For the first few projects in this book, we’ll use physical layout diagrams similar
    to the one shown in [Figure 3-13](#figure3-13).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来构建电路。电路布局可以通过几种方式描述。在本书的前几个项目中，我们将使用类似于[图 3-13](#figure3-13)所示的物理布局图。
- en: By comparing the wiring diagram to the functions in the sketch, you can begin
    to make sense of the circuit. For example, when we use `digitalWrite(2, HIGH)`,
    a high voltage of 5 V flows from digital pin 2, through the current-limiting resistor,
    through the LED via the anode and then the cathode, and finally back to the Arduino’s
    GND socket to complete the circuit. Then, when we use `digitalWrite(2, LOW)`,
    the current stops and the LED turns off.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将接线图与草图中的功能进行对比，你可以开始理解电路。例如，当我们使用`digitalWrite(2, HIGH)`时，5V的高电压从数字引脚2流出，通过限流电阻，再通过LED的阳极和阴极，最终回到Arduino的GND插槽，完成电路。然后，当我们使用`digitalWrite(2,
    LOW)`时，电流停止，LED熄灭。
- en: '![f03013](image_fi/500587c03/f03013.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![f03013](image_fi/500587c03/f03013.png)'
- en: 'Figure 3-13: Circuit layout for Project 1'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-13：Project 1的电路布局
- en: The Sketch
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Now for our sketch. Enter this code into the IDE:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是草图的部分。将以下代码输入到IDE中：
- en: '[PRE0]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In `void setup()` at 1, the digital I/O pins are set to outputs, because we
    want them to send current to the LEDs on demand. We specify when to turn on each
    LED using the `digitalWrite()` function in the `void loop()` section of the sketch
    at 2.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`void setup()`中的第1行，数字I/O引脚被设置为输出，因为我们希望它们根据需求向LED发送电流。我们通过在草图的`void loop()`部分的第2行使用`digitalWrite()`函数来指定何时开启每个LED。
- en: Running the Sketch
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行草图
- en: Now connect your Arduino and upload the sketch. After a second or two, the LEDs
    should blink from left to right and then back again. Success is a wonderful thing—embrace
    it!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在连接你的Arduino并上传草图。过一两秒后，LED应该会从左到右闪烁，然后再返回。成功是件美妙的事——拥抱它吧！
- en: If nothing happens, however, then immediately remove the USB cable from the
    Arduino and check that you typed the sketch correctly. If you find an error, fix
    it and upload your sketch again. If your sketch matches exactly and the LEDs still
    don’t blink, check your wiring on the breadboard.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果什么都没有发生，那么立即拔掉Arduino的USB电缆，检查你是否正确输入了草图。如果发现错误，修正它并重新上传草图。如果草图完全匹配且LED仍然不闪烁，检查面包板上的接线。
- en: You now know how to make an LED blink with your Arduino, but this sketch is
    somewhat inefficient. For example, if you wanted to modify it to make the LEDs
    cycle more quickly, you would need to alter each `delay(500)`. There is a better
    way.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经知道如何用Arduino使LED闪烁，但这个草图有些低效。例如，如果你想修改它让LED闪烁得更快，你就需要更改每个`delay(500)`。有一种更好的方法。
- en: Using Variables
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量
- en: In computer programs, we can use *variables* to store data. The problem with
    the sketch for Project 1 as written is that because it doesn’t use variables,
    it’s not very flexible. For example, we use the function `delay(500)` to keep
    the LEDs turned on. If we want to make a change to the delay time, then we have
    to change each entry manually. To address this problem, we’ll create a variable
    to represent the value for the `delay()` function.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机程序中，我们可以使用*变量*来存储数据。Project 1的草图存在一个问题，因为它没有使用变量，所以不够灵活。例如，我们使用`delay(500)`函数来保持LED亮着。如果我们想更改延迟时间，就必须手动更改每个条目。为了解决这个问题，我们将创建一个变量来表示`delay()`函数的值。
- en: 'Enter the following line in the Project 1 sketch, above the `void setup()`
    function and just after the initial comment:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行输入到Project 1的草图中，位于`void setup()`函数之前，并紧跟在初始注释之后：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This assigns the number `250` to a variable called `d`. The `int` indicates
    that the variable contains an integer—a whole number between −32,768 and 32,767\.
    Simply put, any integer value has no fraction or decimal places.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将数字`250`赋给一个名为`d`的变量。`int`表示该变量包含一个整数——一个介于-32,768到32,767之间的整数。简单来说，任何整数值都没有小数部分。
- en: Next, change every `500` in the sketch to a `d`. Now when the sketch runs, the
    Arduino will use the value in `d` for the `delay()` functions. When you upload
    your sketch after making these changes, the LEDs will turn on and off at a much
    faster rate, as the delay value is much smaller.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将草图中的每个`500`更改为`d`。现在，当草图运行时，Arduino将使用`d`中的值来执行`delay()`函数。上传修改后的草图后，LED将以更快的速度闪烁，因为延迟值变得更小。
- en: 'Now, if you want to change the delay, simply change the variable declaration
    at the start of the sketch. For example, entering `100` for the delay would speed
    things up even more:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你想更改延迟，只需更改草图开始处的变量声明。例如，输入`100`作为延迟值将使得LED闪烁得更快：
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Experiment with the sketch, perhaps altering the delays and the sequence of
    `HIGH` and `LOW`. Have some fun with it. Don’t disassemble the circuit yet, though;
    we’ll continue to use it with more projects in this chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改草图，或许可以改变延时和 `HIGH`、`LOW` 的顺序。可以尽情尝试一下。不过，暂时别拆解电路；我们将在本章的更多项目中继续使用它。
- en: 'Project #2: Repeating with for Loops'
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #2：使用 `for` 循环进行重复'
- en: When designing a sketch, you’ll often repeat the same function. You could simply
    copy and paste the function to duplicate it in a sketch, but that’s inefficient
    and a waste of your Arduino’s program memory. Instead, you can use `for` loops.
    The benefit of using a `for` loop is that you can determine how many times the
    code inside the loop will repeat.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计草图时，常常需要重复同一个函数。你可以简单地复制粘贴函数来重复它，但这样效率低下，浪费了 Arduino 的程序内存。相反，你可以使用 `for`
    循环。使用 `for` 循环的好处是你可以决定循环内部代码的重复次数。
- en: 'To see how a `for` loop works, enter the following code as a new sketch:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 `for` 循环的工作方式，请输入以下代码作为新的草图：
- en: '[PRE3]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `for` loop will repeat the code within the curly brackets as long as some
    condition is true. Here we have used a new integer variable, `a`, which starts
    with the value `2`. Every time the code is executed, the `a++` will add 1 to the
    value of `a`. The loop will continue in this fashion while the value of `a` is
    less than 7 (the *condition*). Once it is equal to or greater than 7, the Arduino
    moves on and continues with whatever code comes after the `for` loop.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环将在大括号内的代码只要某个条件为真时就会重复执行。在这里，我们使用了一个新的整数变量 `a`，其初始值为 `2`。每次执行代码时，`a++`
    会将 `a` 的值增加 1。只要 `a` 的值小于 7（*条件*），循环就会继续。当 `a` 的值等于或大于 7 时，Arduino 会继续执行 `for`
    循环之后的代码。'
- en: 'The number of loops that a `for` loop executes can also be set by counting
    down from a higher number to a lower number. To demonstrate this, add the following
    loop to the Project 2 sketch after the first `for` loop:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环执行的循环次数也可以通过从较大的数字倒数到较小的数字来设置。为演示这一点，请在第一个 `for` 循环之后，向项目 2 的草图中添加以下循环：'
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the `for` loop at 1 sets the value of `a` equal to 5 and then subtracts
    1 after every loop due to the `a--`. The loop continues in this manner while the
    value of `a` is greater than 1 (`a > 1`) and finishes once the value of `a` falls
    to 1 or less than 1.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`for` 循环在 1 时将 `a` 的值设置为 5，并在每次循环后通过 `a--` 将其减 1。只要 `a` 的值大于 1（`a > 1`），循环就会继续，直到
    `a` 的值降到 1 或小于 1 为止。
- en: We have now re-created Project 1 using less code. Upload the sketch and see
    for yourself!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在用更少的代码重新创建了项目 1。上传草图并亲自体验一下吧！
- en: Varying LED Brightness with Pulse-Width Modulation
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脉宽调制（PWM）调整 LED 亮度
- en: Rather than just turning LEDs on and off rapidly using `digitalWrite()`, we
    can define the level of brightness of an LED by adjusting the amount of time between
    each LED’s on and off states using *pulse-width modulation (PWM)*. PWM can be
    used to create the illusion that an LED is shining at different levels of brightness
    by turning the LED on and off rapidly, at around 500 cycles per second. The brightness
    we perceive is determined by the amount of time the digital output pin is on versus
    the amount of time it is off—that is, how long the LED is lit or unlit. Because
    our eyes can’t see flickers faster than 50 cycles per second, the LED appears
    to have a constant brightness.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与其仅使用 `digitalWrite()` 快速地打开和关闭 LED，我们可以通过调整每个 LED 开关状态之间的时间来定义 LED 的亮度级别，方法是使用
    *脉宽调制（PWM）*。PWM 可以通过快速开关 LED（每秒约 500 次）来创造 LED 在不同亮度级别的假象。我们感知到的亮度取决于数字输出引脚开启的时间与关闭的时间——即
    LED 点亮或熄灭的时间。由于我们的眼睛无法看到每秒 50 次以上的闪烁，LED 看起来就像是常亮的。
- en: The greater the *duty cycle* (the longer the pin is on compared to off in each
    cycle), the greater the perceived brightness of the LED connected to the digital
    output pin.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*占空比* 越大（即每个周期内引脚保持开启的时间越长），连接到数字输出引脚的 LED 显得越亮。'
- en: '[Figure 3-14](#figure3-14) shows various PWM duty cycles. The filled-in gray
    areas represent the amount of time that the light is on. As you can see, the amount
    of time per cycle that the light is on increases with the duty cycle.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-14](#figure3-14) 显示了不同的 PWM 占空比。填充的灰色区域表示灯亮的时间。从图中可以看到，灯亮的时间随着占空比的增大而增加。'
- en: '![f03014](image_fi/500587c03/f03014.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![f03014](image_fi/500587c03/f03014.png)'
- en: 'Figure 3-14: Various PWM duty cycles'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-14：不同的 PWM 占空比
- en: Only digital pins 3, 5, 6, 9, 10, and 11 on a regular Arduino board can be used
    for PWM. They are marked on the Arduino board with a tilde (~), as shown in [Figure
    3-15](#figure3-15).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 只有常规 Arduino 板上的数字引脚 3、5、6、9、10 和 11 可以用于 PWM。它们在 Arduino 板上标有波浪线（~），如[图 3-15](#figure3-15)所示。
- en: '![f03015](image_fi/500587c03/f03015.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![f03015](image_fi/500587c03/f03015.png)'
- en: 'Figure 3-15: The PWM pins are marked with a tilde (~).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-15：PWM 引脚标有波浪线（~）。
- en: To create a PWM signal, we use the function `analogWrite(``x``,` `y``)`, where
    `x` is the digital pin and `y` is a value for the duty cycle. `y` can be any value
    between 0 and 255, where 0 indicates a 0 percent duty cycle and 255 indicates
    a 100 percent duty cycle.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 PWM 信号，我们使用函数 `analogWrite(``x``,` `y``)`，其中 `x` 是数字引脚，`y` 是占空比的值。`y`
    可以是 0 到 255 之间的任何值，其中 0 表示 0% 的占空比，255 表示 100% 的占空比。
- en: 'Project #3: Demonstrating PWM'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #3：演示 PWM'
- en: 'Now let’s try this with our circuit from Project 2\. Enter the following sketch
    into the IDE and upload it to the Arduino:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在项目 2 的电路基础上尝试一下。将以下草图输入 IDE，并上传到 Arduino：
- en: '[PRE5]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The LED on digital pin 3 will exhibit a “breathing effect” as the duty cycle
    increases and decreases. In other words, the LED will turn on, increasing in brightness
    until fully lit, and then reverse until it is dark. Experiment with the sketch
    and circuit. For example, make all five LEDs breathe at once, or have them do
    so sequentially.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 数字引脚 3 上的 LED 将展示“呼吸效果”，即占空比增加和减少时，LED 的亮度逐渐增大，直到完全亮起，然后反向直到变暗。换句话说，LED 会亮起，亮度逐渐增强，直到完全亮起，然后再反向直到熄灭。你可以在草图和电路中进行实验。例如，可以让所有五个
    LED 同时呼吸，或者让它们依次进行呼吸效果。
- en: More Electric Components
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多电气组件
- en: You’ll usually find it easy to plan on having a digital output do something
    without taking into account how much current the control really needs to get the
    job done. As you create your project, remember that each digital output pin on
    the Arduino Uno can offer a maximum of 40 mA of current per pin and 200 mA total
    for all pins. However, the three electronic hardware components discussed next
    can help you increase the current-handling ability of the Arduino.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常会发现，计划让数字输出完成某项工作时，未考虑到控制所需的电流大小。创建项目时，请记住，Arduino Uno 上的每个数字输出引脚最多可以提供 40
    mA 的电流，所有引脚的总电流最大为 200 mA。然而，接下来讨论的三种电子硬件组件可以帮助你提高 Arduino 的电流处理能力。
- en: The Transistor
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 晶体管
- en: Almost everyone has heard of a *transistor*, but most people don’t really understand
    how it works. In the spirit of brevity, I will keep the explanation as simple
    as possible. A transistor can turn on or off the flow of a much larger current
    than the Arduino Uno can handle. We can, however, safely control a transistor
    using an Arduino digital output pin. A popular transistor is the BC548, shown
    in [Figure 3-16](#figure3-16).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个人都听说过*晶体管*，但大多数人并不真正理解它是如何工作的。为了简洁起见，我将尽量简单地解释。晶体管可以打开或关闭比 Arduino Uno 能处理的电流更大的电流流动。然而，我们可以使用
    Arduino 数字输出引脚安全地控制晶体管。一个常用的晶体管是 BC548，如[图 3-16](#figure3-16)所示。
- en: '![f03016](image_fi/500587c03/f03016.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![f03016](image_fi/500587c03/f03016.png)'
- en: 'Figure 3-16: A typical transistor: the BC548'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-16：典型的晶体管：BC548
- en: Similar to the LED, the transistor’s pins have a unique function and need to
    be connected in the proper orientation. With the flat front of the transistor
    facing you (as shown on the left of [Figure 3-16](#figure3-16)), the pins on the
    BC548 are called, from left to right, the *collector* (C), *base* (B), and *emitter*
    (E). (Note that this pin order, or *pinout*, is for the BC548 transistor; other
    transistors may be oriented differently.) When a small current is applied to the
    base, such as from an Arduino digital I/O pin, the larger current we want to switch
    enters through the collector. It’s combined with the small current from the base
    before flowing out via the emitter. When the small control current at the base
    is turned off, no current can flow through the transistor.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 与 LED 类似，晶体管的引脚也有独特的功能，并需要按照正确的方向连接。将晶体管的平面部分朝向你（如[图 3-16](#figure3-16)左侧所示），BC548
    的引脚从左到右分别称为*集电极*（C）、*基极*（B）和*发射极*（E）。(注意，这种引脚顺序或*引脚排列*是针对 BC548 晶体管的；其他晶体管的排列方式可能不同。)
    当在基极施加小电流时，例如来自 Arduino 数字 I/O 引脚，小电流会使我们希望开关的大电流通过集电极进入。在集电极流入后，电流与来自基极的小电流合并，然后通过发射极流出。当基极的控制电流被关闭时，晶体管中就不会有电流流动。
- en: The BC548 can switch up to 100 mA of current at a maximum of 30 V—much more
    than the Arduino’s digital output. In projects later in the book, you’ll read
    about transistors in more detail.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: BC548 可在最大 30 V 的电压下切换最多 100 mA 的电流——远高于 Arduino 的数字输出。在本书后续的项目中，你将更详细地了解晶体管。
- en: The Rectifier Diode
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整流二极管
- en: The *diode* is a very simple yet useful component that allows current to flow
    in one direction only. It looks a lot like a resistor, as you can see in [Figure
    3-17](#figure3-17).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*二极管* 是一种非常简单但又非常有用的元件，它只允许电流单向流动。它看起来和电阻器很相似，如[图 3-17](#figure3-17)所示。'
- en: '![f03017](image_fi/500587c03/f03017.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![f03017](image_fi/500587c03/f03017.png)'
- en: 'Figure 3-17: A 1N4004-type rectifier diode'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-17：1N4004 型整流二极管
- en: 'The projects in this book will use the 1N4004-type rectifier diode. Current
    flows into the diode via the anode and out through the cathode, which is marked
    with the ring around the diode’s body. These diodes can protect parts of the circuit
    against reverse current flow, but there is a price to pay: diodes also cause a
    drop in the voltage of around 0.7 V. The 1N4004 diode is rated to handle 1 A and
    400 V, much higher than we will be using. It’s a tough, common, and low-cost diode.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的项目将使用 1N4004 型整流二极管。电流通过二极管的阳极进入，通过阴极流出，阴极处有一个环形标记在二极管的主体上。这些二极管可以保护电路的部分免受反向电流的影响，但也有代价：二极管会导致大约
    0.7 V 的电压下降。1N4004 二极管的额定值为 1 A 和 400 V，远高于我们实际使用的电流和电压。它是一种耐用、常见且低成本的二极管。
- en: The Relay
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继电器
- en: '*Relays* are used for the same reason as transistors—to control a large current
    and voltage. A relay has the advantage of being *electrically isolated* from the
    control circuit, allowing the Arduino to switch very large currents and voltages
    without actually coming into contact with those voltages, which could damage it.
    Inside the relay is an interesting pair of items: mechanical switch contacts and
    a low-voltage coil of wire, as shown in [Figure 3-18](#figure3-18).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*继电器* 与晶体管使用的原因相同——用于控制大电流和大电压。继电器的优点是它与控制电路*电气隔离*，使得 Arduino 可以切换非常大的电流和电压，而无需直接接触这些电压，从而避免损坏
    Arduino。继电器内部有一对有趣的组件：机械开关触点和一个低电压线圈，如[图 3-18](#figure3-18)所示。'
- en: '![f03018](image_fi/500587c03/f03018.png)![f03018a](image_fi/500587c03/f03018a.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![f03018](image_fi/500587c03/f03018.png)![f03018a](image_fi/500587c03/f03018a.png)'
- en: 'Figure 3-18: Inside a typical relay'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-18：典型继电器内部结构
- en: When a current is applied to the relay, the coil becomes an electromagnet and
    attracts a bar of metal that acts just like the toggle of a switch. The magnet
    pulls the bar in one direction when on and lets it fall back when off, thereby
    turning it on or off as current is applied to and removed from the coil. This
    movement has a distinctive “click” that you might recognize from the turn signal
    in older cars.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当电流作用于继电器时，线圈变成了电磁铁，吸引一根金属条，金属条的作用就像开关的拨动器。当电流接通时，磁铁会将金属条拉向一个方向，而当电流断开时，它会让金属条落回去，从而根据电流的接通或断开控制开关的开关状态。这一运动会发出独特的“咔哒”声，你可能从老式汽车的转向信号灯中听到过这个声音。
- en: Higher-Voltage Circuits
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高电压电路
- en: Now that you understand a bit about the transistor, rectifier diode, and relay,
    let’s use them together to control higher currents and voltages. For example,
    you may wish to turn a large motor on or off. Connecting the components is simple,
    as shown in [Figure 3-19](#figure3-19).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些关于晶体管、整流二极管和继电器的知识，让我们将它们结合起来控制更高的电流和电压。例如，你可能希望打开或关闭一个大功率电动机。连接这些组件非常简单，如[图
    3-19](#figure3-19)所示。
- en: '![f03019](image_fi/500587c03/f03019.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![f03019](image_fi/500587c03/f03019.png)'
- en: 'Figure 3-19: A relay control circuit'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-19：继电器控制电路
- en: This simple example circuit controls a relay that has a 12 V coil. One use for
    this circuit might be to control a lamp or cooling fan connected to the relay
    switching contacts. The Arduino’s digital pin 10 is connected to the transistor’s
    base via a 1 kΩ resistor. The transistor controls the current through the relay’s
    coil by switching it on and off. Remember that the pins are *C*, *B*, and then
    *E* when looking at the flat surface of the transistor. The object on the left
    of the breadboard at 1 represents a 12 V power supply for the relay coil. The
    negative or ground at 2 from the 12 V supply, the transistor’s emitter pin, and
    Arduino GND are all connected together. Finally, a 1N4004 rectifier diode is connected
    across the relay’s coil at 3, with the cathode on the positive supply side. You
    can check the relay’s data sheet to determine the pins for the contacts and to
    connect the controlled item appropriately.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的示例电路控制一个12V线圈的继电器。这个电路的一种用途可能是控制连接到继电器切换触点的灯泡或冷却风扇。Arduino的数字引脚10通过一个1
    kΩ的电阻连接到晶体管的基极。晶体管通过开关继电器线圈来控制电流的通断。当你观察晶体管的平面时，记住引脚顺序是*C*、*B*，然后是*E*。面包板左侧位置1上的物体代表继电器线圈的12V电源。位置2的12V电源的负极或地线、晶体管的发射极引脚和Arduino的GND都连接在一起。最后，一个1N4004整流二极管连接在继电器线圈的3号位置，阴极接在正电源侧。你可以查阅继电器的数据表来确定接触点的引脚，并将受控设备正确连接。
- en: The diode is in place to protect the circuit. When the relay coil changes from
    on to off, stray current remains briefly in the coil and becomes a high-voltage
    spike that has to go somewhere. The diode allows the stray current to loop around
    through the coil until it is dissipated as a tiny amount of heat. It prevents
    the turn-off spike from damaging the transistor or Arduino pin.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 二极管的作用是保护电路。当继电器线圈从开到关时，线圈中会短暂地残留一些游离电流，这些电流会形成一个高压尖峰，需要释放。二极管允许这些游离电流通过线圈回路，直到它以微量热量的形式被耗散掉。它可以防止关闭尖峰损坏晶体管或Arduino引脚。
- en: Looking Ahead
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: And now Chapter 3 draws to a close. I hope you had fun trying out the examples
    and experimenting with LED effects. In this chapter, you got to create blinking
    LEDs on the Arduino in various ways, did a bit of hacking, and learned how functions
    and loops can be used to efficiently control components connected to the Arduino.
    Studying this chapter has set you up for more success in the forthcoming chapters.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在第三章接近尾声。希望你在尝试示例和实验LED效果时玩得开心。在本章中，你通过多种方式创建了Arduino上的闪烁LED，做了一些黑客实验，并学习了如何使用函数和循环来高效地控制连接到Arduino的组件。学习了这一章，为接下来的章节打下了更成功的基础。
- en: Chapter 4 will be a lot of fun. You will create some more advanced projects,
    including traffic lights, a thermometer, a battery tester, and more—so when you’re
    ready to take it to the next level, turn the page!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 第四章将会非常有趣。你将创建一些更先进的项目，包括交通信号灯、温度计、电池测试器等——所以当你准备好迎接更高挑战时，翻到下一页吧！
