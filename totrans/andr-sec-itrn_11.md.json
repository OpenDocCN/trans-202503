["```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.example.nfc\" ...>\n    --*snip*--\n\n    <uses-permission android:name=\"android.permission.NFC\" />➊\n    --*snip*-\n    <application ...>\n        <activity\n            android:name=\".NfcActivity\"➋\n            android:launchMode=\"singleTop\" >\n            <intent-filter>\n                <action android:name=\"android.nfc.action.NDEF_DISCOVERED\"/>➌\n                <category android:name=\"android.intent.category.DEFAULT\"/>\n                <data android:mimeType=\"text/plain\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.nfc.action.TECH_DISCOVERED\" />➍\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.nfc.action.TAG_DISCOVERED\" />➎\n            </intent-filter>\n\n            <meta-data\n                android:name=\"android.nfc.action.TECH_DISCOVERED\"➏\n                android:resource=\"@xml/filter_nfc\" >\n            </meta-data>\n        </activity>\n        --*snip*--\n    </application>\n</manifest>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <tech-list>➊\n        <tech>android.nfc.tech.IsoDep</tech>\n        <tech>android.nfc.tech.NfcA</tech>\n    </tech-list>\n\n    <tech-list>➋\n        <tech>android.nfc.tech.NfcF</tech>\n    </tech-list>\n</resources>\n```", "```\nprotected void onNewIntent(Intent intent) {\n    setIntent(intent);\n\n    Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);\n    IsoDep isoDep = IsoDep.get(tag);\n    if (isoDep != null) {\n         isoDep.connect();\n         byte[] command = {...};\n         byte[] response = isoDep.transceive(command);\n         --*snip*--\n    }\n}\n```", "```\npublic class NfcActivity extends Activity implements NfcAdapter.ReaderCallback {\n    private NfcAdapter adapter;\n    --*snip*--\n    @Override\n    public void onResume() {\n       super.onResume();\n       if (adapter != null) {\n           adapter.enableReaderMode(this, this, NfcAdapter.FLAG_READER_NFC_A➊\n                   | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK, null);\n       }\n    }\n\n    @Override\n    public void onTagDiscovered(Tag tag) {➋\n        IsoDep isoDep = IsoDep.get(tag);\n        if (isoDep != null) {\n             isoDep.connect();\n             byte[] command = {...};\n             byte[] response = isoDep.transceive(command);\n             --*snip*--\n        }\n    }\n    --*snip*--\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources >\n    <signer android:signature=\"308204a830820390a003020102020900b399...\">➊\n        <package android:name=\"com.example.nfc\">➋\n        </package>\n    </signer>\n</resources>\n```", "```\n<manifest \n    package=\"com.example.nfc\" ...>\n    --*snip*--\n    <uses-permission android:name=\"android.permission.NFC\" />\n    <application ...>\n        --*snip*--\n        <uses-library\n            android:name=\"com.android.nfc_extras\"➊\n            android:required=\"true\" />\n    </application>\n</manifest>\n```", "```\npublic class NfcExecutionEnvironment {\n    public void open() throws EeIOException {...}\n\n    public void close() throws IOException {...}\n\n    public byte[] transceive(byte[] in) throws IOException {...}\n}\n```", "```\nNfcAdapterExtras adapterExtras =\n     NfcAdapterExtras.get(NfcAdapter.getDefaultAdapter(context));➊\nNfcExecutionEnvironment nfceEe =\n     adapterExtras.getEmbeddedExecutionEnvironment();➋\nnfcEe.open();➌\nbyte[] emptySelectCmd = { 0x00, (byte) 0xa4, 0x04, 0x00, 0x00 };\nbyte[] response = nfcEe.transceive(emptySelectCmd);➍\nnfcEe.close();➎\n```", "```\n<receiver android:name=\"com.example.nfc.SEReceiver\" >\n  <intent-filter>\n   <action android:name=\"com.android.nfc_extras.action.RF_FIELD_ON_DETECTED\" />➊\n   <action android:name=\"com.android.nfc_extras.action.RF_FIELD_OFF_DETECTED\" />➋\n   <action android:name=\"com.android.nfc_extras.action.APDU_RECEIVED\" />➌\n   <action android:name=\"com.android.nfc_extras.action.AID_SELECTED\" />➍\n   <action android:name=\"com.android.nfc_extras.action.MIFARE_ACCESS_DETECTED\" />➎\n   <action android:name=\"com.android.nfc_extras.action.EMV_CARD_REMOVAL\" />➏\n   <action android:name=\"com.android.nfc.action.INTERNAL_TARGET_DESELECTED\" />➐\n   <action android:name=\"android.intent.action.MASTER_CLEAR_NOTIFICATION\" />➑\n  </intent-filter>\n</receiver>\n```", "```\n--> 00A4040000➊\n<-- 6F658408A000000003000000A5599F6501FF9F6E06479100783300734A06072A86488\n6FC6B01600C060A2A864886FC6B02020101630906072A864886FC6B03640B06092A86488\n6FC6B040215650B06092B8510864864020103660C060A2B060104012A026E0102 9000➋\n```", "```\nSD FCI: Security Domain FCI\n   AID: a0 00 00 00 03 00 00 00➊\n    RID: a0 00 00 00 03 (Visa International [US])\n    PIX: 00 00 00\n\n   Data field max length: 255\n   Application prod. life cycle data: 479100783300\n   Tag allocation authority (OID): globalPlatform 01\n   Card management type and version (OID): globalPlatform 02020101\n   Card identification scheme (OID): globalPlatform 03\n   Global Platform version: 2.1.1➋\n   Secure channel version: SC02 (options: 15)➌\n   Card config details: 06092B8510864864020103➍\n   Card/chip details: 060A2B060104012A026E0102➎\n```", "```\n<manifest ...>\n    --*snip*--\n    <uses-permission android:name=\"org.simalliance.openmobileapi.SMARTCARD\" />\n\n    <application ...>\n        <uses-library\n            android:name=\"org.simalliance.openmobileapi\"\n            android:required=\"true\" />\n     --*snip*--\n    </application>\n</manifest>\n```", "```\nContext context = getContext();\nSEService.CallBack callback = createSeCallback();\nSEService seService = new SEService(context, callback);➊\nReader[] readers = seService.getReaders();➋\nSession session = readers[0].openSession();➌\nChannel channel = session.openLogicalChannel(aid);➍\nbyte[] command = { ... };\nbyte[] response = channel.transmit(command);➎\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.example.hce\" ...>\n    --*snip*--\n    <uses-permission android:name=\"android.permission.NFC\" />\n\n    <application ...>\n        --*snip*--\n        <service\n            android:name=\".MyHostApduService\"➊\n            android:exported=\"true\"\n            android:permission=\"android.permission.BIND_NFC_SERVICE\" >➋\n            <intent-filter>\n                <action\n                    android:name=\"android.nfc.cardemulation.action.HOST_APDU_SERVICE\" />➌\n            </intent-filter>\n\n            <meta-data\n                android:name=\"android.nfc.cardemulation.host_apdu_service\"➍\n                android:resource=\"@xml/apduservice\" />\n        </service>\n        --*snip*--\n    </application>\n</manifest>\n```", "```\n<host-apdu-service\n\n    android:description=\"@string/servicedesc\"\n    android:requireDeviceUnlock=\"false\">➊\n    <aid-group android:description=\"@string/aiddescription\"➋\n               android:category=\"other\">➌\n        <aid-filter android:name=\"A0000000010101\"/>➍\n    </aid-group>\n</host-apdu-service>\n```", "```\n<manifest \n    package=\"com.example.hce\" ...>\n    --*snip*--\n    <uses-permission android:name=\"android.permission.NFC\" />\n\n    <application ... >\n        --*snip*--\n        <service android:name=\".MyOffHostApduService\"\n                 android:exported=\"true\"\n                 android:permission=\"android.permission.BIND_NFC_SERVICE\">\n        <intent-filter>\n            <action\n                android:name=\"android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE\"/>➊\n        </intent-filter>\n        <meta-data\n            android:name=\"android.nfc.cardemulation.off_host_apdu_service\"➋\n            android:resource=\"@xml/apduservice\"/>\n    </service>\n    --*snip*--\n    </application>\n</manifest>\n```", "```\n<offhost-apdu-service\n\n    android:description=\"@string/servicedesc\">➊\n    <aid-group android:description=\"@string/se_applets\"\n               android:category=\"other\">➋\n        <aid-filter android:name=\"F0000000000001\"/>➌\n        <aid-filter android:name=\"F0000000000002\"/>➍\n    </aid-group>\n</offhost-apdu-service>\n```", "```\npublic class MyHostApduService extends HostApduService {\n    --*snip*--\n    static final int OFFSET_CLA = 0;➊\n    static final int OFFSET_INS = 1;\n    static final int OFFSET_P1 = 2;\n    static final int OFFSET_P2 = 3;\n    --*snip*--\n    static final short SW_SUCCESS = (short) 0x9000;➋\n    static final short SW_CLA_NOT_SUPPORTED = 0x6E00;\n    static final short SW_INS_NOT_SUPPORTED = 0x6D00;\n    --*snip*--\n    static final byte[] SELECT_CMD = { 0x00, (byte) 0xA4,\n            0x04, 0x00, 0x06, (byte) 0xA0,\n            0x00, 0x00, 0x00, 0x01, 0x01, 0x01 };➌\n\n    static final byte MY_CLA = (byte) 0x80;➍\n    static final byte INS_CMD1 = (byte) 0x01;\n    static final byte INS_CMD2 = (byte) 0x02;\n\n    boolean selected = false;\n\n    public byte[] processCommandApdu(byte[] cmd, Bundle extras) {\n        if (!selected) {\n            if (Arrays.equals(cmd, SELECT_CMD)) {➎\n                selected = true;\n\n                return toBytes(SW_SUCCESS);\n            }\n            --*snip*-\n        }\n\n        if (cmd[OFFSET_CLA] != MY_CLA) {➏\n            return toBytes(SW_CLA_NOT_SUPPORTED);\n        }\n\n        byte ins = cmd[OFFSET_INS];➐\n        switch (ins) {\n            case INS_CMD1:➑\n                byte p1 = cmd[OFFSET_P1];\n                byte p2 = cmd[OFFSET_P2];\n                --*snip*--\n                return toBytes(SW_SUCCESS);\n            case INS_CMD2:\n                --*snip*--\n                return null;➒\n            default:\n                return toBytes(SW_INS_NOT_SUPPORTED);\n        }\n    }\n\n    @Override\n    public void onDeactivated(int reason) {\n        --*snip*--\n        selected = false;➊\n    }\n    --*snip*--\n}\n```"]