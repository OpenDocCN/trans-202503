- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Internet
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Build a web server to display data on a web page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your Arduino to send tweets on Twitter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remotely control Arduino digital outputs from a web browser
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will show you how to connect your Arduino to the outside world
    via the internet. This allows you to broadcast data from your Arduino and remotely
    control your Arduino from a web browser.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: What You’ll Need
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build these internet-related projects, you will need some common hardware,
    a cable, and some information.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the hardware. You’ll need an Ethernet shield with the W5100
    controller chip. You have two options to consider: you can use the genuine Arduino-brand
    Ethernet shield, as shown in [Figure 21-1](#figure21-1), or you can use an Arduino
    Uno–compatible board with integrated Ethernet hardware, such PMD Way part 328497,
    as shown in [Figure 21-2](#figure21-2). The latter is a good choice for new projects
    or when you want to save physical space and money. As you can see, the integrated
    board has the connectors for Arduino shields, a USB port, an Ethernet socket,
    and a microSD card socket.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![f21001](image_fi/500587c21/f21001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-1: An Arduino Ethernet shield'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![f21002](image_fi/500587c21/f21002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-2: An Arduino Uno–compatible board with integrated Ethernet'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of your choice of hardware, you’ll also need a standard 10/100 CAT5,
    CAT5E, or CAT6 network cable to connect your Ethernet shield to your network router
    or internet modem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you’ll need the IP address of your network’s router gateway or
    modem, which should look something like this: 192.168.0.1\. You’ll also need your
    computer’s IP address in the same format as your router’s IP address.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you want to communicate with your Arduino from outside your home
    or local area network, you’ll need a static, public IP address. A static IP address
    is a fixed address assigned to your physical internet connection by your internet
    service provider (ISP). Your internet connection may not have a static IP address
    by default; contact your ISP to have this activated if necessary. If your ISP
    cannot offer a static IP or if it costs too much, you can get an automated redirection
    service that offers a hostname that can divert to your connection’s IP address
    through a third-party company, such as No-IP ([http://www.noip.com/](http://www.noip.com/))
    or Dyn ([https://account.dyn.com/](https://account.dyn.com/)). Now let’s put our
    hardware to the test with a simple project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #60: Building a Remote Monitoring Station'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In projects in previous chapters, we gathered data from sensors to measure temperature
    and light. In this project, you’ll learn how to display those values on a simple
    web page that you can access from almost any web-enabled device. This project
    will display the values of the analog input pins and the status of digital inputs
    0 to 9 on a simple web page, functionality that will serve as the basis for a
    remote monitoring station.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Using this framework, you can add sensors with analog and digital outputs, such
    as temperature, light, and switch sensors, and then display the sensors’ status
    on a web page.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: One USB cable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One network cable
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Arduino Uno and Ethernet shield, or one Arduino Uno–compatible board with
    integrated Ethernet
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Sketch
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter the following sketch, but *don’t upload it* yet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We’ll discuss this sketch in more detail a bit later. First, before uploading
    the sketch, you’ll need to enter an IP address for your Ethernet shield so that
    it can be found on your local network or modem. You can determine the first three
    parts of the address by checking your router’s IP address. For example, if your
    router’s address is 192.168.0.1, change the last digit to something random and
    different from that of other devices on your network, using a number between 2
    and 254 that isn’t already in use on your network. Enter the altered IP address
    at 1 in the sketch, like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f21003](image_fi/500587c21/f21003.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-3: Values of the pins monitored by our station, viewable as a web
    page on any web-connected device with a web browser'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve made that change, save and upload your sketch. Next, insert the
    Ethernet shield into your Arduino if required, connect the network cable to your
    router or modem and the Ethernet connector, and power on your Arduino board.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Wait about 20 seconds. Then, using a web browser on any device or computer on
    your network, enter the IP address from 1. If you see something like [Figure 21-3](#figure21-3),
    the framework of your monitoring station is working correctly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If this project doesn’t work for you, try the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Check that the IP address is set correctly in the sketch at 1.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that the sketch is correct and uploaded to your Arduino.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-check the local network. You might check whether a connected computer
    can access the internet. If so, check that the Arduino board has power and is
    connected to the router or modem.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re accessing the project web page from a smartphone, make sure your smartphone
    is accessing your local Wi-Fi network and not the cell phone company’s cellular
    network.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If none of the Ethernet shield’s LEDs are blinking when the Arduino has power
    and the Ethernet cable is connected to the shield and router or modem, try another
    patch lead.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Sketch
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once your monitoring station is working, you can return to the most important
    parts of the sketch. The code from the beginning until 3 is required because it
    loads the necessary libraries and starts the Ethernet hardware in `void setup()`.
    Prior to 3, the `client.print()` statements are where the sketch sets up the web
    page to allow it to be read by the web browser. From 3 on, you can use the functions
    `client.print()` and `client.println()` to display information on the web page
    as you would with the Serial Monitor. For example, the following code is used
    to display the first six lines of the web page shown in Figure 19-3:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At 4, you see an example of writing text and the contents of a variable to the
    web page. Here you can use HTML to control the look of your displayed web page,
    as long as you don’t overtax your Arduino’s memory. In other words, you can use
    as much HTML code as you like until you reach the maximum sketch size, which is
    dictated by the amount of memory in your Arduino board. (The sizes for each board
    type are described in Table 13-2 on page 234.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: One thing to notice is the MAC address that networks can use to detect individual
    pieces of hardware connected to the network. Each piece of hardware on a network
    has a unique MAC address, which can be changed by altering one of the hexadecimal
    values at 2. If two or more Arduino-based projects are using one network, you
    must enter a different MAC address for each device at 2. If your shield has a
    MAC address included with it, use that value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you want to view your web page from a device that is not connected
    to your local network, such as a tablet or phone using a cellular connection,
    then you’ll need to use a technique called *port forwarding* in your network router
    or modem, provided by an organization such as the previously mentioned No-IP or
    Dyn. Port forwarding is often unique to the make and model of your router, so
    do an internet search for “router port forwarding” or visit a tutorial site such
    as [http://www.wikihow.com/Port-Forward](http://www.wikihow.com/Port-Forward)
    for more information.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to display text and variables on a web page, let’s use
    the Arduino to tweet.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #61: Creating an Arduino Tweeter'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you’ll learn how to make your Arduino send tweets through Twitter.
    You can receive all sorts of information that can be generated by a sketch from
    any device that can access Twitter. If, for example, you want hourly temperature
    updates from home while you’re abroad or even notifications when the kids come
    home, this can offer an inexpensive solution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Arduino will need its own Twitter account, so do the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://twitter.com/](http://twitter.com/) and create your Arduino’s Twitter
    account. Make note of the username and password.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get a *token* from the third-party website [http://arduino-tweet.appspot.com/](http://arduino-tweet.appspot.com/).
    A token creates a bridge between your Arduino and the Twitter service. You’ll
    need to follow only step 1 on this site.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从第三方网站[http://arduino-tweet.appspot.com/](http://arduino-tweet.appspot.com/)获取一个*令牌*。令牌在Arduino与Twitter服务之间创建了一座桥梁。你只需要在这个网站上完成第1步。
- en: Copy and paste the token, along with your Arduino’s new Twitter account details,
    into a text file on your computer.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将令牌以及你的Arduino新Twitter账户的详细信息复制并粘贴到电脑上的文本文件中。
- en: Download and install the Twitter Arduino library from [https://github.com/NeoCat/Arduno-Twitter-library/archive/master.zip](https://github.com/NeoCat/Arduno-Twitter-library/archive/master.zip).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/NeoCat/Arduno-Twitter-library/archive/master.zip](https://github.com/NeoCat/Arduno-Twitter-library/archive/master.zip)下载并安装Twitter
    Arduino库。
- en: The Hardware
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件部分
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要创建这个项目的材料：
- en: One USB cable
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根USB电缆
- en: One network cable
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根网络电缆
- en: One Arduino Uno and Ethernet shield, or one Arduino Uno–compatible board with
    integrated Ethernet
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Uno和以太网扩展板，或一块与Arduino Uno兼容的集成以太网板
- en: The Sketch
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图部分
- en: 'Enter the following sketch, but *don’t upload it* yet:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下草图，但*不要上传*：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![f21004](image_fi/500587c21/f21004.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f21004](image_fi/500587c21/f21004.png)'
- en: 'Figure 21-4: Your Arduino’s tweet'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-4：你的Arduino推文
- en: As with Project 60, insert your IP address at 1 and modify the MAC address if
    necessary at 2. Then insert the Twitter token between the double quotes at 3.
    Finally, insert the text that you want to tweet at 4. Now upload the sketch and
    connect your hardware to the network. (Don’t forget to follow your Arduino’s Twitter
    account with your own account!) After a minute or so, visit your Twitter page
    or load the app on a device, and the message should be displayed, as shown in
    [Figure 21-4](#figure21-4).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如同项目60一样，在1处插入你的IP地址，并在2处根据需要修改MAC地址。然后在3处的双引号之间插入Twitter令牌。最后，在4处插入你想要发送的推文内容。现在上传草图并将硬件连接到网络。（别忘了使用你自己的账户关注Arduino的Twitter账户！）大约一分钟后，访问你的Twitter页面或在设备上加载应用，信息应该会显示出来，如[图
    21-4](#figure21-4)所示。
- en: When you’re creating your Arduino tweeter, keep in mind that you can send no
    more than one tweet per minute and that each message must be unique. (These are
    Twitter’s rules.) When sending tweets, Twitter also replies with a status code.
    The sketch will receive and display this in the Serial Monitor using the code
    at 5. [Figure 21-5](#figure21-5) shows an example.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Arduino推特程序时，请记住每分钟只能发送一条推文，并且每条信息必须是独一无二的。（这些是Twitter的规定。）发送推文时，Twitter还会回复一个状态码。草图会在串口监视器中接收并显示该状态码，使用位于5处的代码。[图
    21-5](#figure21-5)显示了一个示例。
- en: '![f21005](image_fi/500587c21/f21005.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![f21005](image_fi/500587c21/f21005.png)'
- en: 'Figure 21-5: Example error message from Twitter due to a duplicate post attempt'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-5：由于尝试重复发布，Twitter 返回的示例错误信息
- en: If you receive a 403 message like this, either your token is incorrect or you’re
    sending tweets too quickly. (For a complete list of Twitter error codes, see [https://finderrorcode.com/twitter-error-codes.html](https://finderrorcode.com/twitter-error-codes.html).)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到像这样的403消息，可能是令牌不正确或者你发送推文的速度过快。（有关完整的Twitter错误代码列表，请参见[https://finderrorcode.com/twitter-error-codes.html](https://finderrorcode.com/twitter-error-codes.html)）。
- en: Controlling Your Arduino from the Web
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从网页控制你的Arduino
- en: 'You can control your Arduino from a web browser in several ways. After doing
    some research, I’ve found a method that is reliable, secure, and free: Teleduino.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式从网页浏览器控制你的Arduino。经过一些研究，我找到了一个可靠、安全且免费的方法：Teleduino。
- en: Teleduino is a free service created by New Zealand Arduino enthusiast Nathan
    Kennedy. It’s a simple yet powerful tool for interacting with an Arduino over
    the internet. It doesn’t require any special or customized Arduino sketches; instead,
    you simply enter a special URL into a web browser to control the Arduino. You
    can use Teleduino to control digital output pins and servos or to send I²C commands,
    and more features are being added all the time. In Project 62, you’ll learn how
    to configure Teleduino and remotely control digital outputs from a web-enabled
    device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Teleduino是由新西兰Arduino爱好者Nathan Kennedy创建的一个免费服务。它是一个简单而强大的工具，用于通过互联网与Arduino交互。它不需要任何特殊或定制的Arduino草图；你只需在网页浏览器中输入一个特殊的URL即可控制Arduino。你可以使用Teleduino来控制数字输出引脚和舵机，或者发送I²C命令，更多功能正在不断添加。在项目62中，你将学习如何配置Teleduino，并通过网络启用的设备远程控制数字输出。
- en: 'Project #62: Setting Up a Remote Control for Your Arduino'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #62：为你的Arduino设置远程控制'
- en: 'Before starting your first Teleduino project, you must register with the Teleduino
    service and obtain a unique key to identify your Arduino. To do so, visit [https://www.teleduino.org/tools/request-key/](https://www.teleduino.org/tools/request-key/)
    and enter the required information. You should receive an email with your key,
    which will look something like this: `187654321Z9AEFF952ABCDEF8534B2BBF`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Next, convert your key into an array variable by visiting [https://www.teleduino.org/tools/arduino-sketch-key/](https://www.teleduino.org/tools/arduino-sketch-key/).
    Enter your key, and the page should return an array similar to that shown in [Figure
    21-6](#figure21-6).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![f21006](image_fi/500587c21/f21006.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-6: A Teleduino key as an array'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Each key is unique to a single Arduino, but you can get more keys if you want
    to run more than one Teleduino project at a time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: One USB cable
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One network cable
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Arduino Uno and Ethernet shield, or one Arduino Uno–compatible board with
    integrated Ethernet
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 560 Ω resistor (R1)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One LED of any color
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your hardware and connect an LED to digital pin 8, as shown in [Figure
    21-7](#figure21-7).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![f21007](image_fi/500587c21/f21007.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-7: Schematic for Project 62'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Projects in Teleduino use only one sketch, which is included with the Teleduino
    library. Here’s how to access the sketch:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Teleduino library from [https://www.teleduino.org/downloads/](https://www.teleduino.org/downloads/).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the Arduino IDE and select **File**▶**Examples**▶**Teleduino328**▶**TeleduinoEthernetClientProxy**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see the Teleduino sketch. Before uploading it to your Arduino,
    replace the default key with your key array. The variable you need to replace
    should be on line 36 of the sketch. Once you’ve replaced it, save the sketch,
    and then upload it to your Arduino.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now connect your hardware to the network and watch the LED. After a minute or
    so, it should blink a few times and then rest. The number of blinks represents
    the status of the Teleduino service, as shown in [Table 21-1](#table21-1).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 21-1: Teleduino Status Blink Codes'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '| **Number of blinks** | **Message** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| 1 | Initializing |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| 2 | Starting network connection |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| 3 | Connecting to the Teleduino server |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| 4 | Authentication successful |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| 5 | Session already exists |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| 6 | Invalid or unauthorized key |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| 10 | Connection dropped |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: If you see five blinks, then another Arduino is already programmed with your
    key and connected to the Teleduino server. At 10 blinks, you should check your
    hardware and internet connections. Once the Arduino has connected, it should blink
    once every 5 seconds or so. Because the status LED is controlled by digital pin
    8, you can’t use that pin for any other purpose while you’re using Teleduino.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Controlling Your Arduino Remotely
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To control your Teleduino remotely, you can use any device with a web browser.
    However, you first need to set the mode for each digital pin you wish to control.
    The command to control the Arduino is sent by entering a URL that you create:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You’ll need to change three parameters in the URL. First, replace `{``YOURKEY``}`
    with the long alphanumeric key you received from the Teleduino site. Next, replace
    `<``X``>` with the digital pin number you want to control. Third, change the `<``Y``>`
    to `1` to set up the digital pin as an output.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can control the digital pin remotely. The command to do this is:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Again, you’ll need to change three parameters in the URL. First, replace `{``YOURKEY``}`
    with the long alphanumeric key you received from the Teleduino site. Next, replace
    `<``X``>` with the digital pin number you want to control. Third, change the `<``S``>`
    to `0` for low or `1` for high to alter the digital output. For example, to turn
    digital pin 7 to high, you would enter:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the command succeeds, you should see something like the following in
    your web browser:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the command fails, you should see an error message like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can send commands to change the digital pins to high or low by modifying
    the URL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'If a digital pin is capable of pulse-width modulation (PWM), as described in
    Chapter 3, you can also control the PWM output from a pin using:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: where `<``X``>` is the digital output pin and `<``Y``>` is the PWM level, between
    0 and 255.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: After you have created the URLs for your project, bookmark them in your browser
    or create a local web page with the required links as buttons. For example, you
    might have a URL bookmarked to set digital pin 7 to high and another bookmarked
    to set it back to low.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: In some situations, the status of your Arduino outputs could be critical. As
    a fail-safe in case your Arduino resets itself due to a power outage or other
    interruption, set the default state for the digital pins. With your project connected
    to the Teleduino service, visit [https://www.teleduino.org/tools/manage-presets/](https://www.teleduino.org/tools/manage-presets/).
    After entering your unique key, you should see a screen of options that allows
    you to select the mode and value for the digital pins, as shown in [Figure 21-8](#figure21-8).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![f21008](image_fi/500587c21/f21008.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-8: Default pin status setup page'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with easily monitoring your Arduino over the internet and having it send
    tweets on Twitter, you can control your Arduino projects over the internet without
    creating any complex sketches, having much networking knowledge, or incurring
    monthly expenses. This enables you to control the Arduino from almost anywhere
    and extend the reach of its ability to send data. The three projects in this chapter
    provide a framework that you can build upon to design your own remote control
    projects.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter, which is the last one in the book, shows you how to make your
    Arduino send and receive commands over a cellular network connection.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的下一章，也是最后一章，将向你展示如何通过蜂窝网络连接让你的Arduino发送和接收命令。
