- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This book is called *Bare Metal C* because it’s for people who get close to
    the hardware. It’s not for people who buy their computer in a box and never see
    the inside. The computer used in this book doesn’t even have a box. If you want
    to use it, you’re going to have to connect something to the “bare metal” of the
    board.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book teaches embedded programming. An *embedded computer* is one that
    sits inside the machine and you never know it’s there. It’s the device that runs
    your garage door opener, your microwave, your car, or even your greeting card.
    But before it can do any of those things, it needs to be programmed. And that
    is what this book teaches you: how to program an embedded system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Why C? C gives you precise control over what your program is doing, whereas
    other languages, such as C++, can do a great deal of things behind your back.
    Consider the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In C++, this could call a class’s assignment operator function, which might
    result in heap memory being allocated and freed as well as an exception being
    thrown. What all that means is unimportant right now; the point is that you don’t
    know exactly what’s going to happen.
  prefs: []
  type: TYPE_NORMAL
- en: In C, this statement assigns the value `b` to the variable `a` with no side
    effects; it’s just an assignment, nothing more. This example is simple, but you’ll
    see other ways that C does exactly what you tell it throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Precise control is important because we are using C to program a low-end *system
    on a chip (SOC)* system based on the STM32F030x4 processor (a cheap ARM Cortex-M0-based
    system) that has 8KB of RAM. Memory management is very important with limited
    RAM, so we can’t afford to have a high-level language like C++ play with memory
    behind our backs. Precise control is also important because an embedded system
    doesn’t have an operating system and you need to tell the hardware what to do
    directly. High-level languages don’t always let you talk to the hardware, but
    C does.
  prefs: []
  type: TYPE_NORMAL
- en: The book is designed for people who have a basic knowledge of computers and
    hardware, but have a limited knowledge of programming. It is for the hardware
    designer who wants to connect a new piece of hardware to a microcontroller and
    use it for the first time. It is for the programmer who is interested in low-level
    programming and wants to get the most out of a 38¢ chip.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of your programs, you’ll need to know what goes on under
    the hood. The book shows you not only how to write a program, but also how your
    program is translated into machine code that’s used by the ARM chip. That’s important
    for maximum efficiency. For example, you’ll learn how much of a performance hit
    you’ll get if you change your program from using 16-bit integers to using 32-bit
    integers. The answer, surprisingly, is that 32-bit integers are *more efficient*
    and *faster* (32 bits is the natural number size for the ARM, and if it’s forced
    to do 16-bit arithmetic, it does 32-bit calculations and then throws away 16 bits).
  prefs: []
  type: TYPE_NORMAL
- en: 'To program and debug an ARM chip, you’ll need some extra tools: a flash memory
    programmer (to get your code into the machine), a USB-to-serial converter (because
    we use the serial line for debugging), and a JTAG debugger. Since almost all developers
    need this combination of tools, STMicroelectronics makes a board that provides
    all the hardware you’ll need, called the NUCLEO-F030R8\. As of this writing, a
    chip shortage has made some boards hard to find. See [https://nostarch.com/bare-metal-c](https://nostarch.com/bare-metal-c)
    for alternate boards. You’ll also need a mini USB cable (the one that doesn’t
    fit your phone) so you can plug the board into your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Your first task is to order a NUCLEO-F030R8\. Then start reading Chapter 1.
    By the time the board arrives, you will be ready for it.
  prefs: []
  type: TYPE_NORMAL
