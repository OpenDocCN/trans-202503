["```\n          load     #0         ; zero the first number in the sequence\n\n          store    first\n\n          load     #1        ; set the second number in the sequence to 1\n\n          store    second\n\nagain:    load     first     ; add the first and second numbers to get the\n\n          add      second    ; next number in the sequence\n\n          store    next\n\n                             ; do something interesting with the number\n\n          load     second    ; move the second number to be the first number\n\n          store    first\n\n          load     next      ; make the next number the second number\n\n          store    second\n\n          cmp      #200      ; are we done yet?\n\n          ble      again     ; nope, go around again\n\nfirst:    bss      1         ; where the first number is stored\n\nsecond:   bss      1         ; where the second number is stored\n\nnext:     bss      1         ; where the next number is stored\n```", "```\nC   SET THE INITIAL TWO SEQUENCE NUMBERS IN I and J\n\n    I=0\n\n    J=1\n\nC   GET NEXT SEQUENCE NUMBER\n\n5   K=I+J\n\nC   DO SOMETHING INTERESTING WITH THE NUMBER\n\nC   SHIFT THE SEQUENCE NUMBERS TO I AND J\n\n    I=J\n\n    J=K\n\nC   DO IT AGAIN IF THE LAST NUMBER WAS LESS THAN 200\n\n    IF (J .LT. 200) GOTO 5\n\nC   ALL DONE\n```", "```\nvar first;   // first number\n\nvar second;  // second number\n\nvar next;    // next number in sequence\n\nfirst = 0;\n\nsecond = 1;\n\nwhile ((next = first + second) < 200) {\n\n    // do something interesting with the number\n\n    first = second;\n\n    second = next;\n\n}\n```", "```\n<digit>              ::= \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n\n<digits>             ::= <digit> | <digits> <digit>\n\n<e>                  ::= \"e\" | \"E\"\n\n<sign>               ::= \"+\" | \"-\"\n\n<optional-sign>      ::= <sign> | \"\"\n\n<exponent>           ::= <e> <optional-sign> <digits>\n\n<optional-exponent>  ::= <exponent> | \"\"\n\n<mantissa>           ::= <digits> | <digits> \".\" | \".\" <digits> | <digits> \".\" <digits>\n\n<floating-point>     ::= <optional-sign> <mantissa> <optional-exponent>\n```", "```\nstate = 1;\n\nwhile (state > 0)\n\n    state = state_table[state][next_character];\n```", "```\n[ae]r       printf(\"ah\");\n\na/[ .,;!?]  printf(\"er\");\n```", "```\n0[0-7]*                                                       return (INTEGER);\n\n[+-]?[0-9]+                                                   return (INTEGER);\n\n[+-]?(([0-9]*\\.?[0-9]+)|([0-9]+\\.?[0-9]*))([Ee][+-]?[0-9]+)?  return (FLOAT);\n\n0x[0-9a-fA-F]+                                                return (INTEGER);\n\n[A-Za-z][A-Za-z0-9]*                                          return (VARIABLE);\n\n\\+                                                            return (PLUS);\n\n-                                                             return (MINUS);\n\n\\*                                                            return (TIMES);\n\n\\/                                                            return (DIVIDE);\n\n=                                                             return (EQUALS);\n```", "```\n<operator>     ::= PLUS | MINUS | TIMES | DIVIDE\n\n<operand>      ::= INTEGER | FLOAT | VARIABLE\n\n<expression>   ::= <operand> | <expression> PLUS <operand>\n\n                             | <expression> MINUS <operand>\n\n                             | <expression> TIMES <operand>\n\n                             | <expression> DIVIDE <operand>\n\n<assignment>   ::= <variable> EQUALS <expression>\n\n<statement>    ::= <expression> | <assignment>\n\n<statements>   ::= \"\" | <statements> <statement>\n\n<calculator>   ::= <statements>\n```", "```\ncalculator  : statements\n\n            ;\n\nstatements  : /* empty */\n\n            | statement statements\n\n            ;\n\noperand     : INTEGER\n\n            | FLOAT\n\n            | VARIABLE\n\n            ;\n\nexpression  : expression PLUS operand\n\n            | expression MINUS operand\n\n            | expression TIMES operand\n\n            | expression DIVIDE operand\n\n            | operand\n\n            ;\n\nassignment  : VARIABLE EQUALS expression\n\n            ;\n\nstatement   : expression\n\n            | assignment\n\n            ;\n```", "```\ncalculator      : statements                    { do_something_with($1); }\n\n                ;\n\nstatements      : /* empty */\n\n                | statement statements          { $$.n = makenode(2, LIST, $1, $2); }\n\n                ;\n\noperand         : INTEGER                       { $$ = makenode(1, INTEGER, $1); }\n\n                | VARIABLE                      { $$ = makenode(1, VARIABLE, $1); }\n\n                ;\n\nexpression      : expression PLUS operand       { $$.n = makenode(2, PLUS, $1, $3); }\n\n                | expression MINUS operand      { $$.n = makenode(2, MINUS, $1, $3); }\n\n                | expression TIMES operand      { $$.n = makenode(2, TIMES, $1, $3); }\n\n                | expression DIVIDE operand     { $$.n = makenode(2, DIVIDE, $1, $3); }\n\n                | operand                       { $$ = $1; }\n\n                ;\n\nassignment      : VARIABLE EQUALS expression    { $$.n = makenode(2, EQUALS, $1, $3); }\n\n                ;\n\nstatement       : expression                    { $$ = $1; }\n\n                | assignment                    { $$ = $1; }\n\n                ;\n```", "```\n                           ; first list element\n\n       load      #3        ; grab the integer 3\n\n       store     tmp       ; save it away\n\n       load      #2        ; grab the integer 2\n\n       mul       tmp       ; multiply the values subtree nodes\n\n       store     tmp       ; save it away\n\n       load      #1        ; grab the integer 1\n\n       add       tmp       ; add it to the result of 2 times 3\n\n       store     tmp       ; save it away\n\n                           ; second list element\n\n       load      #5        ; grab the integer 5\n\n       store     foo       ; save it in the space for the \"foo\" variable\n\n       store     tmp       ; save it away\n\n                           ; third list element\n\n       load      foo       ; get contents of \"foo\" variable\n\n       store     tmp       ; save it away\n\n       load      #6        ; grab the integer 6\n\n       div       tmp       ; divide them\n\n       store     tmp       ; save it away\n\ntmp:   bss       1         ; storage space for temporary variable\n\nfoo:   bss       1         ; storage space for \"foo\" variable\n```", "```\nfor (i = 0; i < 10; i++) {\n\n    x = a + b;\n\n    result[i] = 4 * i + x * x;\n\n}\n```", "```\nx = a + b;\n\noptimizer_created_temporary_variable = x * x;\n\nfor (i = 0; i < 10; i++) {\n\n    result[i] = 4 * i + optimizer_created_temporary_variable;\n\n}\n```", "```\nx = a + b;\n\noptimizer_created_temporary_variable = x * x;\n\noptimizer_created_4_times_i = 0;\n\nfor (i = 0; i < 10; i++) {\n\n    result[i] = optimizer_created_4_times_i + optimizer_created_temporary_variable;\n\n    optimizer_created_4_times_i = optimizer_created_4_times_i + 4;\n\n}\n```", "```\nvoid\n\nlights_on()\n\n{\n\n    PORTB = 0x01;\n\n    return;\n\n}\n```", "```\nunsigned int\n\nlights_on()\n\n{\n\n    PORTB = 0x01;\n\n    return (PORTB);\n\n}\n```"]