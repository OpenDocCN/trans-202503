["```\n5 5 0 0 0\n5 5 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n```", "```\nclass Firefly:\n    def Move(self, c):\n        if self.M == \"M\":\n            pass\n        elif self.M == \"I\":\n            self.C[self.I] += 1\n            if self.C[self.I] > 9:\n                self.C[self.I] =0\n        elif self.M == \"D\":\n            if (self.C[self.I] == 0):\n                self.C[self.I] = 9\n            else:\n                self.C[self.I] -= 1\n        else:\n            self.C[self.I] = int(self.M) i = self.I // 5\n        j = self.I % 5\n\n        if c == \"N\":\n            i -= 1\n            if i < 0:\n                i = 4\n        elif c == \"S\":\n            i += 1\n            if i > 4:\n                i = 0\n        elif c == \"E\":\n            j += 1\n            if j > 4:\n                j = 0\n        elif c == \"W\":\n            j -= 1\n            if j < 0:\n                j = 4\n\n        self.I = 5*i + j\n\n    def Run(self):\n        for c in self.prg:\n            if c == \"I\":\n                self.M = \"I\"\n            elif c == \"D\":\n                self.M = \"D\"\n            elif c == \"M\":\n                self.M = \"M\"\n            elif c in self.DIGITS:\n                self.M = c\n            elif c in self.MOVES:\n                self.Move(c)\n\n    def GetDisplay(self):\n        return self.C.reshape((5,5))\n\n    def __init__(self, prg=None):\n        self.prg = prg\n        self.C = np.zeros(25)\n        self.I = 12\n        self.M = \"M\"\n        self.DIGITS= [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n        self.MOVES = [\"N\",\"E\",\"W\",\"S\"]\n```", "```\n>>> from fly_swarm import Firefly\n>>> ff = Firefly(\"5NNN\")\n>>> ff.Run()\n>>> ff.GetDisplay()\narray([[0., 0., 5., 0., 0.],\n       [0., 0., 5., 0., 0.],\n       [0., 0., 5., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n```", "```\nclass FlyBounds(Bounds):\n    def __init__(self, ndim):\n        lower = [0]*ndim\n        upper = [len(ALLOWED)-1]*ndim\n        super().__init__(lower, upper, enforce=\"resample\")\n    def Validate(self, p):\n        return np.floor(p+0.5)\n```", "```\nclass FlyObjective:\n    def __init__(self, target):\n        self.target = target\n        self.fcount = 0\n    def Evaluate(self, p):\n        self.fcount += 1\n        prg = PositionToFirefly(p)\n        fly = Firefly(prg)\n        fly.Run()\n        return ((self.target - fly.GetDisplay())**2).mean()\n\ndef PositionToFirefly(p):\n    prg = \"\"\n    for i in range(len(p)):\n        prg += ALLOWED[int(p[i])]\n    return prg\n```", "```\n➊ target = np.loadtxt(sys.argv[1])\n   npart = int(sys.argv[2])\n   ndim = int(sys.argv[3])\n   niter = int(sys.argv[4])\n\n➋ b = FlyBounds(ndim)\n   i = RandomInitializer(npart, ndim, bounds=b)\n\n➌ obj = FlyObjective(target)\n\n➍ swarm = GA(obj=obj, npart=npart, ndim=ndim, init=i, tol=1e-12, max_iter=niter,\n           bounds=b)\n\n   st = time.time()\n➎ swarm.Optimize()\n   en = time.time()\n\n➏ res = swarm.Results()\n   prg = PositionToFirefly(res[\"gpos\"][-1])\n   ff = Firefly(prg)\n   ff.Run()\n   d = ff.GetDisplay()\n   x = ff.I // 5\n   y = ff.I % 5\n\n   print()\n   print(\"Minimum MSE: %0.8f\" % res[\"gbest\"][-1])\n   print()\n   print(\"Program: %s\" % prg)\n   print()\n   print(\"Target display:\")\n   print(np.array2string(target.astype(\"uint8\")))\n   print()\n   print(\"Program display:\")\n   print(np.array2string(d.astype(\"uint8\")))\n   print()\n   print(\"Firefly position (%d,%d)\" % (x,y)) print(\"(%d particles, %d/%d iterations, %d best updates, %d function evals,\n          %0.3f sec)\" % (npart, res[\"iterations\"], niter, len(res[\"gbest\"]),\n          obj.fcount, en-st))\n   print()\n```", "```\n5 5 0 3 3       3 3 0 5 5\n5 5 0 3 3       3 3 0 5 5\n0 0 7 0 0  and  0 0 7 0 0\n3 3 0 5 5       5 5 0 3 3 \n3 3 0 5 5       5 5 0 3 3\n```", "```\n> python3 fly_swarm.py flash0.txt 30 60 1000000\n```", "```\nMinimum MSE: 0.00000000\n\nProgram: 547WMSNMNI9W5NI5EI174D95S415NMN3NW1D3S3WSWES5DI3WN3NND5ESW5W\n\nTarget display:\n[[5 5 0 3 3]\n[5 5 0 3 3]\n[0 0 7 0 0]\n[3 3 0 5 5]\n[3 3 0 5 5]]\n\nProgram display:\n[[5 5 0 3 3]\n[5 5 0 3 3]\n[0 0 7 0 0]\n[3 3 0 5 5]\n[3 3 0 5 5]]\n\nFirefly position (4,2)\n(30 particles, 939087/1000000 iterations, GA, 49 best updates, \n 28172640 function evals, 4445.839 sec)\n```", "```\nMinimum MSE: 0.00000000\n\nProgram: 7W20NE9I3ME5EEN33ESW556633W255NW5WI1MNW788M65NW5S9M55W3NW3SN\n\nTarget display:\n[[3 3 0 5 5]\n [3 3 0 5 5]\n [0 0 7 0 0]\n [5 5 0 3 3]\n [5 5 0 3 3]] Program display:\n[[3 3 0 5 5]\n [3 3 0 5 5]\n [0 0 7 0 0]\n [5 5 0 3 3]\n [5 5 0 3 3]]\n\nFirefly position (3,3)\n(30 particles, 22431/1000000 iterations, GA, 41 best updates, 672960 function\n evals, 106.111 sec)\n```", "```\nYA      ! show B, draw A\n7W20NE9I3ME5EEN33ESW556633W255NW5WI1MNW788M65NW5S9M55W3NW3SN\nMNW\nXB      ! show A, draw B\n547WMSNMNI9W5NI5EI174D95S415NMN3NW1D3S3WSWES5DI3WN3NND5ESW5W\nMNN\n```", "```\n> sh search_radar\n```", "```\nYVA 5383149W7EE27MEIMEWME4IEM6W74M975W932785 MWW  PPPP\nXZB 37N387IM381IMIMW7495N19W645E8M9M4M188ISW MSEE PPPP\nYVA 852MM7W4699793554MNE6791594415NSI6N42961 MSS  PPPP\nXZB MI57S49173ME83I613MN7MN6E18125IMN95EME5S MSE  PPPP\nYVA 1TJ7TF  ! beep\n744299818E488E52I4M66I7M1462I5WW7E122IE1     MWW  PPPP\nXZB 7E42943MSM76S6617EM55WI36M9454I57I33M50W MNN  PPPP\nYVA 527S43M2S127778795N8E45MW57923311776S277 MNN  PPPP\nXZB 697SMW6W99857M662M377242MSI83W35ME2125E1 MNNE PPPP\n```", "```\nYVA 9MNW145NM425WSWMSII12D678I97M8 MWW  ! (2,4)\nXZB 2I6M5IN9I2499W5989D5E775S5WS45 MNE  ! (3,1)\nYVA D83281S355NESW89794M6M92926D47 MN   ! (3,2)\nXZB 57M9MEMS78I4M46MS6M95D5E5N25WS MNNW ! (4,3)\nYVA MDIMS5E5S5SMW55NS749I4MD3250W9 MSSE ! (0,1)\nXZB W3540SESWM735MII75N3298525ES5S MSS  ! (0,2)\nYVA EWS56MW6DD4D55SIMI115WNS8279ME MENN ! (4,1)\nXZB 89MDM4I972S5WEM57D5N5645WW2I4I MEE  ! (2,0)\nYVA 2D764I319D9112615NEI7876SMM5NE MSWW ! (1,4)\nXZB 1835MEN5ENW4S97D46NIS678DDSM68 MW   ! (2,3)\nYVA 56647MN5E587795NWNMNNS5I331334 MN   ! (3,2)\nXZB 78MNM4WN7E4MI85S94715W6N15S25S ME   ! (2,1)\n```", "```\nNW55NWS5E4  ! best program found\n3596SW14M5  ! initial population\n4N92DNW46D\n1EIMIWD6M2\nI7WM6I47M8\n2467316I63\n... 25 more lines ...\nNW55NWS6E4  ! final population\nNE55NWS6E4\nNW55NWS6E4\nNW55NWS6E4\nNW55NWS6E4\n... 25 more lines ...\n```", "```\n> pip3 install editdistance\n```", "```\n>>> import editdistance\n>>> editdistance.eval(\"darwin\", \"charles\")\n5\n>>> editdistance.eval(\"darwin\", \"daniel\")\n4\n>>> editdistance.eval(\"darwin\", \"dorwin\")\n1\n```", "```\nimport numpy as np\nimport editdistance\n\nprg = [i[:-1] for i in open(\"swarm_10.txt\")]\nbest = prg[0]\ninit = prg[1:31]\nfinal= prg[31:]\n\ni = []\nfor p in init:\n    i.append(editdistance.eval(best, p)) i = np.array(i) / len(init[0])\nf = []\nfor p in final:\n    f.append(editdistance.eval(best, p))\nf = np.array(f) / len(final[0])\nprint(\"Program length 10: %0.3f initial, %0.3f final\" % (i.mean(), f.mean()))\n\n#  Program length 60\nprg = [i[:-1] for i in open(\"swarm_60.txt\")]\nbest = prg[0]\ninit = prg[1:31]\nfinal= prg[31:]\n\ni = []\nfor p in init:\n    i.append(editdistance.eval(best, p))\ni = np.array(i) / len(init[0])\nf = []\nfor p in final:\n    f.append(editdistance.eval(best, p))\nf = np.array(f) / len(final[0])\nprint(\"Program length 60: %0.3f initial, %0.3f final\" % (i.mean(), f.mean()))\n```", "```\nProgram length 10: 0.920 initial, 0.103 final\nProgram length 60: 0.857 initial, 0.066 final\n```", "```\n> python3 fly_swarm.py ball/ball0.txt 30 10 10000\n```", "```\nimport numpy as np\nimport editdistance\n\nprg = [i[:-1] for i in open(\"runs_10.txt\")]\ndist = []\nfor i in range(len(prg)):\n    for j in range(len(prg)):\n        if (i == j):\n            continue\n        dist.append(editdistance.eval(prg[i],prg[j]))\ndist = np.array(dist) / len(prg[0])\nprint()\nprint(\"10-instructions: %0.4f +/- %0.4f\" % (dist.mean(), dist.std(ddof=1)/np.sqrt(len(dist))))\n\nprg = [i[:-1] for i in open(\"runs_60.txt\")]\ndist = []\nfor i in range(len(prg)):\n    for j in range(len(prg)):\n        if (i == j):\n            continue\n        dist.append(editdistance.eval(prg[i],prg[j]))\ndist = np.array(dist) / len(prg[0])\nprint(\"60-instructions: %0.4f +/- %0.4f\" % (dist.mean(), dist.std(ddof=1)/np.sqrt(len(dist))))\n```", "```\n10-instructions: 0.6467 +/- 0.0148\n60-instructions: 0.8337 +/- 0.0037\n```", "```\n>>> d = [i[:-1] for i in open(\"ball_search_results.txt\")]\n>>> len(set(d))\n985\n```", "```\n> python3 fly_swarm.py ball/ball0.txt 30 7 16000\n```", "```\nNW5NWSS\nNW5NWSW\nNW5WNEE\nNW5WNEE\nNW5WNEE\nWN5WNEN\nWN5WNES\n```", "```\n>>> t = [i[:-1] for i in open(\"ball_search_7_results.txt\")]\n>>> prg, counts = np.unique(t, return_counts=True)\n>>> prg\narray(['NW5NWSE', 'NW5NWSN', 'NW5NWSS', 'NW5NWSW', 'NW5WNEE', \n       'NW5WNEN', 'NW5WNES', 'NW5WNEW', 'WN5NWSE', 'WN5NWSN', 'WN5NWSS', 'WN5NWSW', 'WN5WNEE', 'WN5WNEN', 'WN5WNES',\n       'WN5WNEW'], dtype='<U7')\n>>> counts\narray([68, 58, 67, 62, 71, 80, 61, 54, 62, 58, 59, 61, 52, 62,\n       60, 65])\n```", "```\n>>> from scipy.stats import chisquare\n>>> chisquare(counts)\nPower_divergenceResult(statistic=10.911999999999999,\n    pvalue=0.7588072298114652)\n```", "```\nswarm = GA(obj=obj, npart=npart, ndim=ndim, init=i, tol=1e-12,\n           max_iter=niter, bounds=b)\n```", "```\nswarm = DE(obj=obj, npart=npart, ndim=ndim, init=i, tol=1e-12, \n           max_iter=niter, bounds=b)\n```"]