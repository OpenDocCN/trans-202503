- en: Chapter 12. Materials
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第12章 材质
- en: In [Chapter 10](ch10.html "Chapter 10. Texture Baking") and [Chapter 11](ch11.html
    "Chapter 11. Texture Painting"), I created textures that specified the diffuse
    colors for the models, as well as other parameters, like reflectiveness, smoothness,
    and specular colors. Now we’ll look at combining these image textures with procedural
    textures and shaders to create materials for the scenes that look both interesting
    and convincing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.html "第10章. 纹理烘焙")和[第11章](ch11.html "第11章. 纹理绘制")中，我创建了指定模型漫反射颜色的纹理，以及其他参数，如反射性、平滑度和高光颜色。现在我们将看如何将这些图像纹理与程序纹理和着色器结合，创建既有趣又令人信服的场景材质。
- en: This chapter will cover how Blender’s materials work and how to incorporate
    textures into these materials. Let’s look first, though, at Blender’s two default
    render engines for rendering images, Cycles and the Blender Internal renderer,
    as they will significantly impact how we set up our materials.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讲解Blender的材质如何工作，以及如何将纹理融入这些材质中。不过，让我们首先了解Blender的两个默认渲染引擎——Cycles和Blender内部渲染器——因为它们将显著影响我们如何设置材质。
- en: 'Render Engines: Blender Internal and Cycles'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染引擎：Blender内部渲染引擎和Cycles
- en: The *render engine* is how Blender creates a final image using all of the information
    in your scene—objects, materials, lights, and settings. Blender has two render
    engines. The older one, the Blender Internal render engine, is a very robust (if
    slightly old-fashioned) renderer that uses various tricks and techniques to create
    the final render, eschewing absolute physical accuracy for speed and flexibility.
    However, this lack of physical accuracy doesn’t mean that Blender Internal can’t
    render realistic-*looking* images. It can quickly render scenes with a variety
    of complex materials to create a final look anywhere between a highly realistic
    aesthetic and a very nonphoto-realistic and stylized one. This makes Blender Internal
    a highly flexible renderer, well suited to animation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*渲染引擎*是Blender如何利用场景中的所有信息——物体、材质、光源和设置——来创建最终图像的方式。Blender有两个渲染引擎。较旧的一个是Blender内部渲染引擎，它是一个非常强大的（尽管稍显过时）渲染器，使用各种技巧和方法来生成最终渲染，放弃了绝对的物理精确性，追求速度和灵活性。然而，这种物理精确性的缺失并不意味着Blender内部引擎不能渲染出逼真的*外观*图像。它可以快速渲染包含多种复杂材质的场景，从高度真实的美学效果到非常非写实和风格化的效果，都能轻松实现。这使得Blender内部引擎成为一个高度灵活的渲染器，非常适合动画制作。'
- en: Cycles is Blender’s new render engine, which is still in active development.
    Unlike the internal engine, it focuses on creating more realistic simulations
    of light and uses more physically correct models for materials and lights. As
    a result, it can deliver very realistic images, including effects that are difficult
    to achieve in Blender Internal, such as the complex refraction of light in glass
    and other transparent objects, multiple reflections of light bouncing around a
    scene, and the physically correct emission of light from objects. The tradeoff
    is that (at least as of this writing) Cycles renders scenes—even those with simple
    lighting—more slowly than Blender Internal. And because Cycles is in active development,
    it lacks certain important features, like subsurface scattering (see [Subsurface
    Scattering](ch12.html#subsurface_scattering "Subsurface Scattering") for more
    information) and the ability to render hair and fur.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Cycles是Blender的新渲染引擎，仍在积极开发中。与内部引擎不同，它专注于创建更逼真的光线模拟，并使用更符合物理的材质和光源模型。因此，它能够生成非常真实的图像，包括在Blender内部引擎中难以实现的效果，比如玻璃和其他透明物体的复杂折射、多次反射的光线在场景中传播，以及物体发出的物理正确的光线发射。其权衡之处在于（至少截至目前）Cycles渲染场景的速度——即使是简单光照的场景——也比Blender内部引擎要慢。而且由于Cycles还在积极开发中，它缺少某些重要特性，如子表面散射（有关更多信息，请参见[子表面散射](ch12.html#subsurface_scattering
    "子表面散射")）以及渲染头发和毛发的能力。
- en: I’ll use both renderers in this book. Which renderer I choose for each project
    has a significant impact on how I define my materials, because these two render
    engines work in different ways and require materials to be set up differently.
    For the Bat Creature, I’ll use Blender Internal to render realistic skin with
    subsurface scattering, as well as the fur. And for the Spider Bot, though either
    renderer would do, I’ll use Cycles to create some nice glossy, reflective materials.
    For the Jungle Temple project, I’ll use Cycles to allow me to experiment with
    lighting and get direct feedback, thanks to Cycles’ interactive render preview
    (discussed in [The Cycles Render Preview](ch12.html#cycles_render_preview "The
    Cycles Render Preview")).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我将使用两种渲染器。我为每个项目选择的渲染器对我定义材质的方式有很大影响，因为这两种渲染引擎的工作方式不同，需要以不同的方式设置材质。对于蝙蝠生物，我将使用Blender
    Internal渲染引擎渲染具有次表面散射效果的真实皮肤，以及毛发。对于蜘蛛机器人，虽然任意渲染器都可以使用，但我会选择Cycles渲染器来创建一些漂亮的光泽反射材质。对于丛林神庙项目，我将使用Cycles渲染器，它可以让我通过Cycles的交互式渲染预览（详见[Cycles
    渲染预览](ch12.html#cycles_render_preview "Cycles 渲染预览")）来实验照明并获得即时反馈。
- en: Before examining the differences in creating materials for the two different
    render engines, let’s take a brief look at a few general principles that will
    come up as we discuss materials. These principles center mainly on the various
    ways a surface can interact with light by reflecting, refracting, or absorbing
    it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究两种不同渲染引擎的材质创建差异之前，让我们简要回顾一些在讨论材质时会涉及的通用原则。这些原则主要集中在表面如何通过反射、折射或吸收光线与光线相互作用的各种方式。
- en: Reflection
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射
- en: We see objects because our eyes detect the light that bounces off them. The
    appearance of a surface is thus determined by the precise way in which it interacts
    with light, which is in turn determined by the structure and composition of the
    material.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以能够看到物体，是因为我们的眼睛检测到从物体表面反射回来的光线。因此，表面的外观由它与光线相互作用的精确方式决定，而这种相互作用又由材质的结构和成分所决定。
- en: In the real world, matte surfaces, like rock and rubber, have a rough structure
    on a microscopic scale. Light bounces off them in all directions, and as a result,
    the light you see reflected looks much the same no matter which direction you
    look at the surface from. This is called *diffuse* reflection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，像岩石和橡胶这样的哑光表面在微观尺度上具有粗糙的结构。光线从这些表面反射时，会向各个方向散射，因此你从哪个方向看表面，反射出来的光线几乎是一样的。这就是所谓的*漫反射*。
- en: In contrast, polished surfaces are relatively smooth, even at microscopic scales.
    This means that you’ll see a perfect reflection when you look at the surface,
    and as you move your viewpoint, what is reflected will change. This is called
    *specular*, or *mirror*, reflection. The differences between diffuse and specular
    reflection are shown in [Figure 12-1](ch12.html#diffuse_left_parenthesisleftright_parent
    "Figure 12-1. Diffuse (left) vs. specular (right) reflection (Cycles renderer)").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，抛光表面即使在微观尺度上也相对光滑。这意味着，当你看着表面时，会看到一个完美的反射，而且随着视角的变化，反射的内容也会发生变化。这就是所谓的*镜面反射*，或*镜面*反射。漫反射和镜面反射的差异如[图12-1](ch12.html#diffuse_left_parenthesisleftright_parent
    "图12-1. 漫反射（左）与镜面反射（右）（Cycles 渲染器）")所示。
- en: 'In the world of CG, however, we often take shortcuts to achieve the look of
    real materials. For example, consider specular reflections: While it’s possible
    to render mirror reflections, doing so is slower than rendering diffuse reflections
    because there are simple algorithms to approximate the effect of diffuse reflections.
    So rendering diffuse reflections can be extremely fast, but rendering mirror reflections
    requires processor-intensive ray tracing. To get around this problem, we sometimes
    consider only the most obvious things that a surface can reflect, like bright
    lights. For example, if you were to look at a shiny metal surface in bright light,
    you might overlook mirror reflections of the surrounding environment due to the
    very bright reflection of the light source itself. Specular reflections work this
    way in Blender’s Internal renderer: The renderer creates only highlights from
    light sources rather than making the surface reflect other objects around it (see
    [Figure 12-2](ch12.html#blender_internalapostrophes_approximated "Figure 12-2. Blender
    Internal’s approximated specular reflections (Blender Internal renderer). Often
    these are referred to as specular reflections, while more realistic (mirror) specular
    reflections are referred to as glossy reflections. Left: A material with only
    specular reflections and a hardness of 15\. Right: A hardness of 100.")). This
    shortcut often does the job, and when more accurate reflections are needed, you
    can turn them on as well (by enabling ray-traced mirror reflections) at the cost
    of extra rendering time.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在CG的世界里，我们经常采取捷径来实现真实材质的效果。例如，考虑镜面反射：虽然可以渲染镜面反射，但渲染镜面反射的速度比渲染漫反射慢，因为有一些简单的算法可以近似漫反射的效果。所以，渲染漫反射非常快，但渲染镜面反射则需要高强度的光线追踪处理。为了绕过这个问题，我们有时只考虑表面能够反射的最明显的物体，例如明亮的光源。例如，如果你注视一个在强光下的金属表面，可能会忽略周围环境的镜面反射，因为光源本身的反射非常明亮。镜面反射在Blender的内部渲染器中是这样工作的：渲染器只生成来自光源的高光，而不是让表面反射周围的其他物体（见[图
    12-2](ch12.html#blender_internalapostrophes_approximated "图 12-2. Blender 内部渲染器的近似镜面反射（Blender
    Internal 渲染器）。这些通常被称为镜面反射，而更真实的（镜面）镜面反射被称为光泽反射。左：只有镜面反射且硬度为15的材质。右：硬度为100。")）。这种捷径通常能够完成任务，当需要更准确的反射时，也可以打开它们（通过启用光线追踪的镜面反射），但会牺牲额外的渲染时间。
- en: '![Diffuse (left) vs. specular (right) reflection (Cycles renderer)](httpatomoreillycomsourcenostarchimages1538730.png.jpg)Figure 12-1. Diffuse
    (left) vs. specular (right) reflection (Cycles renderer)![Blender Internal’s approximated
    specular reflections (Blender Internal renderer). Often these are referred to
    as specular reflections, while more realistic (mirror) specular reflections are
    referred to as glossy reflections. Left: A material with only specular reflections
    and a hardness of 15\. Right: A hardness of 100.](httpatomoreillycomsourcenostarchimages1538732.png.jpg)Figure 12-2. Blender
    Internal’s approximated specular reflections (Blender Internal renderer). Often
    these are referred to as specular reflections, while more realistic (mirror) specular
    reflections are referred to as glossy reflections. Left: A material with only
    specular reflections and a hardness of 15\. Right: A hardness of 100.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![漫反射（左）与镜面反射（右）（Cycles 渲染器）](httpatomoreillycomsourcenostarchimages1538730.png.jpg)图
    12-1. 漫反射（左）与镜面反射（右）（Cycles 渲染器）![Blender 内部渲染器的近似镜面反射（Blender Internal 渲染器）。这些通常被称为镜面反射，而更真实的（镜面）镜面反射被称为光泽反射。左：只有镜面反射且硬度为15的材质。右：硬度为100。](httpatomoreillycomsourcenostarchimages1538732.png.jpg)图
    12-2. Blender 内部渲染器的近似镜面反射（Blender Internal 渲染器）。这些通常被称为镜面反射，而更真实的（镜面）镜面反射被称为光泽反射。左：只有镜面反射且硬度为15的材质。右：硬度为100。'
- en: Transmission and Refraction
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 透射与折射
- en: 'In addition to reflecting light, surfaces like water or glass also *transmit*
    light (allow light to pass through them). In the real world, a part of the *incident
    light* (light hitting the surface) is usually reflected, and the rest is transmitted
    and bent slightly (*refracted*). The light is bent because as it enters a different
    medium, its speed changes. This bending of light results in a distorted image
    when you look through a transparent material. The amount of distortion depends
    on the object’s *index of refraction (IOR)*, which determines how much the direction
    of a ray of light is altered at the boundary of the object (see [Figure 12-8](ch12.html#different_indices_of_refractiondot_left
    "Figure 12-8. Different indices of refraction. Left to right: 1.05, 1.5, and 2.5\.
    As the IOR increases, the refracted light becomes more complex.")), and the shape
    and thickness of the object. For some objects, this effect is significant—for
    example, when you look through a lens or a glass of water, you’ll notice considerable
    distortion. Other times, the effect is minimal—for example, there is little distortion
    when you look through the thin glass of a window.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了反射光线，像水或玻璃这样的表面还会*透过*光线（允许光线穿透它们）。在现实世界中，部分*入射光*（照射到表面的光）通常会被反射，而其余的光线则会透过并稍微弯曲（*折射*）。光线弯曲是因为它进入了不同的介质，导致其速度发生变化。这种光的弯曲会导致当你透过透明物质观看时，看到一个失真的图像。失真的程度取决于物体的*折射率（IOR）*，它决定了光线在物体边界处的传播方向改变的程度（见[图12-8](ch12.html#different_indices_of_refractiondot_left
    "图12-8. 不同的折射率。从左到右：1.05、1.5和2.5。折射率增加时，折射光变得更加复杂。")），以及物体的形状和厚度。对于某些物体，这种效应非常显著——例如，当你透过镜头或一杯水看时，你会注意到相当大的失真。其他时候，效应则较小——例如，当你透过窗户的薄玻璃看时，失真几乎没有。
- en: Z Transparency
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Z透明度
- en: 'We can use Blender to simulate transmission and refraction of light using ray-traced
    transparency. But we can also cheat by ignoring refraction and simply rendering
    whatever is behind an object. This is called *Z Transparency*. This technique
    works well with objects like windows, where the refraction is minimal. [Figure 12-3](ch12.html#ray_tracing_vsdot_z_transparency_left_pa
    "Figure 12-3. Ray tracing vs. Z Transparency (using the Blender Internal renderer).
    Left: Z Transparency with an alpha of 0.25 and specular highlights. The specular
    and slight diffuse visibility make this material visible. Right: Ray-traced transparency
    with an IOR of 1.5\. This image is more realistic but will take much longer to
    render.") compares ray tracing with Z Transparency.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Blender通过光线追踪透明度来模拟光的透过和折射。但我们也可以通过忽略折射并简单地渲染物体后面的内容来作弊。这叫做*Z透明度*。这种技术在像窗户这样的物体上效果很好，因为折射非常小。[图12-3](ch12.html#ray_tracing_vsdot_z_transparency_left_pa
    "图12-3. 光线追踪与Z透明度（使用Blender Internal渲染器）。左侧：具有0.25透明度和高光的Z透明度。高光和轻微的漫反射可使该材质可见。右侧：具有1.5折射率的光线追踪透明度。此图像更真实，但渲染时间会更长。")比较了光线追踪和Z透明度。
- en: Z Transparency is also useful for rendering thin surfaces with holes or complex
    outlines, where the mesh can be left simple and a texture can be used to define
    transparent—or, in this case, nonexistent—areas of the surface. These areas can
    then be rendered completely transparent (invisible), which will make the surface
    appear more complex than its geometry alone would allow (see [Figure 12-4](ch12.html#using_z_transparency_to_give_this_wire_f
    "Figure 12-4. Using Z Transparency to give this wire fence material a more complex
    appearance without requiring extra geometry (using the Blender Internal renderer).
    This material has been applied to a single plane. (The Transparent Shadows option
    has been turned on for the floor material to create accurate shadows.)")).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Z透明度也适用于渲染具有孔洞或复杂轮廓的薄表面，在这种情况下，网格可以保持简单，并且可以使用纹理来定义表面透明的区域——或者在此情况下，定义不存在的区域。这些区域随后可以完全渲染为透明（不可见），这将使表面看起来比单纯的几何形状更加复杂（见[图12-4](ch12.html#using_z_transparency_to_give_this_wire_f
    "图12-4. 使用Z透明度为该铁丝网材质赋予更复杂的外观，而无需额外的几何形状（使用Blender Internal渲染器）。该材质已应用于单个平面。（已启用透明阴影选项，以便为地面材质创建准确的阴影。）")）。
- en: '![Ray tracing vs. Z Transparency (using the Blender Internal renderer). Left:
    Z Transparency with an alpha of 0.25 and specular highlights. The specular and
    slight diffuse visibility make this material visible. Right: Ray-traced transparency
    with an IOR of 1.5\. This image is more realistic but will take much longer to
    render.](httpatomoreillycomsourcenostarchimages1538734.png.jpg)Figure 12-3. Ray
    tracing vs. Z Transparency (using the Blender Internal renderer). Left: Z Transparency
    with an alpha of 0.25 and specular highlights. The specular and slight diffuse
    visibility make this material visible. Right: Ray-traced transparency with an
    IOR of 1.5\. This image is more realistic but will take much longer to render.![Using
    Z Transparency to give this wire fence material a more complex appearance without
    requiring extra geometry (using the Blender Internal renderer). This material
    has been applied to a single plane. (The Transparent Shadows option has been turned
    on for the floor material to create accurate shadows.)](httpatomoreillycomsourcenostarchimages1538736.png.jpg)Figure 12-4. Using
    Z Transparency to give this wire fence material a more complex appearance without
    requiring extra geometry (using the Blender Internal renderer). This material
    has been applied to a single plane. (The Transparent Shadows option has been turned
    on for the floor material to create accurate shadows.)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![光线追踪与 Z 透明度（使用 Blender 内部渲染器）。左：使用 0.25 alpha 和镜面高光的 Z 透明度。镜面反射和轻微的漫反射可使该材质可见。右：具有
    1.5 的 IOR 的光线追踪透明度。该图像更为真实，但渲染时间更长。](httpatomoreillycomsourcenostarchimages1538734.png.jpg)图
    12-3. 光线追踪与 Z 透明度（使用 Blender 内部渲染器）。左：使用 0.25 alpha 和镜面高光的 Z 透明度。镜面反射和轻微的漫反射可使该材质可见。右：具有
    1.5 的 IOR 的光线追踪透明度。该图像更为真实，但渲染时间更长。![使用 Z 透明度为这段铁丝网材质赋予更复杂的外观，而无需额外的几何体（使用 Blender
    内部渲染器）。该材质已应用于单一平面。（已为地面材质启用透明阴影选项，以创建准确的阴影。）](httpatomoreillycomsourcenostarchimages1538736.png.jpg)图
    12-4. 使用 Z 透明度为这段铁丝网材质赋予更复杂的外观，而无需额外的几何体（使用 Blender 内部渲染器）。该材质已应用于单一平面。（已为地面材质启用透明阴影选项，以创建准确的阴影。）'
- en: Light can interact with a surface in still more complex ways, such as scattering
    beneath the surface or exhibiting translucency or anisotropic reflection, which
    is the type of reflection produced by brushed metal. We’ll examine these other
    types of interaction as we move through this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 光线可以以更加复杂的方式与表面相互作用，例如在表面下散射、表现出半透明性或各向异性反射，这就是刷过金属表面产生的反射类型。在本章接下来的部分，我们将研究这些不同类型的相互作用。
- en: Blender Internal Materials
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blender 内部材质
- en: Blender Internal is Blender’s default render engine, and you can create materials
    for Blender Internal using the Materials and Textures tabs of the Properties editor.
    You can find the properties of materials in the Material tab (and the textures
    and aspects of a material they can be used to affect) in the Textures tab.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 内部是 Blender 的默认渲染引擎，您可以通过属性编辑器的材料和纹理标签为 Blender 内部创建材质。您可以在材质标签中找到材质的属性（以及它们可以影响的纹理和材质的各个方面），在纹理标签中也可以找到相应的内容。
- en: Blender Internal’s materials are pretty modular, allowing you to add and combine
    different material properties—such as specular reflections, mirror reflectivity,
    transparency, and subsurface scattering—simply by turning on the relevant options
    from the different panels in the Material tab ([Figure 12-5](ch12.html#materials_tab_when_using_the_blender_int
    "Figure 12-5. The Materials tab when using the Blender Internal renderer")), without
    having to start from scratch. Notice in the figure that all of the materials assigned
    to the active object are in the panel at the top of the tab. Below, in the Preview
    panel, is a preview of the active material, followed by other panels containing
    the Materials settings. I’ll discuss the relevant panels in the Materials tab
    (when using Blender Internal) here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 内部的材质非常模块化，允许您通过从材质标签中的不同面板中启用相关选项，简单地添加和组合不同的材质属性——例如镜面反射、镜面反射率、透明度和次表面散射——而无需从头开始创建材质（见[图
    12-5](ch12.html#materials_tab_when_using_the_blender_int "图 12-5. 使用 Blender 内部渲染器时的材料标签")）。注意图中，所有分配给活动对象的材质都位于标签顶部的面板中。下方是预览面板，显示活动材质的预览，接着是其他包含材质设置的面板。我将在这里讨论
    Blender 内部材质标签中的相关面板。
- en: '![The Materials tab when using the Blender Internal renderer](httpatomoreillycomsourcenostarchimages1538738.png.jpg)Figure 12-5. The
    Materials tab when using the Blender Internal renderer'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用Blender Internal渲染器时的材质标签](httpatomoreillycomsourcenostarchimages1538738.png.jpg)图12-5.
    使用Blender Internal渲染器时的材质标签'
- en: '****Diffuse****. This panel contains the settings for the diffuse color and
    shading of a material. The color picker (see [Figure 12-5](ch12.html#materials_tab_when_using_the_blender_int
    "Figure 12-5. The Materials tab when using the Blender Internal renderer")) allows
    you to set the diffuse color of the material, which is then multiplied by the
    *intensity* value. The dropdown menu to the right lets you set the diffuse shader
    model, which affects the falloff of the material’s diffuse color from light to
    dark at different angles. The default Lambert shader model is usually fine, though
    the Oren Nayar shader model can be used to mimic surfaces with a rougher microscopic
    structure, like clay or stone. The other shader models here are more exotic and
    rarely useful.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '****漫反射****。此面板包含材质的漫反射颜色和阴影设置。颜色选择器（见[图12-5](ch12.html#materials_tab_when_using_the_blender_int
    "图12-5. 使用Blender Internal渲染器时的材质标签")）允许你设置材质的漫反射颜色，然后该颜色会乘以*强度*值。右侧的下拉菜单让你设置漫反射着色器模型，这会影响材质从光亮到暗的漫反射颜色的衰减，且在不同角度下有所不同。默认的Lambert着色器模型通常已足够，尽管Oren
    Nayar着色器模型可以用于模拟表面具有更粗糙的微观结构，如粘土或石材。这里的其他着色器模型较为特殊，使用的情况较少。'
- en: '****Specular****. The settings in the Specular panel are similar to those in
    the Diffuse panel, except that they control an object’s *specular shading* (a
    loose approximation of specular reflection, as discussed earlier in [Reflection](ch12.html#reflection
    "Reflection")). The *hardness* entry determines how broad or tight these reflections
    are (see [Figure 12-6](ch12.html#different_levels_of_hardness_affect_the "Figure 12-6. Different
    levels of hardness affect the look of specular reflections. This checkerboard
    texture is used to control the hardness. (You could also vary hardness using a
    texture map.)")). Materials with a high hardness value have sharp, bright highlights,
    while those with a low hardness value have softer, more spread out highlights.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '****高光****。高光面板中的设置类似于漫反射面板，只不过它们控制的是物体的*高光着色*（这是对高光反射的粗略近似，之前在[反射](ch12.html#reflection
    "反射")一节中已讨论过）。*硬度*项决定了这些反射的广泛程度或紧密程度（见[图12-6](ch12.html#different_levels_of_hardness_affect_the
    "图12-6. 不同硬度级别如何影响高光反射的外观。此棋盘纹理用于控制硬度。（你也可以使用纹理图来调整硬度。）")）。硬度值高的材质具有尖锐、明亮的高光，而硬度值低的材质则具有更柔和、扩散的高光。'
- en: '****Shading****. The following options affect a material’s overall shading:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '****着色****。以下选项影响材质的整体着色效果：'
- en: '****Emit****. This causes an object to appear bright even when it is not lit
    and can even cause an object to cast light on other objects when it is used with
    certain World settings.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****发光****。这会使物体即使在没有光照的情况下也显得明亮，甚至可以在与某些世界设置一起使用时，使物体能够照亮其他物体。'
- en: '****Ambient****. This determines whether an object receives ambient illumination
    (using the Ambient Color setting in the World Settings tab).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****环境光****。这决定物体是否接收环境光照（使用世界设置标签中的环境颜色设置）。'
- en: '****Translucency****. This causes an object to appear lit on both its front
    and back, making it look translucent, like thin paper or a leaf.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****半透明****。这会使物体的正面和背面都看起来被照亮，使其呈现出半透明的效果，就像薄纸或树叶一样。'
- en: '****Shadeless****. This completely eliminates the effect of light on an object;
    the object will get its color and brightness entirely from its diffuse color and
    textures.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****无阴影****。这完全消除光照对物体的影响；物体的颜色和亮度完全来自其漫反射颜色和纹理。'
- en: '****Tangent Shading****. This alters the shading of a surface to more closely
    resemble that of brushed metal or other materials with a “grain” or directionality
    to their microscopic structure. The direction of the grain is taken from the object’s
    UV coordinates, so the grain will be aligned with the *v*-axis in UV space. In
    other words, it will be aligned vertically in the UV Image editor, so ensure you
    have unwrapped the object appropriately when enabling this option.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****切线着色****。这会改变表面的着色，使其更像抛光金属或其他具有“纹理”或微观结构方向性的材料。纹理的方向取自物体的UV坐标，因此纹理将与UV空间中的*v*轴对齐。换句话说，它将在UV图像编辑器中垂直对齐，因此在启用此选项时，请确保已正确展开物体。'
- en: '****Cubic Interpolation****. This alters how the surface blends between light
    and shadow, usually with smoother-looking results though often slightly darker.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****立方插值****。这会改变表面在光与影之间的过渡方式，通常效果更为平滑，尽管结果往往稍微更暗一些。'
- en: '****Transparency****. Turn on the Transparency checkbox to render a material
    with transparency. This panel offers three ways to render transparent objects,
    using the surface’s alpha value. The simplest, *Mask*, simply blends the material
    into the background where the color is transparent. *Z Transparency* is slightly
    more sophisticated, rendering whatever is behind the transparent object. *Ray-traced
    Transparency* calculates proper refraction. Choosing Ray-traced Transparency brings
    up a variety of options that allow you to set the index of refraction of the material
    and the glossiness and amount of filtering done by the material.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '****透明度****。启用透明度复选框以渲染带有透明效果的材质。该面板提供了三种方法来渲染透明物体，使用表面的 alpha 值。最简单的，*遮罩*，只会在颜色透明的地方将材质与背景混合。*Z
    透明度*稍微复杂一些，它会渲染透明物体后面的内容。*光线追踪透明度*会计算正确的折射。选择光线追踪透明度后，会弹出一系列选项，允许你设置材质的折射率、光泽度和材质所进行的过滤量。'
- en: '****Mirror****. Enable Mirror to turn on rendering ray-traced reflections.
    The settings in this panel let you define the amount (*Reflectivity*) and sharpness
    (*Glossy Amount*) of ray-traced reflections.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '****镜面反射****。启用镜面反射以开启光线追踪反射。此面板中的设置允许你定义光线追踪反射的数量（*反射率*）和清晰度（*光泽度*）。'
- en: '****Subsurface Scattering (SSS)****. This option controls the effect of light
    scattering under the surface of a material commonly found in skin or wax. I’ll
    discuss this in more detail in [Subsurface Scattering](ch12.html#subsurface_scattering
    "Subsurface Scattering").'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '****次表面散射 (SSS)****。这个选项控制光在材料表面下散射的效果，通常应用于皮肤或蜡等材料。我将在[次表面散射](ch12.html#subsurface_scattering
    "次表面散射")中详细讨论这个问题。'
- en: '****Options****. This panel contains some miscellaneous options. For example,
    the *Traceable* setting controls whether an object is taken into account when
    rendering ray-traced shadows and reflections. I’ll cover these when they come
    up, and you can look up any I don’t mention on the Blender wiki (at *[http://wiki.blender.org/](http://wiki.blender.org/)*).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '****选项****。此面板包含一些杂项选项。例如，*可追踪*设置控制在渲染光线追踪阴影和反射时是否考虑一个物体。我将在相关部分讨论这些内容，任何我未提及的，你可以在
    Blender 的 Wiki 上查找（网址为 *[http://wiki.blender.org/](http://wiki.blender.org/)*）。'
- en: '****Shadow****. This panel controls how an object receives and casts shadows.
    For example, the *Cast Only* option makes an object appear invisible except for
    any shadows it casts. *Shadows Only* renders a material’s shadows as the only
    nontransparent parts. (This is particularly good for creating shadows that you
    can then composite into another image.)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '****阴影****。此面板控制物体如何接收和投射阴影。例如，*仅投射*选项使物体仅显示它投射的阴影，其他部分不可见。*仅阴影*将材质的阴影渲染为唯一的不透明部分。（这对于创建可以合成到其他图像中的阴影特别有用。）'
- en: '![Different levels of hardness affect the look of specular reflections. This
    checkerboard texture is used to control the hardness. (You could also vary hardness
    using a texture map.)](httpatomoreillycomsourcenostarchimages1538740.png.jpg)Figure 12-6. Different
    levels of hardness affect the look of specular reflections. This checkerboard
    texture is used to control the hardness. (You could also vary hardness using a
    texture map.)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![不同硬度等级会影响镜面反射的效果。这个棋盘格纹理用于控制硬度。（你也可以使用纹理贴图来变化硬度。）](httpatomoreillycomsourcenostarchimages1538740.png.jpg)图
    12-6。不同硬度等级会影响镜面反射的效果。这个棋盘格纹理用于控制硬度。（你也可以使用纹理贴图来变化硬度。）'
- en: Cycles Materials
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cycles 材质
- en: Unlike the Blender Internal renderer, which is packed with dirty tricks and
    approximations to make rendering quicker, the Cycles renderer uses more physically
    realistic models for materials. It combines realism with a node-based approach
    that focuses on building up complex materials from simple parts. You can still
    use the Materials tab of the Properties editor to edit Cycles materials, which
    gives an overview of the current material, but it’s much simpler and clearer to
    use Blender’s Node editor, as shown in [Figure 12-7](ch12.html#editing_a_cycles_material_in_blenderapos
    "Figure 12-7. Editing a Cycles material in Blender’s Node editor. On the right
    is the Material Output node; its Surface node is connected to the BSDF output
    socket of a Diffuse Shader node. The result is the diffuse material shown in Figure 12-1.").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与Blender内部渲染器不同，后者通过使用许多巧妙的技巧和近似方法来加快渲染速度，Cycles渲染器使用更为物理真实的材质模型。它将现实主义与基于节点的方法结合起来，专注于通过简单的组件构建复杂的材质。你仍然可以使用属性编辑器中的材质选项卡来编辑Cycles材质，它提供了当前材质的概览，但使用Blender的节点编辑器更简单清晰，如[图12-7](ch12.html#editing_a_cycles_material_in_blenderapos
    "图12-7. 在Blender的节点编辑器中编辑一个Cycles材质。右侧是材质输出节点；它的表面节点连接到漫反射着色器节点的BSDF输出插座。结果是如图12-1所示的漫反射材质。")所示。
- en: To create a material with Cycles, all you need is a Shader node and Material
    Output node. You can build out from there and combine other shaders, inputs, and
    textures to create a wide variety of materials. To add a node, use SHIFT-A and
    choose the node you want from the menu that appears, just like adding objects
    in the 3D viewport.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个Cycles材质，你只需要一个着色器节点和材质输出节点。从那里开始，你可以组合其他着色器、输入和纹理，创建各种各样的材质。要添加节点，使用 SHIFT-A
    并从出现的菜单中选择你想要的节点，就像在3D视口中添加对象一样。
- en: The BSDF (Bidirectional Scattering Distribution Function) Shader nodes control
    how materials work. These functions define how light interacts with a surface—for
    example, whether the material reflects light in a diffuse way, acts as a mirror,
    or transmits light like glass. You’ll find the BSDF shaders under Shaders in the
    Add menu in the header, along with a few other options.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: BSDF（双向散射分布函数）着色器节点控制材质的工作方式。这些函数定义了光与表面的相互作用方式——例如，材质是以漫反射的方式反射光，像镜子一样反射，还是像玻璃一样透光。你可以在头部的“添加”菜单下找到BSDF着色器，还有其他一些选项。
- en: '![Editing a Cycles material in Blender’s Node editor. On the right is the Material
    Output node; its Surface node is connected to the BSDF output socket of a Diffuse
    Shader node. The result is the diffuse material shown in .](httpatomoreillycomsourcenostarchimages1538742.png.jpg)Figure 12-7. Editing
    a Cycles material in Blender’s Node editor. On the right is the Material Output
    node; its Surface node is connected to the BSDF output socket of a Diffuse Shader
    node. The result is the diffuse material shown in [Figure 12-1](ch12.html#diffuse_left_parenthesisleftright_parent
    "Figure 12-1. Diffuse (left) vs. specular (right) reflection (Cycles renderer)").'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![在Blender的节点编辑器中编辑一个Cycles材质。右侧是材质输出节点；它的表面节点连接到漫反射着色器节点的BSDF输出插座。结果是如图所示的漫反射材质。](httpatomoreillycomsourcenostarchimages1538742.png.jpg)图12-7。在Blender的节点编辑器中编辑一个Cycles材质。右侧是材质输出节点；它的表面节点连接到漫反射着色器节点的BSDF输出插座。结果是如[图12-1](ch12.html#diffuse_left_parenthesisleftright_parent
    "图12-1. 漫反射（左）与镜面反射（右）比较（Cycles渲染器）")所示的漫反射材质。'
- en: 'Cycles currently supports the following shaders:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Cycles 当前支持以下着色器：
- en: '****Background****. This affects the world background rather than materials.
    (See [Chapter 13](ch13.html "Chapter 13. Lighting") for more on world lighting
    settings.)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '****背景****。这影响的是世界背景，而不是材质。（有关世界光照设置的更多信息，请参见[第13章](ch13.html "第13章. 光照")）。'
- en: '****Diffuse BSDF****. This scatters light in all directions, creating a diffuse
    look.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '****漫反射BSDF****。它会将光散射到各个方向，产生漫反射效果。'
- en: '****Glossy BSDF****. This reflects light like a mirror. Increasing the *roughness*
    value makes reflections increasingly blurry.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '****光滑BSDF****。它像镜子一样反射光。增加*粗糙度*值会使反射变得越来越模糊。'
- en: '****Glass BSDF****. The Glass BSDF function transmits light as glass or any
    other transparent medium does. The *index of refraction (IOR)* determines how
    much the light is bent when it penetrates a surface. The higher the value, the
    more it is bent. Denser materials have higher IORs. For example, the IOR of glass
    is around 1.5, and the IOR of water is about 1.3\. Diamond, a much denser material,
    has an IOR of around 2.4\. The differences can be seen in [Figure 12-8](ch12.html#different_indices_of_refractiondot_left
    "Figure 12-8. Different indices of refraction. Left to right: 1.05, 1.5, and 2.5\.
    As the IOR increases, the refracted light becomes more complex.").'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '****玻璃BSDF****。玻璃BSDF功能像玻璃或任何其他透明介质一样传递光线。*折射率（IOR）*决定了光线穿透表面时的弯曲程度。折射率值越高，光线弯曲得越厉害。密度较大的材料具有更高的折射率。例如，玻璃的折射率约为1.5，水的折射率约为1.3。钻石作为一种更密集的材料，其折射率约为2.4。折射率的不同可以在[图12-8](ch12.html#different_indices_of_refractiondot_left
    "Figure 12-8. Different indices of refraction. Left to right: 1.05, 1.5, and 2.5\.
    As the IOR increases, the refracted light becomes more complex.")中看到。'
- en: '****Translucent BSDF****. This scatters light in all directions from the back
    of the object, resulting in a translucent appearance, like that of a thin paper
    or leaf, with light transmitted through the material.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '****半透明BSDF****。这会将光散射到物体的所有方向，产生一种半透明的外观，就像薄纸或叶片一样，光线透过材料传播。'
- en: '****Transparent BSDF****. This allows light to penetrate a material without
    being refracted, as if there were nothing there. It’s useful when combined with
    alpha maps. (See [Leaves](ch12.html#leaves "Leaves") for more on creating leaf
    materials.)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '****透明BSDF****。这允许光线穿透材料而不发生折射，就像没有任何东西存在一样。与alpha图层结合使用时非常有用。（关于创建叶片材质的更多内容，请参见[叶片](ch12.html#leaves
    "Leaves")。）'
- en: '****Velvet BSDF****. This reflects light somewhat like the diffuse shader,
    but it reflects light more when viewed from oblique angles. The result is a velvety
    appearance.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '****天鹅绒BSDF****。这反射光线的方式有些像漫反射着色器，但从斜角观察时反射更多。结果呈现出一种天鹅绒般的外观。'
- en: '****Emission****. This turns an object into a lamp that emits its own light.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '****发射****。这将一个物体变成一个发光的灯具，发出自己的光。'
- en: '****Holdout****. This creates a “hole” in an image that goes through to the
    background color with zero alpha transparency. It’s useful for compositing.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '****遮罩****。这在图像中创建一个“洞”，该洞通过背景颜色并具有零透明度（alpha）。它在合成时非常有用。'
- en: '****Mix Shader****. This allows you to mix two shaders with the proportion
    of mixing determined by the factor input. The Mix nodes allow you to combine shaders
    in numerous combinations to create all sorts of materials. For example, you could
    create a plastic-like material by combining a Glossy BSDF and Diffuse BSDF shader,
    as shown in [Figure 12-9](ch12.html#combining_shaders_with_the_mix_nodedot_h "Figure 12-9. Combining
    shaders with the Mix node. Here I create a plastic-looking shader by combining
    an orange Diffuse BSDF shader with a white Glossy BSDF shader.").'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '****混合着色器****。这允许你混合两个着色器，混合的比例由因子输入决定。混合节点允许你以多种组合方式组合着色器，创造出各种各样的材质。例如，你可以通过将光泽BSDF和漫反射BSDF着色器结合，创建类似塑料的材质，如[图12-9](ch12.html#combining_shaders_with_the_mix_nodedot_h
    "Figure 12-9. Combining shaders with the Mix node. Here I create a plastic-looking
    shader by combining an orange Diffuse BSDF shader with a white Glossy BSDF shader.")所示。'
- en: '****Add Shader****. This adds two shaders together. It’s less flexible than
    the Mix node because you can’t control the amount of mixing, but it works much
    the same way.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '****添加着色器****。这将两个着色器相加。它不像混合节点那样灵活，因为你不能控制混合的程度，但它的工作方式与混合节点非常相似。'
- en: For more on these shaders and other Cycles documentation, visit *[http://wiki.Blender.org/](http://wiki.Blender.org/)*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于这些着色器和其他Cycles文档的内容，请访问*[http://wiki.Blender.org/](http://wiki.Blender.org/)*。
- en: Other Inputs in Cycles
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cycles中的其他输入
- en: Cycles allows you to use a wide variety of nodes that supply different data
    for use in your materials. You’ll find nodes to input image textures and procedural
    textures as well as nodes to supply geometric information, such as surface normals
    and the position of the surface in 3D or UV space (allowing you to map textures
    to a surface). Combining these nodes can prove a powerful tool, as we’ll see throughout
    the chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Cycles允许你使用各种各样的节点，这些节点提供不同的数据供材质使用。你会找到用于输入图像纹理和程序纹理的节点，以及提供几何信息的节点，如表面法线和表面在3D或UV空间中的位置（允许你将纹理映射到表面）。结合这些节点可以成为一个强大的工具，正如我们在本章中将看到的那样。
- en: '![Different indices of refraction. Left to right: 1.05, 1.5, and 2.5\. As the
    IOR increases, the refracted light becomes more complex.](httpatomoreillycomsourcenostarchimages1538744.png.jpg)Figure 12-8. Different
    indices of refraction. Left to right: 1.05, 1.5, and 2.5\. As the IOR increases,
    the refracted light becomes more complex.![Combining shaders with the Mix node.
    Here I create a plastic-looking shader by combining an orange Diffuse BSDF shader
    with a white Glossy BSDF shader.](httpatomoreillycomsourcenostarchimages1538746.png.jpg)Figure 12-9. Combining
    shaders with the Mix node. Here I create a plastic-looking shader by combining
    an orange Diffuse BSDF shader with a white Glossy BSDF shader.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同的折射率。左到右：1.05，1.5和2.5。随着IOR的增加，折射光变得更加复杂。](httpatomoreillycomsourcenostarchimages1538744.png.jpg)图12-8。不同的折射率。左到右：1.05，1.5和2.5。随着IOR的增加，折射光变得更加复杂。![通过Mix节点组合着色器。在这里，我通过将橙色的漫反射BSDF着色器与白色的光泽BSDF着色器结合，创建了一个塑料感的着色器。](httpatomoreillycomsourcenostarchimages1538746.png.jpg)图12-9。通过Mix节点组合着色器。在这里，我通过将橙色的漫反射BSDF着色器与白色的光泽BSDF着色器结合，创建了一个塑料感的着色器。'
- en: Texture Nodes
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 纹理节点
- en: The Texture nodes are particularly useful for creating materials, and they can
    supply a variety of procedural and image-based textures for use on your materials.
    I’ll use the image Texture nodes to apply the textures I created in [Chapter 10](ch10.html
    "Chapter 10. Texture Baking") and [Chapter 11](ch11.html "Chapter 11. Texture
    Painting").
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理节点对于创建材质特别有用，它们可以提供多种程序化和基于图像的纹理，用于你的材质上。我将使用图像纹理节点来应用我在[第10章](ch10.html "第10章.
    纹理烘焙")和[第11章](ch11.html "第11章. 纹理绘制")中创建的纹理。
- en: The other nodes create procedural textures. For example, the noise texture creates
    multicolored clouds that are useful for adding random-looking detail to surfaces,
    and the waves texture creates repeating bands that can be distorted to look like
    wood grain. The checkerboard is a great texture for testing out material settings;
    for example, by connecting a checkerboard node to the Fac input of a Mix Shader
    node, you can use it to compare two shaders (see [Figure 12-10](ch12.html#controlling_the_mixing_of_shaders_with_a
    "Figure 12-10. Controlling the mixing of shaders with a texture. Here, a checkerboard
    texture is used to control the mixing of a glossy and a diffuse shader.")). We’ll
    cover using textures with Cycles in more detail later in this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 其他节点用于创建程序化纹理。例如，噪声纹理生成多色的云彩，可用于为表面添加看起来随机的细节；波纹纹理生成可重复的条纹，可以扭曲成类似木纹的效果。棋盘格是测试材质设置的一个极好纹理；例如，通过将棋盘格节点连接到Mix
    Shader节点的Fac输入，你可以用它来比较两个着色器（参见[图12-10](ch12.html#controlling_the_mixing_of_shaders_with_a
    "图12-10. 使用纹理控制着色器的混合。在这里，棋盘格纹理用于控制光泽着色器和漫反射着色器的混合。")）。我们将在本章后面详细讨论如何在Cycles中使用纹理。
- en: Nodes in Blender Internal
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blender Internal中的节点
- en: While I won’t cover them in detail, Blender Internal also supports node materials.
    Although the principles are the same, these work slightly differently from Cycles
    nodes. Instead of shaders, you can use other materials as inputs and combine them
    to make new materials. [Figure 12-11](ch12.html#blender_internal_also_supports_node_mate
    "Figure 12-11. Blender Internal also supports node materials, though they work
    slightly differently. Here, two (non-node-based) materials have been blended (again
    using a checkerboard texture to control the mixing) to create a third.") shows
    two materials combined to create a third.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我不会详细介绍，但Blender Internal也支持节点材质。尽管原理相同，但它们与Cycles节点的工作方式略有不同。你可以使用其他材质作为输入，并将它们组合以制作新材质，而不是使用着色器。[图12-11](ch12.html#blender_internal_also_supports_node_mate
    "图12-11. Blender Internal也支持节点材质，尽管它们的工作方式略有不同。这里，两个（非节点基础的）材质通过混合（再次使用棋盘格纹理控制混合）创建了第三个材质。")显示了将两个材质组合生成第三个材质的例子。
- en: '![Controlling the mixing of shaders with a texture. Here, a checkerboard texture
    is used to control the mixing of a glossy and a diffuse shader.](httpatomoreillycomsourcenostarchimages1538748.png.jpg)Figure 12-10. Controlling
    the mixing of shaders with a texture. Here, a checkerboard texture is used to
    control the mixing of a glossy and a diffuse shader.![Blender Internal also supports
    node materials, though they work slightly differently. Here, two (non-node-based)
    materials have been blended (again using a checkerboard texture to control the
    mixing) to create a third.](httpatomoreillycomsourcenostarchimages1538750.png.jpg)Figure 12-11. Blender
    Internal also supports node materials, though they work slightly differently.
    Here, two (non-node-based) materials have been blended (again using a checkerboard
    texture to control the mixing) to create a third.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用纹理控制着色器的混合。在这里，使用棋盘纹理来控制光泽和漫反射着色器的混合。](httpatomoreillycomsourcenostarchimages1538748.png.jpg)图
    12-10。使用纹理控制着色器的混合。在这里，使用棋盘纹理来控制光泽和漫反射着色器的混合。![Blender Internal 也支持节点材质，尽管它们的工作方式稍有不同。在这里，两个（非节点基础的）材质已经被混合（再次使用棋盘纹理来控制混合）以创建第三种材质。](httpatomoreillycomsourcenostarchimages1538750.png.jpg)图
    12-11。Blender Internal 也支持节点材质，尽管它们的工作方式稍有不同。在这里，两个（非节点基础的）材质已经被混合（再次使用棋盘纹理来控制混合）以创建第三种材质。'
- en: Materials for the Bat Creature
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蝙蝠生物的材质
- en: Let’s look at how to create materials, beginning with the Bat Creature and Blender
    Internal. For this project, I needed materials for the skin, fur, eyes, and teeth.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建材质，从蝙蝠生物和 Blender Internal 开始。对于这个项目，我需要为皮肤、毛发、眼睛和牙齿创建材质。
- en: Skin
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 皮肤
- en: 'I began with the creature’s skin. I added a new material to the Bat Creature
    object—that is, our final one with displacement, which I’ll use for rendering.
    (Remember there are two copies of the Bat Creature in the scene: one copy that
    I’ll use to render the body and another that I created in [Chapter 9](ch09.html
    "Chapter 9. Hair and Particle Systems") to hold the hair.) To add a new material
    to the Bat Creature, I went to the Materials tab of the Properties editor and
    deleted any existing material slots (by clicking the – button at the top of the
    tab). Then, I clicked +New from the material selector drop-down menu. I could
    then start creating the material. The beginnings of the material are shown in
    [Figure 12-12](ch12.html#bat_creature_materialcomma_shown_without "Figure 12-12. The
    Bat Creature material, shown without any textures or subsurface scattering. The
    rendered material is shown at the right. (See Chapter 13 and Chapter 14 for how
    to set up the lighting and render settings.)").'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我从生物的皮肤开始。我为蝙蝠生物对象添加了一个新材质——也就是我们最终用于渲染的带有位移的材质。（记住，场景中有两个蝙蝠生物副本：一个副本用于渲染身体，另一个副本是在[第
    9 章](ch09.html "第 9 章. 毛发与粒子系统")中创建的，用于保存毛发。）为了为蝙蝠生物添加一个新材质，我进入了属性编辑器的材质选项卡，删除了任何现有的材质槽（通过点击选项卡顶部的
    - 按钮）。然后，我从材质选择下拉菜单中点击 +New。接下来，我可以开始创建材质。材质的初步效果见于[图 12-12](ch12.html#bat_creature_materialcomma_shown_without
    "图 12-12. 蝙蝠生物材质，未添加任何纹理或次表面散射。右侧显示了渲染的材质。（有关如何设置光照和渲染设置，请参见第 13 章和第 14 章。）")。
- en: So far, this was just a simple material; I merely tweaked the diffuse color
    and the specular intensity and hardness. I also switched the specular shading
    to Blinn, which gave softer highlights. Next, I needed to start incorporating
    my textures and refining the material.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这只是一个简单的材质；我只是调整了漫反射颜色和高光强度与硬度。我还将高光着色切换为 Blinn，这样可以产生更柔和的高光。接下来，我需要开始结合我的纹理并进一步优化材质。
- en: To incorporate the diffuse texture, I switched to the Textures tab of the Properties
    editor, selected the first texture slot, and clicked +New to add a new texture.
    Then I set the Texture Type to Image. This added an Image panel to the Texture
    tab where I could open my diffuse texture.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加入漫反射纹理，我切换到属性编辑器的纹理选项卡，选择了第一个纹理槽，并点击 +New 来添加一个新纹理。然后，我将纹理类型设置为图像。这会在纹理选项卡中添加一个图像面板，在这里我可以打开我的漫反射纹理。
- en: '![The Bat Creature material, shown without any textures or subsurface scattering.
    The rendered material is shown at the right. (See and for how to set up the lighting
    and render settings.)](httpatomoreillycomsourcenostarchimages1538752.png.jpg)Figure 12-12. The
    Bat Creature material, shown without any textures or subsurface scattering. The
    rendered material is shown at the right. (See [Chapter 13](ch13.html "Chapter 13. Lighting")
    and [Chapter 14](ch14.html "Chapter 14. Rendering and Compositing") for how to
    set up the lighting and render settings.)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![蝙蝠生物材质，未添加任何纹理或次表面散射效果。右侧展示了渲染后的材质。（请参见[第13章](ch13.html "第13章. 光照")和[第14章](ch14.html
    "第14章. 渲染与合成")了解如何设置光照和渲染设置。）](httpatomoreillycomsourcenostarchimages1538752.png.jpg)
    图 12-12. 蝙蝠生物材质，未添加任何纹理或次表面散射效果。右侧展示了渲染后的材质。（请参见[第13章](ch13.html "第13章. 光照")和[第14章](ch14.html
    "第14章. 渲染与合成")了解如何设置光照和渲染设置。）'
- en: Mapping Coordinates
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 映射坐标
- en: To apply the texture to the mesh properly, I needed to tell the material to
    use the UV coordinates that I created in [Chapter 8](ch08.html "Chapter 8. UV
    Unwrapping").
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地将纹理应用到网格上，我需要告诉材质使用我在[第8章](ch08.html "第8章. UV展开")中创建的UV坐标。
- en: 'To do so, I could set the Coordinates option in the Mapping panel to UV. There
    are several other choices here, though, that are worth discussing. For example,
    the Generated option will create a procedural projection using the Projection
    setting below, which can be useful for applying seamless textures without having
    to unwrap an object. Generated coordinates project the surface of the object onto
    an imaginary shape—a plane, a cube, a sphere, or a cylinder—and use this projection
    to apply the texture. The result is shown in [Figure 12-13](ch12.html#blenderapostrophes_generated_coordinates
    "Figure 12-13. Blender’s generated coordinates project an arbitrary shape onto
    your object to create a mapping for textures. Top to bottom: flat, cube, tube,
    and sphere projections. Here, cube and sphere do a good job because the shape
    of the skull is largely similar to these shapes.").'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我可以在映射面板中将“坐标”选项设置为UV。不过，这里还有其他几个值得讨论的选项。例如，“生成”选项将使用下方的投影设置创建一个程序化投影，这对于应用无缝纹理而不需要展开物体非常有用。生成坐标将物体的表面投射到一个假想的形状——平面、立方体、球体或圆柱体——并利用该投影来应用纹理。结果如[图12-13](ch12.html#blenderapostrophes_generated_coordinates
    "图12-13. Blender的生成坐标将一个任意形状投射到你的物体上，以创建纹理的映射。自上而下：平面、立方体、圆柱和球体投影。在这里，立方体和球体效果良好，因为头骨的形状与这些形状相似。")所示。
- en: We’ll use some of the other options, such as *strand* coordinates, later in
    this chapter. We’ve already seen normal coordinates in action, when applying MatCap
    images for use with GLSL shading.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，我们将使用一些其他选项，如*strand*坐标。我们已经在应用MatCap图像并使用GLSL着色时看到了法线坐标的实际应用。
- en: Influence
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 影响
- en: The Influence panel of the Materials tab is where we set which properties of
    the material our texture will affect. The panel lists all the material properties
    that textures can be used to control, such as normals; hardness; alpha transparency;
    and diffuse, specular, and mirror colors and intensities. For our diffuse texture,
    we’ll stick with the default of Color, under the diffuse properties, which sets
    the diffuse color of the surface using the texture’s RGB values (see [Figure 12-14](ch12.html#adding_my_diffuse_texture_to_the_skin_ma
    "Figure 12-14. Adding my diffuse texture to the skin material for the Bat Creature")).
    I set the Blend mode for this texture to Mix, meaning it will replace the default
    diffuse color specified in the Material settings.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 材质选项卡中的“影响”面板是我们设置纹理将影响材质哪些属性的地方。面板列出了所有可以用纹理控制的材质属性，例如法线、硬度、透明度、漫反射、镜面反射以及镜面颜色和强度。对于我们的漫反射纹理，我们将使用漫反射属性下的默认选项“颜色”，该选项使用纹理的RGB值来设置表面的漫反射颜色（参见[图
    12-14](ch12.html#adding_my_diffuse_texture_to_the_skin_ma "图 12-14. 将我的漫反射纹理添加到蝙蝠生物的皮肤材质")）。我将此纹理的混合模式设置为“混合”，意味着它将替代材质设置中指定的默认漫反射颜色。
- en: 'You can also use only the black-and-white value of a texture and ignore its
    color information by checking the RGB to Intensity option. This lets you choose
    a specific color to multiply this value within the color picker below it, for
    use with properties that still need colors. The Negative option inverts the texture
    before applying it to the model. The Stencil option can be particularly useful
    for combining procedural textures because it makes the texture act as a mask for
    the texture slots below: White areas of the texture will allow subsequent textures
    to be applied, while black areas will show only textures higher up in the texture
    slot stack.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以只使用纹理的黑白值并忽略其颜色信息，通过勾选“RGB到亮度”选项。这让你可以在下面的颜色选择器中选择一个特定的颜色来与此值相乘，用于需要颜色的属性。负值选项在应用到模型之前会反转纹理。蒙版选项对于结合程序化纹理尤其有用，因为它让纹理作为下方纹理插槽的蒙版：纹理中的白色区域会允许后续纹理被应用，而黑色区域则只会显示纹理插槽堆栈中更高位置的纹理。
- en: '![Blender’s generated coordinates project an arbitrary shape onto your object
    to create a mapping for textures. Top to bottom: flat, cube, tube, and sphere
    projections. Here, cube and sphere do a good job because the shape of the skull
    is largely similar to these shapes.](httpatomoreillycomsourcenostarchimages1538754.png.jpg)Figure 12-13. Blender’s
    generated coordinates project an arbitrary shape onto your object to create a
    mapping for textures. Top to bottom: flat, cube, tube, and sphere projections.
    Here, cube and sphere do a good job because the shape of the skull is largely
    similar to these shapes.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![Blender生成的坐标将任意形状投影到物体上，为纹理创建映射。自上而下：平面、立方体、管道和球体投影。这里，立方体和球体效果较好，因为头骨的形状与这些形状非常相似。](httpatomoreillycomsourcenostarchimages1538754.png.jpg)图12-13。Blender生成的坐标将任意形状投影到物体上，为纹理创建映射。自上而下：平面、立方体、管道和球体投影。这里，立方体和球体效果较好，因为头骨的形状与这些形状非常相似。'
- en: Further Textures
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多纹理
- en: Now, I’ll continue to apply textures to my material. First, we’ll look at the
    specular and hardness textures that I created in [Chapter 11](ch11.html "Chapter 11. Texture
    Painting"). To add the specular texture to the material, I selected the next empty
    texture slot from the top of the Textures tab and clicked +New from the texture
    selector drop-down menu to create a new texture block. I set its type to Image.
    Then, I set the mapping to UV as before, but this time, under the Influence option,
    I set the texture to affect the specular color of the material. I set the Blend
    mode to Multiply so that the values from the texture were multiplied with the
    overall specular color of the material.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将继续为我的材质添加纹理。首先，我们来看一下我在[第11章](ch11.html "第11章. 纹理绘制")中创建的高光和硬度纹理。为了将高光纹理添加到材质中，我从“纹理”标签顶部选择了下一个空的纹理插槽，并从纹理选择器下拉菜单中点击+新建，创建了一个新的纹理块。我将其类型设置为“图像”。然后，我像之前一样设置了映射方式为UV，但这次在“影响”选项下，我设置了纹理影响材质的高光颜色。我将混合模式设置为“叠加”，这样纹理的数值就会与材质的整体高光颜色相乘。
- en: For the hardness texture, I set the texture to affect the material’s hardness,
    and I enabled the RGB to Intensity option to make sure Blender would treat the
    texture as a simple brightness value rather than as three color values. (RGB textures
    can fail when used with inputs that don’t require color information.) I set the
    Blend mode to Multiply.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于硬度纹理，我设置了纹理影响材质的硬度，并启用了“RGB到亮度”选项，确保Blender将纹理视为简单的亮度值，而不是三个颜色值。（当RGB纹理用于不需要颜色信息的输入时，可能会失败。）我将混合模式设置为“叠加”。
- en: '![Adding my diffuse texture to the skin material for the Bat Creature](httpatomoreillycomsourcenostarchimages1538756.png.jpg)Figure 12-14. Adding
    my diffuse texture to the skin material for the Bat Creature![The material for
    the Bat Creature with textures added](httpatomoreillycomsourcenostarchimages1538758.png.jpg)Figure 12-15. The
    material for the Bat Creature with textures added'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![将我的漫反射纹理添加到蝙蝠生物的皮肤材质中](httpatomoreillycomsourcenostarchimages1538756.png.jpg)图12-14。将我的漫反射纹理添加到蝙蝠生物的皮肤材质中！[蝙蝠生物的材质，添加了纹理](httpatomoreillycomsourcenostarchimages1538758.png.jpg)图12-15。蝙蝠生物的材质，添加了纹理'
- en: Note that having a hardness value of 0 gives strange results, so either make
    sure the hardness texture contains no fully black areas, or set the influence
    of the texture to less than 1 to eliminate this issue.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，硬度值为0会导致奇怪的结果，因此要么确保硬度纹理中没有完全黑色的区域，要么将纹理的影响值设置为小于1，以消除这个问题。
- en: This completed adding textures to my material. The current result is shown in
    [Figure 12-15](ch12.html#material_for_the_bat_creature_with_textu "Figure 12-15. The
    material for the Bat Creature with textures added").
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了材质的纹理添加。当前的结果显示在[图12-15](ch12.html#material_for_the_bat_creature_with_textu
    "图12-15. 向蝙蝠生物添加纹理后的材质")中。
- en: Adding a Normal Map
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加法线贴图
- en: Though I had finished adding textures to the material, you may remember that
    in [Chapter 11](ch11.html "Chapter 11. Texture Painting"), I also baked a normal
    map for the Bat Creature as a potential alternative to using displacement. At
    this stage, I could add the normal map in another image texture slot and set it
    to affect the Normals of the material in the Influence options. I also had to
    tell Blender that this is a tangent space normal map (not a bump map or an object
    space normal map), so in the Image Sampling panel of the Textures tab, I enabled
    the Normal Map option and made sure the Normal Map Space option just below was
    set to Tangent. The resulting material will use the textures to distort its normals
    when rendered, making it look more detailed even with subdivision and displacement
    mapping turned off.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我已经完成了材质的纹理添加，但你可能还记得，在[第11章](ch11.html "第11章. 纹理绘制")中，我为蝙蝠生物烘焙了一个法线贴图，作为替代位移贴图的潜在方案。在这个阶段，我可以将法线贴图添加到另一个图像纹理槽中，并设置其影响材质的法线。在影响选项中，我还需要告诉Blender这是一个切线空间法线贴图（而不是凹凸贴图或物体空间法线贴图），所以在纹理标签的图像采样面板中，我启用了法线贴图选项，并确保下方的法线贴图空间选项设置为切线。最终的材质将在渲染时使用这些纹理来扭曲法线，即使关闭细分和位移贴图，也能使其看起来更加详细。
- en: As I *was* using displacement mapping, I didn’t need to use my normal map at
    all, but it’s a fair alternative if you want to keep render times low or if your
    computer is struggling with the poly count of the scene.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我*使用了*位移贴图，我根本不需要使用法线贴图，但如果你想保持渲染时间较短，或者你的计算机在场景的多边形数量上遇到困难，这也是一个不错的替代方案。
- en: Subsurface Scattering
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 次表面散射
- en: '*Subsurface scattering (SSS)* is the effect of light bouncing around below
    the surface of a material, and it’s common in materials like skin, wax, and marble.
    It results in the edges of shadows looking somewhat blurred, as light diffuses
    out from fully lit areas to areas in shadow. As the light scatters, some of it
    is absorbed, with the remaining light usually taking on the color of the underlying
    substance. In the case of skin, the flesh and blood below the skin cause the scattered
    light to appear an orange-red color.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*次表面散射（SSS）* 是光线在材料表面下反射的效果，这在皮肤、蜡和大理石等材料中很常见。它使阴影的边缘看起来有些模糊，因为光线从完全照亮的区域扩散到阴影部分。当光线散射时，部分光被吸收，剩余的光通常会呈现出下方物质的颜色。以皮肤为例，皮肤下的肌肉和血液会使散射光呈现橙红色。'
- en: '![The effect of different scale values on subsurface scattering. Left to right:
    Scale values of 0.01, 0.1, and 0.5.](httpatomoreillycomsourcenostarchimages1538760.png.jpg)Figure 12-16. The
    effect of different scale values on subsurface scattering. Left to right: Scale
    values of 0.01, 0.1, and 0.5.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同尺度值对次表面散射的影响。由左至右：尺度值为0.01、0.1和0.5。](httpatomoreillycomsourcenostarchimages1538760.png.jpg)图12-16。不同尺度值对次表面散射的影响。由左至右：尺度值为0.01、0.1和0.5。'
- en: To replicate this effect in Blender Internal, we can enable subsurface scattering
    for a material. This effect approximates the scattering of light within an object
    by precomputing the lighting over its surface and then blurring the shadows. It
    also causes light to scatter through thin parts of the model. This produces a
    nice effect when combined with lighting the subject from the back (as I will light
    the Bat Creature in [Chapter 13](ch13.html "Chapter 13. Lighting")).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Blender Internal中复制这种效果，我们可以为一个材质启用次表面散射。这个效果通过预计算其表面的光照并模糊阴影，来近似物体内部光线的散射。它还使光线在模型的薄部分发生散射。当将光源从背后照射到物体时，这种效果尤为明显（正如我在[第13章](ch13.html
    "第13章. 照明")中为蝙蝠生物打光时所做的那样）。
- en: 'Enabling subsurface scattering in the Materials tab of the Properties editor
    gives you a lot of options to play with. The settings for subsurface scattering
    are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性编辑器的材质标签中启用次表面散射功能后，你将拥有很多可以调整的选项。次表面散射的设置如下：
- en: '****IOR****. This is the index of refraction of the material. High IORs result
    in slightly softer boundaries between light and dark.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '****IOR****。这是材料的折射率。较高的IOR会导致光明与黑暗之间的边界稍微变得柔和。'
- en: '****Scale****. This is the most important setting, because it determines the
    scale of the scattering effect as a ratio between Blender’s units in the 3D Viewport
    and real-world scales. If you’ve built your scene to a scale of 1 Blender unit
    = 1m, then a value of 0.001 is “correct,” though you can set this to whatever
    value achieves the desired results (see [Figure 12-16](ch12.html#effect_of_different_scale_values_on_subs
    "Figure 12-16. The effect of different scale values on subsurface scattering.
    Left to right: Scale values of 0.01, 0.1, and 0.5.")).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '****缩放****。这是最重要的设置，因为它决定了散射效果的缩放比例，即 Blender 单位在 3D 视图中的比例与实际世界尺度之间的关系。如果你已经将场景构建为
    1 Blender 单位 = 1 米，那么 0.001 的值是“正确的”，不过你可以设置为任何能达到预期效果的值（参见[图12-16](ch12.html#effect_of_different_scale_values_on_subs
    "图12-16。不同缩放值对次表面散射的影响。从左到右：缩放值为 0.01、0.1 和 0.5。"））。'
- en: '****Scattering Color****. This determines the color of light scattering. Its
    effect depends largely upon how you set the color blend (as discussed below).
    When the color blend is set high, it colors all of the scattered light with the
    color you choose, generally turning your whole mesh that color. When the color
    blend is set to 0, it has the opposite effect, causing the scattered light to
    take on the *inverse* color—that is, the color on the opposite side of the circle
    in the color picker (see [Figure 12-17](ch12.html#effect_of_different_color_blend_settings
    "Figure 12-17. The effect of different color blend settings on subsurface scattering.
    Here, the same bluish color is used as the scattering color for all three materials,
    but different color blend values are used. Left to right: Color blend values of
    0.0, 0.5, and 1.0.")).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '****散射颜色****。这决定了光的散射颜色。其效果在很大程度上取决于你如何设置颜色混合（如下所述）。当颜色混合设置较高时，它会将所有散射的光染上你选择的颜色，通常会使整个网格变为该颜色。当颜色混合设置为
    0 时，效果恰恰相反，导致散射光呈现*反向*颜色——即颜色选择器中与当前颜色对立的颜色（参见[图12-17](ch12.html#effect_of_different_color_blend_settings
    "图12-17。不同颜色混合设置对次表面散射的影响。这里，所有三种材质使用相同的蓝色作为散射颜色，但使用了不同的颜色混合值。从左到右：颜色混合值为 0.0、0.5
    和 1.0。"））。'
- en: '![The effect of different color blend settings on subsurface scattering. Here,
    the same bluish color is used as the scattering color for all three materials,
    but different color blend values are used. Left to right: Color blend values of
    0.0, 0.5, and 1.0.](httpatomoreillycomsourcenostarchimages1538762.png.jpg)Figure 12-17. The
    effect of different color blend settings on subsurface scattering. Here, the same
    bluish color is used as the scattering color for all three materials, but different
    color blend values are used. Left to right: Color blend values of 0.0, 0.5, and
    1.0.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同颜色混合设置对次表面散射的影响。这里，所有三种材质使用相同的蓝色作为散射颜色，但使用了不同的颜色混合值。从左到右：颜色混合值为 0.0、0.5
    和 1.0。](httpatomoreillycomsourcenostarchimages1538762.png.jpg)图12-17。不同颜色混合设置对次表面散射的影响。这里，所有三种材质使用相同的蓝色作为散射颜色，但使用了不同的颜色混合值。从左到右：颜色混合值为
    0.0、0.5 和 1.0。'
- en: '****RGB Radius****. In many materials, some colors of light scatter farther
    than others. For example, in pale skin, red light scatters farthest, green scatters
    about half as far as red light, and blue scatters about a quarter as far as red
    light. These settings let you define the relative scattering distances for red,
    blue, and green light.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '****RGB 半径****。在许多材质中，某些颜色的光散射得比其他颜色更远。例如，在浅色皮肤中，红光散射得最远，绿光大约散射到红光的一半距离，蓝光则约为红光的四分之一。这些设置让你可以定义红光、绿光和蓝光的相对散射距离。'
- en: '****Blend (Color/Texture)****. These settings determine how much the scattering
    color and diffuse texture spread out. I generally set both of these very low,
    if not to 0, because the results are more pleasing. High color blend values tend
    to cause the scattering color to wash out any other colors in the material (see
    [Figure 12-17](ch12.html#effect_of_different_color_blend_settings "Figure 12-17. The
    effect of different color blend settings on subsurface scattering. Here, the same
    bluish color is used as the scattering color for all three materials, but different
    color blend values are used. Left to right: Color blend values of 0.0, 0.5, and
    1.0.")), and high texture blend values cause the texture to look blurry.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '****混合（颜色/纹理）****。 这些设置决定了散射颜色和漫反射纹理的扩散程度。我通常将这两个值设置得非常低，甚至为0，因为这样效果更令人满意。较高的颜色混合值往往会导致散射颜色冲淡材料中的其他颜色（见[图12-17](ch12.html#effect_of_different_color_blend_settings
    "图12-17。不同颜色混合设置对次表面散射的影响。这里，所有三种材质使用相同的蓝色散射颜色，但使用了不同的颜色混合值。从左到右：颜色混合值为0.0、0.5和1.0。")），而较高的纹理混合值则会使纹理看起来模糊。'
- en: '****Scattering Weight (Front/Back)****. This adjusts the relative amount of
    scattering from the front and back of the model. Increasing the back scattering
    weight causes light to scatter through thin parts of the model more noticeably,
    which is often desirable. Setting the front value to 0 causes the material to
    scatter no light from the front of the surface, making it black for all but back
    scattered light, as shown in [Figure 12-18](ch12.html#front_and_back_scatteringdot_left_to_rig
    "Figure 12-18. Front and back scattering. Left to right: Front scattering only,
    front and back scattering, and back scattering only."). (This is sometimes useful
    in node material setups.)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '****散射权重（前/后）****。 这调整了模型前后部分的散射相对量。增加后向散射权重会导致光线在模型的薄部分更明显地散射，这通常是理想的。将前向值设置为0会使材料从表面前端不散射任何光线，只对后向散射的光线有反应，如[图12-18](ch12.html#front_and_back_scatteringdot_left_to_rig
    "图12-18。前后散射。从左到右：仅前向散射、前后散射和仅后向散射。")所示。（这在节点材质设置中有时非常有用。）'
- en: '****Error****. This value determines the quality of the SSS effect. Lower values
    give more accurate results but at the cost of longer render times. The default
    value is usually fine.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '****误差****。 这个值决定了SSS效果的质量。较低的值会提供更精确的结果，但渲染时间会更长。默认值通常就很好。'
- en: '![Front and back scattering. Left to right: Front scattering only, front and
    back scattering, and back scattering only.](httpatomoreillycomsourcenostarchimages1538764.png.jpg)Figure 12-18. Front
    and back scattering. Left to right: Front scattering only, front and back scattering,
    and back scattering only.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![前后散射。从左到右：仅前向散射、前后散射和仅后向散射。](httpatomoreillycomsourcenostarchimages1538764.png.jpg)图12-18。前后散射。从左到右：仅前向散射、前后散射和仅后向散射。'
- en: For the Bat Creature, I set the SSS settings as shown in [Figure 12-19](ch12.html#sss_settings_for_the_bat_creatureapostro
    "Figure 12-19. The SSS settings for the Bat Creature’s skin. Combined with the
    lighting from behind, subsurface scattering causes the wings to glow with light
    scattering through them."). I set the scale relative to the size of the creature,
    which I created at a 1m = 1 Blender unit scale, and chose teal for the scattering
    color, which together with a color blend set to 0 gave a nice orange scattering.
    I set the back scattering weight high to allow light to scatter through the wings.
    This completed the skin material for the Bat Creature.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蝙蝠生物，我设置的SSS设置如[图12-19](ch12.html#sss_settings_for_the_bat_creatureapostro
    "图12-19。蝙蝠生物皮肤的SSS设置。结合来自背后的光照，次表面散射使翅膀发光，光线从其中散射出来。")所示。我根据生物的大小设置了比例，假设1米等于1个Blender单位，并选择了蓝绿色作为散射颜色，结合将颜色混合设置为0，得到了一个漂亮的橙色散射效果。我将后向散射权重设置得较高，以允许光线穿过翅膀散射。这完成了蝙蝠生物的皮肤材质。
- en: '![The SSS settings for the Bat Creature’s skin. Combined with the lighting
    from behind, subsurface scattering causes the wings to glow with light scattering
    through them.](httpatomoreillycomsourcenostarchimages1538766.png.jpg)Figure 12-19. The
    SSS settings for the Bat Creature’s skin. Combined with the lighting from behind,
    subsurface scattering causes the wings to glow with light scattering through them.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![蝙蝠生物皮肤的SSS设置。结合来自背后的光照，次表面散射使翅膀发光，光线从其中散射出来。](httpatomoreillycomsourcenostarchimages1538766.png.jpg)图12-19。蝙蝠生物皮肤的SSS设置。结合来自背后的光照，次表面散射使翅膀发光，光线从其中散射出来。'
- en: Teeth, Nails, and Eyes
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 牙齿、指甲和眼睛
- en: To create the materials for the teeth and nails, I started by duplicating the
    material I created for the skin, toning down the SSS effect, and increasing the
    overall specularity to make these areas shinier.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建牙齿和指甲的材质，我首先复制了我为皮肤创建的材质，减少了SSS效果，并增加了整体的镜面反射，使这些区域看起来更光亮。
- en: To duplicate a material, assign it to an object. Then, in the material selector
    drop-down menu, click the + icon to make a new material by duplicating the one
    currently assigned. You can then modify the duplicate leaving the original unchanged.
    This is useful when creating a material similar to one you have already made.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制一个材质，首先将其分配给一个物体。然后，在材质选择器的下拉菜单中，点击+图标，通过复制当前分配的材质来创建一个新材质。接下来，你可以修改这个副本，而不会改变原始材质。当你需要创建一个与已创建材质类似的新材质时，这非常有用。
- en: 'For the eyes, I created two new materials. Recall that when I modeled the eyes
    in [Chapter 5](ch05.html "Chapter 5. Modeling the Details"), I created them as
    two separate parts: a cornea object that forms the outer surface of the eye and
    an inner part that would become the eyeball itself. Having unwrapped and textured
    the inner part, I set up a material similar to the skin material, with slightly
    less red subsurface scattering. I also turned specular reflections for this material
    off (by setting the specular intensity to 0), as the specular reflections for
    the eye will come from the cornea object. I applied the eye texture I painted
    in [Chapter 11](ch11.html "Chapter 11. Texture Painting") as the diffuse texture
    for the material.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于眼睛，我创建了两种新材质。回想一下，在[第5章](ch05.html "第5章. 细节建模")中我建模眼睛时，将其分为两个独立的部分：角膜物体形成眼睛的外表面，内层则是最终成为眼球的部分。将内层展开并纹理化后，我设置了一个类似皮肤材质的材质，减少了些微的红色次表面散射。我还关闭了该材质的镜面反射（将镜面强度设置为0），因为眼睛的镜面反射来自角膜物体。我将[第11章](ch11.html
    "第11章. 纹理绘制")中我绘制的眼部纹理应用为该材质的漫反射纹理。
- en: For the cornea, I needed a shiny, transparent material that wouldn’t cast a
    shadow on the inner eye object. To produce this, I created a new material assigned
    to this object. Then, I turned on transparency in the Material settings and set
    it to Z Transparency, with the alpha for the material set to 0\. These settings
    make a material transparent, with the exception of any specular and mirror reflections,
    if they are present. I turned the specular and hardness of the material up quite
    high, and to prevent the material from casting shadows, I disabled Traceable in
    the Options panel and Cast Buffer shadows in the Shadows panel. The two materials
    for the eyes can be seen in [Figure 12-20](ch12.html#two_materials_for_the_eyesdot_the_specul
    "Figure 12-20. The two materials for the eyes. The specular highlights come from
    the material applied to the cornea mesh. The rest are from the inner eye mesh.").
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于角膜，我需要一种既光亮又透明的材质，并且不会在内眼物体上投射阴影。为此，我创建了一个新材质并将其分配给该物体。然后，在材质设置中启用透明度，并设置为Z透明度，同时将材质的alpha值设置为0。这些设置使材质变得透明，除非存在镜面和镜面反射。为了提高材质的光泽度，我将镜面反射和硬度都调高了不少，并且为了防止材质投射阴影，我在选项面板中禁用了可追踪性，并在阴影面板中禁用了投射缓冲阴影。眼睛的两种材质可以在[图12-20](ch12.html#two_materials_for_the_eyesdot_the_specul
    "图12-20. 眼睛的两种材质。镜面高光来自应用于角膜网格的材质，其余来自内眼网格。")中看到。
- en: Fur
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 毛发
- en: Materials for fur are a little more complex than regular materials and require
    a bit of knowledge about lighting and rendering. I’ll cover the material aspects
    here and some of the lighting aspects in [Chapter 13](ch13.html "Chapter 13. Lighting").
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 毛发材质比普通材质稍微复杂一些，需要一些关于光照和渲染的知识。我将在这里介绍材质的相关内容，并在[第13章](ch13.html "第13章. 光照")中讲解一些光照方面的内容。
- en: In Blender Internal, strand particles can be rendered either like any other
    material or using Blender’s Strand rendering option. Blender’s Strand rendering
    option offers a much faster way to render hair and fur, but it isn’t compatible
    with ray-traced shadows. Instead, it allows only for the rendering of shadows
    using spot lamps with buffered shadows.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender Internal中，毛发粒子可以像任何其他材质一样渲染，也可以使用Blender的毛发渲染选项。Blender的毛发渲染选项提供了一种更快速的渲染毛发和毛皮的方式，但它与光线追踪阴影不兼容。它只能通过带有缓冲阴影的聚光灯来渲染阴影。
- en: To enable strand rendering, use the Render panel in the Particles tab of the
    Properties editor (see [Figure 12-21](ch12.html#enabling_strand_rendering_from_the_parti
    "Figure 12-21. Enabling strand rendering from the Particles tab of the Properties
    editor")). For the Bat Creature, I opted to use strand rendering. In [Chapter 13](ch13.html
    "Chapter 13. Lighting"), we’ll discuss creating an appropriate lighting setup
    for use with this setup.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用发丝渲染，请使用属性编辑器中“粒子”标签的“渲染”面板（见[图12-21](ch12.html#enabling_strand_rendering_from_the_parti
    "图12-21. 从属性编辑器的粒子标签启用发丝渲染")）。对于蝙蝠生物，我选择使用发丝渲染。在[第13章](ch13.html "第13章. 照明")中，我们将讨论如何为这种设置创建适当的照明环境。
- en: '![The two materials for the eyes. The specular highlights come from the material
    applied to the cornea mesh. The rest are from the inner eye mesh.](httpatomoreillycomsourcenostarchimages1538768.png.jpg)Figure 12-20. The
    two materials for the eyes. The specular highlights come from the material applied
    to the cornea mesh. The rest are from the inner eye mesh.![Enabling strand rendering
    from the Particles tab of the Properties editor](httpatomoreillycomsourcenostarchimages1538770.png.jpg)Figure 12-21. Enabling
    strand rendering from the Particles tab of the Properties editor'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![两种眼睛材质。高光来自应用于角膜网格的材质，其他则来自内眼网格。](httpatomoreillycomsourcenostarchimages1538768.png.jpg)图12-20.
    两种眼睛材质。高光来自应用于角膜网格的材质，其他则来自内眼网格。![从属性编辑器的粒子标签启用发丝渲染](httpatomoreillycomsourcenostarchimages1538770.png.jpg)图12-21.
    从属性编辑器的粒子标签启用发丝渲染'
- en: 'Next, I specified the Strand options for the material. In the Strand panel
    of the Materials tab, you can specify how thick the strands will be and their
    shape, among other options:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我为材质指定了发丝选项。在“材质”标签的“发丝”面板中，您可以指定发丝的粗细、形状等选项：
- en: '****Size (Root/Tip/Minimum)****. This determines the thickness of the particles
    at the root and tip of the hair. The Minimum setting specifies the minimum width
    of a strand in pixels that Blender will render.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '****大小（根部/尖端/最小）****。此项决定发丝根部和尖端的厚度。最小设置指定Blender渲染时发丝的最小宽度（以像素为单位）。'
- en: '****Blender Units****. By default, the thicknesses you specify using the Size
    setting are specified in pixels. This can be problematic if you have a lot of
    particles at different distances away from the camera, as they will be rendered
    with the same width in pixels, making the faraway ones look too thick. Turning
    on Blender Units lets you specify particle width in Blender units instead.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '****Blender单位****。默认情况下，您通过“大小”设置指定的厚度是以像素为单位的。如果您的粒子与相机之间的距离差异很大，这可能会导致渲染问题，因为它们会以相同的像素宽度进行渲染，使得远处的粒子看起来过于粗大。启用Blender单位后，您可以改为使用Blender单位来指定粒子的宽度。'
- en: '****Tangent Shading****. This option uses the strand’s tangent direction rather
    than its normal for shading, which generally gives better results.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '****切线着色****。此选项使用发丝的切线方向而非法线方向进行着色，这通常会产生更好的效果。'
- en: '****Shape****. This modifies the transition between the width of the root and
    the tip of the strand. The default value of 0 gives a linear transition. Negative
    values result in a spiky shape, while positive values make the strand look more
    rounded at the end.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '****形状****。此项修改发丝根部与尖端之间宽度的过渡。默认值为0，表示线性过渡。负值会导致尖锐的形状，而正值则使发丝的末端看起来更圆润。'
- en: '****Width Fade****. This setting causes the strand to fade across its width,
    but only when strand rendering is enabled.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '****宽度渐变****。此设置使发丝在宽度方向上逐渐褪色，但仅当启用发丝渲染时有效。'
- en: '****UV Map****. This allows you to overwrite one of your UV coordinate sets
    to provide a UV map for the strands. In turn, this lets you UV map an image to
    all your strands for texturing, but it works only with strand rendering disabled.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '****UV映射****。此项允许您覆盖其中一个UV坐标集，为发丝提供一个UV映射。这样，您可以将图像UV映射到所有发丝上以进行纹理处理，但只有在禁用发丝渲染时才能使用。'
- en: '****Surface Diffuse****. This setting causes the diffuse shading of the surface
    to blend with the strand shading over the specified distance.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '****表面漫反射****。此设置使表面漫反射的着色与发丝着色在指定的距离内融合。'
- en: Strand Coordinates
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 发丝坐标
- en: As mentioned above, we can texture strand materials by using the UV map override.
    A simpler option, however, is to use the strand coordinates for mapping when applying
    textures. While this only gives a one-dimensional coordinate along the length
    of the strand, this is usually enough for thin strands anyway.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们可以通过使用UV映射覆盖来给毛发纹理。更简单的选择是使用毛发坐标进行纹理映射。当应用纹理时，虽然这仅提供了沿毛发长度的一维坐标，但对于细小的毛发来说，这通常已足够。
- en: For the Bat Creature’s fur, I first set up a simple material using the settings
    shown in [Figure 12-22](ch12.html#basic_settings_for_my_fur_material "Figure 12-22. The
    basic settings for my fur material"). Notice that I enabled Z Transparency and
    set the Alpha to about 0.7\. For the Strand settings, I enabled Blender Units
    and then set the Root and Tip sizes to 0.00125 and 0.0001, respectively. (These
    values are small because the hairs need to be very thin, and their widths are
    now given in Blender units.) I also turned on Tangent Shading and set Width Fade
    to 1.0.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蝙蝠生物的毛发，我首先使用[图12-22](ch12.html#basic_settings_for_my_fur_material "图12-22.
    我的毛发材质的基本设置")中显示的设置建立了一个简单的材质。注意，我启用了Z透明度并将透明度设置为大约0.7。在毛发设置中，我启用了Blender单位，并将根部和发梢的大小分别设置为0.00125和0.0001。（这些值较小，因为毛发需要非常细，而且它们的宽度现在是以Blender单位为单位。）我还启用了切线着色，并将宽度渐变设置为1.0。
- en: Next, in the Texture settings, I used Blender’s procedural blend texture to
    add a fade to the hair’s alpha along its length, making it become transparent
    toward the tip. I added a new texture to the material’s first texture slot and
    set its type to Blend. Then, I began adjusting the colors of the blend texture
    by first enabling the Ramp option in the Colors tab and then adjusting the colors
    that the procedural texture used. I clicked Add to create a couple more stops
    along the gradient and then set the colors to fade from transparent black to opaque
    white and back (see [Figure 12-23](ch12.html#modifying_the_colors_of_a_procedural_ble
    "Figure 12-23. Modifying the colors of a procedural blend texture")). Finally,
    under Mapping, I set the texture’s coordinates to alpha, and under Influence,
    I set the texture to multiply with the material’s alpha and its specular intensity.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在纹理设置中，我使用了Blender的程序化混合纹理来为头发的透明度沿长度添加渐变，使其在发梢处变得透明。我在材质的第一个纹理槽中添加了一个新的纹理，并将其类型设置为混合。然后，我开始调整混合纹理的颜色，首先在颜色标签中启用渐变选项，然后调整程序化纹理使用的颜色。我点击“添加”以在渐变中创建更多的颜色停点，并将颜色设置为从透明的黑色渐变到不透明的白色，再返回（见[图12-23](ch12.html#modifying_the_colors_of_a_procedural_ble
    "图12-23. 修改程序化混合纹理的颜色")）。最后，在映射下，我将纹理的坐标设置为透明度，并在影响下设置纹理与材质的透明度以及高光强度相乘。
- en: I did something similar for the hair color. I created a new blend texture in
    the next Texture slot, but this time I set up a blend from black to white (both
    alpha 1.0). Again, I mapped the texture to the strand coordinates and set it to
    multiply by a factor of 0.8 with the strand’s diffuse color, which made the base
    of the strands a little darker, thus faking a bit of shadowing.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我对头发颜色做了类似的处理。我在下一个纹理槽中创建了一个新的混合纹理，这次我设置了从黑色到白色的渐变（透明度均为1.0）。同样，我将纹理映射到毛发坐标，并将其与毛发的漫反射颜色按0.8的因子相乘，使得毛发根部稍微变暗，从而假装有一些阴影效果。
- en: Next, I added a cloud texture, which I set to modify the material’s color—this
    time influencing the diffuse color with a factor of 0.8, with the Blend mode set
    to Multiply and its mapping set to UV. I turned the scale of the cloud texture
    down to the absolute minimum, essentially turning the texture into black-and-white
    noise and giving each hair a slightly different brightness. This completed the
    hair material, with the resulting hair seen in [Figure 12-24](ch12.html#hair_material
    "Figure 12-24. The hair material").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我添加了一个云纹理，将其设置为修改材质的颜色——这次通过0.8的因子影响漫反射颜色，混合模式设置为乘法，映射设置为UV。我将云纹理的缩放值调到最低，基本上将纹理转化为黑白噪声，并给每根毛发一个稍微不同的亮度。这完成了头发材质，最终效果如[图12-24](ch12.html#hair_material
    "图12-24. 头发材质")所示。
- en: '![The basic settings for my fur material](httpatomoreillycomsourcenostarchimages1538772.png.jpg)Figure 12-22. The
    basic settings for my fur material![Modifying the colors of a procedural blend
    texture](httpatomoreillycomsourcenostarchimages1538774.png.jpg)Figure 12-23. Modifying
    the colors of a procedural blend texture![The hair material](httpatomoreillycomsourcenostarchimages1538776.png.jpg)Figure 12-24. The
    hair material'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的毛发材质的基本设置](httpatomoreillycomsourcenostarchimages1538772.png.jpg)图 12-22.
    我的毛发材质的基本设置![修改程序化混合纹理的颜色](httpatomoreillycomsourcenostarchimages1538774.png.jpg)图
    12-23. 修改程序化混合纹理的颜色![头发材质](httpatomoreillycomsourcenostarchimages1538776.png.jpg)图
    12-24. 头发材质'
- en: Peach Fuzz
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 桃毛
- en: I set up a very similar material for the peach fuzz particle system. For this
    material, I decreased the size settings for the strands to make them thinner and
    reduced the overall alpha of the material to make the hair look wispier. The resulting
    material can be seen in [Figure 12-25](ch12.html#my_peach_fuzz_hair_provides_a_more_subtl
    "Figure 12-25. My peach fuzz hair provides a more subtle effect; it adds a bit
    of a halo of fluff around brightly lit parts of the model."). It mainly shows
    up around the edges of the body, which is just what I wanted.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我为桃毛粒子系统设置了一个非常相似的材质。对于这个材质，我减少了发丝的大小设置，使它们变得更细，并降低了材质的整体 alpha 值，使头发看起来更加轻盈。最终的材质效果可以在[图
    12-25](ch12.html#my_peach_fuzz_hair_provides_a_more_subtl "图 12-25. 我的桃毛头发提供了一种更微妙的效果，它在模型的亮光部分周围增添了一圈毛茸茸的光晕。")中看到。它主要出现在身体的边缘，这正是我想要的效果。
- en: This completed my materials for the Bat Creature.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我为蝙蝠生物制作的材质。
- en: '![My peach fuzz hair provides a more subtle effect; it adds a bit of a halo
    of fluff around brightly lit parts of the model.](httpatomoreillycomsourcenostarchimages1538778.png.jpg)Figure 12-25. My
    peach fuzz hair provides a more subtle effect; it adds a bit of a halo of fluff
    around brightly lit parts of the model.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的桃毛头发提供了一种更微妙的效果，它在模型的亮光部分周围增添了一圈毛茸茸的光晕。](httpatomoreillycomsourcenostarchimages1538778.png.jpg)图
    12-25. 我的桃毛头发提供了一种更微妙的效果，它在模型的亮光部分周围增添了一圈毛茸茸的光晕。'
- en: Materials for the Spider Bot
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蜘蛛机器人材质
- en: 'For the Spider Bot, I chose to use Blender’s Cycles renderer because it allowed
    me to create some nice shiny materials to complement the model. I began by creating
    a single material to apply to all the (textured) parts of the Spider Bot mesh.
    You can use the Material Utils Script to do this quickly: Simply enable it in
    Blender’s Add-Ons menu (**User Preferences**▸**Add Ons**) and use the shortcut
    **Q** to assign materials to all your selected objects at once. By default, when
    you create a new Cycles material for an object, Blender will assign a diffuse
    BSDF shader, like the one shown in [Figure 12-26](ch12.html#my_screen_layout_for_editing_cycles_mate
    "Figure 12-26. My screen layout for editing Cycles materials"). The default material
    will be a plain matte white.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蜘蛛机器人，我选择使用 Blender 的 Cycles 渲染器，因为它允许我创建一些漂亮的光泽材质来与模型相辅相成。我从创建一个单一材质开始，应用到蜘蛛机器人网格的所有（有纹理的）部件。你可以使用材质工具脚本快速完成此操作：只需在
    Blender 的插件菜单中启用它（**用户设置**▸**插件**），并使用快捷键 **Q** 一次性为所有选中的对象分配材质。默认情况下，当你为一个物体创建新的
    Cycles 材质时，Blender 会分配一个漫反射 BSDF 着色器，就像[图 12-26](ch12.html#my_screen_layout_for_editing_cycles_mate
    "图 12-26. 我的 Cycles 材质编辑屏幕布局")中所示的那样。默认材质将是纯白色的哑光材质。
- en: Editing Node Materials
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑节点材质
- en: To edit Cycles materials, use Blender’s Node editor, keeping it visible alongside
    the 3D Viewpoint with a render preview of the scene (a major advantage over Blender
    Internal that I’ll discuss shortly). To allow space for the Node editor as well
    as the preview, I split the default layout once by right-clicking on the bottom
    edge of the 3D Viewport and choosing Split Area. Then, I split the left-hand area
    in two, horizontally.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑 Cycles 材质，可以使用 Blender 的节点编辑器，将其与 3D 视图并排显示，并实时预览场景渲染（这也是 Blender 内部渲染的一个主要优势，我稍后会讨论）。为了给节点编辑器和预览留出空间，我通过右键点击
    3D 视图底部边缘并选择“拆分区域”来将默认布局拆分一次。然后，我将左侧区域水平拆分成两部分。
- en: Once I split up the work area, I made one of the new areas into a Node editor
    and the other into a 3D Viewport, with its Display Method set to Rendered. In
    the Node editor header, I selected the materials icon in the left-hand group of
    icons and the cube icon in the right-hand group (see [Figure 12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m
    "Figure 12-27. The evolving node setup for the Spider Bot material")) so that
    the Node editor would display the node tree for the current material. This gave
    me a workable layout for editing Cycles materials.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我拆分了工作区，我将其中一个新区域设置为节点编辑器，另一个设置为 3D 视口，并将其显示模式设置为渲染模式。在节点编辑器的标题栏中，我选择了左侧组中的材质图标和右侧组中的立方体图标（参见[图
    12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m "图 12-27. 蜘蛛机器人材质的节点设置演变")），这样节点编辑器就会显示当前材质的节点树。这为我提供了一个可操作的布局，用于编辑
    Cycles 材质。
- en: The Cycles Render Preview
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cycles 渲染预览
- en: When the Display method for a 3D Viewport is set to Rendered, Blender will continuously
    render and update a Cycles render of the current view in that viewport (as in
    [Figure 12-26](ch12.html#my_screen_layout_for_editing_cycles_mate "Figure 12-26. My
    screen layout for editing Cycles materials")). This technique is a great way to
    get instant feedback on how the materials and lighting in your scene will look.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当 3D 视口的显示模式设置为渲染模式时，Blender 会持续渲染并更新该视口当前视图的 Cycles 渲染效果（如[图 12-26](ch12.html#my_screen_layout_for_editing_cycles_mate
    "图 12-26. 编辑 Cycles 材质时的屏幕布局")所示）。这种方法是即时查看场景中材质和光照效果的好方式。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*While we haven’t covered lighting yet, it’s helpful at this stage to add some
    basic lights to the scene so that the rendered preview will reflect the final
    look. Jump to [Chapter 13](ch13.html "Chapter 13. Lighting") for more on lighting,
    or simply add a couple of lights to the scene by pressing SHIFT-A in the 3D Viewport,
    choosing Lamps▸Point, and adding a point light. Adjust the brightness of the light
    using the Strength setting in the Object Data tab of the Properties editor. Add
    a couple of basic lights to the scene just to help work on materials, or create
    a more finished lighting setup.*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然我们还没有讲解光照，但此时添加一些基础光源对场景有帮助，这样渲染预览会更贴近最终效果。有关光照的更多信息，请跳转到[第 13 章](ch13.html
    "第 13 章. 光照")，或者简单地通过在 3D 视口中按 SHIFT-A，选择灯光▸点光源，添加一个点光源。通过在属性编辑器的对象数据选项卡中调整光源的强度设置，来调整光源的亮度。向场景中添加几个基础光源，以便于材质调整，或者创建一个更完整的光照设置。*'
- en: Adding Textures
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加纹理
- en: Next, I started combining further shaders into my material. I began by adding
    a Glossy BSDF shader (SHIFT-A▸Shaders▸Glossy BSDF) and using an Add Shader Node
    to blend the glossy and diffuse shaders by connecting both of the shader output
    sockets from the Shader nodes to the Add node and by connecting the Add node output
    socket to the Material Output node (see [Figure 12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m
    "Figure 12-27. The evolving node setup for the Spider Bot material")).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我开始将更多的着色器组合到我的材质中。我首先添加了一个光泽 BSDF 着色器（SHIFT-A▸Shaders▸Glossy BSDF），并使用一个加法着色器节点将光泽着色器和漫反射着色器混合，通过将两个着色器节点的输出插座连接到加法节点，再将加法节点的输出插座连接到材质输出节点（参见[图
    12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m "图 12-27. 蜘蛛机器人材质的节点设置演变")）。
- en: Next, I started incorporating my textures, beginning with my diffuse map. I
    added an Image Texture node (SHIFT-A▸Textures▸Image Texture) and opened my diffuse
    map by clicking the folder icon in the node. I connected the color output of this
    node to the color input of my Diffuse Shader node.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我开始加入我的纹理，首先是漫反射贴图。我添加了一个图像纹理节点（SHIFT-A▸Textures▸Image Texture），并通过点击节点中的文件夹图标打开我的漫反射贴图。我将该节点的颜色输出连接到漫反射着色器节点的颜色输入。
- en: '![My screen layout for editing Cycles materials](httpatomoreillycomsourcenostarchimages1538780.png.jpg)Figure 12-26. My
    screen layout for editing Cycles materials'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![编辑 Cycles 材质时的屏幕布局](httpatomoreillycomsourcenostarchimages1538780.png.jpg)图
    12-26. 编辑 Cycles 材质时的屏幕布局'
- en: I did the same for my specular color map, connecting it to the color input of
    the Specular Color node. By default, the mapping for these textures is the active
    UV coordinate set, so you don’t strictly need to define this manually. But because
    it can help to know what coordinates a texture uses, I added a Texture Coordinates
    node to the scene and connected its UV output to the vector (blue) input of my
    Image Texture nodes. Doing so tells these nodes to use the active UV map as the
    source of their texture coordinates. The node setup so far is shown in [Figure 12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m
    "Figure 12-27. The evolving node setup for the Spider Bot material").
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我对我的高光颜色贴图做了同样的操作，将其连接到高光颜色节点的颜色输入。默认情况下，这些纹理的映射使用的是活动的 UV 坐标集，所以你不需要严格手动定义它。但是，因为知道纹理使用了哪些坐标会有所帮助，我在场景中添加了一个纹理坐标节点，并将它的
    UV 输出连接到我的图像纹理节点的向量（蓝色）输入。这样做会告诉这些节点使用活动的 UV 映射作为它们的纹理坐标来源。到目前为止的节点设置如[图 12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m
    "图 12-27. 蜘蛛机器人材质的节点设置演变过程")所示。
- en: '![The evolving node setup for the Spider Bot material](httpatomoreillycomsourcenostarchimages1538782.png.jpg)Figure 12-27. The
    evolving node setup for the Spider Bot material'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![蜘蛛机器人材质的节点设置演变过程](httpatomoreillycomsourcenostarchimages1538782.png.jpg)图
    12-27。蜘蛛机器人材质的节点设置演变过程'
- en: Socket Types
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插槽类型
- en: Now that I have a reasonably complex node setup for the material, let’s talk
    about node sockets. Node sockets are the little colored circles that denote the
    inputs and outputs of a node and that allow nodes to be connected by clicking
    and dragging a connection from the output socket of one node to the input socket
    of another. Notice in [Figure 12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m
    "Figure 12-27. The evolving node setup for the Spider Bot material") that the
    sockets we used to connect nodes all have matching colors—green with green, yellow
    with yellow. The colors need to match because different output sockets pass different
    types of data and different input sockets expect different kinds of data. Some
    may require color information, some only a single value. Others may require vector
    information, like texture coordinates or normals.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我已经为材质设置了一个相对复杂的节点设置，让我们来谈谈节点插槽。节点插槽是表示节点输入和输出的小彩色圆圈，它们允许通过单击并拖动连接线，从一个节点的输出插槽连接到另一个节点的输入插槽。请注意，在[图
    12-27](ch12.html#evolving_node_setup_for_the_spider_bot_m "图 12-27. 蜘蛛机器人材质的节点设置演变过程")中，我们用来连接节点的插槽都具有匹配的颜色——绿色对绿色，黄色对黄色。颜色必须匹配，因为不同的输出插槽传递不同类型的数据，而不同的输入插槽期望不同种类的数据。有些可能需要颜色信息，有些只需要单一的数值，其他的可能需要像纹理坐标或法线这样的向量信息。
- en: 'Node sockets are color coded to clarify what a node expects as input and what
    it creates as output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 节点插槽采用颜色编码，以便明确节点期望什么类型的输入以及它产生什么类型的输出：
- en: Blue sockets are for vector data. They can carry multiple values, such as UV
    coordinates (two dimensional) or position data (three dimensional).
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝色插槽用于向量数据。它们可以携带多个值，例如 UV 坐标（二维）或位置数据（三维）。
- en: Green sockets are for shaders. They carry all the information that determines
    how a material interacts with light.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色插槽用于着色器。它们传递所有决定材质如何与光交互的信息。
- en: Gray sockets are for value data. They carry a single numerical value.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灰色插槽用于数值数据。它们携带单一的数值。
- en: Yellow sockets are for color data. They carry RGBA values (red, green, blue,
    and alpha).
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄色插槽用于颜色数据。它们传递 RGBA 值（红色、绿色、蓝色和 alpha）。
- en: Certain types of sockets can be mixed and matched. For example, value sockets
    can be used as the input for color sockets, and Blender will simply treat the
    value data as a black-and-white image. Color sockets can also be attached to value
    inputs, and Blender will use the overall brightness of the color as a value input.
    However, shader sockets are more complex and can only be connected to other shader
    sockets.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的插槽可以混合使用。例如，数值插槽可以用作颜色插槽的输入，Blender 会将数值数据当作黑白图像处理。颜色插槽也可以连接到数值输入，Blender
    会使用颜色的整体亮度作为数值输入。然而，着色器插槽更加复杂，只能连接到其他着色器插槽。
- en: Roughness Map
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 粗糙度贴图
- en: In [Chapter 11](ch11.html "Chapter 11. Texture Painting"), I created a roughness
    map for the Spider Bot. In Cycles, I can connect this map to the roughness input
    for the Glossy BSDF node to control how blurry or sharp the reflections from the
    material should be. Dark areas will have sharp reflections, while light areas
    will have blurry ones (remember, this is the opposite of a hardness map).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.html "第11章. 纹理绘制")中，我为蜘蛛机器人创建了一个粗糙度贴图。在Cycles中，我可以将此贴图连接到Glossy
    BSDF节点的粗糙度输入，来控制材质反射的模糊度或清晰度。较暗区域的反射会比较清晰，而较亮区域的反射会比较模糊（记住，这与硬度贴图正好相反）。
- en: To accomplish this, I added a new Image Texture node, loaded in the roughness
    map, and connected its output to the Glossy nodes roughness input. As a result,
    bright areas of the texture had blurrier highlights, and dark areas had sharp,
    glossy highlights.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我添加了一个新的图像纹理节点，加载了粗糙度贴图，并将其输出连接到Glossy节点的粗糙度输入。因此，纹理的亮区域有了更模糊的高光，而暗区域则有了清晰的光滑高光。
- en: I also set the color space of the Image Texture to Non-Color Data from the drop-down
    menu in the Image node to indicate that this node was not being used as a color
    image, ensuring that Blender wouldn’t perform any gamma correction on this node.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将图像纹理的颜色空间从图像节点的下拉菜单中设置为Non-Color Data，以指示该节点不是用作颜色图像，确保Blender不会对该节点进行伽玛校正。
- en: Adjusting Inputs
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调整输入
- en: To get the most out of my textures without having to edit them in GIMP, I tweaked
    them using Blender’s nodes. For instance, to darken the diffuse colors a little
    and make the reflections from the glossy shader a little sharper, I added a Color
    Mix node, setting its type to Multiply, its factor to 0.5, and its second color
    input to black.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地利用我的纹理而无需在GIMP中编辑它们，我使用Blender的节点进行了调整。例如，为了稍微加深漫反射颜色，并使光滑着色器的反射稍微更锐利，我添加了一个Color
    Mix节点，将其类型设置为Multiply，因子设置为0.5，并将第二个颜色输入设置为黑色。
- en: When this Color Mix node is dragged over the connection between an Image Texture
    node and a Shader node, Blender adds it to the chain automatically. (The connection
    will be highlighted, and the new node will be inserted when you drop it.) I did
    this for the connection between the diffuse map and the Diffuse BSDF shader to
    darken the texture slightly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当将此Color Mix节点拖动到图像纹理节点和着色器节点之间的连接时，Blender会自动将其添加到链中。（连接将被高亮显示，当你松开它时，新的节点将被插入。）我对漫反射贴图和Diffuse
    BSDF着色器之间的连接做了这个操作，以稍微加深纹理。
- en: For the Glossy BSDF shader, in order to sharpen up the reflections, I needed
    to reduce the values of the input to the roughness shader. I accomplished this
    by adding a Math node between my roughness image Texture node and the roughness
    input of the glossy shader. I set the operation of the node to Multiply and set
    the second value of the node to 0.5\. This halved the values from the roughness
    image before passing them to the Glossy Shader node so that the overall roughness
    of the input to the shader was halved, giving sharper, more glossy reflections.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Glossy BSDF着色器，为了使反射更锐利，我需要减少输入到粗糙度着色器的值。我通过在粗糙度图像纹理节点和光滑着色器的粗糙度输入之间添加一个Math节点来实现这一点。我将节点的操作设置为Multiply，并将节点的第二个值设置为0.5。这样，粗糙度图像的值在传递到Glossy
    Shader节点之前被减半，从而使着色器输入的整体粗糙度减半，产生更锐利、更光滑的反射。
- en: For the shiny green areas of the mesh, I added some variance in color based
    on the angle of the surface to the camera. This gave the material a nice iridescent
    look. I accomplished this by adding a Geometry Input node (SHIFT-A▸Input▸Geometry)
    to provide the surface normal as an input and a Normal node to take the dot product
    of this input with the view direction. I then used this dot product output to
    modify the hue of my specular color map with a Hue Saturation Value node. By using
    the dot product output of the Normal node, I got a value (rather than a vector)
    that varied with the surface normal of the material. When this value was used
    to affect the hue input of the Hue Saturation Value node, the color of the material
    was subtly shifted as the surface of the material tilted away from the camera.
    You can see the node chain I used in [Figure 12-28](ch12.html#material_for_the_spider_botcomma_with_so
    "Figure 12-28. The material for the Spider Bot, with some nodes added to adjust
    the effects of the textures"). It’s a somewhat complex setup, but seeing it laid
    out and testing it for yourself should help you make sense of it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网格的闪亮绿色区域，我根据表面与相机之间的角度，加入了一些颜色变化。这使得材质呈现出一种漂亮的虹彩效果。我通过添加一个几何输入节点（SHIFT-A▸输入▸几何）来提供表面法线作为输入，并使用法线节点与视角方向进行点积运算。我然后用这个点积输出通过色调饱和度值节点来修改反射色彩贴图的色相。通过使用法线节点的点积输出，我得到了一个随材质表面法线变化的值（而非向量）。当这个值用于影响色调饱和度值节点的色相输入时，材质的颜色会随着表面从相机方向倾斜而微妙地发生变化。你可以在[图12-28](ch12.html#material_for_the_spider_botcomma_with_so
    "图12-28. 蜘蛛机器人材质，添加了一些节点来调整纹理效果")中看到我使用的节点链。这是一个相对复杂的设置，但通过查看它并亲自测试，你应该能理解它的原理。
- en: '![The material for the Spider Bot, with some nodes added to adjust the effects
    of the textures](httpatomoreillycomsourcenostarchimages1538784.png.jpg)Figure 12-28. The
    material for the Spider Bot, with some nodes added to adjust the effects of the
    textures'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![蜘蛛机器人材质，添加了一些节点来调整纹理效果](httpatomoreillycomsourcenostarchimages1538784.png.jpg)图12-28.
    蜘蛛机器人材质，添加了一些节点来调整纹理效果'
- en: Other Materials
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他材质
- en: 'I still needed to make a couple of materials for the Spider Bot: a shiny material
    for the eyes (I used a simple glossy shader set to dark gray, with a slight roughness
    of 0.05) and a material for the wires (I combined a glossy shader and a diffuse
    shader with a Shader Mix node). You can see these materials in [Figure 12-29](ch12.html#extra_spider_bot_materialsdot_top_the_ey
    "Figure 12-29. The extra Spider Bot materials. Top: The eyes, a simple glossy
    material. Bottom: The wires, a Diffuse BSDF shader with a rough Glossy BSDF shader
    mixed in.") and the finished Spider Bot material in [Figure 12-30](ch12.html#look_of_the_finished_spider_bot_material
    "Figure 12-30. The look of the finished Spider Bot material. See Chapter 13 and
    Chapter 14 for information on lighting and rendering.").'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然需要为蜘蛛机器人制作几个材质：眼睛的闪亮材质（我使用了一个简单的光泽着色器，设置为深灰色，并且稍微具有0.05的粗糙度）和电线材质（我将一个光泽着色器和一个漫反射着色器与着色器混合节点结合使用）。你可以在[图12-29](ch12.html#extra_spider_bot_materialsdot_top_the_ey
    "图12-29. 蜘蛛机器人附加材质。上图：眼睛，简单的光泽材质。下图：电线，混合了粗糙光泽BSDF着色器的漫反射BSDF着色器。")和完成的蜘蛛机器人材质在[图12-30](ch12.html#look_of_the_finished_spider_bot_material
    "图12-30. 完成的蜘蛛机器人材质效果。请参阅第13章和第14章，了解照明和渲染信息。")中看到这些材质。
- en: Materials for the Jungle Temple
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丛林寺庙的材质
- en: 'I used the Cycles renderer for the Jungle Temple scene as well. This scene
    needed a variety of materials: leaf materials for the foliage, generic materials
    for the rocks and soil, and a couple of unique materials for the objects I textured
    individually, such as the foreground stones and the statues.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我在丛林寺庙场景中同样使用了Cycles渲染器。这个场景需要多种材质：叶片材质用于植被，通用材质用于岩石和土壤，以及一些我单独贴图的物体的独特材质，比如前景的石块和雕像。
- en: '![The extra Spider Bot materials. Top: The eyes, a simple glossy material.
    Bottom: The wires, a Diffuse BSDF shader with a rough Glossy BSDF shader mixed
    in.](httpatomoreillycomsourcenostarchimages1538786.png.jpg)Figure 12-29. The extra
    Spider Bot materials. Top: The eyes, a simple glossy material. Bottom: The wires,
    a Diffuse BSDF shader with a rough Glossy BSDF shader mixed in.![The look of the
    finished Spider Bot material. See and for information on lighting and rendering.](httpatomoreillycomsourcenostarchimages1538788.png.jpg)Figure 12-30. The
    look of the finished Spider Bot material. See [Chapter 13](ch13.html "Chapter 13. Lighting")
    and [Chapter 14](ch14.html "Chapter 14. Rendering and Compositing") for information
    on lighting and rendering.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![额外的蜘蛛机器人材质。上：眼睛，简单的光泽材质。下：电线，一个漫反射BSDF着色器与粗糙的光泽BSDF着色器混合。](httpatomoreillycomsourcenostarchimages1538786.png.jpg)图12-29.
    额外的蜘蛛机器人材质。上：眼睛，简单的光泽材质。下：电线，一个漫反射BSDF着色器与粗糙的光泽BSDF着色器混合。[完成的蜘蛛机器人材质外观。有关照明和渲染的详细信息，请参见第13章](ch13.html
    "第13章. 照明")和[第14章](ch14.html "第14章. 渲染与合成")。](httpatomoreillycomsourcenostarchimages1538788.png.jpg)图12-30.
    完成的蜘蛛机器人材质外观。有关照明和渲染的详细信息，请参见[第13章](ch13.html "第13章. 照明")和[第14章](ch14.html "第14章.
    渲染与合成")。'
- en: Ground
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地面
- en: The ground material was probably the simplest to create. It’s simply a mix of
    a Diffuse and a Glossy BSDF shader, using my painted textures as inputs for the
    colors. Because I felt my original textures made the material look a little light,
    I used a Gamma node to darken them slightly without losing too much contrast (see
    [Figure 12-31](ch12.html#soil_for_the_jungle_temple_scene "Figure 12-31. The soil
    for the Jungle Temple scene")).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 地面材质可能是最简单的创建过程。它只是将漫反射BSDF着色器和光泽BSDF着色器混合在一起，使用我绘制的纹理作为颜色输入。因为我觉得原始纹理使得材质显得有些偏浅，所以我使用Gamma节点稍微加深了它们的颜色，而不会丧失太多对比度（见[图12-31](ch12.html#soil_for_the_jungle_temple_scene
    "图12-31. 丛林神庙场景的土壤")）。
- en: Stone Material
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 石材材质
- en: 'For my stone material, I wanted to combine the two different stone textures
    I made in [Chapter 11](ch11.html "Chapter 11. Texture Painting"), allowing each
    to show through in different areas, to give a bit of variation in the look of
    the material. To do so, I started by creating a basic shader that mixed a diffuse
    and glossy shader together using a Shader Mix node. I controlled the amount of
    mixing with a Layer Weight node, using its blend output. The Layer Weight node
    blends from 0 to 1 depending on the normals of a mesh: Surfaces facing the camera
    get low values, and ones facing away get high values (the exact values depend
    on the output used—facing or fresnel). Using the Facing output of this node to
    control the blending between the glossy and diffuse shaders produced some shiny
    highlights around the edges of objects with a more diffuse look when viewed straight
    on, as shown in section 1 of [Figure 12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "Figure 12-32. My rock material setup is somewhat complex. A Layer Weight node
    1 is used to blend between the specular and diffuse shaders. Two Voronoi textures
    added together 2 control the mixing of my rock textures (two for diffuse colors,
    two for specular). The textures themselves are scaled using some Map nodes 3,
    and the specular colors are also used for displacement 4.").'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的石材材质，我希望将我在[第11章](ch11.html "第11章. 纹理绘制")中制作的两种不同的石材纹理结合起来，让每种纹理在不同的区域显示出来，以便在材质的外观上增加一些变化。为此，我首先创建了一个基础的着色器，通过使用Shader
    Mix节点将漫反射着色器和光泽着色器混合在一起。我通过Layer Weight节点控制混合的量，使用它的blend输出。Layer Weight节点根据网格的法线从0到1进行混合：朝向相机的表面获得低值，而背离相机的表面获得高值（具体值取决于所使用的输出——朝向或菲涅尔）。使用该节点的Facing输出控制光泽和漫反射着色器之间的混合，产生了物体边缘的光亮高光，同时当从正面查看时，物体呈现出更漫反射的外观，如[图12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "图12-32. 我的石材材质设置有些复杂。使用Layer Weight节点1在镜面反射和漫反射着色器之间进行混合。通过将两个Voronoi纹理叠加2，控制我的石材纹理混合（两个用于漫反射颜色，两个用于镜面反射）。纹理本身使用一些Map节点3进行缩放，镜面反射颜色也用于位移4。")的第1节所示。
- en: To create a patchy distribution for the different stone textures, I combined
    a couple of Voronoi Texture nodes with different scales and then used these to
    control the mixing between the different textures for the rocks for both the specular
    and diffuse maps, as shown in [Figure 12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "Figure 12-32. My rock material setup is somewhat complex. A Layer Weight node
    1 is used to blend between the specular and diffuse shaders. Two Voronoi textures
    added together 2 control the mixing of my rock textures (two for diffuse colors,
    two for specular). The textures themselves are scaled using some Map nodes 3,
    and the specular colors are also used for displacement 4.") 2. I also used some
    Map nodes to scale up the texture mappings for my rock textures to make them match
    one another and fit the scale of the scene, which you can see in [Figure 12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "Figure 12-32. My rock material setup is somewhat complex. A Layer Weight node
    1 is used to blend between the specular and diffuse shaders. Two Voronoi textures
    added together 2 control the mixing of my rock textures (two for diffuse colors,
    two for specular). The textures themselves are scaled using some Map nodes 3,
    and the specular colors are also used for displacement 4.") 3.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为不同的石材纹理创建一个斑驳的分布，我结合了几个不同尺度的Voronoi纹理节点，然后用这些节点来控制岩石的不同纹理之间的混合，包括镜面和漫反射贴图，如[图12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "图12-32。我的岩石材质设置有点复杂。一个Layer Weight节点1用于混合镜面和漫反射着色器。两个Voronoi纹理加在一起2控制岩石纹理的混合（两个用于漫反射颜色，两个用于镜面反射）。纹理本身通过一些Map节点3进行缩放，镜面颜色也用于位移4。")所示。2
    我还使用了一些Map节点来放大我的岩石纹理的贴图，使它们相互匹配并适应场景的尺度，你可以在[图12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "图12-32。我的岩石材质设置有点复杂。一个Layer Weight节点1用于混合镜面和漫反射着色器。两个Voronoi纹理加在一起2控制岩石纹理的混合（两个用于漫反射颜色，两个用于镜面反射）。纹理本身通过一些Map节点3进行缩放，镜面颜色也用于位移4。")
    3中看到。
- en: '![The soil for the Jungle Temple scene](httpatomoreillycomsourcenostarchimages1538790.png.jpg)Figure 12-31. The
    soil for the Jungle Temple scene![My rock material setup is somewhat complex.
    A Layer Weight node 1 is used to blend between the specular and diffuse shaders.
    Two Voronoi textures added together 2 control the mixing of my rock textures (two
    for diffuse colors, two for specular). The textures themselves are scaled using
    some Map nodes 3, and the specular colors are also used for displacement 4.](httpatomoreillycomsourcenostarchimages1538792.png.jpg)Figure 12-32. My
    rock material setup is somewhat complex. A Layer Weight node 1 is used to blend
    between the specular and diffuse shaders. Two Voronoi textures added together
    2 control the mixing of my rock textures (two for diffuse colors, two for specular).
    The textures themselves are scaled using some Map nodes 3, and the specular colors
    are also used for displacement 4.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![丛林神庙场景的土壤](httpatomoreillycomsourcenostarchimages1538790.png.jpg)图12-31。丛林神庙场景的土壤![我的岩石材质设置有点复杂。一个Layer
    Weight节点1用于混合镜面和漫反射着色器。两个Voronoi纹理加在一起2控制岩石纹理的混合（两个用于漫反射颜色，两个用于镜面反射）。纹理本身通过一些Map节点3进行缩放，镜面颜色也用于位移4。](httpatomoreillycomsourcenostarchimages1538792.png.jpg)图12-32。我的岩石材质设置有点复杂。一个Layer
    Weight节点1用于混合镜面和漫反射着色器。两个Voronoi纹理加在一起2控制岩石纹理的混合（两个用于漫反射颜色，两个用于镜面反射）。纹理本身通过一些Map节点3进行缩放，镜面颜色也用于位移4。'
- en: Displacement
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 位移
- en: Cycles currently supports the use of a black-and-white input (or converting
    an RGB input to just a single value) to mimic the effect of small bumps in the
    surface of a material. This is often referred to as *bump mapping* in other render
    engines. Cycles does not yet support normal maps.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Cycles目前支持使用黑白输入（或将RGB输入转换为单一值）来模拟材质表面小凸起的效果。这通常在其他渲染引擎中被称为*凹凸贴图*。Cycles目前尚不支持法线贴图。
- en: To add a bit more of a textured look to the surface of my rocks, I used the
    specular colors (the two mixed together) as the displacement input for the Material
    Output node, though I used a Multiply node to scale down their values to reduce
    the effect, as shown in [Figure 12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "Figure 12-32. My rock material setup is somewhat complex. A Layer Weight node
    1 is used to blend between the specular and diffuse shaders. Two Voronoi textures
    added together 2 control the mixing of my rock textures (two for diffuse colors,
    two for specular). The textures themselves are scaled using some Map nodes 3,
    and the specular colors are also used for displacement 4.") 4. The finished rock
    material is shown in [Figure 12-33](ch12.html#rock_material "Figure 12-33. The
    rock material").
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我的岩石表面增加一些纹理效果，我将高光颜色（将两者混合）作为位移输入连接到材质输出节点，尽管我使用了乘法节点来缩小它们的值，以减少效果，如[图12-32](ch12.html#my_rock_material_setup_is_somewhat_compl
    "图12-32。我的岩石材质设置有些复杂。一个Layer Weight节点1用于在高光和漫反射着色器之间进行混合。两个Voronoi纹理加在一起2控制我岩石纹理的混合（两个用于漫反射颜色，两个用于高光）。纹理本身通过一些Map节点3进行缩放，高光颜色也用于位移4。")
    4所示。最终的岩石材质如[图12-33](ch12.html#rock_material "图12-33。岩石材质")所示。
- en: Statue
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 雕像
- en: The statue material is basically just a copy of the generic stone material,
    except that it uses the textures I painted for the statue. To create it, I applied
    the stone material to the statue and then clicked the + icon in the material selector
    drop-down menu to make a new material using the current one. Next, I deleted (**X**)
    the extraneous nodes from the material in the Node editor and replaced them with
    my textures for the statue (see [Figure 12-34](ch12.html#statue_material_is_very_similar_to_the_r
    "Figure 12-34. The statue material is very similar to the rock material, except
    that it uses its own textures.")).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 雕像材质基本上只是通用石材材质的一个副本，不同之处在于它使用了我为雕像绘制的纹理。为了创建它，我将石材材质应用到雕像上，然后点击材质选择器下拉菜单中的+图标，使用当前材质创建一个新材质。接下来，我在节点编辑器中删除（**X**）了材质中的多余节点，并用我的雕像纹理替换它们（见[图12-34](ch12.html#statue_material_is_very_similar_to_the_r
    "图12-34。雕像材质与岩石材质非常相似，不同之处在于它使用了自己的纹理。")）。
- en: '![The rock material](httpatomoreillycomsourcenostarchimages1538794.png.jpg)Figure 12-33. The
    rock material![The statue material is very similar to the rock material, except
    that it uses its own textures.](httpatomoreillycomsourcenostarchimages1538796.png.jpg)Figure 12-34. The
    statue material is very similar to the rock material, except that it uses its
    own textures.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![岩石材质](httpatomoreillycomsourcenostarchimages1538794.png.jpg)图12-33。岩石材质！[雕像材质与岩石材质非常相似，不同之处在于它使用了自己的纹理。](httpatomoreillycomsourcenostarchimages1538796.png.jpg)图12-34。雕像材质与岩石材质非常相似，不同之处在于它使用了自己的纹理。'
- en: Leaves
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 叶子
- en: For the leaves, I wanted a translucent material so that leaves illuminated on
    one side would appear bright when viewed from the unlit side as well. To achieve
    this, I mixed a Translucent BSDF shader with a Diffuse BSDF shader and mixed in
    specular highlights on top to make the leaves shiny. The leaf meshes had to be
    transparent in order to make the areas of the mesh that weren’t part of the leaves
    invisible. I accomplished this by mixing the result of all the nodes so far with
    a Transparent BSDF shader, using the alpha map from [Chapter 11](ch11.html "Chapter 11. Texture
    Painting") to control the mixing (see [Figure 12-35](ch12.html#material_for_the_ivygen_leavesdot_the_ot
    "Figure 12-35. The material for the IvyGen leaves. The other leaves, which share
    textures and the same material, were created in the same way.")).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于叶子，我想要一个半透明材质，这样当从未照亮的一侧看时，叶子也能呈现出明亮的效果。为实现这一点，我将半透明BSDF着色器与漫反射BSDF着色器混合，并在上面混入高光以使叶子发亮。叶片网格必须是透明的，以使网格中不是叶子的区域不可见。我通过将目前为止所有节点的结果与透明BSDF着色器混合来完成这一点，使用[第11章](ch11.html
    "第11章。纹理绘制")的alpha贴图来控制混合（见[图12-35](ch12.html#material_for_the_ivygen_leavesdot_the_ot
    "图12-35。IvyGen叶子的材质。其他叶子与此共享纹理和材质，以相同方式创建。")）。
- en: Foreground Rocks and Soil
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前景岩石和土壤
- en: In [Chapter 11](ch11.html "Chapter 11. Texture Painting"), I created a hand-painted
    texture for the foreground objects from the camera’s perspective. To use this,
    I needed to create a unique material for these objects. I began by duplicating
    the material I created for the statue and then replacing its texture inputs with
    the ones I created for the foreground objects.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 11 章](ch11.html "第 11 章. 纹理绘制")中，我为从相机角度看过去的前景物体创建了一个手绘纹理。为了使用这个纹理，我需要为这些物体创建一个独特的材质。我首先复制了为雕像创建的材质，然后将它的纹理输入替换成我为前景物体创建的纹理。
- en: '![The material for the IvyGen leaves. The other leaves, which share textures
    and the same material, were created in the same way.](httpatomoreillycomsourcenostarchimages1538798.png.jpg)Figure 12-35. The
    material for the IvyGen leaves. The other leaves, which share textures and the
    same material, were created in the same way.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![IvyGen 叶子的材质。其他叶子共享纹理和相同的材质，以相同的方式创建。](httpatomoreillycomsourcenostarchimages1538798.png.jpg)
    图 12-35. IvyGen 叶子的材质。其他叶子共享纹理和相同的材质，以相同的方式创建。'
- en: To map the textures to the models correctly, I snapped the 3D Viewport to the
    camera view (NUMPAD 0) and UV unwrapped the foreground objects using the Unwrap▸Project
    from View operator for each object to which the material was applied. This projected
    the objects’ UV coordinates to match the camera’s perspective and so allowed me
    to use the UV coordinates as the texture coordinates. The material nodes for this
    material can be seen in [Figure 12-36](ch12.html#material_for_the_foreground_rocks_and_so
    "Figure 12-36. The material for the foreground rocks and soil").
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地将纹理映射到模型上，我将 3D 视口切换到相机视图（NUMPAD 0），并使用 Unwrap▸从视图投影操作对每个应用材质的前景物体进行 UV
    展开。这样，物体的 UV 坐标就会投影到与相机视角匹配的位置，从而使我能够将 UV 坐标作为纹理坐标。该材质的节点可以在 [图 12-36](ch12.html#material_for_the_foreground_rocks_and_so
    "图 12-36. 前景岩石和土壤的材质")中看到。
- en: Puddles
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 水坑
- en: For the puddles, I needed a water material that would let some light penetrate
    the surface and show some reflections. The glass material alone would do the job
    (using an IOR value of 1.33, equal to that of water), but to get a bit more control
    over how much light would penetrate the surface and the strength of the reflections,
    I blended Transparent, Glass, and Glossy BSDF shaders. I mixed in the glossy shader
    using a Layer Weight node connected to the Mix node to get a bit of extra reflection
    at low viewing angles.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于水坑，我需要一个水材质，能够让一些光线穿透表面并显示反射。单独使用玻璃材质就可以完成这项工作（使用折射率 1.33，与水相同），但为了更好地控制光线穿透表面的程度以及反射的强度，我将透明、玻璃和光泽
    BSDF 着色器混合在一起。我使用了光泽着色器，通过将层权重节点连接到混合节点，以便在低视角下获得额外的反射效果。
- en: '![The material for the foreground rocks and soil](httpatomoreillycomsourcenostarchimages1538800.png.jpg)Figure 12-36. The
    material for the foreground rocks and soil'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![前景岩石和土壤的材质](httpatomoreillycomsourcenostarchimages1538800.png.jpg) 图 12-36.
    前景岩石和土壤的材质'
- en: To produce ripples in the surface of the water, I created a Waves Texture node
    (SHIFT-A▸Texture▸Wave Texture) and connected it to the displacement socket on
    the Material Output node to create some distortion in the water’s surface. By
    default, the Waves node gives straight, repeating waves, but by setting the wave
    type to Rings and increasing the distortion value, you can get some nice ripples
    (see [Figure 12-37](ch12.html#water_materialcomma_created_by_mixing_tr "Figure 12-37. The
    water material, created by mixing Transparent, Glass, and Glossy BSDF shaders
    and using a wave texture to provide some displacement")).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在水面上生成波纹，我创建了一个波纹纹理节点（SHIFT-A▸纹理▸波纹纹理），并将其连接到材质输出节点的位移插槽，以在水面上创建一些扭曲效果。默认情况下，波纹节点产生直线型、重复的波浪，但通过将波浪类型设置为圆环并增加扭曲值，可以得到一些漂亮的波纹效果（见
    [图 12-37](ch12.html#water_materialcomma_created_by_mixing_tr "图 12-37. 水材质，通过混合透明、玻璃和光泽
    BSDF 着色器并使用波纹纹理提供一些位移")）。
- en: '![The water material, created by mixing Transparent, Glass, and Glossy BSDF
    shaders and using a wave texture to provide some displacement](httpatomoreillycomsourcenostarchimages1538802.png.jpg)Figure 12-37. The
    water material, created by mixing Transparent, Glass, and Glossy BSDF shaders
    and using a wave texture to provide some displacement'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![水材质，通过混合透明、玻璃和光泽 BSDF 着色器，并使用波纹纹理提供一些位移](httpatomoreillycomsourcenostarchimages1538802.png.jpg)
    图 12-37. 水材质，通过混合透明、玻璃和光泽 BSDF 着色器，并使用波纹纹理提供一些位移'
- en: General Tips for Creating Materials
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建材质的一般技巧
- en: 'Here are some general principles to keep in mind when creating materials in
    your projects. Chiefly, they involve paying attention to the real-world equivalents
    of the materials you are trying to replicate and constructing your material accordingly:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目材质时，有一些一般性原则需要牢记。主要是要关注你尝试复制的材质在现实世界中的表现，并据此构建你的材质：
- en: '****Keep reflection amounts sane.**** Make sure that the total amount of light
    your object is reflecting is sensible. When using the Add node to combine shaders
    in Cycles, it’s possible to create a material that reflects more light than it
    would realistically receive in the first place by adding too many shaders together.
    Similarly, in Blender Internal, keep in mind that the diffuse and specular reflection
    amounts (plus the light absorbed by the object) should roughly add up to 1—for
    example, a diffuse intensity of 0.6 and a specular intensity of 0.3, leaving some
    absorbed light to spare. Otherwise, your material will look unrealistically bright
    next to other materials.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '****保持反射量的合理性。**** 确保你的物体反射的总光量是合理的。在 Cycles 中使用 Add 节点组合着色器时，可能会通过添加过多的着色器，导致一个材质反射的光比它实际接收到的光更多。同样，在
    Blender Internal 中，记得扩散和镜面反射量（加上物体吸收的光）应该大致加起来为1——例如，扩散强度为0.6，镜面强度为0.3，剩下的则是吸收的光。否则，你的材质会显得不真实地明亮，与其他材质不协调。'
- en: '****There are no perfect materials.**** No material reflects 100 percent of
    all light, and no material absorbs 100 percent either. Try not to make any materials
    that are completely dark or completely white (unless you are doing so for a good
    reason).'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '****没有完美的材质。**** 没有材质能够反射所有光线的100%，也没有材质能够完全吸收所有光线。尽量避免制作完全黑色或完全白色的材质（除非你有充分的理由这样做）。'
- en: '****Use saturation in moderation.**** The color of a material is rarely 100
    percent saturated, even for brightly colored materials like plastics. Most everyday
    colors are less than 85 percent saturated, so keep the colors of your materials
    in a sensible range to make them believable.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '****适度使用饱和度。**** 即使是像塑料这样颜色鲜艳的材质，它的颜色也很少会达到100%饱和。大多数日常颜色的饱和度都低于85%，因此，保持材质的颜色在合理范围内，使其看起来更可信。'
- en: '****Keep it simple.**** Try to avoid making complex materials to ensure shorter
    render times. For example, in Blender Internal, try to use ray-traced reflections
    only when really needed.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '****保持简单。**** 尽量避免制作复杂的材质，以确保较短的渲染时间。例如，在 Blender Internal 中，只有在确实需要时，才使用光线追踪反射。'
- en: '****Supplement materials with procedural textures.**** Blender’s built-in procedural
    textures are a great way to supplement materials by using them as bump maps or
    to blend other textures. Doing so can add a lot of variation to your materials
    while preventing you from having to laboriously hand-paint textures.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '****用程序纹理补充材质。**** Blender 内置的程序纹理是通过将它们用作凹凸贴图或融合其他纹理来补充材质的好方法。这样做可以为你的材质增加很多变化，同时避免你必须费力地手工绘制纹理。'
- en: In Review
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查中
- en: In this chapter, we started with a look at Blender’s options for creating materials,
    both for the Blender Internal renderer and Cycles. Because these two render engines
    require different approaches when creating materials, we explored their different
    options and requirements. Then we moved on to creating materials for the three
    projects. For the Bat Creature, I created Blender Internal–compatible materials
    for the body, fur, eyes, nails, and teeth. For the body, I created a material
    with subsurface scattering to mimic realistic skin, and for the fur, I covered
    the different options for fur materials and rendering. I used Blender’s strand
    shader to render the fur and examined ways to apply textures to fur.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始时，我们先看了 Blender 在创建材质时的选项，包括 Blender Internal 渲染器和 Cycles 渲染器。由于这两种渲染引擎在创建材质时需要不同的方法，我们探讨了它们各自的选项和要求。然后，我们开始为三个项目创建材质。对于
    Bat Creature，我为身体、毛发、眼睛、指甲和牙齿创建了兼容 Blender Internal 的材质。对于身体，我创建了一个带有次表面散射的材质，以模仿真实的皮肤；对于毛发，我介绍了毛发材质和渲染的不同选项。我使用了
    Blender 的发丝着色器来渲染毛发，并探讨了如何将纹理应用于毛发。
- en: For the Spider Bot and the Jungle Temple scene, I created materials for rendering
    with Cycles, using Blender’s Node editor to create a range of different materials
    by combining Shader nodes and using textures to supply their inputs.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Spider Bot 和 Jungle Temple 场景，我为使用 Cycles 渲染的材质创建了材质，使用 Blender 的节点编辑器通过组合着色器节点并使用纹理来提供它们的输入，创建了多种不同的材质。
- en: The projects are now ready to be lit and rendered. In [Chapter 13](ch13.html
    "Chapter 13. Lighting"), you’ll learn about different lighting setups and how
    to use lighting in both Blender Internal and Cycles.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目现在已经准备好进行照明和渲染。在[第13章](ch13.html "第13章. 照明")，你将学习不同的照明设置以及如何在Blender Internal和Cycles中使用照明。
