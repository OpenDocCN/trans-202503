["```\n$ **bin/rake db:migrate**\n```", "```\n$ **bin/rake test test/models/user_test.rb**\n```", "```\nRun options: --seed 46676\n\n# Running:\n\nFinished in 0.001716s, 0.0000 runs/s, 0.0000 assertions/s.\n\n0 runs, 0 assertions, 0 failures, 0 errors, 0 skips\n```", "```\n➊ require 'test_helper'\n\n➋ class UserTest < ActiveSupport::TestCase\n➌   # test \"the truth\" do\n    # assert true\n    # end\n  end\n```", "```\n➊ test \"the truth\" do\n➋   assert true\n  end\n```", "```\n  test \"saves with valid attributes\" do\n➊   user = User.new(\n      email: \"user@example.com\",\n      password: \"password\",\n      password_confirmation: \"password\"\n     )\n➋    assert user.save\n   end\n```", "```\n  $ **bin/rake test test/models/user_test.rb**\n  Run options: --seed 40521\n\n  # Running:\n➊.\n\n  Finished in 0.067091s, 14.9051 tests/s, 14.9051 assertions/s.\n\n➋ 1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\n```", "```\n➊ user1:\n➋   email: user1@example.com\n➌   password_digest: <%= BCrypt::Password.create \"password\" %>\n\n  user2:\n     email: user2@example.com\n     password_digest: <%= BCrypt::Password.create \"password\" %>\n```", "```\n    test \"validates email presence\" do\n➊     @user1 = users(:user1)\n➋     @user1.email = nila\n\n➌     assert_not @user1.valid?\n    end\n```", "```\n    test \"validates email uniqueness\" do\n➊     @user1 = users(:user1)\n      @user2 = users(:user2)\n\n➋     @user1.email = @user2.email\n\n➌     asseart_not @user1.valid?\n    end\n```", "```\npost1:\n  title: Title One\n  body: Body One\n  type: TextPost\n  user: user1\n\npost2:\n  title: Title Two\n  url: http://i.imgur.com/Y7syDEa.jpg\n  type: ImagePost\n  user: user1\n\npost3:\n  title: Title Three\n  body: Body Three\n  type: TextPost\n  user: user2\n```", "```\n   test \"should follow leader\" do\n➊    @user1 = users(:user1)\n     @user2 = users(:user2)\n\n➋    @user1.follow!(@user2)\n\n➌    assert_equal 1, @user1.leaders.count\n     assert_equal 1, @user2.followers.count\n   end\n```", "```\ntest \"following? should be true\" do\n  @user1 = users(:user1)\n  @user2 = users(:user2)\n\n  @user1.follow!(@user2)\n\n  assert @user1.following?(@user2)\nend\n```", "```\n  class UserTest < ActiveSupport::TestCase\n➊   def setup\n      @user1 = users(:user1)\n      @user2 = users(:user2)\n    end\n\n    --*snip*--\n➋   test \"following? should be true\" do\n      @user1.follow!(@user2)\n\n      assert @user1.following?(@user2)\n    end\n  end\n```", "```\nclass Post < ActiveRecord::Base\n  belongs_to :user\n  has_many :comments, dependent: :destroy\n\n  validates :user_id, presence: true\n  validates :type, presence: true\nend\n```", "```\n  require 'test_helper'\n\n  class PostTest < ActiveSupport::TestCase\n➊   def setup\n      @post1 = posts(:post1)\n      @post2 = posts(:post2)\n    end\n\n➋   test \"validates user_id presence\" do\n      @post1.user_id = nil\n\n      assert_not @post1.valid?\n   end\nend\n```", "```\n$ **bin/rake test:models**\nRun options: --seed 47072\n\n# Running:\n\n......\n\nFinished in 0.234202s, 25.6189 runs/s, 29.8887 assertions/s.\n\n6 runs, 7 assertions, 0 failures, 0 errors, 0 skips\n```", "```\n  test \"TextPost requires body\" do\n➊   assert_instance_of TextPost, @post1\n\n➋   @post1.body = nil\n\n➌   assert_not @post1.valid?\n  end\n\n  test \"ImagePost requires url\" do\n    assert_instance_of ImagePost, @post2\n\n    @post2.url = nil\n\n    assert_not @post2.valid?\n  end\n```", "```\n   test \"should get new with new user\" do\n➊    get :new\n\n➋    user = assigns(:user)\n\n➌   assert user.new_record?\n    assert_response :success\n  end\n```", "```\n   test \"should create user\" do\n➊    params = {\n       user: {\n         email: \"user@example.com\",\n         password: \"password\",\n         password_confirmation: \"password\"\n       }\n      }\n\n➋     post :create, params\n➌     assert_redirected_to root_url\n    end\n```", "```\n$ **bin/rake test:controllers**\n```", "```\n    test \"redirects anonymous users to login\" do\n➊     get :index\n➋     assert_redirected_to login_url\n    end\n\n    test \"get index for authenticated users\" do\n➌     user1 = users(:user1)\n\n➍     get :index, {}, { user_id: user1.id }\n      assert_response :success\n    end\n```", "```\n$ **bin/rails g integration_test user_flow**\n```", "```\n  require 'test_helper'\n\n  class UserFlowTest < ActionDispatch::IntegrationTest\n\n    test \"user login, browse, and logout\" do\n      user = users(:user1)\n\n➊     get \"/login\"\na\n      assert_response :success\n\n➋     post_via_redirect \"/sessions\",\n        email: user.email,\n        password: \"password\"\n\n      assert_equal \"/\", path\n\n➌     get_via_redirect \"/logout\"\n\n      assert_equal \"/login\", path\n    end\n end\n```", "```\n$ **bin/rake test test/integration/user_flow_test.rb**\nRun options: --seed 51886\n\n# Running:\n\n.\n\nFinished in 1.049118s, 0.9532 runs/s, 2.8595 assertions/s.\n\n1 runs, 3 assertions, 0 failures, 0 errors, 0 skips\n```", "```\ntest \"should show user\" do\n  user = users(:user1)\n\n  get :show, id: user.id\n  assert assigns(:user)\n  assert_response :success\nend\n```", "```\n$ **bin/rake test test/controllers/users_controller_test.rb**\n```", "```\nclass UsersController < ApplicationController\n\n**def show**\n  **@user = User.find(params[:id])**\n  **@posts = @user.posts.order(\"created_at DESC\")**\n  **end**\n\n--*snip*--\n```", "```\n<div class=\"page-header\">\n  <h1>User</h1>\n</div>\n\n<p class=\"lead\"><%= @user.name %></p>\n\n<h2>Posts</h2>\n\n<%= render @posts %>\n\n<%= link_to \"Home\", root_path,\n      class: \"btn btn-default\" %>\n```", "```\n   test \"should follow user\" do\n➊    user1 = users(:user1)\n     user2 = users(:user2)\n\n➋    get :follow, { id: user2.id }, { user_id: user1.id }\n➌    assert user1.following? user2\n     assert_redirected_to user_url(user2)\n   end\n```", "```\n   class UsersController < ApplicationController\n     --*snip*--\n\n     **def follow**\n➊    **@user = User.find(params[:id])**\n➋    **if current_user.follow!(@user)**\n➌      **redirect_to @user, notice: \"Follow successful!\"**\n     **else**\n       **redirect_to @user, alert: \"Error following.\"**\n     **end**\n   **end**\n\n   private\n   --*snip*--\n```", "```\nRails.application.routes.draw do\n  --*snip*-\n\n  get 'signup', to: 'users#new', as: 'signup'\n  **get 'follow/:id', to: 'users#follow', as: 'follow_user'**\n\n  --*snip*-\nend\n```", "```\n--*snip*-\n<p class=\"lead\"><%= @user.name %></p>\n\n**<%= link_to \"Follow\", follow_user_path(@user),**\n      **class: \"btn btn-default\" %>**\n\n<h2>Posts</h2>\n--*snip*--\n```", "```\n   test \"get new with new post\" do\n➊    user1 = users(:user1)\n\n➋    get :new, {}, { user_id: user1.id }\n     text_post = assigns(:text_post)\n\n     assert text_post.new_record?\n     assert_response :success\n   end\n```", "```\n$ **bin/rake test test/controllers/text_posts_controller_test.rb**\n```", "```\nclass TextPostsController < ApplicationController\n  **def new**\n    **@text_post = TextPost.new**\n  **end**\nend\n```", "```\n<div class=\"page-header\">\n  <h1>New Text Post</h1>\n</div>\n\n<%= render 'form' %>\n```", "```\n<%= form_for @text_post do |f| %> ➊\n  <div class=\"form-group\">\n    <%= f.label :title %>\n    <%= f.text_field :title, class: \"form-control\" %> ➋\n  </div>\n  <div class=\"form-group\">\n    <%= f.label :body %>\n    <%= f.text_area :body, class: \"form-control\" %> ➌\n  </div>\n\n  <%= f.submit class: \"btn btn-primary\" %> ➍\n  <%= link_to 'Cancel', :back, class: \"btn btn-default\" %>\n<% end %>\n```", "```\n<p>\n  <%= link_to \"New Text Post\", new_text_post_path,\n        class: \"btn btn-default\" %>\n</p>\n```", "```\n    test \"should create post\" do\n\n➊     user = users(:user1)\n➋     params = {\n        text_post: {\n          title: \"Test Title\",\n          body: \"Test Body\"\n        }\n      }\n\n➌     post :create, params, { user_id: user.id }\n\n      text_post = assigns(:text_post)\n\n➍     assert text_post.persisted?\n\n      assert_redirected_to post_url(text_post)\n    end\n```", "```\n   class TextPostsController < ApplicationController\n   --*snip*--\n\n   **def create**\n\n     **@text_post =**\n➊      **current_user.text_posts.build(text_post_params)**\n       **if @text_post.save**\n➋       **redirect_to post_path(@text_post),**\n                       **notice: \"Post created!\"**\n        **else**\n➌         **render :new, alert: \"Error creating post.\"**\n        **end**\n      **end**\n    end\n```", "```\n    class TextPostsController < ApplicationController\n    --*snip*--\n    **private**\n\n    **def text_post_params**\n➊     **params.require(:text_post).permit(:title, :body)**\n    **end**\n  end\n```", "```\ntest \"follow should require login\" do\n  user = users(:user1)\n\n  get :follow, { id: user.id }\n\n  assert_redirected_to login_url\nend\n```", "```\ntest \"get new with new post\" do\n  user1 = users(:user1)\n\n  get :new, {}, { user_id: user1.id }\n\n  image_post = assigns(:image_post)\n\n  assert image_post.new_record?\n  assert_response :success\nend\n\ntest \"should create post\" do\n  user = users(:user1)\n  params = {\n    image_post: {\n      title: \"Test Title\",\n      url: \"http://i.imgur.com/Y7syDEa.jpg\"\n    }\n  }\n\n  post :create, params, { user_id: user.id }\n\n  image_post = assigns(:image_post)\n\n  assert image_post.persisted?\n  assert_redirected_to post_url(image_post)\nend\n```"]