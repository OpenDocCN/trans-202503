["```\ndouble sin(double x);\ndouble cos(double x);\n```", "```\nscanf(\"%x\", &an_int);\n```", "```\n  // Add two integers using global variables.\n\n  #include <stdio.h>\n  #include \"add_two_global.h\"\n\n➊ int x = 123, y = 456, z;    // Define global variables\n\n  int main(void)\n  {\n      add_two();\n      printf(\"%i + %i = %i\\n\", x, y, z);\n\n      return 0;\n  }\n```", "```\n        .arch armv8-a\n        .file   \"sum_ints_global.c\"\n     ➊ .text\n        .global x\n     ➋ .data                     /// Data segment\n        .align  2\n        .type   x, %object\n        .size   x, 4\nx:\n     ➌ .word   123               /// Initialize\n        .global y\n        .align  2\n        .type   y, %object\n        .size   y, 4\ny:\n        .word   456\n        .global z\n     ➍ .bss                      /// .bss section\n        .align  2\n        .type   z, %object\n     ➎ .size   z, 4\nz:\n     ➏ .zero   4                 /// Could use .skip\n        .section        .rodata\n        .align  3\n.LC0:\n        .string \"%i + %i = %i\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     x29, x30, [sp, -16]!\n        mov     x29, sp\n        bl      add_two\n     ➐ adrp    x0, x             /// Address  defined\n        add     x0, x0, :lo12:x   ///   in this file\n        ldr     w1, [x0]\n        adrp    x0, y\n        add     x0, x0, :lo12:y\n        ldr     w2, [x0]\n        adrp    x0, z\n        add     x0, x0, :lo12:z\n        ldr     w0, [x0]\n        mov     w3, w0\n        adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0\n        bl      printf\n        mov     w0, 0\n        ldp     x29, x30, [sp], 16\n        ret\n        .size   main, .-main\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n   // Add two global integers.\n\n➊ #ifndef ADD_TWO_GLOBAL_H\n➋ #define ADD_TWO_GLOBAL_H\n➌ void add_two(void);\n   #endif\n```", "```\n   // Add two global integers.\n\n➊ #include \"add_two_global.h\"\n\n➋ extern int x, y, z;\n\n   void add_two(void)\n   {\n       z = x + y;\n   }\n```", "```\n        .arch armv8-a\n        .file   \"add_two_global.c\"\n        .text\n        .align  2\n        .global add_two\n        .type   add_two, %function\nadd_two:\n     ➊ adrp    x0, :got:x              /// Global offset table page\n     ➋ ldr     x0, [x0, :got_lo12:x]   /// Address of x\n        ldr     w1, [x0]\n        adrp    x0, :got:y\n        ldr     x0, [x0, :got_lo12:y]\n        ldr     w0, [x0]\n        add     w1, w1, w0\n        adrp    x0, :got:z\n        ldr     x0, [x0, :got_lo12:z]\n        str     w1, [x0]\n     ➌ nop\n        ret\n        .size   add_two, .-add_two\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Add two integers using local variables.\n\n#include <stdio.h>\n#include \"add_two.h\"\n\nint main(void)\n{\n ➊ int x = 123, y = 456, z;\n\n ➋ add_two(&z, x, y);\n    printf(\"%i + %i = %i\\n\", x, y, z);\n\n    return 0;\n}\n```", "```\n// Add two integers and output the sum.\n\n#ifndef ADD_TWO_H\n#define ADD_TWO_H\nvoid add_two(int *a, int b, int c);\n#endif\n```", "```\n//Add two integers and output the sum.\n\n#include \"add_two.h\"\n\nvoid add_two(int *a, int b, int c)\n{\n    int sum;\n\n    sum = b + c;\n ➊ *a = sum;\n}\n```", "```\n         .arch armv8-a\n         .file   \"sum_ints.c\"\n         .text\n         .section        .rodata\n         .align  3\n         .LC0:\n         .string \"%i + %i = %i\\n\"\n         .text\n         .align  2\n         .global main\n         .type   main, %function\n main:\n      ❶ stp     x29, x30, [sp, -32]!\n         mov     x29, sp\n         mov     w0, 123\n      ❷ str     w0, [sp, 28]        /// x = 123;\n         mov     w0, 456\n         str     w0, [sp, 24]        /// y = 456;\n      ❸ add     x0, sp, 20          /// Address of z\n      ❹ ldr     w2, [sp, 24]        /// Load y and x\n         ldr     w1, [sp, 28]\n         bl      add_two\n         ldr     w0, [sp, 20]\n         mov     w3, w0\n         ldr     w2, [sp, 24]\n         ldr     w1, [sp, 28]\n         adrp    x0, .LC0\n         add     x0, x0, :lo12:.LC0\n         bl      printf\n         mov     w0, 0\n         ldp     x29, x30, [sp], 32\n         ret\n         .size   main, .-main\n         .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n         .section        .note.GNU-stack,\"\",@progbits\n```", "```\n         .arch armv8-a\n         .file   \"add_two.c\"\n         .text\n         .align  2\n         .global add_two\n         .type   add_two, %function\n add_two:\n      ❶ sub     sp, sp, #32\n      ❷ str     x0, [sp, 8]         /// Address for output\n         str     w1, [sp, 4]         /// Value of first input\n         str     w2, [sp]            /// Value of second input\n         ldr     w1, [sp, 4]\n         ldr     w0, [sp]\n         add     w0, w1, w0\n         str     w0, [sp, 28]        /// Store sum locally\n         ldr     x0, [sp, 8]\n         ldr     w1, [sp, 28]        /// Load sum\n         str     w1, [x0]            /// Store for caller\n         nop\n         add     sp, sp, 32\n         ret\n         .size   add_two, .-add_two\n         .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n         .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Add two integers and output the sum.\n// Calling sequence:\n//    x0 <- address of output\n//    w1  <- integer\n//    w2  <- integer\n//    Returns 0\n        .arch armv8-a\n// Stack frame\n     ❶ .equ    save1920, 16\n        .equ    FRAME, 32\n// Code\n        .text\n        .align  2\n        .global add_two\n        .type   add_two, %function\nadd_two:\n        stp     fp, lr, [sp, -FRAME]!     // Create stack frame\n        mov     fp, sp                    // Set our frame pointer\n     ❷ stp     x19, x20, [sp, save1920]  // Save for local vars\n\n        mov     x20, x0                   // For output\n     ❸ add     w19, w2, w1               // Compute sum\n        str     w19, [x20]                // Output sum\n\n        mov     w0, wzr                   // Return 0\n     ❹ ldp     x19, x20, [sp, save1920]  // Restore reg\n        ldp     fp, lr, [sp], FRAME       // Delete stack frame\n        ret                               // Back to caller\n```", "```\n// Sum the integers 1 to 11.\n\n#include <stdio.h>\n#include \"add_eleven.h\"\n\nint main(void)\n{\n    int total;\n    int a = 1;\n    int b = 2;\n    int c = 3;\n    int d = 4;\n    int e = 5;\n    int f = 6;\n    int g = 7;\n    int h = 8;\n    int i = 9;\n    int j = 10;\n    int k = 11;\n\n    total = add_eleven(a, b, c, d, e, f, g, h, i, j, k);\n    printf(\"The sum is %i\\n\", total);\n\n    return 0;\n}\n```", "```\n        .arch armv8-a\n        .file   \"sum11ints.c\"\n        .text\n        .section        .rodata\n        .align  3\n.LC0:\n        .string \"The sum is %i\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n     ❶ sub     sp, sp, #96         /// Local vars and args\n        stp     x29, x30, [sp, 32]  /// Store caller fp and lr\n        add     x29, sp, 32         /// Point fp to caller's fp\n        mov     w0, 1               /// Store values in local vars\n        str     w0, [sp, 92]\n        mov     w0, 2\n        str     w0, [sp, 88]\n        mov     w0, 3\n        str     w0, [sp, 84]\n        mov     w0, 4\n        str     w0, [sp, 80]\n        mov     w0, 5\n        str     w0, [sp, 76]\n        mov     w0, 6\n        str     w0, [sp, 72]\n        mov     w0, 7\n        str     w0, [sp, 68]\n        mov     w0, 8\n        str     w0, [sp, 64]\n        mov     w0, 9\n        str     w0, [sp, 60]\n        mov     w0, 10\n        str     w0, [sp, 56]\n        mov     w0, 11\n        str     w0, [sp, 52]\n        ldr     w0, [sp, 52]        /// Store args on the stack\n     ❷ str     w0, [sp, 16]\n        ldr     w0, [sp, 56]\n        str     w0, [sp, 8]\n        ldr     w0, [sp, 60]\n        str     w0, [sp]\n     ❸ ldr     w7, [sp, 64]        /// Load args into regs\n        ldr     w6, [sp, 68]\n        ldr     w5, [sp, 72]\n        ldr     w4, [sp, 76]\n        ldr     w3, [sp, 80]\n        ldr     w2, [sp, 84]\n        ldr     w1, [sp, 88]\n        ldr     w0, [sp, 92]\n        bl      add_eleven\n        str     w0, [sp, 48]\n        ldr     w1, [sp, 48]\n        adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0\n        bl      printf\n        mov     w0, 0\n        ldp     x29, x30, [sp, 32]\n        add     sp, sp, 96\n        ret\n        .size   main, .-main\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Add 11 integers and return the sum.\n\n#ifndef ADD_ELEVEN_H\n#define ADD_ELEVEN_H\nint add_eleven(int one, int two, int three, int four, int five, int six,\n               int seven, int eight, int nine, int ten, int eleven);\n#endif\n```", "```\n// Add 11 integers and return the sum.\n\n#include <stdio.h>\n#include \"add_eleven.h\"\n\nint add_eleven(int one, int two, int three, int four, int five, int six,\n               int seven, int eight, int nine, int ten, int eleven)\n{\n    int sum = one + two + three + four + five + six\n            + seven + eight + nine + ten + eleven;\n    printf(\"Added them\\n\");\n\n    return sum;\n}\n```", "```\n        .arch armv8-a\n        .file   \"add_eleven.c\"\n        .text\n        .section        .rodata\n        .align  3\n.LC0:\n        .string \"Added them\"\n        .text\n        .align  2\n        .global add_eleven\n        .type   add_eleven, %function\nadd_eleven:\n        stp     x29, x30, [sp, -64]!\n        mov     x29, sp\n     ❶ str     w0, [sp, 44]          /// Save register arguments locally\n        str     w1, [sp, 40]\n        str     w2, [sp, 36]\n        str     w3, [sp, 32]\n        str     w4, [sp, 28]\n        str     w5, [sp, 24]\n        str     w6, [sp, 20]\n        str     w7, [sp, 16]\n        ldr     w1, [sp, 44]          /// Add first 8 inputs\n        ldr     w0, [sp, 40]\n        add     w1, w1, w0\n        ldr     w0, [sp, 36]\n        add     w1, w1, w0\n        ldr     w0, [sp, 32]\n        add     w1, w1, w0\n        ldr     w0, [sp, 28]\n        add     w1, w1, w0\n        ldr     w0, [sp, 24]\n        add     w1, w1, w0\n        ldr     w0, [sp, 20]\n        add     w1, w1, w0\n        ldr     w0, [sp, 16]\n        add     w1, w1, w0\n     ❷ ldr     w0, [sp, 64]          /// Add inputs 9-11 from the stack\n        add     w1, w1, w0\n        ldr     w0, [sp, 72]\n        add     w0, w1, w0\n        ldr     w1, [sp, 80]\n        add     w0, w1, w0\n        str     w0, [sp, 60]\n        adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0\n        bl      puts\n        ldr     w0, [sp, 60]\n        ldp     x29, x30, [sp], 64\n        ret\n        .size   add_eleven, .-add_eleven\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Sum the integers 1 to 11.\n        .arch armv8-a\n// Stack frame\n     ❶ .equ    arg9, 0\n        .equ    arg10, 8\n        .equ    arg11, 16\n        .equ    frame_record, 32\n        .equ    total, 48\n        .equ    k, 52\n        .equ    j, 56\n        .equ    i, 60\n        .equ    h, 64\n        .equ    g, 68\n        .equ    f, 72\n        .equ    e, 76\n        .equ    d, 80\n        .equ    c, 84\n        .equ    b, 88\n        .equ    a, 92\n        .equ    FRAME, 96\n// Constant data\n        .section  .rodata\n        .align  3\nformat:\n        .string \"The sum is %i\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n     ❷ sub     sp, sp, FRAME              // Allocate our stack frame\n        stp     fp, lr, [sp, frame_record] // Create frame record\n        add     fp, sp, frame_record       // Set our frame pointer\n        mov     w0, 1                      // Store values in local vars\n     ❸ str     w0, [sp, a]\n        mov     w0, 2\n        str     w0, [sp, b]\n        mov     w0, 3\n        str     w0, [sp, c]\n        mov     w0, 4\n        str     w0, [sp, d]\n        mov     w0, 5\n        str     w0, [sp, e]\n        mov     w0, 6\n        str     w0, [sp, f]\n        mov     w0, 7\n        str     w0, [sp, g]\n        mov     w0, 8\n        str     w0, [sp, h]\n        mov     w0, 9\n        str     w0, [sp, i]\n        mov     w0, 10\n        str     w0, [sp, j]\n        mov     w0, 11\n        str     w0, [sp, k]\n        ldr     w0, [sp, k]                // Store args 9-11\n        str     w0, [sp, arg11]            //   on the stack\n        ldr     w0, [sp, j]\n        str     w0, [sp, arg10]\n        ldr     w0, [sp, i]\n        str     w0, [sp, arg9]\n        ldr     w7, [sp, h]                // Load args 1-8\n        ldr     w6, [sp, g]                //   in regs 0-7\n        ldr     w5, [sp, f]\n        ldr     w4, [sp, e]\n        ldr     w3, [sp, d]\n        ldr     w2, [sp, c]\n        ldr     w1, [sp, b]\n        ldr     w0, [sp, a]\n        bl      add_eleven                 // Add all\n        str     w0, [sp, total]            // Store returned sum\n        ldr     w1, [sp, total]            // Argument to printf\n        adr     x0, format                 // Format string \n        bl      printf                     // Print result\n\n        mov     w0, wzr                    // Return 0\n        ldp     fp, lr, [sp, frame_record] // Restore fp and lr\n        add     sp, sp, FRAME              // Delete stack frame\n        ret                                // Back to caller\n```", "```\n// Add 11 integers and return the sum.\n// Calling sequence:\n//    w0 through w7 <- 8 integers\n//    [sp] <- integer\n//    [sp+8] <- integer\n//    [sp+16] <- integer\n//    Returns sum\n        .arch armv8-a\n// Stack frame\n        .equ    eight, 16\n        .equ    seven, 20\n        .equ    six, 24\n        .equ    five, 28\n        .equ    four, 32\n        .equ    three, 36\n        .equ    two, 40\n        .equ    one, 44\n        .equ    sum, 60\n     ❶ .equ    FRAME, 64             // End of our frame\n        .equ    nine, 64              // Stack args\n        .equ    ten, 72\n        .equ    eleven, 80\n// Constant data\n        .section  .rodata\n        .align  3\nmsg:\n        .string \"Added them\"\n        .text\n        .align  2\n        .global add_eleven\n        .type   add_eleven, %function\nadd_eleven:\n     ❷ stp     fp, lr, [sp, -FRAME]! // Create stack frame\n        mov     fp, sp                // Set our frame pointer\n\n        str     w0, [sp, one]         // Save register args\n        str     w1, [sp, two]\n        str     w2, [sp, three]\n        str     w3, [sp, four]\n        str     w4, [sp, five]\n        str     w5, [sp, six]\n        str     w6, [sp, seven]\n        str     w7, [sp, eight]\n        ldr     w1, [sp, one]         // Load args             \n        ldr     w0, [sp, two]\n        add     w1, w1, w0            //   and sum them\n        ldr     w0, [sp, three]\n        add     w1, w1, w0\n        ldr     w0, [sp, four]\n        add     w1, w1, w0\n        ldr     w0, [sp, five]\n        add     w1, w1, w0\n        ldr     w0, [sp, six]\n        add     w1, w1, w0\n        ldr     w0, [sp, seven]\n        add     w1, w1, w0\n        ldr     w0, [sp, eight]\n        add     w1, w1, w0\n        ldr     w0, [sp, nine]\n        add     w1, w1, w0\n        ldr     w0, [sp, ten]\n        add     w1, w1, w0\n        ldr     w0, [sp, eleven]\n        add     w1, w1, w0\n        str     w1, [sp, sum]         // Store sum\n        adr     x0, msg               // Tell user we're done\n        bl      puts\n\n        ldr     w0, [sp, sum]         // Return the sum\n        ldp     fp, lr, [sp], FRAME   // Delete stack frame\n        ret                           // Back to caller\n```", "```\n// Prompt user to enter text and echo it.\n\n#include \"write_char.h\"\n#include \"write_str.h\"\n#include \"read_str.h\"\n#define MAX 5\n#define BUFF_SZ MAX+1   // Make room for NUL\n\nint main(void)\n{\n    char text[BUFF_SZ];\n\n    write_str(\"Enter some text: \");\n    read_str(text, MAX);\n    write_str(\"You entered: \");\n    write_str(text);\n    write_char('\\n');\n\n    return 0;\n}\n```", "```\n// Compare the scope and lifetime of automatic, static, and global variables.\n\n#include <stdio.h>\n#include \"add_const.h\"\n#define INIT_X 12\n#define INIT_Y 34\n#define INIT_Z 56\n\nint z = INIT_Z;\n\nint main(void)\n{\n    int x = INIT_X;\n    int y = INIT_Y;\n\n    printf(\"           automatic   static   global\\n\");\n    printf(\"                   x        y        z\\n\");\n    printf(\"In main:%12i %8i %8i\\n\", x, y, z);\n    add_const();\n    add_const();\n    printf(\"In main:%12i %8i %8i\\n\", x, y, z);\n    return 0;\n}\n```", "```\n// Add a constant to an automatic local variable, a static local variable, \n// and a global variable.\n\n#ifndef ADD_CONST_H\n#define ADD_CONST_H\nvoid add_const(void);\n#endif\n```", "```\n// Add a constant to an automatic local variable, a static local variable, \n// and a global variable.\n\n#include <stdio.h>\n#include \"add_const.h\"\n#define INIT_X 78\n#define INIT_Y 90\n#define ADDITION 1000\n\nvoid add_const(void)\n{\n    int x = INIT_X;         // Every call\n  ❶ static int y = INIT_Y;  // First call only\n  ❷ extern int z;           // Global\n\n     x += ADDITION;          // Add to each\n     y += ADDITION;\n     z += ADDITION;\n\n     printf(\"In add_const:%7i %8i %8i\\n\", x, y, z);\n}\n```", "```\n           automatic   static   global\n                   x        y        z\nIn main:          12       34       56\nIn add_const:   1078     1090     1056\nIn add_const:❶ 1078   ❷ 2090     2056\nIn main:          12       34   ❸ 2056\n```", "```\n         .arch armv8-a\n        .file   \"var_life.c\"\n        .text\n     ❶ .global z\n        .data\n        .align  2\n        .type   z, %object\n        .size   z, 4\nz:\n        .word   56                  /// One instance of z\n        .section        .rodata\n        .align  3\n.LC0:\n        .string \"           automatic   static   global\"\n        .align  3\n.LC1:\n        .string \"                   x        y        z\"\n        .align  3\n.LC2:\n        .string \"In main:%12i %8i %8i\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     x29, x30, [sp, -32]!\n        mov     x29, sp\n        mov     w0, 12\n        str     w0, [sp, 28]        /// main's x\n        mov     w0, 34\n     ❷ str     w0, [sp, 24]        /// main's y\n        adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0\n        bl      puts\n        adrp    x0, .LC1\n        add     x0, x0, :lo12:.LC1\n        bl      puts\n        adrp    x0, z\n        add     x0, x0, :lo12:z\n        ldr     w0, [x0]\n        mov     w3, w0\n        ldr     w2, [sp, 24]\n        ldr     w1, [sp, 28]\n        adrp    x0, .LC2\n        add     x0, x0, :lo12:.LC2\n        bl      printf\n        bl      add_const\n        bl      add_const\n        adrp    x0, z\n        add     x0, x0, :lo12:z\n        ldr     w0, [x0]\n        mov     w3, w0\n        ldr     w2, [sp, 24]\n        ldr     w1, [sp, 28]\n        adrp    x0, .LC2\n        add     x0, x0, :lo12:.LC2\n        bl      printf\n        mov     w0, 0\n        ldp     x29, x30, [sp], 32\n        ret\n        .size   main, .-main\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n        .arch armv8-a\n        .file   \"add_const.c\"\n        .text}\n        .section        .rodata\n        .align  3\n.LC0:\n        .string \"In add_const:%7i %8i %8i\\n\"\n        .text\n        .align  2\n        .global add_const\n        .type   add_const, %function\nadd_const:\n        stp     x29, x30, [sp, -32]!\n        mov     x29, sp\n        mov     w0, 78\n     ❶ str     w0, [sp, 28]\n        ldr     w0, [sp, 28]\n        add     w0, w0, 1000\n        str     w0, [sp, 28]            /// add_const's x\n     ❷ adrp    x0, y.0\n        add     x0, x0, :lo12:y.0       /// add_const's y\n        ldr     w0, [x0]\n        add     w1, w0, 1000\n        adrp    x0, y.0\n        add     x0, x0, :lo12:y.0\n        str     w1, [x0]\n     ❸ adrp    x0, :got:z              /// Global z\n        ldr     x0, [x0, :got_lo12:z]\n        ldr     w0, [x0]\n        add     w1, w0, 1000\n        adrp    x0, :got:z\n        ldr     x0, [x0, :got_lo12:z]\n        str     w1, [x0]\n        adrp    x0, y.0\n        add     x0, x0, :lo12:y.0\n        ldr     w1, [x0]\n        adrp    x0, :got:z\n        ldr     x0, [x0, :got_lo12:z]\n        ldr     w0, [x0]\n        mov     w3, w0\n        mov     w2, w1\n        ldr     w1, [sp, 28]\n        adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0\n        bl      printf\n        nop\n        ldp     x29, x30, [sp], 32\n        ret\n        .size   add_const, .-add_const\n     ❹ .data\n        .align  2\n        .type   y.0, %object\n        .size   y.0, 4\ny.0:\n     ❺ .word   90\n        .ident  \"GCC: (Debian 12.2.0-14) 12.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Compare the scope and lifetime of automatic, static, and global variables.\n        .arch armv8-a\n// Useful names\n        .equ    INIT_X, 12\n        .equ    INIT_Y, 34\n        .equ    INIT_Z, 56\n// Stack frame\n        .equ    x, 24\n        .equ    y, 28\n        .equ    FRAME, 32\n// Code\n        .global z\n        .data\n        .align  2\n        .type   z, %object\n        .size   z, 4\nz:\n        .word   INIT_Z\n        .section  .rodata\nheading0:\n        .string \"           automatic   static   global\"\nheading1:\n        .string \"                   x        y        z\"\nmsg:\n        .string \"In main:%12i %8i %8i\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     fp, lr, [sp, -FRAME]!   // Create stack frame\n        mov     fp, sp                  // Set frame pointer\n\n        mov     w0, INIT_X\n        str     w0, [sp, x]             // x = INIT_X;\n        mov     w0, INIT_Y\n        str     w0, [sp, y]             // y = INIT_Y;\n        adr     x0, heading0            // Print two-line header\n        bl      puts\n        adr     x0, heading1\n        bl      puts\n\n     ❶ adr     x0, z \n        ldr     w3, [x0]                // Global z\n        ldr     w2, [sp, y]             // Local y\n        ldr     w1, [sp, x]             // Local x\n        adr     x0, msg                 // Show values\n        bl      printf\n        bl      add_const               // Add constants\n        bl      add_const               //   twice\n\n        adr     x0, z                   // Repeat display\n        ldr     w3, [x0]\n        ldr     w2, [sp, y]\n        ldr     w1, [sp, x]\n        adr     x0, msg\n        bl      printf\n\n        mov     w0, wzr                 // Return 0\n        ldp     fp, lr, [sp], FRAME     // Delete stack frame\n        ret                             // Back to caller\n```", "```\n   // Add a constant to an automatic local variable, a static local variable, \n   // and a global variable.\n           .arch armv8-a\n   // Useful names\n           .equ    INIT_X, 78\n           .equ    INIT_Y, 90\n           .equ    ADDITION, 1000\n   // Stack frame\n           .equ    x, 28\n           .equ    FRAME, 32\n   // Code\n           .data\n           .align  2\n           .type   y, %object\n           .size   y, 4\n❶ y:\n           .word   INIT_Y\n           .section  .rodata\n   msg:\n           .string \"In add_const:%7i %8i %8i\\n\"\n           .text\n           .align  2\n           .global add_const\n           .type   add_const, %function\n   add_const:\n           stp     fp, lr, [sp, -FRAME]!   // Create stack frame\n           mov     fp, sp                  // Set frame pointer\n\n           mov     w0, INIT_X\n           add     w0, w0, ADDITION        // Add constant\n           str     w0, [sp, x]             // x += ADDITION\n        ❷ adr     x0, y\n           ldr     w1, [x0]                // Load our y\n           add     w1, w1, ADDITION        // Add constant\n           str     w1, [x0]                // y += ADDITION;    \n           adrp    x0, :got:z              // z page number\n           ldr     x0, [x0, :got_lo12:z]   // z address\n           ldr     w1, [x0]                // Load z\n           add     w1, w1, ADDITION        // Add constant\n           str     w1, [x0]                // z += ADDITION\n\n           adrp    x0, :got:z              // z page number\n           ldr     x0, [x0, :got_lo12:z]   // z address\n           ldr     w3, [x0]                // Load global z\n           adr     x0, y\n           ldr     w2, [x0]                // Load our y\n           ldr     w1, [sp, x]             // Load our x\n           adr     x0, msg                 // Show current values\n           bl      printf\n\n           mov     w0, wzr                 // Return 0\n           ldp     fp, lr, [sp], FRAME     // Delete stack frame\n           ret                             // Back to caller\n```"]