["```\nputs 2+2\n```", "```\n$ **jruby --bytecode simple.rb**\n```", "```\np Object.ancestors\n => [Object, Kernel, BasicObject]\n```", "```\np Class.ancestors\n => [Class, Module, Object, Kernel, BasicObject]\n```", "```\n array = (1..100).to_a\n 10.times do\n   sample = array.sample\n      puts sample\n    end\n```", "```\n$ **jruby jit.rb**\n87\n88\n69\n5\n38\n--*snip*--\n```", "```\n    array = (1..100).to_a\n    1000.times do\n   sample = array.sample\n    end\n```", "```\n$ **jruby -J-XX:+PrintCompilation jit.rb**\n    101   1       java.lang.String::hashCode (64 bytes)\n    144   2       java.util.Properties$LineReader::readLine (452 bytes)\n    173   3       sun.nio.cs.UTF_8$Decoder::decodeArrayLoop (553 bytes)\n    200   4       java.lang.String::charAt (33 bytes)\n--*snip*--\n```", "```\n$ **jruby -J-XX:+PrintCompilation jit.rb | grep org.jruby.RubyArray**\n```", "```\narray = (1..100).to_a\n100000.times do\n  sample = array.sample\nend\n```", "```\n $ **jruby -J-XX:+PrintCompilation jit.rb | grep org.jruby.RubyArray**\n       1809 165       org.jruby.RubyArray::safeArrayRef (11 bytes)\n       1810 166  !    org.jruby.RubyArray::safeArrayRef (12 bytes)\n       1811 167       org.jruby.RubyArray::eltOk (16 bytes)\n       1927 203       org.jruby.RubyArray$INVOKER$i$0$2$sample::call (36 bytes)\n    1928 204  !    org.jruby.RubyArray::sample (834 bytes)\n       1930 205       org.jruby.RubyArray::randomReal (10 bytes)\n```", "```\n    require 'benchmark'\n\n iterations = ARGV[0].to_i\n\n    Benchmark.bm do |bench|\n      array = (1..100).to_a\n      bench.report(\"#{iterations} iterations\") do\n        iterations.times do\n          sample = array.sample\n        end\n      end\n    end\n```", "```\n$ **jruby jit.rb 100**\n```", "```\nstr = \"Geometry is knowledge of the eternally existent.\"\n```", "```\nstr = \"Geometry is knowledge of the eternally existent.\"\nstr2 = str.dup\n```", "```\n    str = \"Geometry is knowledge of the eternally existent.\"\n str2 = str.dup\n str2.upcase!\n```", "```\np str\n => \"Geometry is knowledge of the eternally existent.\"\np str2\n => \"GEOMETRY IS KNOWLEDGE OF THE ETERNALLY EXISTENT.\"\n```", "```\nstr = \"Geometry is knowledge of the eternally existent.\"\n```", "```\n    code = <<END\n    str = \"Geometry is knowledge of the eternally existent.\"\n    END\n\n    puts RubyVM::InstructionSequence.compile(code).disasm\n    == disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n    local table (size: 2, argc: 0 [opts: 0, rest: -1, post: 0, block: -1] s1)\n [ 2] str\n    0000 trace            1                                               (   1)\n 0002 putstring        \"Geometry is knowledge of the eternally existent.\"\n 0004 dup\n 0005 setlocal_OP__WC__0 2\n    0007 leave\n```", "```\nstr = \"This string is not shared\" + \" and so can be modified faster.\"\n```", "```\n    require 'benchmark'\n\n    ITERATIONS = 1000000\n\n    Benchmark.bm do |bench|\n      bench.report(\"test\") do\n        ITERATIONS.times do\n       str = \"This string is not shared\" + \" and so can be modified faster.\"\n       str2 = \"But this string is shared\" + \" so Ruby will need to copy it\n                  before writing to it.\"\n       str3 = str2.dup\n       str3[3] = 'x'\n        end\n      end\n    end\n```", "```\n#str3[3] = 'x'str[3] = 'x'\n```"]