["```\n11100011101000000111000000000100\n```", "```\ne3a07004\n```", "```\nmov r7, #4\n```", "```\nAddress   Data   \n\n0001007c  e2503001\n\n00010080  da000002\n\n00010084  e0000093\n\n00010088  e2533001\n\n0001008c  1afffffc\n```", "```\nAddress   Data      Assembly\n\n0001007c  e2503001  subs r3, r0, #1\n\n00010080  da000002  ble  0x10090\n\n00010084  e0000093  mul  r0, r3, r0\n\n00010088  e2533001  subs r3, r3, #1\n\n0001008c  1afffffc  bne  0x10084\n\n00010090  ---\n```", "```\nAddress   Assembly\n\n0001007c  subs r3, r0, #1\n\n00010080  ble  0x10090\n\n00010084  mul  r0, r3, r0\n\n00010088  subs r3, r3, #1\n\n0001008c  bne  0x10084\n\n00010090  ---\n```", "```\n.global _start❶\n\n.text❷\n\n_start:❸\n\n  ldr  r1, =n      @ set r1 = address of n❹\n\n  ldr  r0, [r1]    @ set r0 = the value of n\n\n  subs r3, r0, #1  @ set r3 = r0 - 1 \n\n  ble  end         @ jump to end if r3 <= 0\n\nloop:\n\n  mul  r0, r3, r0  @ set r0 = r3 x r0\n\n  subs r3, r3, #1  @ decrement r3\n\n  bne  loop        @ jump to loop if r3 > 0\n\nend:\n\n  ldr  r1, =result @ set r1 = address of result❺\n\n  str  r0, [r1]    @ store r0 at result\n\n@ Exit the program\n\n  mov  r0, #0❻\n\n  mov  r7, #1\n\n  svc 0\n\n.data❼\n\n  n: .word 5❽\n\n  result: .word 0\n```", "```\n$ as -o fac.o fac.s\n```", "```\n$ ld -o fac fac.o\n```", "```\n$ ./fac\n```", "```\n$ gdb fac\n```", "```\n(gdb) info files\n```", "```\n       Entry point: 0x10074\n```", "```\n(gdb) disas 0x10074\n\nDump of assembler code for function _start:\n\n   0x00010074 <+0>:     ldr     r1, [pc, #40]   ; 0x100a4 <end+20>\n\n   0x00010078 <+4>:     ldr     r0, [r1]\n\n   0x0001007c <+8>:     subs    r3, r0, #1\n\n   0x00010080 <+12>:    ble     0x10090 <end>\n```", "```\n(gdb) print/x 0x00010074 + 48\n\n$1 = 0x100a4\n```", "```\n(gdb) disas 0x10074,0x100a4\n\nDump of assembler code from 0x10074 to 0x100a4:\n\n   0x00010074 <_start+0>:       ldr     r1, [pc, #40]   ; 0x100a4 <end+20>❶\n\n   0x00010078 <_start+4>:       ldr     r0, [r1]\n\n   0x0001007c <_start+8>:       subs    r3, r0, #1\n\n   0x00010080 <_start+12>:      ble     0x10090 <end>\n\n   0x00010084 <loop+0>: mul     r0, r3, r0\n\n   0x00010088 <loop+4>: subs    r3, r3, #1\n\n   0x0001008c <loop+8>: bne     0x10084 <loop>\n\n   0x00010090 <end+0>:  ldr     r1, [pc, #16]   ; 0x100a8 <end+24>❷\n\n   0x00010094 <end+4>:  str     r0, [r1]\n\n 0x00010098 <end+8>:  mov     r0, #0\n\n   0x0001009c <end+12>: mov     r7, #1\n\n   0x000100a0 <end+16>: svc     0x00000000\n```", "```\n(gdb) break *0x10074\n\n(gdb) break *0x1007c\n\n(gdb) break *0x10090\n\n(gdb) break *0x100a0\n```", "```\n(gdb) run\n\nStarting program: /home/pi/fac\n\nBreakpoint 1, 0x00010074 in _start ()\n```", "```\n (gdb) info register pc\n\npc             0x10074  0x10074 <_start>\n```", "```\n(gdb) disas\n\nDump of assembler code for function _start:\n\n=> 0x00010074 <+0>:     ldr     r1, [pc, #40]   ; 0x100a4 <end+20>\n\n   0x00010078 <+4>:     ldr     r0, [r1]\n\n   0x0001007c <+8>:     subs    r3, r0, #1\n\n   0x00010080 <+12>:    ble     0x10090 <end>\n```", "```\n(gdb) print (int)n\n\n$2 = 5\n\n(gdb) p (int)result\n\n$3 = 0\n```", "```\n(gdb) p &n\n\n$4 = (<data variable, no debug info> *) 0x200ac\n\n(gdb) p &result\n\n$5 = (<data variable, no debug info> *) 0x200b0\n```", "```\n(gdb) x/2xw 0x200ac\n\n0x200ac:        0x00000005      0x00000000\n```", "```\n(gdb) continue\n\nContinuing.\n\nBreakpoint 2, 0x0001007c in _start ()\n\n(gdb) disas\n\nDump of assembler code for function _start:\n\n   0x00010074 <+0>:     ldr     r1, [pc, #40]   ; 0x100a4 <end+20>\n\n   0x00010078 <+4>:     ldr     r0, [r1]\n\n=> 0x0001007c <+8>:     subs    r3, r0, #1\n\n   0x00010080 <+12>:    ble     0x10090 <end>\n\nEnd of assembler dump.\n\n(gdb) info registers r0\n\nr0             0x5      5\n```", "```\n(gdb) c\n\nContinuing.\n\nBreakpoint 3, 0x00010090 in end ()\n\n(gdb) disas\n\nDump of assembler code for function end:\n\n=> 0x00010090 <+0>:     ldr     r1, [pc, #16]   ; 0x100a8 <end+24>\n\n   0x00010094 <+4>:     str     r0, [r1]\n\n   0x00010098 <+8>:     mov     r0, #0\n\n   0x0001009c <+12>:    mov     r7, #1\n\n   0x000100a0 <+16>:    svc     0x00000000\n\n   0x000100a4 <+20>:    andeq   r0, r2, r12, lsr #1\n\n   0x000100a8 <+24>:    strheq  r0, [r2], -r0   ; <UNPREDICTABLE>\n\nEnd of assembler dump.\n\n(gdb) i r r0\n\nr0             0x78     120\n```", "```\n(gdb) p (int)result\n\n$6 = 0\n```", "```\n(gdb) c\n\nContinuing.\n\nBreakpoint 4, 0x000100a0 in end ()\n\n(gdb) p (int)result\n\n$7 = 120\n```", "```\n(gdb) run\n\nThe program being debugged has been started already.\n\nStart it from the beginning? (y or n) y\n\nStarting program: /home/pi/fac\n\nBreakpoint 1, 0x00010074 in _start ()\n```", "```\n(gdb) p &n\n\n$8 = (<data variable, no debug info> *) 0x200ac\n\n(gdb) set {int}0x200ac = 7\n\n(gdb) p (int)n\n\n$9 = 7\n```", "```\n(gdb) disable 2\n\n(gdb) disable 3\n\n(gdb) c\n\nContinuing.\n\nBreakpoint 4, 0x000100a0 in end ()\n\n(gdb) p (int)result\n\n$10 = 5040\n```", "```\n$ ls fac*\n```", "```\n$ hexdump -C fac\n```", "```\n$ objdump -s fac\n```", "```\nContents of section .text:\n\n 10074 28109fe5 000091e5 013050e2 020000da  (........0P.....\n\n 10084 930000e0 013053e2 fcffff1a 10109fe5  .....0S.........\n\n 10094 000081e5 0000a0e3 0170a0e3 000000ef  .........p......\n\n 100a4 ac000200 b0000200                    ........\n\nContents of section .data:\n\n 200ac 05000000 00000000                    ........\n\nContents of section .ARM.attributes:\n\n 0000 41130000 00616561 62690001 09000000   A....aeabi......\n\n 0010 06010801                              ....\n```", "```\n$ objdump -d fac\n\nfac:     file format elf32-littlearm\n\nDisassembly of section .text:\n\n00010074 <_start>:\n\n   10074:       e59f1028        ldr     r1, [pc, #40]   ; 100a4 <end+0x14>❶\n\n   10078:       e5910000        ldr     r0, [r1]\n\n   1007c:       e2503001        subs    r3, r0, #1\n\n   10080:       da000002        ble     10090 <end>\n\n00010084 <loop>:\n\n   10084:       e0000093        mul     r0, r3, r0\n\n   10088:       e2533001        subs    r3, r3, #1\n\n   1008c:       1afffffc        bne     10084 <loop>\n\n00010090 <end>:\n\n   10090:       e59f1010        ldr     r1, [pc, #16]   ; 100a8 <end+0x18>\n\n   10094:       e5810000        str     r0, [r1]\n\n   10098:       e3a00000        mov     r0, #0\n\n   1009c:       e3a07001        mov     r7, #1\n\n   100a0:       ef000000        svc     0x00000000\n\n   100a4:       000200ac        .word   0x000200ac\n\n   100a8:       000200b0        .word   0x000200b0\n```", "```\n$ whereis ls\n\nls: /bin/ls /usr/share/man/man1/ls.1.gz\n```", "```\n$ objdump -d /bin/ls > ls.txt\n```"]