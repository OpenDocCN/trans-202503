- en: '**24'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**24'
- en: PROBLEM REPORTS AND PANICS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题报告和紧急情况**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: FreeBSD is produced by human beings. Human beings make mistakes. Some of these
    mistakes are pretty trivial, while others can crash the whole system. FreeBSD
    explicitly has no warranty, but the community takes problems fairly seriously.
    Developers can’t fix these problems without a proper bug report, however—and that’s
    where you come in. Learning how to file a usable bug report will help you interact
    with not only the FreeBSD Project but also every other entity that produces software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 是由人类生产的。人类会犯错。其中一些错误可能微不足道，而另一些则可能导致整个系统崩溃。FreeBSD 明确声明不提供任何保证，但社区对问题非常认真。然而，开发者无法在没有适当的
    bug 报告的情况下修复这些问题，而你正是解决问题的关键所在。学习如何提交一个可用的 bug 报告将帮助你与不仅仅是 FreeBSD 项目，还包括所有其他生产软件实体进行互动。
- en: Bug reports need program output that demonstrates the bug, but what if the problem
    crashes the whole system? A system-halting *panic* is perhaps the most vexing
    of problems, but with proper preparations, you can deal with a panic as routinely
    as any less intrusive bug. The FreeBSD folks definitely want debugging output
    from your panic reports, and you can easily provide it in your problem report.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Bug 报告需要展示证明 bug 的程序输出，但如果问题导致整个系统崩溃呢？系统停止的 *panic* 或许是最棘手的问题，但通过适当的准备，你可以像处理任何其他不那么入侵性的
    bug 一样处理 panic。FreeBSD 的开发人员确实希望从你的 panic 报告中获得调试输出，并且你可以在问题报告中轻松地提供这些信息。
- en: But first, useful bug reports.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先是有用的 bug 报告。
- en: '**Bug Reports**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Bug 报告**'
- en: A *bug report* is a detailed description of a problem that causes the system
    to behave in an unexpected manner. That’s kind of vague, yes. What’s unexpected?
    What’s a problem? There’s a whole spectrum of valid problem reports, ranging from
    “I’d expect a man page for this thing” to “when I mount an SMB filesystem, the
    operating system crashes.” Trivial problems like a missing man page reference
    might not seem worth your time to report, but every reference in every man page
    is there because someone thought it was worth including. So what’s a bug report,
    and what isn’t?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bug 报告* 是对导致系统表现出意外行为的问题的详细描述。这种描述可能有些模糊，是的。什么算是意外行为？什么算是问题？有效的问题报告范围很广，从“我期望这个东西有一个
    man 手册页”到“当我挂载 SMB 文件系统时，操作系统崩溃”。像缺少 man 手册页引用这样的微不足道的问题可能看起来不值得你花时间报告，但每个 man
    手册页中的每个引用之所以存在，是因为有人认为它值得包含进去。那么，什么是 bug 报告，什么又不是呢？'
- en: A bug report isn’t where you say that you have a problem. A bug report is where
    you prove that *FreeBSD* has a problem. Yes, I said *prove*. It’s not that FreeBSD
    is innocent until proven guilty, but for you to submit a bug report, you must
    substantiate your claim. Bugs filed without evidence will be closed with terse
    replies, like “not a bug” or “useless report.” The proper venue to cry for help
    is a search engine, followed by a mailing list or the FreeBSD forums.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Bug 报告不仅仅是说你有问题。Bug 报告是证明 *FreeBSD* 存在问题的地方。是的，我说的是 *证明*。并非 FreeBSD 无罪推定，但要提交
    bug 报告，你必须证实你的声明。未附带证据的 bug 报告将会被关闭，并附有简短的回复，比如“不是 bug”或“无用的报告”。寻求帮助的正确途径是首先使用搜索引擎，然后是邮件列表或
    FreeBSD 论坛。
- en: Any variation on “I don’t know what I’m doing” doesn’t belong in a bug report.
    This includes “FreeBSD doesn’t work the way I think it should” or “something bad
    happens when I do something dumb.” If you start your new hobby of free climbing
    with a master-rated sheer cliff face, fall, and break your fool neck, the hospital
    kind of has to take you in. If you yank out a new hard drive halfway through running
    newfs(8) and complain about filesystem corruption, the FreeBSD folks will dismiss
    your bug.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 任何形式的“我不知道我在做什么”都不应包含在 bug 报告中。这包括“FreeBSD 不按我预期的方式工作”或“我做了一些愚蠢的事情时发生了一些不好的事情”。如果你以一名新手的身份在被评为高难度的悬崖上进行自由攀岩，摔倒并摔断了脖子，医院必须接待你。如果你在运行
    newfs(8) 时半途抽掉新硬盘并抱怨文件系统损坏，FreeBSD 的人员会驳回你的 bug 报告。
- en: Bugs can be about system inconsistencies. Every network interface, API, and
    system call has a man page. If you try to call up the man page for a system call
    and don’t get a match, that’s a bug. If you’re reading source code and find a
    place where the documentation doesn’t match the code, that’s a bug. If you can
    make a program (or the whole system) reproducibly crash, that’s a bug.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Bug 可能涉及系统不一致性。每个网络接口、API 和系统调用都有 man 手册页。如果你尝试调用系统调用的 man 手册页却找不到匹配项，那就是一个
    bug。如果你在阅读源代码时发现文档与代码不匹配的情况，那也是一个 bug。如果你能够使程序（或整个系统）可复现地崩溃，那就是一个 bug。
- en: You can also file bugs to submit improvements to the FreeBSD Project. The key
    word here is *improvement*, not *wish*. An improvement needs actual code attached
    to the bug, along with how you’ve tested your code and any related information,
    such as specifications and standards. If you file enough of these, you might be
    invited to become a committer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以提交 Bug 来向 FreeBSD 项目提交改进。这里的关键词是 *改进*，而不是 *愿望*。一个改进需要附带实际的代码，说明你如何测试这段代码以及任何相关信息，如规范和标准。如果你提交足够多这样的
    Bug，你可能会被邀请成为提交者。
- en: Bugs are collaborative. By filing a bug, you’re indicating a willingness to
    work with the FreeBSD developers to resolve your issue. This might mean applying
    a patch, trying a different approach, or running debugging commands and sending
    the output to the developers. Filing a bug and expecting an answer like, “Fixed!
    Go do this,” is unrealistic. Including everything in your initial bug report helps
    resolve the issue much more quickly. Err on the side of providing too much data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Bug 是协作的。通过报告 Bug，你是在表示愿意与 FreeBSD 开发者一起解决你的问题。这可能意味着应用补丁、尝试不同的方法，或者运行调试命令并将输出发送给开发者。报告
    Bug 并期待得到类似“已修复！去做这个”的回答是不现实的。在初始的 Bug 报告中包含所有信息可以更快地解决问题。尽量提供过多的数据。
- en: 'Repeat after me: “Free software. Donated support time.” A server’s RAID card
    making your hard drives spin to a conga beat feels critical to you, but the people
    on the other end of the bug are giving up their personal time to help you. Remember
    that.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 跟我重复一遍：“自由软件。捐赠的支持时间。” 服务器的 RAID 卡让你的硬盘随着康歌的节奏旋转，对你来说可能至关重要，但报告 Bug 的人们正在放弃他们的私人时间来帮助你。记住这一点。
- en: It’s best if you’re running a recent version of FreeBSD when filing a bug. If
    you file a bug on FreeBSD 12.0-RELEASE when 12.4-p15 is the current version, someone
    will ask you to update and try again. Nobody will look at a problem report for
    a FreeBSD release past End of Life.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在报告 Bug 时，最好运行的是 FreeBSD 的最新版本。如果你在 FreeBSD 12.0-RELEASE 上报告 Bug，而当前版本是 12.4-p15，别人会要求你更新并重新尝试。没人会查看已经过生命周期的
    FreeBSD 版本的 Bug 报告。
- en: '***Before Filing a Bug***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在报告 Bug 之前***'
- en: Ideally, you won’t ever have to file a bug. Not only is a proper report for
    a serious bug a lot of work for you; it’s a lot of work for the FreeBSD developers.
    The FreeBSD Project has an internal mailing list dedicated to assessing the bug
    database and guiding reports to their most likely owners. While sending an email
    to a FreeBSD mailing list announces your woes to thousands of people, opening
    a bug announces your woes to thousands of highly skilled people *and* demands
    that they handle virtual paperwork for you. Before filing a bug, be absolutely
    certain that both you and the FreeBSD Project need it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你永远不需要报告 Bug。一个正确的严重 Bug 报告对你来说是很大的工作量，对 FreeBSD 开发者来说也是。FreeBSD 项目有一个内部邮件列表，专门用来评估
    Bug 数据库并引导报告到最有可能的开发者那里。虽然向 FreeBSD 邮件列表发送邮件会让成千上万的人知道你的问题，但报告 Bug 会让成千上万的高技能人士知道你的问题，并要求他们为你处理虚拟文书工作。在报告
    Bug 之前，确保你和 FreeBSD 项目都需要它。
- en: Does the problem happen on all of your hosts or only on one? Problems restricted
    to a single host might result from failing hardware. Consistent, reproducible
    behavior is much more likely to be a bug.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是出现在所有主机上，还是仅在一台主机上？只在一台主机上出现的问题可能是硬件故障导致的。持续的、可重复的行为更可能是一个 Bug。
- en: Treat your issue as a general problem and search the usual FreeBSD resources.
    Review the FAQ and the Handbook. Check the FreeBSD bug database at *[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/)*
    for an existing bug. Search the mailing list archives, the forums, and the wider
    internet for people who’ve already had this problem. Ask on the forums or the
    FreeBSD-questions mailing list whether anyone else has seen this behavior. Is
    this expected, or should you open a bug? The questions people ask will be invaluable
    in troubleshooting your problem and in creating your bug report.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 把你的问题当作一个普遍的问题来处理，先搜索一下 FreeBSD 的常见资源。查看 FAQ 和手册。检查 FreeBSD Bug 数据库，看看是否有现存的
    Bug。[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/) 上查看。搜索邮件列表归档、论坛以及更广泛的互联网，看看是否有人已经遇到过这个问题。你可以在论坛或
    FreeBSD-questions 邮件列表上询问是否有人遇到过这种行为。这是预期的吗，还是应该报告一个 Bug？人们提问的内容将对故障排除和 Bug 报告的创建非常有帮助。
- en: 'Before starting a bug report, gather every scrap of information that might
    possibly be helpful. This includes:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始报告 Bug 之前，收集所有可能有帮助的信息。包括：
- en: Verbose boot output
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细启动输出
- en: System version
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统版本
- en: Custom kernel configuration, if any
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义内核配置（如果有的话）
- en: Program debugging output
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序调试输出
- en: What do you expect to happen?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你期望发生什么？
- en: What actually happens?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际发生了什么？
- en: Can you reproduce this problem? A developer investigating a bug needs a reproducible
    test case. If your server starts singing show tunes at 3 AM, that is a problem.
    If it happened only once and you can’t reproduce it, you’re best served by keeping
    your mouth shut so people don’t think you’re loony. If it happens whenever you
    run a particular combination of commands on certain hardware, though, the matter
    can be verified and investigated so that either the problem is resolved or someone
    offers your server a recording contract.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你能重现这个问题吗？开发人员在调查 bug 时需要一个可重现的测试用例。如果你的服务器在凌晨三点开始播放歌舞剧曲目，那确实是个问题。如果它只发生一次，且你无法重现，最好的做法是保持沉默，这样别人就不会觉得你疯了。不过，如果它每次在运行特定命令组合时发生，且发生在某些硬件上，那么这个问题就可以得到验证和调查，解决问题后，或者有人给你的服务器提供录音合约。
- en: FreeBSD tracks bugs with Bugzilla at *[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/)*.
    Before submitting a bug, search the existing bug database to see whether there’s
    something similar or related. Does your problem resemble any existing bugs? If
    your server sings Disney tunes, but another bug shows someone’s identical hardware
    does Broadway hits, you should probably mention that bug in your report. Are there
    any illuminating comments on those bugs? The comments might tell you how to cope
    with or work around your issue without filing another identical bug. If you want
    updates, add yourself to the bug’s *cc* field. You’ll get an email every time
    the bug is updated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 使用 Bugzilla 跟踪 bug，网址是 *[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/)*。在提交
    bug 之前，先搜索现有的 bug 数据库，看看是否有类似或相关的 bug。你的问题是否与现有的某个 bug 相似？如果你的服务器播放迪士尼歌曲，而另一个
    bug 显示某人的硬件播放百老汇音乐剧的歌曲，你可能应该在报告中提到这个 bug。那些 bug 是否有一些有启发性的评论？这些评论可能会告诉你如何应对或绕过这个问题，而不必再提交一个相同的
    bug。如果你想要更新，可以把自己加入到 bug 的 *cc* 字段。每次 bug 更新时，你都会收到一封电子邮件。
- en: While you’re searching Bugzilla, create an account there. Even if you don’t
    need to file this bug, one day you will . . . and you’ll probably be pretty annoyed
    about it. Having your Bugzilla account ready will make that submission just a
    little bit easier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在你搜索 Bugzilla 时，先在那里创建一个账户。即使你现在不需要提交这个 bug，总有一天你会需要…而你可能会因此感到相当烦恼。提前拥有 Bugzilla
    账户会让你提交 bug 时稍微轻松一点。
- en: If you get this far and still have a problem, you might actually need to file
    a bug report. Let’s see what not to put in it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经走到这一步，仍然遇到问题，那么你可能真的需要提交一个 bug 报告。让我们看看不应该在报告中写什么。
- en: '***Bad Bug Reports***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***糟糕的 Bug 报告***'
- en: 'The easiest way to understand a good bug report is to read some bad ones and
    identify what makes them bad. Digging through the closed bugs uncovers bunches
    of bad reports, but here’s an archetype:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 理解一个好的 bug 报告最简单的方法就是阅读一些糟糕的报告，找出它们的不足之处。浏览已关闭的 bug 会揭示出许多糟糕的报告，下面是一个典型的例子：
- en: When I boot the FreeBSD 12.1 ISO image, I can’t get past the “Welcome to FreeBSD”
    options screen. The boot menu is stuck, and each time the screen refreshes it
    stays at 10\. It doesn’t matter what I press, the system never boots. If I press
    a whole bunch of buttons, I eventually get a kernel panic. The same ISO image
    launches in VirtualBox and I can install it to the disk.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我启动 FreeBSD 12.1 ISO 镜像时，无法通过“欢迎使用 FreeBSD”选项屏幕。启动菜单卡住了，每次刷新屏幕时都停留在 10。无论我按什么键，系统都无法启动。如果我按下许多按键，最终会得到内核崩溃。相同的
    ISO 镜像在 VirtualBox 中可以启动，并且我能够将其安装到磁盘上。
- en: The bug report includes the model number of a dead standard SuperMicro motherboard,
    keyboard, and mouse. None of the hardware is exotic. The reporter suggests reproducing
    the problem by booting the ISO with similar hardware.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Bug 报告中包括了一块已损坏的标准 SuperMicro 主板、键盘和鼠标的型号。没有任何硬件是特殊的。报告者建议通过使用类似的硬件来重现这个问题。
- en: First off, the reporter obviously has a problem installing FreeBSD. It might
    even be that FreeBSD has a problem. I’ve no doubt that this system fails at boot
    exactly as advertised. But there’s no evidence and no diagnostic information.
    The reproduction process isn’t very useful; if every 12.1 installation image behaved
    this way on common hardware, the release engineers would have never signed off
    on the release.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，报告者显然在安装 FreeBSD 时遇到了问题。甚至可能是 FreeBSD 本身有问题。我毫不怀疑这个系统在启动时会如宣传所说地失败。但没有证据，也没有诊断信息。重现过程也没有什么用；如果每个
    12.1 版本的安装镜像在常见硬件上都表现如此，发布工程师早就不会通过这次发布了。
- en: Including the hardware make and model isn’t as useful as you might hope. Vendors
    occasionally change chipsets without changing the model number. The verbose boot
    information identifies the hardware in the machine in a way that the model number
    never can. This reporter can’t get a 12.1 verbose boot, however.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 提供硬件的品牌和型号可能没有你想象的那么有用。厂商偶尔会更换芯片组，但不更改型号。详细的启动信息以硬件可以识别的方式标识了机器的硬件，而型号永远无法做到这一点。不过，这个报告者无法提供12.1版本的详细启动信息。
- en: If I experienced this behavior, I’d first try a second CD. Perhaps the first
    burned disk was bad. If the behavior persisted, I’d download a slightly older
    version of FreeBSD to see whether the problem exists there. If 12.0 fails, how
    about 11.0? I’d include the verbose boot information from the earlier version
    in my bug report. If the older version failed, I’d ask the FreeBSD-questions mailing
    list for further advice before filing a bug.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我遇到这种情况，我首先会尝试使用第二张CD。也许第一张烧录的磁盘有问题。如果问题仍然存在，我会下载一个稍微旧一点的FreeBSD版本，看看问题是否依然存在。如果12.0版本失败了，11.0版本怎么样？我会在我的bug报告中加入早期版本的详细启动信息。如果旧版本也失败了，我会在提交bug之前向FreeBSD-questions邮件列表请求进一步的建议。
- en: As you might guess, nobody follows up on bugs like this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的那样，没有人会跟进这样的问题。
- en: Many developers like fixing bugs. They enjoy digging through code and identifying
    subtle problems. What they don’t enjoy is sorting through people’s erratic bug
    reports; they expect to be paid for dealing with difficult people. Your goal is
    to file a bug so complete and compelling that a developer that’s looking for a
    bug to work on will think you’re easy to work with—and then, you need to actually
    *be* easy to work with.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 很多开发者喜欢修复bug。他们喜欢深入代码，找出微妙的问题。可是他们并不喜欢整理人们那种不稳定的bug报告；他们希望自己能够得到报酬来处理那些难缠的人。你的目标是提交一个如此完整且令人信服的bug报告，以至于一个正在寻找bug的开发者会觉得你是一个容易合作的人——然后，你真的需要*做*一个容易合作的人。
- en: 'The FreeBSD FAQ includes a joke by Dag-Erling Smørgrav: “How many -current
    users does it take to change a light bulb?” The answer is 1,169 and includes “three
    to submit (bugs) about it, one of which is misfiled under doc and consists only
    of ‘it’s dark.’” If your bug amounts to “it’s dark,” it’s a bad problem report.^([1](footnote.xhtml#ch24fn1))'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD的FAQ中有一个Dag-Erling Smørgrav的笑话：“需要多少个-current用户来换一个灯泡？”答案是1,169个，其中包括“有三个用户提交了（bug），其中一个错误归档在文档中，内容仅是‘这里很黑’。”如果你的bug报告只是“这里很黑”，那就属于一个糟糕的报告。^([1](footnote.xhtml#ch24fn1))
- en: '**SPECULATION VS. EVIDENCE**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**推测与证据**'
- en: Whenever you submit a bug report to any person or organization, separate your
    evidence from what you *think* is going on. Evidence is actionable; your speculation
    is not. Including speculation doesn’t hurt, but it needs to be clearly separated
    from the evidence. How many times have you received a support call from a user
    who claims he’s having a particular problem, but, once you dig into the issue,
    it turns out that everything he told you is bogus and something totally unrelated
    is going on? Yeah. Don’t be that user. Keep your speculation separate.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你向任何人或组织提交bug报告时，务必将你的证据与你*认为*发生的事情分开。证据是可以采取行动的；而你的推测则不是。包括推测并不会有什么坏处，但它需要与证据清晰区分开来。你有多少次接到支持电话，用户声称他遇到了某个问题，但一旦你深入调查，发现他告诉你的一切都是假的，实际上是完全无关的事情在发生？是的，别做那种用户。将推测与证据分开。
- en: '***The Fix***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修复方案***'
- en: The most important part of any bug report is the fix. How do you remedy the
    problem? Perhaps all you have is a workaround. “The program crashes if I do this,
    but I can run it and pipe the output through such-and-such and do well enough.”
    That comment helps the next person to hit your bug.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 任何bug报告中最重要的部分就是修复方法。你是如何解决这个问题的？也许你只有一个临时解决方案。“程序在我这样做时崩溃了，但我可以运行它并将输出通过某某处理，效果也还不错。”这个评论对下一个遇到你bug的人很有帮助。
- en: When you hit a bug, take a look at the source code. Fixing typos in man pages
    or on the website isn’t hard. If you’re a programmer, a couple minutes of perusing
    the source might uncover the problem. If it doesn’t, well, figuring out why the
    system behaves in this way will make you a better programmer and debugger.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到bug时，先看看源代码。修正man页或者网站上的错别字并不难。如果你是程序员，浏览源代码几分钟可能就能发现问题。如果没有发现，那么弄清楚系统为什么以这种方式运行，将会让你成为一个更好的程序员和调试者。
- en: Maybe you can’t fix this bug. Letting people know the bug exists is still helpful.
    But by including a fix, your bug transcends a report and becomes a contribution
    to the community.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你无法修复这个bug。告诉大家这个bug的存在仍然很有帮助。但是，通过提供修复方案，你的bug报告就不仅仅是一个报告，而是对社区的贡献。
- en: '***Filing Bugs***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提交Bug报告***'
- en: 'All bugs get filed and handled at *[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/)*.
    FreeBSD has three categories of bug: ports, base system, and documentation. Use
    a *ports* bug for anything with add-on software. Use the *base system* for anything
    that gets installed with a basic FreeBSD install. Use the *documentation* category
    for problems with man pages, the FAQ, the Handbook, and the website. Each brings
    up a slightly different web form. The fields needed for documentation and ports
    bugs are mostly subsets of the base system bugs, though, so we’ll walk through
    filing a base system bug.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的bug都会在*[https://bugs.FreeBSD.org/](https://bugs.FreeBSD.org/)*提交和处理。FreeBSD有三类bug：端口、基础系统和文档。遇到附加软件的bug，请使用*端口*类别；遇到随基本FreeBSD安装一起安装的bug，请使用*基础系统*类别；遇到关于man页面、FAQ、手册和网站的问题，请使用*文档*类别。每个类别会带出稍微不同的网页表单。文档和端口bug所需的字段大部分是基础系统bug的子集，因此我们将通过提交一个基础系统bug来演示。
- en: The web form includes several drop-down fields that let you steer your bug toward
    the right people. Your bug might get reassigned right after you file it, but that’s
    okay; initially, you’re looking for someone who understands what the heck you’re
    talking about. You don’t want a doc committer triaging system call issues or a
    source committer figuring out a port-packaging problem.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 网页表单包含几个下拉字段，可以帮助你将bug引导到正确的人那里。你的bug可能在你提交后被重新分配，但这没关系；最初，你是希望找到一个理解你说的是什么的开发者。你不希望一个文档提交者处理系统调用问题，也不希望一个源代码提交者去搞清楚一个端口包装问题。
- en: The `Component` field lets you select a part of the system the bug affects.
    The list of components varies over time, but selecting a component brings up a
    description. While there’s always a catch-all field, such as `Bin` for base system
    bugs, making a good choice will accelerate handling of your bug.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component`字段让你选择该bug影响的系统部分。组件列表会随时间变化，但选择一个组件后会显示其描述。虽然总有一个通用字段，比如`Bin`用于基础系统bug，但做出正确选择会加速bug的处理。'
- en: In the `Version` field, select the FreeBSD version this bug applies to.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Version`字段中，选择这个bug所涉及的FreeBSD版本。
- en: The `Severity` field is both somewhat misleading and requires a little detachment
    from your own emotions. The choices are “Affects Only Me,” “Affects Some People,”
    and “Affects Many People.” A bug terrible enough that you consider gnawing off
    your own foot to escape might affect only you. It’s critical to you, but not to
    the FreeBSD project. Resist the urge to declare that it affects everyone. Similarly,
    a typo on the website might be visible to everyone, but if nobody’s noticed until
    now, it’s probably not worth “Affects Many People.” Reserve the more important
    severity levels for bugs that negatively impact all users of a particular device
    driver or anyone who uses a certain filesystem. If you get a reputation for filing
    trivial reports as critical, you’ll quickly find yourself being ignored. The FreeBSD
    Project works on the honor system, and reputation counts for more than you might
    think.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Severity`字段有点误导，并且需要你从个人情感中抽离。选项有“仅影响我”、“影响部分人”和“影响多人”。一个糟糕到让你考虑咬掉自己脚趾来逃脱的bug可能只影响你。对你来说非常重要，但对FreeBSD项目不重要。要抵制宣称“影响所有人”的冲动。同样，网站上的一个拼写错误可能对所有人都可见，但如果到现在为止没人注意到，它可能不值得标为“影响多人”。保留更重要的严重级别给那些对特定设备驱动程序的所有用户或使用某个文件系统的所有人产生负面影响的bug。如果你因为提交琐碎报告而被认为是关键问题，你会很快发现自己被忽视。FreeBSD项目依靠的是荣誉系统，声誉比你想的更重要。'
- en: In the `Hardware` field, select the platform you found the bug on. Even if that
    seems irrelevant, it might be critical.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Hardware`字段中，选择你发现该bug的平台。即使看似无关，它也可能是关键的。
- en: The `OS` field is vestigial from Bugzilla. Ignore it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`OS`字段是Bugzilla的遗留字段，可以忽略。'
- en: Below these drop-downs, Bugzilla offers text fields. These need a little more
    thought.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些下拉框下方，Bugzilla提供了文本框。这些需要更多的思考。
- en: The `Summary` takes a brief description of the problem. A good summary should
    provide unique information to make your bug stand out from other bugs. “Panic
    when unmounting an SMB filesystem” is decent. “Can’t install,” “system broken,”
    and “problem” are terrible. A developer perusing the bug database will see your
    summary first. A bad summary will encourage him to gloss right over it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Summary`字段需要简要描述问题。一个好的总结应该提供独特的信息，使你的bug在其他bug中脱颖而出。“卸载SMB文件系统时出现恐慌”是一个不错的总结。“无法安装”、“系统崩溃”和“问题”则很糟糕。开发者在浏览bug数据库时，首先会看到你的总结。一个糟糕的总结会让他跳过这个bug。'
- en: The `Description` area is where you get to describe the problem. Don’t rant
    and rave about how awful everything is. Say what happened and what you expected
    to happen. Include debugging output, if it’s short enough to fit reasonably; otherwise,
    add the debugging output as an attachment. Include advice on how to replicate
    the problem. If you have a fix, give it. Add in anything you’ve discovered about
    the problem. Sometimes, the most unusual detail provides the vital clue.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`描述` 区域是你描述问题的地方。不要发泄或抱怨一切有多糟糕。说明发生了什么以及你期望发生什么。如果调试输出足够简短，可以直接附上；否则，将调试输出作为附件上传。包括如何重现问题的建议。如果你有修复方案，请提供。将你关于该问题的任何发现添加进去。有时，最不寻常的细节提供了至关重要的线索。'
- en: Add `Attachments` beneath the description. This is where you can upload your
    custom kernel configuration, verbose boot messages, kernel panic messages, and
    lengthy diatribes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述下方添加 `附件`。这里可以上传你的自定义内核配置、详细启动消息、内核崩溃消息以及冗长的讨论。
- en: Use the **Preview** button to verify you included everything you thought you
    did. Once the bug looks correct, hit **Submit**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **预览** 按钮来确认你包含了所有内容。确认无误后，点击 **提交**。
- en: '***After Submitting***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提交后***'
- en: You’ll shortly receive an email stating that you’re now the proud owner of bug
    number such-and-such. Any response you make to that email gets attached to that
    bug, so long as you don’t change the subject.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 很快你会收到一封电子邮件，通知你现在是某个 bug 编号的骄傲拥有者。你对该邮件的任何回应都会附加到该 bug 上，只要你不更改主题。
- en: A high percentage of bugs that include the proper information get closed quickly.
    Complex or elusive bugs might take longer, but if you provide enough detail, you’ll
    see updates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 包含正确信息的 bug 报告有很高的几率会迅速关闭。复杂或难以捉摸的 bug 可能需要更长时间，但只要你提供了足够的细节，就会看到更新。
- en: If it seems that your bug report has been forgotten, drop a note to the appropriate
    mailing list with your bug number, a brief explanation of the issue, and a sentence
    or two on why it’s important. FreeBSD is a volunteer effort, and it’s possible
    that something happened to the person who would normally handle that bug report.
    While many FreeBSD developers are professional programmers, for many of them,
    this is still a hobby that must take a backseat to sick kids or the big work deadline.
    If nothing else, hire a developer on a contract basis to address your particular
    issue.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 bug 报告似乎被遗忘了，可以向相应的邮件列表发送一封邮件，提供 bug 编号、简要说明问题及为什么该问题很重要。FreeBSD 是一个志愿者项目，可能处理你
    bug 报告的人发生了什么事情。尽管许多 FreeBSD 开发者是专业程序员，但对他们中的许多人来说，这仍然是一个爱好，必须让位于生病的孩子或紧迫的工作截止日期。如果其他方法都行不通，可以雇佣开发者按合同方式来解决你的特定问题。
- en: If you file a notably vexing bug, a FreeBSD developer will probably ask you
    for more information. Provide it as quickly and thoroughly as possible. If you
    don’t understand what they’re asking for, spend some time researching and then
    ask. Most developers are happy to provide pointers to a willing and basically
    competent partner, especially if you can help them improve their code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提交了一个特别棘手的 bug，FreeBSD 开发者可能会要求你提供更多信息。尽可能快速且全面地提供这些信息。如果你不理解他们的要求，可以花些时间研究后再询问。大多数开发者都很乐意为一个有意愿且基本称职的合作伙伴提供指点，尤其是当你能帮助他们改进代码时。
- en: 'I’ve lost count of how many FreeBSD bugs I’ve filed. I tend to file either
    trivial or serious bugs, such as documentation errors and kernel panics, but very
    little in between. Most were solved and/or committed and then closed. The odd
    ones were mostly trivial goofs on documentation that lives under */usr/src/contrib*,
    an area where the FreeBSD Project specifically disavows responsibility for minor
    fixes. If a doofus like me can get over 90 percent of his bugs successfully closed,
    anyone can. Be warned, however: if you submit enough correct patches, you’ll find
    that the committers you work with will start to talk about you behind your back.
    Eventually, they’ll grow tired of acting as the secretary for your high-quality
    work and offer you commit access. If you refuse, they’ll offer more insistently.
    Don’t worry; becoming a committer isn’t that painful. The rumors that the FreeBSD
    Project initiation ritual involves a bunch of Danes with axes behind a bike shed
    are completely untrue. Mostly.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经数不清提交过多少个FreeBSD错误报告了。我倾向于提交些微不足道或严重的错误，比如文档错误和内核崩溃，但中间的错误很少。大多数问题已经被解决或提交并关闭。那些奇怪的问题大多是文档上的小错误，位于*/usr/src/contrib*目录下，这个区域是FreeBSD项目明确不负责修复小问题的地方。如果像我这样的人能成功关闭超过90%的错误报告，任何人都可以。值得注意的是，如果你提交了足够多正确的补丁，你会发现与你合作的提交者开始在你背后谈论你。最终，他们会厌倦为你的高质量工作做秘书，并会给你提交权限。如果你拒绝，他们会更坚持地提出。如果你担心的话，不用担心；成为一个提交者并不那么痛苦。关于FreeBSD项目的入会仪式有传闻，说是有一群丹麦人拿着斧头在自行车棚后面等着你，但这些完全不是真的。大多数情况下。
- en: Keep filing good bug reports anyway; that’s the only way FreeBSD improves!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，还是要继续提交良好的错误报告；这是FreeBSD改进的唯一途径！
- en: The worst sort of bug to deal with is a full-on system crash. Let’s talk about
    how to get information from one.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最难处理的错误类型是完全崩溃的系统。我们来谈谈如何从中获取信息。
- en: '**System Panics**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**系统崩溃**'
- en: A *panic* is when the operating system completely stops working. All systems,
    from the network stack to the disk drive, stop working. A system chooses to panic,
    or completely stop working, when the kernel faces an unresolvable conflict. If
    the system achieves a condition that it doesn’t know how to handle, or if it fails
    its own internal consistency checks, it throws up its hands and says, “I don’t
    know what to do!” A panic is the kernel’s version of malicious obedience.^([2](footnote.xhtml#ch24fn2))
    Production versions of FreeBSD are increasingly difficult to panic, but it can
    still happen. The easiest way to panic a system is to do something daft, like
    yank out a non–hot swappable hard drive while it’s in use. Panics aren’t uncommon
    when running -current; they’re not frequent, mind you, but they’re not exotic
    rarities.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*崩溃*是指操作系统完全停止工作。所有系统，从网络堆栈到磁盘驱动器，都停止工作。当内核面临无法解决的冲突时，系统会选择崩溃，或完全停止工作。如果系统达到了它不知道如何处理的条件，或者它未能通过内部一致性检查，它就会举手表示：“我不知道该怎么办！”崩溃是内核的恶意顺从版本。^([2](footnote.xhtml#ch24fn2))
    FreeBSD的生产版本越来越难以崩溃，但它仍然可能发生。让系统崩溃的最简单方法是做些愚蠢的事，比如在使用中拔掉一个不可热插拔的硬盘。运行-current时，崩溃并不罕见；虽然它们不频繁，但也不是非常稀有的情况。'
- en: FreeBSD is very complex, and neither its royal blood lineage nor the open source
    development process can protect it from all bugs. Fortunately, that heritage and
    the development process do give you the tools you need to provide the information
    for other people to debug your problem. You might begin with a cryptic error code,
    but you’ll quickly learn that your string of garbage characters means something
    to someone.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD非常复杂，它的贵族血统和开源开发过程都无法保护它免受所有错误的影响。幸运的是，这种遗产和开发过程确实为你提供了调试问题所需的信息工具。你可能会从一个晦涩的错误代码开始，但你很快会发现，这串乱码字符对某些人来说是有意义的。
- en: A panicking kernel can copy critical information into a *crash dump*. The crash
    dump contains enough information about the panic that hopefully a developer can
    identify and fix the underlying problem. Configure every system to capture crash
    dumps before you allow them to enter production. FreeBSD can capture crash dumps
    with an install-time setting, but if you reconfigure your server or have unique
    disk partitioning, you’ll want to confirm that crash dumps still work. This precaution
    will be wasted on most of your servers but pays off when something explodes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 发生 panic 的内核可以将关键的信息复制到 *crash dump*（崩溃转储）中。崩溃转储包含了足够的 panic 信息，开发人员希望通过它能够识别并修复底层问题。配置每个系统以捕获崩溃转储，然后再将它们投入生产。FreeBSD
    可以通过安装时的设置捕获崩溃转储，但如果你重新配置了服务器或有独特的磁盘分区方式，你需要确认崩溃转储仍然有效。这个预防措施对大多数服务器来说可能没什么用，但当某些事情爆炸时，它将带来巨大的回报。
- en: '**Recognizing Panics**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**识别 Panic**'
- en: 'When a system panics, it stops running all programs, writing to the disk, and
    listening to the network. On any version of FreeBSD except -current, a panicking
    system automatically reboots. Not all unexplained reboots are panics—bad hardware,
    such as a failing power supply or cruddy memory, can cause a reboot without any
    sort of log or console message. If you’re running -current, though, a panic will
    cause a console message much like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统发生 panic 时，它会停止运行所有程序、停止写入磁盘并停止监听网络。在除 -current 外的任何版本的 FreeBSD 中，发生 panic
    后系统会自动重启。并非所有无解释的重启都是 panic——坏硬件，比如故障的电源或劣质内存，可能会导致重启，而没有任何日志或控制台信息。然而，如果你运行的是
    -current，panic 会在控制台中显示类似这样的信息：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The only part of this message that seems even vaguely sensible to me is the
    first line. I unmounted an SMB filesystem and got this panic message. The first
    line mentions `smbfs`, `netsmb`, and `smb_conn`, which seem pretty SMB-ish to
    me.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这条信息中唯一似乎有些道理的部分是第一行。我卸载了一个 SMB 文件系统，结果得到了这个 panic 信息。第一行提到了 `smbfs`、`netsmb`
    和 `smb_conn`，这些看起来都很像 SMB 相关的内容。
- en: The `db>` at the bottom is a debugger command prompt. Hit ENTER a couple of
    times and you’ll see the debugger respond; you can enter commands. Debugger instructions
    aren’t Unix commands, but they help you extract more information out of the system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 底部的 `db>` 是调试器的命令提示符。按下 ENTER 几次，你会看到调试器作出回应；你可以输入命令。调试器指令不是 Unix 命令，但它们有助于你从系统中提取更多信息。
- en: '**Responding to a Panic**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**响应 Panic**'
- en: If you get a panic, the first thing to do is get a copy of the panic message.
    Since FreeBSD is no longer running, the standard methods for copying data from
    your machine won’t work—you can’t SSH in, and script(1) is no longer viable. The
    console might even be completely locked up and unresponsive instead of being in
    the debugger. In any event, you must have that error message.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到 panic，首先要做的就是获取 panic 信息的副本。由于 FreeBSD 已经不再运行，标准的数据复制方法将无法工作——你不能通过 SSH
    连接，也不能使用 `script(1)`。控制台可能完全卡住，不再响应，而不是处于调试器中。不管怎样，你必须获得那个错误信息。
- en: Back in the bad old days of the 1990s, FreeBSD didn’t automatically reboot after
    a panic; originally, it just sat there displaying the panic message. The first
    time I saw a panic, I scrambled for paper and pen. Eventually, I found an old
    envelope and a broken stub of pencil that made marks if you held it at just the
    right angle and crawled between the server rack and the rough brick wall. I balanced
    the six-inch black-and-white monitor in one hand, and with my other hand, I held
    the envelope against the wall. Apparently, I grow a third hand under duress because
    I recorded the panic message on the envelope somehow. Finally, scraped and cramped,
    I slithered back out of the rack and victoriously typed the whole mess into an
    email. Surely the FreeBSD Project’s Panic Emergency Response Team would be able
    to look at this garbage and tell me exactly what had happened.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1990 年代的糟糕年代里，FreeBSD 在遇到 panic 后并不会自动重启；最初，它只是停在那里显示 panic 信息。我第一次看到 panic
    时，慌忙寻找纸和笔。最终，我找到了一只旧信封和一只断了的铅笔，只有在以恰当角度握住时，它才会留下痕迹，然后我趴在服务器架和粗糙的砖墙之间。用一只手平衡住六英寸的黑白显示器，另一只手把信封贴在墙上。显然，在极度紧张的情况下，我长出了第三只手，因为我设法在信封上记录了
    panic 信息。最后，身心疲惫，我从机架里滑出来，得意地把所有信息输入到邮件中。相信 FreeBSD 项目的 Panic 应急响应团队一定能够查看这些垃圾信息，告诉我到底发生了什么。
- en: 'I quickly learned that FreeBSD has no elite PERT standing by to take my problem
    report. Instead, I got a lonesome email: “Can you send a backtrace?” When I asked
    how, I was directed to a man page. (Drag yourself all the way back to [Chapter
    1](ch01.xhtml#ch01).) Fortunately, the panic was easily reproducible—the only
    thing that had to happen to recreate the issue was for a customer to log in to
    the system. I spent the rest of the day struggling to master serial consoles and
    core dumps.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快意识到，FreeBSD 并没有一个精英的 PERT 团队随时准备接受我的问题报告。相反，我收到了一封孤单的电子邮件：“你能发送一个回溯信息吗？”当我询问如何操作时，系统将我指引到了一份手册页。（拖自己一路回到
    [第一章](ch01.xhtml#ch01)。）幸运的是，panic 很容易重现——要重现这个问题，唯一需要做的事情就是让一个客户登录系统。我花了一天的时间，艰难地掌握了串行控制台和核心转储。
- en: The problem with the panic message on my envelope was that it gave only a tiny
    scrap of the story. It was so vague, in fact, that it was like describing a stolen
    car as “red, with a scratch on the fender.” If you don’t give the car’s make,
    model, VIN, and license plate number, you can’t expect the police to make much
    headway. Similarly, without much more information from your crashing kernel, the
    FreeBSD developers can’t catch the criminal code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我的信封上的 panic 信息的问题在于，它只提供了故事的一小部分。事实上，它模糊不清，像是把一辆被盗的车描述为“红色，车翼上有一道刮痕”。如果你不提供车的品牌、型号、VIN
    号和车牌号，你不可能指望警察能够取得什么进展。同样，如果没有更多来自崩溃内核的信息，FreeBSD 开发人员也无法抓住那段有问题的代码。
- en: The good news is, panic handling has vastly improved since those days. FreeBSD
    can automatically record crash dumps and capture everything about a panic. There’s
    even a toggle in the installer to enable it. I highly recommend testing the panic
    capture before putting a machine into production, however. This way, if you get
    a panic, you’re ready and you’ll be able to easily file a complete problem report.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，panic 处理在这些年里有了很大改进。FreeBSD 可以自动记录崩溃转储并捕捉有关 panic 的所有信息。安装程序中甚至有一个开关可以启用它。不过，我强烈建议在将机器投入生产之前先测试
    panic 捕获功能。这样，如果发生 panic，你就准备好了，并且能够轻松地提交完整的问题报告。
- en: '***Preparations***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***准备工作***'
- en: Configuring crash dumps requires telling FreeBSD which swap device to save the
    dump on, through the `dumpdev` */etc/rc.conf* variable. If you set `dumpdev` to
    `AUTO`, the kernel will automatically save the dump to the first swap device.
    You can specify a different swap device if needed, but the whole dump must fit
    in a single swap device. If your regular swap space doesn’t have enough space
    to hold the dump, add a disk to get sufficient swap space and set `dumpdev` to
    that partition.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 配置崩溃转储需要通过 `dumpdev` */etc/rc.conf* 变量告诉 FreeBSD 将转储保存到哪个交换设备上。如果将 `dumpdev`
    设置为 `AUTO`，内核会自动将转储保存到第一个交换设备。如果需要，你可以指定一个不同的交换设备，但整个转储必须能放入一个交换设备中。如果常规的交换空间不足以容纳转储，请添加一个磁盘以获得足够的交换空间，并将
    `dumpdev` 设置为该分区。
- en: '***The Crash Dump in Action***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***崩溃转储的实际操作***'
- en: When a system configured to capture panics crashes, it saves a copy of the kernel
    memory. The copy is called a *dump*. The system can’t save the dump straight to
    a file. The crashed kernel doesn’t know anything about filesystems, for one thing,
    and the filesystem might be corrupt or a write could corrupt it. A crashed kernel
    understands partitions, however, so it can write the dump to a partition. Most
    FreeBSD hosts have readily available scratch space—the swap partition. FreeBSD
    defaults to dumping on the first swap partition on the system, placing the dump
    as close to the end of the partition as possible. After the dump, the computer
    reboots.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个配置为捕捉 panic 的系统崩溃时，它会保存内核内存的副本。这个副本被称为 *dump*（转储）。系统无法将 dump 直接保存到文件中。崩溃的内核根本不知道文件系统的事情，其一，文件系统可能已经损坏，或者写入操作可能会破坏它。然而，崩溃的内核理解分区，因此它可以将
    dump 写入到一个分区。大多数 FreeBSD 主机都有现成的临时空间——交换分区。FreeBSD 默认将 dump 存储在系统的第一个交换分区中，并将
    dump 放置在分区的尽可能后面。完成 dump 后，计算机会重新启动。
- en: After a panic, a host’s filesystems will almost certainly be dirty. Perhaps
    they’re ZFS or they use soft updates journaling, but the system still must recover
    from the journal or roll back to the last successful ZFS transaction group. Cleaning
    a filesystem with fsck(8) can use a lot of memory, so FreeBSD must enable swap
    before running fsck(8). Hopefully, you have enough memory for fsck(8) to not require
    swapping, and if swapping is necessary, hopefully you have enough swap space to
    avoid overwriting the dump file lurking at the end of the swap partition. Worst
    case, you could boot into single-user mode, enable swapping to partitions that
    don’t have the dump, clean up a filesystem to save the dump to, and then manually
    run savecore(8).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生panic后，主机的文件系统几乎可以肯定会处于脏状态。它们可能是ZFS文件系统或使用软更新日志，但系统仍然必须从日志中恢复或回滚到最后一个成功的ZFS事务组。使用fsck(8)清理文件系统可能会占用大量内存，因此FreeBSD必须在运行fsck(8)之前启用交换空间。希望你有足够的内存，使得fsck(8)不需要交换空间，如果需要交换空间，也希望你有足够的交换空间，以避免覆盖位于交换分区末尾的转储文件。最坏的情况下，你可以进入单用户模式，启用交换到没有转储的分区，清理一个文件系统来保存转储文件，然后手动运行savecore(8)。
- en: Once FreeBSD has a useful filesystem where it can save a core dump, it checks
    the swap partition for a dump. If it finds a core dump, FreeBSD runs savecore(8)
    to copy the dump out of swap and into a proper filesystem file, runs crashinfo(8)
    to gather information from the dump, clears the dump from swap space, and continues
    rebooting. You now have a kernel core file usable for debugging.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦FreeBSD有了一个可以保存核心转储的有效文件系统，它会检查交换分区是否有转储文件。如果找到核心转储，FreeBSD会运行savecore(8)将转储从交换分区复制到适当的文件系统文件中，运行crashinfo(8)从转储中收集信息，清除交换分区中的转储数据，然后继续重启。现在，你将拥有一个可用于调试的内核核心文件。
- en: The savecore(8) automatically places kernel dumps in */var/crash*. Each crash
    is in a file called *vmcore* with a trailing period and number. The first panic
    is *vmcore.0*, the second *vmcore.1*, and so on. FreeBSD defaults to keeping the
    most recent 10 crash dumps. The file *vmcore.last* always points to the most recent
    crash dump.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: savecore(8)会自动将内核转储放置在*/var/crash*目录中。每个崩溃都有一个名为*vmcore*的文件，后跟一个点和数字。第一次崩溃是*vmcore.0*，第二次是*vmcore.1*，以此类推。FreeBSD默认保留最近的10个崩溃转储。文件*vmcore.last*始终指向最近的崩溃转储。
- en: 'If your */var* partition is not large enough to contain the dump, choose a
    different directory with the `dumpdir` variable in *rc.conf* :'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的*/var*分区不够大以容纳转储，可以在*rc.conf*中通过`dumpdir`变量选择其他目录：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While savecore(8) also supports a few other options, such as compression, they
    aren’t usually necessary on modern systems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然savecore(8)还支持一些其他选项，如压缩，但在现代系统中通常不需要使用这些选项。
- en: FreeBSD defaults to running crashinfo(8) on each recovered crash dump. The crashinfo(8)
    program runs a series of debugger scripts to gather information from the panic,
    storing it in a convenient text file, *core.txt.0*. This information includes
    a panic backtrace, process list, and a whole bunch of virtual memory statistics.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD默认在每个恢复的崩溃转储上运行crashinfo(8)。crashinfo(8)程序运行一系列调试器脚本，从panic中收集信息，并将其存储在一个方便的文本文件*core.txt.0*中。这些信息包括panic回溯、进程列表以及大量的虚拟内存统计信息。
- en: '**SERIAL CONSOLES AND PANICS**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**串口控制台与panic**'
- en: While a serial console isn’t strictly necessary for panic debugging, it can
    be invaluable when dealing with a stuck machine. While a Java applet that grants
    remote access is better than nothing, the ability to capture everything with script(1)
    makes serial consoles worthwhile. If you really want to be prepared for a panic,
    make sure all of your machines have serial consoles or at least dual consoles.
    If possible, log the output of your serial consoles; this way, you’ll get the
    panic message even if the system isn’t configured for crash dumps. If your laptop
    doesn’t have a serial port, take a photograph of the panic message and attach
    it to the bug report.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然串口控制台在panic调试中不是严格必要的，但在处理卡住的机器时，它是非常有价值的。虽然提供远程访问的Java小程序总比没有好，但能够使用script(1)捕获所有内容使得串口控制台非常值得使用。如果你真的想为panic做好准备，确保你的所有机器都有串口控制台，或者至少有双重控制台。如果可能，记录串口控制台的输出；这样，即使系统未配置崩溃转储，你也能获取到panic消息。如果你的笔记本电脑没有串口，可以拍下panic消息的照片并附加到故障报告中。
- en: '***Testing Crash Dumps***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***崩溃转储测试***'
- en: You’ve set the `savecore` *rc.conf* option, so everything should work. Any time
    you hear the phrase “should work,” immediately ask, “How can I verify that it
    does work?” Force FreeBSD to panic by setting the sysctl `debug.kdb.panic` to
    any integer above 0\. While this is the ugliest way to reboot a machine ever,
    it does make the host run through the panic and core-preservation process. Shut
    down any active processes that might corrupt data if interrupted, such as databases,
    and deliberately trigger a panic.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经设置了`savecore` *rc.conf*选项，所以一切应该正常工作。每当你听到“应该正常工作”这个词时，立即问：“我怎么验证它是否正常工作？”通过将sysctl
    `debug.kdb.panic` 设置为大于0的任意整数强制FreeBSD崩溃。虽然这是重启机器最丑陋的方式，但它确实让主机经历崩溃和核心保存过程。关闭任何可能在中断时损坏数据的活跃进程，例如数据库，并故意触发崩溃。
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You’ll see the panic message flash on the console, followed by the host’s progress
    in dumping core to swap space. If you watch the reboot messages, you should see
    a quick mention of saving core files. When you can log into the machine again,
    take a look in */var/crash*. You’ll find three files: *info.0*, *vmcore.0*, and
    *core.txt.0*.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到控制台上闪现出崩溃信息，随后是主机将核心转储到交换空间的进度。如果你观察重启信息，应该会看到快速提到保存核心文件。当你再次登录到机器时，查看*/var/crash*目录。你会找到三个文件：*info.0*、*vmcore.0*和*core.txt.0*。
- en: The *info.0* text file describes the dump recovery process. It includes the
    hostname, the architecture, the panic message, and more. The most important detail
    is the last line, however.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*info.0*文本文件描述了转储恢复过程。它包含主机名、架构、崩溃信息等。然而，最重要的细节是最后一行。'
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This dump is usable. You can proceed with debugging.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个转储是可用的。你可以继续调试了。
- en: The file *vmcore.0* contains the memory dump in binary form. It should be anywhere
    from a couple hundred megabytes to gigabytes, depending on what your host was
    doing when it panicked.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*vmcore.0*包含二进制形式的内存转储。它的大小应该在几百兆字节到几GB之间，具体取决于当主机崩溃时它正在做什么。
- en: The file *core.txt.0* contains the panic information from vmcore.0\. When you
    file a problem report, include the *core.txt* file for your panic.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*core.txt.0*包含来自vmcore.0的崩溃信息。当你提交问题报告时，请包含你的崩溃的*core.txt*文件。
- en: Congratulations—you have a core dump! When your host actually panics, you can
    get information from the dump. Sometimes, though, the panic gets a little more
    complicated.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜——你有了一个核心转储！当主机发生真正的崩溃时，你可以从转储中获取信息。然而，有时崩溃可能会变得更加复杂。
- en: '***Crash Dump Types***'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***崩溃转储类型***'
- en: 'FreeBSD supports three different sorts of crash dumps: minidumps, full dumps,
    and textdumps. All get written to swap space at a panic and copied to files at
    boot.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD支持三种不同类型的崩溃转储：迷你转储、完整转储和文本转储。所有转储都在发生崩溃时写入交换空间，并在启动时复制到文件。
- en: A *minidump*, the current default dump format, contains the memory used by the
    kernel. While the kernel itself isn’t that big, you’ll also get the UFS buffer
    cache. The swap space needed should be only a fraction of your system memory,
    but it’s possible that it could be almost as large as your system memory, depending
    on what your system was doing at the time. The dump excludes both memory not used
    by the kernel and the ZFS ARC.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*迷你转储*，当前默认的转储格式，包含了内核使用的内存。虽然内核本身并不大，但你还会得到UFS缓冲区缓存。所需的交换空间应该只占系统内存的一小部分，但也有可能几乎与系统内存一样大，具体取决于系统当时正在执行的任务。转储不包括内核未使用的内存以及ZFS
    ARC。'
- en: A *full dump* contains every scrap of memory the system has. If it’s in RAM,
    it gets dumped. The whole kernel memory? Yep. Your web server’s buffer? Passwords?
    It’s all in there. A full dump takes up as much swap space as your host has memory.
    Enable full dumps by setting the sysctl `debug.minidump` to 0\. Enable full dumps
    only if a FreeBSD developer asks you to do so to help debug a particularly intractable
    panic.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*完整转储*包含系统拥有的所有内存。如果它在RAM中，它就会被转储。整个内核内存？没错。你的网页服务器的缓冲区？密码？都在里面。完整转储占用的交换空间与主机的内存大小相同。通过设置sysctl
    `debug.minidump` 为 0来启用完整转储。仅在FreeBSD开发人员要求你这样做，以帮助调试特别难以解决的崩溃时才启用完整转储。'
- en: A *textdump* is an advanced type of dump that contains only the information
    captured by the ddb(8) debugger and associated scripts. It’s available only on
    hosts with the DDB option in their kernel—as in, not the GENERIC kernel of any
    release. It’s in the -current GENERIC kernel, though, so you brave souls running
    -current can take advantage of textdumps.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*文本转储*是一种高级转储类型，仅包含由ddb(8)调试器和相关脚本捕获的信息。它仅在内核中启用了DDB选项的主机上可用——即，并非任何版本的通用内核。但它包含在-current通用内核中，因此勇敢的-you
    souls 使用-current 的用户可以利用文本转储。'
- en: '***Textdumps***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文本转储***'
- en: A textdump takes advantage of the ddb(8) debugger to run scripts on a panicked
    kernel. The default scripts in */etc/ddb.conf* pull the most commonly needed information
    out of the kernel and then dump that information to disk. While crashinfo(8) runs
    on a captured memory image, though, ddb(8) runs on the panicked kernel. An experienced
    developer can take advantage of this. You might not be an experienced developer,
    but if you’ve made it this far into this book, you can follow directions and edit
    */etc/ddb.conf*, and that’s close enough.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 文本转储利用 ddb(8) 调试器在发生 panic 的内核上运行脚本。*/etc/ddb.conf* 中的默认脚本从内核中提取最常用的信息，并将这些信息转储到磁盘中。尽管
    crashinfo(8) 是在捕获的内存镜像上运行的，但 ddb(8) 是在发生 panic 的内核上运行的。一位有经验的开发者可以利用这一点。你可能不是一个经验丰富的开发者，但如果你已经读到这本书的这一部分，你应该能够按照指示操作并编辑
    */etc/ddb.conf*，这就足够了。
- en: Enable textdumps with the `ddb_enable` *rc.conf* option.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ddb_enable` *rc.conf* 选项启用文本转储。
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At system boot, the kernel debugger ddb(8) reads the debugging scripts from
    */etc/ddb.conf* and loads them into the kernel. The debugger runs those scripts
    at a panic. The scripts switch the kernel to textdump mode, call several commands
    to gather useful information, write that data to swap space, and reboot the host.
    Textdumps aren’t as useful as minidumps, but they fit in much less space.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统启动时，内核调试器 ddb(8) 会从 */etc/ddb.conf* 读取调试脚本并将其加载到内核中。调试器会在发生 panic 时运行这些脚本。脚本会将内核切换到文本转储模式，调用多个命令收集有用信息，将这些数据写入交换空间，并重启主机。文本转储不像小转储那样有用，但它们占用的空间要小得多。
- en: A complete textdump shows up in */var/crash* as a tar file, *textdump.tar.0*.
    The textdump number gets incremented at each panic, and the file *textdump.tar.last*
    always points to the most recent textdump. The textdump(4) man page describes
    each of the files found inside the tarball, but as a user, what you really need
    to know is that you attach the whole thing to your bug report.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文本转储将以 tar 文件的形式出现在 */var/crash* 目录下，文件名为 *textdump.tar.0*。每次 panic 后，文本转储的编号会增加，文件
    *textdump.tar.last* 始终指向最近的文本转储。textdump(4) 手册页描述了 tar 包内每个文件的内容，但作为用户，你需要知道的是，你应该将整个文件附加到你的
    bug 报告中。
- en: '***Dumps and Security***'
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***转储与安全***'
- en: The *vmcore* file contains everything in your kernel memory at the time of the
    panic, which might include sensitive security information. Someone could conceivably
    use this information to break into your system. A FreeBSD developer might request
    a copy of the *vmcore* file and the bad kernel for many legitimate reasons; it
    makes debugging easier and can save countless rounds of email. Still, carefully
    consider the potential consequences of someone having this information. If you
    don’t recognize the person who asks or if you don’t trust him, don’t send the
    file and *don’t* feel bad about it. Take the time to research any developer who
    wants your vmcore. Even if they seem reputable and respected, it’s perfectly acceptable
    if you decide to work via emails back and forth rather than offer up the vmcore.
    Anyone qualified to work on your crash understands why you hesitate to send a
    vmcore, and anyone who tries to shame you into sending it probably shouldn’t have
    it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*vmcore* 文件包含 panic 时你内核内存中的所有内容，其中可能包括敏感的安全信息。有人可能会利用这些信息入侵你的系统。一位 FreeBSD
    开发者可能会因为很多合法的原因请求获取 *vmcore* 文件和有问题的内核；这会使调试变得更加容易，并且可以节省大量的邮件来回交流。尽管如此，仍然需要谨慎考虑某人获得这些信息可能带来的后果。如果你不认识请求者，或者不信任他，不要发送该文件，并且*不要*对此感到内疚。花时间研究任何请求你
    vmcore 的开发者。即使他们看起来值得信赖和有声望，如果你决定通过邮件来回沟通，而不是直接提供 vmcore，也是完全可以接受的。任何有资格处理你崩溃问题的开发者都明白你为何犹豫是否发送
    vmcore，而任何试图让你感到羞愧并迫使你发送它的人，可能根本不应该获得它。'
- en: Posting a link to your vmcore on the public internet offers the guts of your
    server to the whole world. Don’t do that.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的 vmcore 链接发布到公共互联网，相当于将你服务器的核心暴露给全世界。不要这样做。
- en: 'If the panic is reproducible, however, you can cold-boot the system to single-user
    mode and trigger the panic immediately. If the system never starts any programs
    containing confidential information and nobody types any passwords into the system,
    the dump can’t contain that information. Reproducing a panic in single-user mode
    generates a security information–free, sanitized dump. Boot into single-user mode
    and then run:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果 panic 是可重现的，你可以通过冷启动系统进入单用户模式并立即触发 panic。如果系统没有启动任何包含机密信息的程序，并且没有人向系统输入任何密码，那么转储中就不会包含这些信息。在单用户模式下重现
    panic 会生成一个不包含安全信息的、已清理的转储。启动到单用户模式后，运行：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first command mounts the filesystems as read-only so that you won’t have
    to fsck(8) yet again after a panic. The second command tells FreeBSD where to
    put a dump. Finally, run the command that triggers the panic. Triggering the panic
    might require more than one command, but this should get a clean dump for you
    in most cases.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将文件系统挂载为只读，这样你就不必在恐慌之后再次运行fsck(8)了。第二个命令告诉FreeBSD将转储保存在哪里。最后，运行触发恐慌的命令。触发恐慌可能需要多个命令，但在大多数情况下，这应该能为你提供一个干净的转储。
- en: If your panic requires that you load confidential information into memory, that
    information will be present in the dump. If you can file a useful bug report,
    you’re among the FreeBSD elite. Congratulations!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的恐慌要求你将机密信息加载到内存中，那么这些信息将出现在转储中。如果你能提交一个有用的错误报告，你就是FreeBSD的精英。恭喜！
