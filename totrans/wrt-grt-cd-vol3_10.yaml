- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: MISCELLANEOUS UML DIAGRAMS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 杂项UML图表**
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: 'This chapter finishes up the book’s discussion of UML by describing five additional
    diagrams that are useful for UML documentation: component, package, deployment,
    composite structure, and statechart diagrams.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过描述五种额外的图表，完成了本书关于UML的讨论，这些图表对于UML文档非常有用：构件图、包图、部署图、复合结构图和状态图。
- en: '**8.1 Component Diagrams**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.1 构件图**'
- en: 'UML uses *component diagrams* to encapsulate reusable components such as libraries
    and frameworks. Though components are generally larger and have more responsibilities
    than classes, they support much of the same functionality as classes, including:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: UML使用*构件图*来封装可重用的构件，如库和框架。尽管构件通常比类更大，责任也更多，但它们支持与类相同的许多功能，包括：
- en: Generalization and association with other classes and components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他类和构件的泛化与关联
- en: Operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: Interfaces
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: UML defines components using a rectangle with the «component» stereo­type (see
    [Figure 8-1](ch08.xhtml#ch8fig1)). Some users (and CASE tools) also use the stereotype
    «subsystem» to denote components.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: UML使用矩形和«component»构件标注来定义构件（参见[图8-1](ch08.xhtml#ch8fig1)）。一些用户（和CASE工具）也使用«subsystem»标注来表示构件。
- en: '![image](Images/fig8-1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-1.jpg)'
- en: '*Figure 8-1: A UML component*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-1：UML构件*'
- en: 'Components use interfaces (or protocols) to encourage encapsulation and loose
    coupling. This improves the usability of a component by making its design independent
    of external objects. The component and the rest of the system communicate via
    two types of predefined interfaces: provided and required. A *provided* interface
    is one that the component provides and that external code can use. A *required*
    interface must be provided for the component by external code. This could be an
    external function that the component invokes.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构件使用接口（或协议）来促进封装和松耦合。通过使设计独立于外部对象，接口提高了构件的可用性。构件与系统的其余部分通过两种预定义接口进行通信：提供接口和需求接口。*提供的*接口是构件提供的，外部代码可以使用它。*需求的*接口则是外部代码为构件提供的接口，这可能是构件调用的外部函数。
- en: 'As you would expect from UML by now, there’s more than one way to draw components:
    using *stereotype notation* (of which there are two versions) or *ball and socket
    notation*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在从UML中所期望的那样，绘制构件的方式不止一种：可以使用*构件标注*（其中有两种版本）或*球窝标注*。
- en: The most compact way to represent a UML component with interfaces is probably
    the simple form of stereotype notation shown in [Figure 8-2](ch08.xhtml#ch8fig2),
    which lists the interfaces inside the component.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表示具有接口的UML构件最简洁的方式可能是[图8-2](ch08.xhtml#ch8fig2)中所示的简单构件标注形式，其中列出了构件内部的接口。
- en: '![image](Images/fig8-2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-2.jpg)'
- en: '*Figure 8-2: A simple form of stereotype notation*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-2：构件标注的简单形式*'
- en: '[Figure 8-3](ch08.xhtml#ch8fig3) shows a more complete (though bulkier) version
    of stereotype notation with individual `interface` objects in the diagram. This
    option is better when you want to list the individual attributes of the interfaces.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-3](ch08.xhtml#ch8fig3)显示了更完整的（尽管较为庞大的）构件标注形式，图中有单独的`interface`对象。当你想列出接口的单独属性时，这种选项更为适用。'
- en: '![image](Images/fig8-3.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-3.jpg)'
- en: '*Figure 8-3: A more complete form of stereotype notation*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-3：更完整的构件标注形式*'
- en: Ball and socket notation provides an alternative to the stereotype notation,
    using a circle icon (the *ball*) to represent a provided interface and a half-circle
    (the *socket*) to represent required interfaces (see [Figure 8-4](ch08.xhtml#ch8fig4)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 球窝标注提供了一种替代构件标注的方式，使用圆形图标（*球*）表示提供的接口，使用半圆形（*插座*）表示需要的接口（参见[图8-4](ch08.xhtml#ch8fig4)）。
- en: '![image](Images/fig8-4.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-4.jpg)'
- en: '*Figure 8-4: Ball and socket notation*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-4：球窝标注*'
- en: The nice thing about ball and socket notation is that connecting components
    can be visually appealing (see [Figure 8-5](ch08.xhtml#ch8fig5)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 球窝标注的优点在于，连接的构件在视觉上可以更加美观（参见[图8-5](ch08.xhtml#ch8fig5)）。
- en: '![image](Images/fig8-5.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-5.jpg)'
- en: '*Figure 8-5: Connecting two ball and socket components*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-5：连接两个球窝构件*'
- en: As you can see, the required interface of `component1` connects nicely with
    the provided interface of `component2` in this diagram. But while ball and socket
    notation can be more compact and attractive than the stereotype notation, it doesn’t
    scale well beyond a few interfaces. As you add more provided and required interfaces,
    the stereotyped notation is often a better solution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`component1`的所需接口与`component2`的提供接口在此图中很好地连接在一起。但尽管球窝符号比刻板符号更加紧凑和吸引人，它在超出少数接口时扩展性较差。当你添加更多的提供和所需接口时，刻板符号通常是更好的解决方案。
- en: '**8.2 Package Diagrams**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.2 包图**'
- en: A UML package is a container for other UML items (including other packages).
    A UML package is the equivalent of a subdirectory in a filesystem, a namespace
    in C++ and C#, or packages in Java and Swift. To define a package in UML, you
    use a file folder icon with the package name attached (see [Figure 8-6](ch08.xhtml#ch8fig6)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: UML包是其他UML项（包括其他包）的容器。UML包相当于文件系统中的子目录、C++和C#中的命名空间，或者Java和Swift中的包。要在UML中定义一个包，可以使用带有包名的文件夹图标（参见[图8-6](ch08.xhtml#ch8fig6)）。
- en: '![image](Images/fig8-6.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-6.jpg)'
- en: '*Figure 8-6: A UML package*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-6：UML包*'
- en: For a more concrete example, let’s return to the pool monitor application. One
    useful package might be `sensors`, to contain classes/objects associated with,
    say, pH and salinity sensors. [Figure 8-7](ch08.xhtml#ch8fig7) shows what this
    package might look like in UML. The *+* prefix on the `phSensors` and `saltSensor`
    objects indicates that these are public objects accessible outside the package.^([1](ch19_footnote.xhtml#ch08fn1))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以池监控应用为一个更具体的例子，可能有一个有用的包`sensors`，其中包含与pH和盐度传感器相关的类/对象。[图8-7](ch08.xhtml#ch8fig7)展示了该包在UML中的样子。`phSensors`和`saltSensor`对象前面的*+*前缀表示这些是可以在包外访问的公共对象。^([1](ch19_footnote.xhtml#ch08fn1))
- en: '![image](Images/fig8-7.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-7.jpg)'
- en: '*Figure 8-7: The sensors package*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-7：传感器包*'
- en: To reference (public) objects outside of a package, you use a name of the form
    packageName`::`objectName. For example, outside the `sensors` package you would
    use `sensors::pHSensor` and `sensors::saltSensor` to access the internal objects.
    If you have one package nested inside another, you could access objects in the
    innermost package using a sequence like outsidePackage`::`internalPackage`::`object.
    For example, suppose you have two nuclear power channels named NP and NPP (from
    the use case examples in [Chapter 4](ch04.xhtml)). You could create a package
    named `instruments` to hold the two packages `NP` and `NPP`. The `NP` and `NPP`
    packages could contain the objects directly associated with the NP and NPP instruments
    (see [Figure 8-8](ch08.xhtml#ch8fig8)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用包外的（公共）对象，可以使用`packageName`::`objectName`的形式。例如，在`sensors`包之外，你可以使用`sensors::pHSensor`和`sensors::saltSensor`来访问内部对象。如果一个包嵌套在另一个包中，你可以使用像`outsidePackage::internalPackage::object`这样的顺序来访问最内层包中的对象。例如，假设你有两个核电站通道，分别名为NP和NPP（来自[第4章](ch04.xhtml)中的用例示例）。你可以创建一个名为`instruments`的包来包含这两个包`NP`和`NPP`。`NP`和`NPP`包可以包含与NP和NPP仪器直接相关的对象（参见[图8-8](ch08.xhtml#ch8fig8)）。
- en: '![image](Images/fig8-8.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-8.jpg)'
- en: '*Figure 8-8: Nested packages*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-8：嵌套包*'
- en: Note that the `NP` and `NPP` packages both contain functions named `calibrate()`
    and `pctPwr()`. There is no ambiguity about which function you’re calling because
    outside these individual packages you have to use *qualified names* to access
    these functions. For example, outside the `instruments` package you’d have to
    use names like `instruments::NP::calibrate` and `instruments::NPP::calibrate`
    so that there is no confusion.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`NP`和`NPP`包都包含名为`calibrate()`和`pctPwr()`的函数。在这些包之外调用这些函数时不会产生歧义，因为你必须使用*限定名称*来访问这些函数。例如，在`instruments`包外，你需要使用类似`instruments::NP::calibrate`和`instruments::NPP::calibrate`这样的名称，以避免混淆。
- en: '**8.3 Deployment Diagrams**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.3 部署图**'
- en: Deployment diagrams present a physical view of a system. Physical objects include
    PCs, peripherals like printers and scanners, servers, plug-in interface boards,
    and displays.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 部署图呈现了系统的物理视图。物理对象包括PC、外设如打印机和扫描仪、服务器、插入式接口板和显示器。
- en: To represent physical objects, UML uses *nodes*, a 3D box image. Inside the
    box you place the stereotype «device» plus the name of the node. [Figure 8-9](ch08.xhtml#ch8fig9)
    provides a simple example from the DAQ data acquisition system. It shows a host
    PC connected to a DAQ_IF and a Plantation Productions’ PPDIO96 96-channel digital
    I/O board.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示物理对象，UML使用*节点*，即一个3D盒子图像。在盒子内部放置刻板印象«device»和节点名称。[图8-9](ch08.xhtml#ch8fig9)提供了一个来自DAQ数据采集系统的简单示例。它显示了一台主机PC与DAQ_IF和Plantation
    Productions的PPDIO96 96通道数字I/O板连接。
- en: '![image](Images/fig8-9.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-9.jpg)'
- en: '*Figure 8-9: A deployment diagram*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-9：一个部署图*'
- en: 'One thing missing from this figure is the actual software installed on the
    system. In this system, there are likely to be at least two application programs
    running: a program running on the host PC that communicates with the DAQ_IF module
    (let’s call it *daqtest.exe*) and the firmware program (*frmwr.hex*) running on
    the DAQ_IF board (which is likely the true software system the deployment diagram
    describes). [Figure 8-10](ch08.xhtml#ch8fig10) shows an expanded version with
    small icons denoting the software installed on the machines. Deployment diagrams
    use the stereotype «artifact» to denote binary machine code.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图中缺少的一个内容是系统中实际安装的软件。在这个系统中，可能至少有两个应用程序在运行：一个在主机PC上运行，负责与DAQ_IF模块通信（我们称之为*daqtest.exe*），另一个是运行在DAQ_IF板上的固件程序（*frmwr.hex*），它可能才是部署图所描述的真实软件系统。[图8-10](ch08.xhtml#ch8fig10)展示了一个扩展版，图中小图标标示了安装在各个机器上的软件。部署图使用刻板印象«artifact»来表示二进制机器代码。
- en: '![image](Images/fig8-10.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-10.jpg)'
- en: '*Figure 8-10: An expanded deployment diagram*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-10：一个扩展的部署图*'
- en: 'Note that the PPDIO96 board is directly controlled by the DAQ_IF board: there
    is no CPU on the PPDIO96 board and, therefore, there is no software loaded onto
    the PPDIO96.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，PPDIO96板是由DAQ_IF板直接控制的：PPDIO96板上没有CPU，因此也没有安装任何软件。
- en: There is actually quite a bit more to deployment diagrams, but this discussion
    will suffice for those we’ll need in this book. If you’re interested, see “[For
    More Information](ch08.xhtml#lev-8.7)” on [page 165](ch08.xhtml#page_165) for
    references that explain deployment diagrams in more detail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 部署图其实有更多内容，但本书中需要的内容已经足够。如果你有兴趣，可以查看 “[更多信息](ch08.xhtml#lev-8.7)” 在[第165页](ch08.xhtml#page_165)，其中有更详细的部署图参考资料。
- en: '**8.4 Composite Structure Diagrams**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.4 复合结构图**'
- en: In some instances, class and sequence diagrams cannot accurately depict the
    relationships and actions between components in some classes. Consider [Figure
    8-11](ch08.xhtml#ch8fig11), which illustrates a class for the PPDIO96.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，类图和顺序图无法准确描述一些类中组件之间的关系和动作。请参阅[图8-11](ch08.xhtml#ch8fig11)，它说明了PPDIO96的一个类。
- en: '![image](Images/fig8-11.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-11.jpg)'
- en: '*Figure 8-11: PPDIO96 class composition*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-11：PPDIO96类组成*'
- en: 'This class composition diagram tells us that the `PPDIO96` class contains (is
    composed of) two subclasses: `portInitialization` and `writePort`. What it does
    *not* tell us is how these two subclasses of `PPDIO96` interact with each other.
    For example, when you initialize a port via the `portInitialization` class, perhaps
    the `portInitialization` class also invokes a method in `writePort` to initialize
    that port with some default value (such as `0`). The bare class diagrams don’t
    show this, nor should they. Having `portIntialization` write a default value via
    a `writePort` invocation is probably only one of many different operations that
    could arise within `PPDIO96`. Any attempt to show allowed and possible internal
    communications within `PPDIO96` would produce a very messy, illegible diagram.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类组成图告诉我们，`PPDIO96`类包含（由）两个子类：`portInitialization`和`writePort`。它没有告诉我们的是这两个`PPDIO96`的子类如何相互作用。例如，当你通过`portInitialization`类初始化端口时，可能`portInitialization`类还会调用`writePort`中的一个方法，通过该方法将端口初始化为某个默认值（例如`0`）。裸类图并没有展示这一点，也不应该展示。让`portIntialization`通过`writePort`调用写入默认值，可能只是`PPDIO96`内部可能出现的众多不同操作之一。任何试图展示`PPDIO96`内部允许和可能的通讯方式，都会产生一个非常混乱、难以理解的图。
- en: Composite structure diagrams provide a solution by focusing only on those communication
    links of interest (it could be just one communication link, or a few, but generally
    not so many that the diagram becomes incomprehensible).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 复合结构图提供了解决方案，它只关注那些感兴趣的通信链接（可能只有一个通信链接，或者几个，但通常不会太多，以免图表变得难以理解）。
- en: A first (but problematic) attempt at a composite structure diagram is shown
    in [Figure 8-12](ch08.xhtml#ch8fig12).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-12](ch08.xhtml#ch8fig12)展示了一个初步（但有问题）的复合结构图。'
- en: '![image](Images/fig8-12.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-12.jpg)'
- en: '*Figure 8-12: Attempted composite structure diagram*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-12：尝试的复合结构图*'
- en: The problem with this diagram is that it doesn’t explicitly state which `writePort`
    object `portInitialization` is communicating with. Remember, classes are just
    generic *types*, whereas the actual communication takes place between explicitly
    instantiated *objects*. In an actual system the intent of [Figure 8-12](ch08.xhtml#ch8fig12)
    is probably better conveyed by [Figure 8-13](ch08.xhtml#ch8fig13).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该图的问题在于，它没有明确指出`portInitialization`与哪个`writePort`对象进行通信。请记住，类只是通用的*类型*，而实际的通信发生在显式实例化的*对象*之间。在实际系统中，[图8-12](ch08.xhtml#ch8fig12)的意图可能更好地通过[图8-13](ch08.xhtml#ch8fig13)来传达。
- en: '![image](Images/fig8-13.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-13.jpg)'
- en: '*Figure 8-13: Instantiated composite structure diagram*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-13：实例化的复合结构图*'
- en: However, neither [Figure 8-12](ch08.xhtml#ch8fig12) nor [Figure 8-13](ch08.xhtml#ch8fig13)
    implies that the `port``Initialization` and `writePort` instantiated objects belong
    specifically to the `PPDIO96` object. For example, if there are two sets of `PPDIO96`,
    `portInitialization`, and `writePort` objects, the topology in [Figure 8-14](ch08.xhtml#ch8fig14)
    is perfectly valid based on the class diagram in [Figure 8-12](ch08.xhtml#ch8fig12).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[图8-12](ch08.xhtml#ch8fig12)和[图8-13](ch08.xhtml#ch8fig13)都没有暗示`port``Initialization`和`writePort`实例化的对象特定属于`PPDIO96`对象。例如，如果有两组`PPDIO96`、`portInitialization`和`writePort`对象，那么[图8-14](ch08.xhtml#ch8fig14)中的拓扑结构在[图8-12](ch08.xhtml#ch8fig12)中的类图基础上是完全有效的。
- en: '![image](Images/fig8-14.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-14.jpg)'
- en: '*Figure 8-14: Weird, but legal, communication links*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-14：奇怪但合法的通信链接*'
- en: In this example, `i1` (which belongs to object `d1`) calls `w2` (which belongs
    to object `d2`) to write the digital value to its port; `i2` (which belongs to
    `d2`) calls `w1` to write its initial value to its port. This probably isn’t what
    the original designer had in mind, even though the generic composition structure
    diagram in [Figure 8-12](ch08.xhtml#ch8fig12) technically allows it. Although
    any reasonable programmer would immediately realize that `i1` should be invoking
    `w1` and `i2` should be invoking `w2`, the composite structure diagram doesn’t
    make this clear. Obviously, we want to eliminate as much ambiguity as possible
    in our designs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`i1`（属于对象`d1`）调用`w2`（属于对象`d2`）将数字值写入其端口；`i2`（属于`d2`）调用`w1`将其初始值写入其端口。这可能不是原始设计者的初衷，尽管[图8-12](ch08.xhtml#ch8fig12)中的通用复合结构图在技术上允许这样做。尽管任何合理的程序员都会立即意识到`i1`应该调用`w1`，而`i2`应该调用`w2`，但是复合结构图并没有明确这一点。显然，我们希望尽可能消除设计中的歧义。
- en: To correct this shortcoming, UML 2.0 provides (true) composite structure diagrams
    that incorporate the member attributes directly within the encapsulating class
    diagram, as shown in [Figure 8-15](ch08.xhtml#ch8fig15).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了纠正这个不足，UML 2.0提供了（真实的）复合结构图，它将成员属性直接包含在封装类图中，如[图8-15](ch08.xhtml#ch8fig15)所示。
- en: '![image](Images/fig8-15.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-15.jpg)'
- en: '*Figure 8-15: Composite structure diagram*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-15：复合结构图*'
- en: This diagram makes it clear that an instantiated object of `PPDIO96` will constrain
    the communication between the `portInitialization` and `writePort` classes to
    objects associated with that same instance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该图清楚地表明，`PPDIO96`的实例化对象将约束`portInitialization`和`writePort`类之间的通信，只能与该实例相关联的对象进行通信。
- en: The small squares on the sides of the `portInitialization` and `writePort` are
    *ports*. This term is unrelated to the `writePort` object or hardware ports on
    the PPDIO96 in general; this is a UML concept referring to an interaction point
    between two objects in UML. Ports can appear in composite structure diagrams and
    in component diagrams (see “[Component Diagrams](ch08.xhtml#lev-8.1)” on [page
    155](ch08.xhtml#page_155)) to specify required or provided interfaces to an object.
    In [Figure 8-15](ch08.xhtml#ch8fig15) the port on the `portInitialization` side
    is (probably) a required interface and the port on the `writePort` side of the
    connection is (probably) a provided interface.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`portInitialization`和`writePort`两侧的小方块是*端口*。这个术语与`writePort`对象或 PPDIO96 上的硬件端口无关；这是
    UML 中的一个概念，表示 UML 中两个对象之间的交互点。端口可以出现在复合结构图和组件图中（见“[组件图](ch08.xhtml#lev-8.1)”在[第
    155 页](ch08.xhtml#page_155)）中，用于指定与对象的所需或提供接口。在[图 8-15](ch08.xhtml#ch8fig15)中，`portInitialization`一侧的端口（可能）是所需接口，而连接的`writePort`一侧的端口（可能）是提供接口。'
- en: '**Note**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*On either side of a connection, one port will generally be a required interface
    and the other will be a provided interface.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*在连接的两侧，一个端口通常是所需接口，另一个是提供接口。*'
- en: In [Figure 8-15](ch08.xhtml#ch8fig15) the ports are *anonymous*. However, in
    many diagrams (particularly where you are listing the interfaces to a system)
    you can attach names to the ports (see [Figure 8-16](ch08.xhtml#ch8fig16)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 8-15](ch08.xhtml#ch8fig15)中，端口是*匿名*的。然而，在许多图表中（特别是在列出系统接口的情况下），你可以为端口添加名称（见[图
    8-16](ch08.xhtml#ch8fig16)）。
- en: '![image](Images/fig8-16.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-16.jpg)'
- en: '*Figure 8-16: Named ports*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-16：命名的端口*'
- en: You can also use the ball and socket notation to indicate which side of a communication
    link is the provider and which side has the required interface (remember, the
    socket side denotes the required interface; the ball side denotes the provided
    interface). You can even name the communication link if you so desire (see [Figure
    8-17](ch08.xhtml#ch8fig17)). A typical communication link takes the form name`:`type
    where name is a unique name (within the component) and type is the type of the
    communication link.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用球和插座符号表示通信链路的哪一侧是提供者，哪一侧有所需接口（记住，插座侧表示所需接口；球侧表示提供接口）。如果需要，你甚至可以为通信链路命名（见[图
    8-17](ch08.xhtml#ch8fig17)）。典型的通信链路形式是 name`:`type，其中 name 是唯一的名称（在组件内），type 是通信链路的类型。
- en: '![image](Images/fig8-17.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-17.jpg)'
- en: '*Figure 8-17: Indicating provided and required interfaces*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-17：指示提供和需要的接口*'
- en: '**8.5 Statechart Diagrams**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.5 状态图**'
- en: UML statechart (or state machine) diagrams are very similar to activity diagrams
    in that they show the flow of control through a system. The main difference is
    that a statechart diagram simply shows the various states possible for a system
    and how the system transitions from one state to the next.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: UML 状态图（或状态机）图与活动图非常相似，因为它们显示了系统中的控制流。主要区别在于，状态图仅显示系统可能的各种状态以及系统如何从一个状态过渡到另一个状态。
- en: Statechart diagrams do not introduce any new diagramming symbols; they use existing
    elements from activity diagrams—specifically the start state, end state, state
    transitions, state symbols, and (optionally) decision symbols, as shown in [Figure
    8-18](ch08.xhtml#ch8fig18).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 状态图不引入任何新的图表符号；它们使用来自活动图的现有元素——特别是起始状态、结束状态、状态过渡、状态符号和（可选的）决策符号，如[图 8-18](ch08.xhtml#ch8fig18)所示。
- en: '![image](Images/fig8-18.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-18.jpg)'
- en: '*Figure 8-18: Elements of a statechart diagram*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-18：状态图的元素*'
- en: A given statechart diagram will have exactly one *start* *state* symbol; this
    is where activity begins. The state symbols in a statechart diagram always have
    an associated state name (which, obviously, indicates the current state). A statechart
    diagram can have more than one *end state* symbol, which is a special state that
    marks the end of activity (entry into any end state symbol stops the state machine).
    Transition arrows show the flow between states in the machine (see [Figure 8-19](ch08.xhtml#ch8fig19)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的状态图将有一个*起始* *状态*符号；这是活动开始的地方。状态图中的状态符号始终有一个关联的状态名称（显然，这表示当前状态）。状态图可以有多个*结束状态*符号，这是一个特殊状态，标志着活动的结束（进入任何结束状态符号会停止状态机）。过渡箭头表示状态机中状态之间的流动（见[图
    8-19](ch08.xhtml#ch8fig19)）。
- en: '![image](Images/fig8-19.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-19.jpg)'
- en: '*Figure 8-19: A simple statechart diagram*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-19：一个简单的状态图*'
- en: Transitions usually occur in response to some external events, or triggers,
    in the system. *Triggers* are stimuli that cause the transition from one state
    to another in the system. You attach guard conditions to a transition, as shown
    in [Figure 8-19](ch08.xhtml#ch8fig19), to indicate the trigger that causes the
    transition to take place.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 转换通常是对系统中的某些外部事件或触发器的响应。*触发器*是引起系统从一个状态转换到另一个状态的刺激。您可以像在[图8-19](ch08.xhtml#ch8fig19)中所示那样，将守卫条件附加到转换上，以指示导致转换发生的触发器。
- en: Transition arrows have a head and a tail. When activity occurs in a statechart
    diagram, transitions always occur from the state attached to the arrow tail to
    the state pointed at by the arrowhead.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 转换箭头有一个箭头头和箭头尾。当在状态图中发生活动时，转换总是从附加在箭头尾部的状态发生，指向箭头头部指示的状态。
- en: If you are in a particular state and some event occurs for which there is no
    transition out of that state, the state machine ignores that event.^([2](ch19_footnote.xhtml#ch08fn2))
    For example, in [Figure 8-19](ch08.xhtml#ch8fig19), if you’re already in the “System
    is active” state and an `on` `button` event occurs, the system remains in the
    “System is active” state.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您处于某个特定状态，并且发生了一个没有对应离开转换的事件，则状态机会忽略该事件。^([2](ch19_footnote.xhtml#ch08fn2))
    例如，在[图8-19](ch08.xhtml#ch8fig19)中，如果您已经处于“系统处于活动状态”状态，并且发生了`on` `button`事件，系统将保持在“系统处于活动状态”状态。
- en: If two transitions out of a state have the same guard condition, then the state
    machine is *nondeterministic*. This means that the choice of transition arrow
    is arbitrary (and could be randomly chosen). Nondeterminism is a bad thing in
    UML statechart diagrams, as it introduces ambiguity. When creating UML statechart
    diagrams, you should always strive to keep them deterministic by ensuring that
    the transitions all have mutually exclusive guard conditions. In theory, you should
    have exactly one exiting transition from a state for every possible event that
    could occur; however, most system designers assume that, as mentioned before,
    if an event occurs for which there is no exit transition, then the state ignores
    that event.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个状态的两个转换具有相同的守卫条件，则该状态机是*非确定性的*。这意味着转换箭头的选择是任意的（可以随机选择）。在UML状态图中，非确定性是一个不好的特性，因为它会引入歧义。在创建UML状态图时，您应该始终努力保持其确定性，确保所有转换都具有相互排斥的守卫条件。从理论上讲，对于每一个可能发生的事件，您应该有一个确切的离开转换；然而，大多数系统设计师假设，如前所述，如果发生一个没有离开转换的事件，那么该状态会忽略该事件。
- en: It is possible to have a transition from one state to another without a guard
    condition attached; this implies that the system can arbitrarily move from the
    first state (at the transition’s tail) to the second state (at the head). This
    is useful when you’re using decision symbols in a state machine (see [Figure 8-20](ch08.xhtml#ch8fig20)).
    Decision symbols aren’t necessary in a statechart diagram—just as for activity
    diagrams, you could have multiple transitions directly out of a state (such as
    the “System is active” state in [Figure 8-20](ch08.xhtml#ch8fig20))—but you can
    sometimes clean up your diagrams by using them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个状态到另一个状态可以没有附加守卫条件的转换；这意味着系统可以从第一个状态（在转换尾部）任意移动到第二个状态（在箭头头部）。当您在状态机中使用决策符号时，这很有用（请参见[图8-20](ch08.xhtml#ch8fig20)）。在状态图中，决策符号并非必须存在——就像在活动图中，您也可以直接从一个状态发出多个转换（比如[图8-20](ch08.xhtml#ch8fig20)中的“系统处于活动状态”状态）——但是，使用决策符号有时可以让您的图表更加简洁。
- en: '![image](Images/fig8-20.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig8-20.jpg)'
- en: '*Figure 8-20: A decision symbol in a statechart*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-20：状态图中的决策符号*'
- en: '**8.6 More UML**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.6 更多UML**'
- en: As has been a constant theme, this is but a brief introduction to UML. There
    are more diagrams and other features, such as the *Object Constraint Language
    (OCL)*, that this book won’t use, so this chapter doesn’t discuss them. However,
    if you’re interested in using UML to document your software projects, you should
    spend more time learning about it. See the next section for recommended reading.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，这只是对UML的简要介绍。本书不会使用更多的图表和其他功能，比如*对象约束语言（OCL）*，因此本章没有讨论它们。然而，如果您有兴趣使用UML来记录您的软件项目，您应该花更多的时间学习它。请参见下一节的推荐阅读。
- en: '**8.7 For More Information**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.7 更多信息**'
- en: 'Bremer, Michael. *The User Manual Manual: How to Research, Write, Test, Edit,
    and Produce a Software Manual*. Grass Valley, CA: UnTechnical Press, 1999\. A
    sample chapter is available at *[http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf](http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf)*.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bremer, Michael. *用户手册手册：如何研究、编写、测试、编辑并制作软件手册*. Grass Valley, CA: UnTechnical
    Press, 1999。可以在 *[http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf](http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf)*
    获取示例章节。'
- en: 'Larman, Craig. *Applying UML and Patterns: An Introduction to Object-Oriented
    Analysis and Design and Iterative Development*. 3rd ed. Upper Saddle River, NJ:
    Prentice Hall, 2004.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'Larman, Craig. *应用UML与模式：面向对象分析与设计及迭代开发导论*. 第3版. Upper Saddle River, NJ: Prentice
    Hall, 2004.'
- en: 'Miles, Russ, and Kim Hamilton. *Learning UML 2.0: A Pragmatic Introduction
    to UML*. Sebastopol, CA: O’Reilly Media, 2003.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'Miles, Russ, 和 Kim Hamilton. *学习UML 2.0：UML实用入门*. Sebastopol, CA: O’Reilly
    Media, 2003.'
- en: 'Pender, Tom. *UML Bible*. Indianapolis: Wiley, 2003.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'Pender, Tom. *UML圣经*. 印第安纳波利斯: Wiley, 2003.'
- en: 'Pilone, Dan, and Neil Pitman. *UML 2.0 in a Nutshell: A Desktop Quick Reference*.
    2nd ed. Sebastopol, CA: O’Reilly Media, 2005.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'Pilone, Dan, 和 Neil Pitman. *UML 2.0 精要：桌面快速参考手册*. 第2版. Sebastopol, CA: O’Reilly
    Media, 2005.'
- en: 'Roff, Jason T. *UML: A Beginner’s Guide*. Berkeley, CA: McGraw-Hill Education,
    2003.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'Roff, Jason T. *UML：初学者指南*. Berkeley, CA: McGraw-Hill Education, 2003.'
- en: Tutorials Point. “UML Tutorial.” *[https://www.tutorialspoint.com/uml/](https://www.tutorialspoint.com/uml/)*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Tutorials Point. “UML教程.” *[https://www.tutorialspoint.com/uml/](https://www.tutorialspoint.com/uml/)*.
