- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Network Communications
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络通信
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 48: Opening a Web Page'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 48：打开一个网页
- en: A web page is really just a text file containing the description of that page
    in enough detail to draw it on the screen. A program called a browser reads and
    renders that file into a viewable page. The file itself resides on a computer
    somewhere on the internet, and in order to display it, we must first upload it
    to the user’s computer. The browser arranges for this to be done, but the file
    must have a unique name that identifies it—unique in the *whole world*, because
    the internet is a planetwide network. This unique name is called the Uniform (or
    Universal) Resource Locator, shortened to URL. Most people know this by the term
    web address, and an example is [https://www.microsoft.com](https://www.microsoft.com).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网页其实只是一个文本文件，其中包含足够详细的页面描述，以便在屏幕上绘制它。一个名为浏览器的程序读取并渲染该文件，生成可视页面。文件本身存储在互联网上某台计算机上，为了显示它，我们必须先将其上传到用户的计算机。浏览器安排执行这一操作，但文件必须有一个独特的名字来标识它——这个名字在*整个世界*范围内唯一，因为互联网是一个全球网络。这个独特的名字被称为统一资源定位符（Uniform
    Resource Locator，简称 URL）。大多数人称之为网页地址，一个例子是 [https://www.microsoft.com](https://www.microsoft.com)。
- en: The URL contains the directions for how to find the web page, and it is the
    equivalent of a filename. Displaying the page is a complex operation, and browsers
    are very complicated software systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: URL 包含了如何找到网页的方向，它相当于一个文件名。显示页面是一个复杂的操作，浏览器是非常复杂的软件系统。
- en: 'Processing opens and displays web pages using a function named `link()`, which
    accepts a URL as a parameter. This function passes the URL to the default browser
    on your computer, which opens and displays the page. So the following call will
    open the Microsoft page in a browser:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Processing 使用名为 `link()` 的函数来打开和显示网页，该函数接受一个 URL 作为参数。这个函数将 URL 传递给计算机上的默认浏览器，浏览器会打开并显示该页面。因此，下面的调用将会在浏览器中打开
    Microsoft 页面：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the browser is already open, it may open a new tab.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器已经打开，它可能会打开一个新标签页。
- en: Example A
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 A
- en: This sketch opens the Microsoft page as previously described 1. It does so when
    a mouse button is pressed while the cursor is within the display window.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图按照之前的描述打开了 Microsoft 页面。当鼠标按钮按下并且光标位于显示窗口内时，它会打开该页面。
- en: Example B
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 B
- en: This sketch is a combination of Example A and Sketch 37\. The user types a URL,
    and the sketch builds a string from the characters being typed. When the user
    types ENTER, the sketch passes the URL to `link()`, and the browser will open
    and display the corresponding page.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图是示例 A 和草图 37 的结合体。用户输入一个 URL，草图根据输入的字符构建一个字符串。当用户按下 ENTER 键时，草图将 URL 传递给
    `link()` 函数，浏览器将打开并显示对应的页面。
- en: 'When the user types a character, it is usually placed in the variable `key`,
    then added to the string. However, some keys do not produce characters, such as
    the arrow keys, or shift. In Processing, uppercase characters involve two key
    presses: the SHIFT key and the character. The Processing system refers to these
    as coded keys and treats them differently. If the `key` variable has the value
    `CODED`, then the key pressed was one of these special ones, and the `keyCode`
    variable indicates what key was pressed 1. The value `UP`, for example, indicates
    that the up-arrow key was pressed.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入一个字符时，通常会把它放入变量 `key` 中，然后将其添加到字符串中。然而，某些键不会产生字符，比如方向键或 Shift 键。在 Processing
    中，大写字母涉及两次按键操作：SHIFT 键和字符键。Processing 系统将这些视为编码键，并以不同的方式处理它们。如果 `key` 变量的值为 `CODED`，那么按下的就是这些特殊键之一，而
    `keyCode` 变量表示按下了哪个键。例如，值 `UP` 表示按下了向上箭头键。
- en: 'In this sketch, we’ll ignore all coded keys, because the shift key is needed
    to send uppercase letters and some punctuation (like the colon, “:”), but it should
    not be thought of as a key press. The `keyPressed()` function ignores coded keys
    using the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个草图中，我们将忽略所有编码键，因为 SHIFT 键用于输入大写字母和一些标点符号（比如冒号“:”，），但不应当视为一个按键操作。`keyPressed()`
    函数通过以下代码来忽略编码键：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Sketch 49: Loading Images from a Web Page'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 49：从网页加载图像
- en: Since a web page is really just a text file, as you saw in Sketch 48, it should
    be possible to read that file and see what is inside. For example, it should be
    possible to identify any sound files (for example, MP3s) accessed by the page,
    or which images (.*jpg*, *.gif*, *.png*, and so on) will be a part of the page.
    This sketch will locate image files referenced in a web page and display them
    in the display window.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网页本质上只是一个文本文件，正如你在草图 48 中看到的，它应该是可以被读取并查看其中的内容。例如，它应该能够识别网页访问的任何声音文件（例如 MP3
    文件），或者网页中将包含哪些图片（如 *.jpg*、*.gif*、*.png* 等）。这个草图将定位网页中引用的图片文件，并将它们显示在显示窗口中。
- en: 'The first thing to do is to read the page. It contains HTML, a language for
    describing the document, and reading it turns out to be easy: Processing allows
    URLs to be used just like filenames in the `loadStrings()` function. You can read
    the Mink Hollow Media web page as a text file by directly passing the URL to `loadStrings()`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是读取网页。它包含 HTML，这是一种描述文档的语言，读取它其实很简单：Processing 允许像使用文件名一样在 `loadStrings()`
    函数中使用 URL。你可以通过直接将 URL 传递给 `loadStrings()` 来将 Mink Hollow Media 网页作为文本文件读取：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Or, as is done in this sketch, `loadStrings(url+"/"+file)`, where `url` is the
    web address and `file` is the name of the file that we want 1. At this point,
    the web page is available as a collection of strings in the array `webin`, one
    per line in the file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，正如在这个草图中所做的那样，使用 `loadStrings(url+"/"+file)`，其中 `url` 是网页地址，`file` 是我们想要的文件名
    1。此时，网页作为一组字符串存储在数组 `webin` 中，每行对应文件中的一行。
- en: 'HTML uses what is called an `img` tag to display images in a page:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 使用一种叫做 `img` 标签来在页面中显示图片：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The filename of an image follows the text `src="`, so the sketch should look
    for this sequence of characters within the strings in `webin`. If found, the following
    characters, up to the closing quote character (`"`), are the filename. We can
    locate a string within another string using the `indexOf()` function 2:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图片的文件名位于文本 `src="` 后面，因此草图应该在 `webin` 中的字符串内查找这一字符序列。如果找到，接下来的字符直到结束的双引号 (`"`)
    为止即为文件名。我们可以使用 `indexOf()` 函数 2 在一个字符串中查找另一个字符串：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, `indexOf()` searches the string `s` for the string `"src="`,
    starting at the character index `j`. It returns the index of the location where
    the string was found, or −1 if it was not found. If the string is found, we call
    the `getName()` function 3 to extract the filename itself from the string. The
    `getName()` function reads and saves characters until it encounters the terminal
    double quote and returns the filename as a string 4. This string is used as a
    filename for `loadImage()`, and if an image with that name can be loaded, then
    it is displayed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`indexOf()` 在字符串 `s` 中查找字符串 `"src="`，从字符索引 `j` 开始。它返回找到该字符串位置的索引，如果未找到则返回
    -1。如果找到该字符串，我们会调用 `getName()` 函数 3 来提取字符串中的文件名。`getName()` 函数读取并保存字符，直到遇到终止的双引号，并将文件名作为字符串
    4 返回。这个字符串会作为文件名传递给 `loadImage()`，如果能够加载到该文件名的图片，则会显示出来。
- en: 'There are many legal ways to specify a filename, and the code here also tries
    one other: it will take the URL and add a slash (`/`) and the filename 1 to see
    if that works. Some images will not be located using this method, and some files
    that are not images (like JavaScript, video, and audio) can be extracted. They
    will fail to display as images, and error messages will appear in the console.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多合法的方式可以指定文件名，这段代码也尝试了另一种方法：它会获取 URL，并加上斜杠 (`/`) 和文件名 1 来查看是否有效。某些图片通过这种方法可能无法定位，而一些非图片文件（如
    JavaScript、视频和音频文件）则可以提取出来。它们无法作为图片显示，控制台会出现错误信息。
- en: 'Sketch 50: Client/Server Communication'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '草图 50: 客户端/服务器通信'
- en: A lot of computer network communication is based on what is called a client/server
    model. It could just as easily be called a listener/speaker or receiver/sender
    model because it amounts to having one computer or process sending information
    across a network (the server) and another computer, or many other computers, receiving
    that data (the clients).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很多计算机网络通信都是基于所谓的客户端/服务器模型。它也可以叫做监听者/发言者模型或接收者/发送者模型，因为它实际上就是有一个计算机或进程通过网络发送信息（服务器），而另一个计算机或多个计算机接收这些数据（客户端）。
- en: Here’s how client/server software should work. A server first announces to the
    world that it is active and sending data. It must have an address that can be
    used to identify it uniquely, and it must start sending data (bytes, for example).
    A client identifies a server that it wishes to collect data from by using the
    server’s address. If the address represents an active server, the client starts
    to read data from the server. The server must indicate when new data is available,
    and if data is requested and none has yet been sent, the client waits until data
    is present.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端/服务器软件应该这样工作：服务器首先向世界宣布它是活跃的并正在发送数据。它必须拥有一个可以唯一标识它的地址，并且必须开始发送数据（例如字节）。客户端通过使用服务器的地址来识别它想要获取数据的服务器。如果该地址代表的是一个活跃的服务器，客户端就开始从服务器读取数据。服务器必须指示新数据何时可用，如果客户端请求数据而没有收到任何数据，客户端将等待直到数据出现。
- en: This example has a server sending character data and a client receiving and
    displaying the data, implemented as two different sketches. The server sends the
    message “This is a message from J Parker” repeatedly; the client reads characters
    from the server, constructs a string from them, and displays this string in the
    display window.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子有一个服务器发送字符数据，客户端接收并显示这些数据，分别通过两个不同的草图实现。服务器不断发送消息“这是一条来自J Parker的消息”；客户端从服务器读取字符，将其组成一个字符串，并在显示窗口中显示该字符串。
- en: 'Processing does not have a native ability to build client/server systems, but
    a library exists that enables it. Processing uses external libraries for many
    things, including video, audio, and various specific interfaces. For this example,
    we need to import the Network library at the beginning of both the client and
    server sketches 1, using this line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Processing 本身没有构建客户端/服务器系统的原生功能，但有一个库可以实现此功能。Processing 使用外部库来处理许多事务，包括视频、音频以及各种特定接口。对于这个例子，我们需要在客户端和服务器草图1的开头导入网络库，使用这一行代码：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the server code, the first step is to create a `Server` (part of the Network
    library) and assign it to the variable named `sender`, and then specify the port
    (in this case, port 5000), which is simply a number. A port is like a television
    channel, used to send or receive data, and all that matters here is that no other
    software is using this port. The server sends characters one at a time from a
    string to the outside world through the port by calling the `write` function 2:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器代码中，第一步是创建一个`Server`（属于网络库的一部分），并将其分配给名为`sender`的变量，然后指定端口（在此案例中为5000端口），这只是一个数字。端口就像电视频道，用于发送或接收数据，重要的是确保没有其他软件在使用该端口。服务器通过调用`write`函数2逐个字符地从字符串中将数据发送到外部世界。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`nextChar` is a character from the message.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`nextChar`是消息中的一个字符。'
- en: 'The client sketch first tries to connect to the server. The client must know
    the IP address of the server, which is its unique identifier (`***.***.***.***`
    in this case). The client connects to the server through the constructor using
    the same port 3:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端草图首先尝试连接到服务器。客户端必须知道服务器的IP地址，它是服务器的唯一标识符（此处为`***.***.***.***`）。客户端通过构造函数使用相同的端口3连接到服务器：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The client reads characters, one at a time, using the `readChar()` function
    4:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端使用`readChar()`函数4逐个读取字符：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, you have to start the server first and find out its IP address.
    You can use the `ipconfig` program on the computer where you are running the server
    sketch to find the IP address. Then you can start the client on some other computer
    on your network.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你必须先启动服务器并找出它的IP地址。你可以使用在运行服务器草图的计算机上的`ipconfig`程序来查找IP地址。然后，你可以在网络上的另一台计算机上启动客户端。
