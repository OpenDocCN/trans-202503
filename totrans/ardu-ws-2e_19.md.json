["```\n// Project 57 - Adding and Displaying Time and Date with an RTC1 #include \"Wire.h\" \n#define DS3231_I2C_ADDRESS 0x68 \n// Convert normal decimal numbers to binary coded decimal2 byte decToBcd(byte val) \n{ return( (val/10*16) + (val%10) );\n}\n// Convert binary coded decimal to normal decimal numbers\nbyte bcdToDec(byte val) \n{ return( (val/16*10) + (val%16) );\n}3 void setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte\ndayOfMonth, byte month, byte year) \n{ // sets time and date data in the DS3231 Wire.beginTransmission(DS3231_I2C_ADDRESS);   Wire.write(0); // set next input to start at the seconds register Wire.write(decToBcd(second));     // set seconds Wire.write(decToBcd(minute));     // set minutes Wire.write(decToBcd(hour));       // set hours Wire.write(decToBcd(dayOfWeek));  // set day of week (1=Sunday, 7=Saturday) Wire.write(decToBcd(dayOfMonth)); // set date (1 to 31) Wire.write(decToBcd(month));      // set month Wire.write(decToBcd(year));       // set year (0 to 99) Wire.endTransmission();\n}4 void readDS3231time(byte *second, \nbyte *minute, \nbyte *hour, \nbyte *dayOfWeek, \nbyte *dayOfMonth, \nbyte *month, \nbyte *year)\n{ Wire.beginTransmission(DS3231_I2C_ADDRESS); Wire.write(0); // set DS3231 register pointer to 00h Wire.endTransmission();   Wire.requestFrom(DS3231_I2C_ADDRESS, 7);  // request seven bytes of data from DS3231 starting from register 00h *second     = bcdToDec(Wire.read() & 0x7f); *minute     = bcdToDec(Wire.read()); *hour       = bcdToDec(Wire.read() & 0x3f);   *dayOfWeek  = bcdToDec(Wire.read()); *dayOfMonth = bcdToDec(Wire.read()); *month      = bcdToDec(Wire.read()); *year       = bcdToDec(Wire.read());\n}\nvoid displayTime()\n{ byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;   // retrieve data from DS3231 5   readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,  &year);  // send it to the Serial Monitor Serial.print(hour, DEC); // convert the byte variable to a decimal number when displayed Serial.print(\":\"); if (minute<10) { Serial.print(\"0\"); } Serial.print(minute, DEC); Serial.print(\":\"); if (second<10) { Serial.print(\"0\"); } Serial.print(second, DEC); Serial.print(\"  \"); Serial.print(dayOfMonth, DEC); Serial.print(\"/\"); Serial.print(month, DEC); Serial.print(\"/\"); Serial.print(year, DEC); Serial.print(\"  Day of week: \"); switch(dayOfWeek){ case 1: Serial.println(\"Sunday\"); break; case 2: Serial.println(\"Monday\"); break; case 3: Serial.println(\"Tuesday\"); break; case 4: Serial.println(\"Wednesday\"); break; case 5: Serial.println(\"Thursday\"); break; case 6: Serial.println(\"Friday\"); break; case 7: Serial.println(\"Saturday\"); break; }\n}\nvoid setup()\n{ Wire.begin();  Serial.begin(9600); // set the initial time here:  // DS3231 seconds, minutes, hours, day, date, month, year6   setDS3231time(0, 56, 23, 6, 30, 10, 21); \n}\nvoid loop()\n{ displayTime(); // display the real-time clock data in the Serial Monitor, delay(1000);   // every second\n}\n```", "```\nsetDS3231time(`second`, `minute`, `hour`, `dayOfWeek`, `dayOfMonth`, `month`, `year`)\n```", "```\n// Project 58 - Creating a Simple Digital Clock\n#include \"Wire.h\"1 #include <LiquidCrystal.h> \n#define DS3231_I2C_ADDRESS 0x68\nLiquidCrystal lcd( 8, 9, 4, 5, 6, 7 );\n// Convert normal decimal numbers to binary coded decimal\nbyte decToBcd(byte val)\n{ return( (val/10*16) + (val%10) );\n}\n// Convert binary coded decimal to normal decimal numbers\nbyte bcdToDec(byte val)\n{ return( (val/16*10) + (val%16) );\n}\nvoid setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year)\n{ // sets time and date data in the DS3231 Wire.beginTransmission(DS3231_I2C_ADDRESS);   Wire.write(0);  // set next input to start at the seconds register Wire.write(decToBcd(second));     // set seconds Wire.write(decToBcd(minute));     // set minutes Wire.write(decToBcd(hour));       // set hours Wire.write(decToBcd(dayOfWeek));  // set day of week (1=Sunday, 7=Saturday) Wire.write(decToBcd(dayOfMonth)); // set date (1 to 31) Wire.write(decToBcd(month));      // set month Wire.write(decToBcd(year));       // set year (0 to 99) Wire.endTransmission();\n}\nvoid readDS3231time(byte *second, \nbyte *minute, \nbyte *hour, \nbyte *dayOfWeek, \nbyte *dayOfMonth, \nbyte *month, \nbyte *year)\n{ Wire.beginTransmission(DS3231_I2C_ADDRESS); Wire.write(0); // set DS3231 register pointer to 00h Wire.endTransmission();   Wire.requestFrom(DS3231_I2C_ADDRESS, 7);  // request seven bytes of data from DS3231 starting from register 00h *second     = bcdToDec(Wire.read() & 0x7f); *minute     = bcdToDec(Wire.read()); *hour       = bcdToDec(Wire.read() & 0x3f);   *dayOfWeek  = bcdToDec(Wire.read()); *dayOfMonth = bcdToDec(Wire.read()); *month      = bcdToDec(Wire.read()); *year       = bcdToDec(Wire.read());\n}\nvoid displayTime()\n{ byte second, minute, hour, dayOfWeek, dayOfMonth, month, year; // retrieve data from DS3231 readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,  &year); // send the data to the LCD shield lcd.clear(); lcd.setCursor(4,0); lcd.print(hour, DEC); lcd.print(\":\"); if (minute<10) { lcd.print(\"0\"); } lcd.print(minute, DEC); lcd.print(\":\"); if (second<10) { lcd.print(\"0\"); } lcd.print(second, DEC); lcd.setCursor(0,1); switch(dayOfWeek){ case 1: lcd.print(\"Sun\"); break; case 2: lcd.print(\"Mon\"); break; case 3: lcd.print(\"Tue\"); break; case 4: lcd.print(\"Wed\"); break; case 5: lcd.print(\"Thu\"); break; case 6: lcd.print(\"Fri\"); break; case 7: lcd.print(\"Sat\"); break; } lcd.print(\" \"); lcd.print(dayOfMonth, DEC); lcd.print(\"/\"); lcd.print(month, DEC); lcd.print(\"/\"); lcd.print(year, DEC);\n}\nvoid setup()\n{ Wire.begin();2   lcd.begin(16, 2);   // set the initial time here:  // DS3231 seconds, minutes, hours, day, date, month, year3   // setDS3231time(0, 27, 0, 5, 15, 11, 20); \n}\nvoid loop()\n{ displayTime(); // display the real-time clock time on the LCD, delay(1000);   // every second\n}\n```", "```\n// Project 59 - Creating an RFID Time-Clock System1 #include \"Wire.h\" // for RTC 2 #include \"SD.h\"   // for SD card \n#include <LiquidCrystal.h>\n#define DS3231_I2C_ADDRESS 0x68 \nLiquidCrystal lcd( 8, 9, 4, 5, 6, 7 );\nint data1 = 0;3 // Use Listing 18-1 to find your tag numbers \nint Mary[14] = {  2, 52, 48, 48, 48, 56, 54, 67, 54, 54, 66, 54, 66, 3}; \nint John[14] = {  2, 52, 48, 48, 48, 56, 54, 66, 49, 52, 70, 51, 56, 3}; \nint newtag[14] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // used for read comparisons\n// Convert normal decimal numbers to binary coded decimal\nbyte decToBcd(byte val) \n{ return( (val/10*16) + (val%10) );\n}\n// Convert binary coded decimal to normal decimal numbers\nbyte bcdToDec(byte val) \n{ return( (val/16*10) + (val%16) );\n}\nvoid setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year) \n{ // Sets time and date data in the DS3231 Wire.beginTransmission(DS3231_I2C_ADDRESS);   Wire.write(0);  // set next input to start at the seconds register Wire.write(decToBcd(second));     // set seconds Wire.write(decToBcd(minute));     // set minutes Wire.write(decToBcd(hour));       // set hours Wire.write(decToBcd(dayOfWeek));  // set day of week (1=Sunday, 7=Saturday) Wire.write(decToBcd(dayOfMonth)); // set date (1 to 31) Wire.write(decToBcd(month));      // set month Wire.write(decToBcd(year));       // set year (0 to 99) Wire.endTransmission();\n}\nvoid readDS3231time(byte *second, byte *minute, \nbyte *hour, \nbyte *dayOfWeek, \nbyte *dayOfMonth, \nbyte *month, \nbyte *year) \n{ Wire.beginTransmission(DS3231_I2C_ADDRESS); Wire.write(0); // set DS3231 register pointer to 00h Wire.endTransmission();   Wire.requestFrom(DS3231_I2C_ADDRESS, 7);  // Request seven bytes of data from DS3231 starting from register 00h *second     = bcdToDec(Wire.read() & 0x7f); *minute     = bcdToDec(Wire.read()); *hour       = bcdToDec(Wire.read() & 0x3f);   *dayOfWeek  = bcdToDec(Wire.read()); *dayOfMonth = bcdToDec(Wire.read()); *month      = bcdToDec(Wire.read()); *year       = bcdToDec(Wire.read());\n}\n// Compares two arrays and returns true if identical.\n// This is good for comparing tags.\nboolean comparetag(int aa[14], int bb[14]) \n{ boolean ff=false; int fg=0; for (int cc=0; cc<14; cc++) { if (aa[cc]==bb[cc]) { fg++; } } if (fg==14) { ff=true;      // all 14 elements in the array match each other } return ff;\n}\nvoid wipeNewTag() \n{ for (int i=0; i<=14; i++) { newtag[i]=0; }\n}\nvoid setup()\n{ Serial.flush(); // need to flush serial buffer Serial.begin(9600); Wire.begin();  lcd.begin(16, 2); // set the initial time here:  // DS3231 seconds, minutes, hours, day, date, month, year // setDS3231time(0, 27, 0, 5, 15, 11, 12);  // Check that the microSD card exists and can be used 4   if (!SD.begin(8))    { lcd.print(\"uSD card failure\"); // stop the sketch return; } lcd.print(\"uSD card OK\"); delay(1000); lcd.clear(); \n}\n}\nvoid loop()\n{ byte second, minute, hour, dayOfWeek, dayOfMonth, month, year; if (Serial.available() > 0) // if a read has been attempted { // read the incoming number on serial RX delay(100);  // allow time for the data to come in from the serial buffer  for (int z=0; z<14; z++)  // read the rest of the tag { data1=Serial.read(); newtag[z]=data1; } Serial.flush(); // stops multiple reads // retrieve data from DS3231  readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,  &year); } // now do something based on the tag type5   if (comparetag(newtag, Mary) == true)  { lcd.print(\"Hello Mary \"); File dataFile = SD.open(\"DATA.TXT\", FILE_WRITE); if (dataFile)   { dataFile.print(\"Mary \"); dataFile.print(hour); dataFile.print(\":\"); if (minute<10) { dataFile.print(\"0\"); } dataFile.print(minute); dataFile.print(\":\"); if (second<10) { dataFile.print(\"0\"); } dataFile.print(second); dataFile.print(\" \"); dataFile.print(dayOfMonth); dataFile.print(\"/\"); dataFile.print(month); dataFile.print(\"/\"); dataFile.print(year); dataFile.println(); dataFile.close();  } delay(1000); lcd.clear(); wipeNewTag();    } if (comparetag(newtag, John)==true)  { lcd.print(\"Hello John \"); File dataFile = SD.open(\"DATA.TXT\", FILE_WRITE); if (dataFile)   { dataFile.print(\"John \");    dataFile.print(hour); dataFile.print(\":\");       if (minute<10) { dataFile.print(\"0\"); } dataFile.print(minute); dataFile.print(\":\");     if (second<10) { dataFile.print(\"0\"); } dataFile.print(second); dataFile.print(\" \"); dataFile.print(dayOfMonth); dataFile.print(\"/\"); dataFile.print(month); dataFile.print(\"/\"); dataFile.print(year); dataFile.println(); dataFile.close();  } delay(1000); lcd.clear(); wipeNewTag();    }\n}\n```"]