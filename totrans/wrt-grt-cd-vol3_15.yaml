- en: '**12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12'
- en: SOFTWARE TEST DOCUMENTATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试文档**
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: This chapter covers software test documentation, focusing primarily on the Software
    Test Case (STC) and Software Test Procedure (STP) documents. As has been the case
    for the previous chapters, this discussion is based on IEEE Standards, specifically
    the IEEE Standard for Software and System Test Documentation (IEEE Std 829-2008,
    hereafter *Std 829*^([1](ch19_footnote.xhtml#ch12fn1))).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论软件测试文档，主要关注软件测试用例（STC）和软件测试程序（STP）文档。如前几章所述，本讨论基于IEEE标准，特别是IEEE软件和系统测试文档标准（IEEE
    Std 829-2008，以下简称*Std 829*^([1](ch19_footnote.xhtml#ch12fn1)))。
- en: 12.1 The Software Test Documents in Std 829
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1 标准829中的软件测试文档
- en: 'Std 829 actually describes many additional documents above and beyond the STC
    and STP, including:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标准829实际上描述了许多超出STC和STP的附加文档，包括：
- en: Master Test Plan (MTP)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主测试计划（MTP）
- en: '*Level* Test Plan (LTP)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试计划（LTP）'
- en: '*Level* Test Design (LTD)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试设计（LTD）'
- en: '*Level* Test Case (LTC)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试用例（LTC）'
- en: '*Level* Test Procedure (LTPr)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试程序（LTPr）'
- en: '*Level* Test Log (LTL)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试日志（LTL）'
- en: Anomaly Report (AR)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常报告（AR）
- en: '*Level* Interim Test Status Report (LITSR)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 临时测试状态报告（LITSR）'
- en: '*Level* Test Report (LTR)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*级别* 测试报告（LTR）'
- en: Master Test Report (MTR)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主测试报告（MTR）
- en: Note that these are not actual document names—the word *level* is a placeholder
    for the scope or extent of software testing being documented. The scope could
    be at the level of *components* or *component integration*, apply to the entire
    *system*, or focus on *acceptance*. For example, *Level* Test Plan could refer
    to a Component (or Unit) Test Plan, Component Integration (or simply Integration)
    Test Plan, System (or System Integration) Test Plan, or an Acceptance Test Plan.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些并非实际的文档名称——*级别* 只是表示软件测试文档范围或程度的占位符。范围可能是在*组件* 或*组件集成*的层次上，适用于整个*系统*，或专注于*验收*。例如，*级别*
    测试计划可能指代组件（或单元）测试计划、组件集成（或简单的集成）测试计划、系统（或系统集成）测试计划，或验收测试计划。
- en: '**NOTE**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Test levels are explained further in “Software Development Testing Levels”
    on [page 265](ch12.xhtml#page_265).*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试级别的详细解释请参见《软件开发测试级别》，见[第265页](ch12.xhtml#page_265)。*'
- en: 'In all, Std 829 defines 31 different document types, but these are the main
    ones. The majority of these documents exist to support software management activities.
    Because this is a book on personal software engineering rather than software project
    management, this chapter won’t go into detail on most of them. Instead, we’ll
    concentrate on those *level* test documents that pertain to actual software testing—specifically,
    the *Level* Test Case, *Level* Test Procedure, *Level* Test Log, and Anomaly Report
    document types. We will cover all four *level* classifications—component, component
    integration, system, and acceptance—though the latter two are the main test documents
    used in this chapter. The differences between the *level* test documents are relatively
    minor, so this chapter applies the umbrella names mentioned earlier: Software
    Test Cases and Software Test Procedures. Keep in mind, however, that while these
    are common software engineering terms, Std 829 refers only to the *level* test
    documents.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，标准829定义了31种不同的文档类型，但这些是主要的。大多数这些文档存在的目的是支持软件管理活动。因为这是一本关于个人软件工程的书，而不是软件项目管理书籍，所以本章不会详细讨论其中的大多数文档。相反，我们将重点讨论与实际软件测试相关的那些*级别*
    测试文档——具体而言，*级别* 测试用例、*级别* 测试程序、*级别* 测试日志和异常报告文档类型。我们将涵盖所有四种*级别* 分类——组件、组件集成、系统和验收——尽管后两者是本章中主要使用的测试文档。这些*级别*
    测试文档之间的差异相对较小，因此本章应用前面提到的总称：软件测试用例和软件测试程序。请记住，尽管这些是常见的软件工程术语，标准829仅涉及*级别* 测试文档。
- en: '***12.1.1 Process Support***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.1.1 过程支持***'
- en: Although this chapter focuses on software testing, Std 829 describes the testing
    process in far more general terms. In particular, the testing process also handles
    the verification and validation of each document step in the development process.
    Specifically, this means that the testing process tests the documentation as well
    as the actual software.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章集中在软件测试上，标准829描述了更为一般的测试过程。特别是，测试过程还涉及开发过程中每个文档步骤的验证和确认。具体来说，这意味着测试过程不仅测试实际的软件，还测试文档本身。
- en: For the SyRS and SRS, the verification step ensures that the requirements actually
    satisfy customer needs (and *only* satisfy customer needs, without gold plating).
    For the SDD, the verification step ensures that the SDD covers all the requirements.
    For the STC, the verification step ensures that each requirement has one or more
    test cases that test the requirement. For the STP, the verification ensures that
    the set of test procedures fully covers all the test cases.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SyRS和SRS，验证步骤确保需求真正满足客户需求（并且*仅*满足客户需求，不进行额外的无谓增加）。对于SDD，验证步骤确保SDD涵盖所有需求。对于STC，验证步骤确保每个需求都有一个或多个测试用例来测试该需求。对于STP，验证步骤确保测试程序集合完全覆盖所有测试用例。
- en: In addition to documentation, Std 829 discusses test procedures for verifying
    acquisitions (such as purchases of third-party libraries and computing hardware),
    administering RFPs (Requests for Proposals), and many other activities. These
    testing activities are very important. As noted previously, though, these are
    largely management activities rather than software development activities, so
    they’re mentioned only briefly here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文档，Std 829还讨论了验证采购（例如购买第三方库和计算硬件）、管理RFP（提案请求）以及许多其他活动的测试程序。这些测试活动非常重要。然而，如前所述，这些主要是管理活动，而非软件开发活动，因此在此仅简要提及。
- en: Std 829 states that testing needs to support the processes of management, acquisition,
    supply, development, operation, and maintenance. This chapter will concentrate
    on the development and operation processes (and, to a limited extent, the maintenance
    processes, which are largely an iteration of the development and operation processes).
    For more details on the other processes, see Std 829, IEEE/EIA Std 12207.0-1996
    [B21], and ISO-IEC-IEEE-29148-2011.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Std 829规定，测试需要支持管理、采购、供应、开发、运营和维护的流程。本章将重点讨论开发和运营流程（并在有限程度上讨论维护流程，后者在很大程度上是开发和运营流程的迭代）。有关其他流程的更多详细信息，请参见Std
    829、IEEE/EIA Std 12207.0-1996 [B21]和ISO-IEC-IEEE-29148-2011。
- en: Note that Std 829 allows you to combine and omit some of the testing documents.
    This means that you could have only a single document and still conform to Std
    829\. In reality, the final number of documents you create depends on the size
    of the project (large projects will require more documentation) and the turnaround
    you expect (fast projects will have fewer documents).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Std 829允许您合并和省略一些测试文档。这意味着您可以只创建一个文档，同时仍符合Std 829规范。实际上，您创建的最终文档数量取决于项目的规模（大型项目需要更多文档）和预期的周转速度（快速项目的文档较少）。
- en: '***12.1.2 Integrity Levels and Risk Assessment***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.1.2 完整性等级和风险评估***'
- en: 'Std 829 defines four *integrity levels* that describe the importance or sensitivity
    to risk for a piece of software:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Std 829定义了四个*完整性等级*，描述了软件组件对风险的敏感性或重要性：
- en: '**Catastrophic (level 4)** This level means that the software must execute
    properly, or something disastrous could occur (such as death, irreparable harm
    to the system, environmental damage, or a huge financial loss). There are no workarounds
    for catastrophic system failures. An example is a braking failure in a software-controlled
    self-driving vehicle.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**灾难性（等级4）** 这一等级意味着软件必须正常执行，否则可能会发生灾难性的后果（例如死亡、系统的无法修复损坏、环境破坏或巨大的经济损失）。对于灾难性的系统故障没有应急措施。例如，软件控制的自动驾驶车辆中的刹车故障。'
- en: '**Critical (level 3)** This level means that software must execute properly,
    or there could be serious problems including permanent injury, major performance
    degradation, environmental damage, or financial loss. A partial workaround may
    be possible for a critical system failure. An example is the transmission-controlling
    software in the self-driving vehicle being unable to shift out of second gear.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键（等级3）** 这一等级意味着软件必须正常执行，否则可能会出现严重问题，包括永久性伤害、重大性能下降、环境破坏或经济损失。对于关键系统故障，可能存在部分应急措施。例如，自动驾驶车辆中负责传动控制的软件无法从二档换到空档。'
- en: '**Marginal (level 2)** This level means that the software must execute properly,
    or there may be (minor) incorrect results produced and some functionality lost.
    Workarounds to solve the problem are possible. Continuing with the self-driving-vehicle
    example, a software failure that prevents the infotainment center from operating
    is a marginal problem.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**边际性（2级）** 这一级别意味着软件必须正常执行，否则可能会产生（轻微的）错误结果并丧失一些功能。可以通过解决方法来解决问题。继续以自动驾驶汽车为例，阻止信息娱乐中心正常运行的软件故障就是一个边际性问题。'
- en: '**Negligible (level 1)** This level means that the software must execute properly,
    or else some minor functionality might not exist in the system (or the software
    might not be as “polished” as it should be). Negligible issues generally don’t
    require a workaround and can be safely ignored until an update comes along. An
    example is a spelling mistake on the touchscreen of the infotainment center in
    the self-driving vehicle.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**微不足道（1级）** 这一级别意味着软件必须正常执行，否则系统中可能会缺少某些次要功能（或者软件可能不像应有的那样“精致”）。微不足道的问题通常不需要解决方法，可以安全地忽略，直到更新发布为止。一个例子是自动驾驶汽车中信息娱乐中心触摸屏的拼写错误。'
- en: The higher the level, the greater the importance of the testing process; that
    is, level 4 (catastrophic) items demand higher-quality and more intensive testing
    than level 1 (negligible) items. Integrity levels, then, become the basis for
    determining the number, quality, and depth of test cases you create. For a feature
    in the program that could have catastrophic results in the event of a failure,
    you want a fair number of test cases that exercise that feature with considerable
    depth. For features that have negligible potential consequences, you might not
    have any test cases or only very shallow tests (such as a cursory review).^([2](ch19_footnote.xhtml#ch12fn2))
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 级别越高，测试过程的重要性就越大；也就是说，4级（灾难性）问题比1级（微不足道）问题需要更高质量和更密集的测试。因此，完整性级别成为决定测试用例数量、质量和深度的依据。对于在失败时可能导致灾难性后果的程序功能，你需要创建足够数量的测试用例，并对该功能进行深入测试。对于潜在后果微不足道的功能，可能不需要任何测试用例，或者只进行非常浅显的测试（例如草率的检查）。^([2](ch19_footnote.xhtml#ch12fn2))
- en: '*Risk assessment* is an attempt to determine where in your system failures
    are likely to occur, their expected frequency, and the associated costs. While
    risk assessment is predictive by its very nature (which means it won’t be perfect),
    you can often identify those parts of the program that are more likely to exhibit
    problems (such as complex sections of code, code produced by less experienced
    engineers, code from questionable sources like open source libraries found on
    the internet, and code using poorly understood algorithms). If you can categorize
    the likelihood of a problem as *likely*, *probable*, *occasional*, or *unlikely*,
    you can help identify the code that warrants more stringent testing (and, conversely,
    code that requires minimal testing).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*风险评估* 是试图确定系统中哪些地方可能发生故障、其预期频率以及相关的成本。虽然风险评估本质上是预测性的（这意味着它不会是完美的），但你通常可以识别出那些更可能出现问题的程序部分（例如复杂的代码部分、经验较少的工程师编写的代码、来源可疑的代码，如来自互联网的开源库代码，以及使用理解不完全的算法的代码）。如果你能将问题的可能性分类为
    *可能*、*有可能*、*偶尔* 或 *不太可能*，你可以帮助识别出需要更严格测试的代码（反之亦然，哪些代码只需要最少的测试）。'
- en: You can combine the integrity level and risk assessment levels in a matrix to
    produce a risk assessment scheme, as shown in [Table 12-1](ch12.xhtml#ch12tab1).
    In this example, a value of 4 denotes extreme importance, and a value of 1 indicates
    little importance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将完整性级别和风险评估级别结合在一个矩阵中，生成风险评估方案，如[表 12-1](ch12.xhtml#ch12tab1)所示。在这个示例中，值为4表示极其重要，值为1表示几乎不重要。
- en: '**Table 12-1:** Risk Assessment Scheme'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 12-1：** 风险评估方案'
- en: '| **Consequence** | **Likelihood** |  |  |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **后果** | **可能性** |  |  |  |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '|  | Likely | Probable | Occasional | Unlikely |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|  | 可能 | 有可能 | 偶尔 | 不太可能 |'
- en: '| Catastrophic | 4 | 4 | 3.5 | 3 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 灾难性 | 4 | 4 | 3.5 | 3 |'
- en: '| Critical | 4 | 3.5 | 3 | 2.5 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 严重 | 4 | 3.5 | 3 | 2.5 |'
- en: '| Marginal | 3 | 2.5 | 1.5 | 1 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 边际性 | 3 | 2.5 | 1.5 | 1 |'
- en: '| Negligible | 2 | 1.5 | 1 | 1 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 微不足道 | 2 | 1.5 | 1 | 1 |'
- en: Std 829 does not mandate using an integrity level or risk assessment scheme
    in your test documentation, though it does consider this to be best practice.
    If you do use an integrity level, Std 829 does not require that you use the IEEE-recommended
    scheme (you could, for example, use a finer-grained integrity level with values
    from 1 to 10). However, if you “roll your own” integrity level, the IEEE recommends
    that you document a mapping from your integrity levels to those suggested by the
    IEEE so that readers can easily compare them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Std 829并不强制要求在测试文档中使用完整性层级或风险评估方案，尽管它认为这是最佳实践。如果使用完整性层级，Std 829也不要求使用IEEE推荐的方案（例如，您可以使用一个更精细的完整性层级，取值范围为1到10）。然而，如果您“自行设计”完整性层级，IEEE建议您记录从您的完整性层级到IEEE建议层级的映射，以便读者能够轻松进行对比。
- en: '***12.1.3 Software Development Testing Levels***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.1.3 软件开发测试层级***'
- en: 'In addition—and in contrast—to the integrity levels just described, the IEEE
    defines four testing levels, each of which generally describes the scope or extent
    of software testing being documented:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与刚才描述的完整性层级相对，IEEE定义了四个测试层级，每个层级通常描述正在记录的软件测试的范围或程度：
- en: '**Component (also known as** ***unit*****)****^([3](ch19_footnote.xhtml#ch12fn3))**
    This level deals with subroutines, functions, modules, and subprograms at the
    lowest code level. *Unit testing*, for example, consists of testing individual
    functions and other small program units independent of the rest of the program.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件（也称为** ***单元*****)****^([3](ch19_footnote.xhtml#ch12fn3))** 这一层级处理最低代码层级的子程序、函数、模块和子程序。例如，*单元测试*包括独立于程序其余部分的测试单个函数和其他小的程序单元。'
- en: '**Component integration (also known as simply** ***integration*****)** This
    level is the point at which you begin combining individual units together to form
    a larger portion of the system, though not necessarily the whole system. Integration
    testing, for example, occurs when you combine (pretested) units to see if they
    play well together (that is, pass appropriate parameters, return appropriate function
    results, and so on).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件集成（也简称为** ***集成*****)** 这一层级是您开始将单独的单元组合在一起，形成系统的更大部分的地方，但不一定是整个系统。例如，集成测试发生在您将（已测试的）单元组合在一起，检查它们是否能良好协作（即，是否传递适当的参数、返回适当的函数结果等）。'
- en: '**System (also known as** ***system integration*****)** This level of testing
    is the ultimate form of integration testing—you’ve integrated all the program
    units together and formed the complete system. Unit testing, integration testing,
    and system integration testing are typically tests the developers perform before
    releasing a complete system outside the development group.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统（也称为** ***系统集成*****)** 这一测试层级是集成测试的最终形式——您已将所有程序单元整合在一起，形成完整的系统。单元测试、集成测试和系统集成测试通常是开发人员在将完整系统交给开发组外的人员之前执行的测试。'
- en: '**Acceptance (variants include** ***factory acceptance*** **and** ***site acceptance*****)**
    *Acceptance testing* *(AT)* is post-development. As its name implies, it refers
    to how the customer determines whether the system is acceptable. Depending on
    the system, there may be a couple of acceptance testing variants. *Factory acceptance
    testing (FAT)* occurs on systems prior to leaving the manufacturer (typically
    on the factory floor, hence the name). Even if a product is pure software, it
    can have a factory acceptance test where the customer’s representatives come to
    test the software under the watchful eye of the software development team. This
    allows the team to make quick changes to the system if the customer discovers
    minor errors during the FAT.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收（变体包括** ***工厂验收*** **和** ***现场验收*****)** *验收测试*（*AT*）是开发后的测试。顾名思义，它指的是客户如何确定系统是否可以接受。根据系统的不同，可能会有几种验收测试的变体。*工厂验收测试（FAT）*发生在系统离开制造商之前（通常在工厂车间进行，因此得名）。即使一个产品是纯软件，它也可以进行工厂验收测试，客户的代表会来，在软件开发团队的监督下测试软件。这允许团队在客户在FAT过程中发现小错误时迅速做出更改。'
- en: A *site acceptance test* *(SAT)* is performed at the customer’s site after the
    system is installed. For hardware-based systems, this ensures that the hardware
    is installed properly and the software is functioning as intended. For pure software
    systems, the SAT provides a final check (after a possible AT or FAT) that the
    software is usable by the system’s end users.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**12.2 Test Plans**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A software test plan is a document that describes the scope, organization, and
    activities associated with the testing process. This is largely a managerial overview
    of how the testing will take place, the resources testing will require, schedules,
    necessary tools, and objectives. This chapter won’t consider test plans in detail,
    as they are beyond the scope of this book; however, the following sections will
    present outlines provided in IEEE Std 829-2008 as a reference. For more details
    on these test plans, consult Std 829.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '***12.2.1 Master Test Plan***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *Master Test Plan (MTP)* is an organization-wide top-level management document
    that tracks the testing process across a whole project (or set of projects). Software
    engineers are rarely involved directly with the MTP, which is largely an umbrella
    document that the QA (Quality Assurance) department uses to track quality aspects
    of a project. A project manager or project lead might be aware of the MTP—and
    might contribute to it during schedule and resource development—but the development
    team rarely sees the MTP except in passing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The following outline comes from Section 8 of IEEE Std 829-2008 (and uses the
    IEEE section numbers):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 System Overview and Key Features
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Test Overview
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.1 Organization
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.2 Master Test Schedule
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.3 Integrity Level Schema
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.4 Resources Summary
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.5 Responsibilities
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.6 Tools, Techniques, Methods, and Metrics
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details of the Master Test Plan
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Test Processes Including Definition of Test Levels
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.1 Process: Management'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.1.1 Activity: Management of Test Effort'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.2 Process: Acquisition'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.2.1 Activity: Acquisition Support Test'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.3 Process: Supply'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.3.1 Activity: Planning Test'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4 Process: Development'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.1 Activity: Concept'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.2 Activity: Requirements'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.3 Activity: Design'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.4 Activity: Implementation'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.5 Activity: Test'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.4.6 Activity: Install/Checkout'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.5 Process: Operation'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.5.1 Activity: Operational Test'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.6 Process: Maintenance'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '2.1.6.1 Activity: Maintenance Test'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Test Documentation Requirements
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Test Administration Requirements
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Test Reporting Requirements
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Document Change Procedures and History
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Many of these sections contain information common to IEEE documents (for example,
    see the SRS and SDD samples in previous chapters). As the MTP is beyond the scope
    of this chapter, please consult Std 829 for specific descriptions of each section
    in this outline.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '***12.2.2* Level *Test Plan***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A Level *Test Plan (LTP)* refers to a set of test plans based on the development
    state. As this chapter noted earlier, each document in the set generally describes
    the scope or extent of software test being documented: Component Test Plan (aka
    Unit Test Plan, or UTP), Component Integration Test Plan (aka Integration Test
    Plan, or ITP), System Test Plan (aka System Integration Test Plan, or SITP), and
    Acceptance Test Plan (ATP; may include a Factory Acceptance Test Plan [FATP] or
    Site Acceptance Test Plan [SATP]).^([4](ch19_footnote.xhtml#ch12fn4))'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 级别 *测试计划（LTP）* 是指基于开发状态的一组测试计划。正如本章前面所述，文档集中的每个文档通常描述了正在记录的软件测试的范围或程度：组件测试计划（也称为单元测试计划，或UTP）、组件集成测试计划（也称为集成测试计划，或ITP）、系统测试计划（也称为系统集成测试计划，或SITP）和验收测试计划（ATP；可能包括工厂验收测试计划
    [FATP] 或现场验收测试计划 [SATP]）。^([4](ch19_footnote.xhtml#ch12fn4))
- en: LTPs are also managerial/QA documents, but the development team (even to the
    level of individual software engineers) often has input on their creation and
    use, because these documents reference detailed features of the software design.
    These test plans are not guiding documents—that is, a software engineer wouldn’t
    necessarily reference these documents while actually testing the software—but
    they can’t be created without development team feedback. Like the MTP, LTPs provide
    a road map for the creation of the test case and test procedure documents (of
    primary interest to the development and testing teams) and outline how to perform
    the tests. LTPs provide a good high-level view of the testing process, especially
    for external organizations interested in its quality.^([5](ch19_footnote.xhtml#ch12fn5))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: LTPs 也是管理/质量保证文档，但开发团队（甚至到个别软件工程师的层面）通常会参与其创建和使用，因为这些文档涉及软件设计的详细特性。这些测试计划不是指导性文档——也就是说，软件工程师在实际测试软件时不一定会参考这些文档——但没有开发团队的反馈，这些文档无法创建。与MTP类似，LTP为创建测试用例和测试过程文档提供了路线图（这些文档对开发和测试团队尤为重要），并概述了如何执行测试。LTP提供了测试过程的良好高层视图，尤其是对于对质量感兴趣的外部组织。^([5](ch19_footnote.xhtml#ch12fn5))
- en: 'Here is the LTP outline from Std 829:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自Std 829的LTP大纲：
- en: 1 Introduction
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 1 引言
- en: 1.1 Document Identifier
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1 文档标识符
- en: 1.2 Scope
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 范围
- en: 1.3 References
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 参考文献
- en: 1.4 Level in the Overall Sequence
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 在整体序列中的级别
- en: 1.5 Test Classes and Overall Test Conditions
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5 测试类别和整体测试条件
- en: 2 Details for This Level of Test Plan
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 2 本级测试计划的详细信息
- en: 2.1 Test Items and Their Identifiers
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 2.1 测试项及其标识符
- en: 2.2 Test Traceability Matrix
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2.2 测试可追溯性矩阵
- en: 2.3 Features to Be Tested
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 2.3 测试的特性
- en: 2.4 Features Not to Be Tested
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 2.4 不测试的特性
- en: 2.5 Approach
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 2.5 方法
- en: 2.6 Item Pass/Fail Criteria
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 2.6 项目通过/失败标准
- en: 2.7 Suspension Criteria and Resumption Requirements
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 2.7 暂停标准和恢复要求
- en: 2.8 Test Deliverables
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 2.8 测试交付物
- en: 3 Test Management
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 3 测试管理
- en: 3.1 Planned Activities and Tasks; Test Progression
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1 计划活动和任务；测试进度
- en: 3.2 Environmental/Infrastructure
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 3.2 环境/基础设施
- en: 3.3 Responsibilities and Authority
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 3.3 职责和权限
- en: 3.4 Interfaces Among the Parties Involved
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 3.4 各方之间的接口
- en: 3.5 Resources and Their Allocation
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 3.5 资源及其分配
- en: 3.6 Training
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 3.6 培训
- en: 3.7 Schedules, Estimates, and Costs
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 3.7 日程安排、估算和成本
- en: 3.8 Risk(s) and Contingency(s)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 3.8 风险及应急措施
- en: 4 General
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 4 总则
- en: 4.1 Quality Assurance Procedures
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 4.1 质量保证程序
- en: 4.2 Metrics
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 4.2 指标
- en: 4.3 Test Coverage
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 4.3 测试覆盖范围
- en: 4.4 Glossary
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 4.4 术语表
- en: 4.5 Document Change Procedures and History
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 4.5 文档变更程序和历史
- en: You might notice that there is considerable overlap between the LTPs and the
    MTP. Std 829 states that if you are replicating information in a test plan that
    exists elsewhere, you can simply provide a reference to the containing document
    rather than duplicating the information in your LTP (or MTP). For example, you’re
    likely to have an overall Reverse Traceability Matrix (RTM) that includes traceability
    for all the tests. Rather than replicating that traceability information in section
    2.2 of an LTP, you would simply reference the RTM document that contains this
    information.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，LTP和MTP之间有相当大的重叠。Std 829规定，如果你在测试计划中复制了其他地方存在的信息，你可以简单地引用包含该信息的文档，而不必在LTP（或MTP）中重复该信息。例如，你可能会有一个总体的逆向可追溯性矩阵（RTM），其中包括所有测试的可追溯性信息。与其在LTP的第2.2节中重复该可追溯性信息，不如直接引用包含该信息的RTM文档。
- en: '***12.2.3* Level *Test Design Documentation***'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.2.3* 级别 *测试设计文档***'
- en: 'The Level *Test Design (LTD)* documentation, as its name suggests, describes
    the design of the tests. Once again, there are four types of LTD documents, each
    generally describing the scope or extent of software testing being documented:
    Component Test Design (aka Unit Test Design, or UTD), Component Integration Test
    Design (aka Integration Test Design, or ITD), System Test Design (aka System Integration
    Test Design, or SITD), and Acceptance Test Design (ATD; this may include a Factory
    Acceptance Test Design [FATD] or a Site Acceptance Test Design [SATD]).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试设计（LTD）*文档，顾名思义，描述了测试的设计。再次强调，有四种类型的LTD文档，每种文档通常描述了软件测试的范围或程度：组件测试设计（又称单元测试设计，或UTD）、组件集成测试设计（又称集成测试设计，或ITD）、系统测试设计（又称系统集成测试设计，或SITD）和验收测试设计（ATD；这可能包括工厂验收测试设计[
    FATD ]或现场验收测试设计[SATD]）。'
- en: The main purpose of the LTD is to collect common information in one place that
    would be replicated throughout the test procedures. That means that this document
    could very easily be merged with your test procedures document (at the cost of
    some repetition in that document). This book will take that approach, merging
    pertinent items from the test design directly into the test cases and test procedures
    documents.^([6](ch19_footnote.xhtml#ch12fn6)) For that reason this section will
    present the IEEE recommended outline without additional commentary and save the
    details for the STC and STP documents.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: LTD的主要目的是将常见信息集中在一个地方，这些信息通常会在测试程序中重复。这意味着该文档很容易与测试程序文档合并（虽然这样会导致文档中有一些重复）。本书将采取这种方法，将相关项目直接合并到测试用例和测试程序文档中。^([6](ch19_footnote.xhtml#ch12fn6))
    因此，本节将呈现IEEE推荐的大纲，而不做额外的评论，详细内容会保留在STC和STP文档中。
- en: 1 Introduction
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 1 引言
- en: 1.1 Document Identifier
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1 文档标识符
- en: 1.2 Scope
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 范围
- en: 1.3 References
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 参考文献
- en: 2 Details of the Level Test Design
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 2 级别测试设计的详细信息
- en: 2.1 Features to Be Tested
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 2.1 要测试的特性
- en: 2.2 Approach Refinements
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 2.2 方法改进
- en: 2.3 Test Identification
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 2.3 测试标识
- en: 2.4 Feature Pass/Fail Criteria
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 2.4 特性通过/失败标准
- en: 2.5 Test Deliverables
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 2.5 测试交付物
- en: 3 General
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 3 一般
- en: 3.1 Glossary
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1 术语表
- en: 3.2 Document Change Procedures and History
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 3.2 文档变更程序和历史
- en: '**12.3 Software Review List Documentation**'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**12.3 软件审查清单文档**'
- en: 'When you build the RTM starting with your requirements, one of the columns
    you usually create is the test/verification type column. Typically, a software
    requirement will have one of two associated verification types: *T* (for *test*)
    and *R* (for *review*).^([7](ch19_footnote.xhtml#ch12fn7)) Requirements marked
    *T* will have associated test cases and test procedures (see “[Updating the Traceability
    Matrix with Requirement Information](ch10.xhtml#lev-10.9)” on [page 222](ch10.xhtml#page_222)
    for details on creating test cases). Items marked *R* will need to be reviewed.
    This section describes how to create a Software Review List (SRL) document to
    track the review of the system (usually the source code) to verify those requirements.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从需求开始构建RTM时，通常会创建的其中一列是测试/验证类型列。通常，一个软件需求会有两种相关的验证类型之一：*T*（表示*测试*）和 *R*（表示*审查*）。^([7](ch19_footnote.xhtml#ch12fn7))
    标记为*T*的需求将有相关的测试用例和测试程序（有关创建测试用例的详细信息，请参见“[使用需求信息更新可追溯矩阵](ch10.xhtml#lev-10.9)”第[222页](ch10.xhtml#page_222)）。标记为*R*的项将需要进行审查。本节描述了如何创建一个软件审查清单（SRL）文档，用于跟踪系统（通常是源代码）的审查，以验证这些需求。
- en: The SRL is relatively straightforward. The core of the document is simply a
    list of items, each of which you check off after you review it and are confident
    that the software properly supports the associated requirement.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: SRL相对简单。文档的核心只是一份项目清单，每个项目都在审查后打勾，确保软件正确支持相关需求。
- en: 'In theory, you could create *level* review list documentation at four separate
    levels: component, component integration, system, and acceptance (as is the case
    for other Std 829 *level* documents). In reality, however, a single SRL that is
    suitable for both system (integration) and acceptance use will suffice.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你可以在四个独立的级别创建*级别*审查清单文档：组件、组件集成、系统和验收（如同其他Std 829*级别*文档的情况）。然而，在现实中，一个适用于系统（集成）和验收使用的单一SRL就足够了。
- en: '**NOTE**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The SRL document is not a part of Std 829 (or any other IEEE standards document,
    for that matter). Std 829 certainly allows you to use this document as part of
    your verification package, but the format presented in this section is not from
    the IEEE.*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*SRL 文档不是 Std 829（或任何其他 IEEE 标准文档）的一部分。Std 829 确实允许你将此文档作为验证包的一部分，但本节中所呈现的格式并非
    IEEE 标准格式。*'
- en: '***12.3.1 Sample SRL Outline***'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.3.1 示例 SRL 大纲***'
- en: 'Although the SRL is not a standard IEEE document, the following outline for
    it is somewhat similar to the SRS, STC, and STP recommended formats from the IEEE:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SRL 不是标准的 IEEE 文档，但其大纲与 IEEE 推荐的 SRS、STC 和 STP 格式有些相似：
- en: 1 Introduction (once per document)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 1 引言（每个文档中一次）
- en: 1.1 Document Identifier
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1 文档标识符
- en: 1.2 Document Change Procedures and History
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2 文档变更程序和历史
- en: 1.3 Scope
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 范围
- en: 1.4 Intended Audience
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 目标读者
- en: 1.5 Definitions, Acronyms, and Abbreviations
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5 定义、缩略语和缩写
- en: 1.6 References
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 1.6 参考文献
- en: 1.7 Notation for Description
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 1.7 描述符号
- en: 2 General System Description
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 2 一般系统描述
- en: 3 Checklist (one per review item)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 3 检查清单（每个审查项一个）
- en: 3.1 Review Identifier (Tag)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1 审查标识符（标签）
- en: 3.2 Discussion of Item to Review
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 3.2 审查项讨论
- en: '***12.3.2 Sample SRL***'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***12.3.2 示例 SRL***'
- en: This sample SRL continues to use the DAQ DIP switch project from the previous
    chapters. Specifically, this SRL is based on the requirements from “(Selected)
    DAQ Software Requirements (from SRS)” on [page 219](ch10.xhtml#page_219) and the
    verification types detailed in “Requirements to Be Verified by Review” on [page
    223](ch10.xhtml#page_223).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例 SRL 继续使用前几章中的DAQ DIP开关项目。具体来说，该 SRL 基于“（已选）DAQ 软件需求（来自 SRS）”中的需求，参见 [第219页](ch10.xhtml#page_219)，以及在
    [第223页](ch10.xhtml#page_223) 中详细说明的“需通过审查验证的需求”。
- en: '**1 Introduction**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**1 引言**'
- en: This Software Review List provides a software review checklist for those DAQ
    system requirements that are to be verified by review.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件审查清单为那些需要通过审查验证的DAQ系统需求提供了软件审查检查表。
- en: '**1.1 Document Identifier**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.1 文档标识符**'
- en: DAQ_SRL v1.0
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: DAQ_SRL v1.0
- en: '**1.2 Document Change Procedures and History**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.2 文档变更程序和历史**'
- en: All revisions should be noted here, by date and version number.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所有修订应在此注明，包括日期和版本号。
- en: Mar 23, 2018—Version 1.0
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年3月23日—版本 1.0
- en: '**1.3 Scope**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.3 范围**'
- en: This SRL deals with those requirements in the DAQ DIP switch initialization
    project for which creating a formal test procedure would be difficult (or otherwise
    economically unviable) but whose correctness can be easily verified by reviewing
    the source code and the build system for the source code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本 SRL 处理的是那些在创建正式测试程序上会比较困难（或在经济上不可行），但其正确性可以通过审查源代码和构建系统轻松验证的DAQ DIP开关初始化项目中的需求。
- en: '**1.4 Intended Audience**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.4 目标读者**'
- en: 'The *normal* audience for an SRL:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: SRL 的*正常*受众：
- en: This document is intended primarily for those individuals who will be testing/reviewing
    the DAQ DIP switch project. Project management and the development team may also
    wish to review this document.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档主要面向那些将测试/审查DAQ DIP开关项目的人员。项目管理和开发团队也可能希望审查此文档。
- en: 'The *real* audience for this SRL:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该 SRL 的*实际*受众：
- en: This SRL is intended for readers of *Write Great Code, Volume 3*. It provides
    an example SRL that can serve as a template for SRLs they may need to create.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本 SRL 适用于《编写优秀代码》第三卷的读者。它提供了一个示例 SRL，可作为他们可能需要创建的 SRL 模板。
- en: '**1.5 Definitions, Acronyms, and Abbreviations**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.5 定义、缩略语和缩写**'
- en: 'DAQ: Data acquisition system'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'DAQ: 数据采集系统'
- en: 'DIP: Dual inline package'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'DIP: 双列直插封装'
- en: 'SDD: Software Design Document'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'SDD: 软件设计文档'
- en: 'SRL: Software Review List'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'SRL: 软件审查清单'
- en: 'SRS: Software Requirements Specification'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'SRS: 软件需求规格说明书'
- en: '**1.6 References**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.6 参考文献**'
- en: 'SDD: IEEE Std 1016-2009'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'SDD: IEEE 标准 1016-2009'
- en: 'SRS: IEEE Std 830-1998'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'SRS: IEEE 标准 830-1998'
- en: 'STC/STP: IEEE Std 829-2008'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'STC/STP: IEEE 标准 829-2008'
- en: '**1.7 Notation for Description**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.7 描述符号**'
- en: 'Review identifiers (*tags*) in this document shall take the form:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档中的审查标识符（*标签*）应采用以下形式：
- en: DAQ_SR_*xxx_yyy_zzz*
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: DAQ_SR_*xxx_yyy_zzz*
- en: where *xxx_yyy* is a string of (possibly decimal) numbers taken from the corresponding
    requirement (for example, DAQ_SRS_*xxx_yyy*) and *zzz* is a (possibly decimal)
    numeric sequence that creates a unique identifier out of the whole sequence. Note
    that *zzz* values in SRL tags are usually numbered from 000 or 001 and usually
    increment by 1 for each additional review item sharing the same *xxx_yyy* string.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**2 General System Description**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The purpose behind the DAQ DIP switch system is to initialize the DAQ system
    upon power-up. The DAQ DIP switch system is a small subset of the larger Plantation
    Productions DAQ system that is useful as an example within this book.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '**3 Checklist**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Check off each of the following items as it is verified during the review process.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**3.1 DAQ_SR_700_000_000**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Verify code is written for a Netburner MOD54415 evaluation board.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '**3.2 DAQ_SR_700_000.01_000.1**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Verify code is written for μC/OS.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '**3.3 DAQ_SR_702_001_000**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Verify that software creates a separate task to handle serial port command processing.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '**3.4 DAQ_SR_702_002_000**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Verify that serial task priority is lower than USB and Ethernet task priorities
    (note that the higher the priority number, the lower the priority).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '**3.5 DAQ_SR_703_001_000**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Same as DAQ_SRS_702_001, but doesn’t start an RS-232 task if DIP switch 1 is
    in the OFF position.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**3.6 DAQ_SR_705_001_000**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Verify that software creates a separate task to handle USB port command processing.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '**3.7 DAQ_SR_705_002_000**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Verify that a USB task has a higher priority than the Ethernet and serial protocol
    tasks.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '**3.8 DAQ_SR_706_001_000**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Verify that software does not start the USB task if DIP switch 2 is in the OFF
    position.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '**3.9 DAQ_SR_716_001_000**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the Ethernet listening task is started only if Ethernet communications
    are enabled.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '**3.10 DAQ_SR_716_002_000**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the Ethernet listening task has a priority lower than the USB task
    but higher than the serial task.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**3.11 DAQ_SR_719_000_000**'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Verify that software sets the unit test mode value to ON based on the DIP switch
    7 setting.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**3.12 DAQ_SR_720_000_000**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Verify that software sets the unit test mode value to OFF based on the DIP switch
    7 setting.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '**3.13 DAQ_SR_723_000_000**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the software provides a function to read the DIP switches.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '**3.14 DAQ_SR_723_000.01_000**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the system uses the DIP switch reading to initialize RS-232 (serial),
    USB, Ethernet, unit test mode, and debug mode on startup.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**3.15 DAQ_SR_723_000.02_000**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the startup code stores the DIP switch reading for later use by
    the software.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**3.16 DAQ_SR_725_000_000**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the command processor responds to a command when a complete line
    of text is received from the USB, RS-232, and Ethernet ports.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**3.17 DAQ_SR_738_001_000**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the system starts a new process (task) to handle command processing
    for each new Ethernet connection.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '**3.18 DAQ_SR_738_002_000**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the Ethernet command processing tasks have a priority between the
    Ethernet listening task and the USB command task.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '***12.3.3 Adding SRL Items to the Traceability Matrix***'
  id: totrans-235
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you’ve created an SRL, you’ll want to add all the *SR* tags to the RTM
    so you can trace the reviewed items back to the requirements, as well as to everything
    else in the RTM. To do so, just locate the requirement associated with each review
    item tag (this is trivial if you’re using the tag numbering this chapter recommends;
    the SRS tag number is incorporated into the SRL tag number) and add the SRL tag
    to the appropriate column in the same row of the RTM containing the requirement.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: When you’ve got both SRL and STC documents, there’s really no need to create
    separate columns in the RTM for both types, as they are mutually exclusive and
    the tag will differentiate them. (See “[A Sample Software Requirements Specification](ch10.xhtml#lev-10.4.5)”
    on [page 203](ch10.xhtml#page_203) for some additional commentary on this.)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4 Software Test Case Documentation**'
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For each item in the RTM whose requirement verification type is *T*, you’ll
    need to create a software test case. The *Software Test Case (STC)* document is
    where you’ll put the actual test cases.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'As with all the 829 Std *level* documents, there are four levels in the *Level*
    Test Case documentation. The term *Software Test Case* generically refers to any
    one of these. As this chapter noted earlier, this is actually a set of test cases,
    where each document in the set type generally describes the scope or extent of
    software testing being documented: Component Test Cases (aka Unit Test Cases,
    or UTC), Component Integration Test Cases (aka Integration Test Cases, or ITC),
    System Test Cases (aka System Integration Test Cases, or SITC), and Acceptance
    Test Cases (ATC; may include Factory Acceptance Test Cases [FATC] and Site Acceptance
    Test Cases [SATC]).^([8](ch19_footnote.xhtml#ch12fn8))'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'The STC document lists all the individual test cases (tests) for a project.
    Here is the Std 829 outline for the *Level* Test Case documentation:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction (once per document)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Context
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Notation for Description
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details (once per test case)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Test Case Identifier
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Objective
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Inputs
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Outcome(s)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Environmental Needs
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Special Procedural Requirements
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Intercase Dependencies
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 3 Global (once per document)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Document Change Procedures and History
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In common practice, the Unit Test Cases and the Integration Test Cases are often
    combined into the same document (the differentiation between the two usually occurs
    at the level of test procedures). You will typically develop UTCs and ITCs from
    your source code and from the SDD (see [Figure 12-1](ch12.xhtml#ch12fig1), which
    is an extension of [Figure 9-1](ch09.xhtml#ch9fig1)).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-1.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-1: Unit and Integration Test Case sources*'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Often, the UTC and ITC (and test procedure) documents exist as software rather
    than as natural-language documents. Using an *automated test procedure*, a piece
    of software that runs all the unit and integration tests, is a software engineering
    best practice. By doing so, you can dramatically reduce the time it takes to run
    tests as well as the errors introduced in manually performed test procedures.^([9](ch19_footnote.xhtml#ch12fn9))
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, it isn’t possible to create automated tests for every test case,
    so you’ll usually have a UTC/ITC document covering (at least) the test cases you
    must perform manually.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations—particularly those that embrace Agile development models
    and test-driven development (TDD)—forgo formal UTC and ITC documents. Informally
    written procedures and automated test procedures are far more common in these
    situations because the cost of creating and (especially) maintaining the documentation
    quickly gets out of hand. As long as the development team can provide *some* documentation
    that they are performing a fixed set of unit/integration tests (that is, they’re
    not doing ad hoc, “by the seat of the pants” tests that could differ on every
    test run), larger organizations tend to leave them be.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of whether it’s formal, informal, or automated, having a repeatable
    test procedure is key. *Regression tests*, which check to see if anything has
    broken, or regressed, since you’ve made changes to the code, require a repeatable
    testing process. Therefore, you need some kind of test case to ensure repeatability.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: For unit/integration testing, the test data you generate will be a combination
    of black-box-generated test data and white-box-generated test data. *Black-box
    test data* generally comes from the system requirements (SyRS and SRS); you consider
    only the functionality of the system (which the requirements provide) when you
    create its input test data. When you generate *white-box test data*, on the other
    hand, you analyze the software’s source code. For example, ensuring that you execute
    every statement in the program at least once during testing—that is, achieving
    complete code coverage—requires careful analysis of the source code and, therefore,
    is a white-box test-data-generation technique.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Write Great Code, Volume 6: Testing, Debugging, and Quality Assurance *will
    consider the techniques for generating white-box and black-box test data in greater
    detail.*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Once you get to the level of a system integration test or (even more importantly)
    an acceptance test, formal documentation for your test cases becomes mandatory.
    If you’re creating a custom system for a customer, or your software is subject
    to regulatory or legal restrictions (such as life-threatening environments in
    an autonomous vehicle), you’ll likely have to convince some overseer organization
    that you’ve put in your best effort during testing and prove that the system meets
    its requirements. This is where it’s essential to have formal documentation like
    that recommended by Std 829.^([10](ch19_footnote.xhtml#ch12fn10)) For this reason,
    most SITC and (most certainly) ATC documents derive their cases directly from
    the requirements (see [Figure 12-2](ch12.xhtml#ch12fig2)). So, with this motivation
    in hand, let’s return to the discussion of the *Level* Test Case document (see
    the outline at the beginning of this section).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-2.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-2: SITC and ATC derivation*'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: More often than not, the (F)ATC document is simply a subset of the SITC document.
    (If you have FATC documentation and SATC documentation, the site variant is often
    a subset of the FATC document.) The SITC document will contain test cases for
    every requirement. In the ATC documents, system architects may merge or eliminate
    test cases that are nearly or entirely redundant, or are of little interest to
    customers and end users.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '***12.4.1 Introduction in the STC Document***'
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The introductory section of an STC (or any *Level* Test Case) document should
    include the following information.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.1.1 Document Identifier**'
  id: totrans-275
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The document identifier should be some unique name/number and should include
    the issuing date, author identification, status (for example, draft or final),
    approval signatures, and possibly a version number. A single ID name/number is
    imperative so you can reference the test case documentation in other documents
    (such as the STP and RTM).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.1.2 Scope**'
  id: totrans-277
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section summarizes the software system and features to test.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.1.3 References**'
  id: totrans-279
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should provide a list of all reference documents, internal and
    external, associated with the STC. Internal references would normally include
    documents such as the SyRS, SRS, SDD, RTM, and (if it exists) the MTP. External
    references would include standards like IEEE Std 829-2008 and any regulatory or
    legal documents that might apply.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.1.4 Context**'
  id: totrans-281
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In this section you provide any context for the test cases that doesn’t appear
    in any other documentation. Examples might include naming automated test-generation
    software or internet-based tools used to generate or evaluate test cases.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.1.5 Notation for Description**'
  id: totrans-283
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should describe the tags (identifiers) you’ll apply to the test
    cases. For example, this chapter uses tags of the form *proj*_STC_*xxx*_*yyy*_*zzz*,
    so this section of the STC would explain what this means and how to generate STC
    tags.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '***12.4.2 Details***'
  id: totrans-285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You repeat the subsections contained herein for each test case in the STC.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.1 Test Case Identifier**'
  id: totrans-287
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The test case identifier is the tag associated with this particular test case.
    For example, this book uses tags of the form *DAQ_STC_002_000_001* where *DAQ*
    is the project ID (for the DAQ DIP switch project), *002_000* is from the SRS
    requirement tag, and *001* is a test-case-specific value to make this tag unique
    among all the others. The Swimming Pool Monitor (SPM) project from previous chapters
    might use tags like *POOL_STC_002_001* within the STC. Std 829 doesn’t require
    the use of this tag format, only that all test case tags be unique.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.2 Objective**'
  id: totrans-289
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is a brief description of the focus or goal of this particular test case.
    (Note that a set of test cases can have the same objective, in which case this
    field could simply reference the objectives in a different test case.) This field
    is a good place to put risk assessment and integrity level information, if relevant.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.3 Input(s)**'
  id: totrans-291
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section lists all inputs and their relationships (in terms of timing, ordering,
    and the like) that a tester needs in order to perform this test case. Some inputs
    might be exact, and some may be approximate, in which case you must provide tolerances
    for the input data. If the input set is large, this section might simply reference
    an input file, database, or some other input stream that will provide the test
    data.^([11](ch19_footnote.xhtml#ch12fn11))
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.4 Outcome(s)**'
  id: totrans-293
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section lists all expected output data values and behaviors such as response
    time, timing relationships, and order of output data. The test case should provide
    exact output data values if possible; if you can provide only approximate data
    values, the test case must also supply tolerances. If an output stream is large,
    then this section can reference externally supplied files or databases.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: If the test is successful by virtue of the fact that it runs without crashing—that
    is, self-validating—then this section is unnecessary in the test case.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.5 Environmental Needs**'
  id: totrans-296
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section describes any preexisting software or data such as a known database
    that is needed for the test. It could also describe any internet sites referenced
    by their URLs that must be active in order to execute the test case. This could
    also include any special power requirements, such as requiring a UPS to be fully
    charged before testing power failures, or it could include other conditions such
    as the swimming pool being filled with water before running tests on the SPM system.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.5.1 Hardware Environmental Needs**'
  id: totrans-298
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section lists any hardware needed to run the test and specifies its configuration
    settings. It could also specify any special hardware such as a test fixture for
    the test operation. For example, a test fixture for the SPM might be a five-gallon
    bucket filled with water and a hose connected to the water feed valve that is
    part of the SPM.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.5.2 Software Environmental Needs**'
  id: totrans-300
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section lists all software (and its versions/configurations) that would
    be needed to run the test. This could include operating systems/device drivers,
    dynamically linked libraries, simulators, code scaffolding (as in code drivers),^([12](ch19_footnote.xhtml#ch12fn12))
    and test tools.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.5.3 Other Environmental Needs**'
  id: totrans-302
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is a catch-all section that lets you add information such as configuration
    specifics or anything else you feel the need to document. For example, for tests
    at a specific date or time, you’d need to consider Daylight Saving Time changes
    where a daily report may have 23 or 25 hours to report on, and so on.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.6 Special Procedural Requirements**'
  id: totrans-304
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section lists any exceptional conditions or constraints on the test case.
    This could also include any special preconditions or postconditions. For example,
    one precondition on the SPM when testing to see if the software properly responds
    to a low pool condition is that the water level is below all three low-pool sensors.
    This should also list any postconditions, such as the bucket must not have overfilled.
    If you’re using an automated test procedure, this is a good place to specify the
    particular tool to use and how to employ it for the test.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Note that this section should not duplicate steps that appear in the test procedure.
    Instead, it should provide guidance for properly writing the steps in the test
    procedure that will perform this test case.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.7 Intercase Dependencies**'
  id: totrans-307
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should list (by tag identifier) any test cases that must be executed
    immediately prior to the current one, so that appropriate system state conditions
    are in place before the current test is executed. Std 829 suggests that by sequencing
    the test cases in the order in which they must execute, you can reduce the need
    to state intercase dependencies. (Obviously, such dependencies should be clearly
    documented.) In general, however, you shouldn’t rely on such implicit dependency
    organization and should explicitly document any dependencies. In the STP, though,
    you *can* rely on the ordering of test steps. Having already clearly delineated
    the execution order in the STC will help reduce errors when you create the STP.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.2.8 Pass/Fail Criteria**'
  id: totrans-309
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In Std 829, the IEEE recommends putting the pass/fail criteria in the *Level*
    Test Design documentation; they are not part of the Std 829 STC. However, it’s
    not a bad idea, especially in cases where you don’t have an LTD in your documentation
    set, to include pass/fail criteria for each test case.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Note that if the pass/fail criterion is simply “All system outputs must match
    that specified by the Outcome(s) section,” then you can probably dispense with
    this section, but it wouldn’t hurt to explicitly state this default condition
    in the introduction section.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '***12.4.3 General***'
  id: totrans-312
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section provides a brief introduction and discussion of the Glossary and
    Document Change Procedures and History sections.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.3.1 Glossary**'
  id: totrans-314
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Glossary section provides an alphabetical list of all terms used in the
    STC. It should include all acronyms along with their definitions. Although Std
    829 lists the glossary at the end of the outline, it usually appears near the
    beginning of the document, close to the References section.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4.3.2 Document Change Procedures and History**'
  id: totrans-316
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This section describes the process for creating, implementing, and approving
    changes to the STC. This could be nothing more than a reference to a Configuration
    Management Plan document that describes the document change procedures for all
    project documents or for all documents within an organization. The change history
    should contain a chronological list of the following information:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Document ID (each revision should have a unique ID, which can simply be a date
    affixed to the document ID)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version number (which you should number sequentially, starting with the first
    approved version of the STC)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the changes made to the STC for the current version
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorship and role
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often, the change history appears in the STC near the beginning of the document,
    or just after the cover page and near the document identifier.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '***12.4.4 A Sample Software Test Case Document***'
  id: totrans-323
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Continuing with the theme of the past couple of chapters, this chapter will
    provide a sample STC for the Plantation Productions DAQ system DIP switch initialization
    design. This STC will serve as an acceptance test (pure functional test cases)
    built exclusively from the project SRS (see “(Selected) DAQ Software Requirements
    (from SRS)” on [page 219](ch10.xhtml#page_219)). The test cases appearing in this
    sample STC are all the requirements from this project SRS that have not been included
    in “Requirements to Be Verified by Review” on [page 223](ch10.xhtml#page_223)
    where the “verify by review” requirements are listed. Note, however, that for
    editorial/space reasons, this example will not provide test cases for every “verify
    by review” test requirement in that project SRS.^([13](ch19_footnote.xhtml#ch12fn13))
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '| **Term** | **Definition** |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
- en: '| DAQ | Data acquisition system |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
- en: '| SBC | Single-board computer |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
- en: '| Software Design Description (SDD) | Documentation of the design of the software
    system (IEEE Std 1016-2009)—that is, this document. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
- en: '| Software Requirements Specification (SRS) | Documentation of the essential
    requirements (functions, performance, design constraints, and attributes) of the
    software and its external interfaces (IEEE Std 610.12-1990). |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
- en: '| System Requirements Specification (SyRS) | A structured collection of information
    that embodies the requirements of the system (IEEE Std 1233-1998). A specification
    that documents the requirements to establish a design basis and the conceptual
    design for a system or subsystem. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
- en: '| Software Test Cases (STC) | Documentation that describes test cases (inputs
    and outcomes) to verify correct operation of the software based on various design
    concerns/requirements (IEEE Std 829-2009). |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
- en: '| Software Test Procedures (STP) | Documentation that describes the step-by-step
    procedure to execute a set of test cases to verify correct operation of the software
    based on various design concerns/requirements (IEEE Std 829-2009). |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: '**1 Introduction**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Software Test Cases for DAQ DIP Switch Project
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '**1.1 Document Identifier (and Change History)**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'Mar 22, 2018: DAQ_STC v1.0; Author: Randall Hyde'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2 Scope**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: This document describes only the DIP switch test cases in the DAQ system (for
    space/editorial reasons). For the full software design description, please see
    *[http://www.plantation-productions.com/Electronics/DAQ/DAQ.html](http://www.plantation-productions.com/Electronics/DAQ/DAQ.html)*.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '**1.3 Glossary, Acronyms, and Abbreviations**'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '*This is a very simple and short example to keep the book’s page count down.
    Please don’t use this as boilerplate; you should diligently pick out terms and
    abbreviations that your document uses and list them in this section.*'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '**1.4 References**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reference** | **Discussion** |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
- en: '| DAQ STC | An example of a full STC for the Plantation Productions DAQ system
    can be found at *[http://www.plantation-productions.com/Electronics/DAQ/DAQ.html](http://www.plantation-productions.com/Electronics/DAQ/DAQ.html)*.
    |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 830-1998 | SRS documentation standard |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 829-2008 | STP documentation standard |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1012-1998 | Software verification and validation standard |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1016-2009 | SDD documentation standard |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1233-1998 | SyRS documentation standard |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
- en: '**1.5 Context**'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'The DAQ system of Plantation Productions, Inc., fulfilled a need for a well-documented
    digital data acquisition and control system that engineers could design into safety-critical
    systems such as nuclear research reactors. Although there are many COTS systems^([14](ch19_footnote.xhtml#ch12fn14))
    that could be used, they suffer from a couple of major drawbacks, including: they
    are usually proprietary, thus being difficult to modify or repair after purchase;
    they are often obsolete within 5 to 10 years without a way to repair or replace
    them; and they rarely have full support documentation (for example, SRS, SDD,
    STC, and STP) that an engineer can use to validate and verify the system.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: The DAQ system overcomes this problem by providing an open hardware and open
    source set of designs with full design documentation that is validated and verified
    for safety systems.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: Although originally designed for a nuclear research reactor, the DAQ system
    is useful anywhere you need an Ethernet-based control system supporting digital
    (TTL-level) I/O, optically isolated digital inputs, mechanical or solid-state
    relay digital outputs, (isolated and conditioned) analog inputs (for example,
    ±10v and 4-20mA), and (conditioned) analog outputs (±10v).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '**1.6 Notation for Description**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'Test case identifiers (*tags*) in this document shall take the form:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_*xxx*_*yyy*_*zzz*
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: where *xxx_yyy* is a string of (possibly decimal) numbers taken from the corresponding
    requirement (for example, DAQ_SRS_*xxx*_*yyy*) and *zzz* is a (possibly decimal)
    numeric sequence that creates a unique identifier out of the whole sequence. Note
    that *zzz* values in STC tags are usually numbered from 000 or 001 and usually
    increment by 1 for each additional test case item sharing the same *xxx_yyy* string.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '**2 Details (Test Cases)**'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 DAQ_STC_701_000_000**'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test command acceptance across RS-232.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 1 set to ON position.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Type `help` command on serial terminal.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Screen displays `help` message.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with RS-232 port connected
    to DAQ'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Serial terminal emulator program running on PC'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 DAQ_STC_702_000_000**'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test command acceptance with DIP switch 1 ON.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 1 set to ON position.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Type `help` command on serial terminal.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Screen displays `help` message.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with RS-232 port connected
    to DAQ'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Serial terminal emulator program running on PC'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Same test as DAQ_STC_701_000_000
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 DAQ_STC_703_000_000**'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test command rejection with DIP switch 1 OFF.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 1 set to OFF position.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Type `help` command on serial terminal.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 1\. System ignores command, no response on terminal program.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with RS-232 port connected
    to DAQ'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Serial terminal emulator program running on PC'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '*For space/editorial reasons, this sample has deleted several test cases at
    this point because they are very similar in content to the previous test cases.*'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '**2.4 DAQ_STC_709_000_000**'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test Ethernet address with both DIP switches 5 and 6 OFF.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 3 set to ON position (4 = don’t care).
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: 2\. DIP switch 5 set to OFF position.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 3\. DIP switch 6 set to OFF position
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Using an Ethernet terminal program, attempt connection to IP address 192.168.2.70,
    port 20560 (0x5050).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Issue `help` command.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Ethernet terminal connects to DAQ system.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Terminal program display DAQ `help` message.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with Ethernet port connected
    to DAQ'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Ethernet terminal emulator program running on PC'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Cases DAQ_STC_708_000_000 to DAQ_STC_718_001_000 are closely related and should
    be performed together.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '*For space/editorial reasons, this sample has deleted several test cases at
    this point because they are very similar in content to the previous test cases.*'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '**2.6 DAQ_STC_710_000_000**'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test Ethernet address with DIP switches 5 ON and 6 OFF.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 3 set to ON position (4 = don’t care).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: 2\. DIP switch 5 set to ON position.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: 3\. DIP switch 6 set to OFF position.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Using an Ethernet terminal program, attempt connection to IP address 192.168.2.71,
    port 20560 (0x5050).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Issue `help` command.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Ethernet terminal connects to DAQ system.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Terminal program displays DAQ `help` message.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with Ethernet port connected
    to DAQ'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Ethernet terminal emulator program running on PC'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Cases DAQ_STC_708_000_000 to DAQ_STC_718_001_000 are closely related and should
    be performed together.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '**2.7 DAQ_STC_711_000_000**'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test Ethernet address with DIP switch 5 OFF and 6 ON.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 3 set to ON position (4 = don’t care).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: 2\. DIP switch 5 set to OFF position.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: 3\. DIP switch 6 set to ON position.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Using an Ethernet terminal program, attempt connection to IP address 192.168.2.72,
    port 20560 (0x5050).
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Issue `help` command.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Ethernet terminal connects to DAQ system.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Terminal program displays DAQ `help` message.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with Ethernet port connected
    to DAQ'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Ethernet terminal emulator program running on PC'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: Cases DAQ_STC_708_000_000 to DAQ_STC_718_001_000 are closely related and should
    be performed together.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '**2.8 DAQ_STC_712_000_000**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test Ethernet address with both DIP switches 5 and 6 ON.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 3 set to ON position (4 = don’t care).
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 2\. DIP switch 5 set to ON position.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 3\. DIP switch 6 set to ON position.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Using an Ethernet terminal program, attempt connection to IP address 192.168.2.73,
    port 20560 (0x5050).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Issue `help` command.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Ethernet terminal connects to DAQ system.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Terminal program displays DAQ `help` message.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with Ethernet port connected
    to DAQ'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Ethernet terminal emulator program running on PC'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Cases DAQ_STC_708_000_000 to DAQ_STC_718_001_000 are closely related and should
    be performed together.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '*For space/editorial reasons, this sample has deleted several test cases at
    this point because they are very similar in content to the previous test cases.*'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '**2.9 DAQ_STC_726_000_000**'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: Test command acceptance from RS-232 port.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 1\. DIP switch 1 set to ON position.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Type `help` command on serial terminal.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'Outcome:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Screen displays `help` message.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental Needs:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** Functioning (booted) DAQ system, PC with RS-232 port connected
    to DAQ'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '**Software** Latest version of DAQ firmware installed'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '**External** Serial terminal emulator program running on PC'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: 'Special Procedural Requirements:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '[None]'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 'Intercase Dependencies:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Same test as DAQ_STC_701_000_000
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '**3 Test Case Document Change Procedure**'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: When making any modifications to this STC, the author of the change must make
    a new entry in section 1.1 of this STC document, listing (at a minimum) the date,
    document ID (DAQ_STC), version number, and authorship.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '***12.4.5 Updating the RTM with STC Information***'
  id: totrans-505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Due to software review and software test case (and analysis/other) verification
    methods being mutually exclusive, you need only a single column in the RTM to
    associate the tags for these objects with other items in the RTM. In the RTM of
    the official DAQ system (which has only test cases and software review items),
    the label for this column is simply *Software Test/Review Cases*. When you add
    both DAQ_SR_*xxx_yyy_zzz* and DAQ_STC_*xxx_yyy_zzz* items to this column, there
    is never any ambiguity as the tag clearly identifies which verification type you’re
    using. Of course, this assumes that you’re using the tag identifier format that
    this chapter suggests. You could use your own tag format that also differentiates
    review and test case items in the tag name.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using this chapter’s STC tag format, locating the row in the RTM where
    you want to place the test case tag is very easy. Just locate the requirement
    with the tag DAQ_SRS_*xxx_yyy* and add the STC tag to the appropriate column in
    the same row. If you’re using a different tag format that doesn’t include requirement
    traceability directly in the tag name, you’ll have to determine the association
    manually (hopefully it’s contained within the test case).
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5 Software Test Procedure Documentation**'
  id: totrans-508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Software Test Procedure (STP)* specifies the steps for executing a collection
    of test cases, which, in turn, evaluate the quality of the software system. In
    one respect, the STP is an optional document; after all, if you execute all the
    test cases (in an appropriate order), you will fully test all the test cases.
    The purpose behind an STP is to streamline the testing process. More often than
    not, test cases overlap. Although they test different requirements, it may turn
    out that the inputs for multiple test cases are identical. In some cases, even
    the outcomes are identical. By merging such test cases into a single procedure,
    you can run a single test sequence that handles all test cases.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: Another reason for merging test cases into a single STP is the convenience of
    a common setup. Many test cases require (possibly elaborate) setup to ensure certain
    environmental conditions prior to execution. More often than not, multiple test
    cases require the same setup prior to their execution. By merging those test cases
    into a single procedure, you can perform the setup once for the entire set rather
    than repeating it for each and every test case.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: Finally, some test cases may have dependencies that require other test cases
    to execute prior to their execution. By putting these test cases in a test procedure,
    you can ensure that the test operation satisfies the dependencies.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: 'Std 829 defines a set of Level *Test Procedures (LTPr)*. As with all of the
    *level* test documents in Std 829 there are four variants of the LTPr, each variant
    being a document generally describing the scope or extent of software testing
    being documented: Component Test Procedures (aka Unit Test Procedures, or UTP),
    Component Integration Test Procedures (aka Integration Test Procedures, or ITP),
    System Test Procedures (aka System Integration Test Procedures, or SITP), and
    Acceptance Test Procedures (ATP; may include Factory Acceptance Test Procedures
    [FATP] or Site Acceptance Test Procedures [SATP]).^([15](ch19_footnote.xhtml#ch12fn15))'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: UTPs and ITPs are often automated test procedures or less formal documents,
    similar to their test case document counterparts; see “[Software Test Case Documentation](ch12.xhtml#lev-12.4)”
    on [page 274](ch12.xhtml#page_274) for an in-depth discussion.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: If you look back at [Figures 12-1](ch12.xhtml#ch12fig1) and [12-2](ch12.xhtml#ch12fig2),
    you can see that the STP (and all LTPrs) are derived directly from the STC (LTC)
    documentation. [Figure 12-1](ch12.xhtml#ch12fig1) applies to UTPs and ITPs. [Figure
    12-2](ch12.xhtml#ch12fig2) applies to SITPs and ATPs (noting that ATPs derive
    from test cases that come strictly from SyRS/SRS requirements, not from SDD elements).
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: As is true for test case documentation, ATPs are usually a subset of the SITPs
    to the customer or end user. Likewise, if there are FATP and SATP documents, the
    SATP is often a subset of the FATP, with further refinement to end-user requirements.^([16](ch19_footnote.xhtml#ch12fn16))
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.1 The IEEE Std 829-2009 Software Test Procedure***'
  id: totrans-516
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The outline for the Std 829 STP is as follows:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Relationship to Other Documents
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Inputs, Outputs, and Special Requirements
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Ordered Description of the Steps to Be Taken to Execute the Test Cases
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Document Change Procedures and History
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '*12.5.2 Extended Outline for Software Test Procedure*'
  id: totrans-529
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As is typical for IEEE standards, you’re allowed to augment this outline (adding,
    deleting, moving, and editing items, with appropriate justification). This flexibility
    is important in this particular case because there are a couple of things missing
    from this outline.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, the introduction is missing Notation for Descriptions, which
    appears in the STC outline (“Software Test Case Documentation” on [page 274](ch12.xhtml#page_274)).^([17](ch19_footnote.xhtml#ch12fn17))
    Perhaps the authors of Std 829 were expecting very few test procedures to appear
    in Section 2 (“Details”) of the document. In practice, however, it’s common to
    have a large number of test procedures. There are some very good reasons for breaking
    a single large test procedure into a series of smaller ones:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: Testing can take place in parallel. By assigning (independent) test procedures
    to multiple test teams, you can complete the testing faster.
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain tests may tie up resources (for example, test equipment such as oscilloscopes,
    logic analyzers, test fixtures, and signal generators). By breaking up a large
    test procedure into smaller test procedures, you may be able to limit the time
    a testing team needs access to certain resources.
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s nice to be able to complete a test procedure within a single working day
    (or even between breaks in the day) so testers don’t lose focus when performing
    tests.
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing test procedures by their related activities (and by required setup
    prior to those activities) can streamline test procedures, reducing steps and
    making them more efficient to run.
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many organizations require a testing team to rerun a test procedure from the
    beginning (a regression test) if any part of that test fails. Breaking a test
    procedure into smaller pieces makes rerunning test procedures far less expensive.
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be able to trace these test procedures back to the STC, to the SRS, and to
    other documentation in the RTM, you’re going to need test procedure identifiers
    (tags). Therefore, you should have a section to describe the notation you’re using
    for these tags.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, the second thing missing from the IEEE outline is an entry for the
    test procedure identification in the *Details* section. To make traceability easier,
    it would also be nice to have a section in each test procedure where you list
    the associated test cases it covers. Finally, for my own purposes, I like to include
    the following information with each test procedure:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Brief description
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag/identification
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purpose
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traceability (test cases covered)
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass/fail criteria (as this may change with each procedure)
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any special requirements (for example, environmental) required to run this test
    procedure; this could include input/output files that must exist, among other
    things
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All setup required prior to running the test procedure
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software version number when executing the test procedure
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedure steps to execute the test procedure
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Incorporating these items produces the following extended outline for an arbitrary
    STP suitable for an SIT, AT, FAT, or SAT:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: 1 Table of Contents
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: 2 Introduction
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Document Identifier and Change History (moved)
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Scope
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Glossary, Acronyms, and Abbreviations (moved)
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 References
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Notation for Descriptions
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Relationship to Other Documents (removed)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Instructions for Running the Tests (added)
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: 3 Test Procedures (name changed from *Details*)
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '3.1 Brief Description (simple phrase), Procedure #1'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.1 Procedure Identification (Tag)
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.2 Purpose
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.3 List of Test Cases Covered by This Procedure
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.4 Special Requirements
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.5 Setup Required Prior to Running Procedure
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.6 Software Version Number for This Execution
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.7 Detailed Steps to Run the Procedure
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.8 Sign-off on Test Procedure
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '3.2 Brief Description (simple phrase), Procedure #2'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: (Same subsections as previous section)
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: . . .
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3.*n* Brief Description (simple phrase), Procedure #*n*'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: (Same subsections as previous sections)
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 General
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Document Change Procedures
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Attachments and Appendixes
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: 5 Index
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.3 Introduction in the STP Document***'
  id: totrans-577
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following subsections describe the components of the STP introduction.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.1 Document Identifier and Change History**'
  id: totrans-579
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The document identifier should be some (organization-wide) unique name; this
    will typically include some project designation such as *DAQ_STP*, a creation/modification
    date, a version number, and authorship. A list of these identifiers (one for each
    revision to the document) would form the change history.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.2 Scope**'
  id: totrans-581
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The scope here has largely the same definition as that used for the STC (see
    “[Software Test Case Documentation](ch12.xhtml#lev-12.4)” on [page 274](ch12.xhtml#page_274)).
    Std 829 suggests describing the scope of the STP based on its focus and relationship
    to the STC and other test documentation. More often than not, you can get away
    with a simple reference to the Scope section in the STC.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.3 References**'
  id: totrans-583
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As usual, provide a link to any external documents (such as the STC) that are
    relevant to the STP. Std 829 also suggests including links to the individual test
    cases covered by this procedure. That, however, would be meaningful only if the
    STP contained just a few test procedures. In this revised format, the STP will
    attach the test case links to the individual test procedures in Section 3 (“Test
    Procedures”). If you have a very large system consisting of multiple, independent
    applications, you will probably have separate STPs for each of those applications.
    You would want to provide links to those other STPs in this section of the STP
    document.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.4 Notation for Descriptions**'
  id: totrans-585
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As in the STC, you would describe your STP tag format here. This book recommends
    using STP tags of the form *proj*_STP_*xxx*, where *proj* is some project-specific
    ID (such as *DAQ* or *POOL*) and *xxx* is some unique (possibly decimal) numeric
    sequence.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: Note that there is a many-to-one relationship from STC test cases to STP test
    procedures. Therefore, you cannot easily embed traceability information into the
    STP tags (there’s a similar situation with SDD tags; see “[SDD Traceability and
    Tags](ch11.xhtml#lev-11.4)” on [page 245](ch11.xhtml#page_245)). This is why it’s
    important to include the related STC tags with each test procedure, to facilitate
    traceability back to the corresponding test cases.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.5 Relationship to Other Documents**'
  id: totrans-588
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the modified variant of the STP, I’ve removed this section. Std 829 suggests
    using it to describe the relationship of this STP to other test procedure documents—specifically,
    which test procedures must be performed before or after other test procedures.
    However, in the modified form all test procedures appear in the same document.
    Therefore, a description of the relationship between tests should accompany each
    individual test procedure. (This information appears in the “Special Requirements”
    section.)
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'This is one reason for including this section in the modified form of the STP:
    very large systems may contain multiple (and relatively independent) software
    applications. There would probably be separate STP documents for each of these
    applications. This section of the modified STP could describe the relationship
    of this STP to those others, including the order in which tests must execute these
    STPs.'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.3.6 Instructions for Running Tests**'
  id: totrans-591
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should contain generic instructions to whomever will be running
    the tests. Usually the people running the tests are not the software developers.^([18](ch19_footnote.xhtml#ch12fn18))
    This section can provide insights into the software to be tested for those who
    have not lived with it on a daily basis from its inception.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: One important piece of information that should appear here is what to do if
    a test procedure fails. Should the tester attempt to continue that test procedure
    (if possible) in hopes of finding additional problems? Should the tester immediately
    suspend testing operations until the development team resolves the issue? If a
    test has been suspended, what is the process for resuming the test? For example,
    most QA teams require, at the very least, rerunning the test procedure from the
    beginning.^([19](ch19_footnote.xhtml#ch12fn19)) Some QA teams may also require
    a meeting with development to determine a set of regression tests to run before
    resuming the test procedure from the point of failure.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: This section should also discuss how to log any problems/anomalies that occur
    during testing and to describe how to bring the system back into a stable state
    or shut it down should a critical or catastrophic event occur.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: This is also where you’ll describe how to log successful runs of a test procedure.
    A tester will usually log the date and time they begin a test, provide the name
    of the test engineer, and specify which test procedure they are executing. At
    the successful conclusion of a test, most test procedures require signatures by
    the test engineer, a possible QA or customer representative, and possibly other
    managerial or project-related personnel. This section should describe the process
    for obtaining these signatures and signing off on successful runs of a test procedure.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.4 Test Procedures***'
  id: totrans-596
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section of the document repeats for each individual test procedure for
    the system under test. This is a modification of the Std 829 STP, which describes
    only a single (or maybe a few) test procedures in the document. Presumably, there
    would be multiple STP documents if your system requires a large number of test
    procedures.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.4.1 Brief Description (for Test Procedure #1)**'
  id: totrans-598
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This is the title of the test procedure. It should be a short phrase, such
    as *DIP Switch #1 Test*, that provides a quick and perhaps informal procedure
    identification.'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '**Procedure Identification**'
  id: totrans-600
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is the unique identifier (tag) for this test procedure. Other documentation
    (such as the RTM) will reference this test procedure using its tag.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '**Purpose**'
  id: totrans-602
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This is an expanded description of this test procedure: why it exists, what
    it tests, and where it sits in the big picture.'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: '**List of Test Cases Covered by This Procedure**'
  id: totrans-604
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section provides reverse traceability back to the STC document. It is simply
    a list of all the test cases that this test procedure covers. Note that this set
    of test cases should be mutually exclusive of the sets found in other test procedures—no
    test case tag should ever appear in more than one test procedure. You want to
    preserve the many-to-one relationship from test cases to test procedures. This
    will help keep the RTM clean, meaning that you won’t have to attach multiple test
    procedures to the same row in the RTM.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is quite possible that multiple test procedures will provide inputs
    (and verify corresponding outcomes) that test the same test case. This isn’t a
    problem; just pick one procedure that will take credit for covering that test
    case and assign the test case to that procedure. When someone is tracing through
    the requirements and verifying that the test procedures test a particular requirement,
    they’re not going to care if the test procedures test that requirement multiple
    times; they’ll be interested only in determining that the requirement has been
    tested at least once somewhere in the test procedures.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: If you have a choice of test procedures with which to associate a given test
    case, it’s best to include that test case in a test procedure that also handles
    related test cases. Of course, in general, this type of association, whereby related
    test cases are put into the same test procedure, happens automatically. That’s
    because you don’t arbitrarily create test procedures and then assign test cases
    to them. Instead, you pick a set of (related) test cases and use them to generate
    a test procedure.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '**Special Requirements**'
  id: totrans-608
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section identifies anything external you’ll need for the test procedure
    in order to successfully execute the test. This includes databases, input files,
    existing directory paths, online resources (such as web pages), dynamically linked
    libraries and other third-party tools, and automated test procedures.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup Required Prior to Running Procedure**'
  id: totrans-610
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section describes any processes or procedures to execute before you can
    run the test procedure. For example, a test procedure for autonomous vehicle software
    might require an operator to drive the vehicle to a specified starting point on
    a test track before starting the test. Other examples might be ensuring an internet
    or server connection is available. With the SPM, an example of setup could include
    ensuring that the test fixture (five-gallon bucket of water) is filled to some
    specified level.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '**Software Version Number for This Execution**'
  id: totrans-612
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This is a “fill in the blank” field for the test procedure. It does not mandate
    a software version for running the test; rather, the tester enters the current
    software version number prior to the test’s execution. Note that this field has
    to be filled in for each test procedure. You cannot simply write this value down
    once for the whole STP. The reason is quite simple: during testing you may encounter
    defects that require you to suspend the test. Once the development team corrects
    those defects, the testing can resume, usually from the beginning of the test
    procedure. Because different procedures in an STP could have been run on different
    versions of the software, you need to identify which version of the software you’re
    using when running each procedure.^([20](ch19_footnote.xhtml#ch12fn20))'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: '**Detailed Steps Required to Run This Procedure**'
  id: totrans-614
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This section contains steps that are necessary to execute the test procedure.
    There are two types of steps in a test procedure: actions and verifications. An
    *action* is a statement of work to be done, such as providing some input to the
    system. A *verification* involves checking some outcome/output and confirming
    that the system is operating correctly.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: You must number all procedure steps sequentially—typically starting from 1,
    though you could also use section numbers like 3.2.1 through 3.2.40 for a test
    procedure that has 40 steps. At the very least, each verification step should
    be preceded by three or so underline characters (___) or a box symbol (see [Figure
    12-3](ch12.xhtml#ch12fig3)) so that the tester can physically check off the step
    once they have successfully completed it. Some people prefer putting the checkbox
    on every item (that is, both actions and verifications) in the test procedure
    to ensure that the tester marks off each step as they complete it. Perhaps there
    should be lines on the actions and checkboxes on the verifications. However, this
    adds considerable menial work to the process, so consider carefully whether it’s
    important enough to do.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig12-3.jpg)'
  id: totrans-617
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-3: Using a checkbox on a verify statement*'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the detailed steps should include information (in appropriate positions)
    such as the following:'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: Any actions needed to start the procedure (obviously, these should appear in
    the first few steps of the procedure)
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A discussion of how to make measurements or observe outputs (don’t assume the
    tester is as familiar with the software as the developers are)
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to shut down the system at the conclusion of the test procedure to leave
    the system in a stable state (if this is necessary, it will obviously appear in
    the last steps of the procedure)
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign-off
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the test procedure there should be blank lines for the tester,
    observers, customer representatives, and possibly management personnel to sign
    off on the successful conclusion of the test procedure. A signature and date are
    the minimum information that should appear here. Each organization may mandate
    which signatures are necessary. At the very least (such as in a one-person shop),
    whoever executes the test procedure should sign and date it to affirm that it
    was run.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.5 General***'
  id: totrans-625
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The last section of an STP is a generic catch-all section where you can place
    information that doesn’t fit anywhere else.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.5.1 Document Change Procedures**'
  id: totrans-627
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Many organizations have set policies for changing test procedure documents.
    They could, for example, require customer approval before making official changes
    to an ATP. This section outlines the rules and necessary approval procedures and
    processes for making changes to the STP.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '**12.5.5.2 Attachments and Appendixes**'
  id: totrans-629
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It’s often useful to attach large tables, images, and other documentation directly
    to the LTP so that it is always available to a reader, as opposed to providing
    a link to a document that the reader cannot access.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.6 Index***'
  id: totrans-631
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If desired, you can add an index at the end of the STP.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.7 A Sample STP***'
  id: totrans-633
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section presents a shortened (for space/editorial purposes) example of
    an STP for the DAQ DIP switch project.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '**1 Table of Contents**'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '[Omitted for space reasons]'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '**2 Introduction**'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 Document Identifier**'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: 'Mar 22, 2018: DAQ_LTP, Version 1.0 Randall Hyde'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 Scope**'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: This document describes some of the DIP switch test procedures in the DAQ system
    (shortened for space/editorial reasons).
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 Glossary, Acronyms, and Abbreviations**'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '*This is a very simple and short example to keep this book smaller. Please
    don’t use this as boilerplate; you should diligently pick out terms and abbreviations
    your document uses and list them in this section.*'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: '| **Term** | **Definition** |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
- en: '| DAQ | Data acquisition system |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
- en: '| SBC | Single-board computer |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
- en: '| Software Design Description (SDD) | Documentation of the design of the software
    system (IEEE Std 1016-2009)—that is, this document. |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
- en: '| Software Requirements Specification (SRS) | Documentation of the essential
    requirements (functions, performance, design constraints, and attributes) of the
    software and its external interfaces (IEEE Std 610.12-1990). |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
- en: '| System Requirements Specification (SyRS) | A structured collection of information
    that embodies the requirements of the system (IEEE Std 1233-1998). A specification
    that documents the requirements to establish a design basis and the conceptual
    design for a system or subsystem. |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
- en: '| Software Test Cases (STC) | Documentation that describes test cases (inputs
    and outcomes) to verify correct operation of the software based on various design
    concerns/requirements (IEEE Std 829-2009). |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
- en: '| Software Test Procedures (STP) | Documentation that describes the step-by-step
    procedure to execute a set of test cases to verify correct operation of the software
    based on various design concerns/requirements (IEEE Std 829-2009). |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
- en: '**2.4 References**'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reference** | **Discussion** |'
  id: totrans-655
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
- en: '| DAQ STC | See “[A Sample Software Test Case Document](ch12.xhtml#lev-12.4.4)”
    on [page 281](ch12.xhtml#page_281). |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
- en: '| DAQ STP | An example of a full STP for the Plantation Productions DAQ system
    can be found at *[http://www.plantation-productions.com/Electronics/DAQ/DAQ.html](http://www.plantation-productions.com/Electronics/DAQ/DAQ.html)*.
    |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 830-1998 | SRS documentation standard |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 829-2008 | STP documentation standard |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1012-1998 | Software verification and validation standard |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1016-2009 | SDD documentation standard |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
- en: '| IEEE Std 1233-1998 | SyRS documentation standard |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
- en: '**NOTE**'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '*An additional reference that might make sense (not included here because it
    doesn’t exist for this simple project) is a link to any associated documentation
    for the DAQ system, such as programming manuals or schematics.*'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '**2.5 Notation for Descriptions**'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: 'Test procedure identifiers (*tags*) in this document shall take the form:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STP_*xxx*
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: where *xxx* is a (possibly dotted decimal) numeric sequence that creates a unique
    identifier out of the whole sequence. Note that *xxx* values for STP tags are
    usually numbered from 000 or 001 and usually increment by 1 for each additional
    test case item sharing the same *xxx* string.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '**2.6 Instructions for Running the Tests**'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: Execute each test procedure exactly as stated. If tester encounters an error
    or omission in the procedure, tester should redline (with red ink, which tester
    should use only for redlines) the procedure with the correct information and justify
    the redline in the test log (with date/timestamp and signature). All redlines
    within the test procedure(s) must be initialized by all signatories at the end
    of the test procedure.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: If tester discovers a defect in the software itself (that is, not simply a defect
    in the test procedure), the tester shall note the anomaly in a test log and create
    an Anomaly Report for the defect. If the defect is marginal or negligible in nature,
    the tester may continue with the test procedure, if possible, and attempt to find
    any other defects in the system on the same test procedure run. If the defect
    is critical or catastrophic in nature, or the defect is such that it is impossible
    to continue the test procedure, the tester shall immediately suspend the test
    and shut off power to the system. Once the defect is corrected, tester must restart
    the test procedure from the beginning of the procedure.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: A test procedure succeeds if and only if the tester completes all steps without
    any failures.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '**3 Test Procedures**'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '**3.1 RS-232 (Serial Port) Operation**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.1 DAQ_STP_001
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.2 Purpose
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: This test procedure tests the proper operation of DAQ commands sourced from
    the RS-232 port.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.3 Test Cases
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_701_000_000
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_702_000_000
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_703_000_000
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_726_000_000
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.4 Special Requirements
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: This test procedure requires a serial terminal emulator program running on a
    PC (for example, the *MTTY.exe* program that comes as part of the Netburner SDK;
    you could even use Hyperterm if you are masochistic). There should be a NULL modem
    cable between the PC’s serial port and the COM1 port on the Netburner.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.5 Setup Required Prior to Running
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: Netburner powered up and running application software. Serial terminal program
    should be properly connected to the serial port on the PC that is wired to the
    Netburner.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.6 Software Version Number
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: 'Version number: ____________'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: 'Date: ____________'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.7 Detailed Steps
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Set DIP switch 1 to the ON position.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Reset the Netburner and wait several seconds for it to finish rebooting.
    Note: Rebooting Netburner may produce information on the serial terminal. You
    can ignore this.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Press ENTER on the line by itself into the terminal emulator.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: 4\. ______ Verify that the DAQ system responds with a newline without any other
    output
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Type `help`, then press ENTER on a line by itself.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: 6\. ______ Verify that the DAQ software responds with a help message (contents
    unimportant as long as it is obviously a help response).
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Set DIP switch 1 to the OFF position.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '8\. Reset the Netburner and wait several seconds for it to finish rebooting.
    Note: Rebooting Netburner may produce information on the serial terminal. You
    can ignore this.'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Type the help command into the serial terminal.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: 10\. ______ Verify that the DAQ system ignores the help command.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.8 Sign-off on Test Procedure
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: 'Tester: _________________ Date: _________'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: 'QA: _________________ Date: _________'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '*In a full STP document, there would probably be additional test procedures
    here; the following test procedure ignores that possibility and continues tag
    numbering with DAQ_STP_002.*'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: '**3.2 Ethernet Address Selection**'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.1 DAQ_STP_002
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.2 Purpose
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: This test procedure tests the initialization of the Ethernet IP address based
    on DIP switches 5 and 6.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.3 Test Cases
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_709_000_000
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_710_000_000
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_711_000_000
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: DAQ_STC_712_000_000
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.4 Special Requirements
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: This test procedure requires an Ethernet terminal emulator program running on
    a PC (*Hercules.exe* has been a good choice in the past). There should be an Ethernet
    (crossover or through a hub) cable between the PC’s Ethernet port and the Ethernet
    port on the Netburner.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.5 Setup Required Prior to Running
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: Netburner powered up and running application software. DIP switch 3 in the ON
    position. DIP switch 4 in the OFF position.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.6 Software Version Number
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: 'Version number: _________'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: 'Date: _________'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.7 Detailed Steps
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Set DIP switches 5 and 6 to the OFF position.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Reset the Netburner and wait several seconds for it to finish rebooting.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: 3\. From the Ethernet terminal program, attempt to connect to the Netburner
    at IP address 192.168.2.70, port 20560 (0x5050).
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Verify that the connection was successful.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Enter a `help` command and press the ENTER key.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: 6\. ______ Verify that the DAQ system responds with an appropriate help message.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Set DIP switch 5 to the ON position and 6 to the OFF position.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Reset the Netburner and wait several seconds for it to finish rebooting.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: 9\. From the Ethernet terminal program, attempt to connect to the Netburner
    at IP address 192.168.2.71, port 20560 (0x5050).
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: 10\. ______ Verify that the connection was successful.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Enter a `help` command and press the ENTER key.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: 12\. ______ Verify that the DAQ system responds with an appropriate help message.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Set DIP switch 5 to the OFF position and 6 to the ON position.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Reset the Netburner and wait several seconds for it to finish rebooting.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: 15\. From the Ethernet terminal program, attempt to connect to the Netburner
    at IP address 192.168.2.72, port 20560 (0x5050).
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: 16\. ______ Verify that the connection was successful.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Enter a `help` command and press the ENTER key.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: 18\. ______ Verify that the DAQ system responds with an appropriate help message.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Set DIP switches 5 and 6 to the ON position.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Reset the Netburner and wait several seconds for it to finish rebooting.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: 21\. From the Ethernet terminal program, attempt to connect to the Netburner
    at IP address 192.168.2.73, port 20560 (0x5050).
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: 22\. ______ Verify that the connection was successful.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: 23\. Enter a `help` command and press the ENTER key.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: 24\. ______ Verify that the DAQ system responds with an appropriate help message.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.8 Sign-off on Test Procedure
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: 'Tester: _________________ Date: _________'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: 'QA: _________________ Date: _________'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: '*In a full STP document, there would probably be additional test procedures
    here.*'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '**4 General**'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: '**4.1 Document Change Procedures**'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: Whenever making changes to this document, add a new line to Section 2.1 listing,
    at a minimum, the date, project name (*DAQ_STP*), version number, and authorship.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: '**4.2 Attachments and Appendixes**'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: '[In the interests of space, none are provided here; in a real STP, putting
    the schematic of the DAQ system would be a good idea.]'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: '**5 Index**'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '[Omitted for space reasons.]'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: '***12.5.8 Updating the RTM with STP Information***'
  id: totrans-760
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because STP tags are very similar in nature to SDD tags, it should come as no
    surprise that the process for adding STP tags to the RTM is quite similar to that
    for adding SDD tags (see “[Updating the Traceability Matrix with Design Information](ch11.xhtml#lev-11.7)”
    on [page 259](ch11.xhtml#page_259)).
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: 'The STP adds a single column to the RTM: the STP tag column. Unfortunately,
    the STP tag does not directly embed any traceability information, so you’ll have
    to extract that information from the STP to determine where to place STP tags
    in the RTM.'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: As you may recall from “List of Test Cases Covered by This Procedure” on [page
    294](ch12.xhtml#page_294), each test procedure in an STP must include the list
    of test cases it covers. Though Std 829 does not require this, I strongly suggest
    that you include this section. If you’ve done that, you’ve already created the
    reverse traceability back to the requirements, which makes it easy to fill in
    the STP tags in the RTM. To do so, just locate each test case tag (listed in the
    current test procedure) and copy the test procedure’s STP tag into the STP tag
    column in the RTM (on the same row as the corresponding test case). Of course,
    because there are multiple test cases associated with a single test procedure,
    you’ll also have several copies of the same STP tag spread throughout the RTM
    (one per associated test case).
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: Should you ever want to easily trace your STP tags back to all the requirements
    in the RTM, particularly without having to look up the list in the STP, simply
    sort the RTM by the STP tag column. This will collect all the requirements (and
    everything else linked to that STP tag) into a contiguous group in the matrix
    and make it easy to identify everything associated with that tag.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: If you choose some other method of specifying test cases in the test procedure
    that doesn’t involve incorporating the STC tags within the test procedures, then
    determining the placement of the STP tags in the RTM becomes a manual—and often
    laborious—process. That’s why I strongly recommend including STC tag numbers in
    a test procedure when you first create it.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: 12.6 *Level* Test Logs
  id: totrans-766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although each test procedure contains a signature section where the tester (and
    any other desired personnel) can sign off on a successful test completion, a separate
    test log is needed to handle anomalies that occur during testing or to simply
    hold comments and concerns that the tester may have while running the test procedure.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the most important job of this Level *Test Log (LTL)* is to present
    a chronological view of the testing process. Whenever a tester begins running
    a test procedure, they should first log an entry stating the date, time, test
    procedure they are executing, and their name. Throughout the test’s execution,
    the tester can add entries to the test log (as necessary) indicating:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: Start of a test procedure (date/time)
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End of a test procedure (date/time)
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomalies/defects found (and whether the test was continued or suspended)
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redlines/changes needed to the test procedure because of errors found in the
    procedure itself (for example, the test procedure could list an incorrect outcome;
    if the tester can show that the program output was correct even if it differs
    from the test procedure, they would redline the test procedure and add an appropriate
    justification to the test log)
  id: totrans-772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concerns about outcomes the program produces that the tester finds questionable
    (perhaps the test procedure doesn’t list any outcome, or the test procedure’s
    outcomes are questionable)
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Personnel changes (for example, if a tester changes in the middle of a test
    due to a break, shift change, or different experience needed)
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any break period during the test procedure (for example, lunch break or end
    of the workday)
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Technically, all you need for a test log is a sheet of (preferably lined) paper.
    More often than not, STP creators add several sheets of lined paper to the end
    of the STP specifically for this test log. Some organizations simply maintain
    the test log electronically using a word processor or text editor (or even a specially
    written application). Of course, Std 829 outlines a formal recommendation for
    test logs:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Description
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Activity and Event Entries
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: '*12.6.1 Introduction in the* Level *Test Logs Document*'
  id: totrans-786
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to introducing the subsections that follow, this section might also
    identify the organization that created the document and the current status.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.1.1 Document Identifier**'
  id: totrans-788
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A unique identifier for this document; as with all Std 829 documents this should
    include, at the very least, the date, some descriptive name, a version number,
    and authorship. A change history (of the outline/format, not the specific log)
    might appear here as well.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.1.2 Scope**'
  id: totrans-790
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Scope section summarizes the system and features that the associated test
    procedure tested. Generally, this would be a reference to the test procedure’s
    Scope section unless there was something special about this particular test run.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.1.3 References**'
  id: totrans-792
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At the very least, this section should refer to the STP (and in particular,
    the specific test) document for which this test log was created.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '***12.6.2 Details***'
  id: totrans-794
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section introduces the following subsections and is what most people would
    consider the actual “test log.”
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.2.1 Description**'
  id: totrans-796
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This section (only one occurrence per test log) describes items that will apply
    to all test log entries. This could include the following:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: Identification of the test subject (for example, by version number)
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification of any changes made to the test procedure (for example, redlines)
    prior to this test
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time of the start of the test
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time of the stop of the test
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name of the tester running the test
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explanation for why testing was halted (if this should happen)
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**12.6.2.2 Activities and Event Entries**'
  id: totrans-804
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This section of the test log records each event during the execution of the
    test procedure. This section (containing multiple entries) typically documents
    the following:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: Description of the test procedure execution (procedure ID/tag)
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All personnel observing/involved in the test run—including testers, support
    personnel, and observers—and the role of each participant
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of each test procedure execution (pass, fail, commentary)
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A record of any deviations from the test procedure (for example, redlines)
  id: totrans-809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A record of any defects or anomalies discovered during the test procedure (along
    with a reference to an associated Anomaly Report if one is generated)
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***12.6.3 Glossary***'
  id: totrans-811
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section of the LTL documentation contains the usual glossary associated
    with all Std 829 documents.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '***12.6.4 A Few Comments on Test Logs***'
  id: totrans-813
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To be honest, the Std 829 outline is way too much effort for such a simple task.
    There are a few tips for managing the effort involved in this document.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.4.1 Overhead Management**'
  id: totrans-815
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Almost all of the effort that would go into creating an Std 829 LTL outline-compliant
    document can be eliminated by simply attaching the test log directly to the end
    of the STP. The test log then inherits all the preface information from the STP,
    so all you need to document is the information that appears at the very beginning
    of “*Level* Test Logs” on [page 303](ch12.xhtml#page_303).
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that LTLs have four variants, as typical for all Std 829 level documents:
    Component Test Logs (aka Unit Test Logs), Component Integration Test Logs (aka
    Integration Test Logs), System Test Logs (aka System Integration Test Logs), and
    Acceptance Test Logs (possibly including Factory Acceptance Test Logs or Site
    Acceptance Test Logs).^([21](ch19_footnote.xhtml#ch12fn21))'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: In reality, it’s rare for there to be much in the way of Component or Component
    Integration Test Logs. Most frequently, the corresponding test procedures are
    automated tests. Even when they’re not, the development team usually runs these
    tests and immediately corrects any defects they find. Because these tests run
    frequently (often multiple times per day, particularly in teams using Agile-based
    methodologies), the overhead with documenting these test runs is far too much.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: System Test Logs and Acceptance Test Logs are the variants of the LTL that testers
    (independent of the development team) run, and hence the ones that require the
    creation of actual test logs.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.4.2 Recordkeeping**'
  id: totrans-820
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The test logs are different from the other Std 829 documents in a very fundamental
    sense. Most Std 829 documents are static documents; about the only thing you do
    with them is fill in details like software version numbers and check off verification
    steps. The basic structure of the document doesn’t change if you run the procedure
    over and over again. Ultimately, there is no reason to keep any old copies of
    the test procedure around (like runs of the test procedure that failed in the
    middle of execution). All you really need to show the customer is the last run
    of the test procedure where you successfully executed all steps and passed the
    entire procedure.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: The test logs, unlike the other documents you’ve seen in this chapter thus far,
    are *dynamic* documents. They will differ radically from test run to test run
    (even if nothing else changes, at least all the dates and timestamps will change).
    Furthermore, a test log isn’t a boilerplate document where you simply fill in
    a few blanks and check off some checkboxes. It’s essentially a blank slate that
    you create while actually running the test. If there are failures, or redlines,
    or commentary, the test log maintains the history of these events. Therefore,
    it is important to keep all your test logs, even the ones that recorded failed
    tests. It is highly improbable that any system will be perfect; there will be
    mistakes and defects you discover during testing. The test logs provide proof
    that you’ve found, corrected, and retested for these defects.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: If you throw away all the old test logs that document all the defects discovered
    along the way and present only perfect test logs, any reasonable customer is going
    to question what you’re hiding. Mistakes and defects are a normal part of the
    process. If you don’t show that you’ve found and corrected these mistakes, your
    customers will assume that you haven’t tested the system well enough to find the
    defects or that you’ve faked the test logs. Keep the old test logs! This proves
    you’ve done your QA due diligence for your product.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: You could argue that keeping old test procedures to show redlines or interruptions
    in the test process is also important. However, any redline or interruption that
    appears on a test procedure document had better show up in the corresponding test
    log, so you don’t need to keep old test procedures that you’ve actually rerun.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: Note that this does not imply that all test procedures you’ve run should be
    perfect. If you have properly documented and justified redlines on a test procedure,
    yet the test execution ran successfully to its conclusion, there is no need to
    *rewrite* the test procedure and refill all the checkboxes to include a clean
    test procedure in your final documentation. If it was successful, even with redlines,
    leave it alone.^([22](ch19_footnote.xhtml#ch12fn22)) Redlines don’t indicate a
    failure of the software system; they are a defect, of course, but in the test
    procedure itself rather than the software. The goal of the test procedure is to
    test the software, not the test procedure. If minor changes to the test procedure
    are all you have, redline them and move on.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: 'In many organizations, as I’ve said before, if any verification step in a test
    procedure fails, then after any defects are corrected, the entire procedure must
    be run from the beginning (a full regression test). For some test procedures or
    in some organizations, there may be a process in place to temporarily suspend
    a test procedure, update the software, and then resume the test procedure upon
    resolving the defect. In such cases, you can treat the verification failure step
    as though it were a redline: document the original failure in the test log, document
    the fact that the development team repaired the defect, and then document the
    correct operation of the software (at the failed verification step) with the new
    version of the software.^([23](ch19_footnote.xhtml#ch12fn23))'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.4.3 Paper vs. Electronic Logs**'
  id: totrans-827
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Some people prefer creating electronic test logs; some organizations or customers
    demand paper test logs (filled in with pens, not pencils). The problem with electronic
    logs (especially if you create them using a word processor rather than an application
    program specifically designed to log test procedure runs) is that they are easily
    faked. Of course, no great programmer would ever fake a test log. However, there
    are less-than-great programmers in this world who have faked a test log. Unfortunately,
    the actions of those few have sullied the reputations of all software engineers.
    Therefore, it’s best to create test logs that are not easily faked, which often
    means using paper.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: Someone *could* fake paper logs; however, it’s a lot more work and usually more
    obvious. Ultimately, customers are probably going to want hard copies of the test
    logs; when they want them in electronic form, they’ll probably want scanned images
    of the hardcopy logs. They will be expecting you to maintain those paper logs
    in storage for legal reasons.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the best solution is to use a software application specifically designed
    for creating test logs, one that automatically logs the entries to a database
    (making it a bit more difficult to fake the data). For the customer, you would
    print a report from the database to provide a hardcopy (or generate a PDF report
    if they wanted an electronic copy).
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of how testers generate the original test log, most organizations
    will require them to eventually create a paper test log, and then the testers,
    observers, and other personnel associated with the test run will have to sign
    and date it to certify that the information is correct and accurate. This is a
    legal document at this point; someone attempting to fake any data could land in
    serious legal jeopardy.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '**12.6.4.4 Inclusion in the RTM**'
  id: totrans-832
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Normally, test logs don’t appear in the traceability matrix. However, there
    is no reason you couldn’t include them there. There is a one-to-many relationship
    between test procedures (and, therefore, STPs) and test logs. Thus, if you assign
    a unique identifier (tag) to each test report, you can add that identifier to
    an appropriate column in the RTM.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: 'Because test logs have a many-to-one relationship to test procedures, it wouldn’t
    be a bad idea to model the tag ID on the others that this book presents. For example,
    use something such as: proj_TL_*xxx*_*yyy* where *xxx* comes from the test procedure
    tag (for example, *005* from *DAQ_STP_005*) and *yyy* is a (possibly decimal)
    numeric sequence that creates a unique tag for the test log.'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7 Anomaly Reports**'
  id: totrans-835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a tester, a development team member, a customer, or anyone else using the
    system discovers a software defect, the proper way to document it is with an *Anomaly
    Report (AR)*, also known as a *Bug Report* or *Defect Report*. All too often an
    AR consists of someone telling a programmer, “Hey, I found a problem in your code.”
    The programmer then runs off to their machine to correct the problem and there’s
    no documentation to track the anomaly. This is very unfortunate, because tracking
    defects in a system is very important to maintaining the quality of that system.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: 'The AR is the formal way to track system defects. Among other things, it captures
    the following information:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: Date and time of defect occurrence
  id: totrans-838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The person who discovered the defect (or at least, who recorded the defect report
    in response to some user’s complaint)
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the defect
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A procedure for reproducing the defect in the system (assuming the issue is
    deterministic and is easy enough to reproduce)
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The impact the defect has on the system (for example, catastrophic, critical,
    marginal, negligible)
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of the defect to end users (economic and social impact) so management
    can assign a priority to correcting it
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any possible workarounds to the defect (so users can continue using the system
    while the development team works on correcting the defect)
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A discussion of what it might take to correct the defect (including recommendations
    and conclusions concerning the defect)
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current status of the anomaly (for example, “new anomaly,” “development team
    is working on correction,” “in testing,” “corrected in software version *xxx.xxx*”)
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Naturally, Std 829 has a suggested outline for Anomaly Reports. However, most
    organizations use defect-tracking software to record defects or anomalies. If
    you aren’t willing to spend the money on a commercial product, there are many
    open source products freely available, such as Bugzilla. Most of these products
    use a database organization that is reasonably compatible with the recommendations
    from Std 829:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Summary
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Date Anomaly Discovered
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Context
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Description of Anomaly
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Impact
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Originator’s Assessment of Urgency (see IEEE 1044-1993 [B13])
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 Description of Corrective Action
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: 2.8 Status of the Anomaly
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: 2.9 Conclusions and Recommendations
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Document Change Procedures and History
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: '***12.7.1 Introduction in the Anomaly Reports Document***'
  id: totrans-864
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following subsections describe the components of the AR introduction.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.1.1 Document Identifier**'
  id: totrans-866
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is a unique name that other reports can reference (such as test logs and
    test reports).
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.1.2 Scope**'
  id: totrans-868
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Scope section gives a brief description of anything that doesn’t appear
    elsewhere in the AR.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.1.3 References**'
  id: totrans-870
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: References include links to other relevant documents, such as test logs and
    test procedures.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '***12.7.2 Details***'
  id: totrans-872
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section introduces the subsections that follow.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.1 Summary**'
  id: totrans-874
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Here you give a brief description of the anomaly.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.2 Date Anomaly Discovered**'
  id: totrans-876
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: List the date (and time, if possible/appropriate) when the anomaly was discovered.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.3 Context**'
  id: totrans-878
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Software version and installation/configuration information goes in the Context
    section. This section should also refer to relevant test procedures and test logs,
    if appropriate, which should help to identify this anomaly. If no such test procedure
    exists for this anomaly, consider suggesting an addition to some test procedure
    that would catch it.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.4 Description of Anomaly**'
  id: totrans-880
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Provide an in-depth description of the defect including (if possible) how to
    reproduce it. The description might include the following information:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: Inputs
  id: totrans-882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actual results
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outcome(s) (particularly, the outcomes that vary from the test procedure)
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedure step of failure
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment
  id: totrans-886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was the defect repeatable?
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any tests executed immediately prior to failure than might have affected results
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tester(s)
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observer(s)
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**12.7.2.5 Impact**'
  id: totrans-891
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Describe the impact this defect will have on system users. Describe any possible
    workarounds, such as changing the documentation or modifying the use of the system.
    If possible, estimate cost and time to repair this defect and the risk associated
    with leaving it in place. Estimate the risk associated with fixing it, which could
    impact other system features.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.6 Originator’s Assessment of Urgency**'
  id: totrans-893
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: State the level of urgency for a speedy repair. The integrity levels and risk
    assessment scale from “Integrity Levels and Risk Assessment” on [page 263](ch12.xhtml#page_263)
    are probably a good minimum mechanism for stating the urgency of repair.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.7 Description of Corrective Action**'
  id: totrans-895
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section describes the time needed to determine the reason for the defect;
    an estimate of the time, cost, and risk associated with repairing it; and an estimate
    of the effort required to retest the system. Include any necessary regression
    tests to ensure that nothing else is broken by the fix.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.8 Status of the Anomaly**'
  id: totrans-897
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: List the status of the current defect. Std 829 recommends statuses such as “open,”
    “approved for resolution,” “assigned for resolution,” “fixed,” and “tested with
    the fix confirmed.”
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.9 Conclusions and Recommendations**'
  id: totrans-899
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should provide commentary as to why the defect occurred and recommend
    possible changes to the development process to prevent similar defects in the
    future. This section might also suggest additional requirements, test cases, and
    (modifications to) test procedures to catch the anomaly in the future; this is
    particularly important if testing discovered the anomaly by accident rather than
    by running specific test procedure steps to catch this particular defect.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.2.10 General**'
  id: totrans-901
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is the usual end-of-document section in Std 829 documents providing a change
    history (to the AR format, not to a specific AR) and change procedures. Std 829
    does not recommend a glossary.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '***12.7.3 A Few Comments on Anomaly Reports***'
  id: totrans-903
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is worthwhile to bear the following points in mind when dealing with Anomaly
    Reports.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.3.1 ARs Don’t Go in the RTM**'
  id: totrans-905
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The purpose of the traceability matrix is to be able to trace requirements of
    designs and tests to ensure that the system successfully meets all requirements.
    While one could argue that test logs belong in the RTM, most people don’t bother
    to put them there because they normally attach test logs directly to the completed
    test procedures.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: Anomalies, on the other hand, aren’t something whose existence you’re trying
    to prove; indeed, in a perfect world you’re trying to *disprove* the existence
    of anomalies. This doesn’t mean you discard ARs. Just as with test logs, it’s
    very important to keep all the old ARs around—they provide valuable proof that
    you’ve done your due diligence when testing the system. More importantly, you
    want to keep ARs for regression purposes. Sometimes long after a defect has been
    discovered and corrected, it finds its way into the system again. Having a historical
    record of ARs makes it possible to go back and examine the original cause and
    its solution.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: '**12.7.3.2 Electronic vs. Paper ARs**'
  id: totrans-908
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As this chapter noted earlier, most organizations use a defect-tracking system
    to capture and track ARs. Although Std 829 doesn’t specifically suggest or require
    paper documents (indeed, Std 829 points out that you can use software to track
    anomalies), the outline form tends to suggest a hardcopy format. But given that
    most organizations use defect-tracking software, why bother with hardcopy ARs?
    The main reason is portability in the “you can carry it with you” sense. While
    using the defect-tracking system makes a lot of sense for system integration,
    factory acceptance tests, and other tests done at the development site where there
    is easy access to the tracker, in some cases it may not be available or accessible
    at an installation during a site acceptance test.^([24](ch19_footnote.xhtml#ch12fn24))
    In such situations, creating ARs on paper and then entering them into the defect-tracking
    system when possible is probably the best approach.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '**12.8 Test Reports**'
  id: totrans-910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When testing is completed, a test report summarizes the results. As for many
    of the other test documents, Std 829 describes a wide variety of test reports
    you can produce. Std 829 defines *Level* Interim Test Status Reports (LITSR),
    *Level* Test Reports (LTR), and Master Test Reports (MTR). Of course, you can
    substitute *Component*, *Component Integration*, *System*, and *Acceptance* in
    place of *Level* (with the usual common names as well).
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: A very large organization might need to produce interim test reports so management
    can figure out what’s going on in an equally large system. For more information
    on LITSRs, refer to IEEE Std 829-2008; they are, quite frankly, documentation
    for documentation’s sake for most projects, but large governmental contracts might
    explicitly require them.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '*Level* and Master Test Reports vary according to the size of the project.
    Most small to medium-sized systems with (typically) a single software application
    and, therefore, a single STP, will have a single test report, if any at all.'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: Once a system grows to the size that it contains several major software applications,
    there will usually be a test report for each major application and then an MTR
    as a summary of the results from the individual test reports. The MTR, then, provides
    an *executive-level review* of all the tests.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: '***12.8.1 Brief Mention of the Master Test Report***'
  id: totrans-915
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As the MTR is generally not a document that individual developers will deal
    with, this section will simply present the Std 829-suggested outline without further
    comment and then concentrate on LTRs.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details of the Master Test Report
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Overview of All Aggregate Test Results
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Rationale for Decisions
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Conclusions and Recommendations
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Document Change Procedures and History
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the MTR, see IEEE Std 829-2008.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: '*12.8.2* Level *Test Reports*'
  id: totrans-929
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Although you could have component/unit test reports and component integration
    test reports, most organizations leave unit and integration testing to the development
    department, as upper management generally doesn’t care about the low-level details.
    Thus, the most common Level *Test Reports (LTRs)* you’ll see will be System (Integration)
    Test Reports and Acceptance Test Reports, typically Factory Acceptance Test Reports
    and Site Acceptance Test Reports. Std 829 outlines LTRs as follows:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Document Identifier
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Scope
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 References
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: 2 Details
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Overview of Test Results
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Detailed Test Results
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Rationale for Decisions
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Conclusions and Recommendations
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: 3 General
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Glossary
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Document Change Procedures and History
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: Sections 1 (“Introduction”) and 3 (“General”) are the same as for most other
    Std 829 test documents in this chapter. The core of the test report is in Section
    2 (“Details”). The following subsections describe its contents.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '**12.8.2.1 Overview of the Test Results**'
  id: totrans-944
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section is a summary of the test activities. It would briefly describe
    the features covered by the tests, testing environment, software/hardware version
    numbers, and any other general information about the test. The overview should
    also mention if there was anything special about the testing environment that
    would yield different results if the test were conducted in a different environment,
    like a factory.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: '**12.8.2.2 Detailed Test Result**'
  id: totrans-946
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Summarize all the results in this section. List all anomalies discovered and
    their resolution. If the resolution to a defect has been deferred, be sure to
    provide justification and discuss the impact that defect will have on the system.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: If there were any deviations from the test procedure, explain and justify those
    deviations. Describe any changes (redlines) to the test procedures.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: This section should also provide a confidence level in the testing process.
    For example, if the testing process focuses on code coverage, this section should
    describe the estimated percentage of code coverage that the testing processing
    achieved.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: '**12.8.2.3 Rationale for Decisions**'
  id: totrans-950
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If the team had to make any decisions during the testing process such as deviations
    from test procedures or failure to correct known anomalies, this section should
    provide the rationale for those decisions. This section might also justify any
    conclusions reached (in the next section).
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: '**12.8.2.4 Conclusions and Recommendations**'
  id: totrans-952
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This section should state any conclusions emanating from the test processing.
    This section should discuss the product’s fitness for release/production use,
    and recommend possibilities such as disabling certain, possibly known, anomalous
    features to allow early release of the system. This section could also recommend
    stalling the release pending further development and possible debugging.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: '**12.9 Do You Really Need All of This?**'
  id: totrans-954
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IEEE Std 829-2008 describes a huge volume of documentation. Do you really need
    to create all this documentation for the next “killer app” you’re developing by
    yourself in your home office? Of course not. Except for the largest (government-sponsored)
    applications, the vast majority of the documentation described in Std 829 is complete
    overkill. For normal projects, you’ll probably want to have the STC, SRL, and
    STP documents.^([25](ch19_footnote.xhtml#ch12fn25)) Test logs will simply be an
    appendix to the STP. Anomaly Reports would be entries in your defect-tracking
    system (from which you can produce hardcopy reports).
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: You can also reduce the size of your STC and STP documents by using automated
    testing. You probably can’t eliminate all manual tests, but you can get rid of
    many of them.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: Test reports are easy enough to eliminate in smaller projects. The test log
    at the end of the STP will likely serve as a reasonable alternative unless you
    have multiple levels of management demanding full documentation.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: Agile development methodologies might seem like a good alternative for reducing
    the cost of all this documentation. However, keep in mind that developing, validating,
    verifying, and maintaining all those automated test procedures also has an associated—and
    often equivalent—cost.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: '**12.10 For More Information**'
  id: totrans-959
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dingeldein, Tirena. “5 Best Free and Open Source Bug Tracking Software for Cutting
    IT Costs.” September 6, 2019\. *[https://blog.capterra.com/top-free-bug-tracking-software/](https://blog.capterra.com/top-free-bug-tracking-software/)*.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: 'IEEE. “IEEE Std 829-2008: IEEE Standard for Software and System Test Documentation.”
    July 18, 2008\. *[http://standards.ieee.org/findstds/standard/829-2008.html](http://standards.ieee.org/findstds/standard/829-2008.html)*.
    This is expensive ($160 US when I last checked), but this is the gold standard.
    It’s more readable than the SDD standard, but still heavy reading.'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: Peham, Thomas. “7 Excellent Open Source Bug Tracking Tools Unveiled by Usersnap.”
    May 8, 2016\. *[https://usersnap.com/blog/open-source-bug-tracking/](https://usersnap.com/blog/open-source-bug-tracking/)*.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: 'Plantation Productions, Inc. “Open Source/Open Hardware: Digital Data Acquisition
    & Control System.” n.d. *[http://www.plantation-productions.com/Electronics/DAQ/DAQ.html](http://www.plantation-productions.com/Electronics/DAQ/DAQ.html)*.
    This is where you’ll find the DAQ Data Acquisition Software Review, Software Test
    Case, Software Test Procedures, and Reverse Traceability Matrix.'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: 'Software Testing Help. “15 Best Bug Tracking Software: Top Defect/Issue Tracking
    Tools of 2019.” November 14, 2019\. *[http://www.softwaretestinghelp.com/popular-bug-tracking-software/](http://www.softwaretestinghelp.com/popular-bug-tracking-software/)*.'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia. “Bug Tracking System.” Last modified April 4, 2020\. [*https://en.wikipedia.org/wiki/Bug_tracking_system*](https://en.wikipedia.org/wiki/Bug_tracking_system).
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
