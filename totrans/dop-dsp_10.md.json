["```\n`--snip--`\nkind: Config\nbuild:\n  local: {}\n  artifacts:\n  - image: dftd/telnet-server\ntest:\n- image: dftd/telnet-server\n  custom:\n  - command: go test ./... -v\n  structureTests:\n  - ./container-tests/command-and-metadata-test.yaml\ndeploy:\n  kubectl:\n    manifests:\n    - kubernetes/*\n```", "```\n`--snip--`\ncommandTests:\n  - name: \"telnet-server\"\n    command: \"./telnet-server\"\n    args: [\"-i\"]\n    expectedOutput: [\"telnet port :2323\\nMetrics Port: :9000\"]\nmetadataTest:\n  env:\n    - key: TELNET_PORT\n      value: 2323\n    - key: METRIC_PORT\n      value: 9000\n  cmd: [\"./telnet-server\"]\n  workdir: \"/app\n```", "```\n$ **skaffold dev --cleanup=false**\nListing files to watch...\n - dftd/telnet-server\nGenerating tags...\n - dftd/telnet-server -> dftd/telnet-server:4622725\nChecking cache...\n - dftd/telnet-server: Not found. Building\nFound [minikube] context, using local docker daemon.\nBuilding [dftd/telnet-server]...\n`--snip--`\nSuccessfully tagged dftd/telnet-server:4622725\n```", "```\nStarting test...\nTesting images...\n=======================================================\n====== Test file: command-and-metadata-test.yaml ======\n=======================================================\n=== RUN: Command Test: telnet-server\n--- PASS\nduration: 571.602755ms\nstdout: telnet port :2323\nMetrics Port: :9000\n\n=== RUN: Metadata Test\n--- PASS\nduration: 0s\n\n=======================================================\n======================= RESULTS =======================\n=======================================================\nPasses:      2\nFailures:    0\nDuration:    571.602755ms\nTotal tests: 2\n\nPASS\nRunning custom test command: \"go test ./... -v\"\n?   \ttelnet-server\t[no test files]\n?   \ttelnet-server/metrics\t[no test files]\n=== RUN   TestServerRun\nMocked charge notification function\n    TestServerRun: server_test.go:23: PASS:\tRun()\n--- PASS: TestServerRun (0.00s)\nPASS\nok  \ttelnet-server/telnet\t(cached)\nCommand finished successfully.\n```", "```\n`--snip--`\nStarting deploy...\n - deployment.apps/telnet-server created\n - service/telnet-server created\n - service/telnet-server-metrics created\nWaiting for deployments to stabilize...\n - deployment/telnet-server: waiting for rollout to finish: 0 of 2 updated replicas are available...\n    - pod/telnet-server-6497d64d7f-j8jq5: creating container telnet-server\n    - pod/telnet-server-6497d64d7f-sx5ll: creating container telnet-server\n - deployment/telnet-server: waiting for rollout to finish: 1 of 2 updated replicas are available...\n - deployment/telnet-server is ready.\nDeployments stabilized in 2.140948622s\n**Press Ctrl+C to exit**\nWatching for changes...\n```", "```\nreturn fmt.Sprintf(\"%s%s%s\", **colorGreen**, b, colorReset)\n```", "```\nreturn fmt.Sprintf(\"%s%s%s\", **colorYellow**, b, colorReset)\n```", "```\n$ **minikube kubectl -- get services telnet-server**\nNAME           TYPE           CLUSTER-IP       EXTERNAL-IP        PORT(S)       AGE\ntelnet-server  LoadBalancer   10.105.161.160   **10.105.161.160** 2323:30488/TCP   6m40s\n```", "```\n$ **telnet 10.105.161.160 2323**\n```", "```\n$ **minikube kubectl -- rollout history deployment telnet-server**\ndeployment.apps/telnet-server\nREVISION  CHANGE-CAUSE\n1         <none>\n2         <none>\n```", "```\n$ **minikube kubectl -- rollout undo deployment telnet-server --to-revision=1**\ndeployment.apps/telnet-server rolled back\n```", "```\n$ **minikube kubectl -- get pods**\nNAME                             READY   STATUS    RESTARTS   AGE\ntelnet-server-7fb57bd65f-qc8rg   1/1     Running   0          28s\ntelnet-server-7fb57bd65f-wv4t9   1/1     Running   0          29s\n```", "```\n$ **telnet 10.105.161.160 2323**\n```"]