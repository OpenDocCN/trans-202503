- en: '**PART 1**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**LEDS**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 1: PUSHBUTTON-CONTROLLED LED'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, YOU’LL ADD A PUSHBUTTON SWITCH TO AN LED CIRCUIT TO CONTROL
    WHEN THE LED IS LIT.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0022-01.jpg)![image](../images/f0023-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • LED
  prefs: []
  type: TYPE_NORMAL
- en: • Momentary tactile four-pin pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: • 10k-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: • 220-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: This project will take you through the basics of switches, which you’ll be using
    a lot throughout this book. Almost all electrical items use switches to turn an
    element on or off. There are many types of switches, and the one you’ll use now
    is a pushbutton ([Figure 1-1](ch01.xhtml#ch1fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 1-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: A pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When pressed, a pushbutton completes a circuit, turning it on. As soon as the
    button is released, the connection will spring back and break that circuit, turning
    it off. The pushbutton switch is also known as a *momentary* or *normally open*
    switch, and is used in, for example, computer keyboards. This is in contrast to
    a *toggle switch*, which stays either on or off until you toggle it to the other
    position, like a light switch.
  prefs: []
  type: TYPE_NORMAL
- en: This type of pushbutton has four pins, but you generally use only two at a time
    for connection. You’ll use the top connections in this project, although the two
    unused pins at the bottom would do the same job. As [Figure 1-2](ch01.xhtml#ch1fig2)
    shows, the pins work in a circuit. Pins A and C are always connected, as are pins
    B and D. When the button is pressed, the circuit is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 1-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: A pushbutton’s incomplete circuit
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f01-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place your pushbutton in a breadboard, as shown in [Figure 1-3](ch01.xhtml#ch1fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 1-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Placing your pushbutton
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f01-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect pin A to one leg of a 10k-ohm resistor, and connect that same resistor
    leg to Arduino pin 2\. Connect the other resistor leg to the GND rail, and connect
    the GND rail to the Arduino’s GND. Connect pin B on the switch to the +5V rail,
    and connect this rail to +5V on the Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PUSHBUTTON** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin A | GND and pin 2 via 10k-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin B | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Add the LED to your breadboard, connecting the longer, positive leg to Arduino
    pin 13 via a 220-ohm resistor and the shorter leg to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Pin 13 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Confirm that your setup matches the circuit diagram shown in [Figure 1-4](ch01.xhtml#ch1fig4),
    and then upload the code in “[The Sketch](ch01.xhtml#ch01lev1sec03)” on [page
    27](ch01.xhtml#page_27).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 1-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the pushbutton-controlled LED
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f01-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this sketch, you assign a pin for the pushbutton and set it as `INPUT`, and
    a pin for the LED and set it as `OUTPUT`. The code tells the Arduino to turn the
    LED on as long as the button is being pressed (completing the circuit), and to
    keep the LED off when the button is not being pressed. When the button is released,
    the circuit breaks and the LED will turn off again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 2: LIGHT DIMMER'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, YOU’LL CREATE A DIMMER SWITCH BY ADDING A POTENTIOMETER
    TO CONTROL THE BRIGHTNESS OF AN LED.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0028-01.jpg)![image](../images/f0029-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • LED
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 470-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: A *potentiometer* is a variable resistor with a knob that allows you to alter
    the resistance of the potentiometer as you turn it. It is commonly used in electrical
    devices such as volume controls on audio equipment. This project uses a 50k-ohm
    potentiometer.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The potentiometer manipulates a continuous *analog* signal, which represents
    physical measurements. Humans perceive the world in analog; everything we see
    and hear is a continuous transmission of information to our senses. This continuous
    stream is what defines analog data. Digital information, on the other hand, estimates
    analog data using only numbers. To approximate the continuous analog data from
    the potentiometer, the Arduino must represent the signal as a series of discrete
    numbers—in this case, voltages. The center pin of the potentiometer sends the
    signal to an Arduino analog IN—any pin from A0 to A5—to read the value.
  prefs: []
  type: TYPE_NORMAL
- en: The LED is actually being switched on and off, but it happens so quickly that
    our eyes compensate and we see a continuously lit LED at varying light levels.
    This is known as *persistence of vision*.
  prefs: []
  type: TYPE_NORMAL
- en: To create persistence of vision, the Arduino uses a technique called *pulse
    width modulation (PWM)*. The Arduino creates a pulse by switching the power on
    and off very quickly. The duration that the power is on or off (known as the *pulse
    width*) in the cycle determines the average output, and by varying this pulse
    width the pattern can simulate voltages between full on (5 volts) and off (0 volts).
    If the signal from the Arduino is on for half the time and off for half, the average
    output will be 2.5 volts, halfway between 0 and 5\. If the signal is on for 80
    percent and off for 20 percent, then the average voltage is 4 volts, and so on.
    You can vary the signal, which in turn varies the pulse width, by turning the
    potentiometer left or right, increasing or decreasing the resistance.
  prefs: []
  type: TYPE_NORMAL
- en: Using this technique, you can change the voltage sent to the LED and make it
    dimmer or brighter to match the analog signal from the potentiometer. Only pins
    3, 5, 6, 9, 10, or 11 on the Arduino can use PWM. [Figure 2-1](ch02.xhtml#ch2fig1)
    gives examples of how PWM would look as a waveform.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 2-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Pulse width modulation as a waveform
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f02-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the potentiometer into your breadboard and connect the center pin to
    the Arduino’s A0 pin. Connect one of the outer pins to the +5V rail of the breadboard
    and the other outer pin to GND on the breadboard (it doesn’t actually matter which
    way around the outer potentiometer pins are connected; these instructions just
    reflect the diagrams in this project), as shown in [Figure 2-2](ch02.xhtml#ch2fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 2-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the potentiometer to the Arduino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f02-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '| **POTENTIOMETER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Left pin | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Center pin | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Right pin | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the LED into the breadboard. Attach the positive leg (the longer leg)
    to pin 9 of the Arduino via the 470-ohm resistor, and the negative leg to GND,
    as shown in [Figure 2-3](ch02.xhtml#ch2fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND via 470-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 2-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the light dimmer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f02-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Upload the code in “[The Sketch](ch01.xhtml#ch01lev1sec03)” below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn the potentiometer to control the brightness of the LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This project has many potential uses: you can cluster a number of LEDs together
    to create an adjustable flashlight, a night-light, a display case light, or anything
    else that uses dimming lights.'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sketch works by setting pin A0 as your potentiometer and pin 9 as an `OUTPUT`
    to power the LED. You then run a loop that continually reads the value from the
    potentiometer and sends that value as voltage to the LED. The voltage value is
    between 0–5 volts, and the brightness of the LED will vary accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 3: BAR GRAPH'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, YOU’LL COMBINE WHAT YOU’VE LEARNED IN THE PREVIOUS LED PROJECTS
    TO CREATE AN LED BAR GRAPH THAT YOU CAN CONTROL WITH A POTENTIOMETER.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0034-01.jpg)![image](../images/f0035-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 9 LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 9 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bar graph is a series of LEDs in a line, similar to what you might see on
    an audio display. It’s made up of a row of LEDs with an analog input, like a potentiometer
    or microphone. In this project, you use the analog signal from the potentiometer
    to control which LEDs are lit. When you turn the potentiometer one way, the LEDs
    light up one at a time in sequence, as shown in [Figure 3-1](ch03.xhtml#ch3fig1)(a),
    until they are all on, shown in [Figure 3-1](ch03.xhtml#ch3fig1)(b). When you
    turn it the other way, they turn off in sequence, as shown in [Figure 3-1](ch03.xhtml#ch3fig1)(c).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 3-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The LEDs light up and turn off in sequence as you turn the potentiometer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f03-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the LEDs into the breadboard with their shorter, negative legs in the
    GND rail. Connect this rail to Arduino GND using a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a 220-ohm resistor for each LED into the breadboard, with one resistor
    leg connected to the positive LED leg. Connect the other legs of the resistors
    to digital pins 2–10 in sequence, as shown in [Figure 3-2](ch03.xhtml#ch3fig2).
    It’s important that the resistors bridge the break in the breadboard as shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | Pins 2–10 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 3-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the bar graph
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f03-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*As mentioned in [Project 2](ch02.xhtml#ch02), it doesn’t actually matter which
    way the outer potentiometer pins are connected, but I’ve given instructions here
    to reflect the images.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place the potentiometer in the breadboard and connect the center pin to Arduino
    A0\. Connect the right outer pin to +5V and the left potentiometer pin to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **POTENTIOMETER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Left pin | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Center pin | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Right pin | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Upload the code in “[The Sketch](ch03.xhtml#ch03lev1sec03)” below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first reads the input from the potentiometer. It maps the input value
    to the output range, in this case nine LEDs. Then it sets up a `for` loop over
    the outputs. If the output number of the LED in the series is lower than the mapped
    input range, the LED turns on; if not, it turns off. See? Simple! If you turn
    the potentiometer to the right, the LEDs light up in sequence. Turn it to the
    left, and they turn off in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 4: DISCO STROBE LIGHT'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, YOU’LL APPLY THE SKILLS YOU LEARNED IN [PROJECT 3](ch03.xhtml#ch03)
    TO MAKE A STROBE LIGHT WITH ADJUSTABLE SPEED SETTINGS.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0039-01.jpg)![image](../images/f0040-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 2 blue LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 2 red LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 4 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Turning the potentiometer up or down changes the speed of the flashing lights,
    creating a strobe effect. You can use red and blue LEDs for a flashing police
    light effect (see [Figure 4-1](ch04.xhtml#ch4fig1)). Connect the LEDs of the same
    color to the same Arduino pin so they’ll always light together. If you build a
    casing to house your LEDs, you’ll have your own mobile strobe unit. You can add
    up to 10 LEDs; just update the sketch to include your output pins and the new
    number of LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 4-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Red and blue LEDs mimic the lights of a police car.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f04-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place your LEDs into the breadboard with the short, negative legs in the GND
    rail, and then connect this rail to Arduino GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Remember to add power to the breadboard.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Insert the resistors into the board, connecting them to the longer, positive
    legs of the LEDs. Use jumper wires to connect the two red LEDs together and the
    two blue LEDs together via the resistors, as shown in [Figure 4-2](ch04.xhtml#ch4fig2);
    this allows the LEDs of the same color to be controlled by a single pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 4-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting LEDs with jumper wires
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f04-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the red LEDs to Arduino pin 12 and the blue LEDs to Arduino pin 11.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (red) | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (blue) | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Place the potentiometer in the breadboard and connect the center pin to Arduino
    A0, the left pin to GND, and the right pin to +5V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **POTENTIOMETER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Left pin | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Center pin | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Right pin | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Confirm that your setup matches that of [Figure 4-3](ch04.xhtml#ch4fig3), and
    then upload the code in “[The Sketch](ch04.xhtml#ch04lev1sec03)” on [page 43](ch04.xhtml#page_43).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 4-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the disco strobe light
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f04-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch works by setting the analog signal from the potentiometer to the
    Arduino as an input and the pins connected to the LEDs as outputs. The Arduino
    reads the analog input from the potentiometer and uses this value as the *delay
    value*—the amount of time that passes before the LEDs change state (either on
    or off). This means that the LEDs are on and off for the duration of the potentiometer
    value, so changing this value alters the speed of the flashing. The sketch cycles
    through the LEDs to produce a strobe effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 5: PLANT MONITOR'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT I’LL INTRODUCE A NEW TYPE OF ANALOG SENSOR THAT DETECTS MOISTURE
    LEVELS. YOU’LL SET UP A LIGHT AND SOUND ALARM SYSTEM TO TELL YOU WHEN YOUR PLANT
    NEEDS WATERING.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0045-01.jpg)![image](../images/f0046-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • LED
  prefs: []
  type: TYPE_NORMAL
- en: • HL-69 hygrometer soil moisture sensor
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll use an HL-69 moisture sensor, readily available online for a few dollars
    or from some of the retailers listed in [Appendix A](app01.xhtml#app01). The prongs
    of the sensor detect the moisture level in the surrounding soil by passing current
    through the soil and measuring the resistance. Damp soil conducts electricity
    easily, so it provides lower resistance, while dry soil conducts poorly and has
    a higher resistance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sensor consists of two parts, as shown in [Figure 5-1](ch05.xhtml#ch5fig1):
    the actual prong sensor (a) and the controller (b). The two pins on the sensor
    need to connect to the two separate pins on the controller (connecting wires are
    usually supplied). The other side of the controller has four pins, three of which
    connect to the Arduino.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 5-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The HL-69 moisture sensor prong (a) and controller (b)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f05-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The four pins are, from left to right, AO (analog out), DO (digital out), GND,
    and VCC (see [Figure 5-2](ch05.xhtml#ch5fig2)). You can read the values from the
    controller through the IDE when it’s connected to your computer. This project
    doesn’t use a breadboard, so the connections are all made directly to the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 5-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: The pins are labeled on the underside of the module
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f05-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lower readings indicate that more moisture is being detected, and higher readings
    indicate dryness. If your reading is above 900, your plant is seriously thirsty.
    If your plant gets too thirsty, the LED will light and the piezo buzzer will sound.
    *Piezos* are inexpensive buzzers and are explained more in [Project 7](ch07.xhtml#ch07).
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the sensor’s two pins to the + and – pins on the controller using the
    provided connecting wires, as shown in [Figure 5-3](ch05.xhtml#ch5fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 5-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the sensor to the controller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f05-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the three prongs from the controller to +5V, GND, and Arduino A0 directly
    on the Arduino, as shown in the following table. The DO pin is not used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SENSOR CONTROLLER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| A0 | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| DO | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect an LED directly to the Arduino with the shorter, negative leg in GND
    and the longer, positive leg in Arduino pin 13, as shown in [Figure 5-4](ch05.xhtml#ch5fig4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 5-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the LED to the Arduino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f05-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '| **LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the piezo buzzer’s black wire to GND and its red wire to Arduino pin
    11.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Check that your setup matches that of [Figure 5-5](ch05.xhtml#ch5fig5), and
    then upload the code in “[The Sketch](ch05.xhtml#ch05lev1sec03)” on [page 51](ch05.xhtml#page_51).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 5-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the plant monitor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f05-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the Arduino to your computer using the USB cable. Open the Serial Monitor
    in your IDE to see the values from the sensor—this will also help you to calibrate
    your plant monitor. The IDE will display the value of the sensor’s reading. My
    value was 1000 with the sensor dry and not inserted in the soil, so I know this
    is the highest, and driest, value. To calibrate this value, turn the potentiometer
    on the controller clockwise to increase the resistance and counterclockwise to
    decrease it (see [Figure 5-5](ch05.xhtml#ch5fig5)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the sensor is inserted into moist soil, the value will drop to about `400`.
    As the soil dries out, the sensor value rises; when it reaches `900`, the LED
    will light and the buzzer will sound.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**FIGURE 5-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Turn the potentiometer to calibrate your plant monitor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f05-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first defines Arduino pin A0 so that it reads the moisture sensor
    value. It then defines Arduino pin 11 as output for the buzzer, and pin 13 as
    output for the LED. Use the `Serial.Println()` function to send the reading from
    the sensor to the IDE, in order to see the value on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Change the value in the line
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: depending on the reading from the sensor when it is dry (here it’s 900). When
    the soil is moist, this value will be below 900, so the LED and buzzer will remain
    off. When the value rises above 900, it means the soil is drying out, and the
    buzzer and LED will alert you to water your plant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 6: GHOST DETECTOR'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WHO WOULDN’T WANT TO MAKE A GHOST DETECTOR? THIS IS A REALLY SIMPLE PROJECT
    THAT DOESN’T TAKE LONG TO PUT TOGETHER, SO YOU CAN START DETECTING GHOSTS RIGHT
    AWAY.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0053-01.jpg)![image](../images/f0054-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 3 red LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 1 yellow LED
  prefs: []
  type: TYPE_NORMAL
- en: • 6 green LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 10 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: • 20-centimeter length of single-core wire
  prefs: []
  type: TYPE_NORMAL
- en: • 1M-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, so I might be stretching things a bit by calling this project a ghost
    detector. This project actually detects *electromagnetic fields*, but many people
    believe this is how to tell if there are ghosts or spirits around.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll set up a ghost-detecting antenna and LED bar graph
    system to tell whether there is a high level of electromagnetic activity in the
    vicinity. A length of bare wire acts as an antenna to pick up an electromagnetic
    field within a radius of two meters. Depending on the strength of the signal,
    the LEDs will light in sequence: the stronger the signal, the more LEDs will light.
    Power up the Arduino, and point your detector into a room to pick up any unusual
    presences. Be aware that electrical appliances such as televisions will cause
    the detector to dance around because of the signal they emit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place the LEDs into the breadboard with the legs on either side of the center
    divide (see “[Breadboards](ch00.xhtml#ch00lev2sec03)” on [page 4](ch00.xhtml#page_4)
    for more on the layout of the breadboard), as shown in [Figure 6-1](ch06.xhtml#ch6fig1).
    I started with a yellow LED, then used six green and three red LEDs to create
    a scale from left to right. You can use any color LEDs and position them in the
    sequence you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 6-1:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Placing the LEDs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f06-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**ELECTROMAGNETIC FIELDS**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Electric fields* are created by differences in voltage: the higher the voltage,
    the stronger the resultant field. *Magnetic fields* are created when electric
    current flows: the greater the current, the stronger the magnetic field. An *electromagnetic
    field (EMF)* can be thought of as a combination of the two.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f0056-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Electromagnetic fields are present everywhere in the environment but are invisible
    to the human eye. Electric fields are produced by the local buildup of electric
    charges in the atmosphere and associated with thunderstorms. The earth constantly
    emits a magnetic field. It is used by birds and fish for navigation and causes
    a compass needle to orient to the north.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect one leg of a 220-ohm resistor to each negative LED leg, and insert the
    other resistor leg in the GND rail of the breadboard (see [Figure 6-2](ch06.xhtml#ch6fig2)).
    Connect each positive LED leg to digital pins 2 through 11 in turn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | Pins 2–11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND via 220-ohm resistors |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 6-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the LEDs to the breadboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f06-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Take the 20-centimeter length of single-core wire and use a wire stripper to
    strip about 1 centimeter of the insulation from one end. Attach this end to Arduino
    pin A5\. Strip about 7 centimeters from the other end—this open, bare wire end
    is your antenna and will pick up the electromagnetic signal (see [Figure 6-3](ch06.xhtml#ch6fig3)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 6-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stripping wire to create an antenna
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f06-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect one leg of the 1M-ohm resistor directly to GND on the Arduino and the
    other leg to Arduino pin A5; this will increase the sensitivity of your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that your setup matches that of [Figure 6-4](ch06.xhtml#ch6fig4), and
    then upload the code in “[The Sketch](ch06.xhtml#ch06lev1sec03)” on [page 59](ch06.xhtml#page_59).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 6-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the ghost detector
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f06-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bare wire picks up the signal from electromagnetic fields in the atmosphere
    and sends a value between 0 and 1023 to the Arduino. The sketch evaluates the
    reading from the analog pin to determine how many LEDs are switched on or off
    in sequence to indicate the strength of the electromagnetic signal. For example,
    1023 would be the highest value, so all LEDs would be lit; a reading of 550 would
    light five LEDs. The sketch loops to continuously read the analog input, and the
    LED lights constantly move to show the reading. If you find that the EMF readings
    set off your LED sequence to the maximum level every time, reduce the `senseLimit`
    value to compensate. The sketch takes an average of 25 number readings each time
    it loops through, and uses the average from those readings to mitigate big fluctuations
    that may cause the LEDs to light up too quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Once you’ve completed the ghost detector, try adding some sounds that beep
    at increasing speeds or volumes depending on the reading. Build a casing for the
    project to have your own handheld sensor to take on ghost-hunting endeavors. You
    can also experiment by trying various types and thicknesses of wire, and by taking
    away the resistor for different levels of sensitivity.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
