["```\nPrelude> :m Data.List\n```", "```\nPrelude Data.List> :t sort\nsort :: Ord a => [a] -> [a]\nPrelude Data.List> sort [7,5,6]\n[5,6,7]\n```", "```\nimport Data.List\n```", "```\n$ cabal install gnuplot\n```", "```\n$ stack install gnuplot\n```", "```\nPrelude Data.List> :m Graphics.Gnuplot.Simple\n```", "```\nPrelude Graphics.Gnuplot.Simple> :m\n```", "```\nPrelude> :m Graphics.Gnuplot.Simple\nPrelude Graphics.Gnuplot.Simple> plotFunc [] [0,0.1..10] cos\n```", "```\nPrelude Graphics.Gnuplot.Simple> :m\n```", "```\nPrelude> :m Graphics.Gnuplot.Simple\nPrelude Graphics.Gnuplot.Simple> :l first.hs\n[1 of 1] Compiling Main            ( first.hs, interpreted )\nOk, one module loaded.\n*Main Graphics.Gnuplot.Simple> plotFunc [] [-3,-2.99..3] square\n```", "```\nimport Graphics.Gnuplot.Simple\n```", "```\n*Main Graphics.Gnuplot.Simple> :l\nOk, no modules loaded.\nPrelude Graphics.Gnuplot.Simple> :m\n```", "```\nPrelude> :l firstWithImport.hs\n[1 of 1] Compiling Main            ( firstWithImport.hs, interpreted )\nOk, one module loaded.\n*Main> plotFunc [] [-3,-2.99..3] square\n```", "```\nimport Graphics.Gnuplot.Simple\n```", "```\ntype R = Double\n```", "```\nsquare :: R -> R\nsquare x = x**2\n```", "```\nplot1 :: IO ()\nplot1 = plotFunc [] [-3,-2.99..3] square\n```", "```\n*Main> :l\nOk, no modules loaded.\nPrelude> :m\n```", "```\nPrelude> :l QuickPlotting.hs\n[1 of 1] Compiling Main            ( QuickPlotting.hs, interpreted )\nOk, one module loaded.\n*Main> plot1\n```"]