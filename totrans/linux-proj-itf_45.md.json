["```\nid = msgget(key, IPC_CREAT | S_IRUSR | S_IWUSR);\nif (id == -1)\n    errExit(\"msgget\");\n```", "```\nif (shmctl(id, IPC_RMID, NULL) == -1)\n    errExit(\"shmctl\");\n```", "```\nid = msgget(IPC_PRIVATE, S_IRUSR | S_IWUSR);\n```", "```\n#include <sys/ipc.h>\n\nkey_t `ftok`(char **pathname*, int *proj*);\n```", "```\nkey_t key;\nint id;\n\nkey = ftok(\"/mydir/myfile\", 'x');\nif (key == -1)\n    errExit(\"ftok\");\nid = msgget(key, IPC_CREAT | S_IRUSR | S_IWUSR);\nif (id == -1)\n    errExit(\"msgget\");\n```", "```\nstruct ipc_perm {\n    key_t          __key;           /* Key, as supplied to 'get' call */\n    uid_t          uid;             /* Owner's user ID */\n    gid_t          gid;             /* Owner's group ID */\n    uid_t          cuid;            /* Creator's user ID */\n    gid_t          cgid;            /* Creator's group ID */\n    unsigned short mode;            /* Permissions */\n    unsigned short __seq;           /* Sequence number */\n};\n```", "```\nstruct shmid_ds shmds;\n\nif (shmctl(id, IPC_STAT, &shmds) == -1)     /* Fetch from kernel */\n    errExit(\"shmctl\");\nshmds.shm_perm.uid = newuid;                /* Change owner UID */\nif (shmctl(id, IPC_SET, &shmds) == -1)      /* Update kernel copy */\n    errExit(\"shmctl\");\n```", "```\nmsgget(key, IPC_CREAT | S_IRUSR | S_IWUSR | S_IRGRP);\n                        /* rw-r----- */\n```", "```\nmsgget(key, S_IRUSR | S_IWUSR);\n```", "```\n`svipc/svmsg_demo_server.c`\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/msg.h>\n#include <sys/stat.h>\n#include \"tlpi_hdr.h\"\n\n#define KEY_FILE \"/some-path/some-file\"\n                                /* Should be an existing file or one\n                                   that this program creates */\n\nint\nmain(int argc, char *argv[])\n{\n    int msqid;\n    key_t key;\n    const int MQ_PERMS = S_IRUSR | S_IWUSR | S_IWGRP;   /* rw--w---- */\n\n    /* Optional code here to check if another server process is\n       already running */\n\n    /* Generate the key for the message queue */\n\n    key = ftok(KEY_FILE, 1);\n    if (key == -1)\n        errExit(\"ftok\");\n\n    /* While msgget() fails, try creating the queue exclusively */\n\n    while ((msqid = msgget(key, IPC_CREAT | IPC_EXCL | MQ_PERMS)) == -1) {\n        if (errno == EEXIST) {          /* MQ with the same key already\n                                           exists - remove it and try again */\n            msqid = msgget(key, 0);\n            if (msqid == -1)\n                errExit(\"msgget() failed to retrieve old queue ID\");\n            if (msgctl(msqid, IPC_RMID, NULL) == -1)\n                errExit(\"msgget() failed to delete old queue\");\n            printf(\"Removed old message queue (id=%d)\\n\", msqid);\n\n        } else {                        /* Some other error --> give up */\n            errExit(\"msgget() failed\");\n        }\n    }\n\n    /* Upon loop exit, we've successfully created the message queue,\n       and we can then carry on to do other work... */\n\n    exit(EXIT_SUCCESS);\n}\n     `svipc/svmsg_demo_server.c`\n```", "```\n    identifier = index + xxx_perm.__seq * SEQ_MULTIPLIER\n    ```", "```\nindex = identifier % SEQ_MULTIPLIER\n```", "```\n$ `ipcs`\n\n------ Shared Memory Segments --------\nkey        shmid     owner     perms    bytes    nattch   status\n0x6d0731db 262147    mtk       600      8192      2\n\n------ Semaphore Arrays --------\nkey        semid     owner     perms    nsems\n0x6107c0b8 0         cecilia   660      6\n0x6107c0b6 32769     britta    660      1\n\n------ Message Queues --------\nkey        msqid     owner     perms    used-bytes  messages\n0x71075958 229376    cecilia   620      12          2\n```", "```\n$ `ipcrm -```", "```*`x id`*``\n```", "```\n$ `ipcrm -s 65538`\n```", "```\n$ `cat /proc/sysvipc/sem`\nkey     semid perms   nsems   uid   gid   cuid  cgid     otime        ctime\n  0  16646144   600       4  1000   100   1000   100         0   1010166460\n```"]