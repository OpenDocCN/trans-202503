["```\nif ((-1 < (int)status) &&\n  (status = protectionMask, ProtectionMask = MiMakeProtectionMask(protectionMask),\n  ((uVar2 | ProtectionMask) & 2) != 0)) {\n    puStack_c0 = (ulonglong*)((ulonglong)puStack_c0 & 0xffffffff00000000 | (ulonglong)status);\n    OldProtection = param_4;\n    **EtwTiLogProtectExecVm(TargetProcess,AccessMode,BaseAddress,NumberOfBytes);**\n}\n```", "```\nBOOLEAN EtwProviderEnabled(\n  REGHANDLE RegHandle, UCHAR     Level,\n  ULONGLONG Keyword\n);\n```", "```\nNTSTATUS EtwRegister(\n  LPCGUID            ProviderId,\n  PETWENABLECALLBACK EnableCallback,\n  PVOID              CallbackContext,\n  PREGHANDLE         RegHandle\n);\n```", "```\nEtwRegister(&ThreatIntProviderGuid,0,0,&EtwThreatIntProvRegHandle);\n```", "```\n1: kd> **bp nt!EtwWrite \"r $t0 = 0;**\n**.foreach (p {k}) {**\n **.if ($spat(\\\"p\\\", \\\"nt!EtwTiLogProtectExecVm*\\\")) {**\n **r $t0 = 1; .break**\n **}**\n**};**\n**.if($t0 = 0) {gc}\"**\n1: kd> **g**\nnt!EtwWrite\nfffff807`7b693500 4883ec48        sub  rsp, 48h\n1: kd> **k**\n # Child-SP          RetAddr           Call Site\n00 ffff9285`03dc6788 fffff807`7bc0ac99 nt!EtwWrite\n01 ffff9285`03dc6790 fffff807`7ba96860 nt!EtwTiLogProtectExecVm+0x15c031 ❶\n02 ffff9285`03dc69a0 fffff807`7b808bb5 nt!NtProtectVirtualMemory+0x260\n03 ffff9285`03dc6a90 00007ffc`48f8d774 nt!KiSystemServiceCopyEnd+0x25 ❷\n04 00000025`3de7bc78 00007ffc`46ab4d86 0x00007ffc`48f8d774\n05 00000025`3de7bc80 000001ca`0002a040 0x00007ffc`46ab4d86\n06 00000025`3de7bc88 00000000`00000008 0x000001ca`0002a040\n07 00000025`3de7bc90 00000000`00000000 0x8\n```", "```\n1: **kd> dq @rax L(@r9*2)**\nffff9285`03dc67e0  ffffa608`af571740 00000000`00000004\nffff9285`03dc67f0  ffffa608`af571768 00000000`00000008\nffff9285`03dc6800  ffff9285`03dc67c0 00000000`00000008\nffff9285`03dc6810  ffffa608`af571b78 00000000`00000001\n`--snip--`\n```", "```\nPS > **logman query providers | findstr /i \"{f4e1897c-bb5d-5668-f1d8-040f4d8dd344}\"**\nMicrosoft-Windows-Threat-Intelligence {F4E1897C-BB5D-5668-F1D8-040F4D8DD344}\n```", "```\nPS > **PerfView64.exe userCommand DumpRegisteredManifest Microsoft-Windows-Threat-Intelligence**\n```", "```\n <templates>\n    `--snip--`\n    <template tid=\"KERNEL_THREATINT_TASK_PROTECTVMArgs_V1\">\n    <data name=\"CallingProcessId\" inType=\"win:UInt32\"/>\n    <data name=\"CallingProcessCreateTime\" inType=\"win:FILETIME\"/> <data name=\"CallingProcessStartKey\" inType=\"win:UInt64\"/>\n    <data name=\"CallingProcessSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"CallingProcessSectionSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"CallingProcessProtection\" inType=\"win:UInt8\"/>\n    <data name=\"CallingThreadId\" inType=\"win:UInt32\"/>\n    <data name=\"CallingThreadCreateTime\" inType=\"win:FILETIME\"/>\n    <data name=\"TargetProcessId\" inType=\"win:UInt32\"/>\n    <data name=\"TargetProcessCreateTime\" inType=\"win:FILETIME\"/>\n    <data name=\"TargetProcessStartKey\" inType=\"win:UInt64\"/>\n    <data name=\"TargetProcessSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"TargetProcessSectionSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"TargetProcessProtection\" inType=\"win:UInt8\"/>\n    <data name=\"OriginalProcessId\" inType=\"win:UInt32\"/>\n    <data name=\"OriginalProcessCreateTime\" inType=\"win:FILETIME\"/>\n    <data name=\"OriginalProcessStartKey\" inType=\"win:UInt64\"/>\n    <data name=\"OriginalProcessSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"OriginalProcessSectionSignatureLevel\" inType=\"win:UInt8\"/>\n    <data name=\"OriginalProcessProtection\" inType=\"win:UInt8\"/>\n    <data name=\"BaseAddress\" inType=\"win:Pointer\"/>\n    <data name=\"RegionSize\" inType=\"win:Pointer\"/>\n    <data name=\"ProtectionMask\" inType=\"win:UInt32\"/>\n    <data name=\"LastProtectionMask\" inType=\"win:UInt32\"/>\n    </template>\n```", "```\n1: kd> **dq @rax L(@r9*2)**\n`--snip--`\nffff9285`03dc6940 ffff9285`03dc69c0 00000000`00000004\nffff9285`03dc6950 ffff9285`03dc69c8 00000000`00000004\n1: kd> **dd ffff9285`03dc69c0 L1**\n❶ ffff9285`03dc69c0 00000004\n1: kd> **dd ffff9285`03dc69c8 L1**\n❷ ffff9285`03dc69c8 00000020\n```", "```\nCREATE CONSTRAINT function_name ON (n:Function) ASSERT n.name IS UNIQUE\nCALL apoc.load.json(\"file:///xref.json\") YIELD value\nUNWIND value as func\nMERGE (n:Function {name: func.FunctionName})\nSET n.entrypoint=func.EntryPoint\nWITH n, func\nUNWIND func.CalledBy as cb\nMERGE (m:Function {name:cb})\nMERGE (m)-[:Calls]->(n)\n```", "```\nMATCH p=shortestPath((f:Function)-[rCalls*1..]->(t:Function {name: \"EtwTiLogProtectExecVm\"}))\nWHERE f.name STARTS WITH 'Nt' RETURN p;\n```", "```\nPS > **logman.exe create trace EtwTi -p Microsoft-Windows-Threat-Intelligence -o C:\\EtwTi.etl**\nPS > **logman.exe start EtwTi**\n```", "```\ntypedef struct _PS_PROTECTION {\n    union {\n        UCHAR Level;\n        struct {\n            UCHAR Type   : 3;\n            UCHAR Audit  : 1;\n            UCHAR Signer : 4;\n        };\n    };\n} PS_PROTECTION, *PPS_PROTECTION;\n```", "```\nkd> **dt nt!_PS_PROTECTED_TYPE**\n   PsProtectedTypeNone = 0n0\n   PsProtectedTypeProtectedLight = 0n1\n   PsProtectedTypeProtected = 0n2\n   PsProtectedTypeMax = 0n3\n```", "```\nkd> **dt nt!_PS_PROTECTED_SIGNER**\n   PsProtectedSignerNone = 0n0\n   PsProtectedSignerAuthenticode = 0n1\n   PsProtectedSignerCodeGen = 0n2\n   PsProtectedSignerAntimalware = 0n3\n   PsProtectedSignerLsa = 0n4\n   PsProtectedSignerWindows = 0n5\n   PsProtectedSignerWinTcb = 0n6\n   PsProtectedSignerWinSystem = 0n7\n   PsProtectedSignerApp = 0n8\n   PsProtectedSignerMax = 0n9\n```", "```\nkd> **dt nt!_EPROCESS Protection**\n   +0x87a Protection : _PS_PROTECTION\n\nkd> **!process 0 0 MsMpEng.exe**\nPROCESS ffffa608af571300\n    SessionId: 0   Cid: 1134  Peb: 253d4dc000   ParentCid: 0298\n    DirBase: 0fc7d002 ObjectTable: ffffd60840b0c6c0 HandleCount: 636.\n    Image: MsMpEng.exe\n\nkd> **dt nt!_PS_PROTECTION ffffa608af571300** **+ 0x87a**\n    +0x000 Level           : 0x31 '1'\n    +0x000 Type          ❶ : 0y001\n    +0x000 Audit           : 0y0\n    +0x000 Signer        ❷ : 0y0011\n```", "```\n1: kd> **k**\n # Child-SP          RetAddr           Call Site\n00 ffff8308`ea406828 fffff804`1724c9af nt!SeRegisterElamCertResources\n01 ffff8308`ea406830 fffff804`1724f1ac nt!PipInitializeEarlyLaunchDrivers+0x63\n02 ffff8308`ea4068c0 fffff804`1723ca40 nt!IopInitializeBootDrivers+0x153\n03 ffff8308`ea406a70 fffff804`172436e1 nt!IoInitSystemPreDrivers+0xb24\n04 ffff8308`ea406bb0 fffff804`16f8596b nt!IoInitSystem+0x15\n05 ffff8308`ea406be0 fffff804`16b55855 nt!Phase1Initialization+0x3b\n06 ffff8308`ea406c10 fffff804`16bfe818 nt!PspSystemThreadStartup+0x55\n07 ffff8308`ea406c60 00000000`00000000 nt!KiStartSystemThread+0x28\n```", "```\nPS > **$password = ConvertTo-SecureString -String \"ThisIsMyPassword\" -Force -AsPlainText**\nPS > **$cert = New-SelfSignedCertificate -certstorelocation \"Cert:\\CurrentUser\\My\"**\n**>>   -HashAlgorithm SHA256 -Subject \"CN=MyElamCert\" -TextExtension**\n**>>   @(\"2.5.29.37={text}1.3.6.1.4.1.311.61.4.1,1.3.6.1.5.5.7.3.3\")**\nPS > **Export-PfxCertificate -cert $cert -FilePath \"MyElamCert.pfx\" -Password $password**\n```", "```\nPS > **signtool.exe sign /fd SHA256 /a /v /ph /f .\\MyElamCert.pfx**\n**>>   /p \"ThisIsMyPassword\" .\\path \\to\\my\\service.exe**\n```", "```\nPS > **.\\certmgr.exe -v .\\path\\to\\my\\service.exe**\n`--snip--`\nContent Hash (To-Be-Signed Hash):: 04 36 A7 99 81 81 81 07 2E DF B6 6A 52 56 78 24    '.6.….….jRVx$'\n    E7 CC 5E AA A2 7C 0E A3 4E 00 8D 9B 14 98 97 02    '..^..|..N.……'\n`--snip--`\nContent SignatureAlgorithm:: 1.2.840.113549.1.1.11 (sha256RSA)\n`--snip--`\n```", "```\nMicrosoftElamCertificateInfo MSElamCertInfoID\n{\n      1,\n      L\"0436A799818181072EDFB66A52567824E7CC5EAAA27C0EA34E008D9B14989702\\0\",\n      0x800C,\n      L\"\\0\"\n}\n```", "```\nPS > **signtool.exe sign /fd SHA256 /a /v /ph /f \"MyElamCert.pfx\" /p \"ThisIsMyPassword\"**\n**>>   .\\path\\to\\my\\driver.sys**\n```", "```\nBOOL RegisterElamCertInfo(wchar_t* szPath)\n{\n    HANDLE hELAMFile = NULL;\n\n    hELAMFile = CreateFileW(\n        szPath, FILE_READ_DATA, FILE_SHARE_READ, NULL, OPEN_EXISTING,\n        FILE_ATTRIBUTE_NORMAL, NULL);\n\n    if (hELAMFile == INVALID_HANDLE_VALUE)\n    {\n        wprintf(L\"[-] Failed to open the ELAM driver. Error: 0x%x\\n\",\n            GetLastError());\n        return FALSE;\n    }\n\n    if (!InstallELAMCertificateInfo(hELAMFile))\n    {\n        wprintf(L\"[-] Failed to install the certificate info. Error: 0x%x\\n\",\n            GetLastError());\n        CloseHandle(hELAMFile);\n        return FALSE;\n    }\n\n    wprintf(L\"[+] Installed the certificate info\");\n    return TRUE;\n}\n```", "```\nBOOL CreateProtectedService() {\n    SC_HANDLE hSCM = NULL; SC_HANDLE hService = NULL;\n    SERVICE_LAUNCH_PROTECTED_INFO info;\n\n ❶ hSCM = OpenSCManagerW(NULL, NULL, SC_MANAGER_ALL_ACCESS);\n    if (!hSCM) {\n        return FALSE;\n    }\n\n ❷ hService = CreateServiceW(\n        hSCM,\n        L\"MyEtWTiConsumer\",\n        L\"Consumer service\",\n        SC_MANAGER_ALL_ACCESS,\n        SERVICE_WIN32_OWN_PROCESS,\n        SERVICE_DEMAND_START,\n        SERVICE_ERROR_NORMAL,\n        L\"\\\\path\\\\to\\\\my\\\\service.exe\",\n        NULL, NULL, NULL, NULL, NULL);\n    if (!hService) {\n        CloseServiceHandle(hSCM);\n        return FALSE;\n    }\n\n    info.dwLaunchProtected =\n      SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT;\n ❸ if (!ChangeServiceConfig2W(\n        hService,\n        SERVICE_CONFIG_LAUNCH_PROTECTED,\n        &info))\n    {\n        CloseServiceHandle(hService);\n        CloseServiceHandle(hSCM);\n        return FALSE;\n    }\n    if (!StartServiceW(hService, 0, NULL)) {\n        CloseServiceHandle(hService);\n        CloseServiceHandle(hSCM);\n        return FALSE;\n    }\n\n    return TRUE;\n}\n```", "```\n0: kd> **dt nt!_ETW_REG_ENTRY poi(nt!EtwThreatIntProvRegHandle)**\n `  --snip--`\n  +0x020 GuidEntry        : 0xffff8e8a`901f3c50 _ETW_GUID_ENTRY\n `  --snip--`\n```", "```\n0: kd> **dx -id 0,0,ffff8e8a90062040 -r1 (*((ntkrnlmp!_TRACE_ENABLE_INFO *)0xffff8e8a901f3cd0))**\n(*((ntkrnlmp!_TRACE_ENABLE_INFO *)0xffff8e8a901f3cd0))\n[Type: _TRACE_ENABLE_INFO]\n ❶ [+0x000] IsEnabled         : 0x1 [Type: unsigned long]\n    [+0x004] Level             : 0xff [Type: unsigned char]\n    [+0x005] Reserved1         : 0x0 [Type: unsigned char]\n    [+0x006] LoggerId          : 0x4 [Type: unsigned short]\n    [+0x008] EnableProperty    : 0x40 [Type: unsigned long]\n    [+0x00c] Reserved2         : 0x0 [Type: unsigned long]\n    [+0x010] MatchAnyKeyword   : 0xdcfa5555 [Type: unsigned __int64]\n    [+0x018] MatchAllKeyword   : 0x0 [Type: unsigned __int64]\n```", "```\n0: kd> **vertarget**\n`--snip--`\nKernel base = 0xfffff803`02c00000 PsLoadedModuleList = 0xfffff803`0382a230\n`--snip--`\n\n0: kd> **x /0 nt!EtwThreatIntProvRegHandle**\nfffff803`038197d0\n\n0: kd> **? fffff803`038197d0 - 0xfffff803`02c00000**\nEvaluate expression: 12687312 = 00000000`00c197d0\n```", "```\nvoid GetKernelBaseAddress()\n{\n    NtQuerySystemInformation pfnNtQuerySystemInformation = NULL;\n    HMODULE hKernel = NULL;\n    HMODULE hNtdll = NULL;\n    RTL_PROCESS_MODULES ModuleInfo = {0};\n\n    hNtdll = GetModuleHandle(L\"ntdll\");\n  ❶ pfnNtQuerySystemInformation =\n        (NtQuerySystemInformation)GetProcAddress(\n            hNtdll, \"NtQuerySystemInformation\");\n\n    pfnNtQuerySystemInformation(\n      ❷ SystemModuleInformation,\n        &ModuleInfo,\n        sizeof(ModuleInfo),\n        NULL);\n\n    wprintf(L\"Kernel Base Address: %p\\n\",\n      ❸ (ULONG64)ModuleInfo.Modules[0].ImageBase);\n}\n```"]