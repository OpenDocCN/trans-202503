["```\nval arrInt = arrayOf(10, 20, 30, 40)\nprintln(arrInt[3]) // output: 40\nval arrString = arrayOf(\"one\", \"two\", \"three\", \"four\", \"five\")\nprintln(arrString[0]) // output: one\n```", "```\nval myArray: Array<Any> = arrayOf(1, \"bye\", false)\n```", "```\nval people: Array<Person> = arrayOf(...)\n```", "```\nval intArray = intArrayOf(1, 2, 3, 4, 5)\nval doubleArray = doubleArrayOf(1.0, 2.0, 3.0, 4.0, 5.0)\nval charArray = charArrayOf('a', 'b', 'c', 'd', 'e')\nval booleanArray = booleanArrayOf(true, false, true, false)\n```", "```\nval num = Array(4, {i -> i * 2})\n```", "```\nval numRow = 3\nval numCol = 4\n// Create a (3x4) array.\nval twoDimArray = Array(numRow) {Array(numCol) {0}}\n// Access and modify an element using its indices.\ntwoDimArray[2][3] = 99\n```", "```\n// Create a 3D array.\nval threeDimArray = Array(2) {Array(3) {Array(4) {\"\"}}}\n// Access and modify an element using its indices.\nthreeDimArray[1][2][3] = \"Hello, world!\"\n```", "```\nval arr2D = arrayOf(\n    intArrayOf(0, 1, 1),\n    intArrayOf(2, 0, 2),\n    intArrayOf(3, 3, 0)\n)\nprintln(arr2D[2][2])  // output: 0\n```", "```\nval list = listOf(1, 2, 3, 2)\n```", "```\nval names = listOf(\"Mary\", \"Sam\", \"Olivia\", \"Mike\", \"Ian\")\nprintln(names[1])       // output: Sam\nprintln(names.first())  // output: Mary\nprintln(names.last())   // output: Ian\n```", "```\nval mutableList = mutableListOf(1, 2, 3)\nmutableList.add(4)       // Add an element.\nmutableList.removeAt(1)  // Remove an element.\nmutableList[0] = 5       // Modify an element.\nprintln(mutableList)\n```", "```\n[5, 3, 4]\n```", "```\nval fruits = mutableListOf(\"apple\", \"banana\", \"berry\", \"cherry\")\n// Add an element using the += operator.\nfruits += \"plum\"\n// Remove all elements that start with the letter \"b\".\nfruits.removeAll {it.startsWith(\"b\")}\n```", "```\nmutableList.clear()\n```", "```\n❶ val list = mutableListOf<Any>()\nlist.add(\"hello\")\nlist.add(2)\nlist.add(33.33)\nprintln(list.joinToString(\", \"))\n```", "```\nhello, 2, 33.33\n```", "```\nval readonlySet = setOf(1, 2, 3, 4, 5)\nval mutableSet = mutableSetOf(\"apple\", \"banana\", \"cherry\")\n```", "```\nval mySet = setOf(1, 3, 3, 4, 5, 5, 6)\nprintln(mySet)\n```", "```\n[1, 3, 4, 5, 6]\n```", "```\nval set1 = setOf(1, 2, 3)\nval set2 = setOf(3, 4, 5)\n// set operations\nval unionSet = set1.union(set2)\nval intersectionSet = set1.intersect(set2)\nval differenceSet = set1.subtract(set2)\n```", "```\nval ages = mapOf(\"Alice\" to 30, \"Bob\" to 25, \"Charlie\" to 35)\nval vertices = mutableMapOf(\"circle\" to 0, \"triangle\" to 3,\n    \"rectangle\" to 4, \"pentagon\" to 5)\n```", "```\nval bobAge = ages.get(\"Bob\") // returns the associated value: 25\nvertices.put(\"hexagon\", 6)   // adds a new key-value pair\nvertices.remove(\"circle\")    // removes the circle-0 pair\nval testForCircle = vertices.containsKey(\"circle\") // returns false\nprintln(bobAge)\nprintln(vertices)\nprintln(testForCircle)\n```", "```\n25\n{triangle=3, rectangle=4, pentagon=5, hexagon=6}\nfalse\n```", "```\nclass Person {\n    var name: String = \"\"\n    var age: Int = 0\n}\n```", "```\nval person1 = Person()\nperson1.name = \"John\"\nperson1.age = 25\n```", "```\nval person2 = Person()\nperson2.name = \"Irina\"\nperson2.age = 21\n```", "```\nclass MyClass(val `property1`: `Type1`, val `property2`: `Type2`) {\n// class body\n}\n```", "```\nclass Person(val name: String = \"\", val age: Int = -99) {\n    override fun toString(): String {\n        return \"Person(name=$name, age=$age)\"\n    }\n}\n\nfun main() {\n    val person1 = Person(\"John\", 25)\n    val person2 = Person(\"Irina\", 21)\n    println(person1)\n    println(person2)\n}\n```", "```\nPerson(name=John, age=25)\nPerson(name=Irina, age=21)\n```", "```\nclass Car(val make: String, val model: String, val year: Int) {\n    // property initialization inside class body\n  ❶ var color: String = \"Unknown\"\n\n    // 1st secondary constructor (no args)\n    constructor() : this(\"Unknown\", \"Unknown\", 0)\n\n    // 2nd secondary constructor (1 arg)\n  ❷ constructor(make: String) : this(make, \"Unknown\", 0)\n\n    // 3rd secondary constructor (2 args)\n    constructor(make: String, model: String) : this(make, model, 0)\n\n    override fun toString(): String =\n        \"Make: ${make}, Model: ${model}, Year: ${year}, Color: ${color}\"\n}\n\nfun main() {\n    val c1 = Car()\n    val c2 = Car(\"Nissan\")\n    val c3 = Car(\"Toyota\", \"Prius\")\n    val c4 = Car(\"Ford\", \"Mustang\", 2024)\n\n    c1.color = \"Blue\"\n    c2.color = \"Red\"\n    c3.color = \"Black\"\n    c4.color = \"Yellow\"\n\n    println(c1)\n    println(c2)\n    println(c3)\n    println(c4)\n}\n```", "```\nMake: Unknown, Model: Unknown, Year: 0, Color: Blue\nMake: Nissan, Model: Unknown, Year: 0, Color: Red\nMake: Toyota, Model: Prius, Year: 0, Color: Black\nMake: Ford, Model: Mustang, Year: 2024, Color: Yellow\n```", "```\nclass Person (var name: String, var age: Int) {\n    // additional property\n    var isMinor: Boolean = false\n\n    // init block for custom initialization\n    init {\n        if (age < 18) isMinor = true\n    }\n}\n```", "```\nclass Person (var name: String = \"Unknown\", var age = -99) {\n    fun sayHello() {\n        println(\"Hello, my name is $name, \" +\n                \"and I am $age years old.\")\n    }\n}\n```", "```\nval person = Person(\"John\", 25)\nperson.sayHello()\n```", "```\nHello, my name is John, and I am 25 years old.\n```", "```\nclass Person(private var name: String, private var age: Int) {\n    fun introduce() {\n        println(\"Hi, I'm $name, and I'm $age years old.\")\n    }\n\n    fun haveBirthday() {\n        age++\n    }\n}\n\nfun main() {\n    val person = Person(\"Alice\", 30)\n\n    // Access and modify properties using public methods.\n    person.introduce()\n    person.haveBirthday()\n    person.introduce()\n\n    // Trying to access private properties directly\n    // will result in a compilation error.\n  ❶ // println(person.name)\n    // person.age++\n}\n```", "```\nHi, I'm Alice, and I'm 30 years old.\nHi, I'm Alice, and I'm 31 years old.\n```", "```\nclass Book(var title: String, var author: String) {\n    fun displayInfo() {\n        println(\"Title: $title\")\n        println(\"Author: $author\")\n    }\n\n    fun updateInfo(title: String, author: String) {\n        this.title = title\n        this.author = author\n    }\n}\n\nfun main() {\n    val book1 = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\")\n    // Display book information.\n    book1.displayInfo()\n    // Update book information.\n    book1.updateInfo(\"To Kill a Mockingbird\", \"Harper Lee\")\n\n    println(\"\\nUpdated book information:\")\n    book1.displayInfo()\n}\n```", "```\nTitle: The Great Gatsby\nAuthor: F. Scott Fitzgerald\n\nUpdated book information:\nTitle: To Kill a Mockingbird\nAuthor: Harper Lee\n```", "```\nopen class ParentClass(val name: String, val age: Int) {\n    init {\n        println()\n        println(\"Hello, I am $name, and I am $age years old.\")\n    }\n}\n\nclass ChildClass(name: String, age: Int, val occupation: String)\n    : ParentClass(name, age) {\n\n    init {\n        println(\"My occupation is $occupation.\")\n    }\n}\n\nfun main() {\n    // Create instances of parent and child classes.\n    val person1 = ParentClass(\"John\", 33)\n    val person2 = ChildClass(\"Sarah\", 24, \"accountant\")\n}\n```", "```\nHello, I am John, and I am 33 years old.\n\nHello, I am Sarah, and I am 24 years old.\nMy occupation is accountant.\n```", "```\n// parent class\nopen class Vehicle {\n    open fun startEngine() {\n        println(\"Vehicle engine started\")\n    }\n}\n\n// child class\nclass Car : Vehicle() {\n    override fun startEngine() {\n        println(\"Car engine started\")\n    }\n}\n\nfun main() {\n    val myCar = Car()\n    myCar.startEngine()\n}\n```", "```\nCar engine started\n```", "```\n// Declare a data class.\ndata class Person(val name: String, val age: Int)\n\nfun main() {\n    // Create an instance.\n    val person = Person(\"Steve\", 40)\n    println(person)\n}\n```", "```\nPerson(name=Steve, age=40)\n```", "```\nval pair1 = Pair(\"Alice\", 20)\nval pair2 = \"Bob\" to 25\n```", "```\nval triple1 = Triple(\"Alice\", 20, \"Female\")\n```", "```\nval pair = \"Hello\" to \"World\"\nval triple = Triple(1, 2, 3)\n\nprintln(pair.first)   // Hello\nprintln(triple.third) // 3\n```", "```\nval pair = Pair(\"John\", 29)\nval (name, age) = pair // deconstruction\nprintln(\"Name: $name\") // Print the value of name.\nprintln(\"Age: $age\")   // Print the value of age.\n```", "```\nabstract class Shape {\n    abstract fun area(): Double  // abstract method\n    val name: String = \"Shape\"   // concrete property\n    fun describe() {\n        println(\"This is a $name\")\n    }\n}\n\nclass Circle(val radius: Double): Shape() {\n    override fun area(): Double {\n        return Math.PI * radius * radius\n    }\n}\n\nclass Square(val side: Double): Shape() {\n    override fun area(): Double {\n        return side * side\n    }\n}\n\nfun main() {\n    val circle = Circle(5.0)\n    val square = Square(4.0)\n\n    circle.describe()\n    println(\"Area of the circle: ${circle.area()}\")\n\n    square.describe()\n    println(\"Area of the square: ${square.area()}\")\n}\n```", "```\nThis is a Shape\nArea of the circle: 78.53981633974483\nThis is a Shape\nArea of the square: 16.0\n```", "```\nimport kotlin.math.PI\n\ninterface Properties {\n    fun area(): Double\n    fun perimeter(): Double\n}\n\nclass Circle(val radius: Double): Properties {\n    override fun area() = PI * radius * radius\n    override fun perimeter() = 2 * PI * radius\n}\n\nfun main() {\n    val circle = Circle(4.0)\n    val area = circle.area()\n    val perimeter = circle.perimeter()\n\n    println(\"Properties of the circle:\")\n    println(\" radius = ${circle.radius}\\n area = $area\\n\" +\n            \" perimeter = $perimeter\")\n}\n```", "```\nProperties of the circle:\nradius = 4.0\narea = 50.26548245743669\nperimeter = 25.132741228718345\n```", "```\n// Define an enum class for days of the week.\nenum class DayOfWeek {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n    FRIDAY, SATURDAY, SUNDAY\n}\n\nfun main() {\n    // using the enum values\n    val today = DayOfWeek.MONDAY\n\n    when (today) {\n        DayOfWeek.MONDAY -> println(\"It's a manic Monday!\")\n        else -> println(\"It's some other day.\")\n    }\n}\n```", "```\ndata class Person(val name: String,\n                  val hobbies: MutableList<String>)\nfun main() {\n    val person1 = Person(\"Bob\", mutableListOf(\"Reading\", \"Gaming\"))\n  ❶ val person2 = person1.copy()\n\n    // Print both objects.\n    println(person1)\n    println(person2)\n\n    // Add a new element to the mutable list of person1.\n    person1.hobbies.add(\"Coding\")\n\n    // Print both objects again.\n    println(person1)\n    println(person2)\n}\n```", "```\nPerson(name=Bob, hobbies=[Reading, Gaming])\nPerson(name=Bob, hobbies=[Reading, Gaming])\nPerson(name=Bob, hobbies=[Reading, Gaming, Coding])\nPerson(name=Bob, hobbies=[Reading, Gaming, Coding])\n```", "```\ndata class Address(var street: String, val city: String)\ndata class Person(val name: String, val address: Address)\n\nfun deepCopyPerson(person: Person): Person {\n  ❶ val clonedAddress = Address(person.address.street,\n                                person.address.city)\n    return Person(person.name, clonedAddress)\n}\n\nfun main() {\n    val originalPerson = Person(\"Alice\", Address(\"123 Main St\", \"Cityville\"))\n    val copiedPerson = deepCopyPerson(originalPerson)\n\n    // Modify the original address.\n    originalPerson.address.street = \"456 Elm St\"\n\n    // Check if the copied address remains unchanged.\n    println(originalPerson.address.street) // output: 456 Elm St\n    println(copiedPerson.address.street)   // output: 123 Main St\n}\n```", "```\ndata class Person(var name: String, var age: Int)\n\nfun main() {\n    // original mutable list\n    val originalList =\n        mutableListOf(Person(\"Alice\", 30), Person(\"Bob\", 25))\n\n    // Deep-copy the list using map() and copy().\n    val deepCopyList =\n        originalList.map{it.copy()}.toMutableList()\n}\n```", "```\n// macro view of the task manager program\n\ndata class Task(val title: String,\n                val description: String,\n                var status: String = \"not done\"\n)\n\nclass TaskManager {\n  ❶ val taskList = mutableListOf<Task>()\n fun addTask(task: Task) {...}\n    fun listTasks() {...}\n    fun markTaskAsDone(taskIndex: Int) {...}\n    fun deleteTask(taskIndex: Int) {...}\n}\n\nfun printOptions() {...}\nfun readIndex(taskListSize: Int): Int? {...}\n\nfun main() {\n    val taskManager = TaskManager()\n\n    while (true) {\n        printOptions()\n        when (readln()) {\n            \"1\" -> {...}\n            \"2\" -> {...}\n            \"3\" -> {...}\n            \"4\" -> {...}\n            \"5\" -> return   // breaks the while loop\n            else -> println(\"\\nInvalid choice. Please try again.\")\n        }\n    }\n}\n```", "```\nfun printOptions() {\n    println(\"\\nTask Manager Menu:\")\n    println(\"1\\. Add Task\")\n println(\"2\\. List Tasks\")\n    println(\"3\\. Mark Task as done\")\n    println(\"4\\. Delete Task\")\n    println(\"5\\. Exit\")\n    print(\"Enter your choice (1-5): \")\n}\n```", "```\n❶ when (readln()) {\n    \"1\" -> {\n        print(\"\\nEnter task title: \")\n        val title = readln()\n        print(\"Enter task description: \")\n        val description = readln()\n      ❷ val task = Task(title, description)\n      ❸ taskManager.addTask(task)\n    }\n    \"2\" -> {...}\n    \"3\" -> {...}\n    \"4\" -> {...}\n    \"5\" -> break   // breaks the while loop\n  ❹ else -> println(\"\\nInvalid choice. Please try again.\")\n}\n```", "```\nfun addTask(task: Task) {\n    taskList.add(task)\n}\n```", "```\nwhen (readln()) {\n`--snip--`\n    \"2\" -> taskManager.listTasks()\n```", "```\nfun listTasks() {\n    if (taskList.size > 0) {\n        println(\"\\nTasks:\")\n        for ((index, task) in taskList.withIndex()) {\n          ❶ println(\"${index+1}. ${task.title} - \" +\n                    \"${task.description} - ${task.status}\")\n        }\n    } else\n        println(\"Task list is empty.\")\n\n}\n```", "```\nwhen (readln()) {\n`--snip--`\n    \"3\" -> {\n        taskManager.listTasks()\n      ❶ if (taskManager.taskList.size <= 0) {\n            continue\n        } else {\n            print(\"\\nEnter the task number to mark as done: \")\n          ❷ val taskNumber =\n                readIndex(taskManager.taskList.size)\n            if (taskNumber != null) {\n                taskManager.markTaskAsDone(taskNumber -1)\n            }\n        }\n    }\n```", "```\nfun readIndex(taskListSize: Int): Int? {\n    val input = readln()\n  ❶ if (input.isBlank()) {\n        println(\"Invalid input. Please enter a valid task number.\")\n        return null\n    }\n\n  ❷ val taskNumber = input.toIntOrNull()\n    if (taskNumber != null && taskNumber >= 1 &&\n                         taskNumber <= taskListSize) {\n        return taskNumber\n    } else {\n        println(\"Invalid task number. Please enter a valid task number.\")\n        return null\n    }\n}\n```", "```\nfun markTaskAsDone(taskIndex: Int) {\n  ❶ if (taskIndex in taskList.indices) {\n        taskList[taskIndex].status = \"done\"\n    } else {\n        println(\"Invalid task index. Task not found.\")\n    }\n}\n```", "```\nwhen (readln()) {\n`--snip--`\n    \"4\" -> {\n        taskManager.listTasks()\n        if (taskManager.taskList.size <= 0) {\n            continue\n        } else {\n            print(\"\\nEnter the task number to be deleted: \")\n            val taskNumber =\n                readIndex(taskManager.taskList.size)\n            if (taskNumber != null) {\n                taskManager.deleteTask(taskNumber - 1)\n            }\n        }\n    }\n```", "```\nfun deleteTask(taskIndex: Int) {\n    if (taskIndex in taskList.indices) {\n        taskList.removeAt(taskIndex)\n    } else {\n        println(\"Invalid task index. Task not found.\")\n    }\n}\n```", "```\nwhen (readln()) {\n`--snip--`\n    \"5\" -> break   // breaks the while loop\n```", "```\nTask Manager Menu:\n1\\. Add Task\n2\\. List Tasks\n3\\. Mark Task as done\n4\\. Delete Task\n5\\. Exit\nEnter your choice (1-5): **1**\n\nEnter task title: **Task 1**\nEnter task description: **Reply to Nathan's email**\n\nTask Manager Menu:\n1\\. Add Task\n2\\. List Tasks\n3\\. Mark Task as done\n4\\. Delete Task\n5\\. Exit\nEnter your choice (1-5): **1**\n\nEnter task title: **Task 2**\nEnter task description: **Complete Chapter 2 by this weekend**\n\nTask Manager Menu:\n1\\. Add Task\n2\\. List Tasks\n3\\. Mark Task as done\n4\\. Delete Task\n5\\. Exit\nEnter your choice (1-5): **2**\n\nTasks:\n1\\. Task 1 – Reply to Nathan's email - not done\n2\\. Task 2 – Complete Chapter 2 by this weekend - not done\n```"]