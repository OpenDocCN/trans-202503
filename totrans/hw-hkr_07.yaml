- en: 5. fake goods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The gongkai system fosters an amazing amount of innovation in China, and the
    shanzhai can make interesting original products, like the cell phones I showed
    you in [Chapter 4](ch04.xhtml#ch04). That said, China does produce plenty of fake
    electronic goods, and they aren’t all knockoff iPhones. Clever counterfeiters
    can produce fake integrated circuits, including microSD cards and even FPGAs.
  prefs: []
  type: TYPE_NORMAL
- en: '**WELL-EXECUTED COUNTERFEIT CHIPS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For instance, in 2007 (while I was still working with Chumby) I encountered
    some counterfeit chips so well executed that I couldn’t be certain they were fake
    without investigating.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0144-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Two suspicious chip specimens from an Asian source*'
  prefs: []
  type: TYPE_NORMAL
- en: The chips claimed to be ST19CF68s, a chip made by STMicroelectronics and described
    on its datasheet as a “CMOS MCU Based Safeguard Smartcard I/O with Modular Arithmetic
    Processor.” ST19CF68 chips are normally sold prepackaged in *smartcard* (for example,
    the chip on the front of a credit card) or *diced wafer* (a silicon wafer that’s
    been diced into individual chips, but with no other package around it) format,
    but curiously, these were SOIC-20 packaged devices. To find out the reason for
    the odd package choice, I dissolved the black epoxy packaging off the top of one
    chip to decapsulate it so I could inspect the silicon on the inside using a microscope.
  prefs: []
  type: TYPE_NORMAL
- en: The die inside the package was much too small and simple for a complex microcontroller
    unit (MCU) matching the description of the ST19CF68\. The pattern of gold-colored
    rectangles tiled across the chip was too coarse; I could make out individual transistors
    at low zoom with an optical microscope. The size of these features is referred
    to as the chip’s *process geometry*. The process geometry of a smartcard would
    typically trail a cutting-edge CPU by at most three or four generations, making
    transistors very difficult to resolve even at the highest levels of zoom.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0145-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The silicon inside the fake ST19CF68*'
  prefs: []
  type: TYPE_NORMAL
- en: Along with the unexpectedly coarse process geometry, why did this part have
    20 bondable pads and 20 pins when, according to the datasheet, it should have
    only 8 pads? Zooming in a bit on the die revealed some interesting details.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0146-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The chip manufacturer and copyright date*'
  prefs: []
  type: TYPE_NORMAL
- en: The chip wasn’t made by STMicroelectronics after all! The label on the silicon
    said *FSC*, indicating it was made by Fairchild Semiconductor. Of course, then
    I had to check the part label on the silicon, too.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0146-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Discovering the true part number*'
  prefs: []
  type: TYPE_NORMAL
- en: The die within that chip turned out to be a Fairchild 74LCX244, which is a “Low
    Voltage Buffer/Line Driver with 5V Tolerant Inputs and Outputs.” The 74LCX244
    is a much cheaper piece of silicon than the ST19CF68 the package supposedly contained.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the mismatched pin count was suspicious, but manufacturers have been
    known to put chips in larger packages, especially during early runs of the chip
    before it has been size-optimized. The thing that really got me was the convincing
    quality of the package and the markings.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, remarked or fake chips look cheesier than this one. The original chips
    are sanded down or painted over to remove the previous markings, and the new marking
    is typically applied with silkscreened paint.
  prefs: []
  type: TYPE_NORMAL
- en: 'But these chips showed no evidence of remarking at all. The markings are of
    first-run quality: someone acquired unmarked blanks of the 74LCX244 chip and programmed
    a production laser engraver to put high-quality fake markings on an otherwise
    virgin package. They even got the proportions of the *ST* logo exactly right.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0147-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A close-up of the outside of the fake ST19CF68*'
  prefs: []
  type: TYPE_NORMAL
- en: The quality difference between a remarked chip and first-run marking is like
    the quality difference between spray paint used to hide a scratch on a car and
    the car’s original, factory-fresh paint job. This chip definitely had the “new
    car” look.
  prefs: []
  type: TYPE_NORMAL
- en: This discovery left me with a lot of unanswered questions. How did someone acquire
    unmarked Fairchild silicon? Was the person an insider, or did Fairchild sloppily
    throw away unmarked reject chips without grinding them up or clipping off leads
    so they couldn’t be picked out of a dumpster and resold? The laser-marking machine
    used to make those markings wasn’t a cheap desktop engraver, either; it had to
    be a high-power raster engraver, and the artwork was spot-on.
  prefs: []
  type: TYPE_NORMAL
- en: I still find it hard to believe those fake chips were made and sold, but maybe
    I shouldn’t. I’ve seen brazen remarking of dual inline memory modules (DIMMs,
    the memory used in personal computers) in the SEG Electronics Market, and many
    counterfeiters at the market openly display their arsenal of professional-quality
    thermal transfer label printers and hologram sticker blanks.
  prefs: []
  type: TYPE_NORMAL
- en: If fakes of this quality become more common, they could present a problem for
    the supply chain. Clearly, whoever made the counterfeit ST19CF68 can fake just
    about any chip, and the fakes are gradually appearing on the US market. Resellers,
    especially distributors that specialize in buying excess manufacturer inventory,
    implicitly trust the markings on a chip.
  prefs: []
  type: TYPE_NORMAL
- en: I don’t think chipmakers will put anticounterfeiting measures on chip markings,
    but the quality of these fakes definitely made me wary when I discovered them,
    and it still does. Not all fakes get spotted before they’re used, and fake components
    pose problems in any project where they appear.
  prefs: []
  type: TYPE_NORMAL
- en: '**COUNTERFEIT CHIPS IN US MILITARY HARDWARE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Counterfeit chips can be particularly problematic when they find their way
    into military projects. The US military has a unique problem: it’s one of the
    biggest and wealthiest buyers of really old parts because military designs have
    shelf lives of decades. Like anything else, the older a part is, the harder it
    is to find, and sometimes contractors are sold fakes. For example, a 2011 Senate
    hearing report revealed that some parts used in the P-8 Poseidon (a plane the
    US Navy commissioned from Boeing) were, as an article from the Defense Tech website
    put it, “badly refurbished,” causing a key system to fail.'
  prefs: []
  type: TYPE_NORMAL
- en: The US government attempted to reduce fakes in its supply chain with Amendment
    1092 to the National Defense Authorization Act for Fiscal Year 2012 (H.R. 1540).
    The amendment is a well-intentioned but misguided provision outlining measures
    designed to reduce the prevalence of counterfeit chips in the US military supply
    chain.
  prefs: []
  type: TYPE_NORMAL
- en: Even before Amendment 1092 was put on the table, the Defense Authorization Act
    drew flak for a provision that authorizes the US military to detain US citizens
    indefinitely without trial. It also rather ironically requires an assessment of
    the US federal debt owed China as a potential “national security risk” (section
    1225 of H.R. 1540).
  prefs: []
  type: TYPE_NORMAL
- en: Under the anticounterfeit amendment, first-time offenders can receive a $5 million
    fine and 20-year prison sentence for individuals, or a $15 million fine for corporations—a
    penalty comparable to that of trafficking cocaine.[*](footnote.xhtml#fn11) While
    the amendment explicitly defines *counterfeit* to include refurbished parts represented
    as new, the wording is regrettably vague on whether you must be willfully trafficking
    such goods to also be liable for such a stiff penalty.
  prefs: []
  type: TYPE_NORMAL
- en: If you took a dirty but legitimately minted coin and washed it so that it looked
    mint condition, nobody would accuse you of counterfeiting. Yet this amendment
    puts a 20-year, $5 million penalty not only on the act of counterfeiting chips
    destined for military use but also potentially on the unwitting distribution of
    refurbished chips that you putatively bought as new. Unfortunately, in many cases
    an electronic part can be used for years with no sign of external wear.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amendment also has a provision to create an “inspection program”:'
  prefs: []
  type: TYPE_NORMAL
- en: (b) Inspection of Imported Electronic Parts —
  prefs: []
  type: TYPE_NORMAL
- en: (1) ... the Secretary of Homeland Security shall establish a program of enhanced
    inspection by U.S. Customs and Border patrol of electronic parts imported from
    any country that has been determined by the Secretary of Defense to have been
    a significant source of counterfeit electronic parts ...
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting fruits and vegetables as they enter the country for pests and other
    problems makes sense, but requiring customs officers to become experts in detecting
    fake electronic components seems misguided. Burdening vendors with detecting fakes
    when there are such high penalties for failure is also misguided, given how easy
    it is for forgers to create high-quality counterfeits.
  prefs: []
  type: TYPE_NORMAL
- en: '**Types of Counterfeit Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To better understand the magnitude of the chip counterfeiting problem, let’s
    look at how fakes are made. The fake chips I’ve seen fall into the following broad
    categories.
  prefs: []
  type: TYPE_NORMAL
- en: EXTERNAL MIMICRY
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The most trivial counterfeit chips are simply empty plastic packages with authentic-looking
    top marks, or remarked parts that share only physical traits with the authentic
    parts. For example, a simple transistor-transistor logic (TTL) chip might be placed
    inside the same package, with identical markings, as an expensive microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: I consider external mimicry trivial because fakes produced this way are easy
    to detect in a factory test. At worst, you’re sold a mixture of mostly authentic
    parts with a few counterfeits blended in so that testing just one part out of
    a tube or reel isn’t good enough to catch the issue. But most products employ
    100 percent testing at the system level, so typically the problem is discovered
    before anything leaves the factory.
  prefs: []
  type: TYPE_NORMAL
- en: REFURBISHED PARTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Counterfeits don’t technically have to be fake at all, though. Refurbished parts
    are authentic chips that are desoldered from e-waste and reprocessed to look new.
    They’re very difficult to spot since the chip is in fact authentic, and a skilled
    refurbisher can produce stunningly new-looking chips that only isotopic or elemental
    analysis could identify as used.
  prefs: []
  type: TYPE_NORMAL
- en: This category also includes parts that are “new” in the sense that they’ve never
    been soldered onto a board but have been stored improperly, perhaps in a humid
    environment. Such chips should be scrapped but are sometimes stuck in a fresh
    foil pack with a more recent date code, and sold as new.
  prefs: []
  type: TYPE_NORMAL
- en: REBINNED PARTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Counterfeiters sometimes remark authentic parts that have never been used (and
    so can be classified as new) as a better version of an otherwise identical part.
    A classic example is grinding and remarking CPUs with a higher speed grade, or
    more trivially, marking parts that contain lead as RoHS-compliant.
  prefs: []
  type: TYPE_NORMAL
- en: But rebinning can get more sophisticated. Vendors may reverse engineer and reprogram
    the fuse codes inside the remarked chip so that the chip’s electronic records
    actually match the faked markings on top. Vendors have also been known to hack
    flash drive firmware so that a host operating system will perceive a small memory
    as much larger. Such hacks even go so far as to “loop” memory so that writes beyond
    the device capacity appear to succeed, thus requiring a time-consuming full readback
    and comparison of the written data to detect the issue.
  prefs: []
  type: TYPE_NORMAL
- en: GHOST-SHIFT PARTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Some fakes are created on the exact same fabrication facility as authentic parts;
    they’re run very late at night by rogue employees without the manufacturer’s authorization
    and never logged on the books. These unlogged production runs are called *ghost
    shifts*. It’s like an employee in a mint striking extra coins after-hours. Ghost-shift
    parts are often assigned a lot code identical to a legitimate run, but certain
    testing steps are skipped.
  prefs: []
  type: TYPE_NORMAL
- en: Ghost shifts often use marginal material left over from the genuine product
    that would normally be disposed of but was intercepted on the way to the grinder.
    As a result, the markings and characteristics of the material often look absolutely
    authentic. These fakes can be extremely hard to detect.
  prefs: []
  type: TYPE_NORMAL
- en: FACTORY SCRAP
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Factory rejects and prototype runs can be recovered from the scrap heap for
    a small bribe, given authentic markings, and resold as new. To avoid detection,
    workers often replace the salvaged scrap with physically identical dummy packages,
    thus foiling attempts to audit the scrap trail. This practice of replacing salvageable
    scrap with dummy fakes helps drive the market for the trivial “[external mimicry](ch05.xhtml#ch00lev1sec88)”
    fakes. The existence of an industry that supplies low-quality fakes to dodge audits
    that would otherwise prohibit high-quality fakes gives you an idea of how sophisticated
    and mature the counterfeiting industry has become.
  prefs: []
  type: TYPE_NORMAL
- en: SECOND-SOURCING GONE BAD
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Second-sourcing* is a standard industry practice where competitors create
    pin-compatible replacements for popular products to drive price competition and
    strengthen the supply chain against events like natural disasters. The practice
    goes bad when inferior parts are remarked with the logos of premium brands.'
  prefs: []
  type: TYPE_NORMAL
- en: High-value but functionally simple discrete analog chips such as power regulators
    are particularly vulnerable to this problem. Premium US-branded power regulators
    sometimes fetch a price 10 times higher than drop-in Asian-branded substitutes.
    However, the Asian-branded parts are notorious for spotty quality, cut corners,
    and poor parametric performance. Clearly, there is ample opportunity for counterfeiters
    to make a lot of money by buying unmarked chips from the second-source fab and
    remarking them with authentic-looking top marks of premium US brands. In some
    cases, there are no inexpensive or fast tests to detect these fakes, short of
    decapsulating the chip and comparing mask patterns and cross-sections, as I did
    for the ST19CF68.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fakes and US Military Designs**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The variety of counterfeiting methods available, combined with the fact that
    many commodity parts have production cycles of only a few years, presents a big
    problem for institutions like the US military, where design lifetimes are often
    measured in decades. It’s like asking someone to build a NeXTcube[*](footnote.xhtml#fn12)
    motherboard today using only certifiably new parts, with no secondhand or refurbished
    parts allowed. I don’t think it’s possible.
  prefs: []
  type: TYPE_NORMAL
- en: The impossibility of this situation may sometimes make military contractors
    complicit in the consumption of counterfeit parts to bad effect. In the P-8 Poseidon
    case, people were quick to point fingers at China, but a poor refurbishing job
    is probably detectable with a simple visual inspection. Maybe part of the problem
    is that a subcontractor was lax in checking incoming stock—or perhaps looking
    the other way. If those parts were the last of their kind in the world, what else
    could be done?
  prefs: []
  type: TYPE_NORMAL
- en: My guess is that the stocks of any distributor in the secondhand electronics
    business are already flooded with undetected counterfeits. Remember, only the
    bad fakes are ever caught, and chip packaging was not designed with anticounterfeiting
    measures in mind. While all gray-market parts are suspect, that’s not necessarily
    a bad thing.
  prefs: []
  type: TYPE_NORMAL
- en: Gray markets play an essential role in the electronics ecosystem; using them
    is a calculated, but sometimes unavoidable, risk. In fact, many traders in the
    gray market are very upfront about their goods being recycled. Many even post
    signs on their stalls advertising this fact. However, these signs are written
    in Chinese. In that case, whose fault is it—the seller for selling recycled goods,
    or the buyer for not being able to read the sign?
  prefs: []
  type: TYPE_NORMAL
- en: '**Anticounterfeit Measures**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The counterfeit chip situation is a mess, but some simple measures could fix
    it.
  prefs: []
  type: TYPE_NORMAL
- en: PHYSICAL IDENTIFIERS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Embedding anticounterfeit measures in chips approved for military use is one
    option. For chips larger than 1 cm wide, a unique 2D barcode could be laser-engraved
    by equipment relatively common in chip packaging facilities. Despite a tiny footprint,
    the codes would be backed with a guarantee of 100 percent uniqueness. Such techniques
    are effective in biotech, where systems like Matrix 2D track disposable sample
    tubes in biology labs.
  prefs: []
  type: TYPE_NORMAL
- en: Another potential solution is to mix a UV dye into the component’s epoxy that
    changes fluorescence properties upon exposure to *reflow* temperatures—a consistent
    set of well-defined temperatures at which solder melts. This makes it impossible
    to recondition the chip to a “new” state after it’s been soldered down the first
    time. If the dye is distributed through the entire package body, it will be impossible
    to remove with surface grinding alone.
  prefs: []
  type: TYPE_NORMAL
- en: CHANGING HOW E-WASTE IS HANDLED
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Managing e-waste more effectively would also alleviate the counterfeit problem.
    E-waste is harvested in bulk for used parts. Crudely desoldered MSM-series chips—the
    brains of many Android smartphones, made by Qualcomm and marketed under the brand
    name of Snapdragon—are purchasable by the pound, at around 10 cents per chip.
    Counterfeiters clean up the chips, *reball* (that is, add new solder balls, for
    ball-grid array packages) and sometimes remark them, put them into tapes and reels,
    and sell them as brand-new, commanding a markup 10 times the original purchase
    price. A single batch of refurbished chips can net thousands of dollars, making
    the practice a compelling source of income for skilled workers who would otherwise
    earn $200 per month in a factory doing exactly the same thing.[*](footnote.xhtml#fn13)
    (Factories are typically authorized to recover chips off of defective boards or
    consumer returns that can’t be repaired.)
  prefs: []
  type: TYPE_NORMAL
- en: If the United States stopped shipping e-waste overseas for disposal, or at least
    ground up the parts before shipping them, then the supply for refurbished chip
    markets would decrease. Domestic e-waste processing would also create more jobs,
    a resource as valuable as gold.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, I think component-level recycling is quite good for the environment
    and the human ecosystem in the long term. Most electronic parts will function
    perfectly for years beyond a consumer’s trash bin, and emerging economies create
    technology-hungry markets that can’t afford new parts purchased on the primary
    market.
  prefs: []
  type: TYPE_NORMAL
- en: KEEPING A RESERVE OF AUTHENTIC PARTS
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'A final option to ensure trustworthiness for critical military hardware could
    be to establish a strategic reserve of parts. A production run of military planes
    is limited to perhaps hundreds of units, a small volume compared to consumer electronics
    production runs. I imagine the lifetime demand of a part, including replacements,
    is limited to tens of thousands of units. Physically, then, a parts reserve isn’t
    unmanageable: 10,000 chips will fit inside a large shoebox.'
  prefs: []
  type: TYPE_NORMAL
- en: Financially, I estimate purchasing a reserve of raw replacement components for
    critical avionics systems would add only a fraction of a percent to the cost of
    an airplane. This could even lead to long-term savings, as manufacturers can achieve
    greater scale efficiency if they run one large batch all at once.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, anticounterfeit measures would be incredibly useful in civilian projects,
    too. I have sympathy for anyone who has to deal with counterfeit parts, as I myself
    have been burned on several occasions. Here’s a tale of a particularly annoying
    issue I ran into during my work on the chumby One.
  prefs: []
  type: TYPE_NORMAL
- en: '**FAKE MICROSD CARDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In December 2009, in the middle of the chumby One’s production run, I set out
    on a forensic investigation to find the truth behind some irregular Kingston memory
    cards. The factory called to tell me that SMT yield dropped dramatically on one
    lot of chumby Ones, so I drove over to see what I could do to fix the problem.
    After poking and prodding at some chumby Ones, I realized that all failing units
    had Kingston microSD cards from a particular lot code. I had the factory pull
    the entire lot of microSD cards from the line and rework the units that had these
    cards loaded. After swapping the cards, yield returned to normal.
  prefs: []
  type: TYPE_NORMAL
- en: The story should have ended there. In this situation, I’d usually get a return
    merchandise authorization (RMA) from the manufacturer for the defective parts,
    exchange the lot for parts that work, and move on. But I had a couple of problems.
  prefs: []
  type: TYPE_NORMAL
- en: First, Kingston wouldn’t take the cards back, because we programmed them. Second,
    there were a lot of defective cards (about 1,000 altogether, and chumby was already
    deeply backordered), and memory cards aren’t cheap. This type of memory card cost
    around $4 or $5 at the time, leaving a few thousand dollars in scrap if we couldn’t
    get them exchanged. Chumby couldn’t afford to sneeze at a few kilobucks, so I
    kicked into forensics mode.
  prefs: []
  type: TYPE_NORMAL
- en: '**Visible Differences**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Irregular external markings were the first suspicious feature I noticed about
    the defective Kingston cards.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0157-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*An irregular microSD card (left) and a normal card (right).'
  prefs: []
  type: TYPE_NORMAL
- en: The arrows and circles show suspicious differences.*
  prefs: []
  type: TYPE_NORMAL
- en: The strangest physical difference was that the lot code on the irregular card
    was silkscreened with the same stencil as the main logo. Silkscreening a lot code
    isn’t unusual, but typically, the manufacturer won’t use the same stencil for
    the lot code and the logo. There should be some variance in the coloration, font,
    or alignment of the lot code from the rest of the text. The entire batch of irregular
    cards also had the same lot code (N0214-001.A00LF). Typically, the lot code changes
    at least every couple hundred cards. Contrast the irregular card with the normal
    card, which is laser-marked. The normal cards’ lot codes varied with every tray
    of 96 units.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second strange feature was subtler and perhaps not damning: an irregularity
    in the microSD logo. Brand-name vendors like Kingston are very picky about the
    accuracy of their logos: SanDisk cards have a broken *D*, but Kingston cards sold
    in the United States almost universally use a solid *D*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Investigating the Cards**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Oddities in the external markings were just the start. When I read the electronic
    card ID data on the two cards (by checking */sys* entries in Linux), this is what
    I found in the irregular card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is what I found in the normal card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, notice the `date` code on the irregular card. Dates are counted as the
    offset from 00/2000 in the CID field, so a value of 00/2000 means the manufacturer
    didn’t bother to assign a date. Furthermore, in the year 2000, 2GB microSD cards
    didn’t even exist. Also, the serial number on the defective card is very low:
    in decimal, 0x960 is 2,400\. Other cards in the irregular batch had similarly
    low serial numbers, in the hundreds or thousands.'
  prefs: []
  type: TYPE_NORMAL
- en: For a popular product like a microSD card, the chance of getting the very first
    units out of a factory is pretty remote. For example, the serial number of the
    normal card is 0x9C62CAE6 in hexadecimal, or 2,623,720,166 in decimal, which is
    much more feasible. Very low serial numbers, like very low MAC ID addresses, are
    hallmarks of a ghost shift.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the manufacturer’s ID on the irregular card is 0x41 (capital *A* in
    ASCII), which I didn’t recognize.[*](footnote.xhtml#fn14) The original equipment
    manufacturer identification (OEMID) number was 0x3432—an ASCII 42, which is one
    more than the hex value for the manufacturer ID. Manufacturer IDs are usually
    the ASCII character given by the hexadecimal value, not the hexadecimal values
    themselves. Confusing hex and ASCII is a possible sign that someone who didn’t
    appreciate the meaning of the fields was running a ghost shift making these cards.
  prefs: []
  type: TYPE_NORMAL
- en: '**Were the MicroSD Cards Authentic?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Armed with this evidence, Chumby confronted the Kingston distributor in China
    and Kingston’s US sales representative. We asked whether the cards were authentic
    and, if so, why the serialization codes were irregular. After some time, Kingston
    swore the cards were authentic, not fakes, but it did reverse its position on
    exchanging the cards. The company took back the programmed cards and gave us new
    ones, no further questions asked.
  prefs: []
  type: TYPE_NORMAL
- en: However, Kingston never said why the card ID numbers were irregular. I know
    Chumby was small fry compared to the Nokias of the world, but companies should
    still answer basic questions about quality control, even for small fry. I was
    once accidentally shipped an old version of a Quintic part, and once I could prove
    the issue, I received world-class customer service from Quintic. The company gave
    me a thorough explanation and immediately paid for a full exchange of the parts.
    That was exemplary service, and I commend and strongly recommend Quintic for it.
    Kingston, on the other hand, did not set an example to follow.
  prefs: []
  type: TYPE_NORMAL
- en: I’d normally have disqualified Kingston as a vendor, but I was persistent. It
    was disconcerting that a high-profile, established brand would stand behind such
    irregular components. Who could say SanDisk or Samsung wouldn’t do the same? Price
    erosion at the time hit flash vendors hard, and as small fry, I could have been
    taken advantage of by any of those companies as a sink for marginal material to
    improve their bottom line. Given the relatively high cost of microSD cards, I
    needed *incoming quality control (IQC)* guidelines for inspections to follow to
    accept or reject shipments from memory vendors based on set quality standards.
    To develop those guidelines, I continued digging for the truth behind those cards.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Forensic Investigation**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, I collected a lot of sample microSD cards. I wanted to collect both regular
    *and* irregular cards in the wild, so I went to the Hua Qiang Bei district and
    wandered around the gray markets there. I bought 10 memory cards from small vendors,
    at prices from 30 to 50 RMB ($4.40 to $7.30 USD).
  prefs: []
  type: TYPE_NORMAL
- en: Shopping for irregular cards was interesting. In talking to a couple dozen vendors,
    I learned that Kingston, as a brand, was weak in China for microSD cards. SanDisk
    did a lot more marketing, so SanDisk cards were much easier to find on the open
    market, and the quality of gray-market SanDisk cards was fairly consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Small vendors were also entirely brazen about selling well-crafted fakes. They
    had bare cards sitting loose in trays in the display case. ([Page 11](ch01.xhtml#page_11)
    in [Chapter 1](ch01.xhtml#ch01) has photos showing what an SD card vendor’s stall
    looks like.) Once I agreed on a price and committed to buying a card, the vendor
    tossed a loose card into a “real” Kingston retail package, miraculously pulled
    out a certificate—complete with hologram, serial numbers, and a [kingston.com](http://kingston.com)
    URL to visit to validate the purchase—and slapped the certificate on the back
    of the retail package right in front of my eyes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0161-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A freshly purchased Kingston microSD card. It was just like new!*'
  prefs: []
  type: TYPE_NORMAL
- en: One vendor particularly interested me. There was literally a mom, a pop, and
    one young child sitting in a small stall of the mobile phone market. They were
    busily slapping dozens of non-Kingston cards into Kingston retail packaging. They
    had no desire to sell to me, but I was persistent. This card interested me in
    particular because it also had the broken *D* logo, but no Kingston marking. The
    preceding photo is the card and the package it came in; the card is Sample 4 in
    the next section, where you can see a detailed analysis of seven different microSD
    cards from my shopping trip.
  prefs: []
  type: TYPE_NORMAL
- en: '**Gathering Data**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After collecting my samples, I read out their card ID information by checking
    their */sys* entries under Linux and then decapsulated (that is, dissolved) their
    packages with nitric acid. As you can see in the photos in [Table 2](ch05.xhtml#tab02),
    my decapsulation technique was pretty crude. Most of the damage to the cards came
    from removing dissolved encapsulant with acetone and a Q-tip. I had to get a little
    rough, which didn’t do the bond wires any favors. But it was good enough for my
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s all the basic information I pulled from those cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 1** The irregular card that started this whole investigation. It was
    purchased through a sanctioned Kingston distributor in China, and to the best
    of my knowledge, none were shipped to Chumby’s end customers. MID = 0x000041,
    OEMID = 0x3432, serial = 0x960, name = SD2GB.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 2** A normal card that I purchased from the same sanctioned Kingston
    distributor in China where I bought Sample 1\. It was typical of microSD cards
    actually shipped in the first lot of chumby Ones. MID = 0x000002, OEMID = 0x544D,
    serial = 0x9C62CAE6, name = SA02G.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 3** A Kingston card purchased through a major US retail chain. MID
    = 0x000002, OEMID = 0x544D, serial = xA6EDFA97, name = SD02G. Note how the MID
    and OEMID are identical to those Sample 2, but not Sample 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 4** The non-Kingston card I saw slapped into Kingston-marked packaging,
    bought on the open market in Shenzhen. MID = 0x000012, OEMID = 0x3456, serial
    = 0x253, name = MS. Note the low serial number.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 5** A device from a more established retailer in the Shenzhen market.
    I bought it because it had the XXX.A00LF marking, like my original irregular card.
    MID = 0x000027, OEMID = 0x5048, serial = 0x7CA01E9C, name = SD2GB.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 6** A SanDisk card bought on the open market from a sketchy shop run
    by a sassy chain-smoking girl who wouldn’t stop texting. I actually acquired three
    total SanDisk cards from different sketchy sources, but all of them checked out
    with the same CID info, so I opened only one. MID = 0x000003, OEMID = 0x5344,
    serial = 0x114E933D, name = SU02G.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample 7** A Samsung card that I bought from a Samsung wholesale distributor.
    I didn’t scan this one before decapsulating it, and the card actually had no markings
    on the outside (it was blank, with just a laser mark on the back), so I didn’t
    photograph it. From appearances alone, it was the sketchiest of the bunch, but
    it was one of the best built. You can’t judge a book by its cover! MID = 0x00001B,
    OEMID = 0x534D, serial = 0xB1FE8A54, name = 00000.'
  prefs: []
  type: TYPE_NORMAL
- en: That’s a lot of data, and I had my work cut out for me in drawing some kind
    of useful conclusion from it all.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Interestingly, one SanDisk card from three in Sample 6 turned out to be used
    and only quick-formatted. With help from some recovery software, I found DLLs,
    WAVs, maps, and VeriSign certificates belonging to Navione’s Careland GPS. Someday,
    I’ll acquire lots of refurb microSD cards and collect interesting data from them.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 2:** A Breakdown of All the Cards Collected for the Investigation'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/t0164-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Summarizing My Findings**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are the most interesting high-level conclusions I drew from my survey:'
  prefs: []
  type: TYPE_NORMAL
- en: • The “normal” Kingston cards (Samples 2 and 3) were fabricated by Toshiba,
    as indicated by the flash die markings and their OEMIDs. In ASCII, 0x544D is *TM*,
    presumably for *Toshiba Memory*. These cards employ Toshiba controllers and Toshiba
    memory chips and seem to be of good quality. Thankfully, they were only ones sent
    to Chumby customers.
  prefs: []
  type: TYPE_NORMAL
- en: • The irregular card (Sample 1) used the same controller chip as the outright
    fake (Sample 4) I bought in the market. Both the irregular Kingston and the fake
    Kingston had low serial numbers and wacky ID information. Both of these cards
    exhibited abnormal operation under certain circumstances. I still hesitate to
    call Kingston’s irregular card a fake, as that’s a very strong accusation, but
    its construction was similar to another card of clearly questionable quality,
    which leads me to question Kingston’s choice of authorized manufacturing partners.
  prefs: []
  type: TYPE_NORMAL
- en: • The irregular card is the only card in the group that does not use a stacked
    CSP construction. Instead, it uses *side-by-side bonding*—that is, the microcontroller
    and the memory chip are simply placed next to each other. Stacked CSPs place the
    microcontroller on top of the memory chip. This is significantly more complex
    than side-by-side placement because the chips must first have their inert back-side
    material ground off to make the overall height of the stack fit inside such a
    slim package. Despite the difficulty, stacking chips is popular because it allows
    vendors to cram more silicon into the same footprint.
  prefs: []
  type: TYPE_NORMAL
- en: • The only two memory chip foundries in this sample set were Toshiba/SanDisk
    and Samsung. (SanDisk and Toshiba coown the factory that makes their memory chips.)
  prefs: []
  type: TYPE_NORMAL
- en: • Samsung’s NAND die, which is the most expensive part of a microSD card, is
    about 17 percent larger than dies from Toshiba/SanDisk. This means that Samsung
    microSD cards should naturally carry a slightly higher price than Toshiba/SanDisk
    cards. However, Samsung can offset that against the ability to place the same
    bare die that normally gets crammed inside a microSD package into thin small outline
    package (TSOP) devices suitable for board-level machine assembly instead. If demand
    for microSD cards slumps, Samsung can slap excess bare dies inside TSOP packages
    and sell those to third parties that do conventional machine assembly of chips.
    Plus, Samsung also doesn’t have a middleman like Kingston to eat away at margins.
  prefs: []
  type: TYPE_NORMAL
- en: I knew (like many others in manufacturing) that Kingston wasn’t a semiconductor
    manufacturer, in that it owned no fabrication facilities, but this research implied
    that Kingston did no original design of its own. I hoped to at least find a Kingston-branded
    controller chip inside the Kingston cards, even if the chip was fabricated by
    a foundry. I also expected to see Kingston sourcing memory chips from a broader
    variety of companies. Being able to balance the supply chain and be less dependent
    on a single, large competitor for chips would be a significant value-add to customers,
    giving Kingston leverage to negotiate a better price that few others can achieve.
    But every Kingston card I bought had a SanDisk/Toshiba memory chip inside. The
    only “value-add” that I saw was in the selection of the controller chip.
  prefs: []
  type: TYPE_NORMAL
- en: Oddly enough, of all the vendors, Kingston quoted Chumby with the best lead
    times and pricing, despite SanDisk and Samsung making all their own silicon and
    thereby having lower inherent costs. This told me that Kingston must have a very
    low margin on its microSD cards, which could explain why irregular cards found
    their way into its supply chain. Kingston is also probably more willing to talk
    to smaller accounts like Chumby because, as a channel brand, Kingston can’t compete
    against OEMs like SanDisk or Samsung for the biggest contracts from the likes
    of Nokia and Apple.
  prefs: []
  type: TYPE_NORMAL
- en: So, the irregular microSD card I pulled from the chumby One production line
    may not have been counterfeit, but it was still a child of the remarking ecosystem
    in China. Kingston is more of a channel trader and less of a technology provider,
    and is probably seen by SanDisk and Toshiba as a demand buffer for their production
    output. I also wouldn’t be surprised if SanDisk/Toshiba sold Kingston less-than-perfect
    parts, keeping the best of the lot for themselves. Thus I’d expect Kingston cards
    to have slightly more defective sectors, but thanks to the magic of error correction
    and spare sectors, this fact is hidden to end users.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, Kingston plays an important role in stabilizing microSD card prices
    and improving fab margins. But the potential conflict of interest seems staggering,
    and I’m still very curious about how this ecosystem came to be. Buying a significant
    amount of a competitor’s technology from a competitor’s fab yet still selling
    at a competitive price is counterintuitive to me, and perhaps my greatest folly
    in investigating that irregular microSD card was expecting something different.
  prefs: []
  type: TYPE_NORMAL
- en: '**FAKE FPGAS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Anyone who has done manufacturing in China for a while will have more than one
    story about irregularities in the supply chain. Here’s another one of my favorite
    stories, which highlights some of the core incentives that drive agents to cheat.
  prefs: []
  type: TYPE_NORMAL
- en: '**The White Screen Issue**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It was March 2013, and I was wrapping up the first volume production run of
    a bespoke robotics controller board codenamed Kovan.[*](footnote.xhtml#fn15) At
    the conclusion of any production run, I always review the list of issues encountered
    in production, to identify areas of improvement. Manufacturing is a Sisyphean
    struggle toward perfection: every run has some units you just have to scrap, and
    the difference between profit and loss is how well you can manage the scrap rate.'
  prefs: []
  type: TYPE_NORMAL
- en: On this run, one particular problem, dubbed the “[white screen issue](ch05.xhtml#ch00lev1sec107)”
    after its most obvious symptom, was the dominant problem. About 4 percent of the
    total run exhibited this problem, accounting for almost 80 percent of unit failures.
    I had the factory send me a few samples of the failed units to analyze in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: As I’ve often discovered when analyzing failed units, the most obvious symptom
    of the problem was only tangentially related to the root cause. The LCD screen
    appeared white on these units because the FPGA failed to configure. An FPGA, short
    for *Field Programmable Gate Array*, is essentially a blob of logic and memory
    devices embedded in a dense network of wires that can be configured at runtime
    to behave a certain way. The behavior of the FPGA is typically described in a
    high-level language that resembles a programming language like C (for instance,
    Verilog) or Ada (like VHDL), which is then compiled into a configuration bitstream.
  prefs: []
  type: TYPE_NORMAL
- en: FPGAs are very handy for implementing time-sensitive hardware interfaces that
    software would have trouble emulating. In this particular application, the FPGA
    controlled everything from the motors to the sensors and even the LCD. When the
    FPGA failed to configure, the LCD didn’t receive sync and data signals, leading
    it to show a blank, white screen instead of the expected factory test patterns.
  prefs: []
  type: TYPE_NORMAL
- en: FPGA failure was a big deal. For starters, the FPGA was the most expensive part
    on the board by a long shot, at around $11 per chip. I was also worried this problem
    could point to a deeper design issue. Perhaps the FPGA’s power regulators were
    unstable, or maybe there was an issue with the boot sequence that aggravated a
    corner case in configuration timing that would creep into the “good” production
    units as they aged. The situation definitely warranted a deeper investigation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Incorrect ID Codes**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I hooked up the debug console, dug into the problem, and discovered that the
    failure was linked to the FPGA not responding with the correct ID code. The ID
    code is checked via queries over a test access bus known as *JTAG*. Most users
    don’t check an FPGA ID before programming, but we designed an ID code check into
    Kovan because we allowed customers to specify what capacity FPGA they wanted to
    use for a given production lot. Some applications are more demanding, while others
    are more cost-sensitive. As a result, a customer could have a mixed inventory
    of FPGAs, and we wanted to be able to detect and protect the hardware from an
    accidental mismatch between the bitstream and the FPGA.
  prefs: []
  type: TYPE_NORMAL
- en: But this was a single production lot, and in theory all the FPGAs should have
    been the same. How, then, could the FPGA have reported a mismatched ID code at
    all? I scratched my head for a while and suspected a bug in our JTAG implementation,
    until I looked up the reported ID code. It was a known code—but for silicon marked
    as “Engineering Samples” from Xilinx, the vendor that makes these FPGAs. Engineering
    samples are preproduction units sold by Xilinx that have some minor known bugs
    but are sufficiently functional for most applications, to the point where most
    customers wouldn’t see a difference, *except* for the ID code.
  prefs: []
  type: TYPE_NORMAL
- en: I looked closer at the PCB, and for the first time, I noticed that a small,
    white rectangle was laser-etched into the FPGA’s surface. The rectangle was right
    below the part number, where the “ES” designator for an engineering sample would
    normally be marked. Someone had blasted the letters off and sold us engineering
    samples as full production units!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0171-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*An engineering sample FPGA on a Kovan board*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0171-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*For contrast, an FPGA of the same type that hasn’t been tampered with*'
  prefs: []
  type: TYPE_NORMAL
- en: The problem was very clearly a supply chain issue, not a design issue. Someone
    in the chain was taking ES silicon, blasting off the letters, and blending them
    in with legitimate units at a rate of around 3 to 5 percent. Typically, Xilinx
    would require that all ES silicon in a distributor’s inventory be scrapped once
    production units become available, but the ES units were almost fully functional,
    to the point where most applications would be unaffected. A production bitstream
    would seamlessly load into an ES part, and nobody would know the difference. The
    only way to tell them apart would be by doing an ID code check, which is, as I
    noted previously, atypical.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, slipping ES silicon into production lots would likely go unnoticed. Mixing
    ES parts in at a rate of 3 to 5 percent was also very clever: a low mix rate makes
    substitutions very hard to catch without 100 percent prescreening of the parts.
    Even in production, if the ES silicon were marginal, it would be maddeningly difficult
    to nail down the root cause of an issue due to its rarity.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there’s a correlation between manufacturing difficulty and the use
    of FPGAs. Usually if your design calls for an FPGA, you’re pushing boundaries
    on multiple fronts, so a scrap rate of a few percent is to be expected. The margin
    on FPGA-powered hardware is also often fat enough that a 4 percent failure rate
    might simply be accepted by the end customer. Thus, whoever did this knew exactly
    what they were doing; it was virtually risk-free money.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it’s important to note that most vendors in a supply chain survive
    on single-digit margins, so finding an extra 3 to 5 percent of “free money” on
    the most expensive part on a board virtually doubles profitability. That provides
    a very strong incentive to cheat, especially if you think you won’t be caught.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Solution**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The resolution to this problem was quite interesting. I met with the managers
    and CEO of AQS, the CM charged with producing Kovan, briefed them about the problem,
    and showed them the evidence I had accumulated. When my presentation ended, the
    CEO didn’t point a finger at upstream vendors or partners. Instead, he immediately
    looked his staff in the eyes and asked, “Did any of you do this?” He understood
    better than anyone else in the room that any individual buyer or manager would
    effectively double their take-home pay that month if they could pull off this
    cheat without getting caught.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the truly remarkable part of this situation is how rarely the
    problem I experienced happens, given what’s at stake and how hard these problems
    are to catch. And while I do have a few good bar stories to tell about fakes in
    the supply chain, remember that I’ve also shipped hundreds of thousands of units
    of good product. The majority of people I’ve worked with in China are hardworking,
    honest people who pass on easy opportunities to cheat me and turn a profit. It’s
    important not to generalize the whole based on the bad actions of a few.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, the vendor who sold us the chips didn’t admit fault,
    but they did replace all remarked units at their own cost. (We still had to pay
    for the labor cost to replace the chips and recertify the boards.) This is about
    the closest you can get to an amicable resolution in China when you’re not a giant
    like Apple or Foxconn. I did send a note to Xilinx HQ about potential misbehavior
    by one of their authorized vendors, but in the end, I’m a small customer, and
    the substitution of parts could have happened literally anywhere on the supply
    chain. Even the courier delivering the packages could have done the swap.
  prefs: []
  type: TYPE_NORMAL
- en: It wouldn’t be worth the cost to Xilinx in terms of manpower, relationships,
    and focus to investigate the problem and rat out the one bad actor in literally
    hundreds of possible suspects. But I’d like to imagine that at least a memo was
    sent around, and whoever was swapping in the ES parts got scared enough that they
    stopped.
  prefs: []
  type: TYPE_NORMAL
- en: '**CLOSING THOUGHTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the end of the day, a permissive IP ecosystem has benefits and drawbacks.
    As an engineer and a designer, I prefer to be in an ecosystem where ideas are
    accessible, even if it means I have to be on guard for occasional problems with
    fake goods. Put another way, a fundamental prerequisite for virality is the ability
    to make copies. The explosion of interest in hardware startups is in part thanks
    to the highly competitive manufacturing ecosystem that could flourish only in
    a product-over-patent culture.
  prefs: []
  type: TYPE_NORMAL
- en: Westerners who come to China without understanding the principles of *gongkai*
    and *guanxi[^*](footnote.xhtml#fn16)* often feel like they’re being cheated. But
    once you understand the rules and learn how to use them to drive your interests,
    you won’t feel like the game is rigged against you anymore.
  prefs: []
  type: TYPE_NORMAL
- en: In the US IP system, honor has little economic value, and law trumps honor.
    For example, patent trolling is a perfectly legal, and very profitable, way to
    make a living. In the Chinese system, however, reputation can trump law. This
    opens the door for corruption but also crowdsources the enforcement of social
    and moral values, driving a market value for honor, especially in local, tightly
    knit communities.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the approach of making money by locking up ideas and selling the
    rights to them is patently incompatible with a permissive IP ecosystem. Thankfully,
    the notion that ideas are community property dovetails nicely with my open source
    philosophies. In the next part of the book, I’ll talk more about my experiences
    creating open hardware and building businesses rooted in these principles.
  prefs: []
  type: TYPE_NORMAL
