- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: 'BEAT THE BUS: TRACKING LOCATION WITH MAPS AND SENSORS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: BEAT THE BUS：使用地图和传感器追踪位置**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: In [Chapters 3](ch03.xhtml#ch03) and [4](ch04.xhtml#ch04), we used variables
    to store and process information, which allowed us to track and report data to
    users. In the “Fruit Loot” and “Multiplication Station” apps, we created variables
    that hold one value at a time, like the game score, number of fruits dropped,
    and percentage of multiplication problems correct.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](ch03.xhtml#ch03)和[第 4 章](ch04.xhtml#ch04)中，我们使用变量来存储和处理信息，这使得我们能够跟踪并向用户报告数据。在“Fruit
    Loot”和“Multiplication Station”应用中，我们创建了一个个持有单一值的变量，例如游戏得分、掉落的水果数量和正确的乘法题百分比。
- en: But imagine how much more powerful our apps would be if we could store and manipulate
    multiple values in a single variable! For example, we could display a game’s top
    10 scores or allow users to choose from a list of 50 states, without needing to
    create a different variable for each score or state.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，想象一下，如果我们能够在一个变量中存储和操作多个值，我们的应用程序将变得多么强大！例如，我们可以显示游戏的前十名得分，或者允许用户从 50 个州的列表中进行选择，而无需为每个得分或州创建一个不同的变量。
- en: In most programming environments you can store multiple values in a data structure
    called an *array*. In App Inventor, you can store multiple values in variables
    using the built-in Variables, Lists, and Text blocks. The following variable stores
    multiple values as a list.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程环境中，你可以将多个值存储在一种叫做*数组*的数据结构中。在 App Inventor 中，你可以使用内置的变量、列表和文本模块，将多个值存储在变量中。以下变量将多个值存储为一个列表。
- en: '![Image](../images/f0084-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0084-01.jpg)'
- en: You can use Lists blocks to manipulate list variables by adding items to a list,
    searching inside a list, or removing items from a list. You can also access each
    list item by referring to its *index*, the number of its position in the list.
    For instance, the first item in the `size` list, `S`, is at index 1, the second
    item is at index 2, and so on.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用列表模块操作列表变量，通过向列表中添加项目、在列表中查找内容或从列表中移除项目来进行操作。你还可以通过引用其*索引*来访问每个列表项，索引是该项在列表中的位置。例如，`size`
    列表中的第一个项目 `S` 位于索引 1，第二个项目位于索引 2，以此类推。
- en: '**NOTE**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*App Inventor numbers indexes differently from most traditional programing
    languages, which number the first item in a list as index 0, the second item as
    index 1, and so on.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*App Inventor 与大多数传统编程语言在索引编号上有所不同，后者将列表中的第一个项目编号为索引 0，第二个项目为索引 1，以此类推。*'
- en: In this chapter, we’ll work with four lists that contain *static* (unchanging)
    preset values. Three of the lists will be interrelated, so that you’ll use an
    index of one list to access values in the two other lists. We’ll also create our
    first local variable to simplify a somewhat complex event handler.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理四个包含*静态*（不变）预设值的列表。其中三个列表是相互关联的，你将使用一个列表的索引来访问另外两个列表中的值。我们还将创建我们的第一个本地变量，以简化一个相对复杂的事件处理器。
- en: '**BUILDING THE “BEAT THE BUS” APP**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建“Beat the Bus”应用**'
- en: In this chapter, along with the four lists just mentioned, you’ll use `ListPicker`,
    `LocationSensor`, `Texting`, and some of App Inventor’s newer `Maps` components
    to create the “Beat the Bus” app. This app allows your parents or friends to track
    your location without using the GPS and location-sensing functions on their phones,
    which may drain their batteries. Instead, this app relies on the location sensor
    on your own device.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，除了刚才提到的四个列表外，你将使用 `ListPicker`、`LocationSensor`、`Texting` 以及一些 App Inventor
    新增的 `Maps` 组件来创建“Beat the Bus”应用程序。这个应用可以让你的父母或朋友追踪你的位置信息，而无需使用他们手机上的 GPS 和位置感应功能，这样可以避免消耗他们的电池。相反，这个应用依赖于你自己设备上的位置传感器。
- en: Log into App Inventor, create a project named BeatTheBus, and click **OK**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 App Inventor，创建一个名为 BeatTheBus 的项目，然后点击**确定**。
- en: '**DECOMPOSING “BEAT THE BUS”**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拆解“Beat the Bus”**'
- en: In “Beat the Bus,” the user activates location tracking by selecting a telephone
    number and destination from preset lists. The app then sends periodic text messages
    to the selected telephone number, showing the user’s location along the route.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Beat the Bus”中，用户通过从预设的列表中选择电话号码和目的地来激活位置追踪功能。然后，应用会定期向选定的电话号码发送短信，显示用户在路线上的位置。
- en: 'We can decompose the app into the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将应用拆解为以下步骤：
- en: When a user opens the app, display a `Map` showing the user’s current location
    with a `Marker` pointing to the user’s home. Show a `ListPicker` for the user
    to select a phone number. Once the user selects a number, show a `ListPicker`
    for the user to select a destination.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户打开应用程序时，显示一个`地图`，展示用户的当前位置，并用`标记`指向用户的家。显示一个`ListPicker`供用户选择电话号码。一旦用户选择了号码，显示一个`ListPicker`供用户选择目的地。
- en: Before the user selects a destination, set the `ListPicker` options from a list
    of locations.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户选择目的地之前，从一个地点列表中设置`ListPicker`的选项。
- en: Once the user selects a destination, move the `Map` and `Marker` to the selected
    destination, and text the starting location and destination to the selected number.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦用户选择了目的地，将`地图`和`标记`移至选定的目的地，并将起始位置和目的地通过短信发送到选择的号码。
- en: When the user’s location is 5 miles or less away from the selected destination,
    periodically text the user’s location to the selected number.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户的位置距离选择的目的地5英里或以内时，定期将用户的位置通过短信发送到选择的号码。
- en: 'You’ll need the following components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下组件：
- en: Global variable (4) to store telephone numbers, destinations, latitudes, and
    longitudes
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量（4）用于存储电话号码、目的地、纬度和经度
- en: Image for app design
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于应用程序设计的图片
- en: ListPicker (2) for the user to select from telephone number and destination
    lists
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ListPicker（2）用于让用户从电话号码和目的地列表中选择
- en: Local variable to store distance
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地变量，用于存储距离
- en: LocationSensor to provide periodic data related to the user’s location
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocationSensor，用于提供与用户位置相关的定期数据
- en: Map to show the user’s geographic location and hold the `Marker`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用户地理位置并承载`标记`的地图
- en: Marker to point to the user’s selected destination
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记以指向用户选择的目的地
- en: Texting to send text messages
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送文本消息的短信功能
- en: Now let’s lay out the app.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们布置应用程序。
- en: '**LAYING OUT “BEAT THE BUS” IN THE DESIGNER**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在设计器中布置“击败公交”**'
- en: 'To make sure that all components in `Screen1` will be centered at the top of
    the screen, click the drop-down arrow under AlignHorizontal and select **Center:
    3**. Next, change the screen’s background color to yellow by clicking **Default**
    under BackgroundColor and then **Yellow** when the color list dialog opens. Finally,
    remove the check mark under TitleVisible to hide the title of the screen when
    the app runs.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '为了确保`Screen1`中的所有组件都居中显示在屏幕的顶部，点击AlignHorizontal下拉箭头并选择**Center: 3**。接下来，点击背景色下拉框中的**默认**并在颜色列表对话框中选择**黄色**，以将屏幕背景色更改为黄色。最后，取消选中TitleVisible复选框，以便在应用程序运行时隐藏屏幕标题。'
- en: Next, let’s drag the necessary components from their drawers in the Palette
    pane onto the Viewer pane and adjust their properties as we go. First, drag in
    an Image from the User Interface drawer and set its **Height** to **Fill parent**.
    Then upload the picture to display by clicking the text box under **Picture**
    and following the image upload instructions outlined in “Uploading a Picture”
    on [page 27](ch02.xhtml#page_27). Finally, click the checkbox under ScalePictureToFit
    so the image will take up the entire width of the screen.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将所需的组件从调色板面板中的抽屉拖动到查看面板，并在过程中调整它们的属性。首先，从用户界面抽屉中拖动一个图片组件，并将其**高度**设置为**填充父级**。然后，通过点击**图片**下的文本框并按照“上传图片”中的说明上传图片，图片将显示在屏幕上。最后，勾选**ScalePictureToFit**复选框，使图片占满整个屏幕宽度。
- en: To display a `Map` centered at your user’s starting location, place a Map component
    from the Maps drawer under `Image1`. Note that you must place a `Map` on the screen
    before you can add any other `Maps` component. Adjust the `Map`’s properties by
    replacing the coordinates in the CenterFromString text box to the *latitude* and
    *longitude* for your app’s starting address, separated by a comma and space.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个以用户起始位置为中心的`地图`，从地图抽屉中拖动一个地图组件到`Image1`下。请注意，必须先将一个`地图`组件放置在屏幕上，才能添加任何其他的`地图`组件。通过将`地图`的属性中的CenterFromString文本框替换为应用程序起始地址的*纬度*和*经度*，它们之间用逗号和空格分隔，来调整地图的属性。
- en: '**NOTE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can locate any place on a map by its latitude and longitude coordinates.
    The latitude of a place is its distance north or south of the equator, while the
    longitude is its distance east or west of the prime meridian. You can find the
    latitude and longitude coordinates for a street address by entering it into the
    Latitude/Longitude Finder tool at [https://www.latlong.net/](https://www.latlong.net/).*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以通过纬度和经度坐标在地图上定位任何地方。一个地方的纬度是它距离赤道的北或南的距离，而经度是它距离本初子午线的东或西的距离。你可以通过将街道地址输入到[https://www.latlong.net/](https://www.latlong.net/)的纬度/经度查找工具中，找到该地址的纬度和经度坐标。*'
- en: Then, to change the `Map`’s height to 50 percent so it takes up half the vertical
    screen, click the text box under **Height**; when the dialog opens, input 50 in
    the text box next to the word `percent` and click **OK**. Next, set its **Width**
    to **Fill parent**, click the checkbox under ShowUser so an icon representing
    the user will show on the `Map` and track the user’s location, and change the
    `Map` zoom level from the default 13 to 10 by inputting 10 in the ZoomLevel text
    box.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，若要将`Map`的高度更改为50%，以便它占据屏幕的垂直一半，点击**Height**下的文本框；当对话框打开时，在`percent`旁边的文本框中输入50并点击**确定**（OK）。接着，将**宽度**（Width）设置为**填充父项**（Fill
    parent），勾选**ShowUser**复选框以便在`Map`上显示表示用户的图标，并通过在ZoomLevel文本框中输入10将`Map`的缩放级别从默认的13更改为10。
- en: Now drag a Marker from the Maps drawer onto the `Map`. Adjust the `Marker` in
    the Properties pane by clicking the text box under **Latitude** and entering the
    latitude for the user’s home address, then clicking the text box under **Longitude**
    and entering its longitude.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从地图面板中将一个标记（Marker）拖到`Map`上。在属性面板中，通过点击**纬度**（Latitude）下的文本框并输入用户家庭地址的纬度，然后点击**经度**（Longitude）下的文本框并输入其经度来调整`Marker`。
- en: Next, to let users select a destination and a phone number to send it to, under
    Map1, drag two ListPickers from the User Interface drawer to the Viewer. Rename
    ListPicker1 to NumberPicker and ListPicker2 to PlacePicker. In the Properties
    pane for both, change the background color to yellow by clicking **Default** under
    BackgroundColor and then **Yellow** when the color list dialog opens. Then make
    the text bold by clicking the checkbox under FontBold, and make the text larger
    by inputting 25 in the **FontSize** text box. Replace the default `Text for ListPicker1`
    by entering Select a Number in the **Text** text box for `NumberPicker` and the
    default `Text for ListPicker2` by entering Select a Place in the **Text** text
    box for `PlacePicker`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了让用户选择一个目的地和一个电话号码来发送，首先在Map1下，从用户界面面板拖动两个ListPicker到视图中。将ListPicker1重命名为NumberPicker，将ListPicker2重命名为PlacePicker。在这两个ListPicker的属性面板中，通过点击**默认**（BackgroundColor）并在颜色对话框中选择**黄色**来更改背景颜色。然后通过勾选FontBold下的复选框使文本加粗，并在**FontSize**文本框中输入25来增大文本大小。将`ListPicker1`的默认文本`Text
    for ListPicker1`替换为在**Text**文本框中输入“选择一个号码”，并将`ListPicker2`的默认文本`Text for ListPicker2`替换为在**Text**文本框中输入“选择一个地点”。
- en: Change the **Width** for both `ListPicker`s to **Fill parent**, and change the
    color of the items in the selection drop-downs to yellow by clicking **Default**
    under ItemTextColor and then **Yellow** when the color list dialog opens. Then,
    in the Properties pane for PlacePicker, click the checkbox under Visible to remove
    the check mark and keep `PlacePicker` from showing when the app first opens. We’ll
    program it later to appear after the user picks a phone number.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个`ListPicker`的**宽度**（Width）更改为**填充父项**（Fill parent），然后通过点击**默认**（ItemTextColor）并在颜色对话框中选择**黄色**来更改选择下拉菜单中项目的颜色。接着，在PlacePicker的属性面板中，取消勾选**Visible**复选框，以使`PlacePicker`在应用程序首次打开时不显示。我们稍后会编程使它在用户选择电话号码后显示出来。
- en: 'Finally, drag in the non-visible components: the `LocationSensor` component
    from the Sensors drawer and the `Texting` component from the Social drawer. In
    the Properties pane, change the LocationSensor’s TimeInterval from the default
    60,000 milliseconds to 1,000 by choosing **1000** in the drop-down box below TimeInterval.
    This means that the app’s `LocationSensor` will report location changes each second
    if location data is available and the location has changed since the last interval.
    We’re making this change so that later you can program your app to text updated
    location information as frequently as every second after new data becomes available.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，拖入不可见的组件：从传感器面板中拖入`LocationSensor`组件，从社交面板中拖入`Texting`组件。在属性面板中，将`LocationSensor`的TimeInterval从默认的60,000毫秒更改为1,000，方法是选择TimeInterval下拉框中的**1000**。这意味着如果位置数据可用并且位置自上次间隔以来发生了变化，应用程序的`LocationSensor`将每秒报告一次位置变化。我们进行此更改是为了之后能够编程让应用程序在新数据可用后每秒更新一次位置数据并发送短信。
- en: Now that we’ve added `LocationSensor1`, click the Map in the Components pane
    and, in its Properties pane, choose its associated `LocationSensor` by clicking
    **None** under LocationSensor, selecting LocationSensor1 in the dialog that opens,
    and clicking **OK**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了`LocationSensor1`，点击组件面板中的地图，在其属性面板中选择其关联的`LocationSensor`，方法是点击LocationSensor下的**无**，在弹出的对话框中选择LocationSensor1，并点击**确定**。
- en: '`Screen1` should look like [Figure 5-1](ch05.xhtml#ch5fig1).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Screen1`应类似于[图 5-1](ch05.xhtml#ch5fig1)。'
- en: '![Image](../images/05fig01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig01.jpg)'
- en: '*Figure 5-1: The Viewer, Component, and Media panes after laying out “Beat
    the Bus”*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：布局“Beat the Bus”后的查看器、组件和媒体面板*'
- en: In the Viewer pane, you should see all visible components on the screen and
    the non-visible components under `Screen1`. In the Components pane, you should
    see a list of every component you’ve dragged onto the Viewer pane. In the Media
    pane, you should see the image you’ve uploaded.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看器面板中，您应该能看到屏幕上的所有可见组件，以及`Screen1`下的不可见组件。在组件面板中，您应该能看到您拖动到查看器面板上的每个组件。在媒体面板中，您应该能看到您上传的图片。
- en: '**PROGRAMMING “BEAT THE BUS”**'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程“Beat the Bus”**'
- en: Now that you’ve laid out all components, you’re ready to program the app in
    the Blocks Editor. For “Beat the Bus,” we’ll program five event handlers. Four
    of these respond to events related to the two `ListPicker`s. The other one directs
    the app’s action each time the `LocationSensor` detects a location change. We’ll
    also create four global list variables and one local variable to store important
    information, and we’ll use two `if then` blocks to test conditions to direct the
    flow of the app’s action.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经布局好了所有组件，准备在块编辑器中编写应用程序代码。对于“Beat the Bus”，我们将编写五个事件处理程序。其中四个响应与两个`ListPicker`相关的事件，另一个则在`LocationSensor`检测到位置变化时指导应用程序的动作。我们还将创建四个全局列表变量和一个局部变量来存储重要信息，并使用两个`if
    then`块来测试条件，以指导应用程序的流程。
- en: Click the **Blocks** button to switch to the Blocks Editor, and let’s start
    programming the app’s four steps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**块**按钮切换到块编辑器，接下来我们开始编程应用程序的四个步骤。
- en: '**STEP 1: CHOOSING THE PHONE NUMBER TO TEXT**'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 1：选择要发送短信的电话号码**'
- en: When the screen opens, we want the user to see the `Map` and `Marker`, both
    with the properties we set in the Designer. We also want to display `NumberPicker`,
    from which the user will select a telephone number for the app to text. Let’s
    start our code by telling the app what to do before and after the user clicks
    `NumberPicker` and selects a number.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕打开时，我们希望用户能够看到`Map`和`Marker`，它们都具有我们在设计器中设置的属性。我们还希望显示`NumberPicker`，用户可以从中选择一个电话号码，供应用程序发送短信。我们将从告知应用程序在用户点击`NumberPicker`并选择一个号码之前和之后该做什么开始编写代码。
- en: '**Creating a Global List Variable**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建全局列表变量**'
- en: We’ll use a global list variable to store the telephone numbers in `NumberPicker`
    by creating and initializing the `phoneNumbers` variable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个全局列表变量来存储`NumberPicker`中的电话号码，通过创建并初始化`phoneNumbers`变量来实现。
- en: '![Image](../images/f0088-01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0088-01.jpg)'
- en: Click the **Variables** block drawer and drag an initialize global name block
    ➊ to the Viewer, click name, and replace it with phoneNumbers. Then drag a make
    a list block ➋ from the Lists drawer and snap it to the right side of the initialize
    global phoneNumbers block.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**变量**块面板，拖动一个初始化全局名称块 ➊ 到查看器中，点击名称并将其替换为phoneNumbers。然后从列表面板中拖动一个创建列表块 ➋，并将其附加到初始化全局phoneNumbers块的右侧。
- en: Now, in order to add three telephone numbers to the list, we need to add another
    list item input to the `make a list` block’s two default inputs. Click the blue
    mutator icon to the left of the words `make a list`, and drag one additional item
    block to the make a list block in the dialog that opens.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将三个电话号码添加到列表中，我们需要向`make a list`块的两个默认输入中再添加一个列表项输入。点击`make a list`左侧的蓝色变动器图标，在打开的对话框中拖动一个额外的项目块到`make
    a list`块中。
- en: Then, drag three empty string blocks ➌ from the Text drawer and snap them into
    the sockets of the make a list block. Enter a telephone number into each empty
    string block, without any dashes or spaces (if you don’t have a phone number for
    any of the empty strings, enter 1111111). Together, these blocks create the global
    `phoneNumbers` variable, which we can use in all our event handlers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从文本抽屉中拖动三个空字符串块 ➌，并将它们连接到创建列表块的插槽中。将一个电话号码输入到每个空字符串块中，不要添加任何破折号或空格（如果没有电话号码，可以输入1111111）。这些块一起创建了全局的`phoneNumbers`变量，我们可以在所有事件处理程序中使用它。
- en: '**Handling NumberPicker’s BeforePicking Event**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理 NumberPicker 的 BeforePicking 事件**'
- en: Now that we’ve created `phoneNumbers`, we have the data we need for `NumberPicker`.
    Before the user selects from `NumberPicker`, we want the app to set the choices
    that the user will see in `NumberPicker` to the items in `phoneNumbers`. Then,
    after the user selects a number, we want `NumberPicker` to disappear, replaced
    by `PlacePicker`. Here are the event handlers that we need for step 1.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经创建了`phoneNumbers`，我们就拥有了`NumberPicker`所需的数据。在用户从`NumberPicker`中选择之前，我们希望应用程序将用户在`NumberPicker`中看到的选择项设置为`phoneNumbers`中的项目。然后，在用户选择一个电话号码后，我们希望`NumberPicker`消失，取而代之的是`PlacePicker`。以下是我们为第一步所需的事件处理程序。
- en: '![Image](../images/f0088-02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0088-02.jpg)'
- en: In the Blocks pane, click NumberPicker and drag the whenNumberPicker.BeforePicking
    event handler block ➊ to the Viewer. Then, click NumberPicker again and drag its
    setNumberPicker.Elementsto block ➋ next to the word `do`. Next, in the Blocks
    pane, click the **Variables** blocks drawer and drag the get global phoneNumbers
    block ➌ to the right of the setNumberPicker.Elementsto block. These three blocks
    create the `BeforePicking` event handler, which sets the telephone number choices
    that the user will see in `NumberPicker` to the telephone numbers in the `phoneNumbers`
    variable. Next we’ll create the handler for the `AfterPicking` event.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在块面板中，点击`NumberPicker`，并将`whenNumberPicker.BeforePicking`事件处理程序块 ➊ 拖动到查看器中。接着，再次点击`NumberPicker`，将其`setNumberPicker.Elementsto`块
    ➋ 拖动到`do`字样的旁边。接下来，在块面板中，点击**变量**块抽屉，将`get global phoneNumbers`块 ➌ 拖动到`setNumberPicker.Elementsto`块的右侧。这三块组合成了`BeforePicking`事件处理程序，它将用户在`NumberPicker`中看到的电话号码选择设置为`phoneNumbers`变量中的电话号码。接下来，我们将创建`AfterPicking`事件的处理程序。
- en: '**Handling NumberPicker’s AfterPicking Event**'
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理 NumberPicker 的 AfterPicking 事件**'
- en: To replace `NumberPicker` with `PlacePicker` after the user chooses a telephone
    number in `NumberPicker`, drag the whenNumberPicker.AfterPicking event handler
    block ➍ to the Viewer. Then, drag the setNumberPicker.Visibleto block ➎ next to
    the word `do`. Next, click the **Logic** blocks drawer and snap the false block
    ➏ to the right of the setNumberPicker.Visibleto block. Then, click PlacePicker
    in the Blocks pane and place the setPlacePicker.Visibleto block ➐ under the `setNumberPicker.Visibleto`
    block. Finally, click the **Logic** blocks drawer again and snap the true block
    ➑ to the right of the `setPlacePicker.Visibleto` block.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在用户选择电话号码后将`NumberPicker`替换为`PlacePicker`，将`whenNumberPicker.AfterPicking`事件处理程序块
    ➍ 拖动到查看器中。接着，拖动`setNumberPicker.Visibleto`块 ➎ 放到`do`字样的旁边。接下来，点击**逻辑**块抽屉，将`false`块
    ➏ 拖动到`setNumberPicker.Visibleto`块的右侧。然后，在块面板中点击`PlacePicker`，并将`setPlacePicker.Visibleto`块
    ➐ 放到`setNumberPicker.Visibleto`块下方。最后，再次点击**逻辑**块抽屉，将`true`块 ➑ 拖动到`setPlacePicker.Visibleto`块的右侧。
- en: To see how the blocks for step 1 work, live-test with a phone, as outlined in
    “Live-Testing Your Apps” on [page xxii](intro.xhtml#page_xxii). Once you click
    **Connect** ▸ **AI Companion** in the top menu bar and scan the QR code with your
    phone’s AI2 Companion app, your “Beat the Bus” app should open on your phone.
    As long as the blocks are placed as shown, under the app’s title image, you should
    see the `Map` with the `Marker` pointing to the latitude and longitude you set
    in the Properties pane in the Designer. You may also see a user icon located at
    your current location, if your location and the `Marker` point are both visible
    at the `Map`’s zoom level.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看步骤 1 中的模块如何工作，请按照《实时测试你的应用》中的说明，在手机上进行实时测试，具体见[第 xxii 页](intro.xhtml#page_xxii)。一旦你点击顶部菜单栏中的**连接**
    ▸ **AI Companion**，并使用手机的AI2 Companion应用扫描二维码，你的“Beat the Bus”应用应该会在手机上打开。只要模块按图示放置，在应用程序的标题图像下方，你应该能看到`Map`，其中的`Marker`指向你在设计器中的属性窗格设置的纬度和经度。如果你的当前位置和`Marker`指示的点都在`Map`的缩放级别下可见，你可能还会看到一个用户图标位于当前位置。
- en: Below the map, you should see `NumberPicker`. When you click it, the list of
    numbers in your `phoneNumbers` variable should appear, and, after you select one,
    `NumberPicker` should disappear and `PlacePicker` should appear. That’s all that
    should happen for now. Leave the app open on your phone to keep live-testing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图下方，你应该看到`NumberPicker`。点击它后，`phoneNumbers`变量中的数字列表应该会出现，选择其中一个后，`NumberPicker`应该消失，`PlacePicker`应该出现。现在只需要这些功能。保持应用程序在手机上打开，以便进行实时测试。
- en: '**STEP 2: CHOOSING THE DESTINATION**'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 2：选择目的地**'
- en: 'In step 2, to code the `BeforePicking` event for the `PlacePicker`, we’ll need
    to create a new global list variable called `places` to store the location choices
    we’ll display to the user. We’ll also create two related global list variables:
    `placeLats`, which will hold the latitudes for the destination options, and `placeLongs`,
    which will hold the longitudes.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 2 中，为了编写`PlacePicker`的`BeforePicking`事件代码，我们需要创建一个新的全局列表变量，叫做`places`，用于存储我们将展示给用户的地点选择。我们还将创建两个相关的全局列表变量：`placeLats`，用于存储目的地选项的纬度，以及`placeLongs`，用于存储经度。
- en: '![Image](../images/f0089-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0089-01.jpg)'
- en: By creating these as global variables, we can use them in the `BeforePicking`
    event handler for `PlacePicker` and in all other handlers in the app to access
    the name, latitude, and longitude for the user’s selected location.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些创建为全局变量，我们可以在`PlacePicker`的`BeforePicking`事件处理程序中以及应用程序中的所有其他处理程序中使用它们，以访问用户选择位置的名称、纬度和经度。
- en: '**Creating Additional Global List Variables**'
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建额外的全局列表变量**'
- en: For each variable, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with the variable
    name. Then drag a make a list block ➋ from the Lists drawer and snap it to the
    right side of the initialize global block. Finally, drag two empty string blocks
    ➌ from the Text drawer and snap them into the sockets of the make a list block,
    and enter data into each empty string block.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个变量，点击**变量**模块抽屉，拖动一个初始化全局名称模块 ➊ 到查看器中，点击名称并将其替换为变量名。然后，从列表模块抽屉拖动一个创建列表模块
    ➋ 并将其与初始化全局模块的右侧对接。最后，从文本模块抽屉中拖动两个空字符串模块 ➌，并将其插入到创建列表模块的插槽中，输入数据到每个空字符串模块中。
- en: When you enter the data for `placeLats` and `placeLongs`, be sure that you place
    the coordinate values in the same positions as their corresponding item in the
    `places` variable. For example, the first value you enter for `placeLats` should
    be the latitude of the first value in your `places` variable, which is `home`
    in this list. The first value you enter for `placeLongs` should be the longitude
    of the first value in your `places` variable. Likewise, the second value you enter
    into `placeLats` must be the latitude for the second value in your `places` variable
    (`coding class` in this list), and the second value you enter into `placeLongs`
    should be the longitude for the second value in `places`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入`placeLats`和`placeLongs`的数据时，确保将坐标值放置在与`places`变量中相应项目相同的位置。例如，你为`placeLats`输入的第一个值应该是`places`变量中第一个值的纬度，这个值是列表中的`home`。你为`placeLongs`输入的第一个值应该是`places`变量中第一个值的经度。同样，为`placeLats`输入的第二个值必须是`places`变量中第二个值的纬度（该列表中的`coding
    class`），而为`placeLongs`输入的第二个值应该是`places`中第二个值的经度。
- en: '**Handling PlacePicker’s BeforePicking Event**'
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理 PlacePicker 的 BeforePicking 事件**'
- en: Now that we’ve created `places`, we have the data we need for `PlacePicker`.
    Before the user can select from `PlacePicker`, we want the app to set the choices
    that the user will see to the items in `places`. The `PlacePicker BeforePicking`
    event handler does this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`places`，我们拥有了`PlacePicker`所需的数据。在用户可以从`PlacePicker`中选择之前，我们希望应用程序将用户看到的选项设置为`places`中的项目。`PlacePicker
    BeforePicking`事件处理程序实现了这一点。
- en: '![Image](../images/f0090-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0090-01.jpg)'
- en: In the Blocks pane, click PlacePicker and drag the whenPlacePicker.BeforePicking
    event handler block ➊ to the Viewer. Then, click PlacePicker again and drag its
    setPlacePicker.Elementsto block ➋ next to the word `do`. Next, in the Blocks pane,
    click the **Variables** blocks drawer and drag the get global places block ➌ to
    the right of the setPlacePicker.Elementsto block. Those three blocks create the
    `BeforePicking` event handler, which sets the destination choices that the user
    will see in `PlacePicker` to the items in the `places` variable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在“块”面板中，点击PlacePicker并拖动`whenPlacePicker.BeforePicking`事件处理程序块 ➊到“查看器”中。然后，再次点击PlacePicker并将其`setPlacePicker.Elementsto`块
    ➋拖动到`do`单词旁边。接下来，在“块”面板中，点击**变量**块抽屉，并将`get global places`块 ➌拖到`setPlacePicker.Elementsto`块的右侧。这三个块创建了`BeforePicking`事件处理程序，该事件处理程序将用户在`PlacePicker`中看到的目的地选项设置为`places`变量中的项目。
- en: To see how these new blocks work, live-test again. If the blocks are placed
    as shown, once you choose a number and `NumberPicker` disappears, you should see
    `PlacePicker`. When you click it, the list of destinations in your `places` variable
    should appear, and, after you select one, nothing else should happen for now.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些新块如何工作，请再次进行实时测试。如果按图示放置了这些块，一旦你选择了一个数字并且`NumberPicker`消失后，你应该看到`PlacePicker`。当你点击它时，`places`变量中的目的地列表应该会出现，之后当你选择一个目的地时，现在应该没有其他操作发生。
- en: '**STEP 3: STARTING LOCATION TRACKING**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 3：开始位置追踪**'
- en: Let’s now program the `PlacePicker AfterPicking` event handler.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来编程`PlacePicker AfterPicking`事件处理程序。
- en: '![Image](../images/f0091-01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0091-01.jpg)'
- en: These blocks make `PlacePicker` disappear, move the `Marker` to the user’s selected
    destination, and center the `Map` at that location. They also tell the app to
    text the user’s starting location and destination to the selected phone number.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些块使得`PlacePicker`消失，将`Marker`移到用户选择的目的地，并将`Map`的中心设定为该位置。它们还指示应用程序将用户的起始位置和目的地文本发送到选定的电话号码。
- en: '**Making PlacePicker Disappear**'
  id: totrans-82
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**让PlacePicker消失**'
- en: In the Blocks pane, click PlacePicker and drag the whenPlacePicker.AfterPicking
    event handler block ➊ to the Viewer. Then, click PlacePicker again and drag its
    setPlacePicker.Visibleto block ➋ next to the word `do`. Next, in the Blocks pane,
    click the **Logic** blocks drawer, drag the false block ➌ to the Viewer, and snap
    it to the right of the setPlacePicker.Visibleto block. These blocks make `PlacePicker`
    disappear after the user chooses a destination.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在“块”面板中，点击PlacePicker并拖动`whenPlacePicker.AfterPicking`事件处理程序块 ➊到“查看器”中。然后，再次点击PlacePicker并将其`setPlacePicker.Visibleto`块
    ➋拖动到`do`单词旁边。接下来，在“块”面板中，点击**逻辑**块抽屉，拖动`false`块 ➌到“查看器”中，并将其放置在`setPlacePicker.Visibleto`块的右侧。这些块使得`PlacePicker`在用户选择目的地后消失。
- en: '**Resetting the Map Marker Location**'
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**重置地图标记位置**'
- en: Now we’ll add the blocks that set the location of the `Marker` to the destination
    selected by the user. In the Blocks pane, click Marker1, drag the callMarker1.SetLocation
    method block ➍ to the Viewer, and snap it inside the whenPlacePicker.AfterPicking
    block under the `setPlacePicker.Visibleto` block. The `Marker1 SetLocation` method
    requires arguments for two parameters, `latitude` and `longitude`, and will set
    `Marker1` on the `Map` to the location at the latitude and longitude values provided.
    We want those values to be the latitude and longitude for the destination chosen
    by the user in `PlacePicker`, which we get from the `placeLats` and `placeLongs`
    variables.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加设置`Marker`位置为用户选择的目的地的块。在“块”面板中，点击Marker1，拖动`callMarker1.SetLocation`方法块
    ➍到“查看器”中，并将其嵌套到`whenPlacePicker.AfterPicking`块下的`setPlacePicker.Visibleto`块中。`Marker1
    SetLocation`方法需要两个参数——`latitude`和`longitude`，并将`Marker1`在`Map`上设置为提供的纬度和经度位置。我们希望这些值是用户在`PlacePicker`中选择的目的地的纬度和经度，这些值来自`placeLats`和`placeLongs`变量。
- en: '**Setting the Map Marker Latitude and Longitude**'
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置地图标记的纬度和经度**'
- en: Let’s take a closer look at the blocks in the `AfterPicking` event handler that
    set the `latitude` and `longitude` parameter arguments for the `Marker1 SetLocation`
    method to the latitude and longitude for the user’s destination.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看 `AfterPicking` 事件处理程序中的代码块，这些代码块将 `latitude` 和 `longitude` 参数传递给 `Marker1
    SetLocation` 方法，从而设置用户目的地的纬度和经度。
- en: '![Image](../images/f0092-01.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0092-01.jpg)'
- en: Click the **Lists** blocks drawer, drag a select list item block ➊ to the Viewer,
    and snap it to the right of the callMarker1.SetLocation block, next to the word
    `latitude`. The `select list item` block requires arguments for `list` and `index`,
    and then, from the `list` provided, will select the item at the specified `index`
    position.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **列表** 代码块抽屉，将一个选择列表项代码块 ➊ 拖到查看器中，并将其对齐到 `Marker1.SetLocation` 调用块的右侧，紧挨着
    `latitude` 这个词。`select list item` 代码块需要 `list` 和 `index` 两个参数，接着它会从提供的 `list`
    中选择指定 `index` 位置的项。
- en: To provide those arguments, click the **Variables** blocks drawer and drag the
    get global placeLats block ➋ to the right of the select list item block next to
    the word `list`. Then click PlacePicker and drag the PlacePicker.SelectionIndex
    block ➌ next to the word `index`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供这些参数，点击 **变量** 代码块抽屉，将获取全局 `placeLats` 代码块 ➋ 拖到 `select list item` 代码块的右侧，放置在
    `list` 旁边。然后点击 `PlacePicker`，将 `PlacePicker.SelectionIndex` 代码块 ➌ 拖到 `index` 旁边。
- en: These blocks set the `list` argument for the `select list item` block to the
    `placeLats` variable and the `index` argument to `PlacePicker.SelectionIndex`
    (the index of the item the user selected in the related `PlacePicker`, which pulls
    its data from the `places` variable). For instance, if the user chose `home` as
    the destination, `PlacePicker.SelectionIndex` would equal `1`, since `home` is
    the first element in `PlacePicker` from the `places` variable. If the user selected
    `coding class`, `PlacePicker.SelectionIndex` would equal 2\. Altogether, these
    blocks set the latitude for `Marker1` to the latitude listed in the `placeLats`
    variable at the `PlacePicker.SelectionIndex` position, which is the latitude for
    the user’s selected destination.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码块将 `select list item` 代码块的 `list` 参数设置为 `placeLats` 变量，并将 `index` 参数设置为
    `PlacePicker.SelectionIndex`（这是用户在相关 `PlacePicker` 中选择的项的索引，数据来自 `places` 变量）。例如，如果用户选择了
    `home` 作为目的地，`PlacePicker.SelectionIndex` 将等于 `1`，因为 `home` 是 `PlacePicker` 中第一个元素，数据来自
    `places` 变量。如果用户选择了 `coding class`，`PlacePicker.SelectionIndex` 将等于 2。总之，这些代码块将
    `Marker1` 的纬度设置为 `placeLats` 变量中对应 `PlacePicker.SelectionIndex` 位置的纬度值，也就是用户所选择的目的地的纬度。
- en: To set the longitude for `Marker1`, copy the blocks at ➊, ➋, and ➌ and snap
    the copy to the right of the callMarker1.SetLocation block, next to the word `longitude`
    ➍. Then change the list argument in the duplicate blocks by clicking the drop-down
    arrow next to get global placeLats and selecting get global placeLongs ➎. These
    blocks set the longitude for `Marker1` to the longitude value listed in the `placeLongs`
    variable at the `PlacePicker.SelectionIndex` position. The app will use this longitude
    and the latitude we just set to move `Marker1` to the destination selected by
    the user.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置 `Marker1` 的经度，复制 ➊、➋ 和 ➌ 位置的代码块，并将复制的代码块对齐到 `Marker1.SetLocation` 调用块的右侧，紧挨着
    `longitude` 这个词 ➍。然后通过点击 `get global placeLats` 旁边的下拉箭头，选择 `get global placeLongs`
    ➎ 来更改复制块中的 `list` 参数。这些代码块将 `Marker1` 的经度设置为 `placeLongs` 变量中对应 `PlacePicker.SelectionIndex`
    位置的经度值。应用程序将使用这个经度和我们刚刚设置的纬度，将 `Marker1` 移动到用户选择的目的地。
- en: '**Re-centering the Map**'
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**重新定位地图**'
- en: Now let’s add the blocks to re-center the `Map` to the same location—the selected
    destination.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加代码块，将 `Map` 重新定位到相同位置——即用户选择的目的地。
- en: '![Image](../images/f0093-01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0093-01.jpg)'
- en: In the Blocks pane, click Map1, drag the setMap1.CenterFromStringto block ➊
    to the Viewer, and snap it inside the whenPlacePicker.AfterPicking block under
    the `callMarker1.SetLocation` method block. Then, click the **Text** blocks drawer
    and drag a join block ➋ to the Viewer. Add an input to it by clicking the blue
    mutator icon to the left of the word `join` and dragging one additional string
    block to the join block in the dialog that opens.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块面板中，点击 `Map1`，将 `setMap1.CenterFromStringto` 代码块 ➊ 拖到查看器中，并将其放置在 `whenPlacePicker.AfterPicking`
    代码块内，紧接在 `callMarker1.SetLocation` 方法块下。接着，点击 **文本** 代码块抽屉，将 `join` 代码块 ➋ 拖到查看器中。通过点击
    `join` 左侧的蓝色变异图标并拖动一个额外的字符串块到打开的对话框中，向其添加一个输入。
- en: Next, for the `join` block’s top input, click Marker1 in the Blocks pane and
    drag in the Marker1.Latitude block ➌. For the `join` block’s second input, drag
    in an empty string block ➍ from the **Text** blocks drawer, click the string block’s
    text area, and enter , . Then, for the `join` block’s bottom input, click Marker1
    in the Blocks pane drawer again and drag in the Marker1.Longitude block ➎. After
    the user picks a destination, these blocks center the `Map` to `Marker1`’s latitude
    and longitude, which are the coordinates for the destination the user selected
    in `PlacePicker`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于`join`块的顶部输入，点击Blocks面板中的Marker1，并拖入Marker1.Latitude块➌。对于`join`块的第二个输入，从**Text**块抽屉中拖入一个空字符串块➍，点击字符串块的文本区域，并输入逗号。然后，对于`join`块的底部输入，再次点击Blocks面板中的Marker1，并拖入Marker1.Longitude块➎。用户选择目的地后，这些块将把`Map`中心设置为`Marker1`的经度和纬度，即用户在`PlacePicker`中选择的目的地坐标。
- en: '**Texting the Selected Phone Number**'
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**发送短信到选定的电话号码**'
- en: The last action we need to program for step 3 is the texting. After the user
    selects a destination, we want the app to text the destination and the user’s
    current location to the phone number the user chose. The following blocks in the
    `AfterPicking` event handler set the `PhoneNumber` for `Texting1`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步我们需要编程的最后一个动作是发送短信。在用户选择目的地后，我们希望应用程序将目的地和用户当前的位置发送到用户选择的电话号码。接下来的块在`AfterPicking`事件处理程序中设置`Texting1`的`PhoneNumber`。
- en: '![Image](../images/f0093-02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0093-02.jpg)'
- en: Click Texting1 in the Blocks pane, drag the setTexting1.PhoneNumberto block
    ➊ to the Viewer, and snap it inside the whenPlacePicker.AfterPicking block under
    the `setMap1.CenterFromStringto` block. Then click NumberPicker and drag the NumberPicker.Selection
    block ➋ to the Viewer to the right of the setTexting1.PhoneNumberto block. These
    blocks set the required phone number for `Texting1` to the number selected by
    the user from the `NumberPicker` drop-down list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blocks面板中点击Texting1，拖动setTexting1.PhoneNumberto块➊到Viewer，并将其插入到`setMap1.CenterFromStringto`块下的whenPlacePicker.AfterPicking块中。然后点击NumberPicker，拖动NumberPicker.Selection块➋到Viewer，并将其插入到setTexting1.PhoneNumberto块的右侧。这些块将为`Texting1`设置用户从`NumberPicker`下拉列表中选择的电话号码。
- en: '**Deciding the Message to Send**'
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**决定要发送的消息**'
- en: Now we need to add the conditional blocks that set the message for `Texting1`
    to send. That message will consist of one statement if the app has received the
    user’s current longitude and latitude and another statement if the app has not
    yet received those coordinates. The next blocks in the `AfterPicking` event handler
    set the message.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加条件块，以设置`Texting1`发送的消息。如果应用程序已经接收到用户当前的经度和纬度，则该消息将包含一个语句；如果应用程序尚未接收到这些坐标，则该消息将包含另一个语句。接下来的块在`AfterPicking`事件处理程序中设置消息。
- en: '![Image](../images/f0094-01.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0094-01.jpg)'
- en: Click Texting1 again, drag the setTexting1.Messageto block ➊ to the Viewer,
    and snap it inside the whenPlacePicker.AfterPicking block under the `setTexting1.PhoneNumberto`
    block.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击Texting1，拖动setTexting1.Messageto块➊到Viewer，并将其插入到`setTexting1.PhoneNumberto`块下的whenPlacePicker.AfterPicking块中。
- en: Then, click the **Control** blocks drawer, drag an if then else block with a
    left plug ➋ to the Viewer, and snap it to the right of the setTexting1.Messageto
    block. The left plug indicates that this block is a *return block*, which means
    it returns a value after evaluating a condition rather than only executing commands
    like the `if then` blocks we’ve used before.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**Control**块抽屉，拖动一个带左插口的if then else块➋到Viewer，并将其插入到setTexting1.Messageto块的右侧。左插口表示该块是一个*返回块*，这意味着它在评估条件后返回一个值，而不是像我们之前使用的`if
    then`块那样仅执行命令。
- en: Here, the `if then else` block directs the app to evaluate a condition and return
    one of two joined strings to use for `Texting1`’s `Message`—either the value from
    the blocks in the `then` socket or the value from the blocks in the `else` socket.
    To provide the condition we want the app to evaluate, click the **Logics** blocks
    drawer and drag an = comparison block ➌ to the Viewer next to the word `if`. To
    fill the `=` comparison operator block’s left operand socket, click LocationSensor1
    in the Blocks pane and drag in its LocationSensor1.HasLongitudeLatitude block
    ➍. Fill its right operand socket by clicking the **Logic** blocks drawer and dragging
    in the true block ➎. So far, these blocks set the test condition for the app to
    evaluate in order to determine the message to text, which is whether `LocationSensor1`
    has gotten the user’s longitude and latitude.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`if then else` 块指示应用评估一个条件并返回两个连接字符串之一，用于 `Texting1` 的 `Message`——要么是 `then`
    插座中的块值，要么是 `else` 插座中的块值。为了提供我们希望应用评估的条件，点击**逻辑**块抽屉，将一个 `=` 比较块 ➌ 拖到查看器中，放在 `if`
    旁边。要填充 `=` 比较运算符块的左操作数插座，点击块面板中的 LocationSensor1，并拖入其 LocationSensor1.HasLongitudeLatitude
    块 ➍。通过点击**逻辑**块抽屉并拖动 `true` 块 ➎，来填充右操作数插座。到目前为止，这些块设置了应用评估的测试条件，以确定发送的消息内容，即 `LocationSensor1`
    是否已经获取了用户的经度和纬度。
- en: '**Texting One Message If the App Knows the User’s Longitude and Latitude**'
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**如果应用程序知道用户的经度和纬度，则发送一条消息**'
- en: The next blocks tell the app the message to send if `LocationSensor1` has the
    user’s longitude and latitude, which means the test condition evaluates to `true`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块告诉应用如果 `LocationSensor1` 已经拥有用户的经度和纬度，则发送的消息，这意味着测试条件的结果为 `true`。
- en: '![Image](../images/f0094-02.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0094-02.jpg)'
- en: Click the **Text** blocks drawer and drag a join block ➊ to the Viewer to the
    right of the word `then` in the `if then else` block. Add two more inputs to the
    `join` block by clicking the blue mutator icon to the left of the word `join`
    and dragging two additional string blocks in the dialog that opens. For the `join`
    block’s top input, drag in an empty string block ➋ from the Text blocks drawer,
    click the string block’s text area, and enter We are getting ready to leave from
    (with a space after the word `from`).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文本**块抽屉，将一个连接块 ➊ 拖动到右侧的查看器，放在 `if then else` 块中的 `then` 之后。通过点击“连接”块左侧的蓝色变更图标并在弹出的对话框中拖动两个额外的字符串块，向“连接”块添加两个输入。对于“连接”块的第一个输入，从文本块抽屉中拖入一个空的字符串块
    ➋，点击该字符串块的文本区域，输入“我们准备从（`from`后留一个空格）出发”。
- en: For the `join` block’s second input, click LocationSensor1 in the Blocks pane
    and drag in its LocationSensor1.CurrentAddress block ➌. For the `join` block’s
    third input, drag in an empty string block ➍ from the Text blocks drawer, click
    the string block’s text area, and enter - on the way to (with a space after the
    word `to`). Then, for the `join` block’s bottom input, click PlacePicker in the
    Blocks pane drawer and drag in its PlacePicker.Selection block ➎. These blocks
    set the message for the app to send if the app’s `LocationSensor` has received
    the user’s longitude and latitude, which means the message will indicate the user’s
    destination and also include the user’s starting point—the current address.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“连接”块的第二个输入，在块面板中点击 LocationSensor1，拖动其 LocationSensor1.CurrentAddress 块 ➌。对于“连接”块的第三个输入，从文本块抽屉中拖入一个空的字符串块
    ➍，点击该字符串块的文本区域，输入“- 前往（`to`后留一个空格）”。然后，对于“连接”块的底部输入，点击块面板中的 PlacePicker，拖动其 PlacePicker.Selection
    块 ➎。这些块设置了如果应用的 `LocationSensor` 接收到用户的经度和纬度时，应用发送的消息，也就是说，这条消息将显示用户的目的地，并包括用户的起始点——当前地址。
- en: '**Texting a Different Message If the App Doesn’t Know the User’s Longtitude
    and Latitude**'
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**如果应用程序无法获取用户的经度和纬度，发送不同的消息**'
- en: Next, we’ll add the blocks that dictate the message the app will text if `LocationSensor1`
    hasn’t yet received those coordinates, meaning the `if then else` test condition
    evaluates to `false`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一些块，定义如果 `LocationSensor1` 尚未接收到这些坐标时应用发送的消息，这意味着 `if then else` 测试条件的结果为
    `false`。
- en: '![Image](../images/f0095-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0095-01.jpg)'
- en: Click the **Text** blocks drawer and drag another join block ➊ to the Viewer
    to the right of the word `else` in the `if then else` block. For the `join` block’s
    top input, drag in an empty string block ➋ from the Text blocks drawer, click
    the string block’s text area, and enter We are getting ready to leave for (with
    a space after the word `for`).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文本**模块抽屉，并将另一个连接模块 ➊ 拖动到位于`if then else`模块中`else`一词右侧的查看器中。对于`join`模块的顶部输入，将一个空字符串模块
    ➋ 从文本模块抽屉中拖入，点击字符串模块的文本区域，并输入“我们正在准备离开（`for`之后留一个空格）”。
- en: For the `join` block’s bottom input, click PlacePicker in the Blocks pane drawer
    and drag in another PlacePicker.Selection block ➌. These blocks set the message
    for the app to send to a statement that indicates the destination but does not
    include the user’s current address, since the app’s `LocationSensor` doesn’t yet
    know it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`模块的底部输入，点击模块面板抽屉中的PlacePicker，并拖动另一个PlacePicker.Selection模块 ➌。这些模块将设置应用发送的消息为指示目的地的语句，但不包括用户当前的地址，因为应用的`LocationSensor`还无法获取此信息。
- en: '**Sending the First Text Message**'
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**发送第一条短信**'
- en: Finally, click Texting1 again and drag its callTexting1.SendMessageDirect block
    into the whenPlacePicker.AfterPicking block under the `setTexting1.Messageto`
    block. This block sends the text message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次点击Texting1，并将其callTexting1.SendMessageDirect模块拖入`setTexting1.Messageto`模块下的whenPlacePicker.AfterPicking模块中。该模块用于发送短信。
- en: '![Image](../images/f0095-02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0095-02.jpg)'
- en: In plain English, the blocks for step 3 move the map `Marker` to the user’s
    selected destination, re-center the map, and then direct the app to decide the
    message to text based on whether `LocationSensor1` has retrieved the user’s current
    latitude and longitude. If it has, the app should send a message to the selected
    telephone number that includes the user’s current location and the destination.
    If not, the app sends a message that includes only the destination.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 用通俗的英语来说，第3步的模块将地图标记`Marker`移动到用户选择的目的地，重新居中地图，然后指示应用决定要发送的文本消息，具体取决于`LocationSensor1`是否获取到用户当前的经纬度。如果获取到了，应用应向选定的电话号码发送一条包括用户当前地点和目的地的消息。如果没有，应用仅发送包括目的地的消息。
- en: Use both your tester phone and the phone with the selected phone number to live-test
    these blocks. If you’ve placed the blocks exactly as shown, once you choose a
    number and `NumberPicker` disappears, you should see `PlacePicker`. When you click
    it, the list of destinations in your `places` variable should appear.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的测试手机和选定号码的手机对这些模块进行实时测试。如果你已按照所示正确放置模块，一旦选择号码并且`NumberPicker`消失，你应该会看到`PlacePicker`。点击它时，你的`places`变量中的目的地列表应会出现。
- en: After you select a destination, `PlacePicker` should disappear and your `Map`
    and `Marker` should shift to the selected destination’s latitude and longitude,
    if those properties are different from those you set in the Designer. Also, your
    phone should text a message to your selected number, as long as you have texting
    enabled on your phone. If anything’s not working as planned, take the time to
    debug before moving on. Then close the AI2 Companion app on your phone.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择目的地后，`PlacePicker`应消失，且你的`Map`和`Marker`应根据所选目的地的纬度和经度移动，如果这些属性与在设计器中设置的不同。此外，只要你在手机上启用了短信功能，手机应该会向你选择的号码发送一条消息。如果任何功能没有按计划运行，请先进行调试再继续。然后关闭手机上的AI2
    Companion应用。
- en: '**STEP 4: TRACKING THE JOURNEY**'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤4：跟踪旅程**'
- en: Let’s now program step 4 so that the app texts the user’s location to the selected
    phone number periodically as the user travels the route, but only when the user
    is less than or equal to 5 miles away from the selected destination. This means
    that we’ll need to use another conditional to check whether the user’s current
    location is within 5 miles of the chosen location. Use the following `LocationChanged`
    event handler blocks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写第4步程序，让应用定期将用户的位置发送到选定的电话号码，只在用户离选定目的地小于或等于5英里时发送。这意味着我们需要使用另一个条件语句来检查用户当前的位置是否在距离选定地点5英里以内。使用以下的`LocationChanged`事件处理模块。
- en: '![Image](../images/f0096-01.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0096-01.jpg)'
- en: 'Click LocationSensor1 in the Blocks pane and drag the whenLocationSensor1.LocationChanged
    block ➊ to the Viewer. You’ll notice that this `LocationChanged` event handler
    provides arguments for four event parameters when the app’s location changes:
    the new location’s `latitude`, `longitude`, `altitude`, and `speed`. These parameters
    are local in scope, meaning we can use their values only in the event handler
    in which they’re created, just like the local variable we’ll create in the next
    section.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **Blocks** 面板中的 LocationSensor1，并将 whenLocationSensor1.LocationChanged 块
    ➊ 拖动到 Viewer 中。你会注意到，当应用程序位置发生变化时，这个 `LocationChanged` 事件处理程序会提供四个事件参数的参数：新位置的
    `latitude`、`longitude`、`altitude` 和 `speed`。这些参数是局部作用域的，意味着我们只能在创建它们的事件处理程序中使用它们的值，就像我们将在下一节中创建的本地变量一样。
- en: '**Creating a Local distance Variable**'
  id: totrans-128
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建本地 distance 变量**'
- en: To simplify the code, we’ll use the arguments provided for the `LocationChanged`
    event handler parameters to create a local variable, `distance`, to hold the value
    of the app’s current distance from `Marker1`, which we’ve positioned on the `Map`
    at the user’s selected destination. Since `distance` is a local variable, we can
    use it in this event handler only.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化代码，我们将使用 `LocationChanged` 事件处理程序参数中提供的参数来创建一个本地变量 `distance`，该变量用于保存应用程序当前与
    `Marker1` 之间的距离，而 `Marker1` 被放置在用户选择的目标位置的 `Map` 上。由于 `distance` 是一个本地变量，因此我们只能在这个事件处理程序中使用它。
- en: Click the **Variables** blocks drawer and drag the initialize local name to
    block ➋ to the right of the whenLocationSensor1.LocationChanged block next to
    the word `do`. Click name in the initialize local name to block and replace it
    with distance. Then click Marker1 and snap its callMarker1.DistanceToPoint method
    block ➌ to the right of the initialize local distance to block. To fill the method
    block’s required `latitude` and `longitude` parameter sockets, mouse over the
    latitude event parameter above the word `do` and drag the get latitude block ➍
    into the method’s `latitude` socket; then, mouse over the longitude event parameter
    above the word `do` and drag the get longitude block ➎ into the method’s `longitude`
    socket.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **Variables** 块抽屉，并将初始化本地名称的块拖动到 whenLocationSensor1.LocationChanged 块的右侧，位于
    `do` 旁边的块 ➋。点击初始化本地名称的块中的 name，并将其替换为 distance。然后点击 Marker1，将其 callMarker1.DistanceToPoint
    方法块 ➌ 拖动到初始化本地 distance 块的右侧。为了填充方法块所需的 `latitude` 和 `longitude` 参数插槽，将鼠标悬停在 `do`
    上方的 latitude 事件参数上，并将获取 latitude 块 ➍ 拖动到方法的 `latitude` 插槽中；接着，将鼠标悬停在 `do` 上方的
    longitude 事件参数上，并将获取 longitude 块 ➎ 拖动到方法的 `longitude` 插槽中。
- en: Now that we’ve created `distance`, we can use it in this event handler wherever
    we need to refer to the app’s current distance from the user’s selected destination.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了 `distance`，可以在此事件处理程序中随时使用它来引用应用程序当前与用户选择的目标位置之间的距离。
- en: Next, let’s direct the app to text information about the user’s location only
    if `distance` is less than or equal to 5 miles.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们让应用程序仅在 `distance` 小于或等于 5 英里时，文本信息显示关于用户位置的内容。
- en: '**Deciding Whether to Text Current Distance**'
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**决定是否发送当前距离的文本信息**'
- en: To test whether `distance` is less than or equal to 5 miles, we need to set
    another test condition using the following blocks.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 `distance` 是否小于或等于 5 英里，我们需要使用以下块设置另一个测试条件。
- en: '![Image](../images/f0097-01.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0097-01.jpg)'
- en: Click the **Control** blocks drawer and drag an if then block ➊ inside the initialize
    local distance to block under the `callMarker1.DistanceToPoint` block. Now click
    the **Math** blocks drawer, drag an = comparison operator block ➋ to the Viewer
    next to the word `if`, and turn `=` into a `≤` comparison block by clicking the
    drop-down arrow to the right of the equal sign and selecting the less than or
    equal sign.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **Control** 块抽屉，将一个 if then 块 ➊ 拖入初始化本地 distance 块下方，位于 `callMarker1.DistanceToPoint`
    块下。现在单击 **Math** 块抽屉，将一个 = 比较运算符块 ➋ 拖动到 Viewer 中，放置在 `if` 旁边，并通过点击等号右侧的下拉箭头，将
    `=` 转换为 `≤` 比较运算符。
- en: To fill the `≤` comparison block’s left operand socket, mouse over the local
    distance variable and drag in its get distance block ➌. To fill the `≤` comparison
    block’s right operand socket, click the **Math** blocks drawer, drag in a 8046.72
    number block ➍ for the metric equivalent to 5 miles. This code sets the test condition
    that determines whether the user is less than or equal to 5 miles away from the
    selected destination. The condition must evaluate to `true` in order for the app
    to send a text message in this step.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充`≤`比较块的左操作数插槽，将鼠标悬停在本地distance变量上，并将其get distance块 ➌ 拖入。要填充`≤`比较块的右操作数插槽，点击**Math**块面板，拖动一个8046.72的数字块
    ➍，该数字是5英里的公制等值。此代码设置了一个测试条件，用于确定用户是否距离选定目标地点小于或等于5英里。该条件必须计算为`true`，才能让应用程序在此步骤中发送文本消息。
- en: '**Setting and Sending Text Messages Along the Route**'
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**沿路线设置和发送短信**'
- en: The next blocks set the text of the message for the app to send if our test
    condition is met—that is, the user is less than or equal to 5 miles from the selected
    destination.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块将设置消息的文本内容，当测试条件满足时（即用户距离选定的目标地点小于或等于5英里），应用程序将发送此消息。
- en: '![Image](../images/f0097-02.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0097-02.jpg)'
- en: Click **Texting1** and drag its setTexting1.Messageto block ➊ into the if then
    block next to the word `then`. Now, click the **Text** blocks drawer and drag
    a join block ➋ to the Viewer to the right of the `setTexting1.Messageto` block.
    Add two more inputs to it by clicking the blue mutator icon to the left of the
    word `join` and dragging two additional string blocks to the `join` block in the
    dialog that opens. For the `join` block’s top input, drag in an empty string block
    ➌ from the Text blocks drawer, click the string block’s text area, and enter I
    am (including a space after the word `am`).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Texting1**，将其setTexting1.Messageto块 ➊ 拖到`then`旁边的if then块中。接下来，点击**Text**块面板，拖动一个连接块
    ➋ 到`setTexting1.Messageto`块右侧的查看器中。通过点击`join`块左侧的蓝色变体图标，打开对话框并拖动两个额外的字符串块到`join`块中，为它添加两个输入。对于`join`块的第一个输入，从Text块面板中拖动一个空字符串块
    ➌，点击该字符串块的文本区域，输入“我在”（包括“am”后面的空格）。
- en: For the `join` block’s second input, drag in a format as decimal block ➍ from
    the Math drawer and fill its number socket by dragging in a division operation
    block ➎, also from the Math drawer. Mouse over distance to drag its get distance
    block ➏ into the division block’s left operand socket. Then, drag a 1609.344 number
    block ➐ into the division block’s right operand socket for the metric equivalent
    to 1 mile. Finally, fill the format as decimal number block’s places socket with
    a 2 number block ➑ from the Math drawer. This second `join` block input computes
    the user’s distance in miles, presents it as a decimal number with two decimal
    places, and adds it to the text message the app will send. Since App Inventor
    calculates distances in meters, we’re converting it to miles for users in the
    US.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`块的第二个输入，从Math块面板中拖动一个格式化为小数块 ➍，并通过拖动一个除法运算块 ➎ 将其数字插槽填充，这个块同样来自Math块面板。将鼠标悬停在distance上，拖动其get
    distance块 ➏ 到除法块的左操作数插槽中。然后，从Math块面板中拖动一个数值为1609.344的数字块 ➐ 到除法块的右操作数插槽，用于转换为1英里的公制等值。最后，将格式化为小数块的places插槽填充为Math块面板中的一个数值为2的小数块
    ➑。第二个`join`块输入计算用户的距离（单位为英里），以小数点后两位的形式呈现，并将其添加到应用程序发送的文本消息中。由于App Inventor以米为单位计算距离，我们需要将其转换为英里，以便美国用户使用。
- en: Next, fill the `join` block’s third input with another empty string block ➒
    from the Text blocks drawer, click the string block’s text area, and enter miles
    from (including a space before the word `miles` and after the word `from`). Then,
    for the `join` block’s bottom input, click PlacePicker in the Blocks pane and
    drag in its PlacePicker.Selection block ➓.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`join`块的第三个输入填充为另一个来自Text块面板的空字符串块 ➒，点击该字符串块的文本区域，输入“英里远”（包括“miles”前后的空格）。然后，对于`join`块的底部输入，点击Blocks面板中的PlacePicker，拖动其PlacePicker.Selection块
    ➓。
- en: Finally, click Texting1 again, and drag its callTexting1.SendMessageDirect block
    into the if then block under the `setTexting1.Messageto` block to send the message.
    These blocks set the text message to “I am [*x.xx*] miles from [*selected destination*]”
    and send it to the phone number the user selected.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次点击Texting1，并将其callTexting1.SendMessageDirect块拖到`setTexting1.Messageto`块下的if
    then块中，以发送消息。这些块将文本消息设置为“我距离[*selected destination*]约[*x.xx*]英里”，并将其发送到用户选择的电话号码。
- en: Now, altogether, the blocks for step 4 tell the app to text the user’s location
    to the selected phone number periodically as the user is en route, but only if
    the user is less than or equal to 5 miles away from the destination.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，第四步的所有模块将指示应用程序定期将用户的位置发送到选定的电话号码，前提是用户距离目的地小于或等于5英里。
- en: Now we can test the completed app! To do so, you need to build the app and install
    it so you can run it as you are moving along the route. For testing, you can install
    the app on your phone quickly after creating a temporary QR code that you can
    scan with your phone’s AI2 Companion app.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试完成的应用程序了！要进行测试，你需要构建并安装应用程序，这样你就可以在沿着路线行进时运行它。在测试时，你可以在创建临时二维码后迅速将应用程序安装到手机上，然后用手机的AI2
    Companion应用扫描二维码。
- en: '**WARNING**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Please do not try to test this app while you are driving. If you test in a
    vehicle, have someone else drive so that you can safely operate and monitor the
    two phones. You also can test the app while walking.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*请不要在驾驶时测试此应用程序。如果你在车内测试，请让其他人驾驶，这样你可以安全操作并监控两部手机。你也可以在步行时测试该应用程序。*'
- en: With the app project open on your computer screen, click **Build** ▸ **App (
    provide QR code for .apk )** in the top menu bar, as shown in [Figure 5-2](ch05.xhtml#ch5fig2).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在电脑屏幕上打开应用项目后，点击顶部菜单栏中的**构建** ▸ **应用（提供二维码用于.apk）**，如[图5-2](ch05.xhtml#ch5fig2)所示。
- en: '![Image](../images/05fig02.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig02.jpg)'
- en: '*Figure 5-2: The Build menu link that creates the QR code you can scan to install
    the app*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-2：创建二维码的构建菜单链接，你可以扫描该二维码来安装应用程序*'
- en: You should see a progress bar showing that the QR code is being generated. Once
    the code is ready, you should see a small window containing a temporary QR code
    link to your app’s source file. Scan the code with the AI2 Companion app on your
    phone and click **OK** to close the small window.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到一个进度条，显示二维码正在生成。一旦二维码准备好，你应该会看到一个包含临时二维码链接的小窗口，指向你的应用程序源文件。使用手机上的AI2 Companion应用扫描该二维码，并点击**确定**关闭小窗口。
- en: Note that since “Beat the Bus” is a nonmarket app, you’ll first need to make
    sure your phone’s settings allow installation of applications from “Unknown Sources.”
    When you install the app, be sure to allow it to receive text messages and access
    approximate location, precise location, and extra location provider commands.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于“Beat the Bus”是一个非市场应用，你首先需要确保手机设置允许安装来自“未知来源”的应用程序。安装应用时，请确保允许其接收短信并访问大致位置、精确位置和额外的定位提供者命令。
- en: Once you’ve installed and opened the app, you should see the `Map` with the
    `Marker` pointing to the latitude and longitude you set in the Properties pane
    in the Designer. You may also see a user icon located at your current location,
    if your location and the `Marker` are both visible at the `Map`’s zoom level.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并打开应用程序后，你应该能看到`地图`，其中的`标记`指向你在设计器中的属性面板设置的纬度和经度。如果你的当前位置和`标记`都在`地图`的缩放级别范围内，你还可能看到一个用户图标。
- en: You should also see `NumberPicker`, which should disappear after you click it
    and choose a number. Then you should see `PlacePicker`, which will disappear after
    you click it and select a destination. Next, your `Map` and `Marker` should shift
    to the selected destination’s latitude and longitude, if those properties are
    different from those you set in the Designer. The app should also text a message
    to your selected number.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该能看到`数字选择器`，点击后它应该会消失并选择一个数字。然后你应该能看到`位置选择器`，点击后它应该会消失并选择一个目的地。接下来，如果这些属性与在设计器中设置的不同，你的`地图`和`标记`应该会移动到选定目的地的纬度和经度。应用程序还应该会向你选择的号码发送短信。
- en: As you travel along, you should see the user icon move occasionally on the `Map`,
    and when you get within 5 miles of your destination, the app should text periodic
    messages to your selected number until you close the app.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当你沿着路线前进时，你应该偶尔看到用户图标在`地图`上移动，并且当你距离目的地不到5英里时，应用程序应该定期向你选择的号码发送短信，直到你关闭应用程序。
- en: You may notice that, although you’ve set `LocationSensor1` to check for location
    changes every second, the app may not send a message each second. According to
    the App Inventor documentation, the `LocationSensor` component receives location
    updates only when the location of the phone actually changes, and the chosen time
    interval is not guaranteed. Nonetheless, your selected phone number should receive
    several messages between the time you reach the 5-mile mark and arrive at the
    destination. Note that, if you feel the messages are coming in too frequently,
    you can increase the `LocationSensor`’s `TimeInterval` in the Designer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，尽管你已将`LocationSensor1`设置为每秒检查一次位置变化，应用可能不会每秒发送一次短信。根据App Inventor的文档，`LocationSensor`组件仅在手机的位置发生实际变化时才接收位置更新，并且所选的时间间隔并不能得到保证。然而，你选择的电话号码应该会在你到达5英里标志和到达目的地之间接收到几条消息。请注意，如果你觉得消息来得太频繁，你可以在设计器中增加`LocationSensor`的`TimeInterval`。
- en: If anything’s not working as planned, take time to debug. If you make any changes,
    you’ll need to reinstall the app to test them. If you placed the blocks correctly,
    the app should work as expected. You’ve successfully created the “Beat the Bus”
    tracking app!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何问题没有按计划运行，请花时间进行调试。如果你做了任何更改，你需要重新安装应用以进行测试。如果你正确地放置了模块，应用应该按预期工作。你已经成功创建了“打败公交车”跟踪应用！
- en: '**SUMMARY**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you built the “Beat the Bus” app, which uses App Inventor’s
    exciting `LocationSensor`, `Texting`, and `Maps` components along with `ListPicker`s
    to allow others to track your location, without using the power-draining location
    services on their phone. While building this app, you learned how to create list
    variables that can hold multiple values and local variables that can make your
    code more efficient. You also continued to use the programming selection control
    structure to direct the app’s flow.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了“打败公交车”应用，该应用利用了App Inventor中的`LocationSensor`、`Texting`和`Maps`组件，以及`ListPicker`，使得他人可以在不使用手机电量消耗巨大的定位服务的情况下跟踪你的定位。在构建这个应用的过程中，你学会了如何创建可以保存多个值的列表变量，以及如何使用本地变量使代码更加高效。你还继续使用编程中的选择控制结构来引导应用的流程。
- en: In [Chapter 6](ch06.xhtml#ch06), you’ll learn how to use App Inventor’s built-in
    Control and Logic blocks to control an app’s flow using the repetitive program
    structure. We’ll use more lists with that structure as we create the “Tic Tac
    Toe” game app, which allows users to play the classic two-person game and keeps
    track of the players’ turns.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.xhtml#ch06)中，你将学习如何使用App Inventor内置的控制和逻辑模块，通过重复的程序结构来控制应用的流程。我们将在创建“井字游戏”应用时使用更多的列表，该应用允许用户玩经典的两人游戏，并记录玩家的轮次。
- en: '**ON YOUR OWN**'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**独立操作**'
- en: Save new versions of “Beat the Bus” as you modify and extend it for the following
    exercises. You can find solutions online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改和扩展“打败公交车”应用以完成后续练习时，请保存新版本。你可以在* [https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*
    上找到解决方案。
- en: Change the app so that it also provides the destination street address in all
    text messages sent and retrieves that information from a list variable.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用，使其在发送的所有短信中也提供目的地的街道地址，并从列表变量中检索该信息。
- en: Change the app so that it requires users to enter the destination instead of
    choosing it from the preset list.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用，使其要求用户输入目的地，而不是从预设列表中选择。
- en: Extend the app for Android devices so that the app responds to specific text
    messages from the selected number by texting the user’s current location at that
    time. How will your algorithm change? What components and blocks will you need
    to add and modify?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Android设备扩展该应用，使得应用能够响应来自所选号码的特定短信，并在该时刻发送用户的当前位置。你的算法将如何改变？你需要添加和修改哪些组件和模块？
