- en: '**CHAPTER 4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GAMES**
  prefs: []
  type: TYPE_NORMAL
- en: You’ve already made some animations and stories. But in this chapter you’ll
    learn how to make games! You’ll make four different small games, and then you’ll
    use everything you’ve learned to make one big game at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 12: PICK A PEACH!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of this game is to find out which of the peaches on the tree is ripe!
    Tap a peach, and if it’s ready, it’ll fall to the ground.
  prefs: []
  type: TYPE_NORMAL
- en: To create this game, we’ll need to give scripts to a peach on the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve already made some animations and stories. But in this chapter you’ll
    learn how to make games! You’ll make four different small games, and then you’ll
    use everything you’ve learned to make one big game at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 12: PICK A PEACH!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of this game is to find out which of the peaches on the tree is ripe!
    Tap a peach, and if it’s ready, it’ll fall to the ground.
  prefs: []
  type: TYPE_NORMAL
- en: To create this game, we’ll need to give scripts to a peach on the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 12: PICK A PEACH!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of this game is to find out which of the peaches on the tree is ripe!
    Tap a peach, and if it’s ready, it’ll fall to the ground.
  prefs: []
  type: TYPE_NORMAL
- en: To create this game, we’ll need to give scripts to a peach on the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this game is to find out which of the peaches on the tree is ripe!
    Tap a peach, and if it’s ready, it’ll fall to the ground.
  prefs: []
  type: TYPE_NORMAL
- en: To create this game, we’ll need to give scripts to a peach on the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: To create this game, we’ll need to give scripts to a peach on the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, you could start all of your scripts by tapping the Green Flag button.
    In this activity, you will learn how to start a script by tapping a character,
    using the Start on Tap block. You will also see how to use the Shrink block, the
    Go Home block, and the Reset Characters button.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select the summer background and delete the cat character. You can see that
    the tree on the left already has some peaches on it, but these are just part of
    the background and they cannot move. To get a peach that will move when we tap
    it, we need to add it to our scene as a character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. To do this, tap the plus sign in the character area and select the peach.
    Drag the peach onto the tree that already has three peaches on it.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. We want to make the peach close to the same size as the other peaches on
    the tree, so tap the purple looks blocks category. Drag the **Shrink** block to
    your peach’s programming area and tap it twice. The first tap will make the peach
    smaller, and the second tap will make it even smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Now the peach is the right size, so you can drag the **Shrink** block back
    to the blocks palette to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the yellow triggering blocks category to show the family of starting
    blocks. This time, instead of using the Start on Green Flag block, we’re going
    to use the Start on Tap block, which brings characters to life when you tap them.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Drag the **Start on Tap** block to the programming area to start the peach’s
    script. Add some blue motion blocks to this triggering block to make the peach
    wiggle and fall from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Try it out! Tap the peach and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do one more thing to make this game easier to play over and over.
    If you tap the peach again after it has fallen to the ground, the peach will start
    its script again but from the ground, not from the tree. The Start on Tap block
    does not return characters to their original positions like the Start on Green
    Flag block does.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: You can return the peach to the tree by tapping the **Reset Characters** button
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset Characters button will return all characters to their home positions.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other characters moving around on the stage and you want only the
    peach to return home, then you might prefer to reset just the peach.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Tap the blue motion blocks category to find the Go Home block.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Drag the **Go Home** block to the end of the peach’s script.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Now the peach will hop back up onto the tree after it has fallen, and you can
    play the game again!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: You might want the script to pause for a couple of seconds before it reaches
    the Go Home block so that the peach doesn’t jump straight back up onto the tree
    as soon as it falls. Use the **Wait** block to make the peach stay on the ground
    for a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: To make the game more interesting, you could add more peaches to the tree. Can
    you make it so that some of the fruit is not ripe enough to fall yet? If the fruit
    is not ripe, maybe it just wiggles on the tree and stays put.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: ADDING TO THE STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Add another character to this scene and create the first page of a story! How
    do the characters react to the falling fruit? Are they surprised? Hungry? Use
    speech bubbles, sound recordings, and the **Add Text** button to incorporate speaking
    and words into your story. You can look back at [Chapters 2](text00008.html#ch02)
    and [3](text00009.html#ch03) if you need help remembering how to do this. Swap
    projects with a friend and complete each other’s stories by adding a new page!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COMPOSING AND COMPARING SHAPES**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have made a falling peach, try creating different types of fruits.
    What shapes do you use? Which fruits are the biggest? Use descriptive words to
    compare and contrast the various shapes and sizes you used.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes difficult for young children to tap a character lightly and
    evenly enough for ScratchJr to interpret the motion as a tap and not a drag. If
    ScratchJr thinks the motion is a drag, it will move the peach slightly instead
    of running the script. If the peach does not wiggle and fall from the tree when
    the child taps it, that’s the likely cause.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 13: BLAST OFF!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, the cat counts down, and then a rocket ship blasts off!
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn how to get the characters to work together, using the Send Message
    and Start on Message blocks. The cat will count down the seconds, and then the
    rocket will blast off!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Start by adding the moon background and the rocket character.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Let’s write the script for the cat first. Tap the cat to return to it. Drag
    a **Start on Green Flag** block to the programming area.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tap the purple looks blocks category and add three **Say** blocks to make
    the cat count “3, 2, 1.”
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Tap the yellow triggering blocks category to find the Send Message block.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Drag the **Send Message** block down to the programming area and snap it
    onto the end of the cat’s script.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: This will tell the rocket when to start. When the cat has finished counting,
    it will send a message for the rocket to receive.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Now, let’s tap the rocket and give it a script. We want to make the rocket
    ship blast off when it receives the message from the cat. Start the script with
    the **Start on Message** block. This script will run when another script sends
    a message.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. After the Start on Message block, add a **Move Up** block to make the rocket
    move up the screen as if it is taking off, and then add a **Hide** block to make
    the rocket disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now, tap the **Green Flag** button to try out the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: This script uses an orange message. You can choose from six different message
    colors to communicate between characters in your project. Just keep in mind that
    your Send Message block has to match the color of your Start on Message block.
    For example, an orange Send Message block will trigger a script that begins with
    an orange Start on Message block, but if you have used a purple Send Message block
    in your project instead, the script that begins with an orange Start on Message
    block will never run!
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Add some more characters and start each of their scripts with a **Start on Message**
    block. You could have a crowd of characters cheer together when the rocket blasts
    off by giving them all the same color Start on Message block.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you could have a shooting star fly across the sky as the rocket is rising.
    Would it start with the same color message as the crowd?
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all scripts that begin with a Start on Message block of the same
    color will start at the same time when a Send Message block of that color is used.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: GETTING READY FOR TAKEOFF**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the countdown begins, program the cat to make an announcement about what
    is going to happen. Use the **Say** block and the **Add Text** button to prepare
    for the rocket’s takeoff. Where is the rocket going? When will it take off?
  prefs: []
  type: TYPE_NORMAL
- en: Add another page after the blastoff to show where the rocket travels!
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: COUNTING BACKWARD**'
  prefs: []
  type: TYPE_NORMAL
- en: Practice counting backward! Your cat is counting down the amount of time until
    the rocket ship will take off into space. When your cat reaches “1,” the rocket
    ship will blast off. After programming the cat to count down from 3, try making
    it count down from 10, 15, and even 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: You can explain the Send Message block as an announcement that one character
    makes to all of the other characters. Only the characters with a Start on Message
    block of the same color as the announcement will listen for the announcement and
    react to it. The rest of the characters will ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 14: PLAY TAG!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Program the cat and the dog to play tag. In this game, the dog’s script will
    start when it is tagged by the cat. Then the dog will tag the cat, and they’ll
    continue to play tag until you stop the program.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity you’ll learn how to use another new starting block: the Start
    on Bump block.'
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: The Start on Bump block starts a character’s script when the character bumps
    into another character.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select the farm background and add the dog. Position the cat and the dog
    on the stage so that they are standing about five steps apart. You can move them
    later on if those positions aren’t quite right when you try out your script.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: The cat will move toward the dog and say “Tag!” Then it will move back and pause
    for 2 seconds to wait for the dog to tag it. We’ll add a **Repeat Forever** block
    to the cat’s script so the cat and the dog will play again and again.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Create the following script for the cat:'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The dog’s script uses the **Start on Bump** block so that it starts when
    the dog is bumped by the cat.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: After the dog is bumped, it will wait 2 seconds to give the cat a chance to
    run away. Then the dog will move to the cat, say “Tag!” and run away.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Create the following script for the dog:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need the Repeat Forever block for the dog, because the Start on Bump
    block will run every time the dog is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tap the **Green Flag** button to watch your characters play tag! Press the
    **Stop** button when you want the game to end.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: If a character is touching another character that has a Start on Bump script,
    the script will keep running until the characters are not touching anymore. For
    example, if you move the cat so close to the dog that they are touching, the dog’s
    Start on Bump script will begin running, and it will continue to run over and
    over again until you move the cat away from the dog.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: See if you can make a game of dodgeball. Add a ball to your project and make
    it move all around the stage with a few different **Start on Green Flag** scripts
    that repeat forever. (See “[Looking for a Challenge?](text00009.html#ch03lev2sec38)
    ” on [page 56](text00009.html#page_56) to see how to use two scripts together
    in the same programming area.) Change the scripts of the cat and the dog so that
    when they are hit by the ball, they say “I’m out!” and then disappear. Add more
    characters to make the game more exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can get your characters to talk and perform actions at the
    same time by using two scripts in the same programming area. Decide which scripts
    should start with a Start on Bump block and which ones should start with a Start
    on Green Flag block.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: CREATING A CONVERSATION BETWEEN FRIENDS**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Say** block to get your cat and dog to talk to each other while they
    play. Use phrases like “I’m going to tag you!” and “You’re it!” in the conversation,
    using capital letters and punctuation marks when needed. How does the game of
    tag end? Does someone give up? Remember to use the **Start on Bump** and **Wait**
    blocks to help time the conversation so it makes sense with the way the characters
    are moving.
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: ESTIMATING**'
  prefs: []
  type: TYPE_NORMAL
- en: To program the perfect game of tag, you will need to estimate what numbers to
    use on the Wait blocks and how many blue motion blocks you need. Try different
    numbers and test them out to see what works best with your program!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity repeats using a combination of the **Repeat Forever** block and
    the **Start on Bump** block. While it might seem like a good idea to give the
    cat a script that has a Start on Bump block just like the dog, this approach won’t
    work!
  prefs: []
  type: TYPE_NORMAL
- en: If both characters have a Start on Bump block, they’ll both be triggered at
    the same time. It doesn’t matter which one is moving or which one is stationary
    when they “bump” into each other. The block will be triggered, and they won’t
    bump again.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACTIVITY 15: GUESS THE ODD ONE OUT!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Create a two-player guessing game to play with your friends and family. In this
    game, all of the animals are moving in a pattern, but one of them is moving slightly
    differently than the others. Each player takes turns guessing which animal is
    the odd one out. If the player chooses the wrong one, the animal will say, “Not
    I!” If the player guesses right, the animal will say, “You got it!” The first
    player to tap the correct animal wins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU’LL LEARN**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn three new things in this activity: how to use the Stop block,
    how to run a project in Presentation Mode, and how to use different triggering
    blocks to start different actions for the same character.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Pick a background. Your animals will need lots of space, so the farm background
    would be one good choice.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add four animals to join the cat on the stage. You’ll program four of the
    five animals to move in the same way and one of them to move differently.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make a script for one animal to have it move around in a square. Add another
    script that makes it say “Not I!” when it is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the same scripts for three other animals so that four of the animals
    have the exact same scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Note that instead of making a new script for each of the animals, you can copy
    a script from one animal to another by simply dragging the script from the programming
    area to the animal in the list of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Change the time on each script’s **Wait** block so that the animals will
    start moving at different times.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Add a script for the odd-one-out animal with an extra **Move Down** block
    to make the animal move slightly differently than the others. Then give it another
    script so that it stops and says “You’re right!” when it is tapped. To make the
    animal stop moving when it’s tapped, tap the orange control blocks category and
    drag a **Stop** block to the end of the animal’s script.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. When you’re finished programming the animals, tap the **Enter Presentation
    Mode** button to hide the programming area so that no one accidentally sees the
    answer in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: The stage will fill the entire screen.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Now you have a game! Tap the **Green Flag** button to get it started, and
    see who can find the odd one out first.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Tap the **Exit Presentation Mode** button to return to the regular ScratchJr
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: When the winning animal is tapped, it stops moving. See if you can make all
    of the other animals also stop moving when the game is won. You will have to use
    a **Send Message** block and give each of the other animals a **Start on Message**
    script that stops its motion.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: WRITING THE GAME DIRECTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: How does the player know the rules of the game? Write step-by-step instructions
    for the player using **Say** blocks or the **Add Text** button. Can you give the
    players hints if they can’t find the correct animal?
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: WRITING YOUR OWN MATH PROBLEMS**'
  prefs: []
  type: TYPE_NORMAL
- en: The game you’ve created has a lot of different motion blocks and Wait blocks.
    Can you come up with a math problem worksheet for this game? You could write problems
    like “How many movements does the pig make?” or “Who is waiting the longest?”
  prefs: []
  type: TYPE_NORMAL
- en: Switch worksheets with a friend and answer each other’s math problems! Don’t
    forget to make an answer sheet and mark each other’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: The Stop block will stop the scripts for only the character that has the Stop
    block, not for any of the other characters. Once a script is stopped, you can
    restart it with the appropriate trigger (tapping the Green Flag, tapping the character,
    sending a message, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT TIME! CATS VERSUS BIRDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, you’ve learned a lot, so now let’s make a really cool game. We’ll make
    a one-player game where the bird must fly past three moving cats and touch the
    mushroom to win.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: When the player taps the bird, it flies toward the mushroom, but if the bird
    touches any of the cats on the way, it has to go back to its starting position.
    If the bird reaches the mushroom safely, the player wins!
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW TO MAKE IT**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Choose a background for your game. The savannah is a good option because
    it has lots of sky for the bird to fly in.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add a mushroom to your project and drag it to the right side of the stage.
    Then add a bird and drag it to the left side of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Now add two more cats and line them up in the middle of the stage so that
    they are not touching any of the other characters.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Program the cats to move upward at different speeds by changing the speed
    in the **Set Speed** block so it is different for each cat. You need to make another
    script to send an orange message when a cat is bumped by the bird so that the
    bird will know it has to go back to the start. Here is an example of our script
    for one cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Program the bird to move forward when it is tapped. Then add a script to
    make it go back to its home position when an orange message is sent because it
    bumped into a cat:'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Program the mushroom to say “You win!” when it is bumped by the bird:'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. To play the game, tap the **Enter Presentation Mode** button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just made a game that uses all the skills you learned in this chapter!
    When you play, your aim is to time the movement of the bird just right so that
    it dodges the moving cats and reaches the mushroom. Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**HINTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the cats don’t touch one another or the mushroom when they move
    around the screen. Bumps between any characters will send the bird back to the
    start, since the Start on Bump scripts are triggered by any bump, not just bumps
    from the bird.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: '**LOOKING FOR A CHALLENGE?**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Change the starting positions and speeds of the cats to make the game harder.
    What other strategies can you use to make this game easier or more difficult?
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
- en: MAKING CONNECTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '**LITERACY CONNECTION: TURNING YOUR GAME INTO A STORY**'
  prefs: []
  type: TYPE_NORMAL
- en: Turn your game into a story! Make an introductory page explaining why the bird
    wants to reach the mushroom. Is there something special about this mushroom?
  prefs: []
  type: TYPE_NORMAL
- en: The second page can be the game, and the third page can be the ending to the
    story and a message to the player. For example, you might write something like
    “Congratulations, you reached the mushroom!”
  prefs: []
  type: TYPE_NORMAL
- en: '**MATH CONNECTION: KEEPING A TALLY**'
  prefs: []
  type: TYPE_NORMAL
- en: Get some friends to play this game with you. Keep a tally of the number of wins
    and losses for each person, and add them up once everyone has had the chance to
    play the same number of times. Did each player get a different result, or did
    every player have the same outcome?
  prefs: []
  type: TYPE_NORMAL
- en: '**TIPS FOR GROWN-UPS**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to tap the bird, a child may sometimes drag the bird instead. This
    will reset the home position of the bird to that new location, which may be in
    the middle of the screen. Then, when the bird bumps into a cat and returns to
    its home position, it will no longer go back to the edge of the stage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, add another character to the project—a star, for example—to
    act as a button; to make the bird move, you only have to tap this star. Place
    the star in the bottom corner of the stage where it will not touch any of the
    other characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The star should send a blue message when it is tapped, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the bird’s scripts so that it no longer moves forward when tapped. Instead,
    it moves forward when it receives the blue message from the star.
  prefs: []
  type: TYPE_NORMAL
- en: If the child drags the star while trying to tap it, that isn’t a problem. The
    home position of the bird will stay the same, and the game can carry on.
  prefs: []
  type: TYPE_NORMAL
