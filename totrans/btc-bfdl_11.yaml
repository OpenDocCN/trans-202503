- en: '**A**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**A**'
- en: '**HELLO MONEY! A SIMPLE JAVASCRIPT PROGRAM**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**HELLO MONEY! 一个简单的 JavaScript 程序**'
- en: One factor that makes Bitcoin so exciting is that *anyone* can write computer
    programs to link directly into the Bitcoin network and perform financial transactions.
    This appendix explains how to write a simple JavaScript program that watches a
    wallet and indicates when bitcoins have been sent to the wallet. In [Appendix
    B](../Text/app02.html#app02), we’ll create some more advanced programs in Java
    that expand on this idea.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使比特币如此令人兴奋的一个因素是*任何人*都可以编写计算机程序，直接链接到比特币网络并执行金融交易。本附录将解释如何编写一个简单的 JavaScript
    程序，监控一个钱包并指示何时比特币已被发送到该钱包。在[附录 B](../Text/app02.html#app02)中，我们将用 Java 创建一些更高级的程序，扩展这一思想。
- en: '**The Meaning of “Easy”**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**“简单” 的含义**'
- en: Writing programs that manipulate money in Bitcoin is easy. However, as we walk
    through this process, it might not seem very easy to you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写操控比特币资金的程序是简单的。然而，当我们走过这个过程时，你可能会发现它并不那么简单。
- en: 'But imagine, instead, if we built our app or service using a traditional e-commerce
    system. Roughly, here’s what those steps would look like:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但试想一下，如果我们使用传统的电子商务系统来构建我们的应用程序或服务。大致上，这些步骤将是这样的：
- en: 1\. Incorporate your business to receive a DUNS^([1](../Text/footnote.html#footnote72))
    number.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 注册你的企业以获取 DUNS^([1](../Text/footnote.html#footnote72)) 编号。
- en: 2\. Get a corporate account at your bank.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 在你的银行开设一个企业账户。
- en: 3\. Have your account verified by a merchant services provider (Intuit, PayPal,
    Stripe, Apple, etc.).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 让你的账户通过商户服务供应商（如 Intuit、PayPal、Stripe、Apple 等）进行验证。
- en: 4\. Set up an account via the provider with your DUNS number to get access keys.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 通过供应商使用你的 DUNS 编号注册账户以获取访问密钥。
- en: 5\. Acquire proprietary library software from the provider (you’ll probably
    need to update this library regularly to maintain your software).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 从供应商处获取专有库软件（你可能需要定期更新此库以维护你的软件）。
- en: 6\. Redirect your customers to a special provider to authorize payments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 将你的客户重定向到一个特殊的供应商授权支付。
- en: 7\. Write your code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 编写你的代码。
- en: 8\. Have your finished app reviewed by the payment provider.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 让支付提供商审核你的完成的应用程序。
- en: 'Here is the main step needed to get a Bitcoin-based, e-commerce system up and
    running:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使基于比特币的电子商务系统启动并运行所需的主要步骤：
- en: 1\. Write your code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 编写你的代码。
- en: Having to complete just this one task is what we mean when we use the term *easy*
    when programming with Bitcoin.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要完成这一项任务，这就是我们在用比特币编程时所说的*简单*。
- en: '**Three Ways to Write Bitcoin Software**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写比特币软件的三种方法**'
- en: 'To write Bitcoin-enabled software, you can use three different approaches:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写启用比特币的软件，你可以使用三种不同的方法：
- en: 1\. Use a merchant service.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 使用商户服务。
- en: 2\. Connect to a local Bitcoin wallet program (typically the original Bitcoin
    wallet application based on Satoshi’s initial code, named bitcoind).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 连接到本地比特币钱包程序（通常是基于中本聪初始代码的原始比特币钱包应用程序，名为 bitcoind）。
- en: 3\. Create a program that inserts itself directly into the Bitcoin network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 创建一个程序，将其直接插入比特币网络。
- en: 'Using approach #1, you would connect to a web API over the Internet. That API
    would be supplied by a third-party company to manage your bitcoins. Companies
    that supply these APIs for sending and receiving bitcoins are typically called
    *merchant services*.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '使用方法 #1，你将通过互联网连接到一个 Web API。这个 API 将由一个第三方公司提供，用于管理你的比特币。提供这些 API 用于发送和接收比特币的公司通常被称为*商户服务*。'
- en: For example, if your website sells widgets and you want people to buy your widgets
    with bitcoins, using a merchant service may be a simple, nofuss way to get your
    website working quickly. An additional benefit of a merchant service is that it
    may also offer services to automatically convert Bitcoin to/from other currencies
    as part of a transaction. Many companies supply these APIs, and BitPay is a common
    choice. But you can find a more extensive list of companies on the official Bitcoin
    foundation website.^([2](../Text/footnote.html#footnote73))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的网站销售小工具，并且你希望人们用比特币购买你的商品，使用商户服务可能是一个简单、快速让你的网站开始工作的方式。商户服务的另一个好处是，它可能还提供自动将比特币与其他货币之间进行转换的服务，作为交易的一部分。许多公司提供这些
    API，BitPay 是一个常见的选择。你也可以在比特币基金会官方网站上找到更多公司的详细列表。^([2](../Text/footnote.html#footnote73))
- en: However, this approach has some drawbacks. First, these vendor APIs arguably
    go against the spirit of Bitcoin, because using an API middleman makes you beholden
    to an external party; serious Bitcoiners prefer to retain 100 percent control
    over their money. Second, these APIs are mostly designed only for common use cases,
    so they don’t allow the flexibility and innovative app development that we want
    to foster with this book. Third, the design of these APIs tends to change frequently,
    making it difficult to provide you with current information. For these reasons,
    we won’t spend much time discussing vendor APIs in this book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法也有一些缺点。首先，这些供应商的 API 可以说违背了比特币的精神，因为使用 API 中介意味着你要依赖外部方；认真对待比特币的人更愿意保持对自己资金的百分之百控制。其次，这些
    API 大多仅为常见用例设计，因此不允许我们想要在本书中推广的灵活性和创新型应用开发。第三，这些 API 的设计经常变动，这使得提供最新信息变得困难。由于这些原因，本书不会花太多时间讨论供应商
    API。
- en: 'Approach #2 involves connecting to a local Bitcoin wallet and basically running
    the wallet on autopilot. Two of the Bitcoin wallet programs based on Satoshi’s
    original code—Bitcoin Core and bitcoind—can be remote-controlled using a special
    protocol called JSON-RPC, as we will discuss shortly. Because these two programs
    are the gold standard in Bitcoin wallets, it is very enticing to utilize them
    for custom programs. Programs written to automate Bitcoin Core and bitcoind are
    easy to understand, and libraries exist in all popular programming languages,
    simplifying their use. You can use this approach in JavaScript, Ruby, PHP, Python,
    and many other languages. Unfortunately, the main drawback of using a local Bitcoin
    wallet program and controlling it from your own code is that this process often
    clunky and inefficient, as you’ll see in the first programming example.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '方法 #2 涉及连接到本地比特币钱包，并基本上让钱包在自动驾驶模式下运行。两款基于中本聪原始代码的比特币钱包程序——Bitcoin Core 和 bitcoind——可以通过一种名为
    JSON-RPC 的特殊协议进行远程控制，正如我们稍后将讨论的那样。由于这两款程序是比特币钱包的黄金标准，因此将它们用于自定义程序非常具有吸引力。为自动化
    Bitcoin Core 和 bitcoind 编写的程序易于理解，并且在所有流行的编程语言中都有相应的库，简化了它们的使用。你可以在 JavaScript、Ruby、PHP、Python
    等多种语言中使用这种方法。不幸的是，使用本地比特币钱包程序并从自己的代码中控制它的主要缺点是，这一过程往往笨重且低效，正如你将在第一个编程示例中看到的那样。'
- en: '**NOTE**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Bitcoin Core and bitcoind share the same code. This common code is called
    the* Bitcoin reference client, *or just* Bitcoin. *It was the first implementation
    of* the *Bitcoin protocol and eventually was split into two variants: Bitcoin
    Core has a friendly graphical interface (UI), and bitcoind is a more stripped-down
    version with a text-based interface.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bitcoin Core 和 bitcoind 共享相同的代码。这个公共代码被称为* 比特币参考客户端， *或简称* 比特币。 *它是比特币协议的首次实现，最终被分为两个变种：Bitcoin
    Core 提供友好的图形界面 (UI)，而 bitcoind 是一个更加简化的版本，采用文本界面。*'
- en: 'Approach #3 involves going right to the metal and inserting your Bitcoin-enabled
    program directly into the Bitcoin network. You can do this in languages such as
    Java, C++, or Go or any language that has a fully implemented Bitcoin client library
    available. This approach is more robust and less resource-intensive than approach
    #2, but it is more technically complex.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '方法 #3 涉及直接进入比特币网络，将你的比特币启用程序直接嵌入到比特币网络中。你可以使用 Java、C++、Go 等语言，或者任何提供完整比特币客户端库的语言来实现这一点。与方法
    #2 相比，这种方法更加稳健且资源消耗较少，但它在技术上更加复杂。'
- en: However, if you’re a programmer who believes in the Bitcoin ethos, being able
    to write an app that is a real *first-class citizen* in the Bitcoin network—a
    true Bitcoin node participating in the Bitcoin system—is motivating. The reason
    is that absolutely no limitations restrict what your app can do (as long as your
    app obeys the rules of the network.) In [Appendix B](../Text/app02.html#app02),
    we’ll write some programs that use this approach.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你是一个相信比特币精神的程序员，能够编写一个真正的*比特币网络第一公民*应用——一个真正参与比特币系统的比特币节点——是一个令人鼓舞的动力。原因在于，绝对没有任何限制会束缚你的应用（只要你的应用遵守网络规则）。在[附录
    B](../Text/app02.html#app02)中，我们将编写一些使用这种方法的程序。
- en: '**General Security Notes on Bitcoin Programming**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**比特币编程的一般安全注意事项**'
- en: 'An important disclaimer we need to mention here is that in this appendix, we’ll
    write programs that send and receive only a few pennies. The techniques and example
    discussed are useful for learning the basic concepts of Bitcoin programming *but
    are in no way appropriate for writing programs that manipulate substantial sums
    of money*. If you plan on writing serious Bitcoin applications, you’ll need to
    do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在这里提到的一个重要免责声明是，在本附录中，我们将编写仅发送和接收少量硬币的程序。所讨论的技术和示例对于学习比特币编程的基本概念非常有用，*但绝不适合编写操作大量资金的程序*。如果你计划编写严肃的比特币应用程序，你需要做以下几点：
- en: 1\. Learn the basic concepts from the sample programs in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 从本章中的示例程序学习基本概念。
- en: 2\. Use this knowledge to study and understand the underlying source code for
    the Bitcoin libraries used in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 利用这些知识学习和理解本章中使用的比特币库的底层源代码。
- en: 3\. Follow the forums used by the developers and other library users to stay
    current with any security risks involved when using these libraries.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 关注开发者和其他库用户使用的论坛，及时了解使用这些库时涉及的安全风险。
- en: Most important, be aware that we’re using community-maintained source code in
    our examples; if a clever black hat hacker^([3](../Text/footnote.html#footnote74))
    manages to insert some rogue code into the official library repositories, *he
    or she can steal all your money*. Even if you understand the library code perfectly,
    you run the risk of jeopardizing the safety of your money. For example, as you’re
    downloading this library code from the Internet, a black hat hacker has many opportunities
    to perform a man-in-the-middle attack^([4](../Text/footnote.html#footnote75))
    and insert rogue code into a doctored version of the library that is incorporated
    into your program. As a result, the hacker can steal all your money.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，要意识到我们在示例中使用的是社区维护的源代码；如果一个聪明的黑帽黑客^([3](../Text/footnote.html#footnote74))设法将恶意代码插入到官方库的存储库中，*他或她可以窃取你所有的钱*。即使你完全理解库的代码，你也面临着危及资金安全的风险。例如，当你从互联网上下载这个库代码时，黑帽黑客有很多机会执行中间人攻击^([4](../Text/footnote.html#footnote75))，并将恶意代码插入到被篡改的库版本中，这个版本会被整合到你的程序中。结果，黑客可以窃取你所有的钱。
- en: Additionally, as mentioned in earlier chapters, hackers can steal your bitcoins
    in many other ways that aren’t specific to Bitcoin programming. In a few years,
    if the current popularity of Bitcoin continues, we suspect most computer viruses
    will include code that immediately empties any Bitcoin wallets they find.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如前几章所提到的，黑客可以通过许多与比特币编程无关的方式窃取你的比特币。如果比特币的当前流行程度持续下去，我们怀疑几年后大多数计算机病毒都会包含立即清空任何找到的比特币钱包的代码。
- en: The bottom line is that you need to understand the grave risks your money might
    be exposed to if you plan on creating more advanced Bitcoin programs; you’ll be
    able to safely protect your money only if you have a comprehensive and firm understanding
    of Bitcoin technology that goes beyond the introduction we give in this chapter.
    Please proceed with caution!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是你需要了解如果计划创建更高级的比特币程序，你的钱可能面临的严重风险；只有在全面且深入理解比特币技术的基础上，你才能安全地保护你的资金，这种理解应该超越本章所给出的介绍。请谨慎行事！
- en: '**Some Upbeat Notes on Bitcoin Security**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于比特币安全的积极提醒**'
- en: 'Now that you’ve endured some fire and brimstone to prevent you from losing
    money, we’ll point out a few facts that should make you feel confident about Bitcoin
    security:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你经历了防止资金损失的一些警示之后，我们将指出一些事实，让你对比特币安全有信心：
- en: • The core Bitcoin network has so far maintained a record of almost perfect
    security. Most of the security risks involved in using bitcoins are due to careless
    acts that people executed on their own computers and could have been avoided.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • 核心比特币网络迄今为止保持了几乎完美的安全记录。使用比特币时大多数安全风险来自用户在自己电脑上执行的不小心操作，这些风险本可以避免。
- en: • Despite the risks we’ve discussed so far in this chapter, established programming
    practices exist that mitigate all of these risks. You will be able to write secure
    Bitcoin software if you study this book, follow general guidelines on secure software
    development, and keep up-to-date on the latest security concerns discussed on
    Bitcoin development forums.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: • 尽管我们在本章讨论了这些风险，但有成熟的编程实践可以缓解所有这些风险。如果你学习本书，遵循安全软件开发的一般准则，并保持更新关于比特币开发论坛上讨论的最新安全问题，你将能够编写安全的比特币软件。
- en: '• As you are learning to write programs that use bitcoins, make sure you use
    a computer that doesn’t contain Bitcoin wallets with substantial amounts of bitcoins
    in them. By doing so, you can learn to write Bitcoin software and avoid any dangers:
    You can’t accidentally lose bitcoins (or have them stolen) on your development
    machine if you store your coins elsewhere.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 在你学习编写使用比特币的程序时，确保使用一台不包含大量比特币的比特币钱包的计算机。通过这样做，你可以在学习编写比特币软件时避免任何危险：如果你把比特币存放在其他地方，你就不可能在开发机器上不小心丢失比特币（或被盗）。
- en: '**Writing Your First Bitcoin Program in JavaScript**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**用 JavaScript 编写你的第一个比特币程序**'
- en: 'By convention, the first program a programmer writes when learning a new technology
    is a *Hello World* program: It’s the simplest program possible in that it just
    prints the message *Hello World!* on the screen. Essentially, it indicates to
    the novice that your initial code seems to be working at the outset.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，程序员学习新技术时编写的第一个程序是*Hello World* 程序：这是最简单的程序，它只是在屏幕上打印出消息*Hello World!*。本质上，它向初学者表明，初始代码似乎正常工作。
- en: 'However, the Bitcoin programs we need to write must perform two main tasks:
    receive money and send money. In this chapter, we’ll focus solely on receiving
    money and write a program called *Hello Money!*. In [Appendix B](../Text/app02.html#app02)
    we’ll write a *Bye-Bye Money* program to send money.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要编写的比特币程序必须执行两个主要任务：接收资金和发送资金。在本章中，我们将专注于接收资金，并编写一个名为*Hello Money!*的程序。在[附录
    B](../Text/app02.html#app02)中，我们将编写一个*Bye-Bye Money*程序来发送资金。
- en: '***Why Use JavaScript?***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为什么使用 JavaScript？***'
- en: 'JavaScript is arguably the most well-known programming language in use today,
    because most developers who build software for the Web must learn it sooner or
    later (it is the only language that can natively run in a standard web browser).
    However, the JavaScript code we create will not run in a web browser: This is
    because web browsers have strong protections called *cross-domain restrictions*
    that shield them against communicating with external programs and websites. These
    restrictions limit what you can do with JavaScript within a web browser, making
    it difficult to interact with any external wallets (which is no surprise, because
    you wouldn’t want your wallet emptied by visiting a malicious website).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 可以说是当今最著名的编程语言，因为大多数为 Web 构建软件的开发者迟早都必须学习它（它是唯一能在标准网页浏览器中原生运行的语言）。然而，我们创建的
    JavaScript 代码并不能在网页浏览器中运行：这是因为网页浏览器有强大的保护机制，称为*跨域限制*，它们防止与外部程序和网站的通信。这些限制限制了在网页浏览器中使用
    JavaScript 的功能，使得与任何外部钱包进行交互变得困难（这也不足为奇，因为你肯定不希望通过访问恶意网站而让钱包被清空）。
- en: However, currently you can also run JavaScript on a server, as is commonly done
    using the Node.js library. When run on a server, no such restrictions apply, and
    we can write simple programs that run in a console and can interact with Bitcoin
    Core and bitcoind.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前你也可以在服务器上运行 JavaScript，就像常见的使用 Node.js 库一样。在服务器上运行时，不受这些限制的影响，我们可以编写在控制台中运行并与
    Bitcoin Core 和 bitcoind 交互的简单程序。
- en: '***Bitcoin Core vs. Bitcoind***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***比特币核心与 Bitcoind***'
- en: As discussed earlier, the programming techniques described in this chapter will
    work with either of the wallet apps, Bitcoin Core or bitcoind. The only substantive
    difference between the two programs is that Bitcoin Core has a graphical UI; basically,
    it is just bitcoind with a frontend attached to it. Because of the friendliness
    of the graphical UI, we’ll use Bitcoin Core for the example in this chapter. However,
    bitcoind is slightly less resource-intensive and can more easily run on computer
    servers via a terminal console. Consequently, it’s best for you to use bitcoind
    if you actually deploy a finished program that uses the concepts in this chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本章描述的编程技术将适用于任何比特币钱包应用，无论是 Bitcoin Core 还是 bitcoind。两者之间唯一实质性的区别是 Bitcoin
    Core 有一个图形用户界面；基本上，它就是附加了前端的 bitcoind。由于图形界面的友好性，我们将在本章的示例中使用 Bitcoin Core。然而，bitcoind
    稍微消耗的资源较少，更容易通过终端控制台在计算机服务器上运行。因此，如果你实际部署一个使用本章概念的已完成程序，最好使用 bitcoind。
- en: '**Preparing Your Machine for JavaScript Bitcoin Programming**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为 JavaScript 比特币编程准备你的机器**'
- en: You’ll need a few tools to ready your machine before you begin programming,
    so let’s get them now. The instructions provided here assume a Windows development
    environment; skip ahead to “[For Mac Hackers](../Text/app01.html#ch00leve1sec147)”
    on [page 219](../Text/app01.html#page_219) or “[For Linux Folks](../Text/app01.html#ch00leve1sec148)”
    on [page 219](../Text/app01.html#page_219) if you’re using either of those platforms.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编程之前，你需要一些工具来准备你的机器，所以让我们现在就安装它们。本教程提供的说明假定你使用的是 Windows 开发环境；如果你使用的是 Mac
    或 Linux 平台，请跳到 [第 219 页](../Text/app01.html#page_219)的 “[For Mac Hackers](../Text/app01.html#ch00leve1sec147)”
    或 “[For Linux Folks](../Text/app01.html#ch00leve1sec148)” 部分。
- en: '***Installing Node.js***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 Node.js***'
- en: You first need to download an installer for Node.js from the *[http://nodejs.org/](http://nodejs.org/)*
    website. When you run the installer for Node.js, it will also install the Node
    Package Manager (npm) that we’ll rely on next.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要从 *[http://nodejs.org/](http://nodejs.org/)* 网站下载 Node.js 的安装程序。当你运行 Node.js
    安装程序时，它还会安装我们接下来将依赖的 Node 包管理器（npm）。
- en: '***Installing node-bitcoin***'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 node-bitcoin***'
- en: Now you’ll need a JavaScript library that connects to Bitcoin Core and bitcoind.
    We’ll use the node-bitcoin library. To install node-bitcoin, go to a command prompt
    and enter `**npm install bitcoin**`. This command invokes the (previously installed)
    Node Package Manager, which downloads everything in the library in a simple step.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要一个 JavaScript 库，它可以连接到 Bitcoin Core 和 bitcoind。我们将使用 node-bitcoin 库。要安装
    node-bitcoin，请打开命令提示符并输入 `**npm install bitcoin**`。这个命令将调用（先前安装的）Node 包管理器，它会在一个简单的步骤中下载库中的所有内容。
- en: '***Starting Bitcoin Core***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***启动 Bitcoin Core***'
- en: If you haven’t already, download Bitcoin Core from its official website at *[http://bitcoin.org/en/download](http://bitcoin.org/en/download)*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载 Bitcoin Core，可以从其官方网站 *[http://bitcoin.org/en/download](http://bitcoin.org/en/download)*
    下载。
- en: Next, you need to fire up Bitcoin Core in server mode. The wallet app will open
    an extra socket that we’ll use to connect to the wallet from our JavaScript program.
    To do this on Mac and Linux machines, go to the Bitcoin Core installation directory
    from the console and run `**./Bitcoin-Qt -server**`. On Windows machines, open
    a command prompt, go to the *C:\Program Files (x86)\Bitcoin* directory, and enter
    `**bitcoin-qt.exe -server**`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要以服务器模式启动 Bitcoin Core。钱包应用程序将打开一个额外的套接字，我们将使用这个套接字从 JavaScript 程序连接到钱包。要在
    Mac 和 Linux 机器上执行此操作，请从控制台进入 Bitcoin Core 安装目录并运行 `**./Bitcoin-Qt -server**`。在
    Windows 机器上，打开命令提示符，进入 *C:\Program Files (x86)\Bitcoin* 目录，并输入 `**bitcoin-qt.exe
    -server**`。
- en: The first time you run Bitcoin Core in server mode, it will ask you to create
    a file named *bitcoin.conf* in a specific location and add a user ID and password
    to this file. Follow the directions as suggested because we’ll use the userid
    and password shortly. Then, restart Bitcoin Core.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次以服务器模式运行 Bitcoin Core 时，它会要求你在特定位置创建一个名为 *bitcoin.conf* 的文件，并在该文件中添加一个用户
    ID 和密码。按照提示操作，因为稍后我们将使用这个用户 ID 和密码。然后，重新启动 Bitcoin Core。
- en: If you already have Bitcoin Core (previously called Bitcoin-Qt) installed but
    are following this tutorial for the first time, then you will need to locate your
    previously created *bitcoin.conf* file. For Windows users you might want to look
    in *C:\Users\<username>\AppData\Roaming\Bitcoin\bitcoin.conf*. For Mac users,
    try */Users/<username>/Library/ApplicationSupport/Bitcoin/bitcoin.conf*. For Linux
    users, try */home/<username>/ .bicoin/bitcoin.conf*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Bitcoin Core（之前叫 Bitcoin-Qt），但这是你第一次跟随本教程，那么你需要找到之前创建的 *bitcoin.conf*
    文件。对于 Windows 用户，你可以尝试查找 *C:\Users\<username>\AppData\Roaming\Bitcoin\bitcoin.conf*。对于
    Mac 用户，尝试 * /Users/<username>/Library/ApplicationSupport/Bitcoin/bitcoin.conf*。对于
    Linux 用户，尝试 */home/<username>/.bitcoin/bitcoin.conf*。
- en: '**NOTE**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Gotcha for Windows users: If you try to create the* bitcoin.conf *file with
    Windows Notepad, be aware that Notepad will (oh so helpfully) tack on a .*txt
    *extension, which Windows will also (oh so helpfully) keep completely hidden from
    you for your own protection (a prime example of why most hackers these days try
    to avoid using Windows). To circumvent this problem, put quotes around the name*
    bitcoin.conf *when you enter it into the Save As dialog in Notepad.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*Windows 用户注意：如果你尝试使用 Windows 记事本创建* bitcoin.conf *文件，请注意，记事本（非常“贴心”地）会在文件名后添加一个
    .*txt *扩展名，而 Windows（同样“贴心”地）会完全隐藏这个扩展名以保护你（这是为什么如今大多数黑客都尽量避免使用 Windows 的一个典型例子）。为了解决这个问题，在保存对话框中输入文件名时，把*
    bitcoin.conf *放在引号中。*'
- en: At this point, as is usual for a Bitcoin wallet, Bitcoin Core will take several
    hours downloading the blockchain before it’s ready for the next steps—a perfect
    time for an extended lunch break!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '***For Mac Hackers***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’re using a Mac and are comfortable using a terminal, you can run specific
    commands to automatically search for, download, and install the required programs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac, download homebrew, a command-line tool that will handle the entire
    process for you:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '***For Linux Folks***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you’re using flavors of Debian Linux, such as Ubuntu, you’ll just use the
    PPA feature to install the libraries:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With a working Bitcoin Core server, we’re now ready to start programming.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '**Hello Money!**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, let’s write our first Bitcoin app. Simply type the following complete
    program into a file named *hellomoney.js*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before we start running the app, let’s analyze what the code does line by line.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '***Part 1: Initializing the Connection with Bitcoin Core***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first line indicates that we’re using the node-bitcoin library ➊. Next,
    we establish a connection to the Bitcoin Core server that we set up ➋. Because
    we’ll be running the app on the same machine that Bitcoin Core is installed on,
    our host is set to `'localhost'`. By default, the bitcoin server will run on port
    8332.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Important:** On the next two lines ➌➍, input the user ID and password that
    you entered into the *bitcoin.conf* file. *Replace the placeholders shown here
    with your own.* Then, we create a variable to keep track of the previous balance
    in our program ➎, which we start at zero.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '***Part 2: The Main Loop***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now we’ll write a loop that checks the balance in our wallet and reports to
    us when it has changed. The basic steps follow:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Ask Bitcoin Core for the current balance in its wallet.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 2\. If the balance is higher than the previous balance, print a message, and
    update the previous balance to the current balance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Set a timer that completes the entire procedure again every five seconds.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `mainLoop` function carries out the preceding steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First, the function asks Bitcoin Core for the balance ➊. As we do this, we create
    a *callback function*, which reads `function(err,balance) {}`. A callback function
    is called at some future date. In this instance, it will be called when we receive
    the resulting balance from Bitcoin Core.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’ve never worked with Node.js before, you may need some time to learn
    how to read this type of programming idiom. The philosophy in Node.js is that
    whenever your program has to wait on an external process (in this case the Bitcoin
    Core program), it makes you create callback functions, as opposed to stopping
    the program dead as you wait for a result to arrive. This is called* asynchronous
    programming *and enables your program to do other tasks while waiting for data
    to come in.*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: When the balance becomes available, we first check whether an error has occurred
    and display it if one has ➋. Next, we check whether the new balance is higher
    than the previous balance ➌. If so, we print a message ➍ and update the previous
    balance ➎. Finally, we create a timer that runs every 5000 milliseconds with the
    `setInterval` function to repeatedly call `mainLoop` ➏.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当余额可用时，我们首先检查是否发生了错误，并在发生错误时显示出来 ➋。接着，我们检查新余额是否大于之前的余额 ➌。如果是，我们打印一条消息 ➍ 并更新之前的余额
    ➎。最后，我们创建一个定时器，每隔 5000 毫秒通过 `setInterval` 函数反复调用 `mainLoop` ➏。
- en: '***The Bitcoin Core JSON-RPC API***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***比特币核心 JSON-RPC API***'
- en: The `mainLoop` function operates by *talking* with Bitcoin Core. This talking
    protocol is formatted as JSON-RPC, or JavaScript Object Notation – Remote Procedure
    Call. Simply put, JSON-RPC describes a structure with which two computers (or
    two programs on a single computer) can write messages to each other in a way that’s
    easy for computer programmers to integrate into their code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainLoop` 函数通过与 Bitcoin Core *交互* 来运作。这个交互协议采用 JSON-RPC 格式，即 JavaScript 对象表示法
    – 远程过程调用。简单来说，JSON-RPC 描述了一种结构，允许两台计算机（或单台计算机上的两个程序）以便于计算机程序员集成到代码中的方式相互发送消息。'
- en: In our small app, we use only a single command to communicate with Bitcoin Core—the
    `client.getBalance` function. But many more commands are available that let you
    manipulate Bitcoin addresses, modify the wallet, analyze transactions, and complete
    most other tasks you’d want to do in a Bitcoin program. To learn which functions
    are available in the JSON-RPC interface, browse to the official API function list
    at *[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list)*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的小型应用中，我们仅使用一个命令与 Bitcoin Core 进行通信——`client.getBalance` 函数。但实际上有更多的命令可以让你操作比特币地址、修改钱包、分析交易，并完成你希望在比特币程序中进行的大多数其他任务。要了解
    JSON-RPC 接口中可用的函数，可以访问官方 API 函数列表，链接为 *[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list)*。
- en: '**Running the Hello Money! App**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运行 Hello Money! 程序**'
- en: 'To try out our shiny new `Hello Money!` program, run the following command
    in a console from the directory containing *hellomoney.js*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了试用我们全新的 `Hello Money!` 程序，在包含 *hellomoney.js* 的目录中打开终端并运行以下命令：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, simply send 0.001 bitcoins to the wallet managed by Bitcoin Core from
    another wallet. To do this, you’ll need to use one of the public addresses, which
    you can find by clicking Receive in Bitcoin Core. The way we’ve written the app,
    it will count money that has arrived in your wallet only if it has received a
    confirmation on the blockchain. (In the next section, we’ll write a `Hello Money!`
    program that detects money immediately on arrival, without requiring confirmations.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需从另一个钱包向由 Bitcoin Core 管理的钱包发送 0.001 比特币。为此，你需要使用一个公共地址，你可以通过点击 Bitcoin
    Core 中的“接收”来找到该地址。根据我们编写应用的方式，只有在比特币区块链上收到确认后，应用才会统计到你钱包中的资金。（在下一节中，我们将编写一个 `Hello
    Money!` 程序，它能够在资金到达时立即检测到，而不需要确认。）
- en: 'Because confirmations typically take about 10 minutes, you’ll need to wait
    a bit before you see the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于确认通常需要约 10 分钟，因此你需要稍等片刻才能看到以下内容：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Congratulations! You’ve written a program that can watch a Bitcoin wallet and
    detect when money has been sent to it. If you then send additional money, the
    app will create messages to report on these new deposits as well.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经编写了一个可以监控比特币钱包并检测到资金被发送到其中的程序。如果你接着发送更多的资金，应用将会创建消息来报告这些新存款。
- en: '**Limitations of Writing Bitcoin Programs That Use JSON-RPC**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 JSON-RPC 编写比特币程序的限制**'
- en: By using JSON-RPC, we were able to write a program in JavaScript in no time
    that could report money sent to a Bitcoin wallet. However, if you’re an experienced
    programmer (or have an advanced understanding of the Bitcoin protocol), you’ll
    identify many problems with our example app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 JSON-RPC，我们能迅速编写一个 JavaScript 程序，能够报告比特币钱包中收到的资金。然而，如果你是经验丰富的程序员（或对比特币协议有深入理解），你会发现我们示例应用存在许多问题。
- en: 'One problem is that the app uses *polling* to detect when money has arrived.
    Polling constantly checks the status of Bitcoin Core by interrogating the software
    every five seconds. This process is similar to asking: “Do you have money yet?
    Do you have money now? What about now?” As you might imagine, repeatedly asking
    the same question like this not efficient.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题是，应用程序使用*轮询*来检测钱是否到达。轮询不断地通过每五秒钟询问一次比特币核心的状态。这一过程就像是不断问：“你有钱了吗？现在有钱了吗？现在呢？”正如你想象的那样，反复问同样的问题效率极低。
- en: If you’re writing a production-quality application, it’s therefore best to write
    it using *pushing*. Pushing involves specifying that our app is waiting for money
    and that it would like to be notified when money has arrived. But because of the
    way our connection with Bitcoin Core is set up, enabling pushing is rather difficult.
    After all, Bitcoin Core is primarily meant to be a wallet app in which no pushing
    to external programs is needed. Automating Bitcoin Core with JSON-PRC is a bit
    of a hack, and for this reason, we may run into limitations, such as needing to
    use inefficient polling.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写生产级的应用程序，那么最好使用*推送*方式。推送的方式是指定我们的应用程序在等待资金，并希望在资金到达时得到通知。但由于我们与比特币核心的连接方式，启用推送是相当困难的。毕竟，比特币核心主要是作为一个钱包应用程序，通常不需要推送到外部程序。通过JSON-RPC自动化比特币核心有点像是一个黑客手段，因此我们可能会遇到一些限制，例如需要使用低效的轮询。
- en: '**NOTE**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In more recent versions of Bitcoin Core and bitcoind, a feature called* walletNotify
    *allows for pushing, but the way it works is rather complicated—enough so that
    we recommend you avoid using it. Instead, we would suggest you use BitcoinJ instead
    of Bitcoin Core for pushing, as we will discuss in [Appendix B](../Text/app02.html#app02).*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*在比特币核心和bitcoind的更新版本中，一个叫做* walletNotify *的功能支持推送，但它的工作方式相当复杂——复杂到我们建议你避免使用它。相反，我们建议你使用BitcoinJ来代替比特币核心进行推送，正如我们在[附录B](../Text/app02.html#app02)中将要讨论的那样。*'
- en: Another problem with our app is that we’re just checking a crude *balance* amount
    to determine when money was sent to our wallet. However, the Bitcoin blockchain
    can sometimes trigger situations that cause the balance of a wallet to jump in
    ways that are unexpected and could make our app produce incorrect results.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序的另一个问题是，我们只是检查一个粗略的*余额*数值来判断什么时候钱被发送到了我们的钱包。然而，比特币区块链有时会触发一些情况，导致钱包的余额出现意外的剧烈波动，从而可能使我们的应用程序产生不正确的结果。
- en: For instance, suppose our wallet receives some money with one confirmation,
    but the blockchain suddenly forks, unconfirming the transaction that was tied
    to that money and causing the wallet to suddenly lose much of the confirmed money.
    Then, within the same five-second window, someone sends us more money. In this
    case, the balance in the wallet could actually *decrease*, even though we received
    some new money, and the *Hello Money!* message will never be triggered.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们的钱包收到了带有一个确认的款项，但区块链突然分叉，取消了与这笔钱相关联的交易，导致钱包突然失去大部分已确认的款项。然后，在同一个五秒钟的窗口内，有人又向我们发送了更多的钱。在这种情况下，钱包中的余额实际上可能会*减少*，即使我们收到了新钱，而且*Hello
    Money!*消息也永远不会被触发。
- en: This is a very rare scenario, but if you’re writing an app that manipulates
    large quantities of money, such incorrect behavior is intolerable. The solution
    to this problem is to use `client.listTransactions` (instead of `client.getBalance`).
    Then review these transactions to determine whether any new transactions involved
    sending money to the wallet in the last five seconds, which is what our app is
    looking for. However, this is too complicated to add to our simple `Hello Money!`
    program.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常罕见的场景，但如果你正在编写一个操作大量资金的应用程序，那么这种错误行为是不可容忍的。解决这个问题的方法是使用`client.listTransactions`（而不是`client.getBalance`）。然后查看这些交易，判断在过去五秒内是否有新的交易涉及将钱发送到钱包，这正是我们的应用程序要寻找的内容。然而，这对于我们简单的`Hello
    Money!`程序来说太复杂了。
- en: An additional problem is that Bitcoin Core (and bitcoind) requires large amounts
    of blockchain data and computational resources to run, even though our little
    app doesn’t need most of this power. Is there any way of reducing these resource
    requirements? As you’ll see in [Appendix B](../Text/app02.html#app02), we can
    do this by writing a program that runs directly on the Bitcoin network.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，比特币核心（和bitcoind）需要大量的区块链数据和计算资源来运行，尽管我们的简单应用程序并不需要这些大部分的计算能力。有没有办法减少这些资源需求？正如你将在[附录B](../Text/app02.html#app02)中看到的那样，我们可以通过编写一个直接运行在比特币网络上的程序来实现这一点。
