- en: INTRODUCTION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this book we explore using Racket (a language descended from the Scheme family
    of programming languages—which in turn descended from Lisp) and DrRacket, a graphical
    environment that allows us to make the most of all the features of Racket. One
    of the attractive features of this ecosystem is that it’s equipped with a plethora
    of libraries that cover a wide range of disciplines. The developers describe Racket
    as a system that has “batteries included.” This makes it an ideal platform for
    the interactive investigation of various topics in computer science and mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: Given Racket’s Lisp pedigree, we would be remiss to omit functional programming,
    so we will definitely explore it in this text. Racket is no one-trick pony though,
    so we will also explore imperative, object oriented, and logic programming along
    the way. Also on the computer science front, we will look at various abstract
    computing machines, data structures, and a number of search algorithms as related
    to solving some problems in recreational mathematics. We will finish the book
    by building our own calculator, which will entail lexical analysis using regular
    expressions, defining the grammar using extended Backus–Naur form (EBNF), and
    building a recursive descent parser.
  prefs: []
  type: TYPE_NORMAL
- en: '***Racket***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Racket features extensive and well-written documentation, which includes *Quick:
    An Introduction to Racket with Pictures*, the introductory *Racket Guide*, and
    the thorough *Racket Reference*. Various other toolkits and environments also
    have separate documentation. Within DrRacket these items can be accessed through
    the Help menu.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Racket is available for a wide variety of platforms: Windows, Linux, macOS,
    and Unix. It can be downloaded from the Racket website via the link [*https://download.racket-lang.org/*](https://download.racket-lang.org/).
    Once downloaded, installation simply entails running the downloaded executable
    on Windows, *.dmg* file on macOS, or shell script on Linux. At the time of writing,
    the current version is 7.8\. Examples in the book will run on any version 7.0
    or later. They will likely run on earlier versions as well, but since the current
    version is freely available there is really no need to do so. When the DrRacket
    environment is first launched, the user will be prompted to select a Racket language
    variant. The examples in this book all use the first option in the pop-up dialog
    box (that is, the one that says “The Racket Language”).'
  prefs: []
  type: TYPE_NORMAL
- en: The DrRacket window provides a definitions pane (top pane in [Figure 1](ch00.xhtml#ch00fig1))
    where variables and functions are defined and an interactions pane (bottom pane
    in [Figure 1](ch00.xhtml#ch00fig1)) where Racket code can be interactively executed.
    Within these panes, help is a single keypress away. Just click on any built-in
    function name and press F1.
  prefs: []
  type: TYPE_NORMAL
- en: The definitions window contains all the features one expects from a robust interactive
    development environment (IDE) such as syntax highlighting, variable renaming,
    and an integrated debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Racket enthusiasts are affectionately known as *Racketeers* (catchy, eh?). Once
    you’ve had an opportunity to explore this wonderful environment, don’t be surprised
    if you become a Racketeer yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/00fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1: DrRacket IDE*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Conventions Used in This Book***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: DrRacket supports a number of programming and learning languages. In this book
    we focus exclusively on the default Racket language. Thus, unless otherwise stated,
    all definition files should begin with the line
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Code entered in the definitions section will be shown in a framed box as above.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions entered in the interactive pane will be shown prefixed with a right
    angle bracket `>` as shown below. The angle bracket is DrRacket’s input prompt.
    Outputs will be shown without the angle bracket. To easily differentiate inputs
    and outputs, inputs will be shown in bold in this book (but they are not bold
    in the IDE).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We occasionally make use of some special symbols that DrRacket supports, such
    as the Greek alphabet (for example, we may use *θ* as an identifier for an angle).
    These symbols are listed in Appendix B. The method used to enter these symbols
    is also given there. If you’re typing the examples in by hand and don’t want to
    use the special symbols, simply substitute a name of your choosing: for example
    use `alpha` instead of *α*.'
  prefs: []
  type: TYPE_NORMAL
- en: An example of a program listing entered in the definitions window is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use Wingdings symbols such as ➊ to highlight interesting portions of the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '***Who This Book Is For***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While no prior knowledge of Racket, Lisp, or Scheme is required, it wouldn’t
    hurt to have some basic programming knowledge, but this is certainly not required.
    The mathematical prerequisites will vary. Some topics may be a bit challenging,
    but nothing more than high school algebra and trigonometry is assumed. A theorem
    or two may surface, but the treatment will be informal.
  prefs: []
  type: TYPE_NORMAL
- en: '***About This Book***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’re already familiar with the Racket language, feel free to skip (or perhaps
    just skim) the first couple of chapters as these just provide an introduction
    to the language. These early chapters are by no means a comprehensive encyclopedia
    of Racket functionality. The ambitious reader should consult the excellent Racket
    Documentation for fuller details. Here is a brief description of each chapter’s
    content.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Racket Basics](ch01.xhtml)** Gives the novice Racket user a grounding
    in some of the basic Racket concepts that will be needed to progress through the
    rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Arithmetic and Other Numerical Paraphernalia](ch02.xhtml)** Describes
    Racket’s extensive set of numeric data types: integers, true rational numbers,
    and complex numbers (to name a few). This chapter will make the reader adept at
    using these entities in Racket.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Function Fundamentals](ch03.xhtml)** Introduces Racket’s multi-paradigm
    programming capability. This chapter introduces the reader to both functional
    and imperative programming. The final section will look at a few fun programming
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Plotting, Drawing, and a Bit of Set Theory](ch04.xhtml)** Introduces
    interactive graphics. Most IDEs are textual only; DrRacket has extensive capability
    for generating graphical output in an interactive environment. This chapter will
    show you how it’s done.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: GUI: Getting Users Interested](ch05.xhtml)** Shows how to construct
    mini graphics applications that run in their own window.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Data](ch06.xhtml)** Explores various ways of handling data in
    Racket. It will discuss how to read and write data to and from files on your computer.
    It will also discuss ways to analyze data using statistics and data visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Searching for Answers](ch07.xhtml)** Examines a number of powerful
    search algorithms. These algorithms will be used to solve various problems and
    puzzles in recreational mathematics.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Logic Programming](ch08.xhtml)** Takes a look at another powerful
    programming paradigm. Here we explore using Racket’s Prolog-like logic programming
    library: Racklog.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Computing Machines](ch09.xhtml)** Takes a quick look at various
    abstract computing machines. These simple mechanisms are a gateway into some fairly
    deep concepts in computer science.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: TRAC: The Racket Algebraic Calculator](ch10.xhtml)** Leverages
    skills developed in the previous chapters to build a stand-alone interactive command
    line calculator.'
  prefs: []
  type: TYPE_NORMAL
