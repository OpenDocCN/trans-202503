- en: '**10  STM32F0 SWD Word Leak**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10  STM32F0 SWD 字词泄漏**'
- en: Many microcontrollers allow for some sort of partial locking mode, in which
    a debugger may be attached but code is still protected. On the STM32 family, this
    corresponds to RDP Level 1, where flash memory is disconnected after the debugger
    connects. This chapter describes a vulnerability in the STM32F0 series, in which
    flash memory is disconnected two clock cycles too late. A carefully orchestrated
    debugger can dump one word per connection.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多微控制器允许某种部分锁定模式，在这种模式下，调试器可以附加上去，但代码仍然受到保护。在STM32系列中，这对应于RDP级别1，在此级别下，调试器连接后闪存会被断开。本章描述了STM32F0系列中的一个漏洞，其中闪存断开发生得比预期晚了两个时钟周期。经过精心设计的调试器可以每次连接转储一个字。
- en: This vulnerability was first described at Usenix WOOT, near the end of Obermaier
    and Tatschner (2017).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该漏洞首次在Usenix WOOT上描述，出现在Obermaier和Tatschner（2017）论文的结尾处。
- en: '**The Bug**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**漏洞**'
- en: As we discussed in [Chapter 2](ch02.xhtml#ch02), STM32’s readout device protection
    (RDP) feature has three levels. Level 0 is unprotected, while Level 2 is a total
    JTAG lockout, rejecting all connection attempts. Level 1 is the in-between setting
    that most commercial devices are locked with; it works by disconnecting flash
    memory from the bus when JTAG is connected. The intent was to allow for failure
    analysis or reprogramming, while still preventing extraction of flash memory for
    cloning or reverse engineering.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第2章](ch02.xhtml#ch02)中讨论的，STM32的读出设备保护（RDP）功能有三个级别。级别0是无保护的，而级别2则是完全的JTAG锁定，拒绝所有连接尝试。级别1是大多数商业设备采用的中间设置；它通过在JTAG连接时断开闪存与总线的连接来工作。其目的是允许进行故障分析或重新编程，同时仍然防止提取闪存用于克隆或逆向工程。
- en: 'You can verify this with OpenOCD or another JTAG debugger. The description
    holds: connecting to a locked chip works, but nothing useful can be read from
    flash memory. You can read out RAM, or write something into RAM, but code there
    cannot read or execute code from flash memory.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用OpenOCD或其他JTAG调试器验证这一点。描述是正确的：连接到被锁定的芯片是可行的，但无法从闪存中读取任何有用的信息。你可以读取RAM，或将内容写入RAM，但代码不能从闪存中读取或执行代码。
- en: '![Image](../images/f0106-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0106-01.jpg)'
- en: 'Figure 10.1: STM32F042'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：STM32F042
- en: Obermaier’s unique observation is that most JTAG debuggers perform multiple
    transactions when connecting, and that the *very first* memory access is responsible
    for locking out flash memory, but that the read often completes before the lock
    is applied!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Obermaier的独特观察是，大多数JTAG调试器在连接时执行多个事务，而*第一次*内存访问负责锁定闪存，但该读取操作通常在锁定应用之前就已完成！
- en: Why *often* and not always? The details don’t matter much for exploitation,
    but the original paper makes a convincing argument that it’s some sort of a bus
    contention issue. As a workaround, it seems sufficient to retry after failed accesses,
    and it might help in stubborn situations to add a random delay.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么是*通常*而不是总是？细节对于漏洞利用并不重要，但原文论文做出了有力的论证，认为这是一种总线争用问题。作为一种解决方法，似乎在访问失败后重试是足够的，且在顽固的情况下，添加随机延迟可能会有所帮助。
- en: '**The Exploit**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**漏洞利用**'
- en: Obermaier’s exploit runs as standalone firmware in one STM32, which implements
    the SWD protocol to dump the contents of the target chip. Full source code is
    available, and the following is his function in C to dump one 32-bit word from
    protected memory. SWD is simpler to implement than JTAG, and in this exploit you’ll
    see that the SWD implementation is less than six hundred lines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Obermaier的漏洞利用程序作为独立固件运行在一颗STM32上，它实现了SWD协议来转储目标芯片的内容。完整源代码可用，以下是他用C语言编写的从受保护内存中转储一个32位字的函数。SWD比JTAG更容易实现，在这个漏洞利用中，你会看到SWD的实现不到六百行代码。
- en: Note that the code must reconnect in a new debugging session for every attempt,
    as flash memory becomes disconnected after the read. Because individual attempts
    often fail, it must retry until the transaction succeeds.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每次尝试时，代码必须在新的调试会话中重新连接，因为读取后闪存会被断开。由于单个尝试经常失败，因此必须重试直到事务成功。
- en: '![Image](../images/f0107-01.jpg)![Image](../images/f0108-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0107-01.jpg)![Image](../images/f0108-01.jpg)'
