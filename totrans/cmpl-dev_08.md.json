["```\n$ **npm install mongodb-memory-server mongoose**\n```", "```\nexport declare interface WeatherInterface {\n    zip: string;\n    weather: string;\n    tempC: string;\n    tempF: string;\n    friends: string[];\n}; \n```", "```\nimport {Schema} from \"mongoose\";\nimport {WeatherInterface} from \"./interface\";\n\nexport const WeatherSchema = new Schema<WeatherInterface>({\n    zip: {\n        type: \"String\",\n        required: true,\n    },\n    weather: {\n        type: \"String\",\n        required: true,\n    },\n    tempC: {\n        type: \"String\",\n        required: true,\n    },\n    tempF: {\n        type: \"String\",\n        required: true,\n    },\n    friends: {\n        type: [\"String\"],\n        required: true,\n    },\n}); \n```", "```\nimport mongoose, {model} from \"mongoose\";\nimport {WeatherInterface} from \"./interface\";\nimport {WeatherSchema} from \"./schema\";\n\nexport default mongoose.models.Weather ||\n    model<WeatherInterface>(\"Weather\", WeatherSchema); \n```", "```\nimport mongoose from \"mongoose\";\nimport {MongoMemoryServer} from \"mongodb-memory-server\";\n\nasync function dbConnect(): Promise<any | String> {\n    const mongoServer = await MongoMemoryServer.create();\n    const MONGOIO_URI = mongoServer.getUri();\n    await mongoose.disconnect();\n    await mongoose.connect(MONGOIO_URI, {\n        dbName: \"Weather\"\n    });\n}\n\nexport default dbConnect; \n```", "```\nimport WeatherModel from \"./model\";\nimport {WeatherInterface} from \"./interface\";\n\nexport async function storeDocument(doc: WeatherInterface): Promise<boolean> {\n    try {\n        await WeatherModel.create(doc);\n    } catch (error) {\n        return false;\n    }\n    return true;\n} \n```", "```\nexport async function findByZip(\n    paramZip: string\n): Promise<Array<WeatherInterface> | null> {\n    try {\n        return await WeatherModel.findOne({zip: paramZip});\n    } catch (err) {\n        console.log(err);\n    }\n    return [];\n} \n```", "```\nexport async function updateByZip(\n    paramZip: string,\n    newData: WeatherInterface\n): Promise<boolean> {\n    try {\n        await WeatherModel.updateOne({zip: paramZip}, newData);\n        return true;\n    } catch (err) {\n        console.log(err);\n    }\n    return false;\n} \n```", "```\nexport async function deleteByZip(\n        paramZip: string\n    ): Promise<boolean> {\n    try {\n        await WeatherModel.deleteOne({zip: paramZip});\n        return true;\n    } catch (err) {\n        console.log(err);\n    }\n    return false;\n} \n```", "```\nimport type {NextApiRequest, NextApiResponse} from \"next\";\n**import {findByZip} from \"./../../../../mongoose/weather/services\";**\nimport dbConnect from \"./../../../..//middleware/db-connect\";\n**dbConnect();**\n\nexport default async function handler(\n    req: NextApiRequest,\n    res: NextApiResponse\n): Promise<NextApiResponse<WeatherDetailType> | void> {\n **let data** **= await findByZip(req.query.zipcode as string);**\n    return res.status(200).json(**data**);\n} \n```", "```\nimport mongoose from \"mongoose\";\nimport {MongoMemoryServer} from \"mongodb-memory-server\";\n**import {storeDocument} from** **\"****../mongoose/weather/services****\"****;**\n\nasync function dbConnect(): Promise<any | String> {\n    const mongoServer = await MongoMemoryServer.create();\n    const MONGOIO_URI = mongoServer.getUri();\n    await mongoose.disconnect();\n\n    let db = await mongoose.connect(MONGOIO_URI, {\n        dbName: \"Weather\"\n    });\n\n    **await storeDocument({**\n    **zip:** **\"****96815****\"****,**\n    **weather:** **\"****sunny****\"****,**\n    **tempC:** **\"****25C****\"****,**\n      **tempF:** **\"****70F****\"****,**\n    **    friends: [****\"****96814****\"****,** **\"****96826****\"****]**\n    **});**\n    **await storeDocument({**\n    **zip:** **\"****96814****\"****,**\n    **weather:** **\"****rainy****\"****,**\n    **tempC:** **\"****20C****\"****,**\n    **tempF:** **\"****68F****\"****,**\n    **    friends: [****\"****96815****\"****,** **\"****96826****\"****]**\n    **});**\n    **await storeDocument({**\n        **zip:** **\"****96826****\"****,**\n    **weather:** **\"****rainy****\"****,**\n      **tempC:** **\"****30C****\"****,**\n      **tempF:** **\"****86F****\"****,**\n      **friends: [****\"****96815****\"****,** **\"****96814****\"****]**\n    **});**\n\n}\nexport default dbConnect; \n```", "```\nimport {ApolloServer} from \"@apollo/server\";\nimport {startServerAndCreateNextHandler} from \"@as-integrations/next\";\nimport {resolvers} from \"../../graphql/resolvers\";\nimport {typeDefs} from \"../../graphql/schema\";\nimport {NextApiHandler, NextApiRequest, NextApiResponse} from \"next\";\n**import dbConnect from \"../../middleware/db-connect\";**\n//@ts-ignore\nconst server = new ApolloServer({\n    resolvers,\n    typeDefs\n});\n\nconst handler = startServerAndCreateNextHandler(server);\n\nconst allowCors = (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n        res.setHeader(\"Allow\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (req.method === \"OPTIONS\") {\n            res.status(200).end();\n        }\n        return await fn(req, res);\n    };\n\n**const connectDB =** (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n    **await dbConnect();**\n        return await fn(req, res);\n    };\n\nexport default **connectDB(**allowCors(handler)**)**; \n```", "```\nimport {WeatherInterface} from \"../mongoose/weather/interface\";\n**import {findByZip, updateByZip} from** **\"****../mongoose/weather/services****\"****;**\n\nexport const resolvers = {\n    Query: {\n        weather: async (_: any, param: WeatherInterface) => {\n            let data = **await findByZip(param.zip)**;\n            return [data];\n        },\n    },\n    Mutation: {\n        weather: async (_: any, param: {data: WeatherInterface}) => {\n            **await updateByZip(param.data.zip, param.data**);\n            let data = await findByZip(param.data.zip);\n            return [data];\n        },\n    },\n}; \n```"]