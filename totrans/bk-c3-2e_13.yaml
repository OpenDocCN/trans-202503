- en: '**13**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**13**'
- en: '**3D TRANSFORMATIONS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**3D 变换**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/common-01.jpg)'
- en: All of the features and functions I’ve discussed in this book so far have involved
    two dimensions; every element has height and width, and all of the calculations
    have involved only the *x*-axis and *y*-axis. But with the introduction of the
    *z*-axis in the CSS Transforms Module, CSS3 offers a revolutionary way to transform
    an element in the third dimension (you can learn more at *[http://www.w3.org/TR/css-transforms-1/](http://www.w3.org/TR/css-transforms-1/)*).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我在本书中讨论的所有功能和特性都涉及了二维；每个元素都有高度和宽度，所有的计算仅涉及 *x* 轴和 *y* 轴。但随着 CSS 变换模块中引入
    *z* 轴，CSS3 提供了一种革命性的方法来对元素进行三维变换（你可以在 *[http://www.w3.org/TR/css-transforms-1/](http://www.w3.org/TR/css-transforms-1/)*
    上了解更多）。
- en: At the time I wrote the first edition of this book, only Safari (for Mac and
    iOS) supported 3D transformations, but now just a few years later, stable implementations
    are in place across all major browsers, including IE10 and above—an incredibly
    rapid rate of adoption. At the time of this writing, in Safari, you need to apply
    the `-webkit-` prefix to all properties, but no other browsers have a requirement
    for a vendor prefix.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这本书的第一版时，只有 Safari（适用于 Mac 和 iOS）支持 3D 转换，但现在仅仅几年后，所有主流浏览器都已稳定实现了这一功能，包括
    IE10 及以上版本——这是一个极为快速的采用速度。写这篇文章时，在 Safari 中，你需要对所有属性添加 `-webkit-` 前缀，但其他浏览器没有要求使用厂商前缀。
- en: The work of moving objects around in three dimensions can be quite processor-intensive,
    but most (if not all) browsers have implemented what’s known as *hardware acceleration,*
    performing the required calculations directly on the device’s graphics chip rather
    than in the software of the browser or on the main processor. The result is that
    3D-transformed elements usually animate in a way that’s smoother and more performant
    than other elements that are animated using only JavaScript. This being the case,
    you can go ahead and use 3D transformations in your pages without too much concern.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在三维空间中移动物体的工作可能非常消耗处理器资源，但大多数（如果不是所有的话）浏览器已经实现了所谓的 *硬件加速*，直接在设备的图形芯片上进行所需的计算，而不是在浏览器的软件中或主处理器上进行。这意味着，3D
    变换的元素通常比仅使用 JavaScript 动画的其他元素更平滑、性能更好。鉴于此，你可以放心地在页面中使用 3D 变换，而不必太过担心。
- en: '**3D Elements in CSS**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**CSS 中的 3D 元素**'
- en: Three-dimensional objects in CSS are based on the *Cartesian coordinate system*,
    which is illustrated in [Figure 13-1](ch13.html#ch13fig1). You can read about
    it on Wikipedia (*[http://en.wikipedia.org/wiki/Cartesian_coordinate_system/](http://en.wikipedia.org/wiki/Cartesian_coordinate_system/)*).
    I discussed the two-dimensional version of this system in [Chapter 6](ch06.html#ch06).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 中的三维对象基于 *笛卡尔坐标系*，如 [图 13-1](ch13.html#ch13fig1) 所示。你可以在 Wikipedia 上了解更多
    (*[http://en.wikipedia.org/wiki/Cartesian_coordinate_system/](http://en.wikipedia.org/wiki/Cartesian_coordinate_system/)*)。我在
    [第 6 章](ch06.html#ch06) 中讨论了该系统的二维版本。
- en: '![Image](graphics/f13-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f13-01.jpg)'
- en: '*Figure 13-1: The Cartesian coordinate system, with the axes* x, y*, and* z*^([1](footnote.html#footnote6))*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-1：笛卡尔坐标系，包含轴* x、y* 和 *z*^([1](footnote.html#footnote6))*'
- en: '**NOTE**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you have experience using three-dimensional computer graphics programs,
    you should be familiar with the calculations and terminology used in this chapter.
    If not, don’t worry; I’ll do my best to explain it all as I go along.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你有使用三维计算机图形程序的经验，你应该熟悉本章中使用的计算方法和术语。如果没有，不用担心；我会尽力在过程中解释清楚所有内容。*'
- en: 'In CSS, the *z*-axis is based on the viewer: If you think of the *x*-axis as
    left to right and the *y*-axis as up and down, then think of the *z*-axis as toward
    and away. When you move an element along the *z*-axis by a positive value, you
    move it toward yourself; likewise, moving it by a negative value moves it away
    from you. You can change this somewhat by using different perspectives, which
    I’ll explain in due course.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，*z* 轴是基于观察者的：如果你把 *x* 轴想象为左右，*y* 轴想象为上下，那么 *z* 轴就是朝向或远离观察者。当你通过正值沿 *z*
    轴移动一个元素时，元素会向你靠近；同样，使用负值则会将其推离你。你可以通过使用不同的视角来稍微改变这一点，稍后我会详细解释。
- en: I must point out that, although I’ll talk a lot about 3D in this chapter, I’m
    only referring to 3D coordinates. The elements themselves are still two-dimensional;
    they only have height and width. They are moved around in three-dimensional space,
    however, like moving a piece of paper around in the air.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须指出，尽管本章会讲很多关于3D的内容，但我所指的仅仅是三维坐标。元素本身仍然是二维的，它们只有高度和宽度。然而，它们在三维空间中被移动，就像把一张纸在空气中移动一样。
- en: Illustrating three-dimensional transformation concepts on the printed page is
    quite hard, so I strongly suggest you take a look at the examples on the website
    that accompanies this book (*[http:/www.thebookofcss3.com/](http://www.thebookofcss3.com/)*);
    I’ve added transition rules to some of the examples so they animate when you interact
    with them, showing more clearly the three-dimensional effects that are difficult
    to convey in a two-dimensional book. These examples should aid your understanding
    of some of the techniques used in this chapter. I also recommend the test page
    put together by the team at Westciv (*[http://www.westciv.com/tools/3Dtransforms/](http://www.westciv.com/tools/3Dtransforms/)*).
    This site allows you to try out different combinations of transformation values
    to see the effect they have on elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在印刷页面上展示三维变换概念相当困难，因此我强烈建议你查看本书附带的网站上的示例（*[http:/www.thebookofcss3.com/](http://www.thebookofcss3.com/)*）；我已经为其中一些示例添加了过渡规则，让它们在交互时自动动画，从而更清晰地展示那些在二维书籍中难以呈现的三维效果。这些示例应该有助于你理解本章中使用的一些技巧。我还推荐由Westciv团队整理的测试页面（*[http://www.westciv.com/tools/3Dtransforms/](http://www.westciv.com/tools/3Dtransforms/)*）。这个网站允许你尝试不同的变换值组合，看看它们对元素的影响。
- en: 'Before I introduce the new and extended transformation properties, a quick
    note about the examples being used in this chapter. Although each example may
    employ different classes to apply unique style rules, all of the examples use
    the same basic markup:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我介绍新的和扩展的变换属性之前，先简要说明一下本章使用的示例。尽管每个示例可能使用不同的类来应用独特的样式规则，但所有示例都使用相同的基本标记：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Most of the transformation work is performed on the *.d3-child* element, although
    a few properties must be applied to a parent, which is why I also have the *.d3-parent*
    element. I’ll be clear about whether properties are applied to parents or children
    as I go through the chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分变换工作是在*.d3-child*元素上执行的，尽管有些属性必须应用于父元素，这就是为什么我还需要*.d3-parent*元素。我会在本章讲解时明确说明哪些属性应用于父元素，哪些应用于子元素。
- en: '**The Transformation Functions**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**变换函数**'
- en: In [Chapter 12](ch12.html#ch12), I introduced the `transform` property and its
    associated functions, for use in two-dimensional transformations. Three-dimensional
    transformations use the same property and many of the same functions, but also
    extend some of those functions and add some entirely new ones. I’ll explain each
    of the transformation functions in turn and note whether they are completely new
    or extend the existing 2D transformation properties that I have already discussed.
    Note that the `transform` property is always applied to the child element (*.d3-child*
    in the example markup).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](ch12.html#ch12)中，我介绍了`transform`属性及其相关函数，用于二维变换。三维变换使用相同的属性和许多相同的函数，但也扩展了一些现有函数，并增加了一些全新的函数。我将逐一解释每个变换函数，并指出它们是全新的，还是扩展了我已经讨论过的二维变换属性。请注意，`transform`属性始终应用于子元素（在示例标记中为*.d3-child*）。
- en: '***Rotation Around an Axis***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***围绕轴的旋转***'
- en: I’ll begin explaining the 3D transformation functions as I did the 2D functions—with
    rotation. Two-dimensional space has only one axis to rotate around, so the `rotate()`
    function requires only a single value. But when you’re dealing with three dimensions,
    you’ve got three axes to rotate around and, therefore, three properties to control
    this.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将像解释二维函数一样解释三维变换函数——从旋转开始。二维空间只有一个轴来旋转，因此`rotate()`函数只需要一个值。但是当你处理三维空间时，你有三个轴可以旋转，因此需要控制三个属性来实现旋转。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Like the `rotate()` function, each of the functions accepts a single angle
    value (negative values are permitted). I use the `deg` (degrees) unit in my examples
    and demonstrate how each of these works by showing the same degree of rotation
    around each axis using the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 像`rotate()`函数一样，每个函数接受一个单一的角度值（允许负值）。我在示例中使用`deg`（度）单位，并通过以下代码展示如何在每个轴上使用相同的旋转角度：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see the results in [Figure 13-2](ch13.html#ch13fig2). The first example
    (➊) shows an element rotated around the *x*-axis. To understand what’s happening
    here, imagine a line running horizontally across the center of the element; the
    half of the element above the line is inclined 45 degrees away from you, and the
    half below the line is inclined 45 degrees toward you. The next example (➋) applies
    the rotation on the *y*-axis. Imagine a vertical line running down the center
    of the box; the half of the element to the left of the line is inclined 45 degrees
    toward you and the half on the right, 45 degrees away. The final example (➌) shows
    the same rotation again, but this time around the *z*-axis, which has the same
    effect as the two-dimensional `rotate()` function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [图 13-2](ch13.html#ch13fig2) 中看到结果。第一个示例（➊）展示了围绕 *x* 轴旋转的元素。为了理解这里发生了什么，想象有一条横向穿过元素中心的线；元素上半部分相对于这条线倾斜
    45 度远离你，下半部分则相对于这条线倾斜 45 度朝向你。下一个示例（➋）是在 *y* 轴上进行旋转。想象有一条纵向穿过盒子中心的线；线左侧的元素部分向你倾斜
    45 度，右侧部分则远离你倾斜 45 度。最后一个示例（➌）则是在 *z* 轴上进行旋转，这与二维的 `rotate()` 函数效果相同。
- en: '![Image](graphics/f13-02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-02.jpg)'
- en: '*Figure 13-2: A rotation of 45 degrees around each of the three axes*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-2：围绕三个轴各旋转 45 度*'
- en: 'If you want to rotate an element around more than one axis, you can apply multiple
    functions to an element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让一个元素围绕多个轴进行旋转，可以对元素应用多个函数：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another new function—`rotate3d()`—also allows you to rotate an element around
    multiple axes; however, it’s not a shorthand function. Here’s the syntax:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新功能——`rotate3d()`——也允许你围绕多个轴旋转一个元素；然而，它并不是一个简写函数。下面是语法：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `*angle*` value is straightforward, but the `*x*`, `*y*`, and `*z*` values
    are not quite so simple. Each takes a number value, which is used to calculate
    a direction vector (the full explanation of which is beyond the scope of this
    book; visit *[http://mathworld.wolfram.com/CartesianCoordinates.html](http://mathworld.wolfram.com/CartesianCoordinates.html)*
    for an overview of the topic). The origin of the vector is the point where all
    the axes meet—by default, the center of the element—represented by the values
    `0,0,0`. A direction vector is a line in three-dimensional space, going from the
    origin to the coordinates given by the `*x,y,z*` values provided to the `rotate3d()`
    function. The element will be rotated around this line by the amount specified
    in the `*angle*` value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`*angle*` 值比较简单，但 `*x*`、`*y*` 和 `*z*` 值就没有那么简单了。每个值都需要一个数字，用来计算一个方向向量（其完整解释超出了本书的范围；你可以访问
    *[http://mathworld.wolfram.com/CartesianCoordinates.html](http://mathworld.wolfram.com/CartesianCoordinates.html)*
    了解相关概述）。向量的原点是所有轴交汇的点——默认为元素的中心——用 `0,0,0` 表示。方向向量是三维空间中的一条线，从原点到由 `*x, y, z*`
    值指定的坐标。元素将围绕这条线进行旋转，旋转的角度由 `*angle*` 值指定。'
- en: 'This subject is quite complex, so I’ll explain by showing a few simple examples,
    once again with the same 45 degrees of rotation, using the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题比较复杂，所以我将通过几个简单的示例来解释，再次使用相同的 45 度旋转，代码如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see the output in [Figure 13-3](ch13.html#ch13fig3). The first (left)
    example (➊) has the values `1,1,0`, meaning the imaginary line goes to a point
    1px along the *x*-axis and *y*-axis. (In fact, the “line” continues past that
    point in the same direction; the values `10,10,0` or `1000,1000,0` would produce
    the same results.) The element is rotated 45 degrees around that line. The second
    (middle) example (➋) has the values `1,0,1`, creating a point 1px along the *x*-axis
    and *y*-axis and rotating the element by 45 degrees around that line. The final
    example (➌), shown on the right, has the values `0,10,10`, so the element rotates
    15 degrees around a line between the origin and a point 10px along the *y*-axis
    and *z*-axis. Remember that any two equal values would have the same effect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [图 13-3](ch13.html#ch13fig3) 中看到输出。第一个（左侧）示例（➊）的值为 `1,1,0`，意味着假想的线段指向 *x*
    轴和 *y* 轴上各 1px 的位置。（实际上，“线”会沿着这个方向继续延伸；如果值是 `10,10,0` 或 `1000,1000,0`，也会产生相同的效果。）该元素围绕这条线旋转了
    45 度。第二个（中间）示例（➋）的值为 `1,0,1`，在 *x* 轴和 *y* 轴上创建了一个 1px 的点，并围绕这条线旋转了 45 度。最后一个示例（➌），位于右侧，值为
    `0,10,10`，因此元素围绕原点和 *y* 轴与 *z* 轴交点之间的线旋转了 15 度。记住，任何两个相同的值都会产生相同的效果。
- en: '![Image](graphics/f13-03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-03.jpg)'
- en: '*Figure 13-3: Rotation using directional vectors with the* `*rotate3d*` *function*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-3：使用方向向量与* `*rotate3d*` *函数进行旋转*'
- en: You probably won’t use the `rotate3d()` function often when coding pure CSS
    transformations as the calculations involved are quite complex. But when combined
    with the mathematical processing capabilities of JavaScript, the flexibility of
    this approach could really come into its own.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '***Perspective***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The next function, `perspective()`, is actually one of the most important as
    it creates an artificial viewpoint from where you view the object in three-dimensional
    space, providing the illusion of depth. If not specified, the element will appear
    “flat” to the viewer, regardless of any other transform functions applied (unless
    perspective is inherited from the parent; see “[The `perspective` and `perspective-origin`
    Properties](ch13.html#ch13leve1sec157)” on [page 159](ch13.html#page_159) for
    details). Here’s the syntax:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The value `*depth*` is either a length unit or the default keyword `none`. This
    length sets a “viewpoint” at that distance along the *z*-axis away from the element’s
    origin (`*z*` = 0). A low depth value—say, 50px—will make the element appear extremely
    close to the viewer, with exaggerated dimensions; a value of around 1000px can
    be considered “normal.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'The `perspective()` function is probably easier to show than to describe. In
    the next example, I use different values for the function to show you how various
    values change the viewers … er, perspective. Here’s the code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**WARNING** *The* `*perspective()*` *function must always be listed first when
    using multiple functions on the* `*transform*` *property; if listed after other
    functions, it will be ignored.*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: You can see the results of the code in [Figure 13-4](ch13.html#ch13fig4). In
    the example on the left (➊), the element is viewed from a `perspective()` distance
    of 1000px. This is, as I said, the “normal” distance; the element is rotated around
    two axes but appears to be correctly proportioned. In the middle example (➋),
    the `perspective()` value has decreased to 250px, making the element appear exaggerated
    in proportion as I placed the viewpoint closer to the element. The final (right)
    example (➌) shows the element from a `perspective()` value of 150px, which means
    you are effectively viewing it from 150px along the *z*-axis, making the element
    appear quite exaggerated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f13-04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-4: The effects of different* `*perspective()*` *function values*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Before I move on, I want to make a slight digression. You may be wondering why
    the code contains so much repetition; why couldn’t I have done something like
    this instead?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The reason is if I don’t specify a function, its value is presumed to be the
    default, so the values I set in the functions on the `h1` element are effectively
    overwritten by (the absence of) the functions in the subsequent styles. I explained
    this in [Chapter 12](ch12.html#ch12) in the section “[An Important Note About
    Transformation Functions](ch12.html#ch12leve1sec146).”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '***Translation Along the Axis***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `translateX()` and `translateY()` functions (and their shorthand, `translate()`)
    are used to move an element along its axis by a specified length in two dimensions,
    but the move into a third dimension requires a new function: `translateZ()`. The
    syntax is identical to its sibling properties:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `*length*` value is any number with a unit of length. For example, to move
    an element 30px along the *z*-axis (toward the viewer), use this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that you’ve met the new functions, let’s see them at work. In the following
    example, I show two elements that are styled identically but for different values
    for the `translateZ()` function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see the results in [Figure 13-5](ch13.html#ch13fig5)—note that I’ve
    angled the parent elements slightly and also made the elements transparent so
    you can more easily see the effect. In the first example (➊, on the left), the
    `translateZ()` function has a value of −40px, moving it negatively along the *z*-axis
    and making it appear smaller than its parent. The next (➋, on the right) has a
    value of 40px for `translateZ()`, moving it positively by that amount along the
    *z*-axis and making it appear larger.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '*This concept is much easier to grasp when you see the elements animated, so
    I once more encourage you to look at the accompanying example files to get a better
    feel for the way these functions behave.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f13-05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13-5: Translation in different directions along the* z*-axis*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'A shorthand function, `translate3d()`, is also available. This shorthand allows
    you to set all three values simultaneously. The syntax is a logical extension
    of the `translate()` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Each of the arguments is equivalent to the named function, so each accepts
    a numerical value, positive or negative, with a CSS length unit or percentage,
    as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '***Scaling***'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I also introduced the `scale()` function, along with the subfunctions `scaleX()`
    and `scaleY()`, in [Chapter 12](ch12.html#ch12). The move to three dimensions
    adds a new sub-function, `scaleZ()`, which has this syntax:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with its siblings, the `*number*` value provides a factor to scale the element
    by, so a value of 2 doubles the element’s size along the *z*-axis. The resulting
    behavior is probably not what you’d expect, however; the element itself has no
    depth, if you recall, so an increase in `scaleZ()` by itself doesn’t seem to change
    the element. What the increase actually does is act as a multiplier to any value
    that’s supplied to `translateZ()`. For example, consider this code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `scaleZ()` function’s value of 3 multiplies the `translateZ` function’s
    value of 10px, so the element appears 30px (3 × 10px) along the *z*-axis.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to `scaleZ()`, a new shorthand function, `scale3d()`, has also
    been added. Here is its syntax:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As should be fairly clear, this shorthand simply accepts a number for each
    of the values, acting as a scaling factor on the pertinent axis. Here is a pair
    of examples to show you 3D scaling in action:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The results appear in [Figure 13-6](ch13.html#ch13fig6). The first (left) example
    (➊) shows an element with a `translateZ()` value of −10px and a `scaleZ()` value
    of 2.5; as I mentioned, `scaleZ()` acts as a multiplier of `translateZ()`, so
    the element moves 25px negatively along the *z*-axis. In the second example (➋),
    I used the `scale3d` function to set values of 1.25 on the *x*-axis and *y*-axis
    and `4` on the *z*-axis. The resulting element, shown on the right, is 25 percent
    larger on the two-dimensional axes, and the `scaleZ()` value multiplies the `translateZ()`
    value of 10px to move the element 40px along the *z*-axis.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在[图13-6](ch13.html#ch13fig6)中。第一个（左边）示例（➊）展示了一个`translateZ()`值为−10px且`scaleZ()`值为2.5的元素；如我所提到的，`scaleZ()`是`translateZ()`的倍数，因此该元素沿*z*轴负向移动了25px。在第二个示例（➋）中，我使用了`scale3d`函数将*x*轴和*y*轴的值设置为1.25，将*z*轴的值设置为4。结果的元素如右图所示，在二维轴上大了25％，而`scaleZ()`值则将`translateZ()`的10px值放大，导致元素沿*z*轴移动了40px。
- en: '![Image](graphics/f13-06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图像](graphics/f13-06.jpg)'
- en: '*Figure 13-6: Scaling on different and multiple axes*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-6：在不同和多个轴上的缩放*'
- en: '***The Transformation Matrix***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***变换矩阵***'
- en: 'One of the more esoteric aspects of 2D transformations that I introduced in
    [Chapter 12](ch12.html#ch12) is the `matrix()` function. This function allows
    you to apply complex transformations using six values (based around a grid pattern)
    and some trigonometric calculations. You can also apply 3D transformations using
    a matrix with the `matrix3d()` function. But if you thought the 2D matrix was
    hard to grasp, you might want to skip this one—`matrix3d()` has a whopping 16
    values! Here’s the syntax:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第12章](ch12.html#ch12)中介绍了2D变换的一些较为深奥的方面，其中之一就是`matrix()`函数。这个函数允许你使用六个值（基于网格模式）和一些三角函数计算来应用复杂的变换。你还可以使用`matrix3d()`函数应用3D变换。但如果你觉得2D矩阵难以理解，可能需要跳过这个—`matrix3d()`有多达16个值！以下是语法：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**NOTE**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The line breaks are shown here for clarity; you don’t need to use them in
    practice.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*这里显示了换行符以便于理解；实际使用中你不需要使用它们。*'
- en: Each of the `*m*` values is a number, but I can’t even begin to explain what
    each of them does! I suggest you read an introduction to the subject (*[http://dev.opera.com/articles/understanding-the-css-transforms-matrix/](http://dev.opera.com/articles/understanding-the-css-transforms-matrix/)*
    is a good place to start) and decide if this is something you want to learn more
    about.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个`*m*`值都是一个数字，但我甚至无法开始解释它们每个的作用！我建议你先阅读相关的入门介绍（*比如[http://dev.opera.com/articles/understanding-the-css-transforms-matrix/](http://dev.opera.com/articles/understanding-the-css-transforms-matrix/)*是一个不错的起点），然后决定这是否是你想深入了解的内容。
- en: 'Here, I provide some simple examples using this code to demonstrate the functionality:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我提供了一些简单的示例，使用这些代码来展示其功能：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can see the results in [Figure 13-7](ch13.html#ch13fig7). The first (left)
    example (➊) shows the element moved 10px along each axis with the equivalent of
    the `translate3d()` function—the `*m13*`, `*m14*`, and `*m15*` values in the matrix
    operate as `translateX()`, `translateY()`, and `translateZ()`, respectively. In
    the second example (➋), I scaled the image by a factor of 1.5 on the *x*-axis
    and *y*-axis (the `*m1*` and `*m6*` values) and by a factor of 2 on the *z*-axis
    (the `*m11*` value), which multiplies the `translateZ()` value (`*m15*`) to move
    the element 20px along the *z*-axis, as shown in the middle example. The final
    example (➌) requires a scientific calculator for some trigonometric functions,
    as I’ve rotated the element by 15 degrees on the *z*-axis. To create the rotation,
    you need to give a value of cos(15)—which is 0.96—to `*m1*` and `*m6*` and then
    sin(15)—that is, 0.26—to `*m5*` and negative sin(15) to `*m2*`. I also translated
    the element by 10px on the *x*-axis with the value in `*m13*`. You can view the
    result on the right in the figure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图13-7](ch13.html#ch13fig7)中看到结果。第一个（左边）示例（➊）展示了元素在每个轴上移动了10px，相当于`translate3d()`函数的效果——矩阵中的`*m13*`、`*m14*`和`*m15*`值分别代表`translateX()`、`translateY()`和`translateZ()`。在第二个示例（➋）中，我将图像在*x*轴和*y*轴上按1.5倍放大（`*m1*`和`*m6*`值），在*z*轴上按2倍放大（`*m11*`值），这会将`translateZ()`的值（`*m15*`）放大，导致元素沿*z*轴移动20px，如中间示例所示。最后一个示例（➌）需要使用科学计算器来处理一些三角函数，因为我将元素在*z*轴上旋转了15度。要创建旋转，你需要给`*m1*`和`*m6*`赋值为cos(15)，即0.96，然后将sin(15)，即0.26，赋给`*m5*`，负的sin(15)赋给`*m2*`。我还通过在`*m13*`中使用值将元素沿*x*轴平移了10px。你可以在右侧的图中查看结果。
- en: '![Image](graphics/f13-07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图像](graphics/f13-07.jpg)'
- en: '*Figure 13-7: Transformations applied with the* `*matrix3d()*` *function*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-7：使用`*matrix3d()*`函数应用的变换*'
- en: As I’m sure you can see, this function is quite powerful—and quite complex.
    Whether you want to learn the full potential of `matrix3d()` depends largely on
    you and your projects, but I feel it’s beyond the scope of this book. Don’t forget
    you can perform all of these transformations with the individual functions; you’ll
    end up with more code, but it will be easier to understand—not only for yourself
    but also for anyone tasked with maintaining the website after you!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个函数功能非常强大——也相当复杂。你是否想深入了解`matrix3d()`的全部潜力，很大程度上取决于你和你的项目，但我认为这超出了本书的范围。别忘了，你可以通过单独的函数执行所有这些变换；虽然最终代码会更多，但它会更容易理解——不仅对你自己，对后续维护你网站的任何人也更容易理解！
- en: '**The perspective and perspective-origin Properties**'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**perspective 和 perspective-origin 属性**'
- en: 'Earlier in the chapter, I introduced the `perspective()` transformation function,
    but a `perspective` property is also available. The syntax is pretty straightforward:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章早些时候，我介绍了`perspective()`变换函数，但`perspective`属性也是可用的。其语法相当简单：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The property operates in the same way as the function: The `*depth*` value
    is a length unit that sets the distance from the element’s origin, *z* = 0\. In
    fact, the only difference between the function and the property is that the value
    supplied to the property applies only to its child elements, not to itself.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性的操作方式与函数相同：`*depth*`值是一个长度单位，用于设置元素原点与*z* = 0之间的距离。实际上，函数与属性之间唯一的区别是，属性所提供的值仅适用于其子元素，而不适用于元素本身。
- en: 'The companion property of `perspective` is `perspective-origin`. This property
    sets the point in 3D space from which you view the element. Here’s the syntax:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`perspective`的伴随属性是`perspective-origin`。该属性设置在3D空间中查看元素的点。以下是语法：'
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `*x-position*` value can be any one of the keywords—`left`, `right`, or
    `center`—and the `*y-position*` value can be `top`, `bottom`, or `center`. Percentage
    or length values can also be used. You should be familiar with these pairs of
    values from using other properties, such as `background-position` or `transform-origin`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`*x-position*`值可以是`left`、`right`或`center`中的任何一个，`*y-position*`值可以是`top`、`bottom`或`center`。也可以使用百分比或长度值。你应该熟悉这些值对，尤其是在使用其他属性时，例如`background-position`或`transform-origin`。'
- en: The default is `center center` (or `50% 50%`), so you are viewing the line of
    perspective as if it started at the absolute center of the element. Changing the
    values of `perspective-origin` changes the origin of that line of perspective.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值是`center center`（或`50% 50%`），这意味着你正在从元素的绝对中心开始查看透视线。改变`perspective-origin`的值会改变透视线的起点。
- en: 'That may sound a little brain-bending; once again, showing it is easier than
    explaining it. In this next example, I show the same transformed element from
    different perspective origins. Here’s the code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有点让人费解；不过，再次强调，展示比解释更容易。在接下来的例子中，我从不同的视角原点展示相同的变换元素。以下是代码：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The examples are illustrated in [Figure 13-8](ch13.html#ch13fig8). A reference
    example is shown first (at the far left); this is a transformed element viewed
    from the default origin of `center center`. The second example (➊) is the same
    element but with `perspective-origin` at the center of the left-hand side of the
    element. The angle you’re viewing the element from has changed; the viewpoint
    appears to be to the left of the element. In the third example (➋), I used length
    values of `100% 100%`, which changes the origin to the bottom of the right-hand
    side. The viewpoint appears to be to the right of the element, looking up. The
    last (far right) example (➌) is viewed from a point 75 percent along the *x*-axis
    and 25 percent along the *y*-axis; this example is similar to the reference example,
    but the viewpoint has shifted slightly to be just to the right of, and slightly
    above, the element.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例在[图13-8](ch13.html#ch13fig8)中有说明。首先展示一个参考示例（最左侧）；这是一个从`center center`默认原点查看的变换元素。第二个示例（➊）是相同的元素，但其`perspective-origin`位于元素左侧的中心。你查看该元素的角度已经发生变化，视点似乎位于元素的左侧。第三个示例（➋）使用了`100%
    100%`的长度值，这将原点更改为右侧底部。视点似乎位于元素的右侧，并且是向上看的。最后一个示例（最右侧）（➌）则是从`x`轴75%的位置和`y`轴25%的位置进行查看；这个示例与参考示例相似，但视点略微偏移，位于元素的右侧且稍微高于元素。
- en: '![Image](graphics/f13-08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-08.jpg)'
- en: '*Figure 13-8: Different values for the* `*perspective-origin*` *property*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-8：不同的`*perspective-origin*`属性值*'
- en: '**The Transformation Origin**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**变换原点**'
- en: 'When explaining 2D transformations in [Chapter 12](ch12.html#ch12), I talked
    about each element’s origin point—the point at which all transformations are applied—and
    how you can set its position using the `transform-origin` property. The same property
    is also used for setting the origin point of 3D transformations, but as three
    dimensional coordinate systems have three axes (*x*-axis, *y*-axis, and *z*-axis),
    the property also accepts three values:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](ch12.html#ch12)解释2D变换时，我谈到了每个元素的原点——所有变换应用的点——以及如何使用`transform-origin`属性设置其位置。这个相同的属性也用于设置3D变换的原点，但由于三维坐标系有三个轴（*x*-轴，*y*-轴和*z*-轴），因此该属性还接受三个值：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first two values, `*x*` and `*y*`, act the same as in the `transform-origin`
    property for 2D elements; that is, they accept values as either a keyword (`left`,
    `right`, `center` for `*x*`, and `top`, `bottom`, `center` for `*y*`), a length
    unit, or a percentage. The default value is `center center`, or `50% 50%`. The
    third value, `*z*`, is a length value, which sets the distance along the *z*-axis
    that the transformation will happen. This value can seem quite counterintuitive
    as it seems to act in reverse; if a negative value is given, the transformation
    origin is behind the element, which makes it appear in front of its parent; likewise,
    a positive value places the origin in front of the element, making the element
    appear behind its parent.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个值，`*x*` 和 `*y*`，与2D元素的`transform-origin`属性相同；也就是说，它们接受关键字（`left`，`right`，`center`用于`*x*`，`top`，`bottom`，`center`用于`*y*`）、长度单位或百分比作为值。默认值为`center
    center`，或`50% 50%`。第三个值，`*z*`，是一个长度值，用来设置变换发生的*z*-轴上的距离。这个值看起来可能有些反直觉，因为它似乎是倒转的；如果给定一个负值，变换原点就会位于元素的背后，这使得元素出现在其父元素的前面；同样，正值则将原点放置在元素的前面，使得元素出现在其父元素的后面。
- en: 'I’ll illustrate this with a demonstration showing three elements identical
    in all values but `transform-origin`. Here’s the relevant code for these examples:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过一个演示来说明这一点，演示中有三个元素，除了`transform-origin`值外，其它所有值都相同。以下是这些示例的相关代码：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can see the output in [Figure 13-9](ch13.html#ch13fig9). From left to right,
    the first example is, once again, a reference element, with the origin at its
    default position, dead center. The next (➊) shows the same element with the `transform-origin`
    value set to the center of the top side, and in the original (unchanged) position
    on the *z*-axis. The third example (➋) sets the transformation origin to the center-bottom
    of the element, and the final (far right) example (➌) has the same transformation
    origin on the *x*- and *y*-axes (set with keywords rather than percentages) but
    it’s 50px along the *z*-axis—that is, toward the viewer (as it appears).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 13-9](ch13.html#ch13fig9)中看到输出。从左到右，第一个例子再次是一个参考元素，原点位于其默认位置，即正中心。接下来的例子（➊）展示了相同的元素，`transform-origin`值设置为顶部中心，并且原始位置（未改变）的*z*-轴上。第三个例子（➋）将变换原点设置为元素的底部中心，而最后一个（最右侧）例子（➌）具有相同的变换原点（在*x*-轴和*y*-轴上使用关键字而不是百分比设置），但是在*z*-轴上是50px——也就是说，朝向观察者（如图所示）。
- en: '![Image](graphics/f13-09.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-09.jpg)'
- en: '*Figure 13-9: Different* `*transform-origin*` *values on a transformed element*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-9：变换元素上不同的`*transform-origin*`值*'
- en: As before, you’ll see these differences much more clearly if you view the example
    files, as you can see the elements actually rotate around their transformation
    origin.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果你查看示例文件，你将能更清楚地看到这些差异，因为你可以看到元素实际上围绕其变换原点旋转。
- en: '**The transform-style Property**'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**transform-style 属性**'
- en: 'When elements transformed in 3D are nested, the default behavior is that all
    descendant elements are flattened to the plane of the parent—that is, any transformation
    functions applied to child elements are ignored. You can change this behavior
    with a property called `transform-style`; here’s the syntax:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当3D变换的元素嵌套时，默认行为是所有子元素都会被压平到父元素的平面上——也就是说，任何应用于子元素的变换函数都会被忽略。你可以通过一个名为`transform-style`的属性来更改这一行为；下面是语法：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The keyword value can be either `flat` (the default) or `preserve-3d`. Explaining
    the difference is easier if I start with an example: In this, I have two elements
    with identical rules applied, except for the value given to `transform-style`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字值可以是`flat`（默认值）或`preserve-3d`。如果从一个例子开始解释这个差异会更容易：在这里，我有两个元素应用了相同的规则，唯一的区别是给`transform-style`属性赋的值：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The difference, as shown in [Figure 13-10](ch13.html#ch13fig10), is quite stark:
    The example on the left has the default value of `flat`, so the inner element
    is kept in the same dimensional plane as its parent; you can clearly see the contrast
    with the second example, which has a `transform-style` value of `preserve-3d`,
    where the inner element sits in a separate plane, further along the *z*-axis from
    its parent.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 13-10](ch13.html#ch13fig10)所示，差异非常明显：左侧示例使用了默认值 `flat`，因此内部元素与父元素保持在同一维度平面上；你可以清楚地看到与右侧第二个示例的对比，后者的
    `transform-style` 值为 `preserve-3d`，内部元素位于一个独立的平面上，并且在父元素的 *z* 轴方向上进一步延伸。
- en: '**WARNING** *Internet Explorer 10 and 11 don’t support the* `*preserve-3d*`
    *value of this property.*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告** *Internet Explorer 10 和 11 不支持此属性的 `*preserve-3d*` 值。*'
- en: '![Image](graphics/f13-10.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-10.jpg)'
- en: '*Figure 13-10: Comparing the effects of different values for the* `*transform-style*`
    *property*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-10：比较不同 `*transform-style*` 属性值的效果*'
- en: '**Showing or Hiding the Backface**'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显示或隐藏背面**'
- en: 'Sometimes you’ll encounter a situation where the element has been rotated to
    such a degree that it faces away from you and you are seeing the “back” of it
    (known as the *backface*). By default, the element behaves as if it were transparent,
    so you will see the reverse of what appears on the front. You can change this
    by using the `backface-visibility` property, which has this syntax:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会遇到这种情况，元素已被旋转到一定角度，背对着你，你看到的是它的“背面”（称为 *backface*）。默认情况下，元素表现得像是透明的，因此你会看到前面显示的反面内容。你可以通过使用
    `backface-visibility` 属性来改变这种行为，其语法如下：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `*state*` value is one of two keywords: `hidden` or `visible`. The default
    is `visible`, which behaves in the way I just described; the alternative, `hidden`,
    shows nothing. These work in the same way as the `visibility` property, which
    you should be familiar with from CSS2.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`*state*` 值是两个关键字之一：`hidden` 或 `visible`。默认值是 `visible`，它的行为如我刚才所描述；而 `hidden`
    显示的是空白。它们的工作方式与 `visibility` 属性相同，你应该对这个属性在 CSS2 中有所了解。'
- en: 'The following is a quick example illustrating the difference between the two
    `*state*`s by showing two elements that are identical except for their `backface-visibility`
    values. Here’s the code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简短示例，通过展示两个元素来说明这两个 `*state*` 之间的差异，除了它们的 `backface-visibility` 值不同。代码如下：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see the result in [Figure 13-11](ch13.html#ch13fig11). Both example
    elements are rotated around the *y*-axis so they are facing away from you. The
    example on the left shows the element with a value of `visible` on the `backface-visibility`
    property, so you can clearly see the back of the element. In the example on the
    right, you can see … well … nothing. The `backface-visibility` property has a
    value of `hidden`, so nothing is displayed—no `border`, no `background-color`,
    nothing. To confirm that the element is actually there, visit the website that
    accompanies this book and take a look at the animated code examples so you can
    better see how they work.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 13-11](ch13.html#ch13fig11)中看到结果。两个示例元素围绕 *y* 轴旋转，背对你。左侧的示例中，元素的 `backface-visibility`
    属性值为 `visible`，因此你可以清楚地看到元素的背面。在右侧示例中，你什么也看不见。`backface-visibility` 属性值为 `hidden`，因此什么都不显示——没有
    `border`，没有 `background-color`，什么都没有。为了确认元素确实存在，你可以访问本书附带的网站，查看动画代码示例，这样你就能更清楚地看到它们是如何工作的。
- en: '![Image](graphics/f13-11.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f13-11.jpg)'
- en: '*Figure 13-11: Demonstrating the* `*backface-visibility*` *property*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-11：演示 `*backface-visibility*` 属性*'
- en: '**Summary**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: The introduction of the third dimension takes CSS into areas that are rich with
    potential—many demos are available that show clever uses of 3D transformations
    to build objects or environments. But, for me, the best use of the extra dimension
    is in smaller, subtle details; adding depth to rollover effects or making two-sided
    “cards” that flip to reveal information on the reverse.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第三维度的引入使 CSS 进入了一个充满潜力的领域——有许多演示展示了巧妙使用 3D 转换来构建物体或环境的示例。但对我而言，额外维度的最佳用途是在较小的、微妙的细节中；为鼠标悬停效果添加深度，或者制作可以翻转显示反面信息的双面“卡片”。
- en: As with everything, CSS 3D transformations are best used appropriately, so they
    add to the user experience of your websites rather than detract from it with unnecessary
    tricks.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有事物一样，CSS 3D 转换最好适当使用，这样它们可以提升网站的用户体验，而不是通过不必要的技巧让体验变差。
- en: '**3D Transformations: Browser Support**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**3D 转换：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| 3D transformations | Yes | Yes | Yes^([*](ch13.html#footnote30a)) | IE10^([†](ch13.html#footnote31a))
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 3D 变换 | 是 | 是 | 是^([*](ch13.html#footnote30a)) | IE10^([†](ch13.html#footnote31a))
    |'
- en: '[*](ch13.html#footnote_30a) With vendor prefix'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch13.html#footnote_30a) 带供应商前缀'
- en: '[†](ch13.html#footnote_31a) No support for the `preserve-3d` value for `transform-style`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[†](ch13.html#footnote_31a) 不支持 `transform-style` 的 `preserve-3d` 值'
