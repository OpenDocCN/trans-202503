- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Solving ciphers with hill climbing
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用山丘攀登法破解密码
- en: '![](image_fi/502727c16/g16001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/g16001.png)'
- en: Many of the encryption methods introduced in this book can be broken with a
    strategy called *hill climbing*. Computer scientists developed this technique
    to solve certain kinds of optimization problems, most of which are not crypto
    related. It is well suited, for instance, to finding the shortest route that includes
    certain cities or determining the most efficient configuration of a production
    facility. The method is named “hill climbing” because it aims to improve a given
    configuration iteratively, until the “top of the mountain” is reached and no further
    improvement is possible, as represented in [Figure 16-1](#figure16-1).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中介绍的许多加密方法可以通过一种名为*山丘攀登法*的策略来破解。计算机科学家们开发了这种技术来解决某些类型的优化问题，其中大多数与密码学无关。例如，它非常适合用来寻找包括特定城市的最短路线或确定生产设施的最有效配置。该方法被命名为“山丘攀登”是因为它旨在迭代地改进给定配置，直到达到“山顶”，并且无法进一步改进，正如[图16-1](#figure16-1)所示。
- en: '![](image_fi/502727c16/f16001.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/f16001.png)'
- en: 'Figure 16-1: A hill-climbing algorithm takes a random key and checks whether
    the plaintext obtained with it looks like real language. By making small changes
    to the key, it tries to improve the result until no better one can be found. The
    last candidate often is the correct one.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-1：一个山丘攀登算法采取一个随机密钥，并检查使用该密钥获得的明文是否像真实语言。通过对密钥进行微小的调整，算法尝试改进结果，直到找不到更好的结果为止。最后的候选密钥通常就是正确的。
- en: Hill climbing is especially suited for problems that have too many potential
    solutions for the cryptanalyst to check every single one. It requires that the
    problem be “smooth,” which means that a small change in the input may cause only
    a small change in the output. Most codebreaking tasks used on classical ciphers
    fulfill both requirements. For these deciphering methods, the number of potential
    solutions (i.e., the number of keys) is extremely large. For example, there are
    403,291,461,126,605,635,584,000,000 (about 400 trillion trillion, or 4 × 10^(26))
    ways to create a simple substitution table with twenty-six letters—way too many
    to check every one, even with the best computer. In addition, small changes in
    the key of many classical encryption methods cause only small changes in the ciphertext.
    For instance, if we switch two ciphertext symbols in a simple substitution table,
    the changes in the decryption result are only minor.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 山丘攀登法特别适用于那些加密分析师无法检查所有潜在解决方案的问题。它要求问题是“平滑的”，这意味着输入的微小变化可能只会导致输出的微小变化。大多数用于破解经典密码的任务都符合这两个要求。对于这些解码方法，潜在的解决方案数量（即密钥数量）非常庞大。例如，使用二十六个字母创建一个简单的替代表有403,291,461,126,605,635,584,000,000（大约400万亿亿，或4
    × 10^(26)）种方法——即使是最强大的计算机也无法检查每一个。此外，许多经典加密方法中的密钥的小变化只会导致密文的微小变化。例如，如果我们交换一个简单替代表中的两个密文符号，解密结果的变化仅仅是微小的。
- en: Hill climbing is only feasible when implemented as a computer program. Codebreakers
    have successfully used this method to break a wide range of encryption algorithms,
    including difficult machine ciphers such as the one used by the Enigma. Today,
    quite a few computer programs (for instance, CrypTool 2) support hill-climbing
    algorithms for codebreaking. However, codebreakers must still customize hill climbing
    for the system they are attacking. For this reason, a variety of hill-climbing
    implementations are available.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 山丘攀登法只有在作为计算机程序实现时才可行。破译者成功地使用这种方法破解了广泛的加密算法，包括像“恩尼格玛”使用的那种复杂的机器密码。今天，相当多的计算机程序（例如，CrypTool
    2）支持用于破解密码的山丘攀登算法。然而，破解者仍然必须根据他们所攻击的系统来定制山丘攀登法。因此，提供了多种山丘攀登实现方式。
- en: It is important to note that, while hill climbing is a powerful tool for breaking
    historically important ciphers, it is not suited at all to attacking modern encryption
    algorithms such as AES or DES. This is because modern encryption algorithms are
    not smooth, and a small change in their key or plaintext should cause a major
    change in the ciphertext.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然山丘攀登法是破解具有历史意义的密码的强大工具，但它完全不适合攻击现代加密算法，如AES或DES。这是因为现代加密算法并不平滑，其密钥或明文的微小变化应该会导致密文发生重大变化。
- en: Solving simple substitution ciphers with hill climbing
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用山丘攀登法破解简单替代密码
- en: In this section, we explain the technique of hill climbing by applying it to
    a simple substitution ciphertext. As you will see later in this chapter, we can
    apply the same technique to other ciphers. Take a look at the following cryptogram,
    a challenge published in Sabine Baring-Gould’s 1896 book *Curiosities of Olden
    Times*:^([1](b06.xhtml#c16-endnote-1))^, ^([2](b06.xhtml#c16-endnote-2))
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过将爬山算法应用于一个简单的替换密文来解释这一技术。正如你将在本章后面看到的，我们可以将相同的技术应用于其他类型的密码。看看下面的这个密码挑战，它发布在萨宾·巴林-古尔德（Sabine
    Baring-Gould）1896年出版的《古代奇趣》中：^([1](b06.xhtml#c16-endnote-1))^， ^([2](b06.xhtml#c16-endnote-2))
- en: '![](image_fi/502727c16/g16002.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/g16002.png)'
- en: 'Let’s first translate this cryptogram into a version that is easier for a computer
    program to process. We replace the symbol that appears first with `A`, the next
    one with `B`, the third one with `C`, and so on, keeping the word breaks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将这个密码谜题转换成更易于计算机程序处理的版本。我们将第一个出现的符号替换为`A`，第二个符号替换为`B`，第三个替换为`C`，依此类推，同时保持单词之间的间隔：
- en: '`A BCDE CF GHI HAFE CJ KLDGH GKL CF GHI BMJH`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`A BCDE CF GHI HAFE CJ KLDGH GKL CF GHI BMJH`'
- en: Step 1
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第1步
- en: 'We start by creating a random substitution table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个随机替换表：
- en: '`Plaintext:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`Ciphertext: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
- en: Step 2
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第2步
- en: 'Then, we use the substitution table to decrypt the cryptogram, which gives
    us the following plaintext candidate:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用替换表解密这个密码谜题，得到如下的明文候选文本：
- en: '`S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
- en: Step 3
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步
- en: Now, we rate the correctness of the plaintext candidate with a so-called *fitness
    function*. Using a fitness function is the most sophisticated and critical part
    of a hill-climbing attack. There are many ways to check whether a certain text
    is more or less correct (i.e., whether it looks like real language). In our case,
    we take a simple approach based on letter frequencies. Advanced codebreakers will
    easily find better methods.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用所谓的*适应度函数*来评估明文候选文本的正确性。使用适应度函数是爬山攻击中最复杂和关键的部分。有很多方法可以检查某段文本是否更接近真实语言（即它是否像真实语言）。在我们的例子中，我们采用了基于字母频率的简单方法。高级破译者会轻松找到更好的方法。
- en: For each letter, we determine its frequency in the plaintext candidate and compare
    it with the distance from that frequency in an average English text of the same
    length. In our case, the ciphertext has thirty-three characters. Based on the
    fact that, in the English language, the letter *A* has a frequency of 8%, *B*
    of 1%, and *C* of 3%, we set the expected frequency of these letters in the plaintext
    candidate to three, zero, and one. The expected frequencies of the remaining letters
    are derived in a similar way.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个字母，我们确定它在明文候选文本中的频率，并将其与相同长度的平均英文文本中的频率距离进行比较。在我们的例子中，密文包含三十三个字符。基于英语语言中，字母
    *A* 的频率为8%，*B* 为1%，*C* 为3%，我们将这些字母在明文候选文本中的预期频率设定为三、零和一。其余字母的预期频率则以类似方式得出。
- en: 'Next, we compare the frequencies in the plaintext candidate with the expected
    frequencies and determine the distance:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将明文候选文本中的字母频率与预期频率进行比较，并确定距离：
- en: '| **Letter** | **Frequency in the plaintext candidate** | **Expected frequency**
    | **Distance** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **字母** | **明文候选文本中的频率** | **预期频率** | **距离** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `A` | 0 | 3 | 3 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 0 | 3 | 3 |'
- en: '| `B` | 2 | 0 | 2 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `B` | 2 | 0 | 2 |'
- en: '| `C` | 0 | 1 | 1 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 0 | 1 | 1 |'
- en: '| `D` | 0 | 1 | 1 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 0 | 1 | 1 |'
- en: '| `E` | 0 | 4 | 4 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `E` | 0 | 4 | 4 |'
- en: '| `F` | 0 | 1 | 1 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 0 | 1 | 1 |'
- en: '| `G` | 4 | 1 | 3 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `G` | 4 | 1 | 3 |'
- en: '| `H` | 0 | 2 | 2 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 0 | 2 | 2 |'
- en: '| `I` | 2 | 2 | 0 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 2 | 2 | 0 |'
- en: '| `J` | 2 | 0 | 2 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `J` | 2 | 0 | 2 |'
- en: '| `K` | 0 | 0 | 0 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `K` | 0 | 0 | 0 |'
- en: '| `L` | 2 | 1 | 1 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 2 | 1 | 1 |'
- en: '| `M` | 2 | 1 | 1 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 2 | 1 | 1 |'
- en: '| `N` | 2 | 2 | 0 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 2 | 2 | 0 |'
- en: '| `O` | 4 | 3 | 1 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `O` | 4 | 3 | 1 |'
- en: '| `P` | 1 | 1 | 0 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `P` | 1 | 1 | 0 |'
- en: '| `Q` | 0 | 0 | 0 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | 0 | 0 | 0 |'
- en: '| `R` | 3 | 2 | 1 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `R` | 3 | 2 | 1 |'
- en: '| `S` | 2 | 2 | 0 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 2 | 2 | 0 |'
- en: '| `T` | 0 | 3 | 3 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 0 | 3 | 3 |'
- en: '| `U` | 0 | 1 | 1 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `U` | 0 | 1 | 1 |'
- en: '| `V` | 0 | 0 | 0 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 0 | 0 | 0 |'
- en: '| `W` | 0 | 1 | 1 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `W` | 0 | 1 | 1 |'
- en: '| `X` | 0 | 0 | 0 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 0 | 0 | 0 |'
- en: '| `Y` | 5 | 1 | 4 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 5 | 1 | 4 |'
- en: '| `Z` | 2 | 0 | 2 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 2 | 0 | 2 |'
- en: '| Sum: 34 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 总和: 34 |'
- en: The sum of the distances (here, thirty-four) is the result of the fitness function.
    The lower the result, the better the fit.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 距离的总和（这里是三十四）是适应度函数的结果。结果越小，拟合效果越好。
- en: Step 4
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第4步
- en: 'Next, we slightly randomize the substitution table. In the following, the second
    line is the old substitution alphabet, while the third line is the new one:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们稍微随机化替换表。下面的第二行是旧的替换字母表，第三行是新的替换字母表：
- en: '`Plaintext:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`Old ciphertext: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`旧密文: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
- en: '`New ciphertext: SNOIJFGYZLMBPDQWUVHRCTAXEK`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`新密文: SNOIJFGYZLMBPDQWUVHRCTAXEK`'
- en: As you can see, we have made only a small change, exchanging the positions of
    `F` and `R`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只做了一个小的调整，交换了`F`和`R`的位置。
- en: Step 5
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第五步
- en: 'In the next step, we decrypt the ciphertext with the new substitution table
    and get a new plaintext candidate (the old plaintext is listed for comparison):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们使用新的替换字母表解密密文，并得到一个新的明文候选（旧的明文列出以供比较）：
- en: '`Old plaintext:` `S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`旧明文:` `S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
- en: '`New plaintext:` `S NOIJ OF GYZ YSFJ OL MBIGY GMB OF GYZ NPLY`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`新明文:` `S NOIJ OF GYZ YSFJ OL MBIGY GMB OF GYZ NPLY`'
- en: Step 6
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第六步
- en: 'Again, we rate the correctness of the plaintext candidate with our fitness
    function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们通过适应度函数对明文候选进行正确性评分：
- en: '| **Letter** | **Frequency in the plaintext candidate** | **Expected frequency**
    | **Distance** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **字母** | **明文候选中的频率** | **预期频率** | **距离** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `A` | 0 | 3 | 3 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 0 | 3 | 3 |'
- en: '| `B` | 2 | 0 | 2 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `B` | 2 | 0 | 2 |'
- en: '| `C` | 0 | 1 | 1 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 0 | 1 | 1 |'
- en: '| `D` | 0 | 1 | 1 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 0 | 1 | 1 |'
- en: '| `E` | 0 | 4 | 4 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `E` | 0 | 4 | 4 |'
- en: '| `F` | 3 | 1 | 2 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 3 | 1 | 2 |'
- en: '| `G` | 4 | 1 | 3 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `G` | 4 | 1 | 3 |'
- en: '| `H` | 0 | 2 | 2 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 0 | 2 | 2 |'
- en: '| `I` | 2 | 2 | 0 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 2 | 2 | 0 |'
- en: '| `J` | 2 | 0 | 2 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `J` | 2 | 0 | 2 |'
- en: '| `K` | 0 | 0 | 0 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `K` | 0 | 0 | 0 |'
- en: '| `L` | 2 | 1 | 1 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 2 | 1 | 1 |'
- en: '| `M` | 2 | 1 | 1 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 2 | 1 | 1 |'
- en: '| `N` | 2 | 2 | 0 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 2 | 2 | 0 |'
- en: '| `O` | 4 | 3 | 1 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `O` | 4 | 3 | 1 |'
- en: '| `P` | 1 | 1 | 0 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `P` | 1 | 1 | 0 |'
- en: '| `Q` | 0 | 0 | 0 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | 0 | 0 | 0 |'
- en: '| `R` | 0 | 2 | 2 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `R` | 0 | 2 | 2 |'
- en: '| `S` | 2 | 2 | 0 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 2 | 2 | 0 |'
- en: '| `T` | 0 | 3 | 3 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 0 | 3 | 3 |'
- en: '| `U` | 0 | 1 | 1 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `U` | 0 | 1 | 1 |'
- en: '| `V` | 0 | 0 | 0 |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 0 | 0 | 0 |'
- en: '| `W` | 0 | 1 | 1 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `W` | 0 | 1 | 1 |'
- en: '| `X` | 0 | 0 | 0 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 0 | 0 | 0 |'
- en: '| `Y` | 5 | 1 | 4 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 5 | 1 | 4 |'
- en: '| `Z` | 2 | 0 | 2 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 2 | 0 | 2 |'
- en: '| Sum: 36 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 合计: 36 |'
- en: The overall distance between the expected and real letter frequencies has become
    larger, which means that the correctness of the plaintext candidate has decreased.
    For this reason, we go back to the previous substitution alphabet. If there had
    been an improvement, we would have kept the current table.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 预期字母频率和实际字母频率之间的整体距离变大了，这意味着明文候选的正确性降低了。因此，我们返回到先前的替换字母表。如果有改进，我们会保留当前的替换表。
- en: 'Again, we change the substitution table slightly. Here, we have exchanged the
    positions of `T` and `J`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们稍微调整替换表。在这里，我们交换了`T`和`J`的位置：
- en: '`Plaintext:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`Old ciphertext: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`旧密文: SNOIJRGYZLMBPDQWUVHFCTAXEK`'
- en: '`New ciphertext: SNOITRGYZLMBPDQWUVHFCJAXEK`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`新密文: SNOITRGYZLMBPDQWUVHFCJAXEK`'
- en: Step 5 (again)
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第五步（再次）
- en: 'We decrypt the ciphertext with the changed substitution table and get a new
    plaintext candidate:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用更改后的替换表解密密文，并得到一个新的明文候选：
- en: '`Old plaintext:` `S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`旧明文:` `S NOIJ OR GYZ YSRJ OL MBIGY GMB OR GYZ NPLY`'
- en: '`New plaintext:` `S NOIT OR GYZ YSRT OL MBIGY GMB OR GYZ NPLY`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`新明文:` `S NOIT OR GYZ YSRT OL MBIGY GMB OR GYZ NPLY`'
- en: Step 6 (again)
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第六步（再次）
- en: 'Then, we rate the correctness of the plaintext candidate with our fitness function:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过适应度函数对明文候选进行正确性评分：
- en: '| **Letter** | **Frequency in the plaintext candidate** | **Expected frequency**
    | **Distance** |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| **字母** | **明文候选中的频率** | **预期频率** | **距离** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `A` | 0 | 3 | 3 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 0 | 3 | 3 |'
- en: '| `B` | 2 | 0 | 2 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `B` | 2 | 0 | 2 |'
- en: '| `C` | 0 | 1 | 1 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 0 | 1 | 1 |'
- en: '| `D` | 0 | 1 | 1 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 0 | 1 | 1 |'
- en: '| `E` | 0 | 4 | 4 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `E` | 0 | 4 | 4 |'
- en: '| `F` | 0 | 1 | 1 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 0 | 1 | 1 |'
- en: '| `G` | 4 | 1 | 3 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `G` | 4 | 1 | 3 |'
- en: '| `H` | 0 | 2 | 2 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 0 | 2 | 2 |'
- en: '| `I` | 2 | 2 | 0 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 2 | 2 | 0 |'
- en: '| `J` | 0 | 0 | 0 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `J` | 0 | 0 | 0 |'
- en: '| `K` | 0 | 0 | 0 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `K` | 0 | 0 | 0 |'
- en: '| `L` | 2 | 1 | 1 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 2 | 1 | 1 |'
- en: '| `M` | 2 | 1 | 1 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 2 | 1 | 1 |'
- en: '| `N` | 2 | 2 | 0 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 2 | 2 | 0 |'
- en: '| `O` | 4 | 3 | 1 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `O` | 4 | 3 | 1 |'
- en: '| `P` | 1 | 1 | 0 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `P` | 1 | 1 | 0 |'
- en: '| `Q` | 0 | 0 | 0 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | 0 | 0 | 0 |'
- en: '| `R` | 3 | 2 | 1 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `R` | 3 | 2 | 1 |'
- en: '| `S` | 2 | 2 | 0 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 2 | 2 | 0 |'
- en: '| `T` | 2 | 3 | 1 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 2 | 3 | 1 |'
- en: '| `U` | 0 | 1 | 1 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `U` | 0 | 1 | 1 |'
- en: '| `V` | 0 | 0 | 0 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 0 | 0 | 0 |'
- en: '| `W` | 0 | 1 | 1 |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `W` | 0 | 1 | 1 |'
- en: '| `X` | 0 | 0 | 0 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 0 | 0 | 0 |'
- en: '| `Y` | 5 | 1 | 4 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 5 | 1 | 4 |'
- en: '| `Z` | 2 | 0 | 2 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 2 | 0 | 2 |'
- en: '| Sum: 30 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 合计: 30 |'
- en: The result of the fitness function has now decreased, which means that the plaintext
    candidate looks more like a text in the English language. We therefore keep the
    table.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 适应度函数的结果现在已经降低，这意味着明文候选看起来更像是英语文本。因此，我们保留这个表格。
- en: We repeat the procedure described in the previous paragraphs many times. If
    the new substitution table leads to a lower result from the fitness function,
    we keep it. Otherwise, we restore the previous table. We keep doing this until
    the result of the fitness function doesn’t improve any further for, say, ten steps.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们多次重复前述过程。如果新的替换表导致适应度函数的结果更低，我们就保留它。否则，我们恢复之前的表格。我们一直这样做，直到适应度函数的结果在接下来的十步内不再改进。
- en: Usually, the last plaintext candidate is correct. However, there is no guarantee
    of this, as it is possible for a wrong plaintext candidate to deliver a better
    fitness function result than all of its tested neighbors, at which point, we call
    it a *local maximum*. In such a case, we simply restart the algorithm with a new
    randomly generated key. If several hill-climbing trials fail to produce a plaintext
    that makes sense, our assumption that we are dealing with a simple-substitution
    cryptogram might be wrong.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最后的明文候选是正确的。然而，这并不能保证，因为可能出现一个错误的明文候选比所有测试过的邻近候选获得更好的适应度函数结果，这时我们称之为*局部最大值*。在这种情况下，我们会重新启动算法，使用一个新随机生成的密钥。如果多次爬山算法尝试都未能产生有意义的明文，那么我们假设我们正在处理一个简单替换密码可能就是错误的。
- en: 'In the case of the Baring-Gould cryptogram, the correct plaintext is `A BIRD
    IN THE HAND IS WORTH TWO IN THE BUSH`. Here’s the substitution table:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Baring-Gould密码的情况下，正确的明文是`A BIRD IN THE HAND IS WORTH TWO IN THE BUSH`。这是替换表：
- en: '`Plaintext:` `ABIRDNTHESWOU`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `ABIRDNTHESWOU`'
- en: '`Ciphertext: ABCDEFGHIJKLM`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文: ABCDEFGHIJKLM`'
- en: Note that the plaintext contains only thirteen different letters.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，明文只包含十三个不同的字母。
- en: Simulated annealing
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟退火
- en: To avoid getting stuck at local maxima, some codebreakers use a variation on
    hill climbing known as *simulated annealing*. Unlike regular hill climbing, a
    simulated-annealing algorithm moves to a new key candidate not only if the fitness
    function result improves but also, in some cases, when it decreases. In other
    words, the path from one key candidate to another can also go downhill. These
    downhill steps are, however, exceptions, which ensures that the general direction
    of our path is uphill, as shown in [Figure 16-2](#figure16-2).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入局部最大值，一些密码破译者使用一种叫做*模拟退火*的变种爬山算法。与常规的爬山算法不同，模拟退火算法不仅在适应度函数的结果改善时移动到新的密钥候选，还在某些情况下，当适应度函数结果下降时，也会移动到新的密钥候选。换句话说，从一个密钥候选到另一个密钥候选的路径也可能是下降的。然而，这些下降步骤是例外，确保了我们路径的整体方向是上升的，如[图16-2](#figure16-2)所示。
- en: The decision to take a downhill step depends on a random number and some configurable
    details. We can vary the probability of a downhill step during the process, based
    on a control parameter known as the *temperature*. A higher temperature means
    that downhill steps are more likely, and a lower temperature decreases their probability.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 是否采取下降步骤的决定取决于一个随机数和一些可配置的细节。我们可以在过程中基于一个控制参数——*温度*来改变下降步骤的概率。温度越高，下降步骤的可能性越大；温度越低，下降步骤的概率越小。
- en: '![](image_fi/502727c16/f16002.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/f16002.png)'
- en: 'Figure 16-2: Simulated annealing is a variation on hill climbing. While the
    latter moves to a new key only if the fitness function result increases, simulated
    annealing allows for downhill steps.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-2：模拟退火是爬山算法的一个变种。后者只有在适应度函数结果增加时才会移动到新的密钥，而模拟退火则允许下降步骤。
- en: Because simulated annealing allows for downhill steps, the algorithm can find
    a path leading away from a local maximum. However, simulated annealing is often
    slower than hill climbing, as the downhill steps cause the algorithm to take longer.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 因为模拟退火允许下降步骤，所以算法可以找到一条离开局部最大值的路径。然而，模拟退火通常比爬山算法更慢，因为下降步骤会导致算法花费更多时间。
- en: The term *simulated annealing* comes from the process of annealing in metallurgy,
    which is a method involving the heating and controlled cooling of a material to
    increase the size of its crystals and reduce their defects.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*模拟退火*这个术语来源于冶金中的退火过程，退火是一种通过加热和控制冷却材料来增加其晶体尺寸并减少缺陷的方法。'
- en: 'Success story: Bart Wenmeckers’s solution to the Baring-Gould cryptogram'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Bart Wenmeckers解开Baring-Gould密码
- en: While CrypTool 2 supports hill climbing, some experienced codebreakers have
    written their own hill-climbing code, which allows them to adapt the fitness function
    and other parameters easily. This section considers the output of a program written
    by one of our colleagues, New Zealand-based crypto expert Bart Wenmeckers.^([3](b06.xhtml#c16-endnote-3))
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然CrypTool 2支持爬山算法，但一些经验丰富的破译者自己编写了爬山代码，这让他们能够轻松调整适应度函数和其他参数。本节考虑了我们的一位同事、新西兰密码学专家Bart
    Wenmeckers编写的程序的输出。^([3](b06.xhtml#c16-endnote-3))
- en: 'Bart’s program uses a much more sophisticated fitness function than the one
    above. It delivers a higher value each time a plaintext candidate looks more like
    real language. This is the opposite of what is done above. The program prints
    two lines when a substitution table delivers a better result than its predecessor.
    Here’s an example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Bart的程序使用了比上述更复杂的适应度函数。每当明文候选更接近真实语言时，它会给出更高的评分。这与上述方法相反。每当替换表比前一个版本更好的时候，程序会打印出两行。以下是一个示例：
- en: '`AYISLNTHEPFRBDJXMWCQOKZGVU,313`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`AYISLNTHEPFRBDJXMWCQOKZGVU,313`'
- en: '`A YISL IN THE HANL IP FRSTH TFR IN THE YDPH`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`一个手中的鸟比丛林中的两只鸟更值钱`'
- en: This output indicates that the current substitution table is the following .
    . .
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出表示当前的替换表如下 . . .
- en: '`Plaintext:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文：` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`Ciphertext: AYISLNTHEPFRBDJXMWCQOKZGVU`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文: AYISLNTHEPFRBDJXMWCQOKZGVU`'
- en: '. . . and that the result of the fitness function is 313\. The output’s second
    line is the plaintext candidate (see below). When Bart tried his program with
    the cryptogram from Sabine Baring-Gould’s book, he received the following sequential
    results:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: . . . 并且适应度函数的结果是313。输出的第二行是明文候选（见下文）。当Bart使用Sabine Baring-Gould的书中的密码进行程序测试时，他得到了以下顺序结果：
- en: '`AYISLNTHEMBUQDVWCGPJZRXKOF,323`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`AYISLNTHEMBUQDVWCGPJZRXKOF,323`'
- en: '`A YISL IN THE HANL IM BUSTH TBU IN THE YDMH`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`一个手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEMBOUFQWKXCZGPVLYJ,327`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEMBOUFQWKXCZGPVLYJ,327`'
- en: '`A RISD IN THE HAND IM BOSTH TBO IN THE RFMH`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEMOBUFQWKXCZGPVLYJ,331`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEMOBUFQWKXCZGPVLYJ,331`'
- en: '`A RISD IN THE HAND IM OBSTH TOB IN THE RFMH`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEMOPUFQWKXCZGBVLYJ,333`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEMOPUFQWKXCZGBVLYJ,333`'
- en: '`A RISD IN THE HAND IM OPSTH TOP IN THE RFMH`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEGOPZFQWUXVJMBCLYK,334`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEGOPZFQWUXVJMBCLYK,334`'
- en: '`A RISD IN THE HAND IG OPSTH TOP IN THE RFGH`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEGOFZPQWUXVJMBCLYK,343`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEGOFZPQWUXVJMBCLYK,343`'
- en: '`A RISD IN THE HAND IG OFSTH TOF IN THE RPGH`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEMOFZPQWUXVJGBCLYK,347`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEMOFZPQWUXVJGBCLYK,347`'
- en: '`A RISD IN THE HAND IM OFSTH TOF IN THE RPMH`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟在丛林中的两只鸟更值钱`'
- en: '`ARISDNTHEMOFCYBKWXZJVLUGQP,348`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHEMOFCYBKWXZJVLUGQP,348`'
- en: '`A RISD IN THE HAND IM OFSTH TOF IN THE RYMH`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARISDNTHELOFZUJMBXCKGVQPYW,349`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARISDNTHELOFZUJMBXCKGVQPYW,349`'
- en: '`A RISD IN THE HAND IL OFSTH TOF IN THE RULH`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARILDNTHESOFJMXVUWGQCPBKZY,354`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARILDNTHESOFJMXVUWGQCPBKZY,354`'
- en: '`A RILD IN THE HAND IS OFLTH TOF IN THE RMSH`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`一只手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ARILDNTHESOFVUKMXGPYZJWCBQ,355`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARILDNTHESOFVUKMXGPYZJWCBQ,355`'
- en: '`A RILD IN THE HAND IS OFLTH TOF IN THE RUSH`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`一只手中的鸟比丛林中的两只鸟更值钱`'
- en: '`AMILDNTHESOFVUJQXGPYZKWCBR,357`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`AMILDNTHESOFVUJQXGPYZKWCBR,357`'
- en: '`A MILD IN THE HAND IS OFLTH TOF IN THE MUSH`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`手中的鸟比丛林中的两只鸟更值钱`'
- en: '`AMIRDNTHESCOYUBQVXLPWZGJFK,358`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`AMIRDNTHESCOYUBQVXLPWZGJFK,358`'
- en: '`A MIRD IN THE HAND IS CORTH TCO IN THE MUSH`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`A MIRD IN THE HAND IS CORTH TCO IN THE MUSH`'
- en: '`ABIRDNTHESWOYUMXVQCZJLKGPF,365`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABIRDNTHESWOYUMXVQCZJLKGPF,365`'
- en: '`A BIRD IN THE HAND IS WORTH TWO IN THE BUSH`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`一只手中的鸟比丛林中的两只鸟更值钱`'
- en: '`ABIRDNTHESPOGUJMQXZYKCWLFV,366`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABIRDNTHESPOGUJMQXZYKCWLFV,366`'
- en: '`A BIRD IN THE HAND IS PORTH TPO IN THE BUSH`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`一只手中的鸟比丛林中的两只鸟更值钱`'
- en: As can be seen, Bart’s program found the correct solution, rated 365, but didn’t
    stop there. It rated `A BIRD IN THE HAND IS PORTH TPO IN THE BUSH` as an even
    better solution, with 366 points. Things like this can happen. Of course, a human
    watching the computer do its work would probably have guessed the correct solution
    much earlier than the computer, by operating as if they were on *Wheel of Fortune*.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，Bart的程序找到了正确的解决方案，评分为365，但它并没有就此停止。它把`一只手中的鸟比丛林中的两只鸟更值钱`评为一个更好的解决方案，得到了366分。像这样的事情是有可能发生的。当然，一个观察电脑工作的人的话，很可能比电脑更早地猜到正确的解答，就像他们玩*幸运之轮*一样。
- en: 'Success story: The Florida murder case cryptogram'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：佛罗里达谋杀案的密码
- en: Some ciphers and cryptograms are associated with horrific crimes. In 2004, eleven-year-old
    Carlie Brucia was kidnapped from a car wash in Sarasota, Florida, and later killed.
    Based on a surveillance video, police identified car mechanic Joseph P. Smith
    as the murderer. In 2005, while in jail and awaiting his trial, he tried to send
    an encrypted message ([Figure 16-3](#figure16-3)) to his brother.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一些密码和密码谜题与可怕的犯罪案件相关。2004年，11岁的卡莉·布鲁西亚在佛罗里达州萨拉索塔的一家洗车店被绑架，随后被杀害。根据监控视频，警方认定汽车修理工约瑟夫·P·史密斯为凶手。2005年，在监狱等待审判期间，他试图向他的哥哥发送一条加密信息（[图16-3](#figure16-3)）。
- en: The Cryptanalysis and Racketeering Records Unit (CRRU), the FBI’s codebreaking
    unit, soon broke this cryptogram but did not publicly release any details.^([4](b06.xhtml#c16-endnote-4))
    In 2014, when Klaus read about the story in a 2005 FBI report,^([5](b06.xhtml#c16-endnote-5))
    he posted the encrypted message on his blog, after which, German crypto expert
    and CrypTool 2 developer Nils Kopal quickly solved it via hill climbing.^([6](b06.xhtml#c16-endnote-6))
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 美国联邦调查局（FBI）的密码分析与勒索记录组（CRRU）很快破解了这条密码，但没有公开任何细节。^([4](b06.xhtml#c16-endnote-4))
    2014年，当克劳斯在一份2005年的FBI报告中读到这个故事时，^([5](b06.xhtml#c16-endnote-5)) 他在自己的博客上发布了这条加密信息，随后，德国加密专家、CrypTool
    2开发者尼尔斯·科帕尔通过爬山算法迅速破解了它。^([6](b06.xhtml#c16-endnote-6))
- en: '![](image_fi/502727c16/f16003.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/f16003.png)'
- en: 'Figure 16-3: The murderer of Carlie Brucia tried to send this encrypted message
    from prison to his brother.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-3：卡莉·布鲁西亚的凶手试图从监狱向他的哥哥发送这条加密信息。
- en: 'To start, Nils created the following transcript:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，尼尔斯创建了以下的转录：
- en: '`+5 5 +1 5 %3 +2 -4 x4 -1 +1 %2 %4 x4 %2 +3 -5`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`+5 5 +1 5 %3 +2 -4 x4 -1 +1 %2 %4 x4 %2 +3 -5`'
- en: '`%5 %2 -3 -5 -4 +3 -5 +1 %5 -1 +2 %2 %3 +1 1`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`%5 %2 -3 -5 -4 +3 -5 +1 %5 -1 +2 %2 %3 +1 1`'
- en: '`x5 +3 +1 +2 -5 %4 -4 x4 5 x5 -5 +2 -1 3 +1 +2`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`x5 +3 +1 +2 -5 %4 -4 x4 5 x5 -5 +2 -1 3 +1 +2`'
- en: '`-5 +3 -5 %3 3 x5 +1 1 -4 x5 -2 -5 %3 +1 -4 -5 %4`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`-5 +3 -5 %3 3 x5 +1 1 -4 x5 -2 -5 %3 +1 -4 -5 %4`'
- en: '`-1 +3 -4 %2 x4 -5 +5 x5 -5 %3 +1 x4 %2 -1 5 x5 +1`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`-1 +3 -4 %2 x4 -5 +5 x5 -5 %3 +1 x4 %2 -1 5 x5 +1`'
- en: '`%2 +1 %5 -5 x2 %2 +1 %2 +1 x4 -5 3 %2 -5 +2 %2 4`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`%2 +1 %5 -5 x2 %2 +1 %2 +1 x4 -5 3 %2 -5 +2 %2 4`'
- en: '`-4 -1 +3 x5 %5 -5 +2 5 x5 %3 +3 5 x5 1 x5 +1 -5 x3 -1`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`-4 -1 +3 x5 %5 -5 +2 5 x5 %3 +3 5 x5 1 x5 +1 -5 x3 -1`'
- en: '`-3 %2 1 -1 -4 x4 x5 x3 +1 -1 %3 +1 +2 +3 -5 +1 +2 +5 x3 5 -4`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`-3 %2 1 -1 -4 x4 x5 x3 +1 -1 %3 +1 +2 +3 -5 +1 +2 +5 x3 5 -4`'
- en: '`+1 x4 -5 +3 -5 %5 %5 %2 -4 +3 5 x5 %5 x4 %2 +1 x4 -5`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`+1 x4 -5 +3 -5 %5 %5 %2 -4 +3 5 x5 %5 x4 %2 +1 x4 -5`'
- en: '`3 +2 -5 %3 +1 x5 x2 -3 -4 x4 -1 x1 -3 -1 +5 x1 -3 -1 -2 -5`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 +2 -5 %3 +1 x5 x2 -3 -4 x4 -1 x1 -3 -1 +5 x1 -3 -1 -2 -5`'
- en: '`%3 +1 x1 x5 %3 x5 1 -1 +2 x5 +1 1 -3 x2 5 %1 x4 x2`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`%3 +1 x1 x5 %3 x5 1 -1 +2 x5 +1 1 -3 x2 5 %1 x4 x2`'
- en: '`%3 +1 x3 x5 +2 -4 -1 %3 x2 %3 +2 x2 3 %2`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`%3 +1 x3 x5 +2 -4 -1 %3 x2 %3 +2 x2 3 %2`'
- en: Nils performed some statistical analyses involving letter frequency, the index
    of coincidence, and other tests. He realized that the cryptogram looked like a
    simple substitution cipher, but all his attempts to break it failed. So, he made
    some educated guesses, such as checking whether the text might have been written
    backward.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 尼尔斯进行了字母频率、同余指数和其他测试的统计分析。他意识到这条密码看起来像是一个简单的替代密码，但他所有破解的尝试都失败了。于是，他做了一些有根据的猜测，比如检查这段文字是否可能是反向书写的。
- en: 'When he applied the simple-substitution hill climber in CrypTool 2 on the backward-written
    cryptogram, he succeeded immediately, deriving the following gruesome plaintext
    (which contains a number of spelling errors):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当他在CrypTool 2中应用简单替代爬山算法处理这个反向书写的密码时，他立即成功，得到了以下令人毛骨悚然的明文（其中包含一些拼写错误）：
- en: '`I WLSH L HAD SOMTHLN JULCY TO SAY OH OK THE BACKPACK AND CLOTHES WENT IN FOUR
    DIFFERENT DUMPSTERS THAT MONDAY I CAME TO YOUR HOUSE FOR ADVISE I WENT IT I LEFT
    IT OUT IN THE OPEN I DRAGED THE BODY TO WHERE ST WAS FOUND DESTROY THIS AFTER
    DECIFERING IT AND SHUT UP`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`I WLSH L HAD SOMTHLN JULCY TO SAY OH OK THE BACKPACK AND CLOTHES WENT IN FOUR
    DIFFERENT DUMPSTERS THAT MONDAY I CAME TO YOUR HOUSE FOR ADVISE I WENT IT I LEFT
    IT OUT IN THE OPEN I DRAGED THE BODY TO WHERE ST WAS FOUND DESTROY THIS AFTER
    DECIFERING IT AND SHUT UP`'
- en: 'This leads to the following substitution table:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下的替代表：
- en: '| **`A`** | **`B`** | **`C`** | **`D`** | **`E`** | **`F`** | **`G`** | **`H`**
    | **`I`** | **`J`** | **`K`** | **`L`** | **`M`** | **`N`** | **`O`** | **`P`**
    | **`Q`** | **`R`** | **`S`** | **`T`** | **`U`** | **`V`** | **`W`** | **`X`**
    | **`Y`** | **`Z`** |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **`A`** | **`B`** | **`C`** | **`D`** | **`E`** | **`F`** | **`G`** | **`H`**
    | **`I`** | **`J`** | **`K`** | **`L`** | **`M`** | **`N`** | **`O`** | **`P`**
    | **`Q`** | **`R`** | **`S`** | **`T`** | **`U`** | **`V`** | **`W`** | **`X`**
    | **`Y`** | **`Z`** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| -1 | -2 | -3 | -4 | -5 | %5 | %4 | %3 | %2 | %1 | x1 | x2 | x3 | x4 | x5
    | +5 | +4 | +3 | +2 | +1 | 5 | 4 | 3 | 2 | 1 |  |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| -1 | -2 | -3 | -4 | -5 | %5 | %4 | %3 | %2 | %1 | x1 | x2 | x3 | x4 | x5
    | +5 | +4 | +3 | +2 | +1 | 5 | 4 | 3 | 2 | 1 |  |'
- en: The letters `Q`, `X`, and `Z` don’t appear in the plaintext. While the ciphertext
    equivalents of `Q` and `X` can be easily guessed (`Q`, for instance, lies between
    +5 and +3), the character for `Z` remains unknown.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`Q`、`X`和`Z`在明文中没有出现。虽然`Q`和`X`的密文对应字符可以很容易猜到（例如，`Q`位于+5和+3之间），但是`Z`的字符仍然未知。
- en: In court, a CRRU specialist had presented the same result. Along with other
    evidence, it led to Smith being sentenced to death.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在法庭上，一名CRRU专家展示了相同的结果。结合其他证据，这导致史密斯被判处死刑。
- en: Solving a homophonic cipher with simulated annealing
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模拟退火法解密同音密码
- en: When it comes to solving a homophonic cipher, hill climbing and simulated annealing
    are obvious methods to use. After all, a small change in the cipher’s substitution
    table causes only small changes in the ciphertext. Moreover, because a homophonic
    cipher has far more potential keys than we can exhaustively check one by one,
    hill climbing, as well as simulated annealing, provides much more efficient methods
    than brute force. Since most implementations that we know of use simulated annealing
    for this purpose, we will focus on only simulated annealing for the following.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在解密同音密码时，爬山法和模拟退火是显而易见的方法。毕竟，密码替换表中的一个小变化只会导致密文中的小变化。而且，由于同音密码有远比我们可以逐一穷举检查的潜在密钥要多，因此爬山法和模拟退火比暴力破解提供了更高效的方法。由于我们所知道的大多数实现都使用模拟退火来完成这一任务，因此我们将在接下来的内容中仅关注模拟退火法。
- en: Solving a homophonic cipher with simulated annealing is a relatively new field
    of research, with only a few papers published on the topic to date. One frequently
    cited article, written by Nils Kopal in 2019, offers an introduction to the subject.^([7](b06.xhtml#c16-endnote-7))
    However, various researchers around the world are studying this area and may publish
    the results of their homophonic-simulated-annealing projects in the years ahead.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟退火解密同音密码是一个相对较新的研究领域，到目前为止，关于这一主题的论文并不多。2019年由Nils Kopal撰写的文章经常被引用，提供了该主题的介绍。^([7](b06.xhtml#c16-endnote-7))
    然而，世界各地的研究人员正在研究这一领域，并可能在未来几年发布他们的同音-模拟退火项目的研究成果。
- en: The best software for homophonic simulated annealing we have found, AZDecrypt,
    was written by Belgian codebreaking expert Jarl Van Eycke (who released version
    1.21 in 2023). AZDecrypt comes with an impressive number of configuration options
    and implements a strong fitness function. It is available for free at [http://www.zodiackillerciphers.com](http://www.zodiackillerciphers.com).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到的最佳同音模拟退火软件AZDecrypt是由比利时密码破译专家Jarl Van Eycke编写的（他在2023年发布了1.21版本）。AZDecrypt具有令人印象深刻的配置选项，并实现了强大的适应度函数。该软件可以免费从[http://www.zodiackillerciphers.com](http://www.zodiackillerciphers.com)下载。
- en: 'Success story: Dhavare, Low, and Stamp’s Zodiac Killer solutions'
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Dhavare、Low和Stamp的黄道杀手解密
- en: 'One of the few research papers about hill-climbing attacks on homophonic ciphers
    that we know of is “Efficient Cryptanalysis of Homophonic Substitution Ciphers,”
    published by Amrapali Dhavare, Richard M. Low, and Mark Stamp in 2013.^([8](b06.xhtml#c16-endnote-8))
    The authors describe a method that involves two hill-climbing steps: the first,
    called *outer hill climbing*, determines the number of homophones each plaintext
    letter maps to; while the second, *inner hill climbing*, reconstructs the substitution
    table.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所知道的关于对同音密码进行爬山攻击的少数几篇研究论文之一是《高效的同音替换密码分析》，该论文由Amrapali Dhavare、Richard M.
    Low和Mark Stamp于2013年发表。^([8](b06.xhtml#c16-endnote-8)) 作者描述了一种方法，其中包括两个爬山步骤：第一步，称为*外部爬山*，确定每个明文字母映射到的同音字的数量；第二步，称为*内部爬山*，重建替换表。
- en: Dhavare, Low, and Stamp initially tested their method on Z408, the first message
    written by the Zodiac Killer (see [Chapter 6](c06.xhtml)). Z408 was solved back
    in 1969, and the researchers wanted to see whether their algorithm could repeat
    this deciphering success. In fact, it could, quite easily (see [Figure 16-4](#figure16-4)).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Dhavare、Low和Stamp最初将他们的方法应用于Z408，这是黄道杀手写的第一封信（见[第六章](c06.xhtml)）。Z408在1969年就已被解密，研究人员希望看看他们的算法是否能够重现这一解密成功。事实上，它确实能够，而且相当容易（见[图16-4](#figure16-4)）。
- en: The authors next applied their technique to a homophonic cipher challenge, titled
    Zodiac Cipher, which was available on the crypto-puzzle platform MysteryTwister.^([9](b06.xhtml#c16-endnote-9))
    This challenge mimics Z340, the second Zodiac Killer message, which, unlike Z408,
    hadn’t yet been solved. Again, the hill-climbing program had no trouble solving
    the cryptogram.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，作者们将他们的技术应用于一个同音密码挑战，名为黄道密码，该挑战发布在加密谜题平台MysteryTwister上^[9](b06.xhtml#c16-endnote-9)。这个挑战模仿了Z340，这是黄道杀手的第二个信息，与Z408不同，它尚未被破解。再次，爬山程序没有任何困难就破解了这个密码。
- en: '![](image_fi/502727c16/g16003.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/g16003.png)'
- en: 'Figure 16-4: Dhavare, Low, and Stamp’s hill climber easily broke the (already-solved)
    first Zodiac Killer message.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-4：Dhavare、Low和Stamp的爬山程序轻松破解了（已解决的）第一个黄道杀手信息。
- en: Finally, Dhavare, Low, and Stamp used their method to attack Z340 itself, which
    was one of the most famous unsolved mysteries in the world. Unfortunately, this
    time, they did not succeed. The details of their efforts can be seen in their
    article. For the trio of solvers that did manage to crack Z340 in 2020, see [Chapter
    6](c06.xhtml).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Dhavare、Low和Stamp使用他们的方法攻击了Z340本身，这个密码是世界上最著名的未解之谜之一。不幸的是，这次他们没有成功。他们努力的细节可以在他们的文章中看到。至于在2020年成功破解Z340的解密三人组，见[第6章](c06.xhtml)。
- en: Solving a Vigenère cipher with hill climbing
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山法破解维吉尼尔密码
- en: 'As pointed out in [Chapter 8](c08.xhtml), there are many ways to break a Vigenère
    cipher: some that require a computer and others that can be carried out by hand.
    One of the computer-based Vigenère-breaking methods is hill climbing. However,
    hill-climbing attacks on the Vigenère cipher seem to be less popular than on other
    ciphers, probably because there are efficient alternatives. We are not aware of
    a research paper that comprehensively covers Vigenère-cipher hill climbing, but
    at least a few implementations exist, including in CrypTool 2.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[第8章](c08.xhtml)所指出的，破解维吉尼尔密码的方法有很多种：有些方法需要计算机，而有些可以手动完成。计算机破解维吉尼尔密码的方法之一是爬山法。然而，爬山攻击维吉尼尔密码似乎比攻击其他密码算法的受欢迎程度要低，可能是因为有更高效的替代方法。我们并不知道有哪篇研究论文全面涵盖了维吉尼尔密码的爬山法，但至少已有一些实现存在，其中包括在CrypTool
    2中。
- en: Hill-climbing software can either discover the keyword length as part of the
    hill climbing or determine the information in a different way. Most tools use
    the latter approach. The program either guesses the length of the keyword with
    Friedman’s method before it starts the hill-climbing procedure, or it conducts
    a separate hill-climbing attack for every keyword length between, say, three and
    twenty-five.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山软件可以在爬山过程中发现关键词的长度，或者以其他方式确定信息。大多数工具采用后者的方法。程序要么在开始爬山过程之前，使用弗里德曼方法猜测关键词的长度，要么对每个关键词长度（比如三到二十五之间的长度）进行单独的爬山攻击。
- en: These implementations can use the same fitness function as for a simple substitution
    cipher.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现可以使用与简单替换密码相同的适应度函数。
- en: 'Success story: Jim Gillogly’s solution to IRA Vigenère cryptograms'
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：吉姆·吉洛格利对IRA维吉尼尔密码的破解
- en: In 2001, historian Tom Mahon found around 300 documents containing encrypted
    messages in a Dublin archive. These documents originated from the estate of activist
    Moss Twomey (1897–1978), who was the leader of the IRA from 1926 to 1936\. Most
    of the encrypted texts Mahon found were dispatches exchanged between the IRA headquarters
    in Dublin and IRA activists in the British Isles or the United States. In all,
    the corpus comprised about 1,300 individual cryptograms.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年，历史学家汤姆·马洪在都柏林的一处档案馆发现了约300份包含加密信息的文件。这些文件来自激进分子莫斯·图梅（1897–1978）的遗产，他曾是爱尔兰共和军（IRA）1926年至1936年的领导人。马洪发现的大多数加密文本是爱尔兰共和军总部与英国群岛或美国的IRA激进分子之间交换的电报。总体来说，这些文献包含约1,300个独立的密码文。
- en: As Mahon lacked the expertise to decipher these messages, he asked the American
    Cryptogram Association for support. Our colleague, ACA member Jim Gillogly, became
    interested, initiating a fruitful partnership between the two researchers. Over
    the next months, Jim managed to decipher almost all the cryptograms Twomey had
    left behind, providing insights into the work and structure of the IRA in the
    1920s. In 2008, Jim and Mahon published their results in a book titled *Decoding
    the IRA*.^([10](b06.xhtml#c16-endnote-10)) The book is an interesting read about
    Irish history, and the first chapter, in which Jim explains his decryptions, is
    a fascinating resource for anyone interested in codebreaking.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于马洪缺乏解密这些信息的专业知识，他向美国密码学协会请求支持。我们的同事、ACA成员吉姆·吉洛格利对此产生了兴趣，并与马洪开始了富有成效的合作。接下来的几个月，吉姆成功解密了托梅留下的大部分密码，揭示了1920年代爱尔兰共和军（IRA）的工作和结构。2008年，吉姆与马洪将他们的成果出版成书，名为《解码IRA》*Decoding
    the IRA*。这本书是一本有趣的爱尔兰历史读物，其中吉姆解释他的解密过程的第一章，对任何对破译密码感兴趣的人来说都是一个极具吸引力的资源。
- en: 'As it turned out, most of the IRA ciphertexts were encrypted using a column-based
    transposition, which is covered in the next section of this chapter. A smaller
    share consisted of short ciphertext passages, which contained strikingly many
    ampersand characters, embedded in cleartext sentences. The following message (dated
    May 4, 1923) is a typical example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，大多数IRA的密文是使用基于列的换位密码加密的，这将在本章的下一节中介绍。较小的一部分则是包含许多“&”字符的小段密文，这些字符嵌入在明文句子中。以下消息（日期为1923年5月4日）就是一个典型的例子：
- en: '![](image_fi/502727c16/g16004.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/g16004.png)'
- en: 'Here’s a transcript of the first two sentences:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前两句话的转录：
- en: '`Have you yet got X&OYC&UIJO&MN? Did you look up that man FX&WA HKGKH/ whom
    I spoke to you about.`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`你是否已经获得了X&OYC&UIJO&MN？你是否查找过我跟你提到过的那个人FX&WA HKGKH/。`'
- en: 'The letter frequencies and some other statistics suggested that its author
    had applied a Vigenère cipher. Hoping that the author had used the same key for
    each of these ciphertexts, Jim selected the first six letters of each one. As
    he didn’t know what to do with the ampersand, he ignored all six-letter blocks
    that contained this character. The following twenty-two remained:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 字母频率和其他一些统计数据表明，作者很可能使用了维吉纳密码。吉姆希望作者在这些密文中使用了相同的密钥，他选择了每个密文的前六个字母。由于他不知道如何处理“&”，所以他忽略了所有包含这个符号的六字母区块。剩下了以下二十二个区块：
- en: '`SDRDPX VVQDTY WXGKTX SJMCEK LPMOCG MVLLWK HMNMLJ VDBDFX UMDMWO GGCOCS MMNEYJ
    KHAKCQ LPQXLI HMHQLT IJMPWG DDMCEX HVQDSU OISOCX DXNXEO IJLWPS IJNBOO OIREAK`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`SDRDPX VVQDTY WXGKTX SJMCEK LPMOCG MVLLWK HMNMLJ VDBDFX UMDMWO GGCOCS MMNEYJ
    KHAKCQ LPQXLI HMHQLT IJMPWG DDMCEX HVQDSU OISOCX DXNXEO IJLWPS IJNBOO OIREAK`'
- en: 'Jim fed this block series into a hill-climbing program of his own design, starting
    with a keyword length of six. Although the twenty-two blocks came from different
    ciphertexts, characteristics reflected by the fitness function remained valid.
    In fact, the hill climber found a six-letter keyword candidate that produced promising
    results right away:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 吉姆将这一系列区块输入到他自己设计的爬山程序中，起始时使用了六个字符的关键词长度。尽管这二十二个区块来自不同的密文，但适应度函数所反映的特征仍然有效。事实上，爬山程序很快就找到了一个六个字母的候选关键词，并立刻得到了有希望的结果：
- en: '`MISTER PARTIS QCHAIR MONSTE FUNERA FAMBLE BROCAD PICTUR ORECLI ALDERM GROUND
    EMBARK FURNAC BRIGAN CONFLA XINSTR BARTHO INTERR XCONTI COMMEM COORDI INSUPE`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`MISTER PARTIS QCHAIR MONSTE FUNERA FAMBLE BROCAD PICTUR ORECLI ALDERM GROUND
    EMBARK FURNAC BRIGAN CONFLA XINSTR BARTHO INTERR XCONTI COMMEM COORDI INSUPE`'
- en: As every six-letter block represented a plausible English letter sequence, Jim
    knew that he was on the right track.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个六字母区块都代表了一个可能的英文字母序列，吉姆知道他走在了正确的轨道上。
- en: 'The hill climber had delivered the keyword `GVZKLG`. Jim used it to decrypt
    all the Vigenère messages and learned that the ampersand served as a replacement
    for the letter `Z`, which is why no `Z` appears in the ciphertexts. The message
    shown above decrypted to the following plaintext (the `Z` and `X` in `Z XCAMPBELLZ`
    were used for padding):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 攀登者已输入了关键词`GVZKLG`。吉姆利用它解密了所有的维吉纳密文，并发现“&”符号作为字母`Z`的替代，这也是为什么密文中没有出现`Z`的原因。上述消息解密后的明文如下（`Z`和`X`在`Z
    XCAMPBELLZ`中用作填充）：
- en: '`Have you yet got REPORT ON KEOGH? Did you look up that man ZCAMPBELLX whom
    I spoke to you about.`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`你是否已经获得了《KEOGH报告》？你是否查找过我跟你提到过的那个人ZCAMPBELLX。`'
- en: 'Why did the IRA use the keyword `GVZKLG`? After some experimentation, Jim found
    that it was the word `TEAPOT` encrypted with a simple substitution cipher, based
    on the following substitution table:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 IRA 使用了关键字 `GVZKLG`？经过一些实验，Jim 发现这是通过简单的替代密码加密的单词 `TEAPOT`，基于以下替代表：
- en: '`Plaintext:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`明文:` `ABCDEFGHIJKLMNOPQRSTUVWXYZ`'
- en: '`Ciphertext: ZYXWVUTSRQPONMLKJIHGFEDCBA`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`密文： ZYXWVUTSRQPONMLKJIHGFEDCBA`'
- en: As you can see, the substitution used an easy-to-remember backward alphabet.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，替代法使用了一个易于记忆的倒序字母表。
- en: Solving a columnar transposition with hill climbing
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山算法破解列置换密码
- en: We can use hill climbing to solve both complete and incomplete columnar transposition
    ciphers, which are described in Chapters [9](c09.xhtml) and [10](c10.xhtml). However,
    the fitness function employed to break a simple substitution cipher doesn’t work
    here. In general, we can’t break a transposition with any fitness function that
    is based on the frequency of letters, because transposing letters doesn’t change
    their frequencies.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用爬山算法来破解完整和不完整的列置换密码，这些内容在第 [9](c09.xhtml) 章和第 [10](c10.xhtml) 章中有介绍。然而，用来破解简单替代密码的适应度函数在这里不适用。一般来说，我们不能用任何基于字母频率的适应度函数来破解置换密码，因为置换字母并不会改变它们的频率。
- en: Instead, we can rely on the frequency of letter groups to rate the correctness
    of a plaintext candidate. We have encountered anything from letter pairs (digraphs)
    to groups of eight letters (octagraphs) used in this context.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以依赖字母组合的频率来评估明文候选的正确性。在这个过程中，我们已经遇到过从字母对（双字母组）到八字母组（八字母组）等各种不同的字母组合。
- en: 'Next, we need a way to change the transposition cipher’s key slightly. If we
    are dealing with a columnar transposition of, say, ten columns, we can write the
    key like this:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种方法来稍微改变置换密码的密钥。如果我们处理的是十列的列置换密码，我们可以这样写密钥：
- en: '`8,4,5,2,9,7,1,10,3,6.`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`8,4,5,2,9,7,1,10,3,6.`'
- en: To make a small change in the key, we might switch two randomly chosen numbers
    in this sequence. For instance, `8,4,5,2,9,7,1,10,3,6` might become `8,4,1,2,9,7,5,10,3,6`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对密钥进行小幅调整，我们可以在这个序列中交换两个随机选择的数字。例如，`8,4,5,2,9,7,1,10,3,6` 可能会变成 `8,4,1,2,9,7,5,10,3,6`。
- en: Note that the keyword used to encrypt a columnar transposition ciphertext doesn’t
    play a role in this process. Hill climbing works even if the keyword is a random
    string, like `VKWJIDPQFH`, and delivers the plaintext without re-creating the
    original keyword. In fact, determining the keyword is often impossible, as there
    might be several equivalent ones.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，用于加密列置换密文的关键字在此过程中并不起作用。即使关键字是随机字符串，比如 `VKWJIDPQFH`，爬山算法依然有效，并能在不重建原始关键字的情况下恢复明文。实际上，确定关键字通常是不可能的，因为可能有多个等效的关键字。
- en: Breaking an incomplete columnar transposition is, of course, more complex than
    solving a complete one. Still, we can think of the process as merely a special
    case of solving complete columnar transpositions. Because a computer usually does
    this task using a hill-climbing program, the complexity is generally not a problem,
    but the task may take longer.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 破解不完整的列置换密码，当然，比破解完整的密码更复杂。不过，我们可以把这个过程看作是解决完整列置换密码的一个特例。因为计算机通常使用爬山程序来完成这一任务，复杂度通常不是问题，但任务可能需要更长时间。
- en: If we do not know the length of the keyword (as is usually the case in practice),
    we have two possible approaches. First, we can make the keyword length a part
    of the key and change it slightly between hill-climbing rounds; however, this
    adds to the complexity of the program. The better approach is usually to perform
    several hill-climbing attacks for different keyword lengths. If we assume that
    the keyword has a length of between five and twenty letters, then we need sixteen
    tries—not much of a problem for today’s computers.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不知道关键字的长度（就像实际情况中通常那样），我们有两种可能的方法。首先，我们可以将关键字长度作为密钥的一部分，并在爬山迭代中稍作调整；然而，这会增加程序的复杂性。通常更好的方法是对不同的关键字长度进行多次爬山攻击。如果我们假设关键字的长度在五到二十个字母之间，那么我们需要进行十六次尝试——对于今天的计算机来说，这并不算问题。
- en: The software CrypTool 2 includes a powerful transposition hill climber. Bernhard
    Esslinger, the head of the CrypTool project, has demonstrated that this hill climber
    (even running on a PC) can easily break some of the IRA transposition cryptograms
    introduced in [Chapter 10](c10.xhtml) within two minutes.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 软件 CrypTool 2 包含一个强大的置换爬山算法。CrypTool 项目的负责人 Bernhard Esslinger 已经演示过，即使在 PC
    上运行，这个爬山算法也能轻松在两分钟内破解 [第 10 章](c10.xhtml) 中引入的一些 IRA 置换密码。
- en: 'Success story: Jim Gillogly’s solution to IRA transposition cryptograms'
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：吉姆·吉洛格利破解IRA换位密码的故事
- en: 'Let’s return to that 2008 book *Decoding the IRA* by Jim Gillogly and Tom Mahon.
    The following IRA cryptogram is one of six messages that Mahon, the historian,
    initially sent to the American Cryptogram Association in 2005\. It was subsequently
    shared on the association’s mailing list and then solved by Jim:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到2008年吉姆·吉洛格利和汤姆·马洪合著的书籍《解码IRA》中的内容。以下这段IRA密码是马洪这位历史学家最初在2005年发送给美国密码协会的六个信息之一，之后它被分享到该协会的邮件列表，并由吉姆解密：
- en: '`AEOOA IIIEO AEAEW LFRRD ELBAP RAEEA EIIIE AAAHO IFMFN COUMA`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEOOA IIIEO AEAEW LFRRD ELBAP RAEEA EIIIE AAAHO IFMFN COUMA`'
- en: '`FSOSG NEGHS YPITT WUSYA ORDOO ERHNQ EEEVR TTRDI SOSDR ISIEE ISUTI`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`FSOSG NEGHS YPITT WUSYA ORDOO ERHNQ EEEVR TTRDI SOSDR ISIEE ISUTI`'
- en: '`ERRAS TTKAH LFSUG RDLKP UEYDM ERNEO RULDC ERWTE ICNIA T`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`ERRAS TTKAH LFSUG RDLKP UEYDM ERNEO RULDC ERWTE ICNIA T`'
- en: This cryptogram consists of 151 letters. When analyzing the ciphertext, Jim
    saw that `E` was by far the most common letter, with twenty-three appearances,
    followed by `A`, `R`, and `I`. The letters `Q`, `B`, and `V` turned out to be
    very rare. These frequencies are consistent with the English language, although
    the ratio of vowels (47%) seemed a little high (40% is typical). Jim assumed that
    he was dealing with a transposition cipher. As 151 is a prime number, it could
    not be a complete columnar transposition, but an incomplete one seemed possible.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个密码由151个字母组成。在分析密文时，吉姆发现`E`是出现频率最高的字母，出现了二十三次，其次是`A`、`R`和`I`。字母`Q`、`B`和`V`则非常罕见。这些频率与英语语言相符，尽管元音的比例（47%）似乎略高（通常是40%）。吉姆假设自己正在处理一个换位密码。由于151是一个质数，它不可能是完全的列换位密码，但不完全的换位密码似乎是可能的。
- en: 'In his forty years as a codebreaker, Jim had written a considerable amount
    of cryptanalysis software for his personal use. Among other things, he was one
    of the first to use hill climbing for cryptanalysis. To solve this particular
    encryption, he used a hill-climbing program tailored to breaking an incomplete
    columnar transposition, assuming a line length of between eight and fifteen and
    starting separate runs for each length. When he tried a length of twelve, he received
    the following plaintext candidate:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在他四十年的破译生涯中，吉姆为个人使用编写了大量的密码分析软件。除此之外，他还是最早使用爬山算法进行密码分析的人之一。为了解开这个特定的加密信息，他使用了专门为破解不完全列换位密码定制的爬山算法程序，假设行长度在八到十五之间，并为每个长度启动了不同的运行。当他尝试了长度为十二时，他得到了以下明文候选：
- en: '`THEAADDARESSTOWHECIEHYOUWILLOESENDSTUFFFOR . . .`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`THEAADDARESSTOWHECIEHYOUWILLOESENDSTUFFFOR . . .`'
- en: This string, as you can tell, contains many words that make sense. It is even
    possible to read a meaningful sentence from it (`THE ADDRESS TO WHICH YOU WILL
    SEND STUFF . . .`). However, quite a few letters seem unnecessary.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串，你可以看出，包含了许多有意义的词。甚至可以从中读出一个有意义的句子（`THE ADDRESS TO WHICH YOU WILL SEND
    STUFF . . .`）。然而，许多字母似乎是不必要的。
- en: 'Jim restarted his hill-climbing program about a hundred times, with a different
    initial keyword candidate on each occasion, but he didn’t get a better result.
    His software had determined that the keyword was `FDBJALHCGKEI`—certainly not
    the original one used by the IRA, but equivalent. For further analysis, he looked
    at the transposition table his program had created:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 吉姆大约重新启动了他的爬山算法程序一百次，每次都使用不同的初始关键词候选，但始终没有得到更好的结果。他的软件已确定关键词是`FDBJALHCGKEI`—这肯定不是IRA最初使用的那个，但等效的。为了进一步分析，他查看了程序生成的换位表：
- en: '`FDBJALHCGKEI`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`FDBJALHCGKEI`'
- en: '`------------`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`THEAADDARESS`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`THEAADDARESS`'
- en: '`TOWHECIEHYOU`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOWHECIEHYOU`'
- en: '`WILLOESENDST`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`WILLOESENDST`'
- en: '`UFFFOROAQMGI`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFFFOROAQMGI`'
- en: '`SMRSAWSEEENE`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`SMRSAWSEEENE`'
- en: '`YFRUITDIERER`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`YFRUITDIERER`'
- en: '`ANDGIERIENGR`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANDGIERIENGR`'
- en: '`OCERIIFIVEHA`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`OCERIIFIVEHA`'
- en: '`ROLDECSEROSS`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLDECSEROSS`'
- en: '`DUBLONIATRYT`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`DUBLONIATRYT`'
- en: '`OMAKAIEATUET`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`OMAKAIEATUET`'
- en: '`OAPPEAEARLLK`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`OAPPEAEARLLK`'
- en: '`EFRHATI`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`EFRHATI`'
- en: 'Jim immediately recognized why his software had delivered strange results.
    The encipherer had inserted two columns (the fifth and eighth) of meaningless
    vowels into the table. In addition, his hill-climbing program had switched the
    `L` and `H` columns. Here is the correct table (with the extra vowels omitted):'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 吉姆立即意识到为什么他的程序会产生奇怪的结果。加密者在表格中插入了两列（第五列和第八列）无意义的元音。此外，他的爬山算法程序还交换了`L`和`H`列。以下是正确的表格（去掉了多余的元音）：
- en: '`FDBJAHLCGKEI`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`FDBJAHLCGKEI`'
- en: '`------------`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`THEA DD RESS`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`THEA DD RESS`'
- en: '`TOWH IC HYOU`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOWH IC HYOU`'
- en: '`WILL SE NDST`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`WILL SE NDST`'
- en: '`UFFF OR QMGI`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFFF OR QMGI`'
- en: '`SMRS SW EENE`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`SMRS SW EENE`'
- en: '`YFRU DT ERER`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`YFRU DT ERER`'
- en: '`ANDG RE ENGR`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANDG RE ENGR`'
- en: '`OCER FI VEHA`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`OCER FI VEHA`'
- en: '`ROLD SC ROSS`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLD SC ROSS`'
- en: '`DUBL IN TRYT`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`DUBL IN TRYT`'
- en: '`OMAK EI TUET`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`OMAK EI TUET`'
- en: '`OAPP EA RLLK`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`OAPP EA RLLK`'
- en: '`EFRH IT`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`EFRH IT`'
- en: 'The correct plaintext reads as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的明文如下：
- en: '`THE ADDRESS TO WHICH YOU WILL SEND STUFF FOR QMG IS MRS SWEENEY FRUDTERER
    AND GREENGROCER FIVE HAROLD’S CROSS DUBLIN TRY TO MAKE IT UP TO APPEAR LIKE FRUIT.`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`THE ADDRESS TO WHICH YOU WILL SEND STUFF FOR QMG IS MRS SWEENEY FRUDTERER
    AND GREENGROCER FIVE HAROLD’S CROSS DUBLIN TRY TO MAKE IT UP TO APPEAR LIKE FRUIT.`'
- en: The actual keyword used by the IRA has never been determined.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 伊拉使用的实际密钥至今未被确定。
- en: 'Success story: Richard Bean’s solution to the last unsolved IRA cryptogram'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Richard Bean 解开了最后一个未解的 IRA 密码
- en: 'As described in the previous section, Jim Gillogly solved hundreds of transposition
    cryptograms left behind by IRA activist Moss Twomey, but there was one he couldn’t
    break:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上一节所述，Jim Gillogly 解开了伊拉（IRA）激进分子 Moss Twomey 留下的数百个换位密码，但有一个他始终无法破解：
- en: '`GTHOO RCSNM EOTDE TAEDI NRAHE EBFNS INSGD AILLA YTTSE AOITDE`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`GTHOO RCSNM EOTDE TAEDI NRAHE EBFNS INSGD AILLA YTTSE AOITDE`'
- en: In the Twomey files, every encrypted message has a header that indicates its
    length. In this case, the number of letters is specified to be fifty-two, though
    the ciphertext consists of only fifty-one characters. It was clear that something
    had gone wrong; perhaps this was the reason Jim had not succeeded in breaking
    the message.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Twomey 的文件中，每条加密信息都有一个头部，指示其长度。在这个案例中，字母数量被指定为五十二个，尽管密文只包含五十一个字符。显然，出了问题；也许这就是
    Jim 没能成功破解该信息的原因。
- en: In 2018, our colleague Richard Bean, a mathematician from Brisbane, Australia,
    specializing in combinatorics and statistics, became interested in this cryptogram
    after reading Jim Gillogly and Tom Mahon’s book.^([11](b06.xhtml#c16-endnote-11))
    He tried to solve it with hill climbing, checking different keyword lengths and
    iteratively improving his fitness function. Drawing from George Lasry’s PhD thesis,^([12](b06.xhtml#c16-endnote-12))
    he realized that hexagraph frequencies would prove especially helpful for distinguishing
    meaningful text from gibberish. He also noticed that a keyword length of eleven
    produced the best hill-climbing scores. When adding letters to all different parts
    of the ciphertext, he received the most meaningful results by inserting a character
    between the two `E`s (letters twenty-five and twenty-six).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，我们的同事 Richard Bean，一位来自澳大利亚布里斯班的数学家，专注于组合学和统计学，在阅读 Jim Gillogly 和 Tom
    Mahon 的书后对这个密码产生了兴趣。^([11](b06.xhtml#c16-endnote-11)) 他尝试通过爬山算法来破解这个密码，检查不同的密钥长度并迭代改进适应度函数。借鉴
    George Lasry 的博士论文^([12](b06.xhtml#c16-endnote-12))，他意识到六字频率将对区分有意义的文本和胡言乱语特别有帮助。他还注意到，密钥长度为十一时，爬山算法得分最好。当他在密文的各个部分添加字母时，通过在两个
    `E`（第25和第26个字母）之间插入一个字符，他获得了最有意义的结果。
- en: 'Richard also observed that, in some of the best-scoring ciphertext candidates,
    the string `LIGNIT` appeared. As the IRA used gelignite (an explosive) in the
    1920s, this discovery provided a potential crib. When Richard forced the string
    `GELIGNIT` into the hill-climbing output, many other meaningful words became visible,
    such as `THEYRAID` and `ANDOBTAINED`. The additional letter ended up in the string
    `SCOT*AND`, so he could easily identify it as an `L`. Finally, Richard detected
    the following plaintext:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Richard 还观察到，在一些得分最高的密文候选中，出现了字符串 `LIGNIT`。由于伊拉在1920年代使用过胶炸药（gelignite，爆炸物），这一发现提供了潜在的线索。当
    Richard 强行将字符串 `GELIGNIT` 插入到爬山算法的输出中时，许多其他有意义的单词变得清晰可见，例如 `THEYRAID` 和 `ANDOBTAINED`。额外的字母最终出现在字符串
    `SCOT*AND` 中，因此他可以轻松地将其识别为 `L`。最后，Richard 检测到以下明文：
- en: '`REGELIGNITSCOTLANDSTAESTHEYRAIDEANDOBTAINEDOMEOFTHLS`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`REGELIGNITSCOTLANDSTAESTHEYRAIDEANDOBTAINEDOMEOFTHLS`'
- en: 'Here is the message in a more readable form: `RE GELIGNIT[E] SCOTLAND STA[T]ES
    THEY RAIDE[D] AND OBTAINED [S]OME OF THLS`.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更易读的消息形式：`RE GELIGNIT[E] SCOTLAND STA[T]ES THEY RAIDE[D] AND OBTAINED [S]OME
    OF THLS`。
- en: Note that four letters in the plaintext (`E`, `T`, `D`, and `S`) are missing
    and that there’s a typo in the last word. Along with the missing ciphertext letter
    `L`, these mistakes made it extremely difficult to break the message. After some
    more analysis, Richard found that he could obtain a better result if he assumed
    a twelve-letter keyword and an additional column in the transposition table containing
    the letters `E`, `T`, `D`, and `S` (four of the missing plaintext letters). Because
    the original location of this additional column isn’t known, it is very difficult
    to determine the keyword used. As we will show, `BCAFIEHGKDLJ` works, though this
    is certainly not the keyword used by the IRA.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，明文中有四个字母（`E`、`T`、`D` 和 `S`）丢失，最后一个单词中存在拼写错误。加上丢失的密文字母`L`，这些错误使得破译消息变得极其困难。经过更多分析，理查德发现，如果假设一个包含十二个字母的关键字和一个包含字母`E`、`T`、`D`、`S`（四个丢失的明文字母）的额外列，他可以得到更好的结果。由于这个额外列的原始位置未知，确定使用的关键字非常困难。正如我们将展示的那样，`BCAFIEHGKDLJ`可以工作，尽管这显然不是爱尔兰共和军使用的关键字。
- en: 'Based on this information, we can reconstruct the process by which the message
    was encrypted. We start with the plaintext, including the letters `E`, `T`, `D`,
    `S`, and `L` (which were lost at a later point in time) and keeping the typo in
    the last word:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些信息，我们可以重建消息加密的过程。我们从明文开始，包括字母`E`、`T`、`D`、`S` 和 `L`（这些字母在稍后的时间点丢失），并保持最后一个单词中的拼写错误：
- en: '`RE GELIGNITE SCOTLAND STATES THEY RAIDED AND OBTAINED SOME OF THLS`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE GELIGNITE SCOTLAND STATES THEY RAIDED AND OBTAINED SOME OF THLS`'
- en: Next, we write this text below the keyword. (Note that the letters `E`, `T`,
    `D`, and `S` appear in the next-to-last column.)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在关键字下方写下这段文本。（注意，字母`E`、`T`、`D` 和 `S` 出现在倒数第二列。）
- en: '`BCAFIEHGKDLJ`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`BCAFIEHGKDLJ`'
- en: '`------------`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`REGELIGNITES`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`REGELIGNITES`'
- en: '`COTLANDSTATE`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`COTLANDSTATE`'
- en: '`STHEYRAIDEDA`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`STHEYRAIDEDA`'
- en: '`NDOBTAINEDSO`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDOBTAINEDSO`'
- en: '`MEOFTHLS`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEOFTHLS`'
- en: 'Now, we transpose the columns such that the keyword letters are in alphabetical
    order:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们交换列的顺序，使得关键字字母按字母顺序排列：
- en: '`ABCDEFGHIJKL`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABCDEFGHIJKL`'
- en: '`------------`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`------------`'
- en: '`GRETIENGLSIE`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`GRETIENGLSIE`'
- en: '`TCOANLSDAETT`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`TCOANLSDAETT`'
- en: '`HSTEREIAYADD`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`HSTEREIAYADD`'
- en: '`ONDDABNITOES`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`ONDDABNITOES`'
- en: '`OME HFSLT`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`OME HFSLT`'
- en: 'Reading out the text column-wise, we receive:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 按列读出文本，我们得到：
- en: '`GTHOO RCSNM EOTDE TAEDI NRAHE LEBFN SINSG DAILL AYTTS EAOIT DEETDS`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`GTHOO RCSNM EOTDE TAEDI NRAHE LEBFN SINSG DAILL AYTTS EAOIT DEETDS`'
- en: 'This message consists of fifty-six letters. Somehow, the final five characters
    were later lost (the `ETDS` at the end and the `L` in `LEBEN`):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息由五十六个字母组成。不知为何，最后五个字符后来丢失了（即结尾的`ETDS`和`LEBEN`中的`L`）：
- en: '`GTHOO RCSNM EOTDE TAEDI NRAHE LEBFN SINSG DAILL AYTTS EAOIT DEETDS`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`GTHOO RCSNM EOTDE TAEDI NRAHE LEBFN SINSG DAILL AYTTS EAOIT DEETDS`'
- en: In August 2019, Richard Bean informed Klaus and Jim of this solution he had
    found. Jim was able to verify it, confirming that it was correct. Over a decade
    after his initial success, the last of Twomey’s messages had finally been deciphered.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年8月，理查德·比恩将他找到的这个解决方案告知了克劳斯和吉姆。吉姆能够验证这一结果，确认它是正确的。在最初成功的十多年后，托梅的最后一条信息终于被破译了。
- en: 'Success story: George Lasry’s solution of the double columnar transposition
    challenge'
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功故事：乔治·拉斯里的双列换位密码挑战解答
- en: In 1999, Otto Leiberich, the former president of the German crypto authority
    *Zentralstelle für das Chiffrierwesen* *(ZfCh)*, or the Central Authority for
    Cipher Affairs, published an article in the German science journal *Spektrum der
    Wissenschaft*.^([13](b06.xhtml#c16-endnote-13)) In this article, Leiberich discussed
    double columnar transposition (see Chapter 10), which East German agents had used
    during the Cold War.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 1999年，德国密码学权威机构*Zentralstelle für das Chiffrierwesen*（*ZfCh*，即中央密码事务局）前主席奥托·莱贝里奇在德国科学期刊*Spektrum
    der Wissenschaft*上发表了一篇文章。^([13](b06.xhtml#c16-endnote-13)) 在这篇文章中，莱贝里奇讨论了双列换位法（见第10章），这是东德特工在冷战期间使用的密码方法。
- en: 'Double columnar transposition is one of the best manual ciphers known. Leiberich
    and his team worked intensively on the cryptanalysis of this method, and in 1974,
    one of their results led to the unmasking of a top spy: Günter Guillaume, the
    personal secretary of the West German Chancellor, Willy Brandt. Guillaume had
    been feeding information to the East Germans. He was arrested, tried, and sentenced
    to prison but freed in 1981 as part of a prisoner exchange.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 双列换位法是已知的最好的手动密码之一。莱贝里奇和他的团队在破解这种方法方面做了大量工作，1974年，他们的一个成果导致了一个重要间谍的揭露：西德总理威利·布兰特的私人秘书，古恩特·吉约姆。吉约姆曾向东德提供情报。他被逮捕、审判并判刑入狱，但在1981年作为交换犯人的一部分被释放。
- en: 'In his 1999 article, published long after the end of the Cold War, Leiberich
    encouraged researchers to study double columnar transposition further, for the
    technique’s historical value. He also suggested that a challenge cryptogram be
    created with this cipher. His recommendations for this challenge included the
    following items:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在1999年发表的文章中，莱伯里奇鼓励研究人员进一步研究双列换位加密法，因为该技术具有历史价值。他还建议使用这种密码创建一个挑战性密码文。他对这个挑战的建议包括以下几点：
- en: Both keywords should have twenty to twenty-five characters.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个关键字的长度应该是二十到二十五个字符。
- en: The lengths of the two keywords should have no common divisor except one.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个关键字的长度应该没有除1以外的公约数。
- en: The length of the ciphertext should not be a multiple of the length of either
    keyword.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密文的长度不应为任何一个关键字长度的倍数。
- en: The ciphertext should have approximately five hundred characters (roughly the
    product of the lengths of the two keywords).
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密文应该大约有五百个字符（大致为两个关键字长度的乘积）。
- en: Leiberich never published a challenge of this kind himself, so Klaus decided
    to do so because he was always interested in challenging his readers. He chose
    a few paragraphs from the 1910 novel *Mistress Wilding* by Rafael Sabatini and
    encrypted them using two keywords consisting of English phrases with twenty to
    twenty-five letters.^([14](b06.xhtml#c16-endnote-14)) The length of the plaintext
    was 599\. Klaus published this challenge ciphertext in 2007 in an online article:^([15](b06.xhtml#c16-endnote-15))
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 莱伯里奇从未自己发布过这种挑战，因此克劳斯决定这样做，因为他一直对挑战读者感兴趣。他选择了拉斐尔·萨巴蒂尼（Rafael Sabatini）1910年小说《*Mistress
    Wilding*》中的几个段落，并使用由二十到二十五个字母组成的两个英语短语作为关键字对其进行了加密。^([14](b06.xhtml#c16-endnote-14))
    明文的长度为599。克劳斯在2007年通过一篇在线文章发布了这个挑战密码文本：^([15](b06.xhtml#c16-endnote-15))
- en: '`VESINTNVONMWSFEWNOEALWRNRNCFITEEICRHCODEE`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`VESINTNVONMWSFEWNOEALWRNRNCFITEEICRHCODEE`'
- en: '`AHEACAEOHMYTONTDFIFMDANGTDRVAONRRTORMTDHE`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`AHEACAEOHMYTONTDFIFMDANGTDRVAONRRTORMTDHE`'
- en: '`OUALTHNFHHWHLESLIIAOETOUTOSCDNRITYEELSOAN`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`OUALTHNFHHWHLESLIIAOETOUTOSCDNRITYEELSOAN`'
- en: '`GPVSHLRMUGTNUITASETNENASNNANRTTRHGUODAAAR`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`GPVSHLRMUGTNUITASETNENASNNANRTTRHGUODAAAR`'
- en: '`AOEGHEESAODWIDEHUNNTFMUSISCDLEDTRNARTMOOI`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`AOEGHEESAODWIDEHUNNTFMUSISCDLEDTRNARTMOOI`'
- en: '`REEYEIMINFELORWETDANEUTHEEEENENTHEOOEAUEA`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`REEYEIMINFELORWETDANEUTHEEEENENTHEOOEAUEA`'
- en: '`EAHUHICNCGDTUROUTNAEYLOEINRDHEENMEIAHREED`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAHUHICNCGDTUROUTNAEYLOEINRDHEENMEIAHREED`'
- en: '`OLNNIRARPNVEAHEOAATGEFITWMYSOTHTHAANIUPTA`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`OLNNIRARPNVEAHEOAATGEFITWMYSOTHTHAANIUPTA`'
- en: '`DLRSRSDNOTGEOSRLAAAURPEETARMFEHIREAQEEOIL`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`DLRSRSDNOTGEOSRLAAAURPEETARMFEHIREAQEEOIL`'
- en: '`SEHERAHAOTNTRDEDRSDOOEGAEFPUOBENADRNLEIAF`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`SEHERAHAOTNTRDEDRSDOOEGAEFPUOBENADRNLEIAF`'
- en: '`RHSASHSNAMRLTUNNTPHIOERNESRHAMHIGTAETOHSE`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`RHSASHSNAMRLTUNNTPHIOERNESRHAMHIGTAETOHSE`'
- en: '`NGFTRUANIPARTAORSIHOOAEUTRMERETIDALSDIRUA`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`NGFTRUANIPARTAORSIHOOAEUTRMERETIDALSDIRUA`'
- en: '`IEFHRHADRESEDNDOIONITDRSTIEIRHARARRSETOIH`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEFHRHADRESEDNDOIONITDRSTIEIRHARARRSETOIH`'
- en: '`OKETHRSRUAODTSCTTAFSTHCAHTSYAOLONDNDWORIW`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`OKETHRSRUAODTSCTTAFSTHCAHTSYAOLONDNDWORIW`'
- en: '`HLENTHHMHTLCVROSTXVDRESDR`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`HLENTHHMHTLCVROSTXVDRESDR`'
- en: 'Neither Klaus nor Leiberich expected that this cryptogram could be broken;
    however, six years later, in 2013, Klaus received an email from our colleague,
    the then-unknown Israeli George Lasry, who claimed to have solved the double columnar
    transposition challenge. His solution proved correct:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是克劳斯还是莱伯里奇都没想到这个密码文能被破解；然而，六年后，即2013年，克劳斯收到了当时尚未出名的以色列人乔治·拉斯里（George Lasry）发来的邮件，他声称自己已成功破解了这个双列换位加密挑战。他的解法被证明是正确的：
- en: '`THEGIRLHADARRIVEDATLUPTONHOUSEAHALFHOURAH`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`THEGIRLHADARRIVEDATLUPTONHOUSEAHALFHOURAH`'
- en: '`EADOFMISSWESTMACOTTANDUPONHERARRIVALSHEHA`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`EADOFMISSWESTMACOTTANDUPONHERARRIVALSHEHA`'
- en: '`DEXPRESSEDSURPRISEEITHERFEIGNEDORREALATFI`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEXPRESSEDSURPRISEEITHERFEIGNEDORREALATFI`'
- en: '`NDINGRUTHSTILLABSENTDETECTINGTHEALARMTHAT`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDINGRUTHSTILLABSENTDETECTINGTHEALARMTHAT`'
- en: '`DIANAWASCAREFULTOTHROWINTOHERVOICEANDMANN`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`DIANAWASCAREFULTOTHROWINTOHERVOICEANDMANN`'
- en: '`ERHERMOTHERQUESTIONEDHERANDELICITEDTHESTO`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`ERHERMOTHERQUESTIONEDHERANDELICITEDTHESTO`'
- en: '`RYOFHERFAINTNESSANDOFRUTHSHAVINGRIDDENONA`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`RYOFHERFAINTNESSANDOFRUTHSHAVINGRIDDENONA`'
- en: '`LONETOMRWILDINGSSOOUTRAGEDWASLADYHORTONTH`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`LONETOMRWILDINGSSOOUTRAGEDWASLADYHORTONTH`'
- en: '`ATFORONCEINAWAYTHISWOMANUSUALLYSOMEEKANDE`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATFORONCEINAWAYTHISWOMANUSUALLYSOMEEKANDE`'
- en: '`ASELOVINGWASROUSEDTOANENERGYANDANGERWITHH`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`ASELOVINGWASROUSEDTOANENERGYANDANGERWITHH`'
- en: '`ERDAUGHTERANDHERNIECETHATTHREATENEDTOREMO`'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`ERDAUGHTERANDHERNIECETHATTHREATENEDTOREMO`'
- en: '`VEDIANAATONCEFROMTHEPERNICIOUSATMOSPHEREO`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`VEDIANAATONCEFROMTHEPERNICIOUSATMOSPHEREO`'
- en: '`FLUPTONHOUSEANDCARRYHERHOMETOTAUNTONRUTHF`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLUPTONHOUSEANDCARRYHERHOMETOTAUNTONRUTHF`'
- en: '`OUNDHERSTILLATHERREMONSTRANCESARRIVEDINDE`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`OUNDHERSTILLATHERREMONSTRANCESARRIVEDINDE`'
- en: '`EDINTIMEFORHERSHAREOFTHEM`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDINTIMEFORHERSHAREOFTHEM`'
- en: 'Interestingly, George had found two different methods for breaking the challenge.
    In the first, a dictionary attack, his computer program had guessed the two keywords:
    `PREPONDERANCEOFEVIDENCE` and `TOSTAYYOUFROMELECTION`. His second method was based
    on hill climbing. Later, Jim came up with a third method: using a computer program,
    he checked all nineteenth-century texts available online and identified the one
    Klaus had chosen.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，George找到了解决这个挑战的两种不同方法。在第一种方法中，他通过字典攻击，计算机程序猜出了两个关键词：`PREPONDERANCEOFEVIDENCE`和`TOSTAYYOUFROMELECTION`。他的第二种方法是基于爬山算法。后来，Jim提出了第三种方法：使用计算机程序，他检查了所有可以在线访问的十九世纪文本，并找出了Klaus选择的那一篇。
- en: Readers interested in this ingenious act of cryptanalysis are advised to read
    George’s 2014 publication in *Cryptologia* (co-written with Arno Wacker and Nils
    Kopal).^([16](b06.xhtml#c16-endnote-16)) If you are interested in an even more
    difficult cryptogram of this type, see the “Double Columnar Transposition Reloaded
    Challenge” in the “Challenges” section of [Chapter 10](c10.xhtml).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 对这项巧妙的密码分析技术感兴趣的读者，建议阅读George于2014年在*Cryptologia*期刊上发表的文章（与Arno Wacker和Nils
    Kopal合著）。^([16](b06.xhtml#c16-endnote-16)) 如果你对这种类型的更困难密码感兴趣，可以查看[第10章](c10.xhtml)“挑战”部分中的“重载双列换位挑战”。
- en: Solving a turning grille cipher with hill climbing
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山算法解密旋转格栅密码
- en: 'Hill climbing has proven to be a very powerful method of breaking turning grille
    cryptograms. As we will show, we can solve even large turning grilles, consisting
    of 20 × 20 squares or more, with this technique. This is because we can easily
    construct a turning grille of size 2*n* × 2*n* with an *n* × *n* matrix, as described
    in [Chapter 11](c11.xhtml). As an example, the following diagram shows how a 3
    × 3 matrix can become a 6 × 6 grille:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山算法已被证明是破解旋转格栅密码的非常有效方法。正如我们所展示的，我们可以使用这种技术解开甚至更大的旋转格栅，包含20 × 20个方格或更多。这是因为我们可以轻松构建一个大小为2*n*
    × 2*n*的旋转格栅，使用一个*n* × *n*矩阵，如[第11章](c11.xhtml)所描述的那样。举个例子，下面的图示显示了如何将一个3 × 3矩阵变成一个6
    × 6的格栅：
- en: '![](image_fi/502727c16/g16005.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/g16005.png)'
- en: 'In a computer program, the number sequence in the 3 × 3 matrix (`2,4,1,1,4,3,3,2,2`)
    can represent the grille, which serves as this encryption method’s key. Next,
    we need a way to change the grille slightly. We can do this, for instance, by
    adding 2 to one of the numbers representing the grille, as in the following example.
    If the result were greater than 4, we would subtract 4 from it:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机程序中，3 × 3矩阵中的数字序列（`2,4,1,1,4,3,3,2,2`）可以表示格栅，它作为此加密方法的密钥。接下来，我们需要一种方法来稍微改变格栅。我们可以通过增加2到表示格栅的某个数字来实现这一点，例如下面的例子。如果结果大于4，我们就减去4：
- en: '`Old key: 2,4,1,1,4,3,3,2,2`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`旧密钥: 2,4,1,1,4,3,3,2,2`'
- en: '`New key: 2,4,3,1,4,3,3,2,2`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`新密钥: 2,4,3,1,4,3,3,2,2`'
- en: For a turning grille hill climber, we also need to modify the kind of fitness
    function that we employ to rate the correctness of a plaintext candidate. We can’t
    base it on the frequency of letters, as this kind of encryption doesn’t change
    a plaintext’s letter frequencies. (No transposition cipher does.) Instead, we
    might create a fitness function based on the frequencies of digraphs, trigraphs,
    or other *n*-graphs.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旋转格栅爬山算法，我们还需要修改我们用来评估明文候选正确性的适应度函数。我们不能基于字母的频率，因为这种加密方法不会改变明文中字母的频率。（没有任何换位密码会这样做。）相反，我们可以创建一个基于双字母、三字母组合或其他*n*字母组合的适应度函数。
- en: The computer program JCrypTool offers a turning grille solver based on hill
    climbing.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序JCrypTool提供了一个基于爬山算法的旋转格栅解密器。
- en: 'Success story: Bart Wenmeckers’s solution to a turning grille cryptogram'
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Bart Wenmeckers解决旋转格栅密码的方案
- en: In [Chapter 11](c11.xhtml), we mentioned that the Italian crypto-history expert
    Paolo Bonavoglia recently found a turning grille cryptogram in a notebook belonging
    to his famous grandfather, Luigi Sacco (1883–1970).^([17](b06.xhtml#c16-endnote-17))
    After solving the cryptogram himself, Paolo also published it as a challenge in
    the “Cryptograms & Classical Ciphers” Facebook group. Our colleague Bart Wenmeckers,
    the host of the group, took up the challenge.^([18](b06.xhtml#c16-endnote-18))
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](c11.xhtml)中，我们提到意大利密码历史专家Paolo Bonavoglia最近在他著名的祖父Luigi Sacco（1883–1970）的一本笔记本中发现了一个旋转格栅密码。^([17](b06.xhtml#c16-endnote-17))
    在自己解开这个密码后，Paolo还将其作为挑战发布在“Cryptograms & Classical Ciphers”Facebook小组中。我们的同事Bart
    Wenmeckers，小组的主持人，接受了这个挑战。^([18](b06.xhtml#c16-endnote-18))
- en: 'Like many other specialists in breaking classical ciphers, Bart makes frequent
    use of hill climbing, employing a modified program that he wrote himself. The
    program returns the grille written in a line, with the letter `C` representing
    a hole and `D` representing no hole. It also returns the result of its fitness
    function (the higher, the better) and the plaintext candidate produced each time
    that result increases. Here’s the final part of the log of Bart’s hill-climbing
    attack on Sacco’s turning grille cryptogram:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多破解经典密码的专家一样，Bart 经常使用爬山算法，采用他自己编写的修改版程序。该程序返回以一行表示的 grille，其中字母 `C` 代表一个孔，`D`
    代表没有孔。它还返回其适应度函数的结果（越高越好）以及每次结果增加时生成的明文候选。以下是 Bart 对 Sacco 旋转 grille 密码攻击日志的最后一部分：
- en: '`DDCCCDCDDDDDDDDCDDCDDDDDDCDDDDDDDDDCDDCCCCDDDDDDD, 323`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCCDCDDDDDDDDCDDCDDDDDDCDDDDDDDDDCDDCCCCDDDDDDD, 323`'
- en: '`NOSPDSEHERSEEUCHNGENDWITRSTWRKECYHEIESULLIUNTEXE`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOSPDSEHERSEEUCHNGENDWITRSTWRKECYHEIESULLIUNTEXE`'
- en: '`DDCCCDCDDDDDDDDCDDCDDDDDDCDDDDDDDDDCCDCCDCDDDDDDD, 329`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCCDCDDDDDDDDCDDCDDDDDDCDDDDDDDDDCCDCCDCDDDDDDD, 329`'
- en: '`NOSPDSEHWEREESUCHNGENDITRTWURKECYHEIESLLIUNTEXSE`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOSPDSEHWEREESUCHNGENDITRTWURKECYHEIESLLIUNTEXSE`'
- en: '`DDCCCDCDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCDDDDDDD, 334`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCCDCDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCDDDDDDD, 334`'
- en: '`NOSPSECHWEREESCHNGENDXITRTWURDKEYHEIESULLIUNTESE`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOSPSECHWEREESCHNGENDXITRTWURDKEYHEIESULLIUNTESE`'
- en: '`DDCCCDDDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCCDDDDDD, 344`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCCDDDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCCDDDDDD, 344`'
- en: '`NOSSECHWEREYEESCHNGENDXIPRTWURDKEHEISULLIUNTESET`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOSSECHWEREYEESCHNGENDXIPRTWURDKEHEISULLIUNTESET`'
- en: '`CDCCCDDDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCDDDDDDD, 362`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDCCCDDDDDDDDDDDDDCDDDDDDCDDDDDDDCDCCDCCDCDDDDDDD, 362`'
- en: '`ENOSSECHWEREEPSCHNGENDXIRTWURDKEHEITSULLIUNTESYE`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENOSSECHWEREEPSCHNGENDXIRTWURDKEHEITSULLIUNTESYE`'
- en: '`CDCCCDDDDDDDDDDDDCCDDDDDDDDDDDDDDCDCCDCCDCDDDDDDD, 385`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDCCCDDDDDDDDDDDDCCDDDDDDDDDDDDDDCDCCDCCDCDDDDDDD, 385`'
- en: '`ENOSISCHWEREEPSCHENGNDXIRTWURDEEHEITSULLUNKTESYE`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENOSISCHWEREEPSCHENGNDXIRTWURDEEHEITSULLUNKTESYE`'
- en: '`DDCCCDDDDDDDDDDDDCCDDDDDDDDDDDDDDCDCCDCCDCDDDDDDC, 402`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCCDDDDDDDDDDDDCCDDDDDDDDDDDDDDCDCCDCCDCDDDDDDC, 402`'
- en: '`NOSISCHWERETESCHENGNDXYIERTWURDEEHEISPULLUNKTESE`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOSISCHWERETESCHENGNDXYIERTWURDEEHEISPULLUNKTESE`'
- en: '`DDCCDDDDDDDDDDCDCCDDDDDDDDDDDDDDDCDCCDCCDCDDDDDDC, 410`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDCCDDDDDDDDDDCDCCDDDDDDDDDDDDDDDCDCCDCCDCDDDDDDC, 410`'
- en: '`NOLLICHWERETESSSCHENGXYIERTWURDENDEISPUUNKTEESHE`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOLLICHWERETESSSCHENGXYIERTWURDENDEISPUUNKTEESHE`'
- en: '`DDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDCDDDDDDDDDDCCDC, 416`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`DDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDCDDDDDDDDDDCCDC, 416`'
- en: '`STWURDENDEITUUNKTEESEYHEENOLLICHWERIESPRSSCHENGX`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`STWURDENDEITUUNKTEESEYHEENOLLICHWERIESPRSSCHENGX`'
- en: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDCDDDDDDDDDDCCDD, 424`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDCDDDDDDDDDDCCDD, 424`'
- en: '`ESTWURDENDEIPUUNKTEESEHENOLLICHWERITESRSSCHENGXY`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESTWURDENDEIPUUNKTEESEHENOLLICHWERITESRSSCHENGXY`'
- en: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDDDDDDDDDDDCCCDD, 425`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDDCCDDDDDDDDDDDCCCDD, 425`'
- en: '`ESTWURDENHEIPULUNKTEESEENOSLICHWERITERSSCHENGDXY`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESTWURDENHEIPULUNKTEESEENOSLICHWERITERSSCHENGDXY`'
- en: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDCCDDDDDDDDDDDDCCCDD, 428`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDDDDCDDDCCDCCDCDDDDDDDDDDDDDDCCDDDDDDDDDDDDCCCDD, 428`'
- en: '`ESTWURDEEHEIPULLUNKTESEENOSISCHWERITERSCHENGNDXY`'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESTWURDEEHEIPULLUNKTESEENOSISCHWERITERSCHENGNDXY`'
- en: '`CDDDDCDDDDCDCCDCDDDDDDDDDDDDDDDCCDCDDDDCDDDDDCCDD, 442`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDDDDCDDDDCDCCDCDDDDDDDDDDDDDDDCCDCDDDDCDDDDDCCDD, 442`'
- en: '`ESWURDENDREIPUNKTEGESEHENOTLLICHWEITESRSSUCHENXY`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESWURDENDREIPUNKTEGESEHENOTLLICHWEITESRSSUCHENXY`'
- en: 'If you know German (the language of the original message), you’ll see words
    show up immediately. Here’s the plaintext (the mistakes were present in the original):
    `ES WURDEN DREI PUNKTE GESEHEN OTLLICH WEITESRSSUCHEN XY`.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你懂德语（原文的语言），你会马上看到单词出现。以下是明文（原文中有错误）：`ES WURDEN DREI PUNKTE GESEHEN OTLLICH
    WEITESRSSUCHEN XY`。
- en: It translates to `THREE POINTS HAVE BEEN SEEN. KEEP ON SEARCHING IN THE EAST
    XY.` The `X` and `Y` at the end of the message are almost certainly padding that
    was added to ensure a plaintext of exactly forty-eight letters.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 它的翻译是：`THREE POINTS HAVE BEEN SEEN. KEEP ON SEARCHING IN THE EAST XY.` 最后消息中的
    `X` 和 `Y` 几乎肯定是填充符，目的是确保明文恰好有四十八个字母。
- en: 'Success story: Armin Krauss’s solution to a turning grille challenge'
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Armin Krauss 解开旋转 grille 挑战的方案
- en: Can a 20 × 20 turning grille cryptogram be broken with hill climbing? Because
    Klaus had never found an answer to this question in the literature, he decided
    to create a challenge for his blog readers that tested the idea. He took an English
    text consisting of 400 letters, encrypted it with a 20 × 20 turning grille, and
    published the ciphertext on his blog in 2017:^([19](b06.xhtml#c16-endnote-19))
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 20 × 20 的旋转 grille 密码可以用爬山算法破解吗？由于 Klaus 从未在文献中找到这个问题的答案，他决定为他的博客读者创造一个挑战，测试这个想法。他选取了一段由
    400 个字母组成的英文文本，用 20 × 20 旋转 grille 进行了加密，并在 2017 年将密文发布到他的博客上：^([19](b06.xhtml#c16-endnote-19))
- en: '`ENPAIGEZLANEDMTHSENF`'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENPAIGEZLANEDMTHSENF`'
- en: '`EIORDEMATANNATMOOFSL`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`EIORDEMATANNATMOOFSL`'
- en: '`AEPLMHOIERITOECDMVNE`'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`AEPLMHOIERITOECDMVNE`'
- en: '`OXNPBROEDOIETRANEEIU`'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`OXNPBROEDOIETRANEEIU`'
- en: '`XPNPONRNTAREOMMYDWIT`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`XPNPONRNTAREOMMYDWIT`'
- en: '`IANHTNEIOODNSOUOTETD`'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`IANHTNEIOODNSOUOTETD`'
- en: '`MOOVEARPHRIOLAEGNALN`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`MOOVEARPHRIOLAEGNALN`'
- en: '`INATTFINOREATDNGWDDA`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`INATTFINOREATDNGWDDA`'
- en: '`UHSIEURININGTTEDASTN`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`UHSIEURININGTTEDASTN`'
- en: '`ATGHPEESAOMEISEADRMM`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATGHPEESAOMEISEADRMM`'
- en: '`YANTSOEJOESYTERTHACH`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`YANTSOEJOESYTERTHACH`'
- en: '`BNINCALURDCHLEALLHLA`'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`BNINCALURDCHLEALLHLA`'
- en: '`OIFWESTEHENGREERRTHE`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`OIFWESTEHENGREERRTHE`'
- en: '`SAAMSIBEIOVNSAINARLI`'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`SAAMSIBEIOVNSAINARLI`'
- en: '`DTESGIIETTUCNARILYLO`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`DTESGIIETTUCNARILYLO`'
- en: '`ESENRUUISINEADSRANLA`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESENRUUISINEADSRANLA`'
- en: '`COUWNEAUETCPOHRNSDTW`'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`COUWNEAUETCPOHRNSDTW`'
- en: '`BYEOFNINGHERHIVNTOTE`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`BYEOFNINGHERHIVNTOTE`'
- en: '`MNTBERAEHEUNSPNSUTIX`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`MNTBERAEHEUNSPNSUTIX`'
- en: '`NPOITYPFIKSAVULEATRA`'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`NPOITYPFIKSAVULEATRA`'
- en: Three days after Klaus’s publication, our colleague Armin Krauss posted the
    solution:^([20](b06.xhtml#c16-endnote-20))
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Klaus 发布文章三天后，我们的同事 Armin Krauss 发布了解决方案：^([20](b06.xhtml#c16-endnote-20))
- en: '`PLANS FOR MANNED MOON EXPEDITIONS ORIGINATED DURING THE EISENHOWER ERA IN
    AN ARTICLE SERIES WERNHER VON BRAUN POPULARIZED THE IDEA OF A MOON EXPEDITION
    A MANNED MOON LANDING POSED MANY TECHNICAL CHALLENGES BESIDES GUIDANCE AND WEIGHT
    MANAGEMENT ATMOSPHERIC REENTRY WITHOUT OVERHEATING WAS A MAJOR HURDLE AFTER THE
    SOVIET UNIONS LAUNCH OF THE SPUTNIK SATELLITE VON BRAUN PROMOTED A PLAN FOR THE
    UNITED STATES ARMY TO ESTABLISH A MILITARY LUNAR OUTPOST BY NINETEEN SIXTY FIVE`'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 有人类登月探险计划的起源可以追溯到艾森豪威尔时代，在一系列文章中，Wernher von Braun 推广了月球探险的想法。载人登月面临许多技术挑战，除了导航和重量管理，气象再入大气层而不发生过热是一个主要障碍。在苏联发射了“斯普特尼克”卫星之后，Von
    Braun 提出了一个计划，建议美国军方在1965年之前在月球上建立一个军事前哨站。
- en: Armin had used a hill-climbing and simulated-annealing program of his own design
    to break this cryptogram. The fitness function he applied was based on trigraph
    frequencies. In addition, Armin used a sequence of numbers between one and four
    to represent a grille, as explained in the introduction to this section. In each
    round, he changed one of the numbers at random.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: Armin 使用了他自己设计的爬山法和模拟退火程序来破解这个密码。他使用的适应度函数基于三字母频率。此外，Armin 使用了一个由1到4之间的数字组成的序列来表示格子，如本节的介绍中所述。在每一轮中，他随机更改一个数字。
- en: Because the original ciphertext contained a mistake, Armin had to perform some
    additional manual codebreaking. After he learned via Google that Klaus’s plaintext
    was derived from a Wikipedia article, he managed to solve the challenge in spite
    of the error.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 由于原始密文包含错误，Armin 必须进行一些额外的手动破译。在他通过 Google 了解到 Klaus 的明文来自维基百科的一篇文章后，他尽管遇到错误，还是成功解决了这个挑战。
- en: Solving a general digraph substitution with hill climbing
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山法解决一般双字母替换问题
- en: Hill climbing is a perfect approach to solving general digraph substitutions.
    This technique resembles the breaking of simple substitution ciphers; we can even
    use a comparable fitness function, based on letter or *n*-graph frequencies, to
    check whether a plaintext candidate looks like real language. However, we need
    a larger substitution table (one with 676 columns, in the case of a twenty-six-letter
    alphabet) and a larger ciphertext.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山法是解决一般双字母替换的完美方法。这种技术类似于破译简单替换密码；我们甚至可以使用一个类似的适应度函数，基于字母或*n*字母组合的频率，来检查明文候选是否像真实语言。然而，我们需要一个更大的替换表（如果是26个字母的字母表，则需要676列）和一个更大的密文。
- en: 'Success story: Some digraph challenges'
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功故事：一些双字母挑战
- en: 'Because researchers have published little in the field of general digraph substitution,
    Klaus decided to challenge his blog readers with digraph cryptograms. This led
    to a series of notable codebreaking records:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 由于研究人员在一般双字母替换领域的研究较少，Klaus 决定挑战他的博客读者，通过双字母密码进行解密。这导致了一系列显著的破译记录：
- en: 'In February 2017, on his blog, Klaus published two digraph challenges: “Bigram
    5000” and “Bigram 2500.”^([21](b06.xhtml#c16-endnote-21)) *Bigram* is another
    word for *digraph*, while 2,500 and 5,000 were the number of letters contained
    in the challenge ciphertexts. Within three days, German codebreaker Norbert Biermann,
    supported by Armin Krauß, found both plaintexts with a hill-climbing program of
    Norbert’s own design.'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2017年2月，Klaus 在他的博客上发布了两个双字母挑战：“Bigram 5000”和“Bigram 2500”。^([21](b06.xhtml#c16-endnote-21))
    *Bigram* 是 *双字母组合* 的另一个词，而2,500和5,000是挑战密文中包含的字母数量。在三天内，德国破译者 Norbert Biermann
    在 Armin Krauß 的支持下，使用 Norbert 自己设计的爬山法程序找出了这两个明文。
- en: 'Two years later, in July 2019, Klaus created a new and even shorter challenge.
    This time, the ciphertext consisted of only 1,346 letters: the “Bigram 1346.”^([22](b06.xhtml#c16-endnote-22))
    Four weeks later, Biermann once again broke this challenge, setting a new record.^([23](b06.xhtml#c16-endnote-23))'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两年后，即2019年7月，Klaus 创建了一个全新的、甚至更短的挑战。这次，密文仅包含1,346个字母：“Bigram 1346”。^([22](b06.xhtml#c16-endnote-22))
    四周后，Biermann 再次成功破解此挑战，创下了新纪录。^([23](b06.xhtml#c16-endnote-23))
- en: 'A few months later, in October 2019, Klaus challenged his readers yet again
    with an even shorter ciphertext of the same kind, consisting of exactly 1,000
    letters.^([24](b06.xhtml#c16-endnote-24)) Again, the cryptogram was broken quickly,
    setting another record. This time, the solution came from two blog readers: Jarl
    Van Eycke of Belgium and Louie Helm of Switzerland, who worked together.^([25](b06.xhtml#c16-endnote-25))
    They solved the challenge with a highly sophisticated hill-climbing program that
    included a fitness function based on octagraph frequencies. Given that a twenty-six-letter
    alphabet can generate approximately 200 billion eight-letter blocks, the codebreakers
    needed huge amounts of text to generate useful reference statistics. They used
    about two terabytes of English text taken from a database they created from millions
    of books, all of Wikipedia, seven billion words extracted from Usenet posts, and
    more.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个月后，即 2019 年 10 月，Klaus 再次向读者发起挑战，提出了一个更短的同类密文，包含恰好 1,000 个字母。^([24](b06.xhtml#c16-endnote-24))
    再次，这个密文被迅速破解，创下了另一个记录。这次，解决方案来自两位博客读者：比利时的 Jarl Van Eycke 和瑞士的 Louie Helm，他们共同合作解决了这个挑战。^([25](b06.xhtml#c16-endnote-25))
    他们使用一个高度复杂的爬山程序解开了挑战，该程序包括一个基于八元组频率的适应度函数。鉴于一个 26 字母的字母表可以生成大约 2000 亿个八字母块，破译者需要大量的文本来生成有用的参考统计数据。他们使用了约两太字节的英语文本，这些文本来自他们创建的一个数据库，该数据库包含了数百万本书籍、维基百科中的所有内容、从
    Usenet 帖子中提取的 70 亿个单词等。
- en: 'Two months later, in December 2019, Klaus published an even shorter challenge,
    consisting of only 750 letters: “Bigram 750.”^([26](b06.xhtml#c16-endnote-26))
    Again, Van Eycke and Helm solved it within two days.^([27](b06.xhtml#c16-endnote-27))'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个月后，即 2019 年 12 月，Klaus 发布了一个更短的挑战，只包含 750 个字母：“Bigram 750”。^([26](b06.xhtml#c16-endnote-26))
    再次，Van Eycke 和 Helm 在两天内解决了它。^([27](b06.xhtml#c16-endnote-27))
- en: After Van Eycke and Helm’s success, Klaus published the “Bigram 600” challenge
    in March 2020 (see [Chapter 12](c12.xhtml)).
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Van Eycke 和 Helm 成功之后，Klaus 于 2020 年 3 月发布了“Bigram 600”挑战（见[第12章](c12.xhtml)）。
- en: As of this writing, the “Bigram 750” ciphertext remains the shortest general
    digraph cryptogram ever solved.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，“Bigram 750”密文仍然是已解密的最短通用二元组密文。
- en: Solving a Playfair cipher with hill climbing
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山算法解密 Playfair 密码
- en: Hill climbing has proven very efficient for breaking Playfair cryptograms. It
    works much better than the manual codebreaking technique we introduced in Chapter
    12. It is also superior to a dictionary attack, as it doesn’t require the codebreaker
    to derive the Playfair matrix from a guessable keyword.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山算法已被证明在破解 Playfair 密文方面非常高效。它比我们在第 12 章中介绍的手动破译技术要好得多。它也优于字典攻击，因为它不需要破译者从一个可猜测的关键字推导出
    Playfair 矩阵。
- en: To introduce a small change in the Playfair matrix, all we need to do is switch
    the positions of two letters. Defining a fitness function is also straightforward,
    because we can rely on letter frequencies to judge whether a plaintext candidate
    looks like real language. Using the frequencies of other *n*-graphs (ranging from
    digraphs to octagraphs) can be even more helpful for deducing the final plaintext.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Playfair 矩阵中引入一个小变化，我们所需要做的就是交换两个字母的位置。定义适应度函数也很简单，因为我们可以依赖字母频率来判断一个明文候选是否像真实语言。使用其他
    *n*-元组（从二元组到八元组）的频率甚至可以更有助于推断最终的明文。
- en: How quickly could a computer handle this task? The software CrypTool 2 features
    a powerful Playfair hill climber, named Playfair Analyzer, which includes a fitness
    function based on hexagraph frequencies. Esslinger, the head of the CrypTool project,
    showed us how this component performed on a Playfair cryptogram from Dorothy L.
    Sayers’s 1932 novel *Have His Carcase*. In [Chapter 12](c12.xhtml), we dedicated
    multiple pages to describing how difficult this same cryptogram is to break without
    computer support. [Figure 16-5](#figure16-5) shows how Playfair Analyzer works.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 一台计算机能多快处理这个任务？CrypTool 2 软件具有一个强大的 Playfair 爬山算法，名为 Playfair Analyzer，它包括一个基于六元组频率的适应度函数。CrypTool
    项目的负责人 Esslinger 向我们展示了该组件如何在 Dorothy L. Sayers 1932 年的小说《*Have His Carcase*》中的
    Playfair 密码中表现。在[第12章](c12.xhtml)中，我们专门用好几页描述了在没有计算机支持的情况下，这个密文是多么难以破解。[图16-5](#figure16-5)
    展示了 Playfair Analyzer 是如何工作的。
- en: '![](image_fi/502727c16/f16004.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/f16004.png)'
- en: 'Figure 16-5: The software CrypTool 2, running on a PC, breaks the Playfair
    cryptogram from Dorothy L. Sayers’s novel *Have His Carcase* within a minute.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-5：CrypTool 2 软件在 PC 上运行，在一分钟内破解了 Dorothy L. Sayers 小说《*Have His Carcase*》中的
    Playfair 密文。
- en: After the user has copied the ciphertext into the left window and started the
    hill climber, the software displays every climbing step in the middle window.
    CrypTool 2 needs about a minute to produce both the cryptogram’s key and the plaintext.
    Even an experienced codebreaker would require hours to perform this task without
    computer support.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将密文复制到左侧窗口并启动爬山算法后，软件会在中间窗口显示每一步的爬升过程。CrypTool 2大约需要一分钟时间生成密码的密钥和明文。即使是经验丰富的密码破译者，没有计算机支持也需要几个小时才能完成这项任务。
- en: 'The software displays the following correct Playfair matrix, written on one
    line, in the lower-right window. It uses the keyword `MONARCHY`:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 软件在右下窗口显示了以下正确的Playfair矩阵，并使用了关键词`MONARCHY`：
- en: '`MONAR|CHYBD|EFGIK|LPQST|UVWXZ`'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`MONAR|CHYBD|EFGIK|LPQST|UVWXZ`'
- en: You can see the plaintext in the upper-right window or reproduced in [Chapter
    12](c12.xhtml).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在右上窗口中看到明文，或者在[第12章](c12.xhtml)中查看。
- en: 'Success story: Dan Girard’s solution to the Cheltenham Letter Stone'
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：丹·吉拉尔破解切尔滕纳姆字母石
- en: 'In 2005, British artist Gordon Young created the *Listening Stones* in Cheltenham,
    United Kingdom (see [Chapter 4](c04.xhtml)). Two of these ten-foot-tall stones,
    called the Number Stone and the Letter Stone, bear encrypted inscriptions. Here
    is the message on the Letter Stone, as provided to us by the sculptor:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年，英国艺术家戈登·杨（Gordon Young）在英国切尔滕纳姆创作了*聆听之石*（Listening Stones）（参见[第4章](c04.xhtml)）。这十英尺高的石雕中有两块，分别叫做数字石（Number
    Stone）和字母石（Letter Stone），上面刻有加密铭文。以下是雕塑家提供的字母石上的信息：
- en: '`EC KH LO PT OA DL LU AB KW LO YS NA EC BF MZ FA LC NQ XR UT DK`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`EC KH LO PT OA DL LU AB KW LO YS NA EC BF MZ FA LC NQ XR UT DK`'
- en: '`SQ KH EC ZK NL CK SQ CB SA SA QU LF MZ IV FA LC OA VB OK CK AV`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQ KH EC ZK NL CK SQ CB SA SA QU LF MZ IV FA LC OA VB OK CK AV`'
- en: '`DY SY LO WL KL NI BH BX LO MY VA EK AP LB CW PY OA OK MO AV BL`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`DY SY LO WL KL NI BH BX LO MY VA EK AP LB CW PY OA OK MO AV BL`'
- en: '`VM PK LC UP BY KQ MK BN AN BF GA YM LO AK NI BP PI HT TI NT CV`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`VM PK LC UP BY KQ MK BN AN BF GA YM LO AK NI BP PI HT TI NT CV`'
- en: '`EC FI LW CQ GL TI KL NI BH RP GZ SU LQ AS YT GA VB FW NM XC UP`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`EC FI LW CQ GL TI KL NI BH RP GZ SU LQ AS YT GA VB FW NM XC UP`'
- en: '`EB NA WL ID PM ZK LM WL RO VI AO LC IC VI KQ FW OA PA XC UP EQ`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`EB NA WL ID PM ZK LM WL RO VI AO LC IC VI KQ FW OA PA XC UP EQ`'
- en: '`SO PM QU MB PU CL VA KI OM NE LM BF UP IG BC FR LO CV KI OM VT`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`SO PM QU MB PU CL VA KI OM NE LM BF UP IG BC FR LO CV KI OM VT`'
- en: '`BF YF IP EQ CQ SX NK MZ CQ YS GZ BF UI XD SQ QK AG KL SQ YF PM`'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`BF YF IP EQ CQ SX NK MZ CQ YS GZ BF UI XD SQ QK AG KL SQ YF PM`'
- en: '`RF TV KE CW LW ME VA KN UP FA UI FI KM NQ XR AV TR LO CV EL NL`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`RF TV KE CW LW ME VA KN UP FA UI FI KM NQ XR AV TR LO CV EL NL`'
- en: '`LQ FY UP PN NK IG NO BN EC NP BF GA NE HM IV FY DQ LM YF DQ AM`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`LQ FY UP PN NK IG NO BN EC NP BF GA NE HM IV FY DQ LM YF DQ AM`'
- en: '`BP NI KF LU BN RY UK NA KI OM WF SO OK KQ OA BL KL QA BL VK CK`'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`BP NI KF LU BN RY UK NA KI OM WF SO OK KQ OA BL KL QA BL VK CK`'
- en: '`HL MP TO AG QT PI HL TI NT CV EC IA SL LM YF RL HT IP PS CW CW`'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`HL MP TO AG QT PI HL TI NT CV EC IA SL LM YF RL HT IP PS CW CW`'
- en: '[Figure 16-6](#figure16-6) shows the sculpture. When Klaus learned about this
    cryptogram in 2015, it was still unsolved. According to the sculptor, the digraphs
    on the stone were a message encrypted using a Playfair cipher. However, he didn’t
    remember the details of the encryption, let alone the key.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-6](#figure16-6)展示了这座雕塑。当克劳斯在2015年了解到这个密码时，它仍然没有解开。根据雕塑家的说法，石上的双字母组是用Playfair密码加密的。然而，他并不记得加密的详细信息，更不用说密钥了。'
- en: '![](image_fi/502727c16/f16005.png)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c16/f16005.png)'
- en: 'Figure 16-6: The Letter Stone, a sculpture located next to the GCHQ Headquarters
    in Cheltenham, UK, bears a Playfair-encrypted inscription, arrows, and letter
    pairs within each of the circles.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-6：字母石，这座雕塑位于切尔滕纳姆的GCHQ总部旁，刻有Playfair加密铭文、箭头和每个圆圈内的字母对。
- en: 'Klaus published an article about this cryptogram on his blog in September 2015.^([28](b06.xhtml#c16-endnote-28))
    After only a few hours, blog reader Dan Girard posted the solution, having broken
    it with his own hill-climbing program. It turned out that the keyword was `LECKHAMPTON`.
    Here’s the beginning of the plaintext:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 克劳斯在2015年9月在他的博客上发布了关于这个密码的文章。^([28](b06.xhtml#c16-endnote-28)) 几小时后，博客读者丹·吉拉尔（Dan
    Girard）发布了解答，他用自己的爬山程序破解了它。结果显示，关键词是`LECKHAMPTON`。以下是明文的开头：
- en: '`LECKHAMPTON CHIMNEY HAS FALLEN DOWN`'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`LECKHAMPTON CHIMNEY HAS FALLEN DOWN`'
- en: '`THE BIRDS OF CRICKLEY HAVE CRIED IT IT IS KNOWN IN THE TOWN`'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`THE BIRDS OF CRICKLEY HAVE CRIED IT IT IS KNOWN IN THE TOWN`'
- en: '`THE CLIFXFS HAVE CHANGED WHAT WILL COME NEXT XTO THAT LINE`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`THE CLIFXFS HAVE CHANGED WHAT WILL COME NEXT XTO THAT LINE`'
- en: '`WATCHER OF WEST ENGLAND NOW THAT LANDMARK OAS FALXLEN . . .`'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`WATCHER OF WEST ENGLAND NOW THAT LANDMARK OAS FALXLEN . . .`'
- en: Devil’s Chimney is a rock formation at Leckhampton Hill, near Cheltenham.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 魔鬼烟囱（Devil’s Chimney）是位于切尔滕纳姆附近莱克汉普顿山（Leckhampton Hill）的一个岩石形成物。
- en: 'Success story: Playfair world records'
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：Playfair世界纪录
- en: In [Chapter 12](c12.xhtml), we mentioned that in 1936, the American cryptanalyst
    Alf Monge broke a thirty-letter Playfair message based on a keyword.^([29](b06.xhtml#c16-endnote-29))
    In 2018, Klaus wanted to know how short a Playfair cryptogram a codebreaker could
    solve if the matrix was not keyword based, meaning a dictionary attack wouldn’t
    work. Thus, he presented a series of increasingly difficult Playfair challenges
    on his blog, along with corresponding solutions provided by readers. Most of the
    codebreaking work depended on hill climbing and simulated annealing.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](c12.xhtml)中，我们提到过1936年，美国密码分析师阿尔夫·蒙赫基于关键字破解了一个三十字母的Playfair密码。^([29](b06.xhtml#c16-endnote-29))
    2018年，克劳斯想知道如果Playfair密码不基于关键字，也就是说字典攻击无法奏效，那么密码破解者能解出多短的Playfair密码。因此，他在自己的博客上发布了一系列越来越难的Playfair挑战，并提供了读者提供的相应解法。大部分破解工作依赖于爬山算法和模拟退火。
- en: As far as we are aware, the cryptanalysis results produced over the course of
    these challenges represent the best results of such an experiment. This means
    that they set world records, the last of which is still valid as of this writing.
    We and the challenge solvers published these codebreaking success stories in an
    article titled “How We Set New World Records in Breaking Playfair Ciphertexts,”
    in *Cryptologia*.^([30](b06.xhtml#c16-endnote-30)) In the following, we will present
    a summary of this article.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们所知，这些挑战过程中产生的密码分析结果代表了此类实验的最佳结果。这意味着它们创下了世界纪录，最后一个纪录至今仍然有效。我们和挑战解题者在《Cryptologia》杂志上发布了这篇题为《我们如何打破Playfair密码文本并创下新世界纪录》的文章。^([30](b06.xhtml#c16-endnote-30))
    接下来，我们将呈现这篇文章的摘要。
- en: In April 2018, Klaus published on his blog a fifty-letter Playfair message not
    based on a keyword:^([31](b06.xhtml#c16-endnote-31))
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年4月，克劳斯在他的博客上发布了一个不基于关键字的五十字母Playfair消息：^([31](b06.xhtml#c16-endnote-31))
- en: '`MQ VS KP EV IS BA WK TP KP PN AU NU NE GL UZ TY UZ LY GC TZ KN KU ST AG CT
    NQ`'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`MQ VS KP EV IS BA WK TP KP PN AU NU NE GL UZ TY UZ LY GC TZ KN KU ST AG CT
    NQ`'
- en: 'The challenge didn’t remain a mystery for long; our colleague George Lasry
    solved it on the same day with a simulated annealing program of his own design.
    His fitness function used statistics about hexagraphs. Here’s the plaintext:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战很快就不再是谜题；我们的同事乔治·拉斯里当天就用自己设计的模拟退火程序解决了它。他的适应度函数使用了六边形图的统计数据。以下是明文：
- en: '`WHILE IN PARIS I RECEIVED ORDERS TO REPORT X TO GENERAL FOSTER X`'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`在巴黎时，我接到命令向福斯特将军报告X`'
- en: In December 2018, Klaus created another challenge, based on a plaintext with
    only forty letters:^([32](b06.xhtml#c16-endnote-32))
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年12月，克劳斯设计了另一个挑战，基于一个只有四十个字母的明文：^([32](b06.xhtml#c16-endnote-32))
- en: '`OF FC ER VU MW MO OM RU FI WC MA OG FV ZY FX YB HG UX ZV EH`'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`OF FC ER VU MW MO OM RU FI WC MA OG FV ZY FX YB HG UX ZV EH`'
- en: This time, German codebreaker Nils Kopal, the developer of CrypTool 2, was the
    one to post the solution on the same day. He had applied the same simulated-annealing
    algorithm written by George, including his hexagraph-based fitness function. The
    software delivered the following solution:^([33](b06.xhtml#c16-endnote-33))
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，德国密码破解者尼尔斯·科帕尔，CrypTool 2的开发者，在同一天就发布了解法。他应用了乔治编写的相同模拟退火算法，包括基于六字组合的适应度函数。软件给出了以下解法：^([33](b06.xhtml#c16-endnote-33))
- en: '`MEET YOU TOMORROW AT FOUR TWENTY AT MARKET PLACE`'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`明天下午四点二十在市场广场见`'
- en: Next, in April 2019, Klaus published a thirty-two-letter Playfair cryptogram
    based on a thirty-letter plaintext:^([34](b06.xhtml#c16-endnote-34))
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在2019年4月，克劳斯发布了一个三十二字母的Playfair密码，基于一个三十字母的明文：^([34](b06.xhtml#c16-endnote-34))
- en: '`SX CR ED BQ UG VZ RS MN DS IK RK WR SG NS NX VM`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`SX CR ED BQ UG VZ RS MN DS IK RK WR SG NS NX VM`'
- en: The challenge proved more difficult than the previous ones, as no solution popped
    up that day, week, or even month. However, five months later, in September 2019,
    Magnus Ekhall from Sweden deciphered the message with simulated annealing and
    again set a new record. His fitness function used the frequencies of five-letter
    groups (pentagraphs). The plaintext read as follows and included two `X`s as filler
    characters:^([35](b06.xhtml#c16-endnote-35))
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战比之前的更为困难，因为那一天、那一周，甚至那一个月都没有找到解法。然而，五个月后，在2019年9月，来自瑞典的马格努斯·埃哈尔用模拟退火破解了信息，并再次创下新纪录。他的适应度函数使用了五个字母组（五字组合）的频率。明文内容如下，并且包括了两个`X`作为填充字符：^([35](b06.xhtml#c16-endnote-35))
- en: '`TAKE THE LAST X TRAIN TO YORK ON SUNDAY X`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`星期天乘坐最后一班X号火车前往约克`'
- en: In September 2019, Klaus created a new Playfair challenge—this time with twenty-eight
    letters:^([36](b06.xhtml#c16-endnote-36))
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年9月，克劳斯设计了一个新的Playfair挑战——这次有二十八个字母：^([36](b06.xhtml#c16-endnote-36))
- en: '`ZX LS EW HC HU CE LQ OE PN YR IW YC VQ LS`'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZX LS EW HC HU CE LQ OE PN YR IW YC VQ LS`'
- en: Again, Magnus Ekhall came up with the solution. The process, however, made it
    clear that a twenty-eight-letter Playfair message was considerably more difficult
    to break than one with thirty-two letters. Using simulated annealing, Magnus’s
    software produced 100,000 solution candidates. Magnus then wrote an additional
    program to determine the correct candidate, reproduced here:^([37](b06.xhtml#c16-endnote-37))
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Magnus Ekhall提出了解决方案。然而，这个过程清楚地表明，一个二十八个字母的Playfair消息要比一个三十二个字母的更难破解。使用模拟退火算法，Magnus的程序生成了100,000个解候选。然后，Magnus写了一个额外的程序来确定正确的候选解，这里复现了该解：^([37](b06.xhtml#c16-endnote-37))
- en: '`STAY WHERE YOU ARE UNTIL THURSDAY`'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`待在原地，直到星期四`'
- en: Continuing the experiment, Klaus published a twenty-six-letter challenge in
    November 2019:^([38](b06.xhtml#c16-endnote-38))
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行实验，Klaus在2019年11月发布了一个二十六字母的挑战：^([38](b06.xhtml#c16-endnote-38))
- en: '`DB AQ IH KN RW VB KW NA DQ WR AM OQ IY`'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB AQ IH KN RW VB KW NA DQ WR AM OQ IY`'
- en: 'Four weeks later, the solution was posted by a person thus far unknown in the
    codebreaking community: Konstantin Hamidullin, from Riga, Latvia. Here’s the plaintext:^([39](b06.xhtml#c16-endnote-39))'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 四周后，这个解决方案被一位之前在破译社区中未知的人发布了：来自拉脱维亚里加的Konstantin Hamidullin。以下是明文：^([39](b06.xhtml#c16-endnote-39))
- en: '`WAIT FOR FURTHER INSTRUCTIONS`'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`等待进一步指示`'
- en: Surprisingly, Konstantin (who has since become a working colleague of ours)
    had found this solution with neither a hill climber nor a simulated-annealing
    algorithm but with his own unique method, which performed a kind of dictionary
    attack against the first words of the plaintext. This attack required a list,
    or dictionary, of word groups that frequently appear at the beginning of English
    sentences. For instance, `ONCEUPONATIME` or `THEQUESTIONWEWILLDISCUSSTODAY` could
    appear in such a list.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，Konstantin（他后来成为了我们的同事）并没有使用爬山算法或模拟退火算法，而是使用了他自己独特的方法，通过对明文的首个词语进行字典攻击。这种攻击需要一个列表或字典，其中包含常见的英语句子开头的词组。例如，`ONCEUPONATIME`或`THEQUESTIONWEWILLDISCUSSTODAY`可能出现在这样的列表中。
- en: As Konstantin couldn’t find an existing collection that would suit his needs,
    he decided to create one. For this purpose, he turned to Project Gutenberg, a
    digital library that collects the full texts of tens of thousands of books in
    the public domain. He wrote a software program that worked through about 3,000
    English-language books and generated a list of the most frequent word groups that
    appeared at the start of all the sentences.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Konstantin找不到现有的适合他需求的词典，他决定创建一个。为此，他转向了Project Gutenberg，一个收录了成千上万本公共领域书籍的数字图书馆。他编写了一个程序，扫描了大约3000本英语书籍，并生成了一个包含所有句子开头最常出现的词组的列表。
- en: 'Konstantin’s codebreaking software then used the more frequent entries on this
    list as cribs for the beginning of the plaintext. Next, it checked whether a Playfair
    matrix existed that would lead from the crib to the corresponding ciphertext.
    In many instances, this was not the case: for example, the word group `THISIS`
    cannot encode to `DBAQIH`, as the repetition of `IS` would lead to a repetition
    in the ciphertext not present here. If, for a certain crib, a Playfair matrix
    existed, the software would extend the word group by another likely word—for instance,
    `ONCEUPONATIME` could become `ONCEUPONATIMETHERE`—and test again.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: Konstantin的破译软件然后利用这个列表中更频繁的词条作为明文开头的"字典"，接着检查是否存在一个Playfair矩阵，能够从这个字典推导出相应的密文。在很多情况下，并非如此：例如，词组`THISIS`不能编码为`DBAQIH`，因为`IS`的重复会导致密文中的重复，而在这里并未出现。如果对于某个字典，存在一个Playfair矩阵，软件则会通过另一个可能的词语扩展该词组—例如，`ONCEUPONATIME`可能会变成`ONCEUPONATIMETHERE`—并再次进行测试。
- en: The breakthrough came when Konstantin’s software received a positive result
    for the word group `WAITFOR` and successfully extended it to `WAITFORFURTHER`.
    When it added `INSTRUCTIONS` as the fourth word and rendered a positive result,
    the solution was found.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 突破出现在Konstantin的程序成功识别出词组`WAITFOR`并成功将其扩展为`WAITFORFURTHER`时。当它将`INSTRUCTIONS`作为第四个词加进去并得到正结果时，解决方案终于找到了。
- en: Lastly, Klaus published a twenty-four-letter challenge, which you can find in
    [Chapter 12](c12.xhtml). As of this writing, the twenty-six-letter Playfair cryptogram
    solved by Konstantin is the shortest one ever deciphered. If you would like to
    try to break this record, try your luck at the twenty-four-letter one. To find
    out whether or not this challenge is still active, check out [https://codebreaking-guide.com/errata/](https://codebreaking-guide.com/errata/).
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Klaus发布了一个二十四个字母的挑战，你可以在[第12章](c12.xhtml)找到。截止目前，由Konstantin解开的二十六个字母的Playfair密码是迄今为止解密过的最短密文。如果你想挑战这个纪录，可以试试二十四个字母的密文。要查看这个挑战是否仍然有效，可以访问[https://codebreaking-guide.com/errata/](https://codebreaking-guide.com/errata/)。
- en: Solving machine ciphers with hill climbing
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用爬山算法解密机器密码
- en: Hill climbing works not only for most substitutions and transpositions but also
    for the more sophisticated ciphers of the encryption machine era (which spanned
    roughly 1920 to 1970 and is discussed in [Chapter 15](c15.xhtml)). Most importantly,
    hill climbing proved extremely successful for breaking Enigma messages.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山算法不仅适用于大多数替代法和换位法，还适用于加密机器时代（大约1920年至1970年）更为复杂的密码（该内容在[第15章](c15.xhtml)中讨论）。最重要的是，爬山算法在破解恩尼格玛消息方面表现极为成功。
- en: 'Success story: Breaking original Enigma messages'
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成功案例：破解原始恩尼格玛消息
- en: The exact number isn’t known, but experts estimate that the Germans transmitted
    about a million Enigma messages during World War II.^([40](b06.xhtml#c16-endnote-40))
    For security reasons, radio operators usually destroyed any record of a ciphertext
    after decryption, which is why most original Enigma messages are lost today. Luckily,
    there are exceptions, and a few thousand Enigma messages from the war are preserved
    in archives, museums, or private collections. Of course, researchers may discover
    more of these messages in the future.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 确切的数量尚不清楚，但专家估计，在第二次世界大战期间，德国人共传输了约一百万条恩尼格玛消息。^([40](b06.xhtml#c16-endnote-40))
    出于安全原因，无线电操作员通常会在解密后销毁任何密文记录，这也是为什么大多数原始恩尼格玛消息今天已丢失的原因。幸运的是，仍然有一些例外，成千上万的战时恩尼格玛消息被保存在档案馆、博物馆或私人收藏中。当然，研究人员未来可能会发现更多这类消息。
- en: 'Over the last two decades, several Enigma enthusiasts have tried to break original
    Enigma cryptograms—with considerable success. We are aware of the following projects:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的二十年里，几位恩尼格玛爱好者尝试破解原始的恩尼格玛密文，并取得了相当大的成功。我们了解以下几个项目：
- en: '*M4 Project*: This is an effort by German violinist Stefan Krah to break three
    original German Navy messages from World War II, which were encrypted with the
    four-rotor Enigma M4.^([41](b06.xhtml#c16-endnote-41)) The goal was to find the
    solutions with the help of distributed computing. Thousands of people downloaded
    software that Krah had written for this purpose and provided CPU resources. The
    M4 project succeeded in breaking two of the messages in 2006\. The third one was
    solved seven years later, in 2013.'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*M4项目*：这是德国小提琴家Stefan Krah发起的一个项目，旨在破解三条二战时期的原始德国海军消息，这些消息使用四转子恩尼格玛M4加密。^([41](b06.xhtml#c16-endnote-41))
    目标是通过分布式计算找到解决方案。成千上万的人下载了Krah为此编写的软件并提供CPU资源。M4项目在2006年成功破解了其中两条消息。第三条消息则在七年后，即2013年解开。'
- en: '*Breaking German Wehrmacht Ciphers*: This is an ongoing project started by
    Geoff Sullivan and Frode Weierud in 2002.^([42](b06.xhtml#c16-endnote-42)) Olaf
    Ostwald later joined the effort. Together, they have broken hundreds of original
    Enigma ciphertexts, including radio messages from the Flossenbürg concentration
    camp and Germany’s Russia campaign (Operation Barbarossa).'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*破解德国国防军密码*：这是一个持续进行的项目，由Geoff Sullivan和Frode Weierud于2002年启动。^([42](b06.xhtml#c16-endnote-42))
    Olaf Ostwald后来加入了这一努力。三人共同破解了数百个原始的恩尼格玛密文，包括来自弗洛森堡集中营和德国俄罗斯战役（巴巴罗萨行动）的无线电消息。'
- en: '*Breaking German Navy Ciphers*: This is another ongoing project that aims to
    break original Enigma messages. It was started in 2012 by German schoolteacher
    Michael Hörenberg.^([43](b06.xhtml#c16-endnote-43)) As of this writing, he and
    his cryptanalytic partner Dan Girard have succeeded in deciphering over sixty
    Enigma cryptograms.'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*破解德国海军密码*：这是另一个持续进行的项目，旨在破解原始恩尼格玛消息。由德国教师Michael Hörenberg于2012年发起。^([43](b06.xhtml#c16-endnote-43))
    截至目前，他和他的密码分析伙伴Dan Girard已经成功解密了超过六十个恩尼格玛密文。'
- en: The people involved in these projects have developed computer-based Enigma-breaking
    techniques that are much more powerful than the methods used by the British in
    Bletchley Park during the war. Many of these are based on hill climbing. Most
    of the original Enigma messages that are known to exist have been broken. The
    only exceptions tend to be very short messages or ciphertexts that likely contain
    errors.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 参与这些项目的人们已经开发出了基于计算机的更强大的恩尼格玛破解技术，这些技术远远超过了英国在二战期间布莱切利公园使用的方法。许多技术都是基于爬山算法的。已知存在的大多数原始恩尼格玛信息都已经被破解。唯一的例外通常是非常短的消息或可能包含错误的密文。
