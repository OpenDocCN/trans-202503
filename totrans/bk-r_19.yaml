- en: '**16**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**COMMON PROBABILITY DISTRIBUTIONS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll look at a number of standard probability distributions
    that exist for dealing with commonly occurring random phenomena in statistical
    modeling. These distributions follow the same natural rules as the examples presented
    in [Chapter 15](ch15.xhtml#ch15), and they’re useful because their properties
    are well understood and documented. In fact, they are so ubiquitous that most
    statistical software packages have corresponding built-in functionality for their
    evaluation, and R is no exception. Several of these distributions represent an
    essential ingredient in traditional statistical hypothesis testing, which is explored
    in [Chapters 17](ch17.xhtml#ch17) and [18](ch18.xhtml#ch18).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Just like the random variables they model, the common distributions you’ll examine
    here are broadly categorized as either discrete or continuous. Each distribution
    has four core R functions tied to it—a `d`-function, providing specific mass or
    density function values; a `p`-function, providing cumulative distribution probabilities;
    a `q`-function, providing quantiles; and an `r`-function, providing random variate
    generation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**16.1 Common Probability Mass Functions**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll start here by looking at definitions and examples of some common probability
    mass functions for discrete random variables. Continuous distributions will be
    explored in in [Section 16.2](ch16.xhtml#ch16lev1sec51).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '***16.1.1 Bernoulli Distribution***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *Bernoulli* distribution is the probability distribution of a discrete random
    variable that has only two possible outcomes, such as success or failure. This
    type of variable can be referred to as *binary* or *dichotomous*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you’ve defined a binary random variable *X* for the success or failure
    of an event, where *X* = 0 is failure, *X* = 1 is success, and *p* is the known
    probability of success. [Table 16-1](ch16.xhtml#ch16tab1) shows the probability
    mass function for *X*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 16-1:** The Bernoulli Probability Mass Function'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '| ***x*** | **0** | **1** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| Pr(*X* = *x*) | 1 – *p* | *p* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: From [Section 15.2.2](ch15.xhtml#ch15lev2sec134) you know that the probabilities
    associated with all possible outcomes must sum to 1\. Therefore, if the probability
    of success is *p* for a binary random variable, the only other alternative outcome,
    failure, must occur with probability 1 − *p*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In mathematical terms, for a discrete random variable *X* = *x*, the Bernoulli
    mass function *f* is
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/e16-1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: where *p* is a parameter of the distribution. The notation
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '*X* ∼ BERN(*p*)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: is often used to indicate that “*X* follows a Bernoulli distribution with parameter
    *p*.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key points to remember:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: • *X* is dichotomous and can take only the values 1 (“success”) or 0 (“failure”).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: • *p* should be interpreted as “the probability of success,” and therefore 0
    ≤ *p* ≤ 1.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'The mean and variance are defined as follows, respectively:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 均值和方差分别定义如下：
- en: '![image](../images/f0332-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0332-01.jpg)'
- en: Say you use the common example of rolling a die, with success defined as getting
    a 4, and you roll once. You therefore have a binary random variable *X* that can
    be modeled using the Bernoulli distribution, with the probability of success ![image](../images/f0333-01.jpg).
    For this example, ![image](../images/f0333-02.jpg). You can easily determine,
    using (16.1), that
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你使用掷骰子的常见例子，成功定义为掷出4点，并且你掷一次骰子。那么你就有了一个二元随机变量 *X*，它可以通过伯努利分布来建模，成功的概率是 ![image](../images/f0333-01.jpg)。对于这个例子，![image](../images/f0333-02.jpg)。你可以轻松地通过(16.1)得出：
- en: '![image](../images/f0333-03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0333-03.jpg)'
- en: and, in much the same way, that ![image](../images/f0333-04.jpg). Furthermore,
    you’d have ![image](../images/f0333-05.jpg) and ![image](../images/f0333-06.jpg).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，![](../images/f0333-04.jpg)也有类似的定义。进一步地，你会得到![](../images/f0333-05.jpg)和![](../images/f0333-06.jpg)。
- en: '***16.1.2 Binomial Distribution***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***16.1.2 二项分布***'
- en: The *binomial distribution* is the distribution of successes in *n* number of
    trials involving binary discrete random variables. The role of the Bernoulli distribution
    is typically one of a “building block” for more complicated distributions, like
    the binomial, that give you more interesting results.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*二项分布*是描述在 *n* 次试验中成功的分布，这些试验涉及二元离散随机变量。伯努利分布的作用通常是作为更复杂分布（如二项分布）的“构建模块”，这些复杂分布能提供更有趣的结果。'
- en: For example, suppose you define a random variable ![image](../images/f0333-07.jpg),
    where *Y*[1], *Y*[2], ..., *Y[n]* are each Bernoulli random variables corresponding
    to the same event, in other words, the die roll with success defined as rolling
    a 4\. The new random variable *X*, a sum of Bernoulli random variables, now describes
    *the number of successes in n trials* of the defined action. Providing that certain
    reasonable assumptions are satisfied, the probability distribution that describes
    this success count is the binomial distribution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你定义了一个随机变量 ![image](../images/f0333-07.jpg)，其中 *Y*[1]、*Y*[2]、...、*Y*[n]*
    都是每个对应于相同事件的伯努利随机变量，换句话说，就是掷骰子的结果，成功定义为掷出4点。新的随机变量 *X* 是伯努利随机变量的和，现在描述的是“在 *n*
    次试验中成功的次数”。如果满足某些合理的假设，描述这个成功次数的概率分布就是二项分布。
- en: In mathematical terms, for a discrete random variable and a realization *X*
    = *x*, the binomial mass function *f* is
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学术语中，对于离散随机变量和一个具体实现 *X* = *x*，二项质量函数 *f* 为：
- en: '![image](../images/e16-2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/e16-2.jpg)'
- en: where
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: '![image](../images/e16-3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/e16-3.jpg)'
- en: is known as the *binomial coefficient*. (Recall the use of the integer factorial
    operator !, as first discussed in [Exercise 10.4](ch10.xhtml#ch10exc4) on [page
    203](ch10.xhtml#page_203).) This coefficient, also referred to as a *combination*,
    accounts for all different orders in which you might observe *x* successes throughout
    *n* trials.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为*二项系数*。（回想一下在[习题 10.4](ch10.xhtml#ch10exc4)中首次讨论的整数阶乘运算符！，见[第203页](ch10.xhtml#page_203)）这个系数，也叫做*组合*，表示你可能在
    *n* 次试验中观察到 *x* 次成功的所有不同顺序。
- en: The parameters of the binomial distribution are *n* and *p*, and the notation
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 二项分布的参数是 *n* 和 *p*，符号表示为
- en: '*X* ∼ BIN(*n*, *p*)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*X* ∼ BIN(*n*, *p*)'
- en: is often used to indicate that *X* follows a binomial distribution for *n* trials
    with parameter *p*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用来表示 *X* 服从二项分布，进行 *n* 次试验，参数为 *p*。
- en: 'The following are the key points to remember:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要记住的关键点：
- en: • *X* can take only the values 0, 1, ..., *n* and represents the total number
    of successes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • *X* 只能取值 0, 1, ..., *n*，表示成功的总次数。
- en: • *p* should be interpreted as “the probability of success at each trial.” Therefore,
    0 ≤ *p* ≤ 1, and *n* > 0 is an integer interpreted as “the number of trials.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: • *p* 应该理解为“每次试验的成功概率”。因此，0 ≤ *p* ≤ 1，且 *n* > 0 是一个整数，表示“试验的次数”。
- en: • Each of the *n* trials is a Bernoulli success and failure event, the trials
    are independent (in other words, the outcome of one doesn’t affect the outcome
    of any other), and *p* is constant.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 每次* n * 次试验中的每一项都是伯努利成功或失败事件，试验是独立的（换句话说，一个试验的结果不会影响其他试验的结果），并且*p*是常数。
- en: 'The mean and variance are defined as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 均值和方差分别定义如下：
- en: '![image](../images/f0334-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0334-01.jpg)'
- en: Counting the number of successes of repeated trials of a binary-valued test
    is one of the common random phenomena mentioned at the start of this section.
    Consider the specific situation in which there’s only one “trial,” that is, *n*
    = 1\. Examining [Equations (16.2)](ch16.xhtml#ch16eq2) and [(16.3)](ch16.xhtml#ch16eq3),
    it should become clear that (16.2) simplifies to (16.1). In other words, the Bernoulli
    distribution is just a special case of the binomial. Clearly, this makes sense
    with respect to the definition of a binomial random variable as a sum of *n* Bernoulli
    random variables. In turn, R provides functionality for the binomial distribution
    though not explicitly for the Bernoulli.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 计数重复试验中二值测试的成功次数是本节开头提到的常见随机现象之一。考虑一种特定情况，其中只有一次“试验”，即 *n* = 1。检查[方程 (16.2)](ch16.xhtml#ch16eq2)
    和 [(16.3)](ch16.xhtml#ch16eq3)，应该很清楚 (16.2) 会简化为 (16.1)。换句话说，伯努利分布只是二项分布的一个特例。显然，从二项随机变量作为
    *n* 个伯努利随机变量之和的定义来看，这一点是有意义的。R 提供了二项分布的相关功能，但并未明确支持伯努利分布。
- en: To illustrate this, I’ll return to the example of rolling a die with success
    defined as getting a 4\. If you roll the die independently eight times, what is
    the probability of observing exactly five successes (five 4s) in total? Well,
    you’d have ![image](../images/f0334-03.jpg), and this probability can be worked
    through mathematically using (16.2).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我将回到投掷骰子的例子，其中成功定义为得到 4。如果你独立地掷骰子八次，观察到恰好五次成功（五个 4）的概率是多少？那么，你将得到 ![image](../images/f0334-03.jpg)，这个概率可以通过
    (16.2) 进行数学推导。
- en: '![image](../images/f0334-02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0334-02.jpg)'
- en: The result tells you there is approximately a 0.4 percent chance that you’ll
    observe exactly five 4s in eight rolls of the die. This is small and makes sense—it’s
    far more probable that you might observe zero to two 4s in eight rolls of a die.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果告诉你，在八次投掷中恰好观察到五个 4 的概率约为 0.4%。这个概率很小，且合乎常理——在八次投掷中，观察到零到两个 4 的概率远大于观察到五个
    4 的概率。
- en: Fortunately, R functions will handle the arithmetic in these situations. The
    built-in functions `dbinom`, `pbinom`, `qbinom`, and `rbinom` are all relevant
    to the binomial and Bernoulli distributions and are summarized in one help file
    indexed by each of these function names.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，R 函数可以处理这些情况下的运算。内置函数 `dbinom`、`pbinom`、`qbinom` 和 `rbinom` 都与二项分布和伯努利分布相关，并在一个帮助文件中根据这些函数名称进行总结。
- en: • `dbinom` directly provides the mass function probabilities Pr(*X* = *x*) for
    any valid *x*—that is, 0 ≤ *x* ≤ *n*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: • `dbinom` 直接提供任何有效 *x* 的质量函数概率 Pr(*X* = *x*)——即，0 ≤ *x* ≤ *n*。
- en: • `pbinom` provides the cumulative probability distribution—given a valid *x*,
    it yields Pr(*X* ≤ *x*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: • `pbinom` 提供累积概率分布——给定一个有效的 *x*，它会输出 Pr(*X* ≤ *x*)。
- en: • `qbinom` provides the *inverse* cumulative probability distribution (also
    known as the *quantile function* of the distribution)—given a valid probability
    0 ≤ *p* ≤ 1, it yields the value of *x* that satisfies Pr(*X* ≤ *x*) = *p*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: • `qbinom` 提供*逆*累积概率分布（也称为分布的*分位数函数*）——给定一个有效的概率 0 ≤ *p* ≤ 1，它会输出满足 Pr(*X* ≤
    *x*) = *p* 的 *x* 值。
- en: • `rbinom` is used to generate any number of realizations of *X* given a specific
    binomial distribution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: • `rbinom` 用于根据特定的二项分布生成任何数量的 *X* 实现。
- en: '**The dbinom Function**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**dbinom 函数**'
- en: With this knowledge, you can use R to confirm the result of Pr(*X* = 5) for
    the die-roll example described a moment ago.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些知识，你可以使用 R 来确认刚才提到的骰子投掷例子的结果 Pr(*X* = 5)。
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To the `dbinom` function, you provide the specific value of interest as `x`;
    the total number of trials, *n*, as `size`; and the probability of success at
    each trial, *p*, as `prob`. True to R, a vector argument is possible for `x`.
    If you want the full probability mass function table for *X* for this example,
    you can supply the vector `0:8` to `x`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `dbinom` 函数，你需要提供感兴趣的具体值作为 `x`；试验的总次数 *n* 作为 `size`；每次试验成功的概率 *p* 作为 `prob`。符合
    R 规范，你可以为 `x` 提供一个向量参数。如果你想得到这个例子的 *X* 的完整概率质量函数表，可以将向量 `0:8` 传递给 `x`。
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These can be confirmed to sum to 1.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值可以确认其和为 1。
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The resulting vector of probabilities, which corresponds to the specific outcomes
    *x* = {0, 1, ..., 8}, is returned using e-notation (refer to [Section 2.1.3](ch02.xhtml#ch02lev2sec19)).
    You can tidy this up by rounding the results using the `round` function introduced
    in [Section 13.2.2](ch13.xhtml#ch13lev2sec117). Rounding to three decimal places,
    the results are easier to read.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The achievement of one success in eight trials has the highest probability,
    at approximately 0.372\. Furthermore, the mean (expected value) and variance of
    *X* in this example are ![image](../images/f0335-01.jpg) and ![image](../images/f0335-02.jpg).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can plot the corresponding probability mass function in the same way as
    for the example in [Section 15.2.2](ch15.xhtml#ch15lev2sec134); the following
    line produces [Figure 16-1](ch16.xhtml#ch16fig1):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![image](../images/f16-01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-1: The probability mass function associated with the binomial distribution
    of the die-rolling example*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**The pbinom Function**'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The other R functions for the binomial distribution work in much the same way.
    The first argument is always the value (or values) of interest; *n* is supplied
    as `size` and *p* as `prob`. To find, for example, the probability that you observe
    three or fewer 4s, Pr(*X* ≤ 3), you either sum the relevant individual entries
    from `dbinom` as earlier or use `pbinom`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that the pivotal argument to `pbinom` is tagged `q`, not `x`; this is
    because, in a cumulative sense, you are searching for a probability based on a
    quantile. The cumulative distribution results from `pbinom` can be used in the
    same way to search for “upper-tail” probabilities (probabilities to the right
    of a given value) since you know that the total probability mass is always 1\.
    To find the probability that you observe *at least* three 4s in eight rolls of
    the die, Pr(*X* ≥ 3) (which is equivalent to Pr(*X* > 2) in the context of this
    discrete random variable), note that the following finds the correct result because
    it’s the complement of Pr(*X* ≤ 2) that you’re looking for:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**The qbinom Function**'
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Less frequently used is the `qbinom` function, which is the inverse of `pbinom`.
    Where `pbinom` provides a cumulative probability when given a quantile value `q`,
    the function `qbinom` provides a quantile value when given a cumulative probability
    `p`. The discrete nature of a binomial random variable means `qbinom` will return
    the nearest value of *x* below which `p` lies. For example, note that
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: provides 3 as the quantile value, even though you know from earlier that the
    exact probability that lies at or below 3, Pr(*X* ≤ 3), is 0.9693436\. You’ll
    look at `p`- and `q`-functions more when dealing with continuous probability distributions;
    see [Section 16.2](ch16.xhtml#ch16lev1sec51).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**The rbinom Function**'
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Lastly, the random generation of realizations of a binomially distributed variable
    is retrieved using the `rbinom` function. Again, going with the ![image](../images/f0337-01.jpg)
    distribution, note the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `rbinom` 函数检索二项分布随机变量的实现。再次以 ![image](../images/f0337-01.jpg) 分布为例，请注意以下几点：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The initial argument `n` doesn’t refer to the number of trials. The number of
    trials is still provided to `size` with *p* given to `prob`. Here, `n` requests
    the number of realizations you want to generate for the random variable ![image](../images/f0337-02.jpg).
    The first three lines each request a single realization—in the first eight rolls,
    you observe zero successes (4s), and in the second and third sets of eight rolls,
    you observe two and two 4s, respectively. The fourth line highlights the fact
    that multiple realizations of *X* are easily obtained and stored as a vector by
    increasing `n`. As these are *randomly generated realizations*, if you run these
    lines now, you’ll probably observe some different values.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 初始参数 `n` 并不代表试验的次数。试验次数仍然通过 `size` 提供，*p* 赋值给 `prob`。在这里，`n` 表示你想为随机变量 ![image](../images/f0337-02.jpg)
    生成的实现次数。前三行每一行请求一个单一的实现——在前八次投掷中，你观察到零次成功（4点），在第二和第三组八次投掷中，你分别观察到两个和两个 4 点。第四行突出了通过增加
    `n` 可以轻松获得和存储多个 *X* 实现并将其作为一个向量的事实。由于这些是*随机生成的实现*，如果你现在运行这些代码，可能会观察到一些不同的值。
- en: Though not used often in standard statistical testing methods, the `r-`functions
    for probability distributions, either discrete or continuous, play an important
    role when it comes to simulation and various advanced numeric algorithms in computational
    statistics.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在标准统计测试方法中不常使用，但概率分布的 `r-` 函数，无论是离散的还是连续的，在模拟和计算统计学中的各种高级数值算法中起着重要作用。
- en: '**Exercise 16.1**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 16.1**'
- en: A forested nature reserve has 13 bird-viewing platforms scattered throughout
    a large block of land. The naturalists claim that at any point in time, there
    is a 75 percent chance of seeing birds at each platform. Suppose you walk through
    the reserve and visit every platform. If you assume that all relevant conditions
    are satisfied, let *X* be a binomial random variable representing the total number
    of platforms at which you see birds.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个森林自然保护区在一大片土地上分布着 13 个观鸟平台。自然学家声称，在任何时刻，每个平台看到鸟的概率为 75%。假设你在保护区内走动并参观每个平台。如果假设所有相关条件都得到满足，设
    *X* 为一个二项分布的随机变量，表示你看到鸟的所有平台数量。
- en: Visualize the probability mass function of the binomial distribution of interest.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化感兴趣的二项分布的概率质量函数。
- en: What is the probability you see birds at all sites?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有平台上看到鸟的概率是多少？
- en: What is the probability you see birds at more than 9 platforms?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在超过 9 个平台上看到鸟的概率是多少？
- en: What is the probability of seeing birds at between 8 and 11 platforms (inclusive)?
    Confirm your answer by using only the `d`-function and then again using only the
    `p`-function.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 8 到 11 个平台之间（包括 8 和 11）看到鸟的概率是多少？使用 `d`-函数确认你的答案，然后再使用 `p`-函数确认一次。
- en: Say that, before your visit, you decide that if you see birds at fewer than
    9 sites, you’ll make a scene and demand your entry fee back. What’s the probability
    of your embarrassing yourself in this way?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设在你访问之前，你决定如果你在不到 9 个站点看到鸟，你就会制造一场骚动并要求退还入场费。你让自己尴尬的概率是多少？
- en: Simulate realizations of *X* that represent 10 different visits to the reserve;
    store your resulting vector as an object.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟代表 10 次不同访问的 *X* 实现；将你得到的向量存储为一个对象。
- en: Compute the mean and standard deviation of the distribution of interest.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算感兴趣分布的均值和标准差。
- en: '***16.1.3 Poisson Distribution***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***16.1.3 泊松分布***'
- en: In this section, you’ll use the *Poisson* distribution to model a slightly more
    general, but just as important, discrete random variable—a *count*. For example,
    the variable of interest might be the number of seismic tremors detected by a
    certain station in a given year or the number of imperfections found on square-foot
    pieces of sheet metal coming off a factory production line.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将使用 *泊松* 分布来模拟一个稍微更一般但同样重要的离散随机变量——*计数*。例如，感兴趣的变量可能是某个站点在一年内检测到的地震震动次数，或者某个工厂生产线下来的每平方英尺金属板上的缺陷数量。
- en: 'Importantly, the events or items being counted are assumed to manifest independently
    of one another. In mathematical terms, for a discrete random variable and a realization
    *X* = *x*, the Poisson mass function *f* is given as follows, where *λ*[p] is
    a parameter of the distribution (this will be explained further momentarily):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/e16-4.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: The notation
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '*X* ∼ POIS(*λ*[p])'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: is often used to indicate that “*X* follows a Poisson distribution with parameter
    *λ*[p].”
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the keys points to remember:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: • The entities, features, or events being counted occur independently in a well-defined
    interval at a constant rate.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '• *X* can take only non-negative integers: 0,1,. . ..'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: • *λ*[p] should be interpreted as the “mean number of occurrences” and must
    therefore be finite and strictly positive; that is, 0 < *λ*[p] < ∞.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The mean and variance are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0339-01.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Like the binomial random variable, the values taken by a Poisson random variable
    are discrete, non-negative integers. Unlike the binomial, however, there’s typically
    no upper limit on a Poisson count. While this implies that an “infinite count”
    is allowed to occur, it’s a distinct feature of the Poisson distribution that
    the probability mass associated with some value *x* goes to zero as *x* itself
    goes to infinity.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: As noted in [Equation (16.4)](ch16.xhtml#ch16eq4), any Poisson distribution
    depends upon the specification of a single parameter, denoted here with *λ*[p].
    This parameter describes the mean number of occurrences, which impacts the overall
    shape of the mass function, as shown in [Figure 16-2](ch16.xhtml#ch16fig2).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-02.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-2: Three examples of the Poisson probability mass function, plotted
    for 0* ≤ x ≤ *30\. The “expected count” parameter* *λ*[p] *is altered from 3.00
    (left) to 6.89 (middle) and to 17.20 (right).*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Again, it’s worth noting that the total probability mass over all possible outcomes
    is 1, no matter what the value of *λ*[p] is and regardless of the fact that possible
    outcomes can, technically, range from 0 to infinity.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: By definition, it’s easy to understand why the mean of *X*, *μ[X]*, is equal
    to *λ*[p]; in fact, it turns out that the variance of a Poisson distributed random
    variable is also equal to *λ*[p].
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example of blemishes on 1-foot-square sheets of metal coming off
    a production line, mentioned in the opening of this section. Suppose you’re told
    that the number of blemishes found, *X*, is thought to follow a Poisson distribution
    with *λ*[p] = 3.22, as in *X* ∼ POIS(3.22). In other words, you’d expect to see
    an average of 3.22 blemishes on your 1-foot sheets.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '**The dpois and ppois Functions**'
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The R `dpois` function provides the individual Poisson mass function probabilities
    Pr(*X* = *x*) for the Poisson distribution. The `ppois` function provides the
    left cumulative probabilities, as in Pr(*X* ≤ *x*). Consider the following lines
    of code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first call finds that Pr(*X* = 3) = 0.22 (to 2 d.p.); in other words, the
    probability that you observe exactly three blemishes on a randomly selected piece
    of sheet metal is equal to about 0.22\. The second call indicates a less than
    4 percent chance that the piece is flawless. The third line returns a rounded
    version of the relevant mass function for the values 0 ≤ *x* ≤ 10\. By hand you
    can confirm the first result like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用结果表明 Pr(*X* = 3) = 0.22（保留两位小数）；换句话说，观察到在随机选择的金属片上有恰好三个缺陷的概率约为 0.22。第二次调用表示该金属片没有缺陷的概率小于
    4%。第三行返回了相关质量函数的一个近似值，适用于 0 ≤ *x* ≤ 10。你可以手动确认第一个结果，方法如下：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You create a visualization of the mass function with the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过以下方法创建质量函数的可视化：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is shown on the left of [Figure 16-3](ch16.xhtml#ch16fig3).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示在[图 16-3](ch16.xhtml#ch16fig3)的左侧。
- en: '![image](../images/f16-03.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f16-03.jpg)'
- en: '*Figure 16-3: The Poisson probability mass function (left) and cumulative distribution
    function (right) for* *λ[p] = 3.22 plotted for the integers 0* ≤ x ≤ *10, with
    reference to the sheet metal example*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-3：泊松概率质量函数（左侧）和累积分布函数（右侧），对于* *λ[p] = 3.22* 在整数 0 ≤ x ≤ *10 范围内的绘图，参考金属片示例*'
- en: To calculate cumulative results, you use `ppois`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算累积结果，你可以使用 `ppois`。
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These lines find that the probability you observe at most two imperfections,
    Pr(*X* ≤ 2), is about 0.38, and the probability you observe strictly more than
    five blemishes, Pr(*X* ≥ 6), is roughly 0.11.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行的结果显示，观察到至多两个缺陷的概率 Pr(*X* ≤ 2) 约为 0.38，观察到严格超过五个缺陷的概率 Pr(*X* ≥ 6) 约为 0.11。
- en: 'A visualization of the cumulative mass function is given on the right of [Figure
    16-3](ch16.xhtml#ch16fig3), created with the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 累积质量函数的可视化展示在右侧的[图 16-3](ch16.xhtml#ch16fig3)，通过以下方法创建：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**The qpois Function**'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**qpois 函数**'
- en: The `q`-function for the Poisson distribution, `qpois`, provides the inverse
    of `ppois`, in the same way as `qbinom` in [Section 16.1.2](ch16.xhtml#ch16lev2sec138)
    provides the inverse of `pbinom`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 泊松分布的 `q` 函数 `qpois` 提供了 `ppois` 的逆函数，类似于[第 16.1.2 节](ch16.xhtml#ch16lev2sec138)中的
    `qbinom` 提供了 `pbinom` 的逆函数。
- en: '**The rpois Function**'
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**rpois 函数**'
- en: To produce random variates, you use `rpois`; you supply the number of variates
    you want as `n` and supply the all-important parameter as `lambda`. You can imagine
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成随机变量，你可以使用 `rpois`；你需要提供想要生成的变量数 `n`，并且提供重要的参数 `lambda`。你可以想象
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: as selecting fifteen 1-foot-square metal sheets from the production line at
    random and counting the number of blemishes on each. Note again that this is random
    generation; your specific results are likely to vary.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就像从生产线上随机选择 15 个 1 平方英尺的金属片，并统计每片上的缺陷数一样。再次强调，这属于随机生成；你的具体结果可能会有所不同。
- en: '**Exercise 16.2**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 16.2**'
- en: Every Saturday, at the same time, an individual stands by the side of a road
    and tallies the number of cars going by within a 120-minute window. Based on previous
    knowledge, she believes that the mean number of cars going by during this time
    is exactly 107\. Let *X* represent the appropriate Poisson random variable of
    the number of cars passing her position in each Saturday session.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每个周六，在同一时间，一个人站在路边，记录 120 分钟内经过的车辆数。根据先前的知识，她认为在这段时间内经过的车辆平均数量正好是 107。让 *X*
    代表每周六观察到的通过她位置的车辆数的泊松随机变量。
- en: What is the probability that more than 100 cars pass her on any given Saturday?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何一个周六，超过 100 辆车经过她的概率是多少？
- en: Determine the probability that no cars pass.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算没有车经过的概率。
- en: Plot the relevant Poisson mass function over the values in 60 ≤ *x* ≤ 150.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制 60 ≤ *x* ≤ 150 范围内相关的泊松质量函数。
- en: Simulate 260 results from this distribution (about five years of weekly Saturday
    monitoring sessions). Plot the simulated results using `hist`; use `xlim` to set
    the horizontal limits from 60 to 150\. Compare your histogram to the shape of
    your mass function from (c).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从该分布中模拟 260 个结果（大约五年的每周六监测数据）。使用 `hist` 绘制模拟结果；使用 `xlim` 设置横坐标范围为 60 到 150。将你的直方图与（c）部分的质量函数形状进行比较。
- en: '***16.1.4 Other Mass Functions***'
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***16.1.4 其他质量函数***'
- en: 'There are many other well-defined probability mass functions in R’s built-in
    suite of statistical calculations. All model a discrete random variable in a certain
    way under certain conditions and are defined with at least one parameter, and
    most are represented by their own set of `d`-, `p`-, `q`-, and `r`-functions.
    Here I summarize a few more:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在R内置的统计计算套件中，还有许多其他明确定义的概率质量函数。它们在某些条件下以特定方式对离散随机变量建模，并且至少定义一个参数，且大多数都有自己的`d`-、`p`-、`q`-和`r`-函数。这里我总结了更多的函数：
- en: • The *geometric* distribution counts the number of failures before a success
    is recorded and is dependent on a “probability of success parameter” `prob`. Its
    functions are `dgeom`, `pgeom`, `qgeom`, and `rgeom`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: • *几何*分布统计在成功发生之前失败的次数，并依赖于一个“成功概率参数”`prob`。其函数为`dgeom`、`pgeom`、`qgeom`和`rgeom`。
- en: • The *negative binomial* distribution is a generalization of the geometric
    distribution, dependent upon parameters `size` (number of trials) and `prob`.
    Its functions are `dnbinom`, `pnbinom`, `qnbinom`, and `rnbinom`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: • *负二项*分布是几何分布的推广，依赖于参数`size`（试验次数）和`prob`。其函数为`dnbinom`、`pnbinom`、`qnbinom`和`rnbinom`。
- en: • The *hypergeometric* distribution is used to model sampling without replacement
    (in other words, a “success” can change the probabilities associated with further
    successes), dependent upon parameters `m`, `n`, and `k` describing the nature
    of sampled items. Its functions are `dhyper`, `phyper`, `qhyper`, and `rhyper`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: • *超几何*分布用于建模不放回抽样（换句话说，某次“成功”会改变之后成功的概率），依赖于描述样本项目性质的参数`m`、`n`和`k`。其函数为`dhyper`、`phyper`、`qhyper`和`rhyper`。
- en: • The *multinomial* distribution is a generalization of the binomial, where
    a success can occur in one of multiple categories at each trial, with parameters
    `size` and `prob` (this time, `prob` must be a vector of probabilities corresponding
    to the multiple categories). Its built-in functions are limited to `dmultinom`
    and `rmultinom`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: • *多项式*分布是二项分布的推广，在每次试验中，成功可以出现在多个类别中的任何一个，其参数为`size`和`prob`（这时，`prob`必须是一个概率向量，表示多个类别的概率）。其内置函数仅限于`dmultinom`和`rmultinom`。
- en: As noted earlier, some familiar probability distributions are just simplifications
    or special cases of functions that describe a more general class of distributions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，一些常见的概率分布只是描述更一般类别分布函数的简化版或特例。
- en: '**16.2 Common Probability Density Functions**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**16.2 常见概率密度函数**'
- en: When considering continuous random variables, you need to deal with probability
    density functions. There are a number of common continuous probability distributions
    frequently used over many different types of problems. In this section, you’ll
    be familiarized with some of these and R’s accompanying `d`-, `p`-, `q`-, and
    `r`-functions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑连续随机变量时，您需要处理概率密度函数。有许多常见的连续概率分布，通常用于各种不同类型的问题。在这一节中，您将了解其中一些分布及其在R中的`d`-、`p`-、`q`-和`r`-函数。
- en: '***16.2.1 Uniform***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***16.2.1 均匀分布***'
- en: The *uniform* distribution is a simple density function that describes a continuous
    random variable whose interval of possible values offers no fluctuations in probability.
    This will become clear in a moment when you plot [Figure 16-4](ch16.xhtml#ch16fig4).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*均匀*分布是一个简单的密度函数，用于描述一个连续的随机变量，其可能值的区间内，概率没有波动。稍后在绘制[图16-4](ch16.xhtml#ch16fig4)时，这一点会变得更加清晰。'
- en: '![image](../images/f16-04.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f16-04.jpg)'
- en: '*Figure 16-4: Two uniform distributions plotted on the same scale for comparability.
    Left:* X ∼ *UNIF(*−*0.4,1.1); right:* X ∼ *UNIF(0.223,0.410). The total area underneath
    each density function is, as always, 1.*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-4：为了便于比较，将两个均匀分布绘制在相同的尺度上。左：* X ∼ *UNIF(*−*0.4,1.1)；右：* X ∼ *UNIF(0.223,0.410)。每个密度函数下方的总面积，和往常一样，都是1。*'
- en: For a continuous random variable *a* ≤ *X* ≤ *b*, the uniform density function
    *f* is
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连续随机变量*a* ≤ *X* ≤ *b*，均匀密度函数*f*为：
- en: '![image](../images/e16-5.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/e16-5.jpg)'
- en: where *a* and *b* are parameters of the distribution defining the limits of
    the possible values *X* can take. The notation
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*a*和*b*是定义分布可能取值区间的参数。记法：
- en: '*X* ∼ UNIF(*a*, *b*)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*X* ∼ UNIF(*a*, *b*)'
- en: is often used to indicate that “*X* follows a uniform distribution with limits
    *a* and *b*.”
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用来表示“*X*服从一个均匀分布，区间为*a*和*b*”。
- en: 'The following are the key points to remember:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要记住的关键点：
- en: • *X* can take any value in the interval bounded by *a* and *b*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • *X*可以取*a*和*b*之间区间中的任何值。
- en: • *a* and *b* can be any values, provided that *a* < *b*, and they represent
    the lower and upper limits, respectively, of the interval of possible values.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'The mean and variance are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0343-01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: For the more complicated densities in this section, it’s especially useful to
    visualize the functions in order to understand the probabilistic structure associated
    with a continuous random variable. For the uniform distribution, given [Equation
    (16.5)](ch16.xhtml#ch16eq5), you can recognize the two different uniform distributions
    shown in [Figure 16-4](ch16.xhtml#ch16fig4). I’ll provide the code to produce
    these types of plots shortly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'For the left plot in [Figure 16-4](ch16.xhtml#ch16fig4), you can confirm the
    exact height of the *X* ∼ UNIF(−0.4,1.1) density by hand: ![image](../images/f0344-01.jpg).
    For the plot on the right, based on *X* ∼ UNIF(0.223,0.410), you can use R to
    find that its height is roughly 5.35.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**The dunif Function**'
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can use the built-in `d`-function for the uniform distribution, `dunif`,
    to return these heights for any value within the defined interval. The `dunif`
    command returns zero for values outside of the interval. The parameters of the
    distribution, *a* and *b*, are provided as the arguments `min` and `max`, respectively.
    For example, the line
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: evaluates the uniform density function of *X* ∼ UNIF(−0.4,1.1) at the values
    given in the vector passed to `x`. You’ll notice that the first and last values
    fall outside the bounds defined by `min` and `max`, and so they are zero. All
    others evaluate to the height value of ![image](../images/2by3.jpg), as previously
    calculated.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: As a second example, the line
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: confirms the correct density values for the *X* ∼ UNIF(0.223,0.410) distribution,
    with the second value, zero, falling outside the defined interval.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: This most recent example in particular should remind you that probability density
    functions for continuous random variables, unlike mass functions for discrete
    variables, *do not* directly provide probabilities, as mentioned in [Section 15.2.3](ch15.xhtml#ch15lev2sec135).
    In other words, the results just returned by `dunif` represent the respective
    density functions themselves and not any notion of chance attached to the specific
    values of *x* at which they were evaluated.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'To calculate some probabilities based on the uniform density function, use
    the example of a faulty drill press. In a woodworker’s shop, imagine there’s a
    drill press that cannot keep to a constant alignment when in use; instead, it
    randomly hits the intended target at up to 0.4 cm to the left or 1.1 cm to the
    right. Let the random variable *X* ∼ UNIF(−0.4,1.1) represent where the drill
    hits the material relative to the target at 0\. [Figure 16-5](ch16.xhtml#ch16fig5)
    replots the left image of [Figure 16-4](ch16.xhtml#ch16fig4) on a more detailed
    scale. You have three versions, each marking off a different area under the density
    function: Pr(*X* ≤ −0.21), Pr(−0.21 ≤ *X* ≤ 0.6), and Pr(*X* ≥ 0.6).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-5: Three areas underneath the* X ∼ *UNIF(*−*0.4,1.1) density function
    for the drill press example. Left: Pr(*X ≤ −*0.21); middle: Pr(*−*0.21* ≤ X ≤
    *0.6); right: Pr(*X ≥ *0.6).*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'These plots are created using the coordinate-based plotting skills covered
    in [Chapter 7](ch07.xhtml#ch07). The density itself is presented with the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can use much of the same code to produce the plots in [Figure 16-4](ch16.xhtml#ch16fig4)
    by modifying the `xlim` and `ylim` arguments to adjust the scale of the axes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: You add the vertical lines denoting *f* (−0.21) and *f* (0.6) in [Figure 16-5](ch16.xhtml#ch16fig5)
    with another call to `segments`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, you can shade the areas using the `polygon` function, which was first
    explored in [Section 15.2.3](ch15.xhtml#ch15lev2sec135). For example, in the leftmost
    plot in [Figure 16-5](ch16.xhtml#ch16fig5), use the previous plotting code followed
    by this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As mentioned earlier, the three shaded areas in [Figure 16-5](ch16.xhtml#ch16fig5)
    represent, from left to right, Pr(*X* < −0.21), Pr(−0.21 < *X* < 0.6), and Pr(*X*
    > 0.6), respectively. In terms of the drill press example, you can interpret these
    as the probability that the drill hits the target 0.21 cm to the left or more,
    the probability that the drill hits the target between 0.21 cm to the left and
    0.6 cm to the right, and the probability that the drill hits the target 0.6 cm
    to the right or more, respectively. (Remember from [Section 15.2.3](ch15.xhtml#ch15lev2sec135)
    that it makes no difference if you use ≤ or < (or ≥ or >) for probabilities associated
    with continuous random variables.) Though you could evaluate these probabilities
    geometrically for such a simple density function, it’s still faster to use R.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '**The punif Function**'
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Remember that probabilities associated with continuous random variables are
    defined as *areas under the function*, and therefore your study focuses on the
    appropriate intervals of *X* rather than any specific value. The `p`-function
    for densities, just like the `p`-function for discrete random variables, provides
    the cumulative probability distribution Pr(*X* ≤ *x*). In the context of the uniform
    density, this means that given a specific value of *x* (supplied as a “quantile”
    argument `q`), `punif` will provide the left-directional area underneath the function
    from that specific value.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Accessing `punif`, the line
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: tells you that the leftmost area in [Figure 16-5](ch16.xhtml#ch16fig5) represents
    a probability of about 0.127\. The line
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: tells you that ![image](../images/f0346-01.jpg). The final result for Pr(−0.21
    < *X* < 0.6), giving a 54 percent chance, is found with
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: since the first call provides the area under the density from 0.6 all the way
    left and the second call provides the area from −0.21 all the way left. Therefore,
    this difference is the middle area as defined.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: It’s essential to be able to manipulate cumulative probability results like
    this when working with probability distributions in R, and the beginner might
    find it useful to sketch out the desired area before using `p`-functions, especially
    with respect to density functions.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**The qunif Function**'
  id: totrans-194
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `q`-functions for densities are used more often than they are for mass functions
    because the continuous nature of the variable means that a unique quantile value
    can be found for any valid probability `p`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'The `qunif` function is the inverse of `punif`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These lines confirm the values of *X* used earlier to get the lower- and upper-tail
    probabilities Pr(*X* < −0.21) and Pr(*X* > 0.6), respectively. Any `q`-function
    expects a *cumulative* (in other words, left-hand) probability as its first argument,
    which is why you need to supply `1-1/3` in the second line to recover `0.6`. (The
    total area is 1\. You know that you want the area to the *right* of 0.6 to be
    ![image](../images/1by3.jpg); thus, the area on the left must be ![image](../images/f0347-01.jpg).)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**The runif Function**'
  id: totrans-199
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Lastly, to generate random realizations of a specific uniform distribution,
    you use `runif`. Let’s say the woodworker drills 10 separate holes using the faulty
    press; you can simulate one instance of the position of each of these holes relative
    to their target with the following call.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Again, note that the specific values of `r`-function calls like `runif` will
    be different each time they are run.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 16.3**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: You visit a national park and are informed that the height of a certain species
    of tree found in the forest is uniformly distributed between 3 and 70 feet.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: What is the probability you encounter a tree shorter than ![image](../images/f0347-02.jpg)
    feet?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this probability density function, what is the height that marks the cutoff
    point of the tallest 15 percent of trees?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the mean and standard deviation of the tree height distribution.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using (c), confirm that the chance that you encounter a tree with a height that
    is within half a standard deviation (that is, below or above) of the mean height
    is roughly 28.9 percent.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At what height is the density function itself? Show it in a plot.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simulate 10 observed tree heights. Based on these data, use `quantile` (refer
    to [Section 13.2.3](ch13.xhtml#ch13lev2sec118)) to estimate the answer you arrived
    at in (b). Repeat your simulation, this time generating 1,000 variates, and estimate
    (b) again. Do this a handful of times, taking a mental note of your two estimates
    each time. Overall, what do you notice of your two estimates (one based on 10
    variates at a time and the other based on 1,000) with respect to the “true” value
    in (b)?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***16.2.2 Normal***'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *normal distribution* is one of the most well-known and commonly applied
    probability distributions in modeling continuous random variables. Characterized
    by a distinctive “bell-shaped” curve, it’s also referred to as the *Gaussian*
    distribution.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: For a continuous random variable −∞ < *X* < ∞, the normal density function *f*
    is
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/e16-6.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: where *μ* and *σ* are parameters of the distribution, *π* is the familiar geometric
    value 3.1415 ..., and exp{·} is the exponential function (refer to [Section 2.1.2](ch02.xhtml#ch02lev2sec18)).
    The notation
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '*X* ∼ N(*μ*, *σ*)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: is often used to indicate that “*X* follows a normal distribution with mean
    *μ* and standard deviation *σ*.”
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key points to remember:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: • Theoretically, *X* can take any value from −∞ to ∞.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: • As hinted at earlier, the parameters *μ* and *σ* directly describe the mean
    and the standard deviation of the distribution, with the square of the latter,
    *σ*², being the variance.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: • In practice, the mean parameter is finite −∞ < *μ* < ∞, and the standard deviation
    parameter is strictly positive and finite 0 < *σ* < ∞.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: • If you have a random variable *X* ∼ N(*μ*, *σ*), then you can create a new
    random variable *Z* = (*X* − *μ*)/σ, which means *Z* ∼ N(0,1). This is known as
    *standardization* of *X*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: The two parameters noted earlier fully define a particular normal distribution.
    These are always perfectly symmetric, unimodal, and centered on the mean *μ*,
    and they have a degree of “spread” defined using the standard deviation *σ*.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: The top image of [Figure 16-6](ch16.xhtml#ch16fig6) provides the density functions
    for four specific normal distributions. You can see that altering the mean results
    in a translation, where the center of the distribution is simply shifted to sit
    on the specific value of *μ*. The effect of a smaller standard deviation is to
    reduce the spread, resulting in a taller, skinnier appearance of the density.
    Increasing *σ* flattens the density out around the mean.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The bottom image zooms in on the N(0,1) distribution when you have a normal
    density centered on *μ* = 0 and with a standard deviation of *σ* = 1\. This distribution,
    known as the *standard normal*, is frequently used as a standard reference to
    compare different normally distributed random variables with one another on the
    same scale of probabilities. It’s common practice to rescale, or *standardize*,
    some variable *X* ∼ N(*μ[X]* ,σ[*X*]) to a new variable *Z* such that *Z* ∼ N(0,1)
    (you’ll see this practiced in [Chapter 18](ch18.xhtml#ch18)). Vertical lines in
    the plot show plus or minus one, two, and three times the standard deviation away
    from the mean of zero. This serves to highlight the fact that for *any* normal
    distribution, a probability of exactly 0.5 lies either above or below the mean.
    Furthermore, note that there’s a probability of approximately 0.683 of a value
    falling within one standard deviation of the mean, approximately 0.954 probability
    under the curve from −2*σ* to +2σ, and approximately 0.997 probability between
    −3*σ* and +3σ.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-06.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-6: Illustrating the normal distribution. Top: Four different instances
    of the density achieved by varying the mean* *μ* *and standard deviation* *σ.
    Bottom: The “standard normal” distribution, N(0,1), marking off the mean* ±*1*σ,
    ±*2*σ*, and* ±*3*σ.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '*The mathematical definition of the normal density means that as you move further
    away from the mean, the value of the density function itself will approach zero.
    In actual fact, any normal density function never actually touches the horizontal
    line at zero; it just gets closer and closer as you move to positive or negative
    infinity. This behavior is formally referred to as* asymptotic*; in this case,
    you’d say that the normal distribution f* (*x*) *has a* horizontal asymptote *at
    f* (*x*) *= 0\. In discussing probabilities as areas under the curve, you’d refer
    to the fact that “the total area under the curve from negative to positive infinity”
    is 1, in other words, ![image](../images/f0349-01.jpg).*'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '**The dnorm Function**'
  id: totrans-230
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Being a probability density function, the `dnorm` function itself doesn’t provide
    probabilities—merely the value of the desired normal function curve *f* (*x*)
    at any *x*. To plot a normal density, you’d therefore be able to use `seq` (refer
    to [Section 2.3.2](ch02.xhtml#ch02lev2sec21)) to create a fine sequence of values
    for *x*, evaluate the density at these values with `dnorm`, and then plot the
    result as a line. For example, to produce an image of the standard normal distribution
    curve similar to that in the bottom image of [Figure 16-6](ch16.xhtml#ch16fig6),
    the following code will create the desired *x* values as `xvals`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Then `dnorm`, which includes specification of *μ* as `mean` and *σ* as `sigma`,
    produces the precise values of *f*(*x*) at those `xvals`. Finally, a call such
    as `plot(xvals,fx,type="l")` achieves the bare bones of a density plot, which
    you can easily enhance by adding titles and using commands such as `abline` and
    `segments` to mark locations off (I’ll produce another plot in a moment, so this
    basic one isn’t shown here).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you don’t supply any values to `mean` and `sd`, the default behavior
    of R is to implement the standard normal distribution; the object `fx` shown earlier
    could have been created with an even shorter call using just `dnorm(xvals)`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '**The pnorm Function**'
  id: totrans-235
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `pnorm` function obtains left-side probabilities under the specified normal
    density. As with `dnorm`, if no parameter values are supplied, R automatically
    sets `mean=0` and `sd=1`. In the same way you used `punif` in [Section 16.2.1](ch16.xhtml#ch16lev2sec141),
    you can find differences of results from `pnorm` to find any areas you want when
    you provide the function with the desired values in the argument `q`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: For example, it was mentioned earlier that a probability of approximately 0.683
    lies within one standard deviation of the mean. You can confirm this using `pnorm`
    for the standard normal.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The first call to `pnorm` evaluates the area under the curve from positive
    1 left (in other words, all the way to −∞) and then finds the difference between
    that and the area from −1 left. The result reflects the proportion between the
    two dashed lines in the bottom of [Figure 16-6](ch16.xhtml#ch16fig6). These kinds
    of probabilities will be the same for *any* normal distribution. Consider the
    distribution where *μ* = −3.42 and *σ* = 0.2\. Then the following provides the
    same value:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It takes a little more work to specify the distribution of interest since it’s
    not standard, but the principle is the same: plus and minus one standard deviation
    away from the mean.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: The symmetry of the normal distribution is also useful when it comes to calculating
    probabilities. Sticking with the N(3.42,0.2) distribution, you can see that the
    probability you make an observation greater than *μ* + *σ* = −3.42 + 0.2 = −3.22
    (an *upper-tail* probability) is identical to the probability of making an observation
    less than *μ* − *σ* = −3.42 − 0.2 = −3.62 (a *lower-tail* probability).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can also evaluate these values by hand, given the result you computed earlier
    that says Pr(μ − *σ* < *X* < *μ* + *σ*) = 0.6826895\. The remaining probability
    *outside* of this middle area must be as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'So, in each of the lower- and upper-tail areas marked off by *μ* − *σ* and
    *μ* + *σ*, respectively, there must be a probability of the following:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is what was just found using `pnorm` (note that there can be some minor
    rounding errors in these types of calculations). You can see this in [Figure 16-7](ch16.xhtml#ch16fig7),
    which is, initially, plotted with the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![image](../images/f16-07.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-7: Illustrating the example in the text, where the symmetry of the
    normal distribution is used to point out features of probabilities under the curve.
    Note that the total area under the density is 1, which in conjunction with symmetry
    is useful for making calculations.*'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: To add the shaded area between *μ* ± *σ*, you can use `polygon`, for which you
    need the vertices of the shape of interest. To get a smooth curve, make use of
    the fine sequence `xvals` and corresponding `fx` as defined in the code, and use
    logical vector subsetting to restrict attention to those locations of *x* such
    that −3.62 ≤ *x* ≤ −3.22.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You can then sandwich these between the two corners at the bottom of the shaded
    polygon using the matrix structure that the `polygon` function expects.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Finally, `arrows` and `text` indicate the areas discussed in the text.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**The qnorm Function**'
  id: totrans-258
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let’s turn to `qnorm`. To find the quantile value that will give you a lower-tail
    probability of 0.159, you use the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Given the earlier results and what you already know about previous `q-`functions,
    it should be clear why the result is a value of approximately −3.62\. You find
    the upper quartile (the value *above which* you’d find a probability of 0.25)
    with this:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Remember that the `q`-function will operate based on the (left) lower-tail probability,
    so to find a quantile based on an upper-tail probability, you must first subtract
    it from the total probability of 1.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'In some methods and models used in frequentist statistics, it’s common to assume
    that your observed data are normal. You can test the validity of this assumption
    by using your knowledge of the theoretical quantiles of the normal distribution,
    found in the results of `qnorm`: calculate a range of sample quantile values for
    your observed data and plot these against the same quantiles for a correspondingly
    standardized normal distribution. This visual tool is referred to as a normal
    *quantile-quantile* or *QQ* plot and is useful when viewed alongside a histogram.
    If the plotted points don’t lie on a straight line, then the quantiles from your
    data do not match the appearance of those from a normal curve, and the assumption
    that your data are normal may not be valid.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: The built-in `qqnorm` function takes in your raw data and produces the corresponding
    plot. Go back once more to the ready-to-use `chickwts` data set. Let’s say you
    want to find out whether it’s reasonable to assume the weights are normally distributed.
    To that end, you use
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: to produce the histogram of the 71 weights and the normal QQ plot given in [Figure
    16-8](ch16.xhtml#ch16fig8). The additional `qqline` command adds the “optimal”
    line that the coordinates would lie along if the data were perfectly normal.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-08.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-8: Histogram (left) and normal QQ plot (right) of the weights of
    chicks in the* `chickwts` *data set. Are the data normally distributed?*'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: If you inspect the histogram of the weights, you can see that the data match
    the general appearance of a normal distribution, with a roughly symmetric unimodal
    appearance. That said, it doesn’t quite achieve the smoothness and naturally decaying
    height that produces the familiar normal bell shape. This is reflected in the
    QQ plot on the right; the central quantile values appear to lie on the line relatively
    well, except for some relatively minor “wiggles.” There are some clear discrepancies
    in the outer tails, but note that it is typical to observe discrepancies in these
    extreme quantiles in any QQ plot because fewer data points naturally occur there.
    Taking all of this into consideration, for this example the assumption of normality
    isn’t completely unreasonable.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s important to consider the sample size when assessing the validity of
    these kinds of assumptions; the larger the sample size, the less random variability
    will creep into the histogram and QQ plot, and you can more confidently reach
    a conclusion about whether your data are normal. For instance, the assumption
    of normality in this example may be complicated by the fact there’s a relatively
    small sample size of only 71.*'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '**The rnorm Function**'
  id: totrans-273
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Random variates of any given normal distribution are generated with `rnorm`;
    for example, the line
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: produces seven normally distributed values arising from N(−3.42,0.2). In contrast
    to the QQ plot produced for the chick weights in [Figure 16-8](ch16.xhtml#ch16fig8),
    you can use `rnorm`, `qqnorm`, and `qqline` to examine the degree to which hypothetically
    observed data sets that are truly normal vary in the context of a QQ plot.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: The following code generates 71 standard normal values and produces a corresponding
    normal QQ plot and then does the same for a separate data set of *n* = 710; these
    are displayed in [Figure 16-9](ch16.xhtml#ch16fig9).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![image](../images/f16-09.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-9: Normal QQ plots of 71 (left) and 710 (right) observations randomly
    generated from the standard normal distribution*'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the QQ plot for the simulated data set of size *n* = 71 shows
    similar deviation from the optimal line as does the chick weights data set. Bumping
    the sample size up by a factor of 10 shows that the QQ plot for the *n* = 710
    normal observations offers up far less random variation, although visible discrepancies
    in the tails do still occur. A good way to get used to assessing these effects
    is to rerun these lines of code several times (in other words, generating new
    data sets each time) and examine how each new QQ plot varies.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal Functions in Action: A Quick Example**'
  id: totrans-282
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let’s finish this section with one more working problem. Assume the manufacturer
    of a certain type of snack knows that the total net weight of the snacks in its
    80-gram advertised package, *X*, is normally distributed with a mean of 80.2 grams
    and a standard deviation of 1.1 grams. The manufacturer weighs the contents of
    randomly selected individual packets. The probability a randomly selected packet
    is less than 78 grams (that is, Pr(*X* < 78)) is as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The probability a packet is found to weigh between 80.5 and 81.5 grams is as
    follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The weight below which the lightest 20 percent of packets lie is as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'A simulation of five randomly selected packets can be found with the following:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**Exercise 16.4**'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: A tutor knows that the length of time taken to complete a certain statistics
    question by first-year undergraduate students, *X*, is normally distributed with
    a mean of 17 minutes and a standard deviation of 4.5 minutes.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the probability a randomly selected undergraduate takes more than 20
    minutes to complete the question?
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the chance that a student takes between 5 and 10 minutes to finish the
    question?
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the time that marks off the slowest 10 percent of students.
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the normal distribution of interest between ±4*σ* and shade in the probability
    area of (iii), the slowest 10 percent of students.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a realization of times based on a class of 10 students completing the
    question.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A meticulous gardener is interested in the length of blades of grass on his
    lawn. He believes that blade length *X* follows a normal distribution centered
    on 10 mm with a variance of 2 mm.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the probability that a blade of grass is between 9.5 and 11 mm long.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the standardized values of 9.5 and 11 in the context of this distribution?
    Using the standardized values, confirm that you can obtain the same probability
    you found in (i) with the standard normal density.
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Below which value are the shortest 2.5 percent of blade lengths found?
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardize your answer from (iii).
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '***16.2.3 Student’s t-distribution***'
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *Student’s t-distribution* is a continuous probability distribution generally
    used when dealing with statistics estimated from a sample of data. It will become
    particularly relevant in the next two chapters, so I’ll briefly explain it here
    first.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Any particular *t*-distribution looks a lot like the standard normal distribution—it’s
    bell-shaped, symmetric, and unimodal, and it’s centered on zero. The difference
    is that while a normal distribution is typically used to deal with a population,
    the *t*-distribution deals with *sample* from a population.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: For the *t*-distribution you don’t have to define any parameters per se, but
    you must choose the appropriate *t*-distribution by way of a strictly positive
    integer *ν* > 0; this is referred to as the *degrees of freedom* (df), called
    so because it represents the number of individual components in the calculation
    of a given statistic that are “free to change.” You’ll see in the upcoming chapters
    that this quantity is usually directly related to sample sizes.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, though, you should just loosely think of the *t-*distribution
    as the representation of a family of curves and think of the degrees of freedom
    as the “selector” you use to tell you which particular version of the density
    to use. The precise equation for the density of the *t-*distribution is also not
    especially useful in an introductory setting, though it is useful to remember
    that the total probability underneath any *t* curve is naturally 1.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: For a *t*-distribution, the `dt`, `pt`, `qt`, and `rt` functions represent the
    R implementation of the density, the cumulative distribution (left probabilities),
    the quantile, and the random variate generation functions, respectively. The first
    arguments, `x`, `q`, `p`, and `n`, respectively, provide the relevant value (or
    values) of interest to these functions; the second argument in all of these is
    `df`, to which you must specify the degrees of freedom *ν*.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: The best way to get an impression of the *t* family is through a visualization.
    [Figure 16-10](ch16.xhtml#ch16fig10) plots the standard normal distribution, as
    well as the *t-*distribution curve with *ν* = 1, *ν* = 6, and *ν* = 20 df.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f16-10.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-10: Comparing the standard normal distribution with three instances
    of the* t*-distribution. Note that the higher the degrees of freedom, the closer
    the* t*-distribution approximation becomes to the normal.*'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'The one important note to take away from [Figure 16-10](ch16.xhtml#ch16fig10),
    and indeed from this section, is the way in which the *t* density function changes
    with respect to the N(0,1) distribution as you increase the df. For small values
    of *ν* close to 1, the *t*-distribution is shorter, in terms of its mode, with
    more probability occurring in noticeably fatter tails. It turns out that the *t*
    density approaches the standard normal density as *ν* → ∞. As a case in point,
    note that the upper 5 percent tail of the standard normal distribution is delineated
    by the following value:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The same upper tail of the *t*-distribution is provided with df values of *ν*
    = 1, *ν* = 6, and *ν* = 20, respectively.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In direct comparison with the standard normal, the heavier weight in the tails
    of the *t* density leads naturally to more extreme quantile values given a specific
    probability. Notice that this extremity, however, is reduced as the df is increased—fitting
    in with the aforementioned fact that the *t-*distribution continues to improve
    in terms of its approximation to the standard normal as you raise the df.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '***16.2.4 Exponential***'
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Of course, probability density functions don’t have to be symmetrical like those
    you’ve encountered so far, nor do they need to allow for the random variable to
    be able to take values from negative infinity to positive infinity (like the normal
    or *t*-distributions). A good example of this is the *exponential distribution*,
    for which realizations of a random variable *X* are valid only on a 0 ≤ *X* <
    ∞ domain.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: For a continuous random variable 0 ≤ *X* < ∞, the exponential density function
    *f* is
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/e16-7.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
- en: where *λ*[e] is a parameter of the distribution and exp{·} is the exponential
    function. The notation
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '*X* ∼ EXP(*λ*[e])'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: is often used to indicate that “*X* follows an exponential distribution with
    rate *λ*[e].”
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key points to note:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: • Theoretically, *X* can take any value in the range 0 to ∞, and *f* (*x*) decreases
    as *x* increases.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: • The “rate” parameter must be strictly positive; in other words, *λ*[e] > 0\.
    It defines *f* (0) and the rate of decay of the function to the horizontal asymptote
    at zero.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'The mean and variance are as follows, respectively:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0359-01.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
- en: '**The dexp Function**'
  id: totrans-329
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The density function for the exponential distribution is a steadily decreasing
    line beginning at *f* (0) = *λ*; the rate of this decay ensures a total area of
    1 underneath the curve. You create [Figure 16-11](ch16.xhtml#ch16fig11) with the
    relevant `d`-function in the following code.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![image](../images/f16-11.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-11: Three different exponential density functions. Decreasing* *λ*[e]
    *lowers the mode and extends the tail.*'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: The parameter *λ*[e] is provided to `rate` in `dexp`, which is evaluated at
    *x*, provided to the first argument `x` (via the `xvals` object in this example).
    You can see that a distinct feature of the exponential density function is that
    aforementioned decay to zero, with larger values of *λ*[e] translating to a taller
    (yet sharper and more rapid) drop.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: This naturally decreasing behavior helps identify the role the exponential distribution
    often plays in applications—one of a “time-until-event” nature. In fact, there’s
    a special relationship between the exponential distribution and the Poisson distribution
    introduced in [Section 16.1.3](ch16.xhtml#ch16lev2sec139). When the Poisson distribution
    is used to model the count of a certain event through time, you use the exponential
    distribution to model the time between these events. In such a setting, the exponential
    parameter *λ*[e] defines the mean *rate* at which the events occur over time.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '**The pexp Function**'
  id: totrans-336
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s revisit the example from [Exercise 16.2](ch16.xhtml#ch16exc2), where the
    average number of cars passing an individual within a 120-minute window was said
    to be 107\. Define the random variable *X* to be the waiting time between two
    consecutive cars passing and, using an exponential distribution for *X* on a minute
    time scale, set *λ*[e] = 107/120 ≈ 0.89 (rounded to 2 d.p.). If 107 cars are typically
    observed in a two-hour window, then you see cars at an average rate of 0.89 per
    minute.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Thus, you interpret *λ*[e] as the “per-unit-time” measure of the *λ*[p] parameter
    from the Poisson mass function. The interpretation of the mean as the reciprocal
    of the rate, *μ[X]* = 1/λ[e], is also intuitive. For example, when observing cars
    at a rate of about 0.89 per minute, note that the average waiting time between
    cars is roughly 1/0.89 ≈ 1.12 minutes.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: So, in the current example, you want to examine the density ![image](../images/f0361-01.jpg).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Say a car has just passed the individual’s location and you want to find the
    probability that they must wait more than two and a half minutes before seeing
    another car, in other words, Pr(*X* > 2.5). You can do so using `pexp`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This indicates that you have just over a 10 percent chance of observing at
    least a 2-minute 30-second gap before the next car appears. Remember that the
    default behavior of the `p`-function is to find the cumulative, left-hand probability
    from the provided value, so you need to subtract the result from 1 to find an
    upper-tail probability. You find the probability of waiting less than 25 seconds
    with the following, which gives a result of roughly 0.31:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note the need to first convert the value of interest from seconds to minutes
    since you’ve defined *f* (*x*) via *λ*[e] ≈ 0.89 on the scale of the latter.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '**The qexp Function**'
  id: totrans-346
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Use the appropriate quantile function `qexp` to find, say, the cutoff point
    for the shortest 15 percent of waits.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This indicates that the value of interest is about 0.182 minutes, in other words,
    roughly 0.182 × 60 = 10.9 seconds.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: As usual, you can use `rexp` to generate random variates of any specific exponential
    distribution.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '*It is important to distinguish between the “exponential distribution,” the
    “exponential* family *of distributions,” and the “exponential* function*.” The
    first refers to the density function that’s just been studied, whereas the second
    refers to a general class of probability distributions, including the Poisson,
    the normal, and the exponential itself. The third is just the standard mathematical
    exponential function upon which the exponential family members depend and is directly
    accessible in R via* `exp`.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 16.5**'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Situated in the central north island of New Zealand, the Pohutu geyser is said
    to be the largest active geyser in the southern hemisphere. Suppose that it erupts
    an average of 3,500 times every year.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the intention of modeling a random variable *X* as the time between consecutive
    eruptions, evaluate the parameter value *λ*[e] with respect to a time scale in
    days (assume 365.25 days per year to account for leap years).
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the density function of interest. What’s the mean wait in days between
    eruptions?
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the probability of waiting less than 30 minutes for the next eruption?
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What waiting time defines the longest 10 percent of waits? Convert your answer
    to hours.
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also use the exponential distribution to model certain product survival
    times, or “time-to-failure” type of variables. Say a manufacturer of a particular
    air conditioning unit knows that the product has an average life of 11 years before
    it needs any type of repair callout. Let the random variable *X* represent the
    time until the necessary repair of one of these units and assume *X* follows an
    exponential distribution with *λ*[e] = 1/11.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The company offers a five-year full repair warranty on this unit. What’s the
    probability that a randomly selected air conditioner owner makes use of the warranty?
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A rival company offers a six-year guarantee on its competing air conditioning
    unit but knows that its units last, on average, only nine years before requiring
    some kind of repair. What are the chances of making use of that warranty?
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the probabilities that the units in (i) and the units in (ii) last
    more than 15 years.
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '***16.2.5 Other Density Functions***'
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are a number of other common probability density functions used for a
    wide variety of tasks involving continuous random variables. I’ll summarize a
    few here:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: • The *chi-squared distribution* models sums of squared normal variates and
    is thus often related to operations concerning sample variances of normally distributed
    data. Its functions are `dchisq`, `pchisq`, `qchisq`, and `rchisq`, and like the
    *t*-distribution ([Section 16.2.3](ch16.xhtml#ch16lev2sec143)), it’s dependent
    upon specification of a degrees of freedom provided as the argument `df`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: • The *F-distribution* is used to model ratios of two chi-squared random variables
    and is useful in, for example, regression problems (see [Chapter 20](ch20.xhtml#ch20)).
    Its functions are `df`, `pf`, `qf`, and `rf`, and as it involves two chi-squared
    values, it’s dependent upon the specification of a *pair* of degrees of freedom
    values supplied as the arguments `df1` and `df2`.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: • The *gamma distribution* is a generalization of both the exponential and chi-squared
    distributions. Its functions are `dgamma`, `pgamma`, `qgamma`, and `rgamma`, and
    it’s dependent upon “shape” and “scale” parameters provided as the arguments `shape`
    and `scale`, respectively.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: • The *beta distribution* is often used in Bayesian modeling, and it has implemented
    functions `dbeta`, `pbeta`, `qbeta`, and `rbeta`. It’s defined by two “shape”
    parameters *α* and *β*, supplied as `shape1` and `shape2`, respectively.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: In particular, you’ll encounter the chi-squared and *F*-distributions over the
    next couple of chapters.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '*In all of the common probability distributions you’ve examined over the past
    couple of sections, I’ve emphasized the need to perform “one-minus” operations
    to find probabilities or quantiles with respect to an upper- or right-tailed area.
    This is because of the cumulative nature of the* `p`*- and* `q`*-functions—by
    definition, it’s the lower tail that is dealt with. However, most* `p`*- and*
    `q`*-functions in R include an optional logical argument,* `lower.tail`*, which
    defaults to* `FALSE`*. Therefore, an alternative is to set* `lower.tail=TRUE`
    *in any relevant function call, in which case R will expect or return upper-tail
    areas specifically.*'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Code in This Chapter**'
  id: totrans-372
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
- en: '| `dbinom` | Binomial mass function | [Section 16.1.2](ch16.xhtml#ch16lev2sec138),
    [p. 335](ch16.xhtml#page_335) |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
- en: '| `pbinom` | Binomial cumulative problems | [Section 16.1.2](ch16.xhtml#ch16lev2sec138),
    [p. 336](ch16.xhtml#page_336) |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
- en: '| `qbinom` | Binomial quantiles function | [Section 16.1.2](ch16.xhtml#ch16lev2sec138),
    [p. 337](ch16.xhtml#page_337) |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
- en: '| `rbinom` | Binomial random realizations | [Section 16.1.2](ch16.xhtml#ch16lev2sec138),
    [p. 337](ch16.xhtml#page_337) |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
- en: '| `dpois` | Poisson mass function | [Section 16.1.3](ch16.xhtml#ch16lev2sec139),
    [p. 340](ch16.xhtml#page_340) |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: '| `ppois` | Poisson cumulative problems | [Section 16.1.3](ch16.xhtml#ch16lev2sec139),
    [p. 341](ch16.xhtml#page_341) |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
- en: '| `rpois` | Poisson random realizations | [Section 16.1.3](ch16.xhtml#ch16lev2sec139),
    [p. 341](ch16.xhtml#page_341) |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
- en: '| `dunif` | Uniform density function | [Section 16.2.1](ch16.xhtml#ch16lev2sec141),
    [p. 344](ch16.xhtml#page_344) |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
- en: '| `punif` | Uniform cumulative problems | [Section 16.2.1](ch16.xhtml#ch16lev2sec141),
    [p. 346](ch16.xhtml#page_346) |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
- en: '| `qunif` | Uniform quantiles | [Section 16.2.1](ch16.xhtml#ch16lev2sec141),
    [p. 346](ch16.xhtml#page_346) |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
- en: '| `runif` | Uniform random realizations | [Section 16.2.1](ch16.xhtml#ch16lev2sec141),
    [p. 347](ch16.xhtml#page_347) |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
- en: '| `dnorm` | Normal density function | [Section 16.2.2](ch16.xhtml#ch16lev2sec142),
    [p. 350](ch16.xhtml#page_350) |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
- en: '| `pnorm` | Normal cumulative problems | [Section 16.2.2](ch16.xhtml#ch16lev2sec142),
    [p. 350](ch16.xhtml#page_350) |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
- en: '| `qnorm` | Normal quantiles | [Section 16.2.2](ch16.xhtml#ch16lev2sec142),
    [p. 353](ch16.xhtml#page_353) |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
- en: '| `rnorm` | Normal random realizations | [Section 16.2.2](ch16.xhtml#ch16lev2sec142),
    [p. 355](ch16.xhtml#page_355) |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
- en: '| `qt` | Student’s *t* quantiles | [Section 16.2.3](ch16.xhtml#ch16lev2sec143),
    [p. 358](ch16.xhtml#page_358) |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
- en: '| `dexp` | Exponential density function | [Section 16.2.4](ch16.xhtml#ch16lev2sec144),
    [p. 359](ch16.xhtml#page_359) |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
- en: '| `pexp` | Exponential cumulative problems | [Section 16.2.4](ch16.xhtml#ch16lev2sec144),
    [p. 361](ch16.xhtml#page_361) |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
- en: '| `qexp` | Exponential quantiles | [Section 16.2.4](ch16.xhtml#ch16lev2sec144),
    [p. 361](ch16.xhtml#page_361) |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
