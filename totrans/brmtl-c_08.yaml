- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Local Variables and Procedures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量和过程
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: So far, we’ve been using a design pattern called “one big mess.” All code is
    dumped into `main`, and all variables are defined at the beginning of the program.
    This method works fine when your program is 100 or fewer lines long, but when
    you’re dealing with a 500,000-line program, you’re going to need some organization.
    This chapter discusses ways of limiting the scope of variables and instructions
    so you can make long, unmanageable blocks of code easier to understand, manage,
    and maintain.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用一种名为“杂乱无章”的设计模式。所有代码都被放入`main`中，所有变量都在程序开始时定义。当你的程序只有100行代码时，这种方法可以很好地工作，但当你处理一个50万行的程序时，你就需要一些组织结构。本章讨论了如何限制变量和指令的作用域，以便使长且难以管理的代码块更容易理解、管理和维护。
- en: For example, you can use a *global variable* anywhere in a program. To know
    where and how it’s used in a 500,000-line program, however, you have to scan all
    500,000 lines. A *local variable* has limited scope. To understand where and how
    a local variable is used, all you need to do is examine the, say, 50 to 200 lines
    of code where it is valid.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在程序的任何地方使用*全局变量*。然而，要知道它在一个50万行的程序中如何使用，你必须扫描所有50万行代码。*局部变量*的作用域有限。要理解一个局部变量的使用位置和方式，你只需检查它有效的、例如50到200行代码的区域。
- en: As your programs get longer and longer, you’ll learn how to divide the code
    into easily understood sections called *procedures*. Global variables will be
    available to every procedure, but you can define local variables that are available
    only to a single procedure. You’ll also learn how local variables are organized
    internally into stack frames. Given the limited amount of memory on our STM microcontroller,
    it’s very important to understand how much stack memory we are using.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序变得越来越长，你将学会如何将代码划分为易于理解的部分，称为*过程*。全局变量在每个过程都可用，但你可以定义只在单个过程内有效的局部变量。你还将学习局部变量是如何在内部组织成堆栈帧的。鉴于我们STM微控制器的内存有限，了解我们使用了多少堆栈内存是非常重要的。
- en: Finally, you’ll learn about *recursion*, which is where a procedure refers to
    itself. Recursion is complex in what it can do but simple if you understand the
    rules and follow them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将学习*递归*，即过程调用自身。递归在功能上很复杂，但如果你理解规则并遵循它们，它就很简单。
- en: Local Variables
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局部变量
- en: Up to this point, we’ve been using only global variables that are available
    everywhere in the program, from the line they are declared to the end of the program.
    Local variables are available to a much smaller, or local, area of a program.
    This area where a variable is valid is called its *scope*. [Listing 7-1](#listing7-1)
    demonstrates the declaration of local variables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了在程序中任何地方都可用的全局变量，从它们声明的那一行开始，一直到程序的结束。局部变量只在程序的一个较小的、本地的区域内有效。变量有效的区域称为它的*作用域*。[清单
    7-1](#listing7-1)展示了局部变量的声明。
- en: '***local.c***'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '***local.c***'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 7-1: Local variables'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-1：局部变量
- en: The scope of a local variable starts where it is declared and goes to the end
    of the enclosing curly brackets (`{}`). The variable `localToProcedure` is valid
    for the entire `main` function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量的作用域从声明开始，一直到封闭的大括号（`{}`）的结束。变量`localToProcedure`在整个`main`函数中有效。
- en: Now let’s look at smaller scopes, starting with the declaration of the `local`
    variable 1. The scope of this variable doesn’t end at the very next closing curly
    bracket 2, which is for a different block (section of code enclosed in curly brackets).
    Instead, it goes to the end bracket 3 for the block that started right before
    `local` was declared. The `veryLocal` variable has an even smaller scope. It starts
    with the declaration `int veryLocal = 7;` and ends when the block ends 2.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看更小的作用域，从`local`变量1的声明开始。这个变量的作用域并不是在下一个关闭的大括号2处结束，该大括号是用于另一个代码块（用大括号括起来的代码段）。相反，它延伸到在声明`local`之前开始的那个代码块的结束括号3。`veryLocal`变量的作用域更小。它从声明`int
    veryLocal = 7;`开始，到代码块结束时2结束。
- en: When a variable’s scope ends, the program can’t use the variable anymore. For
    example, trying to return the value of `veryLocal` at the end of `main` using
    the `return(veryLocal);` statement wouldn’t work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量的作用域结束时，程序就不能再使用该变量。例如，尝试在`main`的末尾使用`return(veryLocal);`语句返回`veryLocal`的值将不起作用。
- en: Hidden Variables
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏的变量
- en: In the previous example, all the local variables had different names in addition
    to having different scope. However, variables can also have the same name in different
    scopes. If multiple variables have the same name, C will use the value of the
    one in the current scope and hide the others. (Please don’t do this because it
    makes code confusing. It’s mentioned here so you know what to avoid.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，所有的局部变量除了具有不同的作用域外，还具有不同的名称。然而，变量也可以在不同的作用域中使用相同的名称。如果多个变量具有相同的名称，C语言会使用当前作用域中变量的值并隐藏其他变量。（请不要这样做，因为它会使代码变得混乱。这里提到它是为了让你知道应该避免这样做。）
- en: Let’s take a look at [Listing 7-2](#listing7-2), which demonstrates a very badly
    written program.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下[列表 7-2](#listing7-2)，它展示了一个写得非常糟糕的程序。
- en: '**hidden.c**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**hidden.c**'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 7-2: Hidden variables'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-2：隐藏的变量
- en: In this program, we define three variables, all named `var`. When the second
    one is defined 2, it hides the first one 1. Similarly, the `int var = 16;` declaration
    hides the second variable `var` 2, which hides the first one 1.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们定义了三个变量，都是命名为`var`。当第二个变量被定义时2，它会隐藏第一个变量1。同样，`int var = 16;`的声明会隐藏第二个`var`变量2，而它又会隐藏第一个`var`变量1。
- en: 'Suppose we were to add the following statement after the third declaration:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在第三个声明后添加以下语句：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Which `var` are we assigning? The one declared at 1, 2, or 3? The fact that
    we have to ask this question is a good indicator that this code is confusing.
    I’m not going to leave it as an exercise for the reader to find the answer because
    the proper solution is to never do this in the first place.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要赋值给哪个`var`？是第1行、第2行还是第3行声明的？我们不得不问这个问题，说明这段代码很混乱。我不会把这个问题留给读者去找答案，因为正确的解决方法是根本不要这么做。
- en: Procedures
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程
- en: A *procedure* is a way to define code so it can be used again. Let’s look at
    [Listing 7-3](#listing7-3), which provides a simple example.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*过程*是定义代码的一种方式，以便可以重复使用。让我们看一下[列表 7-3](#listing7-3)，它提供了一个简单的示例。'
- en: '**hello3.c**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**hello3.c**'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 7-3: A procedure demonstration'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-3：过程演示
- en: This program prints `Hello` three times, then `World!`. The procedure starts
    with a comment block, which isn’t strictly necessary, but if you’re going to write
    quality code, you should put one in before each procedure. The beginning (`/**`)
    of the comment block indicates that the Doxygen documentation tool should process
    it. To be compatible with the format of the STM libraries, we are using the same
    commenting convention.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序会打印`Hello`三次，然后是`World!`。过程从一个注释块开始，这个注释块并非严格必要，但如果你要编写高质量代码，应该在每个过程前加上注释块。注释块的开始部分（`/**`）表示Doxygen文档工具应该处理它。为了与STM库的格式兼容，我们使用了相同的注释约定。
- en: The statement `void sayHello(void)` 1 tells C that our procedure’s name is `sayHello`.
    It returns nothing (first `void`) and takes no parameters (second `void`). The
    `{}` block that follows this statement defines the body of the procedure and contains
    all the instructions executed by the procedure 2. The three `sayHello();` lines
    3 are calls to the `sayHello` procedure. They tell the processor to save the location
    of the next statement (either another call to `sayHello` or the call to `puts`)
    and then start execution with the first line of `sayHello`. When the procedure
    finishes (or hits a `return` statement), execution continues at the point saved
    during the call.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 语句`void sayHello(void)` 1告诉C语言我们的过程名是`sayHello`。它不返回任何值（第一个`void`）且不接受任何参数（第二个`void`）。紧随其后的`{}`块定义了过程的主体，并包含了过程执行的所有指令2。三个`sayHello();`行3是调用`sayHello`过程的地方。它们告诉处理器保存下一个语句的位置（可能是另一个`sayHello`的调用，或是调用`puts`），然后从`sayHello`的第一行开始执行。当过程结束（或遇到`return`语句）时，执行会继续在调用时保存的那个位置。
- en: Stack Frames
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栈帧
- en: Procedures have their own local variables. The compiler’s job is to organize
    memory so it can hold those variables. For global variables (not in a procedure),
    the compiler says something like, “I need 4 bytes to hold the integer named `Total`.”
    The linker then sees that and assigns the variable a physical location in memory
    (for example, `0xffffec04`). Global variables are allocated statically at compile
    time, meaning the compiler allocates space for the variables and that’s it. The
    variables are never destroyed, and their memory is not reallocated.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 过程有它们自己的局部变量。编译器的工作是组织内存，以便可以容纳这些变量。对于全局变量（不在过程中的），编译器会说类似于：“我需要 4 字节来存储名为`Total`的整数。”链接器看到这一点后，会为该变量分配内存中的物理位置（例如，`0xffffec04`）。全局变量在编译时静态分配，这意味着编译器为变量分配了空间，然后就完成了。变量永远不会被销毁，并且它们的内存不会被重新分配。
- en: 'Variables that are local to a procedure are more complex. They have to be allocated
    dynamically at runtime. When a procedure starts, all the local variables for that
    procedure are allocated. (Note: there is a `static` local variable that’s allocated
    at compile time, but we haven’t covered that yet.) When the procedure ends, they
    are deallocated. The compiler accomplishes this by creating a *stack frame* when
    the procedure starts and destroying it when the procedure ends. The stack frame
    holds all the temporary information the procedure needs.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量更为复杂。它们必须在运行时动态分配。当一个过程开始时，该过程的所有局部变量都会被分配。（注意：有一个`static`局部变量会在编译时分配，但我们还没有涉及这一点。）当过程结束时，局部变量会被回收。编译器通过在过程开始时创建一个*栈帧*，并在过程结束时销毁它来完成这一过程。栈帧保存了过程所需的所有临时信息。
- en: Let’s look at [Listing 7-4](#listing7-4), which shows a sample program.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看[清单 7-4](#listing7-4)，它展示了一个示例程序。
- en: '**proc.c**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**proc.c**'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 7-4: A stack frame demonstration'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-4：栈帧演示
- en: Let’s create a project for this program and start debugging it. Run the program
    in the debugger, then step through it using the command **Run**▶**Step Into**
    (F5) until you reach 1. Your screen should look like [Figure 7-1](#figure7-1).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个程序创建一个项目并开始调试。通过调试器运行程序，然后使用命令**运行**▶**单步进入** (F5) 步骤执行，直到你到达第1行。你的屏幕应该像[图
    7-1](#figure7-1)一样显示。
- en: '![f07001](image_fi/501621c07/f07001.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f07001](image_fi/501621c07/f07001.png)'
- en: 'Figure 7-1: Debugging *proc.c*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-1：调试*proc.c*
- en: 'When a program is loaded, all the statically allocated variables get their
    own memory locations. In the STM32 chip, they are assigned to the lower portion
    of the random access memory (RAM). The leftover memory is reserved for dynamic
    allocation. Specifically, two memory areas are used dynamically: the *stack*,
    which holds local variables, and the *heap*. We won’t worry about the heap for
    now; our microprocessor doesn’t have enough memory to use it. (We’ll discuss the
    heap in Chapter 13, when we talk about programming for larger systems.)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序加载时，所有静态分配的变量会获得它们各自的内存位置。在 STM32 芯片中，它们被分配到随机存取内存（RAM）的较低部分。剩余的内存则保留用于动态分配。具体而言，有两个内存区域被动态使用：*栈*，用于存储局部变量，和*堆*。我们暂时不关心堆；我们的微处理器没有足够的内存来使用它。（我们将在第13章讨论堆，届时将讨论为更大系统编程的内容。）
- en: The name *stack* comes from the fact that data is stacked on top of each other
    in memory. When your program starts, the `main` function allocates a stack frame
    for its local variables and temporary values. When `outer` is called, it allocates
    another stack frame on top of the one for `main`. The call to `inner` adds a third
    stack frame to the stack.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*栈*这个名字来源于数据在内存中堆叠的方式。当程序启动时，`main`函数为其局部变量和临时值分配一个栈帧。当调用`outer`时，它会在`main`的栈帧之上分配另一个栈帧。调用`inner`会向栈中添加第三个栈帧。'
- en: To see where the stack is in each procedure, click the **Registers** tab in
    the upper-right panel and scroll down until you see the `rsp` register. [Figure
    7-2](#figure7-2) shows that it contains `0x7fffffffd0e0`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每个过程中的栈的位置，请点击右上角面板中的**寄存器**标签，并向下滚动直到看到`rsp`寄存器。[图 7-2](#figure7-2)显示它包含`0x7fffffffd0e0`。
- en: '![f07002](image_fi/501621c07/f07002.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![f07002](image_fi/501621c07/f07002.png)'
- en: 'Figure 7-2: Displaying the registers'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-2：显示寄存器
- en: Depending on the machine, the stack may either start at a low memory address
    and grow up or at a high memory address and grow down. On this machine (the x86),
    it starts high and goes down.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据机器的不同，栈可能从低内存地址开始并向上增长，或者从高内存地址开始并向下增长。在这台机器（x86）上，栈是从高地址开始并向下增长的。
- en: The stack from the `outer` frame is at `0x7fffffffd0f0`. Because our stack grows
    down, this number is lower than the stack frame for `main`. The `inner` frame
    is at `0x7fffffffd110` (see [Table 7-1](#table7-1)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`outer` 堆栈帧位于 `0x7fffffffd0f0`。由于我们的堆栈是向下增长的，这个地址比 `main` 的堆栈帧地址要低。`inner`
    堆栈帧位于 `0x7fffffffd110`（参见 [表 7-1](#table7-1)）。'
- en: 'Table 7-1: Stack Usage'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-1：堆栈使用情况
- en: '| **Address** | **Procedure** | **Contents** | **Comments** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **地址** | **过程** | **内容** | **备注** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `0x7fffffffd110` | `main` | <overhead> | Bottom of stack |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `0x7fffffffd110` | `main` | <overhead> | 堆栈底部 |'
- en: '| `0x7fffffffd0f0` | `outer` | <overhead> `i`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| `0x7fffffffd0f0` | `outer` | <overhead> `i`'
- en: '`j` |  |'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`j` |  |'
- en: '| `0x7fffffffd0e0` | `inner` | <overhead> `i`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| `0x7fffffffd0e0` | `inner` | <overhead> `i`'
- en: '`k` | Top of stack |'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`k` | 堆栈顶部 |'
- en: One key concept to understand is that stack frames are allocated in last in,
    first out (LIFO) order. When we are done with `inner`, its stack frame will be
    destroyed and then the `outer` frame will be destroyed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的一个关键概念是，堆栈帧是以“后进先出”（LIFO）的顺序分配的。当我们完成 `inner` 的执行时，它的堆栈帧将被销毁，然后 `outer`
    的堆栈帧会被销毁。
- en: The Variables panel (shown in [Figure 7-1](#figure7-1), upper right) displays
    the `i` and `k` variables. The debugger is displaying the variables in the stack
    frame for `inner`, indicated by the fact that the stack frame for `inner` is highlighted
    in the Debug panel (upper left). Click the `outer` stack frame in the Debug panel,
    and you’ll see the Variables panel change and show the variables for `outer`,
    as in [Figure 7-3](#figure7-3).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 变量面板（如 [图 7-1](#figure7-1) 中右上角所示）显示了 `i` 和 `k` 变量。调试器显示的是 `inner` 堆栈帧中的变量，这可以通过调试面板（左上角）中高亮显示的
    `inner` 堆栈帧来确认。点击调试面板中的 `outer` 堆栈帧，你会看到变量面板发生变化，并显示 `outer` 中的变量，正如 [图 7-3](#figure7-3)
    所示。
- en: '![f07003](image_fi/501621c07/f07003.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f07003](image_fi/501621c07/f07003.png)'
- en: 'Figure 7-3: The `outer` stack frame'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-3：`outer` 堆栈帧
- en: Let’s continue debugging the program by stepping past the last instruction of
    `inner`. When we exit `inner`, the stack frame for that function disappears, because
    we are no longer executing `inner` and have no need for a place to store its variables.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过调试程序，跳过 `inner` 的最后一条指令。当我们退出 `inner` 时，该函数的堆栈帧将消失，因为我们不再执行 `inner`，也不再需要存储它的变量。
- en: '[Figure 7-4](#figure7-4) shows the stack after we exit the `inner` stack frame.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-4](#figure7-4) 显示的是我们退出 `inner` 堆栈帧后的堆栈情况。'
- en: '![f07004](image_fi/501621c07/f07004.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f07004](image_fi/501621c07/f07004.png)'
- en: 'Figure 7-4: The stack after exiting the `inner` stack frame'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-4：退出 `inner` 堆栈帧后的堆栈
- en: Notice there are now only two stack frames on the stack.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在堆栈上只剩下两个堆栈帧。
- en: Recursion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归
- en: So far, we’ve been dealing with basic procedure calls; each procedure was given
    a different name, and the calling process was simple. Now we’re going to focus
    on *recursion*, which is when a function calls itself. Recursion can be a powerful
    tool, but it’s tricky to use if you don’t understand the rules.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理基本的过程调用；每个过程都有不同的名称，且调用过程简单。现在，我们将专注于 *递归*，即一个函数调用自身。递归可以是一个强大的工具，但如果你不了解规则，使用起来会很棘手。
- en: 'The classic recursive problem is computing a factorial. The factorial function
    is defined as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的递归问题是计算阶乘。阶乘函数的定义如下：
- en: f(*n*) = 1, when *n* is 1
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: f(*n*) = 1，当 *n* 为 1 时
- en: otherwise, f(*n*) = *n* × f(*n* – 1)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，f(*n*) = *n* × f(*n* – 1)
- en: Turning this into code gives us [Listing 7-5](#listing7-5).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将此转化为代码，我们得到 [清单 7-5](#listing7-5)。
- en: '**factor.c**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**factor.c**'
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 7-5: A program to compute factorials'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-5：计算阶乘的程序
- en: First, we call `factor(5)` to get the factorial of 5\. For that, we need `factor(4)`,
    so we suspend `factor(5)` while we call `factor(4)`. But `factor(4)` needs `factor(3)`,
    so we suspend work and call `factor(3)`. Now `factor(3)` needs `factor(2)`, and,
    again, `factor(2)` needs `factor(1)`. Finally, `factor(1)` doesn’t need anything,
    so it returns 1 to its caller, `factor(2)`. The function `factor(2)` is running,
    so it computes 2 × 1 and returns 2 to its caller, `factor(3)`. Next, `factor(3)`
    takes the return value (2), computes 2 × 3, and returns 6 to its caller, `factor(4)`.
    Nearing the end, `factor(4)` computes 6 × 4 and returns 24\. Finally, `factor(5)`
    computes 24 × 5 and returns 120.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们调用 `factor(5)` 来计算 5 的阶乘。为此，我们需要 `factor(4)`，所以我们暂停 `factor(5)`，同时调用 `factor(4)`。但
    `factor(4)` 需要 `factor(3)`，于是我们暂停工作并调用 `factor(3)`。现在 `factor(3)` 需要 `factor(2)`，同样，`factor(2)`
    需要 `factor(1)`。最后，`factor(1)` 不需要任何操作，于是它返回 1 给调用者 `factor(2)`。函数 `factor(2)`
    正在运行，因此它计算 2 × 1 并返回 2 给调用者 `factor(3)`。接着，`factor(3)` 获取返回值（2），计算 2 × 3 并返回 6
    给调用者 `factor(4)`。接近尾声时，`factor(4)` 计算 6 × 4 并返回 24。最后，`factor(5)` 计算 24 × 5 并返回
    120。
- en: 'When you execute this program in the debugger, you should see the stack grow
    and shrink as the program computes the factorial. You also should see a stack
    with five stack frames allocated for the `factor` procedure, one for each instance:
    `factor(1)`, `factor(2)`, `factor(3)`, `factor(4)`, and `factor(5)`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在调试器中执行这个程序时，你应该看到堆栈在程序计算阶乘时不断增长和缩小。你还应该看到为 `factor` 过程分配了五个堆栈帧，每个实例都有一个堆栈帧：`factor(1)`、`factor(2)`、`factor(3)`、`factor(4)`
    和 `factor(5)`。
- en: 'Two rules determine when you can use recursion:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 两条规则决定了何时可以使用递归：
- en: Each call to the procedure must make the problem simpler.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次调用该过程都必须使问题变得更简单。
- en: There must be an end point.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须有一个终点。
- en: Let’s see how those rules work with our factorial program. In order to compute
    `factor(5)`, we need to compute `factor(4)`. The first rule is satisfied because
    `factor(4)` is simpler than `factor(5)`. Sooner or later, we reach `factor(1)`,
    and that’s the end point, which satisfies the second rule.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些规则如何在我们的阶乘程序中运作。为了计算 `factor(5)`，我们需要计算 `factor(4)`。第一个规则被满足，因为 `factor(4)`
    比 `factor(5)` 更简单。迟早，我们会到达 `factor(1)`，这就是终点，满足第二个规则。
- en: Let’s violate the rules to see what happens; we’ll modify the program and try
    to compute `factor(-1)`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们违反规则看看会发生什么；我们将修改程序并尝试计算 `factor(-1)`。
- en: Does this satisfy the two rules? Well, `factor(-1)` needs `factor(-2)`, which
    needs `factor(-3)`, and so on, until we reach 1\. But there is no way to go from
    –1 to 1 by subtraction, so we have no way of ending the program.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这符合两个规则吗？嗯，`factor(-1)` 需要 `factor(-2)`，而 `factor(-2)` 又需要 `factor(-3)`，依此类推，直到我们到达
    1。但没有办法通过减法从 -1 到达 1，所以我们没有办法结束程序。
- en: 'When I run this program on my little Linux box, I see the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在我的小型 Linux 机器上运行这个程序时，我看到以下内容：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The system ran out of stack memory, and the program aborted because it violated
    the constraints of the memory protection of the x86 processor. On other systems,
    the results may be different. For example, on ARM processors, the stack can run
    into the heap and trash it (more on the heap in Chapter 13), or something else
    can get clobbered. In any case, running out of stack is not a good thing to do.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 系统耗尽了堆栈内存，程序中止，因为它违反了 x86 处理器的内存保护约束。在其他系统上，结果可能会有所不同。例如，在 ARM 处理器上，堆栈可能会碰到堆并破坏它（更多关于堆的内容见第13章），或者其他某些内容可能会被覆盖。无论如何，堆栈耗尽都不是一个好现象。
- en: Incidentally, the program got all the way to `x=-262007` before it aborted.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，程序在中止之前一直运行到 `x=-262007`。
- en: Programming Style
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程风格
- en: 'In this book, we try to use good programming style whenever we can. For example,
    we’ve made sure to include a comment block at the top of every procedure, and
    we always include a comment after each variable declaration. Good programming
    style is designed the way it is for two reasons: to give the programmer who comes
    after you a clear idea of what you did and to make it difficult to make errors.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们尽量在可能的情况下使用良好的编程风格。例如，我们确保在每个过程的顶部包含注释块，并且在每个变量声明后都包含注释。良好的编程风格有两个目的：让后续的程序员清楚地了解你做了什么，并且使错误更难发生。
- en: 'We violated one of those rules in the factorial example. This is the offending
    line:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在阶乘例子中违反了其中一个规则。问题出在这一行：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What’s wrong with it? The `int` type is signed, but you can compute the factorial
    only on positive numbers. We could have written our function as the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么问题？`int` 类型是有符号的，但你只能计算正数的阶乘。我们本可以将我们的函数写成以下形式：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Writing it that way would make it impossible to pass in a negative number. Note
    that the compiler will helpfully change –1 to an unsigned number (4294967295)
    without warning, unless you include the compiler switch `-Wconversion`. GCC has
    hundreds of options, and finding out which to use is its own art form. The first
    version of that line did have two advantages, however; it’s a good example of
    bad style, and it allowed us to demonstrate stack overflow with `factor(-1)`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这样编写会导致无法传递负数。注意，编译器会在没有警告的情况下将 -1 自动转换为无符号数（4294967295），除非你包含编译器开关 `-Wconversion`。GCC
    有成百上千的选项，找出需要使用哪个选项本身就是一门艺术。不过，这行代码的第一版确实有两个优点；它是一个不良风格的好例子，而且它让我们能够通过 `factor(-1)`
    演示堆栈溢出。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You may have noticed something about this book. It’s divided into chapters.
    Why? To make it easier to read, of course. A chapter provides the reader with
    an understandable unit of information that can be absorbed in one sitting.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到这本书的一个特点，它被分成了多个章节。为什么？当然是为了让阅读更加方便。每一章提供了一个读者可以一次性理解的信息单元。
- en: Computer programs need to be divided into bite-size chunks as well. It’s impossible
    to keep track of a 750,000-line program. It is possible to understand everything
    about a 300-line procedure. Local variables also help in this organization. If
    you have a variable that’s local to a 300-line procedure, you know it will be
    used only in those 300 lines. On the other hand, a global variable can be used
    anywhere in a 750,000-line program.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序也需要被划分为易于处理的小块。一个包含 750,000 行的程序几乎无法跟踪，而一个 300 行的过程却能让人理解所有内容。局部变量有助于这种组织。如果某个变量只在
    300 行的过程中使用，你可以确保它只会在这 300 行中使用。另一方面，全球变量可以在一个 750,000 行的程序中随时被使用。
- en: The key to writing good code is to make it understandable and simple. Procedures
    help you divide your program into simple, understandable units, which helps you
    write code that’s more reliable and easier to maintain.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编写优质代码的关键是使其易于理解且简单。过程有助于将程序分解成简单、易懂的单元，从而帮助你编写更可靠、更易于维护的代码。
- en: Programming Problems
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Write a function to compute the area of a triangle and a small main program
    to test it with three different sets of values.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，计算三角形的面积，并编写一个小的主程序，用三个不同的数值集来测试该函数。
- en: Write a procedure called `max` that returns the maximum of two numbers.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为 `max` 的过程，返回两个数字中的最大值。
- en: Write a program that computes the fifth Fibonacci number. Bonus points for doing
    it recursively.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，计算第五个斐波那契数。若能使用递归方式实现，则加分。
- en: Create a function that adds up the digits in a number. For example, 123 results
    in 6 (in other words, 1 + 2 + 3). If the result is 10 or greater, the process
    should repeat until the result is a single digit. For example, 987 is 9 + 8 +
    7 = 24\. That’s bigger than 10, so 24 is 2 + 4, which yields 6.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于求一个数字的各位数字之和。例如，123 的结果是 6（换句话说，1 + 2 + 3）。如果结果大于或等于 10，应该重复这个过程，直到结果是一个单一的数字。例如，987
    是 9 + 8 + 7 = 24。24 大于 10，所以 24 是 2 + 4，结果是 6。
