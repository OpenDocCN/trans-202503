- en: '**C'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MATRICES, DATA FRAMES, AND FACTOR CONVERSIONS**
  prefs: []
  type: TYPE_NORMAL
- en: It is a fact of life in the R world that R’s wonderful flexibility in terms
    of data types also means that serious use needs some skill in converting between
    types. This appendix will ensure that the reader has this skill.
  prefs: []
  type: TYPE_NORMAL
- en: C.1 Matrices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the R *matrix* class might be viewed as more fundamental than data
    frames, some R users these days are unaware of it. Since any serious usage of
    ML in R requires knowledge of this class, this appendix will present a brief tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: In keeping with the theme of this book limiting the use of mathematical tools,
    we will not discuss the mathematical properties of matrices.
  prefs: []
  type: TYPE_NORMAL
- en: 'An R matrix is essentially a data frame in which all columns are numeric. It
    uses the same [i,j] notation. Conversions can be made between the two types. Here
    are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'C.2 Conversions: Between R Factors and Dummy Variables, Between Data Frames
    and Matrices'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In R, a categorical variable has a formal class: *factor*. It actually is one
    of the most useful aspects of R, but one must be adept at switching back and forth
    between factors and the corresponding dummy variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, though we mostly work with data frames in this book, there are some
    algorithms that need matrices, say, because they calculate distances between rows
    and do matrix multiplication and inversion. You do not need to know what matrix
    inversion is and so on, but some software packages will require you to present
    only matrix inputs and not data frames. There is a brief tutorial on matrices
    at the beginning of this appendix.
  prefs: []
  type: TYPE_NORMAL
- en: Some highly popular R ML packages automatically generate dummies from factors,
    but others do not. For example, `glmnet` for LASSO models requires that categorical
    features be in the form of dummies, while `ranger`, for random forests, accepts
    factors.
  prefs: []
  type: TYPE_NORMAL
- en: So it’s important to be able to generate dummy variables ourselves. The `regtools`
    functions `factorToDummies()` and `factorsToDummies()` do this. We discuss the
    `factorToDummies()` function in [Section 1.9](ch01.xhtml#ch01lev9). We use dummy
    variables throughout the book, including in this appendix.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the built-in R function `as.matrix()` to convert from data frames
    to matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In math, we draw matrices as rectangular arrays. For the matrix `m` above,
    for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/app03equ01.jpg)'
  prefs: []
  type: TYPE_IMG
