- en: '4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AUDITING AND ACCOUNTABILITY
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you’ve successfully gone through the identification, authentication, and
    authorization processes (or even while you’re still completing them), you need
    to keep track of the activities taking place in your organization. Even after
    you’ve allowed a party access to your resources, you still need to ensure that
    they behave in accordance with your rules, particularly those relating to security,
    business conduct, and ethics. Essentially, you need to make sure you can hold
    users of your systems accountable ([Figure 4-1](#ch4fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-1: You should always hold users accountable.*'
  prefs: []
  type: TYPE_NORMAL
- en: Holding someone *accountable* means making sure that person is responsible for
    their actions. This is particularly important now that most organizations house
    a great deal of information in digital form. If you don’t keep track of how people
    are accessing sensitive data stored digitally, you can suffer business losses,
    intellectual property theft, identity theft, and fraud. In addition, a data breach
    could have legal consequences for your organization. Some types of data—medical
    and financial, for example—are protected by law in several countries; in the United
    States, two such well-known laws are the Health Insurance Portability and Accountability
    Act of 1996, which protects medical information, and the Sarbanes–Oxley Act of
    2002, which protects against corporate fraud.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the measures you put in place to ensure accountability are examples
    of *auditing*, which is the process of reviewing an organization’s records or
    information. You perform audits to ensure that people comply with laws, policies,
    and other bodies of administrative control. Auditing can also prevent attacks,
    such as credit card companies recording and auditing the purchases you make through
    your account. If you decide to buy half a dozen laptops in one day, your unusual
    behavior might trigger an alert in the company’s monitoring system, and the company
    might temporarily freeze any purchases made with your card. In this chapter, you’ll
    learn about accountability in more detail and see how to use auditing to enforce
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Accountability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To hold people accountable for their actions, you have to trace all activities
    in your environment back to their sources. That means you have to use identification,
    authentication, and authorization processes so you can know who a given event
    is associated with and what permissions allowed them to carry it out.
  prefs: []
  type: TYPE_NORMAL
- en: It’s easy to criticize accountability and its associated auditing tools. You
    could argue that implementing surveillance techniques is like having Big Brother
    watching over your shoulder. In some senses, this is true; if you monitor people
    excessively, you can create an unhealthy environment.
  prefs: []
  type: TYPE_NORMAL
- en: But you can also go too far in the other direction. If you don’t have sufficient
    controls in place to deter or prevent people from breaking your rules and abusing
    your resources, you’ll end up with security disasters. The “Equifax Breach” box
    covers an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE EQUIFAX BREACH**'
  prefs: []
  type: TYPE_NORMAL
- en: In 2017, Equifax’s shareholders, board of directors, and auditors, as well as
    the US government, failed to hold Equifax accountable for protecting consumers’
    personal and financial information. As a result, attackers stole data relating
    to 147 million Americans, and Equifax suffered very little in the way of consequences,
    aside from a brief dip in stock price. Although Equifax was brought to testify
    in front of Congress and lawmakers said they would enact new regulations because
    of the incident, Equifax has faced no consequences, and Congress has not passed
    any new laws on the matter.
  prefs: []
  type: TYPE_NORMAL
- en: The breach occurred when attackers exploited a vulnerability (designated as
    CVE-2017-5638) in Apache Struts2, a framework for developing Java applications
    for web use. This vulnerability allowed attackers to perform remote code execution
    (RCE) on the web servers in question, giving them a foothold in the Equifax environment.
    At the time of the attack, Equifax had a solution to the vulnerability but hadn’t
    implemented it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Although Equifax has not publicly disclosed the exact details of the breach
    beyond the initial entry as of the fall of 2018, we can infer that, since attackers
    were able to breach an internet-facing server and access personally identifiable
    information belonging to Equifax customers, the system included significant lapses
    in security; Equifax might not have separated servers containing sensitive data,
    for example, or it might have used poor access controls, among other issues. (The
    US Government Accountability office released a report confirming these types of
    issues.[¹](notes.xhtml#ch04fn1))
  prefs: []
  type: TYPE_NORMAL
- en: Although outside agencies might often prompt accountability, the impetus to
    comply with these requirements must come from within your organization. For example,
    when a company experiences a breach in the United States, laws often require it
    to notify those whose information has been exposed. As of March 2018, all 50 US
    states now have breach disclosure laws.[²](notes.xhtml#ch04fn2)
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, however, few people outside the company know of the breaches
    until the company notifies those who are directly involved. You can certainly
    see why an organization might be tempted, in such a case, to not say anything
    about the incident. If you don’t comply with legal requirements, however, you’ll
    likely be discovered eventually. When that happens, you’ll face greater personal,
    business, and legal repercussions than if you had handled the situation properly
    in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Security Benefits of Accountability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you hold people accountable, you can keep your environment secure in several
    ways: by enabling a principle called nonrepudiation, by deterring those who would
    otherwise misuse your resources, and by detecting and preventing intrusions. The
    processes you use to ensure accountability can also assist you in preparing materials
    for legal proceedings.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Nonrepudiation*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The term *nonrepudiation* refers to a situation in which an individual is unable
    to successfully deny that they have made a statement or taken an action, generally
    because we have sufficient evidence that they did it. In information security
    settings, you can achieve nonrepudiation in a variety of ways. You may be able
    to produce proof of the activity directly from system or network logs or recover
    such proof through the use of digital forensic examination of the system or devices
    involved.
  prefs: []
  type: TYPE_NORMAL
- en: You may also be able to establish nonrepudiation using encryption technologies,
    like hash functions, to digitally sign a communication or a file. You’ll learn
    more about such methods in [Chapter 5](ch05.xhtml), which covers encryption. Another
    example is when a system digitally signs every email that is sent from it, making
    it impossible for someone to deny the fact that the email came from that system.
  prefs: []
  type: TYPE_NORMAL
- en: '*Deterrence*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Accountability can also prove to be a great *deterrent* against misbehavior
    in your environments. If people are aware that you’re monitoring them and if you’ve
    communicated to them that there will be penalties for acting against the rules,
    individuals may think twice before straying outside the lines.
  prefs: []
  type: TYPE_NORMAL
- en: The key to deterrence lies in letting people know they will be held accountable
    for their actions. You typically achieve deterrence with the auditing and monitoring
    processes, both of which are discussed in the “Auditing” section of this chapter.
    If you don’t make your intentions clear, your deterrent will lose most of its
    strength.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if, as part of your monitoring activities, you keep track of the
    badge access times that tell you when your employees pass in and out of your facility,
    you can validate this activity against the times they have submitted on their
    time card for each week to prevent your employees from falsifying their time card
    and defrauding the company for additional and undeserved pay. Since the employees
    are aware that this cross-checking takes place, they’re deterred from lying on
    their time cards. While this might seem intrusive, real companies often use such
    methods when they have large numbers of employees working specific shifts, like
    at technical support help desks.
  prefs: []
  type: TYPE_NORMAL
- en: '*Intrusion Detection and Prevention*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you audit information in your environment, you can detect and prevent intrusions
    in both the logical and physical sense. If you implement alerts based on unusual
    activities and regularly check the information you have recorded, you stand a
    much better chance of detecting attacks in progress and the precursors of future
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Particularly in the logical realm, where attacks can take place in fractions
    of a second, you would also be wise to implement automated tools to monitor the
    system and alert you to any strange activity. You can divide such tools into two
    major categories: intrusion detection systems (IDSs) and intrusion prevention
    systems (IPSs).'
  prefs: []
  type: TYPE_NORMAL
- en: An IDS is strictly a monitoring and alerting tool; it notifies you when an attack
    or other undesirable activity is taking place. An IPS, which often works from
    information sent by the IDS, can take action based on events happening in the
    environment. In response to an attack over the network, an IPS might refuse traffic
    from the source of the attack. [Chapters 10](ch10.xhtml) and [11](ch11.xhtml)
    will discuss IDSs and IPSs at greater length.
  prefs: []
  type: TYPE_NORMAL
- en: '*Admissibility of Records*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you seek to introduce records into legal settings, you’re more likely to
    have them accepted when they’re produced by a regulated and consistent tracking
    system. For instance, if you plan to submit digital forensic evidence for use
    in a court case, you’ll likely have to provide a solid and documented *chain of
    custody* for the evidence in order for the court to accept it. That means you
    need to be able to track information such as the location of the evidence over
    time, how exactly it passed from one person to another, and how it was protected
    while it was stored.
  prefs: []
  type: TYPE_NORMAL
- en: Your accountability methods for evidence collection should create an unbroken
    chain of custody. If it doesn’t, your evidence will likely only be taken as hearsay,
    at best, considerably weakening your case.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Auditing* is a methodical examination and review of an organization’s records.[³](notes.xhtml#ch04fn3)
    In nearly any environment, from the lowest level of technology to the highest,
    you usually ensure that people remain accountable for their actions by using some
    kind of auditing.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the primary ways you can ensure accountability through technical means
    is by keeping accurate records of who did what and when they did it—and then checking
    those records. If you don’t have the ability to assess your activities over a
    period, you won’t be able to facilitate accountability on a large scale. Particularly
    in larger organizations, your capacity to audit directly equates to your ability
    to hold anyone accountable for anything.
  prefs: []
  type: TYPE_NORMAL
- en: You may also be bound by contractual or regulatory requirements that subject
    you to audits on some sort of recurring basis. In many cases, such audits are
    carried out by unrelated and independent third parties certified and authorized
    to perform such a task. Good examples of such audits are those mandated by the
    Sarbanes–Oxley Act, mentioned earlier, which ensures that companies report their
    financial results honestly.
  prefs: []
  type: TYPE_NORMAL
- en: '*What Do You Audit?*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the information security world, organizations commonly audit the factors
    that determine access to their various systems. For example, you might audit passwords,
    allowing you to enforce the policies dictating how to construct and use them.
    As discussed in [Chapter 2](ch02.xhtml), if you don’t construct passwords in a
    secure manner, an attacker can easily crack them. You should also verify how often
    users change their passwords. In many cases, systems can check password strength
    and manage password changes automatically, using functions within an operating
    system or other utilities. You’ll also have to audit those tools to ensure that
    they’re working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations often audit software licenses as well. The software you use should
    have a license that proves you obtained it legally. If an outside agency were
    to audit you and found that you were running large quantities of unlicensed software,
    the financial penalties could be severe. It is often best if you can find and
    correct such matters yourself before receiving a notification from an external
    company.
  prefs: []
  type: TYPE_NORMAL
- en: The Business Software Alliance (BSA) is one such company that works on behalf
    of software firms (Adobe or Microsoft, for instance). It regularly audits other
    organizations to ensure that they’re complying with software licensing. Legal
    settlements with the BSA can reach $250,000 *per occurrence* of unlicensed software,[⁴](notes.xhtml#ch04fn4)
    plus additional charges of up to $7,500 to pay BSA legal fees. The BSA also sweetens
    the pot for whistle-blowers by offering rewards of up to $1 million for reporting
    violations.[⁵](notes.xhtml#ch04fn5)
  prefs: []
  type: TYPE_NORMAL
- en: Finally, organizations commonly audit internet usage, including websites its
    employees visit, instant messaging, email, and file transfers. In many cases,
    organizations have configured proxy servers to funnel all such traffic through
    just a few gateways, which allows them to log, scan, and potentially filter such
    traffic. Such tools can give you the ability to examine exactly how employees
    are using those resources, allowing you to act if you encounter misuse.
  prefs: []
  type: TYPE_NORMAL
- en: '*Logging*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before you can audit something, you have to create the records to review. *Logging*
    gives you a history of the activities that have taken place in an environment.
    You typically generate logs automatically in operating systems to keep track of
    the activities that take place on most computing, networking, and telecommunications
    equipment, as well as on the devices that incorporate or connect to a computer.
    Logging is a *reactive* tool; it allows you to view the record of an event after
    it has taken place. To immediately react to something taking place, you would
    need to use a tool like an IDS or IPS, which will be covered in detail in [Chapter
    10](ch10.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: You typically configure logging mechanisms to record critical events only, but
    you could also log every action carried out by the system or software. You’d probably
    want to do this for troubleshooting purposes. A log might include records of events
    such as software errors, hardware failures, user logins or logouts, resource accesses,
    and tasks requiring increased privileges, depending on the logging settings and
    the system in question.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, only system administrators can review logs. Usually, users of the
    system can’t modify them, except maybe to write to them. For instance, an application
    running under the context of a particular user will generally have permissions
    to write messages to system or application logs. Keep in mind that collecting
    logs without reviewing them is pointless. If you never review the content of the
    logs, you might as well have failed to collect them in the first place. It is
    important that you schedule a regular review of your logs to catch anything unusual
    in their contents.
  prefs: []
  type: TYPE_NORMAL
- en: You may also be asked, in the course of normal security duties, to analyze the
    contents of logs in relation to an incident or situation. In the case of investigations,
    incidents, and compliance checks, these types of activities often fall to security
    personnel. Reviewing logs can be a difficult task if the period in question is
    greater than a few days. Even searching the contents of a relatively simple log,
    such as that generated by a web proxy server, can mean sifting through enormous
    amounts of data. In such cases, custom scripts or even a tool such as grep (a
    UNIX and Linux tool for searching text) can help accomplish the task in a reasonable
    amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: '*Monitoring*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A subset of auditing, *monitoring* is observing information about an environment
    to discover undesirable conditions such as failures, resource shortages, and security
    issues, as well as trends that might signal the arrival of such conditions. Like
    logging, monitoring is largely a reactive activity; it takes action based on gathered
    data, typically from logs generated by various devices. Even when you’re trying
    to predict future events, you’re still relying on past data to do so.
  prefs: []
  type: TYPE_NORMAL
- en: When monitoring a system, you’re typically watching for specific kinds or patterns
    of data, such as increased resource usage on computers, unusual network latency
    (the time it takes a packet to get from one point to another on a network), certain
    types of attacks occurring repeatedly against servers with network interfaces
    that are exposed to the internet, traffic passing through your physical access
    controls at unusual times of day, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: When you detect unusual levels of such activity, called the *clipping level*,
    your monitoring system might send an alert to a system administrator or physical
    security personnel, or it might trigger a more direct action, such as dropping
    traffic from a particular IP address, switching to a backup system for a critical
    server, or summoning law enforcement officials.
  prefs: []
  type: TYPE_NORMAL
- en: '*Auditing with Assessments*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As mentioned, logging and monitoring are reactive measures. To assess the state
    of your systems more actively, you might use a kind of audit called *assessments*,
    which are tests that find and fix vulnerabilities before any attackers do. If
    you can conduct assessments successfully and on a recurring basis, you will considerably
    increase your security posture and stand a much better chance of resisting attacks.
    You can take two approaches to this: vulnerability assessments and penetration
    testing. While people often use these terms interchangeably, they are two distinct
    sets of activities.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Vulnerability assessments* generally involve using vulnerability scanning
    tools, such as Qualys,[⁶](notes.xhtml#ch04fn6) shown in [Figure 4-2](#ch4fig2),
    to locate weaknesses in an environment. Such tools generally work by scanning
    the target systems to discover open ports and then interrogating each open port
    to find out exactly which service is listening on it. Additionally, you may choose
    to provide credentials, if you have them, to allow a vulnerability scanner to
    authenticate to the device in question and collect considerably more detailed
    information, such as the specific software installed, the users on the system,
    and the information contained in or regarding files.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-2: Qualys, a tool for vulnerability scanning*'
  prefs: []
  type: TYPE_NORMAL
- en: Given this information, the vulnerability assessment tool can then consult its
    database of vulnerability information to determine whether the system might contain
    any weaknesses. Although these databases tend to be thorough, new or uncommon
    attacks will often escape their notice.
  prefs: []
  type: TYPE_NORMAL
- en: '*Penetration testing* takes the assessment process several steps further. When
    you conduct a penetration test, you mimic the techniques an actual attacker would
    use to breach a system. You may attempt to gather additional information on the
    target environment from users or other systems in the vicinity, exploit security
    flaws in web-based applications or web-connected databases, or conduct attacks
    through unpatched vulnerabilities in applications or operating systems.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll learn more about assessing security at greater length in [Chapter 14](ch14.xhtml).
    As with any security measure that you can put in place, security assessments should
    be only a single component of your overall defensive strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For nearly any action you might care to take, some system somewhere creates
    an associated audit record. Organizations regularly query and update your medical
    history, grades in school, purchases, and credit history, and they use this data
    to make decisions that can impact your life for better or worse.
  prefs: []
  type: TYPE_NORMAL
- en: When you allow others to access your business’s resources or personal information
    of a sensitive nature, you need to hold them accountable for what they do with
    the resources or information.
  prefs: []
  type: TYPE_NORMAL
- en: You go through the auditing process to hold people accountable and ensure that
    your environment is compliant with the laws, regulations, and policies that bind
    it. You may carry out a variety of auditing tasks, including logging, monitoring,
    and conducting assessments. Through these processes, you can both react to threats
    and actively prevent them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll get an overview of the main cryptographic algorithms
    that serve as the backbone of today’s security systems.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the benefit of logging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discuss the difference between authorization and accountability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe nonrepudiation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name five items you might want to audit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is accountability important when dealing with sensitive data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might auditing your installed software be a good idea?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When dealing with legal or regulatory issues, why do you need accountability?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between vulnerability assessment and penetration testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What impact can accountability have on the admissibility of evidence in court
    cases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given an environment containing servers that handle sensitive customer data,
    some of which are exposed to the internet, would you want to conduct a vulnerability
    assessment, a penetration test, or both? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
