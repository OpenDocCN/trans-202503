["```\nconst randomBit = () => Math.random() >= 0.5;\nconst randomNum = (a, b) => a + (b - a) * Math.random();\nconst randomInt = (a, b) => Math.floor(randomNum(a, b));\n```", "```\nconst randomInt = (a, b) => a + Math.floor((b - a) * Math.random());\n```", "```\nconst sortingShuffle = (arr) =>\n  arr\n ❶ .map((v) => ({val: v, key: Math.random()}))\n  ❷ .sort((a, b) => a.key – b.key)\n  ❸ .map((o) => o.val);\n```", "```\n❶ const coinTossingShuffle = (arr, from = 0, to = arr.length - 1) => {\n  const len = to - from + 1;\n❷ if (len < 2) {\n    // nothing to do\n❸} else if (len === 2) {\n    if (randomBit()) {\n      [arr[from], arr[to]] = [arr[to], arr[from]];\n    }\n❹} else /* len > 2 */ {\n    let ind0 = from - 1;\n    let ind1 = to + 1;\n    let i = from;\n    while (i < ind1) {\n      if (randomBit()) {\n        ind1--;\n        [arr[i], arr[ind1]] = [arr[ind1], arr[i]];\n      } else {\n        ind0++;\n        i++;\n      }\n    }\n  ❺ coinTossingShuffle(arr, from, ind0);\n  ❻ coinTossingShuffle(arr, ind1, to);\n  }\n❼ return arr;\n};\n```", "```\nconst floydShuffleN = (n) => {\n❶ const result = [];\n❷ for (let i = 0; i < n; i++) {\n  ❸ const j = randomInt(0, i + 1);\n  ❹ result.splice(j, 0, i);\n  }\n  return result;\n};\n```", "```\nconst floydShuffle = (arr, from = 0, to = arr.length - 1) => {\n❶ const sample = floydShuffleN(to - from + 1);\n❷ const original = arr.slice(from, to + 1);\n❸ sample.forEach((v, i) => (arr[from + i] = original[v]));\n  return arr;\n};\n```", "```\nconst robsonShuffle = (arr, from = 0, to = arr.length - 1) => {\n❶ const n = to - from + 1;\n❷ let r = randomInt(0, fact(n));\n❸ for (let i = n; i > 1; i--) {\n  ❹ const q = r % i;\n  ❺ [arr[from + i - 1], arr[from + q]] = [arr[from + q], arr[from + i – 1]];\n  ❻ r = Math.floor(r / i);\n  }\n  return arr;\n};\n```", "```\nconst fisherYatesShuffle = (arr, from = 0, to = arr.length - 1) => {\n❶ for (let i = to + 1; i > from + 1; i--) {\n  ❷ const j = randomInt(from, i);\n  ❸ [arr[i - 1], arr[j]] = [arr[j], arr[i – 1]];\n  }\n  return arr;\n};\n```", "```\nconst fisherYatesShuffle2 = (arr, from = 0, to = arr.length - 1) => {\n❶ for (let i = from; i < to; i++) {\n  ❷ const j = randomInt(i, to + 1);\n  ❸ [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n```", "```\nconst singlePick = (arr, from = 0, to = arr.length - 1) =>\n  arr[randomInt(from, to + 1)];\n```", "```\nconst singlePickAll = (arr) => arr[randomInt(0, arr.length)];\n```", "```\nconst repeatedPick = (arr, k, from = 0, to = arr.length - 1) => {\n  const sample = Array(k);\n❶ for (let i = 0; i < k; i++) {\n  ❷ sample[i] = arr[randomInt(from, to + 1)];\n  }\n  return sample;\n};\n```", "```\nconst repeatedPickAll = (arr, k) => {\n  const sample = Array(k);\n  for (let i = 0; i < k; i++) {\n    sample[i] = singlePickAll(arr);\n  }\n  return sample;\n};\n```", "```\nconst floydSample = (arr, k) =>\n❶ floydSampleKofN(k, arr.length).map((v) => arr[v]);\n```", "```\n❶ const floydSampleKofN = (k, n) => {\n❷ if (k === 0) {\n    return [];\n  } else {\n  ❸ const sample = floydSampleKofN(k - 1, n – 1);\n  ❹ const j = randomInt(0, n);\n    sample.push(sample.includes(j) ? n - 1 : j);\n  ❺ return sample;\n  }\n};\n```", "```\nconst floydSampleKofN = (k, n) => {\n❶ const sample = [];\n❷ for (let i = n - k; i <= n - 1; i++) {\n  ❸ const j = randomInt(0, i + 1);\n  ❹ sample.push(sample.includes(j) ? i : j);\n  }\n❺ return sample;\n};\n```", "```\nconst lotterySample = (arr, k) => {\n❶ const n = arr.length;\n  const sample = Array(k);\n\n❷ for (let i = 0; i < k; i++) {\n  ❸ const j = randomInt(0, n – i);\n  ❹ sample[i] = arr[j];\n  ❺ arr[j] = arr[n - i – 1];\n  }\n\n❻ return sample;\n};\n```", "```\nconst fisherYatesSample = (arr, k) => {\n  const n = arr.length;\n❶ for (let i = 0; i < k; i++) {\n  ❷ const j = randomInt(i, n);\n  ❸ [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n❹ return arr.slice(0, k);\n};\n```", "```\nconst orderedSample = (arr, k) => {\n❶ if (k === 0) {\n   return [];\n❷} else if (Math.random() < k / arr.length) {\n   return [arr[0], . . .orderedSample(arr.slice(1), k - 1)];\n❸} else {\n   return [...orderedSample(arr.slice(1), k)];\n }\n};\n```", "```\nconst orderedSample = (arr, k) => {\n❶ const sample = [];\n❷ let toSelect = k;\n❸ let toConsider = arr.length;\n❹ for (let i = 0; toSelect > 0; i++) {\n    if (Math.random() < toSelect / toConsider) {\n     ❺ sample.push(arr[i]);\n      toSelect--;\n    }\n  ❻ toConsider--;\n  }\n  return sample;\n};\n```", "```\nconst orderedSample2 = (arr, k) => {\n  const n = arr.length;\n  const sample = [];\n❶ for (let i = 0; k > 0; i++) {\n  ❷ if (Math.random() < k / (n - i)) {\n      sample.push(arr[i]);\n    ❸ k--;\n    }\n  }\n  return sample;\n};\n```", "```\nconst reservoirSample = (arr, k) => {\n❶ const n = arr.length;\n❷ const sample = arr.slice(0, k);\n\n❸ for (let i = k; i < n; i++) {\n  ❹ const j = randomInt(0, i + 1);\n    if (j < k) {\n    ❺ sample[j] = arr[i];\n    }\n  }\n  return sample;\n};\n```", "```\nconst reservoirSample2 = (arr, k) => {\n  const n = arr.length;\n  for (let i = k; i < n; i++) {\n    const j = randomInt(0, i + 1);\n    if (j < k) {\n    ❶ [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n❷ return arr.slice(0, k);\n};\n```", "```\nconst naiveSortShuffle = (arr) => {\n  for (let j = arr.length - 1; j > 0; j--) {\n    for (let i = 0; i < j; i++) {\n    ❶ if (**randomBit()**) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n      }\n    }\n  }\n  return arr;\n};\n```", "```\nconst naiveSwappingShuffle = (arr) => {\n  const n = arr.length;\n  for (let i = 0; i < n; i++) {\n    **const j = randomInt(0, n);**\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n```", "```\nconst something = (p) => (p === 0 ? BASE : other(something(p - 1), p));\n```", "```\nconst something = (p) => {\n  let result = BASE;\n  for (let i = 1; i <= p; i++) {\n    result = other(result, i);\n  }\n  return result;\n};\n```", "```\nconst orderedSample = (arr, k) => {\n  const n = arr.length;\n  const sample = [];\n  let toSelect = k;\n  let toConsider = n;\n  for (**let i = 0; toSelect > 0; i++**) {\n    if (Math.random() < toSelect / toConsider) {\n      sample.push(arr[i]);\n      toSelect--;\n    }\n    toConsider--;\n  }\n  return sample;\n};\n```"]