- en: —21—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Binary Search Tree Property
  prefs: []
  type: TYPE_NORMAL
- en: Wait,” Frank said. “That’s wrong.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks, who had just finished inserting a node, looked up in surprise. “What?”
  prefs: []
  type: TYPE_NORMAL
- en: “The node you just inserted,” said Frank. “It’s in the wrong place.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks peered at the tree. “But 63 is larger than 60, so it goes in the right-hand
    subtree.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0172-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “But it’s greater than its great-grandparent 61, so it should have gone to that
    node’s right subtree. You have it down the left subtree. One of the key properties
    of a binary search tree is that *all* nodes in the left subtree are less than
    the current node, and *all* nodes in the right subtree are larger.”
  prefs: []
  type: TYPE_NORMAL
- en: “I know that,” said Socks quietly.
  prefs: []
  type: TYPE_NORMAL
- en: “Then why is it in the left subtree?” Frank asked.
  prefs: []
  type: TYPE_NORMAL
- en: “I made a mistake,” said Socks.
  prefs: []
  type: TYPE_NORMAL
- en: “How did you miss that 63 is larger than 61?” Frank asked.
  prefs: []
  type: TYPE_NORMAL
- en: “I . . . I started at 60,” Socks admitted.
  prefs: []
  type: TYPE_NORMAL
- en: “What?”
  prefs: []
  type: TYPE_NORMAL
- en: “Well, I had recently inserted node 60 . . . and 63 is close to 60 . . . so
    I just started at 60 and inserted it below that.”
  prefs: []
  type: TYPE_NORMAL
- en: “You didn’t start at the root?” Frank snapped.
  prefs: []
  type: TYPE_NORMAL
- en: “I figured this would be faster,” said Socks. “I got to skip down most of the
    tree.”
  prefs: []
  type: TYPE_NORMAL
- en: “You ended up putting it in the wrong place. How many other shortcuts have you
    taken?”
  prefs: []
  type: TYPE_NORMAL
- en: “A few,” admitted Socks.
  prefs: []
  type: TYPE_NORMAL
- en: Frank groaned, then, for good measure, muttered a long string of curses. Socks
    stared at the ground and wisely said nothing.
  prefs: []
  type: TYPE_NORMAL
- en: After he had finally calmed down, Frank took a few deep breaths and surveyed
    the tree.
  prefs: []
  type: TYPE_NORMAL
- en: “We’ll have to do an exhaustive search,” he said through gritted teeth. “If
    the tree doesn’t maintain the binary search tree property, we can’t safely do
    any pruning. We’ll have to check each node.”
  prefs: []
  type: TYPE_NORMAL
- en: “Hey,” said Socks suddenly. “We had to check each node to put it in the tree.
    Why didn’t we just do an exhaustive search then?”
  prefs: []
  type: TYPE_NORMAL
- en: “Amortized cost,” Frank said. “I was hoping to use the tree for a bunch of searches
    in the future. I doubt 50 days to 70 days will be the only range we search. As
    we get more evidence, we might do different range searches. Maybe we would even
    need to do a few exact searches. The cost of building the tree would be averaged
    out over many searches, and the overall effort would be lower—possibly much lower.
    Amortized cost considers the total cost for a bunch of searches and thus spreads
    the cost of building the tree over many searches.”
  prefs: []
  type: TYPE_NORMAL
- en: “Oh,” said Socks. “Like my magic button trees.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank fought the urge to shake the young wizard and yell, “Of course like the
    button tree! They’re both binary search trees. They both benefit from a one-time
    construction cost by making many subsequent searches faster.” Instead, he settled
    for a snarky “Of course.”
  prefs: []
  type: TYPE_NORMAL
- en: “Great idea,” said Socks. “We can save lots of time in the future.”
  prefs: []
  type: TYPE_NORMAL
- en: “Could have saved,” Frank corrected him.
  prefs: []
  type: TYPE_NORMAL
- en: “Oh,” said Socks. “Right. I broke the tree, didn’t I?”
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: BINARY SEARCH TREES**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in this lecture, we can use information about the structure
    of a binary search tree to search efficiently. Not only that, but we can add and
    remove nodes from trees. However, whenever we change a data structure, it is vitally
    important to ensure that we’re not violating the properties that we use.
  prefs: []
  type: TYPE_NORMAL
- en: For binary search trees, it is important to maintain the *binary search tree
    property*. This property states that (1) the values of the data in the left node
    (and all its children) are less than or equal to the value of the current node
    and (2) the values of the data in the right node (and all its children) are greater
    than or equal to the value of the current node. If we violate this property, we
    no longer have a binary search tree, and we can’t prune branches of the tree during
    a search.
  prefs: []
  type: TYPE_NORMAL
