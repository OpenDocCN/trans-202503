["```\nprintf(`format-string`, `argument`, ...)\n```", "```\nprintf(\"Number: ->%d<-\\n\", 1234);   // Prints  ->1234<-\n```", "```\nprintf(\"Number: ->%3d<-\\n\", 12);    // Prints  ->.12<- (using . for space)\nprintf(\"Number: ->%-3d<-\\n\", 12);   // Prints  ->12.<- (using . for space)\nprintf(\"Number: ->%3d<-\\n\", 1234);  // Prints  ->1234<-(at least 3 characters)\n```", "```\n/**\n * Print ASCII character table (only printable characters).\n */\n\n#include <stdio.h>\n\nint main()\n{\n    for (char curChar = ' '; curChar <= '~'; ++curChar) {\n        printf(\"Char: %c Decimal %3d Hex 0x%02x Octal 0%03o\\n\",\n               curChar, curChar, curChar, curChar);\n    }\n    return (0);\n}\n```", "```\nChar:   Decimal  32 Hex 0x20 Octal 0040\nChar: ! Decimal  33 Hex 0x21 Octal 0041\nChar: \" Decimal  34 Hex 0x22 Octal 0042\nChar: # Decimal  35 Hex 0x23 Octal 0043\nChar: $ Decimal  36 Hex 0x24 Octal 0044\nChar: % Decimal  37 Hex 0x25 Octal 0045\nChar: & Decimal  38 Hex 0x26 Octal 0046\nChar: ' Decimal  39 Hex 0x27 Octal 0047\nChar: ( Decimal  40 Hex 0x28 Octal 0050\n`--snip--`\n```", "```\nfprintf(stdout, \"Everything is OK\\n\");\nfprintf(stderr, \"ERROR: Something bad happened\\n\");\n```", "```\n// Reads two numbers (do not use this code)\nscanf(\"%d %d\", &aInteger, &anotherInteger);\n```", "```\nfgets(line, sizeof(line), stdin);   // Read a line\nsscanf(line, \"%d %d\", &aInteger, &anotherInteger);\n```", "```\nchar* `result` = fgets(`buffer`, `size`, `file`);\n```", "```\nif (fgets(line, sizeof(line), stdin) == NULL) {\n    fprintf(stderr, \"ERROR: Expected two integers, got EOF\\ n\");\n    return (ERROR);\n}\nif (sscanf(line, \"%d %d\", &aInteger, &anotherInteger) != 2) {\n    fprintf(stderr, \"ERROR: Expected two integers.\\n\");\n    return (ERROR)\n}\n```", "```\n`result` = gets(`buffer`);\n```", "```\n$ **gcc -Wall -Wextra -o gets gets.c**\nAgets.c: In function 'main':\ngets.c:17:5: warning: 'gets' is deprecated [-Wdeprecated-declarations]\n     gets(line);\n ^~~~\nIn file included from gets.c:11:0:\n/usr/include/stdio.h:577:14: note: declared here\n extern char *gets (char *__s) __wur __attribute_deprecated__;\n              ^~~~\n/tmp/cc5H1KMF.o: In function `main':\ngets.c:(.text+0x1f): warning: the `gets' function is dangerous and should not be used.\n```", "```\n#include <stdio.h>\n\nint main()\n{\n  1 FILE* outFile = 2 fopen(\"hello.txt\", \"w\");\n    if (outFile == NULL) {\n        fprintf(stderr, \"ERROR: Unable to open 'hello.txt'\\n\");\n        exit(8);\n    }\n    if (fprintf(outFile, \"Hello World!\\n\") <= 0) {\n        fprintf(stderr, \"ERROR: Unable to write to 'hello.txt'\\n\");\n        exit(8);\n    }\n    if (fclose(outFile) != 0) {\n        fprintf(outfile, â€œERROR: Unable to close 'hello.txt'\\n\");\n        exit(8);\n    }\n    return (0);\n}\n```", "```\n`result` = fopen(`filename`, `mode`);\n```", "```\n`result` = fread(`buffer`, `elementSize`, `size`, `inFile`);\n```", "```\n`result` = fwrite(`buffer`, `elementSize`, `size`, `inFile`);\n```", "```\n/**\n * Copy infile.bin to outfile.bin.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n int main()\n{\n    // The input file\n  1 FILE* inFile = fopen(\"infile.bin\", \"rb\");\n    if (inFile == NULL) {\n        fprintf(stderr, \"ERROR: Could not open infile.bin\\n\");\n        exit(8);\n    }\n    // The output file\n    FILE* outFile = fopen(\"outfile.bin\", \"wb\");\n    if (outFile == NULL) {\n        fprintf(stderr, \"ERROR: Could not create outfile.bin\\n\");\n        exit(8);\n    }\n    char buffer[512];   // A data buffer\n\n    while (true) {\n        // Read data, collect size\n      2 ssize_t readSize = fread(buffer, 1, sizeof(buffer), inFile);\n        if (readSize < 0) {\n            fprintf(stderr, \"ERROR: Read error seen\\n\");\n            exit(8);\n        }\n      3 if (readSize == 0) {\n            break;\n        }\n      4 if (fwrite(buffer, 1, readSize, outFile) !=(size_t)readSize) {\n            fprintf(stderr, \"ERROR: Write error seen\\n\");\n            exit(8);\n        }\n    }\n    fclose(inFile);\n    fclose(outFile);\n    return (0);\n}\n```", "```\n35          if (fwrite(`buffer`, 1, `readSize`, `outFile`) != `readSize`) {\n                                      Warning: signed vs. unsigned compare\n```", "```\nif (fwrite(`buffer`, 1, `readSize`, `outFile`) != (size_t)`readSize`) {\n```", "```\n/**\n * Demonstrate how buffering can fool\n * us with a divide-by-zero bug.\n */\n\n#include <stdio.h>\n\nint main()\n{\n    int zero = 0;    // The constant zero, to trick the\n                     // compiler into letting us divide by 0\n    int result;      // Something to put a result in\n\n    printf(\"Before divide \");\n    result = 5 / zero;\n    printf(\"Divide done\\n\");\n    printf(\"Result is %d\\n\", result);\n    return (0);\n}\n```", "```\nBefore divide Floating point exception (core dumped)\n```", "```\nFloating point exception (core dumped)\n```", "```\n printf(\"Before divide \");   fflush(stdout);\n```", "```\nint `result` = fclose(`file`);\n```"]