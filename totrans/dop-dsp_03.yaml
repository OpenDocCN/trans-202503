- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Using Ansible to Manage Passwords, Users, and Groups
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理密码、用户和组
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Now that you’ve built your VM, let’s move on to performing administrative tasks
    like user management. The DevOps practice of automation is key to building and
    managing resources. To manage any Linux host, you need a basic understanding of
    the workings of passwords, users, and groups. Users and passwords are the building
    blocks of identity management, while groups allow you to manage a collection of
    users and control access to files, directories, and commands. Dividing up responsibilities
    between users and groups can be the difference between allowing unauthorized access
    and thwarting it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建好了虚拟机（VM），让我们开始进行一些管理任务，比如用户管理。DevOps 实践中的自动化是构建和管理资源的关键。要管理任何 Linux
    主机，你需要对密码、用户和组的工作原理有基本的理解。用户和密码是身份管理的基础，而组则使你能够管理一组用户并控制对文件、目录和命令的访问。通过在用户和组之间划分责任，可能会决定是否允许未经授权的访问。
- en: In this chapter, you’ll continue learning how to use Ansible, and you’ll also
    provision the VM you just created to improve your basic security policy. You’ll
    use some provided Ansible tasks to enforce complex passwords, manage users and
    groups, and control access to a shared directory and file. Once you have learned
    those security basics, you’ll be able to use them as the foundation of every playbook.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将继续学习如何使用 Ansible，并且还将配置你刚刚创建的虚拟机，以改善你的基本安全策略。你将使用本书提供的 Ansible 任务来强制执行复杂密码、管理用户和组，以及控制对共享目录和文件的访问。一旦你掌握了这些安全基础，你就能将它们作为每个
    playbook 的基础。
- en: Enforcing Complex Passwords
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制执行复杂密码
- en: Letting users decide what a strong password is can be a recipe for disaster,
    so you’ll need to enforce complex passwords on every host that users can access.
    Since automation is one of our guiding principles, you’ll use code to enforce
    strong passwords for all users. To do this, you can use an Ansible task to install
    a plug-in for *Pluggable Authentication Modules* *(PAM)*, which is a user authentication
    framework that most Linux distributions employ. The plug-in to provide complex
    passwords is called `pam_pwquality`. This module validates passwords based on
    criteria you set.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户决定什么是强密码可能会导致灾难，因此你需要在每个用户可以访问的主机上强制执行复杂密码。由于自动化是我们的指导原则之一，你将使用代码来强制执行所有用户的强密码。为此，你可以使用一个
    Ansible 任务来安装一个 *可插拔认证模块* *(PAM)* 插件，这是大多数 Linux 发行版使用的用户认证框架。提供复杂密码的插件叫做 `pam_pwquality`。该模块根据你设置的标准验证密码。
- en: Installing libpam-pwquality
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 libpam-pwquality
- en: 'The `pwquality` PAM module is available in the Ubuntu software repository under
    the name `libpam-pwquality`. You’ll use the Ansible tasks provided with this book
    to install and configure this package. Remember, the goal is to automate everything
    you can, and tasks provide the mechanism to carry out administrative work. These
    tasks are located in the repository you cloned from the Introduction. Navigate
    to the *ansible/chapter2/* directory and open the *pam_pwquality.yml* file in
    your favorite editor. This file contains two tasks: `Install libpam-pwquality`
    and `Configure pam_pwquality`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwquality` PAM 模块可以在 Ubuntu 软件仓库中找到，名称为 `libpam-pwquality`。你将使用本书提供的 Ansible
    任务来安装和配置此软件包。记住，目标是尽可能地自动化所有内容，任务提供了执行管理工作的机制。这些任务位于你从简介中克隆的仓库中。导航到 *ansible/chapter2/*
    目录，并在你喜欢的编辑器中打开 *pam_pwquality.yml* 文件。该文件包含两个任务：`安装 libpam-pwquality` 和 `配置 pam_pwquality`。'
- en: 'Let’s focus on the first task that uses the Ansible `package` module to install
    `libpam-pwquality` on the VM. At the top of the file, the install task should
    look like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于第一个任务，使用 Ansible 的 `package` 模块在虚拟机上安装 `libpam-pwquality`。文件顶部的安装任务应该像这样：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each Ansible task should start with a `name` declaration that defines its goal.
    In this case, the `name` is `Install libpam-pwquality`. Next, the Ansible `package`
    module performs the software installation. The `package` module requires you to
    set two parameters: `name` and `state`. In this example, the package name (found
    in the Ubuntu repository) should be `libpam-pwquality`, and the `state` should
    be `present`. To remove a package, set the `state` to `absent`. This is a good
    example of declarative instruction, since you are telling Ansible to make sure
    this package is installed. You don’t need to worry how it gets installed, as long
    as it does. If you install the package (`present`) and then delete the task from
    Ansible, the package will still be installed on the next provision. You would
    have to explicitly set the package to `absent` if you wanted the host to represent
    your desired state.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Ansible 任务应以 `name` 声明开始，用于定义其目标。在本例中，`name` 为 `Install libpam-pwquality`。接下来，Ansible
    的 `package` 模块执行软件安装。`package` 模块要求你设置两个参数：`name` 和 `state`。在本例中，软件包名称（可在 Ubuntu
    仓库中找到）应为 `libpam-pwquality`，而 `state` 应设置为 `present`。要删除软件包，将 `state` 设置为 `absent`。这是声明性指令的一个很好的示例，因为你告诉
    Ansible 确保安装了这个软件包。你无需关心它是如何被安装的，只要确保它被安装即可。如果你安装了该软件包（`present`），然后从 Ansible
    中删除该任务，下次提供时，软件包仍将被安装。如果你希望主机保持所需状态，必须显式将软件包设置为 `absent`。
- en: As mentioned in Chapter 1, Ansible modules (like the one above) perform common
    actions on an OS, such as enabling a firewall, managing users, or (in this case)
    installing software. Ansible allows your actions to be *idempotent*, which means
    you can do a specific action over and over again and the result will be the same
    as it was the last time you executed the action. Because of this, you should automate
    all you can! You’ll save time and avoid mistakes caused by manual fatigue. Imagine
    if you had to configure 1,000 machines a day. It would be almost impossible without
    automation!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如第一章所述，Ansible 模块（如上所示）在操作系统上执行常见操作，例如启用防火墙、管理用户或（在本例中）安装软件。Ansible 使得你的操作能够是*幂等*的，这意味着你可以反复执行某个特定操作，并且结果将与上次执行时相同。正因如此，你应该尽可能自动化所有工作！这样你不仅能节省时间，还能避免因手动操作疲劳导致的错误。试想一下，如果你每天需要配置
    1,000 台机器，没了自动化，几乎是不可能完成的！
- en: Configuring pam_pwquality to Enforce a Stricter Password Policy
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 pam_pwquality 以强制执行更严格的密码策略
- en: On a default Ubuntu system, password complexity is not as strong as it could
    be. It requires a minimum password length of six characters and executes only
    some basic complexity checks. To enforce more complexity, you’ll want to configure
    `pam_pwquality` to set a stricter password policy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的 Ubuntu 系统中，密码复杂度并不像它应该的那样强大。它要求密码的最小长度为六个字符，并且仅执行一些基本的复杂度检查。要加强复杂度，你需要配置
    `pam_pwquality` 来设置更严格的密码策略。
- en: A file named */etc/pam.d/common-password* handles configuration of the `pam_pwquality`
    module. This file is where the Ansible task makes the necessary changes to validate
    passwords. All you need to do is change one line in that file. A common way to
    edit a line using Ansible is with the `lineinfile` module, which allows you to
    change a line in a file or check whether a line exists.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 */etc/pam.d/common-password* 的文件负责配置 `pam_pwquality` 模块。这个文件是 Ansible 任务用来对密码进行验证并做出必要更改的地方。你所需要做的就是修改该文件中的一行。使用
    Ansible 编辑文件中的某一行的常见方法是使用 `lineinfile` 模块，该模块可以更改文件中的一行或检查某一行是否存在。
- en: 'With the `pam_pwquality` task file still open, let’s review the second task
    from the top. It should look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在仍然打开的 `pam_pwquality` 任务文件中，让我们回顾一下从顶部开始的第二个任务。它应如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once again, the task starts with a name, `Configure pam_pwquality`, that describes
    its intent. Then it tells Ansible to use the `lineinfile` module to edit the PAM
    password file. The `lineinfile` module requires the `path` of the file to which
    you want to make changes. In this case, it is the PAM password file */etc/pam.d/common-password*.
    Use a regular expression, or *regexp*, to find the line in the file you want to
    change. The regular expression locates the line that has `pam_pwquality.so` in
    it and replaces it with a new line. The replacement `line` parameter contains
    the `pwquality` configuration changes, which enforce more complexity. The options
    provided above enforce the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，任务以名称 `Configure pam_pwquality` 开始，描述其目的。然后，它告诉 Ansible 使用 `lineinfile` 模块来编辑
    PAM 密码文件。`lineinfile` 模块要求提供文件的 `path`，以便对其进行更改。在此案例中，它是 PAM 密码文件 */etc/pam.d/common-password*。使用正则表达式（*regexp*）来找到要更改的文件行。正则表达式定位到包含
    `pam_pwquality.so` 的行，并用新的一行替换它。替换的 `line` 参数包含 `pwquality` 配置更改，这些更改强制执行更复杂的密码要求。上面提供的选项强制执行以下要求：
- en: A minimum password length of 12 characters
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码最小长度为 12 个字符
- en: One lowercase letter
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小写字母
- en: One uppercase letter
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大写字母
- en: One numeric character
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数字字符
- en: One nonalphanumeric character
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非字母数字字符
- en: Three retries
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三次重试
- en: Disable root override
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 root 覆盖
- en: Adding these requirements will strengthen Ubuntu’s default password policy.
    Any new passwords will need to meet or exceed these requirements, which will make
    brute-forcing user passwords a bit harder for attackers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些要求将加强 Ubuntu 默认的密码策略。任何新密码都需要满足或超过这些要求，从而使攻击者暴力破解用户密码变得更加困难。
- en: Close the *pam_pwquality.yml* file so you can move on to creating users with
    an Ansible module.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭 *pam_pwquality.yml* 文件，这样你就可以继续使用 Ansible 模块来创建用户。
- en: Linux User Types
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 用户类型
- en: 'When it comes to Linux, users come in three types: normal, system, and root.
    You can think of a *normal user* as a human account, and you’ll create one of
    those next. Every normal user is typically associated with a password, a group,
    and a username. Think of a *system user* as a nonhuman account, such as the user
    Nginx runs as. In fact, a system user is almost identical to a normal user, but
    it is located in a different user ID (UID) range for compartmental reasons. A
    *root user* (or *superuser*) account has unrestricted access to the operating
    system. You can tell the root user by its UID, which is always zero. As with all
    your configurations, you’ll use an Ansible module to do the heavy lifting when
    it comes to creating and configuring users.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 说到 Linux，用户可以分为三种类型：普通用户、系统用户和 root 用户。你可以将*普通用户*看作是人类账户，接下来你将创建一个这样的账户。每个普通用户通常都会关联一个密码、一个组和一个用户名。将*系统用户*看作是非人类账户，比如
    Nginx 运行的用户。事实上，系统用户与普通用户几乎相同，但它位于不同的用户 ID（UID）范围内，出于隔离的考虑。*root 用户*（或*超级用户*）账户对操作系统有无限制的访问权限。你可以通过
    UID 来辨别 root 用户，它的 UID 始终是零。与所有的配置一样，当涉及到创建和配置用户时，你将使用 Ansible 模块来进行重任操作。
- en: Getting Started with the Ansible User Module
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible 用户模块入门
- en: Ansible comes with the `user` module, which makes managing users very easy.
    It handles all the messy details for accounts, like shells, keys, groups, and
    home directories. You’ll use the `user` module to create a new user called *bender**.*
    Feel free to name it something else if you want, but since the examples in this
    book use the *bender* username going forward, don’t forget to change the name
    in future chapters as well.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 配有 `user` 模块，使得管理用户变得非常简单。它处理账户的所有繁琐细节，比如 shell、密钥、组和主目录。你将使用 `user`
    模块创建一个名为 *bender* 的新用户。如果你愿意，可以取一个别的名字，但由于本书中的示例将继续使用 *bender* 这个用户名，记得在以后的章节中也将名字更改为
    *bender*。
- en: 'Open the *user_and_group.yml* file located in the *ansible/chapter2/* directory.
    This file contains the following five tasks:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于 *ansible/chapter2/* 目录下的 *user_and_group.yml* 文件。该文件包含以下五个任务：
- en: Ensure group *developers* exists.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 *developers* 组存在。
- en: Create the user *bender*.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户 *bender*。
- en: Assign *bender* to the *developers* group.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 *bender* 分配给 *developers* 组。
- en: Create a directory named *engineering*.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 *engineering* 的目录。
- en: Create a file in the engineering directory.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工程目录中创建一个文件。
- en: These tasks will create a group and a user, assign a user to a group, and create
    a shared directory and file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务将创建一个组和一个用户，将用户分配到组中，并创建一个共享目录和文件。
- en: 'Though it’s counterintuitive, let’s start by focusing on the second task on
    the list, which creates the user *bender*. (We’ll get to the first task in the
    “Linux Groups” section on the next page.) It should look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这有些违反直觉，我们先从列表中的第二个任务开始，即创建用户*bender*。（我们将在下一页的“Linux 群组”部分讨论第一个任务。）它应该如下所示：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This task, like all others, starts with a `name` that describes what it will
    do. In this case, it is `Create the user 'bender'`. You’ll use the Ansible `user`
    module to create a user. The `user` module has many options, but only the `name`
    parameter is required. In this example, the `name` is set to `bender`. Setting
    a user’s password at provision time can be useful, so set the optional `password`
    parameter field to a known password hash (more on this later). The `password`
    value, beginning with `$6`, is a cryptic hash that Linux supports. I have included
    a sample password hash for *bender* to show how you can automate this step. In
    the next section, I will walk through the process I used to generate it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务，像其他任务一样，以描述其功能的`name`开头。在这个例子中，`name`是`Create the user 'bender'`（创建用户'bender'）。你将使用Ansible的`user`模块来创建用户。`user`模块有许多选项，但只有`name`参数是必需的。在本例中，`name`被设置为`bender`。在配置时设置用户密码是有用的，因此可以将可选的`password`参数设置为已知的密码哈希值（稍后会详细介绍）。以`$6`开头的`password`值是Linux支持的加密哈希。我已经提供了*bender*的密码哈希示例，展示如何自动化此步骤。在下一部分，我将详细介绍我生成密码哈希的过程。
- en: Generating a Complex Password
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成复杂密码
- en: You can use many different methods to generate a password to match the complexity
    you set in `pam_pwquality`. As mentioned earlier, I’ve supplied a password hash
    for you that matches this threshold to save time. I used a combination of two
    command line applications, `pwgen` and `mkpasswd`, to create the complex password.
    The `pwgen` command can generate secure passwords, and the `mkpasswd` command
    can generate passwords using different hashing algorithms. The `pwgen` application
    is provided by the `pwgen` package, and the `mkpasswd` application is provided
    by a package named `whois`. Together, these tools can generate the hash that Ansible
    and Linux expect.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多种不同的方法生成密码，以匹配你在`pam_pwquality`中设置的复杂度要求。如前所述，我提供了一个密码哈希值，符合这一阈值，以节省时间。我使用了两个命令行应用程序，`pwgen`和`mkpasswd`，来创建复杂密码。`pwgen`命令可以生成安全密码，而`mkpasswd`命令可以使用不同的哈希算法生成密码。`pwgen`应用程序由`pwgen`包提供，`mkpasswd`应用程序由名为`whois`的包提供。这些工具结合在一起，可以生成Ansible和Linux所期望的哈希值。
- en: 'Linux stores password hashes in a file called *shadow*. On an Ubuntu system,
    the password hashing algorithm is SHA-512 by default. To create your own SHA-512
    hash for Ansible’s user module, use the commands below on an Ubuntu host:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 将密码哈希值存储在名为*shadow*的文件中。在Ubuntu系统中，默认的密码哈希算法是SHA-512。要为Ansible的用户模块创建自己的SHA-512哈希，请在Ubuntu主机上使用以下命令：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since these packages are not installed by default, you’ll need to install them
    first with the APT package manager. The `pwgen` command generates a complex password
    that matches what you need to satisfy `pwquality` and saves it into a variable
    called `pass`. Next, the contents of the variable `pass` are piped into `mkpasswd`
    to be hashed using the `sha-512` algorithm. The final output should contain two
    lines. The first line contains the SHA-512 hash, and the second line contains
    the new password. You can take the hash string and set the `password` value in
    the user creation task to change it. Feel free to try it!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些软件包默认没有安装，你需要先使用APT包管理器安装它们。`pwgen`命令生成符合`pwquality`要求的复杂密码，并将其保存在一个名为`pass`的变量中。接下来，将`pass`变量的内容通过管道传输到`mkpasswd`中，使用`sha-512`算法进行哈希处理。最终输出应包含两行。第一行是SHA-512哈希值，第二行是新密码。你可以将哈希字符串拿来，并在用户创建任务中设置`password`值以更改密码。尽管如此，尽情尝试吧！
- en: Linux Groups
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 群组
- en: Linux groups allow you to manage multiple users on a host. Creating groups is
    also an efficient way to limit access to resources on a host. It is much easier
    to administer changes to a group than to hundreds of users individually. For the
    next example, I’ve provided an Ansible task to create a group called *developers*
    that you will use to limit access to a directory and a file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 群组允许你在主机上管理多个用户。创建群组也是限制访问主机资源的一种高效方式。对群组进行管理比对成百上千的用户逐个管理要容易得多。在下一个示例中，我提供了一个
    Ansible 任务，创建一个名为*developers*的群组，你将使用它来限制对某个目录和文件的访问。
- en: Getting Started with the Ansible Group Module
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用 Ansible 群组模块
- en: Like the `user` module, Ansible has a `group` module that can manage creating
    and removing groups. Compared to other Ansible modules, the `group` module is
    very minimal; it can only create or delete a group.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与`user`模块类似，Ansible还有一个`group`模块，可以管理创建和删除组。与其他Ansible模块相比，`group`模块非常简洁；它只能创建或删除组。
- en: 'Open the *user_and_group.yml* file in your editor to review the group creation
    task. The first task in the file should look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开*user_and_group.yml*文件，以查看组创建任务。文件中的第一个任务应该是这样的：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `name` of the task states that you want to make sure a group exists. Use
    the `group` module to create the group. This module requires you to set the `name`
    parameter, which is set to `developers` here. The `state` parameter is set to
    `present`, so it will create the group if it does not already exist.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的`name`字段表明您希望确保组存在。使用`group`模块创建组。此模块要求您设置`name`参数，在此处设置为`developers`。`state`参数设置为`present`，因此如果组不存在，则会创建该组。
- en: The group creation task is the first one in the file, and that is not by accident.
    You need to create the *developers* group before executing any other tasks. Tasks
    are run in order, so you need to make sure the group exists first. If you tried
    to reference the group before creating it, you would get an error message stating
    that the *developers* group doesn’t exist, and the provisioning would fail. Understanding
    Ansible’s task order of operations is key to performing more complex operations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的第一个任务是创建组，这并非偶然。在执行任何其他任务之前，您需要创建**开发者**组。任务按顺序运行，因此您需要确保组首先存在。如果在创建组之前尝试引用该组，则会收到错误消息，指出**开发者**组不存在，且配置将失败。理解Ansible任务操作顺序对执行更复杂的操作至关重要。
- en: Keep the *user_and_group.yml* file open as you continue reviewing the other
    tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 继续查看其他任务时，请保持*user_and_group.yml*文件打开状态。
- en: Assigning a User to the Group
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分配用户到组
- en: 'To add a user to a group with Ansible, you’ll leverage the `user` module once
    again. In the *user_and_group.yml* file, locate the task that assigns *bender*
    to the *developers* group (the third task from the top in the file). It should
    look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ansible将用户添加到组中，您将再次利用`user`模块。在*user_and_group.yml*文件中，找到将*bender*分配给**开发者**组的任务（文件中从顶部算起第三个任务）。它应该看起来像这样：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First is the `name` of the task, which describes its intention. The `user` module
    appends *bender* to the *developers* group. The `groups` option can accept multiple
    groups in a comma-separated string. By using the `append` option, you leave *bender*’s
    previous groups intact and add only the *developers*. If you omit the `append`
    option, *bender* will be removed from all groups except its primary group and
    the one(s) listed in the `groups` parameter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的`name`字段描述了其意图。`user`模块将*bender*追加到**开发者**组。`groups`选项可以接受逗号分隔的多个组。通过使用`append`选项，您保留了*bender*之前的所有组，并仅添加了**开发者**组。如果省略`append`选项，则*bender*将从除其主要组和`groups`参数中列出的组之外的所有组中移除。
- en: Creating Protected Resources
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建受保护的资源
- en: With *bender*’s group affiliation sorted out, let’s visit the last two tasks
    in the *user_and_group.yml* file, which deal with creating a directory (*/opt/engineering/*)
    and a file (*/opt/engineering/private.txt*) on the VM. You’ll use this directory
    and file to test user access for *bender* later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了*bender*的组关联后，让我们来看看*user_and_group.yml*文件中的最后两个任务，这些任务涉及在虚拟机上创建一个目录（*/opt/engineering/*）和一个文件（*/opt/engineering/private.txt*）。稍后您将使用该目录和文件来测试*bender*的用户访问权限。
- en: 'With the *user_and_group.yml* file still open, locate the two tasks. Start
    with the directory creation task (the fourth from the top in the file), which
    should look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在*user_and_group.yml*文件中，找到这两个任务。首先是目录创建任务（文件中从顶部算起第四个任务），它应该看起来像这样：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, as before, set the `name` to match the task’s intent. Use the `file`
    module to manage the directory and its attributes. The `path` parameter is where
    you want to create the directory. In this case, it’s set to */opt/engineering/*.
    Since you want to create a directory, set the `state` parameter to the type of
    resource you want to create, which is `directory` in this example. You can use
    other types here, and you’ll see another one when you create the file later. The
    `mode`, or privilege, is set to `0750`. This number allows the owner (*root*)
    to read, write, and execute against this directory, while the group members are
    allowed only to read and execute. The execute permission is needed to enter the
    directory and list its contents. Linux uses octal numbers (`0750`, in this case)
    to define permissions on files and groups. See the `chmod` man page for more information
    on permission modes. Finally, set the `group` ownership of the directory to the
    *developers* group. This means only the users in the *developers* group can read
    or list the contents of this directory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像之前一样，将 `name` 设置为匹配任务的意图。使用 `file` 模块来管理目录及其属性。`path` 参数指定了你希望创建目录的位置。在这个例子中，它被设置为
    */opt/engineering/*。因为你希望创建一个目录，所以将 `state` 参数设置为你想创建的资源类型，这里是 `directory`。你还可以使用其他类型，稍后你创建文件时会看到另一个。`mode`（权限）设置为
    `0750`。这个数字允许所有者（*root*）对该目录进行读取、写入和执行操作，而组成员仅允许读取和执行。执行权限是进入目录并列出其内容所必需的。Linux
    使用八进制数字（此例中为 `0750`）来定义文件和组的权限。有关权限模式的更多信息，请参见 `chmod` 的手册页。最后，将目录的 `group` 所有权设置为
    *developers* 组。这意味着只有 *developers* 组中的用户才能读取或列出该目录的内容。
- en: 'The last task in the *user_and_group.yml*file creates an empty file inside
    the */opt/engineering/* directory you just created. The task, located at the bottom
    of the file, should look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*user_and_group.yml* 文件中的最后一个任务会在你刚创建的 */opt/engineering/* 目录内创建一个空文件。位于文件底部的任务应该像这样：'
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Set the task `name` to what you want to do on the host. Use the `file` module
    again to create a file and set some attributes on it. The `path`, which is required,
    gives the file’s location on the VM. This example shows creating a file named
    *private.txt* inside the */opt/engineering/* directory. The `state` parameter
    is set to `touch`, which means to create an empty file if it does not exist. If
    you need to create a nonempty file, you can use the `copy` or `template` Ansible
    modules. See the documentation for more details. The `mode`, or privileges, is
    set to read, write, and execute for any user in the group (`0770`). Finally, set
    the `group` ownership of the file to the *developers* group.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将任务的 `name` 设置为你想在主机上执行的操作。再次使用 `file` 模块来创建一个文件并设置一些属性。`path` 是必填项，指定了文件在虚拟机中的位置。这个例子演示了在
    */opt/engineering/* 目录中创建一个名为 *private.txt* 的文件。`state` 参数设置为 `touch`，意味着如果文件不存在，就创建一个空文件。如果你需要创建一个非空文件，可以使用
    `copy` 或 `template` 这两个 Ansible 模块。更多细节请参见文档。`mode`（权限）设置为允许组中的任何用户读取、写入和执行（`0770`）。最后，将文件的
    `group` 所有权设置为 *developers* 组。
- en: It is important to understand that there are many methods you can use to protect
    resources on a Linux host. Group restrictions are just a small piece of a larger
    authorization stack you would see in a production environment. I’ll discuss different
    access controls in a later chapter. But for now, just know that with Ansible’s
    tasks and modules, you can perform many common system configurations, such as
    securing files and directories across your whole environment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点非常重要：你可以使用多种方法来保护 Linux 主机上的资源。组限制只是生产环境中更大授权体系的一小部分。我将在后续章节讨论不同的访问控制。但现在，你只需要知道，借助
    Ansible 的任务和模块，你可以在整个环境中执行许多常见的系统配置任务，比如保护文件和目录。
- en: Updating the VM
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新虚拟机
- en: So far, we’ve been describing Ansible modules and reviewing the tasks that will
    provision the VM. The next step actually uses them. To provision the VM, you’ll
    need to uncomment the tasks in the playbook under the *ansible/* directory. The
    *site.yml* file is the playbook you referenced in the provisioners section of
    your Vagrantfile.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在描述 Ansible 模块，并回顾将为虚拟机提供配置的任务。下一步实际上是使用它们。要配置虚拟机，你需要取消注释位于 *ansible/*
    目录下 playbook 中的任务。*site.yml* 文件是你在 Vagrantfile 的配置器部分引用的 playbook 文件。
- en: 'Open the *site.yml* playbook file in your editor and locate the Chapter 2 tasks
    that look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开编辑器中的 *site.yml* playbook 文件，找到第 2 章的任务，它们看起来像这样：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: They are commented out. Remove the hash marks (`#`) at the start of the two
    lines to uncomment them so Ansible can execute the tasks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被注释掉了。移除两行开头的哈希符号（`#`）以取消注释，这样Ansible才能执行这些任务。
- en: 'The playbook should now look like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，剧本应该如下所示：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Both Chapter 2 tasks, `pam_pwquality` and `user_and_group`, are now uncommented,
    so they will execute the next time you provision the VM. Save and close the playbook
    file for now.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章中的两个任务，`pam_pwquality`和`user_and_group`，现在都已取消注释，因此它们将在下次配置虚拟机时执行。暂时保存并关闭剧本文件。
- en: 'You created the VM in Chapter 1. If the VM is not running, however, enter the
    `vagrant up` command to start it again. With the VM running, all you need to do
    is issue the `vagrant` `provision` command from within the *vagrant/* directory
    to run the provisioner:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你在第1章创建了虚拟机。然而，如果虚拟机未运行，请输入`vagrant up`命令重新启动它。虚拟机运行后，只需在*vagrant/*目录中运行`vagrant
    provision`命令来执行配置程序：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The last line shows that the Ansible playbook ran and completed `8` actions.
    Think of *actions* as the tasks and other operations being run. Seven of those
    eight actions changed some state on the VM. The line shows that the provision
    is complete and had no errors or failed actions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行显示Ansible剧本已经运行并完成了`8`个操作。可以把*操作*看作是执行的任务和其他操作。八个操作中有七个改变了虚拟机的某些状态。这一行显示配置已完成且没有错误或失败的操作。
- en: If your provision has failures, stop and try to troubleshoot them. Run the `provision`
    command again with the `--debug` flag, as shown in Chapter 1, to receive more
    information. You’ll need a successful provision to follow along with the examples
    in this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的配置出现故障，停止并尝试排查问题。再次运行`provision`命令并加上`--debug`标志，如第一章所示，以获取更多信息。你需要成功的配置才能继续进行本书中的示例。
- en: Testing User and Group Permissions
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试用户和组权限
- en: 'To test the user and group permissions you just configured, you’ll issue the
    `ssh` command for `vagrant` to access the VM. Make sure you are in the *vagrant/*
    directory so you have access to the Vagrantfile. Once there, enter the command
    below in your terminal to log in to the VM:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你刚刚配置的用户和组权限，你将发出`ssh`命令让`vagrant`访问虚拟机。确保你在*vagrant/*目录中，这样你才能访问Vagrantfile。进入该目录后，在终端中输入以下命令以登录到虚拟机：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You should be logged in as the *vagrant* user, which is the default user Vagrant
    creates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该以*vagrant*用户身份登录，这是Vagrant默认创建的用户。
- en: 'Next, to verify the user *bender* was created, you’ll use the `getent` command
    to query the *passwd* database for the user. This command allows you to query
    entries in files like */etc/passwd*, */etc/shadow*, and */etc/group*. To check
    *bender*’s existence, enter the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了验证用户*bender*是否已创建，你将使用`getent`命令查询*passwd*数据库中的用户信息。此命令允许你查询像*/etc/passwd*、*/etc/shadow*和*/etc/group*这样的文件中的条目。要检查*bender*是否存在，请输入以下命令：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Your result should look similar to the output above. If the user was not created,
    the command will complete without any result.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果应类似于上面的输出。如果用户没有被创建，命令将没有任何结果。
- en: 'Now, you should check whether the *developers* group exists and whether *bender*
    is a member of it. Query the *group* database for this information:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该检查*developers*组是否存在，以及*bender*是否是该组成员。查询*group*数据库以获取此信息：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The result should look like the output above, with a *developers* group and
    the user *bender* assigned to it. If the group did not exist, the command would
    have exited without any result.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应类似于上面的输出，显示一个*developers*组，并将用户*bender*分配给它。如果该组不存在，命令将没有任何输出结果。
- en: For the final check, test that only members of the *developers* group can access
    the */opt/engineering/* directory and the *private.txt* file. To do this, try
    to access the directory and file once as the *vagrant* user and then again as
    the *bender* user.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的检查是测试只有*developers*组的成员才能访问*/opt/engineering/*目录和*private.txt*文件。为此，尝试先以*vagrant*用户身份访问该目录和文件，然后再以*bender*用户身份访问。
- en: 'While logged in as *vagrant*, enter the command below to list the */opt/engineering/*
    directory and its contents:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当以*vagrant*用户身份登录时，输入以下命令列出*/opt/engineering/*目录及其内容：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The output indicates that access is `denied` when trying to list files in */opt/engineering*
    as the *vagrant* user. This is because the *vagrant* user is not a member of the
    *developers* group and thus does not have read access to the `directory`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，当尝试以*vagrant*用户身份列出*/opt/engineering*中的文件时，访问被`denied`。这是因为*vagrant*用户不是*developers*组的成员，因此无法读取该`目录`。
- en: 'Now, to test the file permissions for *vagrant*, use the `cat` command to view
    the */opt/engineering/private.txt* file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要测试 *vagrant* 的文件权限，使用 `cat` 命令查看 */opt/engineering/private.txt* 文件：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The same error occurs because the *vagrant* user does not have read permissions
    on the file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 *vagrant* 用户没有读取文件的权限，因此发生了相同的错误。
- en: The next test is to verify that *bender* has access to this same directory and
    file. To do this, you must be logged in as the *bender* user. Switch users from
    *vagrant* to *bender* using the `sudo` `su` command. (I’ll cover the `sudo` command
    in Chapter 4.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是验证 *bender* 是否能够访问相同的目录和文件。为此，必须以 *bender* 用户登录。从 *vagrant* 切换到 *bender*
    用户，使用 `sudo` `su` 命令。（我将在第4章中讲解 `sudo` 命令。）
- en: 'In your terminal, enter the following command to switch users:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令来切换用户：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you have successfully switched users, try the command to list the directory
    again:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功切换用户，再次尝试命令列出目录：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, as you can see, you have successfully accessed the directory and its contents
    as *bender*, and the *private.txt* file is viewable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您已经成功以 *bender* 访问了该目录及其内容，并且 *private.txt* 文件是可查看的。
- en: 'Next, enter the following command to check whether *bender* can read the contents
    of the */opt/engineering/private.txt* file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下命令检查 *bender* 是否可以读取 */opt/engineering/private.txt* 文件的内容：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You use the `cat` command again to view the contents of the file. Since the
    file is empty, there is no output. More importantly, there are no errors from
    *bender*’s attempt to access the file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您再次使用 `cat` 命令查看文件内容。由于文件为空，未有输出。更重要的是，*bender* 在尝试访问文件时没有出现错误。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you provisioned the VM using the following Ansible modules:
    `package`, `lineinfile`, `user`, `group`, and `file`. These modules configured
    the host to enforce complex passwords, manage a user and group, and secure access
    to a file and directory. These are common tasks a DevOps engineer would do in
    a typical environment. Not only did you expand your Ansible knowledge, but you
    learned how to automate basic security hygiene on the VM. In the next chapter,
    you’ll continue with the provided tasks and increase SSH security to limit access
    to the VM.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您使用以下 Ansible 模块配置了虚拟机：`package`、`lineinfile`、`user`、`group` 和 `file`。这些模块配置了主机以强制执行复杂密码、管理用户和组，以及确保文件和目录的访问安全。这些是
    DevOps 工程师在典型环境中常做的任务。您不仅扩展了 Ansible 知识，还学会了如何在虚拟机上自动化基本的安全卫生工作。在下一章中，您将继续完成任务，并提高
    SSH 安全性，限制对虚拟机的访问。
