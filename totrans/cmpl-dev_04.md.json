["```\nlet string = \"1\";\nlet number = 1;\nlet result;\n\nresult = number + number;\nconsole.log(\"value: \", result, \" type of \", typeof(result));\n\nresult = number + string;\nconsole.log(\"value: \", result, \" type of \", typeof(result)); \n```", "```\nlet string = \"1\";\nlet number = 1;\nlet result;\n\nconst calculate = (a, b) => a + b;\n\nresult = calculate(number, number);\nconsole.log(\"value: \", result, \" type of \", typeof(result));\n\nresult = calculate(number, string);\nconsole.log(\"value: \", result, \" type of \", typeof(result)); \n```", "```\nlet string = \"1\";\nlet number = 1;\nlet result;\n\nconst calculate = (a, b) => {\n    if (Number.isInteger(a) === false || Number.isInteger(b) === false) {\n        throw new Error(\"Invalid type: a parameter is not an integer\");\n    } else {\n        return a + b;\n    }\n};\n\nresult = calculate(number, number);\nconsole.log(\"value: \", result, \" type of \", typeof(result));\n\nresult = calculate(number, string);\nconsole.log(\"value: \", result, \" type of \", typeof(result)); \n```", "```\n$ **npm install** **-****-save-dev typescript**\n```", "```\n$ **npx tsc -init**\n```", "```\n{\n    \"extends\": \"@tsconfig/recommended/tsconfig.json\",\n    \"compilerOptions\": {},\n    \"include\": [],\n    \"exclude\": []\n} \n```", "```\nconst calculate = (a: number, b: number) => a + b;\n```", "```\nlet weather: string = \"sunny\";\n```", "```\nlet weather = \"sunny\";\n```", "```\nfunction getWeather(): string {\n    const weather = \"sunny\";\n    return weather;\n} \n```", "```\nconst weather = \"sunny\";\nfunction getWeather(weather: string): string {\n    return weather;\n};\ngetWeather(weather); \n```", "```\nlet stringType: string = \"bar\";\nlet booleanType: boolean = true;\nlet integerType: number = 1;\nlet floatType: number = 1.5;\nlet nullType: null = null;\nlet undefinedType: undefined = undefined; \n```", "```\nlet stringOrNumberUnionType: string | number;\nstringOrNumberUnionType = \"bar\";\nstringOrNumberUnionType = 1;\nstringOrNumberUnionType = true; \n```", "```\nlet genericArray: [] = [];\ngenericArray.push(1);\n\nlet numberArray: number[] = [];\nnumberArray.push(1); \n```", "```\nlet weatherDetail: {\n    weather: string,\n    zipcode: string,\n    temp: number\n} = {weather: \"sunny\", zipcode: \"00000\", temp: 1};\nweatherDetail.weather = 2; \n```", "```\nlet validTuple: [string, number] = [\"bar\", 1];\nlet invalidTuple: [string, number] = [1, \"bar\"]; \n```", "```\nlet indifferent: any = true;\nindifferent = 1;\nindifferent = []; \n```", "```\nconst calculate = (a**: any**, b**: any**)**: any** => a + b;\nconsole.log(calculate (1,1));\nconsole.log(calculate (**\"1\"**,1)); \n```", "```\nfunction log(msg: string)**: void** {\n    console.log(msg);\n} \n```", "```\n**type** WeatherDetailType **= {**\n    weather: string;\n    zipcode: string;\n    temp?: number;\n};\n\nlet weatherDetail: WeatherDetailType = {\n    weather: \"sunny\",\n    zipcode: \"00000\",\n    temp: 30\n};\nconst getWeatherDetail = (data: WeatherDetailType): WeatherDetailType => data; \n```", "```\n**interface** WeatherProps **{**\n    weather: string;\n    zipcode: string;\n    temp?: number;\n}\n\nconst weatherComponent = (props: WeatherProps): string => props.weather; \n```", "```\ninterface WeatherQueryInterface {\n    zipcode: string;\n}\n\ntype WeatherDetailType = {\n    weather: string;\n    zipcode: string;\n    temp?: number;\n}; \n```", "```\n$ **npm install --save-dev @types/express**\n```", "```\n{\n    \"name\": \"sample-express\",\n    \"version\": \"1.0.0\",\n    \"description\": \"sample express server\",\n    \"license\": \"ISC\",\n    \"type\": \"module\",\n    \"dependencies\": {\n        \"express\": \"^4.18.2\",\n        \"node-fetch\": \"^3.2.6\"\n    },\n    \"devDependencies\": {\n        **\"@types/express\": \"^4.17.15\",**\n        **\"typescript\": \"^4.9.4\"**\n    }\n} \n```", "```\n{\n    \"compilerOptions\": {\n        \"esModuleInterop\": true,\n        \"module\": \"es6\",\n        \"moduleResolution\": \"node\",\n        \"target\": \"es6\",\n        \"noImplicitAny\": true\n    }\n} \n```", "```\ntype responseItemType = {\n    id: string;\n    name: string;\n};\n\ntype WeatherDetailType = {\n    zipcode: string;\n    weather: string;\n    temp?: number;\n};\n\ninterface WeatherQueryInterface {\n    zipcode: string;\n} \n```", "```\nimport fetch from \"node-fetch\";\n\nconst routeHello = ()**: string** => \"Hello World!\";\n\nconst routeAPINames = async ()**: Promise<string>** => {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data**: responseItemType[];**\n    try {\n        const response = await fetch(url);\n        data = **(**await response.json()**) as responseItemType[];**\n    } catch (err) {\n        return \"Error\";\n    }\n    const names = data\n        .map((item) => `id: ${item.id}, name: ${item.name}`)\n        .join(\"<br>\");\n    return names;\n};\n\nconst routeWeather = (query**: WeatherQueryInterface**)**: WeatherDetailType** =>\n    queryWeatherData(query);\n\nconst queryWeatherData = (query**: WeatherQueryInterface**)**: WeatherDetailType** => {\n    return {\n        zipcode: query.zipcode,\n        weather: \"sunny\",\n        temp: 35\n    };\n};\n\nexport {routeHello, routeAPINames, routeWeather}; \n```", "```\nimport {routeHello, routeAPINames, **routeWeather**} from \"./routes.js\";\nimport express, {**Request, Response**} from \"express\";\n\nconst server = express();\nconst port = 3000;\n\nserver.get(\"/hello\", function (**_req: Request**, res**: Response**): void {\n    const response = routeHello();\n    res.send(response);\n});\n\nserver.get(\"/api/names\",\n    async function (**_req: Request**, res**: Response): Promise<void>** {\n        let response: string;\n        try {\n            response = await routeAPINames();\n            res.send(response);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n);\n\nserver.get(\n    \"/api/weather/**:zipcode**\",\n    function (req**: Request**, res**: Response**): **void** {\n        const response = routeWeather({zipcode: **req.params.zipcode**});\n        res.send(response);\n    }\n);\n\nserver.listen(port, function (): void {\n    console.log(\"Listening on \" + port);\n}); \n```", "```\n$ **npx tsc**\n```", "```\n$ **node index.js**\nListening on 3000 \n```"]