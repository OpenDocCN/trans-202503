["```\n{\"meta\":{\"users\":{\"231148326249037824\":{\"name\":\"D'Marcus Liebowitz\"},\"232213403974893569\":{\"nam\ne\":\"northern_confederate\"},\"279620004641767424\":{\"name\":\"☇Unlimited Power☇\"},\"23338059623405977\n6\":{\"name\":\"OrwellHuxley\"},\"289851780521787392\":{\"name\":\"badtanman\"},\"337421867700715524\":{\"nam\ne\":\"spadegunner\"},\"315936522656546818\":{\"name\":\"erz1871\"},\"122932975724789761\":{\"name\":\"Archer\"\n},\"201547638129164290\":{\"name\":\"SLUG2_\"},\"288899711929286667\":{\"name\":\"million plus\"},\"25019824\n`--snip--`\n```", "```\nmicah@trapdoor Discord-JSON-Scrapes % **cat VibrantDiversity.json | jq**\n{\n  \"meta\": {\n    \"users\": {\n      \"231148326249037824\": {\n        \"name\": \"D'Marcus Liebowitz\"\n      },\n      \"232213403974893569\": {\n        \"name\": \"northern_confederate\"\n      },\n      \"279620004641767424\": {\n        \"name\": \"☇Unlimited Power☇\"\n      },\n`--snip--`\n```", "```\n**cat VibrantDiversity.json | jq 'keys'**\n```", "```\n[\n  \"data\",\n  \"meta\"\n]\n```", "```\n**cat VibrantDiversity.json | jq '.meta | keys'**\n```", "```\n[\n  \"channels\",\n  \"servers\",\n  \"userindex\",\n  \"users\"\n]\n```", "```\n**cat VibrantDiversity.json | jq '.meta.servers'**\n```", "```\n[\n  {\n    \"name\": \"Vibrant Diversity\",\n    \"type\": \"SERVER\"\n  }\n]\n```", "```\n**cat VibrantDiversity.json | jq '.meta.channels'**\n```", "```\n{\n  \"274024266435919872\": {\n    \"server\": 0,\n    \"name\": \"rules\"\n  },\n  \"274262571367006208\": {\n    \"server\": 0,\n    \"name\": \"general\"\n  },\n  \"292812979555139589\": {\n    \"server\": 0,\n    \"name\": \"effortposting\"\n  },\n  \"288508006990348299\": {\n    \"server\": 0,\n    \"name\": \"problematic_oven\" },\n  \"274055625988898816\": {\n    \"server\": 0,\n    \"name\": \"music\"\n  },\n  \"343979974241550337\": {\n    \"server\": 0,\n    \"name\": \"gun-posting-goes-here\"\n  },\n  \"328841016352440320\": {\n    \"server\": 0,\n    \"name\": \"food-posting\"\n  },\n  \"274025126641795074\": {\n    \"server\": 0,\n    \"name\": \"share_contact_info\"\n  },\n  \"288901961313550336\": {\n    \"server\": 0,\n    \"name\": \"recruiting\"\n  }\n}\n```", "```\n**cat VibrantDiversity.json | jq '.meta.users'**\n```", "```\n{\n  \"231148326249037824\": {\n    \"name\": \"D'Marcus Liebowitz\"\n  },\n  \"232213403974893569\": {\n    \"name\": \"northern_confederate\"\n  },\n  \"279620004641767424\": { \"name\": \"☇Unlimited Power☇\"\n  },\n`--snip--`\n```", "```\n**cat VibrantDiversity.json | jq '.meta.userindex'**\n```", "```\n[\n  \"231148326249037824\",\n  \"232213403974893569\",\n  \"279620004641767424\",\n`--snip--`\n```", "```\n**cat VibrantDiversity.json | jq '.data | keys'**\n```", "```\n[\n  \"274024266435919872\",\n  \"274025126641795074\",\n  \"274055625988898816\",\n  \"274262571367006208\",\n  \"288508006990348299\",\n  \"288901961313550336\",\n  \"292812979555139589\",\n  \"328841016352440320\",\n  \"343979974241550337\"\n]\n```", "```\n**cat VibrantDiversity.json | jq '.data.\"288508006990348299\"'**\n```", "```\nmicah@trapdoor Discord-JSON-Scrapes % **cat VibrantDiversity.json | jq** '.data\n.\"288508006990348299\"'\n{\n`--snip--`\n  \"352992491282366485\": {\n    \"u\": 4,\n    \"t\": 1504230368205,\n    \"m\": \"we need more white girls with nice asses\"\n  },\n  \"352992512752746496\": {\n    \"u\": 4,\n    \"t\": 1504230373324,\n    \"m\": \"no more gay jew shit\"\n  },\n  \"352992579949690890\": {\n    \"u\": 1,\n    \"t\": 1504230389345,\n    \"m\": \"you're not allowed to oogle anyone whiter than med\"\n  },\n  \"352992652687441920\": {\n    \"u\": 1,\n    \"t\": 1504230406687,\n    \"m\": \"if i catch you looking at anglo/celtic/nordic girls you're banned\"\n  },\n`--snip--`\n```", "```\n>>> **from datetime import datetime**\n>>> **timestamp = datetime.fromtimestamp(1504230373324 / 1000)**\n>>> **print(timestamp)**\n```", "```\n2017-08-31 18:46:13.324000\n```", "```\n**cat VibrantDiversity.json | jq '.meta.userindex[4]'**\n```", "```\n\"289851780521787392\"\n```", "```\n**cat VibrantDiversity.json | jq '.meta.users.\"289851780521787392\"'**\n```", "```\n{\n  \"name\": \"badtanman\"\n}\n```", "```\nmicah@trapdoor Discord-JSON-Scrapes % **cat VibrantDiversity.json | jq '.meta.userindex[1]'**\n\"232213403974893569\"\nmicah@trapdoor Discord-JSON-Scrapes % **cat VibrantDiversity.json | jq '.meta.users.\"232213403974**\n**893569\"'**\n{\n  \"name\": \"northern_confederate\"\n}\n```", "```\n\"352992491282366485\": {\n  \"u\": 4,\n  \"t\": 1504230368205,\n  \"m\": \"we need more white girls with nice asses\"\n}\n```", "```\n{\n  \"name\": \"badtanman\"\n}\n```", "```\n#!/usr/bin/python3\nimport sys\nimport json\nimport click\nfrom datetime import datetime\n\ndef highlight(message, query): ❶\n    new_message = \"\"\n    index = 0\n    while True:\n        new_index = message.lower().find(query.lower(), index)\n        if new_index > 0:\n            # Found\n            new_message += message[index:new_index]\n            new_message += click.style(\n                message[new_index : new_index + len(query)], underline=True\n            )\n            index = new_index + len(query)\n        else:\n            # Not found\n            new_message += message[index:]\n            break\n\n    return new_message\n\ndef display(channel_name, server_name, user_name, timestamp, message, query): ❷\n    click.echo(\n        \"{} {}\".format(\n            click.style(\"#{}\".format(channel_name), fg=\"bright_magenta\"),\n            click.style(\"[server: {}]\".format(server_name), fg=\"bright_black\"),\n        )\n    )\n    click.echo(\n        \"{} {}\".format(\n            click.style(user_name, bold=True),\n            click.style(timestamp.strftime(\"%c\"), fg=\"bright_black\"),\n        )\n    )\n    click.echo(highlight(message, query))\n    click.echo(\"\")\n\ndef search(data, query): ❸\n    # Loop through each channel\n    for channel_id in data[\"data\"]: ❹\n        # Get the channel name and server name\n        channel_name = data[\"meta\"][\"channels\"][channel_id][\"name\"] ❺ server_name = data[\"meta\"][\"servers\"][\n            data[\"meta\"][\"channels\"][channel_id][\"server\"]\n        ][\"name\"]\n\n        for message_id in data[\"data\"][channel_id]: ❻\n            # Pull the user data, timestamp, and message body from the message\n            user_index = data[\"data\"][channel_id][message_id][\"u\"]\n            user_id = data[\"meta\"][\"userindex\"][user_index]\n            user_name = data[\"meta\"][\"users\"][user_id][\"name\"]\n            timestamp = datetime.fromtimestamp(\n                data[\"data\"][channel_id][message_id][\"t\"] / 1000\n            )\n            message = data[\"data\"][channel_id][message_id][\"m\"]\n\n            # Is the query in the message?\n            if query.lower() in message.lower(): ❼\n                display(channel_name, server_name, user_name, timestamp, message, query) \n\n@click.command()\n@click.argument(\"filename\", type=click.Path(exists=True))\n@click.argument(\"query\")\ndef main(filename, query): ❽\n    # Load the JSON file\n    try:\n        with open(filename) as f:\n            data = json.loads(f.read())\n    except:\n        print(\"Failed to load JSON file\")\n        sys.exit()\n\n    # Search\n    search(data, query)\n\nif __name__ == \"__main__\":\n    main()\n```", "```\n**python3 discord-json-search.py ~/datasets/Discord-JSON-Scrapes/VibrantDiversity.json \"berkeley\"**\n```", "```\n#general [server: Vibrant Diversity]\nHector Sun Sep  3 20:19:11 2017\nLook at how many antifa were at Boston and Berkeley.  We need numbers.  We can't have rallies with less than a thousand people now.  Even that's a low number.\n`--snip--`\n```", "```\nfrom flask import Flask, render_template, request, escape, flash, redirect\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///database.sqlite3\"\napp.config[\"DEBUG\"] = True\n\ndb = SQLAlchemy(app)\n```", "```\nclass Server(db.Model):\n    id = db.Column(db.Integer, autoincrement=True, primary_key=True)\n    name = db.Column(db.String(128), unique=True, nullable=False)\n\n    channels = db.relationship(\"Channel\", back_populates=\"server\")\n    messages = db.relationship(\"Message\", back_populates=\"server\")\n\n    def __init__(self, name):\n        self.name = name\n```", "```\nserver = Server(\"Vibrant Diversity\")\ndb.session.add(server)\ndb.session.commit()\n```", "```\nprint(\"Adding servers: \", end=\"\", flush=True)\nfor item in data[\"meta\"][\"servers\"]:\n    name = item[\"name\"]\n\n    try:\n        server = Server(name)\n        db.session.add(server)\n        db.session.commit()\n        print(\"+\", end=\"\", flush=True)\n    except sqlalchemy.exc.IntegrityError:\n        db.session.rollback()\n        print(\".\", end=\"\", flush=True)\nprint(\"\")\n```", "```\nprint(\"Adding users: \", end=\"\", flush=True)\nfor user_discord_id in data[\"meta\"][\"users\"]:\n    name = data[\"meta\"][\"users\"][user_discord_id][\"name\"]\n\n    try:\n        user = User(user_discord_id, name)\n        db.session.add(user)\n        db.session.commit()\n        print(\"+\", end=\"\", flush=True)\n    except sqlalchemy.exc.IntegrityError:\n        db.session.rollback()\n        print(\".\", end=\"\", flush=True)\nprint(\"\")\n```", "```\nprint(\"Adding channels: \", end=\"\", flush=True)\nfor channel_discord_id in data[\"meta\"][\"channels\"]:\n    name = data[\"meta\"][\"channels\"][channel_discord_id][\"name\"] server_id = data[\"meta\"][\"channels\"][channel_discord_id][\"server\"]\n ❶ server = Server.query.filter_by(\n        name=data[\"meta\"][\"servers\"][server_id][\"name\"]\n    ).first()\n\n    try:\n        channel = Channel(server, channel_discord_id, name)\n        db.session.add(channel)\n        db.session.commit()\n        print(\"+\", end=\"\", flush=True)\n    except sqlalchemy.exc.IntegrityError:\n        db.session.rollback()\n        print(\".\", end=\"\", flush=True)\nprint(\"\")\n```", "```\nfor channel_discord_id in data[\"data\"]:\n    # Get the channel\n    channel = Channel.query.filter_by(discord_id=channel_discord_id).one() ❶\n\n    # Loop through each message in this channel\n    print(f\"Adding messages from {channel.server.name}, #{channel.name}: \", end=\"\", flush=True)\n    for message_discord_id in data[\"data\"][channel_discord_id]:\n        try:\n            timestamp = data[\"data\"][channel_discord_id][message_discord_id][\"t\"]\n            message = data[\"data\"][channel_discord_id][message_discord_id][\"m\"]\n\n            user_index = data[\"data\"][channel_discord_id][message_discord_id][\"u\"]\n            user_discord_id = data[\"meta\"][\"userindex\"][user_index]\n            user = User.query.filter_by(discord_id=user_discord_id).first() ❷\n if \"a\" in data[\"data\"][channel_discord_id][message_discord_id]:\n                attachments_json = json.dumps(\n                    data[\"data\"][channel_discord_id][message_discord_id][\"a\"]\n                  )\n            else:\n                attachments_json = None\n\n            message = Message(\n                channel.server,\n                message_discord_id,\n                timestamp,\n                message,\n                user,\n                channel,\n                attachments_json,\n            )\n            db.session.add(message)\n            db.session.commit()\n            print(\"+\", end=\"\", flush=True)\n        except sqlalchemy.exc.IntegrityError:\n            db.session.rollback()\n            print(\".\", end=\"\", flush=True)\n    print(\"\")\n```", "```\n**python3 admin.py import-json ~/datasets/Discord-JSON-Scrapes/VibrantDiversity.json**\n```", "```\nAdding servers: +\nAdding users: +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n`--snip--`\nAdding channels: +++++++++\nAdding messages from Vibrant Diversity, #rules: +++++++++++++++\nAdding messages from Vibrant Diversity, #general: +++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n`--snip--`\nAdding messages from Vibrant Diversity, #recruiting: ++++++++++++++++++++++++++++++++++++++++++\n+++++++++\nImport complete\n```", "```\n**python3 admin.py import-json ~/datasets/Discord-JSON-Scrapes/PonyPowerComplete-Sept5at155PM.txt**\n```", "```\nImporting: /Users/micah/datasets/Discord-JSON-Scrapes/PonyPowerComplete-Sept5at155PM.txt\nAdding servers: +\nAdding users: .++++..+++++.+++++..++++.++.+++++++++++..+.+......\nAdding channels: ++++\nAdding messages from Pony Power, #general-chat: +++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n`--snip--`\n```", "```\n<!doctype html>\n<html>\n\n<head>\n  <title>Discord Analysis</title>\n  <link rel=stylesheet type=text/css href=\"{{url_for('static', filename='style.css')}}\"> ❶\n</head>\n\n<body>\n  <div class=\"wrapper\">\n    <div class=\"sidebar\">\n      {% for server in servers %} ❷\n      <div class=\"server\">\n        <p><strong>{{server.name}}</strong></p>\n        <ul>\n          {% for c in server.channels %} ❸\n          <li{% if channel %}{% if c.id==channel.id %} class=\"active\" {% endif %}{% endif %}><a\n              href=\"{{c.permalink()}}\">#{{c.name}}</a> <span class=\"message-count\">[{{\n              \"{0:,}\".format(c.message_count() | int)}}]</span></li>\n            {% endfor %}\n        </ul>\n      </div>\n      {% endfor %}\n <p><a href=\"/users\">Users</a></p>\n    </div>\n\n    <div class=\"content\">\n      <div class=\"search\">\n        <form method=\"get\" action=\"/search\">\n          <input type=\"text\" name=\"q\" class=\"q\" placeholder=\"Search query\" {% if q %}\n            value=\"{{q}}\" {% endif %} /> ❹\n          <select name=\"s\">\n            <option value=\"\">[all servers]</option>\n            {% for server in servers %} ❺\n            <option value=\"{{server.id}}\" {% if server.id==s %} selected=\"selected\" {% endif\n              %}>\n              {{server.name}}\n            </option>\n            {% endfor %}\n          </select>\n            <input type=\"submit\" value=\"Search\" />\n        </form>\n      </div>\n\n      <div class=\"messages\">\n        {% for message in get_flashed_messages() %} ❻\n        <div class=flash>{{message}}</div>\n        {% endfor %}\n      </div>\n\n      {% block content %}{% endblock %} ❼\n    </div>\n  </div>\n</body>\n\n</html>\n```", "```\n<link rel=stylesheet type=text/css href=\"`style.css`\">\n```", "```\n{{url_for('static', filename='style.css')}}\n```", "```\n@app.route(\"/\")\ndef index():\n    servers = Server.query.all()\n    return render_template(\"index.html\", servers=servers)\n```", "```\n{% extends \"layout.html\" %}\n{% block content %}\n<h2>Alt-right chatroom research</h2>\n<p>This is a web app that will let you research the alt-right chatroom leak,\n    published by Unicorn Riot.</p>\n<p>Click on channel names to browse them. Search for keywords. Viewing\n    individual messages will show you the whole conversation from an hour\n    before and after that message.</p>\n{% endblock %}\n```", "```\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    s = request.args.get(\"s\", 0)\n    if s == \"\":\n        s = 0\n    page, per_page = get_pagination_args() server = Server.query.filter_by(id=s).first()\n\n    messages = Message.query\n    if server:\n        messages = messages.filter_by(server=server)\n    pagination = (\n        messages.filter(Message.message.like(f\"%{q}%\"))\n        .order_by(Message.timestamp)\n        .paginate(page=page, per_page=per_page)\n    )\n\n    if server:\n        description = f\"Search {server.name}: {q}\"\n    else:\n        description = f\"Search: {q}\"\n\n    servers = Server.query.all()\n    pagination_link = f\"/search?q={q}&s={s}\"\n    return render_template(\n        \"results.html\",\n        q=q,\n        s=int(s),\n        servers=servers,\n        pagination=pagination,\n        pagination_link=pagination_link,\n        description=description,\n    )\n```", "```\n * Serving Flask app 'app'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production\ndeployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 654-228-939\n```", "```\n127.0.0.1 - - [14/Jan/2023 11:58:30] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [14/Jan/2023 11:58:30] \"GET /static/style.css HTTP/1.1\" 200 -\n127.0.0.1 - - [14/Jan/2023 11:58:30] \"GET /favicon.ico HTTP/1.1\" 404 -\n```", "```\n127.0.0.1 - - [14/Jan/2023 11:58:57] \"GET /search?q=berkeley&s= HTTP/1.1\" 200 -\n127.0.0.1 - - [14/Jan/2023 11:58:57] \"GET /static/style.css HTTP/1.1\" 304 -\n```"]