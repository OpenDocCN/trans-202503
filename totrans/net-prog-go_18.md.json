["```\npackage feed\n\nimport (\n    \"context\"\n    \"encoding/xml\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\ntype Item struct {\n    Title     string `xml:\"title\"`\n    URL       string `xml:\"link\"`\n    Published string 1`xml:\"pubDate\"`\n}\n\ntype RSS struct {\n    Channel struct {\n        Items []Item `xml:\"item\"`\n    } `xml:\"channel\"`\n    entityTag 2string\n}\n```", "```\n`--snip--`\nfunc (r RSS) Items() []Item {\n    items := 1make([]Item, len(r.Channel.Items))\n    copy(items, r.Channel.Items)\n\n    return items\n}\n\nfunc (r *RSS) ParseURL(ctx context.Context, u string) error {\n    req, err := http.NewRequestWithContext(ctx, http.MethodGet, u, nil)\n    if err != nil {\n        return err\n    }\n\n    if r.entityTag != \"\" {\n      2 req.Header.Add(\"ETag\", r.entityTag)\n    }\n\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return err\n    }\n\n    switch resp.StatusCode {\n    case 2http.StatusNotModified: // no-op\n    case 3http.StatusOK:\n        b, err := ioutil.ReadAll(resp.Body)\n        if err != nil {\n return err\n        }\n        _ = resp.Body.Close()\n\n        err = xml.Unmarshal(b, r)\n        if err != nil {\n            return err\n        }\n\n        r.entityTag = 4resp.Header.Get(\"ETag\")\n    default:\n        return fmt.Errorf(\"unexpected status code: %v\", resp.StatusCode)\n    }\n\n    return nil\n}\n```", "```\n$ **cd feed**\nfeed$ **go mod init github.com/awoodbeck/gnp/ch14/feed**\ngo: creating new go.mod: module github.com/awoodbeck/gnp/ch14/feed\nfeed$ **cd -**\n```", "```\n$ **curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" \\**\n**-o \"awscliv2.zip\"**\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 32.3M  100 32.3M    0     0  31.1M      0  0:00:01  0:00:01 --:--:-- 31.1M\n$ **unzip -q awscliv2.zip**\n$ **sudo ./aws/install**\n[sudo] password for user:\nYou can now run: /usr/local/bin/aws --version\n$ **aws --version**\naws-cli/2.0.56 Python/3.7.3 Linux/5.4.0-7642-generic exe/x86_64.pop.20\n```", "```\n$ **aws configure**\nAWS Access Key ID [None]: **AIDA1111111111EXAMPLE**\nAWS Secret Access Key [None]: **YxMCBWETtZjZhW6VpLwPDY5KqH8hsDG45EXAMPLE**\nDefault region name [None]: **us-east-2**\nDefault output format [None]: **yaml**\n```", "```\n{\n  \"Version\": 1\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": 2\"Allow\",\n      \"Principal\": {\n        \"Service\": 3\"lambda.amazonaws.com\"\n      },\n      \"Action\": 4\"sts:AssumeRole\"\n    }\n  ]\n}\n```", "```\n$ **aws iam create-role --role-name \"lambda-xkcd\" \\**\n**--assume-role-policy-document file://aws/trust-policy.json**\nRole:\n1 Arn: arn:aws:iam::123456789012:role/lambda-xkcd\n2 AssumeRolePolicyDocument:\n    Statement:\n    - Action: sts:AssumeRole\n      Effect: Allow\n      Principal:\n        Service: lambda.amazonaws.com\n    Version: '2012-10-17'\n  CreateDate: '2006-01-02T15:04:05+00:00'\n  Path: /\n  RoleId: AROA1111111111EXAMPLE\n  RoleName: lambda-xkcd\n```", "```\nfunc()\n\nfunc() error\n\nfunc(TypeIn) error\n\nfunc() (TypeOut, error)\n\nfunc(context.Context) error\n\nfunc(context.Context, TypeIn) error\n\nfunc(context.Context) (TypeOut, error)\n\nfunc(context.Context, TypeIn) (TypeOut, error)\n```", "```\npackage main\n\nimport (\n    \"context\"\n\n    \"github.com/awoodbeck/gnp/ch14/feed\"\n    \"github.com/aws/aws-lambda-go/lambda\"\n)\n\nvar (\n    rssFeed 1feed.RSS\n    feedURL = 2\"https://xkcd.com/rss.xml\"\n)\n\ntype EventRequest struct {\n    Previous bool `json:\"previous\"`\n}\n\ntype EventResponse struct {\n    Title     string `json:\"title\"`\n    URL       string `json:\"url\"`\n    Published string `json:\"published\"`\n}\n```", "```\n`--snip--`\nfunc main() {\n  1 lambda.Start(LatestXKCD)\n}\n\nfunc LatestXKCD(ctx context.Context, req EventRequest) (\n    EventResponse, error) {\n    resp := 2EventResponse{Title: \"xkcd.com\", URL: \"https://xkcd.com/\"}\n\n    if err := 3rssFeed.ParseURL(ctx, feedURL); err != nil {\n        return resp, err\n    }\n```", "```\n`--snip--`\n    switch items := rssFeed.Items(); {\n    case 1req.Previous && len(items) > 1:\n        resp.Title = items[1].Title\n        resp.URL = items[1].URL\n        resp.Published = items[1].Published\n    case len(items) > 0:\n        resp.Title = items[0].Title\n        resp.URL = items[0].URL\n        resp.Published = items[0].Published\n    }\n\n    return resp, nil\n}\n```", "```\n$ **GOOS=linux go build aws/xkcd.go**\n$ **zip xkcd.zip xkcd**\n  adding: xkcd (deflated 50%)\n$ **aws lambda create-function --function-name \"xkcd\" --runtime \"go1.x\" \\**\n**--handler \"xkcd\" --role \"arn:aws:iam::123456789012:role/lambda-xkcd\" \\**\n**--zip-file \"fileb://xkcd.zip\"**\nCodeSha256: M36I7oiS8+S9AryIthcizsjdLDKXMaJKvZvsZzZDNH0=\nCodeSize: 6597490\nDescription: ''\nFunctionArn: arn:aws:lambda:us-east-2:123456789012:function:xkcd\nFunctionName: 1xkcd\nHandler: 2xkcd\nLastModified: 2006-01-02T15:04:05.000+0000\nLastUpdateStatus: Successful\nMemorySize: 128\nRevisionId: b094a881-9c49-4b86-86d5-eb4335507eb0\nRole: arn:aws:iam::123456789012:role/lambda-xkcd\nRuntime: go1.x\nState: Active\nTimeout: 3\nTracingConfig:\n  Mode: PassThrough\nVersion: $LATEST\n```", "```\nPS C:\\Users\\User\\dev\\gnp\\ch14> setx GOOS linux\n\nSUCCESS: Specified value was saved.\nPS C:\\Users\\User\\dev\\gnp\\ch14> \\Go\\bin\\go.exe build -o xkcd .\\aws\\xkcd.go\ngo: downloading github.com/aws/aws-lambda-go v1.19.1\n`--snip--`\nPS C:\\Users\\User\\dev\\gnp\\ch14> Compress-Archive xkcd xkcd.zip\n```", "```\n$ **aws lambda update-function-code --function-name \"xkcd\" \\**\n**--zip-file \"fileb://xkcd.zip\"**\n```", "```\n$ **aws lambda invoke --function-name \"xkcd\" response.json**\nExecutedVersion: $LATEST\nStatusCode: 200\n```", "```\n$ **cat response.json**\n{\"title\":\"Election Screen Time\",\"url\":\"https://xkcd.com/2371/\",\n\"published\":\"Mon, 12 Oct 2020 04:00:00 -0000\"}\n```", "```\n$ **aws lambda invoke --cli-binary-format \"raw-in-base64-out\" \\**\n**--payload '{\"previous\":true}' --function-name \"xkcd\" response.json**\nExecutedVersion: $LATEST\nStatusCode: 200\n$ **cat response.json**\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n```", "```\n$ **curl -O** **https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/\\**\n**google-cloud-sdk-319.0.1-linux-x86_64.tar.gz**\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 81.9M  100 81.9M    0     0  34.1M      0  0:00:02  0:00:02 --:--:-- 34.1M\n$ **tar xf google-cloud-sdk-319.0.1-linux-x86_64.tar.gz**\n$ **./google-cloud-sdk/install.sh**\nWelcome to the Google Cloud SDK!\n`--snip--`\n```", "```\n$ **./google-cloud-sdk/bin/gcloud init**\nWelcome! This command will take you through the configuration of gcloud.\n`--snip--`\nPick cloud project to use:\n1 [1] Create a new project\nPlease enter numeric choice or text value (must exactly match list\nitem):  **1**\n\nEnter a Project ID. Note that a Project ID CANNOT be changed later.\nProject IDs must be 6-30 characters (lowercase ASCII, digits, or\nhyphens) in length and start with a lowercase letter. **goxkcd**\n`--snip--`\n$ **gcloud projects list**\nPROJECT_ID                      NAME                   PROJECT_NUMBER\ngoxkcd                          goxkcd                 123456789012\n```", "```\npackage gcp\n\nimport (\n    \"encoding/json\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/awoodbeck/gnp/ch14/feed\"\n)\n\nvar (\n    rssFeed feed.RSS\n    feedURL = \"https://xkcd.com/rss.xml\"\n)\n type EventRequest struct {\n    Previous bool `json:\"previous\"`\n}\n\ntype EventResponse struct {\n    Title          string `json:\"title\"`\n    URL            string `json:\"url\"`\n    Published      string `json:\"published\"`\n}\n```", "```\n`--snip--`\nfunc LatestXKCD(w http.ResponseWriter, r *http.Request) {\n    var req EventRequest\n    resp := EventResponse{Title: \"xkcd.com\", URL: \"https://xkcd.com/\"}\n\n    defer 1func() {\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        out, _ := json.Marshal(&resp)\n        _, _ = w.Write(out)\n    }()\n\n    if err := 2json.NewDecoder(r.Body).Decode(&req); err != nil {\n        log.Printf(\"decoding request: %v\", err)\n        return\n    }\n\n    if err := rssFeed.ParseURL(3r.Context(), feedURL); err != nil {\n        log.Printf(\"parsing feed: %v:\", err)\n        return\n    }\n```", "```\n`--snip--`\n    switch items := rssFeed.Items(); {\n    case req.Previous && len(items) > 1:\n        resp.Title = items[1].Title\n        resp.URL = items[1].URL\n        resp.Published = items[1].Published\n    case len(items) > 0:\n        resp.Title = items[0].Title\n        resp.URL = items[0].URL\n        resp.Published = items[0].Published\n    }\n}\n```", "```\n$ **cd gcp**\ngcp$ **go mod init github.com/awoodbeck/gnp/ch14/gcp**\ngo: creating new go.mod: module github.com/awoodbeck/gnp/ch14/gcp\ngcp$ **go mod tidy**\n`--snip--`\ngcp$ **cd -**\n```", "```\n$ **gcloud functions deploy LatestXKCD --source ./gcp/ --runtime go113 \\**\n**--trigger-http --allow-unauthenticated**\nDeploying function (may take a while - up to 2 minutes)... \nFor Cloud Build Stackdriver Logs, visit: \nhttps://console.cloud.google.com/logs/viewer`--snip--`\nDeploying function (may take a while - up to 2 minutes)...done.\navailableMemoryMb: 256\nbuildId: 5d7fee9b-7468-4b04-badc-81015aa62e59\nentryPoint: 1LatestXKCD\nhttpsTrigger:\n  url: 2https://us-central1-goxkcd.cloudfunctions.net/LatestXKCD\ningressSettings: 3ALLOW_ALL\nlabels:\n  deployment-tool: cli-gcloud\nname: projects/goxkcd/locations/us-central1/functions/LatestXKCD\nruntime: 4go113\nserviceAccountEmail: goxkcd@appspot.gserviceaccount.com\nsourceUploadUrl: https://storage.googleapis.com/`--snip--`\nstatus: ACTIVE\ntimeout: 60s\nupdateTime: '2006-01-02T15:04:05.000Z'\nversionId: '1'\n```", "```\n$ **curl -X POST -H \"Content-Type: application/json\" --data '{}' \\**\n**https://us-central1-goxkcd.cloudfunctions.net/LatestXKCD**\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n$ **curl -X POST -H \"Content-Type: application/json\" \\**\n**--data '{\"previous\":true}' \\**\n**https://us-central1-goxkcd.cloudfunctions.net/LatestXKCD**\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n```", "```\n$ **gcloud functions delete LatestXKCD**\n```", "```\n$ **curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash**\n[sudo] password for user:  \nexport DEBIAN_FRONTEND=noninteractive  \napt-get update\n`--snip--`\n$ **az version**\n{\n  \"azure-cli\": \"2.15.0\",\n  \"azure-cli-core\": \"2.15.0\",\n  \"azure-cli-telemetry\": \"1.0.6\",\n  \"extensions\": {}\n}\n```", "```\n$ **az configure**\nWelcome to the Azure CLI! This command will guide you through logging in and \nsetting some default values.\n\nYour settings can be found at /home/user/.azure/config\nYour current configuration is as follows:\n`--snip--`\n$ **az login**\n1 You have logged in. Now let us find all the subscriptions to which you have\naccess...\n[\n  {\n    \"cloudName\": \"AzureCloud\",\n`--snip--`\n  }\n]\n```", "```\n$ **az config set core.collect_telemetry=off**\nCommand group 'config' is experimental and not covered by customer support. Please use with discretion.\n```", "```\n$ **cd azure**\n$ **func init --worker-runtime custom**\nWriting .gitignore\nWriting host.json\nWriting local.settings.json\nWriting /home/user/dev/gnp/ch14/azure/.vscode/extensions.json\n```", "```\n$ **mkdir LatestXKCDFunction**\n```", "```\n{\n  \"bindings\": [\n    {\n      \"type\": 1\"httpTrigger\",\n      \"direction\": 2\"in\",\n      \"name\": \"req\",\n    3 \"methods\": [ \"post\" ]\n    },\n    {\n      \"type\": 4\"http\",\n      \"direction\": 5\"out\",\n      \"name\": \"res\"\n    }\n  ]\n}\n```", "```\n{\n  \"version\": \"2.0\",\n  \"logging\": {\n    \"applicationInsights\": {\n      \"samplingSettings\": {\n        \"isEnabled\": true,\n        \"excludedTypes\": \"Request\"\n      }\n    }\n  },\n  \"extensionBundle\": {\n    \"id\": \"Microsoft.Azure.Functions.ExtensionBundle\",\n    \"version\": \"[1.*, 2.0.0)\"\n  },\n  \"customHandler\": {\n  1 \"enableForwardingHttpRequest\": true,\n    \"description\": {\n      \"defaultExecutablePath\": 2\"xkcd.exe\",\n      \"workingDirectory\": \"\",\n      \"arguments\": []\n    }\n  }\n}\n```", "```\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n\n    \"github.com/awoodbeck/gnp/ch14/gcp\"\n)\n\nfunc main() {\n    port, exists := 1os.LookupEnv(\"FUNCTIONS_CUSTOMHANDLER_PORT\")\n    if !exists {\n        log.Fatal(\"FUNCTIONS_CUSTOMHANDLER_PORT environment variable not set\")\n    }\n srv := &http.Server{\n        Addr:              \":\" + port,\n        Handler:           http.HandlerFunc(2gcp.LatestXKCD),\n        IdleTimeout:       time.Minute,\n        ReadHeaderTimeout: 30 * time.Second,\n    }\n\n    log.Printf(\"Listening on %q ...\\n\", srv.Addr)\n    log.Fatal(srv.ListenAndServe())\n}\n```", "```\n$ **cd azure**\n```", "```\nazure$ **go build -o xkcd.exe xkcd.go**\n```", "```\nazure$ **func start**\nAzure Functions Core Tools (3.0.2931 Commit hash: \nd552c6741a37422684f0efab41d541ebad2b2bd2)\nFunction Runtime Version: 3.0.14492.0\n[2020-10-18T16:07:21.857] Worker process started and initialized.\n[2020-10-18T16:07:21.915] 2020/10/18 12:07:21 Listening on 1\":44687\" ...\n[2020-10-18T16:07:21.915] 2020/10/18 12:07:21 decoding request: EOF\nHosting environment: Production\nContent root path: /home/user/dev/gnp/ch14/azure\nNow listening on: 2http://0.0.0.0:7071\nApplication started. Press Ctrl+C to shut down.\n\nFunctions:\n\n    LatestXKCDFunction: [POST] 3http://localhost:7071/api/LatestXKCDFunction\n\nFor detailed output, run func with –verbose flag.\n```", "```\n$ **curl -X POST -H \"Content-Type: application/json\" --data '{}' \\**\n**http://localhost:7071/api/LatestXKCDFunction**\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n$ **curl -X POST -H \"Content-Type: application/json\" –data \\** \n**'{\"previous\":true}' http://localhost:7071/api/LatestXKCDFunction**\n{\"title\":\"Dialect Quiz\",\"url\":\"https://xkcd.com/2372/\",\n\"published\":\"Wed, 14 Oct 2020 04:00:00 -0000\"}\n```", "```\n$ **az login**\nYou have logged in.\n```", "```\n$ **az group create --name NetworkProgrammingWithGo --location eastus**\n{\n  \"id\": \"/subscriptions/`--snip--`/resourceGroups/NetworkProgrammingWithGo\",\n  \"location\": \"eastus\",\n \"managedBy\": null,\n  \"name\": \"NetworkProgrammingWithGo\",\n  \"properties\": {\n    \"provisioningState\": \"Succeeded\"\n  },\n  \"tags\": null,\n  \"type\": \"Microsoft.Resources/resourceGroups\"\n}\n```", "```\n$ **az storage account create --name npwgstorage --location eastus \\**\n**--resource-group NetworkProgrammingWithGo --sku Standard_LRS**\n - Finished ..\n`--snip--`\n```", "```\n$ **az functionapp create --resource-group NetworkProgrammingWithGo \\**\n**--consumption-plan-location eastus --runtime custom \\**\n**--functions-version 3 --storage-account npwgstorage --name latestxkcd**\nApplication Insights \"latestxkcd\" was created for this Function App. \n`--snip--`\n```", "```\n$ **cd azure**\nazure$ **GOOS=windows go build -o xkcd.exe xkcd.go**\nazure$ **func azure functionapp publish latestxkcd --no-build**\nGetting site publishing info...\nCreating archive for current directory…\nSkipping build event for functions project (--no-build).\nUploading 6.12 MB [##########################################################]\nUpload completed successfully.\nDeployment completed successfully.\nSyncing triggers...\nFunctions in latestxkcd:\n    LatestXKCDFunction - [httpTrigger]\n        Invoke url: 1https://latestxkcd.azurewebsites.net/api/latestxkcdfunction\n```", "```\n$ **curl -X POST -H \"Content-Type: application/json\" --data '{}' \\**\n**https://latestxkcd.azurewebsites.net/api/latestxkcdfunction?**`--snip--`\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n$ **curl -X POST -H \"Content-Type: application/json\" \\**\n**--data '{\"previous\":true}' \\**\n**https://latestxkcd.azurewebsites.net/api/latestxkcdfunction?**`--snip--`\n{\"title\":\"Chemist Eggs\",\"url\":\"https://xkcd.com/2373/\",\n\"published\":\"Fri, 16 Oct 2020 04:00:00 -0000\"}\n```"]