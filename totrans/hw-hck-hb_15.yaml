- en: A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maxing Out Your Credit Card: Setting Up a Test Lab'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This appendix describes the equipment we used for the work covered in this book.
    If you’re setting up a hardware hacking lab, this appendix can also serve as a
    “shopping list” of useful equipment. We explore a range of options—everything
    for those with budgets ranging from millions to tens of dollars. We also provide
    many do-it-yourself options to help with lower-cost setups.
  prefs: []
  type: TYPE_NORMAL
- en: We introduce equipment based on specific outcomes you want to achieve, and we
    discuss this equipment roughly in the order we followed in the book itself. We
    also cover the basic equipment (multimeters and soldering irons) that you’ll spend
    a lot of time working with to prepare targets for more advanced analysis work.
    Our goal in this appendix is to provide a complete overview of what is involved
    in a lab to help with overall budgeting (and so we can more easily update this
    when we release the second edition).
  prefs: []
  type: TYPE_NORMAL
- en: We should make you aware of a clear conflict of interest with some of our recommendations.
    Colin cofounded NewAE Technology, Inc., and Jasper has (at the time of writing)
    been with Riscure for more than a decade; both companies manufacture and sell
    side-channel analysis and fault-injection equipment. Despite this, we’ve tried
    to keep our recommendations as clear as possible on technical reasons. We have
    included approximate pricing in US dollars, which is accurate as of early 2021\.
    Due to supply chain issues, prices will fluctuate, but we also want you to understand
    the difference between $50 and $50,000 budgets. Where well-documented low-cost
    DIY solutions are available, we’ve included them on the lower end of the cost
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: With such a huge selection of tools, where should you start? It’s hard to make
    specific recommendations, as everything depends on your overall goal and budget.
    If you just want to follow along with the examples in this book, you could get
    away with a ChipWhisperer-Nano or ChipWhisperer-Lite. If you want to perform black-box
    testing of a recent cryptographic device, you’ll likely need EM probes and a very
    fast digitizing solution. And unless you want to reimplement many attack algorithms,
    you’ll probably want a more complete software solution, such as the Riscure Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking Connectivity and Voltages: $50 to $500'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although the montage of hardware hacking that will be featured on *CSI: Cyber*
    will include reballing BGAs, carefully modifying circuit boards, and decapping
    chips with acid, most of your time in real life will be spent checking electrical
    connectivity. This testing includes looking for shorts on assembled boards, measuring
    what type of pullups might be on a line, tracing lines on a circuit board, and
    figuring out what pinout a cable you are using has.'
  prefs: []
  type: TYPE_NORMAL
- en: Add on to checking connectivity some other common tasks you can accomplish with
    a multimeter, such as measuring voltages and current draw, and you soon realize
    one of the most valuable tools as a hardware hacker is going to be your trusty
    *(digital) multimeter*.
  prefs: []
  type: TYPE_NORMAL
- en: We specifically mention the electrical connectivity check, as most multimeters
    include a “beeper function” that beeps when a short (or low resistance) is measured.
    The quality of this feature can vary a lot; check out Dave Jones’s *EEVBlog* YouTube
    channel for some great product reviews and comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: On the higher end, Fluke meters are likely the most well-known brand. Our number-one
    recommendation in this line is the Fluke 179/EDA2 kit. This kit in particular
    includes the TP910 test leads, which have a very fine point to easily probe QFN
    packages. The probe tips include both spring-loaded pogo pins (great for keeping
    the tip on a pin) and sharp stainless-steel tips (great for probing past solder
    mask or conformal coating). [Figure A-1](#figureA-1) shows an example of them
    in action. You can buy these probes separately and use them with other brands
    of meters as well, but check the jack specifications, as different meters do have
    slightly different-sized jacks. The TP910 test leads have the disadvantage that
    the thin and flexible cable is likely to be bent on smaller radii and eventually
    develops internal openings, especially near the end where flexing is most pronounced.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa001](image_fi/278748b01/faa001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-1: Fluke TP910 test leads with pogo pin (left) on QFN IC pad and sharp
    probe to pierce solder mask (right)'
  prefs: []
  type: TYPE_NORMAL
- en: On the medium-to-lower end, the field opens up quite a bit. One recommendation
    is to stay away from low-cost Fluke (or other big brand) options, as they often
    seem to be limited in capability to avoid cannibalizing the higher-end options
    they also offer. An easy choice is often the *EEVBlog*-branded meters, which have
    generally been well tested and represent good value. Depending on your country,
    you may find many different options available locally, which makes it hard to
    specify specific models, but checking ratings on your local Amazon site is a good
    place to start.
  prefs: []
  type: TYPE_NORMAL
- en: If you go for a budget meter, it may still be worth splurging on a nicer lead
    set. While the meter electronics of a budget meter may be up to the task, the
    leads often feel cheap or have too large a point to be useful. Finding good leads
    with silicone insulation cable will be money well spent, as the leads are the
    part with which you’ll be spending a lot of hands-on time. Don’t be put off by
    the idea of spending more on the test leads than you did on the meter itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fine-Pitch Soldering: $50 to $1,500'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Soldering is another task you’ll find yourself doing frequently. We’re calling
    this *fine-pitch soldering* because beyond standard through-hole work, you’ll
    also be tacking wires onto test points and doing other tasks that require a soldering
    iron with a fine point. You’ll want a variety of options and not just the stock
    fine-point tip, as you’ll find the fine-point tip gets ruined fairly quickly.
    Soldering tips are generally made up of some internal copper slug that has rapid
    heat transfer and a thin layer of a metal that won’t react with the solder or
    oxidize (see [Figure A-2](#figureA-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa002](image_fi/278748b01/faa002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-2: Soldering tip construction involves a copper core with a more robust
    plating, which is selected to survive interacting with the solder in use.'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as the plating has a hole in it, the tip is generally trashed because
    it no longer offers good thermal connectivity. A smaller (finer) tip will typically
    develop holes quickly, especially if used to solder larger items that might cause
    you to push or rub the tip.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular soldering options is the Hakko FX-951, which features
    a number of very fine tips that are great for working with small surface-mount
    parts and tacking wire onto tiny parts. The unit itself is around $400, and the
    tip cartridges are relatively inexpensive (starting at $10). The tip cartridges
    have the heater and thermocouple integrated into them, meaning you get heat fairly
    close to the tip itself.
  prefs: []
  type: TYPE_NORMAL
- en: Another higher-end soldering tool that we love is the Metcal system, which uses
    something called “SmartHeat” (see [Figure A-3](#figureA-3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa003](image_fi/278748b01/faa003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-3: Metcal uses a heater that’s almost integrated with the tip (SmartHeat)
    to regulate tip temperature. In this system, the tip temperature is fixed, but
    it responds much faster than a tip with a separate thermometer.'
  prefs: []
  type: TYPE_NORMAL
- en: The heater is actually a special material with a Curie point (the temperature
    at which it changes its magnetic properties) selected to be the desired tip temperature.
    It’s integrated into the tip itself and driven with a high-power RF signal source,
    so the tip can go from soldering a small surface-mount resistor to desoldering
    a huge connector and respond almost instantly.
  prefs: []
  type: TYPE_NORMAL
- en: A common starting point is a Metcal MX-5210 base station ($800), which then
    requires you to select appropriate tips (it doesn’t even come with tips). For
    tips, part numbers STTC-125 and STTC-145 are good choices (around $30), and both
    work with lead-free solder. The base station and tips are all expensive, and the
    tips are more fragile than classic heater-based solutions.
  prefs: []
  type: TYPE_NORMAL
- en: If you want the same sort of results at a lower cost, Thermaltronics offers
    lower-cost solutions using this same technology. The Thermaltronics TMT-9000S
    ($400) actually uses the same tip connection as the Metcal system, and thus it’s
    also a source of lower-cost tips for the Metcal base station.
  prefs: []
  type: TYPE_NORMAL
- en: JBC also has started offering good-value stations. In particular, the CDB and
    CDS lines are lower cost than Metcal stations, but with excellent performance.
    Depending on your country, you may find certain brands easier to source than others,
    and often the import or shipping costs may substantially shift the value of one
    station compared to another.
  prefs: []
  type: TYPE_NORMAL
- en: The Hakko FX-951, Metcal, Thermaltronics, and JBC are all still fairly high-end
    stations. You can get away with a much cheaper iron as well, but at the lower
    end, your specific market tends to determine the best value. One good option is
    the TS100 soldering iron (see [Figure A-4](#figureA-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa004](image_fi/278748b01/faa004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-4: The TS100 is a low-cost iron that performs well relative to higher-priced
    irons.'
  prefs: []
  type: TYPE_NORMAL
- en: This soldering iron is unique because it runs on a DC input, which means it’s
    small and portable. You can easily run it off a car battery or AC-DC power adapter
    (such as your laptop power adapter). In practice, it works very well and has fast
    thermal recovery, but be sure to use a sufficiently strong power supply, ideally
    in the 19 to 24 V range, to provide the most power to the iron. The TS100 is available
    in kits with various-sized tips, or you can get the TS100 with a provided tip
    for less than the cost of some of the more expensive Metcal replacement tips (we
    told you the Metcal stuff was expensive).
  prefs: []
  type: TYPE_NORMAL
- en: 'Desoldering Through-Hole: $30 to $500'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With any luck, you won’t ever need to remove a through-hole connector or similar
    from a printed circuit board (PCB). But sometimes it’s necessary, and it’s tricky
    to do when even a small amount of solder is left. Some of the basic tools, such
    as *solder* *wick* and a *solder sucker*, become difficult to use with more intense
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, having something like a *solder removal “gun”* can be worthwhile. These
    have an active vacuum alongside a heater element, to heat up the solder at the
    same time as removing it from the component lead. [Figure A-5](#figureA-5) shows
    one stand-alone example, the Hakko FR-300, but you can find them as add-ons to
    various soldering workstations as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa005](image_fi/278748b01/faa005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-5: Hakko FR-301 is a popular through-hole removal tool, and the direct
    replacement for the FR-300 shown here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter what you use to remove the solder from a board, adding a lower melting
    point solder onto the board first can help. If you are desoldering a lead-free
    process, for example, the solder will remain molten only for a short period of
    time before it cools too much. If you first add some leaded solder to the connection,
    it will remain molten for longer (warning: this means the board is no longer ROHS-compliant
    if you are trying to return it to service). You can extend this further by using
    products like the Chip Quik removal alloy SMD1NL (lead-free) or SMD1L (leaded),
    which are specifically designed to be added into a solder joint and result in
    a much lower melting temperature. Once the joint is cleaned up, it could be soldered
    again with “regular” solder to behave as normal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Soldering and Desoldering Surface Mount Devices: $100 to $500'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Surface-mount soldering has a wide range of requirements. We’ll focus on the
    most common tasks required for hardware hacking rather than all possible surface-mount
    jobs.
  prefs: []
  type: TYPE_NORMAL
- en: The single most important element for surface-mount soldering is the *hot air
    gun*. This device provides a flow of hot air that helps solder joints underneath
    parts. You can find various popular hot air tools at all sorts of ranges. As of
    this writing, a popular mid-range option is the Quick 861DW ([Figure A-6](#figureA-6)),
    which provides a reliable source of hot air with a good range of settings. Along
    with the hot air, you might need *nozzles*. Don’t worry about getting nozzles
    to fit every package you need, as you can move the smaller nozzles around the
    package surface for larger packages.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa006](image_fi/278748b01/faa006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-6: The Quick 861DW is a good mid-range hot air gun.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure about settings for the hot air gun, a good starting point
    is to adjust the temperature and flow rate such that a piece of paper becomes
    light brown from the heat as you move the gun around on the paper. You don’t want
    too fast a flow rate or you’ll blow parts around too. Before you start using one
    on important boards, get an old laptop or computer motherboard and see how many
    parts you can easily remove. If you get really good, start putting them back together.
  prefs: []
  type: TYPE_NORMAL
- en: If you plan on working with larger packages (such as BGAs), a *board pre-heater*
    can be useful. This tool makes hot air go onto the other side of the board, which
    means the hot air gun is used only to “peak” the temperature to the final value
    that will melt the solder.
  prefs: []
  type: TYPE_NORMAL
- en: Many YouTube channels show this rework technique in more detail. Louis Rossmann’s
    channel shows repairs on laptops (especially MacBooks) and cell phones. These
    consumer devices often have extremely fine-pitch parts, and you can get a feel
    for what is possible with enough experience.
  prefs: []
  type: TYPE_NORMAL
- en: If you have limited surface-mount requirements, you might also consider the
    Chip Quik *removal* *alloy* SMD1L or SMD1NL mentioned earlier. This solder alloy
    has a very low melting point. It can be used with a regular soldering iron, and
    it stays molten long enough that you can bring your iron around an entire SMD
    chip—even some large packages like a TQFP-144! It works only with visible pads,
    of course, but it doesn’t require any additional tools beyond what you might already
    have, and the alloy itself is cheap (less than $20). Even with hot air equipment,
    it can be useful in situations where you have more heat-sensitive parts nearby
    that are difficult to mask off.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also likely run into *ball grid array (BGA)* packages that have solder
    balls on the bottom side, which may require you to “reball” them after removal.
    You can get fancy reballing jigs, but if you are working with them only occasionally,
    you might instead get away with a low-cost BGA stencil set. Since it can be hard
    to find useful instructions for the low-cost tools, we’ll re-create a technique
    that works for us in this book. We’ll use a cheap pack of stencils costing only
    about $20 (see [Figure A-7](#figureA-7)). We can smear solder paste onto the stencil,
    which will form nice balls when reheated. If you haven’t used solder paste before,
    it takes a bit of time to get the technique “just right.” Most of it has a limited
    shelf life and should be stored in a fridge. For this reason, we’ll give a quick
    rundown of a more reliable technique with those stencils.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa007](image_fi/278748b01/faa007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-7: Example of a cheap set of stencils for BGA reballing'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this type of cheap stencil, the most reliable reballing process is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the old solder balls and solder with solder wick.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean the area well with isopropyl alcohol (IPA) and/or flux remover.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tape the deballed chip to the bottom of the stencil.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Smear paste-type flux (such as MG Chemicals 8341-10ML) onto the stencil (with
    the chip underneath it) with a squeegee such as credit card edge. Be careful not
    to cause any misalignment of the stencil.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using appropriately sized solder spheres, carefully push balls into each stencil
    hole. Ensure no spare balls are left on surface of the stencil. [Figure A-8](#figureA-8)
    shows the start of this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heat the chip until balls reflow onto chip surface (see [Figure A-9](#figureA-9)),
    which will require the solder spheres to match the correct size for your device
    (marked on the stencil in this example). You may be able to find kits with multiple
    solder ball (sphere) sizes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![faa008](image_fi/278748b01/faa008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-8: Fluxed IC taped onto stencil. Note BGA does not exactly match stencil,
    leaving some dark-looking holes with missing pads.'
  prefs: []
  type: TYPE_NORMAL
- en: Since many of these kits come from unknown sources (if you’re purchasing on
    Amazon), you may wish to use a more reputable source. Chip Quik makes several
    solder sphere kits; for example, if you’re using 0.4mm solder spheres, Chip Quik
    part number SMD2032-25000 is available from Digi-Key and provides 25,000 0.4mm
    solder spheres for less than $30.
  prefs: []
  type: TYPE_NORMAL
- en: As a final note on BGAs, investigate the availability of low-cost jigs and stencils
    for your part of interest. You can find several low-cost *BGA* *reballing jigs*
    for the more popular parts, and they simplify the task of holding the BGA and
    stencil together correctly aligned.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa009](image_fi/278748b01/faa009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-9: Using hot air to melt solder balls to complete the task. The missing
    pads from [Figure A-8](#figureA-8) shouldn’t have balls in them—the extra balls,
    which cannot adhere to a pad, are at risk of coming out of the stencil holes and
    causing shorts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modifying PCBs: $5 to $700'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modifying PCBs, which includes cutting traces to insert resistors for shunts,
    rerouting traces, or tapping onto data lines, is another common task. While you
    can get away with a simple X-Acto knife for a lot of this work, a rotary tool
    may be useful.
  prefs: []
  type: TYPE_NORMAL
- en: The *rotary tool**s* you can purchase at the hardware store will typically have
    accessories that are too physically large to be useful on PCBs. Instead, look
    for one like the Foredom K.1070 High Speed Rotary Micromotor Kit (see [Figure
    A-10](#figureA-10)). This device can run up to 38,000 RPM, and you’ll realize
    the difference when holding it in your hand. This is due to the high-quality bearings
    that blow away the normal name-brand rotary tools you can buy from your local
    hardware store.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re purchasing this specific tool, be sure to get with the 3/32-inch collet
    option. You can then get some tiny rotary tips for it, such as the Foredom AK211
    kit, which make it possible to drill up a single BGA ball from the rear side of
    a device or even to attach to a ball on a BGA that isn’t routed to the PCB.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also find a light *grinding tip* such as the Foredom A-71 useful. This
    tip makes it easy to remove the solder mask from the PCB without damaging the
    underlying trace, which is perfect when you are trying to tap into a number of
    traces, such as a data bus.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa010](image_fi/278748b01/faa010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-10: Foredom High Speed Rotary Micromotor Kit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optical Microscopes: $200 to $2,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In line with requirements for modifying the PCB, you’ll likely need to observe
    such modifications. The normal standard for doing so is a *stereo vision microscope*
    (see [Figure A-11](#figureA-11)). These microscopes provide a stereo view that
    retains your depth perception, making it easier to see when your soldering iron
    or rotary tool is touching the PCB.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa011](image_fi/278748b01/faa011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-11: A low-cost AmScope single-boom optical microscope, with a total
    magnification of 10× or 20× (switchable)'
  prefs: []
  type: TYPE_NORMAL
- en: You may be able to find a surplus one locally, but if you are purchasing new,
    a low-cost option is the AmScope brand typically available on Amazon. When evaluating
    different options, consider that a double-arm boom makes it less likely the head
    will rotate on its own, which is a problem with some low-cost single-arm boom
    microscopes.
  prefs: []
  type: TYPE_NORMAL
- en: The *total magnification* is a combination of the eyepiece magnification and
    the objective magnification. For circuit board soldering, a total magnification
    of 10× to 30× is useful, which could mean an objective magnification of 1× and
    eyepiece of 20×, for example. With some microscopes, you may find that you need
    to add a *Barlow lens* onto the objective stage. The Barlow lens provides a reduction
    in magnification (typical is 0.5×), but it increases the microscope’s focal range,
    so you have more space underneath the microscope to fit your circuit board and
    the tools you’re using on your board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Photographing Boards: $50 to $2,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re documenting your work, you’ll also want to take photographs of board-level
    items, which requires using a microscope with some form of video camera. On the
    cheaper end are a variety of low-cost USB or Wi-Fi microscopes available on Amazon
    and similar. They provide great value for $20 to $40 ([Figure A-12](#figureA-12)
    shows an example).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa012](image_fi/278748b01/faa012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-12: A low-cost USB microscope'
  prefs: []
  type: TYPE_NORMAL
- en: If you are trying to use these USB microscopes for real-time soldering (as a
    replacement for the visual microscope), be aware they sometimes have lag due to
    the USB connection that can make real-time use difficult.
  prefs: []
  type: TYPE_NORMAL
- en: If you purchase a *trinocular microscope* (instead of just a stereo microscope),
    you can add a camera to photograph exactly what you are seeing, and you can also
    broadcast the camera image to a screen for using in training or educational environments.
    You can find reasonable-cost trinocular microscopes for $500 to $1,000 from the
    low-cost AmScope manufacturer mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find *monocular digital microscopes* that have only the camera
    portion, typically with HDMI and USB outputs. The lag through the HDMI/VGA outputs
    is usually much less than through USB, meaning that with an external monitor,
    they also can provide a good method of photographing or inspecting boards without
    eyestrain of looking through a microscope eyepiece. If you are planning on using
    the camera output for real-time feedback (such as soldering or probing), finding
    an HDMI or VGA output camera will save you the potential grief of discovering
    that the USB lag makes you feel slightly crazy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Powering Targets: $10 to $1,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another frequent task will be powering targets, which is most easily done with
    a *bench-top power supply*. These allow you to configure voltage and (maximum)
    current to be supplied. A variety of them are available from normal test equipment
    suppliers, but a good value option is the DP832 from Rigol Technologies.
  prefs: []
  type: TYPE_NORMAL
- en: A more complicated (in a good way) target power option is the EEZ Bench Box
    3, which is open source hardware and allows for a variety of computer control
    options.
  prefs: []
  type: TYPE_NORMAL
- en: On the lower end, many additional choices are available for a bench-top supply.
    Your local store may stock a lower-cost bench-top supply. It’s hard to recommend
    a specific model, as the heavy transformer in many of the power supplies combined
    with different local-market certification requirements means a variety of vendors
    and solutions are available worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Targets that require only a simple power supply may allow you to use AC-DC
    “wall wart” power bricks, which can be found for free with discarded electronics.
    They can also be combined with low-cost no-name adjustable regulators that you
    can find on Amazon (or similar) to provide an adjustable power supply at very
    little cost. These inexpensive options come at a price: they have a relatively
    high noise output, which can negatively affect any side-channel analysis you want
    to perform later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing Analog Waveforms (Oscilloscopes): $300 to $25,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While *oscilloscopes* have several uses, normally you need to view analog waveforms
    as part of many tasks, such as seeing what I/O patterns are present between two
    devices, checking voltage levels, watching reset pin activity, or anything else.
    We also use them as part of our side-channel power analysis measurement, but we
    cover that use case separately from the more general investigation use case.
  prefs: []
  type: TYPE_NORMAL
- en: Many options exist for general investigation. The most popular lower-cost oscilloscope
    brand is the Rigol, specifically the Rigol DS1054Z. Rigol oscilloscopes still
    have good-quality probes and reasonable performance, so despite being lower in
    cost, they don’t feel cheap like you might expect. More recently, Rigol also offers
    higher-performance devices that are still a much better value than the more well-known
    brands.
  prefs: []
  type: TYPE_NORMAL
- en: The more common brands, such as Keysight (previously Agilent & HP), Tektronix,
    and Teledyne LeCroy, offer a fairly wide variety of oscilloscopes as well. The
    companies often run promotions that bundle together various accessories, so even
    if you are on a budget, don’t discount the name-brand oscilloscopes. Watch for
    models that have only the name part of “name brand”—that is, those that are very
    low-cost “versions” but still have the name of the brand. These low-end devices
    are often rebranded versions of other manufactures scopes, which means they were
    not designed in-house and not actually using any of the long experience that goes
    into the high-end models. Also, because vendors don’t want to cannibalize the
    higher-end scope market, they often are limited in important ways that will make
    them less useful for “real” work (but fine for running labs in a university, for
    example). We’ll show you an example of that with the Keysight EDUX1002A scope
    in the next section, “Memory Depth,” where the EDUX1002A is limited in memory
    depth so is not very useful for power analysis work.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a larger budget, finding a name-brand device may make future expansion
    easier as you can tap into a large number of probes and accessories. While there
    is some cross-platform compatibility, many of the probes and accessories tend
    to work best with the original manufactured brand. Thus, you may wish to purchase
    a specific oscilloscope or brand due to planned future usage requiring a probe
    that Rigol (or similar) doesn’t offer. If you have the chance, it’s also worth
    test-driving a few different devices (often you can do this at a trade show).
    The interface does vary for different devices, so you might find you have a personal
    preference. Some companies even will let you rent high-end oscilloscopes by the
    day/week/month. If you’re outfitting a lab, spending some rental time ensuring
    that the scope will work in practice could save you from an expensive mistake.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final note on oscilloscope usage: another option is to use a computer-based
    scope, of which PicoScope is the most popular. We highly recommend these devices
    because you can get a lot of equipment in a small package. It’s also easy to script
    these devices, as an API is available in various languages. Some people prefer
    having physical knobs to twiddle, however, so using PC-based oscilloscopes is
    somewhat of a personal preference.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes time to choosing an oscilloscope for general usage, the important
    considerations are the *sample rate* (typically in MS/s or GS/s), *analog bandwidth*,
    and *memory depth*. We’ll briefly cover what to look for with an eye on general
    usage (again, we’ll cover side-channel measurements in another section).
  prefs: []
  type: TYPE_NORMAL
- en: Memory Depth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A large memory depth allows you to capture long waveforms of, for example, a
    device’s entire boot process. Lower-end oscilloscopes and low-cost name-brand
    scopes often have limited memory depths, even though the bandwidth and sample
    rate look good. For example, Keysight’s 1000-X series is designed to compete with
    the Rigol offerings. The DSOX1102A (at approximately $700) offers a memory depth
    of only 1 Mpts (Mega-Points, or million sample points). Its education version,
    the EDUX1002A (at approximately $500), offers a memory depth of an even smaller
    100 kpts. By comparison, the Rigol DS1054Z offers a memory depth of 24 Mpts. But
    what does that mean in practice?
  prefs: []
  type: TYPE_NORMAL
- en: Assume you were sampling at 1 GS/s, meaning 1,000,000,000 samples are written
    to memory per second. While the EDUX1002A would store only 0.1ms of the waveform
    after the trigger (calculated by 100,000 sample memory/1,000,000,000 samples/s
    = 0.0001 second). The Rigol at the same sample rate would provide 24ms of recorded
    trace. If you need a longer trace, you could reduce the sample rate. If we could
    get away with a 100 MS/s recording rate, the Rigol would store 240ms of data,
    while the EDUX1002A would still store only 1ms of waveform. The Tektronix low-cost
    model (TBS1000) is even worse with a memory depth of a mere 2.5 kpts! Stepping
    up a little bit toward a mid-range Tektronix like the MDO3000 series gives a more
    reasonable 10 Mpts, so be aware when comparing the devices.
  prefs: []
  type: TYPE_NORMAL
- en: One area where PC-based oscilloscopes shine is the memory depth. The low-end
    PicoScope 2204A series starts out at only 8 kpts, but stepping up a little bit
    to the 2206B (approximately $350) gives us 32 Mpts—that’s a larger buffer than
    some of the $10k or $20k scopes from the big brands.
  prefs: []
  type: TYPE_NORMAL
- en: For general exploration, the memory depth matters, as we often don’t know what
    we are looking for right away. When it comes time for an actual attack, we rarely
    need such a large memory depth, since we are measuring a very specific moment
    in time. But if we need to record information about an entire boot process, we
    may have no idea which part of the 100ms boot actually matters. While we can trade
    off sample rate with memory depth to record more time, we would set a 1 Mpts buffer
    as the minimum we recommend. Buying a scope with too small a buffer is going to
    frustrate you when trying to observe more complex sequences of actions, and it
    will make some of the tasks we describe in this book difficult as well.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Rate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sample rate* is the speed at which the internal analog-to-digital converter
    (ADC) is running. You’ll typically see something like 1 GS/s or 100 MS/s, which
    means 1 billion conversions and 100 million conversions per second, respectively.
    For general exploration, a good rule of thumb is to have a sample rate of 5× to
    10× faster than the digital signal you want to observe. If you are planning on
    probing SPI traffic at 50 MHz, this suggests you would need a 500 to 1,000 MS/s
    oscilloscope. This 5× to 10× rate means you can actually get a “feel” for the
    shape of the waveform, which is useful to see the actual speeds at which it’s
    changing, if there are any glitches in the waveform.'
  prefs: []
  type: TYPE_NORMAL
- en: If you sampled too slow, you’ll actually get an incorrect waveform due to an
    effect called *aliasing*. You can find theoretical diagrams of that, but what
    does it look like in real life? We generated a 60 MHz waveform and fed it into
    a scope, with the resulting scope screen shown in [Figure A-13](#figureA-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa013](image_fi/278748b01/faa013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-13: A 60 MHz square wave from a signal generator, sampled at 2500
    MS/s'
  prefs: []
  type: TYPE_NORMAL
- en: We then changed the scope sampling rate to 100 MS/s (see [Figure A-14](#figureA-14)).
    You’ll notice the frequency captured by the scope is not 60 MHz at all; you can
    see at the bottom of the figure that the scope recognizes a 33.59 MHz signal.
    If you didn’t know this was actually a 60 MHz signal, nothing would be obviously
    wrong! An oscilloscope normally will have an anti-aliasing filter to kill any
    frequencies above the scope’s maximum sample rate, but if you choose to sample
    too slowly (as we did here), you can still get into trouble.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure A-15](#figureA-15) shows what happens if the sampling frequency goes
    down to 5 MS/s. Now the measured signal is reported at 19.88 Hz!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Though in principle 60 MHz is an integer multiple of 5 MHz, we would expect
    aliasing to show a 0 MHz signal: a flat line. However, in practice, both the signal
    generator and the oscilloscope frequency will oscillate slightly from the base
    frequency, which shows up as a (low) frequency due to aliasing.'
  prefs: []
  type: TYPE_NORMAL
- en: '![faa014](image_fi/278748b01/faa014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-14: A 60 MHz square wave from a signal generator, sampled at 100 MS/s;
    due to aliasing, the measured frequency is incorrect'
  prefs: []
  type: TYPE_NORMAL
- en: '![faa015](image_fi/278748b01/faa015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-15: A 60 MHz square wave from a signal generator sampled at 5.00 MS/s;
    the measured frequency is the “beat frequency” between the signal generator clock
    and scope time base, which is an aliasing problem'
  prefs: []
  type: TYPE_NORMAL
- en: Bandwidth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Related to sample rate is the *analog bandwidth*. The oscilloscope’s front end
    will have a filter to prevent too high a frequency from coming through to the
    sample circuit, and the bandwidth represents where that frequency starts to “roll
    off.” Some amount of higher frequency still does get through, as the filter is
    not perfect. The accepted method to characterize a filter is called the “3 dB”
    point, which translates to an *attenuation* of the filtered signal to 70.7 percent
    of the actual amplitude.
  prefs: []
  type: TYPE_NORMAL
- en: When a scope has a 100 MHz bandwidth, this means that if you put a 10 MHz 1
    V sine wave into the oscilloscope, you’d see a 10 MHz sine wave with an amplitude
    of 1 V (as expected). But if you put a 100 MHz sine wave into the oscilloscope,
    you’d see only a 0.707 V amplitude signal. As you increase the frequency of the
    sine wave, the amplitude of the sine wave is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: If you are talking digital sampling, things look slightly different. A digital
    square wave actually has “infinite” frequencies present. In practice you don’t
    need such infinite bandwidth, but a 2.5× to 5× higher bandwidth than the digital
    wave will keep edges reasonably crisp. As an example, [Figure A-16](#figureA-16)
    shows an 18 MHz square wave being sampled at 2.5 GS/s with a 250 MHz analog bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa016](image_fi/278748b01/faa016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-16: An 18 MHz square wave comes through as clean with a 250 MHz bandwidth.'
  prefs: []
  type: TYPE_NORMAL
- en: Compare [Figure A-16](#figureA-16) with the same square wave with 20 MHz analog
    bandwidth in [Figure A-17](#figureA-17) (the oscilloscope we’re using has the
    ability to switch the bandwidth).
  prefs: []
  type: TYPE_NORMAL
- en: Many scopes now have the bandwidth (and sometimes the sample rate) as an “in-field
    upgradable” solution, which means the oscilloscope hardware has a higher bandwidth
    present, but you need to pay to unlock that feature. The probes themselves may
    be matched to the model, so if you order the 100 MHz bandwidth scope, it ships
    only with probes that have a 100 MHz bandwidth as well. On many models you can
    find information about how that upgrade process works online, and you might find
    it works with your budget to purchase a lower-end scope that allows you to unlock
    higher sample rates and bandwidths later.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa017](image_fi/278748b01/faa017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-17: An 18 MHz square wave comes through as a sine wave with 20 MHz
    bandwidth since no higher frequency components are present.'
  prefs: []
  type: TYPE_NORMAL
- en: Other Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book isn’t an “introduction to electronics” book, so we won’t dwell too
    much on other features. One thing you’ll often see is an ability to *decode* certain
    signals such as RS232 and I2C. It can be a useful feature, but in practice it’s
    often easier to use a logic analyzer for this (discussed next).
  prefs: []
  type: TYPE_NORMAL
- en: The one feature that *is* useful is when that decoding can also generate a trigger
    signal—that is, you can trigger the analog oscilloscope measurement on a digital
    I/O data byte. Many oscilloscopes that support decoding also support this real-time
    trigger functionality. You can also often send this trigger to a “Trigger Out”
    connector, which can trigger fault injection equipment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing Logic Waveforms: $300 to $8,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compared to viewing analog waveforms, viewing digital waveforms normally means
    just being able to see zeros and ones on a data bus. A typical data capture looks
    something like [Figure A-18](#figureA-18), which is an example of monitoring an
    SPI data transaction along with a serial interface.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few main vendors of *logic analyzer* tools, but we’ll mostly concentrate
    on PC-based instruments because when using the logic analyzers, you are more often
    setting up digital decoding features and exporting data. It’s much easier to perform
    that on a PC, so logic analyzers generally lend themselves very well to being
    based on a PC platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa018](image_fi/278748b01/faa018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-18: Example of a logic analyzer capture'
  prefs: []
  type: TYPE_NORMAL
- en: For PC-based platforms, the most well-known vendor is Saleae. That company’s
    products have been so successful that earlier versions remain widely counterfeited
    and available on various markets, sold as ultra-cheap (less than $10) logic analyzers.
    The most recent versions of Saleae analyzers feature both analog and digital measurements
    possible on each pin, which allows you to view what’s happening in “real life”
    (the analog domain), while also trying to translate to simple ones and zeros.
    That is also useful during an investigation, as sometimes you aren’t sure of the
    actual logic level in use (is it 1.8 V, 3.3 V, and so on?). The Saleae software
    makes it easy to decode various protocols and observe what is happening across
    the entire system. The software supports almost any protocol you are likely to
    run across, making it an easy recommendation as a critical part of your toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: The Saleae Logic hardware works by streaming data back to your computer, which
    means there is no real limit on capture length. You can capture hours of data
    if your computer can keep up. Because digital data can be easily compressed (you
    don’t need to store constant states), the digital files are much more reasonable
    compared to analog measurement sampling.
  prefs: []
  type: TYPE_NORMAL
- en: The only downside of the Saleae Logic is the number of pins. The largest model
    with 16 inputs may not be enough. And while the Saleae Logic Pro 16 has 16 inputs,
    it can keep up the 500 MS/s sample rate only across six channels; enabling all
    16 channels drops the digital sample rate to 125 MS/s. If you plan on sniffing
    a large bus, the Saleae may not be the best choice.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more signals, the Intronix LA1034 LogicPort is a relatively old
    instrument that remains highly competitive. It has 34 channels of inputs and samples
    at 500 MS/s across all 34 channels, giving it one of the best value propositions
    available on the market.
  prefs: []
  type: TYPE_NORMAL
- en: We haven’t covered several vendors of other tools, but instead want to provide
    a few tips. If you want to go with a high-end tool, NCI Logic Analyzers makes
    the GoLogicXL series, which offers 4 GS/s across 36 or 72 channels. The GoLogicXL
    also offers hardware triggering, something we’ll cover next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggering on Serial Buses: $300 to $8,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Saleae logic analyzer works by downloading “raw” bits to the computer. The
    logic analyzer doesn’t understand whether it’s I2C, UART, or SPI traffic, which
    is fine for analysis, but what if you need to trigger on specific bytes?
  prefs: []
  type: TYPE_NORMAL
- en: '*Triggering* on specific data is a common task. Many logic analyzers that advertise
    “hardware trigger” support triggering only on certain digital patterns presented
    to the logic analyzer inputs. For example, an 8-input logic analyzer can be configured
    to trigger on the pattern “10010111” or maybe even on a sequence of such patterns.
    It’s generally designed to support triggering on a memory access on a parallel
    bus, for example. But if we are trying to trigger on a serial protocol, this simple
    pattern-based trigger won’t be remotely flexible enough for us.'
  prefs: []
  type: TYPE_NORMAL
- en: In that case, we’ll need a smarter logic analyzer, since the hardware capture
    device must understand enough about the protocol to actually trigger on specific
    data bytes. That is, the logic analyzer itself needs to decode the serial data
    in real time to create a trigger signal.
  prefs: []
  type: TYPE_NORMAL
- en: Many logic analyzers don’t support this feature, as they rely on the flexibility
    of a computer to perform the protocol analysis. Some oscilloscopes with serial
    bus decoding do support triggering on decoded serial data, but it’s important
    to check that the feature can be used to generate a trigger on a specific data
    sequence before investing in any given oscilloscope.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the professional (expensive) logic analyzers will support such features.
    For example, the NCI GoLogicXL does support this feature, allowing you to match
    specific packets from various protocols, including SPI, CAN, I2C, and so on. This
    trigger output can then be routed to other devices—normally it’s shown triggering
    an oscilloscope, but we can use it for fault injection or other tasks as we please.
  prefs: []
  type: TYPE_NORMAL
- en: On the lower-cost side, you’ll find some oscilloscopes offer a “trigger on serial
    data” feature, which may be a paid upgrade or available as part of various options
    you can enable on the oscilloscope in the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Decoding Serial Protocols: $50 to $8,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For UART serial I/O, you often need only a PC and serial cable. You can buy
    *USB-to-serial cables* that don’t include any level converters and directly interface
    to the TTL UART pins found in many embedded systems. Examples include cables based
    on the FTDI FT232R chip. You can use *GNU Screen* on Linux or *PuTTY* on Windows,
    or any number of other software applications to interface with the interconnection
    as if it were a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: While the previous logic analysis section assumed you wanted to capture “raw”
    logic levels, that might not be needed. You might care only about the SPI data
    going across a bus, for example, which is an easier task to accomplish. This means
    you can use a device that implements the protocol you wish to sniff, and it will
    present only the “higher-level” data rather than specific bus transitions.
  prefs: []
  type: TYPE_NORMAL
- en: One frequent method is actually to implement the protocol yourself on a microcontroller
    and then forward that data to a computer over a serial interface. Arduinos often
    are used for this exact task. One advantage is that you can also build trigger
    logic; rather than purchasing an expensive logic analyzer, you may be able to
    build the trigger logic off a low-cost Arduino or similar.
  prefs: []
  type: TYPE_NORMAL
- en: An open source tool designed to make this easier is the *GreatFET* by Great
    Scott Gadgets (see [Figure A-19](#figureA-19)). This tool has a microcontroller
    that exposes many of the usual interfaces you might need, such as SPI, I2C, and
    UART. In addition, it can run as a simple logic analyzer to capture the actual
    line-level transitions.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa019](image_fi/278748b01/faa019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-19: A GreatFET One interface device, available from Great Scott Gadgets
    (image source: Great Scott Gadgets)'
  prefs: []
  type: TYPE_NORMAL
- en: Whereas GreatFET relies on the microcontroller for the majority of decoding
    work, another open source tool called the *Glasgow Interface Explorer* ([https://github.com/GlasgowEmbedded/](https://github.com/GlasgowEmbedded/))
    has a small FPGA that is reconfigured to allow even more complex decoding actions.
    At the time of writing, Glasgow was just being released, but in theory, it allows
    almost perfectly timed trigger generation, so it could replace an expensive logic
    analyzer for the task of triggering based on protocol-level data. We wouldn’t
    normally mention tools without having used them, but this one has a unique feature
    set that will be an important addition to your toolset and is well worth exploring.
  prefs: []
  type: TYPE_NORMAL
- en: Commercial tools offer protocol sniffers as well. Total Phase offers a simple
    I2C/SPI sniffer called the Beagle I2C/SPI sniffer. It comes with a GUI that simplifies
    monitoring of large I2C or SPI transactions, which can be useful when reverse-engineering
    a complex bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'CAN Bus Sniffing and Triggering: $50 to $5,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Controller Area Network (CAN)* bus is used in a lot of automotive applications,
    and a number of low-cost and professional-grade solutions are available. Several
    tools can speak CAN, like the CANtact and CANbadger as well as Riscure’s Huracan.
    The latter was designed to be able to trigger external fault injection based on
    specific CAN traffic. Like many serial protocols, you might find basic triggering
    support available in a hardware logic analyzer or oscilloscope serial triggering
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Linux also has CAN support. Via SocketCAN, you can use your favorite packet
    sniffer in Linux to look at CAN. But if you’d like more on CAN, check out Craig
    Smith’s *Car Hackers Handbook* (2016), published by No Starch Press and the OpenGarages
    website, for more CAN-related tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ethernet Sniffing: $50'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may consider *Ethernet sniffing* “not a hardware topic,” but it’s definitely
    relevant for embedded system analysis: that box may just be revealing all kinds
    of interesting information about itself over the wire.'
  prefs: []
  type: TYPE_NORMAL
- en: Ethernet is probably the easiest high-speed interface to interact with, and
    no hardware hack is generally needed. Many small embedded devices have Ethernet
    ports, such as the Arduino controller with its Ethernet Shield, the Raspberry
    Pi, and many other sub-$10 devices. It’s just a matter of installing the right
    software, such as WireShark for sniffing, and then plugging in the Ethernet cable.
    If you’re trying to passively monitor Ethernet, it helps to use the *Throwing
    Star LAN Tap* from Great Scott Gadgets or an old-school network hub instead of
    a switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interacting Through JTAG: $20 to $10,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JTAG can be nice for debugging and inspecting a device. As we discussed in
    Chapter 2, JTAG has two main uses: *boundary scan* and *debugging*. The tools
    for each use case vary slightly. Some tools can be used for both, but the software
    is normally different.'
  prefs: []
  type: TYPE_NORMAL
- en: General JTAG and Boundary Scan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using JTAG requires you to “find” the JTAG port on a board. You may luck out
    if the target uses a standard pinout, but if not, the *JTAGulator* by Joe Grand
    can auto-detect JTAG pinouts. The JTAGulator is self-contained (it doesn’t rely
    on host computer software), so it tends to be very reliable and can also perform
    various boundary scan and debug tasks. It’s a slightly more niche tool than the
    general-purpose JTAG interface hardware, but the feature set is well designed
    for the more black-box work you end up doing when it comes to hardware hacking.
    It also supports various low-level boundary scan options, and even can work as
    a debug interface in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: For pure boundary scan tooling (toggling pins or checking states), the *TopJTAG*
    software is one of the best options, and it has a reasonable license fee cost.
    Many other commercial software for boundary scan are thousands of dollars and
    don’t work as well as TopJTAG.
  prefs: []
  type: TYPE_NORMAL
- en: For open source boundary scan, the *Viveris JTAG Boundary Scanner* ([https://github.com/viveris/jtag-boundary-scanner/](https://github.com/viveris/jtag-boundary-scanner/))
    provides similar functionality, and open source Python bindings ([https://github.com/colinoflynn/pyjtagbs/](https://github.com/colinoflynn/pyjtagbs/)),
    called *pyjtagbs* (where *bs* obviously stands for boundary scan), allow usage
    of the library from Python code.
  prefs: []
  type: TYPE_NORMAL
- en: These libraries require a hardware probe to interface to the device. The most
    commonly supported option (including both TopJTAG and others) is either a SEGGER
    J-Link or an FTDI FT2232H–based interface cable. The FTDI-based cables are not
    specific to any vendor, but one of the best options is Joe FitzPatrick’s *Tigard*
    board, which provides voltage translation with included voltage selection and
    breakout cables to make it easy to adapt to your target board.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG Debug
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Debugging* means interacting with the debug core on the device, which allows
    you to read out or reprogram the device, at minimum, but it also means you can
    view and modify internal memory and registers. This again requires software and
    hardware solutions. The software typically involves two parts: the software that
    interfaces to the hardware and the higher-level debug software you (the human)
    interact with.'
  prefs: []
  type: TYPE_NORMAL
- en: For open source software, the *OpenOCD* project is the best-known option for
    the hardware interface portion, which supports a large number of hardware interfaces
    and target chips. Many of them use the FTDI FT2232H chip (for example, the Olimex
    ARM-USB-OCD-H, which you can purchase via Digi-Key/Mouser, and the Tigard board
    mentioned earlier).
  prefs: []
  type: TYPE_NORMAL
- en: Another good low-cost option is the *Black Magic Probe* by 1BitSquared. It’s
    an open source tool that supports many types of Arm Cortex-A or Cortex-M devices.
    Be sure to check the support list for your specific device. The Black Magic Probe
    doesn’t rely on OpenOCD but instead exposes the required interface for the higher-level
    debug tool.
  prefs: []
  type: TYPE_NORMAL
- en: Again, looking at open source options, the *GNU Debugger (GDB)* is the most
    likely higher-level interface software you will use, and it has a variety of GUIs
    built on top of it. The GDB software will interface to either OpenOCD or the Black
    Magic Probe.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware the previous open-source tooling is mostly relevant to popular cores
    such as Arm devices (and RISC-V into the future). If you are looking at less popular
    devices, which are often found in automotive or industrial processors, you may
    have very limited (or no) open-source and low-cost options.
  prefs: []
  type: TYPE_NORMAL
- en: On the commercial (higher cost) end of the spectrum, several choices are available
    that involve both hardware and software solutions, and in our experience, they
    are often well worth the money. Most of the time these will support new devices
    before they are even released for general use, and if you are using tools in a
    professional environment, this can easily save you money compared to the cost
    (in time) of finding that your target device doesn’t work with OpenOCD and you
    need to add support for it.
  prefs: []
  type: TYPE_NORMAL
- en: SEGGER makes the popular *J-Link* tool, which supports a huge number of Arm
    devices and is especially popular on Cortex-M series devices (some of the models
    support Cortex-A too). The SEGGER J-Link is available in several models. If you
    are a student, the SEGGER J-Link EDU is available at a much lower cost ($20) than
    any other professional tool. The different J-Link models also typically offer
    evaluation modes to allow you to sample certain features (such as the handy Ozone
    debugger offered with the company’s tools) that you wouldn’t otherwise be able
    to use. High-end SEGGER tools (such as J-Trace Pro) support very high-speed debug
    and trace interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Lauterbach also has a number of JTAG products that support high-speed tracing
    and debugging. The Lauterbach tools, such as the PowerDebug Pro and PowerDebug
    USB 3, support several device architectures, including Arm, PowerPC, Intel, AVR,
    ARC, and so on. While the Lauterbach tools may be more expensive than other offerings,
    the potential device support list is huge and means the single tool may be more
    cost-effective than multiple separate tools. The ability to work with different
    architectures and device types will be useful if you plan on straying from the
    more common Arm devices.
  prefs: []
  type: TYPE_NORMAL
- en: Other vendors provide tools that may be more suited to specific architectures
    as well. If you are using PowerPC devices that are common on some automotive ECUs,
    you may find that the PEmicro Multilink is a reasonable-cost offering ($200).
    In that case, the hardware interface tool also needs a separate software license
    for the debug, although you can freely use the GDB with an included GDB server
    interface for this debug tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'PCIe Communication: $100 to $1,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*PCI Express (PCIe)* is seen in high-end embedded systems or PCs. PCIe FPGA
    boards are available from every vendor. With some HDL coding skills, these devices
    can be configured to log memory contents, poke at other hardware devices, or monitor
    and modify data in memory. They have a steep learning curve and generally are
    pricey, but Lattice periodically offers one of its PCIe-based ECP3 boards on sale.'
  prefs: []
  type: TYPE_NORMAL
- en: '*PicoEVB* is a small FPGA-based platform that fits in a laptop using the M.2
    standard (see [Figure A-20](#figureA-20)). It’s a relatively low-cost solution
    that works with modern laptops, and it has several examples for getting PCIe transactions
    working.'
  prefs: []
  type: TYPE_NORMAL
- en: '![faa020](image_fi/278748b01/faa020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-20: PicoEVB, an FPGA that fits in a laptop’s M.2 slot, can be used
    to explore PCIe.'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcom has a “USB 3.0 to PCIe” bridge chip, the USB3380\. It can operate as
    a PCIe device connected to a system, but it’s configurable to pass traffic on
    to a USB host or initiate PCIe transactions on command from the USB host. The
    USB3880 reference boards are used for *SLOTSCREAMER*, an inexpensive, open source
    PCIe DMA attack board for dumping and modifying system memory via PCIe.
  prefs: []
  type: TYPE_NORMAL
- en: 'USB Sniffing: $100 to $6,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One common task for working with computer peripherals is to *sniff USB traffic*.
    Several commercial solutions are available, but one of our favorites is the Total
    Phase Beagle 480 (see [Figure A-21](#figureA-21)). This device sniffs USB 2.0
    traffic (a more expensive version does USB 3.0 as well). While relatively expensive,
    the tool makes it easy to deal with the resulting USB data. As the USB protocol
    can be relatively complicated, you are paying more for the analysis software than
    for the physical hardware. Every USB device functions at least to some degree
    at USB 1.1 speeds; therefore, one trick is to insert an old USB 1.1 hub in between
    to make the device fall back to lower speeds.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to open source, several options are also available. If you need
    to manipulate USB traffic, the *FaceDancer* is a derivative of the GoodFET that
    allows you to emulate any arbitrary USB device in Python on a secondary system
    as well as perform USB man-in-the-middle attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa021](image_fi/278748b01/faa021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-21: Total Phase Beagle USB sniffers have an easy-to-use GUI to make
    decoding protocols simple.'
  prefs: []
  type: TYPE_NORMAL
- en: Colin has developed the *PhyWhisperer-USB*, which sniffs USB 2.0 traffic. The
    PhyWhisperer-USB lacks the nice GUI software and buffer to deal with bursty traffic
    that the Total Phase Beagle 480 has, as the PhyWhisperer-USB is designed first
    for triggering on USB data.
  prefs: []
  type: TYPE_NORMAL
- en: The latest in USB sniffing and hacking can be found in the *LUNA* project by
    Kate Temkin and is also available from Great Scott Gadgets. As of this book’s
    writing, the tool was in a late beta state, but it uses a unique architecture
    that allows it to be used for sniffing, interposing, and all sorts of USB tasks,
    like the triggering tasks described next. We mention this tool despite not having
    used it ourselves, because the architecture is unique and it deserves a serious
    mention. Colin has often said that if LUNA was available when he started developing
    the PhyWhisperer-USB, he would have rather just bought a LUNA board himself! The
    LUNA board offers the ability to perform a wide variety of USB tasks well beyond
    just sniffing.
  prefs: []
  type: TYPE_NORMAL
- en: 'USB Triggering: $250 to $6,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides just sniffing the USB data, you may also need to *trigger* on USB data.
    Triggering means that relative to the actual USB packet “going over the wire,”
    you need to generate a trigger signal. Several of the high-end USB sniffers can
    perform this task; for example, the Total Phase Beagle 480 has the capability
    to perform triggering based on USB packet data.
  prefs: []
  type: TYPE_NORMAL
- en: A lower-cost option is the PhyWhisperer-USB, which is open source hardware and
    is sold by NewAE Technology, Inc. (see [Figure A-22](#figureA-22)).
  prefs: []
  type: TYPE_NORMAL
- en: '![faa022](image_fi/278748b01/faa022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-22: PhyWhisperer-USB is an open source hardware tool for USB triggering
    and analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: This tool is designed specifically for triggering on USB data packets, so it
    supports additional features, such as an ability to power-cycle the target and
    a Python 3 API to allow you to script the triggering mechanism. As previously
    mentioned, you may be able to perform some of these tasks with the LUNA project,
    so check the latest documentation for that project too.
  prefs: []
  type: TYPE_NORMAL
- en: 'USB Emulation: $100'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous tools concentrate on analyzing USB traffic but not modifying it.
    For modifications, the de facto tool is the open source *FaceDancer* project.
    While various hardware options are available, the GreatFET One (refer to [Figure
    A-19](#figureA-19)) is widely available commercially and supports the majority
    of features. The LUNA can also be used for interposing and emulating USB devices,
    and the use of an FPGA allows more complex operations than can be done in a microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: 'SPI Flash Connections: $25 to $1,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common task is reading an *SPI flash memory chip*. Several options are
    available depending on what you need to accomplish. One commercial option is the
    SEGGER J-Link Plus (or any higher-end model in that series), which primarily serves
    as a robust debug adapter for Arm-based microcontrollers. If you are purchasing
    (or have) a J-Link for debug tasks, it serves as an excellent SPI Flash Programmer
    using the “J-Flash SPI” software.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also likely want an *SOIC clip adapter* to attach to the SPI flash memory.
    These are commonly available from the manufacturer Pomona as part number 5250
    (lower-cost options are also available from no-name manufactures).
  prefs: []
  type: TYPE_NORMAL
- en: Several options exist for interfacing with SPI devices. The FTDI FT232H chip
    is a beefed-up version of the FTDI USB-serial adapter that supports SPI as well.
    DediProg makes the StarProg-A line of devices designed primarily for programming
    EEPROMs in circuit, and the Minipro TL866II universal programmer can also flash
    some SPI devices in place. The *Flashrom* tool supports programming via a built-in
    SPI, for instance, in a Raspberry Pi or BeagleBone Black*,* as well as external
    programmers that include the FT232H chip, such as the Tigard mentioned earlier.
    For a price-conscious but still fairly easy-to-use alternative, look at the FlashcatUSB.
  prefs: []
  type: TYPE_NORMAL
- en: To interface with SPI devices other than storage devices, your best bet is to
    use a *Bus Pirate* to communicate with the device interactively or a microcontroller
    that supports an SPI controller in hardware or software. In order to connect a
    reader and device physically, we recommend looking at *mini-grabber**s* and *SOIC
    clips*. The former are great for connecting to individual pins, whereas the clips
    allow you to connect to all pins of an SOIC package. More recently, you can find
    that Raspberry Pis make useful interface tools. They have the advantage of much
    faster speeds than the trusty Bus Pirate, which can take several minutes to dump
    a large SPI flash chip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Power Analysis Measurements: $300 to $50,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are finally getting to equipment specific to this book. But, didn’t we already
    cover oscilloscopes? Isn’t that sufficient for power analysis measurements? The
    reality is you might find different requirements for power analysis measurements
    compared to more general exploration of a circuit. In fact, you might even end
    up using one piece of equipment for general exploration and another for performing
    the power analysis work.
  prefs: []
  type: TYPE_NORMAL
- en: For performing power analysis of a device, we are typically concerned about
    very small changes or very small measurements. You may be measuring waveforms
    that have a few mV peak-to-peak waveforms, for example, which differs from your
    normal task of probing a 3.3 V logic level signal. Understanding this requires
    you to check your oscilloscope’s *input sensitivity* specification. It is typically
    referenced *per division*, which is a call back to a time when oscilloscopes had
    fixed grid sizes (divisions) on the display. Even though the division is now drawn
    on digitally, that specification is still used.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have to figure out how many divisions make a full input range; normally
    you’d find eight divisions vertically. Therefore, a scope with a 1 mV/div on the
    most sensitive range means 8 mV peak to peak. You would typically expect to find
    in the range of 10 to 100 mV peak-to-peak full scale at the most sensitive end
    (or ±5 to ±50 mV). Of course, you could be using an *amplifier* (or *active probe*)
    that provides a larger signal to the input of the oscilloscope.
  prefs: []
  type: TYPE_NORMAL
- en: Another critical feature for power analysis measurements is how the waveform
    is downloaded to a computer. While just exploring a device, you won’t care as
    much about that, but during power analysis, you’ll be performing statistical analysis
    across thousands to millions (or even billions) of power traces. Here, the PC-attached
    devices can be useful, as something like a PicoScope 6000 (see [Figure A-23](#figureA-23))
    has a USB 3.0 interface for rapid download of huge traces. You can even get internal
    PCIe-based capture cards, such as Cobra Express CompuScope or AlazerTech products
    that can stream directly to internal computer memory.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa023](image_fi/278748b01/faa023.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-23: PicoScope 6000 USB scope being used for power analysis. This model
    has four channels, 350 MHz bandwidth, 5 GS/s max sampling rate, and a 2 GS (giga
    sample) memory buffer.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a stand-alone scope, you’ll likely be using the network (Ethernet)
    interface. The majority of scopes support using this interface to download waveform
    data using a system called *VISA*. Unfortunately, it can be hard to know what
    the actual effective capture rate is using this method by studying only the datasheets.
    The higher-end models do tend to work well and allow rapid triggering and downloading,
    but lower-end devices may not always optimize this because the majority of scope
    users aren’t downloading data to a computer, so it’s not a highly optimized use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: The final option to discuss for power analysis measurements is the *ChipWhisperer*
    capture hardware, which started as an open source project by Colin. The ChipWhisperer
    is slightly different from an oscilloscope because it *only* supports capturing
    small signals, as it contains a low-noise amplifier (LNA) in the frontend. The
    input sensitivity ranges from approximately 10 mV to 1 V, full scale, compared
    to a normal scope, which is somewhere in the range of 50 mV to 100 V. The ChipWhisperer
    capture hardware is also always *AC coupled*, which is to say it cannot measure
    a constant DC voltage. The work we’ll do with power analysis rarely needs this
    constant DC voltage, so by removing it at the front end, we can help simplify
    the capture hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ChipWhisperer hardware is available in several variants: the major ones
    are ChipWhisperer-Nano ($50), ChipWhisperer-Lite (starting at $250), and ChipWhisperer-Pro
    ($3,800) hardware. Additional feature updates include an architecture update starting
    with the ChipWhisperer-Husky, which adds more features to the ChipWhisperer-Lite.
    The ChipWhisperer-Lite was the original board released as part of a Kickstarter,
    and it included the target built onto the same board (see [Figure A-24](#figureA-24)).
    The idea of this board is you can cut away the target to add your own later, but
    the board is now available with connectors and external targets to make it easier
    to work with external targets, typically as part of a starter kit, such as the
    NAE-SCAPACK-L1 or NAE-SCAPACK-L2.'
  prefs: []
  type: TYPE_NORMAL
- en: '![faa024](image_fi/278748b01/faa024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-24: The original ChipWhisperer-Lite includes capture hardware (left
    two-thirds of the board) and the target (right one-third of the board).'
  prefs: []
  type: TYPE_NORMAL
- en: The other major difference with regular oscilloscopes is that the ChipWhisperer
    capture hardware uses a synchronous sampling method. [Figure A-25](#figureA-25)
    shows a regular oscilloscope setup, with an internal timebase that is used to
    decide when to sample. The time delay is effectively random between the clock
    edge of the device you are measuring and the oscilloscope sampling point, and
    it changes on every power trace. We can typically avoid this issue by sampling
    at a very fast rate; it’s not unusual with side-channel power analysis to capture
    at somewhere between 100 MS/s to 5 GS/s. The ChipWhisperer avoids this by instead
    synchronizing the sample points with the target device clock, which allows you
    to sample much more slowly but still achieve a highly successful attack. It *does*
    require access to a device clock to succeed, but in some cases, that’s something
    we do have access to. More secure devices (such as smart cards) will use internal
    oscillators that require clock extraction circuitry, but more basic microcontrollers
    will often use an external crystal we can latch onto.
  prefs: []
  type: TYPE_NORMAL
- en: This raises the question of how fast a sample rate we need for our attack to
    succeed. If we’re using synchronous sampling like the ChipWhisperer capture board
    does, the sample rate can be as low as 1× the device clock rate (that is, sampled
    at the device clock rate). If we’re using a regular oscilloscope, a typical rule
    of thumb would be to sample at 5× to 10× the device clock rate. Also make sure
    the bandwidths of the scope and the probes are at least as high as the sampling
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa025](image_fi/278748b01/faa025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-25: An asynchronous sample clock (as in a regular oscilloscope) causes
    some time jitter between the rising edge of the device sample clock (A, B, and
    C) and the next rising edge of the sample clock defining when the samples are
    taken.'
  prefs: []
  type: TYPE_NORMAL
- en: We should add the disclaimer that the sample rate required will vary drastically
    with the algorithm attacked. For example, we can attack some slow algorithms even
    when sampling at 0.0001× the rate of the target device, as the algorithm itself
    is so slow that the leaked data does not require information on every clock cycle.
    Likewise, a hardware cryptographic implementation may leak information only at
    a small fraction of the clock cycle due to an unintended glitch, which means the
    5× to 10× faster rate may be insufficient, and even the synchronous sampling would
    still need substantial oversampling to catch the glitch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggering on Analog Waveforms: $3,800+'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returning to the topic of *triggering*, triggering on an analog waveform is
    also useful. This means not just triggering on a rising or falling edge, but matching
    an exact pattern in the analog waveform. It’s often used inside channel analysis
    or fault injection to trigger right before some sensitive operation.
  prefs: []
  type: TYPE_NORMAL
- en: Some oscilloscopes offer this feature, although it’s relatively rare and is
    usually only available in higher-end scopes, so you may need to use external hardware
    to accomplish this goal. The Riscure icWaves has a variety of features and is
    designed specifically to perform this triggering function.
  prefs: []
  type: TYPE_NORMAL
- en: A simplified version of the pattern match is also built in to the ChipWhisperer-Pro,
    which allows for matching fewer sample points than the icWaves solutions. The
    ChipWhisperer-Pro can also serve as the power measurement platform, however, so
    it can be useful for performing multiple duties.
  prefs: []
  type: TYPE_NORMAL
- en: Both the Riscure icWaves and ChipWhisperer-Pro use a sum of absolute difference
    (SAD) to perform the matching logic. They store a copy of the last *N* points
    of the waveform in a buffer and compare the last *N* points to some desired match
    pattern. If those points are close enough (small enough difference), a trigger
    signal is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Measuring Magnetic Fields: $25 to $10,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another task you’ll find useful is measuring the strength of a *magnetic field*
    emitted from a device, which basically means that an *H-Field (magnetic field)
    probe* is required. The actual design of the probes is very basic—a simple loop
    antenna will pick up the magnetic field. The antenna is typically shielded to
    block the *E-field* (*electrical field*) as much as possible. [Figure A-26](#figureA-26)
    shows an example of several H-Field probes.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa026](image_fi/278748b01/faa026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-26: H-Field probes from various manufacturers'
  prefs: []
  type: TYPE_NORMAL
- en: 'When purchasing a probe, you have several options to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Package-size probes**'
  prefs: []
  type: TYPE_NORMAL
- en: Here we refer to *package-size probes* as those that are roughly capable of
    probing a single device, such as an IC or component. These larger magnetic field
    probes can be purchased as a *planar design*, which uses a PCB to reduce the cost.
    Examples of these include Beehive Electronics 101A probe set, TekBox TBPS01, and
    the ChipWhisperer NAE-HPROBE-15\. The ChipWhisperer NAE-HPROBE-15 also has design
    information published, which requires having a four-layer PCB fabricated but lets
    you tweak the design if required for your specific application.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of the planar design is the probe must be placed flat onto the
    chip, which may not be physically possible. Various other orientations have been
    made of these designs as well; the most well known is the Langer EMV RF1 kit,
    which includes several probes that are sensitive to various magnetic field directions.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the Langer EMV RF1 kit’s popularity, several lower-cost clones are now
    available. The Rigol NFP-3 kit contains similar probes to the Langer EMV kit.
    An even lower-cost option is the EM5030 probe set made by Cybertek. The Cybertek
    probes have a slightly thicker insulation, which will negatively affect sensitivity
    since you cannot physically get the actual probe itself as close to the magnetic
    field source.
  prefs: []
  type: TYPE_NORMAL
- en: Some slightly smaller probes are also available, from Langer EMV and elsewhere.
    An example is the Morita Tech MT-545, which has a 1.6 mm diameter coil.
  prefs: []
  type: TYPE_NORMAL
- en: '**Preamplifier**'
  prefs: []
  type: TYPE_NORMAL
- en: For all these sets (including the Langer EMV kit), you will need a *preamplifier*
    to provide reasonable signal level for your oscilloscope input. The vendors provide
    matching amplifiers for their sets, although little is vendor-specific to the
    amplifier itself. The various amplifier designs may have better or worse noise
    performance, but the design of a low noise amplifier is not a particularly difficult
    task. Besides the gain (typically 20 to 30 dB should be expected), the *noise
    figure (NF)* should be considered. The NF measures the degradation of the signal-to-noise
    ratio (SNR) between input to output, so a higher NF means the amplifier itself
    adds additional noise to the output. As an example, the Langer EMV PA 203 SMA
    amplifier specifies a gain of 20 dB and a noise figure of 4.5 dB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are connecting the output of the amplifier to your oscilloscope, you
    may wish to select an amplifier with a matching bandwidth. For example, the Langer
    EMV PA 203 SMA amplifier specifies a usable frequency range of 100 kHz to 3 GHz.
    If you are connecting this to a 200 MHz bandwidth oscilloscope, the 3 GHz amplifier
    will typically have worse noise performance than a smaller bandwidth amplifier.
  prefs: []
  type: TYPE_NORMAL
- en: One of the go-to companies for RF products is Mini-Circuits, which sells complete
    LNA devices such as the Mini-Circuits ZFL-1000LN+ (100 kHz to 1 GHz bandwidth,
    20 dB gain, 2.9 dB NF) for about $100\. You can reduce the bandwidth a bit with
    the ZFL-500LN+ (100 kHz to 500 MHz bandwidth, 24 dB gain, 2.9 dB NF), which has
    slightly higher gain. For the ultimate in a low-cost LNA, the BGA2801 can be used
    as a basis for a cheap LNA (100 kHz to 2.2 GHz, 22 dB gain, 4.3 dB NF). A sample
    design for an LNA based on the BGA2801 is available in the ChipWhisperer project
    (the NF of the complete amplifier will be worse than the NF of only the raw IC).
  prefs: []
  type: TYPE_NORMAL
- en: '**Chip-scale and smaller probes**'
  prefs: []
  type: TYPE_NORMAL
- en: While the previous probe tips were mostly for measuring an entire device, we
    are calling a chip-scale probe one that can be used to probe smaller portions
    of the IC surface. Some of these can be built using similar techniques, but just
    with smaller coils. This can be used to create coils in the 300µm (0.3mm) size,
    such as the Langer EMV RF3 mini kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Even smaller tips are possible, such as the Langer EMV MFA 01 set that contains
    tips down to 100µm. A warning with such small tips: the tips must be very close
    to the measurement source, which in this case is the IC die. You will almost certainly
    need to decap or partially decap the IC being measured once you get to these very
    small probes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**All in one**'
  prefs: []
  type: TYPE_NORMAL
- en: The smaller probe sizes also make it useful to consider integrating the amplifier
    even closer to the probe tip. The previously mentioned Langer EMV sets in the
    100µm to 250µm range contain an integrated amplifier, but complete solutions that
    contain both the probe and the amplifier are also available in slightly larger
    sizes. Riscure sells the EM Probe, which is closely integrated with the amplifier
    for a bandwidth of 1 GHz. It is designed specifically for XY scanning over the
    chip surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clock Fault Injection: $100 to $30,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Clock fault injection* requires generating complex clock waveforms. [Figure
    A-27](#figureA-27) shows a sample clock fault injection waveform. The most straightforward
    way of doing this at reasonable cost is using the clock fault injection built
    in to any of the FPGA-based ChipWhisperer platforms, such as the ChipWhisperer-Lite
    or ChipWhisperer-Pro (the ChipWhisperer-Nano does not have an FPGA, so it cannot
    do clock fault injection).'
  prefs: []
  type: TYPE_NORMAL
- en: '![faa027](image_fi/278748b01/faa027.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-27: Example of a clock glitch waveform, a 7.37 MHz clock with a narrow
    pulse inserted'
  prefs: []
  type: TYPE_NORMAL
- en: The Riscure VC Glitcher and Riscure Spider can also perform clock fault injection
    and have more complex circuitry to generate glitch waveforms at a resolution of
    2ns. For lower-cost or DIY options, you will mostly be limited to implementing
    something in an FPGA board yourself. The implementation is out of scope for this
    book, but a low-cost FPGA board (such as the Digilent Arty) would be a good starting
    point. While you might consider using an arbitrary waveform generator (AWG), it
    can be difficult to generate the very fast digital waveform needed with an AWG.
  prefs: []
  type: TYPE_NORMAL
- en: 'Voltage Fault Injection: $25 to $30,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Voltage fault injection* typically requires switching between two or more
    voltage sources in quick succession. Compared to clock fault injection, it is
    easier to build your own voltage fault injection system. The typical DIY solution
    is to use a multiplexor IC, such as the MAX4619, with two different voltages on
    each input. You can switch between the regular to glitch voltage to insert faults.
    See Chapter 6, or check out Chris Gerlinsky’s presentation “Breaking Code Read
    Protection on the NXP LPC-Family Microcontrollers” (REcon Brussels, 2017).'
  prefs: []
  type: TYPE_NORMAL
- en: The ChipWhisperer hardware platforms currently use a simple crowbar mechanism
    to generate voltage glitch waveforms (see [Figure A-28](#figureA-28)). The ChipWhisperer-Lite/Pro
    best support this mechanism, but it also works with the ChipWhisperer-Nano in
    a more limited fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa028](image_fi/278748b01/faa028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-28: Example of a VCC glitch waveform'
  prefs: []
  type: TYPE_NORMAL
- en: For a more complete solution, the Riscure VC Glitcher and Riscure Spider can
    perform the voltage glitch generation (as well as clock glitch generation), and
    each has a more complex triggering circuitry compared to the ChipWhisperer platform.
    These devices allows for generation of a flexible analog waveform, compared to
    the more limited ChipWhisperer crowbar method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Voltage fault injection can also be done with a fast function generator. These
    generators are available at a reasonable cost, such as the Siglent SDG6022X ($1,500).
    You will need an amplifier to drive anything with it, which is available as a
    DIY solution using a high-current op-amp, or from Riscure (Glitch Amplifier or
    Glitch Amplifier 2), or NewAE Technology (ChipJabber). See “Shaping the Glitch:
    Optimizing Voltage Fault Injection Attacks” by Claudio Bozzato, Riccardo Focardi,
    and Francesco Palmarini for an example of the DIY solution being used on real
    devices. As you might already have a function generator available to you, building
    a DIY amplifier may be a relatively low-cost solution for your existing lab.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Electromagnetic Fault Injection: $100 to $50,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Electromagnetic fault injection (EMFI)*is a powerful method of performing
    fault injection. EMFI roughly requires switching a high voltage onto a small inductor
    to generate a powerful magnetic field. Several purpose-built solutions currently
    are on the market in addition to DIY open source solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: For purpose-built equipment, Riscure’s EM-FI Transient Probe tool is the original
    and most widely used tool for performing EMFI. The device comes with injection
    tips of various sizes and polarities. NewAE Technology introduced the ChipSHOUTER
    EMFI tool, which also comes with various tips, along with several sample target
    boards. The Riscure EMFI tool and ChipSHOUTER are both designed for relatively
    fast repetition, as might be required for inserting multiple glitches into a system.
  prefs: []
  type: TYPE_NORMAL
- en: Another purpose-built tool is the SGZ 21 burst generator (available in the E1
    set) with the S2 set H-Field injector tips from Langer EMV. This tool is designed
    for immunity testing instead of security analysis, so fewer details about its
    usage for fault injection testing are currently available.
  prefs: []
  type: TYPE_NORMAL
- en: Morita Tech also makes both E-Field and H-Field injection probes (part number
    MT-676, with versions MT-676E and MT-676H, respectively, giving E- and H-Field
    injections). These products are made in Japan and appear to be easier to order
    domestically in Japan.
  prefs: []
  type: TYPE_NORMAL
- en: Besides solutions offered specifically for EMFI, Avtech Electrosystems, Ltd.,
    offers a variety of pulse generators that can be used for EMFI. They require you
    to adapt the output to the specific EMFI coil, which requires validation that
    the pulse generator can drive an inductive load without any modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Low-cost and DIY solutions are also available. A project called *BadFET* by
    Red Balloon Security is available, but it has the substantial downside of using
    a relatively dangerous (but easier to build) method of switching the high voltage
    onto the exposed injection coil. See Chapter 5 for a discussion of architectures
    related to EMFI tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Optical Fault Injection: $1,000 to $250,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Optical fault injection* typically means the use of a laser to position a
    specific spot onto the IC die. A lower-cost option is using a flash tube along
    with a lens, as described in “Low-Cost Setup for Localized Semi-invasive Optical
    Fault Injection Attacks,” by Oscar M. Guillen, Michael Gruber, and Fabrizio De
    Santis.'
  prefs: []
  type: TYPE_NORMAL
- en: For precise optical fault injection, a light (laser) *source*, an *XY positioning
    stage*, and a laser-optimized *microscope* setup are needed. For the light sources,
    a *backside attack* requires an IR (1064nm) laser, and *frontside attacks* require
    shorter wavelengths (880nm, 532nm, or shorter).
  prefs: []
  type: TYPE_NORMAL
- en: Several additions will make your life easier. An *additional Z stage* can help
    with automated focusing of the laser beam, and an *IR-sensitive camera* can allow
    you to position the beam from a PC. Similarly, an *IR light source* will allow
    you to see metal layers even through silicon, which helps positioning for backside
    attacks. Finally, some certifications require having a *dual-laser system* capable
    of delivering a laser pulse on two different areas of the die in one fault injection
    run. Riscure offers the Laser Station 2, which includes that feature and the aforementioned
    additions. Alphanov laser solutions also provide laser fault injection hardware,
    which can be integrated in Riscure laser systems or driven by eShard’s fault injection
    scripts in esDynamic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Positioning Probes: $100 to $50,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For H-Field probes, EMFI, and laser systems, precise *positioning* may be required
    over the target. That is typically done using an XY or XYZ table, which is sold
    for microscope purposes. A variety of XY(Z) tables can be found from suppliers
    such as Thorlabs, including both manual and electronic tables. Riscure offers
    the EM Probe Station and Laser Station, which both include stages. Other XY(Z)
    table suppliers can easily be found by searching for “microscope positioning stages.”
  prefs: []
  type: TYPE_NORMAL
- en: To match with the ChipSHOUTER, NewAE offers the ChipShover XYZ table and controller.
    It’s based on open source firmware and can be used for positioning EM probes or
    other tools in addition to the ChipSHOUTER.
  prefs: []
  type: TYPE_NORMAL
- en: Low-cost versions of manual positioning stages are also available, such as those
    sold by AmScope (GT200 table) or an overseas supply company (AliExpress).
  prefs: []
  type: TYPE_NORMAL
- en: A low-cost option for an XYZ table is to use a 3D printer stage. A 3D printer
    typically has sufficient accuracy for most of the work you will need to do with
    both H-Field probes (electromagnetic analysis) and EMFI (injection). Many 3D printers
    have 1 to 20µm step resolution, for example, which allows a relatively large amount
    of steps over the chip surface or target. For example, stepping over a 4×4mm chip
    die with 10µm step resolution means the 3D printer would have 400 steps in each
    X and Y direction. The ChipShover tool mentioned earlier is based on 3D printer
    firmware and provides an open source API you can use with most standard printers
    that simply process *G-code*, for example. G-code is a language specific for 3D
    printers.
  prefs: []
  type: TYPE_NORMAL
- en: The important specifications to look for are the *step size* or *resolution*
    of the table, as well as the *repetition error*, usually expressed in µm. The
    former terms refer to the smallest step size the table can make, and the latter
    refers to the maximum expected error if you move from any point A to any point
    B. You can imagine this error is important for repeatability of faults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Target Devices: $10 to $10,000'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During your research and development phase, you will need *target devices*.
    While you may have a specific target in mind to attack, starting with something
    you fully control is more reasonable. The most obvious target would be a development
    board for the device of interest. For example, if you are interested in an automotive
    device, such as a PowerPC MPC5777C (found in some ECUs), you could attempt to
    perform exploration on the actual ECU, but that will be difficult since you may
    not know anything about the schematic, program running, and so on. Instead, finding
    a development board for this part and working out your attack on it first would
    be better. Once you’ve explored the device itself, you can better understand how
    it works on the specific board. This advice applies even if you’re evaluating
    your own product, since your product may still make the evaluation more complicated
    than it would be on a stand-alone board.
  prefs: []
  type: TYPE_NORMAL
- en: On the lower-end, you can use something like an Arduino to run code and then
    modify it to perform power analysis and fault injection. Targets specifically
    designed for this analysis work do exist. One of the earliest commercially available
    targets was the *SASEBO Project* started by Akashi Satoh, which has now turned
    into the *SAKURA Project*. When looking up the SAKURA boards, don’t confuse them
    with the Renesas Electronics Sakura boards, which were released much later and
    use the same name.
  prefs: []
  type: TYPE_NORMAL
- en: Due to various licensing changes, the SAKURA boards can occasionally be difficult
    to find; see the SAKURA home page for information. They are currently available
    from TROCHE. [Figure A-29](#figureA-29) shows a SAKURA-G board. Most SAKURA boards
    target FPGAs, which allow you to implement algorithms in programmable hardware.
    The SAKURA boards have a range of FPGA sizes, including some very large FPGAs
    for complex algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa029](image_fi/278748b01/faa029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-29: SAKURA-G is part of a range of useful FPGA-based target systems.'
  prefs: []
  type: TYPE_NORMAL
- en: The most widely available target boards are part of the ChipWhisperer project.
    Most of these targets are made available in the CW308 UFO Board,a base board onto
    which many targets can be fit. [Figure A-30](#figureA-30) shows a sample baseboard
    with target.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa030](image_fi/278748b01/faa030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-30: The ChipWhisperer UFO (CW308) has a variety of open source top
    modules you can use for testing various devices and algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: This target system allows swapping of various test processors. Test devices
    for 8-bit XMEGA, 32-bit Arm, FPGA, PowerPC, and more are readily available. In
    addition, the schematic and full design files for the target portions are available
    at [https://github.com/newaetech/chipwhisperer-target-cw308t/](https://github.com/newaetech/chipwhisperer-target-cw308t/)
    if you need to modify the designs or want to build your own target boards.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the SAKURA boards for FPGA targets, the ChipWhisperer project also has
    the CW305 FPGA target, which has an Artix 7A100 FPGA target on which to implement
    your cryptographic algorithms (see [Figure A-31](#figureA-31)).
  prefs: []
  type: TYPE_NORMAL
- en: Riscure offers various smart cards as well as an embedded target called *Piñata*
    with its tools. These targets allow running more advanced algorithms and tests
    suited to the Riscure toolchain, including multiple faults and laser fault injection.
  prefs: []
  type: TYPE_NORMAL
- en: '![faa031](image_fi/278748b01/faa031.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-31: The ChipWhisperer CW305 has an Artix A35/A100 FPGA target and
    allows you to implement algorithms in hardware.'
  prefs: []
  type: TYPE_NORMAL
