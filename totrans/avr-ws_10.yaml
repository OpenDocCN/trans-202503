- en: '[10](nsp-boxall502581-0008.xhtml#rch10)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Your Own AVR Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](images/nsp-boxall502581-ct.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cast your mind back to [Project 15](nsp-boxall502581-0013.xhtml#pro15) in [Chapter
    3](nsp-boxall502581-0013.xhtml#ch03) , which required us to convert the voltage
    measured by the TMP36 temperature sensor to degrees Celsius. To complete those
    calculations, we called the math library and used the functions within it to perform
    operations on floating-point numbers. Using this library meant we didn’t have
    to create our own mathematical functions or include their code in the project,
    saving time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn to create your own libraries, allowing you to
    reuse tested functions in multiple projects to increase your efficiency. You’ll
    build a simple library for a repetitive task, a library that accepts values to
    perform a function, and a library that processes data from a sensor and returns
    values in an easy-to-use form. These examples will equip you with the skills required
    to make your own custom libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating Your First Library](nsp-boxall502581-0008.xhtml#rah1201)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section you’ll create your first library, which you’ll then use in [Project
    41](nsp-boxall502581-0020.xhtml#pro41) . First, consider the functions defined
    in [Listing 10-1](nsp-boxall502581-0020.xhtml#list1001) , `blinkSlow()` and `blinkFast()`
    . These two functions blink an LED (connected via a resistor between PORTB0 and
    GND) at a slow or fast rate, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 10-1: Example code that demonstrates two functions that blink LEDs
    slow and fast'
  prefs: []
  type: TYPE_NORMAL
- en: The custom functions to blink the LED slowly or rapidly are convenient, but
    it’s not very efficient to enter them into your project code every time you want
    to use them. However, if you offload the code that describes the functions into
    a library, you can simply call the library with one line in future projects, then
    use the functions as needed without rewriting them. Let’s create such a library
    now.
  prefs: []
  type: TYPE_NORMAL
- en: '[Anatomy of a Library](nsp-boxall502581-0008.xhtml#rbh1201)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A library consists of two files: *library.h* , the header file, and *library.c*
    , the source file, where “library” is a placeholder for an individual library’s
    name. We’ll call our first example library the *blinko* library, so our two files
    will be *blinko.h* and *blinko.c* .'
  prefs: []
  type: TYPE_NORMAL
- en: 'A header file contains the definitions of the functions, variables, or other
    components the library contains. The following is our header file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The file declares the names of the two functions inside the library, `void blinkSlow()`
    and `void blinkFast()` . Each of these lines is followed by a comment describing
    the function’s purpose. Get into the habit of including comments like these about
    the custom functions in your library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our source file contains the code that will be made available to the main code
    in [Project 41](nsp-boxall502581-0020.xhtml#pro41) when we include this library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The *blinko.c* file is identical to the first section of [Listing 10-1](nsp-boxall502581-0020.xhtml#list1001)
    . We first include the other libraries required by the code in our own library
    ❶—this allows us to use the functions for I/O and `_delay_ms()` . We then add
    the `blinkSlow()` ❷ and `blinkFast()` ❸ custom functions we want to include in
    the library.
  prefs: []
  type: TYPE_NORMAL
- en: '[Installing the Library](nsp-boxall502581-0008.xhtml#rbh1202)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make the library available to the main code for [Project 41](nsp-boxall502581-0020.xhtml#pro41)
    , we have to do two things. First, we copy the header and source files into the
    same project directory as the *main.c* file and Makefile, as shown in the directory
    listing screen capture in [Figure 10-1](nsp-boxall502581-0020.xhtml#f10001) .
    You can find these in the *Project 41* subfolder of this book’s *Chapter 10* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Contents of the Project 41 subfolder (Makefile, blinko.c, blinko.h, main.c)](images/nsp-boxall502581-f10001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-1: Place the library files in the same directory as the project files.'
  prefs: []
  type: TYPE_NORMAL
- en: Second, we edit the project’s Makefile so that the toolchain knows to look for
    the library when compiling the code to upload to the microcontroller. To do so,
    we add `blinko.c` after `main.o` in the Makefile’s `OBJECTS` line, as shown in
    [Figure 10-2](nsp-boxall502581-0020.xhtml#f10002) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Line 22 of the Makefile for Project 41: OBJECTS = main.o blinko.c](images/nsp-boxall502581-f10002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-2: Adding the *blinko.c* library to the Makefile for [Project 41](nsp-boxall502581-0020.xhtml#pro41)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve installed the library, let’s put it to the test by using it to
    program a simple circuit.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 41: Your First Library](nsp-boxall502581-0008.xhtml#rpro41)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need the following hardware for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One 560 Ω resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit shown in [Figure 10-3](nsp-boxall502581-0020.xhtml#f10003)
    on your breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 41](images/nsp-boxall502581-f10003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-3: Schematic for [Project 41](nsp-boxall502581-0020.xhtml#pro41)'
  prefs: []
  type: TYPE_NORMAL
- en: Keep this circuit together, as you’ll use it again in the [following project](nsp-boxall502581-0020.xhtml#pro42)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Next, open a terminal window, navigate to the *Project 41* subfolder of this
    book’s *Chapter 10* folder, and enter the command `make flash` . The LED should
    blink rapidly five times, then blink slowly five times, then repeat.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this project is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First, we include our new library ❶. (Note that the custom library name is surrounded
    by quotes, not left and right angle brackets.) We then take advantage of our library
    functions to blink the LED ❷.
  prefs: []
  type: TYPE_NORMAL
- en: Although this project is a somewhat minimal demonstration, it illustrates the
    basic process for creating and using your own AVR libraries. Next, we’ll look
    at some more complex examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating a Library That Accepts Values to Perform a Function](nsp-boxall502581-0008.xhtml#rah1202)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you know how to create a basic library, you’re ready for the next
    level: creating a library that can accept values and act on them. Again, we’ll
    begin with an example function and convert that into a library.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the code in [Listing 10-2](nsp-boxall502581-0020.xhtml#list1002) ,
    which uses the `blinkType()` function to set the number of times to blink the
    LED connected to PORTB0, as well as the on/off period.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 10-2: An example sketch that demonstrates our LED blinking function,
    which will be converted into a library'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `blinkType()` accepts two values and then acts on them. The
    `blinks` value is the number of times you’d like to turn the onboard LED on and
    off, and the `duration` value is the delay in milliseconds for each blink. Let’s
    turn this into a library named *blinko2* .
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to create the *blinko2.h* header file, which contains the definitions
    of the functions and variables used inside the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As before, we declare the name of the function inside the library, followed
    by a comment describing its purpose. In this case, we provide comments describing
    the function’s parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we build our *blinko2.c* source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The source file includes the necessary libraries for operating our library ❶,
    then our library’s function ❸, as usual. The line at ❷ is required for those of
    you using Apple computers, as the version of the compiler is slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to edit the Makefile of the project in which we’ll use this
    library, which you can find in the *Project 42* subfolder of the book’s *Chapter
    10* folder. Add the library name `blinko2.c` after `main.o` in the `OBJECTS` line,
    as shown in [Figure 10-4](nsp-boxall502581-0020.xhtml#f10004) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Line 22 of the Makefile for Project 42: OBJECTS = main.o blinko2.c](images/nsp-boxall502581-f10004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-4: Adding the *blinko2.c* library to the Makefile for [Project 42](nsp-boxall502581-0020.xhtml#pro42)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the library set up, let’s test it out.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 42: Using the blinko2.c Library](nsp-boxall502581-0008.xhtml#rpro42)'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the hardware you assembled for [Project 41](nsp-boxall502581-0020.xhtml#pro41)
    for this project as well. Open a terminal window, navigate to the *Project 42*
    subfolder of this book’s *Chapter 10* folder, and enter the command `make flash`
    . The LED should blink rapidly 10 times, then blink slowly 5 times, then repeat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As before, we include our new library ❶, then use that library’s function to
    blink the LED rapidly with the short duration ❷, then slowly with a longer duration
    ❸. Again, this is intended as a simple demonstration that gives you the framework
    for creating your own AVR libraries with functions that can accept values. If
    you’d like a challenge, you can try creating your own PWM library based on the
    example code from [Chapter 7](nsp-boxall502581-0017.xhtml#ch07) .
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating a Library That Processes Data and Returns Values](nsp-boxall502581-0008.xhtml#rah1203)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this chapter’s [final project](nsp-boxall502581-0020.xhtml#pro43) , you’ll
    learn how to create a library that can return values back to the main code. We’ll
    create a “thermometer” library that not only returns values from an Analog Devices
    TMP36 temperature sensor but also has a function to simplify displaying numbers
    on a seven-segment LED display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our library source code, which you’ll find in the *Project 43* subfolder of
    this book’s *Chapter 10* folder, contains two functions: one to return the value
    in degrees Celsius from the temperature sensor as a float variable, and another
    that accepts an integer between 0 and 99 to display on the single-digit LED display
    from [Project 15](nsp-boxall502581-0013.xhtml#pro15) . Let’s take a look at the
    *temperature.h* header file defining the functions and variables used inside the
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As usual, we declare the names of the functions inside the library and provide
    comments describing their use. Note that the type of the `readTMP36()` function
    is `float` , not `void` , as this function will return a floating-point value
    for the temperature to our project’s main code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s examine our *thermometer.c* source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All the code in the library should be familiar to you by now. First, we include
    the required libraries for use in our library ❶. The `readTMP36()` function ❷
    sends the temperature back in degrees Celsius, using the `return` function ❸ in
    the same way as the custom function explained in [Project 11](nsp-boxall502581-0013.xhtml#pro11)
    in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) . The `displayNumber(uint8_t
    value)` function displays an integer between 0 and 99 on the single-digit LED
    display ❹.
  prefs: []
  type: TYPE_NORMAL
- en: As before, to make this library available for use in [Project 43](nsp-boxall502581-0020.xhtml#pro43)
    , we add it to line 22 in the Makefile, as shown in [Figure 10-5](nsp-boxall502581-0020.xhtml#f10005)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Line 22 of the Makefile for Project 43: OBJECTS = main.o thermometer.c](images/nsp-boxall502581-f10005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-5: Adding the *thermometer.c* library to the Makefile for [Project
    43](nsp-boxall502581-0020.xhtml#pro43)'
  prefs: []
  type: TYPE_NORMAL
- en: You’re now ready to build your digital thermometer using this library.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 43: Creating a Digital Thermometer with the thermometer.c Library](nsp-boxall502581-0008.xhtml#rpro43)'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll read an analog temperature sensor (the TMP36) with your
    microcontroller, which will use the seven-segment LED from [Project 15](nsp-boxall502581-0013.xhtml#pro15)
    to display the temperature one digit at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 5 V breadboard power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One TMP36 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One common-cathode seven-segment LED display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Seven 560 Ω resistors (R1–R7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 0.1 μF ceramic capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your circuit as shown in [Figure 10-6](nsp-boxall502581-0020.xhtml#f10006)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 43](images/nsp-boxall502581-f10006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-6: Schematic for [Project 43](nsp-boxall502581-0020.xhtml#pro43)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the power supply to the project must be as close to 5 V as possible,
    since the TMP36 is an analog sensor whose output is a function of the supply voltage
    and the temperature.
  prefs: []
  type: TYPE_NORMAL
- en: Now open a terminal window, navigate to the *Project 43* subfolder in the *Chapter
    10* folder, and upload the code for [Project 43](nsp-boxall502581-0020.xhtml#pro43)
    as usual. Once you’ve completed this, you should be presented with the temperature
    in degrees Celsius on the LED display—first the left-hand digit, then the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have placed the measurement and calculation code in the thermometer
    library, you can see how simple the main code can be. We first include the required
    libraries ❶ and define the function to start the ADC ❷. In the main section of
    the code we declare two variables ❸, to store the value from the temperature library
    and to pass to the `displayNumber()` function. We start the ADC for the TMP36
    temperature sensor ❹, then set the pins on PORTB to outputs for the LED display
    ❺.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we retrieve the temperature from the sensor via the `readTMP36()` function
    from our thermometer library ❻, convert it to an integer, and show it on the LED
    display ❼.
  prefs: []
  type: TYPE_NORMAL
- en: For another challenge, see if you can modify `readTMP36()` so that it can return
    temperatures in either Celsius or Fahrenheit, or make your own ADC initialization
    or PWM library, or simplify the numerical display code in `displayNumber(uint8_t
    value)` . Whichever you choose, I hope you see how easy it is to rework your own
    custom functions into a convenient library. This is a key tool in your box of
    programming tricks.
  prefs: []
  type: TYPE_NORMAL
- en: In the [next chapter](nsp-boxall502581-0021.xhtml#ch11) , you’ll learn how to
    use many more interesting and useful parts via the SPI data bus, including LED
    display drivers, shift registers, and analog-to-digital converters.
  prefs: []
  type: TYPE_NORMAL
