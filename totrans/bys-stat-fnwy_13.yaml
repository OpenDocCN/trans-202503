- en: '**10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: INTRODUCTION TO AVERAGING AND PARAMETER ESTIMATION**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This chapter introduces you to *parameter estimation*, an essential part of
    statistical inference where we use our data to guess the value of an unknown variable.
    For example, we might want to estimate the probability of a visitor on a web page
    making a purchase, the number of jelly beans in a jar at a carnival, or the location
    and momentum of a particle. In all of these cases, we have an unknown value we
    want to estimate, and we can use information we have observed to make a guess.
    We refer to these unknown values as *parameters*, and the process of making the
    best guess about these parameters as parameter estimation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll focus on *averaging*, which is the most basic form of parameter estimation.
    Nearly everyone understands that taking an average of a set of observations is
    the best way to estimate a true value, but few people really stop to ask why this
    works—if it really does at all. We need to prove that we can trust averaging,
    because in later chapters, we build it into more complex forms of parameter estimation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Estimating Snowfall**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Imagine there was a heavy snow last night and you’d like to figure out exactly
    how much snow fell, in inches, in your yard. Unfortunately, you don’t have a snow
    gauge that will give you an accurate measurement. Looking outside, you see that
    the wind has blown the snow around a bit overnight, meaning it isn’t uniformly
    smooth. You decide to use a ruler to measure the depth at seven roughly random
    locations in your yard. You come up with the following measurements (in inches):'
  prefs: []
  type: TYPE_NORMAL
- en: 6.2, 4.5, 5.7, 7.6, 5.3, 8.0, 6.9
  prefs: []
  type: TYPE_NORMAL
- en: The snow has clearly shifted around quite a bit and your yard isn’t perfectly
    level either, so your measurements are all pretty different. Given that, how can
    we use these measurements to make a good guess as to the actual snowfall?
  prefs: []
  type: TYPE_NORMAL
- en: This simple problem is a great example case for parameter estimation. The parameter
    we’re estimating is the actual depth of the snowfall from the previous night.
    Note that, since the wind has blown the snow around and you don’t have a snow
    gauge, we can never know the *exact* amount of snow that fell. Instead, we have
    a collection of data that we can combine using probability, to determine the contribution
    of each observation to our estimate, in order to help us make the best possible
    guess.
  prefs: []
  type: TYPE_NORMAL
- en: '***Averaging Measurements to Minimize Error***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You first instinct is probably to average these measurements. In grade school,
    we learn to average elements by adding them up and dividing the sum by the total
    number of elements. So if there are *n* measurements, each labeled as *m[i]* where
    *i* is the *i*th measurement, we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0094-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we plug in our data, we get the following solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0094-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, given our seven observations, our best guess is that about 6.31 inches of
    snow fell.
  prefs: []
  type: TYPE_NORMAL
- en: Averaging is a technique embedded in our minds from childhood, so its application
    to this problem seems obvious, but in actuality, it’s hard to reason about why
    it works and what it has to do with probability. After all, each of our measurements
    is different, and all of them are likely different from the true value of the
    snow that fell. For many centuries, even great mathematicians feared that averaging
    data compounds all of these erroneous measurements, making for a very inaccurate
    estimate.
  prefs: []
  type: TYPE_NORMAL
- en: When we estimate parameters, it’s vital that we understand *why* we’re making
    a decision; otherwise, we risk using an estimate that may be unintentionally biased
    or otherwise wrong in a systematic way. One error commonly made in statistics
    is to blindly apply procedures without understanding them, which frequently leads
    to applying the wrong solution to a problem. Probability is our tool for reasoning
    about uncertainty, and parameter estimation is perhaps the most common process
    for dealing with uncertainty. Let’s dive a little deeper into averaging to see
    if we can become more confident that it is the correct path.
  prefs: []
  type: TYPE_NORMAL
- en: '***Solving a Simplified Version of Our Problem***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s simplify our snowfall problem a bit: rather than imagining all possible
    depths of snow, imagine the snow falling into nice, uniform blocks so that your
    yard forms a simple two-dimensional grid. [Figure 10-1](ch10.xhtml#ch10fig01)
    shows this perfectly even, 6-inch-deep snowfall, visualized from the side (rather
    than as a bird’s-eye view).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Visualizing a perfectly uniform, discrete snowfall*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the perfect scenario. We don’t have an unlimited number of possible
    measurements; instead, we sample our six possible locations, and each location
    has only one possible measurement—6 inches. Obviously, averaging works in this
    case, because no matter how we sample from this data, our answer will always be
    6 inches.
  prefs: []
  type: TYPE_NORMAL
- en: Compare that to [Figure 10-2](ch10.xhtml#ch10fig02), which illustrates the data
    when we include the windblown snow against the left side of your house.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Representing the snow shifted by the wind*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, rather than having a nice, smooth surface, we’ve introduced some uncertainty
    into our problem. Of course, we’re cheating because we can easily count each block
    of snow and know exactly how much snow has fallen, but we can use this example
    to explore how we would reason about an uncertain situation. Let’s start investigating
    our problem by measuring each of the blocks in your yard:'
  prefs: []
  type: TYPE_NORMAL
- en: 8, 7, 6, 6, 5, 4
  prefs: []
  type: TYPE_NORMAL
- en: Next, we want to associate some probabilities with each value. Since we’re cheating
    and know the true value of the snowfall is 6 inches, we’ll also record the difference
    between the observation and the true value, known as the *error* value (see [Table
    10-1](ch10.xhtml#ch10tab01)).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-1:** Our Observations, and Their Frequencies and Differences from
    Truth'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Observation** | **Difference from truth** | **Probability** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 2 | 1/6 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 1 | 1/6 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0 | 2/6 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | –1 | 1/6 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | –2 | 1/6 |'
  prefs: []
  type: TYPE_TB
- en: 'Looking at the distance from the true measurement for each possible observation,
    we can see that the probability of overestimating by a certain value is balanced
    out by the probability of an undervalued measurement. For example, there is a
    1/6 probability of picking a measurement that is 2 inches higher than the true
    value, but there’s an equally probable chance of picking a measurement that is
    2 inches *lower* than the true measurement. This leads us to our first key insight
    into why averaging works: errors in measurement tend to cancel each other out.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Solving a More Extreme Case***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With such a smooth distribution of errors, the previous scenario might not have
    convinced you that errors cancel out in more complex situations. To demonstrate
    how this effect still holds in other cases, let’s look at a much more extreme
    example. Suppose the wind has blown 21 inches of snow to one of the six squares
    and left only 3 inches at each of the remaining squares, as shown in [Figure 10-3](ch10.xhtml#ch10fig03).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/10fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: A more extreme case of wind shifting the snow*'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a very different distribution of snowfall. For starters, unlike
    the preceding example, none of the values we can sample from have the true level
    of snowfall. Also, our errors are no longer nicely distributed—we have a bunch
    of lower-than-anticipated measurements and one extremely high measurement. [Table
    10-2](ch10.xhtml#ch10tab02) shows the possible measurements, the difference from
    the true value, and the probability of each measurement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-2:** Observations, Differences, and Probabilities for Our Extreme
    Example'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Observation** | **Difference from truth** | **Probability** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 21 | 15 | 1/6 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | –3 | 5/6 |'
  prefs: []
  type: TYPE_TB
- en: 'We obviously can’t just match up one observation’s error value with another’s
    and have them cancel out. However, we can use probability to show that even in
    this extreme distribution, our errors still cancel each other out. We can do this
    by thinking of each error measurement as a value that’s being voted on by our
    data. The probability of each error observed is how strongly we believe in that
    error. When we want to combine our observations, we can consider the probability
    of the observation as a value representing the strength of its vote toward the
    final estimate. In this case, the error of –3 inches is five times more likely
    than the error of 15 inches, so –3 gets weighted more heavily. So, if we were
    taking a vote, –3 would get five votes, whereas 15 would only get one vote. We
    combine all of the votes by multiplying each value by its probability and adding
    them together, giving us a *weighted sum*. In the extreme case where all the values
    are the same, we would just have 1 multiplied by the value observed and the result
    would just be that value. In our example, we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0098-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The errors in each observation cancel out to 0! So, once again, we find that
    it doesn’t matter if none of the possible values is a true measurement or if the
    distribution of errors is uneven. When we weight our observations by our belief
    in that observation, the errors tend to cancel each other out.
  prefs: []
  type: TYPE_NORMAL
- en: '***Estimating the True Value with Weighted Probabilities***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We are now fairly confident that errors from our true measurements cancel out.
    But we still have a problem: we’ve been working with the errors from the true
    observation, but to use these we need to know the true value. When we don’t know
    the true value, all we have to work with are our observations, so we need to see
    if the errors still cancel out when we have the weighted sum of our original observations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate that our method works, we need some “unknown” true values. Let’s
    start with the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: 2, 1, –1, –2
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the true measurement is unknown, we’ll represent it with the variable
    *t*, then add the error. Now we can weight each of these observations by its probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0098-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All we’ve done here is add our error to our constant value *t*, which represents
    our true measure, then weight each of the results by its probability. We’re doing
    this to see if we can still get our errors to cancel out and leave us with just
    the value *t*. If so, we can expect errors to cancel out even when we’re just
    averaging raw observations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to apply the probability weight to the values in our terms
    to get one long summation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0099-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we reorder these terms so that all the errors are together, we can see
    that our errors will still cancel out, and the weighted *t* value sums up to just
    *t,* our unknown true value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0099-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows that even when we define our measurements as an unknown true value
    *t* and add some error value, the errors still cancel out! We are left with just
    the *t* in the end. Even when we don’t know what our true measurement or true
    error is, when we average our values the errors tend to cancel out.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, we typically can’t sample the entire space of possible measurements,
    but the more samples we have, the more the errors are going to cancel out and,
    in general, the closer our estimate will be to the true value.
  prefs: []
  type: TYPE_NORMAL
- en: '***Defining Expectation, Mean, and Averaging***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'What we’ve arrived at here is formally called the *expectation* or *mean* of
    our data. It is simply the sum of each value weighted by its probability. If we
    denote each of our measurements as *x[i]* and the probability of each measurement
    as *p[i]*, we mathematically define the mean—which is generally represented by
    μ (the lowercase Greek letter mu)—as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0099-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To be clear, this is the *exact* same calculation as the averaging we learned
    in grade school, just with notation to make the use of probability more explicit.
    As an example, to average four numbers, in school we wrote it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0099-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'which is identical to writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0100-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'or we can just say *p[i]* = 1/4 and write it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0100-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So even though the mean is really just the average nearly everyone is familiar
    with, by building it up from the principles of probability, we see *why* averaging
    our data works. No matter how the errors are distributed, the probability of errors
    at one extreme is canceled out by probabilities at the other extreme. As we take
    more samples, the averages are more likely to cancel out and we start to approach
    the true measurement we’re looking for.
  prefs: []
  type: TYPE_NORMAL
- en: '**Means for Measurement vs. Means for Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve been using our mean to estimate a true measurement from a distribution
    of observations with some added error. But the mean is often used as a way to
    *summarize* a set of data. For example, we might refer to things like:'
  prefs: []
  type: TYPE_NORMAL
- en: The mean height of a person
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The average price of a home
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The average age of a student
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all of these cases, we aren’t using mean as a parameter estimate for a single
    true measurement; instead, we’re summarizing the properties of a population. To
    be precise, we’re estimating a parameter of some abstract property of these populations
    that may not even be real. Even though mean is a very simple and well-known parameter
    estimate, it can be easily abused and lead to strange results.
  prefs: []
  type: TYPE_NORMAL
- en: 'A fundamental question you should always ask yourself when averaging data is:
    “What exactly am I trying to measure and what does this value really mean?” For
    our snowfall example, the answer is easy: we’re trying to estimate how much snow
    actually fell last night before the wind blew it around. However, when we’re measuring
    the “average height,” the answer is less clear. There is no such thing as an average
    person, and the differences in heights we observe aren’t errors—they’re truly
    different heights. A person isn’t 5’5” because part of their height drifted onto
    a 6’3” person!'
  prefs: []
  type: TYPE_NORMAL
- en: If you were building an amusement park and wanted to know what height restrictions
    to put on a roller coaster so that at least half of all visitors could ride it,
    then you have a real value you are trying to measure. However, in that case, the
    mean suddenly becomes less helpful. A better measurement to estimate is the probability
    that someone entering your park will be taller than *x*, where *x* is the minimum
    height to ride a roller coaster.
  prefs: []
  type: TYPE_NORMAL
- en: All of the claims I’ve made in this chapter assume we are talking about trying
    to measure a specific value and using the average to cancel the errors out. That
    is, we’re using averaging as a form of parameter estimation, where our parameter
    is an actual value that we simply can never know. While averaging can also be
    useful to summarize large sets of data, we can no longer use the intuition of
    “errors canceling out” because the variation in the data is genuine, meaningful
    variation and not error in a measurement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wrapping Up**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned that you can trust your intuition about averaging
    out your measurements in order to make a best estimate of an unknown value. This
    is true because errors tend to cancel out. We can formalize this notion of averaging
    into the idea of the expectation or mean. When we calculate the mean, we are weighting
    all of our observations by the probability of observing them. Finally, even though
    averaging is a simple tool to understand, we should always identify and understand
    what we’re trying to determine by averaging; otherwise, our results may end up
    being invalid.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try answering the following questions to see how well you understand averaging
    to estimate an unknown measurement. The solutions can be found at *[https://nostarch.com/learnbayes/](https://nostarch.com/learnbayes/)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to get errors that don’t quite cancel out the way we want. In
    the Fahrenheit temperature scale, 98.6 degrees is the normal body temperature
    and 100.4 degrees is the typical threshold for a fever. Say you are taking care
    of a child that feels warm and seems sick, but you take repeated readings from
    the thermometer and they all read between 99.5 and 100.0 degrees: warm, but not
    quite a fever. You try the thermometer yourself and get several readings between
    97.5 and 98\. What could be wrong with the thermometer?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given that you feel healthy and have traditionally had a very consistently normal
    temperature, how could you alter the measurements 100, 99.5, 99.6, and 100.2 to
    estimate if the child has a fever?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
