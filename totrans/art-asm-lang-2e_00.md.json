["```\nprogram helloWorld;\n#include( \"stdlib.hhf\" );\n\nbegin helloWorld;\n\n    stdout.put( \"Hello, World of Assembly Language\", nl );\n\nend helloWorld;\n```", "```\nstdout.put\n     (\n          \"Hello, World of Assembly Language\",\n          nl\n     );\n```", "```\nstdout.put\n     (\n          \"Hello, \"\n          \"World of Assembly Language\",\n          nl\n     );\n```", "```\nstdout.put( \"Hello, World of Assembly Language\" nl );\n```", "```\nhla hw.hla\n```", "```\nhw\n```", "```\n./hw\n```", "```\nProgram DemoVars;\n#include( \"stdlib.hhf\" )\n\nstatic\n    InitDemo:       int32 := 5;\n    NotInitialized: int32;\n\nbegin DemoVars;\n\n    // Display the value of the pre-initialized variable:\n\n    stdout.put( \"InitDemo's value is \", InitDemo, nl );\n\n    // Input an integer value from the user and display that value:\n\n    stdout.put( \"Enter an integer value: \" );\n    stdin.get( NotInitialized );\n    stdout.put( \"You entered: \", NotInitialized, nl );\n\nend DemoVars;\n```", "```\nstatic\n     BoolVar:     boolean;\n     HasClass:    boolean := false;\n     IsClear:     boolean := true;\n```", "```\nstdout.put( BoolVar )\n```", "```\nstatic\n     c: char;\n     LetterA: char := 'A';\n```", "```\nMemory: array [0..4294967295] of byte;\n```", "```\nbyte Memory[4294967296];\n```", "```\nstatic\n     i8          :int8;\n     i16         :int16;\n     i32         :int32;\n```", "```\nmov( *`source_operand`*, *`destination_operand`* );\n```", "```\n*`destination_operand`* = *`source_operand`* ;\n```", "```\nadd( *`source_operand`*, *`destination_operand`* );\n     sub( *`source_operand`*, *`destination_operand`* );\n```", "```\n*`destination_operand`* = *`destination_operand`* + *`source_operand`* ;\n     *`destination_operand`* += *`source_operand`*;  // For those who prefer C syntax.\n```", "```\n*`destination_operand`* = *`destination_operand`* - *`source_operand`* ;\n     *`destination_operand`* -= *`source_operand`* ;  // For C fans.\n```", "```\nprogram DemoMOVaddSUB;\n\n#include( \"stdlib.hhf\" )\n\nstatic\n    i8:     int8    := −8;\n    i16:    int16   := −16;\n    i32:    int32   := −32;\n\nbegin DemoMOVaddSUB;\n\n    // First, print the initial values\n    // of our variables.\n\n    stdout.put\n    (\n        nl,\n        \"Initialized values: i8=\", i8,\n        \", i16=\", i16,\n        \", i32=\", i32,\n        nl\n    );\n\n    // Compute the absolute value of the\n    // three different variables and\n    // print the result.\n    // Note: Because all the numbers are\n    // negative, we have to negate them.\n    // Using only the mov, add, and sub\n    // instructions, we can negate a value\n    // by subtracting it from zero.\n\n    mov( 0, al );   // Compute i8 := -i8;\n    sub( i8, al );\n    mov( al, i8 );\n\n    mov( 0, ax );   // Compute i16 := -i16;\n    sub( i16, ax );\n    mov( ax, i16 );\n\n    mov( 0, eax );  // Compute i32 := -i32;\n    sub( i32, eax );\n    mov( eax, i32 );\n\n    // Display the absolute values:\n\n    stdout.put\n    (\n        nl,\n        \"After negation: i8=\", i8,\n        \", i16=\", i16,\n        \", i32=\", i32,\n        nl\n    );\n\n    // Demonstrate add and constant-to-memory\n    // operations:\n\n    add( 32323200, i32 );\n    stdout.put( nl, \"After add: i32=\", i32, nl );\n\nend DemoMOVaddSUB;\n```", "```\nflag_specification\n!flag_specification\nregister\n!register\nBoolean_variable\n!Boolean_variable\nmem_reg relop mem_reg_const\nregister in LowConst..HiConst\nregister not in LowConst..HiConst\n```", "```\n@c\nBool_var\nal\nesi\neax < ebx\nebx > 5\ni32 < −2\ni8 > 128\nal < i8\neax in 1..100\nch not in 'a'..'z'\n```", "```\nif( eax = 0 ) then\n\n     stdout.put( \"error: NULL value\", nl );\n\nendif;\n```", "```\nif( eax = 0 ) then\n\n     stdout.put( \"error: NULL pointer encountered\", nl );\n\nelse\n\n     stdout.put( \"Pointer is valid\", nl );\n\nendif;\n```", "```\nif( ch = 'a' ) then\n\n     stdout.put( \"You selected the 'a' menu item\", nl );\n\nelseif( ch = 'b' ) then\n\n     stdout.put( \"You selected the 'b' menu item\", nl );\n\nelseif( ch = 'c' ) then\n\n     stdout.put( \"You selected the 'c' menu item\", nl );\n\nelse\n\n     stdout.put( \"Error: illegal menu item selection\", nl );\n\nendif;\n```", "```\nif( eax > 0 && ch = 'a' ) then\n\n          mov( eax, ebx );\n          mov( ' ', ch );\n\n     endif;\n```", "```\n@z && al in 5..10\n     al in 'a'..'z' && ebx\n     boolVar && !eax\n```", "```\neax < 0  &&  ebx <> eax    &&    !ecx\n```", "```\n@z || al = 10\n     al in 'a'..'z' || ebx\n     !boolVar || eax\n```", "```\neax < 0  ||  ebx <> eax    ||   !ecx\n```", "```\neax < 0 || ebx <> eax  && !ecx\n```", "```\neax < 0 || (ebx <> eax  && !ecx)\n```", "```\n(eax < 0 || ebx <> eax)  && !ecx\n```", "```\n!( eax < 0 )\n```", "```\nmov( 0, i );\nwhile( i < 10 ) do\n\n     stdout.put( \"i=\", i, nl );\n     add( 1, i );\n\nendwhile;\n```", "```\nfor( *`Initial_Stmt`*; *`Termination_Expression`*; *`Post_Body_Statement`* ) do\n\n     << Loop body >>\n\nendfor;\n```", "```\n*`Initial_Stmt`*;\nwhile( *`Termination_Expression`* ) do\n\n     << Loop body >>\n\n     *`Post_Body_Statement`*;\n\nendwhile;\n```", "```\nfor( mov( 0, i ); i < 10; add(1, i )) do\n\n     stdout.put( \"i=\", i, nl );\n\nendfor;\n```", "```\nmov( 0, i );\nwhile( i < 10 ) do\n\n     stdout.put( \"i=\", i, nl );\n\n     add( 1, i );\n\nendwhile;\n```", "```\nmov( 10, ecx );\nrepeat\n\n     stdout.put( \"ecx = \", ecx, nl );\n     sub( 1, ecx );\n\nuntil( ecx = 0 );\n```", "```\nforever\n\n     stdout.put( \"Enter an integer less than 10: \");\n     stdin.get( i );\n     breakif( i < 10 );\n     stdout.put( \"The value needs to be less than 10!\", nl );\n\nendfor;\n```", "```\nrepeat\n\n     mov( false, GoodInteger );   // Note: GoodInteger must be a boolean var.\n     try\n\n          stdout.put( \"Enter an integer: \" );\n          stdin.get( i );\n          mov( true, GoodInteger );\n\n     exception( ex.ConversionError );\n\n          stdout.put( \"Illegal numeric value, please re-enter\", nl );\n\n     exception( ex.ValueOutOfRange );\n\n          stdout.put( \"Value is out of range, please re-enter\", nl );\n\n     endtry;\n\nuntil( GoodInteger );\n```", "```\nstdout.put( \"Hello World\", nl );\n```", "```\ntestpgm <input.data\n                    testpgm >output.txt\n                    testpgm <in.txt >output.txt\n```", "```\nstdout.newln();\n```", "```\nstdout.puti8( 123 );\n                    stdout.puti16( dx );\n                    stdout.puti32( i32Var );\n```", "```\nstdout.puti8Size( *`Value8`*, *`width`*, *`padchar`* );\n                    stdout.puti16Size( *`Value16`*, *`width`*, *`padchar`* );\n                    stdout.puti32Size( *`Value32`*, *`width`*, *`padchar`* );\n```", "```\nprogram NumsInColumns;\n\n#include( \"stdlib.hhf\" )\n\nvar\n    i32:    int32;\n    ColCnt: int8;\n\nbegin NumsInColumns;\n\n    mov( 96, i32 );\n    mov( 0, ColCnt );\n    while( i32 > 0 ) do\n\n        if( ColCnt = 8 ) then\n\n            stdout.newln();\n            mov( 0, ColCnt );\n\n        endif;\n        stdout.puti32Size( i32, 5, ' ' );\n        sub( 1, i32 );\n        add( 1, ColCnt );\n\n    endwhile;\n    stdout.newln();\n\nend NumsInColumns;\n```", "```\nstdout.put( *`list_of_values_to_output`* );\n```", "```\n*`value`*\n*`value`*:*`width`*\n```", "```\nprogram NumsInColumns2;\n\n#include( \"stdlib.hhf\" )\n\nvar\n    i32:    int32;\n    ColCnt: int8;\n\nbegin NumsInColumns2;\n\n    mov( 96, i32 );\n    mov( 0, ColCnt );\n    while( i32 > 0 ) do\n\n        if( ColCnt = 8 ) then\n\n            stdout.newln();\n            mov( 0, ColCnt );\n\n        endif;\n        stdout.put( i32:5 );\n        sub( 1, i32 );\n        add( 1, ColCnt );\n\n    endwhile;\n    stdout.put( nl );\n\nend NumsInColumns2;\n```", "```\nprogram charInput;\n\n#include( \"stdlib.hhf\" )\n\nvar\n    counter: int32;\n\nbegin charInput;\n\n    // The following repeats as long as the user\n    // confirms the repetition.\n\n    repeat\n\n        // Print out 14 values.\n\n        mov( 14, counter );\n        while( counter > 0 ) do\n\n            stdout.put( counter:3 );\n            sub( 1, counter );\n\n        endwhile;\n\n        // Wait until the user enters 'y' or 'n'.\n\n        stdout.put( nl, nl, \"Do you wish to see it again? (y/n):\" );\n        forever\n\n            stdin.readLn();\n            stdin.getc();\n            breakif( al = 'n' );\n            breakif( al = 'y' );\n            stdout.put( \"Error, please enter only 'y' or 'n': \" );\n\n        endfor;\n        stdout.newln();\n\n    until( al = 'n' );\n\nend charInput;\n```", "```\nprogram intInput;\n\n#include( \"stdlib.hhf\" )\n\nvar\n    i8:     int8;\n    i16:    int16;\n    i32:    int32;\n\nbegin intInput;\n\n    // Read integers of varying sizes from the user:\n\n    stdout.put( \"Enter a small integer between −128 and +127: \" );\n    stdin.geti8();\n    mov( al, i8 );\n\n    stdout.put( \"Enter a small integer between −32768 and +32767: \" );\n    stdin.geti16();\n    mov( ax, i16 );\n\n    stdout.put( \"Enter an integer between +/− 2 billion: \" );\n    stdin.geti32();\n    mov( eax, i32 );\n\n    // Display the input values.\n\n    stdout.put\n    (\n        nl,\n        \"Here are the numbers you entered:\", nl, nl,\n        \"Eight-bit integer: \", i8:12, nl,\n        \"16-bit integer:    \", i16:12, nl,\n        \"32-bit integer:    \", i32:12, nl\n    );\n\nend intInput;\n```", "```\nstdout.put( \"Enter a small integer between −128 and +127: \" );\nstdin.geti8();\nmov( al, i8 );\n\nstdout.put( \"Enter a small integer between −32768 and +32767: \" );\nstdin.geti16();\nmov( ax, i16 );\n```", "```\nstdout.put( \"Enter two integer values: \" );\nstdin.geti32();\nmov( eax, intval );\nstdin.geti32();\nmov( eax, AnotherIntVal );\n```", "```\nstdout.put( \"Enter two integer values: \" );\nstdin.geti32();\nmov( eax, intval );\nstdin.geti32();\nmov( eax, AnotherIntVal );\n```", "```\nstdout.put( \"Enter two integer values: \" );\nstdin.get( intval, AnotherIntVal );\n```", "```\nprogram testBadInput;\n#include( \"stdlib.hhf\" )\n\nstatic\n    u:      int32;\n\nbegin testBadInput;\n\n    try\n\n        stdout.put( \"Enter a signed integer:\" );\n        stdin.get( u );\n        stdout.put( \"You entered: \", u, nl );\n\n      exception( ex.ConversionError )\n\n        stdout.put( \"Your input contained illegal characters\" nl );\n\n      exception( ex.ValueOutOfRange )\n\n        stdout.put( \"The value was too large\" nl );\n\n    endtry;\n\nend testBadInput;\n```", "```\nprogram testBadInput2;\n#include( \"stdlib.hhf\" )\n\nstatic\n    u:      int32;\n\nbegin testBadInput2;\n\n    try\n\n        try\n\n            stdout.put( \"Enter a signed integer: \" );\n            stdin.get( u );\n            stdout.put( \"You entered: \", u, nl );\n\n          exception( ex.ConversionError )\n\n            stdout.put( \"Your input contained illegal characters\" nl );\n\n        endtry;\n\n        stdout.put( \"Input did not fail due to a value out of range\" nl );\n\n      exception( ex.ValueOutOfRange )\n\n        stdout.put( \"The value was too large\" nl );\n\n    endtry;\n\nend testBadInput2;\n```", "```\nprogram testBadInput3;\n#include( \"stdlib.hhf\" )\n\nstatic\n    input:  int32;\n\nbegin testBadInput3;\n\n    // This forever loop repeats until the user enters\n    // a good integer and the break statement below\n    // exits the loop.\n\n    forever\n\n        try\n\n            stdout.put( \"Enter an integer value: \" );\n            stdin.get( input );\n            stdout.put( \"The first input value was: \", input, nl );\n            break;\n\n          exception( ex.ValueOutOfRange )\n\n            stdout.put( \"The value was too large, re-enter.\" nl );\n\n          exception( ex.ConversionError )\n\n            stdout.put( \"The input contained illegal characters, re-enter.\" nl );\n\n        endtry;\n\n    endfor;\n\n    // Note that the following code is outside the loop and there\n    // is no try..endtry statement protecting this code.\n\n    stdout.put( \"Enter another number: \" );\n    stdin.get( input );\n    stdout.put( \"The new number is: \", input, nl );\n\nend testBadInput3;\n```", "```\nprogram testBadInput4;\n#include( \"stdlib.hhf\" )\n\nstatic\n    input:  int32;\n\nbegin testBadInput4;\n\n    // This forever loop repeats until the user enters\n    // a good integer and the break statement below\n    // exits the loop. Note that the break statement\n    // appears in an unprotected section of the try..endtry\n    // statement.\n\n    forever\n\n        try\n\n            stdout.put( \"Enter an integer value: \" );\n            stdin.get( input );\n            stdout.put( \"The first input value was: \", input, nl );\n\n          unprotected\n\n            break;\n\n          exception( ex.ValueOutOfRange )\n\n            stdout.put( \"The value was too large, re-enter.\" nl );\n\n          exception( ex.ConversionError )\n\n            stdout.put( \"The input contained illegal characters, re-enter.\" nl );\n\n        endtry;\n\n    endfor;\n\n    // Note that the following code is outside the loop and there\n    // is no try..endtry statement protecting this code.\n\n    stdout.put( \"Enter another number: \" );\n    stdin.get( input );\n    stdout.put( \"The new number is: \", input, nl );\n\nend testBadInput4;\n```", "```\nstatic\n     sum: int32;\n          .\n          .\n          .\n     mov( 0, sum );\n     for( mov( 0, ebx ); ebx < 8; inc( ebx )) do\n\n          push( ebx );  // Must preserve ebx in case there is an exception.\n          forever\n               try\n\n                    stdin.geti32();\n                    unprotected break;\n\n                 exception( ex.ConversionError )\n\n                    stdout.put( \"Illegal input, please re-enter value: \" );\n\n               endtry;\n          endfor;\n          pop( ebx );  // Restore ebx's value.\n          add( ebx, eax );\n          add( eax, sum );\n\n     endfor;\n```"]