- en: Chapter 2. Using Kali Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use Kali Linux as the attack platform throughout this book. Kali, the
    successor to the popular BackTrack Linux, is a Debian-based distribution that
    comes with a plethora of penetration testing tools preinstalled and preconfigured.
    Anyone who’s ever tried to set up a pentesting box from scratch the day before
    a big engagement knows that getting everything working correctly can be a real
    pain. Having everything preconfigured in Kali can save a lot of time and headaches.
    Kali Linux works just like the standard Debian GNU/Linux distribution, with a
    lot of extra tools.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than point and click your way through Kali, you’ll use the Linux command
    line because that’s where the real power lies. In this chapter we’ll look at how
    to perform some common Linux tasks from the command line. If you’re already a
    Linux expert, you can skip this chapter and move on to [Chapter 3](ch03.xhtml
    "Chapter 3. Programming"); if not, take some time and dive in.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Command Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Linux command line looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Like a DOS prompt or the Mac OS terminal, the Linux command line gives you access
    to a command processor called Bash that allows you to control the system by entering
    text-based instructions. When you open the command line you’ll see the prompt
    `root@kali#`. *Root* is the superuser on Linux systems, and it has complete control
    of Kali.
  prefs: []
  type: TYPE_NORMAL
- en: To perform operations in Linux, you enter commands along with any relevant options.
    For example, to view the contents of root’s home directory, enter the command
    **`ls`** as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there’s not much in the root directory, only a folder called
    *Desktop*.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Linux world, everything is a file: keyboards, printers, network devices—everything.
    All files can be viewed, edited, deleted, created, and moved. The Linux filesystem
    is made up of a series of directories that branch off from the root of the filesystem
    (`/`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see your current directory, enter **`pwd`** at the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Changing Directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To move to another directory, enter `cd` *`directory`* using either the absolute
    or relative path to the new directory, based your current location. The *absolute
    path* is the path to a file in relation to the root directory (`/`). For example,
    to change to your desktop from anywhere, you could enter the absolute path to
    the desktop with `cd /root/Desktop` to reach the root user’s desktop. If you were
    in the directory */root* (the root user’s home directory), you could use the *relative
    path* to the desktop (that is, relative to your current location) by entering
    `cd Desktop`, which would also take you to the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: The command `cd ..` takes you back one level in the filesystem, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Entering `cd ..` from root’s *Desktop* directory takes us back to root’s home
    directory. Entering `cd ../etc` from there moves us back up to the root of the
    filesystem and then to the */etc* directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Learning About Commands: The Man Pages'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about a command and its options and arguments, you can view its
    documentation (called its *manual page*, or *man page*) by entering `man` *`command`*.
    For example, to learn more about the `ls` command enter **`man ls`** as shown
    in [Example 2-1](ch02.xhtml#linux_man_page "Example 2-1. Linux man page").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-1. Linux man page
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The man page gives useful (if a bit unfriendly looking) information about the
    `ls` command including its usage ❶, description ❷, and available options ❸.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the description section at ❷, the `ls` command lists all files
    in the current working directory by default, but you can also use `ls` to get
    information about a particular file. For example, according to the man page you
    can use the `-a` option with `ls` to show all files, including *hidden directories*—directories
    not shown in the default `ls` listing—as shown in [Example 2-2](ch02.xhtml#using_an_option_with_ls
    "Example 2-2. Using an option with ls").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-2. Using an option with `ls`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are several hidden directories in the root directory,
    all of which are preceded by a period (`.`) character. (In [Chapter 8](ch08.xhtml
    "Chapter 8. Exploitation"), we’ll see how these sometimes-hidden directories can
    lead to a system compromise.) You can also see the entries `.` and `..`, which
    denote the current directory and the parent directory, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: User Privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux user accounts offer resources to a particular individual or service. A
    user may log in with a password and be offered certain resources on the Linux
    system, such as the ability to write files and browse the Internet. That user
    may not be able to see files that belong to other users and can have reasonable
    assurance that other users can’t see his or her files either. In addition to traditional
    user accounts used by a person who logs in with a password and accesses the system,
    Linux systems can allow software to have a user account. The software can have
    the ability to use system resources to do its job, but it cannot read other users’
    private files. The accepted best practice on Linux systems is to run day-to-day
    commands as an unprivileged user account instead of running everything as the
    privileged root user to avoid inadvertently harming your system or granting excessive
    privilege to the commands and applications you run.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a User
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Kali offers only the privileged root account. Though many security
    tools require root privileges to run, you may want to add another unprivileged
    account for everyday use to reduce the potential for damage to your system. Remember,
    the root account can do anything on Linux, including corrupting all of your files.
  prefs: []
  type: TYPE_NORMAL
- en: To add a new user *georgia* to your Kali system use the `adduser` command, as
    shown in [Example 2-3](ch02.xhtml#adding_a_new_user "Example 2-3. Adding a new
    user").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-3. Adding a new user
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in addition to adding a user to the system, a group *georgia*
    is created, a new user is added to this group ❶, a home directory is created for
    the user ❷, and the system prompts for information about the user, such as a password
    ❸ and the user’s full name ❹.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a User to the sudoers File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to do something that requires root privileges as a regular user,
    use the `sudo` command along with the command that you want to run as root, and
    then enter your password. For the newly created user *georgia* to be able to run
    privileged commands you need to add her to the *sudoers* file, which specifies
    which users can use the `sudo` command. To do so, enter **`adduser`** `username`
    **`sudo`** as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Switching Users and Using sudo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To switch users in your terminal session, say from the root user to *georgia*,
    use the `su` command as shown in [Example 2-4](ch02.xhtml#switching_to_a_different_user
    "Example 2-4. Switching to a different user").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-4. Switching to a different user
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You switch users with the `su` command. If you try to run commands (such as
    the `adduser` command) that require more privileges than the current user (*georgia*),
    the command is unsuccessful (`command not found`) ❶ because you can run the `adduser`
    command only as root.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, as discussed previously, you can use the `sudo` command to run a command
    as root. Because the *georgia* user is a member of the `sudo` group, you can run
    privileged commands, and you can see user *john* is added ❷ to the system.
  prefs: []
  type: TYPE_NORMAL
- en: To change back to the root user, enter the `su` command with no username. You
    will be prompted for the root’s password (*toor*).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New File or Directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a new, empty file called *myfile*, use the `touch` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To create a new directory in your current working directory, enter **`mkdir`**
    `directory` as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Use **`ls`** to confirm that the new directory has been created, and then change
    to *mydirectory* using **`cd`**.
  prefs: []
  type: TYPE_NORMAL
- en: Copying, Moving, and Removing Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To copy a file, use the `cp` command as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is `cp` *`source destination`*. When using `cp`, the original file
    is left in place, and a copy is made at the desired destination.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can move a file from one location to another using the `mv` command.
    The syntax is identical to `cp`, but this time the file is removed from the source
    location.
  prefs: []
  type: TYPE_NORMAL
- en: You can remove a file from the filesystem by entering `rm` *`file`*. To remove
    files recursively use the `-r` command.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when removing files, particularly recursively! Some hackers joke
    that the first command to teach Linux beginners is `rm -rf` from the root directory,
    which forcibly deletes the entire filesystem. This teaches new users the power
    of performing actions as root. Don’t try that at home!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Text to a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `echo` command echoes what you enter to the terminal, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To save text to a file, you can redirect your input to a file instead of to
    the terminal with the `>` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To see the contents of your new file you can use the `cat` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now echo a different line of text into *myfile* as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `>` overwrites the previous contents of the file. If you echo another line
    into *myfile*, that new line overwrites the output of the previous command. As
    you can see, the contents of *myfile* now reads *hello georgia again*.
  prefs: []
  type: TYPE_NORMAL
- en: Appending Text to a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To append text to a file, use `>>` as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, appending preserves the previous contents of the file.
  prefs: []
  type: TYPE_NORMAL
- en: File Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look at the long output of `ls -l` on *myfile*, you can see the current
    permissions for *myfile*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: From left to right you see the file type and permissions (`-rw-r—r--`), the
    number of links to the file (1), the user and group that own the file (root),
    the file size (47 bytes), the last time the file was edited (April 23, 21:15),
    and finally the filename (*myfile*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux files have permissions to read (`r`), write (`w`), and execute (`x`)
    and three sets of user permissions: permissions for the owner, the group, and
    all users. The first three letters denote the permissions for the owner, the following
    three denote the permissions for the group, and the final three denote the permissions
    for all users. Since you created *myfile* from the root user account, the file
    is owned by user *root* and group *root*, as you can see in the output with `root
    root`. User root has read and write permissions for the file (`rw`). Other users
    in the group, if there are any, can read the file (`r`) but not write to or execute
    it. The last `r` shows that all users on the filesystem can read the file.'
  prefs: []
  type: TYPE_NORMAL
- en: To change permissions on a file, use the `chmod` command. You can use `chmod`
    to specify permissions for the owner, the group, and the world. When specifying
    permissions use the numbers from 0 through 7 as shown in [Table 2-1](ch02.xhtml#linux_file_permissions
    "Table 2-1. Linux File Permissions").
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-1. Linux File Permissions
  prefs: []
  type: TYPE_NORMAL
- en: '| Integer Value | Permissions | Binary Representation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | full | 111 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | read and write | 110 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | read and execute | 101 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | read only | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | write and execute | 011 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | write only | 010 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | execute only | 001 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | none | 000 |'
  prefs: []
  type: TYPE_TB
- en: 'When entering new file permissions, you use one digit for the owner, one for
    the group, and one for world. For example, to give the owner full permissions
    but the group and the world no permissions to read, write, or execute a file,
    use **`chmod 700`** like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now when you run the `ls -l` command on *myfile*, you can see that root has
    read, write, and execute (`rwx`) permissions and the other sets are blank ❶. If
    you try to access the file as any user other than root, you’ll get a permission
    denied error.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps no debate brings out such passion among Linux users as which is the
    best file editor. We’ll look at the basics of using two popular editors, vi and
    nano, beginning with my favorite, nano.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Once in nano you can begin adding text to a new file called *testfile.txt*.
    When you open nano, you should see a blank file with help information for nano
    shown at the bottom of the screen, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To add text to the file, just start typing.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To search for text in a file, use ctrl-W, and then enter the text to search
    for at the search prompt as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Nano should find the text *georgia* if the word is in the file. To exit, press
    ctrl-X. You will be prompted to save the file or lose the changes, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Enter **`Y`** to save the file. Now we’ll edit the file with the vi editor.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a File with vi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add the text in [Example 2-5](ch02.xhtml#editing_files_with_vi "Example 2-5. Editing
    files with vi") to *testfile.txt*. In addition to the contents of the file, at
    the bottom of the vi screen you see some information including the filename, number
    of lines, and the current cursor position (see [Example 2-5](ch02.xhtml#editing_files_with_vi
    "Example 2-5. Editing files with vi")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-5. Editing files with vi
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Unlike nano, you can’t just start editing the file once it is opened in vi.
    To edit a file, enter **`I`** to put vi into insert mode. You should see the word
    *INSERT* displayed at the bottom of your terminal. Once you’ve finished making
    changes, press esc to exit insert mode and return to command mode. Once in command
    mode, you can use commands to edit your text. For example, position the cursor
    at the line `we` and enter **`dd`** to delete the word `we` from the file.
  prefs: []
  type: TYPE_NORMAL
- en: To exit vi, enter :**`wq`** to tell vi to write the changes to the file and
    quit, as shown in [Example 2-6](ch02.xhtml#saving_changes_in_vi "Example 2-6. Saving
    changes in vi").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-6. Saving changes in vi
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about available commands for vi and nano, read the corresponding
    man pages.
  prefs: []
  type: TYPE_NORMAL
- en: Which editor you use daily is up to you. Throughout this book we’ll use nano
    to edit files, but feel free to substitute your editor of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Data Manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now for a bit of data manipulation. Enter the text in [Example 2-7](ch02.xhtml#example_list_for_data_manipulation
    "Example 2-7. Example list for data manipulation") in *myfile* using your desired
    text editor. The file lists some of my favorite security conferences and the months
    when they typically happen.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-7. Example list for data manipulation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using grep
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command `grep` looks for instances of a text string in a file. For example,
    to search for all instances of the string *September* in our file, enter **`grep`**
    **`September`** **`myfile`** as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `grep` tells us that Derbycon and Brucon are in September.
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose you want only the names of the conferences in September but not
    the number or the month. You can send the output of `grep` to another command
    for additional processing using a pipe (`|`). The `cut` command allows you to
    take each line of input, choose a delimiter, and print specific fields. For example,
    to get just the names of conferences that run in September you can `grep` for
    the word *September* as you did previously. Next, you pipe (`|`) the output to
    `cut`, where you specify a space as the delimiter with the `-d` option and say
    you want the second field with the field (`-f`) option, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The result, as you can see, is that by piping the two commands together you
    get just the conferences Derbycon and Brucon.
  prefs: []
  type: TYPE_NORMAL
- en: Using sed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another command for manipulating data is `sed`. Entire books have been written
    about using `sed`, but we’ll cover just the basics here with a simple example
    of finding a specific word and replacing it.
  prefs: []
  type: TYPE_NORMAL
- en: The `sed` command is ideal for editing files automatically based on certain
    patterns or expressions. Say, for instance, you have a very long file, and you
    need to replace every instance of a certain word. You can do this quickly and
    automatically with the `sed` command.
  prefs: []
  type: TYPE_NORMAL
- en: In the language of `sed`, a slash (`/`) is the delimiter character. For example,
    to replace all instances of the word *Blackhat* with *Defcon* in *myfile*, enter
    **`sed 's/Blackhat/Defcon/' myfile`**, as shown in [Example 2-8](ch02.xhtml#replacing_words_with_sed
    "Example 2-8. Replacing words with sed").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-8. Replacing words with `sed`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Pattern Matching with awk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another command line utility for pattern matching is the `awk` command. For
    example, if you want to find conferences numbered 6 or greater, you can use `awk`
    to search the first field for entries greater than 5, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Or, if you want only the first and third words in every line, you can enter
    **`awk '{print $1,$3;}' myfile`**, as shown in [Example 2-9](ch02.xhtml#selecting_certain_columns_with_awk
    "Example 2-9. Selecting certain columns with awk").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-9. Selecting certain columns with `awk`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve looked at only simple examples of using these data manipulation utilities
    in this section. To get more information, consult the man pages. These utilities
    can be powerful time-savers.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Installed Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Debian-based Linux distributions such as Kali Linux, you can use the Advanced
    Packaging Tool (`apt`) to manage packages. To install a package, enter **`apt-get
    install`** `package`. For example, to install Raphael Mudge’s front-end for Metasploit,
    Armitage, in Kali Linux, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s that easy: `apt` installs and configures Armitage for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Updates are regularly released for the tools installed on Kali Linux. To get
    the latest versions of the packages already installed, enter **`apt-get upgrade`**.
    The repositories Kali uses for packages are listed in the file */etc/apt/sources.list*.
    To add additional repositories, you can edit this file and then run the command
    `apt-get update` to refresh the database to include the new repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is built off the base install of Kali 1.0.6 unless otherwise noted
    in [Chapter 1](ch01.xhtml "Chapter 1. Setting Up Your Virtual Lab"), so in order
    to follow along with the book as is, don’t update Kali.
  prefs: []
  type: TYPE_NORMAL
- en: Processes and Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Kali Linux you can start, stop, or restart services using the `service` command.
    For example, to start the Apache web server, enter **`service apache2 start`**
    as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Likewise, to stop the MySQL database server, enter **`service mysql stop`**.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When setting up the Kali Linux virtual machines in [Chapter 1](ch01.xhtml "Chapter 1. Setting
    Up Your Virtual Lab"), you used the `ifconfig` command to view network information
    as shown in [Example 2-10](ch02.xhtml#viewing_networking_information_with_ifco
    "Example 2-10. Viewing networking information with ifconfig").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-10. Viewing networking information with `ifconfig`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: From the output of `ifconfig` you can glean a lot of information about your
    system’s network state. For one, the network interface is called `eth0` ❶. The
    IPv4 address (`inet addr`) that my Kali box uses to talk to the network is 192.168.20.9
    ❷ (yours will probably differ). An *IP address* is a 32-bit label assigned to
    devices in a network. The IP address is named up of 4 octets, or 8-bit parts.
  prefs: []
  type: TYPE_NORMAL
- en: The address’s *network mask*, or *netmask* (`Mask`), at ❸ identifies which parts
    of the IP address are part of the network and which parts belong to the host.
    In this case the netmask 255.255.255.0 tells you that the network is the first
    three octets, 192.168.20.
  prefs: []
  type: TYPE_NORMAL
- en: The *default gateway* is where your host routes traffic to other networks. Any
    traffic destined outside the local network will be sent to the default gateway
    for it to figure out where it needs to go.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `route` command output tells us that the default gateway is 192.168.20.1
    ❶. This makes sense because the system with the IP address 192.168.20.1 is the
    wireless router in my home network. Take note of your own default gateway for
    use in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a Static IP Address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, your network connection uses dynamic host configuration protocol
    (DHCP) to pull an IP address from the network. To set a static address, so that
    your IP address won’t change, you need to edit the file */etc/network/interfaces*.
    Use your preferred editor to open this file. The default configuration file is
    shown in [Example 2-11](ch02.xhtml#default_solidusetcsolidusnetworksolidusi "Example 2-11. The
    default /etc/network/interfaces file").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-11. The default /etc/network/interfaces file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: To give your system a static IP address you need to add an entry for the eth0
    interface. Add the text shown in [Example 2-12](ch02.xhtml#adding_a_static_ip_address
    "Example 2-12. Adding a static IP address") to */etc/network/interfaces* with
    the IP addresses changed to match your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-12. Adding a static IP address
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You set the IP address for eth0 as static at ❶. Use the IP address, netmask
    ❷, and gateway ❸ you found in the previous section to fill in the information
    in your file.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve made these changes, restart networking with `service` `networking
    restart` so that the newly added static networking information will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Network Connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To view network connections, listening ports, and so on, use the `netstat` command.
    For example, you can see the programs listening on TCP ports by issuing the command
    `netstat -antp`, as shown in [Example 2-13](ch02.xhtml#using_netstat_to_view_listening_ports
    "Example 2-13. Using netstat to view listening ports"). *Ports* are simply software-based
    network sockets that listen on the network to allow remote systems to interact
    with programs on a system.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-13. Using `netstat` to view listening ports
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You see that the Apache web server you started earlier in the chapter is listening
    on TCP port 80\. (See the man page for other `netstat` options.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Netcat: The Swiss Army Knife of TCP/IP Connections'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the man page notes, the Netcat tool is known as the Swiss Army knife for
    TCP/IP connections. It’s a versatile tool that we’ll utilize throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: To see Netcat’s various options enter **`nc -h`**, as shown in [Example 2-14](ch02.xhtml#netcat_help_information
    "Example 2-14. Netcat help information").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-14. Netcat help information
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Check to See If a Port Is Listening
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s have Netcat connect to a port to see if that port is listening for connections.
    You saw previously that the Apache web server is listening on port 80 on your
    Kali Linux system. Tell Netcat to attach to port 80 verbosely, or output rich,
    with the `-v` option as shown next. If you started Apache correctly, you should
    see the following when attempting to connect the service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, Netcat reports that port 80 is indeed listening (`open`) on
    the network. (We’ll look more at open ports and why they are interesting in [Chapter 5](ch05.xhtml
    "Chapter 5. Information Gathering")’s discussion of port scanning.)
  prefs: []
  type: TYPE_NORMAL
- en: You can also listen on a port for an incoming connection using Netcat, as shown
    next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You use the options `l` for listen, `v` for verbose, and `p` to specify the
    port to listen on.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open a second terminal window and use Netcat to connect to the Netcat
    listener.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Once you connect, enter the text **`hi georgia`**, and when you return to the
    listener’s terminal window, you see that a connection was received and your text
    was printed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Close down both Netcat processes by pressing CTRL-C.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a Command Shell Listener
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now for something a bit more interesting. When you set up your Netcat listener,
    use the `-e` flag to tell Netcat to execute */bin/bash* (or start a Bash command
    prompt) when a connection is received. This allows anyone who connects to the
    listener to execute commands on your system, as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Again, use a second terminal window to connect to the Netcat listener.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You can now issue Linux commands to be executed by the Netcat listener. The
    `whoami` Linux command will tell you the current logged-in user. In this case,
    because the Netcat process was started by the *root* user, your commands will
    be executed as *root*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a simple example because both your Netcat listener and the connection
    are on the same system. You could use another of your virtual machines, or even
    your host system, for this exercise as well.
  prefs: []
  type: TYPE_NORMAL
- en: Close down both Netcat processes again.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing a Command Shell Back to a Listener
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to listening on a port with a command shell, you can also push a
    command shell back to a Netcat listener. This time set up the Netcat listener
    without the `-e` flag as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now open a second terminal, and connect back to the Netcat listener you just
    created as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Connect with Netcat as usual, but this time use the `-e` flag to execute */bin/bash*
    on the connection. Back in your first terminal you see a connection as shown next,
    and if you enter terminal commands, you will see them executed. (We’ll learn more
    about listening with */bin/bash* on a local port and actively pushing */bin/bash*
    with a connection, known as *bind shells* and *reverse shells*, respectively,
    in [Chapter 4](ch04.xhtml "Chapter 4. Using the Metasploit Framework").)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now, one more thing with Netcat. This time, instead of outputting what comes
    into your listener to the screen, use `>` to send it to a file as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In the second terminal you set up Netcat to connect, but this time you use the
    `<` symbol to tell it to send the contents of a file (*myfile*) over the Netcat
    connection. Give Netcat a second or two to finish, and then examine the contents
    of the file *netcatfile* created by your first Netcat instance. The contents should
    be identical to *myfile*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You have used Netcat to transfer the file. In this case we’ve simply transferred
    the file from one directory to another, but you can imagine how this technique
    can be used to transfer files from system to system—a technique that often comes
    in handy in the post-exploitation phase of a pentest, once you have access to
    a system.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Tasks with cron Jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cron` command allows us to schedule tasks to automatically run at a specified
    time. In the */etc* directory in Kali, you can see several files and directories
    related to `cron`, as shown in [Example 2-15](ch02.xhtml#crontab_files "Example 2-15. crontab
    files").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-15. crontab files
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The *cron.daily*, *cron.hourly*, *cron.monthly*, and *cron.weekly* directories
    specify scripts that will run automatically, every day, every hour, every month,
    or every week, depending on which directory you put your script in.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more flexibility you can edit `cron`’s configuration file, */etc/crontab*.
    The default text is shown in [Example 2-16](ch02.xhtml#crontab_configuration_file
    "Example 2-16. crontab configuration file").
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-16. `crontab` configuration file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The fields in a `crontab` are, from left to right, the minute, hour, day of
    the month, month, day of the week, user who will run the command, and, finally,
    the command to be run. To run a command every day of the week, every hour, and
    so on, you use an asterisk (`*`) instead of specifying a value for the column.
  prefs: []
  type: TYPE_NORMAL
- en: For example, look at the first `crontab` line at ❶, which runs the hourly `cron`
    jobs specified in */etc/cron.hourly*. This `crontab` runs on the 17th minute of
    every hour every day of every month on every day of the week. The line at ❷ says
    that the daily `crontab` (*/etc/cron.daily*) will be run at the 25th minute of
    the 6th hour of every day of every month on every day of the week. (For more flexibility,
    you can add a line here instead of adding to the hourly, daily, weekly, or monthly
    lists.)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter we’ve looked at some common Linux tasks. Navigating the Linux
    filesystem, working with data, and running services are all skills that will serve
    you well as you move through the rest of this book. In addition, when attacking
    Linux systems, knowing which commands to run in a Linux environment will help
    you make the most of successful exploitation. You may want to automatically run
    a command periodically by setting up a `cron` job or use Netcat to transfer a
    file from your attack machine. You will use Kali Linux to run your attacks throughout
    this book, and one of your target systems is Ubuntu Linux, so having the basics
    in place will make learning pentesting come more naturally.
  prefs: []
  type: TYPE_NORMAL
