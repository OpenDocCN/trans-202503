["```\n'''\n\n    The Hello World Program in Python\n\n'''\n\n# Python math library\n\nfrom math import *\n\n# main function definition:\n\ndef main():\n\n    # statements on their own line\n\n    print(\"Hello World\")\n\n    print(\"sqrt(4) is %f\" % (sqrt(4)))\n\n # call the main function:\n\nmain()\n```", "```\n/*\n\n    The Hello World Program in C\n\n */\n\n/* C math and I/O libraries */\n\n#include <math.h>\n\n#include <stdio.h>\n\n/* main function definition: */\n\nint main() {\n\n    // statements end in a semicolon (;)\n\n    printf(\"Hello World\\n\");\n\n    printf(\"sqrt(4) is %f\\n\", sqrt(4));\n\n    return 0;  // main returns value 0\n\n}\n```", "```\n$ python hello.py\n```", "```\n$ gcc hello.c \n\n$ ./a.out\n```", "```\n$ gcc hello.c -lm\n```", "```\n$ vim hello.c\n```", "```\n$ gcc <input_source_file>\n```", "```\n$ gcc -o <output_executable_file> <input_source_file>\n```", "```\n$ gcc -o hello hello.c\n```", "```\n$ ./hello\n```", "```\n$ gcc -Wall -g -o hello hello.c\n```", "```\ntype_name variable_name;\n```", "```\n{\n\n    /* 1\\. Define variables in this block's scope at the top of the block. */\n\n    int x; // declares x to be an int type variable and allocates space for it\n\n    int i, j, k;  // can define multiple variables of the same type like this\n\n char letter;  // a char stores a single-byte integer value\n\n                  // it is often used to store a single ASCII character\n\n                  // value (the ASCII numeric encoding of a character)\n\n                  // a char in C is a different type than a string in C\n\n    float winpct; // winpct is declared to be a float type\n\n    double pi;    // the double type is more precise than float\n\n    /* 2\\. After defining all variables, you can use them in C statements. */\n\n    x = 7;        // x stores 7 (initialize variables before using their value)\n\n    k = x + 2;    // use x's value in an expression\n\n    letter = 'A';        // a single quote is used for single character value\n\n    letter = letter + 1; // letter stores 'B' (ASCII value one more than 'A')\n\n    pi = 3.1415926;\n\n    winpct = 11 / 2.0; // winpct gets 5.5, winpct is a float type\n\n    j = 11 / 2;        // j gets 5: int division truncates after the decimal\n\n    x = k % 2;         // % is C's mod operator, so x gets 9 mod 2 (1)\n\n}\n```", "```\n8     // the int value 8\n\n3.4   // the double value 3.4\n\n'h'   // the char value 'h' (its value is 104, the ASCII value of h)\n```", "```\nprintf(\"this is a C string\\n\");\n```", "```\n'h'  // this is a char literal value   (its value is 104, the ASCII value of h)\n\n\"h\"  // this is a string literal value (its value is NOT 104, it is not a char)\n```", "```\nint x;           // x is a signed int variable\n\nunsigned int y;  // y is an unsigned int variable\n```", "```\nprintf(\"number of bytes in an int: %lu\\n\", sizeof(int));\n\nprintf(\"number of bytes in a short: %lu\\n\", sizeof(short));\n```", "```\nnumber of bytes in an int: 4 \n\nnumber of bytes in a short: 2\n```", "```\n    variable = value of expression;   // e.g., x = 3 + 4;\n    ```", "```\n    variable op= expression;  // e.g., x += 3; is shorthand for x = x + 3;\n    ```", "```\n    variable++;   // e.g., x++; assigns to x the value of x + 1\n    ```", "```\n# Python formatted print example\n\ndef main():\n print(\"Name: %s,  Info:\" % \"Vijay\")\n\n    print(\"\\tAge: %d \\t Ht: %g\" %(20,5.9))\n\n    print(\"\\tYear: %d \\t Dorm: %s\" %(3, \"Alice Paul\"))\n\n# call the main function:\n\nmain()\n```", "```\n/* C printf example */\n\n#include <stdio.h> // needed for printf\n\nint main() {\n\n    printf(\"Name: %s,  Info:\\n\", \"Vijay\");\n\n    printf(\"\\tAge: %d \\t Ht: %g\\n\",20,5.9);\n\n    printf(\"\\tYear: %d \\t Dorm: %s\\n\",3,\"Alice Paul\");\n\n    return 0;\n\n}\n```", "```\nName: Vijay,  Info:\n\n    Age: 20   Ht: 5.9\n\n    Year: 3   Dorm: Alice Paul\n```", "```\n%g:  placeholder for a float (or double) value\n\n%d:  placeholder for a decimal value (int, short, char)\n\n%s:  placeholder for a string value\n```", "```\n// Example printing a char value as its decimal representation (%d)\n\n// and as the ASCII character that its value encodes (%c)\n\nchar ch;\n\nch = 'A';\n\nprintf(\"ch value is %d which is the ASCII value of  %c\\n\", ch, ch);\n\nch = 99;\n\nprintf(\"ch value is %d which is the ASCII value of  %c\\n\", ch, ch);\n```", "```\nch value is 65 which is the ASCII value of  A\n\nch value is 99 which is the ASCII value of  c\n```", "```\n# Python input example\n\ndef main():\n\n    num1 = input(\"Enter a number:\")\n\n    num1 = int(num1)\n\n    num2 = input(\"Enter another:\")\n\n    num2 = int(num2)\n print(\"%d + %d = %d\" % (num1, num2, (num1+num2)))\n\n# call the main function:\n\nmain()\n```", "```\n/* C input (scanf) example */\n\n#include <stdio.h>\n\nint main() {\n\n    int num1, num2;\n\n    printf(\"Enter a number: \");\n\n    scanf(\"%d\", &num1);\n\n    printf(\"Enter another: \");\n\n    scanf(\"%d\", &num2);\n\n    printf(\"%d + %d = %d\\n\", num1, num2, (num1+num2));\n\n    return 0;\n\n}\n```", "```\nEnter a number: 30 \n\nEnter another: 67 \n\n30 + 67 = 97\n```", "```\nint x;\n\nfloat pi;\n\n// read in an int value followed by a float value (\"%d%g\")\n\n // store the int value at the memory location of x (&x)\n\n// store the float value at the memory location of pi (&pi)\n\nscanf(\"%d%g\", &x, &pi);\n```", "```\n          8                   3.14\n```", "```\n# Python if-else example\n\ndef main():\n\n    num1 = input(\"Enter the 1st number:\")\n\n    num1 = int(num1)\n\n    num2 = input(\"Enter the 2nd number:\")\n\n    num2 = int(num2)\n\n    if num1 > num2:\n\n        print(\"%d is biggest\" % num1)\n\n        num2 = num1\n\n    else:\n\n        print(\"%d is biggest\" % num2)\n\n        num1 = num2\n\n# call the main function:\n\nmain()\n```", "```\n/* C if-else example */\n\n#include <stdio.h>\n\nint main() {\n\n    int num1, num2;\n\n    printf(\"Enter the 1st number: \");\n\n    scanf(\"%d\", &num1);\n\n    printf(\"Enter the 2nd number: \");\n\n    scanf(\"%d\", &num2);\n\n    if (num1 > num2) {\n\n        printf(\"%d is biggest\\n\", num1);\n\n        num2 = num1;\n\n    } else {\n\n        printf(\"%d is biggest\\n\", num2);\n\n        num1 = num2;\n\n    }\n\n    return 0;\n\n}\n```", "```\n    // a one-way branch:\n\n    if ( <boolean expression> ) {\n\n        <true body>\n\n    }\n\n    // a two-way branch:\n\n    if ( <boolean expression> ) {\n\n        <true body>\n\n    }\n\n    else {\n\n        <false body>\n\n    }\n\n    // a multibranch (chaining if-else if-...-else)\n\n    // (has one or more 'else if' following the first if):\n\n    if ( <boolean expression 1> ) {\n\n        <true body>\n\n    }\n\n    else if ( <boolean expression 2> ) {\n\n        // first expression is false, second is true\n\n        <true 2 body>\n\n    }\n\n    else if ( <boolean expression 3> ) {\n\n        // first and second expressions are false, third is true\n\n        <true 3 body>\n\n    }\n\n    // ... more else if's ...\n\n    else if ( <boolean expression N> ) {\n\n        // first N-1 expressions are false, Nth is true\n\n        <true N body>\n\n    }\n\n    else { // the final else part is optional\n\n        // if all previous expressions are false\n\n        <false body>\n\n    }\n```", "```\n// assume x and y are ints, and have been assigned\n\n// values before this point in the code\n\nif (y < 0) {\n\n    printf(\"y is negative\\n\");\n\n} else if (y != 0) {\n\n    printf(\"y is positive\\n\");\n\n} else {\n\n    printf(\"y is zero\\n\");\n\n}\n\n // set x and y to the larger of the two values\n\nif (x >= y) {\n\n    y = x;\n\n} else {\n\n    x = y;\n\n}\n```", "```\nif ( (x > 10) && (y >= x) ) {\n\n    printf(\"y and x are both larger than 10\\n\");\n\n    x = 13;\n\n} else if ( ((-x) == 10) || (y > x) ) {\n\n    printf(\"y might be bigger than x\\n\");\n\n    x = y * x;\n\n} else {\n\n    printf(\"I have no idea what the relationship between x and y is\\n\");\n\n}\n```", "```\n# Python while loop example\n\ndef main():\n\n    num = input(\"Enter a value: \")\n\n    num = int(num)\n\n # make sure num is not negative\n\n    if num < 0:\n\n        num = -num\n\n    val = 1\n\n    while val < num:\n\n        print(\"%d\" % (val))\n\n        val = val * 2\n\n# call the main function:\n\nmain()\n```", "```\n/* C while loop example */\n\n#include <stdio.h>\n\nint main() {\n\n    int num, val;\n\n    printf(\"Enter a value: \");\n\n    scanf(\"%d\", &num);\n\n    // make sure num is not negative\n\n    if (num < 0) {\n\n        num = -num;\n\n    }\n\n    val = 1;\n\n    while (val < num) {\n\n        printf(\"%d\\n\", val);\n\n        val = val * 2;\n\n    }\n\n    return 0;\n\n}\n```", "```\nwhile ( <boolean expression> ) {\n\n    <true body>\n\n}\n```", "```\n1 \n\n2 \n\n4 \n\n8\n```", "```\ndo {\n\n    <body>\n\n} while ( <boolean expression> );\n```", "```\n# Python for loop example\n\ndef main():\n\n    num = input(\"Enter a value: \")\n\n    num = int(num)\n\n    # make sure num is not negative\n\n    if num < 0:\n\n        num = -num\n\n    for i in range(num):\n\n        print(\"%d\" % i)\n\n# call the main function:\n\nmain()\n```", "```\n/* C for loop example */\n\n#include <stdio.h>\n\nint main() {\n\n    int num, i;\n\n    printf(\"Enter a value: \");\n\n    scanf(\"%d\", &num);\n\n    // make sure num is not negative\n\n    if (num < 0) {\n\n        num = -num;\n\n    }\n\n for (i = 0; i < num; i++) {\n\n        printf(\"%d\\n\", i);\n\n    }\n\n    return 0;\n\n}\n```", "```\nfor ( <initialization>; <boolean expression>; <step> ) {\n\n    <body>\n\n}\n```", "```\nint i;\n\nfor (i = 0; i < 3; i++) {\n\n    printf(\"%d\\n\", i);\n\n}\n```", "```\n(1) eval init: i is set to 0  (i=0)\n\n(2) eval bool expr: i < 3 is true\n\n(3) execute loop body: print the value of i (0)\n\n(4) eval step: i is set to 1  (i++)\n\n(2) eval bool expr: i < 3 is true\n\n(3) execute loop body: print the value of i (1)\n\n(4) eval step: i is set to 2  (i++)\n\n(2) eval bool expr: i < 3 is true\n\n(3) execute loop body: print the value of i (2)\n (4) eval step: i is set to 3  (i++)\n\n(2) eval bool expr: i < 3 is false, drop out of the for loop\n```", "```\n/* An example of a more complex for loop which uses multiple variables.\n\n * (it is unusual to have for loops with multiple statements in the\n\n * init and step parts, but C supports it and there are times when it\n\n * is useful...don't go nuts with this just because you can)\n\n */\n\n#include <stdio.h>\n\nint main() {\n\n    int i, j;\n\n    for (i=0, j=0; i < 10; i+=1, j+=10) {\n\n        printf(\"i+j = %d\\n\", i+j);\n\n    }\n\n    return 0;\n\n}\n\n// the rules for evaluating a for loop are the same no matter how\n\n// simple or complex each part is:\n\n// (1) evaluate the initialization statements once on the first\n\n//     evaluation of the for loop:  i=0 and j=0\n\n// (2) evaluate the boolean condition: i < 10\n\n//     if false (when i is 10), drop out of the for loop\n\n// (3) execute the statements inside the for loop body: printf\n\n// (4) evaluate the step statements:  i += 1, j += 10\n\n// (5) repeat, starting at step (2)\n```", "```\nint guess = 0;\n\nwhile (guess != num) {\n\n printf(\"%d is not the right number\\n\", guess);\n\n    printf(\"Enter another guess: \");\n\n    scanf(\"%d\", &guess);\n\n}\n```", "```\nint guess;\n\nfor (guess = 0; guess != num; ) {\n\n    printf(\"%d is not the right number\\n\", guess);\n\n    printf(\"Enter another guess: \");\n\n    scanf(\"%d\", &guess);\n\n}\n```", "```\n// function definition format:\n\n// ---------------------------\n\n<return type> <function name> (<parameter list>)\n\n{\n\n    <function body>\n\n}\n\n// parameter list format:\n\n// ---------------------\n\n<type> <param1 name>, <type> <param2 name>, ...,  <type> <last param name>\n```", "```\n/* This program computes the larger of two\n\n * values entered by the user.\n\n */\n\n#include <stdio.h>\n\n/* max: computes the larger of two integer values\n\n *   x: one integer value\n\n *   y: the other integer value\n\n *   returns: the larger of x and y\n\n */\n\nint max(int x, int y) {\n\n    int bigger;\n\n    bigger = x;\n\n    if (y > x) {\n\n        bigger = y;\n\n    }\n\n    printf(\"  in max, before return x: %d y: %d\\n\", x, y);\n\n    return bigger;\n\n}\n```", "```\n/* prints out the squares from start to stop\n\n *   start: the beginning of the range\n\n *   stop: the end of the range\n\n */\n\nvoid print_table(int start, int stop) {\n\n    int i;\n\n    for (i = start; i <= stop; i++) {\n\n        printf(\"%d\\t\", i*i);\n\n    }\n\n    printf(\"\\n\");\n\n}\n```", "```\n// function call format:\n\n// ---------------------\n\nfunction_name(<argument list>);\n\n // argument list format:\n\n// ---------------------\n\n<argument 1 expression>, <argument 2 expression>, ..., <last argument expression>\n```", "```\nint val1, val2, result;\n\nval1 = 6;\n\nval2 = 10;\n\n/* to call max, pass in two int values, and because max returns an\n\n   int value, assign its return value to a local variable (result)\n\n */\n\nresult = max(val1, val2);     /* call max with argument values 6 and 10 */\n\nprintf(\"%d\\n\", result);       /* prints out 10 */\n\nresult = max(11, 3);          /* call max with argument values 11 and 3 */\n\nprintf(\"%d\\n\", result);       /* prints out 11 */\n\nresult = max(val1 * 2, val2); /* call max with argument values 12 and 10 */\n\nprintf(\"%d\\n\", result);       /* prints out 12 */\n\n/* print_table does not return a value, but takes two arguments */\n\nprint_table(1, 20);           /* prints a table of values from 1 to 20 */\n\nprint_table(val1, val2);      /* prints a table of values from 6 to 10 */\n```", "```\n/* max: computes the larger of two int values\n\n *   x: one value\n\n *   y: the other value\n\n *   returns: the larger of x and y\n\n */\n\nint max(int x, int y) {\n\n    int bigger;\n\n    bigger = x;\n\n    if (y > x) {\n\n        bigger = y;\n\n        // note: changing the parameter x's value here will not\n\n //       change the value of its corresponding argument\n\n        x = y;\n\n    }\n\n    printf(\"  in max, before return x: %d y: %d\\n\", x, y);\n\n    return bigger;\n\n}\n\n/* main: shows a call to max */\n\nint main() {\n\n    int a, b, res;\n\n    printf(\"Enter two integer values: \");\n\n    scanf(\"%d%d\", &a, &b);\n\n    res = max(a, b);\n\n    printf(\"The larger value of %d and %d is %d\\n\", a, b, res);\n\n    return 0;\n\n}\n```", "```\n$ ./a.out\n\nEnter two integer values: 11  7\n\n  in max, before return x: 11 y: 7\n\nThe larger value of 11 and 7 is 11\n\n$ ./a.out\n\nEnter two integer values: 13  100\n\n  in max, before return x: 100 y: 100\n\nThe larger value of 13 and 100 is 100\n```", "```\n/* This file shows examples of defining and calling C functions.\n\n * It also demonstrates using scanf().\n\n */\n\n#include <stdio.h>\n\n/* This is an example of a FUNCTION PROTOTYPE.  It declares just the type\n * information for a function (the function's name, return type, and parameter\n\n * list). A prototype is used when code in main wants to call the function\n\n * before its full definition appears in the file.\n\n */\n\nint max(int n1, int n2);\n\n/* A prototype for another function.  void is the return type of a function\n\n * that does not return a value\n\n */\n\nvoid print_table(int start, int stop);\n\n/* All C programs must have a main function.  This function defines what the\n\n * program does when it begins executing, and it's typically used to organize\n\n * the big-picture behavior of the program.\n\n */\n\nint main() {\n\n    int x, y, larger;\n\n    printf(\"This program will operate over two int values.\\n\");\n\n    printf(\"Enter the first value: \");\n\n    scanf(\"%d\", &x);\n\n    printf(\"Enter the second value: \");\n\n    scanf(\"%d\", &y);\n\n    larger = max(x, y);\n\n    printf(\"The larger of %d and %d is %d\\n\", x, y, larger);\n\n    print_table(x, larger);\n\n    return 0;\n\n}\n\n/* This is an example of a FUNCTION DEFINITION.  It specifies not only the\n\n * function name and type, but it also fully defines the code of its body.\n\n * (Notice, and emulate, the complete function comment!)\n\n */\n\n/* Computes the max of two integer values.\n\n *   n1: the first value\n\n *   n2: the other value\n\n *   returns: the larger of n1 and n2\n\n */\n\nint max(int n1, int n2)  {\n\n    int result;\n\n result = n1;\n\n    if (n2 > n1) {\n\n        result = n2;\n\n    }\n\n    return result;\n\n}\n\n/* prints out the squares from start to stop\n\n *   start: the beginning of the range\n\n *   stop: the end of the range\n\n */\n\nvoid print_table(int start, int stop) {\n\n    int i;\n\n    for (i = start; i <= stop; i++) {\n\n        printf(\"%d\\t\", i*i);\n\n    }\n\n    printf(\"\\n\");\n\n}\n```", "```\n# An example Python program using a list.\n\ndef main():\n\n    # create an empty list\n\n    my_lst = []\n\n    # add 10 integers to the list\n\n    for i in range(10):\n\n        my_lst.append(i)\n\n    # set value at position 3 to 100\n\n    my_lst[3] = 100\n\n    # print the number of list items\n\n    print(\"list %d items:\" % len(my_lst))\n\n    # print each element of the list\n\n    for i in range(10):\n\n        print(\"%d\" % my_lst[i])\n\n# call the main function:\n\nmain()\n```", "```\n/* An example C program using an array. */\n\n#include <stdio.h>\n\nint main() {\n\n    int i, size = 0;\n\n    // declare array of 10 ints\n\n    int my_arr[10];\n\n    // set the value of each array element\n\n    for (i = 0; i < 10; i++) {\n\n        my_arr[i] = i;\n\n        size++;\n\n    }\n\n    // set value at position 3 to 100\n\n my_arr[3] = 100;\n\n    // print the number of array elements\n\n    printf(\"array of %d items:\\n\", size);\n\n    // print each element of the array\n\n    for (i = 0; i < 10; i++) {\n\n        printf(\"%d\\n\", my_arr[i]);\n\n    }\n\n    return 0;\n\n}\n```", "```\nmy_lst[3] = 100   # Python syntax to set the element in position 3 to 100.\n\nmy_lst[0] = 5     # Python syntax to set the first element to 5.\n```", "```\nmy_arr[3] = 100;  // C syntax to set the element in position 3 to 100.\n\nmy_arr[0] = 5;    // C syntax to set the first element to 5.\n```", "```\nint  arr[10];  // declare an array of 10 ints\n\nchar str[20];  // declare an array of 20 chars\n```", "```\nint i, num;\n\nint arr[10];  // declare an array of ints, with a capacity of 10\n\nnum = 6;      // keep track of how many elements of arr are used\n\n// initialize first 5 elements of arr (at indices 0-4)\n\nfor (i=0; i < 5; i++) {\n\n    arr[i] = i * 2;\n\n}\n\narr[5] = 100; // assign the element at index 5 the value 100\n```", "```\nint array[10];   // an array of size 10 has valid indices 0 through 9\n\narray[10] = 100;  // 10 is not a valid index into the array\n```", "```\nvoid print_array(int arr[], int size) {\n\n    int i;\n\n    for (i = 0; i < size; i++) {\n\n        printf(\"%d\\n\", arr[i]);\n\n    }\n\n}\n```", "```\nint some[5], more[10], i;\n\nfor (i = 0; i < 5; i++) {  // initialize the first 5 elements of both arrays\n\n    some[i] = i * i;\n\n    more[i] = some[i];\n\n}\n\nfor (i = 5; i < 10; i++) { // initialize the last 5 elements of \"more\" array\n\n more[i] = more[i-1] + more[i-2];\n\n}\n\nprint_array(some, 5);    // prints all 5 values of \"some\"\n\nprint_array(more, 10);   // prints all 10 values of \"more\"\n\nprint_array(more, 8);    // prints just the first 8 values of \"more\"\n```", "```\nvoid test(int a[], int size) {\n\n    if (size > 3) {\n\n        a[3] = 8;\n\n    }\n\n    size = 2; // changing parameter does NOT change argument\n\n}\n\nint main() {\n\n    int arr[5], n = 5, i;\n\n    for (i = 0; i < n; i++) {\n\n        arr[i] = i;\n\n    }\n\n    printf(\"%d %d\", arr[3], n);  // prints: 3 5\n\n    test(arr, n);\n\n    printf(\"%d %d\", arr[3], n);  // prints: 8 5\n\n    return 0;\n\n}\n```", "```\n#include <stdio.h>\n\n#include <string.h>   // include the C string library\n\nint main() {\n\n    char str1[10];\n\n    char str2[10];\n\n    int len;\n\n    str1[0] = 'h';\n\n    str1[1] = 'i';\n\n    str1[2] = '\\0';\n\n    len = strlen(str1);\n\n    printf(\"%s %d\\n\", str1, len);  // prints: hi 2\n\n    strcpy(str2, str1);     // copies the contents of str1 to str2\n\n    printf(\"%s\\n\", str2);   // prints:  hi\n\n    strcpy(str2, \"hello\");  // copy the string \"hello\" to str2\n\n    len = strlen(str2);\n\n    printf(\"%s has %d chars\\n\", str2, len);   // prints: hello has 5 chars\n\n}\n```", "```\nstruct <struct_name> {\n\n    <field 1 type> <field 1 name>;\n\n    <field 2 type> <field 2 name>;\n\n    <field 3 type> <field 3 name>;\n\n    ...\n\n};\n```", "```\nstruct studentT {\n\n    char name[64];\n\n    int age;\n\n    float gpa;\n\n    int grad_yr;\n\n};\n```", "```\nstruct studentT student1, student2; // student1, student2 are struct studentT\n```", "```\n<variable name>.<field name>\n```", "```\n// The 'name' field is an array of characters, so we can use the 'strcpy'\n\n// string library function to fill in the array with a string value.\n\nstrcpy(student1.name, \"Kwame Salter\");\n\n// The 'age' field is an integer.\n\nstudent1.age = 18 + 2;\n\n// The 'gpa' field is a float.\n\nstudent1.gpa = 3.5;\n\n// The 'grad_yr' field is an int\n\nstudent1.grad_yr = 2020;\n\nstudent2.grad_yr = student1.grad_yr;\n```", "```\nstudent2 = student1;  // student2 gets the value of student1\n\n                      // (student1's field values are copied to\n\n                      //  corresponding field values of student2)\n\nstrcpy(student2.name, \"Frances Allen\");  // change one field value\n```", "```\n// Note: the '%lu' format placeholder specifies an unsigned long value.\n\nprintf(\"number of bytes in student struct: %lu\\n\", sizeof(struct studentT));\n```", "```\n#include <stdio.h>\n\n#include <string.h>\n\n// Define a new type: struct studentT\n\n// Note that struct definitions should be outside function bodies.\n\nstruct studentT {\n\n    char name[64];\n\n    int age;\n\n    float gpa;\n\n    int grad_yr;\n\n };\n\nint main() {\n\n    struct studentT student1, student2;\n\n    strcpy(student1.name, \"Kwame Salter\");  // name field is a char array\n\n    student1.age = 18 + 2;                  // age field is an int\n\n    student1.gpa = 3.5;                     // gpa field is a float\n\n    student1.grad_yr = 2020;                // grad_yr field is an int\n\n    /* Note: printf doesn't have a format placeholder for printing a\n\n     * struct studentT (a type we defined).  Instead, we'll need to\n\n     * individually pass each field to printf. */\n\n    printf(\"name: %s age: %d gpa: %g, year: %d\\n\",\n\n           student1.name, student1.age, student1.gpa, student1.grad_yr);\n\n    /* Copy all the field values of student1 into student2\\. */\n\n    student2 = student1;\n\n    /* Make a few changes to the student2 variable. */\n\n    strcpy(student2.name, \"Frances Allen\");\n\n    student2.grad_yr = student1.grad_yr + 1;\n\n    /* Print the fields of student2\\. */\n\n    printf(\"name: %s age: %d gpa: %g, year: %d\\n\",\n\n           student2.name, student2.age, student2.gpa, student2.grad_yr);\n\n    /* Print the size of the struct studentT type. */\n\n    printf(\"number of bytes in student struct: %lu\\n\", sizeof(struct studentT));\n\n    return 0;\n\n}\n```", "```\nname: Kwame Salter age: 20 gpa: 3.5, year: 2020 \n\nname: Frances Allen age: 20 gpa: 3.5, year: 2021 \n\nnumber of bytes in student struct: 76\n```", "```\nstruct studentT {\n\n    char name[32];\n\n    int  age;\n\n    float gpa;\n\n    int  grad_yr;\n\n};\n\nint main() {\n\n    struct studentT  student1, student2;\n\n    int x;\n\n    char arr[10], ch;\n\n    x = 10;                 // Valid C: x is an lvalue\n\n    ch = 'm';               // Valid C: ch is an lvalue\n\n    student1.age = 18;      // Valid C: age field is an lvalue\n\n    student2 = student1;    // Valid C: student2 is an lvalue\n\n    arr[3] = ch;            // Valid C: arr[3] is an lvalue\n\n    x + 1 = 8;       // Invalid C: x+1 is not an lvalue\n\n    arr = \"hello\";   // Invalid C: arr is not an lvalue\n\n                     //  cannot change base addr of statically declared array\n\n                     //  (use strcpy to copy the string value \"hello\" to arr)\n\n    student1.name = student2.name;  // Invalid C: name field is not an lvalue\n\n                                    // (the base address of a statically\n\n                                    //  declared array cannot be changed)\n```", "```\nstudent2 = student1;\n```", "```\n#include <stdio.h>\n\n#include <string.h>\n\n/* struct type definition: */\n\nstruct studentT {\n\n    char name[64];\n\n    int  age;\n\n    float gpa;\n\n    int  grad_yr;\n\n};\n\n/* function prototype (prototype: a declaration of the\n\n *    checkID function so that main can call it, its full\n\n *    definition is listed after main function in the file):\n\n */\n\nint checkID(struct studentT s1, int min_age);\n\nint main() {\n\n    int can_vote;\n\n    struct studentT student;\n\n    strcpy(student.name, \"Ruth\");\n\n    student.age = 17;\n\n    student.gpa = 3.5;\n\n    student.grad_yr = 2021;\n\n    can_vote = checkID(student, 18);\n\n if (can_vote) {\n\n        printf(\"%s is %d years old and can vote.\\n\",\n\n                student.name, student.age);\n\n    } else {\n\n        printf(\"%s is only %d years old and cannot vote.\\n\",\n\n                student.name, student.age);\n\n    }\n\n    return 0;\n\n}\n\n/*  check if a student is at least the min age\n\n *    s: a student\n\n *    min_age: a minimum age value to test\n\n *    returns: 1 if the student is min_age or older, 0 otherwise\n\n */\n\nint checkID(struct studentT s, int min_age) {\n\n    int ret = 1;  // initialize the return value to 1 (true)\n\n    if (s.age < min_age) {\n\n        ret = 0;  // update the return value to 0 (false)\n\n        // let's try changing the student's age\n\n        s.age = min_age + 1;\n\n    }\n\n    printf(\"%s is %d years old\\n\", s.name, s.age);\n\n    return ret;\n\n}\n```", "```\nRuth is 19 years old\n\nRuth is only 17 years old and cannot vote.\n```"]