- en: Sensors
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传感器
- en: '**9'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9'
- en: All-in-One Weather Sensor Station**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**一体化气象传感器站**'
- en: In this project, you’ll build a local weather station that detects the temperature,
    humidity, and barometric pressure with the Sense HAT. You’ll also create a graphical
    user interface to display temperature, humidity, and barometric pressure readings
    in real time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个本地气象站，使用 Sense HAT 检测温度、湿度和气压。你还将创建一个图形用户界面，实时显示温度、湿度和气压的读数。
- en: '![image](../images/f0127-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0127-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: Raspberr y Pi (versions with 40 GPIOs)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派（具有 40 个 GPIO 引脚的版本）
- en: Sense HAT
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT
- en: '**THE SENSE HAT AS A WEATHER STATION**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将 Sense HAT 作为气象站**'
- en: The Sense HAT makes an excellent small and affordable weather station, as it
    comes with temperature, humidity, and barometric pressure sensors. Reading sensor
    values with the Sense HAT is very straightforward, so this is a good starting
    point to learn about sensor readings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT 是一个非常优秀的小型且价格实惠的气象站，因为它配备了温度、湿度和气压传感器。使用 Sense HAT 读取传感器值非常简单，因此这是一个学习传感器读取的好起点。
- en: '**The Temperature Sensor**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**温度传感器**'
- en: '**NOTE**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The temperature readings might be a few degrees off when compared to the real
    value. The Sense HAT fits over the Pi and the heat from the Raspberry Pi processor
    can alter the results slightly.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*与真实值相比，温度读数可能会偏差几度。Sense HAT 安装在 Pi 上，树莓派处理器的热量可能会略微影响结果。*'
- en: As the name suggests, the temperature sensor measures temperature. By default,
    the Sense HAT reads the temperature in degrees Celsius, so if you prefer the temperature
    in degrees Fahrenheit, you’ll need to convert the reading. To do so, multiply
    the degrees in Celsius by 9, divide by 5, and add 32, as shown in the following
    formula.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，温度传感器测量温度。默认情况下，Sense HAT 读取的是摄氏度温度，因此如果你更喜欢华氏度，你需要进行转换。方法是，将摄氏度乘以9，再除以5，最后加上32，公式如下所示。
- en: '![image](../images/f0128-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0128-01.jpg)'
- en: You can add this formula to your code so that it does the conversion for you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此公式添加到你的代码中，以便自动进行转换。
- en: '**The Humidity Sensor**'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**湿度传感器**'
- en: 'There are two common ways of expressing humidity: absolute humidity and relative
    humidity. *Absolute humidity* is the mass of water vapor in a certain volume of
    air, regardless of temperature, and it is expressed as kilograms per cubic meter
    (kg/m³). The amount of water vapor that the air can hold changes with temperature.
    The higher the temperature, the more water vapor it can hold. *Relative humidity*
    is expressed as a percentage and is the current water vapor in the air in relation
    to the maximum possible amount at a given temperature.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种常见的湿度表示方式：绝对湿度和相对湿度。*绝对湿度*是指某一体积空气中水蒸气的质量，与温度无关，单位为千克/立方米（kg/m³）。空气能够容纳的水蒸气量随温度变化。温度越高，空气可以容纳的水蒸气量越多。*相对湿度*以百分比表示，是指当前空气中的水蒸气量与在某一温度下空气最大能够容纳的水蒸气量的比例。
- en: 'The Sense HAT records relative humidity because it’s more useful for weather
    forecasts: the greater the relative humidity percentage, the higher the probability
    of precipitation. As relative humidity changes with temperature, it’s always coupled
    with a temperature sensor.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT 记录相对湿度，因为它对天气预报更有用：相对湿度百分比越高，降水的概率越大。由于相对湿度随着温度变化，因此它总是与温度传感器一起使用。
- en: '**The Barometric Pressure Sensor**'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**气压传感器**'
- en: The barometric pressure sensor reads atmospheric pressure, the “weight” of the
    air at a given point, measured in hPa (hectoPascal), which is equivalent to mbar
    (millibar). Why is it interesting to measure pressure? Because changes in atmospheric
    pressure can help you forecast the weather. Rising pressure tends to be a sign
    of good weather to come, and falling pressure a sign of bad weather, like rain
    or storms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 气压传感器读取大气压力，即某一点的空气“重量”，单位为 hPa（百帕斯卡），相当于 mbar（毫巴）。为什么测量气压很有趣？因为气压的变化可以帮助你预测天气。气压上升通常是好天气的标志，而气压下降则通常预示着恶劣天气，如降雨或风暴。
- en: Changes in pressure are really small. You need to follow your barometer readings
    meticulously to notice a trend.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 压力变化非常微小。你需要仔细观察气压计的读数才能发现趋势。
- en: '**READING TEMPERATURE, HUMIDITY, AND PRESSURE**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**读取温度、湿度和气压**'
- en: Now let’s look at how to read from the sensors and print the readings to the
    Python shell.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何从传感器读取数据，并将其打印到 Python 命令行。
- en: Mount your Sense HAT on your Pi like you did in [Project 8](ch08.xhtml#ch08)
    and make sure it’s well connected. When it’s first connected, the Sense HAT should
    display a rainbow background that matches the rainbow you see on the screen when
    you boot your Pi (see [Figure 9-1](ch09.xhtml#ch09fig1)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 像在 [项目 8](ch08.xhtml#ch08) 中一样将 Sense HAT 安装到你的 Pi 上，并确保它连接良好。当它首次连接时，Sense
    HAT 应该显示一个彩虹背景，这个彩虹背景与你启动 Pi 时屏幕上看到的彩虹相匹配（参见 [图 9-1](ch09.xhtml#ch09fig1)）。
- en: '![image](../images/f0129-01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0129-01.jpg)'
- en: '**FIGURE 9-1:** Sense HAT rainbow background'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-1:** Sense HAT 彩虹背景'
- en: Inside your *Projects* folder create a new folder called *Sensors*. Then open
    **Python 3 (IDLE)** and go to **File** ▸ **New** to create a new script called
    *weather_data.py* and enter the code in [Listing 9-1](ch09.xhtml#ch09list1) (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    ).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 *Projects* 文件夹内创建一个名为 *Sensors* 的新文件夹。然后打开 **Python 3 (IDLE)**，选择 **文件**
    ▸ **新建** 创建一个新的脚本文件，命名为 *weather_data.py*，并输入 [清单 9-1](ch09.xhtml#ch09list1) 中的代码（记住你可以在
    *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载所有脚本）。
- en: '**LISTING 9-1:** Reading temperature, humidity, and pressure with the Sense
    HAT'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 9-1:** 使用 Sense HAT 读取温度、湿度和压力'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First you import the `SenseHat` class from the sense_hat library ➊. Then, you
    create an object called `sense` to refer to the Sense HAT ➋.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 sense_hat 库中导入 `SenseHat` 类 ➊。然后，你创建一个名为 `sense` 的对象，来引用 Sense HAT ➋。
- en: 'Getting the sensor readings ➌ is simple thanks to the following, aptly named
    functions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 获取传感器读数 ➌ 非常简单，这得益于以下这些恰如其分命名的函数：
- en: '`sense.temperature` gets the temperature reading.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.temperature` 获取温度读数。'
- en: '`sense.humidity` gets the humidity reading.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.humidity` 获取湿度读数。'
- en: '`sense.pressure` gets the pressure reading.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.pressure` 获取压力读数。'
- en: The readings are given to several decimal places, so you use the function `round()`
    to round the numbers and make the results more readable. The `round()` function
    ➍ accepts as arguments the number you want to round and the number of decimal
    places you want to set, in that order—here, it’s set to two decimal places. You
    also use the `str()` function that converts the argument it takes into a string.
    You need to convert the readings into a string so you can concatenate them with
    the text you’ll print to the shell ➎.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 读数精确到几位小数，因此你使用 `round()` 函数来对数字进行四舍五入，使结果更易读。`round()` 函数 ➍ 接受两个参数：你想要四舍五入的数字和你希望设置的小数位数，顺序为：首先是数字，其次是小数位数——在这里，它被设置为两位小数。你还使用
    `str()` 函数，它将传入的参数转换为字符串。你需要将读数转换为字符串，这样才能将它们与你将在命令行中打印的文本进行连接 ➎。
- en: Now you’re almost a meteorologist! Next, you’ll build a user interface for your
    weather data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你几乎是一个气象学家了！接下来，你将为你的天气数据构建一个用户界面。
- en: '**BUILDING A USER INTERFACE FOR YOUR READINGS**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建你的读数用户界面**'
- en: 'Let’s take this project to another level and build a cool user interface to
    display your sensor readings. Your interface should feature:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个项目提升到另一个层次，构建一个酷炫的用户界面来显示传感器读数。你的界面应包含：
- en: A window in your desktop that displays temperature, humidity, and pressure
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示温度、湿度和压力的桌面窗口
- en: The humidity displayed in a vertical progress bar from 0 to 100 percent
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以从 0 到 100 百分比的垂直进度条显示湿度
- en: The temperature and pressure displayed in numbers
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以数字形式显示的温度和压力
- en: Labels for each reading
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个读数的标签
- en: '[Figure 9-2](ch09.xhtml#ch09fig2) shows a draft layout for the user interface
    that should help you work out how to go about the code.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](ch09.xhtml#ch09fig2) 显示了一个用户界面的草图布局，应该能够帮助你理解如何处理代码。'
- en: '![image](../images/f0131-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0131-01.jpg)'
- en: '**FIGURE 9-2:** Graphical user interface draft'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-2:** 图形用户界面草图'
- en: You’ll also be able to edit the code to choose font type, size, and color, and
    how labels and readings are positioned within the window. The following table
    gives you a list of all the titles and values and how we’ll display them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以编辑代码来选择字体类型、大小和颜色，以及标签和读数在窗口中的位置。下表列出了所有标题和值及其显示方式。
- en: '| **WIDGET** | **OPTIONS** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **小部件** | **选项** |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Window Title | Text: “Local Weather Station” |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 窗口标题 | 文本：“本地气象站” |'
- en: '| Humidity Title | Text: “Humidity”, Font: Helvetica, Size: 18, Vertical padding:
    3 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 湿度标题 | 文本：“湿度”，字体：Helvetica，大小：18，垂直间距：3 |'
- en: '| Humidity Value | Font: Courier, Size: 20, Color: Blue, Position: North |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 湿度值 | 字体：Courier，大小：20，颜色：蓝色，位置：北 |'
- en: '| Humidity Progress Bar | Orientation: Vertical, Size: 20, Color: Blue, Position:
    North, Length: 200, Maximum Value: 100 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 湿度进度条 | 方向：垂直，大小：20，颜色：蓝色，位置：北，长度：200，最大值：100 |'
- en: '| Temperature Title | Text: “Temperature”, Font: Helvetica, Size: 18, Position:
    South |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 温度标题 | 文本：“温度”，字体：Helvetica，大小：18，位置：南 |'
- en: '| Temperature Value | Font: Courier, Size: 20, Color: Red, Position: North
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 温度值 | 字体：Courier，大小：20，颜色：红色，位置：北 |'
- en: '| Pressure Title | Text: “Pressure”, Font: Helvetica, Size: 18, Position: South
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 压力标题 | 文本：“压力”，字体：Helvetica，大小：18，位置：南 |'
- en: '| Pressure Value | Font: Courier, Size: 20, Color: Green, Position: North |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 压力值 | 字体：Courier，大小：20，颜色：绿色，位置：北 |'
- en: '**WRITING THE SCRIPT**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 9-2](ch09.xhtml#ch09list2) to the Python Editor
    and save the script as *weather_station.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，然后选择**文件** ▸ **新建文件**，以创建一个新的脚本。将[Listing 9-2](ch09.xhtml#ch09list2)中的代码复制到Python编辑器中，并将脚本保存为*weather_station.py*，并保存在*Sensors*文件夹中（请记住，您可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 9-2:** Displaying the Sense HAT readings in a graphical user interface'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-2:** 在图形用户界面中显示Sense HAT的读数'
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As usual, you start the code by importing the necessary libraries ➊. You may
    wonder why we need to import ttk if we’ve already imported everything with `*`
    from the tkinter library in the previous line. In this case, when you import with
    the wildcard `*`, you’re importing only a subset of what’s stored in the library
    folder—there isn’t any particular reason for this, it’s just the way the author
    of the library decided to do it—so we need to import the ttk library that’s also
    needed for this user interface separately.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，您首先通过导入必要的库开始编写代码 ➊。您可能会想，既然我们在上一行中已经从tkinter库导入了所有内容，为什么还需要单独导入ttk呢？在这种情况下，当您使用通配符`*`导入时，您只导入了库文件夹中存储的一个子集——没有特别的原因，这是库的作者选择的方式——因此我们需要单独导入ttk库，它在此用户界面中也是必需的。
- en: To gather weather data, you need to use the physical Sense HAT and the sense_hat
    library.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要收集天气数据，您需要使用物理Sense HAT和sense_hat库。
- en: '**Creating the User Interface**'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建用户界面**'
- en: After importing all of the libraries, you implement the part of the code that
    creates the user interface. First, you create a window that’s 200×480 pixels and
    give it the title `Local Weather Station` ➋. Then, you create a label for the
    humidity title ➌ with the settings shown in the table on [page 131](ch09.xhtml#page_131).
    At ➍, you create a string variable called `humidity` that will hold the humidity
    value. This value is then displayed at ➎.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入所有库后，您实现了创建用户界面部分的代码。首先，您创建一个200×480像素的窗口，并为其设置标题为`Local Weather Station`
    ➋。然后，您为湿度标题创建一个标签 ➌，其设置如[第131页](ch09.xhtml#page_131)中的表格所示。接着，在 ➍，您创建一个名为`humidity`的字符串变量，用于存储湿度值。此值随后将在
    ➎ 处显示。
- en: The lines of code at ➏ create a canvas to place the progress bar in—the canvas
    is like a reserved space for the progress bar. After that, the code initializes
    a variable called `humidity_bar` of type `double` ➐, which is the variable type
    accepted by the progress bar. Finally, the lines at ➑ create the humidity progress
    bar to place on the canvas.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ➏处的代码行创建了一个画布，用于放置进度条——画布就像是为进度条预留的空间。之后，代码初始化了一个名为`humidity_bar`的`double`类型变量
    ➐，这是进度条接受的变量类型。最后，➑处的代码创建了湿度进度条并将其放置在画布上。
- en: The process for displaying titles and values for temperature and pressure follows
    the same steps as at ➌, ➍, and ➎.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 显示温度和压力标题及值的过程与 ➌、➍ 和 ➎ 中的步骤相同。
- en: '**Automatically Updating the Readings**'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**自动更新读数**'
- en: At ➒, you define the `update_readings()` function, which updates the displayed
    values every three seconds to keep your weather readings up to date.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➒ 处，您定义了`update_readings()`函数，该函数每三秒更新一次显示的值，以确保天气读数始终保持最新。
- en: 'The following line updates the `temperature` variable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行更新`temperature`变量：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break this line into its component parts:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这一行拆解成各个部分：
- en: '`sense.temperature` retrieves the temperature reading from the Sense HAT.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sense.temperature` 从 Sense HAT 获取温度读数。'
- en: '`round(sense.temperature,2)` rounds the temperature readings to two decimal
    places.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round(sense.temperature,2)` 将温度读数四舍五入到小数点后两位。'
- en: '`str(round(sense.temperature,2)` converts the rounded reading to a string.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str(round(sense.temperature,2))` 将四舍五入后的读数转换为字符串。'
- en: '`(str(round(sense.temperature,2)) + ''*C'')` concatenates the degree symbol
    to the string.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(str(round(sense.temperature,2)) + ''*C'')` 将摄氏度符号附加到字符串中。'
- en: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` updates the `temperature`
    variable with the latest reading.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` 更新 `temperature`
    变量为最新的读数。'
- en: The script uses a similar procedure for updating the `pressure` and `humidity`
    variables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本采用类似的方法来更新 `pressure` 和 `humidity` 变量。
- en: The `window.update_idletasks()` function keeps the window up to date while monitoring.
    Finally, `window.after(3000, update_readings)` adds `update_readings` as an event
    to the `mainloop()`, and tells the Pi to call this function every 3,000 milliseconds
    (3 seconds).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.update_idletasks()` 函数在监控时保持窗口的最新状态。最后，`window.after(3000, update_readings)`
    将 `update_readings` 作为事件添加到 `mainloop()` 中，并告诉树莓派每 3,000 毫秒（3 秒）调用一次这个函数。'
- en: At ➓, you call the `update_readings()` function and the `window.mainloop()`
    function that keeps the window running.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➓ 处，你调用了 `update_readings()` 函数和保持窗口运行的 `window.mainloop()` 函数。
- en: 'Finally, you can display the temperature in Fahrenheit by commenting and uncommenting
    these two lines:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过注释和取消注释这两行代码来以华氏度显示温度：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Running the Script**'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. You should
    see your weather data displayed in the user interface as shown at the beginning
    of the project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按 **F5** 键或进入 **Run** ▸ **Run Module** 来运行脚本。你应该能看到项目开始时所示的用户界面上显示你的天气数据。
- en: Congratulations! You’ve made your own weather station. You are officially a
    budding meteorologist.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已经制作了自己的天气站，你现在正式是一个初级气象学家。
- en: '**TAKING IT FURTHER**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步提升**'
- en: 'Here are some ideas for customizing this project:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些自定义此项目的想法：
- en: Add the Fahrenheit conversion to the code and display the temperature as °F.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将华氏温度转换添加到代码中，并以 °F 显示温度。
- en: Change the graphical user interface—layout, font color, size, and type—to suit
    your tastes.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改图形用户界面的布局、字体颜色、大小和类型，以适应你的个人喜好。
- en: Use the LED matrix display on the Sense HAT to display information about the
    weather. For example, you can display text, relative bar graphs, or green and
    red arrows indicating temperature, humidity, or pressure rising or falling.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sense HAT 上的 LED 矩阵显示天气信息。例如，你可以显示文本、相对柱状图，或用绿色和红色箭头表示温度、湿度或气压的升降。
- en: In the rest of the projects within this part, you’ll learn how to send an email
    with Python and how to save sensor readings. Use these skills to send your weather
    data to your email or build a weather station data logger. Make sure you don’t
    miss the next projects!
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个部分的其余项目中，你将学习如何用 Python 发送电子邮件以及如何保存传感器读数。利用这些技能，你可以将天气数据发送到你的电子邮件，或构建一个天气站数据记录器。一定不要错过下一个项目！
- en: '**10'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10'
- en: Intruder Alarm with Email Notifications**
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**带电子邮件通知的入侵报警**'
- en: In this project, you’ll create an intruder alarm that sends you email notifications.
    The alarm will detect whether someone has trespassed onto forbidden territory
    using a passive infrared (PIR) motion sensor. When the PIR motion sensor detects
    movement, it will send a warning email.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个入侵报警系统，通过电子邮件通知你。该报警系统将利用被动红外（PIR）运动传感器检测是否有人闯入禁区。当PIR传感器探测到运动时，它将发送一封警告邮件。
- en: '![image](../images/f0137-01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0137-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: Raspberry Pi
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: PIR mot ion sensor HC-SR501
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PIR 运动传感器 HC-SR501
- en: Two 5 mm LEDs (different colors)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 5 毫米 LED（不同颜色）
- en: Two 330 Ω resistors
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 330 Ω 电阻
- en: Pushbutton
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮
- en: Jumper wires
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING THE PIR MOTION SENSOR**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 PIR 运动传感器**'
- en: You’ve probably seen motion sensors in a wide variety of applications. They’re
    used in security lights, in commercial building lights that turn on when you walk
    by, and in burglar alarms.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在许多不同的应用中见过运动传感器。它们用于安防灯、商业建筑中经过时自动开启的灯光以及入侵报警系统。
- en: A PIR motion sensor (see [Figure 10-1](ch10.xhtml#ch10fig1)) measures infrared
    light emitted from objects in its field of view. It detects motion based on changes
    in infrared light, which indicate changes in temperature. This makes it ideal
    for detecting humans or animals because it will pick up living things that move
    within its range but not inanimate objects, like a leaf blowing in the wind. You
    can program the Pi to react to changes in infrared light by triggering an event
    such as turning on a light, sounding an alarm, or, as we’ll do in this project,
    sending an email.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PIR运动传感器（见[图10-1](ch10.xhtml#ch10fig1)）通过测量其视野内物体发出的红外线来工作。它根据红外线光的变化来检测运动，这表示温度的变化。这使它非常适合检测人类或动物，因为它能感知到在其范围内移动的生物体，但不会感知到像被风吹动的叶子这样的无生命物体。您可以编程让Pi对红外线光的变化做出反应，例如触发事件，如打开灯、响铃，或者像我们在这个项目中所做的那样，发送电子邮件。
- en: '![image](../images/f0138-01.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0138-01.jpg)'
- en: '**FIGURE 10-1:** PIR motion sensor'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-1：** PIR运动传感器'
- en: 'The sensor outputs HIGH if it detects movement or LOW if it doesn’t, and it
    has only 3 pins: VCC, GND, and data. Data outputs a 3.3 V signal, perfect for
    your Pi!'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该传感器在检测到运动时输出高电平（HIGH），没有检测到运动时输出低电平（LOW），并且它只有3个引脚：VCC、GND和数据。数据输出一个3.3V的信号，非常适合您的Pi！
- en: '**SENDING AN EMAIL WITH PYTHON**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用PYTHON发送电子邮件**'
- en: Python’s email library makes it straightforward to send emails through Python.
    We’ll write that script now before assembling the parts.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python的电子邮件库使得通过Python发送电子邮件变得简单。我们将在编写脚本之前先组装各个部分。
- en: '**Finding Your SMTP Server Details**'
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**查找您的SMTP服务器详细信息**'
- en: To send emails through code, you need to include your *Simple Mail Transfer
    Protocol (SMTP)* server details. SMTP is an internet standard for email transmission,
    and each email provider has a different SMTP server.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过代码发送电子邮件，您需要包括您的*简单邮件传输协议（SMTP）*服务器详细信息。SMTP是电子邮件传输的互联网标准，每个电子邮件提供商都有不同的SMTP服务器。
- en: These details include your service provider’s *server address* and *port* and
    whether it uses *Transport Layer Security (TLS)*. TLS is a protocol for establishing
    a secure connection between two email servers. To get this information simply
    search the internet for *SMTP server settings* along with the name of your email
    provider. You’ll plug these details into the script to personalize it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些详细信息包括您的服务提供商的*服务器地址*和*端口*，以及是否使用*传输层安全性（TLS）*。TLS是一种用于在两个电子邮件服务器之间建立安全连接的协议。要获取这些信息，只需在互联网上搜索*SMTP服务器设置*，并加上您的电子邮件提供商名称。您将把这些详细信息插入到脚本中以进行个性化设置。
- en: '**The Email-Sending Script**'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子邮件发送脚本**'
- en: '**NOTE**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Don’t name your file* email.py *because that’s a Python library name, and
    your script won’t work.*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要将您的文件命名为* email.py *，因为这是Python库的名称，您的脚本将无法工作。*'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 10-1](ch10.xhtml#ch10list1) to the Python Editor
    and save the script as *send_email.py* inside the *Sensors* folder (remember that
    you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3（IDLE）**，并进入**文件** ▸ **新建文件**以创建一个新的脚本。将[示例10-1](ch10.xhtml#ch10list1)中的代码复制到Python编辑器中，并将脚本保存为*send_email.py*，放在*Sensors*文件夹中（记得，您可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 10-1:** The email notification script'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例10-1：** 电子邮件通知脚本'
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**WARNING**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*If you use the snippet at* ➎ *inside a `while` loop without a delay, you will
    fill your inbox with thousands of emails and your account will probably be blocked,
    so make sure to include a delay if you use this snippet in any other project!*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您在`while`循环中使用下面的代码片段➎，并且没有延迟，您的收件箱将被成千上万封电子邮件填满，您的账户可能会被封锁，所以如果在其他项目中使用此代码片段，请务必添加延迟！*'
- en: 'You start by importing the libraries you need for SMTP and email-related functions:
    smtplib and MIMEText ➊. Next, you create variables for the email address to send
    from, that email’s password, and an email address to send to ➋. We suggest you
    create a second email to send the notifications to your everyday email because
    you will be giving less secure apps access to the account you send from. Make
    sure that you input your own information for these strings.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要导入用于SMTP和电子邮件相关功能的库：smtplib和MIMEText ➊。接下来，您需要为发件人电子邮件地址、该电子邮件的密码以及收件人电子邮件地址创建变量➋。我们建议您创建一个第二个电子邮件账户来接收通知，因为您将为发送邮件的账户授予不太安全的应用程序访问权限。确保为这些字符串输入您自己的信息。
- en: The code block at ➌ writes the email. You start by creating a `body` variable
    that stores your email body text. Then you create an object called `msg` that
    generates the email itself using `msg = MIMEText(body)`. Feel free to change the
    email body and subject by changing the string in the `body` and `msg['Subject']`
    variables, respectively.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ 处的代码块编写电子邮件。首先创建一个`body`变量来存储你的电子邮件正文文本。然后创建一个名为`msg`的对象，该对象使用`msg = MIMEText(body)`生成电子邮件本身。你可以通过更改`body`和`msg['Subject']`变量中的字符串来随意更改电子邮件正文和主题。
- en: At ➍, you establish communication with an SMTP server. Pass the provider’s SMTP
    server address as a string as the first argument to `smtplib.SMTP()`, and the
    port as an int as the second argument. In this script, we’re using a Gmail SMTP
    server and port. If you use another email provider, make sure to change those
    values.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➍ 处，您与 SMTP 服务器建立通信。将提供商的 SMTP 服务器地址作为字符串传递给`smtplib.SMTP()`的第一个参数，并将端口作为
    int 传递给第二个参数。在此脚本中，我们使用的是 Gmail SMTP 服务器和端口。如果您使用其他电子邮件提供商，请确保更改这些值。
- en: The `server.starttls()` function is necessary for email providers that use TLS
    to encrypt messages. If your email provider doesn’t use TLS, you can remove or
    comment out that line.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.starttls()`函数对于使用 TLS 加密消息的电子邮件提供商是必需的。如果你的电子邮件提供商不使用 TLS，你可以删除或注释掉该行。'
- en: Next, the script logs into the sending email account ➎, sends the email, and
    stops communication with the server. Last, the script prints an `'Email sent'`
    message to the Python shell to let the user know an email was sent.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，脚本登录到发送电子邮件的帐户 ➎，发送电子邮件，并停止与服务器的通信。最后，脚本将`'Email sent'`消息打印到 Python shell，以告知用户已发送电子邮件。
- en: '**Running the Email-Sending Script**'
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行电子邮件发送脚本**'
- en: It’s now time to see your script in action! Save your script and press **F5**
    or go to **Run** ▸ **Run Module** to run the script. Then check the email inbox
    you sent the message to. You should have a new email. You can see an email we
    received using this script in [Figure 10-2](ch10.xhtml#ch10fig2).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看你的脚本的实际效果了！保存你的脚本并按 **F5** 或转到 **Run** ▸ **Run Module** 来运行脚本。然后检查你发送消息的电子邮件收件箱。你应该收到一封新邮件。你可以在[图
    10-2](ch10.xhtml#ch10fig2)中看到我们使用此脚本收到的电子邮件。
- en: '![image](../images/f0140-01.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0140-01.jpg)'
- en: '**FIGURE 10-2:** Email sent with *send_email.py*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10-2：** 使用 *send_email.py* 发送的电子邮件'
- en: If you haven’t received an email, verify that the email and SMTP information
    in *send_email.py* are correct. Also verify that you have given permission to
    let less secure apps use your account in your email account settings.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有收到电子邮件，请验证 *send_email.py* 中的电子邮件和 SMTP 信息是否正确。另请验证您是否已授予权限，允许安全性较低的应用程序在您的电子邮件帐户设置中使用您的帐户。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: Now let’s wire your PIR sensor to your Raspberry Pi so it can send you emails
    when the sensor detects movement. You’ll also include two LEDs into your system,
    one to indicate whether the alarm is armed and one to indicate whether it has
    been triggered, as well as a pushbutton to arm and disarm the sensor.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将你的 PIR 传感器连接到你的 Raspberry Pi，以便它可以在传感器检测到移动时向你发送电子邮件。你还将在你的系统中包含两个 LED，一个用于指示警报是否已启动，另一个用于指示警报是否已被触发，以及一个用于启动和禁用传感器的按钮。
- en: Follow these steps to build the intruder alarm circuit, using [Figure 10-3](ch10.xhtml#ch10fig3)
    as a reference.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建入侵者警报电路，使用[图 10-3](ch10.xhtml#ch10fig3)作为参考。
- en: '![image](../images/f0141-01.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0141-01.jpg)'
- en: '**FIGURE 10-3:** Circuit for the intruder alarm'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10-3：** 入侵者警报电路'
- en: Connect GND of the Pi to one of the breadboard’s blue rails.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Pi 的 GND 连接到面包板的蓝色导轨之一。
- en: Insert a red LED and a green LED into the breadboard. Connect the green LED’s
    positive lead to GPIO 18 through a 330 Ω resistor, with the resistor between the
    LED lead and the GPIO pin, and connect the negative lead to the GND rail. Connect
    the red LED’s positive lead to GPIO 17 through another 330 Ω resistor and connect
    the negative lead to the GND rail.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将红色 LED 和绿色 LED 插入面包板。通过一个 330 Ω 电阻将绿色 LED 的正极引脚连接到 GPIO 18，电阻位于 LED 引脚和 GPIO
    引脚之间，并将负极引脚连接到 GND 导轨。通过另一个 330 Ω 电阻将红色 LED 的正极引脚连接到 GPIO 17，并将负极引脚连接到 GND 导轨。
- en: Insert the pushbutton in the middle of the breadboard so that it bridges the
    center break, as shown in [Figure 10-3](ch10.xhtml#ch10fig3). Connect the pin
    at the bottom right to the GND rail and the pin at the bottom left to GPIO 2.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮插入面包板的中间，使其桥接中心断裂处，如[图 10-3](ch10.xhtml#ch10fig3)所示。将右下角的引脚连接到 GND 导轨，将左下角的引脚连接到
    GPIO 2。
- en: Connect the PIR motion sensor with the connections in the following table.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下表中的连接方式连接 PIR 运动传感器。
- en: '| **PIR MOTION SENSOR** | **RASPBERRY PI** |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| **PIR 动作传感器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| GND | GND |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| OUT | GPIO 4 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 输出 | GPIO 4 |'
- en: '| VCC | 5 V |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| VCC | 5 V |'
- en: '**WRITING THE SCRIPT**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Enter the code in [Listing 10-2](ch10.xhtml#ch10list2) into the new file
    and save the script as *intruder_alarm.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，并进入**文件** ▸ **新建文件**，创建一个新的脚本。将[清单 10-2](ch10.xhtml#ch10list2)中的代码输入新文件，并将脚本保存为*intruder_alarm.py*，保存在*Sensors*文件夹中（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 10-2:** The intruder alarm script'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 10-2：** 入侵者报警脚本'
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code is really straightforward and should all be familiar from [Listing
    10-1](ch10.xhtml#ch10list1). You start by importing the needed libraries ➊ and
    creating `gpiozero` objects to refer to the LEDs, button, and motion sensor ➋.
    At ➌, you create the `motion_sensor_status` and `email_sent` control variables
    to identify whether the motion sensor was triggered and whether an email has been
    sent. You then create the `arm_motion_sensor()` function that arms and disarms
    the motion sensor when you press the pushbutton ➍. The `send_email()` function
    at ➎ sends an email when the sensor detects motion, as long as the sensor is armed
    and the `email_sent` variable is equal to `False`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码非常简单，应该和[清单 10-1](ch10.xhtml#ch10list1)中的内容非常熟悉。首先，导入所需的库 ➊，并创建`gpiozero`对象来引用LED、按钮和动作传感器
    ➋。接着在 ➌ 处创建`motion_sensor_status`和`email_sent`控制变量，以确定动作传感器是否被触发，以及邮件是否已发送。然后创建`arm_motion_sensor()`函数，当你按下按钮时，这个函数会启动和关闭动作传感器
    ➍。在 ➎ 处，`send_email()`函数会在传感器检测到运动时发送电子邮件，前提是传感器被激活且`email_sent`变量为`False`。
- en: 'Last, you assign functions to events: the `arm_motion_sensor()` function is
    called when the pushbutton is pressed ➏, and the `send_email()` function is called
    when motion is detected ➐. The `pause()` function at the end of the code keeps
    the script running for events to be detected ➑.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你为事件分配函数：当按下按钮时，会调用`arm_motion_sensor()`函数 ➏，而当检测到运动时，会调用`send_email()`函数
    ➐。代码末尾的`pause()`函数使得脚本持续运行，以便检测事件 ➑。
- en: Notice that the `send_email()` function has an `if` statement condition that
    sets the script to send an email only if motion is detected and if the `email_sent`
    variable is equal to `False`. When an email is sent out, the `email_sent` variable
    changes to `True` and your script sends no more emails. You set the `email_sent`
    variable to `False` again by pressing the pushbutton twice, rearming the alarm.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`send_email()`函数中有一个`if`语句条件，只有在检测到运动并且`email_sent`变量为`False`时，脚本才会发送电子邮件。当电子邮件发送后，`email_sent`变量会变为`True`，此时脚本将不再发送电子邮件。你可以通过按下按钮两次将`email_sent`变量重置为`False`，从而重新激活报警。
- en: This condition prevents the script from sending you a lot of unnecessary emails.
    For example, say you left your dog home when you were out and it triggered the
    sensor; with this condition, you only receive one email saying that motion was
    detected. If you didn’t have this condition, you would receive endless emails
    until your dog moved out of the sensor range.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条件防止脚本发送大量不必要的电子邮件。例如，如果你把狗留在家里，而它触发了传感器；有了这个条件，你只会收到一封说检测到运动的电子邮件。如果没有这个条件，你将会收到无尽的邮件，直到你的狗离开传感器范围。
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Arm the sensor
    by pressing the pushbutton; the red status LED should light up. Test the alarm
    by moving your hand in front of the motion sensor. You should receive a new message
    in your inbox and the triggered green LED should light up.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**F5**或进入**运行** ▸ **运行模块**来运行脚本。按下按钮激活传感器；红色状态LED应亮起。通过在动作传感器前挥动手测试报警。当运动被检测到时，你应该会在收件箱中收到一封新邮件，并且触发的绿色LED会亮起。
- en: Place this circuit in a strategic place and wait to see if someone enters your
    room while you’re out.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将此电路放置在一个战略位置，等待看看是否有人在你不在时进入你的房间。
- en: '**TAKING IT FURTHER**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步拓展**'
- en: 'This project showed you how to use the PIR motion sensor with the Raspberry
    Pi and how to send emails with Python. These are handy skills that you can add
    to what you’ve learned in other projects to invent your own devices. Here are
    some simple ideas for projects you can build with the motion sensor:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了如何使用 PIR 移动传感器与树莓派配合使用，以及如何通过 Python 发送电子邮件。这些是非常实用的技能，你可以将它们与其他项目中学到的知识结合起来，发明你自己的设备。以下是一些你可以使用移动传感器构建的简单项目想法：
- en: Add a piezo buzzer to your alarm circuit so that when motion is detected not
    only is an email sent but an alarm is also sounded.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的报警电路中加入一个蜂鸣器，这样当检测到运动时，不仅会发送电子邮件，还会触发报警声。
- en: Automate your room’s lights to automatically turn on when you enter. You may
    need a relay to do this—check [Project 16](ch16.xhtml#ch16) where we explain how
    to use a relay.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化控制你房间的灯光，使其在你进入时自动打开。你可能需要一个继电器来实现这一功能—请参考[项目 16](ch16.xhtml#ch16)，其中我们介绍了如何使用继电器。
- en: Use a relay and a photoresistor to make a security nightlight that turns on
    only when movement is detected in the dark.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用继电器和光敏电阻制作一个安全夜灯，只有在黑暗中检测到运动时才会打开。
- en: '**11'
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11'
- en: Gas and Smoke Alarm**
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 燃气和烟雾报警器**
- en: In this project, you’ll build a gas and smoke alarm using an MQ-2 gas and smoke
    sensor and a piezo buzzer. Every time the sensor detects gas or smoke in the atmosphere
    above a certain threshold, the buzzer will sound.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用 MQ-2 燃气和烟雾传感器以及蜂鸣器构建一个燃气和烟雾报警器。每次传感器检测到大气中超过一定阈值的气体或烟雾时，蜂鸣器就会响起。
- en: '![image](../images/f0146-01.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0146-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: MQ-2 gas and smoke sensor
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: MQ-2 燃气和烟雾传感器
- en: MCP 3008 chip
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: MCP 3008 芯片
- en: Piezo buzzer
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂鸣器
- en: 5 mm LED
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 5 毫米 LED
- en: 330 Ω resistor
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Pushbut ton
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮
- en: Lighter
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 打火机
- en: Jumper wires
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING THE MQ-2 GAS AND SMOKE SENSOR**'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 MQ-2 燃气和烟雾传感器**'
- en: 'The MQ-2 gas and smoke sensor is sensitive to smoke and the following flammable
    gases: propane, butane, methane, alcohol, and hydrogen. [Figure 11-1](ch11.xhtml#ch11fig1)
    shows the sensor’s front and back views.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: MQ-2 燃气和烟雾传感器对烟雾以及以下可燃气体敏感：丙烷、丁烷、甲烷、酒精和氢气。[图 11-1](ch11.xhtml#ch11fig1)展示了传感器的正反面。
- en: '![image](../images/f0147-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0147-01.jpg)'
- en: '**FIGURE 11-1:** The MQ-2 gas and smoke sensor, front and back views'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11-1：** MQ-2 燃气和烟雾传感器，正反面图'
- en: The MQ-2 has two ways of outputting gas levels. The first is to read the gas
    concentration in the atmosphere and output it as an analog signal from the analog
    output pin AO, where the higher the gas levels, the higher the output voltage.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: MQ-2 具有两种输出气体浓度的方式。第一种方式是读取大气中的气体浓度，并通过模拟输出引脚 AO 输出模拟信号，气体浓度越高，输出电压越高。
- en: The second is to set a certain threshold and then output a HIGH signal from
    the digital output pin DO if the gas levels are above that threshold, and a LOW
    signal if the gas levels are below that threshold. The MQ-2 has a potentiometer
    built into the back that you can adjust with a screwdriver to change this threshold.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方式是设定一个阈值，如果气体浓度超过该阈值，则从数字输出引脚 DO 输出高电平信号，如果气体浓度低于该阈值，则输出低电平信号。MQ-2 后面内置有一个电位器，你可以用螺丝刀调整它来改变这个阈值。
- en: The sensor also has a power LED in the back that indicates if the sensor is
    on, and a digital output LED that lights up when detected gas levels are above
    the set threshold.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器背面还配有一个电源 LED，指示传感器是否开启，以及一个数字输出 LED，当检测到的气体浓度超过设定阈值时，LED 会亮起。
- en: You’ll be reading the analog signal, which provides a quantitative measure of
    the gas levels, allowing you to better define the threshold value above which
    you want the buzzer to warn you of higher gas levels. Remember that the Pi can
    read only digital signals, so to read the analog signals with the Pi, you’ll use
    an analog-to-digital converter module (MCP3008 chip), which was first introduced
    in [Project 3](ch03.xhtml#ch03).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你将读取模拟信号，该信号提供了气体浓度的定量测量，使你能够更好地定义阈值，超过该阈值时，蜂鸣器会警告你气体浓度过高。请记住，树莓派只能读取数字信号，因此，要使用树莓派读取模拟信号，你将使用一个模拟到数字转换模块（MCP3008
    芯片），该模块在[项目 3](ch03.xhtml#ch03)中首次介绍。
- en: '**INTRODUCING THE PIEZO BUZZER**'
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍蜂鸣器**'
- en: The piezo buzzer sounds the alarm when it receives a digital signal from the
    Pi. The buzzer you’ll use, shown in [Figure 11-2](ch11.xhtml#ch11fig2), is about
    as simple as it comes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当蜂鸣器接收到来自树莓派的数字信号时，它会发出警报。你将使用的蜂鸣器，如[图 11-2](ch11.xhtml#ch11fig2)所示，是非常简单的。
- en: '![image](../images/f0148-01.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0148-01.jpg)'
- en: '**FIGURE 11-2:** Piezo buzzer'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11-2：** 蜂鸣器'
- en: The buzzer’s case contains a disc that vibrates at a certain frequency when
    voltage is sent to it. Wiring the piezo buzzer is simple. All you need to do is
    connect one wire to your Pi’s GND pin and another to a GPIO pin.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂鸣器的外壳内包含一个在接收到电压时按特定频率振动的圆盘。接线压电蜂鸣器很简单。你需要做的就是将一根电线连接到树莓派的 GND 引脚，另一根连接到一个
    GPIO 引脚。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: To build the smoke and gas detector alarm circuit, you need to connect an LED
    and a pushbutton to the Pi; you should already know how to wire these from previous
    projects. You also need to connect the piezo buzzer and the MQ-2 sensor to the
    Pi—the latter will connect through the MCP3008 chip). Follow these instructions,
    using [Figure 11-3](ch11.xhtml#ch11fig3) as a reference.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建烟雾和气体探测器报警电路，你需要将 LED 和按钮连接到树莓派；你应该已经知道如何根据之前的项目进行接线。你还需要将压电蜂鸣器和 MQ-2 传感器连接到树莓派——后者通过
    MCP3008 芯片连接）。按照这些说明，使用 [图 11-3](ch11.xhtml#ch11fig3) 作为参考。
- en: '![image](../images/f0148-02.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0148-02.jpg)'
- en: '**FIGURE 11-3:** Smoke and gas detector circuit diagram'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11-3：** 烟雾和气体探测器电路图'
- en: Connect GND to the blue breadboard rail and 3.3 V to the red rail.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 连接到蓝色面包板导轨，将 3.3 V 连接到红色导轨。
- en: Place the MCP3008 chip in the middle of the breadboard so that the legs run
    parallel on either side of the center divide, as shown in [Figure 11-3](ch11.xhtml#ch11fig3),
    and wire it according to the following table.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MCP3008 芯片放置在面包板的中央，使其引脚平行地位于中央分隔线两侧，如 [图 11-3](ch11.xhtml#ch11fig3) 所示，并按照下表接线。
- en: '| **MCP3008** | **CONNECT TO** |'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MCP3008** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | MQ-2 AO pin |'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | MQ-2 AO 引脚 |'
- en: '| 9 | GND |'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | GND |'
- en: '| 10 | GPIO 8 |'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | GPIO 8 |'
- en: '| 11 | GPIO 10 |'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | GPIO 10 |'
- en: '| 12 | GPIO 9 |'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | GPIO 9 |'
- en: '| 13 | GPIO 11 |'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | GPIO 11 |'
- en: '| 14 | GND |'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | GND |'
- en: '| 15 | 3.3 V |'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 3.3 V |'
- en: '| 16 | 3.3 V |'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 3.3 V |'
- en: Remember that when the half-circle on the MCP3008 is at the top, pin 1 is the
    top pin on the left side; see [“Analog-to-Digital Converters”](ch03.xhtml#lev41)
    on [page 55](ch03.xhtml#page_55) for a complete MCP3008 pinout.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，当 MCP3008 的半圆形标记在顶部时，引脚 1 是左侧的顶部引脚；完整的 MCP3008 引脚图请参见 [“模拟到数字转换器”](ch03.xhtml#lev41)
    第 55 页 ([ch03.xhtml#page_55])。
- en: Place the MQ-2 gas and smoke sensor in the breadboard and wire it as indicated.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MQ-2 气体和烟雾传感器插入面包板，并按照指示接线。
- en: '| **MQ-2 SENSOR** | **CONNECT TO** |'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MQ-2 传感器** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | 5 V |'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | 5 V |'
- en: '| GND | GND |'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| DO | No connection |'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| DO | 无连接 |'
- en: '| AO | MCP3008 pin 1 |'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| AO | MCP3008 引脚 1 |'
- en: Insert an LED into the breadboard. Connect the positive lead to GPIO 17 through
    a 330 Ω resistor and connect the negative lead to the GND rail.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LED 插入面包板。通过一个 330 Ω 电阻将正极引线连接到 GPIO 17，将负极引线连接到 GND 导轨。
- en: Insert the pushbutton in the middle of the breadboard, with two leads on either
    side of the center divide. Connect the bottom-right lead to GND power rail and
    the bottom-left lead to GPIO 2, making sure both connected leads are on the same
    side of the divide.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮插入面包板的中央，确保两个引线位于中心分隔线的两侧。将右下方的引线连接到 GND 电源轨，将左下方的引线连接到 GPIO 2，确保连接的两个引线位于分隔线的同一侧。
- en: Insert the buzzer into the breadboard and connect the black wire to GND and
    the red wire to GPIO 27.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蜂鸣器插入面包板，并将黑线连接到 GND，将红线连接到 GPIO 27。
- en: With your circuit wired up, it’s time to upload some code.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 电路接好后，接下来就是上传代码了。
- en: '**WRITING THE SCRIPT**'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 11-1](ch11.xhtml#ch11list1) to the Python Editor
    and save the script as *smoke_detector.py* inside the *Sensors* folder. (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 **Python 3 (IDLE)**，然后转到 **文件** ▸ **新建文件** 来创建一个新的脚本。将 [清单 11-1](ch11.xhtml#ch11list1)
    中的代码复制到 Python 编辑器，并将脚本保存为 *smoke_detector.py*，保存在 *Sensors* 文件夹中。（记住，你可以从 *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载所有脚本）：
- en: '**LISTING 11-1:** The smoke and gas detector script'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 11-1：** 烟雾和气体探测器脚本'
- en: '[PRE6]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, you import the `LED`, `Button`, `Buzzer`, and `MCP3008` classes from
    the gpiozero library and the `sleep` function from the time library ➊; then, you
    create `gpiozero` objects to refer to the LED, button, MCP3008 (MQ-2 gas sensor),
    and buzzer ➋. Next, you create a `gas_sensor_status` variable that will indicate
    whether the smoke sensor is armed ➌; the sensor is armed if this variable is `True`
    and not armed if it’s `False`. You need to set a `threshold` value so that the
    buzzer beeps only when the gas levels are above this threshold ➍. We’ll cover
    finding out your threshold value in a moment.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您从 gpiozero 库导入 `LED`、`Button`、`Buzzer` 和 `MCP3008` 类，以及从 time 库导入 `sleep`
    函数 ➊；然后，您创建 `gpiozero` 对象来引用 LED、按钮、MCP3008（MQ-2 气体传感器）和蜂鸣器 ➋。接下来，您创建一个 `gas_sensor_status`
    变量，用来指示烟雾传感器是否已武装 ➌；如果该变量为 `True`，则表示传感器已武装，如果为 `False`，则表示未武装。您需要设置一个 `threshold`
    值，以便只有当气体浓度超过该阈值时，蜂鸣器才会响起 ➍。我们稍后将介绍如何找出您的阈值值。
- en: The `arm_gas_sensor()` function ➎ arms and disarms the sensor by switching the
    value in the `gas_sensor_status` variable to the opposite of whatever it currently
    holds, whether that’s `True` or `False`, when the function is called. At ➏, you
    set the function to call when the pushbutton is pressed so that you can arm and
    disarm the sensor manually. You also set an LED to turn on when the sensor is
    armed; that way, you can visually identify its status.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`arm_gas_sensor()` 函数 ➎ 通过将 `gas_sensor_status` 变量的值切换为当前值的相反值（无论是 `True` 还是
    `False`），来使传感器处于武装或解除武装状态。当该函数被调用时，它会执行这一操作。 ➏ 时，您设置函数在按下按钮时调用，这样您就可以手动武装或解除武装传感器。您还设置了一个
    LED，当传感器被武装时，它会亮起；这样，您就可以通过视觉识别其状态。'
- en: The final block of code is a `while` loop ➐ that continuously checks whether
    the sensor is armed and whether the gas levels are above the threshold. If the
    sensor is armed and the gas levels are above the threshold value, the buzzer beeps
    via the `buzzer.beep()` function. The final `buzzer.off()` function stops the
    buzzer.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一段代码是一个 `while` 循环 ➐，它会不断检查传感器是否已武装，以及气体浓度是否超过阈值。如果传感器已武装且气体浓度超过阈值，蜂鸣器会通过
    `buzzer.beep()` 函数发出声音。最后，`buzzer.off()` 函数会停止蜂鸣器。
- en: '**Setting the Threshold Value**'
  id: totrans-225
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置阈值**'
- en: 'To accurately set a safe gas-level threshold, you first need to calibrate your
    sensor to your environment. That means you need to measure your gas levels when
    there is no gas present, and then set your threshold to a value slightly above
    that. First, find out what the gas levels of your environment usually are:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准确设置安全的气体浓度阈值，您首先需要根据环境来校准传感器。这意味着您需要在没有气体存在时测量气体浓度，然后将阈值设置为略高于此值。首先，找出您所在环境的气体浓度通常是多少：
- en: Uncomment the line at ➑, and then save and run the script.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释 ➑ 处的代码行，然后保存并运行脚本。
- en: You should see the `gas_sensor` values displayed on the Python shell. Those
    are the values read when there’s no gas or smoke in the sensor’s range. Your `threshold`
    value should be slightly higher than this. For example, if your default value
    is `0.07`, we recommend setting your threshold to `0.1`, but it depends on your
    desired sensitivity level.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该能在 Python shell 中看到 `gas_sensor` 的值。这些值是在传感器范围内没有气体或烟雾时读取的值。您的 `threshold`
    值应该稍高于这些值。例如，如果您的默认值是 `0.07`，我们建议将阈值设置为 `0.1`，但这取决于您所需的灵敏度水平。
- en: Grab a lighter and press the trigger (without igniting the lighter). Hold the
    lighter next to the sensor to release some gas. The `gas_sensor` value displayed
    on the Python shell should increase. Your `threshold` value should be lower than
    the maximum value you got when exposing the sensor to gas.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拿一个打火机并按下触发器（不要点燃打火机）。将打火机靠近传感器，释放一些气体。Python shell 中显示的 `gas_sensor` 值应该会增加。您的
    `threshold` 值应该低于暴露传感器到气体时获得的最大值。
- en: '**WARNING**'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Always be careful when using lighters and gas; don’t hold the gas trigger
    down for too long, and do not ignite the lighter when gas has been released into
    the air.*'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*使用打火机和气体时一定要小心；不要长时间按住气体触发器，且不要在气体已释放到空气中时点燃打火机。*'
- en: With the values obtained from the last two steps, tune the `threshold` value
    ➍ somewhere between these two so that it’s neither too sensitive nor too unresponsive.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据上两步获得的值，调整 `threshold` 值 ➍ 使其介于这两者之间，这样它既不太灵敏，也不太迟钝。
- en: Comment out the `print` statement ➑ and save the script.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉 ➑ 处的 `print` 语句并保存脚本。
- en: '**Running the Script**'
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Press the
    pushbutton to arm the sensor. The red LED should light up. Then test it out by
    using a lighter to release some gas next to the sensor until the buzzer beeps.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '*This gas and smoke alarm should not be used to replace an off-the-shelf smoke
    detector.*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You now have a gas and smoke detector alarm to monitor your
    house and warn you of fire!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aim of this project was to show you how to read sensors that output analog
    signals. Now you can add features to this project. For example, you can edit the
    script to send an email when gas or smoke is above the threshold value, as we
    did in [Project 10](ch10.xhtml#ch10).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '**12'
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Temperature and Humidity Data Logger**
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’re going to build a data logger that automatically stores
    data on temperature and humidity. You’ll learn how to read and log data from your
    environment, which is useful in numerous applications.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0154-01.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: DHT22 temperature and humidity sensor (DHT11 and AM2302 also work)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 kΩ resistor
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_Python_DHT library
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the DHT22 temperature and humidity sensor to collect data, which
    will then be saved in a *.txt* file that you can then use to build charts, graphs,
    and other visualizations. This project gives you the basics of data collection,
    which is useful in many different applications that use sensors—for example, monitoring
    soil dampness, taking the temperature of water in a fish tank, or even registering
    the exact time unexpected movement was detected around your house. You can apply
    the concepts from this project to any sensor.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE DHT22 SENSOR**'
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DHT22 (shown in [Figure 12-1](ch12.xhtml#ch12fig1)) is a digital temperature
    and humidity sensor with a built-in chip that converts analog to digital signals,
    so there’s no need to use an analog-to-digital converter. This makes wiring really
    simple.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0155-01.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-1:** DHT22 temperature and humidity sensor'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a simple circuit that just has the DHT22 sensor wired to your Pi via
    a resistor. Follow these instructions, using the circuit diagram in [Figure 12-2](ch12.xhtml#ch12fig2)
    as a reference.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND and 3.3 V on the Pi to the breadboard’s blue and red power rails,
    respectively.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the DHT22 sensor according to the following table, with pins starting
    at 1 from left to right when the sensor is facing you. Make sure to wire the resistor
    between pin 2 of the sensor and the breadboard’s red power rail.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **DHT22** | **RASPBERRY PI** |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: '| 1 | 3.3 V |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| 2 | GPIO 4; also connect to 3.3 V through a 4.7 kΩ resistor |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| 3 | Don’t connect |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| 4 | GND |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0156-01.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-2:** Wiring the DHT22 sensor to the Pi'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll use the Adafruit_Python_DHT library, which allows you to easily control
    the DHT22 sensor and read the data.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Adafruit_Python_DHT库，它可以让你轻松控制DHT22传感器并读取数据。
- en: '**Installing the DHT22 Library**'
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装DHT22库**'
- en: This library can also be used with similar sensors, like DHT11 and AM2302 (the
    wired version of the DHT22 from Adafruit), if you’re using those instead.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是类似的传感器，如DHT11或AM2302（Adafruit版DHT22的有线版本），这个库也可以使用。
- en: 'Open the terminal and enter the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并输入以下内容：
- en: '[PRE7]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the terminal, navigate to the desktop, make a folder called *Libraries*
    if you haven’t already, and move into the newly created folder as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端开始，进入桌面，如果尚未创建名为*Libraries*的文件夹，则创建该文件夹，然后进入新创建的文件夹：
- en: '[PRE8]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Clone the library by entering the following command:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令克隆该库：
- en: '[PRE9]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, move to the *Adafruit_Python_DHT* directory and install the library
    with these commands:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，进入*Adafruit_Python_DHT*目录，并使用以下命令安装库：
- en: '[PRE10]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the necessary library installed, it’s time to write the script.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完必要的库后，接下来是编写脚本的步骤。
- en: '**Entering the Script**'
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'The DHT22 library is not supported by Python 3, so you need to use Python 2.7\.
    Open **Python 2.7 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Copy the code from [Listing 12-1](ch12.xhtml#ch12list1) to the Python Editor and
    save the script as *temperature_humidity_data_logger.py* inside the *Sensors*
    folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: DHT22库不支持Python 3，因此你需要使用Python 2.7。打开**Python 2.7 (IDLE)**，然后进入**文件** ▸ **新建文件**以创建一个新的脚本。将[Listing
    12-1](ch12.xhtml#ch12list1)中的代码复制到Python编辑器，并将脚本保存为*temperature_humidity_data_logger.py*，并保存在*Sensors*文件夹中（记得你可以从*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '**LISTING 12-1:** The temperature and humidity data logger script'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 12-1：** 温湿度数据记录脚本'
- en: '[PRE11]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, you import the Adafruit_DHT library ➊ you just installed, as well as
    the built-in time library. Then, at ➋, you uncomment the line that corresponds
    to the sensor you’re using. If you’re using DHT22, you don’t need to change anything.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入你刚刚安装的Adafruit_DHT库➊以及内置的time库。然后，在➋处取消注释与你使用的传感器对应的那一行。如果你使用的是DHT22，就无需做任何更改。
- en: The line at ➎ reads the temperature and humidity and saves the readings in the
    `temperature` and `humidity` variables, respectively. If you want your temperature
    readings in Fahrenheit, uncomment the line at ➏ to make the conversion from Celsius.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: ➎处的代码读取温湿度并将读数分别保存在`temperature`和`humidity`变量中。如果你希望温度读取为华氏度，请取消注释➏处的代码行来进行摄氏度到华氏度的转换。
- en: 'Sometimes the sensor can’t read the data and sends a `null` result to the Pi.
    The `if` statement at ➐ guarantees that the Pi saves data only if it is not `null`.
    You also timestamp each reading using `time.strftime("%H:%M:%S %d/%m/%Y")`—the
    argument in the parentheses here indicates the format you want the time and date
    to appear in: hours, minutes, seconds, day, month, and year, respectively.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 有时传感器无法读取数据，并将`null`结果发送到Pi。➐处的`if`语句确保只有当数据不为`null`时，Pi才保存数据。你还使用`time.strftime("%H:%M:%S
    %d/%m/%Y")`为每次读取添加时间戳——括号中的参数表示你希望时间和日期以小时、分钟、秒、日、月和年为顺序显示。
- en: This script reads and records the temperature and humidity every 10 seconds,
    but you can change this at ➒ by changing the delay time. The sensor is capable
    of taking readings every 2 seconds, but no faster than that.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本每隔10秒读取并记录一次温湿度，但你可以通过在➒处更改延迟时间来调整这个间隔。传感器每2秒可以读取一次数据，但不能更快。
- en: '**Creating, Writing, and Closing .txt files**'
  id: totrans-291
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建、写入和关闭.txt文件**'
- en: The DHT22 temperature and humidity readings are automatically saved in a *.txt*
    file that you create with the `open()` function ➌ and store in the `file` variable.
    This function accepts the name you want to give the file as an argument and, in
    this case, a `'``w'` telling Python you want this file to be in *write mode*,
    meaning the program can write and make changes to the file. The write mode overwrites
    existing files with the same name.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: DHT22的温湿度读数会自动保存在一个*.txt*文件中，该文件通过`open()`函数➌创建并存储在`file`变量中。此函数接受你希望文件名作为参数，在本例中，`'w'`表示你希望文件处于*写入模式*，即程序可以写入并修改文件。写入模式会覆盖同名的现有文件。
- en: '**NOTE**'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Every time you run the code, it will overwrite whatever was already in the*
    sensor_readings.txt *file. If you don’t want this to happen, change the filename
    at* ➍ *to create a new file each time you run the script.*'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '*每次运行代码时，它都会覆盖* sensor_readings.txt *文件中已经存在的内容。如果你不希望发生这种情况，请更改第➍处的文件名，以便每次运行脚本时都创建一个新文件。*'
- en: The `file.write()` function writes to the file and accepts a string as an argument.
    For example, with `file.write('time and date, temperature, humidity\n')` at ➍,
    you write “time and date, temperature, humidity” into the file. At ➐, you write
    the sensor data to the file and at➑ the timestamp. The `\n` tells Python to start
    the next display text on the next line, known as a *newline*.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`file.write()` 函数向文件写入内容，并接受一个字符串作为参数。例如，在第➍处使用`file.write(''time and date,
    temperature, humidity\n'')`，你将“time and date, temperature, humidity”写入文件。在第➐处，你将传感器数据写入文件，在第➑处写入时间戳。`\n`告诉Python在下一行开始显示文本，这叫做*换行*。'
- en: Finally, the `file.close()` function ➓ saves and closes the file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`file.close()` 函数 ➓ 保存并关闭文件。
- en: '**Running the Script**'
  id: totrans-297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Let the script
    run for a few hours to gather a decent amount of data, and when you’re happy with
    the data logging period, stop the script by pressing CTRL-C. You should then have
    a *sensor_readings.txt* file that contains all your data in your *Sensors* folder.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 按**F5**键或进入**运行** ▸ **运行模块**来运行脚本。让脚本运行几个小时，以收集足够的数据，当你对数据记录时间满意时，通过按CTRL-C停止脚本。然后，你应该会在*Sensors*文件夹中得到一个包含所有数据的*sensor_readings.txt*文件。
- en: '**TAKING IT FURTHER**'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步深入**'
- en: 'In this project you’ve learned a very useful concept: data logging. Now you
    can use data logging in other monitoring projects. Here are some ideas:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学到了一个非常有用的概念：数据记录。现在你可以在其他监测项目中使用数据记录。这里有一些想法：
- en: Use a PIR motion sensor that makes a timestamp every time it detects movement.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PIR运动传感器，每当它检测到运动时，会生成一个时间戳。
- en: Build a weather station data logger with the Sense HAT.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sense HAT构建一个天气站数据记录器。
- en: Search for other monitoring sensor applications—for example, soil moisture,
    rain, and light sensors—to build a greenhouse data logger.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索其他监测传感器应用程序——例如土壤湿度、雨量和光照传感器——以构建一个温室数据记录器。
