- en: Sensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**9'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All-in-One Weather Sensor Station**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll build a local weather station that detects the temperature,
    humidity, and barometric pressure with the Sense HAT. You’ll also create a graphical
    user interface to display temperature, humidity, and barometric pressure readings
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0127-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberr y Pi (versions with 40 GPIOs)
  prefs: []
  type: TYPE_NORMAL
- en: Sense HAT
  prefs: []
  type: TYPE_NORMAL
- en: '**THE SENSE HAT AS A WEATHER STATION**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Sense HAT makes an excellent small and affordable weather station, as it
    comes with temperature, humidity, and barometric pressure sensors. Reading sensor
    values with the Sense HAT is very straightforward, so this is a good starting
    point to learn about sensor readings.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Temperature Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The temperature readings might be a few degrees off when compared to the real
    value. The Sense HAT fits over the Pi and the heat from the Raspberry Pi processor
    can alter the results slightly.*'
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, the temperature sensor measures temperature. By default,
    the Sense HAT reads the temperature in degrees Celsius, so if you prefer the temperature
    in degrees Fahrenheit, you’ll need to convert the reading. To do so, multiply
    the degrees in Celsius by 9, divide by 5, and add 32, as shown in the following
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0128-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can add this formula to your code so that it does the conversion for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Humidity Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two common ways of expressing humidity: absolute humidity and relative
    humidity. *Absolute humidity* is the mass of water vapor in a certain volume of
    air, regardless of temperature, and it is expressed as kilograms per cubic meter
    (kg/m³). The amount of water vapor that the air can hold changes with temperature.
    The higher the temperature, the more water vapor it can hold. *Relative humidity*
    is expressed as a percentage and is the current water vapor in the air in relation
    to the maximum possible amount at a given temperature.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sense HAT records relative humidity because it’s more useful for weather
    forecasts: the greater the relative humidity percentage, the higher the probability
    of precipitation. As relative humidity changes with temperature, it’s always coupled
    with a temperature sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Barometric Pressure Sensor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The barometric pressure sensor reads atmospheric pressure, the “weight” of the
    air at a given point, measured in hPa (hectoPascal), which is equivalent to mbar
    (millibar). Why is it interesting to measure pressure? Because changes in atmospheric
    pressure can help you forecast the weather. Rising pressure tends to be a sign
    of good weather to come, and falling pressure a sign of bad weather, like rain
    or storms.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in pressure are really small. You need to follow your barometer readings
    meticulously to notice a trend.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEMPERATURE, HUMIDITY, AND PRESSURE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s look at how to read from the sensors and print the readings to the
    Python shell.
  prefs: []
  type: TYPE_NORMAL
- en: Mount your Sense HAT on your Pi like you did in [Project 8](ch08.xhtml#ch08)
    and make sure it’s well connected. When it’s first connected, the Sense HAT should
    display a rainbow background that matches the rainbow you see on the screen when
    you boot your Pi (see [Figure 9-1](ch09.xhtml#ch09fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0129-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 9-1:** Sense HAT rainbow background'
  prefs: []
  type: TYPE_NORMAL
- en: Inside your *Projects* folder create a new folder called *Sensors*. Then open
    **Python 3 (IDLE)** and go to **File** ▸ **New** to create a new script called
    *weather_data.py* and enter the code in [Listing 9-1](ch09.xhtml#ch09list1) (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 9-1:** Reading temperature, humidity, and pressure with the Sense
    HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First you import the `SenseHat` class from the sense_hat library ➊. Then, you
    create an object called `sense` to refer to the Sense HAT ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the sensor readings ➌ is simple thanks to the following, aptly named
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sense.temperature` gets the temperature reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sense.humidity` gets the humidity reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sense.pressure` gets the pressure reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The readings are given to several decimal places, so you use the function `round()`
    to round the numbers and make the results more readable. The `round()` function
    ➍ accepts as arguments the number you want to round and the number of decimal
    places you want to set, in that order—here, it’s set to two decimal places. You
    also use the `str()` function that converts the argument it takes into a string.
    You need to convert the readings into a string so you can concatenate them with
    the text you’ll print to the shell ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re almost a meteorologist! Next, you’ll build a user interface for your
    weather data.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING A USER INTERFACE FOR YOUR READINGS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s take this project to another level and build a cool user interface to
    display your sensor readings. Your interface should feature:'
  prefs: []
  type: TYPE_NORMAL
- en: A window in your desktop that displays temperature, humidity, and pressure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The humidity displayed in a vertical progress bar from 0 to 100 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The temperature and pressure displayed in numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels for each reading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 9-2](ch09.xhtml#ch09fig2) shows a draft layout for the user interface
    that should help you work out how to go about the code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0131-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 9-2:** Graphical user interface draft'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also be able to edit the code to choose font type, size, and color, and
    how labels and readings are positioned within the window. The following table
    gives you a list of all the titles and values and how we’ll display them.
  prefs: []
  type: TYPE_NORMAL
- en: '| **WIDGET** | **OPTIONS** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Window Title | Text: “Local Weather Station” |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Title | Text: “Humidity”, Font: Helvetica, Size: 18, Vertical padding:
    3 |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Value | Font: Courier, Size: 20, Color: Blue, Position: North |'
  prefs: []
  type: TYPE_TB
- en: '| Humidity Progress Bar | Orientation: Vertical, Size: 20, Color: Blue, Position:
    North, Length: 200, Maximum Value: 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Temperature Title | Text: “Temperature”, Font: Helvetica, Size: 18, Position:
    South |'
  prefs: []
  type: TYPE_TB
- en: '| Temperature Value | Font: Courier, Size: 20, Color: Red, Position: North
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pressure Title | Text: “Pressure”, Font: Helvetica, Size: 18, Position: South
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pressure Value | Font: Courier, Size: 20, Color: Green, Position: North |'
  prefs: []
  type: TYPE_TB
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 9-2](ch09.xhtml#ch09list2) to the Python Editor
    and save the script as *weather_station.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 9-2:** Displaying the Sense HAT readings in a graphical user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As usual, you start the code by importing the necessary libraries ➊. You may
    wonder why we need to import ttk if we’ve already imported everything with `*`
    from the tkinter library in the previous line. In this case, when you import with
    the wildcard `*`, you’re importing only a subset of what’s stored in the library
    folder—there isn’t any particular reason for this, it’s just the way the author
    of the library decided to do it—so we need to import the ttk library that’s also
    needed for this user interface separately.
  prefs: []
  type: TYPE_NORMAL
- en: To gather weather data, you need to use the physical Sense HAT and the sense_hat
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the User Interface**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After importing all of the libraries, you implement the part of the code that
    creates the user interface. First, you create a window that’s 200×480 pixels and
    give it the title `Local Weather Station` ➋. Then, you create a label for the
    humidity title ➌ with the settings shown in the table on [page 131](ch09.xhtml#page_131).
    At ➍, you create a string variable called `humidity` that will hold the humidity
    value. This value is then displayed at ➎.
  prefs: []
  type: TYPE_NORMAL
- en: The lines of code at ➏ create a canvas to place the progress bar in—the canvas
    is like a reserved space for the progress bar. After that, the code initializes
    a variable called `humidity_bar` of type `double` ➐, which is the variable type
    accepted by the progress bar. Finally, the lines at ➑ create the humidity progress
    bar to place on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The process for displaying titles and values for temperature and pressure follows
    the same steps as at ➌, ➍, and ➎.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatically Updating the Readings**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At ➒, you define the `update_readings()` function, which updates the displayed
    values every three seconds to keep your weather readings up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line updates the `temperature` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this line into its component parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sense.temperature` retrieves the temperature reading from the Sense HAT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`round(sense.temperature,2)` rounds the temperature readings to two decimal
    places.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str(round(sense.temperature,2)` converts the rounded reading to a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(str(round(sense.temperature,2)) + ''*C'')` concatenates the degree symbol
    to the string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature.set(str(round(sense.temperature, 2)) + ''*C'')` updates the `temperature`
    variable with the latest reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script uses a similar procedure for updating the `pressure` and `humidity`
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: The `window.update_idletasks()` function keeps the window up to date while monitoring.
    Finally, `window.after(3000, update_readings)` adds `update_readings` as an event
    to the `mainloop()`, and tells the Pi to call this function every 3,000 milliseconds
    (3 seconds).
  prefs: []
  type: TYPE_NORMAL
- en: At ➓, you call the `update_readings()` function and the `window.mainloop()`
    function that keeps the window running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can display the temperature in Fahrenheit by commenting and uncommenting
    these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. You should
    see your weather data displayed in the user interface as shown at the beginning
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve made your own weather station. You are officially a
    budding meteorologist.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some ideas for customizing this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the Fahrenheit conversion to the code and display the temperature as °F.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the graphical user interface—layout, font color, size, and type—to suit
    your tastes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the LED matrix display on the Sense HAT to display information about the
    weather. For example, you can display text, relative bar graphs, or green and
    red arrows indicating temperature, humidity, or pressure rising or falling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the rest of the projects within this part, you’ll learn how to send an email
    with Python and how to save sensor readings. Use these skills to send your weather
    data to your email or build a weather station data logger. Make sure you don’t
    miss the next projects!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Intruder Alarm with Email Notifications**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll create an intruder alarm that sends you email notifications.
    The alarm will detect whether someone has trespassed onto forbidden territory
    using a passive infrared (PIR) motion sensor. When the PIR motion sensor detects
    movement, it will send a warning email.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0137-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: PIR mot ion sensor HC-SR501
  prefs: []
  type: TYPE_NORMAL
- en: Two 5 mm LEDs (different colors)
  prefs: []
  type: TYPE_NORMAL
- en: Two 330 Ω resistors
  prefs: []
  type: TYPE_NORMAL
- en: Pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE PIR MOTION SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ve probably seen motion sensors in a wide variety of applications. They’re
    used in security lights, in commercial building lights that turn on when you walk
    by, and in burglar alarms.
  prefs: []
  type: TYPE_NORMAL
- en: A PIR motion sensor (see [Figure 10-1](ch10.xhtml#ch10fig1)) measures infrared
    light emitted from objects in its field of view. It detects motion based on changes
    in infrared light, which indicate changes in temperature. This makes it ideal
    for detecting humans or animals because it will pick up living things that move
    within its range but not inanimate objects, like a leaf blowing in the wind. You
    can program the Pi to react to changes in infrared light by triggering an event
    such as turning on a light, sounding an alarm, or, as we’ll do in this project,
    sending an email.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0138-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 10-1:** PIR motion sensor'
  prefs: []
  type: TYPE_NORMAL
- en: 'The sensor outputs HIGH if it detects movement or LOW if it doesn’t, and it
    has only 3 pins: VCC, GND, and data. Data outputs a 3.3 V signal, perfect for
    your Pi!'
  prefs: []
  type: TYPE_NORMAL
- en: '**SENDING AN EMAIL WITH PYTHON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python’s email library makes it straightforward to send emails through Python.
    We’ll write that script now before assembling the parts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding Your SMTP Server Details**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To send emails through code, you need to include your *Simple Mail Transfer
    Protocol (SMTP)* server details. SMTP is an internet standard for email transmission,
    and each email provider has a different SMTP server.
  prefs: []
  type: TYPE_NORMAL
- en: These details include your service provider’s *server address* and *port* and
    whether it uses *Transport Layer Security (TLS)*. TLS is a protocol for establishing
    a secure connection between two email servers. To get this information simply
    search the internet for *SMTP server settings* along with the name of your email
    provider. You’ll plug these details into the script to personalize it.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Email-Sending Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t name your file* email.py *because that’s a Python library name, and
    your script won’t work.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 10-1](ch10.xhtml#ch10list1) to the Python Editor
    and save the script as *send_email.py* inside the *Sensors* folder (remember that
    you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 10-1:** The email notification script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you use the snippet at* ➎ *inside a `while` loop without a delay, you will
    fill your inbox with thousands of emails and your account will probably be blocked,
    so make sure to include a delay if you use this snippet in any other project!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You start by importing the libraries you need for SMTP and email-related functions:
    smtplib and MIMEText ➊. Next, you create variables for the email address to send
    from, that email’s password, and an email address to send to ➋. We suggest you
    create a second email to send the notifications to your everyday email because
    you will be giving less secure apps access to the account you send from. Make
    sure that you input your own information for these strings.'
  prefs: []
  type: TYPE_NORMAL
- en: The code block at ➌ writes the email. You start by creating a `body` variable
    that stores your email body text. Then you create an object called `msg` that
    generates the email itself using `msg = MIMEText(body)`. Feel free to change the
    email body and subject by changing the string in the `body` and `msg['Subject']`
    variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: At ➍, you establish communication with an SMTP server. Pass the provider’s SMTP
    server address as a string as the first argument to `smtplib.SMTP()`, and the
    port as an int as the second argument. In this script, we’re using a Gmail SMTP
    server and port. If you use another email provider, make sure to change those
    values.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.starttls()` function is necessary for email providers that use TLS
    to encrypt messages. If your email provider doesn’t use TLS, you can remove or
    comment out that line.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the script logs into the sending email account ➎, sends the email, and
    stops communication with the server. Last, the script prints an `'Email sent'`
    message to the Python shell to let the user know an email was sent.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Email-Sending Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s now time to see your script in action! Save your script and press **F5**
    or go to **Run** ▸ **Run Module** to run the script. Then check the email inbox
    you sent the message to. You should have a new email. You can see an email we
    received using this script in [Figure 10-2](ch10.xhtml#ch10fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0140-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 10-2:** Email sent with *send_email.py*'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t received an email, verify that the email and SMTP information
    in *send_email.py* are correct. Also verify that you have given permission to
    let less secure apps use your account in your email account settings.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s wire your PIR sensor to your Raspberry Pi so it can send you emails
    when the sensor detects movement. You’ll also include two LEDs into your system,
    one to indicate whether the alarm is armed and one to indicate whether it has
    been triggered, as well as a pushbutton to arm and disarm the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Follow these steps to build the intruder alarm circuit, using [Figure 10-3](ch10.xhtml#ch10fig3)
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0141-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 10-3:** Circuit for the intruder alarm'
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND of the Pi to one of the breadboard’s blue rails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a red LED and a green LED into the breadboard. Connect the green LED’s
    positive lead to GPIO 18 through a 330 Ω resistor, with the resistor between the
    LED lead and the GPIO pin, and connect the negative lead to the GND rail. Connect
    the red LED’s positive lead to GPIO 17 through another 330 Ω resistor and connect
    the negative lead to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the pushbutton in the middle of the breadboard so that it bridges the
    center break, as shown in [Figure 10-3](ch10.xhtml#ch10fig3). Connect the pin
    at the bottom right to the GND rail and the pin at the bottom left to GPIO 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the PIR motion sensor with the connections in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIR MOTION SENSOR** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| GND | GND |'
  prefs: []
  type: TYPE_TB
- en: '| OUT | GPIO 4 |'
  prefs: []
  type: TYPE_TB
- en: '| VCC | 5 V |'
  prefs: []
  type: TYPE_TB
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Enter the code in [Listing 10-2](ch10.xhtml#ch10list2) into the new file
    and save the script as *intruder_alarm.py* inside the *Sensors* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 10-2:** The intruder alarm script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code is really straightforward and should all be familiar from [Listing
    10-1](ch10.xhtml#ch10list1). You start by importing the needed libraries ➊ and
    creating `gpiozero` objects to refer to the LEDs, button, and motion sensor ➋.
    At ➌, you create the `motion_sensor_status` and `email_sent` control variables
    to identify whether the motion sensor was triggered and whether an email has been
    sent. You then create the `arm_motion_sensor()` function that arms and disarms
    the motion sensor when you press the pushbutton ➍. The `send_email()` function
    at ➎ sends an email when the sensor detects motion, as long as the sensor is armed
    and the `email_sent` variable is equal to `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, you assign functions to events: the `arm_motion_sensor()` function is
    called when the pushbutton is pressed ➏, and the `send_email()` function is called
    when motion is detected ➐. The `pause()` function at the end of the code keeps
    the script running for events to be detected ➑.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `send_email()` function has an `if` statement condition that
    sets the script to send an email only if motion is detected and if the `email_sent`
    variable is equal to `False`. When an email is sent out, the `email_sent` variable
    changes to `True` and your script sends no more emails. You set the `email_sent`
    variable to `False` again by pressing the pushbutton twice, rearming the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: This condition prevents the script from sending you a lot of unnecessary emails.
    For example, say you left your dog home when you were out and it triggered the
    sensor; with this condition, you only receive one email saying that motion was
    detected. If you didn’t have this condition, you would receive endless emails
    until your dog moved out of the sensor range.
  prefs: []
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Arm the sensor
    by pressing the pushbutton; the red status LED should light up. Test the alarm
    by moving your hand in front of the motion sensor. You should receive a new message
    in your inbox and the triggered green LED should light up.
  prefs: []
  type: TYPE_NORMAL
- en: Place this circuit in a strategic place and wait to see if someone enters your
    room while you’re out.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project showed you how to use the PIR motion sensor with the Raspberry
    Pi and how to send emails with Python. These are handy skills that you can add
    to what you’ve learned in other projects to invent your own devices. Here are
    some simple ideas for projects you can build with the motion sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a piezo buzzer to your alarm circuit so that when motion is detected not
    only is an email sent but an alarm is also sounded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate your room’s lights to automatically turn on when you enter. You may
    need a relay to do this—check [Project 16](ch16.xhtml#ch16) where we explain how
    to use a relay.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a relay and a photoresistor to make a security nightlight that turns on
    only when movement is detected in the dark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**11'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gas and Smoke Alarm**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll build a gas and smoke alarm using an MQ-2 gas and smoke
    sensor and a piezo buzzer. Every time the sensor detects gas or smoke in the atmosphere
    above a certain threshold, the buzzer will sound.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0146-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: MQ-2 gas and smoke sensor
  prefs: []
  type: TYPE_NORMAL
- en: MCP 3008 chip
  prefs: []
  type: TYPE_NORMAL
- en: Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: 5 mm LED
  prefs: []
  type: TYPE_NORMAL
- en: 330 Ω resistor
  prefs: []
  type: TYPE_NORMAL
- en: Pushbut ton
  prefs: []
  type: TYPE_NORMAL
- en: Lighter
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE MQ-2 GAS AND SMOKE SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The MQ-2 gas and smoke sensor is sensitive to smoke and the following flammable
    gases: propane, butane, methane, alcohol, and hydrogen. [Figure 11-1](ch11.xhtml#ch11fig1)
    shows the sensor’s front and back views.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0147-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-1:** The MQ-2 gas and smoke sensor, front and back views'
  prefs: []
  type: TYPE_NORMAL
- en: The MQ-2 has two ways of outputting gas levels. The first is to read the gas
    concentration in the atmosphere and output it as an analog signal from the analog
    output pin AO, where the higher the gas levels, the higher the output voltage.
  prefs: []
  type: TYPE_NORMAL
- en: The second is to set a certain threshold and then output a HIGH signal from
    the digital output pin DO if the gas levels are above that threshold, and a LOW
    signal if the gas levels are below that threshold. The MQ-2 has a potentiometer
    built into the back that you can adjust with a screwdriver to change this threshold.
  prefs: []
  type: TYPE_NORMAL
- en: The sensor also has a power LED in the back that indicates if the sensor is
    on, and a digital output LED that lights up when detected gas levels are above
    the set threshold.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be reading the analog signal, which provides a quantitative measure of
    the gas levels, allowing you to better define the threshold value above which
    you want the buzzer to warn you of higher gas levels. Remember that the Pi can
    read only digital signals, so to read the analog signals with the Pi, you’ll use
    an analog-to-digital converter module (MCP3008 chip), which was first introduced
    in [Project 3](ch03.xhtml#ch03).
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE PIEZO BUZZER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The piezo buzzer sounds the alarm when it receives a digital signal from the
    Pi. The buzzer you’ll use, shown in [Figure 11-2](ch11.xhtml#ch11fig2), is about
    as simple as it comes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0148-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-2:** Piezo buzzer'
  prefs: []
  type: TYPE_NORMAL
- en: The buzzer’s case contains a disc that vibrates at a certain frequency when
    voltage is sent to it. Wiring the piezo buzzer is simple. All you need to do is
    connect one wire to your Pi’s GND pin and another to a GPIO pin.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To build the smoke and gas detector alarm circuit, you need to connect an LED
    and a pushbutton to the Pi; you should already know how to wire these from previous
    projects. You also need to connect the piezo buzzer and the MQ-2 sensor to the
    Pi—the latter will connect through the MCP3008 chip). Follow these instructions,
    using [Figure 11-3](ch11.xhtml#ch11fig3) as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0148-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-3:** Smoke and gas detector circuit diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND to the blue breadboard rail and 3.3 V to the red rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the MCP3008 chip in the middle of the breadboard so that the legs run
    parallel on either side of the center divide, as shown in [Figure 11-3](ch11.xhtml#ch11fig3),
    and wire it according to the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **MCP3008** | **CONNECT TO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | MQ-2 AO pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 | GPIO 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 | GPIO 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 | GPIO 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 | GPIO 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 | 3.3 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 | 3.3 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Remember that when the half-circle on the MCP3008 is at the top, pin 1 is the
    top pin on the left side; see [“Analog-to-Digital Converters”](ch03.xhtml#lev41)
    on [page 55](ch03.xhtml#page_55) for a complete MCP3008 pinout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place the MQ-2 gas and smoke sensor in the breadboard and wire it as indicated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **MQ-2 SENSOR** | **CONNECT TO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | 5 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| DO | No connection |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| AO | MCP3008 pin 1 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert an LED into the breadboard. Connect the positive lead to GPIO 17 through
    a 330 Ω resistor and connect the negative lead to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the pushbutton in the middle of the breadboard, with two leads on either
    side of the center divide. Connect the bottom-right lead to GND power rail and
    the bottom-left lead to GPIO 2, making sure both connected leads are on the same
    side of the divide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the buzzer into the breadboard and connect the black wire to GND and
    the red wire to GPIO 27.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your circuit wired up, it’s time to upload some code.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 11-1](ch11.xhtml#ch11list1) to the Python Editor
    and save the script as *smoke_detector.py* inside the *Sensors* folder. (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 11-1:** The smoke and gas detector script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: First, you import the `LED`, `Button`, `Buzzer`, and `MCP3008` classes from
    the gpiozero library and the `sleep` function from the time library ➊; then, you
    create `gpiozero` objects to refer to the LED, button, MCP3008 (MQ-2 gas sensor),
    and buzzer ➋. Next, you create a `gas_sensor_status` variable that will indicate
    whether the smoke sensor is armed ➌; the sensor is armed if this variable is `True`
    and not armed if it’s `False`. You need to set a `threshold` value so that the
    buzzer beeps only when the gas levels are above this threshold ➍. We’ll cover
    finding out your threshold value in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: The `arm_gas_sensor()` function ➎ arms and disarms the sensor by switching the
    value in the `gas_sensor_status` variable to the opposite of whatever it currently
    holds, whether that’s `True` or `False`, when the function is called. At ➏, you
    set the function to call when the pushbutton is pressed so that you can arm and
    disarm the sensor manually. You also set an LED to turn on when the sensor is
    armed; that way, you can visually identify its status.
  prefs: []
  type: TYPE_NORMAL
- en: The final block of code is a `while` loop ➐ that continuously checks whether
    the sensor is armed and whether the gas levels are above the threshold. If the
    sensor is armed and the gas levels are above the threshold value, the buzzer beeps
    via the `buzzer.beep()` function. The final `buzzer.off()` function stops the
    buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Threshold Value**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To accurately set a safe gas-level threshold, you first need to calibrate your
    sensor to your environment. That means you need to measure your gas levels when
    there is no gas present, and then set your threshold to a value slightly above
    that. First, find out what the gas levels of your environment usually are:'
  prefs: []
  type: TYPE_NORMAL
- en: Uncomment the line at ➑, and then save and run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the `gas_sensor` values displayed on the Python shell. Those
    are the values read when there’s no gas or smoke in the sensor’s range. Your `threshold`
    value should be slightly higher than this. For example, if your default value
    is `0.07`, we recommend setting your threshold to `0.1`, but it depends on your
    desired sensitivity level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grab a lighter and press the trigger (without igniting the lighter). Hold the
    lighter next to the sensor to release some gas. The `gas_sensor` value displayed
    on the Python shell should increase. Your `threshold` value should be lower than
    the maximum value you got when exposing the sensor to gas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Always be careful when using lighters and gas; don’t hold the gas trigger
    down for too long, and do not ignite the lighter when gas has been released into
    the air.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the values obtained from the last two steps, tune the `threshold` value
    ➍ somewhere between these two so that it’s neither too sensitive nor too unresponsive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment out the `print` statement ➑ and save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Press the
    pushbutton to arm the sensor. The red LED should light up. Then test it out by
    using a lighter to release some gas next to the sensor until the buzzer beeps.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This gas and smoke alarm should not be used to replace an off-the-shelf smoke
    detector.*'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You now have a gas and smoke detector alarm to monitor your
    house and warn you of fire!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aim of this project was to show you how to read sensors that output analog
    signals. Now you can add features to this project. For example, you can edit the
    script to send an email when gas or smoke is above the threshold value, as we
    did in [Project 10](ch10.xhtml#ch10).
  prefs: []
  type: TYPE_NORMAL
- en: '**12'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Temperature and Humidity Data Logger**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’re going to build a data logger that automatically stores
    data on temperature and humidity. You’ll learn how to read and log data from your
    environment, which is useful in numerous applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0154-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: DHT22 temperature and humidity sensor (DHT11 and AM2302 also work)
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 kΩ resistor
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_Python_DHT library
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the DHT22 temperature and humidity sensor to collect data, which
    will then be saved in a *.txt* file that you can then use to build charts, graphs,
    and other visualizations. This project gives you the basics of data collection,
    which is useful in many different applications that use sensors—for example, monitoring
    soil dampness, taking the temperature of water in a fish tank, or even registering
    the exact time unexpected movement was detected around your house. You can apply
    the concepts from this project to any sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE DHT22 SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DHT22 (shown in [Figure 12-1](ch12.xhtml#ch12fig1)) is a digital temperature
    and humidity sensor with a built-in chip that converts analog to digital signals,
    so there’s no need to use an analog-to-digital converter. This makes wiring really
    simple.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0155-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-1:** DHT22 temperature and humidity sensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a simple circuit that just has the DHT22 sensor wired to your Pi via
    a resistor. Follow these instructions, using the circuit diagram in [Figure 12-2](ch12.xhtml#ch12fig2)
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND and 3.3 V on the Pi to the breadboard’s blue and red power rails,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the DHT22 sensor according to the following table, with pins starting
    at 1 from left to right when the sensor is facing you. Make sure to wire the resistor
    between pin 2 of the sensor and the breadboard’s red power rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **DHT22** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 3.3 V |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | GPIO 4; also connect to 3.3 V through a 4.7 kΩ resistor |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Don’t connect |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | GND |'
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-2:** Wiring the DHT22 sensor to the Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll use the Adafruit_Python_DHT library, which allows you to easily control
    the DHT22 sensor and read the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the DHT22 Library**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This library can also be used with similar sensors, like DHT11 and AM2302 (the
    wired version of the DHT22 from Adafruit), if you’re using those instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the terminal, navigate to the desktop, make a folder called *Libraries*
    if you haven’t already, and move into the newly created folder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the library by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, move to the *Adafruit_Python_DHT* directory and install the library
    with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With the necessary library installed, it’s time to write the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The DHT22 library is not supported by Python 3, so you need to use Python 2.7\.
    Open **Python 2.7 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Copy the code from [Listing 12-1](ch12.xhtml#ch12list1) to the Python Editor and
    save the script as *temperature_humidity_data_logger.py* inside the *Sensors*
    folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 12-1:** The temperature and humidity data logger script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First, you import the Adafruit_DHT library ➊ you just installed, as well as
    the built-in time library. Then, at ➋, you uncomment the line that corresponds
    to the sensor you’re using. If you’re using DHT22, you don’t need to change anything.
  prefs: []
  type: TYPE_NORMAL
- en: The line at ➎ reads the temperature and humidity and saves the readings in the
    `temperature` and `humidity` variables, respectively. If you want your temperature
    readings in Fahrenheit, uncomment the line at ➏ to make the conversion from Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes the sensor can’t read the data and sends a `null` result to the Pi.
    The `if` statement at ➐ guarantees that the Pi saves data only if it is not `null`.
    You also timestamp each reading using `time.strftime("%H:%M:%S %d/%m/%Y")`—the
    argument in the parentheses here indicates the format you want the time and date
    to appear in: hours, minutes, seconds, day, month, and year, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: This script reads and records the temperature and humidity every 10 seconds,
    but you can change this at ➒ by changing the delay time. The sensor is capable
    of taking readings every 2 seconds, but no faster than that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating, Writing, and Closing .txt files**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The DHT22 temperature and humidity readings are automatically saved in a *.txt*
    file that you create with the `open()` function ➌ and store in the `file` variable.
    This function accepts the name you want to give the file as an argument and, in
    this case, a `'``w'` telling Python you want this file to be in *write mode*,
    meaning the program can write and make changes to the file. The write mode overwrites
    existing files with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time you run the code, it will overwrite whatever was already in the*
    sensor_readings.txt *file. If you don’t want this to happen, change the filename
    at* ➍ *to create a new file each time you run the script.*'
  prefs: []
  type: TYPE_NORMAL
- en: The `file.write()` function writes to the file and accepts a string as an argument.
    For example, with `file.write('time and date, temperature, humidity\n')` at ➍,
    you write “time and date, temperature, humidity” into the file. At ➐, you write
    the sensor data to the file and at➑ the timestamp. The `\n` tells Python to start
    the next display text on the next line, known as a *newline*.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `file.close()` function ➓ saves and closes the file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Let the script
    run for a few hours to gather a decent amount of data, and when you’re happy with
    the data logging period, stop the script by pressing CTRL-C. You should then have
    a *sensor_readings.txt* file that contains all your data in your *Sensors* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this project you’ve learned a very useful concept: data logging. Now you
    can use data logging in other monitoring projects. Here are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a PIR motion sensor that makes a timestamp every time it detects movement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a weather station data logger with the Sense HAT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for other monitoring sensor applications—for example, soil moisture,
    rain, and light sensors—to build a greenhouse data logger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
