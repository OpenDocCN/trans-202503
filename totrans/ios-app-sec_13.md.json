["```\nNSLog(@\"Sending username \\%@ and password \\%@\", myName, myPass);\n```", "```\n#ifdef DEBUG\n#   define NSLog(...) NSLog(__VA_ARGS__);\n#else\n#   define NSLog(...)\n#endif\n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/\n     PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<array>\n        <integer>1</integer>\n        <dict>\n                <key>bundle</key>\n                <string>com.apple.UIKit.pboard</string>\n                <key>items</key>\n                <array/>\n                <key>itemsunderlock</key>\n                <array/>\n                <key>name</key>\n                <string>com.apple.UIKit.pboard.find</string>\n                <key>persistent</key>\n                <true/>\n        </dict>\n\n    --snip--\n\n        <dict>\n                <key>bundle</key>\n                <string>com.apple.UIKit.pboard</string>\n                <key>items</key>\n                <array>\n                        <dict>\n                                <key>Apple Web Archive pasteboard type</key>\n                                <data>\n                                bigbase64encodedblob==\n                                </data>\n                                <key>public.text</key>\n                                <data>\n                                aHR0cDovL2J1cnAvY2VydA==\n                                </data>\n                        </dict>\n                </array>\n                <key>itemsunderlock</key>\n                <array/>\n                <key>name</key>\n                <string>com.apple.UIKit.pboard.general</string>\n                <key>persistent</key>\n                <true/>\n        </dict>\n</array>\n</plist>\n```", "```\n   #import \"restrictedUITextField.h\"\n\n   @implementation restrictedUITextField\n\n   - (id)initWithFrame:(CGRect)frame {\n       self = [super initWithFrame:frame];\n       if (self) {\n           // Initialization code\n       }\n       return self;\n   }\n\n➊ -(BOOL)canPerformAction:(SEL)action withSender:(id)sender {\n➋     if (action == @selector(cut:) || action == @selector(copy:))\n           return NO;\n       else\n           return YES;\n   }\n   @end\n```", "```\nNSURLCache *urlCache = [[NSURLCache alloc] init];\n[urlCache setDiskCapacity:0];\n[NSURLCache setSharedURLCache:urlCache];\n```", "```\nNSURLRequest* req = [NSURLRequest requestWithURL:aURL\n              cachePolicy:NSURLRequestReloadIgnoringLocalCacheData\n          timeoutInterval:666.0];\n   [myWebView loadRequest:req];\n```", "```\n-(NSCachedURLResponse *)connection:(NSURLConnection *)connection\n                   willCacheResponse:(NSCachedURLResponse *)cachedResponse {\n  NSCachedURLResponse *newCachedResponse = cachedResponse;\n  if ([[[[cachedResponse response] URL] scheme] isEqual:@\"https\"]) {\n    newCachedResponse=nil;\n  }\n  return newCachedResponse;\n}\n```", "```\n[[NSURLCache sharedURLCache] removeAllCachedResponses];\n```", "```\n- (void)applicationDidFinishLaunching:(UIApplication *)application {\n    [[NSURLCache sharedURLCache] setDiskCapacity:0];\n    [[NSURLCache sharedURLCache] setMemoryCapacity:0];\n    // other init code\n}\n```", "```\n   -(NSCachedURLResponse *)connection:(NSURLConnection *)connection\n                    willCacheResponse:(NSCachedURLResponse *)cachedResponse {\n       NSCachedURLResponse *newCachedResponse=cachedResponse;\n➊     if ([cachedResponse response]) {\n➋         newCachedResponse=nil;\n       }\n     return newCachedResponse;\n   }\n```", "```\n   -(NSCachedURLResponse *)connection:(NSURLConnection *)connection\n                    willCacheResponse:(NSCachedURLResponse *)cachedResponse {\n       NSCachedURLResponse *newCachedResponse=cachedResponse;\n➊     if ([[[[cachedResponse response] URL] scheme] isEqual:@\"https\"]) {\n           newCachedResponse=nil;\n       }\n     return newCachedResponse;\n   }\n```", "```\nNSURLSessionConfiguration *config = [NSURLSessionConfiguration\n     ephemeralSessionConfiguration];\n```", "```\nCache-Control: no-cache, no-store, must-revalidate\n```", "```\nNSString *cacheDir=[NSSearchPathForDirectoriesInDomains(NSCachesDirectory,\n    NSUserDomainMask, YES) objectAtIndex:0];\n\n[[NSFileManager defaultManager] removeItemAtPath:cacheDir\n                                           error:nil];\n```", "```\nUITextField *sensitiveTextField = [[UITextField alloc] initWithFrame:CGRectMake(0,\n     0, 25, 25)];\n[sensitiveTextField setAutocorrectionType:UITextAutocorrectionTypeNo];\n```", "```\n-(BOOL)twiddleTextView:(UITextView *)textView {\n    [textView setSecureTextEntry:YES];\n}\n```", "```\n-(BOOL)twiddleTextField:(UITextField *)textField {\n[textField setSecureTextEntry:YES];\n[textField setSecureTextEntry:NO];\n}\n```", "```\nUITextField *sensitiveTextField = [[UITextField alloc] initWithFrame:CGRectMake(0,\n     0, 25, 25)];\n[sensitiveTextField setAutocorrectionType: UITextAutocorrectionTypeNo];\n\nif ([[[UIDevice currentDevice] systemVersion] isEqual: @\"8.1.4\"]) {\n    [sensitiveTextField setSecureTextEntry:YES];\n    [sensitiveTextField setSecureTextEntry:NO];\n}\n```", "```\nNSUserDefaults *credentials = [NSUserDefaults standardUserDefaults];\n\n[credentials setObject:self.username.text forKey:@\"username\"];\n[credentials setObject:self.password.text forKey:@\"password\"];\n[credentials synchronize];\n```", "```\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n\n    application = [UIApplication sharedApplication];\n\n    self.splash = [[UIImageView alloc] initWithFrame:[[UIScreen mainScreen]\n     bounds]];\n    [self.splash setImage:[UIImage imageNamed:@\"myimage.png\"]];\n    [self.splash setUserInteractionEnabled:NO];\n    [[application keyWindow] addSubview:splash];\n}\n```", "```\n- (void)fadeMe {\n    [UIView animateWithDuration:0.2\n                     animations:^{view.alpha = 0.0;}\n                     completion:^(BOOL finished){[view removeFromSuperview];}\n                     ];\n}\n```", "```\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n\n    [self.splash removeFromSuperview];\n    self.splash = nil;\n}\n```", "```\nUIApplication *application;\napplication = [UIApplication sharedApplication];\n[[[[application] keyWindow] rootViewController] view] setHidden:YES];\n```", "```\nUIApplication *application;\napplication = [UIApplication sharedApplication];\n[[[application] keyWindow] setHidden:YES];\n```", "```\n<viewController restorationIdentifier=\"viewController2\" title=\"Second\" id=\"3\"\n    customClass=\"StatePreservatorSecondViewController\" sceneMemberID=\n    \"viewController\">\n    <view key=\"view\" contentMode=\"scaleToFill\" id=\"17\">\n      <rect key=\"frame\" x=\"0.0\" y=\"20\" width=\"320\" height=\"499\"/>\n      <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\n      \"YES\"/>\n      <subviews>\n         <textView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\n      \"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Zl1-tO-jGB\">\n           <textInputTraits key=\"textInputTraits\" autocapitalizationType=\n      \"sentences\"/>\n         </textView>\n```", "```\n-(void)encodeRestorableStateWithCoder:(NSCoder *)coder {\n    [super encodeRestorableStateWithCoder:coder];\n\n    [coder encodeObject:_messageBox.text forKey:@\"messageBoxContents\"];\n}\n```", "```\n#import <UIKit/UIKit.h>\n#import \"SecureArchiverDelegate.h\"\n\n@interface ViewController : UIViewController\n\n// Some simple properties, adding one for the delegate\n@property (weak, nonatomic) IBOutlet UITextField *textField;\n@property (weak, nonatomic) SecureArchiverDelegate *delegate;\n\n@end\n```", "```\n- (id)initWithCoder:(NSKeyedUnarchiver *)coder {\n    if (self = [super initWithCoder:coder]) {\n        return self;\n    }\n    return nil;\n}\n```", "```\n- (void)awakeFromNib {\n    self.restorationIdentifier = NSStringFromClass([self class]);\n    self.restorationClass = [UIViewController class];\n}\n```", "```\n- (void)encodeRestorableStateWithCoder:(NSKeyedArchiver *)coder {\n    // preserve state\n    SecureArchiverDelegate *saDelegate = [[SecureArchiverDelegate alloc] init];\n    [self setDelegate:saDelegate];\n    [coder setDelegate:[self delegate]];\n    [coder encodeObject:[[self textField] text] forKey:@\"textFieldText\"];\n    [super encodeRestorableStateWithCoder:coder];\n}\n\n- (void)decodeRestorableStateWithCoder:(NSKeyedUnarchiver *)coder {\n    // restore the preserved state\n    SecureArchiverDelegate *saDelegate = [[SecureArchiverDelegate alloc] init];\n    [self setDelegate:saDelegate];\n    [coder setDelegate:[self delegate]];\n    [[self textField] setText:[coder decodeObjectForKey:@\"textFieldText\"]];\n    [super decodeRestorableStateWithCoder:coder];\n}\n```", "```\n   - (BOOL)addSkipBackupAttributeToItemAtURL:(NSURL *)URL {\n       NSError *error = nil;\n\n➊     [URL setResourceValue:[NSNumber numberWithBool:YES]\n                      forKey:NSURLIsExcludedFromBackupKey\n                       error:&error];\n\n       return error == nil;\n   }\n```"]