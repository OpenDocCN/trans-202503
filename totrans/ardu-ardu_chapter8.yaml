- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">8</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONTROLLING
    HIGHER-POWERED DEVICES</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">8</samp> <samp class="SANS_Dogma_OT_Bold_B_11">控制高功率设备</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: 'Many Arduino users rely on the 74HC595 shift register for their projects, as
    it’s popular and easy to use. However, the 74HC595 can handle only a relatively
    low amount of current, especially when all pins are active: while you can draw
    20 mA of current from one output continuously, the entire IC is rated for a draw
    of only 70 mA through the V[CC] or GND pin.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Arduino用户依赖74HC595移位寄存器来进行项目，因为它流行且易于使用。然而，74HC595只能处理相对较小的电流，特别是当所有引脚都处于活动状态时：虽然每个输出可以连续提供20
    mA电流，但整个IC的V[CC]或GND引脚的最大电流仅为70 mA。
- en: If you need 20 mA per output to drive, for instance, eight separate LEDs, you
    could use only three of the eight pins under recommended operating conditions.
    While it may be possible to exceed the manufacturer’s direction, good electronic
    designs should consider safety and reliability. A shift register designed to handle
    higher currents is a better choice.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要每个输出提供20 mA电流来驱动，例如八个独立的LED，你只能在推荐的工作条件下使用八个引脚中的三个。虽然可能超出制造商的建议，但良好的电子设计应该考虑安全性和可靠性。设计为处理更高电流的移位寄存器是更好的选择。
- en: 'This chapter shows you how to control higher-powered devices with your Arduino
    with the TPIC6B595 shift register IC. You’ll learn to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你展示如何使用Arduino和TPIC6B595移位寄存器集成电路控制高功率设备。你将学习：
- en: Experiment with a binary number display
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验二进制数字显示
- en: Use multiple TPIC6B595s to control more than eight high-powered outputs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个TPIC6B595来控制超过八个高功率输出
- en: Use bright Piranha-style LEDs that are more powerful than regular LEDs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用比普通LED更强大的亮度Pirhana风格LED
- en: You’ll also build a PC-controlled eight-relay board and control giant seven-segment
    numeric displays.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将构建一个PC控制的八继电器板，并控制巨大的七段数字显示。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The TPIC6B595</samp>
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">TPIC6B595</samp>
- en: The TPIC6B595 is controlled in the same way as the 74HC595 but offers up to
    150 mA per output and a 500 mA IC total current draw—just over 60 mA per pin when
    all pins are used. It can also switch voltages up to 50 V DC. This allows for
    control of eight higher-current items such as powerful LEDs, relay coils, or mechanical
    switchgear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: TPIC6B595的控制方式与74HC595相同，但每个输出可提供最高150 mA的电流，整个IC的总电流为500 mA——当所有引脚都使用时，每个引脚的电流约为60
    mA。它还能够切换最高50 V DC的电压。这使得可以控制八个高电流设备，如强力LED、继电器线圈或机械开关设备。
- en: The TPIC6B595 is a *latching shift register*, meaning that as long as power
    is connected, it will maintain the output status. For example, if you upload a
    new sketch, the outputs are not affected. If you’ve powered your circuit from
    a power supply and not the Arduino, you can reset the Arduino without altering
    the outputs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TPIC6B595是一个*锁存移位寄存器*，这意味着只要电源连接，它将保持输出状态。例如，如果你上传一个新的草图，输出不会受到影响。如果你从电源而非Arduino供电，你可以在不改变输出的情况下重置Arduino。
- en: '[Figure 8-1](chapter8.xhtml#fig8-1) shows a TPIC6B595 in a dual in-line package,
    through-hole format in a solderless breadboard.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-1](chapter8.xhtml#fig8-1)显示了一个TPIC6B595双列直插封装，通过孔格式的无焊接面包板。'
- en: '![A PICTURE OF A TPIC6B595 IN A SOLDERLESS BREADBOARD](../images/fig8-1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![TPIC6B595在无焊接面包板上的照片](../images/fig8-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-1: A TPIC6B595 shift
    register</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-1：TPIC6B595移位寄存器</samp>
- en: '[Figure 8-2](chapter8.xhtml#fig8-2) shows the TPIC6B595’s schematic symbol.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-2](chapter8.xhtml#fig8-2)显示了TPIC6B595的原理图符号。'
- en: '![THE SCHEMATIC SYMBOL FOR THE TPIC6B595](../images/fig8-2.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![TPIC6B595的原理图符号](../images/fig8-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-2: The schematic symbol
    for the TPIC6B595</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-2：TPIC6B595的原理图符号</samp>
- en: The eight output pins in the schematic are labeled DRAIN*x*, since the TPIC6B595
    has low-side outputs. Like the 2N7000 N-MOSFETs used in previous chapters, each
    of these outputs controls current entering the pin (as opposed to the 74HC595’s
    high-side outputs, for example, where currents flow out from the eight control
    pins). This means the devices to be controlled are connected between the power
    supply and the control pins on the TPIC6B595, which switches the currents’ ability
    to flow from the device to GND.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '电路图中的八个输出引脚标记为 DRAIN*x*，因为 TPIC6B595 是低侧输出。与前几章使用的 2N7000 N-MOSFET 一样，这些输出控制电流流入引脚（与
    74HC595 的高侧输出不同，后者是电流从控制引脚流出）。这意味着受控设备连接在电源和 TPIC6B595 的控制引脚之间，TPIC6B595 则切换电流是否从设备流向地面（GND）。  '
- en: Consider the schematic in [Figure 8-3](chapter8.xhtml#fig8-3). Current flows
    from the 5 V source, through the resistor and LED, and into the TPIC6B595’s output
    pin. When that pin is activated, the current continues to GND, completing the
    circuit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '查看 [图 8-3](chapter8.xhtml#fig8-3) 中的电路图。电流从 5V 电源流经电阻和 LED，再进入 TPIC6B595 的输出引脚。当该引脚被激活时，电流继续流向地面（GND），完成电路。  '
- en: '![A SCHEMATIC OF THE LED CONNECTED TO THE TPIC6B595 VIA 5V AND CURRENT-LIMITING
    RESISTOR](../images/fig8-3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![LED 通过 5V 和限流电阻连接到 TPIC6B595 的电路图](../images/fig8-3.png)  '
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-3: An example of LED
    control with TPIC6B595</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-3：TPIC6B595 控制 LED 的示例</samp>  '
- en: Given the TPIC6B595’s method of controlling current, the voltage of the devices
    it controls can be up to 50 V, while the shift register is still operating on
    5 V. Conveniently, that means you can control 12 V devices or higher without worrying
    about level conversion back to the Arduino.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '由于 TPIC6B595 控制电流的方式，它控制的设备电压可高达 50V，而移位寄存器仍然以 5V 工作。方便的是，这意味着你可以控制 12V 或更高电压的设备，而无需担心将电平转换回
    Arduino。  '
- en: Let’s put the TPIC6B595 to the test with a simple project that demonstrates
    shift register operation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们通过一个简单的项目来测试 TPIC6B595，演示移位寄存器的操作。  '
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #25: Creating a TPIC6B595
    Binary Number Display</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #25：创建一个 TPIC6B595 二进制数字显示</samp>  '
- en: 'This project demonstrates the use of TPIC6B595 outputs while refreshing your
    knowledge of binary numbers and how they relate to shift register output control.
    You’ll need the following parts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '本项目演示了 TPIC6B595 输出的使用，同时复习了二进制数字及其如何与移位寄存器输出控制相关。你将需要以下组件：  '
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块 Arduino Uno 或兼容板和 USB 电缆  '
- en: A solderless breadboard
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块免焊接面包板  '
- en: Various jumper wires
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A TPIC6B595 shift register IC
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一颗 TPIC6B595 移位寄存器 IC  '
- en: One 0.1 µF capacitor
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一个 0.1 µF 电容器  '
- en: Eight LEDs
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '八个 LED  '
- en: Eight 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '八个 1 kΩ，0.25 W，1% 的电阻器  '
- en: Assemble the circuit as shown in [Figure 8-4](chapter8.xhtml#fig8-4).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '按照 [图 8-4](chapter8.xhtml#fig8-4) 所示组装电路。  '
- en: '![THE SCHEMATIC FOR PROJECT #25, SHOWING A TPIC6B595 CONTROLLING EIGHT LEDS
    VIA CURRENT-LIMITING RESISTORS](../images/fig8-4.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #25 的电路图，显示 TPIC6B595 通过限流电阻控制八个 LED](../images/fig8-4.png)  '
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-4:</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">The
    schematic for Project #25</samp>'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-4：</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">项目
    #25 的电路图</samp>  '
- en: 'Enter and upload the Project #25 sketch. Open the Serial Monitor in the IDE
    and enter a number between 0 and 255, inclusive, then press CTRL-ENTER. The Arduino
    should respond by displaying the number in binary using the LEDs, as well as in
    the Serial Monitor, as shown in [Figure 8-5](chapter8.xhtml#fig8-5). LED 1 will
    be the least significant bit of the number, which represents 1, and LED 8 will
    be the most significant bit, which represents 255.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '输入并上传项目 #25 的草图。在 IDE 中打开串行监视器，输入一个介于 0 到 255 之间的数字（包括 0 和 255），然后按下 CTRL-ENTER。Arduino
    应该会通过使用 LED 在二进制中显示该数字，并在串行监视器中显示出来，如 [图 8-5](chapter8.xhtml#fig8-5) 所示。LED 1
    将是该数字的最低有效位，表示 1，而 LED 8 将是最高有效位，表示 255。  '
- en: '![AN EXAMPLE OUTPUT FROM THE SERIAL MONITOR FOR PROJECT #25 SHOWING THE NUMBER
    ENTERED AND THE MATCHING BINARY VALUE](../images/fig8-5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #25 从串行监视器输出的示例，显示输入的数字和匹配的二进制值](../images/fig8-5.png)  '
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-5: Example output
    from Project #25</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-5：项目 #25 的示例输出</samp>  '
- en: 'Let’s see how this works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们看看这个是如何工作的：  '
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sketch begins by defining the Arduino digital pins used for connecting to
    the shift register’s Latch, Clock, and Data pins, respectively ❶. The custom <samp
    class="SANS_TheSansMonoCd_W5Regular_11">displayBinary()</samp> function accepts
    an integer and sends it to the shift register for output control, using the same
    method as the 74HC595 shift register mentioned earlier. To send the bits representing
    the number to the shift register in binary and to activate the pins in the shift
    register to control the LEDs that will match the number to be displayed in binary,
    the function uses <samp class="SANS_TheSansMonoCd_W5Regular_11">MSBFIRST</samp>
    (most significant bit first).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 草图开始时定义了 Arduino 数字引脚，用于连接到移位寄存器的锁存器、时钟和数据引脚，分别是 ❶。自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">displayBinary()</samp>
    函数接受一个整数，并将其发送到移位寄存器进行输出控制，使用的方法与之前提到的 74HC595 移位寄存器相同。为了以二进制形式将表示数字的位发送到移位寄存器并激活移位寄存器中的引脚，以控制将与要显示的二进制数字匹配的
    LED，该函数使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">MSBFIRST</samp>（最高有效位优先）。
- en: You can turn shift register outputs on and off with the 8 bits of the number
    sent to the shift register, as each bit matches an output and a status (1 for
    HIGH, 0 for LOW). You can also change <samp class="SANS_TheSansMonoCd_W5Regular_11">MSBFIRST</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">LSBFIRST</samp>, standing for
    least significant bit first, to see the number “reversed” in binary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过发送到移位寄存器的 8 位数字来控制移位寄存器的输出开关，每一位与一个输出和状态（1 为高电平，0 为低电平）对应。你还可以将 <samp class="SANS_TheSansMonoCd_W5Regular_11">MSBFIRST</samp>
    改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">LSBFIRST</samp>，即“最低有效位优先”，这样可以看到数字在二进制中“反转”。
- en: The sketch initializes the Serial Monitor and digital output pins ❷ and then
    flushes the serial input and waits for the user to enter a number into the Serial
    Monitor ❸. It then combines the digits of the number entered in the Serial Monitor
    to make the final number to display ❹. The custom <samp class="SANS_TheSansMonoCd_W5Regular_11">displayBinary()</samp>
    function sends that number to the shift register and the Serial Monitor.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图初始化了串口监视器和数字输出引脚 ❷，然后刷新串口输入并等待用户在串口监视器中输入一个数字 ❸。接着它将串口监视器中输入的数字合并成最终要显示的数字
    ❹。自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">displayBinary()</samp> 函数将该数字发送到移位寄存器和串口监视器。
- en: You’ll put this framework for shift register control to use in the next project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一个项目中使用这种移位寄存器控制框架。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #26: Building a PC-Controlled
    Relay Board</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #26：构建 PC 控制的继电器板</samp>'
- en: In this project, you’ll build a relay control board with eight single-pole,
    double-throw (SPDT) relays that you control via a PC or another device with an
    Arduino-compatible UART. In the future, you might use the technique introduced
    in this project to control low-voltage lighting or electric door locks, turn speakers
    on and off, and more.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个带有 8 个单刀双掷（SPDT）继电器的继电器控制板，你可以通过 PC 或其他带有 Arduino 兼容 UART 的设备进行控制。未来，你可能会使用这个项目中介绍的技术来控制低压照明、电动门锁、开关扬声器等。
- en: Each relay in this project is capable of controlling up to 30 V DC at 2 A of
    current, if you’re using the project PCB. If you’re using the solderless breadboard,
    the relays should be used to switch only up to 100 mA or so.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的每个继电器能够控制最高 30 V 的直流电压，电流为 2 A，前提是使用项目的 PCB。如果使用的是免焊面包板，则继电器的控制电流应仅限于 100
    毫安左右。
- en: While it’s possible to build this project using a solderless breadboard, this
    requires soldering jumper wires to the relay pins for remotely wiring the relays
    back to the circuit, as shown in [Figure 8-6](chapter8.xhtml#fig8-6), as the relay
    pins don’t sit in the breadboard very well. I strongly recommend you use the PCB
    instead.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用免焊面包板也能构建这个项目，但你需要将跳线焊接到继电器的引脚上，以便将继电器远程接回电路，如[图 8-6](chapter8.xhtml#fig8-6)所示，因为继电器的引脚在面包板上不太稳定。我强烈建议你使用
    PCB。
- en: '![A PHOTO OF A RELAY WITH JUMPER WIRES SOLDERED TO ITS PINS, FOR USE WITH A
    SOLDERLESS BREADBOARD](../images/fig8-6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![带有跳线焊接到引脚上的继电器照片，适用于免焊面包板](../images/fig8-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-6: A relay with remote
    wiring for breadboard use</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-6：具有远程接线的继电器，用于面包板</samp>
- en: 'You’ll need the following parts for this project:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板及 USB 电缆
- en: Assorted jumper wires
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A 12 V power supply or wall wart with DC plug
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 12 V 的电源或带有直流插头的电源适配器
- en: A TPIC6B595 shift register
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 TPIC6B595 移位寄存器
- en: A 20-pin IC socket
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 20 引脚 IC 插座
- en: One 0.1 µF capacitor
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 0.1 µF 电容
- en: Eight LEDs
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个 LED
- en: Eight 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个 1 kΩ, 0.25 W, 1% 的电阻
- en: Eight 1N4001 power diodes
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个 1N4001 电源二极管
- en: Eight SRD-12VDC-SL-C SPDT relays
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个 SRD-12VDC-SL-C SPDT 继电器
- en: 'A solderless breadboard or Project #26 PCB'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一个无焊面包板或项目 #26 的 PCB'
- en: 'If you’re using the PCB, you will also need the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 PCB，还需要以下组件：
- en: Ten three-way 5.08 mm terminal blocks
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十个三路 5.08 mm 端子块
- en: A 20-pin IC socket
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 20 引脚 IC 插座
- en: A PCB mount DC socket
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 PCB 安装的 DC 插座
- en: Assemble the circuit as shown in [Figure 8-7](chapter8.xhtml#fig8-7).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 8-7](chapter8.xhtml#fig8-7)所示组装电路。
- en: '![A SCHEMATIC FOR PROJECT #26, SHOWING THE TPIC6B595 CONTROLLING EIGHT RELAYS
    WITH INDICATOR LEDS](../images/fig8-7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #26 的原理图，显示 TPIC6B595 控制八个继电器及指示 LED](../images/fig8-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-7: The schematic for
    Project #26</samp>'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-7: 项目 #26 的原理图</samp>'
- en: If you’re using the PCB, the layout is simple, as shown in [Figure 8-8](chapter8.xhtml#fig8-8).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 PCB，布局非常简单，如[图 8-8](chapter8.xhtml#fig8-8)所示。
- en: '![A PHOTO OF AN UNPOPULATED PCB FOR PROJECT #26](../images/fig8-8.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #26 未焊接的 PCB 照片](../images/fig8-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-8: The PCB for Project
    #26</samp>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-8: 项目 #26 的 PCB</samp>'
- en: Start by inserting the resistors; then insert the diodes, the LEDs, the IC and
    DC sockets, the terminal blocks, and end with the relays. Be sure to insert the
    shift register correctly—pin 1 is marked on the PCB. Connect to the Arduino via
    the two terminal blocks next to the shift register, as shown in the schematic
    and [Figure 8-9](chapter8.xhtml#fig8-9). The Arduino is powered by the relay board’s
    12 V supply and returns 5 V to the board to power the shift register.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从插入电阻开始；然后插入二极管、LED、IC 和 DC 插座、端子块，最后插入继电器。确保正确插入移位寄存器——PCB 上有标记的引脚 1。通过移位寄存器旁的两个端子块连接到
    Arduino，如原理图和[图 8-9](chapter8.xhtml#fig8-9)所示。Arduino 通过继电器板的 12V 电源供电，并返回 5V
    给板子供电以驱动移位寄存器。
- en: '![A PHOTO OF COMPLETED PROJECT #26 CONNECTED TO EXTERNAL POWER AND AN ARDUINO
    UNO, WITH SEVEN LIGHTS LIT UP](../images/fig8-9.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![完成的项目 #26 连接到外部电源和 Arduino UNO，七个灯亮起的照片](../images/fig8-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-9: The completed hardware
    for Project #26</samp>'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-9: 项目 #26 的完成硬件</samp>'
- en: 'Once you’ve set up the hardware, enter and upload the Project #26 sketch, which
    controls the relays with various commands. Entering the numbers 0 through 7 using
    the Serial Monitor or terminal software turns on relays 0 through 7, respectively;
    entering 8 through F turns off relays 0 to 7; G turns all relays on; and H turns
    all relays off. Enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">?</samp> to
    check which relays are on and off based on the commands being entered. The result
    is returned as a binary number matching the relay order. If the user enters an
    unrecognized character, the Arduino returns a list of valid commands.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦硬件搭建完成，输入并上传项目 #26 的草图，控制继电器执行各种命令。使用串口监视器或终端软件输入 0 到 7，会依次打开继电器 0 到 7；输入
    8 到 F 会关闭继电器 0 到 7；输入 G 会打开所有继电器；输入 H 会关闭所有继电器。输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">?</samp>
    可以检查哪些继电器已开或未开。返回的结果是一个二进制数，匹配继电器的顺序。如果输入了未识别的字符，Arduino 会返回一个有效命令列表。'
- en: For example, [Figure 8-10](chapter8.xhtml#fig8-10) shows the output for the
    commands <samp class="SANS_TheSansMonoCd_W5Regular_11">G</samp>, then <samp class="SANS_TheSansMonoCd_W5Regular_11">Q</samp>
    (which caused the incorrect command message to display), then <samp class="SANS_TheSansMonoCd_W5Regular_11">H</samp>,
    and then <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">7</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">?</samp>.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[图 8-10](chapter8.xhtml#fig8-10)显示了命令 <samp class="SANS_TheSansMonoCd_W5Regular_11">G</samp>、然后是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Q</samp>（这导致显示错误命令信息），然后是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">H</samp>，再然后是 <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">3</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">7</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">?</samp>
    的输出。
- en: '![AN EXAMPLE SERIAL MONITOR OUTPUT FOR PROJECT #26 SHOWING EXAMPLE COMMANDS
    TO TURN ON AND OFF RELAYS AND SHOWING USER HELP LINE](../images/fig8-10.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #26 的串行监视器输出示例，展示了打开和关闭继电器的示例命令，并显示用户帮助信息](../images/fig8-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-10: An example of
    operations in the Serial Monitor</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-10：串行监视器中的操作示例</samp>
- en: If you’re sharing the relay board and Arduino with others, they don’t need to
    run the Arduino IDE for control; instead they can use any terminal software on
    their PC, Mac, or other computer that supports USB serial. For example, the same
    operation is possible with Roger Meier’s CoolTerm application, available from
    [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org),
    as shown in [Figure 8-11](chapter8.xhtml#fig8-11).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和其他人共享继电器板和 Arduino，他们不需要运行 Arduino IDE 来进行控制；相反，他们可以使用任何支持 USB 串行的终端软件，如
    PC、Mac 或其他计算机。例如，使用 Roger Meier 的 CoolTerm 应用程序进行相同的操作，该程序可以从 [*http://<wbr>freeware<wbr>.the<wbr>-meiers<wbr>.org*](http://freeware.the-meiers.org)
    下载，如[图 8-11](chapter8.xhtml#fig8-11)所示。
- en: '![AN EXAMPLE OUTPUT FOR PROJECT #26 SHOWING EXAMPLE COMMANDS TO TURN ON AND
    OFF RELAYS AND SHOWING THE USER HELP LINE USING THE COOLTERM TERMINAL SOFTWARE
    INSTEAD OF A SERIAL MONITOR](../images/fig8-11.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #26 的输出示例，展示了打开和关闭继电器的示例命令，并展示了使用 CoolTerm 终端软件而非串行监视器的用户帮助信息](../images/fig8-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-11: Controlling the
    relays using the CoolTerm application</samp>'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-11：使用 CoolTerm 应用程序控制继电器</samp>
- en: The control Arduino expects only single characters from the host computer (or
    other UART), so you can write software for your computer in many environments
    to control the relays. Search your preferred environment’s resources for “plaintext
    serial over USB” or similar to learn more.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 Arduino 仅期望从主机计算机（或其他 UART）接收单个字符，因此你可以在多种环境中为你的计算机编写软件来控制继电器。在你喜欢的环境中搜索
    “plaintext serial over USB” 或类似的资源，以了解更多信息。
- en: 'Let’s see how this works:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这是如何工作的：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The sketch first declares the integer <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>,
    which holds the status of the relays. Think of this number in binary, with the
    least significant bit representing relay 0: if this bit is 1, the relay is on,
    and if it is 0, the relay is off. The custom <samp class="SANS_TheSansMonoCd_W5Regular_11">showStatus()</samp>
    function sends the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    in binary back to the serial interface, so the receiver can see which relays are
    on or off in their terminal, Serial Monitor, or other software. All the functions
    that control a relay also send feedback via serial to the user, describing the
    completed action.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先声明了整数 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>，用于保存继电器的状态。可以将这个数字看作二进制数，其中最低有效位表示继电器
    0：如果该位为 1，表示继电器开启；如果该位为 0，表示继电器关闭。自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">showStatus()</samp>
    函数将 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp> 的二进制值发送回串行接口，接收方可以在他们的终端、串行监视器或其他软件中查看哪些继电器是开启的，哪些是关闭的。所有控制继电器的函数还会通过串行端口向用户发送反馈，描述已完成的操作。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">relayOn(int a)</samp> function
    turns on relays, using the bitwise arithmetic operator OR (<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>)
    to activate the desired relay without interrupting other relays. The function
    receives the value <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> and
    performs a bitwise OR with the <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    variable, then it updates the relays using the new value of <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>.
    For example, if relays 0, 1, 2, and 3 are on, then the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    in binary is currently B00001111\. If the user then enters <samp class="SANS_TheSansMonoCd_W7Bold_B_11">5</samp>
    in the Serial Monitor (or terminal software) to turn on relay 5, the program would
    switch bit 5 to 1, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">relayOn(int a)</samp> 函数用于打开继电器，使用位运算符
    OR（<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>）来激活指定的继电器，同时不影响其他继电器。该函数接收值
    <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>，并与 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    变量执行按位 OR 操作，然后使用新的 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    值更新继电器。例如，如果继电器 0、1、2 和 3 已经打开，则当前 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    的二进制值为 B00001111。如果用户在串口监视器（或终端软件）中输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">5</samp>
    来打开继电器 5，程序将会把第 5 位切换为 1，如下所示：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">sendStatus()</samp> function
    changes the relays accordingly by updating the shift register outputs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">sendStatus()</samp> 函数通过更新移位寄存器的输出来相应地改变继电器状态。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">relayOff(int a)</samp> function
    turns relays off, using the bitwise arithmetic operator XOR (<samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp>)
    to deactivate the desired relay without interrupting other relays. For example,
    if relays 0, 1, 2, 3, and 5 are on, the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    in binary is currently B00101111\. If you enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">A</samp>
    in the Serial Monitor or terminal software to turn off relay 3, the program should
    switch bit 3 to 0, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">relayOff(int a)</samp> 函数用于关闭继电器，使用位运算符
    XOR（<samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp>）来停用指定的继电器，同时不影响其他继电器。例如，如果继电器
    0、1、2、3 和 5 已经开启，当前 <samp class="SANS_TheSansMonoCd_W5Regular_11">relayStatus</samp>
    的二进制值为 B00101111。如果在串口监视器或终端软件中输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">A</samp>
    来关闭继电器 3，程序应该将第 3 位切换为 0，如下所示：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, the <samp class="SANS_TheSansMonoCd_W5Regular_11">sendStatus()</samp>
    function changes the relays accordingly by updating the shift register outputs.
    Two additional functions, <samp class="SANS_TheSansMonoCd_W5Regular_11">allOn()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">allOff()</samp>, turn all relays
    on and off, respectively, by sending 255 (binary <samp class="SANS_TheSansMonoCd_W5Regular_11">B11111111</samp>)
    and 0 (binary <samp class="SANS_TheSansMonoCd_W5Regular_11">B0000000</samp>) to
    the shift register.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，<samp class="SANS_TheSansMonoCd_W5Regular_11">sendStatus()</samp> 函数通过更新移位寄存器的输出相应地改变继电器状态。两个额外的函数，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">allOn()</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">allOff()</samp>，分别通过向移位寄存器发送
    255（即二进制 <samp class="SANS_TheSansMonoCd_W5Regular_11">B11111111</samp>）和 0（即二进制
    <samp class="SANS_TheSansMonoCd_W5Regular_11">B0000000</samp>）来打开或关闭所有继电器。
- en: General operation is simple. The Arduino awaits a single character from the
    serial line ❶. Once a character has arrived, it is matched to a command ❷. The
    user can activate the simple <samp class="SANS_TheSansMonoCd_W5Regular_11">waveHello()</samp>
    function ❸ by pressing <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Z</samp> to
    turn the relays on and off one at a time, for testing and amusement. Finally,
    if the character isn’t a command, the program sends a quick reference to serial
    ❹ so the user can learn the command set.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一般操作很简单。Arduino 等待串口线接收到一个字符 ❶。接收到字符后，它会与一个命令进行匹配 ❷。用户可以通过按下 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Z</samp>
    来激活简单的 <samp class="SANS_TheSansMonoCd_W5Regular_11">waveHello()</samp> 函数 ❸，从而依次打开和关闭继电器，用于测试和娱乐。最后，如果接收到的字符不是命令，程序会向串口发送快速参考
    ❹，让用户了解可用的命令集。
- en: For a challenge, you can modify the sketch so the relay status is saved to the
    internal EEPROM when changed and the system sets the relays from the EEPROM data
    after a reset.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加挑战，你可以修改草图，使得继电器状态在更改时保存到内部 EEPROM，并且系统在重置后从 EEPROM 数据中设置继电器状态。
- en: Now that you know how to control eight higher-current devices with a single
    TPIC6B595, I’ll show you how to use two or more TPIC6B595s at once.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何使用单个TPIC6B595控制8个高电流设备，接下来我将向你展示如何同时使用两个或更多的TPIC6B595。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Using Multiple TPIC6B595s</samp>
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用多个TPIC6B595</samp>
- en: 'You can easily use two or more TPIC6B595 shift registers at once to control
    16 or more devices in the same way you would with the 74HC595, but with the ability
    to handle higher currents. Start by connecting each TPIC6B595’s Clock lines together,
    connect their Latch lines together, then connect the Serial Out from the first
    shift register to the Serial In on the second shift register, repeating as required.
    For example, the schematic in [Figure 8-12](chapter8.xhtml#fig8-12) shows double
    the number of LEDs controlled by Project #25.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地同时使用两个或更多的TPIC6B595移位寄存器，以与使用74HC595时相同的方式控制16个或更多的设备，但具有处理更高电流的能力。首先将每个TPIC6B595的时钟线连接在一起，将它们的锁存线连接在一起，然后将第一个移位寄存器的串行输出连接到第二个移位寄存器的串行输入，按需要重复此操作。例如，[图
    8-12](chapter8.xhtml#fig8-12)中的原理图展示了由项目#25控制的双倍数量的LED。
- en: '![](../images/fig8-12.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig8-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-12: The schematic
    for controlling 16 LEDs with shift registers</samp>'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-12：使用移位寄存器控制16个LED的原理图</samp>
- en: 'Next, send out 2 bytes of data while the latch is low, instead of 1 byte. You’ll
    need to send the byte for the last shift register in the chain first. For example,
    to send out 2 bytes to the shift registers in [Figure 8-12](chapter8.xhtml#fig8-12),
    you would use the following function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在锁存线为低电平时，发送2字节的数据，而不是1字节。你需要首先发送链中最后一个移位寄存器的字节。例如，要向[图 8-12](chapter8.xhtml#fig8-12)中的移位寄存器发送2字节数据，你将使用以下函数：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To add one or more additional shift registers, just add more parameters and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">shiftOut()</samp> functions, one
    for each extra register. You’ll use multiple TPIC6B595s in the following project,
    along with a new type of LED.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个或更多的移位寄存器，只需添加更多的参数和每个额外寄存器的<sup class="SANS_TheSansMonoCd_W5Regular_11">shiftOut()</sup>函数。你将在接下来的项目中使用多个TPIC6B595，并结合使用一种新的LED类型。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Piranha-Style LEDs</samp>
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">食人鱼风格LED</samp>
- en: There’s an incredible range of LEDs available on the market, from tiny surface-mount
    LEDs to those large enough to serve as part of an automotive headlight. One example
    in between these two is the compact yet very bright Piranha-style LED; its through-hole
    packaging makes it easy to use. [Figure 8-13](chapter8.xhtml#fig8-13) shows a
    pair of Piranha LEDs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有着种类繁多的LED，从微小的表面贴装LED到足够大的LED，能够作为汽车前大灯的一部分。介于这两者之间的一个例子是紧凑且非常亮的食人鱼风格LED；它的通孔封装使得使用起来非常方便。[图
    8-13](chapter8.xhtml#fig8-13)展示了一对食人鱼LED。
- en: '![A PHOTO OF TWO PIRANHA LEDS ON A SOLDERLESS BREADBOARD](../images/fig8-13.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![两颗食人鱼LED在无焊接面包板上的照片](../images/fig8-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-13: Two Piranha LEDs</samp>'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-13：两颗食人鱼LED</samp>
- en: Each LED has four legs, two anodes, and two cathodes. The two anode pins are
    electrically connected to each other, as are the two cathode pins. The anode side
    has the corner cut off at the bottom left, as well as a larger metallic surface
    compared to the cathode side. [Figure 8-14](chapter8.xhtml#fig8-14) shows the
    schematic symbol for Piranha LEDs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个LED有四根引脚，其中两个是阳极，两个是阴极。两个阳极引脚相互连接，两个阴极引脚也相互连接。阳极侧的底部左角被切去，并且与阴极侧相比，阳极侧有更大的金属表面。[图
    8-14](chapter8.xhtml#fig8-14)展示了食人鱼LED的原理图符号。
- en: '![THE SCHEMATIC SYMBOL FOR PIRANHA LEDS](../images/fig8-14.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![食人鱼LED的原理图符号](../images/fig8-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-14: The schematic
    symbol for Piranha-style LEDs</samp>'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-14：食人鱼风格LED的原理图符号</samp>
- en: When used alone, these LEDs operate safely at 20 mA of current at around 2 to
    2.2 V DC. For the next project, you’ll use them in groups of four each, organized
    in series (rather than parallel to each other). In this configuration, each group
    of four LEDs will require 9 V DC power and a 47 Ω resistor to maintain the required
    current and a high brightness.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当单独使用时，这些LED在大约2到2.2伏直流电压下，以20毫安的电流安全运行。接下来的项目中，你将以每组四个的方式使用它们，并将它们串联（而不是并联）。在这种配置中，每组四颗LED将需要9伏直流电源和47欧姆的电阻，以维持所需的电流和高亮度。
- en: To calculate the required resistor to use with LEDs in series, you use formula
    R = (V[s] − V[f]) / I[f] , where V[s] is the power supply voltage, V[f] is the
    forward voltage (recommended operating voltage) of the LEDs, and I[f] is the recommended
    operating current for the LEDs. For the following project, you’d use 8 V at 20
    mA as the LED forward voltage and operating current, with a 9 V supply. This gives
    you R = (9 V − 8 V) / .02 A, which results in 50 Ω. We don’t have a 50 Ω resistor,
    so 47 Ω is the nearest choice.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算与串联LED一起使用的所需电阻，使用公式R = (V[s] − V[f]) / I[f]，其中V[s]是电源电压，V[f]是LED的正向电压（推荐的工作电压），I[f]是LED的推荐工作电流。对于以下项目，你将使用8V的LED正向电压和20mA的工作电流，电源为9V。根据公式，R
    = (9V − 8V) / 0.02A，结果为50Ω。由于没有50Ω电阻，47Ω是最接近的选择。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #27: Creating a Giant Seven-Segment
    LED Display</samp>'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#27：创建一个巨型七段LED显示器</samp>
- en: Multiple TPIC6B595s work well to drive large numbers of LEDs. In this project,
    you’ll build one or more seven-segment LED displays to create large numerical
    displays you can use for various purposes. For instance, you might use them to
    indicate various data generated with an Arduino project, such as temperature,
    an event count, or time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 多个TPIC6B595芯片可以很好地驱动大量LED。在这个项目中，你将构建一个或多个七段LED显示器，创建可以用于各种用途的大型数字显示。例如，你可以用它们来显示通过Arduino项目生成的各种数据，如温度、事件计数或时间。
- en: To construct a single-digit display, you’ll need the following parts. For a
    larger display, multiply all parts other than the Arduino by the number of digits
    you’d like to create. This project shows you how to use four digits at once, so
    multiply by four if you’d like to follow the example exactly. For this project,
    use the PCB rather than a breadboard.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个单数字显示器，你需要以下部件。对于更大的显示器，将除了Arduino以外的所有部件数量乘以你希望创建的数字数量。如果你想按照示例完全操作，那么就乘以四，因为这个项目展示了如何同时使用四个数字。对于这个项目，请使用PCB而不是面包板。
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容板以及USB电缆
- en: Assorted jumper wires
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A 9 V power supply or wall wart with DC plug
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个9V电源或带DC插头的电源适配器
- en: A TPIC6B595 shift register
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TPIC6B595移位寄存器
- en: A 20-pin IC socket
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个20引脚IC插座
- en: A 0.1 µF capacitor
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个0.1µF电容
- en: Thirty-two 5 mm Piranha-style LEDs
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三十二个5毫米Piranha风格LED
- en: Eight 47 Ω, 0.25 W, 1 percent resistors
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个47Ω、0.25W、1%的电阻
- en: Four 3-contact 5.08 mm terminal blocks
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个3接触5.08毫米接线端子
- en: A PCB mount DC socket
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PCB安装式DC插座
- en: 'The Project #27 PCB'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目#27的PCB
- en: '[Figure 8-15](chapter8.xhtml#fig8-15) shows the project’s schematic.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-15](chapter8.xhtml#fig8-15)显示了项目的原理图。'
- en: '![THE SCHEMATIC FOR PROJECT #27, SHOWING SHIFT REGISTER CONTROL OF EIGHT GROUPS
    OF PIRANHA LEDS](../images/fig8-15.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![项目#27的原理图，显示了TPIC6B595移位寄存器控制八组Piranha LED](../images/fig8-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-15: The schematic
    for Project #27</samp>'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-15：项目#27的原理图</samp>
- en: As you can see, the TPIC6B595 has “low-side” outputs. When an output is activated,
    the current starts from the power supply, goes through the items to be controlled,
    and then passes through the shift register DRAIN pins and out via GND.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，TPIC6B595具有“低端”输出。当输出被激活时，电流从电源开始，经过待控制的元件，然后通过移位寄存器的DRAIN引脚，最后通过GND输出。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Single-Digit Display</samp>
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">单位显示</samp>
- en: '[Figure 8-16](chapter8.xhtml#fig8-16) shows the simple PCB layout.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-16](chapter8.xhtml#fig8-16)显示了简单的PCB布局。'
- en: '![AN UNPOPULATED PCB FOR ONE DISPLAY DIGIT](../images/fig8-16.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![一个未装配的单显示数字PCB](../images/fig8-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-16: The unpopulated
    PCB for one digit</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-16：一个未装配的单数字PCB</samp>
- en: 'Always start by connecting the lowest-profile components: the resistors, the
    IC socket, the LEDs, and, finally, the DC socket and terminal blocks. Don’t be
    tempted to insert all the LEDs at once and then turn the PCB over, as some of
    the LEDs may come loose or fall out. Instead, solder them in one at a time. Orient
    all the LEDs with the anodes on the left and cathodes on the right (the left side
    of the PCB is the one with the DC socket). Once completed, your board should resemble
    the example shown in [Figure 8-17](chapter8.xhtml#fig8-17).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 总是从连接最薄的元件开始：电阻器、IC 插座、LED，然后最后连接 DC 插座和接线端子。不要一开始就把所有的 LED 插好，再翻转 PCB，因为一些
    LED 可能会松动或掉出来。相反，应该逐个焊接。所有的 LED 都应当按照阳极在左，阴极在右的方式摆放（PCB 的左侧是带有 DC 插座的那一边）。完成后，您的电路板应该与[图
    8-17](chapter8.xhtml#fig8-17)中的示例相似。
- en: '![THE COMPLETED PCB FOR ONE DISPLAY DIGIT WITH ALL LEDS AND COMPONENTS SOLDERED
    IN, READY FOR USE](../images/fig8-17.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![完成的 PCB，所有 LED 和元件都已焊接好，准备使用](../images/fig8-17.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-17: The completed
    PCB for one digit</samp>'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-17：一个数字的完整 PCB</samp>
- en: 'Once you’ve set up the hardware, enter and upload the Project #27a sketch that
    follows, which demonstrates one digit (you can choose to build three more digits
    in the section “Four-Digit Display”). After uploading the sketch, you’ll need
    to connect your Arduino and power supply to the PCB. With the PCB facing upward
    and the DC socket on your left, make the connections as described in [Table 8-1](chapter8.xhtml#tab8-1).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '在设置好硬件后，上传下面的项目 #27a 草图，它展示了一个数字（你可以选择在“四色显示”部分中构建另外三个数字）。上传草图后，你需要将 Arduino
    和电源连接到 PCB。将 PCB 朝上，DC 插座在左侧，按照[表 8-1](chapter8.xhtml#tab8-1)中描述的方式进行连接。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 8-1:</samp> <samp class="SANS_Futura_Std_Book_11">PCB
    to Arduino Connections</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 8-1：</samp> <samp class="SANS_Futura_Std_Book_11">PCB
    与 Arduino 连接</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">PCB left side</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino</samp>
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">PCB 左侧</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Arduino</samp>
    |'
- en: '| --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Clock</samp> | <samp class="SANS_Futura_Std_Book_11">D9</samp>
    |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">时钟</samp> | <samp class="SANS_Futura_Std_Book_11">D9</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Latch</samp> | <samp class="SANS_Futura_Std_Book_11">D8</samp>
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">锁存器</samp> | <samp class="SANS_Futura_Std_Book_11">D8</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">地</samp> | <samp class="SANS_Futura_Std_Book_11">GND</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9V</samp> | <samp class="SANS_Futura_Std_Book_11">Vin</samp>
    |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9V</samp> | <samp class="SANS_Futura_Std_Book_11">Vin</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5V</samp>
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5V</samp> | <samp class="SANS_Futura_Std_Book_11">5V</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Serial In</samp> | <samp class="SANS_Futura_Std_Book_11">D10</samp>
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">串行输入</samp> | <samp class="SANS_Futura_Std_Book_11">D10</samp>
    |'
- en: Finally, connect a 9 V DC power supply to the DC socket on the PCB. The Arduino
    is powered by the 9 V supply via the Vin pin and feeds back 5 V to the display
    board to power the shift register. The display should count from zero to nine;
    then again with a decimal point beside each numeral, as shown in [Figure 8-18](chapter8.xhtml#fig8-18);
    and finally repeat.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 9 V DC 电源连接到 PCB 上的 DC 插座。Arduino 通过 Vin 引脚从 9 V 电源供电，并通过反馈的 5 V 为显示板供电，驱动移位寄存器。显示屏应从零数到九，然后每个数字旁边都有一个小数点，如[图
    8-18](chapter8.xhtml#fig8-18)所示，最后重复此过程。
- en: '![AN EXAMPLE PHOTO OF ONE DIGIT, DISPLAYING THE NUMBER THREE WITH THE DECIMAL
    POINT ON](../images/fig8-18.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![显示数字三且带有小数点的一个数字示例照片](../images/fig8-18.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-18: Example display
    board output</samp>'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-18：示例显示板输出</samp>
- en: Because of the incredible brightness of the LEDs, I set the supply voltage to
    7 V DC before taking the photo in [Figure 8-18](chapter8.xhtml#fig8-18) for a
    clearer picture. Your display should be much brighter when operating at its designated
    9 V DC.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 LED 的亮度非常高，我在拍摄[图 8-18](chapter8.xhtml#fig8-18)之前将电源电压设置为 7 V DC，以获得更清晰的照片。当工作在其指定的
    9 V DC 电压下时，显示屏应当会更亮。
- en: 'Each segment of the digit consists of 28 Piranha LEDs, plus 4 more for the
    decimal point, driven by an output on the TPIC6B595\. Therefore, you could consider
    the digit to be made up of seven LEDs, plus one more for the decimal point. These
    are controlled via the TPIC6B595’s outputs in the same method as the relay board
    described in Project #26.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数字的每个段由28个Piranha LED组成，再加上4个用于小数点，由TPIC6B595的输出驱动。因此，可以将每个数字视为由七个LED组成，再加上一个小数点的LED。这些LED通过TPIC6B595的输出以与第26项目中继板相同的方式进行控制。
- en: 'Let’s see how this works:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE5]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The sketch first defines the Arduino digital pins used for connecting to the
    shift register’s Latch, Clock, and Data pins ❶. For the array of 8 bytes ❷, each
    byte represents the eight outputs that are used to control the segments on the
    display. For example, the number 1 is represented in binary as <samp class="SANS_TheSansMonoCd_W5Regular_11">B00000110</samp>,
    as you want to turn on the second and third segments of the display to display
    1.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 示例首先定义了用于连接到移位寄存器的锁存、时钟和数据引脚的Arduino数字引脚 ❶。对于8字节的数组 ❷，每个字节代表用于控制显示上段的八个输出。例如，数字1在二进制中表示为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">B00000110</samp>，因为你想要点亮显示器的第二和第三段来显示数字1。
- en: 'The custom <samp class="SANS_TheSansMonoCd_W5Regular_11">sendNumber()</samp>
    function sends the requisite data to display each digit to the shift register,
    which then sets the appropriate outputs. This function accepts the digit to display
    and accepts <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp> or <samp
    class="SANS_TheSansMonoCd_W5Regular_11">false</samp> as the second parameter,
    which is used to turn the decimal point on or off. If the decimal point is required,
    the sketch uses the OR function <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>
    ❸ (as in Project #7 in [Chapter 2](chapter2.xhtml)) to turn on the most significant
    bit of the shift register (bit 7), which controls DRAIN7.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">sendNumber()</samp> 函数将所需的数据发送到移位寄存器，以显示每个数字，然后设置相应的输出。此函数接受要显示的数字，并接受
    <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    作为第二个参数，用于打开或关闭小数点。如果需要小数点，示例使用 OR 函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>
    ❸（如[第2章](chapter2.xhtml)的第7项目中所示）来开启移位寄存器的最高位（位7），该位控制DRAIN7。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> function
    sets the required digital output pins. Finally, the sketch demonstrates the display
    by counting from zero to nine and back again ❹ and then again with the decimal
    point turned on ❺.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> 函数设置所需的数字输出引脚。最后，示例演示了通过从零计数到九并反向计数
    ❹，然后再次显示带有小数点的数字 ❺。
- en: You now have a large, impressive numerical LED display that can be seen from
    quite a distance. If the LEDs are too bright for your liking, you can increase
    the value of the resistors, perhaps to 180 or 270 Ω. Be sure to use 0.25 W (1/4
    W) resistor types.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个大型且引人注目的数字LED显示屏，可以从很远的地方看到。如果LED的亮度太强，你可以增加电阻的阻值，可能设为180或270 Ω。请确保使用0.25
    W（1/4 W）类型的电阻。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Four-Digit Display</samp>
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">四位数字显示器</samp>
- en: You can build and use multiple display boards for larger numerical projects.
    In this example, you’ll use four boards to display numbers of up to four digits.
    You might use this to display data or as a large, bright clock.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为更大的数字项目构建和使用多个显示板。在这个示例中，你将使用四个板来显示最多四位的数字。你可以用它来显示数据或作为一个大型、明亮的时钟。
- en: 'Construct a second, third, and fourth board just as you did in the previous
    section, with one difference: these new boards won’t need the DC socket, as the
    first display board will act as your power source. Once the extra boards are assembled,
    connect them by bridging the terminal blocks on each side to each other. The matching
    labels on the rear of the display boards, as shown in [Figure 8-19](chapter8.xhtml#fig8-19),
    will help you do so.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上一节的方式构建第二、第三和第四个板，唯一的区别是：这些新板不需要直流插座，因为第一个显示板将充当电源。一旦附加板组装完成，通过将每侧的接线端子连接起来来将它们连接在一起。显示板背面上的匹配标签，如[图8-19](chapter8.xhtml#fig8-19)所示，将帮助你完成这一操作。
- en: '![A PHOTO SHOWING THE WIRING BETWEEN TWO DIGIT PCBS](../images/fig8-19.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![一张显示两个数字PCB板之间连线的照片](../images/fig8-19.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-19: The rears of two
    display boards</samp>'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-19：两个显示板的背面</samp>
- en: 'Next, enter and upload the Project #27b demonstration sketch. Once the upload
    completes, connect the Arduino to the leftmost display board and connect the 9
    V power supply. The display boards should show random four-digit numbers, with
    random placement of the decimal point, as shown in [Figure 8-20](chapter8.xhtml#fig8-20).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入并上传项目#27b演示程序。一旦上传完成，将Arduino连接到最左边的显示板，并连接9V电源。显示板应该显示随机的四位数字，并且小数点位置随机，正如[图8-20](chapter8.xhtml#fig8-20)所示。
- en: '![A PHOTO OF THE FOUR DIGITS IN OPERATION, SHOWING THE VALUE 634.1](../images/fig8-20.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![四个数字显示运行中的照片，显示值为634.1](../images/fig8-20.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-20: The four display
    boards operating at 7 V DC</samp>'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图8-20：四个显示板在7V直流电压下工作</samp>
- en: 'Let’s see how this works:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '[PRE6]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The sketch for four boards has a few differences from the Project #27a sketch
    to make using multiple displays easier. Once again, it defines the Arduino digital
    pins used for connecting to the shift register’s Latch, Clock, and Data pins ❶
    and defines the array of 8 bytes ❷ that represents the eight outputs used to control
    the segments on the display.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 四个显示板的程序与项目#27a的程序有一些不同，以便更容易使用多个显示器。它再次定义了连接到移位寄存器的锁存器、时钟和数据引脚的Arduino数字引脚❶，并定义了一个包含8个字节的数组❷，这些字节用于控制显示板上各个段的输出。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">void sendNumbers()</samp>
    function accepts two parameters: an array of four numbers (one for each display
    board) and an integer that represents on which boards to display the decimal point.
    The sketch checks for this ❸. If the parameter is 1, the required bit for the
    decimal point display is included in the byte sent to the shift register ❹.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">void sendNumbers()</samp>函数接受两个参数：一个包含四个数字的数组（每个显示板一个数字）和一个整数，表示在哪些显示板上显示小数点。程序会检查这个值❸。如果参数是1，则需要的小数点显示位将包含在发送到移位寄存器的字节中❹。
- en: As you’re displaying random numbers, the generator is seeded with the analog
    input data ❺, and then the array for numbers to be displayed is also filled with
    random numbers ❻ and sent to the display boards ❼. Finally, the sketch includes
    a delay before displaying more random numbers.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在你显示随机数字时，生成器会使用模拟输入数据❺进行初始化，然后数字显示数组也会被填充为随机数字❻，并发送到显示板❼。最后，程序包含一个延迟，之后会显示更多的随机数字。
- en: 'You can display all sorts of numerical data with these boards. You might also
    add your own characters by adding more elements to the digit arrays. For example,
    a degree symbol for temperature would be as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些显示板显示各种数字数据。你还可以通过向数字数组中添加更多元素来添加自己的字符。例如，表示温度的度符号如下所示：
- en: '[PRE7]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For a challenge, pair up four display boards with an Arduino and a real-time
    clock module to make a large, bright clock. You might add a thermometer as well.
    I hope you enjoy using these display boards as much as I enjoyed designing them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个挑战，将四个显示板与Arduino和实时时钟模块配对，制作一个大型明亮的时钟。你也可以加入一个温度计。希望你能像我设计这些显示板时那样享受使用它们的乐趣。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned how to control currents and voltages using the
    TPIC6B595 shift register, a more capable alternative to the popular 74HC595\.
    You can now control items that draw more current than an Arduino’s digital I/O
    pin can safely handle. You also learned how to use bright Piranha-style LEDs for
    excellent indicators.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用TPIC6B595移位寄存器控制电流和电压，这是一种比流行的74HC595更强大的替代方案。你现在可以控制比Arduino的数字I/O引脚安全处理的电流更大的设备。你还学会了如何使用明亮的Piranha风格LED作为出色的指示灯。
- en: In the next chapter, you’ll use MP3 player modules to create digital music players
    and sound boards for various purposes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用MP3播放器模块来创建数字音乐播放器和各种用途的声音板。
