- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**WEBMASTER HACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**WEBMASTER HACKS**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: In addition to offering a great environment for building nifty command line
    tools that work with various websites, shell scripts can change the way your own
    site works. You can use shell scripts to write simple debugging tools, create
    web pages on demand, or even build a photo album browser that automatically incorporates
    new images uploaded to the server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供一个很好的环境来构建与各种网站协作的巧妙命令行工具外，Shell脚本还可以改变你自己网站的运作方式。你可以使用Shell脚本编写简单的调试工具，按需创建网页，甚至构建一个照片集浏览器，自动将上传到服务器的新图像合并进来。
- en: The scripts in this chapter are all *Common Gateway Interface (CGI)* scripts,
    generating dynamic web pages. As you write CGI scripts, you should always be conscious
    of possible security risks. One of the most common hacks that can catch a web
    developer unawares is an attacker accessing and exploiting the command line via
    a vulnerable CGI or other web language script.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的脚本都是*通用网关接口（CGI）*脚本，用于生成动态网页。在编写CGI脚本时，你应时刻注意可能存在的安全风险。最常见的攻击之一就是攻击者通过一个易受攻击的CGI或其他Web语言脚本访问并利用命令行，令Web开发者措手不及。
- en: Consider the seemingly benign example of a web form that collects a user’s email
    address shown in [Listing 8-1](ch08.xhtml#ch8ex1). The script to process the form
    stores the user’s information in a local database and emails an acknowledgment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑一个看似无害的示例——一个Web表单收集用户的电子邮件地址，如[示例8-1](ch08.xhtml#ch8ex1)所示。处理表单的脚本将用户的信息存储在本地数据库中，并发送确认邮件。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 8-1: Sending an email to a web form user’s address*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例8-1：向Web表单用户的地址发送电子邮件*'
- en: 'Seems innocent, doesn’t it? Now imagine what would happen if, instead of a
    normal email address like *[taylor@intuitive.com](mailto:taylor@intuitive.com)*,
    the user entered something like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来没问题吧？现在，假设用户输入的不是像*[taylor@intuitive.com](mailto:taylor@intuitive.com)*这样的正常电子邮件地址，而是类似于下面这样的内容：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Can you see the danger lurking in that? Rather than just sending the short email
    to the address, this sends a copy of your */etc/passwd* file to a delinquent at
    *[@das-hak.de](mailto:@das-hak.de)*, perhaps to be used as the basis of a determined
    attack on your system security.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到其中潜伏的危险吗？这不仅仅是发送一封简短的电子邮件到指定地址，而是将你的*/etc/passwd*文件副本发送到一个不法分子，邮件地址是*[@das-hak.de](mailto:@das-hak.de)*，可能被用作对你系统安全发动有针对性的攻击。
- en: As a result, many CGI scripts are written in more security-conscious environments—notably
    `-w`-enabled Perl in the shebang (the `!#` at the top of shell scripts) so the
    script fails if data is used from an external source without being scrubbed or
    checked.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多CGI脚本都是在更注重安全的环境中编写的——特别是带有`-w`选项的Perl脚本（即Shell脚本顶部的`!#`部分），这样如果数据来自外部源且未经过清洗或检查，脚本将会失败。
- en: But a shell script’s lack of security features doesn’t preclude its being an
    equal partner in the world of web security. It just means you need to be conscious
    of where problems might creep in and eliminate them. For example, a tiny change
    in [Listing 8-1](ch08.xhtml#ch8ex1) would prevent potential hooligans from providing
    bad external data, as shown in [Listing 8-2](ch08.xhtml#ch8ex2).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Shell脚本缺乏安全功能并不意味着它在Web安全领域中不重要。它只是意味着你需要意识到潜在的安全问题，并消除它们。例如，在[示例8-1](ch08.xhtml#ch8ex1)中的一个小改动就能防止潜在的黑客提供恶意外部数据，如在[示例8-2](ch08.xhtml#ch8ex2)中所示。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 8-2: Sending an email using* `*-t*`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例8-2：使用* `*-t*` 发送电子邮件'
- en: The `-t` flag to `sendmail` tells the program to scan the message itself for
    a valid destination email address. The backquoted material never sees the light
    of a command line, as it’s interpreted as an invalid email address within the
    `sendmail` queuing system. It safely ends up as a file in your home directory
    called *dead.message* and is dutifully logged in a system error file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`-t`标志告诉`sendmail`程序扫描邮件内容以寻找有效的目标电子邮件地址。反引号内的内容不会出现在命令行中，因为它在`sendmail`队列系统中被解释为无效的电子邮件地址。它会安全地以一个名为*dead.message*的文件保存在你的主目录中，并被记录到系统错误日志文件中。'
- en: Another safety measure would be to encode information sent from the web browser
    to the server. An encoded backquote, for example, would actually be sent to the
    server (and handed off to the CGI script) as `%60`, which can certainly be handled
    by a shell script without danger.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项安全措施是对从Web浏览器发送到服务器的信息进行编码。例如，编码后的反引号会实际发送到服务器（并交给CGI脚本处理）作为`%60`，Shell脚本可以安全地处理这个信息而不会造成问题。
- en: 'One common characteristic of all the CGI scripts in this chapter is that they
    do very, very limited decoding of the encoded strings: spaces are encoded with
    a `+` for transmission, so translating them back to spaces is safe. The `@` character
    in email addresses is sent as `%40`, so that’s safely transformed back, too. Other
    than that, the scrubbed string can harmlessly be scanned for the presence of a
    `%` and generate an error if encountered.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有 CGI 脚本的一个共同特点是，它们对编码字符串的解码非常有限：空格在传输过程中会被编码为 `+`，因此将其还原为空格是安全的。电子邮件地址中的
    `@` 字符会被发送为 `%40`，因此也可以安全地转换回来。除此之外，清洗后的字符串可以无害地扫描是否存在 `%` 字符，并在遇到时生成错误。
- en: Ultimately, sophisticated websites will use more robust tools than the shell,
    but as with many of the solutions in this book, a 20- to 30-line shell script
    can often be enough to validate an idea, prove a concept, or solve a problem in
    a fast, portable, and reasonably efficient manner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，复杂的网站会使用比 shell 更强大的工具，但与本书中的许多解决方案一样，一段 20 到 30 行的 shell 脚本通常足以验证一个想法、证明一个概念或以快速、便捷、且合理高效的方式解决问题。
- en: '**Running the Scripts in This Chapter**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运行本章中的脚本**'
- en: 'To run the CGI shell scripts in this chapter, we’ll need to do a bit more than
    just name the script appropriately and save it. We must also place the script
    in the proper location, as determined by the configuration of the web server running.
    To do that, we can install the Apache web server with the system’s package manager
    and set it up to run our new CGI scripts. Here’s how to do so with the `apt` package
    manager:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章中的 CGI shell 脚本，我们需要做的事情比仅仅正确命名脚本并保存它多一些。我们还必须将脚本放在正确的位置，这个位置由运行的 web 服务器的配置决定。为此，我们可以使用系统的包管理器安装
    Apache web 服务器，并将其设置为运行我们新的 CGI 脚本。以下是如何使用 `apt` 包管理器操作的方法：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing via the `yum` package manager should be very similar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `yum` 包管理器安装应该非常相似。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once it’s installed and configured, you should be able to start developing our
    scripts in the default *cgi-bin* directory for your chosen operating system (*/usr/lib/cgi-bin/*
    for Ubuntu or Debian and */var/www/cgi-bin/* on CentOS), and then view them in
    a web browser at *http://<ip>/cgi-bin/script.cgi*. If the scripts still show up
    in plaintext in your browser, ensure that they are executable with the command
    `chmod +x script.cgi`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并配置好后，你应该能够在你选择的操作系统的默认 *cgi-bin* 目录中开始开发脚本（Ubuntu 或 Debian 为 */usr/lib/cgi-bin/*，CentOS
    为 */var/www/cgi-bin/*），然后在浏览器中通过 *http://<ip>/cgi-bin/script.cgi* 查看它们。如果脚本仍然以纯文本形式出现在浏览器中，请确保它们具有可执行权限，命令为
    `chmod +x script.cgi`。
- en: '**#63 Seeing the CGI Environment**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#63 查看 CGI 环境**'
- en: While we were developing some of the scripts for this chapter, Apple released
    the latest version of its Safari web browser. Our immediate question was, “How
    does Safari identify itself within the `HTTP_USER_AGENT` string?” Finding the
    answer is simple for a CGI script written in the shell, as in [Listing 8-3](ch08.xhtml#ch8ex3).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为本章开发一些脚本时，苹果发布了其最新版本的 Safari 浏览器。我们立即产生了一个问题：“Safari 如何在 `HTTP_USER_AGENT`
    字符串中标识自己？”对于使用 shell 编写的 CGI 脚本，找到答案很简单，如 [清单 8-3](ch08.xhtml#ch8ex3) 中所示。
- en: '***The Code***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 8-3: The* `*showCGIenv*` *script*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-3：* `*showCGIenv*` *脚本*'
- en: '***How It Works***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: When a query comes from a web client to a web server, the query sequence includes
    a number of environment variables that the web server (Apache, in this instance)
    hands to the script or program specified (the CGI). This script displays this
    data by using the shell `env` command ➊—to be maximally portable, it’ll use `printenv`
    if the `env` invocation fails, the purpose of the `||` notation—and the rest of
    the script is necessary wrapper information to have the results fed back through
    the web server to the remote browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个查询从 web 客户端发送到 web 服务器时，查询序列包含了一些环境变量，这些环境变量是由 web 服务器（在本例中为 Apache）传递给指定的脚本或程序（即
    CGI）的。这个脚本通过使用 shell 的 `env` 命令 ➊ 显示这些数据——为了最大程度的可移植性，它会在 `env` 调用失败时使用 `printenv`，这是
    `||` 符号的目的——脚本的其余部分是必要的包装信息，用于将结果通过 web 服务器反馈到远程浏览器。
- en: '***Running the Script***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: To run the code you need to have the script executable located on your web server.
    (See “[Running the Scripts in This Chapter](ch08.xhtml#ch08lev1sec01)” on [page
    201](ch08.xhtml#page_201) for more details.) Then simply request the saved *.cgi*
    file from within a web browser. The results are shown in [Figure 8-1](ch08.xhtml#ch8fig1).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行代码，你需要将脚本文件放置在你的网站服务器上并确保其可执行。（有关更多细节，请参见 “[运行本章中的脚本](ch08.xhtml#ch08lev1sec01)”
    以及[第 201 页](ch08.xhtml#page_201)）。然后，只需在网页浏览器中请求保存的 *.cgi* 文件。结果如[图 8-1](ch08.xhtml#ch8fig1)所示。
- en: '![image](../images/f08-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-01.jpg)'
- en: '*Figure 8-1: The CGI runtime environment, from a shell script*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1: 从 shell 脚本中获取的 CGI 运行时环境*'
- en: '***The Results***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Knowing how Safari identifies itself through the `HTTP_USER_AGENT` variable
    is quite useful, as [Listing 8-4](ch08.xhtml#ch8ex4) shows.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 Safari 如何通过 `HTTP_USER_AGENT` 变量识别自己非常有用，如[示例 8-4](ch08.xhtml#ch8ex4)所示。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 8-4: The* `*HTTP_USER_AGENT*` *environment variable in the CGI script*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 8-4: `*HTTP_USER_AGENT*` 环境变量在 CGI 脚本中的使用*'
- en: So Safari version 601.2.7 is in the class of Mozilla 5.0 browsers, running on
    Intel on OS X 10.11.1 using the KHTML rendering engine. All that information,
    tucked into a single variable!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 Safari 版本 601.2.7 属于 Mozilla 5.0 浏览器类别，运行在 Intel 架构的 OS X 10.11.1 上，使用 KHTML
    渲染引擎。所有这些信息，都被压缩到一个变量中！
- en: '**#64 Logging Web Events**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#64 记录 Web 事件**'
- en: A cool use of a shell-based CGI script is to log events by using a wrapper.
    Suppose that you’d like to have a DuckDuckGo search box on your web page. Rather
    than feed the queries directly to DuckDuckGo, you’d like to log them first to
    see if what visitors are searching for is related to the content on your site.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很酷的 shell 脚本使用案例是通过包装器记录事件。假设你想在你的网页上放置一个 DuckDuckGo 搜索框。你不希望直接将查询提交给 DuckDuckGo，而是希望先记录下来，看看访客搜索的内容是否与你网站上的内容相关。
- en: 'First off, a bit of HTML and CGI is necessary. Input boxes on web pages are
    created with the HTML `<form>` tag, and when the form is submitted by clicking
    the form’s button, it sends the user input to a remote web page specified in the
    value of the form’s `action` attribute. The DuckDuckGo query box on any web page
    can be reduced to something like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，稍微需要一些 HTML 和 CGI。网页上的输入框是通过 HTML `<form>` 标签创建的，当点击表单按钮提交表单时，它会将用户输入发送到表单的
    `action` 属性值指定的远程网页。任何网页上的 DuckDuckGo 查询框可以简化为以下内容：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Rather than hand the search pattern directly to DuckDuckGo, we want to feed
    it to a script on our own server, which will log the pattern and then redirect
    the query to the DuckDuckGo server. The form therefore changes in only one small
    regard: the `action` field becomes a local script rather than a direct call to
    DuckDuckGo:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不是直接将搜索模式传递给 DuckDuckGo，而是希望将其传递给我们自己服务器上的脚本，脚本会记录模式然后将查询重定向到 DuckDuckGo
    服务器。因此，表单只有一个小小的变化：`action` 字段变为指向本地脚本，而不是直接调用 DuckDuckGo：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `log-duckduckgo-search` CGI script is remarkably simple, as [Listing 8-5](ch08.xhtml#ch8ex5)
    shows.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`log-duckduckgo-search` CGI 脚本非常简单，如[示例 8-5](ch08.xhtml#ch8ex5)所示。'
- en: '***The Code***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 8-5: The* `*log-duckduckgo-search*` *script*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 8-5: `*log-duckduckgo-search*` 脚本*'
- en: '***How It Works***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: The most notable elements of the script have to do with how web servers and
    web clients communicate. The information entered into the search box is sent to
    the server as the variable `QUERY_STRING` ➊, encoded by replacing spaces with
    the `+` sign and other non-alphanumeric characters with the appropriate character
    sequences. Then, when the search pattern is logged, all `+` signs are translated
    back into spaces safely and simply. Otherwise the search pattern is not decoded,
    to protect against any tricky hacks a user might attempt. (See the introduction
    to this chapter for more details.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本中最显著的元素与 web 服务器和 web 客户端如何通信有关。输入到搜索框中的信息作为变量 `QUERY_STRING` ➊ 发送到服务器，通过将空格替换为
    `+` 符号并将其他非字母数字字符替换为适当的字符序列来进行编码。然后，当搜索模式被记录时，所有的 `+` 符号会安全、简便地转回为空格。否则，搜索模式不会被解码，以防止用户尝试一些复杂的黑客手段。（有关更多细节，请参阅本章引言。）
- en: Once logged, the web browser is redirected to the actual DuckDuckGo search page
    with the `Location:` header value. Notice that simply appending `?$QUERY_STRING`
    is sufficient to relay the search pattern to its final destination, however simple
    or complex the pattern may be.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，网页浏览器会被重定向到实际的 DuckDuckGo 搜索页面，并带有 `Location:` 头部值。请注意，简单地在末尾添加 `?$QUERY_STRING`
    就足以将搜索模式传递到最终目的地，无论模式多么简单或复杂。
- en: The log file produced by this script prefaces each query string with the current
    date and time to build up a data file that not only shows popular searches but
    can also be analyzed by the time of day, the day of the week, the month, and so
    forth. There’s lots of information that this script could reveal about a busy
    site!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本生成的日志文件在每个查询字符串前都加上当前的日期和时间，从而构建一个数据文件，不仅显示流行的搜索内容，还可以按一天中的时间、星期几、月份等进行分析。这个脚本能揭示许多关于繁忙网站的信息！
- en: '***Running the Script***'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: 'To really use this script, you need to create the HTML form, and you need to
    have the script executable and located on your server. (See “[Running the Scripts
    in This Chapter](ch08.xhtml#ch08lev1sec01)” on [page 201](ch08.xhtml#page_201)
    for more details.) However, we can test the script by using `curl`. To test the
    script, perform an HTTP request with `curl` that has a `q` parameter with the
    search query:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正使用这个脚本，你需要创建 HTML 表单，并且该脚本需要可执行并位于你的服务器上。（有关更多细节，请参见[本章运行脚本](ch08.xhtml#ch08lev1sec01)，见[第
    201 页](ch08.xhtml#page_201)。）然而，我们可以通过使用`curl`来测试脚本。要测试脚本，执行一个带有`q`参数（搜索查询）的 HTTP
    请求：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, verify that the search was logged by printing the contents of our search
    log to the console screen:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过将搜索日志的内容打印到控制台屏幕上来验证搜索是否已被记录：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '***The Results***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Opening the script in a web browser, the results are from DuckDuckGo, exactly
    as expected, as shown in [Figure 8-2](ch08.xhtml#ch8fig2).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开脚本时，结果来自 DuckDuckGo，正如预期的那样，见[图 8-2](ch08.xhtml#ch8fig2)。
- en: '![image](../images/f08-02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-02.jpg)'
- en: '*Figure 8-2: DuckDuckGo search results appear, but the search was logged!*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：DuckDuckGo 搜索结果出现了，但搜索已经被记录！*'
- en: On a busy website, you will doubtless find that monitoring searches with the
    command `tail -f searchlog.txt` is quite informative, as you learn what people
    seek online.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个繁忙的网站上，你无疑会发现使用命令`tail -f searchlog.txt`来监控搜索非常有帮助，因为你可以了解人们在线上搜索什么。
- en: '***Hacking the Script***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: If the search box is used on every page of the website, then it would be useful
    to know what page the user was on when they performed the search. This could lead
    to good insights about whether particular pages explain themselves well enough.
    For instance, do users always search for more clarification on a topic from a
    given page? Logging the extra information about which page the user is searching
    from like the `Referer` HTTP header would be a great addition to the script.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搜索框在网站的每一页上都可以使用，那么知道用户在进行搜索时所在的页面将会很有用。这可能会为你提供有关特定页面是否足够清晰的有价值见解。例如，用户是否总是在某个页面上搜索以寻求更多的说明？记录额外的用户搜索页面信息（如`Referer`
    HTTP头）将是对脚本的一个很好的补充。
- en: '**#65 Building Web Pages on the Fly**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#65 动态构建网页**'
- en: Many websites have graphics and other elements that change on a daily basis.
    Web comics like Bill Holbrook’s *Kevin & Kell* are a good example of this. On
    his site, the home page always features the most recent strip, and it turns out
    that the image-naming convention the site uses for individual comics is easy to
    reverse engineer, allowing you to include the cartoon on your own page, as [Listing
    8-6](ch08.xhtml#ch8ex6) details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站上的图形和其他元素会每天变化。像 Bill Holbrook 的*Kevin & Kell*这样的网络漫画就是一个很好的例子。在他的网站上，主页总是展示最新的漫画，而该站点为单个漫画使用的图像命名规则很容易逆向工程，这使得你能够将漫画添加到自己的网站上，正如[示例
    8-6](ch08.xhtml#ch8ex6)所示。
- en: '**WARNING**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*A Word from Our Lawyers: there are a lot of copyright issues to consider when
    scraping the content off another website for your own. For this example, we received
    explicit permission from Bill Holbrook to include his comic strip in this book.
    We encourage you to get permission to reproduce any copyrighted materials on your
    own site before you dig yourself into a deep hole surrounded by lawyers.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自我们的律师的声明：当你从另一个网站抓取内容并用于自己的站点时，涉及许多版权问题。对于这个例子，我们已经从 Bill Holbrook 那里获得了明确许可，允许我们将他的漫画条目收录到这本书中。在你开始做之前，我们鼓励你获得许可，以便在自己的网站上复制任何受版权保护的材料，避免将自己陷入律师包围的深坑。*'
- en: '***The Code***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 8-6: The* `*kevin-and-kell*` *script*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 8-6：*`*kevin-and-kell*`* 脚本*'
- en: '***How It Works***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: 'A quick View Source of the home page for *Kevin & Kell* reveals that the URL
    for a given comic is built from the current year, month, and day, as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看*Kevin & Kell*主页的源代码可以发现，给定漫画的 URL 是由当前的年份、月份和日期构建的，如下所示：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To build a page that includes this strip on the fly, the script needs to ascertain
    the current year (as a two-digit value), month, and day (both with a leading zero,
    if needed). The rest of the script is just HTML wrapper to make the page look
    nice. In fact, this is a remarkably simple script, given the resultant functionality.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要动态生成包含该漫画的页面，脚本需要获取当前的年份（两位数），月份和日期（如果需要，前面加零）。其余部分只是HTML包装器，用来美化页面。实际上，考虑到最终功能，这个脚本非常简单。
- en: '***Running the Script***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Like the other CGI scripts in this chapter, this script must be placed in an
    appropriate directory so that it can be accessed via the web, with the appropriate
    file permissions. Then it’s just a matter of invoking the proper URL from a browser.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章其他CGI脚本一样，这个脚本必须放置在一个合适的目录中，以便通过网络访问，并且具有适当的文件权限。然后，只需从浏览器中调用正确的URL即可。
- en: '***The Results***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: The web page changes every day, automatically. For the strip of August 4, 2016,
    the resulting page is shown in [Figure 8-3](ch08.xhtml#ch8fig3).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该网页每天都会自动更新。对于2016年8月4日的漫画，结果页面如[图8-3](ch08.xhtml#ch8fig3)所示。
- en: '![image](../images/f08-03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-03.jpg)'
- en: '*Figure 8-3: The* Kevin & Kell *web page, built on the fly*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-3：*Kevin & Kell*网页，动态生成*'
- en: '***Hacking the Script***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: This concept can be applied to almost anything on the web if you’re so inspired.
    You could scrape the headlines from CNN or the *South China Morning Post*, or
    get a random advertisement from a cluttered site. Again, if you’re going to make
    the content an integral part of your site, make sure that it’s public domain or
    that you’ve arranged for permission.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有灵感，这个概念几乎可以应用于网络上的任何事物。你可以抓取CNN或*南华早报*的头条新闻，或者从杂乱的网站获取一个随机广告。同样，如果你打算将内容作为你网站的一部分，确保它是公共领域内容，或者你已经获得了授权。
- en: '**#66 Turning Web Pages into Email Messages**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#66 将网页转化为电子邮件消息**'
- en: 'By combining the method of reverse engineering file-naming conventions with
    the website-tracking utility shown in [Script #62](ch07.xhtml#ch07lev1sec10) on
    [page 194](ch07.xhtml#page_194), you can email yourself a web page that updates
    not only its content but also its filename. This script does not require the use
    of a web server to be useful and can be run like the rest of the scripts we have
    written so far in the book. A word of caution, however: Gmail and other email
    providers may filter emails sent from a local Sendmail utility. If you do not
    receive the emails from the following script, try using a service like Mailinator
    (*[http://mailinator.com/](http://mailinator.com/)*) for testing purposes.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将逆向工程文件命名约定与[脚本#62](ch07.xhtml#ch07lev1sec10)中展示的网页跟踪工具相结合，你可以将一个网页自动通过电子邮件发送给自己，该网页不仅会更新内容，还会更新文件名。这个脚本不需要使用Web服务器即可发挥作用，可以像书中其他脚本一样运行。不过，值得注意的是：Gmail和其他电子邮件服务商可能会过滤通过本地Sendmail工具发送的电子邮件。如果你没有收到以下脚本发送的邮件，可以尝试使用类似Mailinator的服务（*
    [http://mailinator.com/](http://mailinator.com/) *）进行测试。
- en: '***The Code***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: As an example, we’ll use *The Straight Dope*, a witty column Cecil Adams writes
    for the *Chicago Reader.* It’s straightforward to have the new *Straight Dope*
    column automatically emailed to a specified address, as [Listing 8-7](ch08.xhtml#ch8ex7)
    shows.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们将使用*Cecil Adams*为*Chicago Reader*写的幽默专栏《The Straight Dope》。如[清单8-7](ch08.xhtml#ch8ex7)所示，自动将新的《Straight
    Dope》专栏通过电子邮件发送到指定地址是非常直接的。
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 8-7: The* `*getdope*` *script*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单8-7：*`*getdope*`*脚本*'
- en: '***How It Works***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: The page with the latest column has a URL that you need to extract from the
    home page, but examination of the source code reveals that each column is identified
    in the source with a `class"="teaser"` and that the most recent column is always
    first on the page. This means that the simple command sequence starting at ➊ should
    extract the URL of the latest column.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最新专栏的页面有一个URL，你需要从主页中提取出来，但检查源代码会发现，每个专栏在源代码中都用`class="teaser"`标识，而且最新的专栏总是出现在页面的最前面。这意味着，从➊开始的简单命令序列应该能够提取出最新专栏的URL。
- en: The `curl` command grabs the source to the home page, the `grep` command outputs
    each matching “teaser” line along with the line immediately after, and `sed` makes
    it easy to grab the second line of the resultant output so we can pull the latest
    article.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令抓取主页的源代码，`grep`命令输出每个匹配的“teaser”行及其后的一行，`sed`使得我们可以轻松提取结果输出的第二行，以便获取最新的文章。'
- en: '***Running the Script***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: To extract just the URL, simply omit everything before the first double quote
    and everything after the resultant first quote. Test it on the command line, piece
    by piece, to see what each step accomplishes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取 URL，只需省略第一个双引号之前的所有内容以及第一个引号之后的所有内容。可以在命令行上逐步测试，查看每一步的结果。
- en: '***The Results***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: While succinct, this script demonstrates a sophisticated use of the web, extracting
    information from one web page to use as the basis of a subsequent invocation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简洁，这个脚本展示了一个复杂的 Web 用法，从一个网页中提取信息，并作为后续调用的基础。
- en: The resultant email therefore includes everything on the page, including menus,
    images, and all the footer and copyright information, as shown in [Figure 8-4](ch08.xhtml#ch8fig4).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，生成的电子邮件包含页面上的所有内容，包括菜单、图片以及所有页脚和版权信息，如 [Figure 8-4](ch08.xhtml#ch8fig4) 所示。
- en: '![image](../images/f08-04.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-04.jpg)'
- en: '*Figure 8-4: Getting the latest* Straight Dope *article delivered straight
    to your inbox*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 8-4: 将最新的* Straight Dope *文章直接发送到你的收件箱*'
- en: '***Hacking the Script***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***黑客脚本***'
- en: Sometimes you might want to sit down for an hour or two on the weekend and read
    the past week’s articles, rather than retrieve one email daily. These types of
    aggregate emails are generally called *email digests* and can be easier to go
    through in one sitting. A good hack would be to update the script to take the
    article for the last seven days and send them all in one email at the end of the
    week. It also cuts back on all those emails you get during the week!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望在周末坐下来一两个小时，阅读过去一周的文章，而不是每天都去查看一封电子邮件。这类汇总邮件通常称为 *电子邮件摘要*，它们可以让你一次性浏览更加轻松。一个不错的黑客技巧是更新脚本，将过去七天的文章全部发送到一个邮件中，在一周结束时发送出去。这样还能减少你在一周内收到的邮件数量！
- en: '**#67 Creating a Web-Based Photo Album**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#67 创建一个基于 Web 的照片相册**'
- en: CGI shell scripts aren’t limited to working with text. A common use of websites
    is as a photo album that allows you to upload lots of pictures and has some sort
    of software to help organize everything and make it easy to browse. Surprisingly,
    a basic “proof sheet” of photos in a directory is quite easy to produce with a
    shell script. The script shown in [Listing 8-8](ch08.xhtml#ch8ex8) is only 44
    lines.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CGI Shell 脚本不仅仅局限于处理文本。网站的一个常见用途是作为相册，允许你上传大量图片，并且有一些软件来帮助整理所有内容，使浏览变得更加简便。令人惊讶的是，使用
    shell 脚本生成目录中的基本“照片清单”非常简单。 [Listing 8-8](ch08.xhtml#ch8ex8) 中展示的脚本只有 44 行。
- en: '***The Code***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 8-8: The* `*album*` *script*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 8-8: The* `*album*` *script*'
- en: '***How It Works***'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: Almost all of the code here is HTML to create an attractive output format. Take
    out the `echo` statements, and there’s a simple `for` loop that iterates through
    each file in the */var/www/html* directory ➊ (which is the default web root on
    Ubuntu 14.04), identifying the files that are images through use of the `file`
    command.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里几乎所有的代码都是 HTML，用于创建吸引人的输出格式。去掉 `echo` 语句，剩下的就是一个简单的 `for` 循环，它遍历 */var/www/html*
    目录 ➊ 中的每个文件（这是 Ubuntu 14.04 中的默认 Web 根目录），并通过 `file` 命令识别图像文件。
- en: This script works best with a file-naming convention in which every filename
    has dashes where it would otherwise have spaces. For example, the `name` value
    of *sunset-at-home.jpg* is transformed into the `nicename` ➋ of *sunset at home*.
    It’s a simple transformation, but one that allows each picture in the album to
    have an attractive, human-readable name rather than something unsightly like *DSC00035.JPG*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本在文件命名约定上效果最好，其中每个文件名使用短横线替代空格。例如，*sunset-at-home.jpg* 的 `name` 值被转换为 `nicename`
    ➋ 的 *sunset at home*。这是一个简单的转换，但它使得相册中的每张图片都有一个吸引人且易于阅读的名称，而不是像 *DSC00035.JPG*
    这样不美观的文件名。
- en: '***Running the Script***'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: To run this script, drop it into a directory full of JPEG images, naming the
    script *index.cgi*. If your web server is configured properly, requesting to view
    that directory automatically invokes *index.cgi*, as long as no *index.html* file
    is present. Now you have an instant, dynamic photo album.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此脚本，只需将其放入一个包含 JPEG 图片的目录中，并将脚本命名为 *index.cgi*。如果你的 web 服务器配置正确，直接请求查看该目录会自动调用
    *index.cgi*，前提是该目录中没有 *index.html* 文件。现在你拥有了一个即时的动态相册。
- en: '***The Results***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Given a directory of landscape shots, the results are quite pleasing, as shown
    in [Figure 8-5](ch08.xhtml#ch8fig5). Notice that *header.html* and *footer.html*
    files are present in the same directory, so they are automatically included in
    the output too.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个包含风景照片的目录，结果非常令人满意，如 [Figure 8-5](ch08.xhtml#ch8fig5) 所示。请注意，*header.html*
    和 *footer.html* 文件存在于相同的目录中，因此它们也会自动包含在输出中。
- en: '![image](../images/f08-05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-05.jpg)'
- en: '*Figure 8-5: An instant online photo album created with 44 lines of shell script!*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 8-5：一个用 44 行 shell 脚本创建的即时在线相册！*'
- en: '***Hacking the Script***'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: 'One limitation of this script is that the full-size version of each picture
    must be downloaded for the photo album view to be shown. If you have a dozen 100MB
    picture files, that could take quite a while for someone on a slow connection.
    The thumbnails aren’t really any smaller. The solution is to automatically create
    scaled versions of each image, which can be done within a script by using a tool
    like ImageMagick (see [Script #97](ch14.xhtml#ch14lev1sec04) on [page 322](ch14.xhtml#page_322)).
    Unfortunately, very few Unix installations include sophisticated graphics tools
    of this nature, so if you’d like to extend this photo album in that direction,
    start by learning more about the ImageMagick tool at *[http://www.imagemagick.org/](http://www.imagemagick.org/)*.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '这个脚本的一个限制是，必须下载每张照片的完整尺寸版本，才能显示照片相册视图。如果你有十几张 100MB 的照片文件，那么对于一个连接较慢的人来说，可能需要相当长的时间。而且缩略图并不比原图小。解决方案是自动创建每张图片的缩放版本，这可以通过使用像
    ImageMagick 这样的工具在脚本中完成（详见 [Script #97](ch14.xhtml#ch14lev1sec04) 第 [322 页](ch14.xhtml#page_322)）。不幸的是，很少有
    Unix 安装包含这种复杂的图形工具，所以如果你想在这个方向扩展该相册，可以从学习更多关于 ImageMagick 的内容开始，访问 *[http://www.imagemagick.org/](http://www.imagemagick.org/)*。'
- en: Another way to extend this script would be to teach it to show a clickable folder
    icon for any subdirectories so that the album acts as an entire file system or
    tree of photographs, organized into portfolios.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展这个脚本的另一种方法是教它显示可点击的文件夹图标，以便任何子目录都能显示出来，从而使相册充当一个完整的文件系统或照片树，按组合方式组织成作品集。
- en: This photo album script is a longtime favorite. What’s delightful about having
    this as a shell script is that it’s incredibly easy to extend the functionality
    in any of a thousand ways. For example, by using a script called `showpic` to
    display the larger images rather than just linking to the JPEG images, it would
    take about 15 minutes to implement a per-image counter system so that people could
    see which images were most popular.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相册脚本一直是我们最喜欢的。令人高兴的是，将它作为一个 shell 脚本非常容易以成千上万种方式扩展其功能。例如，通过使用名为 `showpic`
    的脚本来显示较大的图像，而不仅仅是链接到 JPEG 图像，约 15 分钟就能实现一个每张图像的计数系统，让人们看到哪些图像最受欢迎。
- en: '**#68 Displaying Random Text**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#68 显示随机文本**'
- en: A lot of web servers offer built-in *server-side include (SSI)* capability,
    which allows you to invoke a program to add one or more lines of text to a web
    page as it’s being served to the visitor. This offers some wonderful ways to extend
    your web pages. One of our favorites is the ability to change an element of a
    web page each time the page is loaded. The element might be a graphic, a news
    snippet, a featured subpage, or a tagline for the site itself that’s slightly
    different on each visit, to keep the reader coming back for more.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 web 服务器提供内置的 *服务器端包含（SSI）* 功能，这允许你调用一个程序，将一行或多行文本添加到正在服务给访客的网页中。这为扩展网页提供了许多极好的方法。我们最喜欢的一种方法是每次加载页面时更改网页的某个元素。这个元素可能是一个图形、一个新闻片段、一个推荐的子页面，或者是网站本身的标语，每次访问时稍微不同，保持读者的兴趣。
- en: What’s remarkable is that this trick is quite easy to accomplish with a shell
    script containing an `awk` program only a few lines long, invoked from within
    a web page via a SSI or an *iframe* (a way to have a portion of a page served
    up by a URL that’s different from the rest of the page). The script is shown in
    [Listing 8-9](ch08.xhtml#ch8ex9).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个技巧通过一个仅包含几行 `awk` 程序的 shell 脚本就能轻松实现，该脚本可以通过 SSI 或 *iframe*（一种通过不同
    URL 服务页面部分内容的方法）从网页中调用。该脚本如 [Listing 8-9](ch08.xhtml#ch8ex9) 所示。
- en: '***The Code***'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 8-9: The* `*randomquote*` *script*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 8-9：* `*randomquote*` *脚本*'
- en: '***How It Works***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: Given the name of a data file, this script first checks that the file exists
    and is readable. Then it feeds the entire file to a short `awk` script, which
    stores each line in an array, counts the lines, and then randomly picks one of
    the lines in the array and prints it to the screen.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数据文件的名称，脚本首先检查文件是否存在且可读取。然后，它将整个文件传递给一个简短的`awk`脚本，该脚本将每一行存储在数组中，统计行数，然后随机选择数组中的一行并打印到屏幕上。
- en: '***Running the Script***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: 'The script can be incorporated into an SSI-compliant web page with this line:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可以通过以下代码行集成到SSI兼容的网页中：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Most servers require an *.shtml* file extension, rather than the more traditional
    *.html* or *.htm*, for the web page that contains this server-side include. With
    that simple change, the output of the `randomquote` command is incorporated into
    the content of the web page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务器要求使用*.shtml*文件扩展名，而不是传统的*.html*或*.htm*，用于包含此服务器端包含内容的网页。通过这个简单的更改，`randomquote`命令的输出被嵌入到网页内容中。
- en: '***The Results***'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: You can test this script on the command line by calling it directly, as shown
    in [Listing 8-10](ch08.xhtml#ch8ex10).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过直接在命令行中调用脚本来测试它，如[清单 8-10](ch08.xhtml#ch8ex10)所示。
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 8-10: Running the* `*randomquote*` *script*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-10：运行* `*randomquote*` *脚本*'
- en: '***Hacking the Script***'
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: It would be simple to have the data file that `randomquote` uses contain a list
    of graphic image names. Then you could use this script to rotate through a set
    of graphics. Once you think about it, you’ll realize there’s quite a bit you can
    do with this idea.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`randomquote`使用的数据文件包含一个图像名称列表。然后，你可以使用这个脚本来循环显示一组图像。一旦你考虑到这一点，你会发现这个想法可以做很多事情。
