- en: '**13  Basics of Glitching**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**13  故障注入基础**'
- en: Dear reader, please indulge me in a little mythology. After that, we’ll move
    on to modern clock and voltage glitching attacks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 亲爱的读者，请允许我讲一段小小的神话故事。之后，我们将继续讨论现代时钟和电压故障攻击。
- en: Way back in the good old days, so the story says, a satellite TV smart card
    was vulnerable to memory corruption. The people did rejoice, as a memory corruption
    exploit was sufficient to unlock all of the channels and extract all of the card’s
    memory. Then from the heavens came a message—an EEPROM update, rather than a prophecy—and
    the cards were patched to spin in an infinite loop rather than decode Captain
    Picard’s latest fight with the Borg. The exact patch and the exact card are lost
    to time, but in C we might say the code looked something like the following.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，故事是这么说的，一张卫星电视智能卡存在内存损坏的漏洞。人们为此欢欣鼓舞，因为通过内存损坏漏洞足以解锁所有频道并提取卡内的所有数据。然后，天上传来了一个信息——一个EEPROM更新，而不是预言——这些卡被修补成在无限循环中运行，而不是解码皮卡德船长与博格族的最新战斗。确切的补丁和确切的卡片已经随着时间的推移而失传，但在C语言中，我们可能会说代码看起来像下面这样。
- en: '![Image](../images/f0131-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0131-01.jpg)'
- en: Because the card spins in an infinite loop rather than doing its job, pirates
    called it “looped.” From this they invented “unlooping,” the technique of messing
    with the card’s voltage or clock to jump out of the infinite loop. Today we call
    these techniques “fault injection” or “glitching,” and they are still brutally
    effective at removing protections from chips.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因为卡片在无限循环中运行，而不是执行其正常功能，黑客们称之为“被循环”。从中，他们发明了“解循环”技术，即通过操控卡片的电压或时钟信号跳出无限循环。今天，我们称这些技术为“故障注入”或“故障攻击”，它们依然非常有效地去除芯片的保护。
- en: The trick is to very briefly drop the voltage supply to the chip, or to introduce
    a very brief additional cycle to the clock supply line. Like running the chip
    too fast or on too little power, this causes instructions to be mis-executed.
    But because the violation is so brief, as little as one instruction will be corrupted
    while everything else remains fine.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧是短暂地降低芯片的电压，或者向时钟供应线路引入一个非常简短的额外周期。就像让芯片运行得太快或电力不足一样，这会导致指令执行错误。但由于这种违例非常短暂，可能仅仅一个指令就会被破坏，而其他部分保持正常。
- en: In our example, the smart card will spin forever executing the `while` loop
    on line 3\. Optimizations and assembly languages will express it differently,
    but imagine it becomes the following pseudo-assembly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，智能卡将永远执行第3行的`while`循环。优化和汇编语言会以不同的方式表示，但可以想象它变成以下伪汇编代码。
- en: '![Image](../images/f0132-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0132-01.jpg)'
- en: When the device is looped, the microcontroller will execute lines 2 and 3 in
    sequence forever. If we shorten the clock so that the jump-if-equal instruction
    on line 3 does not write over the program counter, execution will continue on
    line 5, calling the main method as if this chip weren’t locked. Because the loop
    runs continuously, the chip is helpfully giving us many tries before each reboot.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备被循环时，微控制器将永远按顺序执行第2行和第3行。如果我们缩短时钟周期，使得第3行的“等于跳转”指令不会覆盖程序计数器，那么执行将继续到第5行，调用主方法，就好像这个芯片没有被锁定一样。由于循环持续运行，芯片在每次重启前都会给我们提供许多尝试机会。
- en: Another good target is a copy loop. At startup, a smart card often presents
    its Answer To Reset (ATR) string. If the `for` loop that sends the string is like
    this, we might leak extra bytes of memory out of the card by glitching as `i`
    is compared to `16` after the last byte. When the comparison is exact (*i* ≠ 16)
    instead of a range (*i <* 16), this might dump a lot of extra memory!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好的目标是复制循环。在启动时，智能卡通常会呈现其复位响应（ATR）字符串。如果发送该字符串的`for`循环像这样，那么我们可能会通过故障攻击在最后一个字节之后，比较`i`与`16`时泄露额外的内存。当比较是精确的（*i*
    ≠ 16）而不是范围比较（*i* <* 16）时，这可能会导致大量额外的内存泄露！
- en: '![Image](../images/f0132-02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0132-02.jpg)'
- en: In the early 2000s, unlooper hardware was commercially sold to hobbyists and
    schematics for home designs were passed around on forums. Most consisted of an
    Atmel AT90 microcontroller with 7400 series chips to insert glitches on the clock
    and data lines against the DirecTV HU Card.^([1](footnotes.xhtml#ch13fn1)) See
    [Figure 13.1](ch13.xhtml#ch13fig1) for an example, and search eBay for “Mikobu”
    if you’d prefer to purchase one already made.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初，专门的解锁硬件开始在商店里销售给业余爱好者，家用设计的原理图也在论坛上传播。大多数方案使用Atmel AT90微控制器和7400系列芯片，在时钟和数据线上插入故障，以对抗DirecTV
    HU卡。^([1](footnotes.xhtml#ch13fn1)) 请参见[图13.1](ch13.xhtml#ch13fig1)了解示例，如果你想购买现成的，可以在eBay上搜索“Mikobu”。
- en: '![Image](../images/f0133-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0133-01.jpg)'
- en: 'Figure 13.1: Smart Card Unlooper from PLC77 (2001)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：PLC77的智能卡解锁器（2001）
- en: As far as software goes, most of these unlooper designs require firmware to
    be loaded into the AT90 through the MAX232 chip over a serial port. While many
    glitching programs were shared as source code or black box binaries, there was
    also a tradition of sharing them as commented VBScript for a program called WinExplorer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就软件而言，这些解锁器设计中的大部分都需要通过MAX232芯片将固件加载到AT90中，且是通过串口进行的。尽管许多故障程序以源代码或黑盒二进制的形式共享，但也有一种传统是以注释过的VBScript形式与名为WinExplorer的程序共享它们。
- en: '**Clock Glitching**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**时钟故障**'
- en: When a microcontroller is designed, there’s a matter of timing closure. For
    any given chip, there is some maximum clock rate, beneath which the design behaves
    as specified. Beneath this speed, all of the combinational logic gets the right
    result in time to be latched by the sequential logic.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当设计微控制器时，会涉及到时序闭合的问题。对于任何给定的芯片，都会有一个最大时钟频率，低于这个频率，设计可以按预期正常工作。在这个速度下，所有组合逻辑都会在正确的时间得到结果，并能被顺序逻辑锁存。
- en: Above this rate, things fail, but not all at once. Maybe multiplication is the
    bottleneck of the clock rate, and exceeding that rate by a little bit causes some
    multiplications to fail while everything else works fine. If you never need multiplication,
    you might exceed this clock rate to get more performance in other functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 超过这个频率，事情会失败，但并非一下子就全完。也许乘法运算是时钟频率的瓶颈，稍微超过这个频率就会导致一些乘法运算失败，而其他的功能依然正常。如果你不需要乘法运算，你可能会超过这个时钟频率，从而提升其他功能的性能。
- en: When a chip takes its raw clock input from an external pin, and it doesn’t smooth
    that clock out with a phase-locked loop, we have the opportunity to perform some
    clock glitching. We do this by inserting a short clock pulse, one single edge
    or cycle that is far above the maximum rate of the chip.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当芯片从外部引脚获取原始时钟输入，而没有通过锁相环平滑时钟时，我们就有机会进行时钟故障操作。我们通过插入一个短暂的时钟脉冲，单个边缘或周期，远远超出芯片的最大时钟频率来实现这一点。
- en: In a multi-cycle design, this can be thought of as one piece of one instruction
    being given time to finish. Maybe the wrong opcode is latched in the first cycle
    of the instruction, or maybe a jump never writes back to the program counter at
    the end of the instruction.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在多周期设计中，可以将其看作是一个指令的一部分被给予时间以完成。也许在指令的第一周期中，错误的操作码被锁存，或者也许在指令结束时，跳转没有写回程序计数器。
- en: I usually begin with a range of time in which the firmware makes an important
    decision, then attempt to fault random points in that range until I get the chip
    to misbehave. Because we control the clock itself, this timing can be extremely
    accurate and reliable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常从固件做出重要决策的时间范围开始，然后尝试在这个范围内故意制造随机错误，直到让芯片出现异常。由于我们控制着时钟本身，这个时序可以非常准确和可靠。
- en: '**Voltage Glitching**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电压故障**'
- en: When the raw clock input isn’t available, voltage glitching might still be an
    option. The idea is to abruptly shift the voltage, raising or lowering it for
    such a brief moment that the chip does not crash but it also doesn’t execute its
    instruction properly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当原始时钟输入不可用时，电压故障仍然可能是一个选项。其思路是突然改变电压，迅速升高或降低电压，持续的时间极短，以至于芯片不会崩溃，但也无法正确执行指令。
- en: Dropping the voltage has many effects. One is that the transistors flip more
    slowly, so that a device might be well within its timing closure is suddenly unable
    to calculate its results in time, somewhat like clock glitching. An Atmega328P,
    for example, safely runs at 20MHz at 4.5V only 10MHz at 2.7V. Other effects include
    failures in memories and mistaken instruction decoding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 降低电压会产生许多影响。其中之一是晶体管翻转速度变慢，从而导致一个本来在时序闭合范围内的设备，突然无法及时计算其结果，类似于时钟故障。例如，Atmega328P在4.5V时可安全运行20MHz，而在2.7V时则只能运行10MHz。其他影响包括存储器故障和指令解码错误。
- en: Calibration of a voltage glitch can be tricky. The first axis will be the time
    offset from an observable trigger, like a pin rising high. The duration of change
    and the target voltage will be two more axes, and clock drift will make things
    less reliable the longer we wait after the trigger for the glitch to occur.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 电压故障的校准可能很棘手。第一个轴线将是从可观察触发器（例如引脚上升）到发生故障的时间偏移。变化持续时间和目标电压将是另外两个轴线，时钟漂移会导致我们在触发后等待更长时间，故障发生的可靠性降低。
- en: To keep things simple, many modern glitching attacks simply short circuit the
    core voltage to ground and rely on very short timing to prevent a crash.^([2](footnotes.xhtml#ch13fn2))
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，许多现代的故障攻击通过直接将核心电压短接到地面，并依赖非常短的时序来防止崩溃。^([2](footnotes.xhtml#ch13fn2))
- en: However you arrange things, it’s important to calibrate your glitching on one
    axis at a time. I do this on a development board with the same chip as my target,
    first running a tight `while` loop that adds up a bunch of numbers and prints
    a warning when they disagree. I can then search for a duration and voltage that
    make the warnings appear, without yet worrying about when to apply the glitch.
    I remove most of the decoupling capacitors, then add them back individually if
    things become too unstable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何安排，重要的是一次只校准一个轴向的故障。我会在一个开发板上进行此操作，开发板上的芯片与我的目标芯片相同，首先运行一个紧凑的`while`循环，计算一堆数字，并在它们不一致时打印警告。然后，我可以寻找一个合适的持续时间和电压，使警告出现，而不必担心何时应用故障。我会移除大部分去耦电容器，然后如果情况变得不稳定，再逐个加回。
- en: Only after successfully injecting faults in this easy target do I bother switching
    over to my real target. It’s there that my trigger and offset matter, and it’s
    best that the other parameters already be dialed in.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在成功注入故障到这个简单目标之后，我才会切换到真正的目标。在那里，我的触发器和偏移量才会变得重要，并且最好是其他参数已经调好。
