- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">DEBUGGING
    ASSEMBLY CODE WITH GDB OR LLDB</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener-img.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At some point, your compiler is going to generate assembly code that doesn’t
    behave correctly, and you’ll need to figure out why. When that happens, a command
    line debugger is indispensable for understanding what’s going wrong. A debugger
    lets you pause a running program, step through it one instruction at a time, and
    examine the program state at different points. You can use either GDB (the GNU
    debugger) or LLDB (the debugger from the LLVM Project) to debug the assembly code
    your compiler generates. I recommend using GDB if you’re on Linux and LLDB if
    you’re on macOS (I think GDB has a slightly nicer UI for working with assembly,
    but getting it to run on macOS can be a challenge).
  prefs: []
  type: TYPE_NORMAL
- en: This appendix is a brief guide to debugging assembly programs with GDB or LLDB.
    It introduces the basics that you’ll need to know if you’ve never used a debugger
    before. It also covers the most important commands and options that you’ll need
    to use to work with assembly code in particular, which may be new to you even
    if you’re comfortable using these tools to debug source code. I’ve included separate
    walk-throughs for the two debuggers; even though they have very similar functionality,
    the details of many commands are different. Follow the walk-through for whichever
    debugger you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: Before you get started, you should be familiar with the basics of assembly code
    covered in [Chapters 1](chapter1.xhtml) and [2](chapter2.xhtml). A few aspects
    of assembly from later chapters will also come up, but you can gloss over those
    if you haven’t gotten to them yet.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Program</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the assembly program in [Listing A-1](#listA-1) as a running example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing A-1: A pointless assembly
    program</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This program doesn’t do anything useful; it just gives us the opportunity to
    try out the most important features of the debuggers. It includes a couple of
    static variables for us to inspect: <samp class="SANS_TheSansMonoCd_W5Regular_11">integer</samp>
    ❶ and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbl</samp> ❷. In <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    ❸, it first calls a very small function, <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>,
    so we can practice stepping into and out of function calls ❹, then moves some
    data into registers and onto the stack so we can practice examining the state
    of the program ❺. It ends with a loop that decrements ECX on every iteration,
    stopping once it reaches 0 ❻. We’ll use this loop to practice setting conditional
    breakpoints.'
  prefs: []
  type: TYPE_NORMAL
- en: Download this program from *[https://<wbr>norasandler<wbr>.com<wbr>/book<wbr>/#appendix<wbr>-a](https://norasandler.com/book/#appendix-a)*,
    then save it as *hello_debugger.s*. There are two different versions of this file
    for Linux and macOS, so make sure to pick the right one for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve saved the file, assemble and link it and confirm that it runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, include the <samp class="SANS_TheSansMonoCd_W5Regular_11">-g</samp>
    option when you assemble and link the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-g</samp> option generates
    extra debug information. Make sure to include it when assembling and linking your
    own compiler’s assembly output for debugging too.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can start the walk-through. If you’re using GDB, follow the walk-through
    in the next section. If you’re using LLDB, skip to “Debugging with LLDB” on [page
    687](#pg_687).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Debugging with GDB</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run this command to start up GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sets <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>
    as the executable to debug but doesn’t actually execute it. Before we start running
    this executable, let’s configure the UI to make working with assembly code easier.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the GDB
    UI</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During a GDB session, you can open up different text windows that display different
    information about the running program. For our purposes, the most important of
    these is the *assembly window*, which displays the assembly code as we step through
    it. The *register window* is also useful; by default, it shows the current contents
    of every general-purpose register.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">layout</samp> command controls
    which windows are visible. Let’s open up the assembly and register windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see three windows in your terminal: the register window, the
    assembly window, and the command window with the <samp class="SANS_TheSansMonoCd_W5Regular_11">(gdb)</samp>
    prompt. It should look similar to [Figure A-1](#figA-1).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figA-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-1: A GDB session with
    the assembly and register windows open [Description](description-89.xhtml)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The register window won’t display any information until you start the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can scroll in whichever window is currently in focus. Use the <samp class="SANS_TheSansMonoCd_W5Regular_11">focus</samp>
    command to change the in-focus window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Starting and
    Stopping the Program</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll set a *breakpoint*—a location where the debugger will pause the
    program—and run the program up to that breakpoint. If we start the program without
    setting a breakpoint first, it will run all the way through without stopping,
    which isn’t very useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command <samp class="SANS_TheSansMonoCd_W5Regular_11">break <</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">function name></samp> sets a
    breakpoint at the start of a function. Let’s set a breakpoint at the entrance
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s start the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The output of this command tells us that the program has hit the breakpoint
    we just set ❶. Notice that the current instruction is highlighted in the assembly
    window and the current values of the general-purpose registers are displayed in
    the register window, as shown in [Figure A-2](#figA-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/figA-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-2: A GDB session when
    the program is stopped at a breakpoint [Description](description-90.xhtml)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a program is paused, there are a few commands you can use to move it forward:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">continue</samp> resumes the program
    and runs until we hit another breakpoint or exit.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">finish</samp> resumes the program
    and pauses again when we return from the current function.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">stepi</samp> executes the next
    instruction, then pauses. It steps into <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    instructions, pausing at the first instruction in the callee. The command <samp
    class="SANS_TheSansMonoCd_W5Regular_11">stepi</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp>
    will execute *n* instructions.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">nexti</samp> executes the next
    instruction, then pauses. It steps over <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    instructions, pausing at the next instruction after <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    in the current function. The command <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp> will execute
    *n* instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most GDB instructions can be abbreviated to one or two letters: you can type
    <samp class="SANS_TheSansMonoCd_W5Regular_11">c</samp> instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">break</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">si</samp> instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">stepi</samp>,
    and so on. [Table A-1](#tabA-1) on [page 687](#pg_687) gives full and shortened
    versions of all the commands we discuss.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_39">WARNING</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*While the nexti and stepi commands step through assembly instructions, the
    next and step commands step through lines in the original source file. Since we
    don’t have any information about the original source file, entering one of these
    commands will run the program until the end of the current function. These commands
    are abbreviated to n and s, respectively, so it’s easy to run them by accident
    when you meant to use nexti or stepi.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try out our new commands. First, we’ll execute two instructions, which
    should take us into the call to <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the command output ❶ and from the highlighted instruction in
    the assembly window that we’re stopped in <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>. Next, we’ll
    return from <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re now back in <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>,
    at the instruction right after <samp class="SANS_TheSansMonoCd_W5Regular_11">callq</samp>.
    Let’s continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we didn’t hit any more breakpoints, the program ran until it exited.
    To keep debugging it, we’ll have to restart it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’re paused at the start of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    again. We’ll step forward two instructions one more time, but this time we’ll
    use <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti</samp> to step over <samp
    class="SANS_TheSansMonoCd_W5Regular_11">f</samp> instead of stepping into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This puts us back at the instruction right after <samp class="SANS_TheSansMonoCd_W5Regular_11">callq</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Setting Breakpoints by Address</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In addition to setting breakpoints on functions, you can break on specific
    machine instructions. Let’s set a breakpoint on the instruction <samp class="SANS_TheSansMonoCd_W5Regular_11">movl
    0xdeadbeef, -4(%rbp)</samp>. First, we’ll find this instruction in the assembly
    window. It should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The instruction’s address in memory is at the beginning of the line ❶, followed
    by the byte offset of that address from the start of the function ❷. The exact
    address may be different on your machine, but the offset should be the same. To
    set this breakpoint, you can type either
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">MEMORY_ADDRESS</samp>
    is the address you found in the assembly window. The <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>
    symbol tells GDB that we’re specifying an exact address rather than a function
    name.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Managing Breakpoints</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s list all the breakpoints we’ve set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Every breakpoint has a unique number, which you can refer to if you need to
    delete, disable, or modify it. Let’s delete breakpoint 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll look at a couple of different ways to examine the program’s state.  ###
    <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Printing Expressions</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can print out expressions with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">print/</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format> <expr></samp>, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><format></samp> is a one-letter
    format specifier. You can use most of the same format specifiers you’d use in
    <samp class="SANS_TheSansMonoCd_W5Regular_11">printf</samp>: <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    to display a value as a hexadecimal integer, <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp>
    to display it as a signed integer, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><expr></samp> is an arbitrary
    expression. This expression can refer to registers, memory addresses, and symbols
    in the running program. It can also include C operations like arithmetic, pointer
    dereferencing, and cast expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try some examples. Right now, the program should be paused at the instruction
    <samp class="SANS_TheSansMonoCd_W5Regular_11">movl 0x87654321, %eax</samp>. We’ll
    step through this instruction, then print out the value of EAX in a few different
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: By default, GDB formats the values in general-purpose registers as signed integers
    ❶. Here, we also display the value in EAX in hexadecimal ❷ and as an unsigned
    integer ❸. The symbols <samp class="SANS_TheSansMonoCd_W5Regular_11">$1</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$2</samp>, and so on are *convenience
    variables*, which GDB automatically generates to store the result of each expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the full list of format specifiers in the documentation for the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> command, which we’ll talk
    more about in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[Chapter 13](chapter13.xhtml) introduces the XMM registers, which hold floating-point
    values. The next instruction in our program, <samp class="SANS_TheSansMonoCd_W5Regular_11">movsd
    dbl(%rip), %xmm0</samp>, copies the value <samp class="SANS_TheSansMonoCd_W5Regular_11">3.5</samp>
    from the static <samp class="SANS_TheSansMonoCd_W5Regular_11">dbl</samp> variable
    into XMM0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s step through this instruction, then inspect XMM0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'GDB is showing us lots of different views of the same data: <samp class="SANS_TheSansMonoCd_W5Regular_11">v4_float</samp>
    displays this register’s contents as an array of four 32-bit floats, <samp class="SANS_TheSansMonoCd_W5Regular_11">v2_double</samp>
    displays it as an array of 64-bit doubles, and so on. Since we’ll use XMM registers
    only to store individual doubles, you can always examine them with a command like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This prints out the value in the register’s lower 64 bits, interpreted as a
    double.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to registers, we can print out the values of objects in the symbol
    table. Let’s inspect the two static variables in this program, <samp class="SANS_TheSansMonoCd_W5Regular_11">integer</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbl</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Since GDB doesn’t have any information about these objects’ types, we have to
    cast them to the correct type explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a few examples of more complex expressions. Aside from the fact
    that they refer directly to hardware registers, these expressions all use ordinary
    C syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can perform basic arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call functions that are defined in the current program or the standard
    library. Here, we call <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>,
    which returns <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also dereference pointers. Let’s execute the next instruction, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">movl 0xdeadbeef, -4(%rbp)</samp>, then
    inspect the value at <samp class="SANS_TheSansMonoCd_W5Regular_11">-4(%rbp)</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: First, we calculate the memory address we want to inspect, <samp class="SANS_TheSansMonoCd_W5Regular_11">$rbp
    - 4</samp>. Then, we cast this address to the correct pointer type, <samp class="SANS_TheSansMonoCd_W5Regular_11">(int
    *)</samp>. Finally, we dereference it with the dereference operator, <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>.
    This produces an integer, which we print out in hexadecimal with the <samp class="SANS_TheSansMonoCd_W5Regular_11">/x</samp>
    specifier.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at a more flexible way to inspect values in memory.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Examining Memory</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can examine memory with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">x/<</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">n><format><unit> <expr></samp>,
    where:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><n></samp> is the number
    of units of memory to display (given the unit size specified by <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><unit></samp>).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><format></samp> specifies
    how to format each unit. These are the same format specifiers we used in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">print</samp> command.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><unit></samp> is a one-letter
    specifier for the size of a unit: <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    for a byte, <samp class="SANS_TheSansMonoCd_W5Regular_11">h</samp> for a 2-byte
    halfword, <samp class="SANS_TheSansMonoCd_W5Regular_11">w</samp> for a 4-byte
    word, or <samp class="SANS_TheSansMonoCd_W5Regular_11">g</samp> for an 8-byte
    “giant” word.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><expr></samp> is an arbitrary
    expression that evaluates to some valid memory address. These are the same kinds
    of expressions we can use in the <samp class="SANS_TheSansMonoCd_W5Regular_11">print</samp>
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> command
    to inspect the integer at <samp class="SANS_TheSansMonoCd_W5Regular_11">-4(%rbp)</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This command tells GDB to print out one 4-byte word in hexadecimal. The output
    includes both the memory address ❶ and the value at that address ❷.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next three instructions in [Listing A-1](#listA-1) store three more integers
    on the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use the commands in [Listing A-2](#listA-2) to step through these instructions,
    then print out the whole stack frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing A-2: Stepping forward
    three instructions, then printing out the current stack frame</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The command <samp class="SANS_TheSansMonoCd_W5Regular_11">x/6xw $rsp</samp>
    tells GDB to print out six 4-byte words, starting at the address in RSP. We print
    out six words because the stack frame for this particular function is 24 bytes.
    At the start of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>, we
    saved the old value of RBP onto the stack. That’s 8 bytes. Then, we allocated
    another 16 bytes with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">subq
    $16, %rsp</samp>. Keep in mind that RSP always holds the address of the top of
    the stack, which is the *lowest* stack address.
  prefs: []
  type: TYPE_NORMAL
- en: This command displays the four integers we saved to the stack, with <samp class="SANS_TheSansMonoCd_W5Regular_11">0xfeedface</samp>
    at the top ❶ and <samp class="SANS_TheSansMonoCd_W5Regular_11">0xdeadbeef</samp>
    at the bottom ❷, followed by the old value of RBP ❸. On some systems, this value
    will be 0 because we’re in the outermost stack frame; on others, it will be a
    valid memory address.
  prefs: []
  type: TYPE_NORMAL
- en: 'The saved value of RBP is at the bottom of the current stack frame. Right after
    it, on top of the *caller’s* stack frame, we’ll find the caller’s return address—that
    is, the address we’ll jump to when we return from <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>.
    (We covered this in detail when we implemented function calls in [Chapter 9](chapter9.xhtml).)
    Let’s inspect this return address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This command will print out four 8-byte “giant” words, starting with the value
    at the address in RSP. The <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    specifier tells GDB to format these values as memory addresses; this means it
    will print each address in hexadecimal and, if possible, print out its offset
    from the nearest symbol in the program. Because function and static variable names
    are defined in the symbol table, GDB can display the relative offsets of assembly
    instructions and static data. It won’t display relative offsets of stack addresses,
    heap addresses, or invalid addresses, because they would be completely meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: The first line of output includes the four integers we saved onto the stack,
    now displayed as two 8-byte values instead of four 4-byte values. The null pointer
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0</samp> on the next line is the
    saved value of RBP. None of these three 8-byte values are valid addresses, so
    GDB can’t display their offsets from symbols. The next value on the stack is the
    return address ❶. GDB tells us that this is the address of an instruction in <samp
    class="SANS_TheSansMonoCd_W5Regular_11">_libc_start_main</samp>, the standard
    library function responsible for calling <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    and cleaning up after it exits.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> specifier makes it
    easy to spot return addresses and pointers to static variables. This is particularly
    useful if your program’s stack frame is corrupted; finding each stack frame’s
    return address can help you get your bearings.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Setting Conditional
    Breakpoints</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To wrap up this walk-through, we’ll look at how to set *conditional breakpoints*.
    The program will pause at a conditional breakpoint only if the associated condition
    is true. This condition can be an arbitrary expression; GDB will consider it false
    if it evaluates to 0 and true otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set a breakpoint on the <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp>
    instruction at the end of the last loop iteration in <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>.
    First, we need to find this instruction in the assembly window. It should be 65
    bytes after the start of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll set a conditional breakpoint to pause on this instruction if ECX is 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this loop repeats until ECX is 0, the condition <samp class="SANS_TheSansMonoCd_W5Regular_11">$ecx</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    will be true only on the last iteration. Let’s continue until this breakpoint,
    then verify that the condition is true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, so good. If you get a different value for ECX, check whether you set
    the breakpoint correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that your breakpoint is at the location <samp class="SANS_TheSansMonoCd_W5Regular_11">main+65</samp>
    ❶ and that it includes the condition <samp class="SANS_TheSansMonoCd_W5Regular_11">$ecx</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    ❷. If your breakpoint looks different, you might have mistyped something; delete
    it and try again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should be on the last loop iteration, so let’s step forward one instruction
    and make sure that the jump isn’t taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Usually, <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp> will jump
    back to the start of the loop, but on the last iteration it moves forward to the
    next instruction.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Getting Help</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn about commands and options that we didn’t cover here, see the GDB
    documentation at *[https://<wbr>sourceware<wbr>.org<wbr>/gdb<wbr>/current<wbr>/onlinedocs<wbr>/gdb<wbr>/index<wbr>.html](https://sourceware.org/gdb/current/onlinedocs/gdb/index.html)*.
    As you saw earlier, you can also type <samp class="SANS_TheSansMonoCd_W5Regular_11">help</samp>
    at the prompt to learn more about any GDB command. For example, to see the documentation
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">run</samp> command, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[Table A-1](#tabA-1) summarizes the commands and options we covered, including
    full and abbreviated forms for each command (except <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>,
    which can’t be abbreviated any further). Both forms take the same arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table A-1:</samp> <samp class="SANS_Futura_Std_Book_11">A
    Summary of GDB Commands</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Command</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">run</samp> | <samp class="SANS_Futura_Std_Book_11">Start
    the program.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">r</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp> | <samp class="SANS_Futura_Std_Book_11">Resume
    the program.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">c</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">finish</samp> | <samp class="SANS_Futura_Std_Book_11">Resume
    the program and continue until the current function exits.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">fin</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">stepi [</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Execute
    one instruction (or</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">n</samp>
    <samp class="SANS_Futura_Std_Book_11">instructions), stepping into function calls.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">si</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti [</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Execute
    one instruction (or</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">n</samp>
    <samp class="SANS_Futura_Std_Book_11">instructions), stepping over function calls.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ni</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">break</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><loc></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">[if</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cond></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Set
    a breakpoint at</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><loc></samp>
    <samp class="SANS_Futura_Std_Book_11">(conditional on</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cond></samp><samp
    class="SANS_Futura_Std_Book_11">, if provided).</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">info break</samp> | <samp class="SANS_Futura_Std_Book_11">List
    all breakpoints. (Other</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">info</samp>
    <samp class="SANS_Futura_Std_Book_11">subcommands display other information.)</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">i b</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">delete [</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><id></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Delete
    all breakpoints (or the breakpoint specified by</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><id></samp><samp
    class="SANS_Futura_Std_Book_11">).</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">print/<</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">format>
    <expr></samp> | <samp class="SANS_Futura_Std_Book_11">Evaluate</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><expr></samp>
    <samp class="SANS_Futura_Std_Book_11">and display the result according to format
    specifier</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">p</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x/</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n><format><unit></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">addr></samp>
    | <samp class="SANS_Futura_Std_Book_11">Print out memory starting at</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp> <samp class="SANS_Futura_Std_Book_11">in</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">n</samp> <samp class="SANS_Futura_Std_Book_11">chunks
    of size</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><unit></samp><samp
    class="SANS_Futura_Std_Book_11">, formatted according to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">layout</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><window></samp>
    | <samp class="SANS_Futura_Std_Book_11">Open</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><window></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">la</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">focus</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><window></samp>
    | <samp class="SANS_Futura_Std_Book_11">Change focus to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><window></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">fs</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">help</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cmd></samp>
    | <samp class="SANS_Futura_Std_Book_11">Display help text about</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cmd></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">h</samp> |'
  prefs: []
  type: TYPE_TB
- en: Now you’re ready to start debugging with GDB!
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Debugging with LLDB</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run this command to start up LLDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will set <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>
    as the executable to debug but won’t execute it yet. If prompted, enter your username
    and password to give LLDB permission to control <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Starting and Stopping
    the Program</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we’ll set a *breakpoint*—a location where the debugger will pause the
    program—and run the program up to that breakpoint. If we start the program without
    setting a breakpoint first, it will run all the way through without stopping,
    which isn’t very useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set a breakpoint at the entrance to <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note that <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> may be at
    a different memory address on your machine. The <samp class="SANS_TheSansMonoCd_W5Regular_11">break
    set</samp> command creates a new breakpoint; the <samp class="SANS_TheSansMonoCd_W5Regular_11">-n</samp>
    option specifies the name of the function where we want to break. We’ll look at
    other ways to set breakpoints in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s run the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">stop reason</samp> ❶ tells
    us that the program has hit the breakpoint we just set. LLDB also helpfully tells
    us that we’re stopped in the <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    function in <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>
    ❷ and prints out the next few assembly instructions ❸.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a program is paused, there are a few commands we can use to keep executing
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">continue</samp> resumes the program
    and runs until we hit another breakpoint or exit.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">finish</samp> resumes the program
    and pauses again when we return from the current function.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">stepi</samp> executes the next
    instruction, then pauses. It steps into <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    instructions, pausing at the first instruction in the callee. The command <samp
    class="SANS_TheSansMonoCd_W5Regular_11">stepi -c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp>
    steps through *n* instructions.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">nexti</samp> executes the next
    instruction, then pauses. It steps over <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    instructions, pausing at the next instruction after <samp class="SANS_TheSansMonoCd_W5Regular_11">call</samp>
    in the current function. The command <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti
    -c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp> steps
    through *n* instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Most LLDB commands have several aliases. For example, <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp>
    is a shortcut for <samp class="SANS_TheSansMonoCd_W5Regular_11">process continue</samp>,
    and it can be shortened even further to the one-letter command <samp class="SANS_TheSansMonoCd_W5Regular_11">c</samp>.
    See [Table A-2](#tabA-2) on [page 697](#pg_697) for full and abbreviated versions
    of all the commands we cover.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try out these new commands. First, we’ll execute four instructions, which
    should take us into the call to <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the command output that we’re stopped in <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> ❶. Now we’ll
    return from <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This puts us back in <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>,
    at the instruction right after <samp class="SANS_TheSansMonoCd_W5Regular_11">callq</samp>.
    Let’s continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we didn’t hit any more breakpoints, the program ran until it exited.
    To keep debugging it, we have to restart it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’re paused at the start of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    again. Once again, we’ll move forward four instructions, but this time we’ll use
    <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti</samp> to step over <samp
    class="SANS_TheSansMonoCd_W5Regular_11">f</samp> instead of stepping into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This puts us back at the instruction right after <samp class="SANS_TheSansMonoCd_W5Regular_11">callq</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Setting Breakpoints by Address</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In addition to setting breakpoints on functions, you can break on specific
    machine instructions. Let’s set a breakpoint on the instruction <samp class="SANS_TheSansMonoCd_W5Regular_11">movl
    0xdeadbeef, -4(%rbp)</samp>. First, we need to find this instruction’s address.
    Luckily, LLDB has already given us this information. The output from the last
    command should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This shows the next few instructions, including the one we want to break on.
    We can see that instruction’s memory address ❶ and the byte offset of that address
    from the start of the function ❷. The exact address may be different on your machine,
    but the offset should be the same. To set this breakpoint, type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">MEMORY_ADDRESS</samp>
    is the instruction’s address on your machine. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-a</samp>
    option indicates that we’re specifying an address rather than a function name.
    We can also use more complex expressions to specify instruction addresses. Here’s
    another way to set a breakpoint on the same instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: First, we cast <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp> to
    a function type so that LLDB can use it in address calculations. (It doesn’t matter
    which function type we cast it to.) Then, we add a 26-byte offset to get the address
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">movl</samp> instruction we
    want to break on. Since this address expression includes spaces and special characters,
    we have to wrap the whole thing in quotes.
  prefs: []
  type: TYPE_NORMAL
- en: In a minute, we’ll see how to disassemble the whole function and see every instruction’s
    address. First, let’s look at a couple of other useful commands for managing breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Managing Breakpoints</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s list all the breakpoints we’ve set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Every breakpoint has a unique number, which you can refer to if you need to
    delete, disable, or modify it. In the last section, we set breakpoints 2 and 3
    at the same location, <samp class="SANS_TheSansMonoCd_W5Regular_11">main+26</samp>.
    Let’s delete one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll look at how to display all the assembly instructions in a function,
    along with their addresses.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Displaying Assembly
    Code</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The command <samp class="SANS_TheSansMonoCd_W5Regular_11">disassemble -n</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><function name></samp>
    tells LLDB to print out all the assembly instructions in a function. Let’s try
    this out on <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">-></samp> symbol points to
    the current instruction. We can also print out a fixed number of instructions,
    starting at a specific address. Let’s disassemble five instructions, starting
    with the third instruction in <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>.
    In the disassembled code shown here, this instruction’s address is <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100003f69</samp>;
    it might have a different address on your machine. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp>
    option specifies the address where LLDB should start disassembling, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">-c</samp> specifies how many instructions
    to display, so we’ll disassemble these five instructions with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">--pc</samp>
    option to start disassembling at the current instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This command displays three instructions, starting with the current instruction.
    We can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">-c</samp> option
    when we specify a starting address with <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">--pc</samp> but not when we disassemble
    a whole function with <samp class="SANS_TheSansMonoCd_W5Regular_11">-n</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Printing Expressions</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can evaluate expressions with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">exp
    -f</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><expr></samp>,
    where:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><format></samp> is a format
    specifier that tells LLDB how to display the result of the expression.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11"><expr></samp> is an arbitrary
    expression. This expression can refer to registers, memory addresses, and symbols
    in the running program. It can also include C operations like arithmetic, pointer
    dereferencing, and cast expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try some examples. Right now, the program should be paused at the instruction
    <samp class="SANS_TheSansMonoCd_W5Regular_11">movl 0x87654321, %eax</samp>. We’ll
    step through this instruction, then print out the value of EAX in a few different
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: By default, LLDB formats the values in general-purpose registers as unsigned
    integers ❶. Here, we also display the value of EAX in hexadecimal ❷ and as a signed
    integer ❸. (For a full list of formats, use the <samp class="SANS_TheSansMonoCd_W5Regular_11">help
    format</samp> command.) The symbols <samp class="SANS_TheSansMonoCd_W5Regular_11">$0</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$1</samp>, and so on are *convenience
    variables*, which LLDB automatically generates to store the result of each expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](chapter13.xhtml) introduces the XMM registers, which hold floating-point
    values. The next instruction in our program, <samp class="SANS_TheSansMonoCd_W5Regular_11">movsd
    dbl(%rip), %xmm0</samp>, copies the value <samp class="SANS_TheSansMonoCd_W5Regular_11">3.5</samp>
    from the static <samp class="SANS_TheSansMonoCd_W5Regular_11">dbl</samp> variable
    into XMM0\. Let’s step through this instruction, then inspect XMM0\. We’ll use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">float64[]</samp> format, which
    displays the register’s contents as an array of two doubles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The first array element corresponds to the register’s lower 64 bits ❶, which
    we updated with the <samp class="SANS_TheSansMonoCd_W5Regular_11">movsd</samp>
    instruction. The second element corresponds to the register’s upper 64 bits, which
    we can ignore.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to registers, we can print out the values of objects in the symbol
    table. Let’s inspect the two static variables in this program, <samp class="SANS_TheSansMonoCd_W5Regular_11">integer</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbl</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s look at a few examples of more complex expressions. We can perform
    basic arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call functions from the current program or the standard library. Here
    we call <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp>, which returns
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also dereference pointers. Let’s execute the next instruction, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">movl 0xdeadbeef, -4(%rbp)</samp>, then
    inspect the value at <samp class="SANS_TheSansMonoCd_W5Regular_11">-4(%rbp)</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: First, we calculate the memory address we want to inspect, <samp class="SANS_TheSansMonoCd_W5Regular_11">$rbp
    - 4</samp>. Then, we cast this address to the correct pointer type, <samp class="SANS_TheSansMonoCd_W5Regular_11">(int
    *)</samp>. Finally, we dereference it with the dereference operator, <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>.
    This produces an integer, which we print out in hexadecimal with the option <samp
    class="SANS_TheSansMonoCd_W5Regular_11">-f x</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at a more flexible way to inspect values in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Examining Memory</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can examine memory with the <samp class="SANS_TheSansMonoCd_W5Regular_11">memory
    read</samp> command. Like <samp class="SANS_TheSansMonoCd_W5Regular_11">exp</samp>,
    it takes an arbitrary expression, which must evaluate to a valid memory address.
    This gives us another way to inspect the integer at <samp class="SANS_TheSansMonoCd_W5Regular_11">-4(%rbp)</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-f x</samp> option says to
    print the output in hexadecimal; <samp class="SANS_TheSansMonoCd_W5Regular_11">-s
    4</samp> says to interpret the contents of memory as a sequence of 4-byte values;
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">-c 1</samp> says to print just
    one of those values. In other words, this command prints out the single 4-byte
    integer at <samp class="SANS_TheSansMonoCd_W5Regular_11">$rbp - 4</samp>, formatted
    as hexadecimal. We have to wrap the expression <samp class="SANS_TheSansMonoCd_W5Regular_11">$rbp
    - 4</samp> in quotes because it contains spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next three instructions in [Listing A-1](#listA-1) store three more integers
    on the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s step through these instructions, then print out the whole stack frame.
    We’ll tell LLDB to print out six 4-byte words, starting at the address in RSP.
    We’ll use the option <samp class="SANS_TheSansMonoCd_W5Regular_11">-l 1</samp>
    to print out each word on a separate line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: We print out six words because the stack is 24 bytes in this particular function.
    At the start of <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>, we
    saved the old value of RBP onto the stack. That’s 8 bytes. Then, we allocated
    another 16 bytes with the command <samp class="SANS_TheSansMonoCd_W5Regular_11">subq
    $16, %rsp</samp>. Keep in mind that RSP always holds the address of the top of
    the stack, which is the *lowest* stack address.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command shows us the four integers we saved to the stack, with <samp class="SANS_TheSansMonoCd_W5Regular_11">0xfeedface</samp>
    at the top ❶ and the old value of RBP at the bottom ❷. Since the value at ❷ is
    really an 8-byte address, we can read it more easily if we group the stack into
    8-byte values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Now it’s clear that the bottom 8 bytes on the stack hold a single memory address
    ❶.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just below the saved value of RBP, on top of the caller’s stack frame, we’d
    expect to find the caller’s return address—that is, the address we’ll jump to
    when we return from <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>.
    (We cover this in detail when we implement function calls in [Chapter 9](chapter9.xhtml).)
    Let’s inspect this address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This command is almost identical to the previous one, except that we use the
    option <samp class="SANS_TheSansMonoCd_W5Regular_11">-c 4</samp> to print out
    four values instead of three and the option <samp class="SANS_TheSansMonoCd_W5Regular_11">-f
    A</samp> to format each value as a memory address. The <samp class="SANS_TheSansMonoCd_W5Regular_11">A</samp>
    format specifier tells LLDB to print each address in hexadecimal and, if possible,
    print out its offset from the nearest symbol in the program. Because function
    and static variable names are defined in the symbol table, LLDB can display the
    relative offsets of assembly instructions and static data. It won’t display relative
    offsets of stack addresses, heap addresses, or invalid addresses, because they
    would be completely meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: The first three lines of output are the same as before. The first two values
    aren’t valid memory addresses and the third is a stack address, so LLDB can’t
    display their offsets from symbols. The next value on the stack is the return
    address ❶. The label <samp class="SANS_TheSansMonoCd_W5Regular_11">dyld`start</samp>
    tells us this is the address of an instruction in the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    function in the <samp class="SANS_TheSansMonoCd_W5Regular_11">dyld</samp> shared
    library. (The <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp> function
    is responsible for calling <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    and cleaning up after it exits; <samp class="SANS_TheSansMonoCd_W5Regular_11">dyld</samp>
    is the dynamic linker.)
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-f A</samp> option makes it
    easy to spot return addresses and pointers to static variables. This is particularly
    useful if your program’s stack frame is corrupted; finding each stack frame’s
    return address can help you get your bearings.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Setting Conditional
    Breakpoints</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To wrap up this walk-through, we’ll look at how to set *conditional breakpoints*.
    The program will pause at a conditional breakpoint only if the associated condition
    is true. This condition can be an arbitrary expression; LLDB will consider it
    false if it evaluates to 0 and true otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set a breakpoint on the <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp>
    instruction at the end of the last loop iteration in <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger</samp>.
    First, we’ll find this instruction’s address in the disassembled <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the address of <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100003fa6</samp> ❶. Now we’ll
    set a conditional breakpoint to pause on the <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp>
    instruction if ECX is 0\. We can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">-c</samp>
    option to specify a condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this loop repeats until ECX is 0, the condition <samp class="SANS_TheSansMonoCd_W5Regular_11">$ecx</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    will be true only on the last iteration. Let’s continue until the breakpoint,
    then verify that this condition is true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get a different value for ECX, check whether you set the breakpoint
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that your breakpoint includes the condition <samp class="SANS_TheSansMonoCd_W5Regular_11">$ecx</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    ❶ and that it’s at the location <samp class="SANS_TheSansMonoCd_W5Regular_11">hello_debugger`main</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">65</samp>
    ❷. If your breakpoint looks different, you might have mistyped something; delete
    it and try again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should be on the last loop iteration, so let’s step forward one instruction
    and make sure that the jump isn’t taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Usually, <samp class="SANS_TheSansMonoCd_W5Regular_11">jne</samp> will jump
    back to the start of the loop, but on the last iteration it moves forward to the
    next instruction.
  prefs: []
  type: TYPE_NORMAL
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Getting Help</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the commands and options we didn’t cover here, see the
    LLDB documentation at *[https://<wbr>lldb<wbr>.llvm<wbr>.org<wbr>/index<wbr>.html](https://lldb.llvm.org/index.html)*.
    You can also type <samp class="SANS_TheSansMonoCd_W5Regular_11">help</samp> at
    the prompt to learn more about any LLDB command. For example, to see the documentation
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">run</samp> command, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[Table A-2](#tabA-2) summarizes the commands and options we covered. The version
    of each command that we used in the walk-through is listed first, followed by
    a shorter abbreviation (except for <samp class="SANS_TheSansMonoCd_W5Regular_11">exp</samp>,
    which isn’t normally shortened further), then the full form when it differs from
    the one we used. All versions of each command take the same arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table A-2:</samp> <samp class="SANS_Futura_Std_Book_11">A
    Summary of LLDB Commands</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Command</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">run</samp> | <samp class="SANS_Futura_Std_Book_11">Start
    the program.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">r</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">process launch --</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp> | <samp class="SANS_Futura_Std_Book_11">Resume
    the program.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">c</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">process continue</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">finish</samp> | <samp class="SANS_Futura_Std_Book_11">Resume
    the program and continue until the current function exits.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">fin</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">thread step-out</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">stepi [-c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Execute
    one instruction (or</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">n</samp>
    <samp class="SANS_Futura_Std_Book_11">instructions), stepping into function calls.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">si</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">thread step-inst</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">nexti [-c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><n></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Execute
    one instruction (or</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">n</samp>
    <samp class="SANS_Futura_Std_Book_11">instructions), stepping over function calls.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ni</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">thread step-inst-over</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">break set [-n</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><fun></samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">&#124;
    -a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">[-c</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cond></samp><samp class="SANS_Futura_Std_Book_11">]</samp>
    | <samp class="SANS_Futura_Std_Book_11">Set a breakpoint at start of function</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><fun></samp> <samp class="SANS_Futura_Std_Book_11">or
    at address</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp>
    <samp class="SANS_Futura_Std_Book_11">(conditional on</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cond></samp><samp
    class="SANS_Futura_Std_Book_11">, if provided).</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">br s</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">breakpoint set</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">break list</samp> | <samp class="SANS_Futura_Std_Book_11">List
    all breakpoints.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">br l</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">breakpoint list</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">break delete [</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><id></samp><samp class="SANS_Futura_Std_Book_11">]</samp>
    | <samp class="SANS_Futura_Std_Book_11">Delete all breakpoints (or the breakpoint
    specified by</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><id></samp><samp
    class="SANS_Futura_Std_Book_11">).</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">br del</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">breakpoint delete</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">exp -f</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><expr></samp>
    | <samp class="SANS_Futura_Std_Book_11">Evaluate</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><expr></samp>
    <samp class="SANS_Futura_Std_Book_11">and display the result in format</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp><samp class="SANS_Futura_Std_Book_11">.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">expression</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">memory read -f</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><size></samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-c</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-l</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><num-per-line> <addr></samp>
    | <samp class="SANS_Futura_Std_Book_11">Print out memory in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp>
    <samp class="SANS_Futura_Std_Book_11">chunks of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><size></samp>
    <samp class="SANS_Futura_Std_Book_11">bytes, starting at address</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp><samp class="SANS_Futura_Std_Book_11">.
    Display</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><num</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">-per-line></samp> <samp
    class="SANS_Futura_Std_Book_11">chunks on each line in format</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><format></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">me read</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">disassemble [-n</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><fun></samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">&#124;
    -s</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">&#124; --pc -c</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp><samp
    class="SANS_Futura_Std_Book_11">]</samp> | <samp class="SANS_Futura_Std_Book_11">Disassemble
    all instructions in function</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><fun></samp><samp
    class="SANS_Futura_Std_Book_11">, or</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp>
    <samp class="SANS_Futura_Std_Book_11">instructions starting at address</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><addr></samp><samp class="SANS_Futura_Std_Book_11">,
    or</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><count></samp>
    <samp class="SANS_Futura_Std_Book_11">instructions starting at the current instruction.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">di</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">help</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cmd></samp>
    | <samp class="SANS_Futura_Std_Book_11">Display help text about</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11"><cmd></samp><samp
    class="SANS_Futura_Std_Book_11">.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">h</samp> |'
  prefs: []
  type: TYPE_TB
- en: Now you’re ready to start debugging with LLDB!
  prefs: []
  type: TYPE_NORMAL
