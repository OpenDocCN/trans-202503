["```\nPS> **$buf = New-LsaSecurityBuffer -Type Data -Byte @(0, 1, 2, 3)** \n```", "```\nPS> **$buf = New-LsaSecurityBuffer -Type Data -Size 1000** \n```", "```\nPS> **$buf = New-LsaSecurityBuffer -Type Data -Byte @(0, 1, 2, 3) -ReadOnly** \n```", "```\n❶ PS> **$in_buf = New-LsaSecurityBuffer -Type PkgParams -String \"AuthParam\"**\n❷ PS> **$out_buf = New-LsaSecurityBuffer -Type Data -Size 100**\n❸ PS> **Update-LsaClientContext -Client $client -Token $token -InputBuffer $in_buf**\n**-OutputBuffer $out_buf**\nPS> **$out_buf.Type**\nExtra\n\nPS> **ConvertFrom-LsaSecurityBuffer $out_buf | Out-HexDump**\n00 11 22 33 \n```", "```\nPS> **$header = New-LsaSecurityBuffer -Type Data -Byte @(0, 1, 3, 4)**\n**-ReadOnlyWithChecksum**\nPS> **$data = New-LsaSecurityBuffer -Type Data -String \"HELLO\"**\nPS> **$sig = Protect-LsaContextMessage -Context $client -Buffer $header, $data**\nPS> **ConvertFrom-LsaSecurityBuffer -Buffer $header | Out-HexDump**\n00 01 03 04\n\nPS> **ConvertFrom-LsaSecurityBuffer -Buffer $data | Out-HexDump**\nD5 05 4F 40 22 5A 9F F9 49 66\n\nPS> **Unprotect-LsaContextMessage -Context $server -Buffer $header, $data**\n**-Signature $sig**\nPS> **ConvertFrom-LsaSecurityBuffer -Buffer $data -AsString**\nHELLO \n```", "```\n❶ PS> **$credout = New-LsaCredentialHandle -Package \"Negotiate\" -UseFlag Outbound**\nPS> **$client = New-LsaClientContext -CredHandle $credout**\nPS> **Format-LsaAuthToken -Token $client.Token**\n❷ <SPNEGO Init>\n❸ Mechanism List    :\n1.3.6.1.4.1.311.2.2.10         - NTLM\n1.2.840.48018.1.2.2            - Microsoft Kerberos\n1.2.840.113554.1.2.2           - Kerberos\n1.3.6.1.4.1.311.2.2.30         - Microsoft Negotiate Extended\n❹ <SPNEGO Token>\n<NTLM NEGOTIATE>\nFlags: Unicode, Oem, RequestTarget, Signing, LMKey, NTLM,...\nDomain: MINERAL\nWorkstation: GRAPHITE\nVersion: 10.0.18362.15\n</SPNEGO Token> \n```", "```\nPS> **$credin = New-LsaCredentialHandle -Package \"Negotiate\" -UseFlag Inbound**\nPS> **$server = New-LsaServerContext -CredHandle $credin**\nPS> **Update-LsaServerContext -Server $server -Token $client.Token**\nPS> **Format-LsaAuthToken -Token $server.Token**\n<SPNEGO Response>\nSupported Mech    : 1.3.6.1.4.1.311.2.2.10 - NTLM\nState             : Incomplete\n<SPNEGO Token>\n<NTLM CHALLENGE>\nFlags     : Unicode, RequestTarget, Signing, NTLM, LocalCall, AlwaysSign,...\n`--snip--` \n```", "```\nPS> **Update-LsaClientContext -Client $client -Token $server.Token**\nPS> **Format-LsaAuthToken -Token $client.Token**\n<SPNEGO Response>\nState             : Incomplete\n<SPNEGO Token>\n❶ <NTLM AUTHENTICATE>\nFlags      : Unicode, RequestTarget, Signing, NTLM, LocalCall, AlwaysSign,...\n`--snip--`\n\nPS> **Update-LsaServerContext -Server $server -Token $client.Token**\nPS> **Format-LsaAuthToken -Token $server.Token**\n<SPNEGO Response>\n❷ State            : Completed\n\n❸ PS> **Update-LsaClientContext -Client $client -Token $server.Token**\nPS> **$client.PackageName**\nNTLM \n```", "```\nPS> **$credout = New-LsaCredentialHandle -Package \"Schannel\" -UseFlag Outbound**\nPS> **$name = \"NotReallyReal.com\"**\nPS> **$client = New-LsaClientContext -CredHandle $credout -Target $name**\n**-RequestAttribute ManualCredValidation**\nPS> **Format-LsaAuthToken -Token $client.Token**\nSChannel Record 0\nType   : Handshake\nVersion: 3.3\nData    :\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 01 00 00 AA 03 03 60 35 C2 44 30 A9 CE C7 8B 81  - ......`5.D0.....\n00000010: EB 67 EC F3 9A E3 FD 71 05 70 6C BB 92 19 31 C9  - .g.....q.pl...1.\n`--snip--` \n```", "```\nPS> **$store = \"Cert:\\CurrentUser\\My\"**\n❶ PS> **$cert = Get-ChildItem $store | Where-Object Subject -Match $name**\nPS> **if ($null -eq $cert) {**\n❷     **$cert = New-SelfSignedCertificate -DnsName $name -CertStoreLocation $store**\n**}**\n❸ PS> **$server_cred = Get-LsaSchannelCredential -Certificate $cert**\nPS> **$credin = New-LsaCredentialHandle -Package \"Schannel\" -UseFlag Inbound**\n**-Credential $server_cred**\nPS> **$server = New-LsaServerContext -CredHandle $credin**\n❹ PS> **while(!(Test-LsaContext $client) -and !(Test-LsaContext $server)) {**\n    **Update-LsaServerContext -Server $server -Client $client**\n    **Update-LsaClientContext -Client $client -Server $server**\n**}** \n```", "```\nPS> **$client.ConnectionInfo**\nProtocol      Cipher  Hash    Exchange\n--------      ------  ----    --------\nTLS1_2_CLIENT AES_256 SHA_384 ECDH_EPHEM\n\nPS> **$client.RemoteCertificate**\nThumbprint                                Subject\n----------                                -------\n2AB144A50D93FE86BA45C4A1F17046459D175176  CN=NotReallyReal.com\n\nPS> **$server.ConnectionInfo**\nProtocol      Cipher  Hash    Exchange\n--------      ------  ----    --------\nTLS1_2_SERVER AES_256 SHA_384 ECDH_EPHEM \n```", "```\n❶ PS> **$header = New-LsaSecurityBuffer -Type StreamHeader**\n**-Size $client.StreamHeaderSize**\nPS> **$data = New-LsaSecurityBuffer -Type Data -Byte 0, 1, 2, 3**\nPS> **$trailer = New-LsaSecurityBuffer -Type StreamTrailer**\n**-Size $client.StreamTrailerSize**\nPS> **$empty = New-LsaSecurityBuffer -Empty**\nPS> **$bufs = $header, $data, $trailer, $empty**\n❷ PS> **Protect-LsaContextMessage -Context $client -Buffer $bufs -NoSignature**\n❸ PS> **$msg = $header, $data, $trailer | ConvertFrom-LsaSecurityBuffer**\nPS> **$msg_token = Get-LsaAuthToken -Context $client -Token $msg**\nPS> **Format-LsaAuthToken $msg_token**\nSChannel Record 0\n❹ Type    : ApplicationData\nVersion : 3.3\nData    :\n          00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  - 0123456789ABCDEF\n-----------------------------------------------------------------------------\n00000000: 00 00 00 00 00 00 00 01 C7 3F 1B B9 3A 5E 40 7E  - .........?..:^@~\n00000010: B0 6C 39 6F EC DA E7 CC CC 33 C2 95              - .l9o.....3..\n\n❺ PS> **$header = New-LsaSecurityBuffer -Type Data -Byte $msg**\nPS> **$data = New-LsaSecurityBuffer -Empty**\nPS> **$trailer = New-LsaSecurityBuffer -Empty**\nPS> **$empty = New-LsaSecurityBuffer -Empty**\nPS> **$bufs = $header, $data, $trailer, $empty**\n❻ PS> **Unprotect-LsaContextMessage -Context $server -Buffer $bufs -NoSignature**\nPS> **ConvertFrom-LsaSecurityBuffer $data | Out-HexDump**\n00 01 02 03 \n```", "```\nPS> **mstsc.exe /remoteGuard** \n```", "```\nPS> **Mstsc.exe /RestrictedAdmin** \n```", "```\nPS> **Get-Win32Credential \"TERMSRV/primarydc.domain.local\" DomainPassword |**\n**Format-Table UserName, Password**\nUserName                 Password\n--------                 --------\nMINERAL\\Administrator \n```", "```\nPS> **ls \"$env:LOCALAPPDATA\\Microsoft\\Credentials\" -Hidden**\n    Directory: C:\\Users\\alice\\AppData\\Local\\Microsoft\\Credentials\nMode    LastWriteTime         Length Name\n----    -------------        ------ ----\n-a-hs-  5/17      10:15 PM    4076   806C9533269FB8C19A759596441A2ECF\n-a-hs-  5/17       9:49 PM    420    B5E4F2A09B2613B8305BA6A43DC15D1F\n-a-hs-  5/6        6:33 PM    11396  DFBE70A7E5CC19A398EBF1B96859CE5D\n-a-hs-  5/17       3:56 PM    1124   E05DBE15D38053457F3523A375594044 \n```", "```\nPS> **Add-Type -AssemblyName \"System.Security\"**\nPS> **ls \"$env:LOCALAPPDATA\\Microsoft\\Credentials\" -h | ForEach-Object {**\n **$ba = Get-Content -Path $_.FullName -Encoding Byte**\n **[Security.Cryptography.ProtectedData]::Unprotect($ba,$null,\"CurrentUser\")**\n**}**\nException calling \"Unprotect\" with \"3\" argument(s): \"The data is invalid.\"\n`--snip--` \n```", "```\nPS> **Enable-NtTokenPrivilege SeDebugPrivilege**\n❶ PS> **$token = Use-NtObject($ps = Get-NtProcess -Name \"winlogon.exe\"**\n**-Access QueryLimitedInformation) {**\n **$p = $ps | Select-Object -First 1**\n **Get-NtToken -Process $p -Duplicate**\n**}**\n❷ PS> **$user_token = Get-NtToken**\nPS> **$ba = Invoke-NtToken -Token $token {**\n❸ **Enable-NtTokenPrivilege SeTrustedCredmanAccessPrivilege**\n **Backup-Win32Credential -Token $user_token**\n**}**\n❹ PS> **Select-BinaryString -Byte $ba -Type Unicode |**\n**Select-String \"^Domain:\" -Context 0, 2**\n> Domain:target=TERMSRV/primarydc.mineral.local\nMINERAL\\Administrator\nPassw0rd10 \n```", "```\nPS> **$client = New-LsaClientContext -CredHandle $credout**\n**-RequestAttribute NullSession** \n```", "```\n<NTLM AUTHENTICATE>\n❶ Flags: Unicode, RequestTarget, NTLM, Anonymous,...\nWorkstation: GRAPHITE\n❷ LM Response: 00\nNT Response:\nVersion: 10.0.18362.15\nMIC        : 3780F9F6EC815DD34BA8A643162DC5FC\n\nPS> **Format-NtToken -Token $token**\n❸ NT AUTHORITY\\ANONYMOUS LOGON \n```", "```\n<KerberosV5 KRB_AP_REQ>\nOptions: None\n<Ticket>\nTicket Version  : 0\nServerName      : UNKNOWN -\nRealm           :\nEncryption Type : NULL\nKey Version    : 0\nCipher Text     :\n00000000: 00\n<Authenticator>\nEncryption Type : NULL\nKey Version: 0\nCipher Text:\n00000000: 00 \n```", "```\nPS> **$client = New-LsaClientContext -CredHandle $credout -RequestAttribute Identify** \n```", "```\n<NTLM AUTHENTICATE>\n❶ Flags      : Unicode, RequestTarget, NTLM, Identity,...\n`--snip--`\n\nPS> **Format-NtToken -Token $token -Information**\nTOKEN INFORMATION\n-----------------\nType       : Impersonation\n❷ Imp Level  : Identification \n```", "```\n<Authenticator>\n`--snip--`\nChecksum        : GSSAPI\nChannel Binding : 00000000000000000000000000000000\nContext Flags   : Identity \n```", "```\nPS> **$cred = New-LsaCredentialHandle -Package \"Negotiate\" -UseFlag Outbound**\nPS> **$sid = Get-NtSid -PackageName \"network_auth_test\"**\n❶ PS> **Use-NtObject($token = Get-NtToken -LowBox -PackageSid $sid) {**\n    **Invoke-NtToken $token {New-LsaClientContext -CredHandle $cred}**\n**}**\n❷ Exception calling \".ctor\" with \"5\" argument(s): \"(0x80090304) - The Local\nSecurity Authority cannot be contacted\"\n\nPS> **$cap = Get-NtSid -KnownSid CapabilityEnterpriseAuthentication**\n❸ PS> **Use-NtObject($token = Get-NtToken -LowBox -PackageSid $sid**\n**-CapabilitySid $cap) {**\n  ❹ **$auth = Invoke-NtToken $token {New-LsaClientContext -CredHandle $cred}**\n    **Format-LsaAuthToken $auth**\n**}**\n<SPNEGO Init>\nMechanism List    :\n1.3.6.1.4.1.311.2.2.10         - NTLM\n1.2.840.48018.1.2.2            - Microsoft Kerberos\n`--snip--` \n```", "```\nPS> **$cred = New-LsaCredentialHandle -Package \"NTLM\" -UseFlag Outbound**\n❶ PS> **$client = New-Object System.Net.WebClient**\nPS> **$proxy = $client.Proxy.GetProxy(\"http://www.microsoft.com\").Authority**\n❷ PS> **$target = \"HTTP/$proxy\"**\nPS> **$target | Write-Output**\nHTTP/192.168.0.10:1234\n\nPS> **$sid = Get-NtSid -PackageName \"network_auth_test\"**\n❸ PS> **Use-NtObject($token = Get-NtToken -LowBox -PackageSid $sid) {**\n  ❹ **$client = Invoke-NtToken $token {**\n        **New-LsaClientContext -CredHandle $cred -Target $target**\n    **}**\n    **Format-LsaAuthToken $client**\n**}**\n<NTLM NEGOTIATE>\nFlags: Unicode, Oem, RequestTarget, NTLM, AlwaysSign,... \n```", "```\nPS> **$cred = New-LsaCredentialHandle -Package \"Negotiate\" -UseFlag Outbound**\n**-ReadCredential**\nUserName: **user**\nDomain: **GRAPHITE**\nPassword: ************\n\nPS> **$sid = Get-NtSid -PackageName \"network_auth_test\"**\nPS> **Use-NtObject($token = Get-NtToken -LowBox -PackageSid $sid) {**\n **Invoke-NtToken $token {**\n❶ **$c = New-LsaClientContext -CredHandle $cred -Target \"CIFS/localhost\"**\n **Format-LsaAuthToken $c**\n **}**\n**}**\n<NTLM NEGOTIATE>\nFlags: Unicode, Oem, RequestTarget, NTLM, AlwaysSign,... \n```", "```\nPS> **Get-WinEvent -FilterHashtable @{logname='Security';id=@(4624)} |**\n**Select-Object -ExpandProperty Message**\nAn account was successfully logged on.\n\nSubject:\n        Security ID:            S-1-5-18\n        Account Name:           GRAPHITE$\n        Account Domain:         MINERAL\n        Logon ID:               0x3E7\n\nLogon Information:\n        Logon Type:             2\n        Restricted Admin Mode:  No\n        Virtual Account:        No\n        Elevated Token:         Yes\n\nImpersonation Level:            Impersonation\n\nNew Logon:\n        Security ID:            S-1-5-21-1195776225-522706947-2538775957-1110\n        Account Name:           alice\n        Account Domain:         MINERAL\n        Logon ID:              0x15CB183\n        Linked Logon ID:        0x15CB1B6\n        Network Account Name:   -\n        Network Account Domain: -\n        Logon GUID:             {d406e311-85e0-3932-dff5-99bf5d834535}\n\nProcess Information:\n        Process ID:             0x630\n        Process Name:           C:\\Windows\\System32\\winlogon.exe\n\nNetwork Information:\n        Workstation Name:       GRAPHITE\n        Source Network Address: 127.0.0.1\n        Source Port:            0\n\nDetailed Authentication Information:\n        Logon Process:            User32\n        Authentication Package:   Negotiate\n        Transited Services:       -\n        Package Name (NTLM only): -\n        Key Length:               0 \n```", "```\nDetailed Authentication Information:\n  Logon Process:             NtLmSsp\n  Authentication Package:    NTLM\n  Transited Services:        -\n  Package Name (NTLM only):  NTLM V2\n  Key Length:                128 \n```", "```\nPS> **Get-WinEvent -FilterHashtable @{logname='Security';id=@(4625)} |**\n**Select-Object -ExpandProperty Message**\nAn account failed to log on.\n`--snip--`\nAccount For Which Logon Failed:\n    Security ID:        S-1-0-0\n    Account Name:       alice\n    Account Domain:     MINERAL\n\nFailure Information:\n    Failure Reason:     Unknown user name or bad password.\n    Status:             0xC000006D\n    Sub Status:         0xC000006A\n`--snip--` \n```", "```\nPS> **Get-WinEvent -FilterHashtable @{logname='Security';id=@(4634)} |**\n**Select-Object -ExpandProperty Message**\nAn account was logged off.\n\nSubject:\n    Security ID:    S-1-5-21-1195776225-522706947-2538775957-1110\n    Account Name:   alice\n    Account Domain: MINERAL\n    Logon ID:       0x15CB183\n\nLogon Type:        2 \n```", "```\nPS> **$record = Get-WinEvent -FilterHashtable @{logname='Security';id=@(4634)} | Select -First 1**\nPS> **$record.Properties**\nValue\n-----\nS-1-5-21-1195776225-522706947-2538775957-1110\nalice\nMINERAL\n`--snip--` \n```", "```\nPS> **function Get-EventLogProperty {**\n    **[CmdletBinding()]**\n    **param(**\n        **[parameter(Mandatory, Position = 0, ValueFromPipeLine)]**\n        **[System.Diagnostics.Eventing.Reader.EventRecord]$Record**\n    **)**\n\n    **PROCESS {**\n      ❶ **$xml = [xml]$Record.ToXml()**\n        **$ht = @{**\n            **TimeCreated = $Record.TimeCreated**\n            **Id = $Record.Id**\n        **}**\n❷ **foreach($ent in $xml.Event.EventData.data) {**\n **$ht.Add($ent.Name, $ent.\"#text\")**\n **}**\n **[PSCustomObject]$ht**\n **}**\n**}**\nPS> **Get-EventLogProperty $record**\nSubjectUserName: alice\nTimeCreated: 2/24 1:15:06 PM\nIpPort                    : -\nSubjectLogonId            : 0x54541\nKeyLength                 : 0\nLogonProcessName          : Advapi\nIpAddress                 : -\nLmPackageName             : -\nTransmittedServices       : -\nWorkstationName           : GRAPHITE\nSubjectUserSid            : S-1-5-21-1195776225-522706947-2538775957-1110\n❸SubStatus                 : 0xc000006a\nAuthenticationPackageName : Negotiate\nSubjectDomainName         : MINERAL\nProcessName               : C:\\ProgramFiles\\PowerShell\\7\\pwsh.exe\n❹FailureReason             : %%2313\nLogonType                 : 3\nId                        : 4625\nStatus                    : 0xc000006d\nTargetUserSid             : S-1-0-0\nTargetDomainName          : mineral.local\nProcessId                 : 0xe48\nTargetUserName            : alice \n```", "```\n❶ PS> **function Get-AuthFailureStatus {**\n    **[CmdletBinding()]**\n    **param(**\n        **[parameter(Mandatory, Position = 0, ValueFromPipeLine)]**\n        **$Record**\n    **)**\n\n    **PROCESS {**\n        **[PSCustomObject]@{**\n            **TimeCreated = $Record.TimeCreated**\n            **UserName = $Record.TargetUserName**\n            **DomainName = $Record.TargetDomainName**\n          ❷ **SubStatus = (Get-NtStatus -Status $Record.SubStatus).StatusName**\n        **}**\n    **}**\n**}**\n\n❸ PS> **Get-NtToken -Logon -User $env:USERNAME -Domain $env:USERDOMAIN**\n**-Password \"InvalidPassword\"**\nPS> **Get-NtToken -Logon -User \"NotARealUser\" -Domain $env:USERDOMAIN -Password \"pwd\"**\n❹ PS> **Get-WinEvent -FilterHashtable @{logname='Security';id=@(4625)} |**\n**Select-Object -First 2 | Get-EventLogProperty | Get-AuthFailureStatus**\nTimeCreated           UserName      DomainName  SubStatus\n-----------           --------      ----------  ---------\n2/24     1:15:06 PM  alice         MINERAL     STATUS_WRONG_PASSWORD\n2/24/     1:14:45 PM  NotARealUser  MINERAL     STATUS_NO_SUCH_USER \n```", "```\n❶ param(\n    [Parameter(Mandatory, Position = 0)]\n    [string]$Hostname,\n    [int]$Port = 443\n)\n\n$ErrorActionPreference = \"Stop\"\n\n❷ function Get-SocketClient {\n    param(\n        [Parameter(Mandatory)]\n        $Socket\n    )\n\n    $Socket.ReceiveTimeout = 1000\n    $Socket.Client.NoDelay = $true\n    $stream = $Socket.GetStream()\n    return @{\n        Reader = [System.IO.BinaryReader]::new($stream)\n        Writer = [System.IO.BinaryWriter]::new($stream)\n    }\n}\n\n❸ function Read-TlsRecordToken {\n    param(\n        [Parameter(Mandatory)]\n        $Client\n    )\n    $reader = $Client.Reader\n    $header = $reader.ReadBytes(5)\n    $length = ([int]$header[3] -shl 8) -bor ($header[4])\n    $data = @()\n  ❹ while($length -gt 0) {\n        $next = $reader.ReadBytes($length)\n        if ($next.Length -eq 0) {\n            throw \"End of stream.\"\n        }\n        $data += $next\n        $length -= $next.Length\n    }\n\n    Get-LsaAuthToken -Token ($header+$data)\n}\n\n❺ Use-NtObject($socket = [System.Net.Sockets.TcpClient]::new($Hostname, 443)) {\n    $tcp_client = Get-SocketClient $socket\n\n  ❻ $credout = New-LsaCredentialHandle -Package \"Schannel\" -UseFlag Outbound\n    $client = New-LsaClientContext -CredHandle $credout -Target $Hostname\n-RequestAttribute ManualCredValidation\n\n  ❼ while(!(Test-LsaContext -Context $client)) {\n      ❽ if ($client.Token.Length -gt 0) {\n            $tcp_client.Writer.Write($client.Token.ToArray())\n        }\n\n      ❾ $record = Read-TlsRecordToken -Client $tcp_client\n        Update-LsaClientContext -Client $client -Token $record\n    }\n\n  ❿ $client.RemoteCertificate\n} \n```", "```\nPS> **$cert = .\\get_server_cert.ps1 -Hostname www.microsoft.com**\nPS> **$cert**\nThumbprint                                Subject\n----------                                -------\n9B2B8AE65169AA477C5783D6480F296EF48CF14D  CN=www.microsoft.com,...\n\nPS> **$cert | Export-Certificate -FilePath output.cer**\n    Directory: C:\\demo\nMode               LastWriteTime           Length Name\n----               -------------           ------ ----\n-a----             02-21   17:10           2173   output.cer \n```"]