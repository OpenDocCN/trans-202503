- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications
  prefs: []
  type: TYPE_NORMAL
- en: The Mobile Application Ecosystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The millions of applications available to Android users are critical in maintaining
    the platform’s relevance. Apps are, after all, where users spend most of their
    time on their smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: If someone came out with a new device or platform now without having any kind
    of application store to go along with it (much less a densely populated store),
    it simply wouldn’t work. When RIM introduced BlackBerry 10, their final operating
    system for smartphones,^([1](#c19-footnote-1)) they added a compatibility mode
    that allowed users to install and run Android applications. They did this in recognition
    of the fact that the BlackBerry application ecosystem (even though the company
    and its phones had been around for many years) could not offer the breadth and
    variety of applications available on the app stores for Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: But even with a vast market of apps available, there still has to be some core
    set of apps that come with the platform, especially from companies like Google
    and Apple, that allow users to access the services and functionality they expect
    from those companies.
  prefs: []
  type: TYPE_NORMAL
- en: When Android was new, there *was* no ecosystem of other apps. So the Android
    team built the core set of apps that would ship with the device and provide compelling
    functionality for users.
  prefs: []
  type: TYPE_NORMAL
- en: Today, these Google apps (Gmail, Maps, Search, YouTube, and many others) are
    developed by the teams that own those products. So rather than a team in Android
    writing the YouTube app, the YouTube division writes the core YouTube services
    and infrastructure, and the web app, and the Android app, and any other client
    applications that tie into the larger product.
  prefs: []
  type: TYPE_NORMAL
- en: But in the early days, none of the other product teams were able to do this
    work. These other groups all had enough work to do and didn’t have time to work
    on developing an application for this new and unproven platform. Also, Android’s
    platform and APIs were changing constantly, all the way up to the 1.0 launch.
    Why would an established product take on the work and headache of writing an app^([2](#c19-footnote-2))
    when they’d just have to keep re-tooling it as the APIs changed out from under
    it?
  prefs: []
  type: TYPE_NORMAL
- en: So engineers on the Android team took on the job of writing these initial versions
    of the core applications. These were individuals, not teams, because it was rarely
    the case that more than one to two people worked on any of these initial applications
    (the same applications which are now maintained and developed by much larger teams).
    For example, the initial Gmail client for Android was written primarily by Cédric
    Beust, with some performance assistance from Mike Cleron.
  prefs: []
  type: TYPE_NORMAL
- en: Cédric Beust and Gmail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I knew we were onto something the very first time we were able to get a push
    notification.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Cédric Beust
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Gmail for Android had its roots in versions for other platforms because of
    its main author: Cédric Beust.'
  prefs: []
  type: TYPE_NORMAL
- en: In 2004, Cédric joined Google and ended up (as many new engineers with server-side
    experience did) working in the ads group. After a year, he was looking for something
    new to do and found a small team working on mobile technology. This group worked
    on making Google apps and services functional on the various mobile devices of
    that era. Cédric joined the team and started the Gmail effort. He eventually grew
    and led a team of about twenty people who developed the J2ME Gmail application.
  prefs: []
  type: TYPE_NORMAL
- en: In those days, there was no pervasive mobile “platform” like the two that exist
    today (iOS and Android). Instead, there were many vendor-specific platforms that
    covered specific segments of the market, like Microsoft’s Windows CE and RIM’s
    BlackBerry OS. There was also J2ME, which purported to run across a wide variety
    of devices, using the same language (Java) and some variation of the J2ME libraries.
    So a company trying to target a wide variety of devices across the ecosystem found
    the concept of J2ME very enticing. But the realities of J2ME were . . . difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Cédric said, “We started looking at how we could do Gmail on J2ME. It was quickly
    obvious to us that it was a terrible idea. It was everywhere . . . but every single
    vendor, and even the same model, had different versions of J2ME. They all had
    different restrictions. They didn’t all implement the same profiles. Some had
    Bluetooth, others did not. There was no constraint, no compliance or anything
    like that. Any phone could claim to be J2ME-compliant and didn’t support half
    of the things we needed. So we were in a world of hurt.”
  prefs: []
  type: TYPE_NORMAL
- en: But Cédric’s team was eventually able to ship a version of Gmail that was true
    to the core experience of Gmail on the web, running on these much smaller and
    more limited devices. “We shipped Gmail on J2ME on about 300 different devices,
    with a pretty good UI. Some devices caused a lot more trouble than others, but
    overall we pulled it off.”^([3](#c19-footnote-3))
  prefs: []
  type: TYPE_NORMAL
- en: Some time after Android was acquired by Google, Andy Rubin contacted Cédric.
    As the lead of the mobile Gmail team, Cédric was a likely person to help write
    Gmail for the nascent Android platform. He was already interested, but when Andy
    described the dynamics of the project, he was sold. Andy’s team was a collection
    of low-level kernel experts, many of whom had experience shipping constrained
    mobile devices.^([4](#c19-footnote-4)) They were creating a platform based on
    the Java programming language (of which Cédric was a fan and an expert), and they
    needed expertise for writing applications. “Hearing that these guys were open-minded
    and that we need to write it in Java was even more interesting and appealing to
    me.”
  prefs: []
  type: TYPE_NORMAL
- en: Cédric, like many of the early engineers on Android, came with related experience
    and opinions, and a strong desire to do it right on Android. “I knew the pain
    and knew exactly what I didn’t want to happen again. Debugging J2ME meant that
    you couldn’t connect a debugger, you had to `println()`^([5](#c19-footnote-5))
    on the status bar to find out where you were in the code. It was an absolute nightmare.
    So I knew exactly what I wanted to fix.”
  prefs: []
  type: TYPE_NORMAL
- en: 'When he started, there were two apps being developed for Android: Gmail and
    Calendar.'
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense for applications to be developed closer to their product groups
    now. But it was very useful at that time, for the apps and for the Android platform
    itself, for them to be developed by engineers on the Android team. For one thing,
    the platform and all of the APIs were changing constantly, and the applications
    had to react to these changes. Also, in many cases, the application developers
    required platform changes in order to support their requirements. App developers
    like Cédric were primarily responsible for the applications, but they would also
    help out when necessary on the core platform and the Android APIs, especially
    for app-driven platform changes.
  prefs: []
  type: TYPE_NORMAL
- en: “I worked with Mike [Cleron] on the layout system, the View system, how to do
    all the original APIs for layout and the algorithms, the two-pass algorithms.
    I worked with Dianne [Hackborn], and all the others also, with Intents.^([6](#c19-footnote-6))
    I remember hours in rooms trying to find out how we would name these things which
    we call *Intents* now. We spent hours painting that bike shed,^([7](#c19-footnote-7))
    trying to figure out what was the best word. And eventually we came up with ‘Intent.’”^([8](#c19-footnote-8))
  prefs: []
  type: TYPE_NORMAL
- en: '“We were all excited by the general idea behind it: How do we get an app to
    be able to call into another app without knowing whether that other app is installed
    or not? We’re going to say, ‘Can someone handle this?’ And if they do, they can.
    We were pretty excited.”'
  prefs: []
  type: TYPE_NORMAL
- en: All of this work was happening while the platform was evolving and the team
    was growing. “I was also involved in staffing up. We needed Java people. We needed
    a hundred Java people right now. So staffing up and hiring and interviewing like
    crazy at that time, and also writing a lot of code. And throwing away a lot of
    code, because a lot of the code I was writing was calling into APIs that were,
    a week later, changed or removed or modified.”
  prefs: []
  type: TYPE_NORMAL
- en: Application developers must perform a tricky dance when writing their code on
    top of a platform that is being developed in parallel. Many capabilities and APIs
    of that platform are in flux, and many of the capabilities that applications need
    simply don’t exist yet.^([9](#c19-footnote-9)) Someone has to implement these
    features in order for the applications to be able to do what they need to do.
    On Android, that happened by having small teams of people doing a lot of work
    all over the place, across various parts of the platform and in the applications.
    Said Romain Guy, “The team was small. Making those changes was pretty fast; we
    all had access to the entire source tree. I remember leading up to 1.0, I was
    making large changes to the View system to clean up the APIs. You make a CL that
    touches 800 files and you touch all the apps and fix them as you go. So it was
    not necessarily the apps having to do this, though it was also that. Everybody
    was pitching in.”
  prefs: []
  type: TYPE_NORMAL
- en: One of the hard constraints that Gmail had to deal with was performance. Originally,
    the Gmail app was written such that every message was its own WebView.^([10](#c19-footnote-10))
    Essentially, each message was a separate web page, which has a lot of overhead
    that’s not obvious in the text that the user sees on the screen. Romain said,
    “But that was way too hard on that device. So Mike rewrote all of that.”
  prefs: []
  type: TYPE_NORMAL
- en: Steve Horowitz, director of Android’s engineering team at the time, talked about
    the Gmail performance problems. “Cédric took an approach to the architecture that
    was good up to a certain point. Part of that, honestly, was maybe just the capabilities
    of the View system at the time. How many Views could you stack to create those
    threads?
  prefs: []
  type: TYPE_NORMAL
- en: “So Mike had to come unravel a bunch of that stuff and redo it so the entire
    thread was not an independent View, but there was one View you rendered into.
    There was a fundamental re-architecture of Gmail just to make it work.”
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, the requirement to use WebView put additional demands on the team.
    It made sense to use WebView because email messages require web capabilities.
    While many email messages display plain text, there are enough variations in what
    that text can contain, and how it can be formatted, that the ability to display
    an HTML (web) version of that message is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: So the team depended on the WebView component, which was being developed by
    the browser team. But the HTML embedded in Gmail messages wasn’t plain HTML. It
    was a subset of content types and expectations about how that content would be
    displayed. Making it work for Gmail on Android required understanding what Gmail
    did on the backend and getting the browser (and WebView) team to be able to display
    this odd variant of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: There were good things about working on Gmail as well. One of the motivating
    things about developing Android applications at that time was that the platform
    had capabilities that simply didn’t exist anywhere else. Engineers were able to
    create much more powerful application experiences than had existed before.
  prefs: []
  type: TYPE_NORMAL
- en: “I knew we were onto something the very first time we were able to get a push
    notification. We weren’t quite sure we could do it, that we could keep a connection
    open and to have the server tell us, ‘You have new mail.’ For J2ME, we did not
    have that; you needed to refresh constantly. But at some point, I was able to
    send an email and I saw my phone react. The first thing I did was to run to Steve
    Horowitz’s office and show him. His jaw dropped. He knew we were working on it,
    but he didn’t know if we could do it.”
  prefs: []
  type: TYPE_NORMAL
- en: Romain Guy said, “What I loved about the first Android phone, about 1.0, is
    that we had push notifications for email and chat, which was huge back then, because
    the iPhone didn’t have any of that. I remember that my phone would get the emails
    faster than my desktop. My phone would beep, and then a few seconds or minutes
    later my desktop would finally show the new email.”
  prefs: []
  type: TYPE_NORMAL
- en: While Cédric was responsible for the Android side of Gmail, a substantial portion
    of the overall application depended on the mechanism that talked to the Gmail
    backend. That work happened on the Android services team.
  prefs: []
  type: TYPE_NORMAL
