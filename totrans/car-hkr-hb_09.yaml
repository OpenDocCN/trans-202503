- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**IN-VEHICLE INFOTAINMENT SYSTEMS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**车载娱乐信息系统**'
- en: '![image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common-01.jpg)'
- en: '*In-vehicle infotainment (IVI) system* is the name often given to the touchscreen
    interface in a car’s center console. These consoles often run an operating system
    such as Windows CE, Linux, QNX, or Green Hills and may even run Android in a VM
    as well. They can support numerous features with varying levels of integration
    with the vehicle.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*车载娱乐信息（IVI）系统*通常是指汽车中控台的触摸屏界面。这些控制台通常运行像Windows CE、Linux、QNX或Green Hills这样的操作系统，甚至可能在虚拟机中运行Android。它们可以支持众多功能，并与车辆的集成程度各不相同。'
- en: The IVI system offers more remote attack surfaces than any other vehicle component.
    In this chapter, you’ll learn how to analyze and identify an IVI unit, how to
    determine how it works, and how to overcome potential hurdles. Once you understand
    your IVI system, you’ll have gained a great deal of insight into how your target
    vehicle works. Gaining access to the IVI system will not only allow you to modify
    the IVI itself but also will open a door to additional information about how your
    vehicle works, such as how it routes CAN bus packets and updates the ECU. Understanding
    the IVI system can also provide insight into whether the system phones home to
    the manufacturer; if it does, you can use access to the IVI to see what data is
    being collected and potentially transmitted back to the manufacturer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: IVI系统提供的远程攻击面比任何其他车辆组件都要多。在本章中，您将学习如何分析和识别IVI单元，如何确定其工作原理，以及如何克服潜在的障碍。一旦您了解了自己的IVI系统，就能深入了解目标车辆的工作原理。访问IVI系统不仅允许您修改IVI本身，还会为您提供更多关于车辆工作方式的信息，例如如何路由CAN总线数据包以及如何更新ECU。理解IVI系统还可以帮助您了解该系统是否会向制造商发送数据；如果是，您可以利用对IVI的访问权限查看正在收集和可能传输给制造商的数据。
- en: '**Attack Surfaces**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**攻击面**'
- en: 'IVI systems typically have one or more of these physical inputs that you can
    use to communicate with a vehicle:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: IVI系统通常具有一个或多个物理输入，您可以使用这些输入与车辆进行通信：
- en: '**Auxiliary jack**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**辅助插孔**'
- en: • CD-ROM
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • CD-ROM
- en: • DVD
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • DVD
- en: • Touchscreen, knobs or buttons, and other physical input methods
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 触摸屏、旋钮或按钮及其他物理输入方式
- en: • USB ports
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • USB端口
- en: '**One or more wireless inputs**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个或多个无线输入**'
- en: • Bluetooth
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 蓝牙
- en: • Cellular connection
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 蜂窝网络连接
- en: • Digital radio (such as Digital Audio Broadcasting)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 数字广播电台（如数字音频广播）
- en: • GPS
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • GPS
- en: • Wi-Fi
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • Wi-Fi
- en: • XM Radio
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • XM广播
- en: '**Internal network controls**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**内部网络控制**'
- en: • Bus networks (CAN, LIN, KWP, K-Line, and so on)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • 总线网络（CAN、LIN、KWP、K-Line等）
- en: • Ethernet
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • 以太网
- en: • High-speed media bus
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: • 高速媒体总线
- en: Vehicles often use CAN to communicate with their components, such as modules,
    ECUs, IVI systems, and telematic units. Some IVI systems use Ethernet to communicate
    between high-speed devices, whether to send normal IP traffic or CAN packets using
    Electronic System Design’s NTCAN or the Ethernet low-level socket interface (ELLSI).
    (For more on vehicle protocols, see [Chapter 2](ch02.html#ch02).)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆通常使用CAN总线与其各个组件进行通信，例如模块、ECU、IVI系统和远程信息处理单元。一些IVI系统使用以太网在高速设备之间进行通信，无论是发送正常的IP流量还是使用电子系统设计的NTCAN或以太网低级套接字接口（ELLSI）发送CAN数据包。（有关车辆协议的更多内容，请参阅[第二章](ch02.html#ch02)。）
- en: '**Attacking Through the Update System**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通过更新系统进行攻击**'
- en: One way to attack the IVI system is to go after its software. If your skill
    set primarily lies in the realm of software-related services, you may feel most
    comfortable with this method, and if you’ve ever researched embedded devices,
    such as home Wi-Fi routers, some of the methods discussed in the following should
    look familiar to you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击IVI系统的一种方式是攻击其软件。如果您的技能主要集中在软件相关服务领域，您可能会更习惯于这种方法。如果您曾经研究过嵌入式设备，比如家庭Wi-Fi路由器，那么接下来讨论的一些方法可能会让您感到熟悉。
- en: We’ll focus on using system updates to gain access to the system. It may be
    possible to access the system through other software means, such as a debug screen,
    an undocumented backdoor, or a published vulnerability, but we’ll focus on gaining
    access through software updates because that method is the most generic across
    IVI systems and is the primary one used to identify and access a target system
    via software.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点讨论如何通过系统更新来访问系统。虽然也有可能通过其他软件手段访问系统，比如调试屏幕、未记录的后门或公开的漏洞，但我们将重点讨论通过软件更新来获得访问权限，因为这种方法在IVI系统中最为通用，也是用于通过软件识别和访问目标系统的主要方式。
- en: '***Identifying Your System***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***识别您的系统***'
- en: In order to fully understand your target IVI system, you must first determine
    what kind of software it’s running. Next, you need to figure out how to access
    this software, which often involves looking for the methods the IVI uses to update
    or load its operating system. Once you understand how the system updates, you’ll
    have the knowledge you need to identify vulnerabilities and modify the system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面了解你的目标 IVI 系统，你首先必须确定它运行的是哪种软件。接下来，你需要弄清楚如何访问这些软件，这通常涉及查找 IVI 用于更新或加载操作系统的方法。一旦你了解了系统是如何更新的，你将具备识别漏洞并修改系统所需的知识。
- en: Before you can begin making modifications, you need to know what operating system
    the IVI is running. The easiest way to do so is to search for the brand of the
    IVI—first, by looking for a label on the outside of the IVI unit or frame. If
    you don’t see a label, look for a display option on the interface that displays
    software version numbers and often the device name. Also, check online to see
    whether anyone has already researched your target system and, if the system is
    manufactured by a third party, whether it has a website and firmware updates.
    Download any firmware or tools you can find for later use. Find out how the system
    is updated. Is there a map update service available? What other update methods
    are available? Even if you find that system updates are sent over the air, it’s
    usually possible to find USB drives or a DVD containing map updates, like the
    one from a Honda Civic shown in [Figure 9-1](ch09.html#ch9fig1).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始进行修改之前，你需要知道 IVI 正在运行什么操作系统。最简单的办法是通过寻找 IVI 单元或机架外部的标签来查找 IVI 品牌。如果没有看到标签，可以在界面上查找显示软件版本号的选项，通常还会显示设备名称。此外，可以上网查看是否有人已经研究过你的目标系统，并且如果该系统是由第三方制造的，是否有网站和固件更新。下载你能找到的任何固件或工具，以备后用。了解系统是如何更新的。是否有地图更新服务？还有哪些其他更新方法？即使你发现系统更新是通过无线传输发送的，通常仍然可以找到包含地图更新的
    USB 驱动器或 DVD，就像[图 9-1](ch09.html#ch9fig1)中展示的本田思域一样。
- en: '![image](graphics/f09-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-01.jpg)'
- en: '*Figure 9-1: NavTeq infotainment unit in an open state*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：NavTeq 信息娱乐单元处于打开状态*'
- en: This IVI has a normal CD tray for music at the top plus a hidden plastic door
    at the bottom that folds down to reveal a DVD tray holding the map software.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 IVI 设备顶部有一个普通的 CD 盘托盘用于播放音乐，底部则有一个隐藏的塑料门，向下折叠后可显现出一个 DVD 盘托盘，用于放置地图软件。
- en: '***Determining the Update File Type***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***确定更新文件类型***'
- en: System updates are often delivered as compressed files with *.zip* or *.cab*
    file extensions, but sometimes they have nonstandard extensions, like *.bin* or
    *.dat*. If the update files have *.exe* or *.dll* extensions, you’re probably
    looking at a Microsoft Windows–based system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 系统更新通常以压缩文件的形式发布，扩展名为 *.zip* 或 *.cab*，但有时它们会有非标准扩展名，如 *.bin* 或 *.dat*。如果更新文件具有
    *.exe* 或 *.dll* 扩展名，那么你很可能在面对一个基于 Microsoft Windows 的系统。
- en: To determine how the files are compressed and their target architecture, view
    their headers with a hex editor or use a tool such as `file` available on *nix-based
    systems. The `file` command will report a file’s architecture, such as ARM or,
    as with the Honda Civic IVI shown in [Figure 9-1](ch09.html#ch9fig1), a Hitachi
    SuperH SH-4 Processor. This information is useful if you want to compile new code
    for a device or if you plan on writing or using an exploit against it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定文件是如何压缩的及其目标架构，可以使用十六进制编辑器查看文件头，或者使用像*nix 系统中可用的`file`工具。`file`命令将报告文件的架构，比如
    ARM 或者像[图 9-1](ch09.html#ch9fig1)中所示的本田思域 IVI 使用的 Hitachi SuperH SH-4 处理器。如果你想为设备编译新代码，或者计划编写或使用漏洞攻击它，这些信息非常有用。
- en: 'If the `file` command hasn’t identified the type of file, you may be looking
    at a packed image. To analyze a firmware bundle, you can use a tool such as `binwalk`,
    which is a Python tool that uses signatures to carve out files from a collected
    binary. For instance, you can simply run `binwalk` on your firmware image to see
    a list of identified file types:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`file`命令没有识别出文件类型，可能是你正在查看一个压缩的映像。要分析固件包，你可以使用像`binwalk`这样的工具，它是一个 Python
    工具，通过使用签名来从收集的二进制文件中提取文件。例如，你可以直接在固件映像上运行`binwalk`，查看识别出的文件类型列表：
- en: '![image](graphics/f0160-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0160-01.jpg)'
- en: Using the `-e` flag would extract each of these files for further analysis and
    review. In this example, you can see a SquashFS filesystem was detected.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-e`标志可以提取这些文件以进行进一步分析和审查。在这个例子中，你可以看到检测到了一个 SquashFS 文件系统。
- en: 'This filesystem could be extracted with the `-e` flag and then “unsquashed”
    using the `unsquashfs` tool to view the filesystem, as I’ve done here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件系统可以使用 `-e` 标志提取，然后使用 `unsquashfs` 工具“解压”以查看文件系统，正如我在这里所做的那样：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `binewalk -e` commands will extract all known files from *firmware.bin*
    to the folder *_firmware.bin.extracted*. Inside that folder, you’ll see files
    named after their hex address with an extension that matches the detected file
    type. In this example, the *squashfs* file is called *140090.squashfs* because
    that was the location in *firmware.bin*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`binewalk -e` 命令将从 *firmware.bin* 中提取所有已知文件到文件夹 *_firmware.bin.extracted* 中。在该文件夹内，你会看到一些以其十六进制地址命名的文件，并且扩展名与检测到的文件类型相匹配。在这个示例中，*squashfs*
    文件叫做 *140090.squashfs*，因为它位于 *firmware.bin* 中的这个位置。'
- en: '***Modifying the System***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改系统***'
- en: Once you know your system’s OS, architecture, and update method, the next thing
    to do is to see whether you can use this information to modify it. Some updates
    are “protected” by a digital signature, and these can be tricky to update. But
    often there’s no protection or the update process will simply use an MD5 hash
    check. The best way to find these protections is to modify the existing update
    software and trigger an update.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了系统的操作系统、架构和更新方式，接下来要做的就是看看是否能利用这些信息进行修改。有些更新是通过数字签名“保护”的，更新这些文件可能会比较棘手。但通常没有保护，或者更新过程会简单地使用
    MD5 哈希检查。找出这些保护措施的最佳方法是修改现有的更新软件并触发一次更新。
- en: A good starting point for system modification is something with a visible result,
    like a splash screen or icon because once you successfully change it, you’ll know
    immediately (see [Figure 9-2](ch09.html#ch9fig2)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 系统修改的一个良好起点是一些能看到明显结果的内容，比如启动画面或图标，因为一旦你成功修改了它，你会立即看到效果（参见 [图 9-2](ch09.html#ch9fig2)）。
- en: '![image](graphics/f09-02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-02.jpg)'
- en: '*Figure 9-2: Example modification: NavTeq unit with a modified splash screen*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2：示例修改：具有修改过启动画面的 NavTeq 单元*'
- en: '[Figure 9-2](ch09.html#ch9fig2) shows how I modified the splash screen of an
    IVI system by replacing the normal background image with a Jolly Roger flag and
    the vehicle’s emblem with a character from Street Fighter. Replacing images in
    your splash screen is a safe way to ensure you can modify the IVI system without
    much risk of breaking the system.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](ch09.html#ch9fig2) 显示了我如何通过将正常的背景图像替换为骷髅旗，并将车辆的徽标替换为《街头霸王》中的角色，来修改
    IVI 系统的启动画面。更换启动画面中的图像是一种安全的方式，可以确保你在修改 IVI 系统时不会有太大的风险。'
- en: Find an image in your update file, modify it, then reburn the update DVD and
    force a system update. (Find out how in the IVI’s manual.) If the update files
    were compressed in a single archive, be sure to recompress the modified version
    so that it appears in the same format as before you modified it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 找到更新文件中的一个图像，修改它，然后重新刻录更新 DVD 并强制进行系统更新。（在 IVI 手册中查找如何操作。）如果更新文件被压缩成一个单一的归档文件，确保重新压缩修改后的版本，以便它与修改前的格式保持一致。
- en: If you run into a checksum issue and your update fails, look for a file in the
    update that might be a hash, such as a text file containing strings like *4cb1b61d0ef0ef683ddbed607c74f2bf*.
    You’ll need to update this file with the hash of your new modified image. You
    may be able to guess the hashing algorithm by looking at the size of the hash
    and performing some trial and error. For instance, an 8-character hash, such as
    d579793f, may be CRC32; a 32-character hash, such as c46c4c478a4b6c32934ef6559d25002f,
    may be an MD5 hash; and a 40-character hash, such as 0aaedee31976f-350a9ef821d6e7571116e848180,
    may be SHA-1\. These are the three most common hash algorithms, but there are
    others you might come across, and a quick Google search or reference to the tables
    at *[https://en.wikipedia.org/wiki/List_of_hash_functions](https://en.wikipedia.org/wiki/List_of_hash_functions)*
    should give you a clue as to which algorithm was used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到校验和问题并且更新失败，请查找更新包中的一个文件，这个文件可能是一个哈希值，比如包含像 *4cb1b61d0ef0ef683ddbed607c74f2bf*
    这样的字符串的文本文件。你需要用你修改后的新图像的哈希值更新这个文件。你可能可以通过查看哈希值的大小并进行一些试探来猜测哈希算法。例如，8个字符的哈希值，如
    d579793f，可能是 CRC32；32个字符的哈希值，如 c46c4c478a4b6c32934ef6559d25002f，可能是 MD5 哈希；40个字符的哈希值，如
    0aaedee31976f-350a9ef821d6e7571116e848180，可能是 SHA-1。 这些是最常见的三种哈希算法，但你可能会遇到其他的哈希算法，通过快速的谷歌搜索或者参考
    *[https://en.wikipedia.org/wiki/List_of_hash_functions](https://en.wikipedia.org/wiki/List_of_hash_functions)*
    中的表格，你应该能找到使用的算法线索。
- en: The Linux tools `crc32`, `md5sum`, and `sha1sum` will let you quickly calculate
    the hash of an existing file and compare it to the contents of the original text
    file. If you can generate a hash that matches that of the existing file, then
    you’ve found the correct algorithm.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Linux工具`crc32`、`md5sum`和`sha1sum`可以让你快速计算现有文件的哈希值，并将其与原始文本文件的内容进行比较。如果你能生成与现有文件匹配的哈希值，那么你就找到了正确的算法。
- en: For example, say you find a single file on an update DVD called *Validation.dat*
    that lists the contents of the files on the DVD, as shown in [Listing 9-1](ch09.html#ch9list1).
    This listing includes the names of three files on the DVD and their associated
    hashes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在更新DVD上找到了一个名为*Validation.dat*的单独文件，列出了DVD上文件的内容，如[清单 9-1](ch09.html#ch9list1)所示。该清单包含了DVD上三个文件的名称及其相关的哈希值。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 9-1: Sample* `Validation.dat` *file found on an update DVD*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-1：更新DVD中找到的* `Validation.dat` *文件示例*'
- en: The length of the hash listed for each file—32 characters—suggests that this
    might be an MD5 hash. To confirm, use the Linux `md5sum` tool to generate an MD5
    hash for each file. [Listing 9-2](ch09.html#ch9list2) shows what that would look
    like for the *09AVN.bin* file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件列出的哈希值长度——32个字符——表明这可能是一个MD5哈希值。为了确认，可以使用Linux的`md5sum`工具为每个文件生成MD5哈希值。[清单
    9-2](ch09.html#ch9list2)展示了*09AVN.bin*文件的哈希值。
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 9-2: Using* `md5sum` *to see the hash of the* 09AVN.bin *file*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-2：使用* `md5sum` *查看* 09AVN.bin *文件的哈希值*'
- en: Compare the hash for *09AVN.bin* in [Listing 9-1](ch09.html#ch9list1) with the
    results of running `md5sum` in [Listing 9-2](ch09.html#ch9list2), and you’ll see
    that the hashes match; we’re indeed looking at an MD5 hash. This result tells
    us that in order to modify *09AVN.bin*, we’d need to recalculate the MD5 hash
    and update the *Validation.dat* file that contains all the hashes with the new
    hash.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比较[清单 9-1](ch09.html#ch9list1)中*09AVN.bin*的哈希值与[清单 9-2](ch09.html#ch9list2)中运行`md5sum`的结果，你会发现哈希值匹配；我们确实在查看一个MD5哈希值。这个结果告诉我们，要修改*09AVN.bin*，我们需要重新计算MD5哈希值，并更新包含所有哈希值的*Validation.dat*文件，使用新的哈希值。
- en: Another way to determine the algorithm used to create the hash is to run the
    `strings` command on some of the binaries or DLLs in your update package to search
    for strings in the file, like MD5 or SHA. If the hash is small, like d579793f,
    and CRC32 doesn’t seem to work, you’re probably looking at a custom hash.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确定创建哈希值所使用算法的另一种方法是，运行`strings`命令来查看更新包中的某些二进制文件或DLL，查找文件中的字符串，如MD5或SHA。如果哈希值很小，比如d579793f，并且CRC32似乎无法使用，那么你很可能在处理自定义哈希值。
- en: 'In order to create a custom hash, you need to understand the algorithm used
    to create that hash, which will require digging in with a disassembler, such as
    IDA Pro, Hopper, or radare2, which is free. For instance, [Listing 9-3](ch09.html#ch9list3)
    shows sample output from a custom CRC algorithm viewed in radare2:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建自定义哈希值，你需要理解用于创建该哈希值的算法，这需要使用反汇编器进行深入分析，例如IDA Pro、Hopper或免费的radare2。例如，[清单
    9-3](ch09.html#ch9list3)展示了通过radare2查看的自定义CRC算法的示例输出：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 9-3: Disassembly of a CRC checksum function in radare2*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-3：在radare2中反汇编CRC校验和函数*'
- en: Unless you’re good at reading low-level assembler, this may be a bit much to
    start with, but here we go. The algorithm in [Listing 9-3](ch09.html#ch9list3)
    reads in a byte at ➊, multiplies it by 5 at ➋, and then, at ➌, adds it to the
    hash to calculate the final sum. The rest of the assembly is mainly used by the
    `read` loop to process the binary file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你擅长阅读低级汇编，否则这可能有些难度，但我们还是来看看。 [清单 9-3](ch09.html#ch9list3)中的算法在➊处读取一个字节，将其乘以5后（➋），然后在➌处将其加到哈希值中，计算出最终的总和。剩余的汇编代码主要由`read`循环用于处理二进制文件。
- en: '***Apps and Plugins***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***应用程序和插件***'
- en: Whether your goal is to perform firmware updates, create custom splash screens,
    or achieve other exploitation, you’ll often find that you can get the information
    you need to exploit or modify a vehicle by going after IVI applications rather
    than the IVI operating system itself. Some systems allow third-party applications
    to be installed on the IVI, often through an app store or a dealer-customized
    interface. For example, you’ll notice there’s usually a way for developers to
    sideload apps for testing. Modifying an existing plugin or creating your own can
    be a great way to execute code to further unlock a system. Because standards are
    still being written to define how *applications* should interface with the vehicle,
    every manufacturer is free to implement its own API and security models. These
    APIs are often ripe for abuse.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的目标是进行固件更新、创建自定义启动屏幕，还是实现其他利用，你会发现，通常通过攻击IVI应用程序，而不是IVI操作系统本身，你可以获得利用或修改车辆所需的信息。有些系统允许在IVI上安装第三方应用程序，通常是通过应用商店或经销商定制的界面。例如，你会注意到通常会有一种方式供开发人员为测试目的侧载应用程序。修改现有插件或创建自己的插件是执行代码、进一步解锁系统的好方法。因为关于*应用程序*如何与车辆接口的标准仍在编写中，每个制造商都可以自由实现自己的API和安全模型。这些API通常容易被滥用。
- en: '***Identifying Vulnerabilities***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***识别漏洞***'
- en: Once you’ve found out how to update your system—whether by modifying the splash
    screen, company logo, warranty message, or other item—you’re ready to look for
    vulnerabilities in the system. Your choice of how to proceed will depend on your
    ultimate goal.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到了更新系统的方法——无论是修改启动屏幕、公司logo、保修信息，还是其他项目——你就可以开始寻找系统中的漏洞了。你如何继续的选择将取决于你的最终目标。
- en: If you’re looking for existing vulnerabilities in the infotainment unit, the
    next step is to pull all the binaries off the IVI so you can analyze them. (This
    research is already covered in great detail in several books about reverse engineering,
    so I won’t go into detail here.) Check the versions of binaries and libraries
    on the system. Often, even in the case of map updates, the core OS is rarely updated,
    and there’s a good chance that an already identified vulnerability exists on the
    system. You may even find an existing Metasploit exploit for the system!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找信息娱乐单元中的现有漏洞，下一步就是从IVI中提取所有二进制文件以进行分析。（这方面的研究已经在几本关于逆向工程的书籍中有详细讨论，所以我在这里不再详细介绍。）检查系统中二进制文件和库的版本。通常，即使是在地图更新的情况下，核心操作系统也很少更新，而系统中很有可能已经存在已识别的漏洞。你甚至可能会发现针对该系统的现有Metasploit漏洞利用！
- en: If your goal is, for example, to create a malicious update that wiretaps a vehicle’s
    Bluetooth driver, you have almost everything you need at this stage to do so.
    The only piece you may still need is the software development kit (SDK), which
    you use to compile the target system. Getting your hands on one will make your
    task much easier, although it’s still possible to create or modify a binary using
    a hex editor instead. Often the infotainment OS is built with a standard SDK,
    such as the Microsoft Auto Platform.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是，例如，创建一个恶意更新，窃听车辆的蓝牙驱动程序，那么在这个阶段你几乎拥有了实现目标所需的一切。你可能仍然需要的唯一东西是软件开发工具包（SDK），它用于编译目标系统。如果你能拿到一个SDK，任务将变得更容易，尽管仍然可以使用十六进制编辑器创建或修改二进制文件。通常，信息娱乐操作系统是用标准SDK构建的，例如微软的Auto
    Platform。
- en: For example, consider a navigation system with certain protections designed
    to prevent a customer from using a DVD-R in the system. The manufacturer’s original
    idea was to charge owners $250 to purchase updated mapping DVDs, and they wanted
    to prevent people from simply copying someone else’s DVD.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个具有某些保护措施的导航系统，旨在防止客户在系统中使用DVD-R。制造商的初衷是向车主收取250美元购买更新的地图DVD，并且他们希望防止人们仅仅复制他人的DVD。
- en: In its attempt to prevent this type of sharing, the manufacturer added several
    DVD checks to the navigation system, as shown in the IDA display sample code in
    [Figure 9-3](ch09.html#ch9fig3). But say as a consumer you want to use a backup
    copy of your purchased DVD in your system rather than the original because your
    car gets really hot during the day and you don’t want the DVD to warp.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种类型的共享，制造商在导航系统中增加了几项DVD检查，如[图9-3](ch09.html#ch9fig3)中的IDA显示示例代码所示。但假设作为消费者，你希望在系统中使用购买的DVD的备份副本，而不是原版，因为你的车在白天会变得非常热，你不想让DVD变形。
- en: While an ordinary consumer isn’t likely to be able to bypass these DVD checks,
    it would be possible to locate the DVD checks and replace them with no-operation
    instructions (NOPs), which would make the checks literally do nothing. Then you
    could upload this modified version of the DVD check to your IVI and use your backup
    DVD for navigation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然普通消费者不太可能绕过这些DVD检查，但你可以找到DVD检查的位置，并将其替换为无操作指令（NOP），这样检查就不会执行任何操作。然后，你可以将这个修改版的DVD检查上传到你的IVI，并使用备份DVD进行导航。
- en: '**NOTE**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*All the hacks mentioned so far can be done without removing the unit. However,
    you could dig even deeper by taking the unit out and going after the chips and
    memory directly, as discussed in [Chapter 6](ch06.html#ch06).*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*到目前为止提到的所有黑客操作都可以在不拆卸单元的情况下完成。然而，你可以通过将单元拆下并直接攻击芯片和内存，进一步深入，正如在[第6章](ch06.html#ch06)中所讨论的那样。*'
- en: '![image](graphics/f09-03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-03.jpg)'
- en: '*Figure 9-3: IDA view of DVD checks*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-3：DVD检查的IDA视图*'
- en: '**Attacking the IVI Hardware**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**攻击IVI硬件**'
- en: If you’re more comfortable attacking hardware than software and you’re able
    to remove the IVI from the target vehicle, you can go after the IVI system hardware
    instead. For that matter, if you’ve had no luck accessing the IVI system software,
    a hardware attack might provide additional insight that’ll help you find a way
    in. You’ll sometimes find that you can access system security keys by attacking
    the hardware when something like the update method mentioned earlier fails.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更擅长攻击硬件而非软件，并且能够从目标车辆中拆下IVI，你也可以攻击IVI系统硬件。如果你无法访问IVI系统软件，硬件攻击可能会提供额外的线索，帮助你找到进入的方法。有时你会发现，当像前面提到的更新方法失败时，你可以通过攻击硬件来访问系统安全密钥。
- en: '***Dissecting the IVI Unit’s Connections***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***拆解IVI单元的连接***'
- en: If you’re unable to gain access to a vehicle’s system through the update method
    discussed in the previous section, you can attack the IVI’s wiring and bus lines.
    Your first step will be to remove the IVI unit and then trace the wires back to
    the circuit board in order to identify its components and connections, like the
    ones shown in [Figure 9-4](ch09.html#ch9fig4).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法通过前一节讨论的更新方法访问车辆系统，你可以攻击IVI的接线和总线。你的第一步是拆下IVI单元，然后追踪电线，回到电路板上以识别其组件和连接，就像在[图9-4](ch09.html#ch9fig4)中显示的那样。
- en: '![image](graphics/f09-04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-04.jpg)'
- en: '*Figure 9-4: Connector view of a double DIN IVI unit*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-4：双DIN IVI单元的连接器视图*'
- en: When you take your IVI unit out, you’ll see a lot of wires because, unlike aftermarket
    radios, OEM units are heavily connected to the vehicle. The back metal panel on
    the IVI usually doubles as a heat sink, and each connector is often separated
    by its functionality. (Some vehicles keep the Bluetooth and cellular piece in
    another module, so if you’re looking to research a wireless exploit and the IVI
    unit doesn’t have this wireless module, continue looking for the telematics module.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拆下IVI单元时，你会看到很多电线，因为与后装收音机不同，OEM单元与车辆紧密连接。IVI的背面金属面板通常兼作散热片，每个连接器通常按其功能分开。（一些车辆将蓝牙和蜂窝模块放在另一个模块中，因此，如果你正在研究无线漏洞而IVI单元没有这个无线模块，继续寻找远程信息处理模块。）
- en: By tracing the actual wires or looking at a wiring diagram like the one shown
    in [Figure 9-5](ch09.html#ch9fig5), you can see that the Bluetooth module is actually
    a separate piece from the navigation unit (IVI). Notice in the diagram that the
    Bluetooth unit uses CAN (B-CAN) on pin 18\. If you look at the navigation unit’s
    wiring diagram, you can see that instead of CAN, K-Line (pin 3) is directly attached
    to the IVI unit. (We discussed these protocols in [Chapter 2](ch02.html#ch02).)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过追踪实际电线或查看如[图9-5](ch09.html#ch9fig5)所示的接线图，你可以看到蓝牙模块实际上是与导航单元（IVI）分开的。注意图中，蓝牙单元使用CAN（B-CAN）连接在18号引脚。如果你查看导航单元的接线图，你会发现，与CAN不同，K-Line（3号引脚）直接连接到IVI单元。（我们在[第2章](ch02.html#ch02)中讨论了这些协议。）
- en: '![image](graphics/f09-05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-05.jpg)'
- en: '*Figure 9-5: Hands-free wiring diagram*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-5：免提接线图*'
- en: If you can determine whether your target is connected to a network bus, you’ll
    know just how much your exploit can control. At the very least, the bus directly
    connected to the target can be influenced by any code you put on the target system.
    For instance, in the wiring examples shown in [Figure 9-5](ch09.html#ch9fig5),
    a vulnerability in the Bluetooth module would give us direct CAN access; however,
    if we exploited the IVI’s navigation system, we’d need to use K-Line instead (see
    [Figure 9-6](ch09.html#ch9fig6)). You can tell which network you have access to
    by looking at the wiring diagram in [Figure 9-5](ch09.html#ch9fig5) and seeing
    whether K-Line or CAN are connected to your target device. Which bus you’re on
    will affect your payload and what networked systems you’ll be able to influence
    directly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能判断目标是否连接到网络总线上，你就能知道你的攻击可以控制多少内容。至少，直接连接到目标的总线可以被你放入目标系统的任何代码所影响。例如，在[图9-5](ch09.html#ch9fig5)中展示的接线示例中，蓝牙模块的漏洞将使我们直接访问CAN总线；然而，如果我们利用IVI的导航系统，我们则需要改用K线（参见[图9-6](ch09.html#ch9fig6)）。你可以通过查看[图9-5](ch09.html#ch9fig5)中的接线图来判断你可以访问哪个网络，并查看K线或CAN是否与目标设备连接。你所在的总线将影响你的有效载荷以及你能够直接影响的网络系统。
- en: '![image](graphics/f09-06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-06.jpg)'
- en: '*Figure 9-6: K-Line specified in the wiring diagram for the navigation unit*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-6：导航单元接线图中指定的K线*'
- en: '***Disassembling the IVI Unit***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***拆解IVI单元***'
- en: If your goal is to directly attack the system hardware or if you don’t have
    a wiring diagram showing the connections to the entertainment unit, you’ll need
    to start taking the unit apart. Because IVI units are really compact and they
    bundle a lot of functionality into a small area, taking them apart means removing
    lots of screws and several layers of connected circuit boards. The disassembly
    task is time consuming and complicated and should probably be your last resort.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是直接攻击系统硬件，或者如果你没有显示与娱乐单元连接的接线图，你需要开始拆解单元。由于IVI单元非常紧凑，并且将大量功能集成在一个小区域内，拆解它们意味着需要拆除许多螺丝和几层连接的电路板。拆解过程既耗时又复杂，应该作为最后的手段来执行。
- en: To begin disassembly, start by removing the case. Each unit comes apart differently,
    but typically you can remove the front and back plate screws and then work your
    way down from the top. Once inside, you’ll most likely find a circuit board like
    the one shown in [Figure 9-7](ch09.html#ch9fig7).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始拆解，首先从拆卸外壳开始。每个单元的拆解方式不同，但通常你可以先移除前后面板的螺丝，然后从顶部向下拆卸。一旦进入内部，你很可能会看到像[图9-7](ch09.html#ch9fig7)所示的电路板。
- en: Although the print on the circuit board is a little hard to read, you’ll probably
    find that many of the pins are labeled. Pay close attention to any connectors
    that are attached to the circuit board but not connected or that are covered by
    the heat sink. You’ll often find that certain connectors used during the manufacturing
    process are left behind, disconnected on the circuit board. These can be a great
    way in to the IVI unit. For example, [Figure 9-8](ch09.html#ch9fig8) shows a hidden
    connector revealed once the back panel was removed on the target IVI.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管电路板上的打印有些难以阅读，但你可能会发现许多引脚都有标注。特别注意那些附着在电路板上的但未连接的连接器，或者被散热片覆盖的连接器。你通常会发现一些在制造过程中使用的连接器被遗留下来，并且在电路板上处于断开状态。这些连接器可以为进入IVI单元提供很好的线索。例如，[图9-8](ch09.html#ch9fig8)显示了一个隐藏的连接器，移除目标IVI的后面板后显现出来。
- en: Hidden connectors are a great place to start when going after a device’s firmware.
    These connectors often have methods to load and debug the firmware running on
    the systems, and they can also provide serial-style debugging interfaces that
    you can use to see what’s happening with the system. In particular, you should
    look for JTAG and UART interfaces.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏连接器是攻击设备固件的一个很好的起点。这些连接器通常具有加载和调试系统上运行的固件的方法，它们还可以提供串行风格的调试接口，让你能够查看系统正在发生的情况。特别是，你应该寻找JTAG和UART接口。
- en: '![image](graphics/f09-07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-07.jpg)'
- en: '*Figure 9-7: Many pins and connectors are labeled directly on the PCB.*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-7：许多引脚和连接器直接标注在PCB上。*'
- en: '![image](graphics/f09-08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-08.jpg)'
- en: '*Figure 9-8: Nonexposed hidden connector*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-8：未暴露的隐藏连接器*'
- en: At this stage, you should start tracing the pins and looking at data sheets
    for the onboard chips. After a bit of sleuthing as to where these pins connect,
    you should have a better idea of what you’re dealing with and the intended purpose
    of this hidden connector. (See [Chapter 8](ch08.html#ch08) for more on analyzing
    circuit boards and reverse engineering hardware.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你应该开始追踪引脚并查看车载芯片的数据手册。通过一些侦查，找出这些引脚的连接位置后，你应该能更清楚自己面对的是什么，以及这个隐藏连接器的预期用途。（有关分析电路板和逆向工程硬件的更多内容，请参见[第
    8 章](ch08.html#ch08)。）
- en: '**Infotainment Test Benches**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**信息娱乐测试平台**'
- en: Instead of tampering with your own factory-installed entertainment unit and
    risking damage, you can experiment with a test bench system, whether that’s one
    from a junkyard or an open source development platform. (Aftermarket radios aren’t
    a good choice because they don’t usually tie into the CAN bus network.) In this
    section, we’ll look at two open source entertainment systems that you can run
    in a VM on a PC, the GENIVI demo platform, and Automotive Grade, which requires
    an IVI.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与其篡改自己原厂安装的娱乐单元并冒着损坏的风险，不如实验一个测试平台系统，无论是来自废品场还是一个开源开发平台。（后市场的收音机不是一个好选择，因为它们通常无法与
    CAN 总线网络连接。）在本节中，我们将介绍两个可以在 PC 上的虚拟机中运行的开源娱乐系统，GENIVI 演示平台和 Automotive Grade，后者需要一个
    IVI。
- en: '***GENIVI Meta-IVI***'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GENIVI Meta-IVI***'
- en: The GENIVI Alliance (*[http://www.genivi.org/](http://www.genivi.org/)*) is
    an organization whose main objective is to drive the adoption of open source IVI
    software. Membership is paid, but you can download and participate in the GENIVI
    software projects for free. Membership, especially board-level membership, in
    GENIVI is very costly, but you can join the mailing list to participate in some
    of the development and discussions. The GENIVI system can be run directly on Linux
    with no need for an IVI. It’s basically a collection of components that you can
    use to build your own IVI.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: GENIVI 联盟 (*[http://www.genivi.org/](http://www.genivi.org/)*) 是一个组织，其主要目标是推动开源
    IVI 软件的采用。会员是付费的，但你可以免费下载并参与 GENIVI 软件项目。GENIVI 的会员资格，特别是董事会级别的会员资格，非常昂贵，但你可以加入邮件列表，参与一些开发和讨论。GENIVI
    系统可以直接在 Linux 上运行，无需 IVI。它基本上是一个组件集合，你可以使用这些组件来构建自己的 IVI。
- en: In [Figure 9-9](ch09.html#ch9fig9), a high-level block diagram of the GENIVI
    system shows how the pieces fit together.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 9-9](ch09.html#ch9fig9)中，GENIVI 系统的高层次框图展示了各个组件如何协调工作。
- en: 'The GENIVI demo platform has some basic human–machine interface (HMI) functionality:
    the FSA PoC stands for *fuel stop advisor proof-of-concept* (proof of concept
    because certain of these apps aren’t used in production). The FSA is part of the
    navigation system and is designed to alert drivers if they are going to run out
    of fuel before reaching their destination. The Web browser and audio manager PoCs
    should be self-explanatory. Another component not shown in the figure is the navigation
    app. This app is powered by the open source Navit project (*[http://www.navit-project.org/](http://www.navit-project.org/)*)
    and uses a plugin for the freely licensed OpenStreetMap mapping software (*[https://www.openstreetmap.org/](https://www.openstreetmap.org/)*).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: GENIVI 演示平台具有一些基本的人机交互（HMI）功能：FSA PoC 代表 *燃料停靠顾问概念验证*（概念验证是因为这些应用程序中的某些在生产中未被使用）。FSA
    是导航系统的一部分，旨在提醒驾驶员在到达目的地之前是否会耗尽燃料。Web 浏览器和音频管理器 PoC 应该不言自明。图中没有显示的另一个组件是导航应用程序。该应用程序由开源的
    Navit 项目 (*[http://www.navit-project.org/](http://www.navit-project.org/)*）提供支持，并使用一个插件来支持自由授权的
    OpenStreetMap 地图软件 (*[https://www.openstreetmap.org/](https://www.openstreetmap.org/)*）。
- en: 'The GENIVI’s middleware components make up the core GENIVI operating system,
    and they’re discussed here in the order in which they appear in [Figure 9-9](ch09.html#ch9fig9)
    (persistency is excluded since there isn’t currently any documentation on this
    module):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GENIVI 的中间件组件构成了核心的 GENIVI 操作系统，这些组件将在此按[图 9-9](ch09.html#ch9fig9)中的出现顺序进行讨论（由于目前没有相关文档，持久化模块被排除在外）：
- en: '**Diagnostic log and trace (DLT)** An AUTOSAR 4.0–compatible logging and tracing
    module. (Autosar is simply an automotive standards group; see *[https://www.autosar.org/](https://www.autosar.org/)*.)
    Some features of the DLT can use TCP/IP, serial communications, or standard syslog.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**诊断日志和追踪 (DLT)** 一个兼容 AUTOSAR 4.0 的日志和追踪模块。（Autosar 只是一个汽车标准组织；请参见 *[https://www.autosar.org/](https://www.autosar.org/)*。）DLT
    的一些功能可以使用 TCP/IP、串行通信或标准 syslog。'
- en: '**Node state manager (NSM)** Keeps track of the vehicle’s running state and
    is responsible for shutdown and for monitoring system health.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点状态管理器 (NSM)** 跟踪车辆的运行状态，负责关机和监控系统健康状况。'
- en: '**Node startup controller (NSC)** Part of the NSM persistence. Handles all
    data stored on a hard drive or flash drive.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点启动控制器 (NSC)** NSM持久化的一部分。处理存储在硬盘或闪存中的所有数据。'
- en: '**Audio manager daemon** The audio hardware/software abstraction layer.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频管理守护进程** 音频硬件/软件抽象层。'
- en: '**Audio manager plugins** Part of the audio manager daemon.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频管理插件** 音频管理守护进程的一部分。'
- en: '**Webkit** Web browser engine.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Webkit** 网页浏览器引擎。'
- en: '**Automotive message broker (AMB)** Allows an application to access vehicle
    information from the CAN bus without having to know the specific CAN bus packet
    layouts. (The system you’re talking to must support OBD or AMB directly in order
    for this to work.)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**汽车消息代理 (AMB)** 允许应用程序访问来自CAN总线的车辆信息，而无需了解特定的CAN总线数据包布局。（你所连接的系统必须直接支持OBD或AMB才能使其工作。）'
- en: '![image](graphics/f09-09.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-09.jpg)'
- en: '*Figure 9-9: GENIVI software layout*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-9：GENIVI软件布局*'
- en: '**Building the Environment**'
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**构建环境**'
- en: 'The easiest way to build the GENIVI system on Linux is to use a Docker image.
    First, grab the easy build like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上构建GENIVI系统最简单的方法是使用Docker镜像。首先，像这样获取easy build：
- en: '[PRE4]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**NOTE**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This Docker image won’t work on the eCryptfs filesystem that Ubuntu uses on
    home directories, so make sure to download and follow these instructions outside
    your default home directory.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*此Docker镜像不适用于Ubuntu在主目录中使用的eCryptfs文件系统，因此确保在默认主目录之外下载并按照这些说明操作。*'
- en: 'You’ll need Docker installed if you don’t already have it. On Ubuntu, this
    command is:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Docker，你需要先安装它。在Ubuntu上，使用以下命令：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, `cd` into the *easy-build/build-yocto-genivi* folder in your *Home* directory
    and run this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`cd`进入你在*Home*目录中的*easy-build/build-yocto-genivi*文件夹，并运行以下命令：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Docker builds a little VM for you to work in, and running `run.sh` should put
    you in a root terminal environment in the Docker instance.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Docker为你构建一个小型虚拟机，运行`run.sh`应该会将你置于Docker实例中的root终端环境。
- en: 'Now, finish the install by getting the rest of the GENIVI build and creating
    an image that you can use in the QEMU VM. Run the following commands:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过获取剩余的GENIVI构建并创建一个可以在QEMU虚拟机中使用的镜像来完成安装。运行以下命令：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the final `bitbake` command should look something like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`bitbake`命令输出应该类似于以下内容：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As of this writing, the build process errors out on fetching the Bluez package.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，构建过程在获取Bluez包时会出现错误。
- en: 'Remove the following file, and try `bitbake` again:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 删除以下文件，并重新尝试运行`bitbake`：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once everything is finished, you should have images in your *tmp/deploy/ images/qemux86/*
    folder.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成所有步骤，你应该可以在*tmp/deploy/images/qemux86/*文件夹中找到镜像。
- en: 'Now you’re ready to run your image in an emulator. For ARM emulation, run this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好在模拟器中运行你的镜像了。对于ARM仿真，运行以下命令：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For x86, use this command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于x86，使用以下命令：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And this command is for x86-64:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于x86-64的命令：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should now be ready to research a GENIVI-based IVI system. As you’ve seen,
    the steps can be a bit daunting. The most difficult part of working on GENIVI
    is getting it up and running. Once you have a system to look at, you can pick
    any executable to begin your security audit.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该准备好研究基于GENIVI的IVI系统。如你所见，这些步骤可能有点让人望而却步。工作在GENIVI上最困难的部分是让它启动并运行。一旦你有了可以查看的系统，就可以选择任何可执行文件开始进行安全审计。
- en: '***Automotive Grade Linux***'
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***汽车级Linux***'
- en: '*Automotive Grade Linux (AGL)* is an IVI system that you can run on a physical
    IVI unit. Unlike GENIVI, AGL doesn’t have a costly board structure. AGL’s goals
    are similar to those of GENIVI: it’s trying to build an open source IVI unit as
    well as other related parts, such as telematics and instrument clusters.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*汽车级Linux (AGL)* 是一个你可以在物理IVI设备上运行的IVI系统。与GENIVI不同，AGL没有昂贵的硬件结构。AGL的目标与GENIVI相似：它试图构建一个开源的IVI单元以及其他相关部分，如车载信息和仪表盘。'
- en: As of this writing, you should be able to find a demo image of AGL for VMware
    (last released in 2013), installation instructions, and a bootable USB version
    for x86 at the AGL website (*[http://automotivelinux.org/](http://automotivelinux.org/)*).
    These images are designed to run on in-vehicle computer hardware, like the Nexcom
    VTC-1000, a headless Linux device that comes with CAN and touchscreens. Unlike
    the GENIVI project, the AGL demonstration images are mainly designed and tested
    to run on hardware, although it may be possible to run some development images
    in a VM.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文编写时，你应该能够在 AGL 网站上找到 VMware 的演示图像（最后发布于 2013 年），安装说明和适用于 x86 的可启动 USB 版本（*[http://automotivelinux.org/](http://automotivelinux.org/)*）。这些镜像设计用于在车载计算机硬件上运行，比如
    Nexcom VTC-1000，这是一款无头 Linux 设备，配有 CAN 和触摸屏。与 GENIVI 项目不同，AGL 演示图像主要设计和测试用于在硬件上运行，尽管也可能可以在虚拟机中运行某些开发镜像。
- en: As you can see in [Figure 9-10](ch09.html#ch9fig10), the AGL demonstration image
    has a very pretty interface, but don’t expect all applications to run smoothly,
    as many are simply placeholders that are actively being built. Because AGL is
    normally tested on physical hardware, you’ll have to spend around $1,000 to get
    the hardware necessary to install AGL smoothly. It’s also possible to get an image
    to run on a QEMU VM as well. (One nice thing about buying a development IVI is
    that you can program it to work with any vehicle.)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[图 9-10](ch09.html#ch9fig10)中看到的，AGL 演示图像有一个非常漂亮的界面，但不要指望所有应用程序都能顺利运行，因为许多应用程序只是占位符，仍在积极开发中。由于
    AGL 通常是在物理硬件上进行测试的，你需要花费大约 $1,000 来购买所需的硬件，以便顺利安装 AGL。也可以将图像运行在 QEMU 虚拟机上。（购买开发
    IVI 系统的一个好处是，你可以编程使其与任何车辆兼容。）
- en: '![image](graphics/f09-10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-10.jpg)'
- en: '*Figure 9-10: Automotive Grade Linux sample screens*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-10：汽车级 Linux 示例屏幕*'
- en: '**Acquiring an OEM IVI for Testing**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取 OEM IVI 进行测试**'
- en: If you decide to run a physical IVI unit for testing, you’ll have to either
    pull a factory (OEM) IVI system from an existing vehicle or buy a development
    IVI, such as the Nexcom VTC-1000 or a model like those referenced in the Tizen
    hardware compatibility list (*[https://wiki.tizen.org/wiki/IVI/IVI_Platforms](https://wiki.tizen.org/wiki/IVI/IVI_Platforms)*).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定运行一个物理 IVI 单元进行测试，你需要从现有车辆中拆下一个工厂（OEM）IVI 系统，或者购买一个开发 IVI，例如 Nexcom VTC-1000
    或类似于 Tizen 硬件兼容性列表中提到的型号（*[https://wiki.tizen.org/wiki/IVI/IVI_Platforms](https://wiki.tizen.org/wiki/IVI/IVI_Platforms)*）。
- en: If you choose to go the OEM factory-installed route, you can buy one from the
    dealership or pull one from a junkyard. Development and OEM IVI units purchased
    directly from a dealership will typically run from $800 to $2,000, so it’s much
    more cost-effective to pull one from a junkyard, though it may be difficult to
    find your target high-end IVI system. You can also buy non-OEM aftermarket units,
    such as Kenwood or Pioneer, which—while often cheaper—typically won’t tie into
    a vehicle’s CAN system.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择走 OEM 工厂安装的路线，可以从经销商处购买一个，或者从废品场拉一个。直接从经销商处购买的开发和 OEM IVI 单元通常价格在 $800
    到 $2,000 之间，因此从废品场拉一个会更具成本效益，尽管可能很难找到你目标的高端 IVI 系统。你还可以购买非 OEM 的市场后设备，如 Kenwood
    或 Pioneer，这些设备虽然通常更便宜，但通常不会与车辆的 CAN 系统兼容。
- en: Unfortunately, pulling a radio out of a modern vehicle without destroying it
    isn’t an easy task. You’ll often need to remove the plastic around the gauge cluster
    on the dashboard and the plastic around the radio before you can remove the radio
    from its harness. If you run into an antitheft security code for the radio, check
    the owner’s manual for the code, if you’re lucky enough to find that. If you can’t
    find the code, be sure to grab the VIN from the donor vehicle because you might
    need it to get or reset the antitheft PIN. (If you grabbed the ECU from the vehicle,
    remember you can query that to get the VIN as well.)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，从现代车辆中拆下收音机并不容易。你通常需要先拆掉仪表盘周围的塑料和收音机周围的塑料，才能将收音机从连接器中拆下。如果遇到收音机的防盗安全码，检查车主手册，看看是否能找到代码。如果找不到代码，记得记录下捐赠车辆的
    VIN 码，因为你可能需要它来获取或重置防盗 PIN 码。（如果你从车辆中提取了 ECU，记住你也可以查询 ECU 来获得 VIN 码。）
- en: You’ll need to refer to the wiring diagram for your IVI system in order to get
    it to start on its own, but you can leave out most of the wires that you’re not
    testing. If you’re building an OEM-based unit, it may be worth your while to completely
    disassemble the unit and to connect any test connectors so that you’ll not only
    have the normal IVI system running but also be able to access any of the hidden
    connectors.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要参考IVI系统的接线图，以便让它能够自行启动，但你可以忽略掉大部分不需要测试的电线。如果你正在构建基于OEM的单元，完全拆解该单元并连接任何测试接头可能是值得的，这样你不仅能让正常的IVI系统运行，还能够访问任何隐藏的连接器。
- en: '**Summary**'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: You should now be comfortable analyzing your existing radio system. We’ve covered
    how to safely work in a VM or test environment to find vulnerabilities in IVI
    systems. These systems hold a lot of code and are the most powerful electronic
    systems in a vehicle. Mastery of the IVI units will give you full control of your
    target, and there’s no part of a vehicle with a greater concentration of attack
    surface than the IVI system. When performing security research, an IVI and telematics
    system will provide you with the most valuable vulnerabilities, and you’ll find
    that the vulnerabilities found in these systems will often be remote or wireless
    and directly connected to the vehicle’s bus lines.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经能够分析现有的无线电系统了。我们已经讨论了如何在虚拟机或测试环境中安全地工作，以发现IVI系统中的漏洞。这些系统包含大量代码，是车辆中最强大的电子系统。掌握IVI单元将让你完全控制目标，而没有任何部分比IVI系统更集中于攻击面。在进行安全研究时，IVI和远程信息处理系统将为你提供最有价值的漏洞，你会发现这些系统中的漏洞往往是远程的或无线的，并且直接连接到车辆的总线系统。
