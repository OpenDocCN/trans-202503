["```\nDWORD FwpmEngineOpen0(\n  [in, optional] const wchar_t             *serverName,\n  [in]           UINT32                    authnService,\n  [in, optional] SEC_WINNT_AUTH_IDENTITY_W *authIdentity,\n  [in, optional] const FWPM_SESSION0       *session,\n  [out]          HANDLE                    *engineHandle\n);\n```", "```\nNTSTATUS FwpsCalloutRegister2(\n  [in, out]       void                *deviceObject,\n  [in]            const FWPS_CALLOUT2 *callout,\n  [out, optional] UINT32              *calloutId\n);\n```", "```\ntypedef struct FWPS_CALLOUT2_ {\n  GUID                                 calloutKey;\n  UINT32                               flags;\n  FWPS_CALLOUT_CLASSIFY_FN2            classifyFn;\n  FWPS_CALLOUT_NOTIFY_FN2              notifyFn;\n  FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0  flowDeleteFn;\n} FWPS_CALLOUT2;\n```", "```\ntypedef struct FWPM_CALLOUT0_ {\n  GUID               calloutKey;\n  FWPM_DISPLAY_DATA0 displayData;\n  UINT32             flags;\n  GUID               *providerKey;\n  FWP_BYTE_BLOB      providerData;\n  GUID               applicableLayer;\n  UINT32             calloutId;\n} FWPM_CALLOUT0;\n```", "```\ntypedef struct FWPM_FILTER0_ {\n  GUID                   filterKey;\n  FWPM_DISPLAY_DATA0     displayData;\n  UINT32                 flags;\n  GUID                   *providerKey;\n  FWP_BYTE_BLOB          providerData;\n  GUID                   layerKey; GUID                   subLayerKey;\n  FWP_VALUE0             weight;\n  UINT32                 numFilterConditions;\n  FWPM_FILTER_CONDITION0 *filterCondition;\n  FWPM_ACTION0           action;\n  union {\n    UINT64 rawContext;\n    GUID   providerContextKey;\n  };\n  GUID                   *reserved;\n  UINT64                 filterId;\n  FWP_VALUE0             effectiveWeight;\n} FWPM_FILTER0;\n```", "```\ntypedef struct FWPM_FILTER_CONDITION0_ {\n  GUID                 fieldKey;\n  FWP_MATCH_TYPE       matchType;\n  FWP_CONDITION_VALUE0 conditionValue;\n} FWPM_FILTER_CONDITION0;\n```", "```\ntypedef enum FWP_MATCH_TYPE_ {\n  FWP_MATCH_EQUAL = 0,\n  FWP_MATCH_GREATER,\n  FWP_MATCH_LESS,\n  FWP_MATCH_GREATER_OR_EQUAL,\n  FWP_MATCH_LESS_OR_EQUAL,\n  FWP_MATCH_RANGE,\n  FWP_MATCH_FLAGS_ALL_SET,\n  FWP_MATCH_FLAGS_ANY_SET,\n  FWP_MATCH_FLAGS_NONE_SET,\n  FWP_MATCH_EQUAL_CASE_INSENSITIVE,\n  FWP_MATCH_NOT_EQUAL,\n  FWP_MATCH_PREFIX,\n  FWP_MATCH_NOT_PREFIX,\n  FWP_MATCH_TYPE_MAX\n} FWP_MATCH_TYPE;\n```", "```\ntypedef struct FWP_CONDITION_VALUE0_ {\n  FWP_DATA_TYPE type;\n  union {\n    UINT8                  uint8;\n    UINT16                 uint16;\n    UINT32                 uint32;\n    UINT64                 *uint64;\n    INT8                   int8;\n    INT16                  int16;\n    INT32                  int32;\n    INT64                  *int64;\n    float                  float32;\n    double                 *double64;\n    FWP_BYTE_ARRAY16       *byteArray16;\n    FWP_BYTE_BLOB          *byteBlob;\n    SID                    *sid;\n    FWP_BYTE_BLOB          *sd;\n    FWP_TOKEN_INFORMATION  *tokenInformation;\n    FWP_BYTE_BLOB         *tokenAccessInformation;\n    LPWSTR                 unicodeString;\n    FWP_BYTE_ARRAY6       *byteArray6;\n    FWP_V4_ADDR_AND_MASK   *v4AddrMask;\n    FWP_V6_ADDR_AND_MASK   *v6AddrMask;\n    FWP_RANGE0             *rangeValue;\n  };\n} FWP_CONDITION_VALUE0;\n```", "```\nFWPS_CALLOUT_CLASSIFY_FN2 FwpsCalloutClassifyFn2;\n\nvoid FwpsCalloutClassifyFn2(\n  [in]                const FWPS_INCOMING_VALUES0 *inFixedValues,\n  [in]                const FWPS_INCOMING_METADATA_VALUES0 *inMetaValues,\n  [in, out, optional] void *layerData,\n  [in, optional]      const void *classifyContext,\n  [in]                const FWPS_FILTER2 *filter,\n  [in]                UINT64 flowContext,\n  [in, out]           FWPS_CLASSIFY_OUT0 *classifyOut\n)\n{...}\n```", "```\ntypedef struct FWPS_INCOMING_VALUES0_ {\n  UINT16               layerId;\n  UINT32               valueCount;\n  FWPS_INCOMING_VALUE0 *incomingValue;\n} FWPS_INCOMING_VALUES0;\n```", "```\ntypedef struct FWP_VALUE0_ {\n  FWP_DATA_TYPE type;\n  union {\n    UINT8                  uint8;\n    UINT16                 uint16;\n    UINT32                 uint32;\n    UINT64                 *uint64;\n    INT8                   int8;\n    INT16                  int16;\n    INT32                  int32;\n    INT64                  *int64;\n    float                  float32;\n    double                 *double64;\n    FWP_BYTE_ARRAY16       *byteArray16;\n    FWP_BYTE_BLOB          *byteBlob;\n    SID                    *sid;\n    FWP_BYTE_BLOB          *sd;\n    FWP_TOKEN_INFORMATION  *tokenInformation;\n    FWP_BYTE_BLOB          *tokenAccessInformation;\n    LPWSTR                 unicodeString;\n    FWP_BYTE_ARRAY6        *byteArray6;\n  };\n} FWP_VALUE0;\n```", "```\ntypedef enum FWPS_FIELDS_OUTBOUND_IPPACKET_V4_ {\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS_TYPE,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_INTERFACE,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_INDEX,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_SUB_INTERFACE_INDEX,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_FLAGS,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_TYPE,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_TUNNEL_TYPE,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_COMPARTMENT_ID,\n  FWPS_FIELD_OUTBOUND_IPPACKET_V4_MAX\n} FWPS_FIELDS_OUTBOUND_IPPACKET_V4;\n```", "```\nif (inFixedValues->layerId == FWPS_LAYER_OUTBOUND_IPPACKET_V4)\n{\n  UINT32 remoteAddr = inFixedValues->\n    incomingValues[FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS].value.uint32;\n\n  `--snip--`\n}\n```", "```\ntypedef struct FWPS_INCOMING_METADATA_VALUES0_ {\n  UINT32                          currentMetadataValues;\n  UINT32                          flags;\n  UINT64                          reserved;\n  FWPS_DISCARD_METADATA0          discardMetadata;\n  UINT64                          flowHandle;\n  UINT32                          ipHeaderSize;\n  UINT32                          transportHeaderSize;\n  FWP_BYTE_BLOB                   *processPath;\n  UINT64                          token;\n  UINT64                          processId;\n  UINT32                          sourceInterfaceIndex;\n  UINT32                          destinationInterfaceIndex;\n  ULONG                           compartmentId;\n  FWPS_INBOUND_FRAGMENT_METADATA0 fragmentMetadata;\n  ULONG                           pathMtu;\n  HANDLE                          completionHandle;\n  UINT64                          transportEndpointHandle;\n  SCOPE_ID                        remoteScopeId;\n  WSACMSGHDR                      *controlData;\n  ULONG                           controlDataLength;\n  FWP_DIRECTION                   packetDirection;\n  PVOID                           headerIncludeHeader;\n  ULONG                           headerIncludeHeaderLength;\n  IP_ADDRESS_PREFIX               destinationPrefix;\n  UINT16                          frameLength;\n  UINT64                          parentEndpointHandle; UINT32                          icmpIdAndSequence;\n  DWORD                           localRedirectTargetPID;\n  SOCKADDR                        *originalDestination;\n  HANDLE                          redirectRecords;\n  UINT32                          currentL2MetadataValues;\n  UINT32                          l2Flags;\n  UINT32                          ethernetMacHeaderSize;\n  UINT32                          wiFiOperationMode;\n  NDIS_SWITCH_PORT_ID             vSwitchSourcePortId;\n  NDIS_SWITCH_NIC_INDEX           vSwitchSourceNicIndex;\n  NDIS_SWITCH_PORT_ID             vSwitchDestinationPortId;\n  UINT32                          padding0;\n  USHORT                          padding1;\n  UINT32                          padding2;\n  HANDLE                          vSwitchPacketContext;\n  PVOID                           subProcessTag;\n  UINT64                          reserved1;\n} FWPS_INCOMING_METADATA_VALUES0;\n```", "```\nPS > **netsh**\nnetsh> **wfp**\nnetsh wfp> **show filters**\nData collection successful; output = filters.xml\n\nnetsh wfp> **exit**\n\nPS > **Select-Xml .\\filters.xml -XPath 'wfpdiag/filters/item/displayData/name' |** \n**>> ForEach-Object {$_.Node.InnerXML}**\nRivet IpPacket V4 IpPacket Outbound Filtering Layer\nRivet IpPacket V6 Network Outbound Filtering Layer\nBoot Time Filter\nBoot Time Filter\nRivet IpV4 Inbound Transport Filtering Layer\nRivet IpV6 Inbound Transport Filtering Layer\nRivet IpV4 Outbound Transport Filtering Layer\nRivet IpV6 Outbound Filtering Layer Boot Time Filter\nBoot Time Filter\n`--snip--`\n```", "```\nPS > **Import-Module NtObjectManager**\nPS > **Get-FwSubLayer |** \n**>> Where-Object {$_.Name -notlike ‘WFP Built-in*’} |**\n**>> select Weight, Name, keyname |** \n**>> Sort-Object Weight -Descending | fl**\n\nWeight  :  32765\nName    :  IPxlat Forward IPv4 sub layer\nKeyName :  {4351e497-5d8b-46bc-86d9-abccdb868d6d}\n\nWeight  :  4096\nName    :  windefend\nKeyName  :  {3c1cd879-1b8c-4ab4-8f83-5ed129176ef3}\n\nWeight  :  256\nName    :  OpenVPN\nKeyName :  {2f660d7e-6a37-11e6-a181-001e8c6e04a2}\n```", "```\nPS > **Get-FwFilter |** \n**>> Where-Object {$_.SubLayerKeyName -eq '{3c1cd879-1b8c-4ab4-8f83-5ed129176ef3}'} |** \n**>> Where-Object {$_.IsCallout -eq $true} |**\n**>> select ActionType,Name,LayerKeyName,CalloutKeyName,FilterId |** \n**>> fl**\n\nActionType     : CalloutTerminating\nName           : windefend_stream_v4\nLayerKeyName   : FWPM_LAYER_STREAM_V4\nCalloutKeyName : {d67b238d-d80c-4ba7-96df-4a0c83464fa7}\nFilterId       : 69085 ActionType     : CalloutInspection\nName           : windefend_resource_assignment_v4\nLayerKeyName   : FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4\nCalloutKeyName : {58d7275b-2fd2-4b6c-b93a-30037e577d7e}\nFilterId       : 69087\n\nActionType     : CalloutTerminating\nName           : windefend_datagram_v6\nLayerKeyName   : FWPM_LAYER_DATAGRAM_DATA_V6\nCalloutKeyName : {80cece9d-0b53-4672-ac43-4524416c0353}\nFilterId       : 69092\n\nActionType     : CalloutInspection\nName           : windefend_resource_assignment_v6\nLayerKeyName   : FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6\nCalloutKeyName : {ced78e5f-1dd1-485a-9d35-7e44cc9d784d}\nFilterId       : 69088\n```", "```\nPS > **Get-FwCallout |**\n**>> Where-Object {$_.KeyName -eq '{d67b238d-d80c-4ba7-96df-4a0c83464fa7}'} |**\n>> **select ***\n\nFlags               : ConditionalOnFlow, Registered\nProviderKey         : 00000000-0000-0000-0000-000000000000\nProviderData        : {}\nApplicableLayer     : 3b89653c-c170-49e4-b1cd-e0eeeee19a3e\nCalloutId           : 302\nKey                 : d67b238d-d80c-4ba7-96df-4a0c83464fa7\nName                : windefend_stream_v4\nDescription         : windefend\nKeyName             : {d67b238d-d80c-4ba7-96df-4a0c83464fa7}\nSecurityDescriptor  : `--snip--`\nObjectName          : windefend_stream_v4\nNtType              : Name = Firewall - Index = -1\nIsContainer         : False\n```"]