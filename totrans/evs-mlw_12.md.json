["```\n`--snip--`\n00402100      b8 00 00 00 00  mov eax, 0x00\n00402105...   85 c0           test eax, eax\n00402107...   74 01           jz loc_402109 + 1\n\nloc_402109:\n00402109      e8 8b 45 0a 90  call 0x900a4590\n`--snip--`\n```", "```\nmov eax, [ebp+10]\nnop\n```", "```\n`--snip--`\n00402100 mov eax, 0x00\n00402105 test eax, eax\n00402107 jz loc_402109 + 1\n\n00402109 loc_402109:\n1 00402109 db E8h\n0040210A db 8Bh\n0040210B db 45h\n0040210C db 0Ah\n0040210D db 90h\n`--snip--`\n```", "```\n`--snip--`\n00402100 mov eax, 0x00\n00402105 test eax, eax\n00402107 jz loc_402109 + 1\n\n00402109 loc_402109:\n00402109 db E8h\n0040210A mov eax, [ebp+10]\n0040210D nop\n`--snip--`\n```", "```\n`--snip--`\npush 300h\njmp loc_402B20\n`--snip--`\nloc_402A30:\ncall Sleep\njmp loc_402B65\n`--snip--`\nloc_402B20:\npop ebx\njmp loc_402A30\n`--snip--`\nloc_402B65:\npush ecx\n`--snip--`\n```", "```\n`--snip--`\ninc ecx\npush ecx\ndec ecx\npush ecx\n`--snip--`\n```", "```\npush returnAddress\n`--snip--`\nret\n```", "```\n`--snip--`\nmov eax, evil.429D8C\npush eax\npush dword ptr fs:[0]\nmov dword ptr fs:[0], esp\n`--snip--`\n```", "```\n`--snip--`\nmov [ebp+var_26], offset sub_4511D5\ncall [ebp+var_26]\n`--snip--`\n```", "```\n`--snip--`\npush ecx ; \"kernel32.dll\"\ncall LoadLibraryA\npush eax\npush edx ; \"IsDebuggerPresent\"\ncall GetProcAddress\ncall eax\n`--snip--`\n```", "```\nsub_JumpTable:\ncall sub_2052B2A0 ; jumps to code that further invokes WriteFile\ncall sub_2052B2B0 ; jumps to code that further invokes ReadFile\ncall sub_2052B2C0 ; jumps to code that further invokes IsDebuggerPresent\n`--snip--`\n```", "```\n`--snip--`\nmov  rcx, hModule ; \"advapi32.dll\"\nmov  rdx, \"CryptEncrypt\"\ncall GetProcAddress\nmov  [rbp-39], rax\nmov  rcx, hModule ; \"advapi32.dll\"\nmov  rdx, \"CryptDecrypt\"\ncall GetProcAddress\nmov  [rbp-35], rax\nmov  rcx, hModule ; \"kernel32.dll\"\nmov  rdx, \"WriteFile\"\ncall GetProcAddress\nmov  [rbp-31], rax\n`--snip--`\n```", "```\ncall [rbp-39]\n```", "```\n`--snip--`\nmov   [ebp+file], 65h\nmov   [ebp+file+1], 76h\nmov   [ebp+file+2], 69h\nmov   [ebp+file+3], 6Ch\nmov   [ebp+file+4], 2Eh\nmov   [ebp+file+5], 64h\nmov   [ebp+file+6], 6Ch\nmov   [ebp+file+7], 6Ch\nlea   eax, [ebp+file]\npush  eax\ncall LoadLibraryA\n`--snip--`\n```", "```\n`--snip--`\nmov   [ebp+file], 'e'\nmov   [ebp+file+1], 'v'\nmov   [ebp+file+2], 'i'\nmov   [ebp+file+3], 'l'\nmov   [ebp+file+4], '.'\nmov   [ebp+file+5], 'd'\nmov   [ebp+file+6], 'l'\nmov   [ebp+file+7], 'l'\nlea   eax, [ebp+file]\npush  eax\ncall LoadLibraryA\n`--snip--`\n```", "```\n> FLOSS extracted 55 stackstrings\nGetWindowsDirectoryA\nVirtualAllocEx\nGetSystemDirectoryA\nSoftware\\Microsoft\\Windows NT\\CurrentVersion\\Windows\nDeleteFileA\nWriteFile\nRegDeleteValueA\nRegDeleteKeyA\nineIntel\nGetUserNameA\nCreateProcessA\nrecv\nFindExecutableA\n`--snip--`\n```", "```\n`--snip--`\nmov  [esp+38h+var_38], eax\nmov  [esp+38h+var_34], 7C0DFCAAh ; GetProcAddress\ncall sub_4011A0\nsub  esp, 8\nmov  [ebp+var_24], eax\nmov  eax, [ebp+var_4]\nmov  [esp+38h+var_38], eax\nmov  [esp+38h+var_34], 0EC0E4E8Eh ; LoadLibraryA\ncall sub_4011A0\n`--snip--`\n```"]