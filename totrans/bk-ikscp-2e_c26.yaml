- en: '26'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tutorial: Artwork for a Game'
  prefs: []
  type: TYPE_NORMAL
- en: Games for all kinds of hardware—desktops, gaming consoles, mobile devices—are
    a huge, always-growing, and intensely graphics-hungry industry. Much of game graphics
    these days is in 3D, but plenty of work for traditional 2D graphic editors like
    Inkscape remains—if only as creators of graphic assets for 3D worlds. In this
    tutorial, I show how Inkscape can be a game developer's Swiss Army knife.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial's examples are from two games that I, with the help of my family,
    created for Android mobile devices. They are simple 2D games with arcade-like
    gameplay based on physical simulation (using the Box2D library). Creating a game
    is a complex process that includes design, programming, artwork creation, and
    music, followed by seemingly endless testing, tweaking, and bugfixing—not to mention
    marketing and promotion. We used many different tools and resources to create
    our games. Still, I would rank Inkscape at the top of the list, right after the
    Android Studio IDE by Google. This tutorial is a collection of several miniprojects
    that demonstrate the use of Inkscape for various game development tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '26.1 BotP: Ice Rink'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the games we developed, called *Battle of the Pucks* (*BotP*, available
    at [http://kirsanov.com/battle-of-the-pucks/](http://kirsanov.com/battle-of-the-pucks/)),
    features two teams of pucks on an ice rink. Players propel their pucks with a
    finger swipe, aiming to drive their opponent's pucks into the void beyond the
    edge of the rink.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the image for the ice rink is a challenge because it must give an impression
    of a real ice with its dents, scratches, and skate traces.[Figure 26-1](#fig26-1)
    shows how we did it using multiple semitransparent paths with Roughen path effect.
    The final image is exported as PNG and loaded into the game as a graphic asset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-board.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-1: Making a realistic ice surface'
  prefs: []
  type: TYPE_NORMAL
- en: '26.2 BotP: Inkscape as a Level Editor'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Battle of the Pucks* has multiple levels with a varying initial placement
    of the pucks (and, on advanced levels, various obstacles) on the game board. I
    could define those levels in code, but with more than 90 levels, doing so would
    be tedious work. Generally, when you have visual information, you should use a
    visual tool to work with it, even if that involves some additional investment
    up front. That''s how we came to the idea of using Inkscape as a level editor
    for our game.'
  prefs: []
  type: TYPE_NORMAL
- en: Any game with levels needs some kind of a level editor, and for complex game
    projects, it may be a custom piece of software developed in parallel with the
    game itself. For relatively simple games, such as *BotP*, it makes a perfect sense
    to use Inkscape for this task. Levels are drawn as images, each on its own layer,
    and saved as SVG. The game code loads and parses the SVG file, finds the current
    layer element in it, and reads its child elements to place the pucks and obstacles
    at the start of each level.
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect, this attractively simple idea was not exactly as straightforward
    to implement. The Java library we used for the game had an XML parser, but it
    had nothing to deal with SVG-specific data such as transforms ([A.7](b01.xhtml#sectionA.7)).
    As a result, we had to observe certain limitations when creating and editing the
    levels.svg file for the game.
  prefs: []
  type: TYPE_NORMAL
- en: 26.2.1 Pucks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pucks in our game can be of different sizes, but all of them are round, so in
    levels.svg, they are represented by `circle` elements created by the Ellipse tool
    ([11.4](c11.xhtml#section11.4)). We had to be careful to keep circles circles.
    If you accidentally squeeze or stretch a circle, Inkscape turns it into an `ellipse`
    element in SVG; if you touch the round arc/segment handles of the shape ([11.4.2](c11.xhtml#section11.4.2)),
    it becomes a path. Both of these changes would break our game's parsing code,
    which recognizes only a `circle` element and uses its `cx` and `cy` attributes
    to place the puck and the `r` attribute to determine its size (and mass). The
    white or black color of the circle (parsed out of its `style` attribute) determines
    to which of the two commands this puck belongs ([Figure 26-2](#fig26-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-hourglass.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-2: A *BotP* level called "The Hourglass": the two puck armies are
    ready to battle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the puck circle is moved around in Inkscape, it is important to ensure
    that the circle element doesn''t get the `transform` attribute. In Preferences,
    on the Behavior ▶ Transforms page, the Store Transformations must be set to Optimized.
    Now, when you move the circle, Inkscape updates its`cx` and `cy` attributes without
    creating a `transform` attribute. This approach has nonobvious limitations, though:
    when you rotate or flip a circle, it still gets a `transform` even with optimized
    transformations. We had learned we needed to arrange our puck armies without flipping
    but only by moving or scaling.'
  prefs: []
  type: TYPE_NORMAL
- en: 26.2.2 Obstacles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Advanced game levels contain obstacles—walls that reflect the pucks—making
    the gameplay more interesting and often quite challenging. In levels.svg, obstacles
    are represented as `path` elements with a red stroke color. The game code can
    parse the path data in such an element and re-create it as an object in the game,
    but it has a limitation: it can only create obstacles out of linear fragments.
    To create curvilinear obstacles, we had to approximate them with short linear
    segments, using theExtensions ▶ Modify Path ▶ Flatten Beziers extension, as [Figure 26-3](#fig26-3)
    demonstrates.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-bowl.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-3: A *BotP* level called "Bowls of Cereal" where four pucks on each
    side have their backs against the bowl-shaped walls'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 26-4](#fig26-4) shows how this level is rendered.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-bowl-game.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-4: The "Bowls of Cereal" level in the actual game'
  prefs: []
  type: TYPE_NORMAL
- en: When the game code reads the SVG file, it extracts the coordinates of the path's
    points from the `d` attribute. That data consists of a sequence of one-letter
    commands (such as `l` for linear segment or `c` for a Bézier curve) followed by
    their numeric coordinates. Normally, the coordinates in path data are relative;
    each pair of coordinates provides the displacement relative to the previous point.
    In our game code, we found it was much simpler to deal with absolute coordinates.
    For this, in the Input/Output ▶ SVG Output page of the Preferences dialog, we
    switched path string format to Absolute. The absolute variants of path commands
    use uppercase letters, so after the change you will see `L`, `C`, and so on in
    a `d` attribute of a path.
  prefs: []
  type: TYPE_NORMAL
- en: 26.2.3 Shrinking the File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mobile apps are very sensitive to file size, so before including levels.svg
    into the game's assets, we tried to reduce its size as much as possible. Inkscape
    offers a couple out-of-the-box ways to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Input/Output ▶ SVG Output page of the Preferences dialog has a number of options
    that make the saved SVG files smaller: inline attributes (that is, all attributes
    of each element are placed on the same line), number of indentation spaces, and
    the precision (number of digits) of numeric values. This affects all SVG files
    saved from Inkscape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Optimized SVG output file type that you can select in Save, Save As, or
    Save a Copy dialogs can perform some additional optimizations. It can shrink the
    numeric data by rounding values to a given number of digits, shorten color values,
    convert CSS properties to XML attributes, remove unneeded grouping, remove comments
    and metadata, remove unused IDs, embed raster images, and pretty-print SVG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our purposes, however, this was not quite enough. We wrote our own Python
    script that removes comments, unneeded namespaces, attributes, and style properties
    from the SVG file. This script also alerts us if, despite all precautions, some
    circles have a `transform` attribute or some path data (`d` attribute) uses lowercase
    commands (relative) instead of uppercase (absolute).
  prefs: []
  type: TYPE_NORMAL
- en: '26.3 BotP: The Pucks'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pucks in *BotP* can have different colors, depending on the team to which
    they belong and the chosen color theme. Therefore, each puck object in the game
    is composed of three layered images: a ring-shaped bottom shadow, then a colored
    circle, and then a semitransparent overlay that adds a circular ridge and some
    light color accents and scratches for realism ([Figure 26-5](#fig26-5)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-puck.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-5: Anatomy of a puck and how it looks in the game'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, although the top ridge has a presumed direction of lighting (from
    the top left), in the game, the pucks—including the overlays—rotate freely, but
    this rotation never produces an impression of miscast shadows.
  prefs: []
  type: TYPE_NORMAL
- en: '26.4 BotP: Splash Animation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an intentional contrast to the realistic style of the ice rink and pucks,
    the splash animation (which plays while the game is loading) and the main menu
    feature freehand, untidy, jittery animation. The secret to producing such animation
    is simple: draw every frame anew from scratch, including the parts that do not
    really move from frame to frame. We used the Calligraphic pen ([14.2](c14.xhtml#section14.2))
    with Tremor and/or Wiggle and tried not to be too tidy or stick too closely to
    the guidelines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 26-6](#fig26-6) shows the 10 frames of *BotP*''s splash animation,
    featuring an anthropomorphized puck streaking across the ice in a frenzy. While
    each of these images on its own seems just badly drawn and random, when shown
    in quick succession, they merge into a lifelike and even relatable character.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-botp-splash.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-6: The frames of the animated splash image'
  prefs: []
  type: TYPE_NORMAL
- en: '26.5 Batonic: An Iconic Character'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another game we created is called *Batonic* ([http://kirsanov.com/batonic/](http://kirsanov.com/batonic/)).
    What's interesting about this game is the title character’s design, which is used
    as the game's icon as well as on the cover of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 26-7](#fig26-7) shows how it looks when sliced into its component layered
    objects. We applied the Envelope Deformation path effect to a path of rectangular
    stripes to create the striped overalls and then clipped the result by a copy of
    the blue garment path.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-batonic-icon.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-7: Layers of Mr Bubbel'
  prefs: []
  type: TYPE_NORMAL
- en: In the game itself, this amusing gentleman, named Mr Bubbel, spawns a whole
    army of Bubbels that are falling out of the sky upon a circus baton that you balance
    on the tip of your finger. Here, each character's image is separated into body,
    eyes, arms, and legs, which are animated to make the Bubbels come alive, as shown
    in [Figure 26-8](#fig26-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t07-batonic-bubbles.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26-8: *Batonic*: Bubbels attack your baton.'
  prefs: []
  type: TYPE_NORMAL
