- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONDITIONALS
    AND LOOPS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">条件语句与循环</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.png)'
- en: '*Conditionals* and *loops* are essential elements in programming. They add
    logic and structure to your programs by allowing your code to make decisions based
    on specific conditions. Together, conditionals and loops are known as *control
    structures* because they give you control over when and how often parts of your
    code should run. With conditionals, you can run a particular piece of code only
    if a certain condition is true. Meanwhile, loops enable you to repeatedly run
    a piece of code for as long as a condition remains true.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件语句* 和 *循环* 是编程中的基本元素。它们通过允许你的代码根据特定条件做出决策，为程序添加了逻辑和结构。条件语句和循环一起被称为 *控制结构*，因为它们让你控制代码的执行时机和频率。通过条件语句，你可以仅在某个条件为真时才运行特定的代码。同时，循环允许你在某个条件为真时反复执行一段代码。'
- en: In this chapter you’ll learn how to conditionally execute code with if statements
    and how to loop code with while and for statements. You’ll also learn techniques
    for looping over the elements within a compound data type. This is especially
    useful if you need to perform an operation on every element of an array or object.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用 if 语句有条件地执行代码，以及如何使用 while 和 for 语句进行代码循环。你还将学习如何在复合数据类型的元素上进行循环。这在你需要对数组或对象的每个元素执行操作时尤其有用。
- en: As we start to work with control structures, we’ll begin writing more elaborate
    scripts that are less practical to enter directly into the console, where each
    statement executes as soon as you enter it. For this reason, we’ll switch in this
    chapter to embedding JavaScript code in HTML files and then opening those files
    in the browser. This enables you to run an entire program at once, and lets you
    easily make changes and re-run the whole thing. To review how to do this, see
    “Using a Text Editor” in [Chapter 1](chapter1.xhtml).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用控制结构时，我们将编写更复杂的脚本，这些脚本直接在控制台输入时并不实用，因为每个语句一输入就会立即执行。因此，在本章中，我们将切换到将 JavaScript
    代码嵌入到 HTML 文件中，然后在浏览器中打开这些文件。这让你可以一次运行整个程序，并且能够轻松地进行修改并重新运行整个程序。要复习如何操作，请参阅 [第
    1 章](chapter1.xhtml)中的“使用文本编辑器”部分。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Making Decisions with Conditionals</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用条件语句做决策</samp>
- en: Conditionals let you run a block of code when some condition you set is found
    to be true. For example, you might want to display a warning message only when
    your bank balance is below a certain threshold, or make the player in a game lose
    a life when they get hit by an enemy. You typically create these conditions using
    the comparison operators, like === and >, that we discussed in [Chapter 2](chapter2.xhtml).
    You can also combine multiple conditions with logical operators like && and ||.
    The key is that the overall condition should evaluate to true or false.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句允许你在设定的条件为真时运行一段代码。例如，你可能只希望在银行账户余额低于某个阈值时显示警告消息，或者在游戏中，当玩家被敌人击中时失去一条生命。你通常使用比较运算符，如
    === 和 >，来创建这些条件，这些我们在 [第 2 章](chapter2.xhtml) 中已经讨论过。你还可以使用逻辑运算符，如 && 和 ||，将多个条件组合在一起。关键是，整体条件必须评估为真或假。
- en: 'There are two main kinds of conditional statement: if statements and if…else
    statements. We’ll consider each type in turn.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句有两种主要类型：if 语句和 if…else 语句。我们将依次讨论这两种类型。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if Statements</samp>
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if 语句</samp>
- en: An if statement runs code if some condition is true, or skips that code if the
    condition is false. For example, let’s create a program that logs a message to
    the console if a value is greater than a certain threshold. Open VS Code, create
    a new file called *if.html*, and enter the contents of [Listing 4-1](#Lis4-1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个条件为真，if 语句会执行代码；如果条件为假，它会跳过该段代码。例如，我们可以创建一个程序，当某个值大于指定阈值时，将消息记录到控制台。打开 VS
    Code，创建一个名为 *if.html* 的新文件，并输入 [列表 4-1](#Lis4-1) 的内容。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-1: An if statement</samp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-1：一个 if 语句</samp>
- en: This code begins and ends with the same tags we used in [Chapter 1](chapter1.xhtml)
    to embed JavaScript code in an HTML file. The JavaScript itself first initializes
    the speed variable to 30 and prints that value to the console using console.log.
    Then we use an if statement ❶ to check the value of speed and print another message
    if the value is greater than 25.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'The if statement begins with the if keyword and has two main parts: the *condition*,
    which is written inside parentheses, and the code to run if the condition is true,
    called the *body*, which is written between a set of braces. Here, the condition
    is speed > 25 and the code to run if that’s true is console.log("Slow down!").
    Because we’ve set speed to be greater than 25, the condition is true, so the code
    in the body will run. Therefore, if you open *if.html* in your browser, you should
    see the following output in the JavaScript console:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our condition passed, so the Slow down! message was logged to the console.
    If the condition had been false, however, the code in the body of the if statement
    wouldn’t have run. To see this for yourself, try updating *if.html* by initializing
    speed to 20 rather than 30. Then resave the file and reload the page. This time,
    you should just see the following output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because speed > 25 now evaluates to false, the code inside the braces doesn’t
    run. The code outside the if statement body does still run, however, so we still
    see the value of speed printed out thanks to the first console .log call.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if…else Statements</samp>
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Often you’ll want to run one piece of code when a condition is true, or another
    piece of code when that condition is false. For this, we use an if…else statement.
    To try it out, create a new file called *ifElse.html* and enter the contents of
    [Listing 4-2](#Lis4-2).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-2: An if…else statement</samp>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'This code uses an if…else statement to check if speed is greater than 25. As
    in [Listing 4-1](#Lis4-1), the conditional begins with the if keyword followed
    by the condition in parentheses. Unlike in [Listing 4-1](#Lis4-1), however, the
    if…else statement has two bodies instead of just one, with the else keyword between
    them. The first body ❶ runs if the condition is true, and the second body ❷ runs
    if the condition is false. Each body is enclosed in its own set of braces. In
    this case, because speed is 20, the condition evaluates to false, so the second
    body runs. When you open the file in Chrome, you should see the following output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The message from the else body has been logged to the console. However, if you
    try setting speed to a higher value, like 30, the message from the if body will
    be logged instead.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">More Complex Conditions</samp>
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It’s possible to use more complex Boolean expressions as conditions by incorporating
    logical operators. For example, say you only wanted to check a driver’s speed
    during school hours. Assuming you have an hour variable that contains the current
    hour (using 24-hour time), you could do something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过结合逻辑运算符，使用更复杂的布尔表达式作为条件。例如，假设你只想在上学时间检查驾驶员的速度。假设你有一个包含当前小时数的小时变量（使用24小时制），你可以做如下操作：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The body of this if statement will run only if speed is greater than 25 and
    hour is greater than 7 but less than 16. In other words, a speed above 25 won’t
    cause the body of the if statement to execute if it’s outside school hours.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当速度大于25且小时数大于7但小于16时，这个if语句的主体才会执行。换句话说，如果在上学时间外，即使速度超过25，也不会执行if语句的主体。
- en: 'If your conditions get too complex, it can become hard to read your if statements.
    In that case, it’s often best to write the Boolean expression separately and assign
    it to a new variable. Then you can use this variable as the condition for the
    if statement. For example, the previous conditional could be rewritten as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的条件变得太复杂，可能会使if语句难以阅读。在这种情况下，通常最好将布尔表达式单独写出来，并将其赋值给一个新变量。然后，你可以将这个变量作为if语句的条件。例如，之前的条件可以重写为：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here we’ve assigned the same complex Boolean expression to the tooFastFor School
    variable, then provided that variable to the if statement. Thanks to the meaningful
    variable name, the conditional now almost reads like a sentence: “If too fast
    for school, [do something].”'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将相同的复杂布尔表达式赋值给tooFastForSchool变量，然后将该变量提供给if语句。由于变量名具有意义，现在的条件几乎就像一句话：“如果太快而不适合上学，[做某事]。”
- en: 'If it seems odd to lump the speed and hour tests into a single Boolean variable,
    a middle ground could be to put just the hour checks into a variable, like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果把速度和小时的测试放到一个布尔变量中显得有些奇怪，那么一个折中的方法是把小时检查单独放入一个变量中，像这样：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now the schoolHours variable holds true or false based on whether or not it’s
    during school hours, and the if statement combines this variable with the speed
    test. In the end, the approach you choose comes down to the subjective question
    of how easy you find the code to read.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，schoolHours变量根据是否在上学时间内存储真或假，而if语句将该变量与速度测试结合。最终，你选择的方法归结为一个主观问题：你觉得这段代码容易阅读吗？
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Chained if…else Statements</samp>
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">链式if…else语句</samp>
- en: If you need your code to decide between three or more possible branches, you
    can chain together multiple if…else statements. For example, you can use this
    technique to log one of three possible messages depending on the value of the
    speed variable. Create a new file called *ifElseIf.html* with the code shown in
    [Listing 4-3](#Lis4-3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要让代码在三个或更多可能的分支之间做出选择，可以将多个if…else语句链接在一起。例如，你可以使用这种技巧根据速度变量的值记录三个可能的消息之一。创建一个新文件，命名为*ifElseIf.html*，并使用[清单4-3](#Lis4-3)中的代码。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-3: A chained if…else
    statement with three bodies</samp>'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单4-3：一个带有三个主体的链式if…else语句</samp>
- en: 'This script is very similar to the if…else statement in [Listing 4-2](#Lis4-2),
    except now there are three sections, each with its own body: if, else if, and
    else. Only one of the bodies—the first body whose condition is true—will run.
    Here’s how it works:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本与[清单4-2](#Lis4-2)中的if…else语句非常相似，不同之处在于现在有三个部分，每个部分都有自己的主体：if、else if和else。只有一个主体——第一个条件为真的主体——会运行。下面是它的工作原理：
- en: 1.  First, we use if to check if speed is greater than 25. If it is, the first
    body runs, logging "Slow down!" to the console, and the remaining conditions are
    skipped.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 首先，我们使用if来检查速度是否大于25。如果是，首先的主体将运行，将“减速！”记录到控制台，其余的条件将被跳过。
- en: 2.  Next, we use else if to add a second condition, testing if speed is greater
    than 15 and logging a different message if it is. If the code gets to this point,
    it’ll be because speed > 25 was already found to be false, so essentially speed
    > 15 is testing if speed is between 15 and 25. We could make this explicit by
    writing else if (speed > 15 && speed <= 25), but since we already know speed can’t
    be greater than 25, we don’t need to specify the && speed <= 25 part.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  接下来，我们使用 else if 添加第二个条件，测试速度是否大于 15，并在符合条件时记录不同的信息。如果代码执行到这一点，说明 speed
    > 25 的条件已经被判断为假，因此实际上 speed > 15 是在测试 speed 是否介于 15 和 25 之间。我们可以通过写 else if (speed
    > 15 && speed <= 25) 来明确这一点，但因为我们已经知道 speed 不会大于 25，所以不需要指定 && speed <= 25 部分。
- en: 3.  Finally, we use else to log a third possible message if neither of the previous
    conditions was true.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  最后，我们使用 else 记录第三个可能的消息，如果前两个条件都不成立的话。
- en: 'In this case, we’ve set speed to 20, so only the else if branch should run,
    producing the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将 speed 设置为 20，因此只有 else if 分支会运行，产生以下输出：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Try experimenting with different values of speed to trigger the if and else
    branches instead.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用不同的 speed 值，触发 if 和 else 分支。
- en: You can chain as many else if clauses as you want between the initial if and
    the final else, as shown in [Listing 4-4](#Lis4-4), to create any number of possible
    branches in your conditional structure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在初始 if 和最终 else 之间链式添加任意数量的 else if 子句，如 [清单 4-4](#Lis4-4) 所示，从而在条件结构中创建任意数量的分支。
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-4: A chained if…else</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">statement with five bodies</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-4：一个带有五个分支的链式 if…else 语句</samp>
- en: This chained if…else statement has five possible bodies, depending on whether
    speed is greater than 25, 20, 15, 10, or none of these. As with the previous example,
    the order of conditions matters here. Making the comparisons in order from greatest
    to least allows us to define five ranges of possible values for speed, without
    having to explicitly define the upper bounds of the ranges. For example, we can
    write else if (speed > 15) rather than else if (speed > 15 && speed <= 20) for
    the third branch, since we’ve already confirmed by then that speed isn’t greater
    than 20. [Table 4-1](chapter4.xhtml#tab4-1) shows the full conditions for each
    branch in [Listing 4-4](#Lis4-4).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链式 if…else 语句有五种可能的分支，取决于 speed 是否大于 25、20、15、10，或者这些都不是。与前面的例子一样，条件的顺序在这里很重要。按照从大到小的顺序进行比较，使我们能够定义速度的五个可能值范围，而无需显式定义范围的上限。例如，我们可以写成
    else if (speed > 15)，而不是 else if (speed > 15 && speed <= 20)，因为到那时我们已经确认 speed
    不大于 20。[表 4-1](chapter4.xhtml#tab4-1) 展示了每个分支的完整条件，[清单 4-4](#Lis4-4) 中提供了详细信息。
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-1:</samp> <samp class="SANS_Futura_Std_Book_11">Full
    Conditions and Outputs for [Listing 4-4](#Lis4-4)</samp> |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">表 4-1：</samp> <samp class="SANS_Futura_Std_Book_11">[清单
    4-4](#Lis4-4) 中的完整条件和输出</samp> |'
- en: '| --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Condition</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Output</samp>
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">条件</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">输出</samp>
    |'
- en: '| speed > 25 | Slow down! |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| speed > 25 | 减速！ |'
- en: '| speed > 20 && speed <= 25 | You''re driving at a good speed. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| speed > 20 && speed <= 25 | 你开得速度刚好。 |'
- en: '| speed > 15 && speed <= 20 | You''re driving a little bit too slowly. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| speed > 15 && speed <= 20 | 你开得有点慢。 |'
- en: '| speed > 10 && speed <= 15 | You''re driving too slowly. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| speed > 10 && speed <= 15 | 你开得太慢了。 |'
- en: '| speed <= 10 | You''re driving far too slowly! |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| speed <= 10 | 你开得太慢了！ |'
- en: Note that we could reverse the order of the conditions and bodies and end up
    with the same effect. Reversed, the conditions would be speed <= 10, speed <=
    15, speed <= 20, and speed <= 25. The speed > 25 case would be handled in the
    else block. The important thing to recognize is that the conditions are checked
    one by one, in sequence, so checking the second condition implies that the first
    condition was false. Also, notice that the opposite of > is <= (think which case
    would be hit if speed were exactly 10).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以反转条件和分支的顺序，最终得到相同的效果。反转后，条件将是 speed <= 10、speed <= 15、speed <= 20 和
    speed <= 25。speed > 25 的情况会在 else 块中处理。需要注意的是，条件是逐一检查的，因此检查第二个条件意味着第一个条件为假。同时，注意
    > 的相反是 <=（想想如果 speed 正好是 10 时，应该触发哪个条件）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Repeating Code with Loops</samp>
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用循环重复代码</samp>
- en: Loops are another form of control structure in JavaScript that let you repeatedly
    run the same code as many times as necessary. For example, you could use a loop
    to print out each item on a shopping list. Without a loop, this wouldn’t be possible
    because you don’t necessarily know ahead of time how many items there are on the
    list. Loops are also useful when you want to keep running the same piece of code
    until some condition becomes true; for example, repeatedly asking a user to enter
    their date of birth until they provide a valid date.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是 JavaScript 中另一种控制结构，允许你根据需要多次重复执行相同的代码。例如，你可以使用循环打印购物清单中的每一项。如果没有循环，这将是不可能的，因为你事先并不一定知道清单上有多少项。循环在你希望一直运行相同的代码直到某个条件成立时也非常有用；例如，反复要求用户输入他们的出生日期，直到他们提供有效的日期。
- en: 'You’ll learn about four kinds of loops in this chapter: while loops, for loops,
    for…in loops, and for…of loops. Let’s start with while loops.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习四种循环：`while` 循环、`for` 循环、`for…in` 循环和 `for…of` 循环。我们从 `while` 循环开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">while Loops</samp>
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">while 循环</samp>
- en: Similar to an if statement, a while loop depends on a conditional test. Just
    like an if statement, a while loop will skip executing its code altogether if
    the condition is initially found to be false. Unlike an if statement, however,
    a while loop will keep running the code in its body as long as the condition is
    true, rechecking the condition before each new repetition. In other words, it
    repeatedly runs a block of code *while* some condition is true. This is useful
    when you need to execute a piece of code multiple times, allowing your program
    to keep running as long as it’s needed, instead of just running through once and
    stopping.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `if` 语句，`while` 循环依赖于条件测试。就像 `if` 语句一样，如果条件最初被发现为假，`while` 循环将完全跳过执行其代码。然而，与
    `if` 语句不同的是，`while` 循环会在条件为真时继续运行其代码块，在每次新的一轮执行前重新检查条件。换句话说，它会在某个条件为真时重复执行一段代码。这个特性在你需要多次执行某段代码时非常有用，它使得程序可以在需要时一直运行，而不是只执行一次然后停止。
- en: To see how a while loop works, create a new file called *while.html* and enter
    the contents of [Listing 4-5](#Lis4-5).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 `while` 循环如何工作，创建一个名为 *while.html* 的新文件，并输入 [Listing 4-5](#Lis4-5) 的内容。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-5: A while loop</samp>'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-5: 一个 while 循环</samp>'
- en: 'This script sets speed to 30, then uses a while loop ❶ to bring that speed
    within the limit. We write the while loop using the while keyword, followed by
    a condition in parentheses and a body in braces, much like an if statement. Here,
    our condition checks if speed is greater than 25. Our body logs the value of speed
    to the console, then uses the decrement operator (--) to decrease speed by one.
    This gives us a new value of speed to test the next time through the loop. The
    while loop will keep repeating the body until the condition is false, producing
    the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将速度设置为 30，然后使用 `while` 循环 ❶ 将速度控制在限制范围内。我们使用 `while` 关键字编写 `while` 循环，后面跟着括号中的条件和大括号中的代码块，类似于
    `if` 语句。在这里，我们的条件检查速度是否大于 25。代码块将速度值打印到控制台，然后使用递减运算符（--）将速度减少 1。这为我们提供了一个新的速度值，以便在下一次循环中测试。`while`
    循环会不断重复代码块，直到条件为假，输出如下：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let’s think about what happens when this code runs. The first time we hit the
    while loop, speed is 30, so the condition (speed > 25) is true. This means the
    body of the while loop runs once, outputting Your current speed is 30 mph. and
    decrementing speed from 30 to 29. At the end of the loop body, we go back to the
    start and check the condition again. Since speed is now 29, the condition is still
    true, so we run the body again, printing Your current speed is 29 mph. and decrementing
    speed to 28. Then we go back to the start and check the condition yet again, and
    so on. Finally, the fifth time through the loop, speed decrements from 26 to 25.
    When we then check the condition for a sixth time, it evaluates to false (25 isn’t
    greater than 25). This causes JavaScript to stop looping and jump to the first
    line of code following the while loop ❷, which outputs the final line of text.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来思考当这段代码运行时会发生什么。第一次进入 while 循环时，speed 是 30，因此条件（speed > 25）为真。这意味着 while
    循环的主体执行一次，输出“当前速度是 30 英里每小时”，并将 speed 从 30 减少到 29。循环主体结束时，我们回到起始位置，重新检查条件。由于 speed
    现在是 29，条件仍然为真，因此我们再次执行循环主体，打印“当前速度是 29 英里每小时”，并将 speed 减少到 28。然后我们再次回到起始位置，继续检查条件，依此类推。最终，在第五次循环时，speed
    从 26 减少到 25。当我们第六次检查条件时，它的值为假（25 不大于 25）。这使得 JavaScript 停止循环，并跳到 while 循环之后的第一行代码
    ❷，输出最后一行文本。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for Loops</samp>
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for 循环</samp>
- en: A for loop is another, more structured style of JavaScript loop. Like a while
    loop, a for loop keeps repeating as long as some condition is true. But unlike
    in a while loop, in a for loop the code for managing the repetitions appears at
    the start of the loop, separate from the loop body.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: for 循环是另一种更结构化的 JavaScript 循环方式。像 while 循环一样，for 循环会在某个条件为真时重复执行。但与 while 循环不同，在
    for 循环中，管理重复执行的代码出现在循环的开始部分，与循环主体分开。
- en: Often, loops have a particular *looping variable* that keeps track of the state
    of the loop. A common pattern is to set the looping variable to a starting value,
    update it somehow, and check some condition based on the looping variable to decide
    whether the repetition should stop. For example, our while loop in [Listing 4-5](#Lis4-5)
    follows this pattern, with speed serving as the looping variable. We set speed
    to 30 before entering the loop, decrement speed each time through the loop, and
    keep looping until speed is no longer greater than 25.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 循环通常有一个特定的*循环变量*，用于跟踪循环的状态。一个常见的模式是将循环变量设置为一个初始值，某种方式更新它，并根据循环变量检查某个条件，决定是否停止重复执行。例如，我们在[清单
    4-5](#Lis4-5)中的 while 循环遵循了这个模式，speed 作为循环变量。我们在进入循环之前将 speed 设置为 30，每次通过循环时将
    speed 减少，并一直循环，直到 speed 不再大于 25。
- en: A for loop is just a more convenient way to write this pattern. With for loops,
    we move the code to set up and update the looping variable into the first line
    of the loop, within the same set of parentheses where we write the loop condition.
    To illustrate, let’s rewrite the previous example to use a for loop instead of
    a while loop. Save the contents of [Listing 4-6](#Lis4-6) in *for.html*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: for 循环只是写出这个模式的一种更便捷方式。使用 for 循环时，我们将设置和更新循环变量的代码移动到循环的第一行，放在与循环条件相同的括号内。为了说明这一点，让我们将之前的例子重写，使用
    for 循环代替 while 循环。将[清单 4-6](#Lis4-6)的内容保存到*for.html*中。
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-6: A for loop</samp>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-6：一个 for 循环</samp>
- en: 'We declare the for loop with the for keyword, followed by a set of parentheses
    containing three components, each with its own loop management task:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 for 关键字声明 for 循环，后面跟着一对括号，其中包含三个组成部分，每个部分都有各自的循环管理任务：
- en: 1.  Initialize the looping variable (let speed = 30).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  初始化循环变量（let speed = 30）。
- en: 2.  Set the looping condition (speed > 25).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  设置循环条件（speed > 25）。
- en: 3.  Update the looping variable (speed--). The update will occur after each
    repetition of the loop.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  更新循环变量（speed--）。更新将在每次循环后进行。
- en: These three components are separated by semicolons.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个部分用分号隔开。
- en: Inside the loop body, we have a single statement logging the value of speed
    to the console. Notice that we no longer have to decrement speed as part of the
    loop body, as we did in the while loop; this is covered by the third part of the
    loop management code in parentheses. Likewise, we no longer have to initialize
    speed before declaring the loop; that, too, is handled inside the parentheses.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环体内，我们有一条语句将`speed`的值记录到控制台。注意，我们不再需要像在`while`循环中那样在循环体内递减`speed`；这一部分由循环管理代码的第三部分（括号内）来处理。同样，我们不再需要在声明循环之前初始化`speed`；这一点也在括号内处理。
- en: 'Running this script will produce mostly the same output as the while loop from
    [Listing 4-5](#Lis4-5):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个脚本将产生与[列表 4-5](#Lis4-5)中的`while`循环大致相同的输出：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The only difference is that we can’t log the final speed after the loop ends,
    as we did with the while loop. This is because the speed variable is declared
    as part of the code for the loop itself, rather than before the loop. As such,
    speed is confined to the *scope* of the loop, meaning code outside the loop doesn’t
    have access to it. This is actually one of the advantages of for loops: the looping
    variable exists just for the loop and can’t be accidentally used or changed in
    other parts of the code.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是，我们不能像在`while`循环中那样在循环结束后记录最终速度。这是因为`speed`变量作为循环本身的一部分被声明，而不是在循环之前声明。因此，`speed`被限制在循环的*作用域*内，这意味着循环外的代码无法访问它。实际上，这正是`for`循环的一个优势：循环变量仅存在于循环内，无法在代码的其他部分意外地使用或修改。
- en: There’s nothing you can do with a for loop that you can’t do with a while loop,
    but most programmers find for loops easier to read than the equivalent while loops,
    because all the looping logic is gathered in one place.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环，你可以完成所有`while`循环能做的事情，但大多数程序员发现`for`循环比等效的`while`循环更容易阅读，因为所有循环逻辑都集中在一个地方。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for…of Loops</samp>
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for…of 循环</samp>
- en: A for…of loop cycles through the items in an array. Whereas a while loop or
    for loop keeps looping as long as some condition is true, a for…of loop goes over
    each item in an array, one at a time, and stops when it runs out of items. This
    is quite useful, as it’s common to have to apply the same action to each member
    of an array. For example, if you had an array of numbers, you could create a bar
    chart by looping over those numbers and drawing a rectangle to the screen for
    each one, using the number to set the rectangle’s height in pixels. Similarly,
    if you had an array of objects about movies, you could loop over the movies and
    print their titles.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`for…of` 循环遍历数组中的项。与`while`循环或`for`循环在某个条件为真时一直循环不同，`for…of`循环逐一遍历数组中的每一项，直到没有剩余的项为止。这非常有用，因为通常需要对数组中的每个成员应用相同的操作。例如，如果你有一个数字数组，你可以通过遍历这些数字并为每个数字绘制一个矩形，使用数字来设置矩形的高度（单位为像素）来创建一个柱状图。类似地，如果你有一个关于电影的对象数组，你可以遍历这些电影并打印它们的标题。'
- en: Let’s have a look at a for…of loop in action. Create a new file called *forOf.html*
    containing the contents of [Listing 4-7](#Lis4-7).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个实际的`for…of`循环。创建一个名为*forOf.html*的新文件，内容参考[列表 4-7](#Lis4-7)。
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-7: Looping over an
    array with a</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">for…of loop</samp>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-7：使用</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">for…of
    循环遍历数组</samp>
- en: 'This code logs a sentence for each color in the array colors, then stops. We
    first create the array, containing the strings "Red", "Green", and "Blue". We
    then use the statement for (let color of colors) to set the looping variable color
    to each element in colors, one at a time. The first time through the loop, color
    will be set to "Red". The second time, it will be set to "Green". Finally, the
    third time around, it will be set to "Blue". When the array runs out of items,
    the loop ends. This script should output the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会为数组`colors`中的每个颜色记录一条句子，然后停止。我们首先创建了一个包含字符串“Red”、“Green”和“Blue”的数组。然后我们使用语句`for
    (let color of colors)`将循环变量`color`依次设置为`colors`中的每个元素。第一次执行时，`color`会被设置为“Red”。第二次时，`color`会被设置为“Green”。最后，第三次时，`color`会被设置为“Blue”。当数组中的项用完时，循环结束。该脚本应该输出如下内容：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It’s also possible to use a regular for loop to loop over the items in an array,
    as in [Listing 4-8](#Lis4-8).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用常规的`for`循环来遍历数组中的项，详见[列表 4-8](#Lis4-8)。
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-8: Using a for loop
    instead of a for…of loop to loop over an array</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Here, the looping variable index represents the index of each item in the array.
    Our loop setup code initializes index to 0 and increments it until it’s no longer
    less than the length of the colors array (remember that the highest index in an
    array of length *N* will be *N* – 1). Within the body of the loop, we access the
    current color using colors[index].
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, this for loop style was the only way to loop over an array
    in JavaScript. It’s worth being able to recognize it, as you may see it in a lot
    of older code. These days, the for…of style is more common. However, one benefit
    of the old for loop technique is that it gives you access to the array indices.
    This is helpful because it’s sometimes important to know which element of the
    array you’re currently working with. For example, you might want to do something
    different with even and odd elements, or you might just want to print out the
    indices along with the elements’ values to make a numbered list. You can do that
    with a for…of loop, too, by using the entries method on the array. To see how
    it works, create a new *forOfEntries.html* file and enter the contents of [Listing
    4-9](#Lis4-9).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-9: Using a for…of
    loop with entries to access the indices in an array</samp>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter you saw how applying the Object.entries method to an
    object gives you an array of arrays, where each inner array contains one of the
    object’s keys and its associated value. Here, calling entries on the colors array
    does a similar thing, giving the array [[0, "Red"], [1, "Green"], [2, "Blue"]].
    The syntax let [index, item] is called *destructuring assignment*. It splits each
    two-element array from colors.entries (for example, [0, "Red"]) into two separate
    variables, index for the index number and item for the corresponding value. This
    way we can incorporate the indices into the logged messages, creating the following
    output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that it’s also possible to use destructuring assignment in regular assignment
    statements, outside for…of loops, to break up an array into separate variables.
    For example, you could turn an array of three numbers representing RGB color values
    into individual r, g, and b variables like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Thanks to the destructuring assignment, r now has the value 125, g has the value
    100, and b has the value 0. We won’t be using this syntax much in this book, but
    it’s good to be able to recognize it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for…in Loops</samp>
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A for…in loop cycles through the keys in an object. It works similarly to a
    for…of loop, picking out each key in turn and stopping when there are no more
    keys. The difference is that for…in loops apply to objects instead of arrays,
    looping over the keys, not the values. Save the contents of [Listing 4-10](#Lis4-10)
    as *forIn.html* to try it out.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-10: Looping over
    the keys in an object with a for…in loop</samp>'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we create a me object with three key-value pairs (feel free to fill in
    your own name and age). Then we use a for…in loop to loop over the keys. Similar
    to for…of loop syntax, writing for (let key in me) creates a looping variable
    key and sets it to each key from the me object, one at a time. The first time
    through the loop key is set to "first name", the second time through it’s set
    to "last name", and so on. Within the loop body, we use the notation me[key] to
    access the value associated with the current key, incorporating it into a message,
    along with the key itself. The output should look something like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We could have achieved the same result using Object.entries(me) to get an array
    of pairs of keys and values, and a for…of loop to loop over those. As usual, the
    choice is mostly a personal one.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter showed you how to add logic and structure to your code using conditionals
    and loops. These control structures let you determine when and how often your
    code should run. Conditionals like if and if…else statements run code based on
    whether or not a certain condition is true. Some loops, like while and for, repeat
    the same code multiple times until a certain condition is met. Other loops, like
    for…of and for…in, are for cycling through the elements of an array or object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
