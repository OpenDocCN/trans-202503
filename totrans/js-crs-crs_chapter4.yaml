- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONDITIONALS
    AND LOOPS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Conditionals* and *loops* are essential elements in programming. They add
    logic and structure to your programs by allowing your code to make decisions based
    on specific conditions. Together, conditionals and loops are known as *control
    structures* because they give you control over when and how often parts of your
    code should run. With conditionals, you can run a particular piece of code only
    if a certain condition is true. Meanwhile, loops enable you to repeatedly run
    a piece of code for as long as a condition remains true.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you’ll learn how to conditionally execute code with if statements
    and how to loop code with while and for statements. You’ll also learn techniques
    for looping over the elements within a compound data type. This is especially
    useful if you need to perform an operation on every element of an array or object.
  prefs: []
  type: TYPE_NORMAL
- en: As we start to work with control structures, we’ll begin writing more elaborate
    scripts that are less practical to enter directly into the console, where each
    statement executes as soon as you enter it. For this reason, we’ll switch in this
    chapter to embedding JavaScript code in HTML files and then opening those files
    in the browser. This enables you to run an entire program at once, and lets you
    easily make changes and re-run the whole thing. To review how to do this, see
    “Using a Text Editor” in [Chapter 1](chapter1.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Making Decisions with Conditionals</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Conditionals let you run a block of code when some condition you set is found
    to be true. For example, you might want to display a warning message only when
    your bank balance is below a certain threshold, or make the player in a game lose
    a life when they get hit by an enemy. You typically create these conditions using
    the comparison operators, like === and >, that we discussed in [Chapter 2](chapter2.xhtml).
    You can also combine multiple conditions with logical operators like && and ||.
    The key is that the overall condition should evaluate to true or false.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main kinds of conditional statement: if statements and if…else
    statements. We’ll consider each type in turn.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An if statement runs code if some condition is true, or skips that code if the
    condition is false. For example, let’s create a program that logs a message to
    the console if a value is greater than a certain threshold. Open VS Code, create
    a new file called *if.html*, and enter the contents of [Listing 4-1](#Lis4-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-1: An if statement</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This code begins and ends with the same tags we used in [Chapter 1](chapter1.xhtml)
    to embed JavaScript code in an HTML file. The JavaScript itself first initializes
    the speed variable to 30 and prints that value to the console using console.log.
    Then we use an if statement ❶ to check the value of speed and print another message
    if the value is greater than 25.
  prefs: []
  type: TYPE_NORMAL
- en: 'The if statement begins with the if keyword and has two main parts: the *condition*,
    which is written inside parentheses, and the code to run if the condition is true,
    called the *body*, which is written between a set of braces. Here, the condition
    is speed > 25 and the code to run if that’s true is console.log("Slow down!").
    Because we’ve set speed to be greater than 25, the condition is true, so the code
    in the body will run. Therefore, if you open *if.html* in your browser, you should
    see the following output in the JavaScript console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our condition passed, so the Slow down! message was logged to the console.
    If the condition had been false, however, the code in the body of the if statement
    wouldn’t have run. To see this for yourself, try updating *if.html* by initializing
    speed to 20 rather than 30. Then resave the file and reload the page. This time,
    you should just see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Because speed > 25 now evaluates to false, the code inside the braces doesn’t
    run. The code outside the if statement body does still run, however, so we still
    see the value of speed printed out thanks to the first console .log call.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if…else Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Often you’ll want to run one piece of code when a condition is true, or another
    piece of code when that condition is false. For this, we use an if…else statement.
    To try it out, create a new file called *ifElse.html* and enter the contents of
    [Listing 4-2](#Lis4-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-2: An if…else statement</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code uses an if…else statement to check if speed is greater than 25. As
    in [Listing 4-1](#Lis4-1), the conditional begins with the if keyword followed
    by the condition in parentheses. Unlike in [Listing 4-1](#Lis4-1), however, the
    if…else statement has two bodies instead of just one, with the else keyword between
    them. The first body ❶ runs if the condition is true, and the second body ❷ runs
    if the condition is false. Each body is enclosed in its own set of braces. In
    this case, because speed is 20, the condition evaluates to false, so the second
    body runs. When you open the file in Chrome, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The message from the else body has been logged to the console. However, if you
    try setting speed to a higher value, like 30, the message from the if body will
    be logged instead.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">More Complex Conditions</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It’s possible to use more complex Boolean expressions as conditions by incorporating
    logical operators. For example, say you only wanted to check a driver’s speed
    during school hours. Assuming you have an hour variable that contains the current
    hour (using 24-hour time), you could do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The body of this if statement will run only if speed is greater than 25 and
    hour is greater than 7 but less than 16. In other words, a speed above 25 won’t
    cause the body of the if statement to execute if it’s outside school hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your conditions get too complex, it can become hard to read your if statements.
    In that case, it’s often best to write the Boolean expression separately and assign
    it to a new variable. Then you can use this variable as the condition for the
    if statement. For example, the previous conditional could be rewritten as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we’ve assigned the same complex Boolean expression to the tooFastFor School
    variable, then provided that variable to the if statement. Thanks to the meaningful
    variable name, the conditional now almost reads like a sentence: “If too fast
    for school, [do something].”'
  prefs: []
  type: TYPE_NORMAL
- en: 'If it seems odd to lump the speed and hour tests into a single Boolean variable,
    a middle ground could be to put just the hour checks into a variable, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now the schoolHours variable holds true or false based on whether or not it’s
    during school hours, and the if statement combines this variable with the speed
    test. In the end, the approach you choose comes down to the subjective question
    of how easy you find the code to read.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Chained if…else Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you need your code to decide between three or more possible branches, you
    can chain together multiple if…else statements. For example, you can use this
    technique to log one of three possible messages depending on the value of the
    speed variable. Create a new file called *ifElseIf.html* with the code shown in
    [Listing 4-3](#Lis4-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-3: A chained if…else
    statement with three bodies</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This script is very similar to the if…else statement in [Listing 4-2](#Lis4-2),
    except now there are three sections, each with its own body: if, else if, and
    else. Only one of the bodies—the first body whose condition is true—will run.
    Here’s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  First, we use if to check if speed is greater than 25. If it is, the first
    body runs, logging "Slow down!" to the console, and the remaining conditions are
    skipped.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Next, we use else if to add a second condition, testing if speed is greater
    than 15 and logging a different message if it is. If the code gets to this point,
    it’ll be because speed > 25 was already found to be false, so essentially speed
    > 15 is testing if speed is between 15 and 25. We could make this explicit by
    writing else if (speed > 15 && speed <= 25), but since we already know speed can’t
    be greater than 25, we don’t need to specify the && speed <= 25 part.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  Finally, we use else to log a third possible message if neither of the previous
    conditions was true.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we’ve set speed to 20, so only the else if branch should run,
    producing the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Try experimenting with different values of speed to trigger the if and else
    branches instead.
  prefs: []
  type: TYPE_NORMAL
- en: You can chain as many else if clauses as you want between the initial if and
    the final else, as shown in [Listing 4-4](#Lis4-4), to create any number of possible
    branches in your conditional structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-4: A chained if…else</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">statement with five bodies</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This chained if…else statement has five possible bodies, depending on whether
    speed is greater than 25, 20, 15, 10, or none of these. As with the previous example,
    the order of conditions matters here. Making the comparisons in order from greatest
    to least allows us to define five ranges of possible values for speed, without
    having to explicitly define the upper bounds of the ranges. For example, we can
    write else if (speed > 15) rather than else if (speed > 15 && speed <= 20) for
    the third branch, since we’ve already confirmed by then that speed isn’t greater
    than 20. [Table 4-1](chapter4.xhtml#tab4-1) shows the full conditions for each
    branch in [Listing 4-4](#Lis4-4).
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Table 4-1:</samp> <samp class="SANS_Futura_Std_Book_11">Full
    Conditions and Outputs for [Listing 4-4](#Lis4-4)</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Condition</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Output</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| speed > 25 | Slow down! |'
  prefs: []
  type: TYPE_TB
- en: '| speed > 20 && speed <= 25 | You''re driving at a good speed. |'
  prefs: []
  type: TYPE_TB
- en: '| speed > 15 && speed <= 20 | You''re driving a little bit too slowly. |'
  prefs: []
  type: TYPE_TB
- en: '| speed > 10 && speed <= 15 | You''re driving too slowly. |'
  prefs: []
  type: TYPE_TB
- en: '| speed <= 10 | You''re driving far too slowly! |'
  prefs: []
  type: TYPE_TB
- en: Note that we could reverse the order of the conditions and bodies and end up
    with the same effect. Reversed, the conditions would be speed <= 10, speed <=
    15, speed <= 20, and speed <= 25. The speed > 25 case would be handled in the
    else block. The important thing to recognize is that the conditions are checked
    one by one, in sequence, so checking the second condition implies that the first
    condition was false. Also, notice that the opposite of > is <= (think which case
    would be hit if speed were exactly 10).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Repeating Code with Loops</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Loops are another form of control structure in JavaScript that let you repeatedly
    run the same code as many times as necessary. For example, you could use a loop
    to print out each item on a shopping list. Without a loop, this wouldn’t be possible
    because you don’t necessarily know ahead of time how many items there are on the
    list. Loops are also useful when you want to keep running the same piece of code
    until some condition becomes true; for example, repeatedly asking a user to enter
    their date of birth until they provide a valid date.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn about four kinds of loops in this chapter: while loops, for loops,
    for…in loops, and for…of loops. Let’s start with while loops.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">while Loops</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to an if statement, a while loop depends on a conditional test. Just
    like an if statement, a while loop will skip executing its code altogether if
    the condition is initially found to be false. Unlike an if statement, however,
    a while loop will keep running the code in its body as long as the condition is
    true, rechecking the condition before each new repetition. In other words, it
    repeatedly runs a block of code *while* some condition is true. This is useful
    when you need to execute a piece of code multiple times, allowing your program
    to keep running as long as it’s needed, instead of just running through once and
    stopping.
  prefs: []
  type: TYPE_NORMAL
- en: To see how a while loop works, create a new file called *while.html* and enter
    the contents of [Listing 4-5](#Lis4-5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-5: A while loop</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This script sets speed to 30, then uses a while loop ❶ to bring that speed
    within the limit. We write the while loop using the while keyword, followed by
    a condition in parentheses and a body in braces, much like an if statement. Here,
    our condition checks if speed is greater than 25. Our body logs the value of speed
    to the console, then uses the decrement operator (--) to decrease speed by one.
    This gives us a new value of speed to test the next time through the loop. The
    while loop will keep repeating the body until the condition is false, producing
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let’s think about what happens when this code runs. The first time we hit the
    while loop, speed is 30, so the condition (speed > 25) is true. This means the
    body of the while loop runs once, outputting Your current speed is 30 mph. and
    decrementing speed from 30 to 29. At the end of the loop body, we go back to the
    start and check the condition again. Since speed is now 29, the condition is still
    true, so we run the body again, printing Your current speed is 29 mph. and decrementing
    speed to 28. Then we go back to the start and check the condition yet again, and
    so on. Finally, the fifth time through the loop, speed decrements from 26 to 25.
    When we then check the condition for a sixth time, it evaluates to false (25 isn’t
    greater than 25). This causes JavaScript to stop looping and jump to the first
    line of code following the while loop ❷, which outputs the final line of text.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for Loops</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A for loop is another, more structured style of JavaScript loop. Like a while
    loop, a for loop keeps repeating as long as some condition is true. But unlike
    in a while loop, in a for loop the code for managing the repetitions appears at
    the start of the loop, separate from the loop body.
  prefs: []
  type: TYPE_NORMAL
- en: Often, loops have a particular *looping variable* that keeps track of the state
    of the loop. A common pattern is to set the looping variable to a starting value,
    update it somehow, and check some condition based on the looping variable to decide
    whether the repetition should stop. For example, our while loop in [Listing 4-5](#Lis4-5)
    follows this pattern, with speed serving as the looping variable. We set speed
    to 30 before entering the loop, decrement speed each time through the loop, and
    keep looping until speed is no longer greater than 25.
  prefs: []
  type: TYPE_NORMAL
- en: A for loop is just a more convenient way to write this pattern. With for loops,
    we move the code to set up and update the looping variable into the first line
    of the loop, within the same set of parentheses where we write the loop condition.
    To illustrate, let’s rewrite the previous example to use a for loop instead of
    a while loop. Save the contents of [Listing 4-6](#Lis4-6) in *for.html*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-6: A for loop</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'We declare the for loop with the for keyword, followed by a set of parentheses
    containing three components, each with its own loop management task:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Initialize the looping variable (let speed = 30).
  prefs: []
  type: TYPE_NORMAL
- en: 2.  Set the looping condition (speed > 25).
  prefs: []
  type: TYPE_NORMAL
- en: 3.  Update the looping variable (speed--). The update will occur after each
    repetition of the loop.
  prefs: []
  type: TYPE_NORMAL
- en: These three components are separated by semicolons.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the loop body, we have a single statement logging the value of speed
    to the console. Notice that we no longer have to decrement speed as part of the
    loop body, as we did in the while loop; this is covered by the third part of the
    loop management code in parentheses. Likewise, we no longer have to initialize
    speed before declaring the loop; that, too, is handled inside the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this script will produce mostly the same output as the while loop from
    [Listing 4-5](#Lis4-5):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The only difference is that we can’t log the final speed after the loop ends,
    as we did with the while loop. This is because the speed variable is declared
    as part of the code for the loop itself, rather than before the loop. As such,
    speed is confined to the *scope* of the loop, meaning code outside the loop doesn’t
    have access to it. This is actually one of the advantages of for loops: the looping
    variable exists just for the loop and can’t be accidentally used or changed in
    other parts of the code.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s nothing you can do with a for loop that you can’t do with a while loop,
    but most programmers find for loops easier to read than the equivalent while loops,
    because all the looping logic is gathered in one place.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for…of Loops</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A for…of loop cycles through the items in an array. Whereas a while loop or
    for loop keeps looping as long as some condition is true, a for…of loop goes over
    each item in an array, one at a time, and stops when it runs out of items. This
    is quite useful, as it’s common to have to apply the same action to each member
    of an array. For example, if you had an array of numbers, you could create a bar
    chart by looping over those numbers and drawing a rectangle to the screen for
    each one, using the number to set the rectangle’s height in pixels. Similarly,
    if you had an array of objects about movies, you could loop over the movies and
    print their titles.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at a for…of loop in action. Create a new file called *forOf.html*
    containing the contents of [Listing 4-7](#Lis4-7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-7: Looping over an
    array with a</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">for…of loop</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code logs a sentence for each color in the array colors, then stops. We
    first create the array, containing the strings "Red", "Green", and "Blue". We
    then use the statement for (let color of colors) to set the looping variable color
    to each element in colors, one at a time. The first time through the loop, color
    will be set to "Red". The second time, it will be set to "Green". Finally, the
    third time around, it will be set to "Blue". When the array runs out of items,
    the loop ends. This script should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to use a regular for loop to loop over the items in an array,
    as in [Listing 4-8](#Lis4-8).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-8: Using a for loop
    instead of a for…of loop to loop over an array</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the looping variable index represents the index of each item in the array.
    Our loop setup code initializes index to 0 and increments it until it’s no longer
    less than the length of the colors array (remember that the highest index in an
    array of length *N* will be *N* – 1). Within the body of the loop, we access the
    current color using colors[index].
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, this for loop style was the only way to loop over an array
    in JavaScript. It’s worth being able to recognize it, as you may see it in a lot
    of older code. These days, the for…of style is more common. However, one benefit
    of the old for loop technique is that it gives you access to the array indices.
    This is helpful because it’s sometimes important to know which element of the
    array you’re currently working with. For example, you might want to do something
    different with even and odd elements, or you might just want to print out the
    indices along with the elements’ values to make a numbered list. You can do that
    with a for…of loop, too, by using the entries method on the array. To see how
    it works, create a new *forOfEntries.html* file and enter the contents of [Listing
    4-9](#Lis4-9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-9: Using a for…of
    loop with entries to access the indices in an array</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter you saw how applying the Object.entries method to an
    object gives you an array of arrays, where each inner array contains one of the
    object’s keys and its associated value. Here, calling entries on the colors array
    does a similar thing, giving the array [[0, "Red"], [1, "Green"], [2, "Blue"]].
    The syntax let [index, item] is called *destructuring assignment*. It splits each
    two-element array from colors.entries (for example, [0, "Red"]) into two separate
    variables, index for the index number and item for the corresponding value. This
    way we can incorporate the indices into the logged messages, creating the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that it’s also possible to use destructuring assignment in regular assignment
    statements, outside for…of loops, to break up an array into separate variables.
    For example, you could turn an array of three numbers representing RGB color values
    into individual r, g, and b variables like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to the destructuring assignment, r now has the value 125, g has the value
    100, and b has the value 0. We won’t be using this syntax much in this book, but
    it’s good to be able to recognize it.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">for…in Loops</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A for…in loop cycles through the keys in an object. It works similarly to a
    for…of loop, picking out each key in turn and stopping when there are no more
    keys. The difference is that for…in loops apply to objects instead of arrays,
    looping over the keys, not the values. Save the contents of [Listing 4-10](#Lis4-10)
    as *forIn.html* to try it out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-10: Looping over
    the keys in an object with a for…in loop</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we create a me object with three key-value pairs (feel free to fill in
    your own name and age). Then we use a for…in loop to loop over the keys. Similar
    to for…of loop syntax, writing for (let key in me) creates a looping variable
    key and sets it to each key from the me object, one at a time. The first time
    through the loop key is set to "first name", the second time through it’s set
    to "last name", and so on. Within the loop body, we use the notation me[key] to
    access the value associated with the current key, incorporating it into a message,
    along with the key itself. The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We could have achieved the same result using Object.entries(me) to get an array
    of pairs of keys and values, and a for…of loop to loop over those. As usual, the
    choice is mostly a personal one.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter showed you how to add logic and structure to your code using conditionals
    and loops. These control structures let you determine when and how often your
    code should run. Conditionals like if and if…else statements run code based on
    whether or not a certain condition is true. Some loops, like while and for, repeat
    the same code multiple times until a certain condition is met. Other loops, like
    for…of and for…in, are for cycling through the elements of an array or object.
  prefs: []
  type: TYPE_NORMAL
