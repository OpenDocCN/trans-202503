- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Capabilities
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 能力
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: When analyzing malware, it’s often paramount to understand what happens after
    a successful infection. In other words, what does the malware actually do? Though
    the answer to this question will depend on a particular malware’s goals, it may
    include surveying the system, escalating privileges, executing commands, exfiltrating
    files, ransoming user files, or even mining cryptocurrency. In this chapter, we’ll
    take a detailed look at the capabilities commonly found in Mac malware.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析恶意软件时，理解成功感染后的发生情况通常至关重要。换句话说，恶意软件到底做了什么？虽然这个问题的答案取决于特定恶意软件的目标，但它可能包括调查系统、提升权限、执行命令、窃取文件、勒索用户文件，甚至挖掘加密货币。在本章中，我们将详细探讨常见的Mac恶意软件能力。
- en: Categorizing Mac Malware Capabilities
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类Mac恶意软件的能力
- en: 'A malware’s capabilities are largely dependent on the malware’s type. Generally
    speaking, we can place Mac malware into two broad categories: criminal and espionage.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件的能力在很大程度上取决于恶意软件的类型。一般而言，我们可以将Mac恶意软件分为两大类：犯罪和间谍。
- en: 'Cybercriminals who create malware are largely motivated by a single factor:
    money! As such, malware that falls into this category possesses capabilities that
    seek to help the malware author profit, perhaps by displaying ads, hijacking search
    results, mining cryptocurrency, or encrypting user files for ransom. Adware falls
    into this category, as it’s designed to surreptitiously generate revenue for its
    creator. (The difference between adware and malware can be rather nuanced, and
    in many cases arguably imperceivable. As such, here, we won’t differentiate between
    the two.)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创造恶意软件的网络犯罪分子通常由一个单一因素驱动：金钱！因此，属于这一类别的恶意软件具有一些能力，旨在帮助恶意软件作者从中获利，可能通过展示广告、劫持搜索结果、挖掘加密货币或加密用户文件进行勒索。广告软件属于这一类别，因为它旨在暗中为创作者生成收入。（广告软件与恶意软件的区别往往比较微妙，在许多情况下几乎无法察觉。因此，在这里，我们不做区分。）
- en: On the other hand, malware designed to spy on its victims (for example, by three-letter
    government agencies) is more likely to contain stealthier or more comprehensive
    capabilities, perhaps featuring the ability to record audio off the system microphone
    or expose an interactive shell to allow a remote attacker to execute arbitrary
    commands.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，旨在监视受害者的恶意软件（例如，某些政府机构）更可能具备更隐蔽或更全面的能力，可能包括通过系统麦克风录音或暴露一个交互式命令行，允许远程攻击者执行任意命令。
- en: Of course, there are overlaps in the capabilities of these two broad categories.
    For example, the ability to download and execute arbitrary binaries is an appealing
    capability to most malware authors, as it provides the means to either update
    or dynamically expand their malicious creations ([Figure 3-1](#figure3-1)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这两个大类的能力存在重叠。例如，下载并执行任意二进制文件的能力对大多数恶意软件作者来说是非常有吸引力的，因为它提供了更新或动态扩展其恶意创作的手段（[图3-1](#figure3-1)）。
- en: '![A venn diagram in which the left side is labeled “Criminal” and the right
    side is labeled “Espionage.” The left side includes “Ads,” “Clicks,” and "Ransom.”
    The right side includes “Shell,” “Video capture,” and “Audio capture.” The overlapping
    center includes “Keylogging,” “Surveys,” “Up/downloads,” and “Cmd execution.”](image_fi/501942c03/f03001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![一个维恩图，左侧标注为“犯罪”，右侧标注为“间谍”。左侧包括“广告”、“点击”和“勒索”。右侧包括“Shell”、“视频捕获”和“音频捕获”。重叠部分包括“键盘记录”、“调查”、“上传/下载”和“命令执行。”](image_fi/501942c03/f03001.png)'
- en: 'Figure 3-1: A categorization of malware’s capabilities'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-1：恶意软件能力的分类
- en: Survey and Reconnaissance
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查与侦察
- en: In both crime-oriented and espionage-oriented malware, we often find logic designed
    to conduct surveys or reconnaissance of a system’s environment, for two main reasons.
    First, this gives the malware insight into its surroundings, which may drive subsequent
    decisions. For example, malware may choose not to persistently infect a system
    if it detects third-party security tools. Or, if it finds itself running with
    non-root privileges, it may attempt to escalate its privileges (or perhaps simply
    skip actions that require such rights). Thus, the malware often executes reconnaissance
    logic before any other malicious actions are taken.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在犯罪导向和间谍导向的恶意软件中，我们经常会发现一些设计用于调查或侦察系统环境的逻辑，主要有两个原因。首先，这可以让恶意软件了解其周围环境，从而驱动后续的决策。例如，如果恶意软件检测到第三方安全工具，它可能选择不持续感染该系统。或者，如果它发现自己以非根用户权限运行，它可能会尝试提升权限（或仅仅跳过需要此类权限的操作）。因此，恶意软件通常会在进行任何其他恶意操作之前执行侦察逻辑。
- en: Second, malware may transmit the survey information it collects back to the
    attacker’s command and control server, where the attacker may use it to uniquely
    identify the infected system (usually by finding some system-specific unique identifier)
    or pinpoint infected computers of interest. In the latter case, what initially
    may appear to be an indiscriminate attack of thousands of systems may in reality
    be a highly targeted campaign, where, based on the survey information, the attacker
    will eventually abandon the majority of infected systems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，恶意软件可能会将其收集的调查信息传回攻击者的命令与控制服务器，在那里攻击者可能会利用这些信息唯一标识感染的系统（通常是通过查找某些系统特有的唯一标识符）或确定感兴趣的感染计算机。在后者的情况下，最初看起来可能是对成千上万系统的无差别攻击，实际上可能是一次高度针对性的行动，根据调查信息，攻击者最终会放弃大多数感染的系统。
- en: Let’s briefly look at some specific survey capabilities found in several Mac
    malware specimens. Where relevant, I’ll note how the attacker uses this survey
    data. We’ll start with a version of the Proton malware. Once Proton has made its
    way onto a Mac, it surveys the system in order to determine if any third-party
    firewalls are installed. If it finds one, the malware will not persistently infect
    the system and instead simply exits. Why? Such firewall products would likely
    alert the user to the presence of the malware when it attempts to connect to its
    command and control server. Thus, the malware authors decided it would be wiser
    to skip persistently infecting such systems, rather than risk detection.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解几种 Mac 恶意软件样本中的特定调查功能。相关时，我会指出攻击者如何利用这些调查数据。我们从一种 Proton 恶意软件版本开始。一旦
    Proton 进入 Mac 系统，它会进行系统调查，以确定是否安装了任何第三方防火墙。如果找到了防火墙，恶意软件将不会持续感染该系统，而是直接退出。为什么？因为此类防火墙产品可能会在恶意软件尝试连接到其命令与控制服务器时，提醒用户存在恶意软件。因此，恶意软件作者决定跳过持续感染这些系统，而不是冒着被检测的风险。
- en: 'Proton’s survey logic detects firewalls by checking for the presence of files
    associated with specific firewall products. For example, in the following snippet
    of the malware’s decompiled code, we find a check for a kernel extension that
    belongs to the popular LittleSnitch firewall ([Listing 3-1](#listing3-1)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Proton 的调查逻辑通过检查特定防火墙产品相关文件的存在来检测防火墙。例如，在以下恶意软件反编译代码片段中，我们发现了一个检查属于流行防火墙 LittleSnitch
    的内核扩展的操作（[列表 3-1](#listing3-1)）：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 3-1: Detection of the LittleSnitch firewall (Proton)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-1：检测 LittleSnitch 防火墙（Proton）
- en: Here, the malware first extracts a path to Little Snitch’s kernel extension
    from an embedded dictionary of hard-coded paths 1. It then checks if the kernel
    extension is found on the system, via the `fileExistsAtPath` API. If the kernel
    extension is indeed found, this implies the firewall is installed, which triggers
    the malware to prematurely exit 2.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，恶意软件首先从硬编码路径的嵌入式字典中提取一个指向 Little Snitch 内核扩展的路径 1。然后，它通过 `fileExistsAtPath`
    API 检查系统中是否找到该内核扩展。如果确实找到了内核扩展，这意味着防火墙已安装，从而触发恶意软件提前退出 2。
- en: MacDownloader is another Mac malware specimen containing survey capabilities.
    Unlike Proton, its goal is not so much about actionable reconnaissance, but rather
    to collect detailed information about the infected system to send to the remote
    attackers. As an *Iran Threats* blog post about the malware notes, this information
    includes the user’s *keychains* (which contain passwords, certificates, and more),
    as well as details about “the running processes, installed applications, and the
    username and password which are acquired through a fake System Preferences dialog.”^([1](#c03-endnote-1))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Dumping the Objective-C class information, which we’ll cover in Chapter 5,
    from the malware’s binary *Bitdefender Adware Removal Tool* reveals various descriptive
    methods responsible for performing and exfiltrating the survey ([Listing 3-2](#listing3-2)):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 3-2: Survey-related methods (MacDownloader)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Before MacDownloader sends the collected survey to the attackers, it saves
    it to a local file, */tmp/applist.txt*. Running the malware in a virtual machine
    allows us to capture the results of the survey by examining this file ([Listing
    3-3](#listing3-3)):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 3-3: A survey (MacDownloader)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this survey information includes basic version information about
    the infected machine, the user’s root password, installed applications, and a
    list of running applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Privilege Escalation
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During an initial survey of a newly infected machine, malware often queries
    its runtime environment to ascertain its privilege level. When malware initially
    gains the ability to execute code on a target system, it often finds itself running
    within a sandbox, or in the context of the currently logged-in user, rather than
    as root. Generally, it will want to escape any sandbox or elevate its privileges
    to root so that it can more comprehensively interact with the infected system
    and perform privileged actions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Escaping Sandboxes
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Though malware that leverages sandbox escapes is rare, as these escapes generally
    require an exploit, we can find an example of this in a malicious Microsoft Office
    document from 2018\. Titled *BitcoinMagazine-Quidax_InterviewQuestions_2018,*
    this document contained malicious macros that ran automatically when the file
    was opened in Microsoft Word, if the user had enabled macros. Examining the malicious
    document reveals an embedded Python script containing logic to download and execute
    Metasploit’s Meterpreter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'However, macOS sandboxes documents, so any code they execute finds itself running
    in a highly restricted, low-privileged environment. Or does it? Taking a closer
    look at the document’s malicious macro code reveals logic to create an interestingly
    named launch agent property list, *~$com.xpnsec.plist* ([Listing 3-4](#listing3-4)):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 3-4: Escaping the sandbox via a launch agent'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to a vulnerability in older versions of Microsoft Word on macOS, programs
    can create launch agents property lists prefixed with `~$`, such as *~$com.xpnsec.plist*,
    from within a sandbox. Such plists can instruct macOS to load a launch agent that
    will run outside the sandbox the next time the user logs in. Armed with this escape,
    the Meterpreter payload can gain execution outside the constrictive sandbox, allowing
    the attacker far wider access to the infected system. For more detailed analysis
    of the *BitcoinMagazine-Quidax_InterviewQuestions_2018* document and the sandbox
    escape it exploited, see my write-ups: “Word to Your Mac: Analyzing a Malicious
    Word Document Targeting macOS Users” and “Escaping the Microsoft Office Sandbox.”^([2](#c03-endnote-2))'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '由于较旧版本的 Microsoft Word 在 macOS 上存在漏洞，程序可以在沙箱内创建以 `~$` 为前缀的启动代理属性列表，如 *~$com.xpnsec.plist*。这些属性列表可以指示
    macOS 在用户下次登录时加载一个启动代理，在沙箱外运行。通过这一逃逸手段，Meterpreter 有效负载能够在沙箱外执行，从而使攻击者获得对感染系统的更广泛访问权限。有关
    *BitcoinMagazine-Quidax_InterviewQuestions_2018* 文档和其利用的沙箱逃逸的详细分析，请参见我的相关文章：“Word
    to Your Mac: Analyzing a Malicious Word Document Targeting macOS Users” 和 “Escaping
    the Microsoft Office Sandbox。”^([2](#c03-endnote-2))'
- en: Gaining Root Privileges
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取 Root 权限
- en: Once outside the sandbox (or if the sandbox was never an issue, as is often
    the case when a user directly runs the malware), the malware often attempts to
    gain root privileges. Armed with root privileges, malware can perform more invasive
    and stealthier actions that would otherwise be blocked.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦脱离沙箱（或者如果沙箱本来就不是问题，比如用户直接运行恶意软件的情况），恶意软件通常会尝试获取 root 权限。有了 root 权限后，恶意软件能够执行更多侵入性且隐蔽的操作，而这些操作在没有
    root 权限的情况下会被阻止。
- en: Malware can escalate its privileges using several methods, the first of which
    is to simply ask the user! For example, during the installation of a package (a
    *.pkg* file), actions that require root privileges will automatically trigger
    an authorization prompt. As shown in [Figure 3-2](#figure3-2), when a package
    trojanized with EvilQuest is opened, the malware’s installation logic will trigger
    such a prompt.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可以通过多种方法提升权限，其中最简单的一种方法就是直接请求用户授权！例如，在安装一个软件包（*.pkg* 文件）时，任何需要 root 权限的操作都会自动触发授权提示。如
    [图 3-2](#figure3-2) 所示，当一个被 EvilQuest 木马感染的包被打开时，恶意软件的安装逻辑会触发此类提示。
- en: '![The prompt says “Installer is trying to install new software. Enter your
    password to allow this,” and it is followed by the space to select your User Name
    and type in your Password. Two buttons, Cancel and Install Software, are directly
    beneath this.](image_fi/501942c03/f03002.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![提示信息显示“安装程序正在尝试安装新软件。请输入您的密码以允许此操作”，其下方是选择用户名和输入密码的空间。下面直接有两个按钮，取消和安装软件。](image_fi/501942c03/f03002.png)'
- en: 'Figure 3-2: An authorization prompt (EvilQuest)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2：授权提示（EvilQuest）
- en: As users are often prompted for their administrative credentials during package
    installations, and as the prompt originates from the context of the system’s installer
    application, most users will comply, thus handing the malware root privileges.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户在安装软件包时经常会被要求提供管理员凭据，而这个提示来自系统安装程序应用的上下文环境，因此大多数用户会选择同意，从而授予恶意软件 root 权限。
- en: 'If the malware isn’t distributed as a package, it can also request elevated
    privileges by invoking various system APIs. For example, the deprecated macOS
    `AuthorizationExecuteWithPrivileges` API will run an executable with root privileges
    after a user has provided the necessary credentials. One example of malware that
    leverages this API is ColdRoot, which invokes it in a function aptly named (though
    misspelled) `LETMEIN_$$_EXEUTEWITHPRIVILEGES` ([Listing 3-5](#listing3-5)):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果恶意软件不是作为软件包分发的，它也可以通过调用各种系统 API 请求提升权限。例如，已废弃的 macOS `AuthorizationExecuteWithPrivileges`
    API 会在用户提供必要凭据后，以 root 权限运行可执行文件。一个利用此 API 的恶意软件示例是 ColdRoot，它在一个名为（虽然拼写错误）`LETMEIN_$$_EXEUTEWITHPRIVILEGES`
    的函数中调用它 ([列表 3-5](#listing3-5))：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 3-5: Invocation of the `AuthorizationExecuteWithPrivileges` API (ColdRoot)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-5：调用 `AuthorizationExecuteWithPrivileges` API（ColdRoot）
- en: The invocation of the API generates a system request for the user to authenticate
    so that the malware can run itself as root ([Figure 3-3](#figure3-3)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 调用该 API 会生成一个系统请求，要求用户进行身份验证，以便恶意软件能够以 root 权限运行自身 ([图 3-3](#figure3-3))。
- en: '![The prompt states “com.apple.audio.driver2 wants to make changes. Enter your
    password to allow this.” Spaces to enter one’s User Name and Password follow,
    and buttons labeled Cancel and OK are directly below this.](image_fi/501942c03/f03003.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![提示显示“com.apple.audio.driver2想要进行更改。请输入密码以允许此操作。”接下来是输入用户名和密码的空格，取消和确定按钮紧随其下。](image_fi/501942c03/f03003.png)'
- en: 'Figure 3-3: An authorization prompt, via the `AuthorizationExecuteWithPrivileges`
    API (ColdRoot)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3-3: 通过`AuthorizationExecuteWithPrivileges` API进行的授权提示（ColdRoot）'
- en: More sophisticated malware may seek to gain root or even kernel access to perform
    privileged actions via elevation-of-privilege exploits. In 2014, researchers at
    FireEye discovered the XSLCmd malware.^([3](#c03-endnote-3)) Though it was a fairly
    standard backdoor, it contained an initially overlooked zero-day exploit that
    allowed it to globally capture all keystrokes on an infected system. At the time,
    the current version of Mac OS X required the enablement of assistive devices in
    order for a program to globally capture keystrokes. A program could enable these
    devices by creating the file */var/db/.AccessibilityAPIEnabled*. However, this
    file creation required root privileges.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的恶意软件可能会寻求通过特权提升漏洞获取root甚至内核访问权限，以执行特权操作。2014年，FireEye的研究人员发现了XSLCmd恶意软件。^([3](#c03-endnote-3))
    虽然它是一个相当标准的后门，但它包含了一个最初被忽视的零日漏洞，使其能够在感染的系统上全局捕获所有按键。当时，当前版本的Mac OS X要求启用辅助设备才能让程序全局捕获按键。程序可以通过创建文件*/var/db/.AccessibilityAPIEnabled*来启用这些设备。然而，创建该文件需要root权限。
- en: 'To circumvent this requirement, the malware, which was running with normal
    user privileges, abused macOS’s `Authenticator` and `UserUtilities` classes to
    send a message to the *writeconfig.xpc* service. This service, which ran with
    root privileges, did not authenticate clients and so allowed any program to connect
    to it and request the execution of privileged actions. Thus, the malware could
    coerce the service to create the file needed to enable assistive devices (*/var/db/.AccessibilityAPIEnabled*),
    allowing global keylogging to commence ([Listing 3-6](#listing3-6)):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过这一要求，该恶意软件以普通用户权限运行，利用macOS的`Authenticator`和`UserUtilities`类向*writeconfig.xpc*服务发送消息。该服务以root权限运行，但未对客户端进行身份验证，因此允许任何程序连接到它并请求执行特权操作。因此，恶意软件可以强迫该服务创建所需的文件，以启用辅助设备（*/var/db/.AccessibilityAPIEnabled*），从而开始全局键盘记录（[列表
    3-6](#listing3-6)）：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 3-6: Exploitation of a writeconfig XPC service zero-day (XSLCmd)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 3-6: 利用writeconfig XPC服务的零日漏洞（XSLCmd）'
- en: In this code snippet, decompiled from XSLCmd’s binary, we see the malware first
    instantiating two system classes 1. Once authenticated 2, it invokes a system
    `UserUtilities` class method, which instructs the *writeconfig.xpc* service to
    create the *.AccessibilityAPIEnabled* file on its behalf 3.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段从XSLCmd二进制文件反编译出来的代码片段中，我们看到恶意软件首先实例化了两个系统类1。一旦认证通过2，它调用了系统的`UserUtilities`类方法，该方法指示*writeconfig.xpc*服务代表它创建*.AccessibilityAPIEnabled*文件3。
- en: Let’s briefly look at another example of malicious code abusing an elevation-of-privilege
    exploit to execute privileged actions. In 2015, Adam Thomas of Malwarebytes uncovered
    an adware installer exploiting a known, and at-the-time unpatched, zero-day vulnerability.
    The vulnerability, originally discovered by the security researcher Stefan Esser,
    allowed unprivileged code to execute privileged commands (without needing a root
    password).^([4](#c03-endnote-4)) The adware weaponized this flaw to modify the
    *sudoers* file, which as Thomas Reed notes, “allows shell commands to be executed
    as root using sudo, without the usual requirement for entering a password.”^([5](#c03-endnote-5))
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要看看另一个恶意代码示例，利用特权提升漏洞执行特权操作。在2015年，Malwarebytes的Adam Thomas发现了一个广告软件安装程序，利用了一个已知的且当时未修复的零日漏洞。该漏洞最初由安全研究员Stefan
    Esser发现，允许非特权代码执行特权命令（无需root密码）。^([4](#c03-endnote-4)) 该广告软件利用这个漏洞修改了*sudoers*文件，正如Thomas
    Reed所指出的，“这允许使用sudo以root身份执行shell命令，而不需要通常的输入密码要求。”^([5](#c03-endnote-5))
- en: Recent versions of macOS have additional security mechanisms to ensure that
    even if malware obtains root privileges, it may still be prevented from performing
    indiscriminate actions. But in order to circumvent these security mechanisms,
    malware may leverage exploits or attempt to coerce the user to manually circumvent
    them. It seems reasonable to assume that we’ll see more escalation-of-privilege
    exploits in the future.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最近版本的macOS增加了额外的安全机制，以确保即使恶意软件获得了root权限，它仍然可能被阻止执行不加选择的操作。但为了规避这些安全机制，恶意软件可能会利用漏洞或试图强迫用户手动绕过它们。可以合理假设，未来我们会看到更多的权限升级漏洞。
- en: Adware-related Hijacks and Injections
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与广告软件相关的劫持和注入
- en: The average Mac user is unlikely to be targeted by sophisticated cyber-espionage
    attackers wielding zero-days. Instead, they are far more likely to fall prey to
    simpler adware-related attacks. Compared to other types of Mac malware, adware
    is rather prolific. Its goal is generally to make money for its creators, often
    through ads or hijacked search results backed by affiliate links.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 普通的Mac用户不太可能成为拥有零日漏洞的复杂网络间谍攻击者的目标。相反，他们更可能成为简单的广告软件相关攻击的受害者。与其他类型的Mac恶意软件相比，广告软件相当普遍。它的目标通常是为其创建者赚取收入，通常通过广告或由附属链接支持的劫持搜索结果。
- en: For example, in 2017 I analyzed a piece of adware called Mughthesec that masqueraded
    as a Flash Installer.The application would install various adware, including a
    component named *Safe Finder* that would hijack Safari’s home page, setting it
    to point to an affiliate-driven search page ([Figure 3-4](#figure3-4)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在2017年，我分析了一款名为Mughthesec的广告软件，它伪装成Flash安装程序。该应用会安装各种广告软件，包括一个名为*Safe Finder*的组件，它会劫持Safari的主页，将其设置为指向一个附属链接驱动的搜索页面（[图3-4](#figure3-4)）。
- en: '![Safari’s general settings show options to set web pages as defaults, including
    “Safari opens with,” “New windows open with,” “New tabs open with,” and “Homepage.”
    Homepage is no longer set to the default, and is instead set to http://default27061330-a.akamaih.](image_fi/501942c03/f03004.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Safari的常规设置显示了设置网页为默认选项，包括“Safari打开时”，“新窗口打开时”，“新标签页打开时”和“主页”。主页不再设置为默认，而是设置为http://default27061330-a.akamaih。](image_fi/501942c03/f03004.png)'
- en: 'Figure 3-4: Safari’s homepage hijacked (Mughthesec/Safe Finder)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-4：Safari的主页被劫持（Mughthesec/Safe Finder）
- en: 'On an infected system, opening Safari confirms that the home page has been
    hijacked, though in a seemingly innocuous way: it simply displays a rather blank-looking
    search page ([Figure 3-5](#figure3-5)). However, looking at the page source reveals
    the inclusion of several Safe Finder scripts.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在感染的系统上，打开Safari可以确认主页已被劫持，尽管这种方式看起来似乎无害：它仅仅显示一个看起来相当空白的搜索页面（[图3-5](#figure3-5)）。然而，查看页面源代码可以发现，其中包含了多个Safe
    Finder脚本。
- en: '![The new home page is a white screen with a search button in the center. The
    page source shows various Safe Finder scripts included in its code.](image_fi/501942c03/f03005.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![新主页是一个白色屏幕，中央有一个搜索按钮。页面源代码显示其代码中包含多个Safe Finder脚本。](image_fi/501942c03/f03005.png)'
- en: 'Figure 3-5: An infected user’s new home page (Mughthesec/Safe Finder)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-5：被感染用户的新主页（Mughthesec/Safe Finder）
- en: This hijacked home page funnels user searches through various affiliates before
    they’re finally serviced by Yahoo! Search, and it injects Safe Finder logic into
    all search results. The ability to manipulate search results likely generates
    revenue for the adware authors via ad views and affiliate links.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个被劫持的主页通过各种附属链接将用户的搜索引导到最后由Yahoo! Search提供服务，并且它将Safe Finder逻辑注入到所有搜索结果中。操控搜索结果的能力可能通过广告浏览量和附属链接为广告软件作者带来收入。
- en: Another ad-related example, IPStorm, is a cross-platform botnet with a macOS
    variant discovered in 2020\. In a report by Intezer, researchers noted that the
    Linux version of IPStorm engages in fraudulent activities, “abusing gaming and
    ads monetization. Because it’s a botnet, the malware utilizes the large amount
    of requests from different trusted sources, thus not being blocked nor traceable.”^([6](#c03-endnote-6))
    By sniffing its network traffic, we can confirm that the macOS variant also engages
    in activities including fraudulent ad monetization ([Figure 3-6](#figure3-6)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与广告相关的例子，IPStorm，是一个跨平台的僵尸网络，在2020年发现了其macOS变种。在Intezer的一份报告中，研究人员指出，Linux版本的IPStorm从事欺诈活动，“滥用游戏和广告变现。因为它是一个僵尸网络，恶意软件利用来自不同可信来源的大量请求，因此不会被屏蔽或追踪。”^([6](#c03-endnote-6))
    通过嗅探其网络流量，我们可以确认macOS变种也从事包括欺诈性广告变现在内的活动（[图3-6](#figure3-6)）。
- en: '![A network capture of IPStorm has four columns: Source, Destination, Protocol,
    and Info. In the Info column, there are various HTTP GET requests, including one
    for a web page describing a personal injury attorney. ](image_fi/501942c03/f03006.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![IPStorm 的网络捕获有四列：来源、目标、协议和信息。在信息列中，有多个 HTTP GET 请求，包括一个指向描述人身伤害律师的网页的请求。](image_fi/501942c03/f03006.png)'
- en: 'Figure 3-6: A network capture of fraudulent ad monetization (IPStorm)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-6：欺诈性广告货币化的网络捕获（IPStorm）
- en: For an interesting deep dive into adware and its ties to affiliate programs,
    see “[How Affiliate Programs Fund Spyware](http://www.benedelman.org/news-091405/).”^([7](#c03-endnote-7))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解广告软件及其与联盟计划的联系，请参阅 “[联盟计划如何资助间谍软件](http://www.benedelman.org/news-091405/)”。^([7](#c03-endnote-7))
- en: Cryptocurrency Miners
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密货币挖矿者
- en: We’ve already discussed how most of the malware that infects the average Mac
    user is likely motivated by financial gain. The late 2010s saw a large uptick
    in Mac malware that seeks to stealthily install cryptocurrency mining software
    on Mac systems. Cryptocurrency mining, which involves both the process of creating
    new digital “coins” and verifying user transactions, requires large amounts of
    processing resources in order to generate any meaningful revenue. Malware authors
    solve this resource dilemma by distributing mining operations across many infected
    systems.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，大多数感染普通 Mac 用户的恶意软件很可能是出于经济利益动机。2010 年代末期，出现了大量旨在悄悄在 Mac 系统上安装加密货币挖矿软件的
    Mac 恶意软件。加密货币挖矿涉及创建新的数字“货币”和验证用户交易的过程，需要大量的处理资源才能产生任何有意义的收入。恶意软件作者通过将挖矿操作分布到许多被感染的系统中来解决这一资源困境。
- en: 'In practice, malware that implements cryptocurrency payloads often does so
    in a rather lazy, albeit efficient way: by packaging up command line versions
    of legitimate miners. For example, the [CreativeUpdate](https://objective-see.com/blog/blog_0x29.html)
    malware, which attackers surreptitiously distributed via the popular Mac application
    website [MacUpdate.com](http://MacUpdate.com), leveraged a legitimate cryptocurrency
    miner. This malware persisted as a launch agent, *MacOS.plist*, which in the following
    snippet ([Listing 3-7](#listing3-7)) we can see instructs the system to persistently
    execute a binary named `mdworker` via the shell (`sh`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，实现加密货币有效载荷的恶意软件通常采用一种相对懒散但高效的方式：通过打包合法矿工的命令行版本。例如，攻击者通过流行的 Mac 应用网站 [MacUpdate.com](http://MacUpdate.com)
    暗中分发的 [CreativeUpdate](https://objective-see.com/blog/blog_0x29.html) 恶意软件，就利用了一个合法的加密货币矿工。这款恶意软件以启动代理
    *MacOS.plist* 的形式存在，其中我们可以在下面的代码片段（[列表 3-7](#listing3-7)）中看到，它指示系统通过 shell（`sh`）持久化执行名为
    `mdworker` 的二进制文件：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 3-7: A persistent launch item plist (CreativeUpdate)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-7：一个持久化启动项 plist（CreativeUpdate）
- en: If we directly execute this `mdworker` binary in a virtual machine, it readily
    identifies itself as a console miner, belonging to the multicurrency mining platform
    MinerGate ([Listing 3-7](#listing3-7)):^([8](#c03-endnote-8))
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在虚拟机中直接执行这个 `mdworker` 二进制文件，它会迅速自我识别为一个控制台挖矿程序，属于多币种挖矿平台 MinerGate（[列表
    3-7](#listing3-7)）：^([8](#c03-endnote-8))
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The launch agent plist passes this persisted miner the arguments `-user walker18@protonmail.ch
    -xmr`, specifying the user account to which to credit the mining results as well
    as the type of cryptocurrency to mine, XMR (Monero).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启动代理 plist 会将此持久化的挖矿程序传递给参数 `-user walker18@protonmail.ch -xmr`，指定了要将挖矿结果归功于的用户帐户，以及挖掘的加密货币类型，即
    XMR（Monero）。
- en: Other recent examples of Mac malware used to surreptitiously mine cryptocurrencies
    include OSAMiner, BirdMiner, CpuMeaner, DarthMiner, and CookieMiner.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 其他最近的 Mac 恶意软件示例，包括 OSAMiner、BirdMiner、CpuMeaner、DarthMiner 和 CookieMiner，都是为了偷偷进行加密货币挖矿而设计的。
- en: Remote Shells
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程 Shell
- en: Sometimes all an attacker wants is a shell on a victim’s system. Shells afford
    a remote attacker complete control of an infected system by allowing them to run
    arbitrary shell commands and binaries.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，攻击者只需要在受害者的系统上获得一个 shell。Shell 让远程攻击者完全控制被感染的系统，允许他们运行任意的 shell 命令和二进制文件。
- en: 'In the context of malware, remote shells generally come in two main types:
    interactive and non-interactive. *Interactive* shells provide a remote attacker
    the ability to “go live” on an infected system, as if they were physically sitting
    in front of it. Through such a shell, the attacker can run and interrupt shell
    commands, all the while routing all input and output to and from the attacker’s
    remote server in real time. *Non-interactive* shells still provide a mechanism
    for an attacker to run commands via the infected system’s built-in shell. However,
    they often just receive commands from an attacker’s remote command and control
    server and execute them at specified intervals.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在恶意软件的背景下，远程 shell 通常有两种主要类型：交互式和非交互式。*交互式* shell 允许远程攻击者像实际坐在受感染的系统前一样“实时操作”该系统。通过这种
    shell，攻击者可以运行并中断 shell 命令，同时将所有输入和输出实时路由到攻击者的远程服务器。*非交互式* shell 仍然提供了一个机制，让攻击者通过受感染系统的内置
    shell 运行命令。然而，它们通常只接收来自攻击者远程命令和控制服务器的命令，并在指定的时间间隔执行它们。
- en: 'Malware that sets up and executes a remote shell doesn’t have to be fancy.
    For example, the malware known as Dummy ran a bash script (*/var/root/script.sh*),
    persisted it as a launch daemon, and used it to execute an inline Python script
    ([Listing 3-8](#listing3-8)):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 设置并执行远程 shell 的恶意软件不需要特别复杂。例如，名为 Dummy 的恶意软件运行了一个 bash 脚本（*/var/root/script.sh*），将其持久化为启动守护进程，并用它执行一个内联
    Python 脚本（[列表 3-8](#listing3-8)）：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 3-8: A persistent remote shell (Dummy)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-8：一个持久化的远程 shell（Dummy）
- en: Dummy’s Python code will attempt to connect to the IP address `185.243.115.230`
    on port `1337` 1. It then duplicates `STDIN` (`0`), `STDOUT` (`1`), and `STDERR`
    (`2`) to the connected socket 2 before executing `/bin/sh`with the interactive
    mode `-i` flag 3. In other words, it’s setting up a remotely interactive reverse
    shell.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Dummy 的 Python 代码将尝试连接到 IP 地址 `185.243.115.230` 上的端口 `1337` 1。然后它会将 `STDIN`（`0`）、`STDOUT`（`1`）和
    `STDERR`（`2`）复制到连接的套接字 2，然后执行带有交互模式 `-i` 标志的 `/bin/sh` 3。换句话说，它正在设置一个远程交互式反向 shell。
- en: 'A persistently running instance of */bin/sh* connected to a remote IP address
    is fairly easy to uncover on an infected system. Therefore, more sophisticated
    malware might implement these capabilities programmatically to remain stealthier.
    For example, a Lazarus Group backdoor can remotely execute shell commands using
    a function named `proc_cmd` ([Listing 3-9](#listing3-9)):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在受感染的系统上，持久运行的 */bin/sh* 实例连接到远程 IP 地址是相当容易发现的。因此，更复杂的恶意软件可能会通过编程方式实现这些功能，以保持更好的隐蔽性。例如，Lazarus
    Group 后门可以使用名为 `proc_cmd` 的函数远程执行 shell 命令（[列表 3-9](#listing3-9)）：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 3-9: Command execution via the `popen` API (Lazarus Group backdoor)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-9：通过 `popen` API 执行命令（Lazarus Group 后门）
- en: In the `proc_cmd` function, we can see that the backdoor first builds the command
    to execute in the background 1. Then it invokes the `popen` system API, which
    in turn invokes the shell (*/bin/sh*) in order to execute the specified command
    2. Though non-interactive, this code still provides the means for a remote attacker
    to execute arbitrary shell commands on an infected system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `proc_cmd` 函数中，我们可以看到后门首先构建了要在后台执行的命令 1。然后它调用 `popen` 系统 API，进而调用 shell（*/bin/sh*）来执行指定的命令
    2。尽管是非交互式的，这段代码仍然为远程攻击者提供了在受感染系统上执行任意 shell 命令的手段。
- en: Remote Process and Memory Execution
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程进程和内存执行
- en: 'Executing commands via the shell is rather noisy and thus more likely to lead
    to detection. More sophisticated malware may bypass the shell and instead contain
    logic to directly execute processes on the infected system. For example, the Komplex
    malware can execute arbitrary binaries using programmatic APIs. If we extract
    symbols from malware, we find a custom `FileExplorer` class that has a method
    named `executeFile`, as shown in [Listing 3-10](#listing3-10):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 shell 执行命令相当“吵闹”，因此更容易被检测到。更复杂的恶意软件可能绕过 shell，直接包含逻辑以在受感染的系统上执行进程。例如，Komplex
    恶意软件可以使用程序化 API 执行任意二进制文件。如果我们从恶意软件中提取符号，会发现一个名为 `FileExplorer` 的自定义类，它有一个名为 `executeFile`
    的方法，如 [列表 3-10](#listing3-10) 所示：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 3-10: A file execution method (Komplex)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-10：一个文件执行方法（Komplex）
- en: 'Decompiling this method shows that it calls Apple’s `[NSTask](https://developer.apple.com/documentation/foundation/nstask)`
    APIs to execute the specified binary ([Listing 3-11](#listing3-11)):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译该方法后发现，它调用了 Apple 的 `[NSTask](https://developer.apple.com/documentation/foundation/nstask)`
    API 来执行指定的二进制文件（[列表 3-11](#listing3-11)）：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 3-11: File execution logic (Komplex)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-11：文件执行逻辑（Komplex）
- en: Looking at the decompilation of `FileExplorer`’s `executeFile` method, we see
    it first builds a string object (`NSString`) containing the full path to the file
    to execute 1, and then it initializes a task object (`NSTask`) to execute it 2.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从`FileExplorer`的`executeFile`方法的反编译中，我们看到它首先构建了一个包含要执行文件完整路径的字符串对象（`NSString`），然后它初始化了一个任务对象（`NSTask`）来执行该文件。
- en: Spawning a process is still a noisy event, so certain malware authors choose
    instead to execute binary code *directly from memory*. You can see this strategy
    at work in a Lazarus Group implant from 2019, AppleJeus.C ([Listing 3-12](#listing3-12)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个进程仍然是一个非常显眼的事件，因此一些恶意软件作者选择直接*从内存中执行二进制代码*。你可以在2019年Lazarus集团的一个植入程序AppleJeus.C中看到这一策略的应用（[清单3-12](#listing3-12)）。
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 3-12: In-memory code execution (Lazarus Group backdoor)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-12：内存中代码执行（Lazarus集团后门）
- en: The malware calls a function named `memory_exec2` with various parameters, such
    as a remote payload that has been downloaded and decrypted only in memory. As
    shown in the code snippet, the function invokes the Apple `NSCreateObjectFileImageFromMemory`
    and `NSLinkModule` APIs to prepare the in-memory payload for execution. The malware
    then dynamically locates and calls into the entry point of the now-prepared payload.
    This advanced capability ensures that the malware’s second-stage payloads never
    touch the filesystem, nor result in new processes being spawned. Stealthy indeed!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件调用名为`memory_exec2`的函数，并传入各种参数，比如一个只在内存中下载并解密的远程有效载荷。正如代码片段所示，函数调用了苹果的`NSCreateObjectFileImageFromMemory`和`NSLinkModule`
    API，以准备内存中的有效载荷进行执行。恶意软件随后动态定位并调用已经准备好的有效载荷的入口点。这种先进的能力确保了恶意软件的第二阶段有效载荷从未接触到文件系统，也不会导致新进程的生成，确实非常隐蔽！
- en: Interestingly, it appears that the Lazarus Group simply took this in-memory
    payload code from a blog post and GitHub project by Cylance, an antivirus firm
    that also conducts threat research. To the malware authors, the use of this open
    source malware provided several benefits, including efficiency (it’s already written!)
    and a more complicated attribution. For a technical deep dive into the in-memory
    loading capabilities of the Lazarus Group implant, see my write-up “Lazarus Group
    Goes ‘Fileless.’”^([9](#c03-endnote-9))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，看来Lazarus集团直接从Cylance，一家提供病毒防护并进行威胁研究的公司，博客文章和GitHub项目中获取了这段内存有效载荷代码。对于恶意软件作者来说，使用这一开源恶意软件有多个好处，包括高效（代码已经写好！）和更复杂的归属追踪。欲了解Lazarus集团植入程序的内存加载能力的技术深度解析，请参阅我的文章《Lazarus集团采用“无文件”策略》^([9](#c03-endnote-9))。
- en: Remote Download and Upload
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程下载与上传
- en: Another common malware capability, especially of the cyberespionage variety,
    is the remote downloading of files from the attacker’s server or the uploading
    of collected data from an infected system, called *exfiltration*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的恶意软件能力，尤其是针对网络间谍的恶意软件，是从攻击者服务器远程下载文件，或从感染系统上传收集的数据，这种行为称为*数据外泄*。
- en: Malware often includes the ability to remotely download files onto an infected
    system to afford the attacker the ability to upgrade the malware or download and
    execute secondary payloads and other tools. The WindTail malware illustrates this
    capability well. Designed as a file exfiltration cyberespionage implant, WindTail
    also has the ability to download, then execute, additional payloads from the attacker’s
    remote command and control server. The logic that implements the file download
    capability is found within a method named `sdf`. This method first decrypts an
    embedded address for a command and control server. Following this, it makes an
    initial request to this server to get a local name for the file it’s about to
    download. A second request downloads the actual file from the remote server.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件通常具备将文件远程下载到感染系统的能力，以便攻击者能够升级恶意软件或下载并执行二阶段有效载荷和其他工具。WindTail恶意软件很好地展示了这一能力。作为一个文件外泄的网络间谍植入程序，WindTail还具备从攻击者的远程命令与控制服务器下载并执行额外有效载荷的能力。实现文件下载功能的逻辑位于一个名为`sdf`的方法中。该方法首先解密一个嵌入式的命令与控制服务器地址，接着向该服务器发送初始请求，以获取即将下载文件的本地名称。第二次请求则下载远程服务器上的实际文件。
- en: 'A network monitor such as my open source tool Netiquette shows the two connections
    made by WindTail to download the file ([Listing 3-13](#listing3-13)):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 像我的开源工具Netiquette这样的网络监视器可以显示WindTail用于下载文件的两个连接（[清单3-13](#listing3-13)）：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 3-13: File download connections (WindTail)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-13：文件下载连接（WindTail）
- en: Once WindTail has saved the downloaded file on the infected system, it unzips
    it, then executes it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦WindTail将下载的文件保存到受感染的系统中，它会解压文件并执行它。
- en: Malware may also upload files from the victim computer to the attacker’s server.
    Usually these uploads include information about the infected system (a survey)
    or user files that may be of interest to the attacker.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可能将文件从受害者的计算机上传到攻击者的服务器。通常，这些上传的文件包含有关感染系统的信息（调查）或可能引起攻击者兴趣的用户文件。
- en: 'For example, earlier in this chapter I mentioned MacDownloader, which collects
    data about the system, such as installed applications, and saves this to disk.
    It then exfiltrates this survey data to the attacker’s command and control server
    via a method named `SendCollectedDataTo:withThisTargetId:`, which in turn invokes
    the `uploadFile:ToServer:withTargetId:` method ([Listing 3-14](#listing3-14)):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在本章早些时候我提到的MacDownloader，它收集系统相关数据，例如已安装的应用程序，并将其保存到磁盘。然后，它通过一个名为`SendCollectedDataTo:withThisTargetId:`的方法，将这些调查数据通过`uploadFile:ToServer:withTargetId:`方法外泄到攻击者的指挥和控制服务器上（[清单3-14](#listing3-14)）：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 3-14: File exfiltration wrapper (MacDownloader)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-14：文件外泄封装器（MacDownloader）
- en: 'As shown in [Listing 3-14](#listing3-14), the malware first invokes a method
    to ensure it is connected to the internet. If so, the survey file *applist.txt*
    will be uploaded via the `uploadFile:` method. Examining the code in this method
    reveals it leverages Apple’s `NSMutableURLRequest` and `NSURLConnection` class
    to upload the file via an HTTP `POST` request ([Listing 3-15](#listing3-15)):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如[清单3-14](#listing3-14)所示，恶意软件首先调用一个方法来确保它已连接到互联网。如果连接正常，调查文件*applist.txt*将通过`uploadFile:`方法上传。检查该方法中的代码发现，它使用了Apple的`NSMutableURLRequest`和`NSURLConnection`类通过HTTP
    `POST`请求上传文件（[清单3-15](#listing3-15)）：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 3-15: File exfiltration (MacDownloader)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-15：文件外泄（MacDownloader）
- en: Of course, there are other programmatic methods to download and upload files.
    In various Lazarus Group malware, the `curl` library is leveraged for this purpose.
    For example, in one of their persistent backdoors, we find a method named `post`,
    which exfiltrates (posts) a file to an attacker-controlled server via the `curl`
    library ([Listing 3-16](#listing3-16)).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他编程方法可以下载和上传文件。在各种Lazarus集团的恶意软件中，`curl`库被用来执行此任务。例如，在他们的一个持久后门中，我们可以找到一个名为`post`的方法，通过`curl`库将文件（发送）到攻击者控制的服务器（[清单3-16](#listing3-16)）。
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 3-16: The libcurl API (leveraged by a Lazarus Group implant)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-16：libcurl API（Lazarus集团植入使用）
- en: In [Listing 3-16](#listing3-16), we can observe the backdoor first invoking
    the `curl_easy_init` function to perform initialization and return a handle for
    subsequent calls. Then various options are set via the `curl_easy_setopt` function.
    By consulting the libcurl API documentation, we can map the specified constants
    to human-readable values. For example, the most notable is `0x271f`. This maps
    to `CURLOPT_POSTFIELDS`, which sets the file data to post to the attacker’s remote
    server. Finally, the malware invokes the `curl_easy_perform` function to complete
    the `curl` library operation, which performs the file exfiltration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单3-16](#listing3-16)中，我们可以看到后门首先调用`curl_easy_init`函数进行初始化，并返回一个句柄用于后续的调用。然后，通过`curl_easy_setopt`函数设置各种选项。通过查阅libcurl
    API文档，我们可以将指定的常量映射为人类可读的值。例如，最显著的是`0x271f`。它映射为`CURLOPT_POSTFIELDS`，该选项将文件数据设置为上传到攻击者的远程服务器。最后，恶意软件调用`curl_easy_perform`函数完成`curl`库操作，执行文件外泄。
- en: Last, various Mac malware will exfiltrate files from an infected computer based
    on their file extension. For example, after scanning an infected system for files
    of interest by checking their file extensions, WindTail creates ZIP archives and
    uploads them via macOS’s built-in `curl` utility. Using a process and network
    monitor, we can passively observe this in action. In Chapter 7 we’ll talk more
    about such methods of dynamic analysis.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，各种Mac恶意软件会根据文件扩展名从感染的计算机中外泄文件。例如，在扫描受感染系统，检查感兴趣的文件扩展名后，WindTail会创建ZIP归档文件，并通过macOS内置的`curl`工具上传它们。使用进程和网络监控工具，我们可以被动地观察到这一过程的实际操作。在第7章中，我们将更详细地讨论这种动态分析方法。
- en: File Encryption
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件加密
- en: Chapter 2 mentioned ransomware, or malware whose goal is to encrypt users’ files
    before demanding a ransom. Since ransomware is rather in vogue, macOS has seen
    an uptick of it as well. As an example, let’s look at KeRanger, the first fully
    functional macOS ransomware found in the wild.^([10](#c03-endnote-10))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第二章提到过勒索软件，或是旨在加密用户文件并要求支付赎金的恶意软件。由于勒索软件如今非常流行，macOS也出现了它的增长。作为一个例子，我们来看一下KeRanger，这是首个在野外发现的完全功能化的macOS勒索软件。^([10](#c03-endnote-10))
- en: 'KeRanger will connect to a remote server, expecting a response consisting of
    a public RSA encryption key and decryption instructions. Armed with this encryption
    key, it will recursively encrypt all files under */Users/**, as well as all files
    under */Volumes* that match certain extensions, including *.doc*, *.jpg*, and
    *.zip*. This is shown in the following snippet of decompiled code from the malware’s
    `startEncrypt` function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: KeRanger会连接到一个远程服务器，期望收到由公钥RSA加密密钥和解密指令组成的响应。凭借这个加密密钥，它将递归地加密*/Users/*下的所有文件，以及*/Volumes*下匹配特定扩展名的所有文件，包括*.doc*、*.jpg*和*.zip*。这在以下恶意软件`startEncrypt`函数的反编译代码片段中有所展示：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For each directory where the ransomware encrypts files, it creates a plaintext
    README file called *README_FOR_DECRYPT.txt* that instructs the user on how to
    pay the ransom and recover their files ([Figure 3-7](#figure3-7)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于勒索软件加密文件的每个目录，它都会创建一个名为*README_FOR_DECRYPT.txt*的纯文本README文件，指导用户如何支付赎金并恢复文件（[图3-7](#figure3-7)）。
- en: '![The plaintext read-me file begins, “Your computer has been locked and all
    your files has been encrypted with 2048-bit RSA encryption.” Instructions for
    decrypting follow, including a link to “decrypt 1 file for FREE to make sure decryption
    is working.” Following this is a statement that the user may ask any questions,
    but they will only answer if the user can pay. The file ends with a warning that
    they only accept Bitcoin, followed by links to two sites to buy Bitcoins.](image_fi/501942c03/f03007_new.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![纯文本的read-me文件开始写道：“您的计算机已被锁定，所有文件已使用2048位RSA加密。”接下来是解密的指令，包括一个链接，指向“免费解密1个文件以确保解密有效”。之后的内容表示，用户可以提出任何问题，但只有在用户能支付赎金时，才会得到回答。文件最后警告说他们只接受比特币，并提供了两个购买比特币的网站链接。](image_fi/501942c03/f03007_new.png)'
- en: 'Figure 3-7: Decryption instructions (KeRanger)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-7：解密指令（KeRanger）
- en: Unless the user pays the ransom, their files will remain locked.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 除非用户支付赎金，否则他们的文件将保持锁定状态。
- en: Another example of Mac malware with ransomware capabilities is EvilQuest. On
    an infected system, EvilQuest searches for files that match a list of hardcoded
    file extensions, such as *.jpg* and *.txt*, and then encrypts them. Once all the
    files have been encrypted, the malware writes decryption instructions to a file
    named *READ_ME_NOW.txt* and reads it aloud to the user via macOS’s built-in `say`
    command.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个具有勒索软件功能的Mac恶意软件示例是EvilQuest。在被感染的系统中，EvilQuest会搜索与硬编码文件扩展名列表匹配的文件，如*.jpg*和*.txt*，然后对它们进行加密。一旦所有文件被加密，恶意软件会将解密指令写入一个名为*READ_ME_NOW.txt*的文件，并通过macOS内建的`say`命令将其朗读给用户听。
- en: For a detailed history and more comprehensive technical discussion of ransomware
    on macOS, see my write-up “Towards Generic Ransomware Detection.”^([11](#c03-endnote-11))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有关macOS上勒索软件的详细历史和更全面的技术讨论，请参阅我的文章《走向通用勒索软件检测》。^([11](#c03-endnote-11))
- en: Stealth
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐匿性
- en: After malware has infected a system, it generally treats stealth as paramount.
    (Ransomware, once it has encrypted user files, is a notable exception.) Interestingly,
    current Mac malware often doesn’t spend too much effort using stealth capabilities,
    even though detection usually is a death knell. Instead, the majority attempts
    to hide in plain sight by adopting filenames that masquerade as Apple or operating
    system components. For example, EvilQuest persists via a launch agent named *com.apple.questd.plist,*
    which executes a binary named *com.apple.questd*. The malware authors rightly
    assumed that the average Mac user would not find these files and process names
    suspicious.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在恶意软件感染系统后，它通常会将隐匿性视为最重要的目标。（勒索软件，一旦加密了用户文件，通常是个例外。）有趣的是，当前的Mac恶意软件通常不会花太多精力去利用隐匿功能，即使检测通常意味着死亡打击。相反，大多数恶意软件通过采用伪装成Apple或操作系统组件的文件名，试图在明处隐藏。例如，EvilQuest通过名为*com.apple.questd.plist*的启动代理持续存在，该代理执行一个名为*com.apple.questd*的二进制文件。恶意软件作者正确地假设，普通的Mac用户不会对这些文件和进程名称产生怀疑。
- en: Other malware takes stealth a notch further by prefixing their malicious components
    with a period. For example, GMERA creates a launch agent named *.com.apple.upd.plist*.
    As the Finder app does not display files prefixed with a period by default, this
    affords the malware some additional stealth.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其他恶意软件通过在恶意组件名称前加上一个句点，进一步提高隐蔽性。例如，GMERA创建了一个名为*.com.apple.upd.plist*的启动代理。由于Finder应用程序默认不显示以句点开头的文件，这为恶意软件提供了额外的隐蔽性。
- en: While it’s true that masquerading as an Apple component or prefixing a malicious
    component’s filename with a period provides some elementary stealth, these strategies
    also provide powerful detection heuristics. For example, the presence of a hidden
    process or a binary named *com.apple.** that is not signed by Apple is almost
    certainly a sign of compromise.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然伪装成Apple组件或在恶意组件的文件名前加上句点确实提供了基本的隐蔽性，但这些策略也提供了强大的检测启发式方法。例如，存在一个隐藏进程或一个名为*com.apple.**且未经过Apple签名的二进制文件几乎肯定是被入侵的迹象。
- en: FinSpy, a commercial cross-platform espionage implant, is a notable exception
    to the hiding-in-plain-sight technique. Uncovered in 2020 by Amnesty International,
    it is armed with the capability to hide processes via a kernel-level rootkit component,
    *logind.kext*, and it sought to remain undetected even on closely monitored systems.^([12](#c03-endnote-12))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: FinSpy，一种商业跨平台间谍软件，是隐藏在明面上的技术中的一个显著例外。该软件于2020年被国际特赦组织揭露，具备通过内核级rootkit组件*logind.kext*隐藏进程的能力，并试图在严格监控的系统中保持不被检测到。^([12](#c03-endnote-12))
- en: 'FinSpy’s *kext* file contains a function named `ph_init`. (The *ph* likely
    stands for *processing hider*.) This function resolves several kernel symbols
    using a function named `ksym_resolve_symbol_by_crc32` ([Listing 3-17](#listing3-17)):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: FinSpy的*kext*文件包含一个名为`ph_init`的函数。（*ph*可能代表*process hiding*。）该函数使用名为`ksym_resolve_symbol_by_crc32`的函数解析多个内核符号（见[清单3-17](#listing3-17)）：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 3-17: Kernel symbol resolution (FinSpy)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-17：内核符号解析（FinSpy）
- en: Based on variable names found within the kernel extension, it appears that this
    function is attempting to resolve the pointer of the kernel’s global list of process
    (`proc`) structures 1, as well as various locks and mutex functions 2.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 根据内核扩展中的变量名称来看，这个函数似乎正在尝试解析内核全局进程（`proc`）结构体列表的指针1，以及各种锁和互斥函数2。
- en: 'In a function named `ph_hide`, the *kext* hides a process by first walking
    the list of `proc` structures, pointed to by `ALLPROC_ADDRESS`, and looking for
    the one that matches ([Listing 3-18](#listing3-18)):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`ph_hide`的函数中，*kext*通过遍历`ALLPROC_ADDRESS`指向的`proc`结构体列表，查找匹配项，从而隐藏一个进程（见[清单3-18](#listing3-18)）：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 3-18: Kernel-mode process hiding (FinSpy)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-18：内核模式进程隐藏（FinSpy）
- en: Note that the `HIDE` label contains code that will be executed when the target
    process is found. This code will remove the target process of interest by unlinking
    it from the process list. Once removed, the process would be hidden from various
    system process enumeration tools, such as Activity Monitor. It’s worth noting
    that, as FinSpy’s kernel extension is unsigned, it won’t run on any recent version
    of macOS, which enforce *kext* code-signing requirements. For more on the topic
    of Mac rootkits (including this well-known process-hiding technique), see “Revisiting
    Mac OS X Kernel Rootkits.”^([13](#c03-endnote-13))
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`HIDE`标签包含在找到目标进程时将执行的代码。此代码通过将目标进程从进程列表中解链来移除目标进程。移除后，该进程将对各种系统进程枚举工具（如活动监视器）隐藏。值得注意的是，由于FinSpy的内核扩展未签名，因此它无法在任何最近版本的macOS上运行，因为这些版本强制执行*kext*代码签名要求。有关Mac
    rootkit（包括这一著名的进程隐藏技术）的更多内容，请参阅《重新审视Mac OS X内核Rootkit》。^([13](#c03-endnote-13))
- en: Other Capabilities
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他功能
- en: Malware targeting macOS is diverse and, as such, spans the whole spectrum in
    terms of capabilities. We’ll wrap up this chapter by noting a few of the other
    capabilities found in Mac malware.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 针对macOS的恶意软件种类繁多，因此其能力范围也涵盖了各个方面。本章最后，我们将总结一下在Mac恶意软件中发现的其他一些功能。
- en: 'One notable type of Mac malware that shines in terms of its capabilities is
    malware designed to spy on its victims. This kind of malware is often impressively
    fully featured. Take, for example, FruitFly, a rather insidious macOS malware
    specimen that remained undetected in the wild for over a decade. In a comprehensive
    analysis titled “[Offensive Malware Analysis: Dissecting OSX.FruitFly via a Custom
    C&C Server](https://www.virusbulletin.com/uploads/pdf/magazine/2017/VB2017-Wardle.pdf),”
    I detailed the malware’s rather extensive set of features and capabilities.^([14](#c03-endnote-14))
    Beyond standard capabilities such as file download and upload and shell command
    execution, it can also be remotely tasked to perform actions such as capturing
    the contents of the victim’s screen, evaluating and executing arbitrary Perl commands,
    and posting synthetic mouse and keyboard events. The latter is rather unique amongst
    Mac malware and allowed a remote attacker to interact with the GUI of the infected
    system; for example, it could dismiss security alerts perhaps trigged by the malware’s
    other actions.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Another example of a Mac malware that is fully featured is Mokes. Designed as
    a cyberespionage implant, it supports typical capabilities, such as file downloads
    and command execution, but also the ability to search for and exfiltrate Office
    documents, capture the user’s screen, audio, and video, and monitor for removable
    media to scan for interesting files to collect. Any device infected by this sophisticated
    implant affords the remote attackers persistent control over the system, all while
    providing unfettered access to the user’s files and activities.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Speaking of fully featured malware, commercial malware (often referred to as
    *spyware suites*) frequently takes the cake. For example, aforementioned FinSpy’s
    macOS variant uses a modular design to provide a rather impressive list of capabilities.
    These include the basics, of course, such as executing shell commands, but also
    the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Audio recording
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera recording
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen recording
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing files on remote devices
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating reachable Wi-Fi networks
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystrokes recording (including virtual keyboards)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording modified, accessed, and deleted files
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing emails (from Apple Mail and Thunderbird)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up Next
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re interested in delving deeper into the topics covered in the first
    part of this book, I’ve published an annual “Mac Malware Report” for each of the
    last several years. These reports cover the infection vectors, persistence mechanisms,
    and capabilities of all new malware for that year.^([15](#c03-endnote-15))
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll discuss how to effectively analyze a malicious sample,
    arming you with the necessary skills to become a proficient Mac malware analyst.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Endnotes
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
