- en: '**3'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: THE LOGIC OF UNCERTAINTY**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In [Chapter 2](ch02.xhtml#ch02), we discussed how probabilities are an extension
    of the true and false values in logic and are expressed as values between 1 and
    0\. The power of probability is in the ability to express an infinite range of
    possible values between these extremes. In this chapter, we’ll discuss how the
    rules of logic, based on these logical operators, also apply to probability. In
    traditional logic, there are three important operators:'
  prefs: []
  type: TYPE_NORMAL
- en: AND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NOT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these three simple operators we can reason about any argument in traditional
    logic. For example, consider this statement: *If it is raining AND I am going
    outside, I will need an umbrella*. This statement contains just one logical operator:
    AND. Because of this operator we know that if it’s true that it is raining, AND
    it is true that I am going outside, I’ll need an umbrella.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also phrase this statement in terms of our other operators: *If it is
    NOT raining OR if I am NOT going outside, I will NOT need an umbrella*. In this
    case we are using basic logical operators and facts to make a decision about when
    we do and don’t need an umbrella.'
  prefs: []
  type: TYPE_NORMAL
- en: However, this type of logical reasoning works well only when our facts have
    absolute true or false values. This case is about deciding whether I need an umbrella
    *right now*, so we can know for certain if it’s currently raining and whether
    I’m going out, and therefore I can easily determine if I need an umbrella. Suppose
    instead we ask, “Will I need an umbrella tomorrow?” In this case our facts become
    uncertain, because the weather forecast gives me only a probability for rain tomorrow
    and I may be uncertain whether or not I need to go out.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will explain how we can extend our three logical operators to
    work with probability, allowing us to reason about uncertain information the same
    way we can with facts in traditional logic. We’ve already seen how we can define
    NOT for probabilistic reasoning:'
  prefs: []
  type: TYPE_NORMAL
- en: ¬*P*(*X*) = 1 – *P*(*X*)
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of this chapter we’ll see how we can use the two remaining operators,
    AND and OR, to combine probabilities and give us more accurate and useful data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Combining Probabilities with AND**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In statistics we use AND to talk about the probability of combined events.
    For example, the probability of:'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling a 6 AND flipping a heads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It raining AND you forgetting your umbrella
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winning the lottery AND getting struck by lightning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand how we can define AND for probability, we’ll start with a simple
    example involving a coin and a six-sided die.
  prefs: []
  type: TYPE_NORMAL
- en: '***Solving a Combination of Two Probabilities***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose we want to know the probability of getting a heads in a coin flip AND
    rolling a 6 on a die. We know that the probability of *each* of these events individually
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0022-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we want to know the probability of *both* of these things occurring, written
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(heads, six) = ?'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can calculate this the same way we did in [Chapter 2](ch02.xhtml#ch02):
    we count the outcomes we care about and divide that by the total outcomes.'
  prefs: []
  type: TYPE_NORMAL
- en: For this example, let’s imagine these events happening in sequence. When we
    flip the coin we have two possible outcomes, heads and tails, as depicted in [Figure
    3-1](ch03.xhtml#ch03fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-1: Visualizing the two possible outcomes from a coin toss as distinct
    paths*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, for each possible coin flip there are six possible results for the roll
    of our die, as depicted in [Figure 3-2](ch03.xhtml#ch03fig02).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-2: Visualizing the possible outcomes from a coin toss and the roll
    of a die*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this visualization, we can just count our possible solutions. There are
    12 possible outcomes of flipping a coin and rolling a die, and we care about only
    one of these outcomes, so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0024-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a solution for this particular problem. However, what we really
    want is a general rule that will help us calculate this for any number of probability
    combinations. Let’s see how to expand our solution.
  prefs: []
  type: TYPE_NORMAL
- en: '***Applying the Product Rule of Probability***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We’ll use the same problem for this example: what is the probability of flipping
    a heads and rolling a 6? First we need to figure out the probability of flipping
    a heads. Looking at our branching paths, we can figure out how many paths split
    off given the probabilities. We care only about the paths that include heads.
    Because the probability of heads is 1/2, we eliminate half of our possibilities.
    Then, if we look only at the remaining branch of possibilities for the heads,
    we can see that there is only a 1/6 chance of getting the result we want: rolling
    a 6 on a six-sided die. In [Figure 3-3](ch03.xhtml#ch03fig03) we can visualize
    this reasoning and see that there is only one outcome we care about.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-3: Visualizing the probability of both getting a heads and rolling
    a 6*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we multiply these two probabilities, we can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0025-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is exactly the answer we had before, but rather than counting all possible
    events, we counted only the probabilities of the events we care about by following
    along the branches. This is easy enough to do visually for such a simple problem,
    but the real value of showing you this is that it illustrates a general rule for
    combining probabilities with AND:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*A*,*B*) = *P*(*A*) × *P*(*B*)'
  prefs: []
  type: TYPE_NORMAL
- en: Because we are multiplying our results, also called taking the *product* of
    these results, we refer to this as the *product rule* of probability.
  prefs: []
  type: TYPE_NORMAL
- en: 'This rule can then be expanded to include more probabilities. If we think of
    *P*(*A*,*B*) as a single probability, we can combine it with a third probability,
    *P*(*C*), by repeating this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*P*(*A*,*B*),*C*) = *P*(*A*,*B*) × *P*(*C*) = *P*(*A*) × *P*(*B*) × *P*(*C*)'
  prefs: []
  type: TYPE_NORMAL
- en: So we can use our product rule to combine an unlimited number of events to get
    our final probability.
  prefs: []
  type: TYPE_NORMAL
- en: '***Example: Calculating the Probability of Being Late***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s look at an example of using the product rule for a slightly more complex
    problem than rolling dice or flipping coins. Suppose you promised to meet a friend
    for coffee at 4:30 on the other side of town, and you plan to take public transportation.
    It’s currently 3:30\. Thankfully the station you’re at has both a train and bus
    that can take you where you need to go:'
  prefs: []
  type: TYPE_NORMAL
- en: The next bus comes at 3:45 and takes 45 minutes to get you to the coffee shop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next train comes at 3:50, and will get you within a 10-minute walk in 30
    minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the train and the bus will get you there at 4:30 exactly. Because you’re
    cutting it so close, any delay will make you late. The good news is that, since
    the bus arrives before the train, if the bus is late and the train is not you’ll
    still be on time. If the bus is on time and the train is late, you’ll also be
    fine. The only situation that will make you late is if both the bus and the train
    are late to arrive. How can you figure out the probability of being late?
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to establish the probability of both the train being late and
    the bus being late. Let’s assume the local transit authority publishes these numbers
    (later in the book, you’ll learn how to estimate this from data).
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Late[train]) = 0.15'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Late[bus]) = 0.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'The published data tells us that 15 percent of the time the train is late,
    and 20 percent of the time the bus is late. Since you’ll be late only if *both*
    the bus and the train are late, we can use the product rule to solve this problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Late) = *P*(Late[train]) × *P*(Late[bus]) = 0.15 × 0.2 = 0.03'
  prefs: []
  type: TYPE_NORMAL
- en: Even though there’s a pretty reasonable chance that either the bus or the train
    will be late, the probability that they will both be late is significantly less,
    at only 0.03\. We can also say there is a 3 percent chance that both will be late.
    With this calculation done, you can be a little less stressed about being late.
  prefs: []
  type: TYPE_NORMAL
- en: '**Combining Probabilities with OR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The other essential rule of logic is combining probabilities with OR, some
    examples of which include:'
  prefs: []
  type: TYPE_NORMAL
- en: Catching the flu OR getting a cold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flipping a heads on a coin OR rolling a 6 on a die
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a flat tire OR running out of gas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The probability of one event OR another event occurring is slightly more complicated
    because the events can either be mutually exclusive or not mutually exclusive.
    Events are *mutually exclusive* if one event happening implies the other possible
    events cannot happen. For example, the possible outcomes of rolling a die are
    mutually exclusive because a single roll cannot yield both a 1 and a 6\. However,
    say a baseball game will be cancelled if it is either raining or the coach is
    sick; these events are *not* mutually exclusive because it is perfectly possible
    that the coach is sick and it rains.
  prefs: []
  type: TYPE_NORMAL
- en: '***Calculating OR for Mutually Exclusive Events***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The process of combining two events with OR feels logically intuitive. If you’re
    asked, “What is the probability of getting heads or tails on a coin toss?” you
    would say, “1.” We know that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0026-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Intuitively, we might just add the probability of these events together. We
    know this works because heads and tails are the only possible outcomes, and the
    probability of all possible outcomes must equal 1\. If the probabilities of all
    possible events did not equal 1, then we would have some outcome that was missing.
    So how do we know that there would need to be a missing outcome if the sum was
    less than 1?
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we know that the probability of heads is *P*(heads) = 1/2, but someone
    claimed that the probability of tails was *P*(tails) = 1/3\. We also know from
    before that the probability of not getting heads must be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0027-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since the probability of not getting heads is 1/2 and the claimed probability
    for tails is only 1/3, either there is a missing event or our probability for
    tails is incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: 'From this we can see that, as long as events are mutually exclusive, we can
    simply add up all of the probabilities of each possible event to get the probability
    of either event happening to calculate the probability of one event OR the other.
    Another example of this is rolling a die. We know that the probability of rolling
    a 1 is 1/6, and the same is true for rolling a 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0027-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So we can perform the same operation, adding the two probabilities, and see
    that the combined probability of rolling either a 1 OR a 2 is 2/6, or 1/3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0027-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, this makes intuitive sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'This addition rule applies only to combinations of *mutually exclusive* outcomes.
    In probabilistic terms, mutually exclusive means that:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*A*) AND *P*(*B*) = 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'That is, the probability of getting both *A* AND *B* together is 0\. We see
    that this holds for our examples:'
  prefs: []
  type: TYPE_NORMAL
- en: It is impossible to flip one coin and get both heads and tails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is impossible to roll both a 1 and a 2 on a single roll of a die.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To really understand combining probabilities with OR, we need to look at the
    case where events are *not* mutually exclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Sum Rule for Non–Mutually Exclusive Events***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Again using the example of rolling a die and flipping a coin, let’s look at
    the probability of either flipping heads OR rolling a 6\. Many newcomers to probability
    may naively assume that adding probabilities will work in this case as well. Given
    that we know that *P*(heads) = 1/2 and *P*(six) = 1/6, it might initially seem
    plausible that the probability of either of these events is simply 4/6\. It becomes
    obvious that this doesn’t work, however, when we consider the possibility of either
    flipping a heads or rolling a number less than 6\. Because *P*(less than six)
    = 5/6, adding these probabilities together gives us 8/6, which is greater than
    1! Since this violates the rule that probabilities must be between 0 and 1, we
    must have made a mistake.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that flipping a heads and rolling a 6 are not mutually exclusive.
    As we know from earlier in the chapter, *P*(heads, six) = 1/12\. Because the probability
    of both events happening at the same time is not 0, we know they are, by definition,
    not mutually exclusive.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason that adding our probabilities doesn’t work for non–mutually exclusive
    events is that doing so doubles the counting of events where both things happen.
    As an example of overcounting, let’s look at all of the outcomes of our combined
    coin toss and die roll that contain heads:'
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 1
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 2
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 3
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 4
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 5
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 6
  prefs: []
  type: TYPE_NORMAL
- en: 'These outcomes represent 6 out of the 12 possible outcomes, which we expect
    since *P*(heads) = 1/2\. Now let’s look at all outcomes that include rolling a
    6:'
  prefs: []
  type: TYPE_NORMAL
- en: Heads — 6
  prefs: []
  type: TYPE_NORMAL
- en: Tails — 6
  prefs: []
  type: TYPE_NORMAL
- en: These outcomes represent the 2 out of 12 possible outcomes that will result
    in us rolling a 6, which again we expect because *P*(six) = 1/6\. Since there
    are six outcomes that satisfy the condition of flipping a heads and two that satisfy
    the condition of rolling a 6, we might be tempted to say that there are eight
    outcomes that represent getting either heads or rolling a 6\. However, we would
    be double-counting because *Heads — 6* appears in both lists. There are, in fact,
    only 7 out of 12 unique outcomes. If we naively add *P*(heads) and *P*(six), we
    end up overcounting.
  prefs: []
  type: TYPE_NORMAL
- en: 'To correct our probabilities, we must add up all of our probabilities and then
    subtract the probability of both events occurring. This leads us to the rule for
    combining non–mutually exclusive probabilities with OR, known as the *sum rule*
    of probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*A*) OR *P*(*B*) = *P*(*A*) + *P*(*B*) – *P*(*A*,*B*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the probability of each event happening and then subtract the probability
    of both events happening, to ensure we are not counting these probabilities twice
    since they are a part of both *P*(*A*) and *P*(*B*). So, using our die roll and
    coin toss example, the probability of rolling a number less than 6 or flipping
    a heads is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0029-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let’s take a look at a final OR example to really cement this idea.
  prefs: []
  type: TYPE_NORMAL
- en: '***Example: Calculating the Probability of Getting a Hefty Fine***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Imagine a new scenario. You were just pulled over for speeding while on a road
    trip. You realize you haven’t been pulled over in a while and may have forgotten
    to put either your new registration or your new insurance card in the glove box.
    If either one of these is missing, you’ll get a more expensive ticket. Before
    you open the glove box, how can you assign a probability that you’ll have forgotten
    one or the other of your cards and you’ll get the higher ticket?
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re pretty confident that you put your registration in the car, so you assign
    a 0.7 probability to your registration being in the car. However, you’re also
    pretty sure that you left your insurance card on the counter at home, so you assign
    only a 0.2 chance that your new insurance card is in the car. So we know that:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(registration) = 0.7'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(insurance) = 0.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, these values are the probabilities that you *do* have these things
    in the glove box. You’re worried about whether either one is *missing*. To get
    the probabilities of missing items, we simply use negation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Missing[reg]) = 1 – *P*(registration) = 0.3'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Missing[ins]) = 1 – *P*(insurance) = 0.8'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try using our addition method, instead of the complete sum rule, to get
    the combined probability, we see that we have a probability greater than 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Missing[reg]) + *P*(Missing[ins]) = 1.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because these events are non–mutually exclusive: it’s entirely possible
    that you have forgotten both cards. Therefore, using this method we’re double-counting.
    That means we need to figure out the probability that you’re missing both cards
    so we can subtract it. We can do this with the product rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Missing[reg], Missing[ins]) = 0.24'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the sum rule to determine the probability that either one of
    these cards is missing, just as we worked out the probability of a flipping a
    heads or rolling a 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(Missing) = *P*(Missing[reg]) + *P*(Missing[ins]) – *P*(Missing[reg], Missing[ins])
    = 0.86'
  prefs: []
  type: TYPE_NORMAL
- en: With an 0.86 probability that one of these important pieces of paper is missing
    from your glove box, you should make sure to be extra nice when you greet the
    officer!
  prefs: []
  type: TYPE_NORMAL
- en: '**Wrapping Up**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter you developed a complete logic of uncertainty by adding rules
    for combining probabilities with AND and OR. Let’s review the logical rules we
    have covered so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.xhtml#ch02), you learned that probabilities are measured
    on a scale of 0 to 1, 0 being *false* (definitely not going to happen), and 1
    being *true* (definitely going to happen). The next important logical rule involves
    combining two probabilities with AND. We do this using the product rule, which
    simply states that to get the probability of two events occurring together, *P*(*A*)
    and *P*(*B*), we just multiply them together:'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*A*,*B*) = *P*(*A*) × *P*(*B*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final rule involves combining probabilities with OR using the sum rule.
    The tricky part of the sum rule is that if we add non–mutually exclusive probabilities,
    we’ll end up overcounting for the case where they both occur, so we have to subtract
    the probability of both events occurring together. The sum rule uses the product
    rule to solve this (remember, for mutually exclusive events, *P*(*A*, *B*) = 0):'
  prefs: []
  type: TYPE_NORMAL
- en: '*P*(*A* OR *B*) = *P*(*A*) + *P*(*B*) – *P*(*A*,*B*)'
  prefs: []
  type: TYPE_NORMAL
- en: These rules, along with those covered in [Chapter 2](ch02.xhtml#ch02), allow
    us to express a very large range of problems. We’ll be using these as the foundation
    for our probabilistic reasoning throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try answering the following questions to make sure you understand the rules
    of logic as they apply to probability. The solutions can be found at *[https://nostarch.com/learnbayes/](https://nostarch.com/learnbayes/)*.
  prefs: []
  type: TYPE_NORMAL
- en: What is the probability of rolling a 20 three times in a row on a 20-sided die?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The weather report says there’s a 10 percent chance of rain tomorrow, and you
    forget your umbrella half the time you go out. What is the probability that you’ll
    be caught in the rain without an umbrella tomorrow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Raw eggs have a 1/20,000 probability of having salmonella. If you eat two raw
    eggs, what is the probability you ate a raw egg with salmonella?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the probability of either flipping two heads in two coin tosses or rolling
    three 6s in three six-sided dice rolls?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
