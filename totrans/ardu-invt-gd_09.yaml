- en: 8 Drawbot, The Robotic Artist
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8 画图机器人，机器人艺术家
- en: 'As an homage to the Logo turtle project, in this project we’re going to make
    a Drawbot: a robot that you can program to move and draw. Logo was a programming
    language created in the late 1960s by Daniel G. Bobrow, Wally Feurzeig, Seymour
    Papert, and Cynthia Solomon. It was later adapted to support a robot with a drawing
    pen called a turtle (see [Figure 8-1](ch08.xhtml#ch08fig01)).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为向 Logo 海龟项目的致敬，在这个项目中我们将制作一个画图机器人：一个你可以编程来移动和绘制的机器人。Logo 是由 Daniel G. Bobrow、Wally
    Feurzeig、Seymour Papert 和 Cynthia Solomon 于 1960 年代末期创立的编程语言。后来它被改编成支持一个带绘图笔的机器人，称为海龟（见[图
    8-1](ch08.xhtml#ch08fig01)）。
- en: '**FIGURE 8-1:** An early version of a Logo turtle'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-1：** Logo 海龟的早期版本'
- en: '![Image](../images/fig8_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_1.jpg)'
- en: Turtles were connected to a computer to receive movement commands in the Logo
    language, such as `fd 10` to drive forward 10 spaces. As the turtle moved, it
    drew with the attached pen. These Logo turtles were an early educational system
    designed to teach programming concepts in a visual way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 海龟被连接到计算机，以接收 Logo 语言中的移动命令，例如 `fd 10` 来驱动前进 10 步。当海龟移动时，它会用附带的笔绘制图形。这些 Logo
    海龟是一个早期的教育系统，旨在通过视觉化的方式教授编程概念。
- en: You’re going to build your own Arduino-controlled turtle, the Drawbot ([Figure
    8-2](ch08.xhtml#ch08fig02)), which was inspired by the work of Seymour Papert
    and his team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将制作自己的 Arduino 控制的海龟，画图机器人（[图 8-2](ch08.xhtml#ch08fig02)），它的灵感来自 Seymour Papert
    及其团队的工作。
- en: '**FIGURE 8-2:** A completed Drawbot'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-2：** 完成的画图机器人'
- en: '![Image](../images/fig8_2.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_2.jpg)'
- en: '**MATERIALS TO GATHER**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所需材料**'
- en: Your robot will have two wheels, each with a motor that’s controlled by the
    Arduino through a new component called an *H-bridge*. An H-bridge is a small modular
    circuit board similar to the transistor circuit you used in the last project,
    except that it will enable you to control both the speed and the direction of
    the motor. This will give your robot the most flexibility and control. Gather
    your parts (shown in [Figures 8-3](ch08.xhtml#ch08fig03) and [8-4](ch08.xhtml#ch08fig04)),
    and let’s get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人将有两个轮子，每个轮子都有一个电机，通过一个新的组件称为 *H-桥* 由 Arduino 控制。H-桥是一个小型模块化电路板，类似于你在上一个项目中使用的晶体管电路，只不过它可以让你控制电机的速度和方向。这将给你的机器人提供最大的灵活性和控制能力。收集好你的部件（如[图
    8-3](ch08.xhtml#ch08fig03)和[图 8-4](ch08.xhtml#ch08fig04)所示），让我们开始吧！
- en: '**Electronic Parts**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子元件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 SparkFun RedBoard（DEV-13975），Arduino Uno（DEV-11021），或任何其他兼容的 Arduino 板
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 一条 USB Mini-B 数据线（CAB-11301 或你板子的 USB 数据线）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个无焊接面包板（PRT-12002）
- en: • Two geared hobby motors (ROB-13302*)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 两个齿轮驱动的业余电机（ROB-13302*）
- en: • One TB6612FNG H-bridge motor driver (ROB-09457* unsoldered or ROB-13845* presoldered)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 TB6612FNG H-桥电机驱动器（ROB-09457* 未焊接或 ROB-13845* 已焊接）
- en: • Two rubber wheels fit for the geared hobby motors (ROB-13259*)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 两个适合齿轮驱动电机的橡胶轮（ROB-13259*）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线（PRT-11026）
- en: • Male-to-female jumper wires (PRT-09140*)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对母跳线（PRT-09140*）
- en: • One 4 AA battery holder (PRT-09835*)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 4 AA 电池座（PRT-09835*）
- en: '**NOTE**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The parts marked with an asterisk (*) do not come with the standard SparkFun
    Inventor’s Kit but are available in the separate add-on kit.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*带星号（*）的部件不包含在标准 SparkFun 发明者工具包中，但可在单独的附加工具包中购买。*'
- en: '**FIGURE 8-3:** Components and materials for the Drawbot'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-3：** 画图机器人的组件和材料'
- en: '![Image](../images/fig8_3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_3.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Pencil
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 铅笔
- en: • Craft knife
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 手工刀
- en: • Metal ruler
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属直尺
- en: • Glue (hot glue gun or craft glue)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或手工胶水）
- en: • (Optional) Drill and 3/16-inch drill bit
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）电钻和 3/16 英寸钻头
- en: • (Optional) Soldering iron
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）烙铁
- en: • Cardboard (about 12 inches square) or a cardboard box
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 纸板（约 12 英寸见方）或纸箱
- en: • Ping-pong ball
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • 乒乓球
- en: • Enclosure template (see [Figure 8-12](ch08.xhtml#ch08fig12) on page [235](ch08.xhtml#page_235))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（见 [图 8-12](ch08.xhtml#ch08fig12)，第 [235](ch08.xhtml#page_235) 页）
- en: '**FIGURE 8-4:** Recommended tools'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-4：** 推荐工具'
- en: '![Image](../images/fig8_4.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_4.jpg)'
- en: '**NEW COMPONENTS**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件**'
- en: 'You’ll be using two new components in this project: an H-bridge motor driver
    and geared hobby motors. Let’s take a look at how these components work.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用两个新组件：H-桥电机驱动器和齿轮驱动的业余电机。让我们来看看这些组件是如何工作的。
- en: '**The H-Bridge Motor Driver Integrated Circuit**'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**H-桥电机驱动集成电路**'
- en: In [Project 7](ch07.xhtml#ch07), you used a transistor circuit to control a
    single motor with Arduino, which allowed you to control the speed of the motor
    but not the direction of its spin. In this project, you’ll use a new component
    called an *H-bridge motor driver* that will allow you to control both the speed
    and direction of the motor.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在[项目7](ch07.xhtml#ch07)中，你使用了一个晶体管电路来控制单个电机与Arduino，这使得你能够控制电机的速度，但无法控制其旋转方向。在本项目中，你将使用一个名为*H桥电机驱动器*的新组件，它将使你能够同时控制电机的速度和旋转方向。
- en: The H-bridge motor driver is an integrated circuit (IC) chip, made up of about
    a dozen transistors wired together internally inside a small plastic package.
    An *IC chip* is a prewired circuit that has been integrated into a single package
    to make building complex projects easier. There are many different ICs out there;
    one example is the brain behind the Arduino Uno, the ATMega328 chip. In this case,
    the H-bridge motor driver IC allows you to control a motor’s speed and direction
    of rotation by connecting power and just a few signal wires to the Arduino.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: H桥电机驱动器是一个集成电路（IC）芯片，由大约十几个晶体管通过内部连接一起，封装在一个小型塑料外壳中。*IC芯片*是一个预先接线的电路，它被集成到一个单一的封装中，旨在简化复杂项目的构建。市面上有许多不同类型的IC，其中一个例子是Arduino
    Uno的“大脑”，即ATMega328芯片。在本项目中，H桥电机驱动器IC使你能够通过连接电源和少数信号线到Arduino，控制电机的速度和旋转方向。
- en: You might recall from [Project 7](ch07.xhtml#ch07) that a transistor is simply
    a switch that can be controlled electronically. A standard H-bridge motor driver
    consists of four or five transistors (or switches) wired up in an H configuration,
    as shown in [Figure 8-5](ch08.xhtml#ch08fig05). (The motor shown in the middle
    isn’t included in the H-bridge IC; you’ll add that in.) By controlling which of
    the four main switches (labeled A–D) are open or closed, you can control the direction
    in which the current flows through the motor. The fifth switch (E) controls the
    speed of the motor’s rotation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得在[项目7](ch07.xhtml#ch07)中，晶体管仅仅是一个可以电子控制的开关。标准的H桥电机驱动器由四到五个晶体管（或开关）按H形结构连接，如[图8-5](ch08.xhtml#ch08fig05)所示。（图中的电机不包括在H桥IC内，你需要自己添加它。）通过控制四个主要开关（标记为A–D）中哪些是开关，你可以控制电流通过电机的流向。第五个开关（E）控制电机旋转的速度。
- en: '**FIGURE 8-5:** H-bridge circuit for both direction and speed control'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-5：** 具有方向和速度控制的H桥电路'
- en: '![Image](../images/fig8_5.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_5.jpg)'
- en: Remember that current flows from positive to negative. If you closed switches
    A and D, current would flow through the motor from left to right, turning the
    motor in one direction. If you instead closed switches B and C, current would
    flow through the motor from right to left, causing it to spin in the opposite
    direction.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记住电流是从正极流向负极的。如果你关闭A和D开关，电流将从左到右流经电机，使电机朝一个方向旋转。如果你关闭B和C开关，电流将从右到左流经电机，使其朝相反方向旋转。
- en: Switch E is pulsed on and off rapidly through PWM (see “[Create Analog Signals
    with PWM](ch05.xhtml#ch05lev2sec11)” on page [139](ch05.xhtml#page_139)). The
    duty cycle of this PWM signal will determine how fast the motor spins. On your
    robot, you’ll have two motors, each with its own H-bridge circuit, and you’ll
    attach a wheel to each motor so you can control its spin speed and direction.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: E开关通过PWM（参见“[使用PWM创建模拟信号](ch05.xhtml#ch05lev2sec11)”第[139](ch05.xhtml#page_139)页）迅速开关。PWM信号的占空比将决定电机的旋转速度。在你的机器人中，将有两个电机，每个电机都有自己的H桥电路，你将为每个电机连接一个车轮，从而控制其旋转速度和方向。
- en: The H-bridge motor driver you’ll use in this project is the Toshiba TB6612FNG,
    shown in [Figure 8-6](ch08.xhtml#ch08fig06). It comes as a breakout board with
    holes for pins that are spaced 0.100 inches apart—perfect for inserting into a
    breadboard.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中使用的H桥电机驱动器是东芝TB6612FNG，如[图8-6](ch08.xhtml#ch08fig06)所示。它以一个带孔的分立板形式出现，孔间距为0.100英寸——非常适合插入面包板。
- en: '**FIGURE 8-6:** TB6612FNG H-bridge motor driver breakout board (without pins
    soldered)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-6：** TB6612FNG H桥电机驱动器分立板（未焊接引脚）'
- en: '![Image](../images/fig8_6.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_6.jpg)'
- en: '**NOTE**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The chip also has a standby pin that can be used to put the motor in standby
    mode to conserve power, but you won’t need this feature, so you’ll disable it.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*该芯片还具有一个待机引脚，可以用来将电机置于待机模式以节省电力，但你不需要这个功能，因此将禁用它。*'
- en: 'The Toshiba TB6612FNG is actually a *dual* H-bridge IC. This means it has two
    full H-bridge circuits built into a little package, allowing you to control the
    two motors on your robot with a single board. The H-bridge distinguishes the two
    motors as A and B, as you can see on the underside of the board in [Figure 8-6](ch08.xhtml#ch08fig06).
    To control each H-bridge circuit, you use three signal wires: two for direction
    and one for speed.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 东芝TB6612FNG实际上是一个*双*H桥集成电路。这意味着它在一个小封装中内置了两个完整的H桥电路，允许你使用一个电路板控制机器人上的两个电机。H桥将两个电机区分为A和B，如你在电路板底部的[图
    8-6](ch08.xhtml#ch08fig06)中所见。要控制每个H桥电路，你需要使用三根信号线：两根用于方向控制，一根用于速度控制。
- en: You can buy the board either with or without pins already soldered on, so if
    you want to save yourself the trouble of soldering, make sure you get the presoldered
    board (ROB-13845). If you have the board without header pins already soldered
    on (ROB-09457), it’s not a problem, but you’ll need to solder male headers onto
    the pins; for soldering instructions, see “[How to Solder](app01.xhtml#app01lev1sec2)”
    on page [302](app01.xhtml#page_302). In either case, before you start building
    this project you should have a board that looks like [Figure 8-7](ch08.xhtml#ch08fig07).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择购买带有焊接针脚的电路板，也可以选择没有焊接针脚的版本。如果你想省去焊接的麻烦，确保你购买的是已预焊接针脚的电路板（ROB-13845）。如果你买的是没有预焊接针脚的电路板（ROB-09457），也没问题，但你需要将男针焊接到针脚上；有关焊接说明，请参阅第[302页](app01.xhtml#page_302)中的“[如何焊接](app01.xhtml#app01lev1sec2)”部分。在开始构建这个项目之前，无论如何，你应该确保手头的电路板看起来像[图
    8-7](ch08.xhtml#ch08fig07)所示。
- en: '**FIGURE 8-7:** DEV-12211 H-bridge motor driver with headers soldered on'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-7：** DEV-12211 H桥电机驱动器，已焊接针脚'
- en: '![Image](../images/fig8_7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_7.jpg)'
- en: '**Geared Hobby Motor**'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**齿轮驱动爱好者电机**'
- en: The basic hobby motor that we used in [Project 7](ch07.xhtml#ch07) is great
    for simple mechanisms like spinning fans, but it doesn’t offer a lot of *torque*
    (rotational force). In this project, we want to use a motor to move the entire
    project around, so we need to use a *geared motor*—a motor that’s attached to
    a *gearbox* (see [Figure 8-8](ch08.xhtml#ch08fig08)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[项目7](ch07.xhtml#ch07)中使用的基本爱好者电机非常适合用于简单的机制，如旋转风扇，但它并不提供很大的*扭矩*（旋转力）。在这个项目中，我们需要用电机来移动整个项目，因此我们需要使用*齿轮电机*——一个连接到*齿轮箱*的电机（见[图
    8-8](ch08.xhtml#ch08fig08)）。
- en: '**FIGURE 8-8:** A geared hobby motor consists of a basic motor and a gearbox'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-8：** 一个齿轮驱动爱好者电机由一个基本电机和一个齿轮箱组成'
- en: '![Image](../images/fig8_8.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_8.jpg)'
- en: A gearbox essentially converts mechanical rotations into torque. This gearbox
    has a 48:1 gear reduction, which means 48 rotations of the motor equal one rotation
    of the output shaft. This slows down the motor by a factor of roughly 1/48 and
    results in a multiplication of the torque by a factor of 48\. Basically, the output
    speed is slower, but the torque is a lot higher.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 齿轮箱本质上将机械旋转转换为扭矩。这个齿轮箱具有48:1的减速比，这意味着电机的48次旋转等于输出轴的1次旋转。这将电机的转速降低大约1/48倍，同时扭矩增加48倍。基本上，输出速度变慢，但扭矩大大增加。
- en: '**BUILD THE DRAWBOT PROTOTYPE**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建DRAWBOT原型**'
- en: Now, let’s wire this up to see how it all works. You’ll connect just one motor
    for now to test the H-bridge motor driver, so you’ll use only one half of the
    dual H-bridge board. [Figure 8-9](ch08.xhtml#ch08fig09) shows how the board and
    Arduino should be wired. The board is split horizontally, with the top half controlling
    Motor A and the bottom half controlling Motor B, though the power pins are used
    for both motors. Connect 5 V and GND from the Arduino to the power rails on the
    breadboard, and make sure to add a jumper wire to connect the two 5 V rails of
    the breadboard so you can use either rail to give power; this will save you from
    crossing too many wires and keep your board neat.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们连接电路，看看它是如何工作的。你现在只需要连接一个电机来测试H桥电机驱动器，因此你只需使用双H桥板的一半。[图 8-9](ch08.xhtml#ch08fig09)显示了电路板和Arduino的连接方式。电路板横向分为两部分，顶部控制电机A，底部控制电机B，尽管电源引脚是两个电机共用的。从Arduino连接5V和GND到面包板的电源轨，并确保添加一根跳线，将面包板上的两个5V轨连接起来，这样你就可以使用任意一个轨道供电；这样可以避免交叉太多的电线，并保持电路板整洁。
- en: '**FIGURE 8-9:** H-bridge test circuit'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-9：** H桥测试电路'
- en: '![Image](../images/fig8_9.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_9.jpg)'
- en: Starting from the top left of the H-bridge, connect 5 V to the top two pins,
    VM and VCC. VM controls the power for the motors, and VCC controls the power for
    the chip. Next, use a jumper wire to connect one of the chip’s GND pins to the
    GND rail of the breadboard. There are three pins available for ground on the H-bridge,
    as you can see in [Figure 8-7](ch08.xhtml#ch08fig07), and you can use any of these.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从 H-桥的左上角开始，连接 5V 到顶部的两个引脚，VM 和 VCC。VM 控制电机的电源，VCC 控制芯片的电源。接下来，使用跳线将芯片的一个 GND
    引脚连接到面包板的 GND 轨道。H-桥上有三个地引脚，如[图 8-7](ch08.xhtml#ch08fig07)所示，你可以选择任意一个。
- en: 'Next you’ll connect the motor. The motor has two wires: red and black. The
    orientation of the wires doesn’t actually matter, but for consistency connect
    the red wire to the pin labeled A01 and the black wire to pin A02.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将连接电机。电机有两根电线：红色和黑色。电线的方向实际上并不重要，但为了保持一致，连接红色电线到标记为 A01 的引脚，黑色电线到标记为 A02
    的引脚。
- en: The remaining pins on the left side are those for controlling the second motor
    and another GND pin, so leave them for now. The pins on the top right of the H-bridge
    breakout board are for the signal wire connections for Motor A. The topmost pin,
    labeled PWMA, controls the motor’s speed. Connect this to pin 11 on the Arduino.
    (Remember that pins 3, 5, 6, 9, 10, and 11 all have PWM capability and can be
    used with the `analogWrite()` function.)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的引脚位于左侧，用于控制第二个电机和另一个 GND 引脚，所以暂时留着它们。H-桥扩展板顶部右侧的引脚用于 Motor A 的信号线连接。最上面的引脚标记为
    PWMA，控制电机的速度。将其连接到 Arduino 的 11 引脚。（记住，3、5、6、9、10 和 11 引脚都支持 PWM 功能，可以与 `analogWrite()`
    函数一起使用。）
- en: The next two pins, labeled AIN2 and AIN1, are used to control the direction
    and drive of Motor A, which you can do by setting these pins to different combinations
    of HIGH and LOW. [Table 8-1](ch08.xhtml#ch08tab01) shows the combinations. Connect
    AIN2 to Arduino pin 12 and AIN1 to Arduino pin 11.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个引脚，标记为 AIN2 和 AIN1，用于控制 Motor A 的方向和驱动，你可以通过将这些引脚设置为不同的高低组合来控制。[表 8-1](ch08.xhtml#ch08tab01)
    显示了这些组合。将 AIN2 连接到 Arduino 的 12 引脚，将 AIN1 连接到 Arduino 的 11 引脚。
- en: '**TABLE 8-1:** H-bridge motor controller functions'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 8-1:** H-桥电机控制器功能'
- en: '| **AIN1** | **AIN2** | **FUNCTION** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **AIN1** | **AIN2** | **功能** |'
- en: '| HIGH | LOW | Clockwise |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 高 | 低 | 顺时针 |'
- en: '| LOW | HIGH | Counterclockwise |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 低 | 高 | 逆时针 |'
- en: '| HIGH | HIGH | Electronic brake (see note) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 高 | 高 | 电子刹车（见注释） |'
- en: '| LOW | LOW | Stop/coast |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 低 | 低 | 停止/滑行 |'
- en: '**NOTE**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**注释**'
- en: '*Setting both pins HIGH will employ* electronic braking. *The two wires of
    the motor are essentially shorted together, causing the motor’s spinning to stop
    abruptly. By contrast, setting both to LOW would just stop actively spinning the
    motors, meaning the wheels would coast to a stop rather than stopping deliberately.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*将两个引脚设置为高电平将启用* 电子刹车。*电机的两根电线基本上被短接在一起，导致电机的旋转突然停止。相反，将两个引脚都设置为低电平将只停止电机的主动旋转，意味着车轮会滑行至停，而不是突然停下。*'
- en: Lastly you’ll need to disable the STBY pin. As mentioned earlier, this H-bridge
    IC has a standby pin that allows you to put the chip into a low-power sleep mode,
    which is useful for applications where power consumption is a concern. For this
    project, you don’t need this feature, so you’ll disable it. This chip is designed
    with STBY as an *active low* input. This means that when this pin is LOW, it goes
    into standby mode. To disable standby, you’ll connect this pin directly to 5 V
    on the power rail.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要禁用 STBY 引脚。如前所述，这个 H-桥 IC 有一个待机引脚，允许你将芯片置于低功耗睡眠模式，这在对功耗有要求的应用中非常有用。对于这个项目，你不需要这个功能，所以你将禁用它。这个芯片设计时将
    STBY 作为*低电平有效*输入。这意味着当该引脚为低电平时，它进入待机模式。要禁用待机，你需要将此引脚直接连接到电源轨上的 5V。
- en: '**PROGRAM THE DRAWBOT**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程 DRAWBOT**'
- en: Let’s start the sketch with a little test. This simple example will spin the
    motor clockwise slowly for 1 second, change directions and spin counterclockwise
    quickly for 1 second, and then stop for 1 second before starting again. Open the
    Arduino IDE, and copy the code in [Listing 8-1](ch08.xhtml#ch08ex01) into your
    window. When you’re done, click **Upload** and watch what happens!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的测试开始。这个简单的示例将使电机顺时针缓慢旋转 1 秒钟，改变方向后快速逆时针旋转 1 秒钟，然后停止 1 秒钟，之后重新开始。打开
    Arduino IDE，将[清单 8-1](ch08.xhtml#ch08ex01)中的代码复制到你的窗口中。完成后，点击 **上传**，然后看看发生了什么！
- en: '**LISTING 8-1:** H-bridge motor controller example of speed and direction control'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-1:** H-桥电机控制器的速度和方向控制示例'
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The sketch starts with a new data type: `const byte` ➊. The keyword `const`
    is used to declare a *constant*, which is like a variable but with a value that
    can’t be changed again later in the code. Thus, constants are useful for declaring
    things that will stay the same throughout the code, like pin numbers or configurations.
    In this case, these constants define the pin numbers that control the H-bridge.
    Since the pin numbers are numbers between 0 and 13, you can define these constants
    as the data type `byte`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图以一种新的数据类型开始：`const byte` ➊。关键字`const`用于声明一个*常量*，它类似于变量，但其值在代码中不能再被改变。因此，常量对于声明那些在代码中始终保持不变的东西非常有用，比如引脚号或配置。在这种情况下，这些常量定义了控制H桥的引脚号。由于引脚号是介于0和13之间的数字，因此可以将这些常量定义为数据类型`byte`。
- en: '**NOTE**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Most of the time it doesn’t matter too much whether you use a constant or
    a variable, but constants use less memory on the Arduino, so it’s good practice
    to use them when you can, and you may see them used in other people’s examples
    online. Also, while it’s not a hard-and-fast rule, constant names are typically
    in all capital letters.*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*大多数情况下，使用常量或变量并不会有太大区别，但常量在Arduino上使用的内存更少，因此在可以使用常量的情况下，最好采用它们，并且你可能会在网上看到其他人的示例中使用常量。此外，虽然这不是一个硬性规定，但常量的命名通常使用全大写字母。*'
- en: Next, you set the pins as outputs, and then set the direction you want the motor
    to spin using two `digitalWrite()` functions ➋ on pins `AIN1` and `AIN2`. The
    first loop block sets `AIN1` to `HIGH` and `AIN2` to `LOW`, which spins the motor
    clockwise. To set the speed, you use an `analogWrite()` function ➌ on the `PWMA`
    pin. You may recall from [Project 5](ch05.xhtml#ch05) that you can use `analogWrite()`
    to set an analog pin to a PWM value from `0` to `255`; the value given here, `50`,
    is relatively slow. The motor will spin for 1 second because of `delay(1000)`,
    and the next loop block changes directions with two more `digitalWrite()` functions
    ➍. Here the sketch simply swaps which pin is `HIGH` and which is `LOW`, sets the
    speed to `255` with `analogWrite()`, and adds another `delay(1000)` to set it
    to spin for 1 second.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将引脚设置为输出，然后使用两个`digitalWrite()`函数 ➋ 设置你希望电机旋转的方向，这两个函数作用于`AIN1`和`AIN2`引脚。第一个循环块将`AIN1`设置为`HIGH`，`AIN2`设置为`LOW`，这会让电机顺时针旋转。为了设置速度，你使用`analogWrite()`函数
    ➌ 作用于`PWMA`引脚。你可能还记得[项目 5](ch05.xhtml#ch05)，你可以使用`analogWrite()`将模拟引脚设置为从`0`到`255`的PWM值；这里给定的值`50`是相对较慢的。电机会旋转1秒钟，因为有`delay(1000)`，接下来的循环块则通过两个`digitalWrite()`函数
    ➍ 改变电机的方向。这里，草图简单地交换了哪个引脚是`HIGH`，哪个是`LOW`，并通过`analogWrite()`将速度设置为`255`，再加上另一个`delay(1000)`，使电机旋转1秒钟。
- en: The last part of the sketch sets both `AIN1` and `AIN2` to `HIGH` ➎, with another
    `delay(1000)`. This applies an electronic brake and stops the motor for 1 second
    before the loop begins again and repeats the pattern.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 草图的最后部分将`AIN1`和`AIN2`都设置为`HIGH` ➎，并添加另一个`delay(1000)`。这应用了电子刹车，并在循环再次开始之前停止电机1秒钟，然后重复该模式。
- en: Using this code as an example, you can now control both the speed and direction
    of a motor with just three lines of code! But we can make this even simpler. Let’s
    clean up the code by using custom functions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以这段代码为例，现在你只需三行代码就可以控制电机的速度和方向！但我们可以让它更简单。让我们通过使用自定义函数来清理代码。
- en: '**Create a Custom Function**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个自定义函数**'
- en: 'At the moment, every time you want to control the motor you’re using three
    lines of code: two to control the direction and one to set the speed. In this
    section you’ll make a custom function that will take just one number to determine
    both the direction and the speed of the spin. This number can be anything between
    `-255` and `255` and will spin the motor clockwise if the number is positive and
    counterclockwise if it’s negative. Add the code in [Listing 8-2](ch08.xhtml#ch08ex02)
    to the very end of your sketch.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，每次你想控制电机时，都会使用三行代码：两行控制方向，一行设置速度。在这一部分，你将创建一个自定义函数，它只需一个数字来同时确定旋转的方向和速度。这个数字可以是`-255`到`255`之间的任何值，如果数字为正，则电机顺时针旋转；如果为负，则电机逆时针旋转。将[Listing
    8-2](ch08.xhtml#ch08ex02)中的代码添加到草图的末尾。
- en: '**LISTING 8-2:** Custom function to set the motor speed of Motor A'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 8-2：** 设置电机A的速度的自定义函数'
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Name the function `setMotorA()` ➊. This function uses a number as a single argument
    named `motorSpeed` ➋ to set the motor’s speed. First, a simple `if()` statement
    determines whether the number is positive or negative by checking whether `motorSpeed`
    is greater or less than zero. If `motorSpeed` is positive ➌, the `if()` statement
    sets the direction pins so that the motor spins clockwise. If it’s negative ➍,
    an `else if()` statement sets the direction pins to spin the motor counterclockwise.
    If it’s neither positive nor negative (that is, if it’s `0`), a final `else` statement
    ➎ sets both direction pins `HIGH` to apply the brake and stop the motor.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数命名为`setMotorA()` ➊。该函数使用一个数字作为单一参数`motorSpeed` ➋来设置电机的速度。首先，一个简单的`if()`语句通过检查`motorSpeed`是否大于零来判断数字是正数还是负数。如果`motorSpeed`为正数
    ➌，`if()`语句设置方向引脚，使电机顺时针旋转。如果它是负数 ➍，`else if()`语句设置方向引脚，使电机逆时针旋转。如果既不是正数也不是负数（即它是`0`），一个最终的`else`语句
    ➎将两个方向引脚设置为`HIGH`，以应用刹车并停止电机。
- en: The line at ➏ uses the `abs()` mathematical function to find the *absolute value*
    of `motorSpeed`. The `analogWrite()` function sets the speed of the motor, but
    it works only with values from `0` to `255`. The `abs()` function makes sure that
    the positive part, or *absolute magnitude*, of `motorSpeed` is used to set the
    speed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ➏行使用`abs()`数学函数来求`motorSpeed`的*绝对值*。`analogWrite()`函数设置电机的速度，但它仅适用于`0`到`255`之间的值。`abs()`函数确保使用`motorSpeed`的正部分，即*绝对值*，来设置速度。
- en: '**Clean Up the Code**'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**清理代码**'
- en: Now, let’s clean up the `loop()` with this new function. You can see in [Listing
    8-3](ch08.xhtml#ch08ex03) that the `loop()` code is much shorter and easier to
    read. Make these changes to the `loop()` in your sketch and upload it to your
    board. It should behave the same way as before. Now, if you want to set the motor
    to a different speed or direction, you can do it with just a single line of code!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过这个新函数来清理`loop()`函数。你可以在[列表 8-3](ch08.xhtml#ch08ex03)中看到，`loop()`的代码变得更简洁，阅读起来也更容易。将这些更改应用到你的草图中的`loop()`，然后上传到你的开发板上。它的表现应该和之前一样。如果你想将电机设置为不同的速度或方向，只需要一行代码！
- en: '**LISTING 8-3:** Simplified version of the `loop()` using the custom function
    `setMotorA()`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-3：** 使用自定义函数`setMotorA()`的简化版`loop()`'
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code sets a `setMotorA()` value and a delay to make each change in speed
    and direction. Now you have the beginnings of your Drawbot! Next, you’ll wire
    the second motor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了一个`setMotorA()`的值和一个延迟，用于调整每次速度和方向的变化。现在你已经有了你的Drawbot的基础！接下来，你将接线第二个电机。
- en: '**WIRE THE SECOND MOTOR**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线第二个电机**'
- en: The DrawBot needs a second motor so it can zip around on two wheels. [Figure
    8-10](ch08.xhtml#ch08fig10) shows how the second motor will be wired. Plug Motor
    B in on the left side of the breakout board just below the connections for the
    first motor, with the red wire connected to B02 and the black wire connected to
    B01\. Next, add the signal control lines to the H-bridge breakout board, just
    below the STBY pin on the right side. Connect the PWMB pin on the H-bridge to
    Arduino pin 10 for speed control, and connect the BIN1 and BIN2 pins to Arduino
    pins 8 and 9, respectively, for direction control.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: DrawBot需要第二个电机，这样它才能在两个轮子上快速移动。[图 8-10](ch08.xhtml#ch08fig10)展示了第二个电机的接线方式。将电机B插入在突破板左侧，位于第一个电机连接处下方，红线连接到B02，黑线连接到B01。接着，将信号控制线添加到H桥突破板，位于右侧的STBY引脚下方。将H桥的PWMB引脚连接到Arduino的引脚10用于速度控制，将BIN1和BIN2引脚分别连接到Arduino的引脚8和9用于方向控制。
- en: '**FIGURE 8-10:** Wiring diagram for the motor driver and two motors'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-10：** 电机驱动器和两个电机的接线图'
- en: '![Image](../images/fig8_10.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_10.jpg)'
- en: Now, you’ll need to add code to control the second motor, as shown in [Listing
    8-4](ch08.xhtml#ch08ex04).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要添加控制第二个电机的代码，具体内容参见[列表 8-4](ch08.xhtml#ch08ex04)。
- en: '**LISTING 8-4:** Adding constants and `pinMode()` functions for Motor B'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-4：** 为电机B添加常量和`pinMode()`函数'
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code adds the three additional constants ➊ for the signal control pins
    for Motor B, and sets each of these pins as `OUTPUT` ➋ in the `setup()`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为电机B添加了三个额外的常量 ➊，用于信号控制引脚，并在`setup()`中将这些引脚设置为`OUTPUT` ➋。
- en: Next, you’ll again write a custom function to control Motor B. This code is
    so similar to the `setMotorA()` function that you can save yourself some typing
    by highlighting the code for `setMotorA()`, copying it (CTRL-C), pasting it (CTRL-V)
    below the `setMotorA()` function, and changing the `A`s to `B`s. This is a technique
    that programmers use a lot, and it can save you a lot of time. You just need to
    make sure you’re careful to change all the `A`s to `B`s in this second custom
    function ([Listing 8-5](ch08.xhtml#ch08ex05)), or the code won’t work.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将再次编写一个自定义函数来控制电机B。这个代码和`setMotorA()`函数非常相似，你可以通过高亮显示`setMotorA()`代码，复制（CTRL-C）并粘贴（CTRL-V）到`setMotorA()`函数下方，然后将`A`改为`B`，节省时间。这是程序员常用的一种技巧，可以节省大量时间。你只需要小心确保将所有`A`都改为`B`，否则代码将无法正常工作（[清单
    8-5](ch08.xhtml#ch08ex05)）。
- en: '**LISTING 8-5:** Custom function for Motor B'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-5：** 电机B的自定义函数'
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The sketch will now need `motorSpeed` values for both `setMotorA()` and `setMotorB()`.
    Let’s add those to test the motors out together.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，草图需要为`setMotorA()`和`setMotorB()`设置`motorSpeed`值。让我们把这些添加进去，测试电机一起工作。
- en: '**DRIVE BOTH MOTORS**'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**驱动两个电机**'
- en: To make your Drawbot drive forward, you’ll need the right motor to spin clockwise
    and the left motor to spin counterclockwise. This may seem counterintuitive, but
    take a look at a robot base from the side. [Figure 8-11](ch08.xhtml#ch08fig11)
    shows a robot frame from both sides with arrows indicating the forward direction.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的绘图机器人前进，你需要右电机顺时针旋转，左电机逆时针旋转。这个看起来可能有些违反直觉，但从侧面看看机器人底盘。[图 8-11](ch08.xhtml#ch08fig11)展示了机器人框架的两侧，并且用箭头标出了前进方向。
- en: '**FIGURE 8-11:** Side views of the robot from the right and left sides. To
    move forward, the right wheel must spin clockwise and the left wheel must spin
    counterclockwise.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-11：** 机器人从左右两侧的侧视图。为了前进，右轮必须顺时针旋转，左轮必须逆时针旋转。'
- en: '![Image](../images/fig8_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_11.jpg)'
- en: On the right side of the robot, the wheel needs to spin clockwise for the robot
    to move forward, but on the left side of the robot, the wheel needs to spin counterclockwise.
    Pay attention to the direction in which each axle is spinning. If you need to,
    attach a piece of masking tape to the spinning end of the motor so that you can
    see the axle’s direction.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人的右侧，电轮需要顺时针旋转才能让机器人前进，而在机器人的左侧，电轮则需要逆时针旋转。注意每个轴的旋转方向。如果需要，可以将一块遮蔽胶带贴在电机旋转端，这样你就能看到轴的旋转方向。
- en: Now, to make the robot go backward, you just reverse those directions. After
    adding the custom function code for `setMotorB()` to your sketch, adjust your
    `loop()` to look like [Listing 8-6](ch08.xhtml#ch08ex06), and then upload this
    code and watch your motors spin!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了让机器人后退，只需反转那些方向。将`setMotorB()`的自定义函数代码添加到你的草图中后，调整你的`loop()`使其像[清单 8-6](ch08.xhtml#ch08ex06)那样，然后上传代码，观察电机旋转！
- en: '**LISTING 8-6:** New `loop()` code to test both motors'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-6：** 测试两个电机的新`loop()`代码'
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should see that Motor A (right side) is spinning clockwise and Motor B (left
    side) is spinning counterclockwise, and then after 1 second they flip. If you
    find that the motors are spinning in the same direction, swap the red and black
    wire connections on *one* ofthe motors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到电机A（右侧）顺时针旋转，而电机B（左侧）逆时针旋转，之后1秒钟它们会互换。如果你发现两个电机在同一方向旋转，请交换*其中一个*电机的红黑线连接。
- en: With just a few lines of code, you can make your Drawbot move forward, turn
    right, turn left, move backward, and jiggle around!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 只需几行代码，你就可以让你的绘图机器人前进、右转、左转、后退，并且摇摆不定！
- en: Now it’s time to build a frame or a *chassis* for your Drawbot. Because the
    code you wrote is all in the `loop()` part of the sketch, your motors will continue
    to spin, stop, spin, and stop. To stop the motors from spinning while you’re building
    the chassis for your Drawbot, temporarily disconnect the USB cable from your computer.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为你的绘图机器人构建一个框架或*底盘*了。因为你编写的代码都在草图的`loop()`部分，所以你的电机会继续旋转、停止、旋转、停止。为了在构建底盘时停止电机的旋转，暂时断开USB线与电脑的连接。
- en: '**BUILD THE DRAWBOT CHASSIS**'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建绘图机器人底盘**'
- en: If you’re using the SIK with the breadboard holder and Arduino baseplate, you’ll
    need to make the chassis of the Drawbot at least as large as the baseplate itself.
    The baseplate measures 6 inches by 4.25 inches. Use a piece of cardboard or thin
    plywood to make your chassis. For our design, we made the chassis a rectangular
    6 × 8-inch cutout, as shown in [Figure 8-12](ch08.xhtml#ch08fig12). You can download
    a PDF of this template from *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是带面包板支架和 Arduino 基板的 SIK，那么你需要将 Drawbot 的底盘做得至少和基板一样大。基板的尺寸是 6 英寸 × 4.25
    英寸。你可以使用一块纸板或薄胶合板制作底盘。根据我们的设计，我们将底盘做成了一个 6 × 8 英寸的矩形，如[图8-12](ch08.xhtml#ch08fig12)所示。你可以从
    *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    下载这个模板的 PDF 文件。
- en: '**FIGURE 8-12:** Drawbot chassis, bottom view (not full size)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-12：** Drawbot 底盘的底部视图（非全尺寸）'
- en: '![Image](../images/fig8_12.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_12.jpg)'
- en: Using tape or a hot glue gun, attach the motors to the underside of the chassis,
    oriented as shown in [Figure 8-13](ch08.xhtml#ch08fig13), with the motor hub near
    the back and the longer end of the motor body toward the front. (Hot glue is a
    great semipermanent method for attaching things because you can simply scrape
    it away with a craft knife and remove the part if you want to reuse it later.)
    You may need to temporarily disconnect the motors from your breadboard circuit
    while you’re attaching them to the chassis, so just remember to reconnect them
    to the circuit after you’ve glued them down. Refer back to [Figure 8-10](ch08.xhtml#ch08fig10)
    if you need help rewiring it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用胶带或热熔胶枪，将电机固定在底盘的底部，按照[图8-13](ch08.xhtml#ch08fig13)所示的方向安装，电机的轮毂靠近后部，电机的较长端朝向前部。（热熔胶是一种很好的半永久性固定方法，因为你可以用工艺刀轻松刮掉它，移除零件，如果以后想重用它。）在将电机固定到底盘时，你可能需要暂时断开电机与面包板电路的连接，所以记得在粘好后重新连接它们。如果需要重新接线，可以参考[图8-10](ch08.xhtml#ch08fig10)。
- en: '**FIGURE 8-13:** Attaching the motors to the chassis with hot glue'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-13：** 使用热熔胶将电机安装到底盘'
- en: '![Image](../images/fig8_13.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_13.jpg)'
- en: We have a hole in our base template that’s designed for a pen or marker. A Drawbot
    needs to be able to draw, after all! To give the pen more stability, we glued
    two smaller pieces of cardboard together to create a taller pen holder. Glue these
    pieces down right on top of the hole, as shown in [Figure 8-14](ch08.xhtml#ch08fig14).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基础模板上有一个孔，是为了安装笔或记号笔设计的。毕竟，Drawbot 需要能够绘图！为了让笔更稳固，我们将两块较小的纸板粘在一起，做成了一个更高的笔架。将这些纸板粘到孔的正上方，如[图8-14](ch08.xhtml#ch08fig14)所示。
- en: '**FIGURE 8-14:** Gluing the pen holder onto the chassis'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-14：** 将笔架粘到底盘上'
- en: '![Image](../images/fig8_14.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_14.jpg)'
- en: Finally, attach the wheels to the motors. You’ll notice that the motor axles
    have two flat edges ([Figure 8-15](ch08.xhtml#ch08fig15)). Make sure you line
    these up with the flat edges on the axle holes of the wheels. The fit may be a
    little tight. Hold on to the entire motor while pushing the wheel on so that you
    don’t accidentally rip the motor off your chassis.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将车轮安装到电机上。你会注意到电机的轴上有两个平面边缘（[图8-15](ch08.xhtml#ch08fig15)）。确保将这些平面边缘与车轮轴孔的平面边缘对齐。安装可能会有点紧。推车轮时，要牢牢握住整个电机，以免不小心把电机从底盘上撕下来。
- en: '**FIGURE 8-15:** Profile of motor axle. Line up the flat edges with the flats
    of the opening on the wheel.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-15：** 电机轴的侧面图。将平面边缘与车轮开口的平面对齐。'
- en: '![Image](../images/fig8_15.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_15.jpg)'
- en: The Drawbot will move around using the two motor wheels as power and steering
    and a skid caster at the other end for balance. This method is called *differential
    steering*. This particular Drawbot is designed as a front-wheel-drive system,
    using a ping-pong ball as a skid caster in the back. As the Drawbot moves around,
    it will skid the ping-pong ball over the surface. Glue the ping-pong ball into
    place as shown in [Figure 8-16](ch08.xhtml#ch08fig16), trying to center it as
    much as possible for the best balance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Drawbot 将使用两个电机车轮作为动力和转向，同时在另一端使用滑动滑轮来保持平衡。这种方法叫做*差动转向*。这个特定的 Drawbot 被设计为前驱系统，后部使用乒乓球作为滑动滑轮。随着
    Drawbot 的移动，乒乓球会在地面上滑动。将乒乓球按[图8-16](ch08.xhtml#ch08fig16)所示粘好，尽量将其居中，以确保最佳平衡。
- en: '**NOTE**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you want to make your own wheels, use the shape and dimensions in [Figure
    8-15](ch08.xhtml#ch08fig15) for the axle holes.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想自己做车轮，可以参考[图8-15](ch08.xhtml#ch08fig15)中轴孔的形状和尺寸。*'
- en: '**FIGURE 8-16:** Attaching a ping-pong ball as a skid caster'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-16：** 将乒乓球作为滑行滑轮安装'
- en: '![Image](../images/fig8_16.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_16.jpg)'
- en: Now, set the breadboard holder, the Arduino, and a battery pack on top of the
    chassis, as shown in [Figure 8-17](ch08.xhtml#ch08fig17). Use a little bit of
    tape or dabs of glue to make sure they don’t move around.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将面包板支架、Arduino 和电池包放置在底盘顶部，如[图8-17](ch08.xhtml#ch08fig17)所示。使用少许胶带或一些胶水点，确保它们不会移动。
- en: '**FIGURE 8-17:** The breadboard holder, the Arduino, and a battery pack on
    the cardboard chassis'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-17：** 面包板支架、Arduino 和电池组安装在纸板底盘上'
- en: '![Image](../images/fig8_17.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_17.jpg)'
- en: '**Test and Troubleshoot**'
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试和故障排除**'
- en: Reconnect the USB cable to your Arduino board or plug in your battery pack and
    watch what happens. You might need to hold on to the cable so that it doesn’t
    get tangled up. The robot should move forward slowly for 1 second, reverse direction
    quickly for 1 second, and then stop for 1 second. Because all of your code is
    in the `loop()`, the Drawbot will repeat this motion over and over again until
    you disconnect it from power. While you’re working on tweaking your code, you
    may want to put the Drawbot’s back end up on a few books to keep the wheels from
    touching the table.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重新连接USB线到你的Arduino板，或者插入电池包，看看发生了什么。你可能需要握住电缆，以免它缠绕。机器人应该会慢慢向前移动1秒钟，快速反向移动1秒钟，然后停止1秒钟。因为你所有的代码都在`loop()`中，所以Drawbot会不断重复这个动作，直到你断开电源。在调试代码时，你可能想将Drawbot的后端垫在几本书上，以避免车轮触碰到桌面。
- en: 'Now, if your robot doesn’t behave like you expect it to, you’ll need to do
    a little troubleshooting to figure out what’s going on. First, identify the problem.
    There are two common problems that we’ve seen with this bot: moving in the wrong
    direction and turning in circles. If it moves backward first instead of forward,
    switch the red and black wires for both motors going to the H-bridge. If your
    robot moves in circles instead of moving forward or backward, try flipping the
    motor wires on either Motor A or Motor B—don’t flip both of them, or you’ll get
    the same problem again. You should now have a Drawbot that moves forward and then
    backward, stops, and repeats this motion.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你的机器人行为不像你预期的那样，你需要进行一些故障排除来找出问题所在。首先，确定问题。有两个常见的问题我们在这个机器人上见过：移动方向错误和转圈。如果它先向后移动而不是向前移动，交换连接到H桥的两个电机的红线和黑线。如果你的机器人转圈而不是向前或向后移动，尝试交换Motor
    A或Motor B的电机线——不要同时交换两者，否则你会遇到同样的问题。现在，你应该有一个可以前进然后后退、停下并重复这个动作的Drawbot。
- en: Before moving on, test how far the Drawbot moves in 1 second and make a note
    of this. You’ll add a marker pen for it to start drawing lines, and you may need
    to adjust the speeds and the times so that the Drawbot is easier to control. Slower
    speeds and shorter times might be best if you’re working on a small table.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，测试一下Drawbot在1秒钟内移动的距离，并记录下来。你会给它加上标记笔开始画线，你可能需要调整速度和时间，以便让Drawbot更容易控制。如果你在一个小桌子上工作，较慢的速度和较短的时间可能是最好的选择。
- en: '**Turn and Make Patterns: A Robot Square Dance**'
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**转弯并制作图案：机器人方舞**'
- en: Now that you’ve mastered moving your robot forward and backward, see what fun
    patterns you can make with your new creation. Before you put a marker onto your
    Drawbot, try turning corners.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了让机器人前进和后退的操作，看看你能用你的新创作做出什么有趣的图案。在将标记笔放到你的Drawbot上之前，试着转弯。
- en: 'To turn the robot to the right, both motors need to spin counterclockwise,
    and to turn the robot left, they need to spin clockwise. See if you can get your
    Drawbot to do a little square dance! To draw a square, the basic steps are as
    follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要让机器人向右转，两个电机都需要逆时针旋转，要让机器人向左转，它们需要顺时针旋转。看看你能不能让你的Drawbot跳个小方舞！画一个方形的基本步骤如下：
- en: • Move forward.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: • 向前移动。
- en: • Turn 90 degrees.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: • 转动90度。
- en: • Move forward.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: • 向前移动。
- en: • Turn 90 degrees.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: • 转动90度。
- en: • Move forward.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: • 向前移动。
- en: • Turn 90 degrees.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: • 转动90度。
- en: • Move forward.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: • 向前移动。
- en: • Turn 90 degrees.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • 转动90度。
- en: '[Figure 8-18](ch08.xhtml#ch08fig18) illustrates the steps needed. You’ll notice
    that you repeat the same steps four times. You already know you can use a `loop()`
    for repeated actions, but loops repeat forever, and you want your Drawbot to stop
    after four turns. Luckily there’s a programming technique that’s perfect for repeating
    a part of the code a set number of times: a `for()` loop.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-18](ch08.xhtml#ch08fig18)展示了所需的步骤。你会注意到，你会重复相同的步骤四次。你已经知道可以使用`loop()`来执行重复的动作，但循环是无限重复的，而你希望你的绘图机器人在四次转动后停止。幸运的是，有一种编程技巧非常适合重复某部分代码指定次数：那就是`for()`循环。'
- en: '**FIGURE 8-18:** Steps to a simple square dance'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-18：** 简单广场舞的步骤'
- en: '![Image](../images/fig8_18.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_18.jpg)'
- en: A `for()` loop starts with the command `for`, followed by a set of parentheses.
    Inside the parentheses there are three sections. See [Listing 8-7](ch08.xhtml#ch08ex07).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`for()` 循环以命令`for`开始，后跟一对圆括号。在圆括号内有三个部分。参见[列表 8-7](ch08.xhtml#ch08ex07)。'
- en: '**LISTING 8-7:** The `for()` loop'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-7：** `for()` 循环'
- en: '[PRE6]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first part ➊ is the declaration and initialization of a counter variable
    that keeps track of repetitions of the loop. You declare this variable as an integer,
    name it `count`, and initialize it to `0`. You can name this variable anything
    you want, so long as you use the same variable name in the next two parts. The
    next part is the *condition statement* ➋, which controls whether the `for()` loop
    continues to repeat or stops. Here, you continue repeating as long as the condition
    statement `count < 4` is `true`. Since `count` was initialized at `0`, this condition
    is `true` on the first pass, and the loop will repeat. The third part is the *increment
    statement* ➌, which tells the `for()` loop what to do with the counter variable
    after each repetition. Here, `count++` is a shorthand for `count = count + 1`.
    This increments the counter variable by 1 for each repetition. The final part
    ➍ is the code that you want to repeat or loop through, like any code you place
    inside curly brackets.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分 ➊ 是计数器变量的声明和初始化，用于跟踪循环的重复次数。你将这个变量声明为整数，命名为`count`，并初始化为`0`。你可以随意命名这个变量，只要在接下来的两个部分使用相同的变量名即可。接下来的部分是*条件语句*
    ➋，它控制`for()`循环是否继续执行或停止。在这里，只要条件语句`count < 4`为`true`，循环就会继续。由于`count`初始化为`0`，所以第一次循环时该条件为`true`，循环将继续。第三部分是*增量语句*
    ➌，它告诉`for()`循环在每次重复后如何处理计数器变量。这里，`count++`是`count = count + 1`的简写，表示每次循环时将计数器变量增加
    1。最后一部分 ➍ 是你希望重复或循环执行的代码，就像你放在花括号中的任何代码一样。
- en: So in all, the `for()` loop’s arguments are saying that the loop should continue
    to run until it’s run four times, at which point the count will be incremented
    to `4`, the condition statement will be `false`, and the loop will exit. The `for()`
    loop is a really handy way to clean up code and repeat instructions a particular
    number of times.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总的来说，`for()` 循环的参数表示循环应继续运行，直到运行四次为止，此时`count`将增加到`4`，条件语句将变为`false`，循环退出。`for()`
    循环是一种非常方便的方式，可以清理代码并将指令重复特定次数。
- en: Now, use this new skill to write your square dance code. Replace the `loop()`
    in your sketch with the `loop()` in [Listing 8-8](ch08.xhtml#ch08ex08). Everything
    else will stay the same.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用这个新技能编写你的广场舞代码。在你的草图中，将`loop()`替换为[列表 8-8](ch08.xhtml#ch08ex08)中的`loop()`。其他部分保持不变。
- en: '**LISTING 8-8:** Square dance code'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-8：** 广场舞代码'
- en: '[PRE7]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**SHORTHAND FOR QUICKLY MANIPULATING VARIABLES**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速操作变量的简写**'
- en: Often you may want to increment, decrement, or just modify the value of a variable
    in code. The most common use is to increment the value of a variable by one for
    each repetition of a loop, which you can do with the code `variableName = variableName
    + 1`. But there are also a few shorthand methods to modify values of variables,
    shown in the following table.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可能希望在代码中增加、减少或修改一个变量的值。最常见的用途是每次循环重复时将变量的值增加 1，你可以使用`变量名 = 变量名 + 1`来实现。但是，也有一些简写的方法可以修改变量的值，如下表所示。
- en: '| **SHORTHAND CODE** | **LONGHAND CODE** | **DESCRIPTION** |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **简写代码** | **完整代码** | **描述** |'
- en: '| `variableName++;` | `variableName = variableName + 1;` | Increment by 1 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `变量名++;` | `变量名 = 变量名 + 1;` | 增加 1 |'
- en: '| `variableName += 2;` | `variableName = variableName + 2;` | Increment by
    2 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `变量名 += 2;` | `变量名 = 变量名 + 2;` | 增加 2 |'
- en: '| `variableName += n;` | `variableName = variableName + *n*;` | Increment by
    *n* |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `变量名 += n;` | `变量名 = 变量名 + *n*;` | 增加 *n* |'
- en: '| `variableName--;` | `variableName = variableName - 1;` | Decrement by 1 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `variableName--;` | `variableName = variableName - 1;` | 递减 1 |'
- en: '| `variableName -= 2;` | `variableName = variableName - 2;` | Decrement by
    2 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `variableName -= 2;` | `variableName = variableName - 2;` | 递减 2 |'
- en: '| `variableName -= n;` | `variableName + variableName - *n*;` | Decrement by
    *n* |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `variableName -= n;` | `variableName + variableName - *n*;` | 递减 *n* |'
- en: '| `variableName *= n;` | `variableName = variableName * *n*;` | Multiply by
    *n* |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `variableName *= n;` | `variableName = variableName * *n*;` | 乘以 *n* |'
- en: '| `variableName /= n;` | `variableName = variableName / *n*;` | Divide by *n*  |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `variableName /= n;` | `variableName = variableName / *n*;` | 除以 *n* |'
- en: To draw a square, the sketch uses the `for()` loop ➊ to repeat the steps four
    times. The robot first drives forward ➋ for just half a second ➌. You want to
    make sure that it doesn’t go too far and draw all over your floors. Next, to turn
    the robot, the sketch sets both motors to spin counterclockwise ➍. To complete
    each square, you add a short, 1-second delay ➎. Notice that the delay is after
    the curly bracket for the `for()` loop. The Drawbot will repeat the steps—move
    forward and turn four times—and then wait for 1 second before the whole `loop()`
    repeats. This will give you a chance to manually move the Drawbot or reposition
    it if you need to. The values in this code worked well in our office, but you
    may need to fine-tune and play around with the speed settings and timing for your
    own Drawbot. Tweak your sketch until you get your Drawbot moving in a square-like
    pattern. Don’t worry if it’s not perfect—just keep testing out the speeds of the
    corner turns. This is part of the art you’ll be creating!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制一个正方形，草图使用 `for()` 循环 ➊ 重复这四个步骤。机器人首先前进 ➋ 半秒钟 ➌。你需要确保它不会走得太远，避免在地板上画得一团乱。接下来，要让机器人转弯，草图将两个电机设置为逆时针旋转
    ➍。为了完成每个正方形，你添加了一个短暂的 1 秒延迟 ➎。注意，延迟是在 `for()` 循环的大括号之后。Drawbot 会重复这四个步骤——前进并转弯四次——然后等待
    1 秒后，整个 `loop()` 循环再重复。这将给你时间手动移动 Drawbot 或重新调整位置，如果需要的话。我们办公室里的这些数值效果很好，但你可能需要根据自己的
    Drawbot 微调速度设置和时间。调整你的草图，直到你得到一个方形的移动模式。如果不完美也没关系——只要继续测试转角的速度。这就是你要创造的艺术的一部分！
- en: We’ve included the full sketch for the square-dancing Drawbot in [Listing 8-9](ch08.xhtml#ch08ex09).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[清单 8-9](ch08.xhtml#ch08ex09)中包括了完整的方形舞步 Drawbot 草图。
- en: '**LISTING 8-9:** Complete Drawbot square dance code'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 8-9：** 完整的 Drawbot 方形舞步代码'
- en: '[PRE8]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we mentioned earlier, the chassis template includes a notch on the front
    end to place a marker. We suggest using either a washable or dry-erase marker.
    Find a large piece of poster paper or dry-erase board that you can lay on the
    floor. Be really careful not to draw all over your floor! It might get you in
    trouble. (Trust us, we’ve made this mistake before, and we definitely regret it.)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，底盘模板的前端有一个凹槽，用来放置标记笔。我们建议使用可洗的或干擦标记笔。找一块大海报纸或干擦板，铺在地板上。务必小心，不要让它在地板上乱画！这可能会惹上麻烦。（相信我们，我们以前犯过这个错误，真是后悔不已。）
- en: Place your Drawbot on the drawing surface. Use a piece of masking tape to secure
    the marker in place, positioning it so that it makes good contact with the drawing
    surface. Move the Drawbot around manually on the drawing surface to test the marker
    placement. Now, plug the USB cable in to your computer and watch what happens.
    Be quick to grab the Drawbot if it looks like it’s going to run off your drawing
    surface and onto the floor.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的 Drawbot 放在绘图表面上。用一块胶带固定标记笔，确保它与绘图表面接触良好。手动移动 Drawbot，在绘图表面上测试标记笔的位置。现在，插入
    USB 电缆连接到电脑，看看会发生什么。如果它看起来会跑出绘图表面，直接掉到地板上，赶紧抓住 Drawbot。
- en: To mix things up, change marker colors or modify your code to draw different
    size squares. See if you can make your Drawbot draw spirals and stars! [Figure
    8-19](ch08.xhtml#ch08fig19) shows some of the fun patterns our Drawbot made in
    our office.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让操作更有趣，改变标记笔的颜色或修改代码来绘制不同大小的正方形。看看你能否让你的 Drawbot 绘制螺旋和星形！[图 8-19](ch08.xhtml#ch08fig19)展示了我们在办公室中
    Drawbot 绘制的一些有趣图案。
- en: '**FIGURE 8-19:** Drawbot in action—make sure you use a large piece of paper
    to keep it from drawing all over the floor!'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-19：** Drawbot 在行动——确保使用一张大纸，以免它把地板弄得满是画！'
- en: '![Image](../images/fig8_19.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8_19.jpg)'
- en: If you want to add some style to your Drawbot, try digging through your craft
    supplies or finding some spare cardboard and see what you can come up with. We
    placed an old pretzel jar container on our Drawbot at the office. It’s now called
    Pretzel Bot, and it drives around and gives away free pretzels ([Figure 8-20](ch08.xhtml#ch08fig20)).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想给你的Drawbot增加一些风格，试着翻翻你的手工材料，或者找一些废弃的纸板，看看你能想到什么。我们在办公室把一个旧的椒盐饼罐放在了我们的Drawbot上。现在它被称为椒盐饼机器人（Pretzel
    Bot），它四处走动并派发免费的椒盐饼（见[图8-20](ch08.xhtml#ch08fig20)）。
- en: '**FIGURE 8-20:** Pretzel Bot! The Arduino and breadboard are hidden inside
    the box.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-20：** 椒盐饼机器人！Arduino和面包板被隐藏在盒子里。'
- en: '![Image](../images/fig8_20.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_20.jpg)'
- en: '**GOING FURTHER**'
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: The Drawbot is an introduction to basic robotics. The simplest robots are really
    just a controller and two motors, and that’s what you have here. We’ll give you
    a few ideas to take it to the next level.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Drawbot是基础机器人学的入门。最简单的机器人实际上只是一个控制器和两个电动机，这正是你在这里拥有的。我们将为你提供一些想法，带你迈向下一个层次。
- en: '**Hack**'
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**黑客**'
- en: Preprogrammed motion is fun, but every time you want to change up the pattern,
    you have to reupload the sketch. But with some changes to the code, you can use
    the Serial Monitor to control your Drawbot while it’s still going.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 预编程的动作很有趣，但每次你想要改变模式时，都需要重新上传草图。不过，通过对代码做一些更改，你可以在Drawbot仍在运行时，通过串口监视器控制它。
- en: So far, you’ve used the Serial Monitor only to read data the Arduino sends back
    to the computer as the project is working, such as sensor data, but the Serial
    Monitor can also send data to the Arduino. Open the Serial Monitor window, and
    you’ll see a small text box at the top with a button labeled Send, as shown in
    [Figure 8-21](ch08.xhtml#ch08fig21). This box allows you to send data to the Arduino
    so you can control it from the Serial Monitor.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只使用串口监视器来读取Arduino在项目运行时发送回计算机的数据，比如传感器数据，但串口监视器也可以向Arduino发送数据。打开串口监视器窗口，你会看到顶部有一个小文本框，并且有一个标记为发送的按钮，如[图8-21](ch08.xhtml#ch08fig21)所示。这个框允许你向Arduino发送数据，这样你就可以从串口监视器控制它。
- en: '**FIGURE 8-21:** Serial Monitor window'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-21：** 串口监视器窗口'
- en: '![Image](../images/fig8_21.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_21.jpg)'
- en: The *P8_DrawbotSerial.ino* sketch (downloadable from *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*)
    uses the Serial Monitor to send just three numbers to control Motor A, Motor B,
    and the driving time.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*P8_DrawbotSerial.ino* 草图（可从 *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    下载）使用串口监视器发送三个数字来控制电动机A、电动机B和驱动时间。'
- en: Take a look at the code. This new sketch declares three variables to hold the
    speed of Motor A, the speed of Motor B, and the delay time, which are the three
    numbers you send. You initialize communication with the Arduino with `Serial.begin(9600);`
    to send and receive data using the Serial Monitor. The Arduino reads the data
    you put into the Serial Monitor and assigns any integers to the three `speedA`,
    `speedB`, and `delayTime` variables, which are then used for the familiar `setMotorA()`,
    `setMotorB()`, and `delay()` functions. See the comments in the code for a more
    complete explanation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 看看代码。这个新的草图声明了三个变量来存储电动机A的速度、电动机B的速度和延迟时间，这三个数字就是你发送的内容。你使用`Serial.begin(9600);`初始化与Arduino的通信，通过串口监视器发送和接收数据。Arduino读取你输入到串口监视器的数据，并将任何整数赋值给三个变量
    `speedA`、`speedB` 和 `delayTime`，然后这些值会用于熟悉的 `setMotorA()`、`setMotorB()` 和 `delay()`
    函数。更多完整的解释可以参考代码中的注释。
- en: Upload the sketch to your Drawbot, open the Serial Monitor, enter **100 -100
    500**, and press ENTER or click **Send** (see [Figure 8-22](ch08.xhtml#ch08fig22)).
    The Drawbot should move forward for half a second and then stop. Now you can fine-tune
    your Drawbot routines without having to reupload the code each time! The code
    will run once and doesn’t repeat unless you give it additional commands. What
    happens when you enter six numbers, such as `100 -100 500 -100 -100 250`? See
    if you can choreograph a dance routine that is represented by a sequence of numbers.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将草图上传到你的Drawbot，打开串口监视器，输入 **100 -100 500**，然后按下ENTER或点击**发送**（参见[图8-22](ch08.xhtml#ch08fig22)）。Drawbot应该向前移动半秒钟后停止。现在，你可以精细调整你的Drawbot程序，而不必每次都重新上传代码！代码将运行一次，除非你给它额外的命令，否则不会重复。当你输入六个数字时，如`100
    -100 500 -100 -100 250`，会发生什么呢？试试看能不能编排出一个由一系列数字表示的舞蹈程序。
- en: '**FIGURE 8-22:** Choreographing a robo-dance'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**图8-22：** 编排机器舞蹈'
- en: '![Image](../images/fig8_22.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig8_22.jpg)'
- en: '**Modify**'
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: What other shapes can you program your Drawbot to create? Use what you learned
    with `for()` loops and see if you can hack your code to make it draw a triangle
    or star. You’ll have to do some experimenting to get the timing and speeds just
    right. What happens when you move just one wheel at a time?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以让你的绘图机器人编程绘制其他哪些形状？运用你学到的 `for()` 循环，看看能否修改代码让它绘制三角形或星形。你需要进行一些实验，调整时机和速度，使其刚刚好。当你一次只移动一个轮子时，会发生什么呢？
- en: '**Bonus**'
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**奖励**'
- en: 'There’s a bonus script (at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*)
    that will let you control the turtle with even simpler commands, like `fd 10`
    and `bk 10` to move forward or backward 10 spaces. Download *P8_BonusTurtle.ino*
    and load it into your IDE. Then open your Serial Monitor and enter a few of the
    following commands: `fd 10` to move forward 10 spaces, `bk 10` to move backward
    10 spaces, `rt 90` to turn right 90 degrees, and `lt 90` to turn left 90 degrees.
    See if you can instruct your new turtle to do a square dance with these instructions!'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个奖励脚本（在 *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*）可以让你使用更简单的命令控制海龟，例如
    `fd 10` 和 `bk 10` 来向前或向后移动 10 步。下载 *P8_BonusTurtle.ino* 并将其加载到你的 IDE 中。然后打开串口监视器，输入以下命令：`fd
    10` 向前移动 10 步，`bk 10` 向后移动 10 步，`rt 90` 向右转 90 度，`lt 90` 向左转 90 度。看看你能否用这些指令让你的新海龟跳一个方形舞！
