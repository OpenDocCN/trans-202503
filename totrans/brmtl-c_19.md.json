["```\n/**\n * Demonstrate the use of extern.\n * @note: Oversimplifies things.\n */\n#include <stdio.h>\n\n1 extern void funct(void);        // An external function\n\nint main()\n{\n    printf(\"In main()\\n\");\n    funct();\n    return (0);\n}\n```", "```\n/**\n * Demonstration of a function module\n */\n#include <stdio.h>\n/**\n * Demonstration function\n */\n1 void funct(void)\n{\n    printf(\"In funct()\\n\");\n}\n```", "```\nmain: main.c func.c\n      gcc -g -Wall -Wextra -o main main.c func.c\n```", "```\nextern void funct(void);        // An external function\n```", "```\nvoid funct(void)\n```", "```\n// File a.c\nextern uint32_t flag;    // A flag\n```", "```\n// File b.c\nint16_t flag;        // A flag\n```", "```\n#include <stdint.h>\nextern uint32_t flag;     // A flag\nint16_t flag;             // A flag\n```", "```\n16.bad.c:3:9: error: conflicting types for 'flag'\n int16_t flag;  // A flag\n\n16.bad.c:2:17: note: previous declaration of 'flag' was here\n extern uint32_t flag; // A flag\n```", "```\n#ifndef __FUNC_H__\n#define __FUNC_H__\n1 extern void funct(void);\n#endif // __FUNC_H__\n```", "```\n#include \"func.h\"\n#include \"func.h\"\n```", "```\n#include \"database.h\"\n#include \"service.h\"\n```", "```\n#include <file.h>\n```", "```\n#include \"file.h\"\n```", "```\n/**\n * Demonstrate the use of extern.\n */\n#include <stdio.h>\n #include \"func.h\"\n\nint main()\n{\n    printf(\"In main()\\n\");\n    funct();\n    return (0);\n}\n```", "```\n/**\n * Demonstration of a function module\n */\n#include <stdio.h>\n#include \"func.h\"\n/**\n * Demonstration function\n */\nvoid funct(void)\n{\n    printf(\"In funct()\\n\");\n}\n```", "```\nCFLAGS = -g -Wall -Wextra\n\nOBJS = main.o func.o\n\n1 main: $(OBJS)\n        gcc -g -Wall -Wextra -o main $(OBJS)\n\nmain.o: main.c func.h\n\nfunc.o: func.c func.h\n```", "```\n$(CC) $(CFLAGS) -c `file.c`\n```", "```\nHAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);\nHAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);\nHAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);\nHAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);\nHAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);\n```", "```\n#include \"square_float.h\"\n\n/**\n * Square a floating-point number.\n *\n * @param number Number to square\n * @returns The square of the number\n */\nfloat square_float(const float number) {\n    return (number * number);\n}\n```", "```\n#ifndef __SQUARE_FLOAT_H__\n#define __SQUARE_FLOAT_H__\nextern float square_float(const float number);\n#endif // __SQUARE_FLOAT_H__\n```", "```\n#include \"square_int.h\"\n\n/**\n * Square an integer.\n *\n * @param number Number to square\n * @returns The square of the number\n */\nint square_int(const int number) {\n    return (number * number);\n}\n```", "```\n#ifndef __SQUARE_INT_H__\n#define __SQUARE_INT_H__\nextern int square_int(const int number);\n#endif // __SQUARE_INT_H__\n```", "```\n#include \"square_unsigned.h\"\n\n/**\n * Square an unsigned integer.\n *\n * @param number Number to square\n * @returns The square of the number\n */\nunsigned int square_unsigned(const unsigned int number) {\n    return (number * number);\n}\n```", "```\n#ifndef __SQUARE_UNSIGNED_H__\n#define __SQUARE_UNSIGNED_H__\nextern unsigned int square_unsigned(const unsigned int number);\n#endif // __SQUARE_UNSIGNED_H__\n```", "```\n#ifndef __SQUARE_H__\n#define __SQUARE_H__\n#include \"square_float.h\"\n#include \"square_int.h\"\n#include \"square_unsigned.h\"\n#endif // __SQUARE_H__\n```", "```\n/**\n * Test the square library.\n */\n#include <stdio.h>\n\n#include \"square.h\"\n\nint main()\n{\n   printf(\"5 squared is %d\\n\", square_int(5));\n   printf(\"5.3 squared is %f\\n\", square_float(5.3));\n   return (0);\n}\n```", "```\nlibsquare.a(square_int.o): square_int.o\n        ar crU libsquare.a square_int.o\n```", "```\nlibsquare.a: libsquare.a(square_int.o) \\\n        libsquare.a(square_float.o)\n\nlibsquare.a(square_unsigned.o)\n        ranlib libsquare.a\n```", "```\nsquare: square.o libsquare.a\n        $(CC) $(CFLAGS) -o square square.o -L. -lsquare\n```", "```\nCFLAGS=-g -Wall -Wextra\n\nall: square\n\nsquare: square.o libsquare.a\n        $(CC) $(CFLAGS) -o square square.o -L. -lsquare\n\nlibsquare.a: libsquare.a(square_int.o) \\\n        libsquare.a(square_float.o) libsquare.a(square_unsigned.o)\n        ranlib libsquare.a\n\nlibsquare.a(square_int.o): square_int.o\n       ar crU libsquare.a square_int.o\n\nlibsquare.a(square_float.o): square_float.o\n        ar crU libsquare.a square_float.o\n\nlibsquare.a(square_unsigned.o): square_unsigned.o\n        ar crU libsquare.a square_unsigned.o\n\nsquare_int.o: square_int.h square_int.c\n\nsquare_float.o: square_float.h square_float.c\n\nsquare_unsigned.o: square_unsigned.h square_unsigned.c\n\nsquare.o: square_float.h square.h square_int.h square_unsigned.h square.c\n```", "```\nvoid USART2_IRQHandler(void) {\n    while(true)\n        continue;\n}\n```", "```\n#include \"sub.h\"\n\nint main()\n{\n    sub1();\n    sub2();\n    return (0);\n}\n```", "```\n#include \"sub.h\"\n\nvoid sub2(void) __attribute__((weak));\n\nvoid sub1(void) {}\nvoid sub2(void) {} \n```", "```\n#ifndef __SUB_H__\n#define __SUB_H__\nextern void sub1(void);\nextern void sub2(void);\n#endif // __SUB_H__\n```", "```\n#include <stdio.h>\n#include \"sub.h\"\n\nvoid sub2(void) {\n    printf(\"The non-weak sub2\\n\");\n}\n```"]