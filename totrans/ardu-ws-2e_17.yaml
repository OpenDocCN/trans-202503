- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Reading RFID Tags
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 读取RFID标签
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将
- en: Learn how to implement RFID readers with your Arduino
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何用Arduino实现RFID读卡器
- en: See how to save variables in the Arduino EEPROM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何将变量保存在Arduino EEPROM中
- en: Design the framework for an Arduino-based RFID access system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计基于Arduino的RFID访问控制系统框架
- en: '*Radio-frequency identification (RFID)* is a wireless system that uses electromagnetic
    fields to transfer data from one object to another, without the two objects touching.
    You can build an Arduino that reads common RFID tags and cards to create access
    systems and to control digital outputs. You may have used an RFID card before,
    such as an access card that you use to unlock a door or a public transport card
    that you hold in front of a reader on the bus. [Figure 18-1](#figure18-1) shows
    some examples of RFID tags and cards.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*射频识别（RFID）* 是一种无线系统，通过电磁场将数据从一个物体传输到另一个物体，两个物体之间无需接触。你可以构建一个Arduino，读取常见的RFID标签和卡片，用于创建访问控制系统和控制数字输出。你可能曾经使用过RFID卡，比如用于解锁门的访问卡，或者在公交车上刷的公共交通卡。[图18-1](#figure18-1)展示了一些RFID标签和卡片的示例。'
- en: '![f18001](image_fi/500587c18/f18001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![f18001](image_fi/500587c18/f18001.png)'
- en: 'Figure 18-1: Example RFID devices'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-1：RFID设备示例
- en: Inside RFID Devices
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RFID设备内部
- en: Inside an RFID tag is a tiny integrated circuit with memory that can be accessed
    by a specialized reader. Most tags don’t have a battery inside; instead, a wire
    coil antenna in the RFID reader broadcasts a jolt of electromagnetic energy to
    the tags. They absorb this energy and use it to power their own circuitry, which
    broadcasts a response back to the RFID reader. [Figure 18-2](#figure18-2) shows
    the antenna coil of the RFID reader that we’ll use in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RFID标签内部有一个微小的集成电路，带有内存，可以被专门的读卡器访问。大多数标签内部没有电池；相反，RFID读卡器中的线圈天线会广播一束电磁能量到标签。标签吸收这些能量并用它为自己的电路提供动力，从而向RFID读卡器广播响应。[图18-2](#figure18-2)展示了我们在本章中使用的RFID读卡器的天线线圈。
- en: '![f18002](image_fi/500587c18/f18002.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f18002](image_fi/500587c18/f18002.png)'
- en: 'Figure 18-2: Our RFID reader'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-2：我们的RFID读卡器
- en: The card reader we’ll use in this chapter is from PMD Way (part number 113990014).
    It’s cheap and easy to use, and it operates at 125 kHz; be sure to purchase two
    or more RFID tags that match that frequency, such as those found at [https://pmdway.com/collections/rfid-tags/](https://pmdway.com/collections/rfid-tags/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的读卡器来自PMD Way（部件号113990014）。它便宜且易于使用，工作频率为125 kHz；确保购买两个或更多匹配该频率的RFID标签，例如可以在[https://pmdway.com/collections/rfid-tags/](https://pmdway.com/collections/rfid-tags/)找到的标签。
- en: Testing the Hardware
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试硬件
- en: In this section, you’ll connect the RFID reader to the Arduino. Then you’ll
    test that it’s working with a simple sketch that reads RFID cards and sends the
    data to the Serial Monitor. To avoid conflict with the serial port between the
    PC and Arduino, the RFID will be connected to other digital pins and use SoftwareSerial,
    as we did in Chapter 15 with the GPS receiver module.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将连接RFID读卡器到Arduino。然后，你将通过一个简单的示例程序来测试其是否正常工作，该程序读取RFID卡并将数据发送到串行监视器。为了避免PC和Arduino之间串行端口的冲突，RFID将连接到其他数字引脚，并使用SoftwareSerial，就像我们在第15章中对GPS接收模块所做的那样。
- en: The Schematic
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: '[Figure 18-3](#figure18-3) shows a diagram of the RFID module connections,
    looking at the top side of the module.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[图18-3](#figure18-3)显示了RFID模块连接的示意图，视图来自模块的顶部。'
- en: '![f18003](image_fi/500587c18/f18003.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![f18003](image_fi/500587c18/f18003.png)'
- en: 'Figure 18-3: RFID module connections'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-3：RFID模块连接图
- en: Testing the Schematic
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试原理图
- en: 'To make the connections between the RFID reader and the Arduino, follow these
    steps, using female-to-male jumper wires:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立RFID读卡器与Arduino之间的连接，请按照以下步骤操作，使用母对公跳线：
- en: Connect the included coil plug to the antenna pins at the bottom left of the
    RFID reader board. They are not polarized and can connect either way.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将随附的线圈插头连接到RFID读卡器板底左侧的天线引脚。这些引脚没有极性，可以任意连接。
- en: Connect the reader’s GND (pin 2) to Arduino GND.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将读卡器的GND（引脚2）连接到Arduino的GND。
- en: Connect the reader’s 5 V (pin 1) to Arduino 5 V.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将读卡器的5V（引脚1）连接到Arduino的5V。
- en: Connect the reader’s RX (pin 4) to Arduino pin D3.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将读卡器的RX（引脚4）连接到Arduino的D3引脚。
- en: Connect the reader’s TX (pin 5) to Arduino pin D2.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将读卡器的TX（引脚5）连接到Arduino的D2引脚。
- en: The Test Sketch
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试示例
- en: Enter and upload [Listing 18-1](#listing18-1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传[清单 18-1](#listing18-1)。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 18-1: RFID test sketch'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 清单18-1：RFID测试示例
- en: Displaying the RFID Tag ID Number
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示RFID标签ID号
- en: Open the Serial Monitor window and wave an RFID tag over the coil. The results
    should look similar to [Figure 18-4](#figure18-4).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![f18004](image_fi/500587c18/f18004.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-4: Example output from [Listing 18-1](#listing18-1)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Notice that 14 numbers are displayed in the Serial Monitor window. Collectively,
    these are the RFID tag’s unique ID number, which we’ll use in future sketches
    to identify the tag being read. Scan all your RFID tags and record their ID numbers,
    because you’ll need them for the next few projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #52: Creating a Simple RFID Control System'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s put the RFID system to use. In this project, you’ll learn how to trigger
    an Arduino event when one of two correct RFID tags is read. The sketch stores
    two RFID tag numbers; when a card whose ID matches one of those numbers is read
    by the reader, it will display *Accepted* in the Serial Monitor. If a card whose
    ID does not match one of the stored IDs is presented, then the Serial Monitor
    will display *Rejected*. We’ll use this as a base to add RFID controls to existing
    projects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enter and upload the following sketch. However, at 1 and 2, replace the `x`’s
    in the array with the set of numbers you noted for two of your RFID tags in the
    previous section. (We discussed arrays in Chapter 6.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Understanding the Sketch
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a tag is presented to the RFID reader, it sends the tag’s numbers, which
    collectively are its ID number, through the serial port. We capture all 14 of
    these numbers and place them in the array `newtag[]` at 7. Next, the tag ID is
    compared against the two tag ID numbers stored at 1 and 2 using the function `checkmytags()`
    at 4 and 8, with the actual comparisons of the tag arrays performed by the function
    `comparetag()` at 3.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The `comparetag()` function accepts the two number arrays as parameters and
    returns (in Boolean) whether the arrays are identical (`true`) or different (`false`).
    If a match is made, the variable `ok` is set to `1` at 5 and 6. Finally, at 9,
    we have the actions to take once the tag read succeeds.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: After uploading the sketch, open the Serial Monitor window and present some
    tags to the reader. The results should be similar to those in [Figure 18-5](#figure18-5).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![f18005](image_fi/500587c18/f18005.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18-5: Results of Project 52'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Storing Data in the Arduino’s Built-in EEPROM
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you define and use a variable in your Arduino sketches, the stored data
    lasts only until the Arduino is reset or the power is turned off. But what if
    you want to keep the values for future use, as in the case of the user-changeable
    secret code for the numeric keypad in Chapter 11? That’s where the *EEPROM (electrically
    erasable read-only memory)* comes in. The EEPROM stores variables in memory inside
    an ATmega328 microcontroller, and the values aren’t lost when the power is turned
    off.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The EEPROM in the Arduino can store 1,024-byte variables in positions numbered
    from 0 to 1,023\. Recall that a byte can store an integer with a value between
    0 and 255, and you begin to see why it’s perfect for storing RFID tag numbers.
    To use the EEPROM in our sketches, we first call the EEPROM library (included
    with the Arduino IDE) using the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 中的 EEPROM 可以在编号为 0 到 1,023 的位置存储 1,024 字节的变量。回想一下，一个字节可以存储一个值介于 0 和
    255 之间的整数，你就能明白它为何非常适合存储 RFID 标签号码。为了在草图中使用 EEPROM，我们首先通过以下代码调用 EEPROM 库（该库已包含在
    Arduino IDE 中）：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, to write a value to the EEPROM, we simply use this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要将值写入 EEPROM，我们只需使用以下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `a` is the position in the EEPROM memory where the information will be
    stored, and `b` is the variable holding the information we want to store in the
    EEPROM at position `a`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`a` 是 EEPROM 存储信息的位置，而 `b` 是存储我们希望存储在位置 `a` 的信息的变量。
- en: 'To retrieve data from the EEPROM, we use this function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 EEPROM 检索数据，我们使用这个函数：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This takes the data stored in EEPROM position number `position` and stores it
    in the variable `value`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把存储在 EEPROM 位置编号为 `position` 的数据存储到变量 `value` 中。
- en: Reading and Writing to the EEPROM
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取和写入到 EEPROM
- en: Here’s an example of how to read and write to the EEPROM. Enter and upload [Listing
    18-2](#listing18-2).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个读取和写入 EEPROM 的示例。输入并上传 [列表 18-2](#listing18-2)。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 18-2: EEPROM demonstration sketch'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18-2：EEPROM 演示草图
- en: In the loop at 1, a random number between 0 and 255 is stored in each EEPROM
    position. The stored values are retrieved in the second loop at 2, to be displayed
    in the Serial Monitor at 3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1 处的循环中，一个介于 0 和 255 之间的随机数被存储在每个 EEPROM 位置中。存储的值会在 2 处的第二个循环中被检索，并显示在 3 处的串口监视器中。
- en: Once the sketch has been uploaded, open the Serial Monitor. You should see something
    like [Figure 18-6](#figure18-6).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦草图上传完成，打开串口监视器。你应该能看到类似于 [图 18-6](#figure18-6) 的内容。
- en: '![f18006](image_fi/500587c18/f18006.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f18006](image_fi/500587c18/f18006.png)'
- en: 'Figure 18-6: Example output from [Listing 18-2](#listing18-2)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-6：来自 [列表 18-2](#listing18-2) 的示例输出
- en: Now you’re ready to create a project using the EEPROM.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始使用 EEPROM 创建一个项目了。
- en: 'Project #53: Creating an RFID Control with “Last Action” Memory'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #53：创建带有“最后操作”记忆的 RFID 控制'
- en: Although Project 52 showed how to use RFID to control something, such as a light
    or electric door lock, we had to assume that nothing would be remembered if the
    system were reset or the power went out. For example, if a light was on and the
    power went out, then the light would be off when the power returned. However,
    you may prefer the Arduino to remember what was happening before the power went
    out and return to that state. Let’s solve that problem now.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管项目 52 展示了如何使用 RFID 控制某些设备，比如灯光或电动门锁，但我们不得不假设如果系统重置或断电，什么都不会被记住。例如，如果灯开着，电源断了，那么电源恢复后灯会熄灭。然而，你可能希望
    Arduino 记住电源断开前的状态，并恢复到那个状态。让我们现在来解决这个问题。
- en: In this project, the last action will be stored in the EEPROM (for example,
    “locked” or “unlocked”). When the sketch restarts after a power failure or an
    Arduino reset, the system will revert to the previous state stored in the EEPROM.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，最后的操作将被存储在 EEPROM 中（例如，“已锁定”或“已解锁”）。当草图因断电或 Arduino 重置而重新启动时，系统将恢复到存储在
    EEPROM 中的先前状态。
- en: The Sketch
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: Enter and upload the following sketch. As you did for Project 52, replace each
    `x` in the arrays at 1 and 2 with the numbers for two of your RFID tags.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图。像项目 52 一样，将数组 1 和 2 中的每个 `x` 替换为你两个 RFID 标签的号码。
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Understanding the Sketch
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: 'This sketch is a modification of Project 52\. We use the onboard LED to simulate
    the status of something that we want to turn on or off every time an acceptable
    RFID ID tag is read. After a tag has been read and matched, the status of the
    lock is changed at 5. We store the status of the lock in the first position of
    the EEPROM. The status is represented by a number: `0` is unlocked and `1` is
    locked. This status will change (from locked to unlocked and back to locked) after
    every successful tag read at 6 or 7.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图是项目 52 的修改版。我们使用板载 LED 来模拟我们希望在每次读取一个有效 RFID ID 标签时开启或关闭的设备状态。每次读取并匹配标签后，锁的状态会在
    5 处改变。我们将锁的状态存储在 EEPROM 的第一个位置。这个状态由一个数字表示：`0` 表示解锁，`1` 表示锁定。每次成功读取标签后，状态会在 6
    或 7 处发生变化（从锁定到解锁，再回到锁定）。
- en: We’ve also introduced a fail-safe in case the EEPROM has worn out. If the value
    returned from reading the EEPROM is not `0` or `1`, we should be notified at 8.
    Furthermore, the status is checked when the sketch restarts after a reset using
    the function `checkLock()` at 1, 2, 3, and 4, which reads the EEPROM value, determines
    the last status, and then sets the lock to that status (locked or unlocked).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还引入了一个故障保护机制，以防 EEPROM 损坏。如果读取 EEPROM 返回的值不是 `0` 或 `1`，我们将在 8 处收到通知。此外，当草图在重置后重新启动时，使用
    `checkLock()` 函数在 1、2、3 和 4 处检查状态，该函数读取 EEPROM 值，确定最后的状态，然后将锁设置为该状态（锁定或解锁）。
- en: Looking Ahead
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: Once again, we have used an Arduino board to re-create simply what could be
    a very complex project. You now have a base to add RFID control to your projects
    that will allow you to create professional-quality access systems and control
    digital outputs with the swipe of an RFID card. We’ll demonstrate this again when
    we revisit RFID in Chapter 20.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，我们使用了一块 Arduino 板来简单地重现可能是一个非常复杂的项目。现在你有了一个基础，可以将 RFID 控制添加到你的项目中，这将允许你通过刷
    RFID 卡来创建专业级的访问系统并控制数字输出。我们将在第 20 章重新访问 RFID 时再次演示这一点。
