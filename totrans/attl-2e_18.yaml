- en: '18'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A CATALOG OF TIPS AND REUSABLE SOLUTIONS FOR CREATING GREAT PROJECTS
  prefs: []
  type: TYPE_NORMAL
- en: '*Experience is a hard teacher because she gives the test first, the lesson
    afterwards.'
  prefs: []
  type: TYPE_NORMAL
- en: —Vernon Sanders Law^([1](footnote.xhtml#ch18fn1))*
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This chapter began as a catalog of reusable solutions—canned macros, if you
    will. But as I finished the chapters preceding this one, it became clear to me
    that I needed to broaden my definition of a *canned solution*. Instead of just
    cataloging interesting macros, this chapter lists several unrelated but important
    tips for creating great projects. Some of these are related to the GNU Autotools,
    but others are merely good programming practice with respect to open source and
    free software projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 1: Keeping Private Details out of Public Interfaces'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At times, I’ve come across poorly designed library interfaces where a project’s
    *config.h* file is required by the project’s public header files. This presents
    a problem when more than one such library is required by a consumer. Which *config.h*
    file should be included? Both have the same name, and chances are that both provide
    similar or identically named definitions.
  prefs: []
  type: TYPE_NORMAL
- en: When you carefully consider the purpose of *config.h*, you see that it makes
    little sense to expose it in a library’s public interface (by including it in
    any of the library’s public header files), because its purpose is to provide platform-specific
    definitions to a particular build of the library. On the other hand, the public
    interface of a portable library is, by definition, platform independent.
  prefs: []
  type: TYPE_NORMAL
- en: Interface design is a fairly general topic in computer science. This item focuses
    a bit more specifically on how to avoid including *config.h* in your public interfaces
    and, by extension, ensuring that you never install *config.h*.
  prefs: []
  type: TYPE_NORMAL
- en: When designing a library for consumption by other projects, you’re responsible
    for not polluting your consumers’ symbol spaces with useless garbage from your
    header files. I once worked on a project that consumed a library interface from
    another team. This team provided both a Windows and a Unix version of their library,
    with the header file being portable between the two platforms. Unfortunately,
    they didn’t understand the definition of a clean interface. At some point in their
    public header files, they had a bit of code that looked like [Listing 18-1](ch18.xhtml#ch18ex1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-1: A poorly designed public header file that exposes platform-specific
    header files*'
  prefs: []
  type: TYPE_NORMAL
- en: Ouch! Did they really need to include *windows.h* just for the definition of
    `HANDLE`? No, and they probably should have used a different name for the handle
    object in their public interface because `HANDLE` is too generic and could easily
    conflict with a dozen other library interfaces. Something like `XYZ_HANDLE` or
    something more specific to the *XYZ* library would have been a better choice.
  prefs: []
  type: TYPE_NORMAL
- en: To properly design a library, first design the public interface to expose as
    little of the library’s internals as is reasonable. Now, you’ll have to determine
    the definition of *reasonable*, but it will probably involve a compromise between
    abstraction and performance.
  prefs: []
  type: TYPE_NORMAL
- en: When designing an API, start with the functionality you want to expose from
    your library; design functions that will maximize ease of use. If you find yourself
    trying to decide between a simpler implementation and a simpler user experience,
    always err on the side of ease of use for your consumers. They’ll thank you by
    actually using your library. Of course, if the interface is already defined by
    a software standard, then much of your work is done for you. Often this is not
    the case, and you will have to make these decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, try to abstract away internal details. Unfortunately, the C language
    doesn’t make this easy to do because you often need to pass structure references
    in public APIs containing internal details of your implementation that consumers
    don’t need to see. (C++ is actually worse in this area: C++ classes define public
    interfaces and private implementation details in the same class definition.)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Solutions in C*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In C, a common solution for this problem is to define a public alias for a private
    structure in terms of a generic (`void`) pointer. Many developers don’t care for
    this approach because it reduces type safety in the interface, but the loss of
    type safety is significantly offset by the increase in interface abstraction,
    as shown in [Listings 18-2](ch18.xhtml#ch18ex2) and [18-3](ch18.xhtml#ch18ex3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-2: An example of a private C-language source file*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-3:* abc_pub.h: *A public header file describing a public interface
    (API)*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the abstraction conveniently alleviates the need to include a bunch
    of really private definitions in the library’s public interface.^([2](footnote.xhtml#ch18fn2))
  prefs: []
  type: TYPE_NORMAL
- en: But there’s a way that makes even better use of language syntax. In C, there’s
    a little-known, and even less used, concept called a *forward declaration* that
    allows you to name the type in a public header file without actually defining
    it there. [Listing 18-4](ch18.xhtml#ch18ex4) provides an example of a library’s
    public header file that uses a forward declaration for the type used in the function
    declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-4: Using a forward declaration in a public header file*'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this use of `struct abc` assumes that some other function in your
    public interface returns pointers to objects of that type that you can then pass
    into `abc_func`. If your user is responsible for filling out the structure before
    passing its address, then this mechanism will obviously not work for you. Rather,
    its use here is for the sole purpose of hiding the internals of `struct abc`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Solutions in C++*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Forward declarations can also be used in C++, but not in the same manner. In
    C++, forward declarations are used more to minimize compile-time header file interdependencies
    than to hide implementation details in public interfaces. We can use other techniques,
    however, to hide implementation details from users.
  prefs: []
  type: TYPE_NORMAL
- en: In C++, hiding implementation details with interface abstraction can be done
    in a few different ways, which include using virtual interfaces and the *PIMPL
    (Private IMPLementation)* pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The PIMPL Pattern
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the PIMPL pattern, implementation details are hidden behind a pointer to
    a private implementation class stored as private data within the public interface
    class, as shown in [Listings 18-5](ch18.xhtml#ch18ex5) and [18-6](ch18.xhtml#ch18ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-5: A private C++-language source file showing the proper use of
    the PIMPL pattern*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-6:* abc_pub.h: *The public header file exposes few private details
    via the PIMPL pattern.*'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, the C++ language also allows the use of a forward declaration
    (like the one at ➊) for any types used only through references or pointers (as
    at ➋) but never actually dereferenced in the public interface. Thus, the definition
    of the implementation class need not be exposed in the public interface because
    the compiler will happily compile the public interface header file without the
    definition of the private implementation class.
  prefs: []
  type: TYPE_NORMAL
- en: The performance tradeoff here generally involves the dynamic allocation of an
    instance of the private implementation class and then the access of class data
    indirectly through this pointer, rather than directly in the public structure.
    Notice that all internal details are now conveniently hidden and thus not required
    by the public interface.
  prefs: []
  type: TYPE_NORMAL
- en: C++ Virtual Interfaces
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Another approach when using C++ is to define a public *interface* class, whose
    methods are declared *pure virtual*, with the interface implemented internally
    by the library. To access an object of this class, consumers call a public *factory*
    function, which returns a pointer to the implementation class in terms of the
    interface definition. [Listings 18-7](ch18.xhtml#ch18ex7) and [18-8](ch18.xhtml#ch18ex8)
    illustrate the concept of C++ virtual interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-7: A private C++ language source file implementing a pure virtual
    interface*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-8:* abc_pub.h: *A public C++ language header file, providing only
    the interface definition*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, I use the C++ preprocessor to define a new keyword, `xyz_interface`. By
    definition, `xyz_interface` is synonymous with `class`, so the terms may be used
    interchangeably. The idea here is that an interface doesn’t expose any implementation
    details to the consumer. The public *factory* function `abc_instantiate` at ➊
    returns a pointer to a new object of type `abc_impl`, except in terms of `abc`.
    Thus, nothing internal needs to be shown to the caller in the public header file.
  prefs: []
  type: TYPE_NORMAL
- en: It may seem like the virtual interface class method is more efficient than the
    PIMPL method, but the fact is that most compilers implement virtual function calls
    as tables of function pointers referred to by a hidden *vptr* address within the
    implementation class. As a result, you still end up calling all of your public
    methods indirectly through a pointer. The technique you choose to help hide your
    implementation details is more a matter of personal preference than performance.^([3](footnote.xhtml#ch18fn3))
  prefs: []
  type: TYPE_NORMAL
- en: When I design a library, I first design a minimal, but complete, functional
    interface with as much of my internal implementation abstracted away as is reasonable.
    I try to use only standard library basic types, if possible, in my function prototypes
    and then include only the C or C++ standard header files required by the use of
    those types and definitions. This technique is the fastest way I’ve found to create
    a highly portable and maintainable interface.
  prefs: []
  type: TYPE_NORMAL
- en: If you still can’t see the value in the advice offered by this item, then let
    me give you one more scenario to ponder. Consider what happens when a Linux distro
    packager decides to create a *devel* package for your library—that is, a package
    containing static libraries and header files, designed to be installed into the
    */usr/lib* and */usr/include* directories on a target system. Every header file
    required by your library must be installed into the */usr/include* directory.
    If your library’s public interface requires the inclusion of your *config.h* file,
    then by extension your *config.h* file must be installed into the */usr/include*
    directory. Now consider what happens when multiple such libraries need to be installed.
    Which copy of *config.h* will win? Only one *config.h* file can exist in */usr/include*.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve seen message threads on the Autotools mailing lists defending the need
    to publish *config.h* in a public interface and providing techniques for naming
    *config.h* in a package-specific manner. These techniques often involve some form
    of post-processing of this file to rename its macros so they don’t conflict with
    *config.h* definitions installed by other packages. While this can be done, and
    while there are a few good reasons for doing so (usually involving a widely used
    legacy code base that can’t be modified without breaking a lot of existing code),
    these situations should be considered the exception, not the rule, because a well-designed
    project should not need to expose platform- and project-specific definitions in
    its public interface.
  prefs: []
  type: TYPE_NORMAL
- en: If your project simply can’t live without *config.h* in its public interface,
    explore the nuances of the `AC_CONFIG_HEADERS` macro. Like all of the instantiating
    macros, this macro accepts a list of input files. The `autoheader` utility only
    writes the first input file in the list, so you can hand-create a second input
    file that contains definitions that you feel must be included in your public interface.
    Remember to name your public input file so as to reduce conflict with other packages’
    public interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Also, explore the *`AX_PREFIX_CONFIG_H`* macro, found in the Autoconf Macro
    Archive (see “Item 8: Using the Autoconf Archive Project” on [page 528](ch18.xhtml#page_528),
    which will add a custom prefix to all items found in* config.h.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 2: Implementing Recursive Extension Targets'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An *extension target* is a `make` target that you write to accomplish some build
    goal that Automake doesn’t automatically support. A *recursive extension target*
    is one that traverses your project directory structure, visiting every *Makefile.am*
    file in your Autotools build system and giving each one the opportunity to do
    some work when the extension target is made.
  prefs: []
  type: TYPE_NORMAL
- en: When you add a new top-level target to your build system, you have to either
    tie it into an existing Automake target or add your own `make` code to the desired
    target that traverses the subdirectory structure provided by Automake in your
    build system.
  prefs: []
  type: TYPE_NORMAL
- en: The `SUBDIRS` variable is used to recursively traverse all subdirectories of
    the current directory, passing requested build commands into the makefiles in
    these directories. This works great for targets that must be built based on configuration
    options, because after configuration, the `SUBDIRS` variable contains only those
    directories destined to be built.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you need to execute your new recursive target in *all* subdirectories,
    regardless of any conditional configuration that might exclude a subdirectory
    specified in `SUBDIRS`, use the `DIST_SUBDIRS` variable instead.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to traverse the build hierarchy, including some really
    simple one-liners provided by GNU `make`-specific syntax. But the most portable
    way is to use the technique that Automake itself uses, as shown in [Listing 18-9](ch18.xhtml#ch18ex9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-9: A makefile with a recursive target (WARNING: no support for
    "`.`" in `SUBDIRS`)*'
  prefs: []
  type: TYPE_NORMAL
- en: At some point in the hierarchy, you’ll need to do something useful besides calling
    down to lower levels. The `preorder_commands` macro at ➊ can be used to do things
    that must be done before recursing into lower-level directories. The `postorder_commands`
    macro at ➋ can likewise be used to do additional things once you return from the
    lower-level directories. Simply define either or both of these macros in any makefiles
    that need to do some pre-order or post-order processing for `my-recursive-target`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to build some generated documentation, you might have
    a special target called `doxygen`. Even if you happen to be okay with building
    your documentation in the top-level directory, there may be times when you need
    to distribute the generation of your documentation to various directories within
    your project hierarchy. You might use code similar to that shown in [Listing 18-10](ch18.xhtml#ch18ex10)
    in each *Makefile.am* file in your project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-10: Implementing *`postorder_commands`* for a `doxygen` directory*'
  prefs: []
  type: TYPE_NORMAL
- en: For directories where *doxyfile* doesn’t exist, you can comment out (or better
    yet, simply omit) the `postorder_commands` macro definition at ➊. In this case,
    the `doxygen` target will be harmlessly propagated to the next lower level in
    the build tree by the three lines of shell code at ➋.
  prefs: []
  type: TYPE_NORMAL
- en: The `exit` statement at the end of ➌ ensures that the build terminates when
    a lower-level makefile fails on the recursive target, propagating the shell error
    code (1) back up to each parent makefile until the top-level shell is reached.
    This is important; without it, the build may continue after a failure until a
    different error is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I chose not to use the somewhat less portable *`-C make`* command line option
    to change directories before running the sub-*`make`* operation. I also use an
    Automake macro called *`am__cd`* to change directories. This macro is defined
    to take the contents of the *`CDPATH`* environment variable into account to reduce
    extraneous output noise during a built. You can replace it with *`cd`* (or *`chdir`*).
    Examine an Automake-generated makefile to see how Automake defines this macro.*'
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to implement a completely recursive global target in this manner,
    you must include [Listing 18-10](ch18.xhtml#ch18ex10) in every *Makefile.am* file
    in your project, even if that makefile has nothing to do with the generation of
    documentation. If you don’t, `make` will fail on that makefile because no `doxygen`
    target exists within it. The commands may do nothing, but the target must exist.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to do something simpler, such as pass a target down to a single
    subdirectory beneath the top-level directory (such as a *doc* directory just below
    the top), life becomes easier. Just implement the code shown in [Listings 18-11](ch18.xhtml#ch18ex11)
    and [18-12](ch18.xhtml#ch18ex12).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-11: A top-level makefile that propagates a target to a single subdirectory*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-12:* doc/Makefile.am: *The code to handle the new target*'
  prefs: []
  type: TYPE_NORMAL
- en: The shell statement at ➊ in the top-level makefile in [Listing 18-11](ch18.xhtml#ch18ex11)
    simply passes the target (`doxygen`) down to the desired directory (`doc`).
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The variables *`DOXYGEN`* and *`DOXYFLAGS`* are assumed to exist by virtue
    of some macro or shell code executed within the *`configure`* script.*'
  prefs: []
  type: TYPE_NORMAL
- en: Automake recursive targets are more sophisticated in that they also support
    `make`’s `-k` command line option to continue building after errors. Additionally,
    Automake’s recursive target implementation supports the use of the dot (`.`) in
    the `SUBDIRS` variable, which represents the current directory. You may also support
    these features, but if you do, your boilerplate recursive `make` shell code will
    be messier. For the sake of completeness, [Listing 18-13](ch18.xhtml#ch18ex13)
    shows an implementation that supports these features. Compare this listing to
    [Listing 18-9](ch18.xhtml#ch18ex9). The highlighted shell code shows the differences
    between these listings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-13: Adding `make -k` and a check for the current directory*'
  prefs: []
  type: TYPE_NORMAL
- en: At ➊, the `case` statement checks for a `-k` option in the `MAKEFLAGS` environment
    variable and, on finding it, sets the `failcom` shell variable to some innocuous
    shell code. If it’s not found, then `failcom` is left at its default value, `exit
    1`, which is then inserted where an exit should occur on error. The `if` statement
    within the `for` loop at ➋ simply skips the recursive call for the dot entry in
    `SUBDIRS`. As with the previous examples, for the current directory, the functionality
    of the recursive target is found entirely within the `$(preorder_commands)` and
    `$(postorder_commands)` macro expansions.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve tried to show you in this item that you can do as much or as little as
    you like with your own recursive targets. Most of the implementation is simply
    shell code in the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 3: Using a Repository Revision Number in a Package Version'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Version control is an important part of every project. Not only does it protect
    intellectual property, but it also allows the developer to back up and start again
    after a long series of mistakes. One advantage of version control systems like
    Git and Subversion is that the system assigns a unique revision number to every
    change to a project’s repository. This means that any distribution of the project’s
    source code can be logically tied to a particular repository revision number.
    This item presents a technique you can use to automatically insert a repository
    revision number into your package’s Autoconf version string.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments to Autoconf’s `AC_INIT` macro must be static text. That is, they can’t
    be shell variables, and Autoconf will flag attempts to use shell variables in
    these arguments as errors. This is all well and good until you want to calculate
    any portion of your package’s version number during the configuration process.
  prefs: []
  type: TYPE_NORMAL
- en: I once tried to use a shell variable in `AC_INIT`’s `VERSION` argument so that
    I could substitute my Subversion revision number into the `VERSION` argument when
    `configure` was executed. I spent a couple of days trying to figure out how to
    trick Autoconf into letting me use a shell variable as a *revision* field in my
    package’s version number. Eventually, I discovered the trick shown in [Listing
    18-14](ch18.xhtml#ch18ex14), which I implemented in my *configure.ac* file and
    in my top-level *Makefile.am* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-14:* configure.ac: *Implementing a dynamic revision number as part
    of the package version*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the shell variable `SVNREV` is set at ➊ to the output of the `svnversion`
    command, as executed on the project top-level directory. The output is a raw Subversion
    revision number—that is, *if* the code is executed in a true Subversion work area,
    which isn’t always the case.
  prefs: []
  type: TYPE_NORMAL
- en: When a user executes this `configure` script from a distribution archive, Subversion
    may not even be installed on his workstation. Even if it is, the top-level project
    directory comes from the archive, not a Subversion repository. To handle these
    situations, the line at ➋ checks to see if `svnversion` can be executed or if
    the output from the first line starts with the first few letters of the phrase
    *Unversioned directory*, the result of executing the `svnversion` utility on a
    non-work-area directory.
  prefs: []
  type: TYPE_NORMAL
- en: If either of these cases is true, the `SVNREV` variable is populated at ➌ from
    the contents of a file called *SVNREV*. The project should be configured to ship
    the *SVNREV* file with a distribution archive containing the configuration code
    in [Listing 18-14](ch18.xhtml#ch18ex14). This must be done because if `svnversion`
    generates a true Subversion repository revision number, that value is immediately
    written to the *SVNREV* file by the `else` clause of this `if` statement at ➍.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the call to `AC_SUBST` at ➎ substitutes the `SVNREV` variable into
    template files, including the project makefiles.
  prefs: []
  type: TYPE_NORMAL
- en: In the top-level *Makefile.am* file, I ensure that the *SVNREV* file becomes
    part of the distribution archive by adding it to the `EXTRA_DIST` list. Thus,
    when a distribution archive is created and published by the maintainer, it contains
    an *SVNREV* file with the source tree revision number used to generate the archive
    from this source code. The value in the *SVNREV* file is also used when an archive
    is generated from the source code in this tarball (via `make dist`). This is accurate
    because the original archive was actually generated from this particular revision
    of the Subversion repository.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, it’s not particularly important that a project’s distribution archive
    be able to generate a proper distribution archive, but an Automake-generated archive
    can do so without this modification, so it should also be able to do so *with*
    it. [Listing 18-15](ch18.xhtml#ch18ex15) highlights the relevant changes to the
    top-level *Makefile.am* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-15:* Makefile.am: *A top-level makefile configured for SVN revision
    numbers*'
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 18-15](ch18.xhtml#ch18ex15), the `distdir` variable controls the
    name of the distribution directory and the archive filename generated by Automake.
    Setting this variable in the top-level *Makefile.am* file affects the generation
    of the distribution archive, because that *Makefile.am* file is where this functionality
    is located in the final generated *Makefile*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note the similarity of the* SVNREV *filename and the *`SVNREV make`* variable
    *`[$(SVNREV)]`* in [Listing 18-15](ch18.xhtml#ch18ex15). Although they appear
    to be the same, the text added to the *`EXTRA_DIST`* line refers to the* SVNREV
    *file in the top-level project directory, while the text added to the *`distdir`*
    variable refers to a *`make`* variable.*'
  prefs: []
  type: TYPE_NORMAL
- en: For most purposes, setting `distdir` in the top-level *Makefile.am* file should
    be sufficient. However, if you need `distdir` to be formatted correctly in another
    *Makefile.am* file in your project, just set it in that file as well.
  prefs: []
  type: TYPE_NORMAL
- en: The technique presented in this item does not automatically reconfigure the
    project to generate a new *SVNREV* file when you commit new changes (and so change
    the Subversion revision used in your build). I could have added this functionality
    with a few well-placed `make` rules, but that would have forced the build to check
    for commits with each new build.^([4](footnote.xhtml#ch18fn4))
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 18-16](ch18.xhtml#ch18ex16) shows code similar to that in [Listing
    18-14](ch18.xhtml#ch18ex14), except this code works for Git, rather than Subversion.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-16:* configure.ac: *Implementing a Git dynamic revision number*'
  prefs: []
  type: TYPE_NORMAL
- en: This version seems a little more intuitive to me because the `git` utility makes
    better use of the proper output channels for error conditions—the output of the
    command is sent to `stderr` if the current working directory is not a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you should also modify the code from [Listing 18-15](ch18.xhtml#ch18ex15)
    to reference the *GITREV* file instead of the *SVNREV* file.
  prefs: []
  type: TYPE_NORMAL
- en: Another great option, if you’re already using Gnulib, is to use the *version-gen*
    module in that library. This module provides many nice features related to incorporating
    a version number into your build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 4: Ensuring Your Distribution Packages Are Clean'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever downloaded and unpacked an open source package and then tried
    to run **`./configure && make`**, only to have it fail halfway through one of
    these steps? As you dug into the problem, perhaps you discovered missing files
    in the archive. How sad to have this happen in an Autotools project, when the
    Autotools make it so easy to ensure that this simply doesn’t happen.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that your distribution archives are always clean and complete, run
    the `distcheck` target on a newly created archive. Don’t be satisfied with what
    you *believe* about your package. Allow Automake to run the distribution unit
    tests. I call these tests *unit tests* because they provide the same testing functionality
    for a distribution package that regular unit tests provide for your source code.
  prefs: []
  type: TYPE_NORMAL
- en: You’d never make a code change and ship a package without running your unit
    tests, would you? (If so, then you can safely skip this section.) Likewise, don’t
    ship your archives without running the build system unit tests—run **`make distcheck`**
    on your project *before* posting your new archives. If the `distcheck` target
    fails, find out why and fix it. The payoff is worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 5: Hacking Autoconf Macros'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Occasionally you need a macro that Autoconf doesn’t quite provide. That’s when
    it pays to know how to copy and modify existing Autoconf macros.^([5](footnote.xhtml#ch18fn5))
  prefs: []
  type: TYPE_NORMAL
- en: For example, here’s a solution to a common Autoconf mailing list issue. A user
    wants to use `AC_CHECK_LIB` to capture a desired library in the `LIBS` variable.
    The catch is that this library exports functions with C++, rather than C linkage.
    `AC_CHECK_LIB` is not very accommodating when it comes to C++, primarily because
    `AC_CHECK_LIB` makes certain assumptions about symbols exported with C linkage
    that just don’t apply to C++ symbols.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the widely known (and standardized) rules of C linkage state that
    an exported C-linkage symbol (also known as the `cdecl` calling convention on
    Intel systems) is case sensitive and decorated with a leading underscore,^([6](footnote.xhtml#ch18fn6))
    whereas a symbol exported with C++ linkage is *mangled* using nonstandard, vendor-defined
    rules. The decorations are based on the signature of the function—specifically,
    the number and types of parameters as well as the classes and/or namespaces to
    which the function belongs. But the exact scheme is not defined by the C++ standard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, stop and consider under what circumstances you’re likely to have symbols
    exported from a library using C++ linkage. There are two ways to export C++ symbols
    from a library. The first is to (either purposely or accidentally) export *global*
    functions without using the `extern "C"` linkage specification on your function
    prototypes. The second is to export entire classes—including public and protected
    methods and class data.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve accidentally forgotten to use `extern "C"` on your global functions,
    well, then, stop it. If you’re doing it on purpose, then I wonder why? The only
    reason I can think of is that you want to export more than one overload of a given
    function name. This seems a rather trivial reason to keep your C developers from
    being able to use your library.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re exporting classes, now that’s another story. In this case, you’re
    catering specifically to C++ users, which presents a real issue with `AC_CHECK_LIB`.
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf provides a framework around the definition of `AC_CHECK_LIB` that allows
    for differences between C and C++. If you use the `AC_LANG([C++])` macro before
    you call `AC_CHECK_LIB`, you’ll generate a version of the test program that’s
    specific to C++. But don’t get your hopes up; the current implementation of the
    C++ version is simply a copy of the C version. I expect that a generic C++ implementation
    would be difficult at best to design.
  prefs: []
  type: TYPE_NORMAL
- en: But all is not lost. While a *generic* implementation would be difficult, as
    the project maintainer, you can easily write a project-specific version of the
    test code using `AC_CHECK_LIB`’s test code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to find the definition of the `AC_CHECK_LIB` macro. A `grep`
    of the Autoconf macro directory (usually */usr/(local/)share/autoconf/autoconf*)
    should quickly locate the definition of `AC_CHECK_LIB` in the file called *libs.m4*.
    Because most macro definitions start with a comment header containing a hash mark
    and then the name of the macro and a single space, the following should work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The definition of `AC_CHECK_LIB` is shown in [Listing 18-17](ch18.xhtml#ch18ex17).^([7](footnote.xhtml#ch18fn7))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-17: The definition of `AC_CHECK_LIB`, as found in* libs.m4'
  prefs: []
  type: TYPE_NORMAL
- en: This apparent quagmire is easily sorted out with a little analysis. The macro
    appears to accept up to five arguments (as shown in the comment header), the first
    two of which are required. The highlighted portion is the macro definition—the
    part we’ll copy into our *configure.ac* file and modify to work with our C++ exports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall from [Chapter 16](ch16.xhtml) that the placeholders for M4 macro definition
    parameters are similar to those of shell scripts: a dollar sign followed by a
    number. The first parameter is represented by `$1`, the second by `$2`, and so
    on. We need to determine which parameters are important to us and which ones to
    discard. We know that most calls to `AC_CHECK_LIB` pass only the first two arguments.
    The third and fourth parameters are optional and exist only so that you can change
    the macro’s default behavior, depending on whether it locates the desired function
    in the specified library. The fifth parameter allows you to provide a list of
    additional linker command line arguments (usually additional library and library
    directory references) that are required to properly link the desired library so
    the test program will not fail for extraneous reasons.'
  prefs: []
  type: TYPE_NORMAL
- en: Say we have a C++ library that exports a class’s public data and methods. Our
    library is named *fancy*, our class is `Fancy`, and the method we’re interested
    in is called `execute`—specifically the `execute` method that accepts two integer
    arguments. Thus, its signature would be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When exported with C linkage, such a function would be presented to the linker
    merely as `_execute` (or simply as `execute`, without the leading underscore,
    on some platforms), but when it’s exported with C++ linkage, all bets are off
    because of vendor-specific name mangling.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only way to get the linker to find this symbol is to declare it in compiled
    source code with exactly this signature, but we don’t supply enough information
    to `AC_CHECK_LIB` to properly declare the function signature in the test code.
    Here’s the declaration required to tell the compiler how to properly mangle this
    method’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that we’re looking for a function with C linkage called `execute`,
    the `AC_CHECK_LIB` macro generates a small test program like the one shown in
    [Listing 18-18](ch18.xhtml#ch18ex18). I’ve highlighted our function name so you
    can easily see where the macro inserts it into the generated test code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-18: An Autoconf-generated check for the global C-language `execute`
    function*'
  prefs: []
  type: TYPE_NORMAL
- en: Except for these two uses of the specified function name, the entire test program
    is identical for every call to `AC_CHECK_LIB`. This macro creates a common prototype
    for all functions so that all functions are treated the same way. Clearly, however,
    not all functions accept no parameters and return a character, as defined in this
    code. `AC_CHECK_LIB` effectively lies to the compiler about the true nature of
    the function. The test only cares whether the test program can successfully be
    linked; it will never attempt to execute it (an operation that would fail spectacularly
    in most cases).
  prefs: []
  type: TYPE_NORMAL
- en: For C++ symbols, we need to generate a different test program—one that makes
    no assumptions about the signature of our exported symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Looking back at ➊ in [Listing 18-17](ch18.xhtml#ch18ex17), it appears as if
    the `AC_LANG_CALL` macro has something to do with the generation of the test code
    in [Listing 18-18](ch18.xhtml#ch18ex18) because the output of `AC_LANG_CALL` is
    generated directly into the first argument of a call to `AC_LINK_IFELSE`; its
    first argument is source code to be tested with the linker. As it turns out, this
    macro, too, is a higher-level wrapper around another macro, `AC_LANG_PROGRAM`.
    [Listing 18-19](ch18.xhtml#ch18ex19) shows the definitions of both macros.^([8](footnote.xhtml#ch18fn8))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-19: The definitions of `AC_LANG_CALL` and `AC_LANG_PROGRAM`*'
  prefs: []
  type: TYPE_NORMAL
- en: At ➊, `AC_LANG_CALL(C)` generates a call to `AC_LANG_PROGRAM`, passing the `PROLOGUE`
    argument in the first parameter. At ➌, this prologue (in the form of `$1`) is
    immediately sent to the output stream. If the second argument passed to `AC_LANG_CALL(C)`
    (`FUNCTION`) is not `main`, a C-style function prototype is generated for the
    function. At ➋, the text `return $2 ();` is passed as the `BODY` argument to `AC_LANG_PROGRAM`,
    which uses this text at ➍ to generate a call to the function. (Remember that this
    code will only be linked, never executed.)
  prefs: []
  type: TYPE_NORMAL
- en: For C++, we need to be able to define more of the test program so that it makes
    no assumptions about the prototype of our exported symbol, and `AC_LANG_CALL`
    is too specific to C, so we’ll use the lower-level macro, `AC_LANG_PROGRAM`, instead.
    [Listing 18-20](ch18.xhtml#ch18ex20) shows how we might rework `AC_CHECK_LIB`
    to handle the function `Fancy::execute(int, int)` from a library called *fancy*.
    I’ve highlighted the places where I’ve modified the original macro definition
    of [Listing 18-17](ch18.xhtml#ch18ex17) on [page 512](ch18.xhtml#page_512).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-20: Hacking a modified version of `AC_CHECK_LIB` into* configure.ac'
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 18-20](ch18.xhtml#ch18ex20), I’ve replaced the parameter placeholders
    with library and function names at ➊ and ➋ and added the prologue and body of
    the program to be generated by `AC_LANG_PROGRAM` at ➌. I’ve also removed some
    extraneous text that specifically had to do with the optional parameters of `AC_CHECK_LIB`
    that I don’t care about in my version.
  prefs: []
  type: TYPE_NORMAL
- en: This code is much longer and more difficult to understand than a simple call
    to `AC_CHECK_LIB`, so it just begs to be turned into a macro. I’ll leave that
    to you as an exercise. Having read [Chapter 16](ch16.xhtml), you should be able
    to do this without too much difficulty. Note also that there is much room for
    optimization in this macro. As you become more proficient with M4, you’ll undoubtedly
    find ways you can reduced the size and complexity of this reworked macro, while
    maintaining the desired functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '*Providing Library-Specific Autoconf Macros*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This item is about hacking Autoconf macros when you need special features not
    provided by the standard macros, but the example I used was specifically about
    looking for a particular function in a library. This is a special case of a more
    general issue: finding libraries that provide desired functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re a library developer, consider providing downloadable Autoconf macros
    that test for the existence of your libraries, and perhaps version-specific functionality
    within them. By doing so, you make it easier for your users to ensure that their
    users have proper access to your libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Such macros don’t have to be general purpose in nature, because they’re tailored
    to a specific library. Library-specific macros are much easier to write and can
    be more thorough in testing for the functionality of your library. As the author,
    you’re more likely to understand all the nuances of various versions of your library,
    so your macros can be spot-on with respect to determining library characteristics
    that your users may need to differentiate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 6: Cross-Compiling'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cross-compilation occurs when the *build system* (the system on which the binaries
    are built) and the *host system* (the system on which those binaries are meant
    to be executed) are not of the same types. For example, we’re cross-compiling
    when we build Motorola 68000 binaries for an embedded system on a typical Intel
    x86 platform running GNU/Linux, or when we build Sparc binaries on a DEC Alpha
    system running Solaris. A far more common scenario is using your Linux system
    to build software designed to run on an embedded microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: The situation becomes even more complex if the software you’re building, such
    as a compiler or linker, can generate software. In this case, the *target system*
    represents the system for which your compiler or linker will ultimately generate
    code. When such a build system involves three different architectures, it’s often
    referred to as a *Canadian cross*.^([9](footnote.xhtml#ch18fn9)) In this case,
    a compiler or linker is built on architecture A to run on architecture B and generate
    code for architecture C. Another type of three-system build, called a *cross-to-native*
    build, involves building an architecture-A compiler *on* architecture A to run
    on architecture B. In this case, three architectures are involved, but the host
    and target architectures are the same. Once you master the concepts of dual-system
    cross-compilation, moving on to using a three-system cross-compile mode is fairly
    simple.
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf generates configuration scripts that attempt to guess the build system
    type and then assume that the host system type is the same. Unless told otherwise
    with command line options, `configure` assumes that non-cross-compilation mode
    is in effect. When executed without command line options that specify the build
    or host system types, an Autoconf-generated configuration script can usually accurately
    determine system type and characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 14, “Manual Configuration,” of the* GNU Autoconf Manual *discusses
    how to put Autoconf into cross-compilation mode. Unfortunately, the information
    that you’ll need in order to write proper* configure.ac *files for cross-compilation
    is spread throughout that manual in bits and pieces. Each macro with nuances specific
    to cross-compilation has a paragraph describing the effects of cross-compilation
    mode on that macro. Search the manual for “cross-comp” to find all the references.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'System types are defined in the *GNU Autoconf Manual* in terms of a three-part
    canonical naming scheme involving CPU, vendor, and operating system, in the form
    `cpu-vendor-os`. But the `os` portion can itself be a pair containing a kernel
    and system type (`kernel-system`). If you know a canonical name for a system,
    you can specify it in each of three parameters to `configure`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--build=build-type`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--host=host-type`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--target=target-type`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These `configure` command line options, with correct canonical system type names,
    allow you to define the build, host, and target system types. (Defining the host
    system type to be the same as your build system type is redundant, because this
    is the default case for `configure`.)
  prefs: []
  type: TYPE_NORMAL
- en: One of the most challenging (and least documented) aspects of using these options
    is determining a proper canonical system name to use in these command line options.
    Nowhere in the *GNU Autoconf Manual* will you find a statement that tells you
    how to contrive a proper canonical name because canonical names are not unique
    for each system type. For instance, in most valid cross-compilation configurations,
    the `vendor` portion of the canonical name is simply ignored and can thus be set
    to anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you use the `AC_CANONICAL_SYSTEM` macro early in your *configure.ac* file,
    you’ll find two new Autoconf helper scripts added to your project directory (by
    `automake --add-missing`, which is also executed by `autoreconf --install`). Specifically,
    these helper scripts are `config.guess` and `config.sub`. The job of `config.guess`
    is to determine, through heuristics, the canonical system name for your user’s
    system—the build system. You can execute this program yourself to determine an
    appropriate canonical name for your own build system. For instance, on my 64-bit
    Intel GNU/Linux system, I get the following output from `config.guess`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, `config.guess` requires no command line options, although
    there are a few available. (Use the `--help` option to see them.) Its job is to
    guess your system type, mostly based on the output of the `uname` utility. This
    guess is used as a default system type that can be overridden by a user on the
    `configure` command line. When cross-compiling, you can use this value in your
    `--build` command line option.^([10](footnote.xhtml#ch18fn10))
  prefs: []
  type: TYPE_NORMAL
- en: 'The task of the `config.sub` program is to accept an input string as a sort
    of alias for a system type that you’re looking for and then to convert it to a
    proper Autoconf canonical name. But what is a valid alias? For a few clues, search
    for “Decode aliases” within `config.sub`. You’ll likely find a comment above a
    bit of code whose job it is to decode aliases for certain `CPU-COMPANY` combinations.
    Here are a few examples executed from my system; you should find the same results
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, a lone CPU name is usually not quite enough information for
    `config.sub` to properly determine a useful canonical name for a desired host
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Notice, too, that there are a few generic keywords that can sometimes provide
    enough information for cross-compilation, without actually providing true vendor
    or operating system names. For instance, `unknown` can be substituted for the
    vendor name in general, and `none` is occasionally appropriate for the operating
    system name. Clearly `elf` is a valid system name as well, and it can be enough
    in some circumstances for `configure` to determine which tool chain to use. However,
    by simply appending a proper vendor name to the CPU, you can allow `config.sub`
    can take a pretty good stab at coming up with the most likely operating system
    for that pair and then generate a useful canonical system type name.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the best way to determine a proper canonical system type name is
    to examine `config.sub` for something close to what you think you should be using
    for a CPU and a vendor name and then simply ask it. While this may seem like a
    shot in the dark, chances are good that if you’ve gotten to the point of writing
    a build system for a program that should be cross-compiled, you’re probably already
    very familiar with the names of your host CPU, vendor, and operating system.
  prefs: []
  type: TYPE_NORMAL
- en: When cross-compiling, you’ll most likely use tools other than the ones you normally
    use on your system or, at the very least, additional command line options on your
    normal tools. Such tools are usually installed in sets as packages. Another clue
    to a proper host system canonical name is the prefix of these tools’ names. There’s
    nothing magic in the way Autoconf handles cross-compilation. The host system canonical
    name is used directly to locate the proper tools by name in the system path. Thus,
    the host system canonical name you use will have to match the prefix on your tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s examine a common scenario: building 32-bit code on a 64-bit machine
    of the same CPU architecture. Technically, this is a form of cross-compilation,
    and it’s often a much simpler scenario than cross-compiling code for an entirely
    different machine architecture. Many GNU/Linux systems support both 32- and 64-bit
    execution. On these systems, you can often use your build system’s tool chain
    to perform this task with special command line options. For example, to build
    C source code for a 32-bit Intel system on a 64-bit Intel system, you would simply
    use the following `configure` command line (I’ve highlighted the lines related
    to cross-compilation):^([11](footnote.xhtml#ch18fn11))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Notice at ➌ that, as far as `configure` is concerned, we are not cross-compiling
    because we haven’t given `configure` any command line options instructing it to
    use a different tool chain than it would normally use. As you can see at ➊ and
    ➋, both the build and host system types are what you’d expect for a 64-bit GNU/Linux
    system. Additionally, because my system is a dual-mode system, it can execute
    test programs compiled with these flags. They’ll run on the 64-bit CPU in 32-bit
    mode just fine.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Many systems require that you install the 32-bit tools before *`gcc`* will
    even recognize the *`-m32`* flag. For example, Fedora systems require the installation
    of the* glibc-devel.i686 *package, and my Linux Mint (Ubuntu-based) system required
    me to install the* gcc-multilib *package.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be even more certain of a proper build on Linux systems, you can also use
    the `linux32` utility to change the personality of your 64-bit system to that
    of a 32-bit system, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We use `linux32` here because some subscripts executed by `configure` may inspect
    `uname -m` to determine the build machine’s architecture. The `linux32` utility
    ensures that these scripts properly see a 32-bit Linux system. You can test this
    yourself by running `uname` under `linux32`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To get this sort of cross-compile to work on a Linux dual-mode system, you usually
    need to install one or more 32-bit development packages, as noted previously.
    If your project uses other system-level services, such as a graphical desktop,
    you will need the 32-bit versions of these libraries, as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s do it the more conventional (dare I say, *canonical*?) way. Rather
    than add `-m32` to the `CPPFLAGS` and `LDFLAGS` variables, we’ll set the build
    and host system types manually on the `configure` command line and see what happens.
    Again, I’ve highlighted the output lines related to cross-compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Several key lines in this example indicate that, as far as `configure` is concerned,
    we’re cross-compiling. The cross-compilation build environment is `x86_64-pc-linux-gnu`,
    while the host is `i686-pc-linux-gnu`.
  prefs: []
  type: TYPE_NORMAL
- en: But notice the highlighted `WARNING` text at ➋. My system doesn’t have a tool
    chain that’s dedicated to building 32-bit Intel binaries. Such a tool chain includes
    all of the same tools required to build the 64-bit versions of my products, but
    the 32-bit versions are prefixed with the canonical system name of the host system.
    If you don’t have a properly prefixed tool chain installed and available in the
    system path, `configure` will default to using the build system tools—those without
    a prefix. This can work fine if your build system’s tools can cross-compile to
    the host system with proper command line options and if you’ve also specified
    those options in `CPPFLAGS` and `LDFLAGS`.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you’d have to install a tool chain designed to build the correct type
    of binaries. In this example, a version of such tools could easily be provided
    by creating soft links and simple shell scripts that pass additional required
    flags. According to the `configure` script output at ➊ and ➌, I need to provide
    `i686-pc-linux-gnu-` prefixed versions of `strip` and `gcc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, such foreign tool chains are installed into an auxiliary directory,
    which means you’d have to add that directory to your system `PATH` variable in
    order to allow `configure` to find them. For this example, I’ll just create them
    in *~/bin*.^([12](footnote.xhtml#ch18fn12)) Once again I’ve highlighted the output
    text related to cross-compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This time, `configure` was able to find the proper tools. Notice that the compiler
    command at ➊ no longer contains the `-m32` flag. It’s there, but it’s hidden inside
    the `i686-pc-linux-gnu-gcc` script. As far as the Autotools are concerned, `i686-pc-linux-gnu-gcc`
    already knows how to build 32-bit binaries on a 64-bit system.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-compilation is not for the average end user. As open source software developers,
    we use packages like the Autotools to ensure that our end users don’t have to
    be experts in software development in order to build and install our packages.
    But cross-compilation requires a certain level of system configuration that is
    beyond the scope of what the Autotools generally expect of end users. Additionally,
    cross-compilation is used most often within specialized fields, such as tool chain
    or embedded systems development. End users in these areas usually *are* experts
    in software development.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few places where cross-compilation can, and possibly should, be
    made available to the average end user. However, I strongly encourage you to be
    explicit and detailed in the instructions you provide your users in your *README*
    and *INSTALL* documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 7: Emulating Autoconf Text Replacement Techniques'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Say your project builds a daemon that is configured at startup with values
    in a configuration text file. How does the daemon know where to find this file
    on startup? One way is to simply assume it’s located in */etc*, but a well-written
    program will allow the user to configure this location when building the software.
    The system configuration directory has a variable location whose value can be
    specified on the `configure`, `make all`, or `make install` command line, as shown
    in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: All of these examples take advantage of command line functionality provided
    by Autotools build systems, so they must all be carefully taken into account when
    creating project and project build source files. Let’s look at some examples that
    will explain how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Now, some conditions simply can’t work. For instance, you can’t pass a system
    configuration directory path into C source code from within the makefile when
    you build your program and then expect it to run correctly if you change where
    the configuration files are installed on the `make install` command line. Most
    end users won’t pass anything on the command line, but you should still ensure
    that they can set prefix directories from the `configure` and `make` command lines.
  prefs: []
  type: TYPE_NORMAL
- en: This item is focused on placing command line prefix variable override information
    into the proper locations in your code and installed data files as late as possible
    in the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Autoconf replaces text in `AC_SUBST` variables with the values of those variables
    as defined in `configure` at configuration time, but it doesn’t replace the text
    with raw values. In an Autotools project, if you execute `configure` with a specific
    `datadir`, you get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see at ➊ that the value of the shell variable `datadir` in `configure`
    is substituted exactly according to the command line instructions in the `make`
    variable `datadir` in *Makefile*. What’s not obvious here is that the default
    value of `datadir`, both in the `configure` script and in the makefile after substitution,
    is relative to other variables within the build system. By not overriding `datadir`
    on the `configure` command line, we see that the default value in the makefile
    contains unexpanded shell variable references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 3](ch03.xhtml) (see [Listing 3-36](ch03.xhtml#ch03ex36)), we saw
    that we could pass command line options to the preprocessor that would allow us
    to consume these sorts of path values within our source code. [Listing 18-21](ch18.xhtml#ch18ex21)
    demonstrates this by passing a C-preprocessor definition in the `CPPFLAGS` variable
    for a hypothetical program called `myprog`.^([13](footnote.xhtml#ch18fn13))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-21: Pushing prefix variables into C source code in* Makefile.am
    *or* Makefile.in'
  prefs: []
  type: TYPE_NORMAL
- en: A C source file might then contain the code shown in [Listing 18-22](ch18.xhtml#ch18ex22).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-22: Using the preprocessor-defined variables in C source code*'
  prefs: []
  type: TYPE_NORMAL
- en: Automake does nothing special with the line in [Listing 18-21](ch18.xhtml#ch18ex21)
    between *Makefile.am* and *Makefile.in*, but the `configure` script converts the
    *Makefile.in* line into the *Makefile* line shown in [Listing 18-23](ch18.xhtml#ch18ex23).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-23: The resulting* Makefile *line after `configure` substitutes
    `@sysconfdir@`*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When `make` passes this option on the compiler command line, it dereferences
    the variables to produce the following output command line (shown only in part
    here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: There are a couple of problems with this approach. First, between `configure`
    and `make`, you lose the resolution of the `sysconfdir` variable because `configure`
    substitutes `${prefix}`*/etc*, rather than `${sysconfdir}`, for `@sysconfdir@`.
    The problem is that you can no longer set the value of `sysconfdir` on the `make`
    command line. To solve this problem, use the `${sysconfdir} make` variable directly
    in your `CPPFLAGS` variable, as shown in [Listing 18-24](ch18.xhtml#ch18ex24),
    rather than the Autoconf `@sysconfdir@` substitution variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-24: Using the `make` variable in `CPPFLAGS` instead of the Autoconf
    substitution variable*'
  prefs: []
  type: TYPE_NORMAL
- en: You can use this approach to specify a value for `sysconfdir` on both the `configure`
    and `make` command lines. Setting the variable on the `configure` command line
    defines a default value in *Makefile.in* (and subsequently in the generated *Makefile*),
    which can then be overridden on the `make` command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem with using different values on the `make all` and `make install`
    command lines is a bit more subtle. Consider what happens if you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Here, you’re basically lying to the compiler when you tell it that your configuration
    file will be installed in */usr/local/myprog/etc* during the build. The compiler
    will happily generate the code in [Listing 18-22](ch18.xhtml#ch18ex22) so that
    it refers to this path; the second command line will then install your configuration
    file into */etc*, and your program will contain a hardcoded path to the wrong
    location. Unfortunately, there’s little that you can do to correct this, because
    you’ve allowed your users to define these variables anywhere and because the *GNU
    Coding Standards* state the `make install` shouldn’t recompile anything.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*There are cases where different installation paths are given to the build
    and install processes on purpose. Recall the discussion of *`DESTDIR`* in “Getting
    Your Project into a Linux Distro” on [page 67](ch03.xhtml#page_67), wherein RPM
    packages are built and installed in a staging directory so that built products
    can be packaged in an RPM to be installed into the correct location later.*'
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the potential pitfalls, being able to specify installation locations
    on the `make` command line is a powerful technique, but one that only works in
    makefiles because it relies heavily on `make` variable substitution within compiler
    command lines in your makefiles.
  prefs: []
  type: TYPE_NORMAL
- en: What if you want to replace a value in an installed data file that isn’t processed
    by `make` on a shell command line? You could convert your data file into an Autoconf
    template and then simply reference the Autoconf substitution variable within that
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, we did just that in the *doxyfile.in* templates that we created for
    the FLAIM project in [Chapter 15](ch15.xhtml). However, this only worked in Doxygen
    input files because the class of variables used in those templates is always defined
    with complete absolute or relative paths by `configure`. That is, the values of
    `@srcdir@` and `@top_srcdir@` contain no additional shell variables. These variables
    are not installation directory (prefix) variables, which, with the exception of
    `prefix` itself, are always defined relative to other prefix variables.
  prefs: []
  type: TYPE_NORMAL
- en: You can, however, *emulate* the Autoconf substitution variable process within
    a makefile, allowing substitution variables to be used in installed data files.
    [Listing 18-25](ch18.xhtml#ch18ex25) shows a template in which you might want
    to replace variables with path information normally found in the standard prefix
    variables during a build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-25: A sample config file template for myprog, to be installed in
    `$(sysconfdir)`*'
  prefs: []
  type: TYPE_NORMAL
- en: This template is for a program configuration file, which might normally be installed
    in the system configuration directory. We want the location of the program’s log
    file, specified in this configuration file, to be determined at install time by
    the value of `@localstatedir@`. Unfortunately, `configure` would replace this
    variable with a string containing at least `${prefix}`, which is not useful in
    a program configuration file. [Listing 18-26](ch18.xhtml#ch18ex26) shows a *Makefile.am*
    file with additional `make` script to generate *myprog.cfg* by performing substitution
    on variables in *myprog.cfg.in*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-26: Substituting `make` variables into data files using `sed` in
    a makefile*'
  prefs: []
  type: TYPE_NORMAL
- en: In this *Makefile.am* file, I’ve defined a custom `make` target at ➌ to build
    the *myprog.cfg* data file. I’ve also defined a `make` variable called `edit`
    at ➋, which resolves to a partial `sed` command that replaces all instances of
    `@localstatedir@` in the template file (`$(srcdir)/`*myprog.cfg.in*) with the
    value of the `$(localstatedir)` variable. Because `make` recursively processes
    variable replacements until all variable references are resolved, using `make`
    in this manner will ensure that you never leave any variable references in your
    final output. In the command where this variable is used, `sed`’s output is redirected
    to the output file (*myprog.cfg*).^([14](footnote.xhtml#ch18fn14))
  prefs: []
  type: TYPE_NORMAL
- en: The only nonobvious code in this example is the use of the square brackets around
    the trailing at sign (`@`) in the `sed` expression, which represent regular expression
    syntax indicating that any of the enclosed characters should be matched. Because
    there is only one enclosed character, this would seem to be a pointless complication,
    but the purpose of these brackets is to keep `configure` from replacing `@localstatedir@`
    in the `edit` variable when it performs Autoconf variable substitution on this
    makefile. We want `make` to use this variable, not `configure`.
  prefs: []
  type: TYPE_NORMAL
- en: I assign *myprog.cfg* to the `sysconf_DATA` variable at ➊ to tie execution of
    this new rule into the framework provided by Automake. Automake will install this
    file into the system configuration directory after building it, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The files in `DATA` primaries are added as dependencies to the `all` target
    via the internal `all-am` target. If *myprog.cfg* doesn’t exist, `make` will look
    for a rule to build it. Since I have such a rule, `make` will simply execute that
    rule when I build the `all` target.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve added the template file name *myprog.cfg.in* to the `EXTRA_DIST` variable
    at the top of [Listing 18-26](ch18.xhtml#ch18ex26) because neither Autoconf nor
    Automake is aware of this file. In addition, I’ve added the generated file *myprog.cfg*
    to the `CLEANFILES` variable at the bottom of the listing because, as far as Automake
    is concerned, *myprog.cfg* is a distributed data file that should not be automatically
    deleted by `make clean`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This example demonstrates a good reason for Automake to not automatically
    distribute files listed in *`DATA`* primaries. Sometimes such files are built
    in this manner. If built data files were automatically distributed, the *`distcheck`*
    target would fail because myprog.cfg was not available for distribution before
    building.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I tied the building of *myprog.cfg* into the install process
    by adding it to the `sysconf_DATA` variable, and then I placed a dependency between
    *mydata.cfg.in* and *mydata.cfg*^([15](footnote.xhtml#ch18fn15)) to ensure that
    the installed file is built when `make all` is executed. You could also tie into
    a standard or custom build or installation target using appropriate `-hook` or
    custom targets.
  prefs: []
  type: TYPE_NORMAL
- en: No discussion of this topic would be complete without a mention of the Gnulib
    *configmake* module. If you’re already using Gnulib and need to do something like
    what I’ve been talking about in this item, consider using *configmake*, which
    creates a *configmake.h* header file that can be included by your source files
    to provide access to all of the standard directory variables as C preprocessor
    macros. It’s only useful for C code, so you’d still need the techniques I’ve shown
    you here for non-C-source code use cases (such as installed configuration files
    that need to reference prefix variable paths).
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 8: Using the Autoconf Archive Project'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In “Item 5: Hacking Autoconf Macros” on [page 511](ch18.xhtml#page_511), I
    demonstrated a technique for hacking Autoconf macros to provide functionality
    that’s close to, but not exactly the same as, that of the original macro. When
    you need a macro that Autoconf doesn’t provide, you can either write it yourself
    or look for one that someone else has written. This item is about the second option,
    and a perfect place to begin your search is the Autoconf Archive project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As of this writing, the Autoconf Archive source project is hosted by GNU Savannah.^([16](footnote.xhtml#ch18fn16))
    The original ac-archive project was the result of a merger between two older projects:
    one by Guido Draheim (at *[http://ac-archive.sourceforge.net/](http://ac-archive.sourceforge.net/)*)
    and the other by Peter Simon (at *http://auto-archive.cryp.to*). The first of
    these sites is still online today, although it displays a huge red warning box
    indicating that you should submit updates to the GNU Autoconf Macro Archive at
    Savannah; the second has been taken down. There is some long history and not a
    few flame wars on email lists between these two projects. Ultimately, each project
    incorporated most of the contents of the other, but Peter Simon’s is the one that
    was migrated into the Savannah repository, and the current home page is found
    at *[https://www.gnu.org/software/autoconf-archive/](https://www.gnu.org/software/autoconf-archive/)*.^([17](footnote.xhtml#ch18fn17))'
  prefs: []
  type: TYPE_NORMAL
- en: The value in the archive is that private macros become public and public macros
    are incrementally improved by many users.
  prefs: []
  type: TYPE_NORMAL
- en: As of this writing, the macro archive contains over 500 macros not distributed
    with Autoconf, including the `AX_PTHREAD` macro discussed in “Doing Threads the
    Right Way” on [page 384](ch14.xhtml#page_384). The latest release of the archive
    can be checked out from the project’s Savannah git site. The site indexes macros
    by category, author, and open source license, allowing you to choose macros based
    on specific criteria. You can also search for a macro by name or by entering any
    text that might be found in the macro’s header comments.
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself in need of a macro that Autoconf doesn’t appear to provide,
    check out the Autoconf Archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 9: Using Incremental Installation Techniques'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some people have requested that `make install` be made smart enough to install
    only files that are not already installed or that are newer than installed versions
    of the same files.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is available by default to users by passing the `-C` command line
    option to `install-sh`. It can be enabled directly by end users by using the following
    syntax on the `make` command line during execution of `make install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If you think your users will benefit from this option, consider adding some
    information about its proper use to the *INSTALL* file that ships with your project.
    Don’t you just love features you don’t have to implement?
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 10: Using Generated Source Code'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automake requires that all source files used within a project be statically
    defined within the project’s *Makefile.am* files, but sometimes the contents of
    source files need to be generated at build time.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to deal with generated sources (more specifically, generated
    header files) in your projects. The first involves the use of an Automake-provided
    crutch for developers not interested in the finer points of `make`. The second
    involves writing proper dependency rules to allow `make` to understand the relationships
    between your source files and your products. I’ll cover the crutch first, and
    then we’ll get into the details of proper dependency management in *Makefile.am*
    files.
  prefs: []
  type: TYPE_NORMAL
- en: '*Using the BUILT_SOURCES Variable*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you have a header file that’s generated as part of your build process,
    you can tell Automake to generate rules that will always create this file first,
    before attempting to build your products. To do this, add the header file to the
    Automake `BUILT_SOURCES` variable, as shown in [Listing 18-27](ch18.xhtml#ch18ex27).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-27: Using `BUILT_SOURCES` to deal with generated source files*'
  prefs: []
  type: TYPE_NORMAL
- en: The `nodist_program_SOURCES` variable ensures that Automake will not generate
    rules that try to distribute this file; we want it to be built when the end user
    runs `make`, not shipped in the distribution package.
  prefs: []
  type: TYPE_NORMAL
- en: Without a user-provided clue, Automake-generated makefiles have no way of knowing
    that the rule for *generated.h* should be executed before *program.c* is compiled.
    I call `BUILT_SOURCES` a “crutch” because it simply forces the rules used to generate
    the listed files to execute first, and only when the user makes the `all` or `check`
    target. The rules created using `BUILT_SOURCES` aren’t even executed if you attempt
    to make the `program` target directly. With that said, let’s look at what’s going
    on under the covers.
  prefs: []
  type: TYPE_NORMAL
- en: '*Dependency Management*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two distinct classes of source files in a C or C++ project: those
    explicitly defined as dependencies within your makefile and those referenced only
    indirectly through, for instance, preprocessor inclusion.'
  prefs: []
  type: TYPE_NORMAL
- en: You can hardcode all of these dependencies directly into your makefiles. For
    instance, if *program.c* includes *program.h*, and if *program.h* includes *console.h*
    and *print.h*, then *program.o* actually depends on all of these files, not just
    *program.c*. And yet, a normal handcoded makefile explicitly defines only the
    relationships between the *.c* files and the program. For a truly accurate build,
    `make` needs to be told about all of these relationships using a rule like the
    one shown in [Listing 18-28](ch18.xhtml#ch18ex28).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-28: Rules describing the complete relationship between files*'
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between *program.o* and *program.c* is often defined by an
    *implicit* rule, so the rule at ➊ in [Listing 18-28](ch18.xhtml#ch18ex28) is often
    broken into two separate rules, as shown in [Listing 18-29](ch18.xhtml#ch18ex29).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-29: An implicit rule for C source files, defined as a GNU `make`
    pattern rule*'
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 18-29](ch18.xhtml#ch18ex29), the GNU `make`-specific *pattern rule*
    at ➊ tells `make` that the associated command can generate a file ending in *.o*
    from a file of the same base name ending in *.c*.^([18](footnote.xhtml#ch18fn18))
    Thus, whenever `make` needs to find a rule to generate a file ending in *.o* that’s
    listed as a dependency in one of your rules, it searches for a *.c* file with
    the same base name. If it finds one, it applies this rule to rebuild the *.o*
    file from the corresponding *.c* file if the timestamp on the *.c* file is newer
    than that of the existing *.o* file or if the *.o* file is missing.
  prefs: []
  type: TYPE_NORMAL
- en: There is a documented set of implicit pattern rules built into `make`, so you
    don’t generally have to write such rules. Still, you must somehow tell `make`
    about the indirect^([19](footnote.xhtml#ch18fn19)) dependencies between the *.o*
    file and any included *.h* files. These dependencies cannot simply be implied
    with a built-in rule because there are no implicit relationships between these
    files that are based on file naming conventions, such as the relationship between
    *.c* and *.o* files. The relationships are manually coded into the source and
    header files as inclusions.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned in [Chapter 3](ch03.xhtml), writing such rules is tedious and
    error prone, because during development (and even maintenance, to a lesser degree),
    the myriad relationships between source and header files can change all the time
    and the rules must be updated carefully with each change to keep the build accurate.
    The C preprocessor is much better suited to automatically writing and maintaining
    these rules for you.
  prefs: []
  type: TYPE_NORMAL
- en: A Two-Pass System
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There are two ways to use the preprocessor to manage dependencies. The first
    is to create a two-pass system, wherein the first pass just builds the dependencies
    and the second pass compiles the source code based on those dependencies. This
    is done by defining rules that use certain preprocessor commands to generate `make`
    dependency rules, as shown in [Listing 18-30](ch18.xhtml#ch18ex30).^([20](footnote.xhtml#ch18fn20))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-30: Building automatic dependencies directly*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Listing 18-30](ch18.xhtml#ch18ex30), the pattern rule at ➊ specifies the
    same sort of relationship between *.d* and *.c* files as the one shown at ➊ in
    [Listing 18-29](ch18.xhtml#ch18ex29) does for *.o* and *.c* files. The `sinclude`
    statement here at ➋ tells `make` to include another makefile, and GNU `make` is
    smart enough not only to ensure that all makefiles are included before the primary
    dependency graph is analyzed but also to look for rules to build them.^([21](footnote.xhtml#ch18fn21))
    Running `make` on this makefile produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, the rule to generate *program.d* is executed first, as
    `make` attempts to include that file. The elided section at ➊ refers to the many
    system header files traversed while recursively scanning the included set of headers.
    The file contains a dependency rule similar^([22](footnote.xhtml#ch18fn22)) to
    the one we wrote at ➋ in [Listing 18-29](ch18.xhtml#ch18ex29). (The reference
    to *program.c* is missing in our hand-coded rule’s dependency list because it’s
    redundant, though harmless.) You can also see from the console example that touching
    one of these included files now properly causes the *program.c* source file to
    be rebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problems with the mechanism outlined in [Listing 18-30](ch18.xhtml#ch18ex30)
    include the fact that the entire source tree must be traversed twice: once to
    check for and possibly generate the dependency files and then again to compile
    any modified source files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another problem is that if one header includes another, and the second header
    is modified, the object file will be updated but not the dependency file included
    by `make`. The next time the second-level header is modified, neither the object
    nor the dependency file will be updated. Deleted header files also cause problems:
    the build system doesn’t recognize that the deleted file was purposely removed,
    so it complains that files referenced in the existing dependencies are missing.'
  prefs: []
  type: TYPE_NORMAL
- en: Doing It in One Pass
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A more efficient way to handle automatic dependencies is to generate the dependency
    files as a side effect of compilation. [Listing 18-31](ch18.xhtml#ch18ex31) shows
    how this can be done by using the non-portable `-MMD` GNU extension compiler option
    (highlighted in the listing).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-31: Generating dependencies as a side effect of compilation*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, I’ve removed the second pattern rule (originally shown at ➊ in [Listing
    18-30](ch18.xhtml#ch18ex30)) and added a `-MMD` option to the compiler command
    line at ➊ in [Listing 18-31](ch18.xhtml#ch18ex31). This option tells the preprocessor
    to generate a *.d* file of the same base name as the *.c* file that it’s currently
    compiling. When `make` is executed on a clean work area, the `sinclude` statement
    at ➋ silently fails to include the missing *program.d* file, but it doesn’t matter
    because all of the object files will be built the first time anyway. During subsequent
    incremental builds, the previously built *program.d* is included, and its dependency
    rules take effect during those builds.
  prefs: []
  type: TYPE_NORMAL
- en: '*Built Sources Done Right*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The one-pass method just described is roughly the one that Automake uses to
    manage automatic dependencies, when possible. The problems with this approach
    are most often manifested when working with generated sources, including both
    *.c* files and *.h* files. For instance, let’s expand the example shown in [Listing
    18-31](ch18.xhtml#ch18ex31) a bit to contain a generated header file called *generated.h*,
    included by *program.h*. [Listing 18-32](ch18.xhtml#ch18ex32) shows a first attempt
    at this modification. Additions to [Listing 18-31](ch18.xhtml#ch18ex31) are highlighted
    in this listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-32: A makefile that works with a generated header file dependency*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, when we execute `make`, we find that the lack of an initial dependency
    file works against us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Because there is no initial secondary dependency information, `make` doesn’t
    know it needs to run the commands for the *generated.h* rule yet, because *generated.h*
    only depends on *Makefile*, which hasn’t changed. To fix this problem in a *Makefile.am*
    file, we could just list *generated.h* in the `BUILT_SOURCES` variable, as we
    did in [Listing 18-27](ch18.xhtml#ch18ex27) on [page 531](ch18.xhtml#page_531).
    This would add *generated.h* as the first dependency of the `all` and `check`
    targets, thereby forcing them to be built first in the likely event the user happens
    to enter `make`, `make all`, or `make check`.^([23](footnote.xhtml#ch18fn23))
  prefs: []
  type: TYPE_NORMAL
- en: 'The proper way to handle this problem is very simple, and it works every time
    in both makefiles and *Makefile.am* files: write a dependency rule between *program.o*
    and *generated.h*, as shown in the updated makefile in [Listing 18-33](ch18.xhtml#ch18ex33).
    The highlighted line contains the additional rule.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-33: Adding a hardcoded dependency rule for a generated header file*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new rule tells `make` about the relationship between *program.o* and *generated.h*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, touching *generated.h* (at ➊) causes `program` to be updated. Touching
    *Makefile* (at ➋) causes *generated.h* to be re-created first.
  prefs: []
  type: TYPE_NORMAL
- en: To implement the dependency rule shown in [Listing 18-33](ch18.xhtml#ch18ex33)
    in an Automake *Makefile.am* file, you’d use the highlighted rule shown in [Listing
    18-34](ch18.xhtml#ch18ex34).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-34: Replacing `BUILT_SOURCES` with a proper dependency rule*'
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly the same code shown previously in [Listing 18-27](ch18.xhtml#ch18ex27)
    on [page 531](ch18.xhtml#page_531), except that we’ve replaced the `BUILT_SOURCES`
    variable with a proper dependency rule. The advantage of this method is that it
    always works as it should; *generated.h* will always be built exactly when it
    needs to be, regardless of the target specified by the user.^([24](footnote.xhtml#ch18fn24))
  prefs: []
  type: TYPE_NORMAL
- en: If you had tried to generate a C source file rather than a header file, you’d
    find that you didn’t even need the additional dependency rule because *.o* files
    implicitly depend on their *.c* files. However, you must still list your generated
    *.c* file in the `nodist_program_SOURCES` variable to keep Automake from trying
    to distribute it.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you define your own rule, you suppress any rules that Automake may generate
    for that product. In the case of a specific object file, this is not likely to
    be a problem, but keep this Automake idiosyncrasy in mind when defining rules.*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all you really need to properly manage generated sources is
    a correctly written set of dependency rules as well as appropriate `nodist_*_SOURCES`
    variables. The `make` utility and the Autotools provide the required framework
    in the form of built-in `make` functionality, macros, and variables. You just
    have to put them together correctly. For example, in the *GNU Automake Manual*,
    see Section 8.1.2, which discusses program linking.^([25](footnote.xhtml#ch18fn25))
    This section refers to the `EXTRA_prog_DEPENDENCIES` variable as a mechanism for
    extending Automake’s generated dependency graph for a specific target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 11: Disabling Undesirable Targets'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes the Autotools do too much for you. Here’s an example from the Automake
    mailing list:'
  prefs: []
  type: TYPE_NORMAL
- en: I use automake in one of my projects along with texinfo. That project has documentation
    full of images. As you probably know, `` `make pdf' `` makes a PDF document from
    JPGs and PNGs, whereas `` `make dvi' `` requires EPSs. However, EPS images are
    insanely large (in this case like 15 times larger than JPGs).
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that running `` `make distcheck' `` results in error since the
    EPS images that should be there aren't there and `` `make distcheck' `` tries
    to run `make dvi' everywhere. I would like to run `` `make pdf' `` instead, or
    at least to disable building DVI. Is there any way to accomplish that?
  prefs: []
  type: TYPE_NORMAL
- en: 'First a little background information: The Automake `TEXINFOS` primary makes
    several documentation targets available to the end user, including `info`, `dvi`,
    `ps`, `pdf`, and `html`. It also provides several installation targets, including
    `install-info`, `install-dvi`, `install-ps`, `install-pdf`, and `install-html`.
    Of these targets, only `info` is automatically built with `make` or `make all`,
    and only `install-info` is executed with `make install`.^([26](footnote.xhtml#ch18fn26))'
  prefs: []
  type: TYPE_NORMAL
- en: However, it appears that the `distcheck` target also builds at least the `dvi`
    target, as well. The problem just outlined is that the poster doesn’t provide
    the Encapsulated PostScript (EPS) graphics files required to build the DVI documentation,
    so the `distcheck` target fails because it can’t build documentation that the
    poster doesn’t want to support anyway.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this issue, you would simply provide your own version of the target that
    does nothing, as shown in [Listing 18-35](ch18.xhtml#ch18ex35).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 18-35: Disabling the `dvi` target in a* Makefile.am *that specifies
    `TEXINFOS` primaries*'
  prefs: []
  type: TYPE_NORMAL
- en: With the one-line addition at ➊, `make distcheck` is back in business. Now,
    when it builds the `dvi` target, it succeeds because it does nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Other Automake primaries provide multiple additional targets as well. If you
    only want to support a subset of these targets, you can effectively disable the
    undesired targets by providing one of your own. If you’d like to be a bit more
    vocal about the disabling override, simply include an `echo` statement as a command
    that tells the user that your package doesn’t provide DVI documentation, but be
    careful not to execute anything that might fail in this override, or your user
    will be right back in the same boat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 12: Watch Those Tab Characters!'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having made the transition to Automake, you’re not using raw makefiles anymore,
    so why should you still care about tab characters? Remember that *Makefile.am*
    files are simply stylized makefiles. Ultimately, every line in a *Makefile.am*
    file will be either consumed directly by Automake, and then transformed into true
    `make` syntax, or copied directly into the final makefile. This means that tab
    characters matter within *Makefile.am* files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example from the Automake mailing list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: I have been reading both autoconf and automake manuals and as far as I can see,
    the above should work. However the files (a.cpp or b.cpp) [are] always added at
    the bottom of the generated Makefile and are therefore not used in the compilation.
    No matter what I try, I cannot get even the above code to generate a correct makefile,
    but obviously I am doing something wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer, provided by another poster, was simple and accurate, if not terse
    to a fault:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the indentation.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble here is that the two lines within the Automake conditional at ➊
    and ➋ are indented with tab characters.
  prefs: []
  type: TYPE_NORMAL
- en: You may recall from “Automake Configuration Features” on [page 380](ch14.xhtml#page_380),
    where I discussed the implementation of Automake conditionals, that text within
    conditionals is prefixed with an Autoconf substitution variable that is ultimately
    transformed into either an empty string or a hash mark. The implication here is
    that these lines are essentially either left as is or commented out within the
    final makefile. The commented lines really don’t concern us, but you can clearly
    see that if the uncommented lines in the makefile begin with the tab character,
    Automake will treat them as commands, rather than as definitions, and sort them
    accordingly in the final makefile. When `make` processes the generated makefile,
    it will attempt to interpret these lines as orphan commands.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Had the original poster used spaces to indent the conditional statements,
    they’d have had no problem.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The moral of the story: watch those tab characters!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Item 13: Packaging Choices'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ultimate goal of a package maintainer is to make it easy for the end user.
    System-level packages never have this problem because they don’t rely on anything
    that’s not part of the core operating system. But higher-level packages often
    rely on multiple subpackages, some of which are more pervasive than others.
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider the Subversion project. If you download the latest source
    archive from the Subversion project website, you’ll find that it comes in two
    flavors. The first contains only the Subversion source code, but if you unpack
    and build this project, you’ll find that you’ll need to download and install the
    Apache runtime and runtime utility (*apr* and *apr-utils*) packages, the *zlib-devel*
    package, and the *sqlite-devel* package. At this point, you can build Subversion,
    but to enable secure access to repositories via HTTPS, you’ll also need *neon*
    or *serf* and *openssl*.
  prefs: []
  type: TYPE_NORMAL
- en: The Subversion project maintainers felt that community adoption of Subversion
    was important enough to go the extra mile, so to speak. To help you out in your
    quest to build a functional Subversion package, they’ve provided a second package
    called *subversion-deps*, which contains a source-level distribution of some of
    Subversion’s more important requirements.^([27](footnote.xhtml#ch18fn27)) Simply
    unpack the *subversion-deps* source package in the same directory where you unpacked
    your *subversion* source package. The root directory in the *subversion-deps*
    package contains only subdirectories—one for each of these source-level dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose to add source packages to your projects’ build systems in the
    same manner. Of course, the process is much simpler if you’re using Automake.
    You need only call `AC_CONFIG_SUBDIRS` for subdirectories containing add-on projects
    in your build tree. `AC_CONFIG_SUBDIRS` quietly ignores missing subproject directories.
    I showed you an example of this process in [Chapter 14](ch14.xhtml), where I built
    the FLAIM toolkit as a subproject if it existed as a subdirectory within any of
    the higher-level FLAIM project directories.
  prefs: []
  type: TYPE_NORMAL
- en: Which packages should you ship with your package? The key lies in determining
    which packages your consumers are least likely to be able to find on their own.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I hope you find these solutions—indeed, this book—useful on your quest to create
    a really great user experience with your open source projects. I began this book
    with the statement that people often start out hating the Autotools because they
    don’t understand the purpose of the Autotools. By now, you should have a fairly
    well-developed sense of this purpose. If you were disinclined to use the Autotools
    before, then I hope I’ve given you reason to reconsider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the famously misquoted line from Albert Einstein: “Everything should
    be made as simple as possible, but no simpler.”^([28](footnote.xhtml#ch18fn28))
    Not all things can be made so simple that anyone can master them with little training.
    This is especially true when it comes to processes that are designed to make life
    simpler for others. The Autotools offer the ability for experts—programmers and
    software engineers—to make open source software more accessible to end users.
    Let’s face it—this process is less than trivial, but the Autotools attempt to
    make it as simple as possible.'
  prefs: []
  type: TYPE_NORMAL
